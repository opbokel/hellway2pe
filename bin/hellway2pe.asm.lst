------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     58  f000		       00 38	   OP_SCORE_FONT_COLOR_GOOD =	$38
     59  f000
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 e7	   OP_SCORE_FONT_COLOR_BAD =	$E7
     62  f000
     63  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     64  f000		       00 37	   OP_SCORE_FONT_COLOR_START =	$37	;Cannot be the same as good, font colors = game state
     65  f000
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000		       00 ab	   OP_SCORE_FONT_COLOR_OVER =	$AB
     68  f000
     69  f000		       00 f9	   PLAYER0_COLOR =	$F9
     70  f000		       00 98	   PLAYER1_COLOR =	$98
     71  f000
     72  f000		       00 20	   PLAYER_0_X_START =	32	;
     73  f000		       00 29	   PLAYER_1_X_START =	41	;
     74  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     75  f000
     76  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     77  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     78  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     79  f000
     80  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     81  f000
     82  f000		       00 00	   BLACK      =	$00	;
     83  f000
     84  f000		       00 10	   MAX_GAME_MODE =	16
     85  f000
     86  f000		       00 08	   PARALLAX_SIZE =	8
     87  f000
     88  f000		       00 05	   HALF_TEXT_SIZE =	5
     89  f000
     90  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     91  f000
     92  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     93  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     94  f000		       00 00	   QR_CODE_COLOR =	$00
     95  f000		       00 19	   QR_CODE_SIZE =	25
     96  f000
     97  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     98  f000
     99  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    100  f000		       00 29	   VBLANK_TIMER =	41
    101  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    102  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    103  f000
    104  f000		       00 08	   ENGINE_VOLUME =	8
    105  f000
    106  f000		       00 08	   CAR_SIZE   =	8
    107  f000
    108  f000		       00 80	   GRP0Cache  =	$80
    109  f000		       00 81	   PF0Cache   =	$81
    110  f000		       00 82	   PF1Cache   =	$82
    111  f000		       00 83	   PF2Cache   =	$83
    112  f000		       00 84	   GRP1Cache  =	$84
    113  f000		       00 85	   ENABLCache =	$85
    114  f000		       00 86	   ENAM0Cache =	$86
    115  f000		       00 87	   ENAM1Cache =	$87
    116  f000
    117  f000		       00 8c	   FrameCount0 =	$8C	;
    118  f000		       00 8d	   FrameCount1 =	$8D	;
    119  f000
    120  f000		       00 8e	   CollisionCounter =	$8E
    121  f000		       00 8f	   OpCollisionCounter =	$8F
    122  f000
    123  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    124  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    125  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    126  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    127  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    128  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    129  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    130  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    131  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000		       00 b4	   Tmp4       =	$B4
    139  f000		       00 b5	   Tmp5       =	$B5
    140  f000
    141  f000		       00 b6	   Player0X   =	$B6
    142  f000		       00 b7	   Player1X   =	$B7
    143  f000		       00 b8	   CountdownTimer =	$B8
    144  f000		       00 b9	   OpCountdownTimer =	$B9
    145  f000		       00 ba	   Traffic0Msb =	$BA
    146  f000		       00 bb	   OpTraffic0Msb =	$BB
    147  f000		       00 bc	   SwitchDebounceCounter =	$BC
    148  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    149  f000		       00 be	   TrafficChance =	$BE
    150  f000		       00 bf	   OpTrafficChance =	$BF
    151  f000
    152  f000		       00 c0	   CheckpointTime =	$C0
    153  f000		       00 c1	   OpCheckpointTime =	$C1
    154  f000		       00 c2	   TrafficColor =	$C2
    155  f000		       00 c3	   OpTrafficColor =	$C3
    156  f000		       00 c4	   CurrentDifficulty =	$C4
    157  f000		       00 c5	   OpCurrentDifficulty =	$C5
    158  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    159  f000
    160  f000		       00 c7	   CurrentCarId =	$C7
    161  f000		       00 c8	   OpCurrentCarId =	$C8
    162  f000
    163  f000		       00 c9	   ScoreFontColor =	$C9
    164  f000		       00 ca	   OpScoreFontColor =	$CA
    165  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    166  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    167  f000		       00 cd	   NextCheckpoint =	$CD
    168  f000		       00 ce	   OpNextCheckpoint =	$CE
    169  f000		       00 cf	   OpponentLine =	$CF
    170  f000
    171  f000		       00 d0	   ScoreD0    =	$D0
    172  f000		       00 d1	   ScoreD1    =	$D1
    173  f000		       00 d2	   ScoreD2    =	$D2
    174  f000		       00 d3	   ScoreD3    =	$D3
    175  f000		       00 d4	   ScoreD4    =	$D4
    176  f000
    177  f000		       00 d5	   Gear       =	$D5
    178  f000		       00 d6	   OpGear     =	$D6
    179  f000
    180  f000		       00 d7	   CarSpritePointerL =	$D7
    181  f000		       00 d8	   CarSpritePointerH =	$D8
    182  f000
    183  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    184  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    185  f000
    186  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    187  f000
    188  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    189  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    190  f000
    191  f000		       00 de	   Player0SpeedL =	$DE
    192  f000		       00 df	   Player1SpeedL =	$DF
    193  f000		       00 f0	   Player0SpeedH =	$F0
    194  f000		       00 f1	   Player1SpeedH =	$F1
    195  f000
    196  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 11 f7 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 89 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 de		      STA	Player0SpeedL
    257  f059		       85 df		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   StoreCurrentDifficulty
    274  f071		       86 c4		      STX	CurrentDifficulty
    275  f073		       86 c5		      STX	OpCurrentDifficulty
    276  f075		       a2 00		      LDX	#0
    277  f077		       20 c9 f6 	      JSR	ConfigureDifficulty
    278  f07a		       e8		      INX
    279  f07b		       20 c9 f6 	      JSR	ConfigureDifficulty
    280  f07e
    281  f07e				   SetGameNotRunning
    282  f07e		       a9 00		      LDA	#0
    283  f080		       85 bd		      STA	GameStatus
    284  f082
    285  f082				   ConfigureTimer
    286  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    287  f084		       85 b8		      STA	CountdownTimer	;3
    288  f086		       85 b9		      STA	OpCountdownTimer	;3
    289  f088
    290  f088				   ConfigurePlayer1XPosition
    291  f088		       a9 29		      LDA	#PLAYER_1_X_START	;2
    292  f08a		       85 b7		      STA	Player1X	;3
    293  f08c
    294  f08c				   ConfigureOpNextCheckpoint
    295  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    296  f08e		       85 ce		      STA	OpNextCheckpoint
    297  f090
    298  f090				   HPositioning 		; Avoid sleep doing needed stuff
    299  f090		       85 02		      STA	WSYNC
    300  f092
    301  f092				   ConfigurePlayer0XPosition
    302  f092		       a9 20		      LDA	#PLAYER_0_X_START	;2
    303  f094		       85 b6		      STA	Player0X	;3
    304  f096
    305  f096				   ConfigureMissileSize
    306  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    307  f098		       85 04		      STA	NUSIZ0	;3
    308  f09a		       85 05		      STA	NUSIZ1	;3
    309  f09c
    310  f09c				   ConfigureNextCheckpoint
    311  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    312  f09e		       85 cd		      STA	NextCheckpoint
    313  f0a0
    314  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    315  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	5	;
      1  f0a2				   .CYCLES    SET	5
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    317  f0a5		       85 12		      STA	RESM0
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    319  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    321  f0ab		       85 13		      STA	RESM1
      0  f0ad					      SLEEP	3
      1  f0ad				   .CYCLES    SET	3
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad					      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad					      ELSE
     12  f0ad		       24 00		      bit	VSYNC
     13  f0af					      ENDIF
     14  f0af				   .CYCLES    SET	.CYCLES - 3
     15  f0af					      ENDIF
     16  f0af
     17  f0af				  -	      REPEAT	.CYCLES / 2
     18  f0af				  -	      nop
     19  f0af					      REPEND
    323  f0af
    324  f0af		       a9 d0		      LDA	#$D0
    325  f0b1		       85 24		      STA	HMBL
    326  f0b3		       85 22		      STA	HMM0
    327  f0b5		       85 23		      STA	HMM1
    328  f0b7		       85 02		      STA	WSYNC
    329  f0b9		       85 2a		      STA	HMOVE
    330  f0bb		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    331  f0bd		       85 2b		      STA	HMCLR
      0  f0bf					      SLEEP	31
      1  f0bf				   .CYCLES    SET	31
      2  f0bf
      3  f0bf				  -	      IF	.CYCLES < 2
      4  f0bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bf				  -	      ERR
      6  f0bf					      ENDIF
      7  f0bf
      8  f0bf					      IF	.CYCLES & 1
      9  f0bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bf				  -	      nop	0
     11  f0bf					      ELSE
     12  f0bf		       24 00		      bit	VSYNC
     13  f0c1					      ENDIF
     14  f0c1				   .CYCLES    SET	.CYCLES - 3
     15  f0c1					      ENDIF
     16  f0c1
     17  f0c1					      REPEAT	.CYCLES / 2
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     19  f0cf					      REPEND
    333  f0cf		       85 10		      STA	RESP0
    334  f0d1		       85 11		      STA	RESP1
    335  f0d3
    336  f0d3				   WaitResetToEnd
    337  f0d3		       ad 84 02 	      LDA	INTIM
    338  f0d6		       d0 fb		      BNE	WaitResetToEnd
    339  f0d8
    340  f0d8				   MainLoop
    341  f0d8		       a9 02		      LDA	#2
    342  f0da		       85 00		      STA	VSYNC
    343  f0dc		       85 02		      STA	WSYNC
    344  f0de		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    345  f0e0							;Some free cycles here!
    346  f0e0				   PrepareMaxHMove
    347  f0e0		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    348  f0e2		       85 09		      STA	COLUBK
      0  f0e4					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e4				   .CYCLES    SET	24 - 11
      2  f0e4
      3  f0e4				  -	      IF	.CYCLES < 2
      4  f0e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e4				  -	      ERR
      6  f0e4					      ENDIF
      7  f0e4
      8  f0e4					      IF	.CYCLES & 1
      9  f0e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e4				  -	      nop	0
     11  f0e4					      ELSE
     12  f0e4		       24 00		      bit	VSYNC
     13  f0e6					      ENDIF
     14  f0e6				   .CYCLES    SET	.CYCLES - 3
     15  f0e6					      ENDIF
     16  f0e6
     17  f0e6					      REPEAT	.CYCLES / 2
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    350  f0eb		       a9 80		      LDA	#$80
    351  f0ed		       85 24		      STA	HMBL
    352  f0ef		       85 22		      STA	HMM0
    353  f0f1		       85 23		      STA	HMM1
    354  f0f3		       85 20		      STA	HMP0
    355  f0f5		       85 21		      STA	HMP1
    356  f0f7		       85 02		      STA	WSYNC
    357  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    358  f0fb
    359  f0fb				   ConfigVBlankTimer
    360  f0fb		       a5 c6		      LDA	GameMode
    361  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    362  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    363  f101		       a9 29		      LDA	#VBLANK_TIMER
    364  f103		       4c 08 f1 	      JMP	SetVblankTimer
    365  f106				   SetVblankTimerQrCode
    366  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    367  f108
    368  f108				   SetVblankTimer
    369  f108		       85 02		      STA	WSYNC	;3
    370  f10a		       8d 96 02 	      STA	TIM64T	;3	
    371  f10d		       a9 00		      LDA	#0	;2
    372  f10f		       85 00		      STA	VSYNC	;3	
    373  f111
    374  f111				   RandomizeGame
    375  f111		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f113		       d0 2d		      BNE	EndRandomizeGame
    377  f115		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f117		       29 02		      AND	#%00000010
    379  f119		       f0 24		      BEQ	DeterministicGame
    380  f11b		       a6 96		      LDX	TrafficOffset1 + 2
    381  f11d		       bd 00 fe 	      LDA	AesTable,X
    382  f120		       45 8c		      EOR	FrameCount0
    383  f122		       85 96		      STA	TrafficOffset1 + 2
    384  f124		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f126		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f128		       bd 00 fe 	      LDA	AesTable,X
    387  f12b		       45 8c		      EOR	FrameCount0
    388  f12d		       85 9a		      STA	TrafficOffset2 + 2
    389  f12f		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f131		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f133		       bd 00 fe 	      LDA	AesTable,X
    392  f136		       45 8c		      EOR	FrameCount0
    393  f138		       85 9e		      STA	TrafficOffset3 + 2
    394  f13a		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13c		       4c 42 f1 	      JMP	EndRandomizeGame
    396  f13f
    397  f13f				   DeterministicGame
    398  f13f		       20 11 f7 	      JSR	DefaultOffsets
    399  f142
    400  f142				   EndRandomizeGame
    401  f142
    402  f142
    403  f142				   CountFrame
    404  f142		       e6 8c		      INC	FrameCount0	; 5
    405  f144		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    406  f146		       e6 8d		      INC	FrameCount1	; 5 
    407  f148				   SkipIncFC1
    408  f148
    409  f148				   CallDrawQrCode
    410  f148		       a5 c6		      LDA	GameMode
    411  f14a		       c9 10		      CMP	#MAX_GAME_MODE
    412  f14c		       d0 03		      BNE	TestIsGameRunning
    413  f14e		       4c 77 fa 	      JMP	DrawQrCode
    414  f151
    415  f151							;Does not update the game if not running
    416  f151				   TestIsGameRunning
    417  f151		       a5 bd		      LDA	GameStatus	;3
    418  f153		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    419  f155				   SelectCarWithDpadCall		; Only do it when game is stoped
    420  f155		       a2 00		      LDX	#0	; Player 0
    421  f157		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    422  f159		       85 b0		      STA	Tmp0
    423  f15b		       20 15 f8 	      JSR	SelectCarWithDpad
    424  f15e		       e8		      INX		; Player 1
    425  f15f		       20 15 f8 	      JSR	SelectCarWithDpad
    426  f162
    427  f162							; Needs to draw the opponent in the correct line even when game stoped  
    428  f162							; Draeing is a destructive operation
    429  f162		       20 27 f8 	      JSR	ProcessOpponentLine
    430  f165
    431  f165				   CallConfigureCarSprites
    432  f165		       20 cf f7 	      JSR	ConfigureCarSprites
    433  f168				   SkipUpdateLogicJump
    434  f168		       4c a0 f1 	      JMP	SkipUpdateLogic
    435  f16b				   ContinueWithGameLogic
    436  f16b
    437  f16b				   CallEverySecond		; Timer for now
    438  f16b		       a2 00		      LDX	#0
    439  f16d		       20 4d fa 	      JSR	EverySecond
    440  f170		       e8		      INX
    441  f171		       20 4d fa 	      JSR	EverySecond
    442  f174
    443  f174				   CallProcessSpeed
    444  f174		       a2 00		      LDX	#0
    445  f176		       20 61 f9 	      JSR	ProcessSpeed
    446  f179
    447  f179		       e8		      INX		; Player 1
    448  f17a		       20 61 f9 	      JSR	ProcessSpeed
    449  f17d
    450  f17d				   CallUpdateOffsets
    451  f17d		       a2 00		      LDX	#0	; Player 0
    452  f17f		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    453  f181		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    454  f183		       a5 de		      LDA	Player0SpeedL
    455  f185		       85 b4		      STA	Tmp4
    456  f187		       a5 f0		      LDA	Player0SpeedH
    457  f189		       85 b5		      STA	Tmp5
    458  f18b		       20 0e f9 	      JSR	UpdateOffsets
    459  f18e
    460  f18e							;LDX Exits the call with correct value.
    461  f18e		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    462  f190		       85 b3		      STA	Tmp3
    463  f192		       a5 df		      LDA	Player1SpeedL
    464  f194		       85 b4		      STA	Tmp4
    465  f196		       a5 f1		      LDA	Player1SpeedH
    466  f198		       85 b5		      STA	Tmp5
    467  f19a		       20 0e f9 	      JSR	UpdateOffsets
    468  f19d
    469  f19d				   CallProcessOpponentLine
    470  f19d		       20 27 f8 	      JSR	ProcessOpponentLine
    471  f1a0
    472  f1a0				   SkipUpdateLogic		; Continue here if not paused
    473  f1a0
    474  f1a0				   CallStatusUpdateSbr
    475  f1a0		       a2 00		      LDX	#0
    476  f1a2		       20 5a fa 	      JSR	CalculateGear
    477  f1a5		       20 67 fa 	      JSR	ProcessScoreFontColor
    478  f1a8		       e8		      INX
    479  f1a9		       20 5a fa 	      JSR	CalculateGear
    480  f1ac		       20 67 fa 	      JSR	ProcessScoreFontColor
    481  f1af
    482  f1af				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    483  f1af		       a5 8c		      LDA	FrameCount0
    484  f1b1		       29 01		      AND	#%00000001
    485  f1b3		       d0 0c		      BNE	CallProcessPlayer1Status
    486  f1b5				   CallProcessPlayer0Status
    487  f1b5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    488  f1b7		       85 b0		      STA	Tmp0
    489  f1b9		       a2 00		      LDX	#0
    490  f1bb		       20 04 fa 	      JSR	ProcessPlayerStatus
    491  f1be		       4c ca f1 	      JMP	EndCallProcessPlayerStatus
    492  f1c1				   CallProcessPlayer1Status
    493  f1c1		       a5 a2		      LDA	OpTrafficOffset0 + 2
    494  f1c3		       85 b0		      STA	Tmp0
    495  f1c5		       a2 01		      LDX	#1
    496  f1c7		       20 04 fa 	      JSR	ProcessPlayerStatus
    497  f1ca				   EndCallProcessPlayerStatus
    498  f1ca
    499  f1ca				   CallProcessPlayerSprites
    500  f1ca		       20 cf f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    501  f1cd
    502  f1cd				   CallProcessSound		; We might save cycles by updating one channel per frame.
    503  f1cd		       a2 00		      LDX	#0
    504  f1cf		       a5 92		      LDA	TrafficOffset0 + 2
    505  f1d1		       85 b1		      STA	Tmp1
    506  f1d3		       20 de f5 	      JSR	ProcessSound
    507  f1d6		       e8		      INX		; Player 1
    508  f1d7		       a5 a2		      LDA	OpTrafficOffset0 + 2
    509  f1d9		       85 b1		      STA	Tmp1
    510  f1db		       20 de f5 	      JSR	ProcessSound
    511  f1de
    512  f1de				   ChooseTextSide		; 
    513  f1de		       a5 8c		      LDA	FrameCount0	;3
    514  f1e0		       29 01		      AND	#%00000001
    515  f1e2		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    516  f1e4		       4c 9a f2 	      JMP	RightScoreWrite
    517  f1e7
    518  f1e7				   LeftScoreWrite
    519  f1e7		       a5 c9		      LDA	ScoreFontColor
    520  f1e9		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    521  f1eb		       f0 77		      BEQ	PrintCheckpoint
    522  f1ed		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    523  f1ef		       f0 7b		      BEQ	PrintStartGame
    524  f1f1		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    525  f1f3		       f0 3a		      BEQ	ProcessPlayer0OverText
    526  f1f5		       a5 bd		      LDA	GameStatus
    527  f1f7		       f0 7b		      BEQ	PrintHellwayLeft
    528  f1f9
    529  f1f9				   Digit0Timer
    530  f1f9		       a5 b8		      LDA	CountdownTimer	;3
    531  f1fb		       85 b0		      STA	Tmp0
    532  f1fd		       20 01 f8 	      JSR	BINBCD8
    533  f200							; LDA Tmp1 Also returned in A
    534  f200		       29 0f		      AND	#%00001111	;2
    535  f202		       aa		      TAX		; 2
    536  f203		       bd 6c fc 	      LDA	FontLookup,X	;4 
    537  f206		       85 d1		      STA	ScoreD1	;3
    538  f208
    539  f208				   Digit1Timer
    540  f208		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    541  f20a		       4a		      LSR		; 2
    542  f20b		       4a		      LSR		; 2
    543  f20c		       4a		      LSR		; 2
    544  f20d		       4a		      LSR		; 2
    545  f20e		       aa		      TAX		; 2
    546  f20f		       bd 6c fc 	      LDA	FontLookup,X	;4
    547  f212		       85 d0		      STA	ScoreD0	;3
    548  f214
    549  f214				   SpeedBar
    550  f214		       a5 de		      LDA	Player0SpeedL
    551  f216		       29 e0		      AND	#%11100000	;2 Discard the last bits
    552  f218		       18		      CLC
    553  f219		       2a		      ROL		;First goes into carry
    554  f21a		       2a		      ROL
    555  f21b		       2a		      ROL
    556  f21c		       2a		      ROL
    557  f21d		       85 b0		      STA	Tmp0
    558  f21f		       a5 f0		      LDA	Player0SpeedH
    559  f221		       0a		      ASL
    560  f222		       0a		      ASL
    561  f223		       0a		      ASL
    562  f224		       05 b0		      ORA	Tmp0
    563  f226		       aa		      TAX		; 2
    564  f227		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    565  f22a		       85 d2		      STA	ScoreD2	;3
    566  f22c		       4c 3d f2 	      JMP	DistanceCheckpointCount
    567  f22f
    568  f22f				   ProcessPlayer0OverText
    569  f22f		       a5 f2		      LDA	IsOpponentInFront
    570  f231		       30 05		      BMI	PrintPlayer0Lose
    571  f233				   PrintPlayer0Win
    572  f233		       a2 21		      LDX	#<WinText
    573  f235		       4c 3a f2 	      JMP	PrintPlayer0Status
    574  f238				   PrintPlayer0Lose
    575  f238		       a2 24		      LDX	#<LoseText
    576  f23a				   PrintPlayer0Status
    577  f23a		       20 26 f7 	      JSR	PrintStaticText
    578  f23d
    579  f23d				   DistanceCheckpointCount		; Will run all letters in the future
    580  f23d		       a5 ba		      LDA	Traffic0Msb
    581  f23f		       29 01		      AND	#%00000001
    582  f241		       0a		      ASL
    583  f242		       0a		      ASL
    584  f243		       0a		      ASL
    585  f244		       0a		      ASL
    586  f245		       85 b0		      STA	Tmp0
    587  f247		       a5 92		      LDA	TrafficOffset0 + 2	;3
    588  f249		       29 f0		      AND	#%11110000	;2
    589  f24b		       4a		      LSR
    590  f24c		       4a		      LSR
    591  f24d		       4a		      LSR
    592  f24e		       4a		      LSR
    593  f24f		       05 b0		      ORA	Tmp0
    594  f251		       aa		      TAX		; 2
    595  f252		       bd 6c fc 	      LDA	FontLookup,X	;4 
    596  f255		       85 d3		      STA	ScoreD3	;3
    597  f257
    598  f257				   DistanceBar		; 16 subdivisions per checkpoint
    599  f257		       a5 92		      LDA	TrafficOffset0 + 2	;3
    600  f259		       29 0f		      AND	#%00001111	;2
    601  f25b		       aa		      TAX		; 2
    602  f25c		       bd 8c fc 	      LDA	BarLookup,X	;4 
    603  f25f		       85 d4		      STA	ScoreD4	;3
    604  f261
    605  f261				   EndDrawDistance
    606  f261		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    607  f264
    608  f264				   PrintCheckpoint
    609  f264		       a2 00		      LDX	#<CheckpointText
    610  f266		       20 26 f7 	      JSR	PrintStaticText
    611  f269		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    612  f26c				   PrintStartGame
    613  f26c		       a2 17		      LDX	#<GoText
    614  f26e		       20 26 f7 	      JSR	PrintStaticText
    615  f271		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    616  f274
    617  f274				   PrintHellwayLeft
    618  f274		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    619  f276		       30 08		      BMI	ContinueWithDefaultLeftText
    620  f278				   Player0IsReady
    621  f278		       a2 1c		      LDX	#<ReadyText
    622  f27a		       20 26 f7 	      JSR	PrintStaticText
    623  f27d		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    624  f280				   ContinueWithDefaultLeftText
    625  f280		       a5 8d		      LDA	FrameCount1
    626  f282		       29 01		      AND	#1
    627  f284		       d0 05		      BNE	PrintCreditsLeft
    628  f286		       a2 04		      LDX	#<HellwayLeftText - 1	; Padding
    629  f288		       4c 8d f2 	      JMP	PrintGameMode
    630  f28b				   PrintCreditsLeft
    631  f28b		       a2 0d		      LDX	#<OpbText - 1	; Padding
    632  f28d
    633  f28d				   PrintGameMode
    634  f28d		       20 26 f7 	      JSR	PrintStaticText
    635  f290		       a6 c6		      LDX	GameMode
    636  f292		       bd 6c fc 	      LDA	FontLookup,X	;4 
    637  f295		       85 d0		      STA	ScoreD0	;3
    638  f297		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    639  f29a
    640  f29a				   RightScoreWrite
    641  f29a		       a5 bd		      LDA	GameStatus
    642  f29c		       f0 79		      BEQ	PrintHellwayRight
    643  f29e		       a5 ca		      LDA	OpScoreFontColor
    644  f2a0		       c9 38		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    645  f2a2		       f0 c0		      BEQ	PrintCheckpoint
    646  f2a4		       c9 37		      CMP	#OP_SCORE_FONT_COLOR_START
    647  f2a6		       f0 c4		      BEQ	PrintStartGame
    648  f2a8		       c9 ab		      CMP	#OP_SCORE_FONT_COLOR_OVER
    649  f2aa		       f0 36		      BEQ	ProcessPlayer1OverText
    650  f2ac
    651  f2ac				   OpDigit0Timer
    652  f2ac		       a5 b9		      LDA	OpCountdownTimer	;3
    653  f2ae		       85 b0		      STA	Tmp0
    654  f2b0		       20 01 f8 	      JSR	BINBCD8
    655  f2b3							; LDA Tmp1 Also returned in A
    656  f2b3		       29 0f		      AND	#%00001111	;2
    657  f2b5		       aa		      TAX		; 2
    658  f2b6		       bd 6c fc 	      LDA	FontLookup,X	;4 
    659  f2b9		       85 d4		      STA	ScoreD4	;3
    660  f2bb
    661  f2bb				   OpDigit1Timer
    662  f2bb		       a5 b1		      LDA	Tmp1	;3
    663  f2bd		       4a		      LSR		; 2
    664  f2be		       4a		      LSR		; 2
    665  f2bf		       4a		      LSR		; 2
    666  f2c0		       4a		      LSR		; 2
    667  f2c1		       aa		      TAX		; 2
    668  f2c2		       bd 6c fc 	      LDA	FontLookup,X	;4
    669  f2c5		       85 d3		      STA	ScoreD3	;3
    670  f2c7
    671  f2c7				   OpSpeedBar
    672  f2c7		       a5 df		      LDA	Player1SpeedL
    673  f2c9		       29 e0		      AND	#%11100000	;2 Discard the last bits
    674  f2cb		       18		      CLC
    675  f2cc		       2a		      ROL		;First goes into carry
    676  f2cd		       2a		      ROL
    677  f2ce		       2a		      ROL
    678  f2cf		       2a		      ROL
    679  f2d0		       85 b0		      STA	Tmp0
    680  f2d2		       a5 f1		      LDA	Player1SpeedH
    681  f2d4		       0a		      ASL
    682  f2d5		       0a		      ASL
    683  f2d6		       0a		      ASL
    684  f2d7		       05 b0		      ORA	Tmp0
    685  f2d9		       aa		      TAX		; 2
    686  f2da		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    687  f2dd		       85 d2		      STA	ScoreD2	;3
    688  f2df		       4c f0 f2 	      JMP	OpDistanceCheckpointCount
    689  f2e2
    690  f2e2				   ProcessPlayer1OverText
    691  f2e2		       a5 f2		      LDA	IsOpponentInFront
    692  f2e4		       30 05		      BMI	PrintPlayer1Lose
    693  f2e6				   PrintPlayer1Win
    694  f2e6		       a2 1f		      LDX	#<WinText - 2
    695  f2e8		       4c ed f2 	      JMP	PrintPlayer1Status
    696  f2eb				   PrintPlayer1Lose
    697  f2eb		       a2 22		      LDX	#<LoseText - 2
    698  f2ed				   PrintPlayer1Status
    699  f2ed		       20 26 f7 	      JSR	PrintStaticText
    700  f2f0
    701  f2f0				   OpDistanceCheckpointCount
    702  f2f0		       a5 bb		      LDA	OpTraffic0Msb
    703  f2f2		       29 01		      AND	#%00000001
    704  f2f4		       0a		      ASL
    705  f2f5		       0a		      ASL
    706  f2f6		       0a		      ASL
    707  f2f7		       0a		      ASL
    708  f2f8		       85 b0		      STA	Tmp0
    709  f2fa		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    710  f2fc		       29 f0		      AND	#%11110000	;2
    711  f2fe		       4a		      LSR
    712  f2ff		       4a		      LSR
    713  f300		       4a		      LSR
    714  f301		       4a		      LSR
    715  f302		       05 b0		      ORA	Tmp0
    716  f304		       aa		      TAX		; 2
    717  f305		       bd 6c fc 	      LDA	FontLookup,X	;4 
    718  f308		       85 d1		      STA	ScoreD1	;3
    719  f30a
    720  f30a				   OpDistanceBar		; 16 subdivisions per checkpoint
    721  f30a		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    722  f30c		       29 0f		      AND	#%00001111	;2
    723  f30e		       aa		      TAX		; 2
    724  f30f		       bd 8c fc 	      LDA	BarLookup,X	;4 
    725  f312		       85 d0		      STA	ScoreD0	;3
    726  f314		       4c 36 f3 	      JMP	RightScoreWriteEnd
    727  f317
    728  f317				   PrintHellwayRight
    729  f317		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    730  f319		       30 08		      BMI	ContinueWithDefaultRightText
    731  f31b				   Player1IsReady
    732  f31b		       a2 1c		      LDX	#<ReadyText
    733  f31d		       20 26 f7 	      JSR	PrintStaticText
    734  f320		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    735  f323				   ContinueWithDefaultRightText
    736  f323		       a5 8d		      LDA	FrameCount1
    737  f325		       29 01		      AND	#1
    738  f327		       d0 05		      BNE	PrintCreditsRight
    739  f329		       a2 09		      LDX	#<HellwayRightText
    740  f32b		       4c 30 f3 	      JMP	PrintRightIntro
    741  f32e				   PrintCreditsRight
    742  f32e		       a2 12		      LDX	#<YearText
    743  f330				   PrintRightIntro
    744  f330		       20 26 f7 	      JSR	PrintStaticText
    745  f333		       4c 36 f3 	      JMP	RightScoreWriteEnd
    746  f336				   RightScoreWriteEnd
    747  f336
    748  f336
    749  f336				   ConfigurePFForScore
    750  f336		       20 78 f6 	      JSR	ClearAll
    751  f339		       a9 02		      LDA	#%00000010	; Score mode
    752  f33b		       85 0a		      STA	CTRLPF
    753  f33d		       a5 8c		      LDA	FrameCount0	;3
    754  f33f		       29 01		      AND	#%00000001
    755  f341		       f0 0b		      BEQ	LeftScoreOn	; Half of the screen with the correct colors.
    756  f343				   RightScoreOn
    757  f343		       a5 ca		      LDA	OpScoreFontColor
    758  f345		       85 07		      STA	COLUP1
    759  f347		       a9 00		      LDA	#BACKGROUND_COLOR
    760  f349		       85 06		      STA	COLUP0
    761  f34b		       4c 56 f3 	      JMP	CallWaitForVblankEnd
    762  f34e				   LeftScoreOn
    763  f34e		       a5 c9		      LDA	ScoreFontColor
    764  f350		       85 06		      STA	COLUP0
    765  f352		       a9 00		      LDA	#BACKGROUND_COLOR
    766  f354		       85 07		      STA	COLUP1
    767  f356
    768  f356							; After here we are going to update the screen, No more heavy code
    769  f356				   CallWaitForVblankEnd
    770  f356		       20 a0 f7 	      JSR	WaitForVblankEnd
    771  f359
    772  f359				   DrawScoreHud
    773  f359		       20 44 f7 	      JSR	PrintScore
    774  f35c
    775  f35c							; 4 lines to go crazy
    776  f35c		       85 02		      STA	WSYNC
    777  f35e							;STA HMOVE
    778  f35e
    779  f35e		       85 02		      STA	WSYNC
    780  f360		       85 2a		      STA	HMOVE
    781  f362
    782  f362				   PrepareForTraffic
    783  f362		       20 8e f6 	      JSR	ClearPF	; 32
    784  f365
    785  f365		       85 02		      STA	WSYNC
    786  f367		       85 2a		      STA	HMOVE
    787  f369		       85 02		      STA	WSYNC
    788  f36b		       85 2a		      STA	HMOVE
    789  f36d
    790  f36d		       a9 30		      LDA	#%00110000	; 2 Score mode
    791  f36f		       85 0a		      STA	CTRLPF	;3
    792  f371
    793  f371		       a5 8c		      LDA	FrameCount0	;3
    794  f373		       29 01		      AND	#%00000001	;2
    795  f375		       aa		      TAX		;2
    796  f376		       b5 c2		      LDA	TrafficColor,X	;4
    797  f378		       85 08		      STA	COLUPF	;3
    798  f37a
    799  f37a		       a9 98		      LDA	#PLAYER1_COLOR	;2
    800  f37c		       85 07		      STA	COLUP1	;3
    801  f37e
    802  f37e		       a5 c9		      LDA	ScoreFontColor	;3
    803  f380		       85 06		      STA	COLUP0	;3
    804  f382
    805  f382		       a5 ca		      LDA	OpScoreFontColor	;3
    806  f384		       85 07		      STA	COLUP1	;3
    807  f386
    808  f386		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    809  f388
    810  f388		       a5 8c		      LDA	FrameCount0	;Brach flag
    811  f38a		       29 01		      AND	#%00000001
    812  f38c
    813  f38c		       d0 03		      BNE	OpScanLoop	;2
    814  f38e		       4c 4b f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    815  f391							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    816  f391
    817  f391							;main scanline loop...
    818  f391				   OpScanLoop
    819  f391		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    820  f393
    821  f393		       a5 80		      LDA	GRP0Cache	;3
    822  f395		       85 1b		      STA	GRP0	;3
    823  f397
    824  f397		       a5 84		      LDA	GRP1Cache	;3
    825  f399		       85 1c		      STA	GRP1	;3
    826  f39b
    827  f39b		       a5 85		      LDA	ENABLCache	;3
    828  f39d		       85 1f		      STA	ENABL	;3
    829  f39f
    830  f39f		       a5 86		      LDA	ENAM0Cache	;3
    831  f3a1		       85 1d		      STA	ENAM0	;3
    832  f3a3
    833  f3a3		       a5 87		      LDA	ENAM1Cache	;3
    834  f3a5		       85 1e		      STA	ENAM1	;3
    835  f3a7
    836  f3a7		       a5 81		      LDA	PF0Cache	;3
    837  f3a9		       85 0d		      STA	PF0	;3
    838  f3ab
    839  f3ab		       a9 00		      LDA	#0	;2
    840  f3ad							;STA PF0	     ;3
    841  f3ad		       85 80		      STA	GRP0Cache	;3
    842  f3af		       85 86		      STA	ENAM0Cache	;3
    843  f3b1		       85 85		      STA	ENABLCache	;3
    844  f3b3		       85 87		      STA	ENAM1Cache	; 3
    845  f3b5							;STA GRP1Cache ;3
    846  f3b5		       85 0d		      STA	PF0	;3
    847  f3b7							;STA PF2	     ;3
    848  f3b7
    849  f3b7		       a5 83		      LDA	PF2Cache	;3
    850  f3b9		       85 0f		      STA	PF2	;3
    851  f3bb
    852  f3bb				   OpDrawCar0
    853  f3bb		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    854  f3bd		       b0 04		      BCS	OpSkipDrawCar	;2
    855  f3bf		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    856  f3c1		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    857  f3c3				   OpSkipDrawCar
    858  f3c3
    859  f3c3							;BEQ DrawTraffic3
    860  f3c3				   OpDrawTraffic1		; 33
    861  f3c3		       98		      TYA		; 2
    862  f3c4		       18		      CLC		; 2 
    863  f3c5		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    864  f3c7		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    865  f3c9		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    866  f3cb		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    867  f3cd		       4c d2 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    868  f3d0				   OpEorOffsetWithCarry
    869  f3d0		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    870  f3d2				   OpAfterEorOffsetWithCarry		;17
    871  f3d2		       aa		      TAX		;2
    872  f3d3		       bd 00 fe 	      LDA	AesTable,X	; 4
    873  f3d6		       c5 bf		      CMP	OpTrafficChance	;3
    874  f3d8		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    875  f3da		       a9 ff		      LDA	#$FF	;2
    876  f3dc		       85 86		      STA	ENAM0Cache	;3
    877  f3de				   OpFinishDrawTraffic1
    878  f3de
    879  f3de				   OpErasePF2
    880  f3de		       a9 00		      LDA	#0
    881  f3e0		       85 0f		      STA	PF2
    882  f3e2
    883  f3e2				   OpDrawTraffic2		; 33
    884  f3e2		       98		      TYA		; 2
    885  f3e3		       18		      CLC		; 2 
    886  f3e4		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    887  f3e6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    888  f3e8		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    889  f3ea		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    890  f3ec		       4c f1 f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    891  f3ef				   OpEorOffsetWithCarry2
    892  f3ef		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    893  f3f1				   OpAfterEorOffsetWithCarry2		;17
    894  f3f1		       aa		      TAX		;2
    895  f3f2		       bd 00 fe 	      LDA	AesTable,X	; 4
    896  f3f5		       c5 bf		      CMP	OpTrafficChance	;3
    897  f3f7		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    898  f3f9		       a9 02		      LDA	#%00000010	;2
    899  f3fb		       85 85		      STA	ENABLCache	;3
    900  f3fd				   OpFinishDrawTraffic2
    901  f3fd
    902  f3fd							;STA WSYNC ;65 / 137
    903  f3fd
    904  f3fd							; LDA Tmp0 ; Flicker this line if drawing car
    905  f3fd							; BEQ FinishDrawTraffic4
    906  f3fd				   OpDrawTraffic3		; 33
    907  f3fd		       98		      TYA		; 2
    908  f3fe		       18		      CLC		; 2 
    909  f3ff		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    910  f401		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    911  f403		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    912  f405		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    913  f407		       4c 0c f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    914  f40a				   OpEorOffsetWithCarry3
    915  f40a		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    916  f40c				   OpAfterEorOffsetWithCarry3		;17
    917  f40c		       aa		      TAX		;2
    918  f40d		       bd 00 fe 	      LDA	AesTable,X	; 4
    919  f410		       c5 bf		      CMP	OpTrafficChance	;3
    920  f412		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    921  f414		       a9 02		      LDA	#%00000010	;2
    922  f416		       85 87		      STA	ENAM1Cache
    923  f418				   OpFinishDrawTraffic3
    924  f418
    925  f418				   OpDrawOponent		;26
    926  f418		       84 b0		      STY	Tmp0	;3
    927  f41a		       a4 cf		      LDY	OpponentLine	;3
    928  f41c		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    929  f41e		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    930  f420				   OpDrawOpponent
    931  f420		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    932  f422		       85 80		      STA	GRP0Cache	;3
    933  f424		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    934  f426		       a4 b0		      LDY	Tmp0	;3
    935  f428		       4c 3c f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    936  f42b				   OpSkipDrawOpponent
    937  f42b		       c6 cf		      DEC	OpponentLine	;5
    938  f42d		       a4 b0		      LDY	Tmp0	;3
    939  f42f
    940  f42f
    941  f42f				   OpDrawTraffic0		; 21 2pe
    942  f42f		       98		      TYA		; 2
    943  f430		       18		      CLC		; 2 
    944  f431		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    945  f433		       29 08		      AND	#%00001000	;2
    946  f435		       f0 05		      BEQ	OpHasNoBorderP0	;3
    947  f437				   OpHasBorderP0
    948  f437		       a9 e0		      LDA	#%11100000	; 2
    949  f439		       4c 3e f4 	      JMP	OpStoreBorderP0	; 3
    950  f43c				   OpHasNoBorderP0
    951  f43c		       a9 00		      LDA	#0	; 2
    952  f43e				   OpStoreBorderP0
    953  f43e		       85 81		      STA	PF0Cache	; 3
    954  f440		       85 83		      STA	PF2Cache	; 3
    955  f442
    956  f442				   OpSkipDrawTraffic0
    957  f442
    958  f442				   OpWhileScanLoop
    959  f442		       88		      DEY		;2
    960  f443		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    961  f445		       4c 91 f3 	      JMP	OpScanLoop	;3
    962  f448				   OpFinishScanLoop		; 7 209 of 222
    963  f448		       4c 00 f5 	      JMP	FinishScanLoop
    964  f44b
    965  f44b							;main scanline loop...
    966  f44b				   ScanLoop
    967  f44b		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    968  f44d
    969  f44d		       a5 81		      LDA	PF0Cache	;3
    970  f44f		       85 0d		      STA	PF0	;3
    971  f451
    972  f451		       a5 80		      LDA	GRP0Cache	;3
    973  f453		       85 1b		      STA	GRP0	;3
    974  f455
    975  f455		       a5 84		      LDA	GRP1Cache	;3
    976  f457		       85 1c		      STA	GRP1	;3
    977  f459
    978  f459		       a5 86		      LDA	ENAM0Cache	;3
    979  f45b		       85 1d		      STA	ENAM0	;3
    980  f45d
    981  f45d		       a5 85		      LDA	ENABLCache	;3
    982  f45f		       85 1f		      STA	ENABL	;3
    983  f461
    984  f461		       a5 87		      LDA	ENAM1Cache	;3
    985  f463		       85 1e		      STA	ENAM1	;3
    986  f465
    987  f465		       a5 83		      LDA	PF2Cache	;3
    988  f467		       85 0f		      STA	PF2	;3
    989  f469
    990  f469		       a9 00		      LDA	#0	;2
    991  f46b		       85 0d		      STA	PF0	;3
    992  f46d		       85 84		      STA	GRP1Cache	;3
    993  f46f		       85 85		      STA	ENABLCache	;3
    994  f471		       85 86		      STA	ENAM0Cache	;3
    995  f473		       85 87		      STA	ENAM1Cache	; 3
    996  f475							;STA GRP0Cache
    997  f475		       85 0f		      STA	PF2	;3
    998  f477
    999  f477				   DrawCar0
   1000  f477		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1001  f479		       b0 04		      BCS	SkipDrawCar	;2
   1002  f47b		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1003  f47d		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1004  f47f				   SkipDrawCar
   1005  f47f
   1006  f47f							;BEQ DrawTraffic3
   1007  f47f				   DrawTraffic1 		; 33
   1008  f47f		       98		      TYA		; 2
   1009  f480		       18		      CLC		; 2 
   1010  f481		       65 95		      ADC	TrafficOffset1 + 1	;3
   1011  f483		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1012  f485		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1013  f487		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1014  f489		       4c 8e f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1015  f48c				   EorOffsetWithCarry
   1016  f48c		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1017  f48e				   AfterEorOffsetWithCarry		;17
   1018  f48e		       aa		      TAX		;2
   1019  f48f		       bd 00 fe 	      LDA	AesTable,X	; 4
   1020  f492		       c5 be		      CMP	TrafficChance	;3
   1021  f494		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1022  f496		       a9 ff		      LDA	#$FF	;2
   1023  f498		       85 86		      STA	ENAM0Cache	;3
   1024  f49a				   FinishDrawTraffic1
   1025  f49a
   1026  f49a				   DrawTraffic2 		; 33
   1027  f49a		       98		      TYA		; 2
   1028  f49b		       18		      CLC		; 2 
   1029  f49c		       65 99		      ADC	TrafficOffset2 + 1	;3
   1030  f49e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1031  f4a0		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1032  f4a2		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1033  f4a4		       4c a9 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1034  f4a7				   EorOffsetWithCarry2
   1035  f4a7		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1036  f4a9				   AfterEorOffsetWithCarry2		;17
   1037  f4a9		       aa		      TAX		;2
   1038  f4aa		       bd 00 fe 	      LDA	AesTable,X	; 4
   1039  f4ad		       c5 be		      CMP	TrafficChance	;3
   1040  f4af		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1041  f4b1		       a9 02		      LDA	#%00000010	;2
   1042  f4b3		       85 85		      STA	ENABLCache	;3
   1043  f4b5				   FinishDrawTraffic2
   1044  f4b5
   1045  f4b5							;STA WSYNC ;65 / 137
   1046  f4b5
   1047  f4b5							; LDA Tmp0 ; Flicker this line if drawing car
   1048  f4b5							; BEQ FinishDrawTraffic4
   1049  f4b5				   DrawTraffic3 		; 33
   1050  f4b5		       98		      TYA		; 2
   1051  f4b6		       18		      CLC		; 2 
   1052  f4b7		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1053  f4b9		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1054  f4bb		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1055  f4bd		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1056  f4bf		       4c c4 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1057  f4c2				   EorOffsetWithCarry3
   1058  f4c2		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1059  f4c4				   AfterEorOffsetWithCarry3		;17
   1060  f4c4		       aa		      TAX		;2
   1061  f4c5		       bd 00 fe 	      LDA	AesTable,X	; 4
   1062  f4c8		       c5 be		      CMP	TrafficChance	;3
   1063  f4ca		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1064  f4cc		       a9 02		      LDA	#%00000010	;2
   1065  f4ce		       85 87		      STA	ENAM1Cache
   1066  f4d0				   FinishDrawTraffic3
   1067  f4d0
   1068  f4d0
   1069  f4d0				   DrawOponent		;26
   1070  f4d0		       84 b0		      STY	Tmp0	;3
   1071  f4d2		       a4 cf		      LDY	OpponentLine	;3
   1072  f4d4		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1073  f4d6		       b0 0b		      BCS	SkipDrawOpponent	;2
   1074  f4d8				   DrawOpponent
   1075  f4d8		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1076  f4da		       85 84		      STA	GRP1Cache	;3
   1077  f4dc		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1078  f4de		       a4 b0		      LDY	Tmp0	;3
   1079  f4e0		       4c f4 f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1080  f4e3				   SkipDrawOpponent
   1081  f4e3		       c6 cf		      DEC	OpponentLine	;5
   1082  f4e5		       a4 b0		      LDY	Tmp0	;3
   1083  f4e7
   1084  f4e7				   DrawTraffic0 		; 21 2pe
   1085  f4e7		       98		      TYA		; 2
   1086  f4e8		       18		      CLC		; 2 
   1087  f4e9		       65 91		      ADC	TrafficOffset0 + 1	;3
   1088  f4eb		       29 08		      AND	#%00001000	;2
   1089  f4ed		       f0 05		      BEQ	HasNoBorderP0	;3
   1090  f4ef				   HasBorderP0
   1091  f4ef		       a9 e0		      LDA	#%11100000	; 2
   1092  f4f1		       4c f6 f4 	      JMP	StoreBorderP0	; 3
   1093  f4f4				   HasNoBorderP0
   1094  f4f4		       a9 00		      LDA	#0	; 2
   1095  f4f6				   StoreBorderP0
   1096  f4f6		       85 81		      STA	PF0Cache	; 3
   1097  f4f8		       85 83		      STA	PF2Cache	; 3
   1098  f4fa
   1099  f4fa				   SkipDrawTraffic0
   1100  f4fa
   1101  f4fa				   WhileScanLoop
   1102  f4fa		       88		      DEY		;2
   1103  f4fb		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1104  f4fd		       4c 4b f4 	      JMP	ScanLoop	;3
   1105  f500				   FinishScanLoop		; 7 209 of 222
   1106  f500
   1107  f500		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1108  f502		       20 9d f6 	      JSR	LoadAll
   1109  f505		       85 02		      STA	WSYNC	; do stuff!
   1110  f507		       85 02		      STA	WSYNC
   1111  f509		       85 02		      STA	WSYNC
   1112  f50b
   1113  f50b				   PrepareOverscan
   1114  f50b		       a9 02		      LDA	#2
   1115  f50d		       85 02		      STA	WSYNC
   1116  f50f							;STA HMOVE	; HMOVE 10
   1117  f50f		       85 01		      STA	VBLANK
   1118  f511
   1119  f511		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1120  f513		       8d 96 02 	      STA	TIM64T
   1121  f516
   1122  f516		       85 2b		      STA	HMCLR	; Before we process car movement
   1123  f518							;Read Fire Button before, will make it start the game for now.
   1124  f518				   StartGame
   1125  f518		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1126  f51a		       25 0d		      AND	INPT5	;3 player 1
   1127  f51c		       30 3c		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1128  f51e		       a5 8c		      LDA	FrameCount0
   1129  f520		       29 01		      AND	#%00000001
   1130  f522		       d0 36		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1131  f524		       a5 bd		      LDA	GameStatus	;3
   1132  f526		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1133  f528		       d0 30		      BNE	SkipGameStart
   1134  f52a		       a5 c6		      LDA	GameMode
   1135  f52c		       c9 10		      CMP	#MAX_GAME_MODE
   1136  f52e		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1137  f530		       a9 00		      LDA	#0
   1138  f532		       85 c6		      STA	GameMode
   1139  f534		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1140  f536		       85 bc		      STA	SwitchDebounceCounter
   1141  f538		       4c 5a f5 	      JMP	SkipGameStart
   1142  f53b				   SetGameRunningIfBothPressing
   1143  f53b		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1144  f53d		       05 0d		      ORA	INPT5	;3 player 1
   1145  f53f		       30 19		      BMI	SkipGameStart
   1146  f541				   SetGameRunning
   1147  f541		       e6 bd		      INC	GameStatus
   1148  f543		       a9 00		      LDA	#0	;
   1149  f545		       85 8c		      STA	FrameCount0
   1150  f547		       85 8d		      STA	FrameCount1
   1151  f549		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1152  f54b		       85 c9		      STA	ScoreFontColor
   1153  f54d		       a9 37		      LDA	#OP_SCORE_FONT_COLOR_START
   1154  f54f		       85 ca		      STA	OpScoreFontColor
   1155  f551		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1156  f553		       85 cb		      STA	ScoreFontColorHoldChange
   1157  f555		       85 cc		      STA	OpScoreFontColorHoldChange
   1158  f557		       4c ce f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1159  f55a				   SkipGameStart
   1160  f55a
   1161  f55a				   ReadSwitches
   1162  f55a		       a6 bc		      LDX	SwitchDebounceCounter
   1163  f55c		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1164  f55e		       a9 01		      LDA	#%00000001
   1165  f560		       2c 82 02 	      BIT	SWCHB
   1166  f563		       d0 07		      BNE	SkipReset
   1167  f565		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1168  f567		       85 bc		      STA	SwitchDebounceCounter
   1169  f569		       4c d6 f5 	      JMP	OverScanWaitBeforeReset
   1170  f56c				   SkipReset
   1171  f56c
   1172  f56c				   GameModeSelect
   1173  f56c		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1174  f56e		       d0 22		      BNE	SkipGameSelect
   1175  f570		       a2 00		      LDX	#0
   1176  f572		       20 c9 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1177  f575		       e8		      INX
   1178  f576		       20 c9 f6 	      JSR	ConfigureDifficulty
   1179  f579				   ContinueGameSelect
   1180  f579		       a9 02		      LDA	#%00000010
   1181  f57b		       2c 82 02 	      BIT	SWCHB
   1182  f57e		       d0 12		      BNE	SkipGameSelect
   1183  f580		       a6 c6		      LDX	GameMode
   1184  f582		       e0 10		      CPX	#MAX_GAME_MODE
   1185  f584		       f0 04		      BEQ	ResetGameMode
   1186  f586		       e8		      INX
   1187  f587		       4c 8c f5 	      JMP	StoreGameMode
   1188  f58a				   ResetGameMode
   1189  f58a		       a2 00		      LDX	#0
   1190  f58c				   StoreGameMode
   1191  f58c		       86 c6		      STX	GameMode
   1192  f58e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1193  f590		       85 bc		      STA	SwitchDebounceCounter
   1194  f592				   SkipGameSelect
   1195  f592		       4c 97 f5 	      JMP	EndReadSwitches
   1196  f595				   DecrementSwitchDebounceCounter
   1197  f595		       c6 bc		      DEC	SwitchDebounceCounter
   1198  f597				   EndReadSwitches
   1199  f597
   1200  f597				   DoNotTurnBeforeStart
   1201  f597							;STA HMCLR
   1202  f597		       a5 bd		      LDA	GameStatus
   1203  f599		       f0 33		      BEQ	OverScanWait
   1204  f59b
   1205  f59b							; Last thing, will overrride hmove
   1206  f59b				   CallTestColisionAndMove
   1207  f59b		       a2 00		      LDX	#0	; Player 0
   1208  f59d							; Colision with traffic, each player check different flags,
   1209  f59d		       a5 8c		      LDA	FrameCount0
   1210  f59f		       29 01		      AND	#%00000001
   1211  f5a1		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1212  f5a3		       20 78 f8 	      JSR	IsOpponentColliding
   1213  f5a6		       05 01		      ORA	CXM1P
   1214  f5a8		       4a		      LSR
   1215  f5a9		       05 00		      ORA	CXM0P
   1216  f5ab		       05 02		      ORA	CXP0FB
   1217  f5ad							; ORA CXPPMM ; Collision between players will have its own rules
   1218  f5ad				   SkipColisionPlayer0		; Should not colide on opponent side.
   1219  f5ad		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1220  f5af		       85 b2		      STA	Tmp2
   1221  f5b1		       20 8c f8 	      JSR	TestCollisionAndMove
   1222  f5b4
   1223  f5b4		       e8		      INX		; player 1
   1224  f5b5		       a5 8c		      LDA	FrameCount0
   1225  f5b7		       29 01		      AND	#%00000001
   1226  f5b9		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1227  f5bb		       20 78 f8 	      JSR	IsOpponentColliding
   1228  f5be		       05 00		      ORA	CXM0P
   1229  f5c0		       4a		      LSR
   1230  f5c1		       05 01		      ORA	CXM1P
   1231  f5c3		       05 03		      ORA	CXP1FB
   1232  f5c5				   SkipColisionPlayer1
   1233  f5c5		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1234  f5c7		       85 b2		      STA	Tmp2
   1235  f5c9		       20 8c f8 	      JSR	TestCollisionAndMove
   1236  f5cc
   1237  f5cc				   ClearCollision
   1238  f5cc		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1239  f5ce
   1240  f5ce				   OverScanWait
   1241  f5ce		       ad 84 02 	      LDA	INTIM
   1242  f5d1		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1243  f5d3		       4c d8 f0 	      JMP	MainLoop
   1244  f5d6
   1245  f5d6				   OverScanWaitBeforeReset
   1246  f5d6		       ad 84 02 	      LDA	INTIM
   1247  f5d9		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1248  f5db		       4c 14 f0 	      JMP	Start
   1249  f5de
   1250  f5de				   Subroutines
   1251  f5de
   1252  f5de							;X Player
   1253  f5de							;Tmp1 TrafficOffset 2
   1254  f5de				   ProcessSound
   1255  f5de				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1256  f5de		       b5 c9		      LDA	ScoreFontColor,X	;3
   1257  f5e0		       dd b7 fc 	      CMP	PlayerToScoreOverColor,X	;2
   1258  f5e3		       f0 6b		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1259  f5e5		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X	;2
   1260  f5e8		       f0 29		      BEQ	PlayCheckpoint	;2
   1261  f5ea		       b5 8e		      LDA	CollisionCounter,X	;3
   1262  f5ec		       c9 e0		      CMP	#$E0	;2
   1263  f5ee		       b0 14		      BCS	PlayColision	;2
   1264  f5f0		       b5 cd		      LDA	NextCheckpoint,X	;3
   1265  f5f2		       38		      SEC		;2
   1266  f5f3		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1267  f5f5		       c9 02		      CMP	#$02	;2
   1268  f5f7		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1269  f5f9		       b5 b8		      LDA	CountdownTimer,X	; 3
   1270  f5fb		       f0 53		      BEQ	EngineSound	;2
   1271  f5fd		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1272  f5ff		       90 37		      BCC	PlayWarnTimeEnding	;4
   1273  f601		       4c 50 f6 	      JMP	EngineSound	;3
   1274  f604				   PlayColision
   1275  f604		       a9 1f		      LDA	#31
   1276  f606		       95 17		      STA	AUDF0,X
   1277  f608		       a9 08		      LDA	#8
   1278  f60a		       95 15		      STA	AUDC0,X
   1279  f60c		       a9 08		      LDA	#8
   1280  f60e		       95 19		      STA	AUDV0,X
   1281  f610		       4c 77 f6 	      JMP	EndSound
   1282  f613
   1283  f613				   PlayCheckpoint
   1284  f613		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1285  f615		       4a		      LSR		;2
   1286  f616		       4a		      LSR		;2
   1287  f617		       4a		      LSR		;2
   1288  f618		       95 17		      STA	AUDF0,X	;3
   1289  f61a		       a9 0c		      LDA	#12	;2
   1290  f61c		       95 15		      STA	AUDC0,X	;3
   1291  f61e		       a9 06		      LDA	#6	;2
   1292  f620		       95 19		      STA	AUDV0,X	;3
   1293  f622		       4c 77 f6 	      JMP	EndSound	;3
   1294  f625
   1295  f625				   PlayBeforeCheckpoint
   1296  f625		       a5 8c		      LDA	FrameCount0	;3
   1297  f627		       29 1c		      AND	#%00011100	;2
   1298  f629		       09 03		      ORA	#%00000011	;2
   1299  f62b		       95 17		      STA	AUDF0,X	;3
   1300  f62d		       a9 0c		      LDA	#12	;2
   1301  f62f		       95 15		      STA	AUDC0,X	;3
   1302  f631		       a9 03		      LDA	#3	;2
   1303  f633		       95 19		      STA	AUDV0,X	;3
   1304  f635		       4c 77 f6 	      JMP	EndSound	;3
   1305  f638
   1306  f638				   PlayWarnTimeEnding
   1307  f638		       a5 8c		      LDA	FrameCount0	;3
   1308  f63a		       29 04		      AND	#%00000100	;2
   1309  f63c		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1310  f63e		       18		      CLC		;2
   1311  f63f		       a9 0a		      LDA	#10	;2
   1312  f641		       75 b8		      ADC	CountdownTimer,X	;2
   1313  f643		       95 17		      STA	AUDF0,X	;3
   1314  f645		       a9 0c		      LDA	#12	;2
   1315  f647		       95 15		      STA	AUDC0,X	;3
   1316  f649		       a9 03		      LDA	#3	;2
   1317  f64b		       95 19		      STA	AUDV0,X	;3
   1318  f64d		       4c 77 f6 	      JMP	EndSound	;3
   1319  f650
   1320  f650				   EngineSound		;41
   1321  f650		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1322  f652		       95 19		      STA	AUDV0,X
   1323  f654		       b5 b8		      LDA	CountdownTimer,X	;3
   1324  f656		       f0 1b		      BEQ	EngineOff	;2
   1325  f658		       b4 d5		      LDY	Gear,X
   1326  f65a		       b5 de		      LDA	Player0SpeedL,X	;3
   1327  f65c		       4a		      LSR		;2
   1328  f65d		       4a		      LSR		;2
   1329  f65e		       4a		      LSR		;2
   1330  f65f		       29 0f		      AND	#%00001111	;2
   1331  f661		       85 b0		      STA	Tmp0	;3
   1332  f663		       b9 43 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1333  f666		       38		      SEC		;2
   1334  f667		       e5 b0		      SBC	Tmp0	;3
   1335  f669		       95 17		      STA	AUDF0,X	;3
   1336  f66b		       b9 3d ff 	      LDA	EngineSoundType,Y	;4
   1337  f66e		       95 15		      STA	AUDC0,X	;3
   1338  f670		       4c 77 f6 	      JMP	EndEngineSound	;3
   1339  f673				   EngineOff
   1340  f673				   MuteSound
   1341  f673		       a9 00		      LDA	#0
   1342  f675		       95 15		      STA	AUDC0,X
   1343  f677				   EndEngineSound
   1344  f677				   EndSound
   1345  f677		       60		      RTS
   1346  f678
   1347  f678				   ClearAll		; 58
   1348  f678		       a9 00		      LDA	#0	;2
   1349  f67a		       85 1b		      STA	GRP0	;3
   1350  f67c		       85 1c		      STA	GRP1	;3
   1351  f67e		       85 1f		      STA	ENABL	;3
   1352  f680		       85 1d		      STA	ENAM0	;3
   1353  f682		       85 1e		      STA	ENAM1	;3
   1354  f684		       85 80		      STA	GRP0Cache	;3
   1355  f686		       85 84		      STA	GRP1Cache	;3
   1356  f688		       85 85		      STA	ENABLCache	;3
   1357  f68a		       85 86		      STA	ENAM0Cache	;3
   1358  f68c		       85 87		      STA	ENAM1Cache	;3
   1359  f68e
   1360  f68e				   ClearPF		; 26
   1361  f68e		       a9 00		      LDA	#0	;2
   1362  f690				   ClearPFSkipLDA0
   1363  f690		       85 0d		      STA	PF0	;3
   1364  f692		       85 0e		      STA	PF1	;3
   1365  f694		       85 0f		      STA	PF2	;3	
   1366  f696		       85 81		      STA	PF0Cache	;3
   1367  f698		       85 82		      STA	PF1Cache	;3
   1368  f69a		       85 83		      STA	PF2Cache	;3 
   1369  f69c		       60		      RTS		;6
   1370  f69d				   EndClearAll
   1371  f69d
   1372  f69d				   LoadAll		; 48
   1373  f69d		       a5 81		      LDA	PF0Cache	;3
   1374  f69f		       85 0d		      STA	PF0	;3
   1375  f6a1
   1376  f6a1		       a5 82		      LDA	PF1Cache	;3
   1377  f6a3		       85 0e		      STA	PF1	;3
   1378  f6a5
   1379  f6a5		       a5 83		      LDA	PF2Cache	;3
   1380  f6a7		       85 0f		      STA	PF2	;3
   1381  f6a9
   1382  f6a9		       a5 84		      LDA	GRP1Cache	;3
   1383  f6ab		       85 1c		      STA	GRP1	;3
   1384  f6ad
   1385  f6ad		       a5 85		      LDA	ENABLCache	;3
   1386  f6af		       85 1f		      STA	ENABL	;3
   1387  f6b1
   1388  f6b1		       a5 86		      LDA	ENAM0Cache	;3
   1389  f6b3		       85 1d		      STA	ENAM0	;3
   1390  f6b5
   1391  f6b5		       a5 87		      LDA	ENAM1Cache	;3
   1392  f6b7		       85 1e		      STA	ENAM1	;3
   1393  f6b9
   1394  f6b9		       60		      RTS		;6
   1395  f6ba				   EndLoadAll
   1396  f6ba
   1397  f6ba				   NextDifficulty		;Is a SBR
   1398  f6ba		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1399  f6bc		       29 01		      AND	#%00000001
   1400  f6be		       d0 24		      BNE	CheckRandomDifficulty
   1401  f6c0
   1402  f6c0		       b5 c4		      LDA	CurrentDifficulty,X
   1403  f6c2		       18		      CLC
   1404  f6c3		       69 01		      ADC	#1
   1405  f6c5		       29 03		      AND	#%00000011	; 0 to 3
   1406  f6c7		       95 c4		      STA	CurrentDifficulty,X
   1407  f6c9
   1408  f6c9				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1409  f6c9		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1410  f6cb		       b9 bf ff 	      LDA	TrafficChanceTable,Y
   1411  f6ce		       95 be		      STA	TrafficChance,X
   1412  f6d0		       b9 bb ff 	      LDA	TrafficColorTable,Y
   1413  f6d3		       95 c2		      STA	TrafficColor,X
   1414  f6d5
   1415  f6d5		       a5 c6		      LDA	GameMode	;
   1416  f6d7		       29 01		      AND	#%00000001
   1417  f6d9		       f0 03		      BEQ	UseNextDifficultyTime
   1418  f6db		       4c df f6 	      JMP	StoreDifficultyTime
   1419  f6de				   UseNextDifficultyTime
   1420  f6de		       c8		      INY
   1421  f6df				   StoreDifficultyTime
   1422  f6df		       b9 c3 ff 	      LDA	TrafficTimeTable,Y
   1423  f6e2		       95 c0		      STA	CheckpointTime,X
   1424  f6e4
   1425  f6e4				   CheckRandomDifficulty
   1426  f6e4		       a5 c6		      LDA	GameMode
   1427  f6e6		       29 08		      AND	#%00001000	; Random difficulties
   1428  f6e8		       f0 26		      BEQ	ReturnFromNextDifficulty
   1429  f6ea				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1430  f6ea		       a5 f2		      LDA	IsOpponentInFront
   1431  f6ec		       30 12		      BMI	UseOpponentChance
   1432  f6ee		       a5 cf		      LDA	OpponentLine	; Same line
   1433  f6f0		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1434  f6f2		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1435  f6f4		       a4 8c		      LDY	FrameCount0
   1436  f6f6		       b9 00 fe 	      LDA	AesTable,Y
   1437  f6f9							;EOR TrafficChance, no need, lets make life simple
   1438  f6f9		       29 3f		      AND	#%00111111
   1439  f6fb		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1440  f6fd		       4c 10 f7 	      JMP	ReturnFromNextDifficulty
   1441  f700				   UseOpponentChance
   1442  f700		       8a		      TXA
   1443  f701		       49 01		      EOR	#%00000001	; Reverts the player
   1444  f703		       aa		      TAX
   1445  f704		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1446  f706		       85 b3		      STA	Tmp3
   1447  f708		       8a		      TXA
   1448  f709		       49 01		      EOR	#%00000001	; Restors the player
   1449  f70b		       aa		      TAX
   1450  f70c		       a5 b3		      LDA	Tmp3
   1451  f70e		       95 be		      STA	TrafficChance,X
   1452  f710
   1453  f710				   ReturnFromNextDifficulty
   1454  f710		       60		      RTS
   1455  f711
   1456  f711				   DefaultOffsets
   1457  f711		       a9 20		      LDA	#$20
   1458  f713		       85 96		      STA	TrafficOffset1 + 2
   1459  f715		       85 a6		      STA	OpTrafficOffset1 + 2
   1460  f717		       a9 40		      LDA	#$40
   1461  f719		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1462  f71b		       85 aa		      STA	OpTrafficOffset2 + 2
   1463  f71d		       a9 60		      LDA	#$60
   1464  f71f		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1465  f721		       85 ae		      STA	OpTrafficOffset3 + 2
   1466  f723		       a9 80		      LDA	#$80
   1467  f725		       60		      RTS
   1468  f726
   1469  f726				   PrintStaticText		; Preload X with the offset referent to StaticText
   1470  f726		       bd 00 ff 	      LDA	StaticText,X
   1471  f729		       85 d0		      STA	ScoreD0
   1472  f72b		       e8		      INX
   1473  f72c		       bd 00 ff 	      LDA	StaticText,X
   1474  f72f		       85 d1		      STA	ScoreD1
   1475  f731		       e8		      INX
   1476  f732		       bd 00 ff 	      LDA	StaticText,X
   1477  f735		       85 d2		      STA	ScoreD2
   1478  f737		       e8		      INX
   1479  f738		       bd 00 ff 	      LDA	StaticText,X
   1480  f73b		       85 d3		      STA	ScoreD3
   1481  f73d		       e8		      INX
   1482  f73e		       bd 00 ff 	      LDA	StaticText,X
   1483  f741		       85 d4		      STA	ScoreD4
   1484  f743		       60		      RTS
   1485  f744
   1486  f744				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1487  f744		       a2 00		      LDX	#0
   1488  f746		       a0 04		      LDY	#FONT_OFFSET
   1489  f748
   1490  f748				   ScoreLoop		; 20 
   1491  f748		       85 02		      STA	WSYNC	;2
   1492  f74a		       85 2a		      STA	HMOVE
   1493  f74c
   1494  f74c		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1495  f74e		       85 0d		      STA	PF0	;3
   1496  f750
   1497  f750		       a5 82		      LDA	PF1Cache	;3
   1498  f752		       85 0e		      STA	PF1	;3
   1499  f754
   1500  f754		       a5 83		      LDA	PF2Cache	;3
   1501  f756		       85 0f		      STA	PF2	;3
   1502  f758
   1503  f758				   DrawScoreD0		; 15
   1504  f758		       a6 d0		      LDX	ScoreD0	; 3
   1505  f75a		       bd 00 fd 	      LDA	Font,X	;4
   1506  f75d		       85 81		      STA	PF0Cache	;3
   1507  f75f		       c6 d0		      DEC	ScoreD0	;5
   1508  f761
   1509  f761				   DrawScoreD1		; 23	
   1510  f761		       a6 d1		      LDX	ScoreD1	; 3
   1511  f763		       bd 00 fd 	      LDA	Font,X	;4
   1512  f766		       0a		      ASL		;2
   1513  f767		       0a		      ASL		;2
   1514  f768		       0a		      ASL		;2
   1515  f769		       0a		      ASL		;2
   1516  f76a		       85 82		      STA	PF1Cache	;3
   1517  f76c		       c6 d1		      DEC	ScoreD1	;5
   1518  f76e
   1519  f76e				   DrawScoreD2		; 20
   1520  f76e		       a6 d2		      LDX	ScoreD2	; 3
   1521  f770		       bd 00 fd 	      LDA	Font,X	;4
   1522  f773		       29 0f		      AND	#%00001111	;2
   1523  f775		       05 82		      ORA	PF1Cache	;3
   1524  f777		       85 82		      STA	PF1Cache	;3
   1525  f779		       c6 d2		      DEC	ScoreD2	;5
   1526  f77b
   1527  f77b				   DrawScoreD3		; 23
   1528  f77b		       a6 d3		      LDX	ScoreD3	; 3
   1529  f77d		       bd 00 fd 	      LDA	Font,X	;4
   1530  f780		       4a		      LSR		;2
   1531  f781		       4a		      LSR		;2
   1532  f782		       4a		      LSR		;2
   1533  f783		       4a		      LSR		;2
   1534  f784		       85 83		      STA	PF2Cache	;3
   1535  f786		       c6 d3		      DEC	ScoreD3	;5
   1536  f788
   1537  f788				   DrawScoreD4		; 20
   1538  f788		       a6 d4		      LDX	ScoreD4	; 3
   1539  f78a		       bd 00 fd 	      LDA	Font,X	;4
   1540  f78d		       29 f0		      AND	#%11110000	;2
   1541  f78f		       05 83		      ORA	PF2Cache	;3
   1542  f791		       85 83		      STA	PF2Cache	;3
   1543  f793		       c6 d4		      DEC	ScoreD4	;5
   1544  f795
   1545  f795
   1546  f795		       88		      DEY		;2
   1547  f796		       10 b0		      BPL	ScoreLoop	;4
   1548  f798
   1549  f798		       85 02		      STA	WSYNC
   1550  f79a		       85 2a		      STA	HMOVE
   1551  f79c		       20 9d f6 	      JSR	LoadAll
   1552  f79f		       60		      RTS		; 6
   1553  f7a0
   1554  f7a0				   WaitForVblankEnd
   1555  f7a0		       ad 84 02 	      LDA	INTIM
   1556  f7a3		       d0 fb		      BNE	WaitForVblankEnd
   1557  f7a5		       85 02		      STA	WSYNC
   1558  f7a7		       85 01		      STA	VBLANK
   1559  f7a9		       60		      RTS
   1560  f7aa
   1561  f7aa				   Sleep4Lines
   1562  f7aa		       85 02		      STA	WSYNC
   1563  f7ac		       85 02		      STA	WSYNC
   1564  f7ae		       85 02		      STA	WSYNC
   1565  f7b0		       85 02		      STA	WSYNC
   1566  f7b2		       60		      RTS
   1567  f7b3
   1568  f7b3				   Sleep8Lines
   1569  f7b3		       20 aa f7 	      JSR	Sleep4Lines
   1570  f7b6		       20 aa f7 	      JSR	Sleep4Lines
   1571  f7b9		       60		      RTS
   1572  f7ba
   1573  f7ba				   Sleep32Lines
   1574  f7ba		       20 b3 f7 	      JSR	Sleep8Lines
   1575  f7bd		       20 b3 f7 	      JSR	Sleep8Lines
   1576  f7c0		       20 b3 f7 	      JSR	Sleep8Lines
   1577  f7c3		       20 b3 f7 	      JSR	Sleep8Lines
   1578  f7c6		       60		      RTS
   1579  f7c7
   1580  f7c7							;X = number of WSYNC HMOVE to run
   1581  f7c7				   HMoveXTimes
   1582  f7c7		       85 02		      STA	WSYNC	;3
   1583  f7c9		       85 2a		      STA	HMOVE	; 3/10 
   1584  f7cb		       ca		      DEX
   1585  f7cc		       d0 f9		      BNE	HMoveXTimes
   1586  f7ce		       60		      RTS
   1587  f7cf
   1588  f7cf				   ConfigureCarSprites
   1589  f7cf		       a5 8c		      LDA	FrameCount0
   1590  f7d1		       29 01		      AND	#%00000001
   1591  f7d3		       d0 0b		      BNE	LoadForRightScreenSprites
   1592  f7d5				   LoadForLeftScreenSprites
   1593  f7d5		       a5 c7		      LDA	CurrentCarId
   1594  f7d7		       85 b0		      STA	Tmp0
   1595  f7d9		       a5 c8		      LDA	OpCurrentCarId
   1596  f7db		       85 b1		      STA	Tmp1
   1597  f7dd		       4c e8 f7 	      JMP	LoadCarSpritesFromIds
   1598  f7e0				   LoadForRightScreenSprites
   1599  f7e0		       a5 c7		      LDA	CurrentCarId
   1600  f7e2		       85 b1		      STA	Tmp1
   1601  f7e4		       a5 c8		      LDA	OpCurrentCarId
   1602  f7e6		       85 b0		      STA	Tmp0
   1603  f7e8
   1604  f7e8				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1605  f7e8		       a4 b0		      LDY	Tmp0
   1606  f7ea		       b9 95 ff 	      LDA	CarIdToSpriteAddressL,Y
   1607  f7ed		       85 d7		      STA	CarSpritePointerL
   1608  f7ef		       b9 99 ff 	      LDA	CarIdToSpriteAddressH,Y
   1609  f7f2		       85 d8		      STA	CarSpritePointerH
   1610  f7f4				   ConfigureOpponentCarSprite
   1611  f7f4		       a4 b1		      LDY	Tmp1
   1612  f7f6		       b9 9d ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1613  f7f9		       85 d9		      STA	EnemyCarSpritePointerL
   1614  f7fb		       b9 a1 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1615  f7fe		       85 da		      STA	EnemyCarSpritePointerH
   1616  f800		       60		      RTS
   1617  f801
   1618  f801							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1619  f801							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1620  f801							; Tmp0 Binary Number
   1621  f801							; Result Returned in Tmp 1 and A
   1622  f801				   BINBCD8
   1623  f801		       f8		      SED		; Switch to decimal mode
   1624  f802		       a9 00		      LDA	#0	; Ensure the result is clear
   1625  f804		       85 b1		      STA	Tmp1+0
   1626  f806							;STA Tmp1+1
   1627  f806		       a2 08		      LDX	#8	; The number of source bits
   1628  f808
   1629  f808				   CNVBIT
   1630  f808		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1631  f80a		       a5 b1		      LDA	Tmp1+0	; And add into result
   1632  f80c		       65 b1		      ADC	Tmp1+0
   1633  f80e		       85 b1		      STA	Tmp1+0
   1634  f810							;Not needed now, 0 to 99 is enought for timer!
   1635  f810							; LDA Tmp1+1	; propagating any carry
   1636  f810							; ADC Tmp1+1
   1637  f810							; STA Tmp1+1
   1638  f810		       ca		      DEX		; And repeat for next bit
   1639  f811		       d0 f5		      BNE	CNVBIT
   1640  f813		       d8		      CLD		; Back to binary
   1641  f814
   1642  f814		       60		      RTS		; All Done.
   1643  f815
   1644  f815							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1645  f815							;X player 0 or 1
   1646  f815				   SelectCarWithDpad
   1647  f815		       a0 03		      LDY	#3
   1648  f817				   SelectCarWithDpadLoop
   1649  f817		       ad 80 02 	      LDA	SWCHA
   1650  f81a		       25 b0		      AND	Tmp0
   1651  f81c		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1652  f81e		       98		      TYA
   1653  f81f		       95 c7		      STA	CurrentCarId,X
   1654  f821				   ContinueSelectCarWithDpadLoop
   1655  f821		       46 b0		      LSR	Tmp0
   1656  f823		       88		      DEY
   1657  f824		       10 f1		      BPL	SelectCarWithDpadLoop
   1658  f826		       60		      RTS
   1659  f827
   1660  f827				   ProcessOpponentLine
   1661  f827		       a5 8c		      LDA	FrameCount0
   1662  f829		       29 01		      AND	#%00000001
   1663  f82b		       38		      SEC
   1664  f82c		       d0 15		      BNE	Player0IsOpponent
   1665  f82e				   Player1IsOpponent		; Code could be reused?
   1666  f82e		       a5 91		      LDA	TrafficOffset0 + 1
   1667  f830		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1668  f832		       85 b0		      STA	Tmp0
   1669  f834		       a5 92		      LDA	TrafficOffset0 + 2
   1670  f836		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1671  f838		       85 b1		      STA	Tmp1
   1672  f83a		       a5 ba		      LDA	Traffic0Msb
   1673  f83c		       e5 bb		      SBC	OpTraffic0Msb
   1674  f83e		       85 b2		      STA	Tmp2
   1675  f840		       4c 55 f8 	      JMP	StoreInFrontPlayer
   1676  f843				   Player0IsOpponent
   1677  f843		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1678  f845		       e5 91		      SBC	TrafficOffset0 + 1
   1679  f847		       85 b0		      STA	Tmp0
   1680  f849		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1681  f84b		       e5 92		      SBC	TrafficOffset0 + 2
   1682  f84d		       85 b1		      STA	Tmp1
   1683  f84f		       a5 bb		      LDA	OpTraffic0Msb
   1684  f851		       e5 ba		      SBC	Traffic0Msb
   1685  f853		       85 b2		      STA	Tmp2
   1686  f855
   1687  f855				   StoreInFrontPlayer
   1688  f855		       85 f2		      STA	IsOpponentInFront
   1689  f857
   1690  f857				   AddOffsetToOpponentLine
   1691  f857		       18		      CLC
   1692  f858		       a5 b0		      LDA	Tmp0
   1693  f85a		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1694  f85c		       85 b0		      STA	Tmp0
   1695  f85e		       a5 b1		      LDA	Tmp1
   1696  f860		       69 00		      ADC	#0
   1697  f862		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1698  f864		       a5 b2		      LDA	Tmp2
   1699  f866		       69 00		      ADC	#0
   1700  f868		       05 b1		      ORA	Tmp1
   1701  f86a		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1702  f86c				   OpponentNotVisible
   1703  f86c		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1704  f86e		       85 cf		      STA	OpponentLine
   1705  f870		       4c 77 f8 	      JMP	ReturnFromProcessOpponentLine
   1706  f873				   OpponentVisible
   1707  f873		       a5 b0		      LDA	Tmp0
   1708  f875		       85 cf		      STA	OpponentLine
   1709  f877				   ReturnFromProcessOpponentLine
   1710  f877		       60		      RTS
   1711  f878
   1712  f878							; Value stored in A
   1713  f878				   IsOpponentColliding
   1714  f878							;Any non default state, opponent do not colide
   1715  f878		       a5 8e		      LDA	CollisionCounter
   1716  f87a		       05 8f		      ORA	OpCollisionCounter
   1717  f87c		       05 cb		      ORA	ScoreFontColorHoldChange
   1718  f87e		       05 cc		      ORA	OpScoreFontColorHoldChange
   1719  f880		       d0 07		      BNE	OpponentNotColliding
   1720  f882		       a5 f2		      LDA	IsOpponentInFront
   1721  f884		       25 07		      AND	CXPPMM
   1722  f886		       4c 8b f8 	      JMP	ReturnIsOpponentColliding
   1723  f889				   OpponentNotColliding
   1724  f889		       a9 00		      LDA	#0
   1725  f88b				   ReturnIsOpponentColliding
   1726  f88b		       60		      RTS
   1727  f88c
   1728  f88c
   1729  f88c							; Movement and colision are binded because the car must be moved after duplicate size.
   1730  f88c							; Use X for the player
   1731  f88c							; Tmp2 Traffic colision result
   1732  f88c				   TestCollisionAndMove
   1733  f88c							; Until store the movemnt, Y contains the value to be stored.
   1734  f88c							; see if player0 colides with the rest
   1735  f88c		       a5 b2		      LDA	Tmp2
   1736  f88e		       f0 2b		      BEQ	NoCollision	;skip if not hitting...
   1737  f890		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1738  f892		       d0 27		      BNE	NoCollision
   1739  f894		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1740  f896		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X
   1741  f899		       f0 20		      BEQ	NoCollision
   1742  f89b		       dd b5 fc 	      CMP	PlayerToScoreStartColor,X
   1743  f89e		       f0 1b		      BEQ	NoCollision
   1744  f8a0		       a9 ff		      LDA	#COLLISION_FRAMES
   1745  f8a2		       95 8e		      STA	CollisionCounter,X
   1746  f8a4		       b5 f0		      LDA	Player0SpeedH,X
   1747  f8a6		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1748  f8a8		       a9 10		      LDA	#COLLISION_SPEED_L
   1749  f8aa		       d5 de		      CMP	Player0SpeedL,X
   1750  f8ac		       b0 04		      BCS	SkipSetColisionSpeedL
   1751  f8ae				   SetColisionSpeedL
   1752  f8ae		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1753  f8b0		       95 de		      STA	Player0SpeedL,X
   1754  f8b2				   SkipSetColisionSpeedL
   1755  f8b2		       a9 00		      LDA	#0
   1756  f8b4		       95 f0		      STA	Player0SpeedH,X
   1757  f8b6		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1758  f8b8		       4c 0b f9 	      JMP	StoreHMove	; We keep position consistent
   1759  f8bb				   NoCollision
   1760  f8bb
   1761  f8bb				   DecrementCollision
   1762  f8bb		       b5 8e		      LDA	CollisionCounter,X
   1763  f8bd		       f0 06		      BEQ	FinishDecrementCollision
   1764  f8bf		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1765  f8c1		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1766  f8c3		       d6 8e		      DEC	CollisionCounter,X
   1767  f8c5				   FinishDecrementCollision
   1768  f8c5
   1769  f8c5				   ResetPlayerSize
   1770  f8c5		       d0 04		      BNE	FinishResetPlayerSize
   1771  f8c7		       a9 30		      LDA	#%00110000
   1772  f8c9		       95 04		      STA	NUSIZ0,X	;
   1773  f8cb				   FinishResetPlayerSize
   1774  f8cb
   1775  f8cb				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1776  f8cb		       b5 8e		      LDA	CollisionCounter,X
   1777  f8cd		       c9 01		      CMP	#1	; Last frame before reset
   1778  f8cf		       d0 05		      BNE	SkipResetPlayerPosition
   1779  f8d1		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1780  f8d3		       4c 0b f9 	      JMP	StoreHMove
   1781  f8d6				   SkipResetPlayerPosition
   1782  f8d6
   1783  f8d6				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1784  f8d6		       b5 c7		      LDA	CurrentCarId,X
   1785  f8d8		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1786  f8da		       d0 08		      BNE	PrepareReadXAxis
   1787  f8dc		       a0 00		      LDY	#0
   1788  f8de		       a5 8c		      LDA	FrameCount0
   1789  f8e0		       29 01		      AND	#DRAGSTER_TURN_MASK
   1790  f8e2		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1791  f8e4
   1792  f8e4				   PrepareReadXAxis
   1793  f8e4		       a0 00		      LDY	#0
   1794  f8e6		       b5 b6		      LDA	Player0X,X
   1795  f8e8				   BeginReadLeft
   1796  f8e8		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1797  f8ea		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1798  f8ed		       2c 80 02 	      BIT	SWCHA
   1799  f8f0		       d0 07		      BNE	SkipMoveLeft
   1800  f8f2		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1801  f8f4		       d6 b6		      DEC	Player0X,X
   1802  f8f6		       4c 0b f9 	      JMP	StoreHMove	; Cannot move left and right...
   1803  f8f9				   SkipMoveLeft
   1804  f8f9				   BeginReadRight
   1805  f8f9		       b5 b6		      LDA	Player0X,X
   1806  f8fb		       c9 2c		      CMP	#PLAYER_MAX_X
   1807  f8fd		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1808  f8ff		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1809  f902		       2c 80 02 	      BIT	SWCHA
   1810  f905		       d0 04		      BNE	SkipMoveRight
   1811  f907		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1812  f909		       f6 b6		      INC	Player0X,X
   1813  f90b				   SkipMoveRight
   1814  f90b				   StoreHMove
   1815  f90b		       94 20		      STY	HMP0,X	;set the move for player 0
   1816  f90d
   1817  f90d		       60		      RTS
   1818  f90e
   1819  f90e							; X Traffic offset 4 bits each lane, 4 lanes per player
   1820  f90e							; Tmp3 Max X offset
   1821  f90e							; Tmp4 Max Player Speed L
   1822  f90e							; Tmp5 Max Player Speed H
   1823  f90e				   UpdateOffsets
   1824  f90e		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1825  f910		       a5 c6		      LDA	GameMode
   1826  f912		       29 04		      AND	#%00000100	; GameModes with high delta
   1827  f914		       f0 02		      BEQ	UpdateOffsetsLoop
   1828  f916		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1829  f918
   1830  f918				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1831  f918		       38		      SEC
   1832  f919		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1833  f91b		       f9 81 ff 	      SBC	TrafficSpeeds,Y
   1834  f91e		       85 b0		      STA	Tmp0
   1835  f920		       c8		      INY
   1836  f921		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1837  f923		       f9 81 ff 	      SBC	TrafficSpeeds,Y
   1838  f926		       85 b1		      STA	Tmp1
   1839  f928		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1840  f92a		       e9 00		      SBC	#0
   1841  f92c		       85 b2		      STA	Tmp2
   1842  f92e
   1843  f92e				   AddsTheResult
   1844  f92e		       18		      CLC
   1845  f92f		       a5 b0		      LDA	Tmp0
   1846  f931		       75 90		      ADC	TrafficOffset0,X
   1847  f933		       95 90		      STA	TrafficOffset0,X
   1848  f935		       e8		      INX
   1849  f936		       a5 b1		      LDA	Tmp1
   1850  f938		       75 90		      ADC	TrafficOffset0,X
   1851  f93a		       95 90		      STA	TrafficOffset0,X
   1852  f93c		       e8		      INX
   1853  f93d		       a5 b2		      LDA	Tmp2	; Carry
   1854  f93f		       75 90		      ADC	TrafficOffset0,X
   1855  f941		       95 90		      STA	TrafficOffset0,X
   1856  f943		       90 0f		      BCC	CalculateOffsetCache
   1857  f945				   CalculatePlayer0Msb
   1858  f945		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1859  f947		       d0 05		      BNE	CalculatePlayer1Msb
   1860  f949		       e6 ba		      INC	Traffic0Msb
   1861  f94b		       4c 54 f9 	      JMP	CalculateOffsetCache
   1862  f94e				   CalculatePlayer1Msb
   1863  f94e		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1864  f950		       d0 02		      BNE	CalculateOffsetCache
   1865  f952		       e6 bb		      INC	OpTraffic0Msb
   1866  f954
   1867  f954				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1868  f954		       e8		      INX
   1869  f955		       38		      SEC
   1870  f956		       69 00		      ADC	#0	;Increment by one
   1871  f958		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1872  f95a
   1873  f95a				   PrepareNextUpdateLoop
   1874  f95a		       c8		      INY
   1875  f95b		       e8		      INX
   1876  f95c		       e4 b3		      CPX	Tmp3	; Max X offset
   1877  f95e		       d0 b8		      BNE	UpdateOffsetsLoop
   1878  f960		       60		      RTS
   1879  f961
   1880  f961							; X Player 0 or 1
   1881  f961				   ProcessSpeed
   1882  f961				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1883  f961		       a9 00		      LDA	#0
   1884  f963		       85 b0		      STA	Tmp0	; Break speed
   1885  f965		       b5 b8		      LDA	CountdownTimer,X
   1886  f967		       d0 0d		      BNE	Break
   1887  f969		       b4 c7		      LDY	CurrentCarId,X
   1888  f96b		       a5 8c		      LDA	FrameCount0
   1889  f96d		       39 a9 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1890  f970		       d0 04		      BNE	Break
   1891  f972		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1892  f974		       85 b0		      STA	Tmp0
   1893  f976
   1894  f976				   Break
   1895  f976		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1896  f979		       2c 80 02 	      BIT	SWCHA
   1897  f97c		       d0 12		      BNE	BreakNonZero
   1898  f97e		       b5 0c		      LDA	INPT4,X	;3
   1899  f980		       10 0a		      BPL	BreakWhileAccelerating
   1900  f982		       b4 d5		      LDY	Gear,X
   1901  f984		       b9 b5 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1902  f987		       85 b0		      STA	Tmp0
   1903  f989		       4c 90 f9 	      JMP	BreakNonZero
   1904  f98c				   BreakWhileAccelerating		; Allow better control while breaking.
   1905  f98c		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1906  f98e		       85 b0		      STA	Tmp0
   1907  f990
   1908  f990				   BreakNonZero
   1909  f990		       a5 b0		      LDA	Tmp0
   1910  f992		       f0 29		      BEQ	SkipBreak
   1911  f994
   1912  f994				   DecreaseSpeed
   1913  f994		       38		      SEC
   1914  f995		       b5 de		      LDA	Player0SpeedL,X
   1915  f997		       e5 b0		      SBC	Tmp0
   1916  f999		       95 de		      STA	Player0SpeedL,X
   1917  f99b		       b5 f0		      LDA	Player0SpeedH,X
   1918  f99d		       e9 00		      SBC	#0
   1919  f99f		       95 f0		      STA	Player0SpeedH,X
   1920  f9a1
   1921  f9a1				   CheckMinSpeed
   1922  f9a1		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1923  f9a3		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1924  f9a5		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1925  f9a7		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1926  f9a9
   1927  f9a9				   CompareLBreakSpeed
   1928  f9a9		       b5 de		      LDA	Player0SpeedL,X
   1929  f9ab		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1930  f9ad		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1931  f9af		       4c ba f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1932  f9b2
   1933  f9b2				   ResetMinSpeed
   1934  f9b2		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1935  f9b4		       95 f0		      STA	Player0SpeedH,X
   1936  f9b6		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1937  f9b8		       95 de		      STA	Player0SpeedL,X
   1938  f9ba
   1939  f9ba				   SkipAccelerateIfBreaking
   1940  f9ba		       4c 03 fa 	      JMP	SkipAccelerate
   1941  f9bd				   SkipBreak
   1942  f9bd
   1943  f9bd				   Acelerates
   1944  f9bd		       b5 b8		      LDA	CountdownTimer,X
   1945  f9bf		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1946  f9c1
   1947  f9c1				   ContinueAccelerateTest
   1948  f9c1		       b5 0c		      LDA	INPT4,X	;3
   1949  f9c3		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1950  f9c5		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1951  f9c8		       2c 80 02 	      BIT	SWCHA
   1952  f9cb		       d0 36		      BNE	SkipAccelerate
   1953  f9cd
   1954  f9cd				   IncreaseCarSpeed
   1955  f9cd		       a9 02		      LDA	#2
   1956  f9cf		       85 b0		      STA	Tmp0	; Loop control
   1957  f9d1		       b4 c7		      LDY	CurrentCarId,X
   1958  f9d3				   IncreaseCarSpeedLoop
   1959  f9d3							;Adds speed
   1960  f9d3		       18		      CLC
   1961  f9d4		       b5 dc		      LDA	AccelerateBuffer,X
   1962  f9d6		       79 a5 ff 	      ADC	CarIdToAccelerateSpeed,Y
   1963  f9d9		       95 dc		      STA	AccelerateBuffer,X
   1964  f9db		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1965  f9dd		       f6 de		      INC	Player0SpeedL,X
   1966  f9df		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1967  f9e1		       f6 f0		      INC	Player0SpeedH,X
   1968  f9e3				   ContinueIncreaseSpeedLoop
   1969  f9e3		       c6 b0		      DEC	Tmp0
   1970  f9e5		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1971  f9e7				   SkipIncreaseCarSpeed
   1972  f9e7
   1973  f9e7				   CheckIfAlreadyMaxSpeed
   1974  f9e7		       b5 f0		      LDA	Player0SpeedH,X
   1975  f9e9		       c9 02		      CMP	#CAR_MAX_SPEED_H
   1976  f9eb		       90 16		      BCC	SkipAccelerate	; less than my max speed
   1977  f9ed		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   1978  f9ef							;High bit is max, compare the low
   1979  f9ef		       b4 c7		      LDY	CurrentCarId,X
   1980  f9f1		       b5 de		      LDA	Player0SpeedL,X
   1981  f9f3		       d9 ad ff 	      CMP	CarIdToMaxSpeedL,Y
   1982  f9f6		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   1983  f9f8							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   1984  f9f8
   1985  f9f8				   ResetToMaxSpeed		; Speed is more, or is already max
   1986  f9f8		       a9 02		      LDA	#CAR_MAX_SPEED_H
   1987  f9fa		       95 f0		      STA	Player0SpeedH,X
   1988  f9fc		       b4 c7		      LDY	CurrentCarId,X
   1989  f9fe		       b9 ad ff 	      LDA	CarIdToMaxSpeedL,Y
   1990  fa01		       95 de		      STA	Player0SpeedL,X
   1991  fa03				   SkipAccelerate
   1992  fa03		       60		      RTS
   1993  fa04
   1994  fa04							;Tmp0 Traffic Offset to compare with next checkpoint
   1995  fa04				   ProcessPlayerStatus
   1996  fa04				   IsGameOver
   1997  fa04		       b5 b8		      LDA	CountdownTimer,X
   1998  fa06		       15 de		      ORA	Player0SpeedL,X
   1999  fa08		       15 f0		      ORA	Player0SpeedH,X
   2000  fa0a		       d0 0c		      BNE	IsCheckpoint
   2001  fa0c		       a9 01		      LDA	#1
   2002  fa0e		       95 cb		      STA	ScoreFontColorHoldChange,X
   2003  fa10		       bd b7 fc 	      LDA	PlayerToScoreOverColor,X
   2004  fa13		       95 c9		      STA	ScoreFontColor,X
   2005  fa15		       4c 4c fa 	      JMP	SkipIsTimeOver
   2006  fa18
   2007  fa18				   IsCheckpoint
   2008  fa18		       b5 cd		      LDA	NextCheckpoint,X
   2009  fa1a		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2010  fa1c		       d0 21		      BNE	SkipIsCheckpoint
   2011  fa1e		       18		      CLC
   2012  fa1f		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2013  fa21		       95 cd		      STA	NextCheckpoint,X
   2014  fa23		       bd b3 fc 	      LDA	PlayerToScoreGoodColor,X
   2015  fa26		       95 c9		      STA	ScoreFontColor,X
   2016  fa28		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2017  fa2a		       95 cb		      STA	ScoreFontColorHoldChange,X
   2018  fa2c		       b5 b8		      LDA	CountdownTimer,X
   2019  fa2e		       18		      CLC
   2020  fa2f		       75 c0		      ADC	CheckpointTime,X
   2021  fa31		       95 b8		      STA	CountdownTimer,X
   2022  fa33		       90 04		      BCC	JumpSkipTimeOver
   2023  fa35		       a9 ff		      LDA	#$FF
   2024  fa37		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2025  fa39				   JumpSkipTimeOver
   2026  fa39		       20 ba f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2027  fa3c		       4c 4c fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2028  fa3f				   SkipIsCheckpoint
   2029  fa3f
   2030  fa3f				   IsTimeOver
   2031  fa3f		       b5 b8		      LDA	CountdownTimer,X
   2032  fa41		       d0 09		      BNE	SkipIsTimeOver
   2033  fa43		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2034  fa45		       95 cb		      STA	ScoreFontColorHoldChange,X
   2035  fa47		       bd b9 fc 	      LDA	PlayerToScoreBadColor,X
   2036  fa4a		       95 c9		      STA	ScoreFontColor,X
   2037  fa4c				   SkipIsTimeOver
   2038  fa4c		       60		      RTS
   2039  fa4d
   2040  fa4d
   2041  fa4d				   EverySecond		; 64 frames to be more precise
   2042  fa4d		       a9 3f		      LDA	#%00111111
   2043  fa4f		       25 8c		      AND	FrameCount0
   2044  fa51		       d0 06		      BNE	SkipEverySecondAction
   2045  fa53		       d5 b8		      CMP	CountdownTimer,X
   2046  fa55		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2047  fa57		       d6 b8		      DEC	CountdownTimer,X
   2048  fa59				   SkipEverySecondAction
   2049  fa59		       60		      RTS
   2050  fa5a
   2051  fa5a				   CalculateGear
   2052  fa5a		       b5 de		      LDA	Player0SpeedL,X	;3
   2053  fa5c		       29 80		      AND	#%10000000	;2
   2054  fa5e		       15 f0		      ORA	Player0SpeedH,X	;3
   2055  fa60		       18		      CLC		;2
   2056  fa61		       2a		      ROL		;2
   2057  fa62		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2058  fa64		       95 d5		      STA	Gear,X
   2059  fa66		       60		      RTS
   2060  fa67
   2061  fa67				   ProcessScoreFontColor
   2062  fa67		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2063  fa69		       f0 06		      BEQ	ResetScoreFontColor
   2064  fa6b		       88		      DEY
   2065  fa6c		       94 cb		      STY	ScoreFontColorHoldChange,X
   2066  fa6e		       4c 76 fa 	      JMP	SkipScoreFontColor
   2067  fa71				   ResetScoreFontColor
   2068  fa71		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2069  fa74		       95 c9		      STA	ScoreFontColor,X
   2070  fa76				   SkipScoreFontColor
   2071  fa76		       60		      RTS
   2072  fa77
   2073  fa77							; Moved here because of rom space.
   2074  fa77							; The only SBR in constants space
   2075  fa77				   DrawQrCode
   2076  fa77		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2077  fa79		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2078  fa7b		       a9 01		      LDA	#%00000001	; Mirror playfield
   2079  fa7d		       85 0a		      STA	CTRLPF
   2080  fa7f		       20 78 f6 	      JSR	ClearAll	; To be 100 sure!
   2081  fa82		       ad 82 02 	      LDA	SWCHB
   2082  fa85		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2083  fa87		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2084  fa89		       f0 07		      BEQ	StoreReversedQrCode
   2085  fa8b		       86 09		      STX	COLUBK
   2086  fa8d		       84 08		      STY	COLUPF
   2087  fa8f		       4c 96 fa 	      JMP	ContinueQrCode
   2088  fa92				   StoreReversedQrCode
   2089  fa92		       86 08		      STX	COLUPF
   2090  fa94		       84 09		      STY	COLUBK
   2091  fa96
   2092  fa96				   ContinueQrCode
   2093  fa96		       a2 09		      LDX	#9
   2094  fa98		       20 c7 f7 	      JSR	HMoveXTimes
   2095  fa9b		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2096  fa9d		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2097  fa9f		       20 a0 f7 	      JSR	WaitForVblankEnd
   2098  faa2		       20 b3 f7 	      JSR	Sleep8Lines
   2099  faa5		       20 b3 f7 	      JSR	Sleep8Lines
   2100  faa8		       20 b3 f7 	      JSR	Sleep8Lines
   2101  faab
   2102  faab				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2103  faab		       85 02		      STA	WSYNC
   2104  faad		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2105  fab0		       85 0e		      STA	PF1	;3
   2106  fab2		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2107  fab5		       85 0f		      STA	PF2	;3
      0  fab7					      SLEEP	27	; 
      1  fab7				   .CYCLES    SET	27
      2  fab7
      3  fab7				  -	      IF	.CYCLES < 2
      4  fab7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fab7				  -	      ERR
      6  fab7					      ENDIF
      7  fab7
      8  fab7					      IF	.CYCLES & 1
      9  fab7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fab7				  -	      nop	0
     11  fab7					      ELSE
     12  fab7		       24 00		      bit	VSYNC
     13  fab9					      ENDIF
     14  fab9				   .CYCLES    SET	.CYCLES - 3
     15  fab9					      ENDIF
     16  fab9
     17  fab9					      REPEAT	.CYCLES / 2
     18  fab9		       ea		      nop
     17  fab9					      REPEND
     18  faba		       ea		      nop
     17  faba					      REPEND
     18  fabb		       ea		      nop
     17  fabb					      REPEND
     18  fabc		       ea		      nop
     17  fabc					      REPEND
     18  fabd		       ea		      nop
     17  fabd					      REPEND
     18  fabe		       ea		      nop
     17  fabe					      REPEND
     18  fabf		       ea		      nop
     17  fabf					      REPEND
     18  fac0		       ea		      nop
     17  fac0					      REPEND
     18  fac1		       ea		      nop
     17  fac1					      REPEND
     18  fac2		       ea		      nop
     17  fac2					      REPEND
     18  fac3		       ea		      nop
     17  fac3					      REPEND
     18  fac4		       ea		      nop
     19  fac5					      REPEND
   2109  fac5		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2110  fac8		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2111  faca		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2112  facd		       85 0e		      STA	PF1	;3
   2113  facf
   2114  facf		       ca		      DEX		;2
   2115  fad0		       d0 d9		      BNE	QrCodeLoop	;2
   2116  fad2		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2117  fad4		       88		      DEY		;2
   2118  fad5		       10 d4		      BPL	QrCodeLoop	;4
   2119  fad7
   2120  fad7				   EndQrCodeLoop
   2121  fad7		       85 02		      STA	WSYNC	;
   2122  fad9		       a9 00		      LDA	#0
   2123  fadb		       85 0e		      STA	PF1	;3
   2124  fadd		       85 0f		      STA	PF2	;3
   2125  fadf
   2126  fadf		       20 ba f7 	      JSR	Sleep32Lines
   2127  fae2		       4c 0b f5 	      JMP	PrepareOverscan
   2128  fae5
   2129  fae5							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2130  fc00					      org	$FC00
   2131  fc00				   QrCode1
   2132  fc00		       1f		      .byte.b	#%00011111
   2133  fc01		       10		      .byte.b	#%00010000
   2134  fc02		       17		      .byte.b	#%00010111
   2135  fc03		       17		      .byte.b	#%00010111
   2136  fc04		       17		      .byte.b	#%00010111
   2137  fc05		       10		      .byte.b	#%00010000
   2138  fc06		       1f		      .byte.b	#%00011111
   2139  fc07		       00		      .byte.b	#%00000000
   2140  fc08		       17		      .byte.b	#%00010111
   2141  fc09		       10		      .byte.b	#%00010000
   2142  fc0a		       1d		      .byte.b	#%00011101
   2143  fc0b		       16		      .byte.b	#%00010110
   2144  fc0c		       03		      .byte.b	#%00000011
   2145  fc0d		       19		      .byte.b	#%00011001
   2146  fc0e		       13		      .byte.b	#%00010011
   2147  fc0f		       1c		      .byte.b	#%00011100
   2148  fc10		       0b		      .byte.b	#%00001011
   2149  fc11		       00		      .byte.b	#%00000000
   2150  fc12		       1f		      .byte.b	#%00011111
   2151  fc13		       10		      .byte.b	#%00010000
   2152  fc14		       17		      .byte.b	#%00010111
   2153  fc15		       17		      .byte.b	#%00010111
   2154  fc16		       17		      .byte.b	#%00010111
   2155  fc17		       10		      .byte.b	#%00010000
   2156  fc18		       1f		      .byte.b	#%00011111
   2157  fc19
   2158  fc19				   QrCode2
   2159  fc19		       c3		      .byte.b	#%11000011
   2160  fc1a		       9a		      .byte.b	#%10011010
   2161  fc1b		       82		      .byte.b	#%10000010
   2162  fc1c		       da		      .byte.b	#%11011010
   2163  fc1d		       aa		      .byte.b	#%10101010
   2164  fc1e		       ca		      .byte.b	#%11001010
   2165  fc1f		       f3		      .byte.b	#%11110011
   2166  fc20		       78		      .byte.b	#%01111000
   2167  fc21		       df		      .byte.b	#%11011111
   2168  fc22		       fc		      .byte.b	#%11111100
   2169  fc23		       c7		      .byte.b	#%11000111
   2170  fc24		       98		      .byte.b	#%10011000
   2171  fc25		       23		      .byte.b	#%00100011
   2172  fc26		       b9		      .byte.b	#%10111001
   2173  fc27		       d2		      .byte.b	#%11010010
   2174  fc28		       30		      .byte.b	#%00110000
   2175  fc29		       eb		      .byte.b	#%11101011
   2176  fc2a		       28		      .byte.b	#%00101000
   2177  fc2b		       ab		      .byte.b	#%10101011
   2178  fc2c		       72		      .byte.b	#%01110010
   2179  fc2d		       fa		      .byte.b	#%11111010
   2180  fc2e		       7a		      .byte.b	#%01111010
   2181  fc2f		       32		      .byte.b	#%00110010
   2182  fc30		       3a		      .byte.b	#%00111010
   2183  fc31		       63		      .byte.b	#%01100011
   2184  fc32
   2185  fc32				   QrCode3
   2186  fc32		       98		      .byte.b	#%10011000
   2187  fc33		       c3		      .byte.b	#%11000011
   2188  fc34		       39		      .byte.b	#%00111001
   2189  fc35		       34		      .byte.b	#%00110100
   2190  fc36		       ff		      .byte.b	#%11111111
   2191  fc37		       71		      .byte.b	#%01110001
   2192  fc38		       d5		      .byte.b	#%11010101
   2193  fc39		       d1		      .byte.b	#%11010001
   2194  fc3a		       5f		      .byte.b	#%01011111
   2195  fc3b		       26		      .byte.b	#%00100110
   2196  fc3c		       2d		      .byte.b	#%00101101
   2197  fc3d		       e9		      .byte.b	#%11101001
   2198  fc3e		       d6		      .byte.b	#%11010110
   2199  fc3f		       26		      .byte.b	#%00100110
   2200  fc40		       ba		      .byte.b	#%10111010
   2201  fc41		       03		      .byte.b	#%00000011
   2202  fc42		       dd		      .byte.b	#%11011101
   2203  fc43		       e0		      .byte.b	#%11100000
   2204  fc44		       57		      .byte.b	#%01010111
   2205  fc45		       14		      .byte.b	#%00010100
   2206  fc46		       35		      .byte.b	#%00110101
   2207  fc47		       e5		      .byte.b	#%11100101
   2208  fc48		       b5		      .byte.b	#%10110101
   2209  fc49		       d4		      .byte.b	#%11010100
   2210  fc4a		       97		      .byte.b	#%10010111
   2211  fc4b
   2212  fc4b				   QrCode4
   2213  fc4b		       09		      .byte.b	#%00001001
   2214  fc4c		       0e		      .byte.b	#%00001110
   2215  fc4d		       0f		      .byte.b	#%00001111
   2216  fc4e		       0c		      .byte.b	#%00001100
   2217  fc4f		       0c		      .byte.b	#%00001100
   2218  fc50		       08		      .byte.b	#%00001000
   2219  fc51		       08		      .byte.b	#%00001000
   2220  fc52		       06		      .byte.b	#%00000110
   2221  fc53		       06		      .byte.b	#%00000110
   2222  fc54		       0b		      .byte.b	#%00001011
   2223  fc55		       0f		      .byte.b	#%00001111
   2224  fc56		       04		      .byte.b	#%00000100
   2225  fc57		       08		      .byte.b	#%00001000
   2226  fc58		       0f		      .byte.b	#%00001111
   2227  fc59		       09		      .byte.b	#%00001001
   2228  fc5a		       07		      .byte.b	#%00000111
   2229  fc5b		       05		      .byte.b	#%00000101
   2230  fc5c		       00		      .byte.b	#%00000000
   2231  fc5d		       0f		      .byte.b	#%00001111
   2232  fc5e		       08		      .byte.b	#%00001000
   2233  fc5f		       0b		      .byte.b	#%00001011
   2234  fc60		       0b		      .byte.b	#%00001011
   2235  fc61		       0b		      .byte.b	#%00001011
   2236  fc62		       08		      .byte.b	#%00001000
   2237  fc63		       0f		      .byte.b	#%00001111
   2238  fc64
   2239  fc64				   PlayerToUpMask
   2240  fc64		       10		      .byte.b	#%00010000	;
   2241  fc65		       01		      .byte.b	#%00000001	;
   2242  fc66
   2243  fc66				   PlayerToDownMask
   2244  fc66		       20		      .byte.b	#%00100000	;
   2245  fc67		       02		      .byte.b	#%00000010	;
   2246  fc68
   2247  fc68				   PlayerToLeftMask
   2248  fc68		       40		      .byte.b	#%01000000	;
   2249  fc69		       04		      .byte.b	#%00000100	;
   2250  fc6a
   2251  fc6a				   PlayerToRightMask
   2252  fc6a		       80		      .byte.b	#%10000000	;
   2253  fc6b		       08		      .byte.b	#%00001000	;
   2254  fc6c
   2255  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2256  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2257  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2258  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2259  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2260  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2261  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2262  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2263  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2264  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2265  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2266  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2267  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2268  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2269  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2270  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2271  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2272  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2273  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2274  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2275  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2276  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2277  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2278  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2279  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2280  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2281  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2282  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2283  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2284  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2285  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2286  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2287  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2288  fc8c
   2289  fc8c
   2290  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2291  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2292  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2293  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2294  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2295  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2296  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2297  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2298  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2299  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2300  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2301  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2302  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2303  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2304  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2305  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2306  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2307  fc9c
   2308  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2309  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2310  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2311  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2312  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2313  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2314  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2315  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2316  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2317  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2318  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2319  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2320  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2321  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2322  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2323  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2324  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2325  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2326  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2327  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2328  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2329  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2330  fcb1
   2331  fcb1				   PlayerToDefaultColor
   2332  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2333  fcb2		       98		      .byte.b	#PLAYER1_COLOR
   2334  fcb3
   2335  fcb3				   PlayerToScoreGoodColor
   2336  fcb3		       d8		      .byte.b	#SCORE_FONT_COLOR_GOOD
   2337  fcb4		       38		      .byte.b	#OP_SCORE_FONT_COLOR_GOOD
   2338  fcb5
   2339  fcb5				   PlayerToScoreStartColor
   2340  fcb5		       c8		      .byte.b	#SCORE_FONT_COLOR_START
   2341  fcb6		       37		      .byte.b	#OP_SCORE_FONT_COLOR_START
   2342  fcb7
   2343  fcb7				   PlayerToScoreOverColor
   2344  fcb7		       0c		      .byte.b	#SCORE_FONT_COLOR_OVER
   2345  fcb8		       ab		      .byte.b	#OP_SCORE_FONT_COLOR_OVER
   2346  fcb9
   2347  fcb9				   PlayerToScoreBadColor
   2348  fcb9		       44		      .byte.b	#SCORE_FONT_COLOR_BAD
   2349  fcba		       e7		      .byte.b	#OP_SCORE_FONT_COLOR_BAD
   2350  fcbb
   2351  fd00					      org	$FD00
   2352  fd00				   Font
   2353  fd00				   C0
   2354  fd00		       e7		      .byte.b	#%11100111	;
   2355  fd01		       a5		      .byte.b	#%10100101	; 
   2356  fd02		       a5		      .byte.b	#%10100101	; 
   2357  fd03		       a5		      .byte.b	#%10100101	; 
   2358  fd04		       e7		      .byte.b	#%11100111	;	
   2359  fd05				   C1
   2360  fd05		       e7		      .byte.b	#%11100111	;
   2361  fd06		       42		      .byte.b	#%01000010	; 
   2362  fd07		       42		      .byte.b	#%01000010	; 
   2363  fd08		       42		      .byte.b	#%01000010	; 
   2364  fd09		       66		      .byte.b	#%01100110	;
   2365  fd0a				   C2
   2366  fd0a		       e7		      .byte.b	#%11100111	;
   2367  fd0b		       24		      .byte.b	#%00100100	; 
   2368  fd0c		       e7		      .byte.b	#%11100111	; 
   2369  fd0d		       81		      .byte.b	#%10000001	; 
   2370  fd0e		       e7		      .byte.b	#%11100111	;
   2371  fd0f				   C3
   2372  fd0f		       e7		      .byte.b	#%11100111	;
   2373  fd10		       81		      .byte.b	#%10000001	; 
   2374  fd11		       e7		      .byte.b	#%11100111	; 
   2375  fd12		       81		      .byte.b	#%10000001	; 
   2376  fd13		       e7		      .byte.b	#%11100111	;
   2377  fd14				   C4
   2378  fd14		       81		      .byte.b	#%10000001	;
   2379  fd15		       81		      .byte.b	#%10000001	; 
   2380  fd16		       e7		      .byte.b	#%11100111	; 
   2381  fd17		       a5		      .byte.b	#%10100101	; 
   2382  fd18		       a5		      .byte.b	#%10100101	;
   2383  fd19				   C5
   2384  fd19		       e7		      .byte.b	#%11100111	;
   2385  fd1a		       81		      .byte.b	#%10000001	; 
   2386  fd1b		       e7		      .byte.b	#%11100111	; 
   2387  fd1c		       24		      .byte.b	#%00100100	; 
   2388  fd1d		       e7		      .byte.b	#%11100111	;
   2389  fd1e				   C6
   2390  fd1e		       e7		      .byte.b	#%11100111	;
   2391  fd1f		       a5		      .byte.b	#%10100101	; 
   2392  fd20		       e7		      .byte.b	#%11100111	; 
   2393  fd21		       24		      .byte.b	#%00100100	; 
   2394  fd22		       e7		      .byte.b	#%11100111	;
   2395  fd23				   C7
   2396  fd23		       81		      .byte.b	#%10000001	;
   2397  fd24		       81		      .byte.b	#%10000001	; 
   2398  fd25		       81		      .byte.b	#%10000001	; 
   2399  fd26		       81		      .byte.b	#%10000001	; 
   2400  fd27		       e7		      .byte.b	#%11100111	;
   2401  fd28				   C8
   2402  fd28		       e7		      .byte.b	#%11100111	;
   2403  fd29		       a5		      .byte.b	#%10100101	; 
   2404  fd2a		       e7		      .byte.b	#%11100111	; 
   2405  fd2b		       a5		      .byte.b	#%10100101	; 
   2406  fd2c		       e7		      .byte.b	#%11100111	;
   2407  fd2d				   C9
   2408  fd2d		       e7		      .byte.b	#%11100111	;
   2409  fd2e		       81		      .byte.b	#%10000001	; 
   2410  fd2f		       e7		      .byte.b	#%11100111	; 
   2411  fd30		       a5		      .byte.b	#%10100101	; 
   2412  fd31		       e7		      .byte.b	#%11100111	;
   2413  fd32				   CA
   2414  fd32		       a5		      .byte.b	#%10100101	;
   2415  fd33		       a5		      .byte.b	#%10100101	; 
   2416  fd34		       e7		      .byte.b	#%11100111	; 
   2417  fd35		       a5		      .byte.b	#%10100101	; 
   2418  fd36		       e7		      .byte.b	#%11100111	;
   2419  fd37				   CB
   2420  fd37		       66		      .byte.b	#%01100110	;
   2421  fd38		       a5		      .byte.b	#%10100101	; 
   2422  fd39		       66		      .byte.b	#%01100110	; 
   2423  fd3a		       a5		      .byte.b	#%10100101	;
   2424  fd3b		       66		      .byte.b	#%01100110	;
   2425  fd3c				   CC
   2426  fd3c		       e7		      .byte.b	#%11100111	;
   2427  fd3d		       24		      .byte.b	#%00100100	; 
   2428  fd3e		       24		      .byte.b	#%00100100	; 
   2429  fd3f		       24		      .byte.b	#%00100100	;
   2430  fd40		       e7		      .byte.b	#%11100111	;
   2431  fd41
   2432  fd41				   CD
   2433  fd41		       66		      .byte.b	#%01100110	;
   2434  fd42		       a5		      .byte.b	#%10100101	; 
   2435  fd43		       a5		      .byte.b	#%10100101	; 
   2436  fd44		       a5		      .byte.b	#%10100101	;
   2437  fd45		       66		      .byte.b	#%01100110	;
   2438  fd46
   2439  fd46				   CE
   2440  fd46		       e7		      .byte.b	#%11100111	;
   2441  fd47		       24		      .byte.b	#%00100100	; 
   2442  fd48		       e7		      .byte.b	#%11100111	; 
   2443  fd49		       24		      .byte.b	#%00100100	; 
   2444  fd4a		       e7		      .byte.b	#%11100111	;
   2445  fd4b
   2446  fd4b				   CF
   2447  fd4b		       24		      .byte.b	#%00100100	;
   2448  fd4c		       24		      .byte.b	#%00100100	; 
   2449  fd4d		       e7		      .byte.b	#%11100111	; 
   2450  fd4e		       24		      .byte.b	#%00100100	; 
   2451  fd4f		       e7		      .byte.b	#%11100111	;
   2452  fd50
   2453  fd50				   CG
   2454  fd50		       c3		      .byte.b	#%11000011	;
   2455  fd51		       a5		      .byte.b	#%10100101	; 
   2456  fd52		       a5		      .byte.b	#%10100101	; 
   2457  fd53		       24		      .byte.b	#%00100100	; 
   2458  fd54		       c3		      .byte.b	#%11000011	;	
   2459  fd55
   2460  fd55				   CH
   2461  fd55		       a5		      .byte.b	#%10100101	;
   2462  fd56		       a5		      .byte.b	#%10100101	; 
   2463  fd57		       e7		      .byte.b	#%11100111	; 
   2464  fd58		       a5		      .byte.b	#%10100101	; 
   2465  fd59		       a5		      .byte.b	#%10100101	;
   2466  fd5a
   2467  fd5a				   CI
   2468  fd5a		       e7		      .byte.b	#%11100111	;
   2469  fd5b		       42		      .byte.b	#%01000010	; 
   2470  fd5c		       42		      .byte.b	#%01000010	; 
   2471  fd5d		       42		      .byte.b	#%01000010	; 
   2472  fd5e		       e7		      .byte.b	#%11100111	;
   2473  fd5f
   2474  fd5f				   CJ
   2475  fd5f		       e7		      .byte.b	#%11100111	;
   2476  fd60		       a5		      .byte.b	#%10100101	; 
   2477  fd61		       81		      .byte.b	#%10000001	; 
   2478  fd62		       81		      .byte.b	#%10000001	; 
   2479  fd63		       81		      .byte.b	#%10000001	;	
   2480  fd64
   2481  fd64				   CK
   2482  fd64		       a5		      .byte.b	#%10100101	;
   2483  fd65		       a5		      .byte.b	#%10100101	; 
   2484  fd66		       66		      .byte.b	#%01100110	; 
   2485  fd67		       a5		      .byte.b	#%10100101	; 
   2486  fd68		       a5		      .byte.b	#%10100101	;
   2487  fd69
   2488  fd69				   CL
   2489  fd69		       e7		      .byte.b	#%11100111	;
   2490  fd6a		       24		      .byte.b	#%00100100	; 
   2491  fd6b		       24		      .byte.b	#%00100100	; 
   2492  fd6c		       24		      .byte.b	#%00100100	; 
   2493  fd6d		       24		      .byte.b	#%00100100	;
   2494  fd6e
   2495  fd6e				   CM
   2496  fd6e		       a5		      .byte.b	#%10100101	;
   2497  fd6f		       a5		      .byte.b	#%10100101	; 
   2498  fd70		       a5		      .byte.b	#%10100101	; 
   2499  fd71		       e7		      .byte.b	#%11100111	; 
   2500  fd72		       a5		      .byte.b	#%10100101	;
   2501  fd73
   2502  fd73				   CN
   2503  fd73		       a5		      .byte.b	#%10100101	;
   2504  fd74		       a5		      .byte.b	#%10100101	; 
   2505  fd75		       a5		      .byte.b	#%10100101	; 
   2506  fd76		       a5		      .byte.b	#%10100101	; 
   2507  fd77		       66		      .byte.b	#%01100110	;	
   2508  fd78
   2509  fd78
   2510  fd78				   CO
   2511  fd78		       42		      .byte.b	#%01000010	;
   2512  fd79		       a5		      .byte.b	#%10100101	; 
   2513  fd7a		       a5		      .byte.b	#%10100101	; 
   2514  fd7b		       a5		      .byte.b	#%10100101	; 
   2515  fd7c		       42		      .byte.b	#%01000010	;	
   2516  fd7d
   2517  fd7d				   CP
   2518  fd7d		       24		      .byte.b	#%00100100	;
   2519  fd7e		       24		      .byte.b	#%00100100	; 
   2520  fd7f		       e7		      .byte.b	#%11100111	; 
   2521  fd80		       a5		      .byte.b	#%10100101	; 
   2522  fd81		       e7		      .byte.b	#%11100111	;
   2523  fd82
   2524  fd82				   CQ
   2525  fd82		       81		      .byte.b	#%10000001	;
   2526  fd83		       e5		      .byte.b	#%11100101	; 
   2527  fd84		       a5		      .byte.b	#%10100101	; 
   2528  fd85		       a5		      .byte.b	#%10100101	; 
   2529  fd86		       e7		      .byte.b	#%11100111	;	
   2530  fd87
   2531  fd87				   CR
   2532  fd87		       a5		      .byte.b	#%10100101	;
   2533  fd88		       a5		      .byte.b	#%10100101	; 
   2534  fd89		       66		      .byte.b	#%01100110	; 
   2535  fd8a		       a5		      .byte.b	#%10100101	; 
   2536  fd8b		       66		      .byte.b	#%01100110	;
   2537  fd8c
   2538  fd8c				   CS
   2539  fd8c		       66		      .byte.b	#%01100110	;
   2540  fd8d		       81		      .byte.b	#%10000001	; 
   2541  fd8e		       42		      .byte.b	#%01000010	; 
   2542  fd8f		       24		      .byte.b	#%00100100	; 
   2543  fd90		       c3		      .byte.b	#%11000011	;
   2544  fd91
   2545  fd91				   CT
   2546  fd91		       42		      .byte.b	#%01000010	;
   2547  fd92		       42		      .byte.b	#%01000010	; 
   2548  fd93		       42		      .byte.b	#%01000010	; 
   2549  fd94		       42		      .byte.b	#%01000010	; 
   2550  fd95		       e7		      .byte.b	#%11100111	;
   2551  fd96
   2552  fd96				   CU
   2553  fd96		       e7		      .byte.b	#%11100111	;
   2554  fd97		       a5		      .byte.b	#%10100101	; 
   2555  fd98		       a5		      .byte.b	#%10100101	; 
   2556  fd99		       a5		      .byte.b	#%10100101	; 
   2557  fd9a		       a5		      .byte.b	#%10100101	;	
   2558  fd9b
   2559  fd9b				   CW
   2560  fd9b		       a5		      .byte.b	#%10100101	;
   2561  fd9c		       e7		      .byte.b	#%11100111	; 
   2562  fd9d		       a5		      .byte.b	#%10100101	; 
   2563  fd9e		       a5		      .byte.b	#%10100101	; 
   2564  fd9f		       a5		      .byte.b	#%10100101	;
   2565  fda0
   2566  fda0				   CY
   2567  fda0		       42		      .byte.b	#%01000010	;
   2568  fda1		       42		      .byte.b	#%01000010	; 
   2569  fda2		       42		      .byte.b	#%01000010	; 
   2570  fda3		       a5		      .byte.b	#%10100101	; 
   2571  fda4		       a5		      .byte.b	#%10100101	;
   2572  fda5
   2573  fda5				   Exclamation
   2574  fda5		       42		      .byte.b	#%01000010	;
   2575  fda6		       00		      .byte.b	#%00000000	; 
   2576  fda7		       42		      .byte.b	#%01000010	; 
   2577  fda8		       42		      .byte.b	#%01000010	; 
   2578  fda9		       42		      .byte.b	#%01000010	;
   2579  fdaa
   2580  fdaa				   Pipe
   2581  fdaa				   Colon
   2582  fdaa		       42		      .byte.b	#%01000010	;
   2583  fdab		       42		      .byte.b	#%01000010	; 
   2584  fdac		       00		      .byte.b	#%00000000	; 
   2585  fdad		       42		      .byte.b	#%01000010	; 
   2586  fdae		       42		      .byte.b	#%01000010	;
   2587  fdaf
   2588  fdaf				   Space
   2589  fdaf				   C0B
   2590  fdaf		       00		      .byte.b	#%00000000	;
   2591  fdb0		       00		      .byte.b	#%00000000	; 
   2592  fdb1		       00		      .byte.b	#%00000000	; 
   2593  fdb2		       00		      .byte.b	#%00000000	; 
   2594  fdb3		       00		      .byte.b	#%00000000	;	
   2595  fdb4				   C1B
   2596  fdb4		       24		      .byte.b	#%00100100	;
   2597  fdb5		       00		      .byte.b	#%00000000	; 
   2598  fdb6		       00		      .byte.b	#%00000000	; 
   2599  fdb7		       00		      .byte.b	#%00000000	; 
   2600  fdb8		       00		      .byte.b	#%00000000	;
   2601  fdb9				   C2B
   2602  fdb9		       66		      .byte.b	#%01100110	;
   2603  fdba		       00		      .byte.b	#%00000000	; 
   2604  fdbb		       00		      .byte.b	#%00000000	; 
   2605  fdbc		       00		      .byte.b	#%00000000	; 
   2606  fdbd		       00		      .byte.b	#%00000000	;
   2607  fdbe				   C3B
   2608  fdbe		       e7		      .byte.b	#%11100111	;
   2609  fdbf		       00		      .byte.b	#%00000000	; 
   2610  fdc0		       00		      .byte.b	#%00000000	; 
   2611  fdc1		       00		      .byte.b	#%00000000	; 
   2612  fdc2		       00		      .byte.b	#%00000000	;
   2613  fdc3				   C4B
   2614  fdc3		       e7		      .byte.b	#%11100111	;
   2615  fdc4		       24		      .byte.b	#%00100100	; 
   2616  fdc5		       00		      .byte.b	#%00000000	; 
   2617  fdc6		       00		      .byte.b	#%00000000	; 
   2618  fdc7		       00		      .byte.b	#%00000000	;
   2619  fdc8				   C5B
   2620  fdc8		       e7		      .byte.b	#%11100111	;
   2621  fdc9		       66		      .byte.b	#%01100110	; 
   2622  fdca		       00		      .byte.b	#%00000000	; 
   2623  fdcb		       00		      .byte.b	#%00000000	; 
   2624  fdcc		       00		      .byte.b	#%00000000	;
   2625  fdcd				   C6B
   2626  fdcd		       e7		      .byte.b	#%11100111	;
   2627  fdce		       e7		      .byte.b	#%11100111	; 
   2628  fdcf		       00		      .byte.b	#%00000000	; 
   2629  fdd0		       00		      .byte.b	#%00000000	; 
   2630  fdd1		       00		      .byte.b	#%00000000	;
   2631  fdd2				   C7B
   2632  fdd2		       e7		      .byte.b	#%11100111	;
   2633  fdd3		       e7		      .byte.b	#%11100111	; 
   2634  fdd4		       24		      .byte.b	#%00100100	; 
   2635  fdd5		       00		      .byte.b	#%00000000	; 
   2636  fdd6		       00		      .byte.b	#%00000000	;
   2637  fdd7				   C8B
   2638  fdd7		       e7		      .byte.b	#%11100111	;
   2639  fdd8		       e7		      .byte.b	#%11100111	; 
   2640  fdd9		       66		      .byte.b	#%01100110	; 
   2641  fdda		       00		      .byte.b	#%00000000	; 
   2642  fddb		       00		      .byte.b	#%00000000	;
   2643  fddc				   C9B
   2644  fddc		       e7		      .byte.b	#%11100111	;
   2645  fddd		       e7		      .byte.b	#%11100111	; 
   2646  fdde		       e7		      .byte.b	#%11100111	; 
   2647  fddf		       00		      .byte.b	#%00000000	; 
   2648  fde0		       00		      .byte.b	#%00000000	;
   2649  fde1				   CAB
   2650  fde1		       e7		      .byte.b	#%11100111	;
   2651  fde2		       e7		      .byte.b	#%11100111	; 
   2652  fde3		       e7		      .byte.b	#%11100111	; 
   2653  fde4		       24		      .byte.b	#%00100100	; 
   2654  fde5		       00		      .byte.b	#%00000000	;
   2655  fde6				   CBB
   2656  fde6		       e7		      .byte.b	#%11100111	;
   2657  fde7		       e7		      .byte.b	#%11100111	; 
   2658  fde8		       e7		      .byte.b	#%11100111	; 
   2659  fde9		       66		      .byte.b	#%01100110	; 
   2660  fdea		       00		      .byte.b	#%00000000	;
   2661  fdeb				   CCB
   2662  fdeb		       e7		      .byte.b	#%11100111	;
   2663  fdec		       e7		      .byte.b	#%11100111	; 
   2664  fded		       e7		      .byte.b	#%11100111	; 
   2665  fdee		       e7		      .byte.b	#%11100111	; 
   2666  fdef		       00		      .byte.b	#%00000000	;
   2667  fdf0
   2668  fdf0				   CDB
   2669  fdf0		       e7		      .byte.b	#%11100111	;
   2670  fdf1		       e7		      .byte.b	#%11100111	; 
   2671  fdf2		       e7		      .byte.b	#%11100111	; 
   2672  fdf3		       e7		      .byte.b	#%11100111	; 
   2673  fdf4		       24		      .byte.b	#%00100100	;
   2674  fdf5
   2675  fdf5				   CEB
   2676  fdf5		       e7		      .byte.b	#%11100111	;
   2677  fdf6		       e7		      .byte.b	#%11100111	; 
   2678  fdf7		       e7		      .byte.b	#%11100111	; 
   2679  fdf8		       e7		      .byte.b	#%11100111	; 
   2680  fdf9		       66		      .byte.b	#%01100110	;
   2681  fdfa
   2682  fdfa				   CFB
   2683  fdfa		       e7		      .byte.b	#%11100111	;
   2684  fdfb		       e7		      .byte.b	#%11100111	; 
   2685  fdfc		       e7		      .byte.b	#%11100111	; 
   2686  fdfd		       e7		      .byte.b	#%11100111	; 
   2687  fdfe		       e7		      .byte.b	#%11100111	;
   2688  fdff
   2689  fe00					      org	$FE00
   2690  fe00				   AesTable
   2691  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2692  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2693  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2694  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2695  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2696  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2697  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2698  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2699  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2700  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2701  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2702  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2703  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2704  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2705  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2706  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2707  ff00
   2708  ff00					      org	$FF00
   2709  ff00				   StaticText		; All static text must be on the same MSB block. 
   2710  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2711  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2712  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2713  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2714  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2715  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2716  ff05
   2717  ff05				   HellwayLeftText
   2718  ff05		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2719  ff06		       59		      .byte.b	#<CH + #FONT_OFFSET
   2720  ff07		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2721  ff08		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2722  ff09
   2723  ff09				   HellwayRightText
   2724  ff09		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2725  ff0a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2726  ff0b		       81		      .byte.b	#<CP + #FONT_OFFSET
   2727  ff0c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2728  ff0d		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2729  ff0e
   2730  ff0e				   OpbText
   2731  ff0e		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2732  ff0f		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2733  ff10		       81		      .byte.b	#<CP + #FONT_OFFSET
   2734  ff11		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2735  ff12
   2736  ff12				   YearText
   2737  ff12		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2738  ff13		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2739  ff14		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2740  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2741  ff16		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2742  ff17
   2743  ff17				   GoText
   2744  ff17		       54		      .byte.b	#<CG + #FONT_OFFSET
   2745  ff18		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2746  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2747  ff1a		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2748  ff1b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2749  ff1c
   2750  ff1c				   ReadyText
   2751  ff1c		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2752  ff1d		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2753  ff1e		       36		      .byte.b	#<CA + #FONT_OFFSET
   2754  ff1f		       45		      .byte.b	#<CD + #FONT_OFFSET
   2755  ff20		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2756  ff21
   2757  ff21				   WinText
   2758  ff21		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2759  ff22		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2760  ff23		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2761  ff24
   2762  ff24				   LoseText
   2763  ff24		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2764  ff25		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2765  ff26		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2766  ff27
   2767  ff27				   EndStaticText
   2768  ff27
   2769  ff27				   TachometerSizeLookup1
   2770  ff27		       1f		      .byte.b	#%00011111
   2771  ff28		       3f		      .byte.b	#%00111111
   2772  ff29		       7f		      .byte.b	#%01111111
   2773  ff2a		       ff		      .byte.b	#%11111111
   2774  ff2b		       ff		      .byte.b	#%11111111
   2775  ff2c		       ff		      .byte.b	#%11111111
   2776  ff2d		       ff		      .byte.b	#%11111111
   2777  ff2e		       ff		      .byte.b	#%11111111
   2778  ff2f
   2779  ff2f				   TachometerSizeLookup2
   2780  ff2f		       00		      .byte.b	#%00000000
   2781  ff30		       00		      .byte.b	#%00000000
   2782  ff31		       00		      .byte.b	#%00000000
   2783  ff32		       00		      .byte.b	#%00000000
   2784  ff33		       80		      .byte.b	#%10000000
   2785  ff34		       c0		      .byte.b	#%11000000
   2786  ff35		       e0		      .byte.b	#%11100000
   2787  ff36		       f0		      .byte.b	#%11110000
   2788  ff37
   2789  ff37				   TachometerGearLookup
   2790  ff37		       01		      .byte.b	#%00000001
   2791  ff38		       02		      .byte.b	#%00000010
   2792  ff39		       04		      .byte.b	#%00000100
   2793  ff3a		       08		      .byte.b	#%00001000
   2794  ff3b		       10		      .byte.b	#%00010000
   2795  ff3c		       30		      .byte.b	#%00110000
   2796  ff3d
   2797  ff3d				   EngineSoundType
   2798  ff3d		       02		      .byte.b	#2
   2799  ff3e		       02		      .byte.b	#2
   2800  ff3f		       0e		      .byte.b	#14
   2801  ff40		       06		      .byte.b	#6
   2802  ff41		       06		      .byte.b	#6
   2803  ff42		       0e		      .byte.b	#14
   2804  ff43
   2805  ff43				   EngineBaseFrequence
   2806  ff43		       1f		      .byte.b	#31
   2807  ff44		       15		      .byte.b	#21
   2808  ff45		       14		      .byte.b	#20
   2809  ff46		       1f		      .byte.b	#31
   2810  ff47		       16		      .byte.b	#22
   2811  ff48		       03		      .byte.b	#3
   2812  ff49
   2813  ff49				   CarSprite0		; Upside down, Original Car
   2814  ff49		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2815  ff51				   CarSprite0NoPadding
   2816  ff51		       7e		      .byte.b	#%01111110
   2817  ff52		       24		      .byte.b	#%00100100
   2818  ff53		       bd		      .byte.b	#%10111101
   2819  ff54		       3c		      .byte.b	#%00111100
   2820  ff55		       bd		      .byte.b	#%10111101
   2821  ff56		       3c		      .byte.b	#%00111100
   2822  ff57
   2823  ff57				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2824  ff57		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2825  ff5f				   CarSprite1NoPadding
   2826  ff5f		       bd		      .byte.b	#%10111101
   2827  ff60		       7e		      .byte.b	#%01111110
   2828  ff61		       5a		      .byte.b	#%01011010
   2829  ff62		       66		      .byte.b	#%01100110
   2830  ff63		       bd		      .byte.b	#%10111101
   2831  ff64		       3c		      .byte.b	#%00111100
   2832  ff65
   2833  ff65				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2834  ff65		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2835  ff6d				   CarSprite2NoPadding
   2836  ff6d		       7e		      .byte.b	#%01111110
   2837  ff6e		       a5		      .byte.b	#%10100101
   2838  ff6f		       42		      .byte.b	#%01000010
   2839  ff70		       42		      .byte.b	#%01000010
   2840  ff71		       bd		      .byte.b	#%10111101
   2841  ff72		       7e		      .byte.b	#%01111110
   2842  ff73
   2843  ff73				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2844  ff73		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2845  ff7b				   CarSprite3NoPadding
   2846  ff7b		       3c		      .byte.b	#%00111100
   2847  ff7c		       db		      .byte.b	#%11011011
   2848  ff7d		       db		      .byte.b	#%11011011
   2849  ff7e		       3c		      .byte.b	#%00111100
   2850  ff7f		       5a		      .byte.b	#%01011010
   2851  ff80		       3c		      .byte.b	#%00111100
   2852  ff81
   2853  ff81				   TrafficSpeeds
   2854  ff81		       00		      .byte.b	#$00	;  Trafic0 L
   2855  ff82		       00		      .byte.b	#$00	;  Trafic0 H
   2856  ff83		       0a		      .byte.b	#$0A	;  Trafic1 L
   2857  ff84		       01		      .byte.b	#$01	;  Trafic1 H
   2858  ff85		       e6		      .byte.b	#$E6	;  Trafic2 L
   2859  ff86		       00		      .byte.b	#$00	;  Trafic2 H
   2860  ff87		       c2		      .byte.b	#$C2	;  Trafic3 L
   2861  ff88		       00		      .byte.b	#$00	;  Trafic3 H
   2862  ff89		       9e		      .byte.b	#$9E	;  Trafic4 L
   2863  ff8a		       00		      .byte.b	#$00	;  Trafic4 H
   2864  ff8b				   TrafficSpeedsHighDelta
   2865  ff8b		       00		      .byte.b	#$00	;  Trafic0 L
   2866  ff8c		       00		      .byte.b	#$00	;  Trafic0 H
   2867  ff8d		       0a		      .byte.b	#$0A	;  Trafic1 L
   2868  ff8e		       01		      .byte.b	#$01	;  Trafic1 H
   2869  ff8f		       c8		      .byte.b	#$C8	;  Trafic2 L
   2870  ff90		       00		      .byte.b	#$00	;  Trafic2 H
   2871  ff91		       86		      .byte.b	#$86	;  Trafic3 L
   2872  ff92		       00		      .byte.b	#$00	;  Trafic3 H
   2873  ff93		       44		      .byte.b	#$44	;  Trafic4 L
   2874  ff94		       00		      .byte.b	#$00	;  Trafic4 H
   2875  ff95
   2876  ff95				   CarIdToSpriteAddressL
   2877  ff95		       49		      .byte.b	#<CarSprite0
   2878  ff96		       57		      .byte.b	#<CarSprite1
   2879  ff97		       65		      .byte.b	#<CarSprite2
   2880  ff98		       73		      .byte.b	#<CarSprite3
   2881  ff99
   2882  ff99				   CarIdToSpriteAddressH
   2883  ff99		       ff		      .byte.b	#>CarSprite0
   2884  ff9a		       ff		      .byte.b	#>CarSprite1
   2885  ff9b		       ff		      .byte.b	#>CarSprite2
   2886  ff9c		       ff		      .byte.b	#>CarSprite3
   2887  ff9d
   2888  ff9d				   EnemyCarIdToSpriteAddressL
   2889  ff9d		       51		      .byte.b	#<CarSprite0NoPadding
   2890  ff9e		       5f		      .byte.b	#<CarSprite1NoPadding
   2891  ff9f		       6d		      .byte.b	#<CarSprite2NoPadding
   2892  ffa0		       7b		      .byte.b	#<CarSprite3NoPadding
   2893  ffa1
   2894  ffa1				   EnemyCarIdToSpriteAddressH
   2895  ffa1		       ff		      .byte.b	#>CarSprite0NoPadding
   2896  ffa2		       ff		      .byte.b	#>CarSprite1NoPadding
   2897  ffa3		       ff		      .byte.b	#>CarSprite2NoPadding
   2898  ffa4		       ff		      .byte.b	#>CarSprite3NoPadding
   2899  ffa5
   2900  ffa5				   CarIdToAccelerateSpeed
   2901  ffa5		       80		      .byte.b	#128
   2902  ffa6		       c0		      .byte.b	#192
   2903  ffa7		       60		      .byte.b	#96
   2904  ffa8		       c0		      .byte.b	#192
   2905  ffa9
   2906  ffa9				   CarIdToTimeoverBreakInterval 		; Glide
   2907  ffa9		       03		      .byte.b	#%00000011	;Every 4 frames
   2908  ffaa		       03		      .byte.b	#%00000011	;Every 4 frames
   2909  ffab		       0f		      .byte.b	#%00001111	;Every 16 frames
   2910  ffac		       03		      .byte.b	#%00000011	;Every 4 frames
   2911  ffad
   2912  ffad				   CarIdToMaxSpeedL
   2913  ffad		       80		      .byte.b	#$80
   2914  ffae		       00		      .byte.b	#$00	; One less gear
   2915  ffaf		       80		      .byte.b	#$80
   2916  ffb0		       80		      .byte.b	#$80
   2917  ffb1
   2918  ffb1				   CarIdToMaxGear
   2919  ffb1		       05		      .byte.b	#5
   2920  ffb2		       04		      .byte.b	#4	; One less gear
   2921  ffb3		       05		      .byte.b	#5
   2922  ffb4		       05		      .byte.b	#5
   2923  ffb5
   2924  ffb5				   GearToBreakSpeedTable
   2925  ffb5		       09		      .byte.b	#(BREAK_SPEED - 1)
   2926  ffb6		       09		      .byte.b	#(BREAK_SPEED - 1)
   2927  ffb7		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2928  ffb8		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2929  ffb9		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2930  ffba		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2931  ffbb
   2932  ffbb				   TrafficColorTable
   2933  ffbb		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2934  ffbc		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2935  ffbd		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2936  ffbe		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2937  ffbf
   2938  ffbf				   TrafficChanceTable
   2939  ffbf		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2940  ffc0		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2941  ffc1		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2942  ffc2		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2943  ffc3
   2944  ffc3				   TrafficTimeTable
   2945  ffc3		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2946  ffc4		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2947  ffc5		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2948  ffc6		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2949  ffc7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2950  ffc8
   2951  ffc8
   2952  fffc					      org	$FFFC
   2953  fffc		       00 f0		      .word.w	BeforeStart
   2954  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
