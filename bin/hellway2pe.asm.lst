------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 ec f6 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad 8f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 b9 f6 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080		       85 b9		      STA	OpCountdownTimer	;3
    283  f082
    284  f082				   ConfigurePlayer1XPosition
    285  f082		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    286  f084		       85 b7		      STA	Player1X	;3
    287  f086
    288  f086				   HPositioning 		; Avoid sleep doing needed stuff
    289  f086		       85 02		      STA	WSYNC
    290  f088
    291  f088				   ConfigurePlayer0XPosition
    292  f088		       a9 21		      LDA	#PLAYER_0_X_START	;2
    293  f08a		       85 b6		      STA	Player0X	;3
    294  f08c
    295  f08c				   ConfigureMissileSize
    296  f08c		       a9 30		      LDA	#%00110000	;2 Missile Size
    297  f08e		       85 04		      STA	NUSIZ0	;3
    298  f090		       85 05		      STA	NUSIZ1	;3
    299  f092
    300  f092				   ConfigureNextCheckpoint
    301  f092		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    302  f094		       85 cd		      STA	NextCheckpoint
    303  f096
    304  f096		       a9 00		      LDA	#0	; Avoid missile reseting position 
    305  f098							;SLEEP 41
      0  f098					      SLEEP	4	;
      1  f098				   .CYCLES    SET	4
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     19  f09a					      REPEND
    307  f09a		       85 12		      STA	RESM0
      0  f09c					      SLEEP	2	;
      1  f09c				   .CYCLES    SET	2
      2  f09c
      3  f09c				  -	      IF	.CYCLES < 2
      4  f09c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09c				  -	      ERR
      6  f09c					      ENDIF
      7  f09c
      8  f09c				  -	      IF	.CYCLES & 1
      9  f09c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09c				  -	      nop	0
     11  f09c				  -	      ELSE
     12  f09c				  -	      bit	VSYNC
     13  f09c				  -	      ENDIF
     14  f09c				  -.CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c					      REPEAT	.CYCLES / 2
     18  f09c		       ea		      nop
     19  f09d					      REPEND
    309  f09d		       85 14		      STA	RESBL
      0  f09f					      SLEEP	2
      1  f09f				   .CYCLES    SET	2
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f				  -	      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f				  -	      ELSE
     12  f09f				  -	      bit	VSYNC
     13  f09f				  -	      ENDIF
     14  f09f				  -.CYCLES    SET	.CYCLES - 3
     15  f09f					      ENDIF
     16  f09f
     17  f09f					      REPEAT	.CYCLES / 2
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    311  f0a0		       85 13		      STA	RESM1
      0  f0a2					      SLEEP	3
      1  f0a2				   .CYCLES    SET	3
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4				  -	      REPEAT	.CYCLES / 2
     18  f0a4				  -	      nop
     19  f0a4					      REPEND
    313  f0a4
    314  f0a4		       a9 e0		      LDA	#$E0
    315  f0a6		       85 24		      STA	HMBL
    316  f0a8		       85 22		      STA	HMM0
    317  f0aa		       85 23		      STA	HMM1
    318  f0ac		       85 02		      STA	WSYNC
    319  f0ae		       85 2a		      STA	HMOVE
    320  f0b0		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    321  f0b2		       85 2b		      STA	HMCLR
      0  f0b4					      SLEEP	30
      1  f0b4				   .CYCLES    SET	30
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     19  f0c3					      REPEND
    323  f0c3		       85 10		      STA	RESP0
    324  f0c5							;SLEEP 5 ; Temporarily move player 1 away.
    325  f0c5		       85 11		      STA	RESP1
    326  f0c7
    327  f0c7				   WaitResetToEnd
    328  f0c7		       ad 84 02 	      LDA	INTIM
    329  f0ca		       d0 fb		      BNE	WaitResetToEnd
    330  f0cc
    331  f0cc				   MainLoop
    332  f0cc		       a9 02		      LDA	#2
    333  f0ce		       85 00		      STA	VSYNC
    334  f0d0		       85 02		      STA	WSYNC
    335  f0d2		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    336  f0d4				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    337  f0d4		       a9 01		      LDA	#%00000001	;3
    338  f0d6		       24 df		      BIT	TextFlickerMode	;2
    339  f0d8		       f0 05		      BEQ	TextSideFrameZero	;2
    340  f0da		       25 8d		      AND	FrameCount1	;2
    341  f0dc		       4c e1 f0 	      JMP	StoreTextSize	;3
    342  f0df				   TextSideFrameZero
    343  f0df		       25 8c		      AND	FrameCount0	;2
    344  f0e1				   StoreTextSize
    345  f0e1		       85 de		      STA	TextSide	;3
    346  f0e3
    347  f0e3				   PrepareMaxHMove
      0  f0e3					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e3				   .CYCLES    SET	18
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     19  f0ec					      REPEND
    349  f0ec		       a9 80		      LDA	#$80
    350  f0ee		       85 24		      STA	HMBL
    351  f0f0		       85 22		      STA	HMM0
    352  f0f2		       85 23		      STA	HMM1
    353  f0f4		       85 20		      STA	HMP0
    354  f0f6		       85 21		      STA	HMP1
    355  f0f8		       85 02		      STA	WSYNC
    356  f0fa		       85 2a		      STA	HMOVE	; 1/10			
    357  f0fc
    358  f0fc				   ConfigVBlankTimer
    359  f0fc		       a5 c6		      LDA	GameMode
    360  f0fe		       c9 10		      CMP	#MAX_GAME_MODE
    361  f100		       f0 05		      BEQ	SetVblankTimerQrCode
    362  f102		       a9 29		      LDA	#VBLANK_TIMER
    363  f104		       4c 09 f1 	      JMP	SetVblankTimer
    364  f107				   SetVblankTimerQrCode
    365  f107		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    366  f109
    367  f109				   SetVblankTimer
    368  f109		       85 02		      STA	WSYNC	;3
    369  f10b		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    370  f10d		       8d 96 02 	      STA	TIM64T	;3	
    371  f110		       a9 00		      LDA	#0	;2
    372  f112		       85 00		      STA	VSYNC	;3	
    373  f114
    374  f114				   RandomizeGame
    375  f114		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f116		       d0 2d		      BNE	EndRandomizeGame
    377  f118		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f11a		       29 02		      AND	#%00000010
    379  f11c		       f0 24		      BEQ	DeterministicGame
    380  f11e		       a6 96		      LDX	TrafficOffset1 + 2
    381  f120		       bd 00 fe 	      LDA	AesTable,X
    382  f123		       45 8c		      EOR	FrameCount0
    383  f125		       85 96		      STA	TrafficOffset1 + 2
    384  f127		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f129		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f12b		       bd 00 fe 	      LDA	AesTable,X
    387  f12e		       45 8c		      EOR	FrameCount0
    388  f130		       85 9a		      STA	TrafficOffset2 + 2
    389  f132		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f134		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f136		       bd 00 fe 	      LDA	AesTable,X
    392  f139		       45 8c		      EOR	FrameCount0
    393  f13b		       85 9e		      STA	TrafficOffset3 + 2
    394  f13d		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13f		       4c 45 f1 	      JMP	EndRandomizeGame
    396  f142
    397  f142				   DeterministicGame
    398  f142		       20 ec f6 	      JSR	DefaultOffsets
    399  f145
    400  f145				   EndRandomizeGame
    401  f145
    402  f145
    403  f145				   CountFrame
    404  f145		       e6 8c		      INC	FrameCount0	; 5
    405  f147		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    406  f149		       e6 8d		      INC	FrameCount1	; 5 
    407  f14b				   SkipIncFC1
    408  f14b
    409  f14b				   CallDrawQrCode
    410  f14b		       a5 c6		      LDA	GameMode
    411  f14d		       c9 10		      CMP	#MAX_GAME_MODE
    412  f14f		       d0 03		      BNE	TestIsGameRunning
    413  f151		       4c e1 fa 	      JMP	DrawQrCode
    414  f154
    415  f154							;Does not update the game if not running
    416  f154				   TestIsGameRunning
    417  f154		       a5 bd		      LDA	GameStatus	;3
    418  f156		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    419  f158				   SelectCarWithDpadCall		; Only do it when game is stoped
    420  f158		       a2 00		      LDX	#0	; Player 0
    421  f15a		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    422  f15c		       85 b0		      STA	Tmp0
    423  f15e		       20 f5 f8 	      JSR	SelectCarWithDpad
    424  f161		       e8		      INX		; Player 1
    425  f162		       20 f5 f8 	      JSR	SelectCarWithDpad
    426  f165
    427  f165							; Needs to draw the opponent in the correct line even when game stoped  
    428  f165							; Draeing is a destructive operation
    429  f165		       20 07 f9 	      JSR	ProcessOpponentLine
    430  f168
    431  f168				   CallConfigureCarSprites
    432  f168		       20 c3 f8 	      JSR	ConfigureCarSprites
    433  f16b				   SkipUpdateLogicJump
    434  f16b		       4c b4 f1 	      JMP	SkipUpdateLogic
    435  f16e				   ContinueWithGameLogic
    436  f16e
    437  f16e				   CallEverySecond		; Timer for now
    438  f16e		       a2 00		      LDX	#0
    439  f170		       20 b8 fa 	      JSR	EverySecond
    440  f173		       e8		      INX
    441  f174		       20 b8 fa 	      JSR	EverySecond
    442  f177
    443  f177
    444  f177				   ChangeTextFlickerMode
    445  f177		       a5 bc		      LDA	SwitchDebounceCounter
    446  f179		       d0 0d		      BNE	EndChangeTextFlickerMode
    447  f17b		       ad 82 02 	      LDA	SWCHB
    448  f17e		       29 02		      AND	#%00000010	;Game select
    449  f180		       d0 06		      BNE	EndChangeTextFlickerMode
    450  f182		       e6 df		      INC	TextFlickerMode
    451  f184		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    452  f186		       85 bc		      STA	SwitchDebounceCounter
    453  f188				   EndChangeTextFlickerMode
    454  f188
    455  f188				   CallProcessSpeed
    456  f188		       a2 00		      LDX	#0
    457  f18a		       20 15 fa 	      JSR	ProcessSpeed
    458  f18d
    459  f18d		       e8		      INX		; Player 1
    460  f18e		       20 15 fa 	      JSR	ProcessSpeed
    461  f191
    462  f191				   CallUpdateOffsets
    463  f191		       a2 00		      LDX	#0	; Player 0
    464  f193		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    465  f195		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    466  f197		       a5 f0		      LDA	Player0SpeedL
    467  f199		       85 b4		      STA	Tmp4
    468  f19b		       a5 f2		      LDA	Player0SpeedH
    469  f19d		       85 b5		      STA	Tmp5
    470  f19f		       20 c2 f9 	      JSR	UpdateOffsets
    471  f1a2
    472  f1a2							;LDX Exits the call with correct value.
    473  f1a2		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    474  f1a4		       85 b3		      STA	Tmp3
    475  f1a6		       a5 f1		      LDA	Player1SpeedL
    476  f1a8		       85 b4		      STA	Tmp4
    477  f1aa		       a5 f3		      LDA	Player1SpeedH
    478  f1ac		       85 b5		      STA	Tmp5
    479  f1ae		       20 c2 f9 	      JSR	UpdateOffsets
    480  f1b1
    481  f1b1				   CallProcessOpponentLine
    482  f1b1		       20 07 f9 	      JSR	ProcessOpponentLine
    483  f1b4
    484  f1b4
    485  f1b4				   SkipUpdateLogic		; Continue here if not paused
    486  f1b4
    487  f1b4				   CallStatusUpdateSbr
    488  f1b4		       a2 00		      LDX	#0
    489  f1b6		       20 c5 fa 	      JSR	CalculateGear
    490  f1b9		       20 d2 fa 	      JSR	ProcessScoreFontColor
    491  f1bc		       e8		      INX
    492  f1bd		       20 c5 fa 	      JSR	CalculateGear
    493  f1c0		       20 d2 fa 	      JSR	ProcessScoreFontColor
    494  f1c3
    495  f1c3				   IsGameOver
    496  f1c3		       a5 b8		      LDA	CountdownTimer
    497  f1c5		       05 f0		      ORA	Player0SpeedL
    498  f1c7		       05 f2		      ORA	Player0SpeedH
    499  f1c9		       d0 0b		      BNE	IsCheckpoint
    500  f1cb		       a9 01		      LDA	#1
    501  f1cd		       85 cb		      STA	ScoreFontColorHoldChange
    502  f1cf		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    503  f1d1		       85 c9		      STA	ScoreFontColor
    504  f1d3		       4c 08 f2 	      JMP	SkipIsTimeOver
    505  f1d6
    506  f1d6				   IsCheckpoint
    507  f1d6		       a5 cd		      LDA	NextCheckpoint
    508  f1d8		       c5 92		      CMP	TrafficOffset0 + 2
    509  f1da		       d0 20		      BNE	SkipIsCheckpoint
    510  f1dc		       18		      CLC
    511  f1dd		       69 10		      ADC	#CHECKPOINT_INTERVAL
    512  f1df		       85 cd		      STA	NextCheckpoint
    513  f1e1		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    514  f1e3		       85 c9		      STA	ScoreFontColor
    515  f1e5		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    516  f1e7		       85 cb		      STA	ScoreFontColorHoldChange
    517  f1e9		       a5 b8		      LDA	CountdownTimer
    518  f1eb		       18		      CLC
    519  f1ec		       65 c0		      ADC	CheckpointTime
    520  f1ee		       85 b8		      STA	CountdownTimer
    521  f1f0		       90 04		      BCC	JumpSkipTimeOver
    522  f1f2		       a9 ff		      LDA	#$FF
    523  f1f4		       85 b8		      STA	CountdownTimer	; Does not overflow!
    524  f1f6				   JumpSkipTimeOver
    525  f1f6		       20 aa f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    526  f1f9		       4c 08 f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    527  f1fc				   SkipIsCheckpoint
    528  f1fc
    529  f1fc				   IsTimeOver
    530  f1fc		       a5 b8		      LDA	CountdownTimer
    531  f1fe		       d0 08		      BNE	SkipIsTimeOver
    532  f200		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    533  f202		       85 cb		      STA	ScoreFontColorHoldChange
    534  f204		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    535  f206		       85 c9		      STA	ScoreFontColor
    536  f208				   SkipIsTimeOver
    537  f208
    538  f208		       20 c3 f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    539  f20b
    540  f20b				   CallProcessSound
    541  f20b		       20 d0 f5 	      JSR	ProcessSound
    542  f20e
    543  f20e							;Could be done during on vblank to save this comparisson time (before draw score), 
    544  f20e							;but I am saving vblank cycles for now, in case of 2 players.
    545  f20e				   ChooseTextSide		; 
    546  f20e		       a5 de		      LDA	TextSide	;3
    547  f210		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    548  f212		       4c 96 f2 	      JMP	RightScoreWrite
    549  f215
    550  f215				   LeftScoreWrite
    551  f215		       a5 c9		      LDA	ScoreFontColor
    552  f217		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    553  f219		       f0 51		      BEQ	PrintCheckpoint
    554  f21b		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    555  f21d		       f0 55		      BEQ	PrintStartGame
    556  f21f		       a5 bd		      LDA	GameStatus
    557  f221		       f0 59		      BEQ	PrintHellwayLeft
    558  f223				   WriteDistance		;Not optimized yet, ugly code.
    559  f223				   Digit0Timer
    560  f223		       a5 b8		      LDA	CountdownTimer	;3
    561  f225		       29 0f		      AND	#%00001111	;2
    562  f227		       aa		      TAX		; 2
    563  f228		       bd 6c fc 	      LDA	FontLookup,X	;4 
    564  f22b		       85 d1		      STA	ScoreD1	;3
    565  f22d
    566  f22d				   Digit1Timer
    567  f22d		       a5 b8		      LDA	CountdownTimer	;3
    568  f22f		       4a		      LSR		; 2
    569  f230		       4a		      LSR		; 2
    570  f231		       4a		      LSR		; 2
    571  f232		       4a		      LSR		; 2
    572  f233		       aa		      TAX		; 2
    573  f234		       bd 6c fc 	      LDA	FontLookup,X	;4
    574  f237		       85 d0		      STA	ScoreD0	;3
    575  f239
    576  f239				   SpeedBar
    577  f239		       a5 f0		      LDA	Player0SpeedL
    578  f23b		       29 e0		      AND	#%11100000	;2 Discard the last bits
    579  f23d		       18		      CLC
    580  f23e		       2a		      ROL		;First goes into carry
    581  f23f		       2a		      ROL
    582  f240		       2a		      ROL
    583  f241		       2a		      ROL
    584  f242		       85 b0		      STA	Tmp0
    585  f244		       a5 f2		      LDA	Player0SpeedH
    586  f246		       0a		      ASL
    587  f247		       0a		      ASL
    588  f248		       0a		      ASL
    589  f249		       05 b0		      ORA	Tmp0
    590  f24b		       aa		      TAX		; 2
    591  f24c		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    592  f24f		       85 d2		      STA	ScoreD2	;3
    593  f251
    594  f251				   DistanceCheckpointCount		; Will run all letters in the future
    595  f251		       a5 92		      LDA	TrafficOffset0 + 2	;3
    596  f253		       29 f0		      AND	#%11110000	;2
    597  f255		       4a		      LSR
    598  f256		       4a		      LSR
    599  f257		       4a		      LSR
    600  f258		       4a		      LSR
    601  f259		       aa		      TAX		; 2
    602  f25a		       bd 6c fc 	      LDA	FontLookup,X	;4 
    603  f25d		       85 d3		      STA	ScoreD3	;3
    604  f25f
    605  f25f				   DistanceBar		; 16 subdivisions per checkpoint
    606  f25f		       a5 92		      LDA	TrafficOffset0 + 2	;3
    607  f261		       29 0f		      AND	#%00001111	;2
    608  f263		       aa		      TAX		; 2
    609  f264		       bd 7d fc 	      LDA	BarLookup,X	;4 
    610  f267		       85 d4		      STA	ScoreD4	;3
    611  f269
    612  f269				   EndDrawDistance
    613  f269		       4c 0a f3 	      JMP	RightScoreWriteEnd	;3
    614  f26c
    615  f26c				   PrintCheckpoint
    616  f26c		       a2 00		      LDX	#<CheckpointText
    617  f26e		       20 01 f7 	      JSR	PrintStaticText
    618  f271		       4c 0a f3 	      JMP	RightScoreWriteEnd	;3
    619  f274				   PrintStartGame
    620  f274		       a2 23		      LDX	#<GoText
    621  f276		       20 01 f7 	      JSR	PrintStaticText
    622  f279		       4c 0a f3 	      JMP	RightScoreWriteEnd	;3
    623  f27c
    624  f27c				   PrintHellwayLeft
    625  f27c		       a5 8d		      LDA	FrameCount1
    626  f27e		       29 01		      AND	#1
    627  f280		       d0 05		      BNE	PrintCreditsLeft
    628  f282		       a2 05		      LDX	#<HellwayLeftText
    629  f284		       4c 89 f2 	      JMP	PrintGameMode
    630  f287				   PrintCreditsLeft
    631  f287		       a2 0f		      LDX	#<OpbText
    632  f289
    633  f289				   PrintGameMode
    634  f289		       20 01 f7 	      JSR	PrintStaticText
    635  f28c		       a6 c6		      LDX	GameMode
    636  f28e		       bd 6c fc 	      LDA	FontLookup,X	;4 
    637  f291		       85 d0		      STA	ScoreD0	;3
    638  f293		       4c 0a f3 	      JMP	RightScoreWriteEnd	;3
    639  f296
    640  f296				   RightScoreWrite
    641  f296		       a5 bd		      LDA	GameStatus
    642  f298		       f0 4f		      BEQ	PrintHellwayRight
    643  f29a		       a5 c9		      LDA	ScoreFontColor
    644  f29c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    645  f29e		       f0 5c		      BEQ	PrintGameOver
    646  f2a0
    647  f2a0				   OpDigit0Timer
    648  f2a0		       a5 b9		      LDA	OpCountdownTimer	;3
    649  f2a2		       29 0f		      AND	#%00001111	;2
    650  f2a4		       aa		      TAX		; 2
    651  f2a5		       bd 6c fc 	      LDA	FontLookup,X	;4 
    652  f2a8		       85 d4		      STA	ScoreD4	;3
    653  f2aa
    654  f2aa				   OpDigit1Timer
    655  f2aa		       a5 b9		      LDA	OpCountdownTimer	;3
    656  f2ac		       4a		      LSR		; 2
    657  f2ad		       4a		      LSR		; 2
    658  f2ae		       4a		      LSR		; 2
    659  f2af		       4a		      LSR		; 2
    660  f2b0		       aa		      TAX		; 2
    661  f2b1		       bd 6c fc 	      LDA	FontLookup,X	;4
    662  f2b4		       85 d3		      STA	ScoreD3	;3
    663  f2b6
    664  f2b6				   OpSpeedBar
    665  f2b6		       a5 f1		      LDA	Player1SpeedL
    666  f2b8		       29 e0		      AND	#%11100000	;2 Discard the last bits
    667  f2ba		       18		      CLC
    668  f2bb		       2a		      ROL		;First goes into carry
    669  f2bc		       2a		      ROL
    670  f2bd		       2a		      ROL
    671  f2be		       2a		      ROL
    672  f2bf		       85 b0		      STA	Tmp0
    673  f2c1		       a5 f3		      LDA	Player1SpeedH
    674  f2c3		       0a		      ASL
    675  f2c4		       0a		      ASL
    676  f2c5		       0a		      ASL
    677  f2c6		       05 b0		      ORA	Tmp0
    678  f2c8		       aa		      TAX		; 2
    679  f2c9		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    680  f2cc		       85 d2		      STA	ScoreD2	;3
    681  f2ce
    682  f2ce				   OpDistanceCheckpointCount		; Will run all letters in the future
    683  f2ce		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    684  f2d0		       29 f0		      AND	#%11110000	;2
    685  f2d2		       4a		      LSR
    686  f2d3		       4a		      LSR
    687  f2d4		       4a		      LSR
    688  f2d5		       4a		      LSR
    689  f2d6		       aa		      TAX		; 2
    690  f2d7		       bd 6c fc 	      LDA	FontLookup,X	;4 
    691  f2da		       85 d1		      STA	ScoreD1	;3
    692  f2dc
    693  f2dc				   OpDistanceBar		; 16 subdivisions per checkpoint
    694  f2dc		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    695  f2de		       29 0f		      AND	#%00001111	;2
    696  f2e0		       aa		      TAX		; 2
    697  f2e1		       bd 7d fc 	      LDA	BarLookup,X	;4 
    698  f2e4		       85 d0		      STA	ScoreD0	;3
    699  f2e6		       4c 0a f3 	      JMP	RightScoreWriteEnd
    700  f2e9
    701  f2e9				   PrintHellwayRight
    702  f2e9		       a5 8d		      LDA	FrameCount1
    703  f2eb		       29 01		      AND	#1
    704  f2ed		       d0 05		      BNE	PrintCreditsRight
    705  f2ef		       a2 0a		      LDX	#<HellwayRightText
    706  f2f1		       4c f6 f2 	      JMP	PrintRightIntro
    707  f2f4				   PrintCreditsRight
    708  f2f4		       a2 14		      LDX	#<YearText
    709  f2f6				   PrintRightIntro
    710  f2f6		       20 01 f7 	      JSR	PrintStaticText
    711  f2f9		       4c 0a f3 	      JMP	RightScoreWriteEnd
    712  f2fc				   PrintGameOver
    713  f2fc		       a5 8c		      LDA	FrameCount0
    714  f2fe		       30 05		      BMI	PrintOverText
    715  f300		       a2 19		      LDX	#<GameText
    716  f302		       4c 07 f3 	      JMP	StoreGameOverText
    717  f305				   PrintOverText
    718  f305		       a2 1e		      LDX	#<OverText
    719  f307				   StoreGameOverText
    720  f307		       20 01 f7 	      JSR	PrintStaticText
    721  f30a				   RightScoreWriteEnd
    722  f30a
    723  f30a
    724  f30a				   ScoreBackgroundColor
    725  f30a		       a2 00		      LDX	#0
    726  f30c		       ad 82 02 	      LDA	SWCHB
    727  f30f		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    728  f311		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    729  f313		       f0 04		      BEQ	BlackAndWhiteScoreBg
    730  f315		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    731  f317		       a2 03		      LDX	#BACKGROUND_COLOR
    732  f319				   BlackAndWhiteScoreBg
    733  f319		       85 b2		      STA	Tmp2	; Score Background
    734  f31b		       86 b3		      STX	Tmp3	; Traffic Background
    735  f31d
    736  f31d				   ConfigurePFForScore
    737  f31d							;LDA #SCORE_BACKGROUND_COLOR; Done above
    738  f31d		       85 09		      STA	COLUBK
    739  f31f		       20 68 f6 	      JSR	ClearAll
    740  f322		       a9 02		      LDA	#%00000010	; Score mode
    741  f324		       85 0a		      STA	CTRLPF
    742  f326		       a5 de		      LDA	TextSide	;3
    743  f328		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    744  f32a				   LeftScoreOn
    745  f32a		       a5 c9		      LDA	ScoreFontColor
    746  f32c		       85 07		      STA	COLUP1
    747  f32e		       a5 b2		      LDA	Tmp2
    748  f330		       85 06		      STA	COLUP0
    749  f332		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    750  f334		       85 b1		      STA	Tmp1
    751  f336		       4c 45 f3 	      JMP	CallWaitForVblankEnd
    752  f339				   RightScoreOn
    753  f339		       a5 c9		      LDA	ScoreFontColor
    754  f33b		       85 06		      STA	COLUP0
    755  f33d		       a5 b2		      LDA	Tmp2
    756  f33f		       85 07		      STA	COLUP1
    757  f341		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    758  f343		       85 b1		      STA	Tmp1
    759  f345
    760  f345							; After here we are going to update the screen, No more heavy code
    761  f345				   CallWaitForVblankEnd
    762  f345		       20 94 f8 	      JSR	WaitForVblankEnd
    763  f348
    764  f348				   DrawScoreHud
    765  f348		       20 1f f7 	      JSR	PrintScore
    766  f34b
    767  f34b		       85 02		      STA	WSYNC
    768  f34d
    769  f34d		       a5 0c		      LDA	INPT4	;3
    770  f34f		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    771  f351		       a5 c9		      LDA	ScoreFontColor
    772  f353		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    773  f355		       d0 0a		      BNE	WaitAnotherScoreLine
    774  f357		       a5 de		      LDA	TextSide	;3
    775  f359		       d0 03		      BNE	LeftScoreOnGameOver
    776  f35b		       4c 6e f8 	      JMP	DrawGameOverScreenRight
    777  f35e				   LeftScoreOnGameOver
    778  f35e		       4c e0 f7 	      JMP	DrawGameOverScreenLeft
    779  f361
    780  f361				   WaitAnotherScoreLine
    781  f361		       85 02		      STA	WSYNC
    782  f363
    783  f363				   PrepareForTraffic
    784  f363		       20 7e f6 	      JSR	ClearPF	; 32
    785  f366
    786  f366		       85 02		      STA	WSYNC
    787  f368		       85 2a		      STA	HMOVE
    788  f36a		       85 02		      STA	WSYNC
    789  f36c		       85 2a		      STA	HMOVE
    790  f36e
    791  f36e		       a9 30		      LDA	#%00110000	; 2 Score mode
    792  f370		       85 0a		      STA	CTRLPF	;3
    793  f372
    794  f372		       a5 c2		      LDA	TrafficColor	;3
    795  f374		       85 08		      STA	COLUPF	;3
    796  f376
    797  f376		       a9 96		      LDA	#PLAYER1_COLOR	;2
    798  f378		       85 07		      STA	COLUP1	;3
    799  f37a
    800  f37a		       a5 c9		      LDA	ScoreFontColor	;3
    801  f37c		       85 06		      STA	COLUP0	;3
    802  f37e
    803  f37e		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    804  f380
    805  f380		       20 7e f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    806  f383
    807  f383		       a6 b3		      LDX	Tmp3	; Background color.
    808  f385
      0  f385					      SLEEP	6	; Odd sleep destroys flags
      1  f385				   .CYCLES    SET	6
      2  f385
      3  f385				  -	      IF	.CYCLES < 2
      4  f385				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f385				  -	      ERR
      6  f385					      ENDIF
      7  f385
      8  f385				  -	      IF	.CYCLES & 1
      9  f385				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f385				  -	      nop	0
     11  f385				  -	      ELSE
     12  f385				  -	      bit	VSYNC
     13  f385				  -	      ENDIF
     14  f385				  -.CYCLES    SET	.CYCLES - 3
     15  f385					      ENDIF
     16  f385
     17  f385					      REPEAT	.CYCLES / 2
     18  f385		       ea		      nop
     17  f385					      REPEND
     18  f386		       ea		      nop
     17  f386					      REPEND
     18  f387		       ea		      nop
     19  f388					      REPEND
    810  f388
    811  f388		       a5 8c		      LDA	FrameCount0	;Brach flag
    812  f38a		       29 01		      AND	#%00000001
    813  f38c
    814  f38c		       86 09		      STX	COLUBK	;3
    815  f38e		       d0 05		      BNE	OpDrawCache	;2
    816  f390		       4c 4f f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    817  f393							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    818  f393
    819  f393							;main scanline loop...
    820  f393				   OpScanLoop
    821  f393		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    822  f395
    823  f395							;Start of next line!			
    824  f395				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    825  f395
    826  f395		       a5 80		      LDA	GRP0Cache	;3
    827  f397		       85 1b		      STA	GRP0	;3
    828  f399
    829  f399		       a5 84		      LDA	GRP1Cache	;3
    830  f39b		       85 1c		      STA	GRP1	;3
    831  f39d
    832  f39d		       a5 85		      LDA	ENABLCache	;3
    833  f39f		       85 1f		      STA	ENABL	;3
    834  f3a1
    835  f3a1		       a5 86		      LDA	ENAM0Cache	;3
    836  f3a3		       85 1d		      STA	ENAM0	;3
    837  f3a5
    838  f3a5		       a5 87		      LDA	ENAM1Cache	;3
    839  f3a7		       85 1e		      STA	ENAM1	;3
    840  f3a9
    841  f3a9		       a5 81		      LDA	PF0Cache	;3
    842  f3ab		       85 0d		      STA	PF0	;3
    843  f3ad
    844  f3ad		       a9 00		      LDA	#0	;2
    845  f3af							;STA PF0	     ;3
    846  f3af		       85 80		      STA	GRP0Cache	;3
    847  f3b1		       85 86		      STA	ENAM0Cache	;3
    848  f3b3		       85 85		      STA	ENABLCache	;3
    849  f3b5		       85 87		      STA	ENAM1Cache	; 3
    850  f3b7							;STA GRP1Cache ;3
    851  f3b7		       85 0d		      STA	PF0	;3
    852  f3b9							;STA PF2	     ;3
    853  f3b9
    854  f3b9		       a5 83		      LDA	PF2Cache	;3
    855  f3bb		       85 0f		      STA	PF2	;3
    856  f3bd
    857  f3bd				   OpDrawCar0
    858  f3bd		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    859  f3bf		       b0 04		      BCS	OpSkipDrawCar	;2
    860  f3c1		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    861  f3c3		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    862  f3c5				   OpSkipDrawCar
    863  f3c5
    864  f3c5							;BEQ DrawTraffic3
    865  f3c5				   OpDrawTraffic1		; 33
    866  f3c5		       98		      TYA		; 2
    867  f3c6		       18		      CLC		; 2 
    868  f3c7		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    869  f3c9		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    870  f3cb		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    871  f3cd		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    872  f3cf		       4c d4 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    873  f3d2				   OpEorOffsetWithCarry
    874  f3d2		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    875  f3d4				   OpAfterEorOffsetWithCarry		;17
    876  f3d4		       aa		      TAX		;2
    877  f3d5		       bd 00 fe 	      LDA	AesTable,X	; 4
    878  f3d8		       c5 bf		      CMP	OpTrafficChance	;3
    879  f3da		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    880  f3dc		       a9 ff		      LDA	#$FF	;2
    881  f3de		       85 86		      STA	ENAM0Cache	;3
    882  f3e0				   OpFinishDrawTraffic1
    883  f3e0
    884  f3e0				   OpErasePF2
    885  f3e0		       a9 00		      LDA	#0
    886  f3e2		       85 0f		      STA	PF2
    887  f3e4
    888  f3e4				   OpDrawTraffic2		; 33
    889  f3e4		       98		      TYA		; 2
    890  f3e5		       18		      CLC		; 2 
    891  f3e6		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    892  f3e8		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    893  f3ea		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    894  f3ec		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    895  f3ee		       4c f3 f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    896  f3f1				   OpEorOffsetWithCarry2
    897  f3f1		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    898  f3f3				   OpAfterEorOffsetWithCarry2		;17
    899  f3f3		       aa		      TAX		;2
    900  f3f4		       bd 00 fe 	      LDA	AesTable,X	; 4
    901  f3f7		       c5 bf		      CMP	OpTrafficChance	;3
    902  f3f9		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    903  f3fb		       a9 02		      LDA	#%00000010	;2
    904  f3fd		       85 85		      STA	ENABLCache	;3
    905  f3ff				   OpFinishDrawTraffic2
    906  f3ff
    907  f3ff							;STA WSYNC ;65 / 137
    908  f3ff
    909  f3ff							; LDA Tmp0 ; Flicker this line if drawing car
    910  f3ff							; BEQ FinishDrawTraffic4
    911  f3ff				   OpDrawTraffic3		; 33
    912  f3ff		       98		      TYA		; 2
    913  f400		       18		      CLC		; 2 
    914  f401		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    915  f403		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    916  f405		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    917  f407		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    918  f409		       4c 0e f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    919  f40c				   OpEorOffsetWithCarry3
    920  f40c		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    921  f40e				   OpAfterEorOffsetWithCarry3		;17
    922  f40e		       aa		      TAX		;2
    923  f40f		       bd 00 fe 	      LDA	AesTable,X	; 4
    924  f412		       c5 bf		      CMP	OpTrafficChance	;3
    925  f414		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    926  f416		       a9 02		      LDA	#%00000010	;2
    927  f418		       85 87		      STA	ENAM1Cache
    928  f41a				   OpFinishDrawTraffic3
    929  f41a
    930  f41a				   OpDrawOponent		;26
    931  f41a		       84 b0		      STY	Tmp0	;3
    932  f41c		       a4 cf		      LDY	OpponentLine	;3
    933  f41e		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    934  f420		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    935  f422				   OpDrawOpponent
    936  f422		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    937  f424		       85 80		      STA	GRP0Cache	;3
    938  f426		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    939  f428		       a4 b0		      LDY	Tmp0	;3
    940  f42a		       4c 3e f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    941  f42d				   OpSkipDrawOpponent
    942  f42d		       c6 cf		      DEC	OpponentLine	;5
    943  f42f		       a4 b0		      LDY	Tmp0	;3
    944  f431
    945  f431
    946  f431				   OpDrawTraffic0		; 21 2pe
    947  f431		       98		      TYA		; 2
    948  f432		       18		      CLC		; 2 
    949  f433		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    950  f435		       29 08		      AND	#%00001000	;2
    951  f437		       f0 05		      BEQ	OpHasNoBorderP0	;3
    952  f439				   OpHasBorderP0
    953  f439		       a9 70		      LDA	#%01110000	; 2
    954  f43b		       4c 40 f4 	      JMP	OpStoreBorderP0	; 3
    955  f43e				   OpHasNoBorderP0
    956  f43e		       a9 00		      LDA	#0	; 2
    957  f440				   OpStoreBorderP0
    958  f440		       85 81		      STA	PF0Cache	; 3
    959  f442		       85 83		      STA	PF2Cache	; 3
    960  f444
    961  f444				   OpSkipDrawTraffic0
    962  f444
    963  f444				   OpWhileScanLoop
    964  f444		       88		      DEY		;2
    965  f445		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    966  f447		       4c 93 f3 	      JMP	OpScanLoop	;3
    967  f44a				   OpFinishScanLoop		; 7 209 of 222
    968  f44a		       4c 02 f5 	      JMP	FinishScanLoop
    969  f44d
    970  f44d							;main scanline loop...
    971  f44d				   ScanLoop
    972  f44d		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    973  f44f
    974  f44f							;Start of next line!			
    975  f44f				   DrawCache		;63 Is the last line going to the top of the next frame?
    976  f44f		       a5 81		      LDA	PF0Cache	;3
    977  f451		       85 0d		      STA	PF0	;3
    978  f453
    979  f453		       a5 80		      LDA	GRP0Cache	;3
    980  f455		       85 1b		      STA	GRP0	;3
    981  f457
    982  f457		       a5 84		      LDA	GRP1Cache	;3
    983  f459		       85 1c		      STA	GRP1	;3
    984  f45b
    985  f45b		       a5 86		      LDA	ENAM0Cache	;3
    986  f45d		       85 1d		      STA	ENAM0	;3
    987  f45f
    988  f45f		       a5 85		      LDA	ENABLCache	;3
    989  f461		       85 1f		      STA	ENABL	;3
    990  f463
    991  f463		       a5 87		      LDA	ENAM1Cache	;3
    992  f465		       85 1e		      STA	ENAM1	;3
    993  f467
    994  f467		       a5 83		      LDA	PF2Cache	;3
    995  f469		       85 0f		      STA	PF2	;3
    996  f46b
    997  f46b		       a9 00		      LDA	#0	;2
    998  f46d		       85 0d		      STA	PF0	;3
    999  f46f		       85 84		      STA	GRP1Cache	;3
   1000  f471		       85 85		      STA	ENABLCache	;3
   1001  f473		       85 86		      STA	ENAM0Cache	;3
   1002  f475		       85 87		      STA	ENAM1Cache	; 3
   1003  f477							;STA GRP0Cache
   1004  f477		       85 0f		      STA	PF2	;3
   1005  f479
   1006  f479				   DrawCar0
   1007  f479		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1008  f47b		       b0 04		      BCS	SkipDrawCar	;2
   1009  f47d		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1010  f47f		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1011  f481				   SkipDrawCar
   1012  f481
   1013  f481							;BEQ DrawTraffic3
   1014  f481				   DrawTraffic1 		; 33
   1015  f481		       98		      TYA		; 2
   1016  f482		       18		      CLC		; 2 
   1017  f483		       65 95		      ADC	TrafficOffset1 + 1	;3
   1018  f485		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1019  f487		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1020  f489		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1021  f48b		       4c 90 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1022  f48e				   EorOffsetWithCarry
   1023  f48e		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1024  f490				   AfterEorOffsetWithCarry		;17
   1025  f490		       aa		      TAX		;2
   1026  f491		       bd 00 fe 	      LDA	AesTable,X	; 4
   1027  f494		       c5 be		      CMP	TrafficChance	;3
   1028  f496		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1029  f498		       a9 ff		      LDA	#$FF	;2
   1030  f49a		       85 86		      STA	ENAM0Cache	;3
   1031  f49c				   FinishDrawTraffic1
   1032  f49c
   1033  f49c				   DrawTraffic2 		; 33
   1034  f49c		       98		      TYA		; 2
   1035  f49d		       18		      CLC		; 2 
   1036  f49e		       65 99		      ADC	TrafficOffset2 + 1	;3
   1037  f4a0		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1038  f4a2		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1039  f4a4		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1040  f4a6		       4c ab f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1041  f4a9				   EorOffsetWithCarry2
   1042  f4a9		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1043  f4ab				   AfterEorOffsetWithCarry2		;17
   1044  f4ab		       aa		      TAX		;2
   1045  f4ac		       bd 00 fe 	      LDA	AesTable,X	; 4
   1046  f4af		       c5 be		      CMP	TrafficChance	;3
   1047  f4b1		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1048  f4b3		       a9 02		      LDA	#%00000010	;2
   1049  f4b5		       85 85		      STA	ENABLCache	;3
   1050  f4b7				   FinishDrawTraffic2
   1051  f4b7
   1052  f4b7							;STA WSYNC ;65 / 137
   1053  f4b7
   1054  f4b7							; LDA Tmp0 ; Flicker this line if drawing car
   1055  f4b7							; BEQ FinishDrawTraffic4
   1056  f4b7				   DrawTraffic3 		; 33
   1057  f4b7		       98		      TYA		; 2
   1058  f4b8		       18		      CLC		; 2 
   1059  f4b9		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1060  f4bb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1061  f4bd		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1062  f4bf		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1063  f4c1		       4c c6 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1064  f4c4				   EorOffsetWithCarry3
   1065  f4c4		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1066  f4c6				   AfterEorOffsetWithCarry3		;17
   1067  f4c6		       aa		      TAX		;2
   1068  f4c7		       bd 00 fe 	      LDA	AesTable,X	; 4
   1069  f4ca		       c5 be		      CMP	TrafficChance	;3
   1070  f4cc		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1071  f4ce		       a9 02		      LDA	#%00000010	;2
   1072  f4d0		       85 87		      STA	ENAM1Cache
   1073  f4d2				   FinishDrawTraffic3
   1074  f4d2
   1075  f4d2
   1076  f4d2				   DrawOponent		;26
   1077  f4d2		       84 b0		      STY	Tmp0	;3
   1078  f4d4		       a4 cf		      LDY	OpponentLine	;3
   1079  f4d6		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1080  f4d8		       b0 0b		      BCS	SkipDrawOpponent	;2
   1081  f4da				   DrawOpponent
   1082  f4da		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1083  f4dc		       85 84		      STA	GRP1Cache	;3
   1084  f4de		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1085  f4e0		       a4 b0		      LDY	Tmp0	;3
   1086  f4e2		       4c f6 f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1087  f4e5				   SkipDrawOpponent
   1088  f4e5		       c6 cf		      DEC	OpponentLine	;5
   1089  f4e7		       a4 b0		      LDY	Tmp0	;3
   1090  f4e9
   1091  f4e9				   DrawTraffic0 		; 21 2pe
   1092  f4e9		       98		      TYA		; 2
   1093  f4ea		       18		      CLC		; 2 
   1094  f4eb		       65 91		      ADC	TrafficOffset0 + 1	;3
   1095  f4ed		       29 08		      AND	#%00001000	;2
   1096  f4ef		       f0 05		      BEQ	HasNoBorderP0	;3
   1097  f4f1				   HasBorderP0
   1098  f4f1		       a9 70		      LDA	#%01110000	; 2
   1099  f4f3		       4c f8 f4 	      JMP	StoreBorderP0	; 3
   1100  f4f6				   HasNoBorderP0
   1101  f4f6		       a9 00		      LDA	#0	; 2
   1102  f4f8				   StoreBorderP0
   1103  f4f8		       85 81		      STA	PF0Cache	; 3
   1104  f4fa		       85 83		      STA	PF2Cache	; 3
   1105  f4fc
   1106  f4fc				   SkipDrawTraffic0
   1107  f4fc
   1108  f4fc				   WhileScanLoop
   1109  f4fc		       88		      DEY		;2
   1110  f4fd		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1111  f4ff		       4c 4d f4 	      JMP	ScanLoop	;3
   1112  f502				   FinishScanLoop		; 7 209 of 222
   1113  f502
   1114  f502		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1115  f504		       20 8d f6 	      JSR	LoadAll
   1116  f507		       85 02		      STA	WSYNC	; do stuff!
   1117  f509		       85 02		      STA	WSYNC
   1118  f50b		       85 02		      STA	WSYNC
   1119  f50d
   1120  f50d				   PrepareOverscan
   1121  f50d		       a9 02		      LDA	#2
   1122  f50f		       85 02		      STA	WSYNC
   1123  f511							;STA HMOVE	; HMOVE 10
   1124  f511		       85 01		      STA	VBLANK
   1125  f513
   1126  f513		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1127  f515		       8d 96 02 	      STA	TIM64T
   1128  f518
   1129  f518		       85 2b		      STA	HMCLR	; Before we process car movement
   1130  f51a							;Read Fire Button before, will make it start the game for now.
   1131  f51a				   StartGame
   1132  f51a		       a5 0c		      LDA	INPT4	;3
   1133  f51c		       25 0d		      AND	INPT5	;3 player 
   1134  f51e		       30 38		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1135  f520		       a5 8c		      LDA	FrameCount0
   1136  f522		       29 01		      AND	#%00000001
   1137  f524		       d0 32		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1138  f526		       a5 bd		      LDA	GameStatus	;3
   1139  f528		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1140  f52a		       d0 2c		      BNE	SkipGameStart
   1141  f52c		       a5 c6		      LDA	GameMode
   1142  f52e		       c9 10		      CMP	#MAX_GAME_MODE
   1143  f530		       d0 0b		      BNE	SetGameRunning
   1144  f532		       a9 00		      LDA	#0
   1145  f534		       85 c6		      STA	GameMode
   1146  f536		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1147  f538		       85 bc		      STA	SwitchDebounceCounter
   1148  f53a		       4c 58 f5 	      JMP	SkipGameStart
   1149  f53d				   SetGameRunning
   1150  f53d		       e6 bd		      INC	GameStatus
   1151  f53f		       a9 00		      LDA	#0	;
   1152  f541		       85 8c		      STA	FrameCount0
   1153  f543		       85 8d		      STA	FrameCount1
   1154  f545		       a9 0a		      LDA	#10
   1155  f547		       85 19		      STA	AUDV0
   1156  f549		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1157  f54b		       85 c9		      STA	ScoreFontColor
   1158  f54d		       85 ca		      STA	OpScoreFontColor
   1159  f54f		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1160  f551		       85 cb		      STA	ScoreFontColorHoldChange
   1161  f553		       85 cc		      STA	OpScoreFontColorHoldChange
   1162  f555		       4c c0 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1163  f558				   SkipGameStart
   1164  f558
   1165  f558				   ReadSwitches
   1166  f558		       a6 bc		      LDX	SwitchDebounceCounter
   1167  f55a		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1168  f55c		       a9 01		      LDA	#%00000001
   1169  f55e		       2c 82 02 	      BIT	SWCHB
   1170  f561		       d0 07		      BNE	SkipReset
   1171  f563		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1172  f565		       85 bc		      STA	SwitchDebounceCounter
   1173  f567		       4c c8 f5 	      JMP	OverScanWaitBeforeReset
   1174  f56a				   SkipReset
   1175  f56a
   1176  f56a				   GameModeSelect
   1177  f56a		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1178  f56c		       d0 1c		      BNE	SkipGameSelect
   1179  f56e		       20 b9 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1180  f571				   ContinueGameSelect
   1181  f571		       a9 02		      LDA	#%00000010
   1182  f573		       2c 82 02 	      BIT	SWCHB
   1183  f576		       d0 12		      BNE	SkipGameSelect
   1184  f578		       a6 c6		      LDX	GameMode
   1185  f57a		       e0 10		      CPX	#MAX_GAME_MODE
   1186  f57c		       f0 04		      BEQ	ResetGameMode
   1187  f57e		       e8		      INX
   1188  f57f		       4c 84 f5 	      JMP	StoreGameMode
   1189  f582				   ResetGameMode
   1190  f582		       a2 00		      LDX	#0
   1191  f584				   StoreGameMode
   1192  f584		       86 c6		      STX	GameMode
   1193  f586		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1194  f588		       85 bc		      STA	SwitchDebounceCounter
   1195  f58a				   SkipGameSelect
   1196  f58a		       4c 8f f5 	      JMP	EndReadSwitches
   1197  f58d				   DecrementSwitchDebounceCounter
   1198  f58d		       c6 bc		      DEC	SwitchDebounceCounter
   1199  f58f				   EndReadSwitches
   1200  f58f
   1201  f58f				   DoNotTurnBeforeStart
   1202  f58f							;STA HMCLR
   1203  f58f		       a5 bd		      LDA	GameStatus
   1204  f591		       f0 2d		      BEQ	OverScanWait
   1205  f593
   1206  f593							; Last thing, will overrride hmove
   1207  f593				   CallTestColisionAndMove
   1208  f593		       a2 00		      LDX	#0	; Player 0
   1209  f595							; Colision with traffic, each player check different flags,
   1210  f595		       a5 8c		      LDA	FrameCount0
   1211  f597		       29 01		      AND	#%00000001
   1212  f599		       d0 07		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1213  f59b		       a5 01		      LDA	CXM1P
   1214  f59d		       4a		      LSR
   1215  f59e		       05 00		      ORA	CXM0P
   1216  f5a0		       05 02		      ORA	CXP0FB
   1217  f5a2							; ORA CXPPMM ; Collision between players will have its own rules
   1218  f5a2				   SkipColisionPlayer0		; Should not colide on opponent side.
   1219  f5a2		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1220  f5a4		       85 b2		      STA	Tmp2
   1221  f5a6		       20 42 f9 	      JSR	TestCollisionAndMove
   1222  f5a9
   1223  f5a9		       e8		      INX		; player 1
   1224  f5aa		       a5 8c		      LDA	FrameCount0
   1225  f5ac		       29 01		      AND	#%00000001
   1226  f5ae		       f0 07		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1227  f5b0		       a5 00		      LDA	CXM0P
   1228  f5b2		       4a		      LSR
   1229  f5b3		       05 01		      ORA	CXM1P
   1230  f5b5		       05 03		      ORA	CXP1FB
   1231  f5b7				   SkipColisionPlayer1
   1232  f5b7		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1233  f5b9		       85 b2		      STA	Tmp2
   1234  f5bb		       20 42 f9 	      JSR	TestCollisionAndMove
   1235  f5be
   1236  f5be				   ClearCollision
   1237  f5be		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1238  f5c0
   1239  f5c0				   OverScanWait
   1240  f5c0		       ad 84 02 	      LDA	INTIM
   1241  f5c3		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1242  f5c5		       4c cc f0 	      JMP	MainLoop
   1243  f5c8
   1244  f5c8				   OverScanWaitBeforeReset
   1245  f5c8		       ad 84 02 	      LDA	INTIM
   1246  f5cb		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1247  f5cd		       4c 12 f0 	      JMP	Start
   1248  f5d0
   1249  f5d0				   Subroutines
   1250  f5d0
   1251  f5d0				   ProcessSound
   1252  f5d0				   LeftSound		;41
   1253  f5d0		       a5 b8		      LDA	CountdownTimer	;3
   1254  f5d2		       f0 1b		      BEQ	EngineOff	;2
   1255  f5d4		       a6 d5		      LDX	Gear
   1256  f5d6		       a5 f0		      LDA	Player0SpeedL	;3
   1257  f5d8		       4a		      LSR		;2
   1258  f5d9		       4a		      LSR		;2
   1259  f5da		       4a		      LSR		;2
   1260  f5db		       29 0f		      AND	#%00001111	;2
   1261  f5dd		       85 b0		      STA	Tmp0	;3
   1262  f5df		       bd 49 ff 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1263  f5e2		       38		      SEC		;2
   1264  f5e3		       e5 b0		      SBC	Tmp0	;3
   1265  f5e5		       85 17		      STA	AUDF0	;3
   1266  f5e7		       bd 43 ff 	      LDA	EngineSoundType,X	;4
   1267  f5ea		       85 15		      STA	AUDC0	;3
   1268  f5ec		       4c f3 f5 	      JMP	EndLeftSound	;3
   1269  f5ef				   EngineOff
   1270  f5ef		       a9 00		      LDA	#0
   1271  f5f1		       85 15		      STA	AUDC0
   1272  f5f3
   1273  f5f3				   EndLeftSound
   1274  f5f3
   1275  f5f3
   1276  f5f3				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1277  f5f3		       a5 c9		      LDA	ScoreFontColor	;3
   1278  f5f5		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1279  f5f7		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1280  f5f9		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1281  f5fb		       f0 29		      BEQ	PlayCheckpoint	;2
   1282  f5fd		       a5 8e		      LDA	CollisionCounter	;3
   1283  f5ff		       c9 e0		      CMP	#$E0	;2
   1284  f601		       b0 14		      BCS	PlayColision	;2
   1285  f603		       a5 cd		      LDA	NextCheckpoint	;3
   1286  f605		       38		      SEC		;2
   1287  f606		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1288  f608		       c9 02		      CMP	#$02	;2
   1289  f60a		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1290  f60c		       a5 b8		      LDA	CountdownTimer	; 3
   1291  f60e		       f0 53		      BEQ	MuteRightSound	;2
   1292  f610		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1293  f612		       90 37		      BCC	PlayWarnTimeEnding	;4
   1294  f614		       4c 63 f6 	      JMP	MuteRightSound	;3
   1295  f617				   PlayColision
   1296  f617		       a9 1f		      LDA	#31
   1297  f619		       85 18		      STA	AUDF1
   1298  f61b		       a9 08		      LDA	#8
   1299  f61d		       85 16		      STA	AUDC1
   1300  f61f		       a9 08		      LDA	#8
   1301  f621		       85 1a		      STA	AUDV1
   1302  f623		       4c 67 f6 	      JMP	EndRightSound
   1303  f626
   1304  f626				   PlayCheckpoint
   1305  f626		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1306  f628		       4a		      LSR		;2
   1307  f629		       4a		      LSR		;2
   1308  f62a		       4a		      LSR		;2
   1309  f62b		       85 18		      STA	AUDF1	;3
   1310  f62d		       a9 0c		      LDA	#12	;2
   1311  f62f		       85 16		      STA	AUDC1	;3
   1312  f631		       a9 06		      LDA	#6	;2
   1313  f633		       85 1a		      STA	AUDV1	;3
   1314  f635		       4c 67 f6 	      JMP	EndRightSound	;3
   1315  f638
   1316  f638				   PlayBeforeCheckpoint
   1317  f638		       a5 8c		      LDA	FrameCount0	;3
   1318  f63a		       29 1c		      AND	#%00011100	;2
   1319  f63c		       09 03		      ORA	#%00000011	;2
   1320  f63e		       85 18		      STA	AUDF1	;3
   1321  f640		       a9 0c		      LDA	#12	;2
   1322  f642		       85 16		      STA	AUDC1	;3
   1323  f644		       a9 03		      LDA	#3	;2
   1324  f646		       85 1a		      STA	AUDV1	;3
   1325  f648		       4c 67 f6 	      JMP	EndRightSound	;3
   1326  f64b
   1327  f64b				   PlayWarnTimeEnding
   1328  f64b		       a5 8c		      LDA	FrameCount0	;3
   1329  f64d		       29 04		      AND	#%00000100	;2
   1330  f64f		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1331  f651		       18		      CLC		;2
   1332  f652		       a9 0a		      LDA	#10	;2
   1333  f654		       65 b8		      ADC	CountdownTimer	;2
   1334  f656		       85 18		      STA	AUDF1	;3
   1335  f658		       a9 0c		      LDA	#12	;2
   1336  f65a		       85 16		      STA	AUDC1	;3
   1337  f65c		       a9 03		      LDA	#3	;2
   1338  f65e		       85 1a		      STA	AUDV1	;3
   1339  f660		       4c 67 f6 	      JMP	EndRightSound	;3
   1340  f663
   1341  f663				   MuteRightSound
   1342  f663		       a9 00		      LDA	#0
   1343  f665		       85 1a		      STA	AUDV1
   1344  f667				   EndRightSound
   1345  f667		       60		      RTS
   1346  f668
   1347  f668				   ClearAll		; 58
   1348  f668		       a9 00		      LDA	#0	;2
   1349  f66a		       85 1b		      STA	GRP0	;3
   1350  f66c		       85 1c		      STA	GRP1	;3
   1351  f66e		       85 1f		      STA	ENABL	;3
   1352  f670		       85 1d		      STA	ENAM0	;3
   1353  f672		       85 1e		      STA	ENAM1	;3
   1354  f674		       85 80		      STA	GRP0Cache	;3
   1355  f676		       85 84		      STA	GRP1Cache	;3
   1356  f678		       85 85		      STA	ENABLCache	;3
   1357  f67a		       85 86		      STA	ENAM0Cache	;3
   1358  f67c		       85 87		      STA	ENAM1Cache	;3
   1359  f67e
   1360  f67e				   ClearPF		; 26
   1361  f67e		       a9 00		      LDA	#0	;2
   1362  f680				   ClearPFSkipLDA0
   1363  f680		       85 0d		      STA	PF0	;3
   1364  f682		       85 0e		      STA	PF1	;3
   1365  f684		       85 0f		      STA	PF2	;3	
   1366  f686		       85 81		      STA	PF0Cache	;3
   1367  f688		       85 82		      STA	PF1Cache	;3
   1368  f68a		       85 83		      STA	PF2Cache	;3 
   1369  f68c		       60		      RTS		;6
   1370  f68d				   EndClearAll
   1371  f68d
   1372  f68d				   LoadAll		; 48
   1373  f68d		       a5 81		      LDA	PF0Cache	;3
   1374  f68f		       85 0d		      STA	PF0	;3
   1375  f691
   1376  f691		       a5 82		      LDA	PF1Cache	;3
   1377  f693		       85 0e		      STA	PF1	;3
   1378  f695
   1379  f695		       a5 83		      LDA	PF2Cache	;3
   1380  f697		       85 0f		      STA	PF2	;3
   1381  f699
   1382  f699		       a5 84		      LDA	GRP1Cache	;3
   1383  f69b		       85 1c		      STA	GRP1	;3
   1384  f69d
   1385  f69d		       a5 85		      LDA	ENABLCache	;3
   1386  f69f		       85 1f		      STA	ENABL	;3
   1387  f6a1
   1388  f6a1		       a5 86		      LDA	ENAM0Cache	;3
   1389  f6a3		       85 1d		      STA	ENAM0	;3
   1390  f6a5
   1391  f6a5		       a5 87		      LDA	ENAM1Cache	;3
   1392  f6a7		       85 1e		      STA	ENAM1	;3
   1393  f6a9
   1394  f6a9		       60		      RTS		;6
   1395  f6aa				   EndLoadAll
   1396  f6aa
   1397  f6aa				   NextDifficulty
   1398  f6aa		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1399  f6ac		       29 01		      AND	#%00000001
   1400  f6ae		       d0 2a		      BNE	CheckRandomDifficulty
   1401  f6b0
   1402  f6b0		       a5 c4		      LDA	CurrentDifficulty
   1403  f6b2		       18		      CLC
   1404  f6b3		       69 01		      ADC	#1
   1405  f6b5		       29 03		      AND	#%00000011	; 0 to 3
   1406  f6b7		       85 c4		      STA	CurrentDifficulty
   1407  f6b9
   1408  f6b9				   ConfigureDifficulty
   1409  f6b9		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1410  f6bb		       b9 c5 ff 	      LDA	TrafficChanceTable,Y
   1411  f6be		       85 be		      STA	TrafficChance
   1412  f6c0		       85 bf		      STA	OpTrafficChance	; Needs FIX
   1413  f6c2		       b9 c1 ff 	      LDA	TrafficColorTable,Y
   1414  f6c5		       85 c2		      STA	TrafficColor
   1415  f6c7		       85 c3		      STA	OpTrafficColor	; Needs FIX
   1416  f6c9
   1417  f6c9		       a5 c6		      LDA	GameMode	;
   1418  f6cb		       29 01		      AND	#%00000001
   1419  f6cd		       f0 03		      BEQ	UseNextDifficultyTime
   1420  f6cf		       4c d3 f6 	      JMP	StoreDifficultyTime
   1421  f6d2				   UseNextDifficultyTime
   1422  f6d2		       c8		      INY
   1423  f6d3				   StoreDifficultyTime
   1424  f6d3		       b9 c9 ff 	      LDA	TrafficTimeTable,Y
   1425  f6d6		       85 c0		      STA	CheckpointTime
   1426  f6d8		       85 c1		      STA	OpCheckpointTime
   1427  f6da
   1428  f6da				   CheckRandomDifficulty
   1429  f6da		       a5 c6		      LDA	GameMode
   1430  f6dc		       29 08		      AND	#%00001000	; Random difficulties
   1431  f6de		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1432  f6e0				   RandomDifficulty		; need work to make 2 players compatible
   1433  f6e0		       a6 8c		      LDX	FrameCount0
   1434  f6e2		       bd 00 fe 	      LDA	AesTable,X
   1435  f6e5							;EOR TrafficChance, no need, lets make life simple
   1436  f6e5		       29 3f		      AND	#%00111111
   1437  f6e7		       85 be		      STA	TrafficChance
   1438  f6e9		       85 bf		      STA	OpTrafficChance	; While not fix
   1439  f6eb
   1440  f6eb				   ReturnFromNextDifficulty
   1441  f6eb		       60		      RTS
   1442  f6ec
   1443  f6ec				   DefaultOffsets
   1444  f6ec		       a9 20		      LDA	#$20
   1445  f6ee		       85 96		      STA	TrafficOffset1 + 2
   1446  f6f0		       85 a6		      STA	OpTrafficOffset1 + 2
   1447  f6f2		       a9 40		      LDA	#$40
   1448  f6f4		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1449  f6f6		       85 aa		      STA	OpTrafficOffset2 + 2
   1450  f6f8		       a9 60		      LDA	#$60
   1451  f6fa		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1452  f6fc		       85 ae		      STA	OpTrafficOffset3 + 2
   1453  f6fe		       a9 80		      LDA	#$80
   1454  f700		       60		      RTS
   1455  f701
   1456  f701				   PrintStaticText		; Preload X with the offset referent to StaticText
   1457  f701		       bd 00 ff 	      LDA	StaticText,X
   1458  f704		       85 d0		      STA	ScoreD0
   1459  f706		       e8		      INX
   1460  f707		       bd 00 ff 	      LDA	StaticText,X
   1461  f70a		       85 d1		      STA	ScoreD1
   1462  f70c		       e8		      INX
   1463  f70d		       bd 00 ff 	      LDA	StaticText,X
   1464  f710		       85 d2		      STA	ScoreD2
   1465  f712		       e8		      INX
   1466  f713		       bd 00 ff 	      LDA	StaticText,X
   1467  f716		       85 d3		      STA	ScoreD3
   1468  f718		       e8		      INX
   1469  f719		       bd 00 ff 	      LDA	StaticText,X
   1470  f71c		       85 d4		      STA	ScoreD4
   1471  f71e		       60		      RTS
   1472  f71f
   1473  f71f				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1474  f71f		       a2 00		      LDX	#0
   1475  f721		       a0 04		      LDY	#FONT_OFFSET
   1476  f723
   1477  f723				   ScoreLoop		; 20 
   1478  f723		       85 02		      STA	WSYNC	;2
   1479  f725		       85 2a		      STA	HMOVE
   1480  f727
   1481  f727		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1482  f729		       85 0d		      STA	PF0	;3
   1483  f72b
   1484  f72b		       a5 82		      LDA	PF1Cache	;3
   1485  f72d		       85 0e		      STA	PF1	;3
   1486  f72f
   1487  f72f		       a5 83		      LDA	PF2Cache	;3
   1488  f731		       85 0f		      STA	PF2	;3
   1489  f733
   1490  f733				   DrawScoreD0		; 15
   1491  f733		       a6 d0		      LDX	ScoreD0	; 3
   1492  f735		       bd 00 fd 	      LDA	Font,X	;4
   1493  f738		       85 81		      STA	PF0Cache	;3
   1494  f73a		       c6 d0		      DEC	ScoreD0	;5
   1495  f73c
   1496  f73c				   DrawScoreD1		; 23	
   1497  f73c		       a6 d1		      LDX	ScoreD1	; 3
   1498  f73e		       bd 00 fd 	      LDA	Font,X	;4
   1499  f741		       0a		      ASL		;2
   1500  f742		       0a		      ASL		;2
   1501  f743		       0a		      ASL		;2
   1502  f744		       0a		      ASL		;2
   1503  f745		       85 82		      STA	PF1Cache	;3
   1504  f747		       c6 d1		      DEC	ScoreD1	;5
   1505  f749
   1506  f749				   DrawScoreD2		; 20
   1507  f749		       a6 d2		      LDX	ScoreD2	; 3
   1508  f74b		       bd 00 fd 	      LDA	Font,X	;4
   1509  f74e		       29 0f		      AND	#%00001111	;2
   1510  f750		       05 82		      ORA	PF1Cache	;3
   1511  f752		       85 82		      STA	PF1Cache	;3
   1512  f754		       c6 d2		      DEC	ScoreD2	;5
   1513  f756
   1514  f756				   DrawScoreD3		; 23
   1515  f756		       a6 d3		      LDX	ScoreD3	; 3
   1516  f758		       bd 00 fd 	      LDA	Font,X	;4
   1517  f75b		       4a		      LSR		;2
   1518  f75c		       4a		      LSR		;2
   1519  f75d		       4a		      LSR		;2
   1520  f75e		       4a		      LSR		;2
   1521  f75f		       85 83		      STA	PF2Cache	;3
   1522  f761		       c6 d3		      DEC	ScoreD3	;5
   1523  f763
   1524  f763				   DrawScoreD4		; 20
   1525  f763		       a6 d4		      LDX	ScoreD4	; 3
   1526  f765		       bd 00 fd 	      LDA	Font,X	;4
   1527  f768		       29 f0		      AND	#%11110000	;2
   1528  f76a		       05 83		      ORA	PF2Cache	;3
   1529  f76c		       85 83		      STA	PF2Cache	;3
   1530  f76e		       c6 d4		      DEC	ScoreD4	;5
   1531  f770
   1532  f770
   1533  f770		       88		      DEY		;2
   1534  f771		       10 b0		      BPL	ScoreLoop	;4
   1535  f773
   1536  f773		       85 02		      STA	WSYNC
   1537  f775		       85 2a		      STA	HMOVE
   1538  f777		       20 8d f6 	      JSR	LoadAll
   1539  f77a		       60		      RTS		; 6
   1540  f77b
   1541  f77b				   PrintRightDecimalDigits
   1542  f77b		       b9 00 00 	      LDA	0,Y
   1543  f77e		       4a		      LSR
   1544  f77f		       4a		      LSR
   1545  f780		       4a		      LSR
   1546  f781		       4a		      LSR
   1547  f782		       aa		      TAX
   1548  f783		       bd 6c fc 	      LDA	FontLookup,X	;4
   1549  f786		       85 d2		      STA	ScoreD2	;3
   1550  f788
   1551  f788		       b9 00 00 	      LDA	0,Y
   1552  f78b		       29 0f		      AND	#%00001111
   1553  f78d		       aa		      TAX
   1554  f78e		       bd 6c fc 	      LDA	FontLookup,X	;4
   1555  f791		       85 d3		      STA	ScoreD3	;3
   1556  f793
   1557  f793		       c8		      INY
   1558  f794		       b9 00 00 	      LDA	0,Y
   1559  f797		       4a		      LSR
   1560  f798		       4a		      LSR
   1561  f799		       4a		      LSR
   1562  f79a		       4a		      LSR
   1563  f79b		       aa		      TAX
   1564  f79c		       bd 6c fc 	      LDA	FontLookup,X	;4
   1565  f79f		       85 d0		      STA	ScoreD0	;3
   1566  f7a1
   1567  f7a1		       b9 00 00 	      LDA	0,Y
   1568  f7a4		       29 0f		      AND	#%00001111
   1569  f7a6		       aa		      TAX
   1570  f7a7		       bd 6c fc 	      LDA	FontLookup,X	;4
   1571  f7aa		       85 d1		      STA	ScoreD1	;3
   1572  f7ac
   1573  f7ac		       a9 ae		      LDA	#<Triangle + FONT_OFFSET
   1574  f7ae		       85 d4		      STA	ScoreD4
   1575  f7b0		       60		      RTS
   1576  f7b1
   1577  f7b1				   PrintLastLeftDecimalDigits
   1578  f7b1		       b9 00 00 	      LDA	0,Y
   1579  f7b4		       4a		      LSR
   1580  f7b5		       4a		      LSR
   1581  f7b6		       4a		      LSR
   1582  f7b7		       4a		      LSR
   1583  f7b8		       aa		      TAX
   1584  f7b9		       bd 6c fc 	      LDA	FontLookup,X	;4
   1585  f7bc		       85 d3		      STA	ScoreD3	;3
   1586  f7be		       b9 00 00 	      LDA	0,Y
   1587  f7c1		       29 0f		      AND	#%00001111
   1588  f7c3		       aa		      TAX
   1589  f7c4		       bd 6c fc 	      LDA	FontLookup,X	;4
   1590  f7c7		       85 d4		      STA	ScoreD4	;3
   1591  f7c9		       60		      RTS
   1592  f7ca
   1593  f7ca				   PrintZerosLeft
   1594  f7ca		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1595  f7cc		       85 d2		      STA	ScoreD2
   1596  f7ce		       85 d3		      STA	ScoreD3
   1597  f7d0		       85 d4		      STA	ScoreD4
   1598  f7d2		       60		      RTS
   1599  f7d3
   1600  f7d3				   DrawGameOverScoreLine
   1601  f7d3		       85 02		      STA	WSYNC
   1602  f7d5		       20 1f f7 	      JSR	PrintScore
   1603  f7d8		       85 02		      STA	WSYNC
   1604  f7da		       85 02		      STA	WSYNC
   1605  f7dc		       20 7e f6 	      JSR	ClearPF
   1606  f7df		       60		      RTS
   1607  f7e0
   1608  f7e0				   DrawGameOverScreenLeft
   1609  f7e0		       85 02		      STA	WSYNC
   1610  f7e2		       20 7e f6 	      JSR	ClearPF
   1611  f7e5
   1612  f7e5				   DrawGlideTimerLeft
   1613  f7e5		       20 a7 f8 	      JSR	Sleep8Lines
   1614  f7e8		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1615  f7ea		       85 06		      STA	COLUP0
   1616  f7ec		       85 02		      STA	WSYNC
   1617  f7ee		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1618  f7f0		       85 d0		      STA	ScoreD0
   1619  f7f2		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1620  f7f4		       85 d1		      STA	ScoreD1
   1621  f7f6		       20 ca f7 	      JSR	PrintZerosLeft
   1622  f7f9		       20 d3 f7 	      JSR	DrawGameOverScoreLine
   1623  f7fc
   1624  f7fc				   DrawHitCountLeft
   1625  f7fc		       20 a7 f8 	      JSR	Sleep8Lines
   1626  f7ff		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1627  f801		       85 06		      STA	COLUP0
   1628  f803		       85 02		      STA	WSYNC
   1629  f805		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1630  f807		       85 d0		      STA	ScoreD0
   1631  f809		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1632  f80b		       85 d1		      STA	ScoreD1
   1633  f80d		       20 ca f7 	      JSR	PrintZerosLeft
   1634  f810		       20 d3 f7 	      JSR	DrawGameOverScoreLine
   1635  f813
   1636  f813				   DrawCheckpointCountLeft
   1637  f813		       20 a7 f8 	      JSR	Sleep8Lines
   1638  f816		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1639  f818		       85 06		      STA	COLUP0
   1640  f81a		       85 02		      STA	WSYNC
   1641  f81c		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1642  f81e		       85 d0		      STA	ScoreD0
   1643  f820		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1644  f822		       85 d1		      STA	ScoreD1
   1645  f824		       20 ca f7 	      JSR	PrintZerosLeft
   1646  f827		       20 d3 f7 	      JSR	DrawGameOverScoreLine
   1647  f82a
   1648  f82a				   DrawGameVersionLeft
   1649  f82a		       20 a7 f8 	      JSR	Sleep8Lines
   1650  f82d		       a9 49		      LDA	#VERSION_COLOR
   1651  f82f		       85 06		      STA	COLUP0
   1652  f831
   1653  f831		       a5 c6		      LDA	GameMode
   1654  f833		       aa		      TAX
   1655  f834		       bd 6c fc 	      LDA	FontLookup,X	;4
   1656  f837		       85 d0		      STA	ScoreD0	;3
   1657  f839
   1658  f839		       a5 c7		      LDA	CurrentCarId
   1659  f83b		       aa		      TAX
   1660  f83c		       bd 6c fc 	      LDA	FontLookup,X	;4
   1661  f83f		       85 d1		      STA	ScoreD1	;3
   1662  f841
   1663  f841		       a5 db		      LDA	StartSWCHB
   1664  f843		       29 40		      AND	#%01000000	; P0 difficulty
   1665  f845		       49 40		      EOR	#%01000000	; Reverse bytes
   1666  f847		       2a		      ROL
   1667  f848		       2a		      ROL
   1668  f849		       2a		      ROL
   1669  f84a		       18		      CLC
   1670  f84b		       69 0a		      ADC	#10
   1671  f84d		       aa		      TAX
   1672  f84e		       bd 6c fc 	      LDA	FontLookup,X	;4
   1673  f851		       85 d2		      STA	ScoreD2	;3
   1674  f853
   1675  f853		       a5 db		      LDA	StartSWCHB
   1676  f855		       29 80		      AND	#%10000000	; P0 difficulty
   1677  f857		       49 80		      EOR	#%10000000	; Reverse bytes
   1678  f859		       2a		      ROL
   1679  f85a		       2a		      ROL
   1680  f85b		       18		      CLC
   1681  f85c		       69 0a		      ADC	#10
   1682  f85e		       aa		      TAX
   1683  f85f		       bd 6c fc 	      LDA	FontLookup,X	;4
   1684  f862		       85 d3		      STA	ScoreD3	;3
   1685  f864
   1686  f864		       a9 a9		      LDA	#<Pipe + FONT_OFFSET
   1687  f866		       85 d4		      STA	ScoreD4
   1688  f868
   1689  f868		       20 d3 f7 	      JSR	DrawGameOverScoreLine
   1690  f86b
   1691  f86b		       4c 84 f8 	      JMP	FinalizeDrawGameOver
   1692  f86e
   1693  f86e				   DrawGameOverScreenRight
   1694  f86e		       85 02		      STA	WSYNC
   1695  f870		       20 7e f6 	      JSR	ClearPF
   1696  f873
   1697  f873				   DrawVersionRight
   1698  f873		       20 a7 f8 	      JSR	Sleep8Lines
   1699  f876		       a9 49		      LDA	#VERSION_COLOR
   1700  f878		       85 07		      STA	COLUP1
   1701  f87a		       85 02		      STA	WSYNC
   1702  f87c		       a2 28		      LDX	#<VersionText
   1703  f87e		       20 01 f7 	      JSR	PrintStaticText
   1704  f881		       20 d3 f7 	      JSR	DrawGameOverScoreLine
   1705  f884
   1706  f884				   FinalizeDrawGameOver
   1707  f884		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1708  f886		       85 c9		      STA	ScoreFontColor
   1709  f888		       20 9e f8 	      JSR	Sleep4Lines
   1710  f88b		       20 ae f8 	      JSR	Sleep32Lines
   1711  f88e		       20 ae f8 	      JSR	Sleep32Lines
   1712  f891		       4c 0d f5 	      JMP	PrepareOverscan
   1713  f894
   1714  f894				   WaitForVblankEnd
   1715  f894		       ad 84 02 	      LDA	INTIM
   1716  f897		       d0 fb		      BNE	WaitForVblankEnd
   1717  f899		       85 02		      STA	WSYNC
   1718  f89b		       85 01		      STA	VBLANK
   1719  f89d		       60		      RTS
   1720  f89e
   1721  f89e				   Sleep4Lines
   1722  f89e		       85 02		      STA	WSYNC
   1723  f8a0		       85 02		      STA	WSYNC
   1724  f8a2		       85 02		      STA	WSYNC
   1725  f8a4		       85 02		      STA	WSYNC
   1726  f8a6		       60		      RTS
   1727  f8a7
   1728  f8a7				   Sleep8Lines
   1729  f8a7		       20 9e f8 	      JSR	Sleep4Lines
   1730  f8aa		       20 9e f8 	      JSR	Sleep4Lines
   1731  f8ad		       60		      RTS
   1732  f8ae
   1733  f8ae				   Sleep32Lines
   1734  f8ae		       20 a7 f8 	      JSR	Sleep8Lines
   1735  f8b1		       20 a7 f8 	      JSR	Sleep8Lines
   1736  f8b4		       20 a7 f8 	      JSR	Sleep8Lines
   1737  f8b7		       20 a7 f8 	      JSR	Sleep8Lines
   1738  f8ba		       60		      RTS
   1739  f8bb
   1740  f8bb							;X = number of WSYNC HMOVE to run
   1741  f8bb				   HMoveXTimes
   1742  f8bb		       85 02		      STA	WSYNC	;3
   1743  f8bd		       85 2a		      STA	HMOVE	; 3/10 
   1744  f8bf		       ca		      DEX
   1745  f8c0		       d0 f9		      BNE	HMoveXTimes
   1746  f8c2		       60		      RTS
   1747  f8c3
   1748  f8c3				   ConfigureCarSprites
   1749  f8c3		       a5 8c		      LDA	FrameCount0
   1750  f8c5		       29 01		      AND	#%00000001
   1751  f8c7		       d0 0b		      BNE	LoadForRightScreenSprites
   1752  f8c9				   LoadForLeftScreenSprites
   1753  f8c9		       a5 c7		      LDA	CurrentCarId
   1754  f8cb		       85 b0		      STA	Tmp0
   1755  f8cd		       a5 c8		      LDA	OpCurrentCarId
   1756  f8cf		       85 b1		      STA	Tmp1
   1757  f8d1		       4c dc f8 	      JMP	LoadCarSpritesFromIds
   1758  f8d4				   LoadForRightScreenSprites
   1759  f8d4		       a5 c7		      LDA	CurrentCarId
   1760  f8d6		       85 b1		      STA	Tmp1
   1761  f8d8		       a5 c8		      LDA	OpCurrentCarId
   1762  f8da		       85 b0		      STA	Tmp0
   1763  f8dc
   1764  f8dc				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1765  f8dc		       a4 b0		      LDY	Tmp0
   1766  f8de		       b9 9b ff 	      LDA	CarIdToSpriteAddressL,Y
   1767  f8e1		       85 d7		      STA	CarSpritePointerL
   1768  f8e3		       b9 9f ff 	      LDA	CarIdToSpriteAddressH,Y
   1769  f8e6		       85 d8		      STA	CarSpritePointerH
   1770  f8e8				   ConfigureOpponentCarSprite
   1771  f8e8		       a4 b1		      LDY	Tmp1
   1772  f8ea		       b9 a3 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1773  f8ed		       85 d9		      STA	EnemyCarSpritePointerL
   1774  f8ef		       b9 a7 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1775  f8f2		       85 da		      STA	EnemyCarSpritePointerH
   1776  f8f4		       60		      RTS
   1777  f8f5
   1778  f8f5							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1779  f8f5							;X player 0 or 1
   1780  f8f5				   SelectCarWithDpad
   1781  f8f5		       a0 03		      LDY	#3
   1782  f8f7				   SelectCarWithDpadLoop
   1783  f8f7		       ad 80 02 	      LDA	SWCHA
   1784  f8fa		       25 b0		      AND	Tmp0
   1785  f8fc		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1786  f8fe		       98		      TYA
   1787  f8ff		       95 c7		      STA	CurrentCarId,X
   1788  f901				   ContinueSelectCarWithDpadLoop
   1789  f901		       46 b0		      LSR	Tmp0
   1790  f903		       88		      DEY
   1791  f904		       10 f1		      BPL	SelectCarWithDpadLoop
   1792  f906		       60		      RTS
   1793  f907
   1794  f907				   ProcessOpponentLine
   1795  f907		       a5 8c		      LDA	FrameCount0
   1796  f909		       29 01		      AND	#%00000001
   1797  f90b		       38		      SEC
   1798  f90c		       d0 0f		      BNE	Player0IsOpponent
   1799  f90e				   Player1IsOpponent		; Code could be reused?
   1800  f90e		       a5 91		      LDA	TrafficOffset0 + 1
   1801  f910		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1802  f912		       85 b0		      STA	Tmp0
   1803  f914		       a5 92		      LDA	TrafficOffset0 + 2
   1804  f916		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1805  f918		       85 b1		      STA	Tmp1
   1806  f91a		       4c 29 f9 	      JMP	AddOffsetToOpponentLine
   1807  f91d				   Player0IsOpponent
   1808  f91d		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1809  f91f		       e5 91		      SBC	TrafficOffset0 + 1
   1810  f921		       85 b0		      STA	Tmp0
   1811  f923		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1812  f925		       e5 92		      SBC	TrafficOffset0 + 2
   1813  f927		       85 b1		      STA	Tmp1
   1814  f929
   1815  f929				   AddOffsetToOpponentLine
   1816  f929		       18		      CLC
   1817  f92a		       a5 b0		      LDA	Tmp0
   1818  f92c		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1819  f92e		       85 b0		      STA	Tmp0
   1820  f930		       a5 b1		      LDA	Tmp1
   1821  f932		       69 00		      ADC	#0
   1822  f934		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1823  f936				   OpponentNotVisible
   1824  f936		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1825  f938		       85 cf		      STA	OpponentLine
   1826  f93a		       4c 41 f9 	      JMP	ReturnFromProcessOpponentLine
   1827  f93d				   OpponentVisible
   1828  f93d		       a5 b0		      LDA	Tmp0
   1829  f93f		       85 cf		      STA	OpponentLine
   1830  f941				   ReturnFromProcessOpponentLine
   1831  f941		       60		      RTS
   1832  f942
   1833  f942							; Movement and colision are binded because the car must be moved after duplicate size.
   1834  f942							; Use X for the player
   1835  f942							; Tmp2 Traffic colision result
   1836  f942							; Tmp3 Opponent Colision result (Not implemented)
   1837  f942				   TestCollisionAndMove
   1838  f942							; Until store the movemnt, Y contains the value to be stored.
   1839  f942							; see if player0 colides with the rest
   1840  f942		       a5 b2		      LDA	Tmp2
   1841  f944		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1842  f946		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1843  f948		       d0 25		      BNE	NoCollision
   1844  f94a		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1845  f94c		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1846  f94e		       f0 1f		      BEQ	NoCollision
   1847  f950		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1848  f952		       f0 1b		      BEQ	NoCollision
   1849  f954		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1850  f956		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1851  f958		       b5 f2		      LDA	Player0SpeedH,X
   1852  f95a		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1853  f95c		       a9 10		      LDA	#COLLISION_SPEED_L
   1854  f95e		       d5 f0		      CMP	Player0SpeedL,X
   1855  f960		       b0 04		      BCS	SkipSetColisionSpeedL
   1856  f962				   SetColisionSpeedL
   1857  f962		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1858  f964		       95 f0		      STA	Player0SpeedL,X
   1859  f966				   SkipSetColisionSpeedL
   1860  f966		       a9 00		      LDA	#0
   1861  f968		       95 f2		      STA	Player0SpeedH,X
   1862  f96a		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1863  f96c		       4c bf f9 	      JMP	StoreHMove	; We keep position consistent
   1864  f96f				   NoCollision
   1865  f96f
   1866  f96f				   DecrementCollision
   1867  f96f		       b5 8e		      LDA	CollisionCounter,X
   1868  f971		       f0 06		      BEQ	FinishDecrementCollision
   1869  f973		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1870  f975		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1871  f977		       d6 8e		      DEC	CollisionCounter,X
   1872  f979				   FinishDecrementCollision
   1873  f979
   1874  f979				   ResetPlayerSize
   1875  f979		       d0 04		      BNE	FinishResetPlayerSize
   1876  f97b		       a9 30		      LDA	#%00110000
   1877  f97d		       95 04		      STA	NUSIZ0,X	;
   1878  f97f				   FinishResetPlayerSize
   1879  f97f
   1880  f97f				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1881  f97f		       b5 8e		      LDA	CollisionCounter,X
   1882  f981		       c9 01		      CMP	#1	; Last frame before reset
   1883  f983		       d0 05		      BNE	SkipResetPlayerPosition
   1884  f985		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1885  f987		       4c bf f9 	      JMP	StoreHMove
   1886  f98a				   SkipResetPlayerPosition
   1887  f98a
   1888  f98a				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1889  f98a		       b5 c7		      LDA	CurrentCarId,X
   1890  f98c		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1891  f98e		       d0 08		      BNE	PrepareReadXAxis
   1892  f990		       a0 00		      LDY	#0
   1893  f992		       a5 8c		      LDA	FrameCount0
   1894  f994		       29 01		      AND	#DRAGSTER_TURN_MASK
   1895  f996		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1896  f998
   1897  f998				   PrepareReadXAxis
   1898  f998		       a0 00		      LDY	#0
   1899  f99a		       b5 b6		      LDA	Player0X,X
   1900  f99c				   BeginReadLeft
   1901  f99c		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1902  f99e		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1903  f9a1		       2c 80 02 	      BIT	SWCHA
   1904  f9a4		       d0 07		      BNE	SkipMoveLeft
   1905  f9a6		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1906  f9a8		       d6 b6		      DEC	Player0X,X
   1907  f9aa		       4c bf f9 	      JMP	StoreHMove	; Cannot move left and right...
   1908  f9ad				   SkipMoveLeft
   1909  f9ad				   BeginReadRight
   1910  f9ad		       b5 b6		      LDA	Player0X,X
   1911  f9af		       c9 2c		      CMP	#PLAYER_MAX_X
   1912  f9b1		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1913  f9b3		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1914  f9b6		       2c 80 02 	      BIT	SWCHA
   1915  f9b9		       d0 04		      BNE	SkipMoveRight
   1916  f9bb		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1917  f9bd		       f6 b6		      INC	Player0X,X
   1918  f9bf				   SkipMoveRight
   1919  f9bf				   StoreHMove
   1920  f9bf		       94 20		      STY	HMP0,X	;set the move for player 0
   1921  f9c1
   1922  f9c1		       60		      RTS
   1923  f9c2
   1924  f9c2							; X Traffic offset 4 bits each lane, 4 lanes per player
   1925  f9c2							; Tmp3 Max X offset
   1926  f9c2							; Tmp4 Max Player Speed L
   1927  f9c2							; Tmp5 Max Player Speed H
   1928  f9c2				   UpdateOffsets
   1929  f9c2		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1930  f9c4		       a5 c6		      LDA	GameMode
   1931  f9c6		       29 04		      AND	#%00000100	; GameModes with high delta
   1932  f9c8		       f0 02		      BEQ	UpdateOffsetsLoop
   1933  f9ca		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1934  f9cc
   1935  f9cc				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1936  f9cc		       38		      SEC
   1937  f9cd		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1938  f9cf		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1939  f9d2		       85 b0		      STA	Tmp0
   1940  f9d4		       c8		      INY
   1941  f9d5		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1942  f9d7		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1943  f9da		       85 b1		      STA	Tmp1
   1944  f9dc		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1945  f9de		       e9 00		      SBC	#0
   1946  f9e0		       85 b2		      STA	Tmp2
   1947  f9e2
   1948  f9e2				   AddsTheResult
   1949  f9e2		       18		      CLC
   1950  f9e3		       a5 b0		      LDA	Tmp0
   1951  f9e5		       75 90		      ADC	TrafficOffset0,X
   1952  f9e7		       95 90		      STA	TrafficOffset0,X
   1953  f9e9		       e8		      INX
   1954  f9ea		       a5 b1		      LDA	Tmp1
   1955  f9ec		       75 90		      ADC	TrafficOffset0,X
   1956  f9ee		       95 90		      STA	TrafficOffset0,X
   1957  f9f0		       e8		      INX
   1958  f9f1		       a5 b2		      LDA	Tmp2	; Carry
   1959  f9f3		       75 90		      ADC	TrafficOffset0,X
   1960  f9f5		       95 90		      STA	TrafficOffset0,X
   1961  f9f7		       90 0f		      BCC	CalculateOffsetCache
   1962  f9f9				   CalculatePlayer0Msb
   1963  f9f9		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1964  f9fb		       d0 05		      BNE	CalculatePlayer1Msb
   1965  f9fd		       e6 ba		      INC	Traffic0Msb
   1966  f9ff		       4c 08 fa 	      JMP	CalculateOffsetCache
   1967  fa02				   CalculatePlayer1Msb
   1968  fa02		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1969  fa04		       d0 02		      BNE	CalculateOffsetCache
   1970  fa06		       e6 bb		      INC	OpTraffic0Msb
   1971  fa08
   1972  fa08				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1973  fa08		       e8		      INX
   1974  fa09		       38		      SEC
   1975  fa0a		       69 00		      ADC	#0	;Increment by one
   1976  fa0c		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1977  fa0e
   1978  fa0e				   PrepareNextUpdateLoop
   1979  fa0e		       c8		      INY
   1980  fa0f		       e8		      INX
   1981  fa10		       e4 b3		      CPX	Tmp3	; Max X offset
   1982  fa12		       d0 b8		      BNE	UpdateOffsetsLoop
   1983  fa14		       60		      RTS
   1984  fa15
   1985  fa15							; X Player 0 or 1
   1986  fa15				   ProcessSpeed
   1987  fa15				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1988  fa15		       a9 00		      LDA	#0
   1989  fa17		       85 b0		      STA	Tmp0	; Break speed
   1990  fa19		       b5 b8		      LDA	CountdownTimer,X
   1991  fa1b		       d0 0d		      BNE	Break
   1992  fa1d		       b4 c7		      LDY	CurrentCarId,X
   1993  fa1f		       a5 8c		      LDA	FrameCount0
   1994  fa21		       39 af ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1995  fa24		       d0 04		      BNE	Break
   1996  fa26		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1997  fa28		       85 b0		      STA	Tmp0
   1998  fa2a
   1999  fa2a				   Break
   2000  fa2a		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2001  fa2d		       2c 80 02 	      BIT	SWCHA
   2002  fa30		       d0 12		      BNE	BreakNonZero
   2003  fa32		       b5 0c		      LDA	INPT4,X	;3
   2004  fa34		       10 0a		      BPL	BreakWhileAccelerating
   2005  fa36		       b4 d5		      LDY	Gear,X
   2006  fa38		       b9 bb ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2007  fa3b		       85 b0		      STA	Tmp0
   2008  fa3d		       4c 44 fa 	      JMP	BreakNonZero
   2009  fa40				   BreakWhileAccelerating		; Allow better control while breaking.
   2010  fa40		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2011  fa42		       85 b0		      STA	Tmp0
   2012  fa44
   2013  fa44				   BreakNonZero
   2014  fa44		       a5 b0		      LDA	Tmp0
   2015  fa46		       f0 29		      BEQ	SkipBreak
   2016  fa48
   2017  fa48				   DecreaseSpeed
   2018  fa48		       38		      SEC
   2019  fa49		       b5 f0		      LDA	Player0SpeedL,X
   2020  fa4b		       e5 b0		      SBC	Tmp0
   2021  fa4d		       95 f0		      STA	Player0SpeedL,X
   2022  fa4f		       b5 f2		      LDA	Player0SpeedH,X
   2023  fa51		       e9 00		      SBC	#0
   2024  fa53		       95 f2		      STA	Player0SpeedH,X
   2025  fa55
   2026  fa55				   CheckMinSpeed
   2027  fa55		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2028  fa57		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2029  fa59		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2030  fa5b		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2031  fa5d
   2032  fa5d				   CompareLBreakSpeed
   2033  fa5d		       b5 f0		      LDA	Player0SpeedL,X
   2034  fa5f		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2035  fa61		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2036  fa63		       4c 6e fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2037  fa66
   2038  fa66				   ResetMinSpeed
   2039  fa66		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2040  fa68		       95 f2		      STA	Player0SpeedH,X
   2041  fa6a		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2042  fa6c		       95 f0		      STA	Player0SpeedL,X
   2043  fa6e
   2044  fa6e				   SkipAccelerateIfBreaking
   2045  fa6e		       4c b7 fa 	      JMP	SkipAccelerate
   2046  fa71				   SkipBreak
   2047  fa71
   2048  fa71				   Acelerates
   2049  fa71		       b5 b8		      LDA	CountdownTimer,X
   2050  fa73		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2051  fa75
   2052  fa75				   ContinueAccelerateTest
   2053  fa75		       b5 0c		      LDA	INPT4,X	;3
   2054  fa77		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2055  fa79		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2056  fa7c		       2c 80 02 	      BIT	SWCHA
   2057  fa7f		       d0 36		      BNE	SkipAccelerate
   2058  fa81
   2059  fa81				   IncreaseCarSpeed
   2060  fa81		       a9 02		      LDA	#2
   2061  fa83		       85 b0		      STA	Tmp0	; Loop control
   2062  fa85		       b4 c7		      LDY	CurrentCarId,X
   2063  fa87				   IncreaseCarSpeedLoop
   2064  fa87							;Adds speed
   2065  fa87		       18		      CLC
   2066  fa88		       b5 dc		      LDA	AccelerateBuffer,X
   2067  fa8a		       79 ab ff 	      ADC	CarIdToAccelerateSpeed,Y
   2068  fa8d		       95 dc		      STA	AccelerateBuffer,X
   2069  fa8f		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2070  fa91		       f6 f0		      INC	Player0SpeedL,X
   2071  fa93		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2072  fa95		       f6 f2		      INC	Player0SpeedH,X
   2073  fa97				   ContinueIncreaseSpeedLoop
   2074  fa97		       c6 b0		      DEC	Tmp0
   2075  fa99		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2076  fa9b				   SkipIncreaseCarSpeed
   2077  fa9b
   2078  fa9b				   CheckIfAlreadyMaxSpeed
   2079  fa9b		       b5 f2		      LDA	Player0SpeedH,X
   2080  fa9d		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2081  fa9f		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2082  faa1		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2083  faa3							;High bit is max, compare the low
   2084  faa3		       b4 c7		      LDY	CurrentCarId,X
   2085  faa5		       b5 f0		      LDA	Player0SpeedL,X
   2086  faa7		       d9 b3 ff 	      CMP	CarIdToMaxSpeedL,Y
   2087  faaa		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2088  faac							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2089  faac
   2090  faac				   ResetToMaxSpeed		; Speed is more, or is already max
   2091  faac		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2092  faae		       95 f2		      STA	Player0SpeedH,X
   2093  fab0		       b4 c7		      LDY	CurrentCarId,X
   2094  fab2		       b9 b3 ff 	      LDA	CarIdToMaxSpeedL,Y
   2095  fab5		       95 f0		      STA	Player0SpeedL,X
   2096  fab7				   SkipAccelerate
   2097  fab7		       60		      RTS
   2098  fab8
   2099  fab8				   EverySecond		; 64 frames to be more precise
   2100  fab8		       a9 3f		      LDA	#%00111111
   2101  faba		       25 8c		      AND	FrameCount0
   2102  fabc		       d0 06		      BNE	SkipEverySecondAction
   2103  fabe		       d5 b8		      CMP	CountdownTimer,X
   2104  fac0		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2105  fac2		       d6 b8		      DEC	CountdownTimer,X
   2106  fac4				   SkipEverySecondAction
   2107  fac4		       60		      RTS
   2108  fac5
   2109  fac5				   CalculateGear
   2110  fac5		       b5 f0		      LDA	Player0SpeedL,X	;3
   2111  fac7		       29 80		      AND	#%10000000	;2
   2112  fac9		       15 f2		      ORA	Player0SpeedH,X	;3
   2113  facb		       18		      CLC		;2
   2114  facc		       2a		      ROL		;2
   2115  facd		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2116  facf		       95 d5		      STA	Gear,X
   2117  fad1		       60		      RTS
   2118  fad2
   2119  fad2				   ProcessScoreFontColor
   2120  fad2		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2121  fad4		       f0 06		      BEQ	ResetScoreFontColor
   2122  fad6		       88		      DEY
   2123  fad7		       94 cb		      STY	ScoreFontColorHoldChange,X
   2124  fad9		       4c e0 fa 	      JMP	SkipScoreFontColor
   2125  fadc				   ResetScoreFontColor
   2126  fadc		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2127  fade		       95 c9		      STA	ScoreFontColor,X
   2128  fae0				   SkipScoreFontColor
   2129  fae0		       60		      RTS
   2130  fae1
   2131  fae1							; Moved here because of rom space.
   2132  fae1							; The only SBR in constants space
   2133  fae1				   DrawQrCode
   2134  fae1		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2135  fae3		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2136  fae5		       a9 01		      LDA	#%00000001	; Mirror playfield
   2137  fae7		       85 0a		      STA	CTRLPF
   2138  fae9		       20 68 f6 	      JSR	ClearAll	; To be 100 sure!
   2139  faec		       ad 82 02 	      LDA	SWCHB
   2140  faef		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2141  faf1		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2142  faf3		       f0 07		      BEQ	StoreReversedQrCode
   2143  faf5		       86 09		      STX	COLUBK
   2144  faf7		       84 08		      STY	COLUPF
   2145  faf9		       4c 00 fb 	      JMP	ContinueQrCode
   2146  fafc				   StoreReversedQrCode
   2147  fafc		       86 08		      STX	COLUPF
   2148  fafe		       84 09		      STY	COLUBK
   2149  fb00
   2150  fb00				   ContinueQrCode
   2151  fb00		       a2 08		      LDX	#8
   2152  fb02		       20 bb f8 	      JSR	HMoveXTimes
   2153  fb05		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2154  fb07		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2155  fb09		       20 94 f8 	      JSR	WaitForVblankEnd
   2156  fb0c		       20 a7 f8 	      JSR	Sleep8Lines
   2157  fb0f		       20 a7 f8 	      JSR	Sleep8Lines
   2158  fb12		       20 a7 f8 	      JSR	Sleep8Lines
   2159  fb15
   2160  fb15				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2161  fb15		       85 02		      STA	WSYNC
   2162  fb17		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2163  fb1a		       85 0e		      STA	PF1	;3
   2164  fb1c		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2165  fb1f		       85 0f		      STA	PF2	;3
      0  fb21					      SLEEP	27	; 
      1  fb21				   .CYCLES    SET	27
      2  fb21
      3  fb21				  -	      IF	.CYCLES < 2
      4  fb21				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb21				  -	      ERR
      6  fb21					      ENDIF
      7  fb21
      8  fb21					      IF	.CYCLES & 1
      9  fb21				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb21				  -	      nop	0
     11  fb21					      ELSE
     12  fb21		       24 00		      bit	VSYNC
     13  fb23					      ENDIF
     14  fb23				   .CYCLES    SET	.CYCLES - 3
     15  fb23					      ENDIF
     16  fb23
     17  fb23					      REPEAT	.CYCLES / 2
     18  fb23		       ea		      nop
     17  fb23					      REPEND
     18  fb24		       ea		      nop
     17  fb24					      REPEND
     18  fb25		       ea		      nop
     17  fb25					      REPEND
     18  fb26		       ea		      nop
     17  fb26					      REPEND
     18  fb27		       ea		      nop
     17  fb27					      REPEND
     18  fb28		       ea		      nop
     17  fb28					      REPEND
     18  fb29		       ea		      nop
     17  fb29					      REPEND
     18  fb2a		       ea		      nop
     17  fb2a					      REPEND
     18  fb2b		       ea		      nop
     17  fb2b					      REPEND
     18  fb2c		       ea		      nop
     17  fb2c					      REPEND
     18  fb2d		       ea		      nop
     17  fb2d					      REPEND
     18  fb2e		       ea		      nop
     19  fb2f					      REPEND
   2167  fb2f		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2168  fb32		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2169  fb34		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2170  fb37		       85 0e		      STA	PF1	;3
   2171  fb39
   2172  fb39		       ca		      DEX		;2
   2173  fb3a		       d0 d9		      BNE	QrCodeLoop	;2
   2174  fb3c		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2175  fb3e		       88		      DEY		;2
   2176  fb3f		       10 d4		      BPL	QrCodeLoop	;4
   2177  fb41
   2178  fb41				   EndQrCodeLoop
   2179  fb41		       85 02		      STA	WSYNC	;
   2180  fb43		       a9 00		      LDA	#0
   2181  fb45		       85 0e		      STA	PF1	;3
   2182  fb47		       85 0f		      STA	PF2	;3
   2183  fb49
   2184  fb49		       20 ae f8 	      JSR	Sleep32Lines
   2185  fb4c		       4c 0d f5 	      JMP	PrepareOverscan
   2186  fb4f
   2187  fb4f							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2188  fc00					      org	$FC00
   2189  fc00				   QrCode1
   2190  fc00		       1f		      .byte.b	#%00011111
   2191  fc01		       10		      .byte.b	#%00010000
   2192  fc02		       17		      .byte.b	#%00010111
   2193  fc03		       17		      .byte.b	#%00010111
   2194  fc04		       17		      .byte.b	#%00010111
   2195  fc05		       10		      .byte.b	#%00010000
   2196  fc06		       1f		      .byte.b	#%00011111
   2197  fc07		       00		      .byte.b	#%00000000
   2198  fc08		       17		      .byte.b	#%00010111
   2199  fc09		       10		      .byte.b	#%00010000
   2200  fc0a		       1d		      .byte.b	#%00011101
   2201  fc0b		       16		      .byte.b	#%00010110
   2202  fc0c		       03		      .byte.b	#%00000011
   2203  fc0d		       19		      .byte.b	#%00011001
   2204  fc0e		       13		      .byte.b	#%00010011
   2205  fc0f		       1c		      .byte.b	#%00011100
   2206  fc10		       0b		      .byte.b	#%00001011
   2207  fc11		       00		      .byte.b	#%00000000
   2208  fc12		       1f		      .byte.b	#%00011111
   2209  fc13		       10		      .byte.b	#%00010000
   2210  fc14		       17		      .byte.b	#%00010111
   2211  fc15		       17		      .byte.b	#%00010111
   2212  fc16		       17		      .byte.b	#%00010111
   2213  fc17		       10		      .byte.b	#%00010000
   2214  fc18		       1f		      .byte.b	#%00011111
   2215  fc19
   2216  fc19				   QrCode2
   2217  fc19		       c3		      .byte.b	#%11000011
   2218  fc1a		       9a		      .byte.b	#%10011010
   2219  fc1b		       82		      .byte.b	#%10000010
   2220  fc1c		       da		      .byte.b	#%11011010
   2221  fc1d		       aa		      .byte.b	#%10101010
   2222  fc1e		       ca		      .byte.b	#%11001010
   2223  fc1f		       f3		      .byte.b	#%11110011
   2224  fc20		       78		      .byte.b	#%01111000
   2225  fc21		       df		      .byte.b	#%11011111
   2226  fc22		       fc		      .byte.b	#%11111100
   2227  fc23		       c7		      .byte.b	#%11000111
   2228  fc24		       98		      .byte.b	#%10011000
   2229  fc25		       23		      .byte.b	#%00100011
   2230  fc26		       b9		      .byte.b	#%10111001
   2231  fc27		       d2		      .byte.b	#%11010010
   2232  fc28		       30		      .byte.b	#%00110000
   2233  fc29		       eb		      .byte.b	#%11101011
   2234  fc2a		       28		      .byte.b	#%00101000
   2235  fc2b		       ab		      .byte.b	#%10101011
   2236  fc2c		       72		      .byte.b	#%01110010
   2237  fc2d		       fa		      .byte.b	#%11111010
   2238  fc2e		       7a		      .byte.b	#%01111010
   2239  fc2f		       32		      .byte.b	#%00110010
   2240  fc30		       3a		      .byte.b	#%00111010
   2241  fc31		       63		      .byte.b	#%01100011
   2242  fc32
   2243  fc32				   QrCode3
   2244  fc32		       98		      .byte.b	#%10011000
   2245  fc33		       c3		      .byte.b	#%11000011
   2246  fc34		       39		      .byte.b	#%00111001
   2247  fc35		       34		      .byte.b	#%00110100
   2248  fc36		       ff		      .byte.b	#%11111111
   2249  fc37		       71		      .byte.b	#%01110001
   2250  fc38		       d5		      .byte.b	#%11010101
   2251  fc39		       d1		      .byte.b	#%11010001
   2252  fc3a		       5f		      .byte.b	#%01011111
   2253  fc3b		       26		      .byte.b	#%00100110
   2254  fc3c		       2d		      .byte.b	#%00101101
   2255  fc3d		       e9		      .byte.b	#%11101001
   2256  fc3e		       d6		      .byte.b	#%11010110
   2257  fc3f		       26		      .byte.b	#%00100110
   2258  fc40		       ba		      .byte.b	#%10111010
   2259  fc41		       03		      .byte.b	#%00000011
   2260  fc42		       dd		      .byte.b	#%11011101
   2261  fc43		       e0		      .byte.b	#%11100000
   2262  fc44		       57		      .byte.b	#%01010111
   2263  fc45		       14		      .byte.b	#%00010100
   2264  fc46		       35		      .byte.b	#%00110101
   2265  fc47		       e5		      .byte.b	#%11100101
   2266  fc48		       b5		      .byte.b	#%10110101
   2267  fc49		       d4		      .byte.b	#%11010100
   2268  fc4a		       97		      .byte.b	#%10010111
   2269  fc4b
   2270  fc4b				   QrCode4
   2271  fc4b		       09		      .byte.b	#%00001001
   2272  fc4c		       0e		      .byte.b	#%00001110
   2273  fc4d		       0f		      .byte.b	#%00001111
   2274  fc4e		       0c		      .byte.b	#%00001100
   2275  fc4f		       0c		      .byte.b	#%00001100
   2276  fc50		       08		      .byte.b	#%00001000
   2277  fc51		       08		      .byte.b	#%00001000
   2278  fc52		       06		      .byte.b	#%00000110
   2279  fc53		       06		      .byte.b	#%00000110
   2280  fc54		       0b		      .byte.b	#%00001011
   2281  fc55		       0f		      .byte.b	#%00001111
   2282  fc56		       04		      .byte.b	#%00000100
   2283  fc57		       08		      .byte.b	#%00001000
   2284  fc58		       0f		      .byte.b	#%00001111
   2285  fc59		       09		      .byte.b	#%00001001
   2286  fc5a		       07		      .byte.b	#%00000111
   2287  fc5b		       05		      .byte.b	#%00000101
   2288  fc5c		       00		      .byte.b	#%00000000
   2289  fc5d		       0f		      .byte.b	#%00001111
   2290  fc5e		       08		      .byte.b	#%00001000
   2291  fc5f		       0b		      .byte.b	#%00001011
   2292  fc60		       0b		      .byte.b	#%00001011
   2293  fc61		       0b		      .byte.b	#%00001011
   2294  fc62		       08		      .byte.b	#%00001000
   2295  fc63		       0f		      .byte.b	#%00001111
   2296  fc64
   2297  fc64				   PlayerToUpMask
   2298  fc64		       10		      .byte.b	#%00010000	;
   2299  fc65		       01		      .byte.b	#%00000001	;
   2300  fc66
   2301  fc66				   PlayerToDownMask
   2302  fc66		       20		      .byte.b	#%00100000	;
   2303  fc67		       02		      .byte.b	#%00000010	;
   2304  fc68
   2305  fc68
   2306  fc68				   PlayerToLeftMask
   2307  fc68		       40		      .byte.b	#%01000000	;
   2308  fc69		       04		      .byte.b	#%00000100	;
   2309  fc6a
   2310  fc6a				   PlayerToRightMask
   2311  fc6a		       80		      .byte.b	#%10000000	;
   2312  fc6b		       08		      .byte.b	#%00001000	;
   2313  fc6c
   2314  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2315  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2316  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2317  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2318  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2319  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2320  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2321  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2322  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2323  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2324  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2325  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2326  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2327  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2328  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2329  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2330  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2331  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2332  fc7d
   2333  fc7d				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2334  fc7d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2335  fc7e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2336  fc7f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2337  fc80		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2338  fc81		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2339  fc82		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2340  fc83		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2341  fc84		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2342  fc85		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2343  fc86		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2344  fc87		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2345  fc88		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2346  fc89		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2347  fc8a		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2348  fc8b		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2349  fc8c		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2350  fc8d
   2351  fc8d				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2352  fc8d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2353  fc8e		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2354  fc8f		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2355  fc90		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2356  fc91		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2357  fc92		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2358  fc93		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2359  fc94		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2360  fc95		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2361  fc96		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2362  fc97		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2363  fc98		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2364  fc99		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2365  fc9a		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2366  fc9b		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2367  fc9c		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2368  fc9d		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2369  fc9e		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2370  fc9f		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2371  fca0		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2372  fca1		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2373  fca2
   2374  fd00					      org	$FD00
   2375  fd00				   Font
   2376  fd00				   C0
   2377  fd00		       e7		      .byte.b	#%11100111	;
   2378  fd01		       a5		      .byte.b	#%10100101	; 
   2379  fd02		       a5		      .byte.b	#%10100101	; 
   2380  fd03		       a5		      .byte.b	#%10100101	; 
   2381  fd04		       e7		      .byte.b	#%11100111	;	
   2382  fd05				   C1
   2383  fd05		       e7		      .byte.b	#%11100111	;
   2384  fd06		       42		      .byte.b	#%01000010	; 
   2385  fd07		       42		      .byte.b	#%01000010	; 
   2386  fd08		       42		      .byte.b	#%01000010	; 
   2387  fd09		       66		      .byte.b	#%01100110	;
   2388  fd0a				   C2
   2389  fd0a		       e7		      .byte.b	#%11100111	;
   2390  fd0b		       24		      .byte.b	#%00100100	; 
   2391  fd0c		       e7		      .byte.b	#%11100111	; 
   2392  fd0d		       81		      .byte.b	#%10000001	; 
   2393  fd0e		       e7		      .byte.b	#%11100111	;
   2394  fd0f				   C3
   2395  fd0f		       e7		      .byte.b	#%11100111	;
   2396  fd10		       81		      .byte.b	#%10000001	; 
   2397  fd11		       e7		      .byte.b	#%11100111	; 
   2398  fd12		       81		      .byte.b	#%10000001	; 
   2399  fd13		       e7		      .byte.b	#%11100111	;
   2400  fd14				   C4
   2401  fd14		       81		      .byte.b	#%10000001	;
   2402  fd15		       81		      .byte.b	#%10000001	; 
   2403  fd16		       e7		      .byte.b	#%11100111	; 
   2404  fd17		       a5		      .byte.b	#%10100101	; 
   2405  fd18		       a5		      .byte.b	#%10100101	;
   2406  fd19				   C5
   2407  fd19		       e7		      .byte.b	#%11100111	;
   2408  fd1a		       81		      .byte.b	#%10000001	; 
   2409  fd1b		       e7		      .byte.b	#%11100111	; 
   2410  fd1c		       24		      .byte.b	#%00100100	; 
   2411  fd1d		       e7		      .byte.b	#%11100111	;
   2412  fd1e				   C6
   2413  fd1e		       e7		      .byte.b	#%11100111	;
   2414  fd1f		       a5		      .byte.b	#%10100101	; 
   2415  fd20		       e7		      .byte.b	#%11100111	; 
   2416  fd21		       24		      .byte.b	#%00100100	; 
   2417  fd22		       e7		      .byte.b	#%11100111	;
   2418  fd23				   C7
   2419  fd23		       81		      .byte.b	#%10000001	;
   2420  fd24		       81		      .byte.b	#%10000001	; 
   2421  fd25		       81		      .byte.b	#%10000001	; 
   2422  fd26		       81		      .byte.b	#%10000001	; 
   2423  fd27		       e7		      .byte.b	#%11100111	;
   2424  fd28				   C8
   2425  fd28		       e7		      .byte.b	#%11100111	;
   2426  fd29		       a5		      .byte.b	#%10100101	; 
   2427  fd2a		       e7		      .byte.b	#%11100111	; 
   2428  fd2b		       a5		      .byte.b	#%10100101	; 
   2429  fd2c		       e7		      .byte.b	#%11100111	;
   2430  fd2d				   C9
   2431  fd2d		       e7		      .byte.b	#%11100111	;
   2432  fd2e		       81		      .byte.b	#%10000001	; 
   2433  fd2f		       e7		      .byte.b	#%11100111	; 
   2434  fd30		       a5		      .byte.b	#%10100101	; 
   2435  fd31		       e7		      .byte.b	#%11100111	;
   2436  fd32				   CA
   2437  fd32		       a5		      .byte.b	#%10100101	;
   2438  fd33		       a5		      .byte.b	#%10100101	; 
   2439  fd34		       e7		      .byte.b	#%11100111	; 
   2440  fd35		       a5		      .byte.b	#%10100101	; 
   2441  fd36		       e7		      .byte.b	#%11100111	;
   2442  fd37				   CB
   2443  fd37		       66		      .byte.b	#%01100110	;
   2444  fd38		       a5		      .byte.b	#%10100101	; 
   2445  fd39		       66		      .byte.b	#%01100110	; 
   2446  fd3a		       a5		      .byte.b	#%10100101	;
   2447  fd3b		       66		      .byte.b	#%01100110	;
   2448  fd3c				   CC
   2449  fd3c		       e7		      .byte.b	#%11100111	;
   2450  fd3d		       24		      .byte.b	#%00100100	; 
   2451  fd3e		       24		      .byte.b	#%00100100	; 
   2452  fd3f		       24		      .byte.b	#%00100100	;
   2453  fd40		       e7		      .byte.b	#%11100111	;
   2454  fd41
   2455  fd41				   CD
   2456  fd41		       66		      .byte.b	#%01100110	;
   2457  fd42		       a5		      .byte.b	#%10100101	; 
   2458  fd43		       a5		      .byte.b	#%10100101	; 
   2459  fd44		       a5		      .byte.b	#%10100101	;
   2460  fd45		       66		      .byte.b	#%01100110	;
   2461  fd46
   2462  fd46				   CE
   2463  fd46		       e7		      .byte.b	#%11100111	;
   2464  fd47		       24		      .byte.b	#%00100100	; 
   2465  fd48		       e7		      .byte.b	#%11100111	; 
   2466  fd49		       24		      .byte.b	#%00100100	; 
   2467  fd4a		       e7		      .byte.b	#%11100111	;
   2468  fd4b
   2469  fd4b				   CF
   2470  fd4b		       24		      .byte.b	#%00100100	;
   2471  fd4c		       24		      .byte.b	#%00100100	; 
   2472  fd4d		       e7		      .byte.b	#%11100111	; 
   2473  fd4e		       24		      .byte.b	#%00100100	; 
   2474  fd4f		       e7		      .byte.b	#%11100111	;
   2475  fd50
   2476  fd50				   CG
   2477  fd50		       c3		      .byte.b	#%11000011	;
   2478  fd51		       a5		      .byte.b	#%10100101	; 
   2479  fd52		       a5		      .byte.b	#%10100101	; 
   2480  fd53		       24		      .byte.b	#%00100100	; 
   2481  fd54		       c3		      .byte.b	#%11000011	;	
   2482  fd55
   2483  fd55				   CH
   2484  fd55		       a5		      .byte.b	#%10100101	;
   2485  fd56		       a5		      .byte.b	#%10100101	; 
   2486  fd57		       e7		      .byte.b	#%11100111	; 
   2487  fd58		       a5		      .byte.b	#%10100101	; 
   2488  fd59		       a5		      .byte.b	#%10100101	;
   2489  fd5a
   2490  fd5a				   CK
   2491  fd5a		       a5		      .byte.b	#%10100101	;
   2492  fd5b		       a5		      .byte.b	#%10100101	; 
   2493  fd5c		       66		      .byte.b	#%01100110	; 
   2494  fd5d		       a5		      .byte.b	#%10100101	; 
   2495  fd5e		       a5		      .byte.b	#%10100101	;
   2496  fd5f
   2497  fd5f				   CL
   2498  fd5f		       e7		      .byte.b	#%11100111	;
   2499  fd60		       24		      .byte.b	#%00100100	; 
   2500  fd61		       24		      .byte.b	#%00100100	; 
   2501  fd62		       24		      .byte.b	#%00100100	; 
   2502  fd63		       24		      .byte.b	#%00100100	;
   2503  fd64
   2504  fd64				   CM
   2505  fd64		       a5		      .byte.b	#%10100101	;
   2506  fd65		       a5		      .byte.b	#%10100101	; 
   2507  fd66		       a5		      .byte.b	#%10100101	; 
   2508  fd67		       e7		      .byte.b	#%11100111	; 
   2509  fd68		       a5		      .byte.b	#%10100101	;
   2510  fd69
   2511  fd69				   CN
   2512  fd69		       a5		      .byte.b	#%10100101	;
   2513  fd6a		       a5		      .byte.b	#%10100101	; 
   2514  fd6b		       a5		      .byte.b	#%10100101	; 
   2515  fd6c		       a5		      .byte.b	#%10100101	; 
   2516  fd6d		       66		      .byte.b	#%01100110	;	
   2517  fd6e
   2518  fd6e
   2519  fd6e				   CO
   2520  fd6e		       42		      .byte.b	#%01000010	;
   2521  fd6f		       a5		      .byte.b	#%10100101	; 
   2522  fd70		       a5		      .byte.b	#%10100101	; 
   2523  fd71		       a5		      .byte.b	#%10100101	; 
   2524  fd72		       42		      .byte.b	#%01000010	;	
   2525  fd73
   2526  fd73				   CP
   2527  fd73		       24		      .byte.b	#%00100100	;
   2528  fd74		       24		      .byte.b	#%00100100	; 
   2529  fd75		       e7		      .byte.b	#%11100111	; 
   2530  fd76		       a5		      .byte.b	#%10100101	; 
   2531  fd77		       e7		      .byte.b	#%11100111	;
   2532  fd78
   2533  fd78				   CR
   2534  fd78		       a5		      .byte.b	#%10100101	;
   2535  fd79		       a5		      .byte.b	#%10100101	; 
   2536  fd7a		       66		      .byte.b	#%01100110	; 
   2537  fd7b		       a5		      .byte.b	#%10100101	; 
   2538  fd7c		       66		      .byte.b	#%01100110	;
   2539  fd7d
   2540  fd7d				   CS
   2541  fd7d		       66		      .byte.b	#%01100110	;
   2542  fd7e		       81		      .byte.b	#%10000001	; 
   2543  fd7f		       42		      .byte.b	#%01000010	; 
   2544  fd80		       24		      .byte.b	#%00100100	; 
   2545  fd81		       c3		      .byte.b	#%11000011	;
   2546  fd82
   2547  fd82				   CT
   2548  fd82		       42		      .byte.b	#%01000010	;
   2549  fd83		       42		      .byte.b	#%01000010	; 
   2550  fd84		       42		      .byte.b	#%01000010	; 
   2551  fd85		       42		      .byte.b	#%01000010	; 
   2552  fd86		       e7		      .byte.b	#%11100111	;
   2553  fd87
   2554  fd87				   CV
   2555  fd87		       42		      .byte.b	#%01000010	;
   2556  fd88		       a5		      .byte.b	#%10100101	; 
   2557  fd89		       a5		      .byte.b	#%10100101	; 
   2558  fd8a		       a5		      .byte.b	#%10100101	; 
   2559  fd8b		       a5		      .byte.b	#%10100101	;	
   2560  fd8c
   2561  fd8c				   CY
   2562  fd8c		       42		      .byte.b	#%01000010	;
   2563  fd8d		       42		      .byte.b	#%01000010	; 
   2564  fd8e		       42		      .byte.b	#%01000010	; 
   2565  fd8f		       a5		      .byte.b	#%10100101	; 
   2566  fd90		       a5		      .byte.b	#%10100101	;
   2567  fd91
   2568  fd91				   CW
   2569  fd91		       a5		      .byte.b	#%10100101	;
   2570  fd92		       e7		      .byte.b	#%11100111	; 
   2571  fd93		       a5		      .byte.b	#%10100101	; 
   2572  fd94		       a5		      .byte.b	#%10100101	; 
   2573  fd95		       a5		      .byte.b	#%10100101	;
   2574  fd96
   2575  fd96				   CZ
   2576  fd96		       e7		      .byte.b	#%11100111	;
   2577  fd97		       24		      .byte.b	#%00100100	; 
   2578  fd98		       42		      .byte.b	#%01000010	; 
   2579  fd99		       81		      .byte.b	#%10000001	; 
   2580  fd9a		       e7		      .byte.b	#%11100111	;
   2581  fd9b
   2582  fd9b
   2583  fd9b				   Exclamation
   2584  fd9b		       42		      .byte.b	#%01000010	;
   2585  fd9c		       00		      .byte.b	#%00000000	; 
   2586  fd9d		       42		      .byte.b	#%01000010	; 
   2587  fd9e		       42		      .byte.b	#%01000010	; 
   2588  fd9f		       42		      .byte.b	#%01000010	;
   2589  fda0
   2590  fda0				   Dot
   2591  fda0		       42		      .byte.b	#%01000010	;
   2592  fda1		       42		      .byte.b	#%01000010	; 
   2593  fda2		       00		      .byte.b	#%00000000	; 
   2594  fda3		       00		      .byte.b	#%00000000	; 
   2595  fda4		       00		      .byte.b	#%00000000	;
   2596  fda5
   2597  fda5				   Pipe
   2598  fda5				   Colon
   2599  fda5		       42		      .byte.b	#%01000010	;
   2600  fda6		       42		      .byte.b	#%01000010	; 
   2601  fda7		       00		      .byte.b	#%00000000	; 
   2602  fda8		       42		      .byte.b	#%01000010	; 
   2603  fda9		       42		      .byte.b	#%01000010	;
   2604  fdaa
   2605  fdaa				   Triangle
   2606  fdaa		       81		      .byte.b	#%10000001	;
   2607  fdab		       c3		      .byte.b	#%11000011	; 
   2608  fdac		       e7		      .byte.b	#%11100111	; 
   2609  fdad		       c3		      .byte.b	#%11000011	; 
   2610  fdae		       81		      .byte.b	#%10000001	;
   2611  fdaf
   2612  fdaf				   Space
   2613  fdaf				   C0B
   2614  fdaf		       00		      .byte.b	#%00000000	;
   2615  fdb0		       00		      .byte.b	#%00000000	; 
   2616  fdb1		       00		      .byte.b	#%00000000	; 
   2617  fdb2		       00		      .byte.b	#%00000000	; 
   2618  fdb3		       00		      .byte.b	#%00000000	;	
   2619  fdb4				   C1B
   2620  fdb4		       24		      .byte.b	#%00100100	;
   2621  fdb5		       00		      .byte.b	#%00000000	; 
   2622  fdb6		       00		      .byte.b	#%00000000	; 
   2623  fdb7		       00		      .byte.b	#%00000000	; 
   2624  fdb8		       00		      .byte.b	#%00000000	;
   2625  fdb9				   C2B
   2626  fdb9		       66		      .byte.b	#%01100110	;
   2627  fdba		       00		      .byte.b	#%00000000	; 
   2628  fdbb		       00		      .byte.b	#%00000000	; 
   2629  fdbc		       00		      .byte.b	#%00000000	; 
   2630  fdbd		       00		      .byte.b	#%00000000	;
   2631  fdbe				   C3B
   2632  fdbe		       e7		      .byte.b	#%11100111	;
   2633  fdbf		       00		      .byte.b	#%00000000	; 
   2634  fdc0		       00		      .byte.b	#%00000000	; 
   2635  fdc1		       00		      .byte.b	#%00000000	; 
   2636  fdc2		       00		      .byte.b	#%00000000	;
   2637  fdc3				   C4B
   2638  fdc3		       e7		      .byte.b	#%11100111	;
   2639  fdc4		       24		      .byte.b	#%00100100	; 
   2640  fdc5		       00		      .byte.b	#%00000000	; 
   2641  fdc6		       00		      .byte.b	#%00000000	; 
   2642  fdc7		       00		      .byte.b	#%00000000	;
   2643  fdc8				   C5B
   2644  fdc8		       e7		      .byte.b	#%11100111	;
   2645  fdc9		       66		      .byte.b	#%01100110	; 
   2646  fdca		       00		      .byte.b	#%00000000	; 
   2647  fdcb		       00		      .byte.b	#%00000000	; 
   2648  fdcc		       00		      .byte.b	#%00000000	;
   2649  fdcd				   C6B
   2650  fdcd		       e7		      .byte.b	#%11100111	;
   2651  fdce		       e7		      .byte.b	#%11100111	; 
   2652  fdcf		       00		      .byte.b	#%00000000	; 
   2653  fdd0		       00		      .byte.b	#%00000000	; 
   2654  fdd1		       00		      .byte.b	#%00000000	;
   2655  fdd2				   C7B
   2656  fdd2		       e7		      .byte.b	#%11100111	;
   2657  fdd3		       e7		      .byte.b	#%11100111	; 
   2658  fdd4		       24		      .byte.b	#%00100100	; 
   2659  fdd5		       00		      .byte.b	#%00000000	; 
   2660  fdd6		       00		      .byte.b	#%00000000	;
   2661  fdd7				   C8B
   2662  fdd7		       e7		      .byte.b	#%11100111	;
   2663  fdd8		       e7		      .byte.b	#%11100111	; 
   2664  fdd9		       66		      .byte.b	#%01100110	; 
   2665  fdda		       00		      .byte.b	#%00000000	; 
   2666  fddb		       00		      .byte.b	#%00000000	;
   2667  fddc				   C9B
   2668  fddc		       e7		      .byte.b	#%11100111	;
   2669  fddd		       e7		      .byte.b	#%11100111	; 
   2670  fdde		       e7		      .byte.b	#%11100111	; 
   2671  fddf		       00		      .byte.b	#%00000000	; 
   2672  fde0		       00		      .byte.b	#%00000000	;
   2673  fde1				   CAB
   2674  fde1		       e7		      .byte.b	#%11100111	;
   2675  fde2		       e7		      .byte.b	#%11100111	; 
   2676  fde3		       e7		      .byte.b	#%11100111	; 
   2677  fde4		       24		      .byte.b	#%00100100	; 
   2678  fde5		       00		      .byte.b	#%00000000	;
   2679  fde6				   CBB
   2680  fde6		       e7		      .byte.b	#%11100111	;
   2681  fde7		       e7		      .byte.b	#%11100111	; 
   2682  fde8		       e7		      .byte.b	#%11100111	; 
   2683  fde9		       66		      .byte.b	#%01100110	; 
   2684  fdea		       00		      .byte.b	#%00000000	;
   2685  fdeb				   CCB
   2686  fdeb		       e7		      .byte.b	#%11100111	;
   2687  fdec		       e7		      .byte.b	#%11100111	; 
   2688  fded		       e7		      .byte.b	#%11100111	; 
   2689  fdee		       e7		      .byte.b	#%11100111	; 
   2690  fdef		       00		      .byte.b	#%00000000	;
   2691  fdf0
   2692  fdf0				   CDB
   2693  fdf0		       e7		      .byte.b	#%11100111	;
   2694  fdf1		       e7		      .byte.b	#%11100111	; 
   2695  fdf2		       e7		      .byte.b	#%11100111	; 
   2696  fdf3		       e7		      .byte.b	#%11100111	; 
   2697  fdf4		       24		      .byte.b	#%00100100	;
   2698  fdf5
   2699  fdf5				   CEB
   2700  fdf5		       e7		      .byte.b	#%11100111	;
   2701  fdf6		       e7		      .byte.b	#%11100111	; 
   2702  fdf7		       e7		      .byte.b	#%11100111	; 
   2703  fdf8		       e7		      .byte.b	#%11100111	; 
   2704  fdf9		       66		      .byte.b	#%01100110	;
   2705  fdfa
   2706  fdfa				   CFB
   2707  fdfa		       e7		      .byte.b	#%11100111	;
   2708  fdfb		       e7		      .byte.b	#%11100111	; 
   2709  fdfc		       e7		      .byte.b	#%11100111	; 
   2710  fdfd		       e7		      .byte.b	#%11100111	; 
   2711  fdfe		       e7		      .byte.b	#%11100111	;
   2712  fdff
   2713  fe00					      org	$FE00
   2714  fe00				   AesTable
   2715  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2716  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2717  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2718  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2719  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2720  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2721  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2722  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2723  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2724  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2725  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2726  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2727  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2728  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2729  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2730  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2731  ff00
   2732  ff00							; From FF00 to FFFB (122 bytes) to use here
   2733  ff00
   2734  ff00				   StaticText		; All static text must be on the same MSB block. 
   2735  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2736  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2737  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2738  ff02		       77		      .byte.b	#<CP + #FONT_OFFSET
   2739  ff03		       86		      .byte.b	#<CT + #FONT_OFFSET
   2740  ff04		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2741  ff05
   2742  ff05				   HellwayLeftText
   2743  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2744  ff06		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2745  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2746  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2747  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2748  ff0a
   2749  ff0a				   HellwayRightText
   2750  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2751  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2752  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2753  ff0d		       90		      .byte.b	#<CY + #FONT_OFFSET
   2754  ff0e		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2755  ff0f
   2756  ff0f				   OpbText
   2757  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2758  ff10		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2759  ff11		       72		      .byte.b	#<CO + #FONT_OFFSET
   2760  ff12		       77		      .byte.b	#<CP + #FONT_OFFSET
   2761  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2762  ff14
   2763  ff14				   YearText
   2764  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2765  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2766  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2767  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2768  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2769  ff19
   2770  ff19				   GameText
   2771  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2772  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2773  ff1b		       68		      .byte.b	#<CM + #FONT_OFFSET
   2774  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2775  ff1d		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2776  ff1e
   2777  ff1e				   OverText
   2778  ff1e		       72		      .byte.b	#<CO + #FONT_OFFSET
   2779  ff1f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2780  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2781  ff21		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2782  ff22		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2783  ff23				   GoText
   2784  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2785  ff24		       72		      .byte.b	#<CO + #FONT_OFFSET
   2786  ff25		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2787  ff26		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2788  ff27		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2789  ff28
   2790  ff28				   VersionText
   2791  ff28		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2792  ff29		       a4		      .byte.b	#<Dot + #FONT_OFFSET
   2793  ff2a		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2794  ff2b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2795  ff2c		       ae		      .byte.b	#<Triangle + #FONT_OFFSET
   2796  ff2d				   EndStaticText
   2797  ff2d
   2798  ff2d				   TachometerSizeLookup1
   2799  ff2d		       1f		      .byte.b	#%00011111
   2800  ff2e		       3f		      .byte.b	#%00111111
   2801  ff2f		       7f		      .byte.b	#%01111111
   2802  ff30		       ff		      .byte.b	#%11111111
   2803  ff31		       ff		      .byte.b	#%11111111
   2804  ff32		       ff		      .byte.b	#%11111111
   2805  ff33		       ff		      .byte.b	#%11111111
   2806  ff34		       ff		      .byte.b	#%11111111
   2807  ff35
   2808  ff35				   TachometerSizeLookup2
   2809  ff35		       00		      .byte.b	#%00000000
   2810  ff36		       00		      .byte.b	#%00000000
   2811  ff37		       00		      .byte.b	#%00000000
   2812  ff38		       00		      .byte.b	#%00000000
   2813  ff39		       80		      .byte.b	#%10000000
   2814  ff3a		       c0		      .byte.b	#%11000000
   2815  ff3b		       e0		      .byte.b	#%11100000
   2816  ff3c		       f0		      .byte.b	#%11110000
   2817  ff3d
   2818  ff3d				   TachometerGearLookup
   2819  ff3d		       01		      .byte.b	#%00000001
   2820  ff3e		       02		      .byte.b	#%00000010
   2821  ff3f		       04		      .byte.b	#%00000100
   2822  ff40		       08		      .byte.b	#%00001000
   2823  ff41		       10		      .byte.b	#%00010000
   2824  ff42		       30		      .byte.b	#%00110000
   2825  ff43
   2826  ff43				   EngineSoundType
   2827  ff43		       02		      .byte.b	#2
   2828  ff44		       02		      .byte.b	#2
   2829  ff45		       0e		      .byte.b	#14
   2830  ff46		       06		      .byte.b	#6
   2831  ff47		       06		      .byte.b	#6
   2832  ff48		       0e		      .byte.b	#14
   2833  ff49
   2834  ff49				   EngineBaseFrequence
   2835  ff49		       1f		      .byte.b	#31
   2836  ff4a		       15		      .byte.b	#21
   2837  ff4b		       14		      .byte.b	#20
   2838  ff4c		       1f		      .byte.b	#31
   2839  ff4d		       16		      .byte.b	#22
   2840  ff4e		       03		      .byte.b	#3
   2841  ff4f
   2842  ff4f				   CarSprite0		; Upside down, Original Car
   2843  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2844  ff57				   CarSprite0NoPadding
   2845  ff57		       7e		      .byte.b	#%01111110
   2846  ff58		       24		      .byte.b	#%00100100
   2847  ff59		       bd		      .byte.b	#%10111101
   2848  ff5a		       3c		      .byte.b	#%00111100
   2849  ff5b		       bd		      .byte.b	#%10111101
   2850  ff5c		       3c		      .byte.b	#%00111100
   2851  ff5d
   2852  ff5d				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2853  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2854  ff65				   CarSprite1NoPadding
   2855  ff65		       bd		      .byte.b	#%10111101
   2856  ff66		       7e		      .byte.b	#%01111110
   2857  ff67		       5a		      .byte.b	#%01011010
   2858  ff68		       66		      .byte.b	#%01100110
   2859  ff69		       bd		      .byte.b	#%10111101
   2860  ff6a		       3c		      .byte.b	#%00111100
   2861  ff6b
   2862  ff6b				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2863  ff6b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2864  ff73				   CarSprite2NoPadding
   2865  ff73		       7e		      .byte.b	#%01111110
   2866  ff74		       a5		      .byte.b	#%10100101
   2867  ff75		       42		      .byte.b	#%01000010
   2868  ff76		       42		      .byte.b	#%01000010
   2869  ff77		       bd		      .byte.b	#%10111101
   2870  ff78		       7e		      .byte.b	#%01111110
   2871  ff79
   2872  ff79				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2873  ff79		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2874  ff81				   CarSprite3NoPadding
   2875  ff81		       3c		      .byte.b	#%00111100
   2876  ff82		       db		      .byte.b	#%11011011
   2877  ff83		       db		      .byte.b	#%11011011
   2878  ff84		       3c		      .byte.b	#%00111100
   2879  ff85		       5a		      .byte.b	#%01011010
   2880  ff86		       3c		      .byte.b	#%00111100
   2881  ff87
   2882  ff87				   TrafficSpeeds
   2883  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2884  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2885  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2886  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2887  ff8b		       e6		      .byte.b	#$E6	;  Trafic2 L
   2888  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2889  ff8d		       c2		      .byte.b	#$C2	;  Trafic3 L
   2890  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2891  ff8f		       9e		      .byte.b	#$9E	;  Trafic4 L
   2892  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2893  ff91				   TrafficSpeedsHighDelta
   2894  ff91		       00		      .byte.b	#$00	;  Trafic0 L
   2895  ff92		       00		      .byte.b	#$00	;  Trafic0 H
   2896  ff93		       0a		      .byte.b	#$0A	;  Trafic1 L
   2897  ff94		       01		      .byte.b	#$01	;  Trafic1 H
   2898  ff95		       c8		      .byte.b	#$C8	;  Trafic2 L
   2899  ff96		       00		      .byte.b	#$00	;  Trafic2 H
   2900  ff97		       86		      .byte.b	#$86	;  Trafic3 L
   2901  ff98		       00		      .byte.b	#$00	;  Trafic3 H
   2902  ff99		       44		      .byte.b	#$44	;  Trafic4 L
   2903  ff9a		       00		      .byte.b	#$00	;  Trafic4 H
   2904  ff9b
   2905  ff9b				   CarIdToSpriteAddressL
   2906  ff9b		       4f		      .byte.b	#<CarSprite0
   2907  ff9c		       5d		      .byte.b	#<CarSprite1
   2908  ff9d		       6b		      .byte.b	#<CarSprite2
   2909  ff9e		       79		      .byte.b	#<CarSprite3
   2910  ff9f
   2911  ff9f				   CarIdToSpriteAddressH
   2912  ff9f		       ff		      .byte.b	#>CarSprite0
   2913  ffa0		       ff		      .byte.b	#>CarSprite1
   2914  ffa1		       ff		      .byte.b	#>CarSprite2
   2915  ffa2		       ff		      .byte.b	#>CarSprite3
   2916  ffa3
   2917  ffa3				   EnemyCarIdToSpriteAddressL
   2918  ffa3		       57		      .byte.b	#<CarSprite0NoPadding
   2919  ffa4		       65		      .byte.b	#<CarSprite1NoPadding
   2920  ffa5		       73		      .byte.b	#<CarSprite2NoPadding
   2921  ffa6		       81		      .byte.b	#<CarSprite3NoPadding
   2922  ffa7
   2923  ffa7				   EnemyCarIdToSpriteAddressH
   2924  ffa7		       ff		      .byte.b	#>CarSprite0NoPadding
   2925  ffa8		       ff		      .byte.b	#>CarSprite1NoPadding
   2926  ffa9		       ff		      .byte.b	#>CarSprite2NoPadding
   2927  ffaa		       ff		      .byte.b	#>CarSprite3NoPadding
   2928  ffab
   2929  ffab				   CarIdToAccelerateSpeed
   2930  ffab		       80		      .byte.b	#128
   2931  ffac		       c0		      .byte.b	#192
   2932  ffad		       60		      .byte.b	#96
   2933  ffae		       c0		      .byte.b	#192
   2934  ffaf
   2935  ffaf				   CarIdToTimeoverBreakInterval 		; Glide
   2936  ffaf		       03		      .byte.b	#%00000011	;Every 4 frames
   2937  ffb0		       03		      .byte.b	#%00000011	;Every 4 frames
   2938  ffb1		       0f		      .byte.b	#%00001111	;Every 16 frames
   2939  ffb2		       03		      .byte.b	#%00000011	;Every 4 frames
   2940  ffb3
   2941  ffb3				   CarIdToMaxSpeedL
   2942  ffb3		       80		      .byte.b	#$80
   2943  ffb4		       00		      .byte.b	#$00	; One less gear
   2944  ffb5		       80		      .byte.b	#$80
   2945  ffb6		       80		      .byte.b	#$80
   2946  ffb7
   2947  ffb7				   CarIdToMaxGear
   2948  ffb7		       05		      .byte.b	#5
   2949  ffb8		       04		      .byte.b	#4	; One less gear
   2950  ffb9		       05		      .byte.b	#5
   2951  ffba		       05		      .byte.b	#5
   2952  ffbb
   2953  ffbb				   GearToBreakSpeedTable
   2954  ffbb		       09		      .byte.b	#(BREAK_SPEED - 1)
   2955  ffbc		       09		      .byte.b	#(BREAK_SPEED - 1)
   2956  ffbd		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2957  ffbe		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2958  ffbf		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2959  ffc0		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2960  ffc1
   2961  ffc1				   TrafficColorTable
   2962  ffc1		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2963  ffc2		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2964  ffc3		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2965  ffc4		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2966  ffc5
   2967  ffc5				   TrafficChanceTable
   2968  ffc5		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2969  ffc6		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2970  ffc7		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2971  ffc8		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2972  ffc9
   2973  ffc9				   TrafficTimeTable
   2974  ffc9		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2975  ffca		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2976  ffcb		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2977  ffcc		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2978  ffcd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2979  ffce
   2980  ffce
   2981  fffc					      org	$FFFC
   2982  fffc		       00 f0		      .word.w	BeforeStart
   2983  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
