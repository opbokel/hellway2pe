------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2c	   PLAYER_0_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 8c	   FrameCount0 =	$8C	;
    111  f000		       00 8d	   FrameCount1 =	$8D	;
    112  f000
    113  f000		       00 8e	   Player0SpeedL =	$8E
    114  f000		       00 8f	   Player0SpeedH =	$8F
    115  f000
    116  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    117  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    118  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    119  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    120  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    121  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    122  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    123  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    124  f000
    125  f000
    126  f000							;Temporary variables, multiple uses
    127  f000		       00 b0	   Tmp0       =	$B0
    128  f000		       00 b1	   Tmp1       =	$B1
    129  f000		       00 b2	   Tmp2       =	$B2
    130  f000		       00 b3	   Tmp3       =	$B3
    131  f000
    132  f000
    133  f000		       00 b4	   CollisionCounter =	$B4
    134  f000		       00 b5	   Player0X   =	$B5
    135  f000		       00 b6	   Player1X   =	$B6
    136  f000		       00 b7	   CountdownTimer =	$B7
    137  f000		       00 b8	   Traffic0Msb =	$B8
    138  f000		       00 b9	   SwitchDebounceCounter =	$B9
    139  f000
    140  f000
    141  f000
    142  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 c1	   TrafficChance =	$C1
    144  f000		       00 c2	   CheckpointTime =	$C2
    145  f000		       00 c3	   TrafficColor =	$C3
    146  f000		       00 c4	   CurrentDifficulty =	$C4
    147  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    148  f000							;Bit 2 speed delta, Bit 3 random traffic 
    149  f000
    150  f000
    151  f000
    152  f000		       00 d0	   ScoreD0    =	$D0
    153  f000		       00 d1	   ScoreD1    =	$D1
    154  f000		       00 d2	   ScoreD2    =	$D2
    155  f000		       00 d3	   ScoreD3    =	$D3
    156  f000		       00 d4	   ScoreD4    =	$D4
    157  f000		       00 d5	   ScoreFontColor =	$D5
    158  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    159  f000		       00 d7	   NextCheckpoint =	$D7
    160  f000
    161  f000		       00 d8	   OpponentLine =	$D8
    162  f000
    163  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    164  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    165  f000
    166  f000		       00 dd	   StartSWCHB =	$DD	; Used for Score, so it cannot be cheated.
    167  f000		       00 de	   CarSpritePointerL =	$DE
    168  f000		       00 df	   CarSpritePointerH =	$DF
    169  f000		       00 f0	   CurrentCarId =	$F0
    170  f000		       00 f1	   AccelerateBuffer =	$F1	; Change speed on buffer overflow.
    171  f000		       00 f2	   TextSide   =	$F2
    172  f000		       00 f3	   TextFlickerMode =	$F3
    173  f000		       00 f4	   Gear       =	$F4
    174  f000		       00 f5	   CurrentOpponentCarId =	$F5
    175  f000
    176  f000
    177  f000							;generic start up stuff, put zero in almost all...
    178  f000				   BeforeStart		;All variables that are kept on game reset or select
    179  f000		       a0 00		      LDY	#0
    180  f002		       84 b9		      STY	SwitchDebounceCounter
    181  f004		       84 c4		      STY	CurrentDifficulty
    182  f006		       84 c0		      STY	GameStatus
    183  f008		       84 f0		      STY	CurrentCarId
    184  f00a		       84 f5		      STY	CurrentOpponentCarId
    185  f00c		       a0 10		      LDY	#16
    186  f00e		       84 c5		      STY	GameMode
    187  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    188  f012
    189  f012				   Start
    190  f012		       a9 02		      LDA	#2
    191  f014		       85 00		      STA	VSYNC
    192  f016		       85 02		      STA	WSYNC
    193  f018		       85 02		      STA	WSYNC
    194  f01a		       85 02		      STA	WSYNC
    195  f01c		       a9 00		      LDA	#0	;2
    196  f01e		       85 00		      STA	VSYNC	;3
    197  f020
    198  f020		       78		      SEI
    199  f021		       d8		      CLD
    200  f022		       a2 ff		      LDX	#$FF
    201  f024		       9a		      TXS
    202  f025
    203  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    204  f027				   CleanMem
    205  f027		       e0 b9		      CPX	#SwitchDebounceCounter
    206  f029		       f0 16		      BEQ	SkipClean
    207  f02b		       e0 c5		      CPX	#GameMode
    208  f02d		       f0 12		      BEQ	SkipClean
    209  f02f		       e0 f0		      CPX	#CurrentCarId
    210  f031		       f0 0e		      BEQ	SkipClean
    211  f033		       e0 f5		      CPX	#CurrentOpponentCarId
    212  f035		       f0 0a		      BEQ	SkipClean
    213  f037		       e0 c4		      CPX	#CurrentDifficulty
    214  f039		       f0 06		      BEQ	SkipClean
    215  f03b		       e0 c0		      CPX	#GameStatus
    216  f03d		       f0 02		      BEQ	SkipClean
    217  f03f		       95 00		      STA	0,X
    218  f041				   SkipClean
    219  f041		       e8		      INX
    220  f042		       d0 e3		      BNE	CleanMem
    221  f044
    222  f044		       a9 d5		      LDA	#213
    223  f046		       8d 96 02 	      STA	TIM64T	;3	
    224  f049
    225  f049							;Setting some variables...
    226  f049
    227  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    228  f049		       85 02		      STA	WSYNC	;We will set player position
    229  f04b		       20 42 f8 	      JSR	DefaultOffsets
    230  f04e
    231  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    232  f051		       85 8e		      STA	Player0SpeedL
    233  f053
    234  f053							;SLEEP 11;18
    235  f053		       a2 00		      LDX	#0
    236  f055		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    237  f058		       85 dd		      STA	StartSWCHB	; For game over
    238  f05a		       29 c0		      AND	#%11000000
    239  f05c		       f0 0b		      BEQ	CallConfigureDifficulty
    240  f05e		       e8		      INX
    241  f05f		       c9 80		      CMP	#%10000000
    242  f061		       f0 06		      BEQ	CallConfigureDifficulty
    243  f063		       e8		      INX
    244  f064		       c9 40		      CMP	#%01000000
    245  f066		       f0 01		      BEQ	CallConfigureDifficulty
    246  f068		       e8		      INX
    247  f069
    248  f069				   CallConfigureDifficulty
    249  f069		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    250  f06b		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    251  f06d		       a5 c0		      LDA	GameStatus
    252  f06f		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    253  f071				   StoreCurrentDifficulty
    254  f071		       86 c4		      STX	CurrentDifficulty
    255  f073		       20 17 f8 	      JSR	ConfigureDifficulty
    256  f076
    257  f076				   SetGameNotRunning
    258  f076		       a9 00		      LDA	#0
    259  f078		       85 c0		      STA	GameStatus
    260  f07a
    261  f07a				   ConfigureTimer
    262  f07a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    263  f07c		       85 b7		      STA	CountdownTimer	;3
    264  f07e
    265  f07e
    266  f07e				   HPositioning 		; Avoid sleep doing needed stuff
    267  f07e		       85 02		      STA	WSYNC
    268  f080
    269  f080				   ConfigurePlayerXPosition
    270  f080		       a9 21		      LDA	#PLAYER_0_X_START	;2
    271  f082		       85 b5		      STA	Player0X	;3
    272  f084
    273  f084				   ConfigureMissileSize
    274  f084		       a9 30		      LDA	#%00110000	;2 Missile Size
    275  f086		       85 04		      STA	NUSIZ0	;3
    276  f088		       85 05		      STA	NUSIZ1	;3
    277  f08a
    278  f08a				   ConfigureNextCheckpoint
    279  f08a		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    280  f08c		       85 d7		      STA	NextCheckpoint
    281  f08e
    282  f08e		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f090					      SLEEP	4	;
      1  f090				   .CYCLES    SET	4
      2  f090
      3  f090				  -	      IF	.CYCLES < 2
      4  f090				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f090				  -	      ERR
      6  f090					      ENDIF
      7  f090
      8  f090				  -	      IF	.CYCLES & 1
      9  f090				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f090				  -	      nop	0
     11  f090				  -	      ELSE
     12  f090				  -	      bit	VSYNC
     13  f090				  -	      ENDIF
     14  f090				  -.CYCLES    SET	.CYCLES - 3
     15  f090					      ENDIF
     16  f090
     17  f090					      REPEAT	.CYCLES / 2
     18  f090		       ea		      nop
     17  f090					      REPEND
     18  f091		       ea		      nop
     19  f092					      REPEND
    284  f092		       85 12		      STA	RESM0
      0  f094					      SLEEP	2	;
      1  f094				   .CYCLES    SET	2
      2  f094
      3  f094				  -	      IF	.CYCLES < 2
      4  f094				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f094				  -	      ERR
      6  f094					      ENDIF
      7  f094
      8  f094				  -	      IF	.CYCLES & 1
      9  f094				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f094				  -	      nop	0
     11  f094				  -	      ELSE
     12  f094				  -	      bit	VSYNC
     13  f094				  -	      ENDIF
     14  f094				  -.CYCLES    SET	.CYCLES - 3
     15  f094					      ENDIF
     16  f094
     17  f094					      REPEAT	.CYCLES / 2
     18  f094		       ea		      nop
     19  f095					      REPEND
    286  f095		       85 14		      STA	RESBL
      0  f097					      SLEEP	2
      1  f097				   .CYCLES    SET	2
      2  f097
      3  f097				  -	      IF	.CYCLES < 2
      4  f097				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f097				  -	      ERR
      6  f097					      ENDIF
      7  f097
      8  f097				  -	      IF	.CYCLES & 1
      9  f097				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f097				  -	      nop	0
     11  f097				  -	      ELSE
     12  f097				  -	      bit	VSYNC
     13  f097				  -	      ENDIF
     14  f097				  -.CYCLES    SET	.CYCLES - 3
     15  f097					      ENDIF
     16  f097
     17  f097					      REPEAT	.CYCLES / 2
     18  f097		       ea		      nop
     19  f098					      REPEND
    288  f098		       85 13		      STA	RESM1
      0  f09a					      SLEEP	3
      1  f09a				   .CYCLES    SET	3
      2  f09a
      3  f09a				  -	      IF	.CYCLES < 2
      4  f09a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09a				  -	      ERR
      6  f09a					      ENDIF
      7  f09a
      8  f09a					      IF	.CYCLES & 1
      9  f09a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09a				  -	      nop	0
     11  f09a					      ELSE
     12  f09a		       24 00		      bit	VSYNC
     13  f09c					      ENDIF
     14  f09c				   .CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c				  -	      REPEAT	.CYCLES / 2
     18  f09c				  -	      nop
     19  f09c					      REPEND
    290  f09c
    291  f09c		       a9 e0		      LDA	#$E0
    292  f09e		       85 24		      STA	HMBL
    293  f0a0		       85 22		      STA	HMM0
    294  f0a2		       85 23		      STA	HMM1
    295  f0a4		       85 02		      STA	WSYNC
    296  f0a6		       85 2a		      STA	HMOVE
    297  f0a8		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    298  f0aa		       85 2b		      STA	HMCLR
      0  f0ac					      SLEEP	30
      1  f0ac				   .CYCLES    SET	30
      2  f0ac
      3  f0ac				  -	      IF	.CYCLES < 2
      4  f0ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ac				  -	      ERR
      6  f0ac					      ENDIF
      7  f0ac
      8  f0ac				  -	      IF	.CYCLES & 1
      9  f0ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ac				  -	      nop	0
     11  f0ac				  -	      ELSE
     12  f0ac				  -	      bit	VSYNC
     13  f0ac				  -	      ENDIF
     14  f0ac				  -.CYCLES    SET	.CYCLES - 3
     15  f0ac					      ENDIF
     16  f0ac
     17  f0ac					      REPEAT	.CYCLES / 2
     18  f0ac		       ea		      nop
     17  f0ac					      REPEND
     18  f0ad		       ea		      nop
     17  f0ad					      REPEND
     18  f0ae		       ea		      nop
     17  f0ae					      REPEND
     18  f0af		       ea		      nop
     17  f0af					      REPEND
     18  f0b0		       ea		      nop
     17  f0b0					      REPEND
     18  f0b1		       ea		      nop
     17  f0b1					      REPEND
     18  f0b2		       ea		      nop
     17  f0b2					      REPEND
     18  f0b3		       ea		      nop
     17  f0b3					      REPEND
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     19  f0bb					      REPEND
    300  f0bb		       85 10		      STA	RESP0
    301  f0bd							;SLEEP 5 ; Temporarily move player 1 away.
    302  f0bd		       85 11		      STA	RESP1
    303  f0bf
    304  f0bf				   WaitResetToEnd
    305  f0bf		       ad 84 02 	      LDA	INTIM
    306  f0c2		       d0 fb		      BNE	WaitResetToEnd
    307  f0c4
    308  f0c4				   MainLoop
    309  f0c4		       a9 02		      LDA	#2
    310  f0c6		       85 00		      STA	VSYNC
    311  f0c8		       85 02		      STA	WSYNC
    312  f0ca		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    313  f0cc				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    314  f0cc		       a9 01		      LDA	#%00000001	;3
    315  f0ce		       24 f3		      BIT	TextFlickerMode	;2
    316  f0d0		       f0 05		      BEQ	TextSideFrameZero	;2
    317  f0d2		       25 8d		      AND	FrameCount1	;2
    318  f0d4		       4c d9 f0 	      JMP	StoreTextSize	;3
    319  f0d7				   TextSideFrameZero
    320  f0d7		       25 8c		      AND	FrameCount0	;2
    321  f0d9				   StoreTextSize
    322  f0d9		       85 f2		      STA	TextSide	;3
    323  f0db
    324  f0db				   PrepareMaxHMove
      0  f0db					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0db				   .CYCLES    SET	18
      2  f0db
      3  f0db				  -	      IF	.CYCLES < 2
      4  f0db				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0db				  -	      ERR
      6  f0db					      ENDIF
      7  f0db
      8  f0db				  -	      IF	.CYCLES & 1
      9  f0db				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0db				  -	      nop	0
     11  f0db				  -	      ELSE
     12  f0db				  -	      bit	VSYNC
     13  f0db				  -	      ENDIF
     14  f0db				  -.CYCLES    SET	.CYCLES - 3
     15  f0db					      ENDIF
     16  f0db
     17  f0db					      REPEAT	.CYCLES / 2
     18  f0db		       ea		      nop
     17  f0db					      REPEND
     18  f0dc		       ea		      nop
     17  f0dc					      REPEND
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     17  f0e1					      REPEND
     18  f0e2		       ea		      nop
     17  f0e2					      REPEND
     18  f0e3		       ea		      nop
     19  f0e4					      REPEND
    326  f0e4		       a9 80		      LDA	#$80
    327  f0e6		       85 24		      STA	HMBL
    328  f0e8		       85 22		      STA	HMM0
    329  f0ea		       85 23		      STA	HMM1
    330  f0ec		       85 20		      STA	HMP0
    331  f0ee		       85 21		      STA	HMP1
    332  f0f0		       85 02		      STA	WSYNC
    333  f0f2		       85 2a		      STA	HMOVE	; 1/10			
    334  f0f4
    335  f0f4				   ConfigVBlankTimer
    336  f0f4		       a5 c5		      LDA	GameMode
    337  f0f6		       c9 10		      CMP	#MAX_GAME_MODE
    338  f0f8		       f0 05		      BEQ	SetVblankTimerQrCode
    339  f0fa		       a9 29		      LDA	#VBLANK_TIMER
    340  f0fc		       4c 01 f1 	      JMP	SetVblankTimer
    341  f0ff				   SetVblankTimerQrCode
    342  f0ff		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    343  f101
    344  f101				   SetVblankTimer
    345  f101		       85 02		      STA	WSYNC	;3
    346  f103		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    347  f105		       8d 96 02 	      STA	TIM64T	;3	
    348  f108		       a9 00		      LDA	#0	;2
    349  f10a		       85 00		      STA	VSYNC	;3	
    350  f10c
    351  f10c				   RandomizeGame
    352  f10c		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    353  f10e		       d0 2d		      BNE	EndRandomizeGame
    354  f110		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    355  f112		       29 02		      AND	#%00000010
    356  f114		       f0 24		      BEQ	DeterministicGame
    357  f116		       a6 96		      LDX	TrafficOffset1 + 2
    358  f118		       bd 00 fe 	      LDA	AesTable,X
    359  f11b		       45 8c		      EOR	FrameCount0
    360  f11d		       85 96		      STA	TrafficOffset1 + 2
    361  f11f		       85 a6		      STA	OpTrafficOffset1 + 2
    362  f121		       a6 9a		      LDX	TrafficOffset2 + 2
    363  f123		       bd 00 fe 	      LDA	AesTable,X
    364  f126		       45 8c		      EOR	FrameCount0
    365  f128		       85 9a		      STA	TrafficOffset2 + 2
    366  f12a		       85 aa		      STA	OpTrafficOffset2 + 2
    367  f12c		       a6 9e		      LDX	TrafficOffset3 + 2
    368  f12e		       bd 00 fe 	      LDA	AesTable,X
    369  f131		       45 8c		      EOR	FrameCount0
    370  f133		       85 9e		      STA	TrafficOffset3 + 2
    371  f135		       85 ae		      STA	OpTrafficOffset3 + 2
    372  f137		       4c 3d f1 	      JMP	EndRandomizeGame
    373  f13a
    374  f13a				   DeterministicGame
    375  f13a		       20 42 f8 	      JSR	DefaultOffsets
    376  f13d
    377  f13d				   EndRandomizeGame
    378  f13d
    379  f13d
    380  f13d							; Move this in the code and save cycles, for some reason spliting is breaking...
    381  f13d		       a2 08		      LDX	#8
    382  f13f				   BurnAllHMove
    383  f13f		       85 02		      STA	WSYNC	;3
    384  f141		       85 2a		      STA	HMOVE	; 3/10 
    385  f143		       ca		      DEX
    386  f144		       d0 f9		      BNE	BurnAllHMove
    387  f146		       85 02		      STA	WSYNC	;3
    388  f148		       85 2b		      STA	HMCLR	; 
    389  f14a
    390  f14a				   CountFrame
    391  f14a		       e6 8c		      INC	FrameCount0	; 5
    392  f14c		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    393  f14e		       e6 8d		      INC	FrameCount1	; 5 
    394  f150				   SkipIncFC1
    395  f150
    396  f150				   CallDrawQrCode
    397  f150		       a5 c5		      LDA	GameMode
    398  f152		       c9 10		      CMP	#MAX_GAME_MODE
    399  f154		       d0 03		      BNE	TestIsGameRunning
    400  f156		       4c 64 fc 	      JMP	DrawQrCode
    401  f159
    402  f159							;Does not update the game if not running
    403  f159				   TestIsGameRunning
    404  f159		       a5 c0		      LDA	GameStatus	;3
    405  f15b		       d0 5e		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    406  f15d				   SelectCarWithDpad		; Only do it when game is stoped
    407  f15d		       ad 80 02 	      LDA	SWCHA
    408  f160		       29 10		      AND	#%00010000
    409  f162		       d0 04		      BNE	ReadDpadDown
    410  f164		       a9 00		      LDA	#0
    411  f166		       85 f0		      STA	CurrentCarId
    412  f168				   ReadDpadDown
    413  f168		       ad 80 02 	      LDA	SWCHA
    414  f16b		       29 20		      AND	#%00100000
    415  f16d		       d0 04		      BNE	ReadDpadLeft
    416  f16f		       a9 01		      LDA	#1
    417  f171		       85 f0		      STA	CurrentCarId
    418  f173				   ReadDpadLeft
    419  f173		       ad 80 02 	      LDA	SWCHA
    420  f176		       29 40		      AND	#%01000000
    421  f178		       d0 04		      BNE	ReadDpadRight
    422  f17a		       a9 02		      LDA	#2
    423  f17c		       85 f0		      STA	CurrentCarId
    424  f17e				   ReadDpadRight
    425  f17e		       ad 80 02 	      LDA	SWCHA
    426  f181		       29 80		      AND	#%10000000
    427  f183		       d0 04		      BNE	SelectOpponentCarWithDpad
    428  f185		       a9 03		      LDA	#3
    429  f187		       85 f0		      STA	CurrentCarId
    430  f189				   SelectOpponentCarWithDpad		; Only do it when game is stoped
    431  f189		       ad 80 02 	      LDA	SWCHA
    432  f18c		       29 01		      AND	#%00000001
    433  f18e		       d0 04		      BNE	ReadOpponentDpadDown
    434  f190		       a9 00		      LDA	#0
    435  f192		       85 f5		      STA	CurrentOpponentCarId
    436  f194				   ReadOpponentDpadDown
    437  f194		       ad 80 02 	      LDA	SWCHA
    438  f197		       29 02		      AND	#%00000010
    439  f199		       d0 04		      BNE	ReadOpponentDpadLeft
    440  f19b		       a9 01		      LDA	#1
    441  f19d		       85 f5		      STA	CurrentOpponentCarId
    442  f19f				   ReadOpponentDpadLeft
    443  f19f		       ad 80 02 	      LDA	SWCHA
    444  f1a2		       29 04		      AND	#%00000100
    445  f1a4		       d0 04		      BNE	ReadOpponentDpadRight
    446  f1a6		       a9 02		      LDA	#2
    447  f1a8		       85 f5		      STA	CurrentOpponentCarId
    448  f1aa				   ReadOpponentDpadRight
    449  f1aa		       ad 80 02 	      LDA	SWCHA
    450  f1ad		       29 08		      AND	#%00001000
    451  f1af		       d0 04		      BNE	CallConfigureCarSprites
    452  f1b1		       a9 03		      LDA	#3
    453  f1b3		       85 f5		      STA	CurrentOpponentCarId
    454  f1b5
    455  f1b5				   CallConfigureCarSprites
    456  f1b5		       20 7f fa 	      JSR	ConfigureCarSprites
    457  f1b8				   SkipUpdateLogicJump
    458  f1b8		       4c 46 f3 	      JMP	SkipUpdateLogic
    459  f1bb				   ContinueWithGameLogic
    460  f1bb
    461  f1bb				   EverySecond		; 64 frames to be more precise
    462  f1bb		       a9 3f		      LDA	#%00111111
    463  f1bd		       25 8c		      AND	FrameCount0
    464  f1bf		       d0 06		      BNE	SkipEverySecondAction
    465  f1c1		       c5 b7		      CMP	CountdownTimer
    466  f1c3		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    467  f1c5		       c6 b7		      DEC	CountdownTimer
    468  f1c7				   SkipEverySecondAction
    469  f1c7
    470  f1c7				   ChangeTextFlickerMode
    471  f1c7		       a5 b9		      LDA	SwitchDebounceCounter
    472  f1c9		       d0 0d		      BNE	EndChangeTextFlickerMode
    473  f1cb		       ad 82 02 	      LDA	SWCHB
    474  f1ce		       29 02		      AND	#%00000010	;Game select
    475  f1d0		       d0 06		      BNE	EndChangeTextFlickerMode
    476  f1d2		       e6 f3		      INC	TextFlickerMode
    477  f1d4		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    478  f1d6		       85 b9		      STA	SwitchDebounceCounter
    479  f1d8				   EndChangeTextFlickerMode
    480  f1d8
    481  f1d8				   BreakOnTimeOver		; Uses LDX as the breaking speed
    482  f1d8		       a2 00		      LDX	#0
    483  f1da		       a5 b7		      LDA	CountdownTimer
    484  f1dc		       d0 0b		      BNE	Break
    485  f1de		       a4 f0		      LDY	CurrentCarId
    486  f1e0		       a5 8c		      LDA	FrameCount0
    487  f1e2		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    488  f1e5		       d0 02		      BNE	Break
    489  f1e7		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    490  f1e9
    491  f1e9				   Break
    492  f1e9		       a9 20		      LDA	#%00100000	;Down in controller
    493  f1eb		       2c 80 02 	      BIT	SWCHA
    494  f1ee		       d0 0e		      BNE	BreakNonZero
    495  f1f0		       a5 0c		      LDA	INPT4	;3
    496  f1f2		       10 08		      BPL	BreakWhileAccelerating
    497  f1f4		       a4 f4		      LDY	Gear
    498  f1f6		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    499  f1f9		       4c fe f1 	      JMP	BreakNonZero
    500  f1fc				   BreakWhileAccelerating		; Allow better control while breaking.
    501  f1fc		       a2 05		      LDX	(#BREAK_SPEED / 2)
    502  f1fe
    503  f1fe				   BreakNonZero
    504  f1fe		       e0 00		      CPX	#0
    505  f200		       f0 2b		      BEQ	SkipBreak
    506  f202		       86 b0		      STX	Tmp0
    507  f204
    508  f204				   DecreaseSpeed
    509  f204		       38		      SEC
    510  f205		       a5 8e		      LDA	Player0SpeedL
    511  f207		       e5 b0		      SBC	Tmp0
    512  f209		       85 8e		      STA	Player0SpeedL
    513  f20b		       a5 8f		      LDA	Player0SpeedH
    514  f20d		       e9 00		      SBC	#0
    515  f20f		       85 8f		      STA	Player0SpeedH
    516  f211
    517  f211				   CheckMinSpeed
    518  f211		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    519  f213		       c9 00		      CMP	#CAR_MIN_SPEED_H
    520  f215		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    521  f217		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    522  f219
    523  f219				   CompareLBreakSpeed
    524  f219		       a5 8e		      LDA	Player0SpeedL
    525  f21b		       c9 00		      CMP	#CAR_MIN_SPEED_L
    526  f21d		       90 03		      BCC	ResetMinSpeed	; Less than memory
    527  f21f		       4c 2a f2 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    528  f222
    529  f222				   ResetMinSpeed
    530  f222		       a9 00		      LDA	#CAR_MIN_SPEED_H
    531  f224		       85 8f		      STA	Player0SpeedH
    532  f226		       a9 00		      LDA	#CAR_MIN_SPEED_L
    533  f228		       85 8e		      STA	Player0SpeedL
    534  f22a
    535  f22a				   SkipAccelerateIfBreaking
    536  f22a		       4c 6f f2 	      JMP	SkipAccelerate
    537  f22d				   SkipBreak
    538  f22d
    539  f22d				   Acelerates
    540  f22d		       a5 b7		      LDA	CountdownTimer
    541  f22f		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    542  f231
    543  f231				   ContinueAccelerateTest
    544  f231		       a5 0c		      LDA	INPT4	;3
    545  f233		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    546  f235		       a9 10		      LDA	#%00010000	;UP in controller
    547  f237		       2c 80 02 	      BIT	SWCHA
    548  f23a		       d0 33		      BNE	SkipAccelerate
    549  f23c
    550  f23c				   IncreaseCarSpeed
    551  f23c		       a2 02		      LDX	#2
    552  f23e		       a4 f0		      LDY	CurrentCarId
    553  f240				   IncreaseCarSpeedLoop
    554  f240							;Adds speed
    555  f240		       18		      CLC
    556  f241		       a5 f1		      LDA	AccelerateBuffer
    557  f243		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    558  f246		       85 f1		      STA	AccelerateBuffer
    559  f248		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    560  f24a		       e6 8e		      INC	Player0SpeedL
    561  f24c		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    562  f24e		       e6 8f		      INC	Player0SpeedH
    563  f250				   ContinueIncreaseSpeedLoop
    564  f250		       ca		      DEX
    565  f251		       d0 ed		      BNE	IncreaseCarSpeedLoop
    566  f253				   SkipIncreaseCarSpeed
    567  f253
    568  f253				   CheckIfAlreadyMaxSpeed
    569  f253		       a5 8f		      LDA	Player0SpeedH
    570  f255		       c9 02		      CMP	#CAR_MAX_SPEED_H
    571  f257		       90 16		      BCC	SkipAccelerate	; less than my max speed
    572  f259		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    573  f25b							;High bit is max, compare the low
    574  f25b		       a4 f0		      LDY	CurrentCarId
    575  f25d		       a5 8e		      LDA	Player0SpeedL
    576  f25f		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    577  f262		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    578  f264							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    579  f264
    580  f264				   ResetToMaxSpeed		; Speed is more, or is already max
    581  f264		       a9 02		      LDA	#CAR_MAX_SPEED_H
    582  f266		       85 8f		      STA	Player0SpeedH
    583  f268		       a4 f0		      LDY	CurrentCarId
    584  f26a		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    585  f26d		       85 8e		      STA	Player0SpeedL
    586  f26f				   SkipAccelerate
    587  f26f
    588  f26f				   InitUpdateOffsets
    589  f26f		       a2 00		      LDX	#0	; Memory Offset 24 bit
    590  f271		       a0 00		      LDY	#0	; Line Speeds 16 bits
    591  f273		       a5 91		      LDA	TrafficOffset0 + 1	;
    592  f275		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    593  f277		       a5 c5		      LDA	GameMode
    594  f279		       29 04		      AND	#%00000100	; GameModes with high delta
    595  f27b		       f0 02		      BEQ	UpdateOffsets
    596  f27d		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    597  f27f
    598  f27f				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    599  f27f		       38		      SEC
    600  f280		       a5 8e		      LDA	Player0SpeedL
    601  f282		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    602  f285		       85 b0		      STA	Tmp0
    603  f287		       c8		      INY
    604  f288		       a5 8f		      LDA	Player0SpeedH
    605  f28a		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    606  f28d		       85 b1		      STA	Tmp1
    607  f28f		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    608  f291		       e9 00		      SBC	#0
    609  f293		       85 b2		      STA	Tmp2
    610  f295
    611  f295				   AddsTheResult
    612  f295		       18		      CLC
    613  f296		       a5 b0		      LDA	Tmp0
    614  f298		       75 90		      ADC	TrafficOffset0,X
    615  f29a		       95 90		      STA	TrafficOffset0,X
    616  f29c		       e8		      INX
    617  f29d		       a5 b1		      LDA	Tmp1
    618  f29f		       75 90		      ADC	TrafficOffset0,X
    619  f2a1		       95 90		      STA	TrafficOffset0,X
    620  f2a3		       e8		      INX
    621  f2a4		       a5 b2		      LDA	Tmp2	; Carry
    622  f2a6		       75 90		      ADC	TrafficOffset0,X
    623  f2a8		       95 90		      STA	TrafficOffset0,X
    624  f2aa		       90 06		      BCC	CalculateOffsetCache
    625  f2ac		       e0 02		      CPX	#2	;MSB offset 0
    626  f2ae		       d0 02		      BNE	CalculateOffsetCache
    627  f2b0		       e6 b8		      INC	Traffic0Msb
    628  f2b2
    629  f2b2				   CalculateOffsetCache
    630  f2b2		       e8		      INX
    631  f2b3		       38		      SEC
    632  f2b4		       69 00		      ADC	#0	;Increment by one
    633  f2b6		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    634  f2b8
    635  f2b8				   PrepareNextUpdateLoop
    636  f2b8		       c8		      INY
    637  f2b9		       e8		      INX
    638  f2ba		       e0 10		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    639  f2bc		       d0 c1		      BNE	UpdateOffsets
    640  f2be
    641  f2be				   ConfigureOpponentLine		; Temporary
    642  f2be		       a9 3c		      LDA	#60	; Extract to constant
    643  f2c0		       85 d8		      STA	OpponentLine
    644  f2c2
    645  f2c2
    646  f2c2							;Until store the movemnt, LDX contains the value to be stored.
    647  f2c2				   TestCollision		;
    648  f2c2							; see if player0 colides with the rest
    649  f2c2		       a5 00		      LDA	CXM0P
    650  f2c4		       05 01		      ORA	CXM1P
    651  f2c6		       05 02		      ORA	CXP0FB
    652  f2c8		       05 07		      ORA	CXPPMM
    653  f2ca		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    654  f2cc		       f0 29		      BEQ	NoCollision	;skip if not hitting...
    655  f2ce		       a5 b4		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    656  f2d0		       d0 25		      BNE	NoCollision
    657  f2d2		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    658  f2d4		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    659  f2d6		       f0 1f		      BEQ	NoCollision
    660  f2d8		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    661  f2da		       f0 1b		      BEQ	NoCollision
    662  f2dc		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    663  f2de		       85 b4		      STA	CollisionCounter	;and store as colision.
    664  f2e0		       a5 8f		      LDA	Player0SpeedH
    665  f2e2		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    666  f2e4		       a9 10		      LDA	#COLLISION_SPEED_L
    667  f2e6		       c5 8e		      CMP	Player0SpeedL
    668  f2e8		       b0 04		      BCS	SkipSetColisionSpeedL
    669  f2ea				   SetColisionSpeedL
    670  f2ea		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    671  f2ec		       85 8e		      STA	Player0SpeedL
    672  f2ee				   SkipSetColisionSpeedL
    673  f2ee		       a9 00		      LDA	#0
    674  f2f0		       85 8f		      STA	Player0SpeedH
    675  f2f2		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    676  f2f4		       4c 42 f3 	      JMP	StoreHMove	; We keep position consistent
    677  f2f7				   NoCollision
    678  f2f7
    679  f2f7				   DecrementCollision
    680  f2f7		       a4 b4		      LDY	CollisionCounter
    681  f2f9		       f0 07		      BEQ	FinishDecrementCollision
    682  f2fb		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    683  f2fd		       85 04		      STA	NUSIZ0
    684  f2ff		       88		      DEY
    685  f300		       84 b4		      STY	CollisionCounter	; We save some cycles in reset size.
    686  f302				   FinishDecrementCollision
    687  f302
    688  f302				   ResetPlayerSize
    689  f302		       d0 04		      BNE	FinishResetPlayerSize
    690  f304		       a9 30		      LDA	#%00110000
    691  f306		       85 04		      STA	NUSIZ0	;
    692  f308				   FinishResetPlayerSize
    693  f308
    694  f308							;STA HMCLR ; Do not double move car.
    695  f308
    696  f308				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    697  f308		       c0 01		      CPY	#1	; Last frame before reset
    698  f30a		       d0 05		      BNE	SkipResetPlayerPosition
    699  f30c		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    700  f30e		       4c 42 f3 	      JMP	StoreHMove
    701  f311				   SkipResetPlayerPosition
    702  f311
    703  f311				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    704  f311		       a5 f0		      LDA	CurrentCarId
    705  f313		       c9 03		      CMP	#CAR_ID_DRAGSTER
    706  f315		       d0 08		      BNE	PrepareReadXAxis
    707  f317		       a2 00		      LDX	#0
    708  f319		       a5 8c		      LDA	FrameCount0
    709  f31b		       29 01		      AND	#DRAGSTER_TURN_MASK
    710  f31d		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    711  f31f
    712  f31f							; for left and right, we're gonna 
    713  f31f							; set the horizontal speed, and then do
    714  f31f							; a single HMOVE.  We'll use X to hold the
    715  f31f							; horizontal speed, then store it in the 
    716  f31f							; appropriate register
    717  f31f				   PrepareReadXAxis
    718  f31f		       a2 00		      LDX	#0
    719  f321		       a4 b5		      LDY	Player0X
    720  f323				   BeginReadLeft
    721  f323		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    722  f325		       a9 40		      LDA	#%01000000	;Left
    723  f327		       2c 80 02 	      BIT	SWCHA
    724  f32a		       d0 07		      BNE	SkipMoveLeft
    725  f32c		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    726  f32e		       c6 b5		      DEC	Player0X
    727  f330		       4c 42 f3 	      JMP	StoreHMove	; Cannot move left and right...
    728  f333				   SkipMoveLeft
    729  f333				   BeginReadRight
    730  f333		       c0 2c		      CPY	#PLAYER_0_MAX_X
    731  f335		       f0 0b		      BEQ	SkipMoveRight	; At max already
    732  f337		       a9 80		      LDA	#%10000000	;Right
    733  f339		       2c 80 02 	      BIT	SWCHA
    734  f33c		       d0 04		      BNE	SkipMoveRight
    735  f33e		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    736  f340		       e6 b5		      INC	Player0X
    737  f342				   SkipMoveRight
    738  f342				   StoreHMove
    739  f342		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    740  f344		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    741  f346
    742  f346				   SkipUpdateLogic		; Continue here if not paused
    743  f346
    744  f346				   CalculateGear
    745  f346		       a5 8e		      LDA	Player0SpeedL	;3
    746  f348		       29 80		      AND	#%10000000	;2
    747  f34a		       05 8f		      ORA	Player0SpeedH	;3
    748  f34c		       18		      CLC		;2
    749  f34d		       2a		      ROL		;2
    750  f34e		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    751  f350		       85 f4		      STA	Gear
    752  f352
    753  f352				   EndProcessingBorder
    754  f352
    755  f352				   ProcessScoreFontColor
    756  f352		       a6 d6		      LDX	ScoreFontColorHoldChange
    757  f354		       f0 06		      BEQ	ResetScoreFontColor
    758  f356		       ca		      DEX
    759  f357		       86 d6		      STX	ScoreFontColorHoldChange
    760  f359		       4c 60 f3 	      JMP	SkipScoreFontColor
    761  f35c				   ResetScoreFontColor
    762  f35c		       a9 f9		      LDA	#SCORE_FONT_COLOR
    763  f35e		       85 d5		      STA	ScoreFontColor
    764  f360				   SkipScoreFontColor
    765  f360
    766  f360				   IsGameOver
    767  f360		       a5 b7		      LDA	CountdownTimer
    768  f362		       05 8e		      ORA	Player0SpeedL
    769  f364		       05 8f		      ORA	Player0SpeedH
    770  f366		       d0 0b		      BNE	IsCheckpoint
    771  f368		       a9 01		      LDA	#1
    772  f36a		       85 d6		      STA	ScoreFontColorHoldChange
    773  f36c		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    774  f36e		       85 d5		      STA	ScoreFontColor
    775  f370		       4c a5 f3 	      JMP	SkipIsTimeOver
    776  f373
    777  f373				   IsCheckpoint
    778  f373		       a5 d7		      LDA	NextCheckpoint
    779  f375		       c5 92		      CMP	TrafficOffset0 + 2
    780  f377		       d0 20		      BNE	SkipIsCheckpoint
    781  f379		       18		      CLC
    782  f37a		       69 10		      ADC	#CHECKPOINT_INTERVAL
    783  f37c		       85 d7		      STA	NextCheckpoint
    784  f37e		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    785  f380		       85 d5		      STA	ScoreFontColor
    786  f382		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    787  f384		       85 d6		      STA	ScoreFontColorHoldChange
    788  f386		       a5 b7		      LDA	CountdownTimer
    789  f388		       18		      CLC
    790  f389		       65 c2		      ADC	CheckpointTime
    791  f38b		       85 b7		      STA	CountdownTimer
    792  f38d		       90 04		      BCC	JumpSkipTimeOver
    793  f38f		       a9 ff		      LDA	#$FF
    794  f391		       85 b7		      STA	CountdownTimer	; Does not overflow!
    795  f393				   JumpSkipTimeOver
    796  f393		       20 08 f8 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    797  f396		       4c a5 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    798  f399				   SkipIsCheckpoint
    799  f399
    800  f399				   IsTimeOver
    801  f399		       a5 b7		      LDA	CountdownTimer
    802  f39b		       d0 08		      BNE	SkipIsTimeOver
    803  f39d		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    804  f39f		       85 d6		      STA	ScoreFontColorHoldChange
    805  f3a1		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    806  f3a3		       85 d5		      STA	ScoreFontColor
    807  f3a5				   SkipIsTimeOver
    808  f3a5
    809  f3a5		       20 7f fa 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    810  f3a8
    811  f3a8				   PrintEasterEggCondition
    812  f3a8		       a5 8d		      LDA	FrameCount1
    813  f3aa		       29 38		      AND	#%00111000
    814  f3ac		       05 c0		      ORA	GameStatus
    815  f3ae		       c9 38		      CMP	#%00111000
    816  f3b0		       d0 06		      BNE	ChooseTextSide
    817  f3b2		       20 75 f8 	      JSR	PrintEasterEgg
    818  f3b5		       4c a7 f4 	      JMP	RightScoreWriteEnd
    819  f3b8
    820  f3b8							;Could be done during on vblank to save this comparisson time (before draw score), 
    821  f3b8							;but I am saving vblank cycles for now, in case of 2 players.
    822  f3b8				   ChooseTextSide		; 
    823  f3b8		       a5 f2		      LDA	TextSide	;3
    824  f3ba		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    825  f3bc		       4c 3d f4 	      JMP	RightScoreWrite
    826  f3bf
    827  f3bf				   LeftScoreWrite
    828  f3bf		       a5 d5		      LDA	ScoreFontColor
    829  f3c1		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    830  f3c3		       f0 4e		      BEQ	PrintCheckpoint
    831  f3c5		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    832  f3c7		       f0 52		      BEQ	PrintStartGame
    833  f3c9		       a5 c0		      LDA	GameStatus
    834  f3cb		       f0 56		      BEQ	PrintHellwayLeft
    835  f3cd				   WriteDistance		;Not optimized yet, ugly code.
    836  f3cd				   Digit0Distance
    837  f3cd		       a5 91		      LDA	TrafficOffset0 + 1	;3
    838  f3cf		       4a		      LSR		; 2
    839  f3d0		       4a		      LSR		; 2
    840  f3d1		       4a		      LSR		; 2
    841  f3d2		       4a		      LSR		; 2
    842  f3d3		       aa		      TAX		; 2
    843  f3d4		       bd be fd 	      LDA	FontLookup,X	;4
    844  f3d7		       85 d3		      STA	ScoreD3	;3
    845  f3d9
    846  f3d9				   Digit1Distance
    847  f3d9		       a5 92		      LDA	TrafficOffset0 + 2	;3
    848  f3db		       29 0f		      AND	#%00001111	;2
    849  f3dd		       aa		      TAX		; 2
    850  f3de		       bd be fd 	      LDA	FontLookup,X	;4 
    851  f3e1		       85 d2		      STA	ScoreD2	;3
    852  f3e3
    853  f3e3				   Digit2Distance
    854  f3e3		       a5 92		      LDA	TrafficOffset0 + 2	;3
    855  f3e5		       4a		      LSR		; 2
    856  f3e6		       4a		      LSR		; 2
    857  f3e7		       4a		      LSR		; 2
    858  f3e8		       4a		      LSR		; 2
    859  f3e9		       aa		      TAX		; 2
    860  f3ea		       bd be fd 	      LDA	FontLookup,X	;4
    861  f3ed		       85 d1		      STA	ScoreD1	;3
    862  f3ef
    863  f3ef				   Digit3Distance
    864  f3ef		       a5 b8		      LDA	Traffic0Msb	;3
    865  f3f1		       29 0f		      AND	#%00001111	;2
    866  f3f3		       aa		      TAX		; 2
    867  f3f4		       bd be fd 	      LDA	FontLookup,X	;4 
    868  f3f7		       85 d0		      STA	ScoreD0	;3
    869  f3f9
    870  f3f9				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    871  f3f9		       a5 b8		      LDA	Traffic0Msb
    872  f3fb		       29 f0		      AND	#%11110000	;2
    873  f3fd		       d0 07		      BNE	DrawDistanceExtraDigit
    874  f3ff		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    875  f401		       85 d4		      STA	ScoreD4	;3
    876  f403		       4c 10 f4 	      JMP	EndDrawDistance
    877  f406				   DrawDistanceExtraDigit
    878  f406		       4a		      LSR		; 2
    879  f407		       4a		      LSR		; 2
    880  f408		       4a		      LSR		; 2
    881  f409		       4a		      LSR		; 2
    882  f40a		       aa		      TAX		; 2
    883  f40b		       bd be fd 	      LDA	FontLookup,X	;4
    884  f40e		       85 d4		      STA	ScoreD4	;3
    885  f410
    886  f410				   EndDrawDistance
    887  f410		       4c a7 f4 	      JMP	RightScoreWriteEnd	;3
    888  f413
    889  f413				   PrintCheckpoint
    890  f413		       a2 00		      LDX	#<CheckpointText
    891  f415		       20 57 f8 	      JSR	PrintStaticText
    892  f418		       4c a7 f4 	      JMP	RightScoreWriteEnd	;3
    893  f41b				   PrintStartGame
    894  f41b		       a2 23		      LDX	#<GoText
    895  f41d		       20 57 f8 	      JSR	PrintStaticText
    896  f420		       4c a7 f4 	      JMP	RightScoreWriteEnd	;3
    897  f423
    898  f423				   PrintHellwayLeft
    899  f423		       a5 8d		      LDA	FrameCount1
    900  f425		       29 01		      AND	#1
    901  f427		       d0 05		      BNE	PrintCreditsLeft
    902  f429		       a2 05		      LDX	#<HellwayLeftText
    903  f42b		       4c 30 f4 	      JMP	PrintGameMode
    904  f42e				   PrintCreditsLeft
    905  f42e		       a2 0f		      LDX	#<OpbText
    906  f430
    907  f430				   PrintGameMode
    908  f430		       20 57 f8 	      JSR	PrintStaticText
    909  f433		       a6 c5		      LDX	GameMode
    910  f435		       bd be fd 	      LDA	FontLookup,X	;4 
    911  f438		       85 d0		      STA	ScoreD0	;3
    912  f43a		       4c a7 f4 	      JMP	RightScoreWriteEnd	;3
    913  f43d
    914  f43d				   RightScoreWrite
    915  f43d		       a5 c0		      LDA	GameStatus
    916  f43f		       f0 45		      BEQ	PrintHellwayRight
    917  f441		       a5 d5		      LDA	ScoreFontColor
    918  f443		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    919  f445		       f0 52		      BEQ	PrintGameOver
    920  f447				   Digit0Timer
    921  f447		       a5 b7		      LDA	CountdownTimer	;3
    922  f449		       29 0f		      AND	#%00001111	;2
    923  f44b		       aa		      TAX		; 2
    924  f44c		       bd be fd 	      LDA	FontLookup,X	;4 
    925  f44f		       85 d1		      STA	ScoreD1	;3
    926  f451
    927  f451				   Digit1Timer
    928  f451		       a5 b7		      LDA	CountdownTimer	;3
    929  f453		       4a		      LSR		; 2
    930  f454		       4a		      LSR		; 2
    931  f455		       4a		      LSR		; 2
    932  f456		       4a		      LSR		; 2
    933  f457		       aa		      TAX		; 2
    934  f458		       bd be fd 	      LDA	FontLookup,X	;4
    935  f45b		       85 d0		      STA	ScoreD0	;3
    936  f45d
    937  f45d		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    938  f45f		       85 d2		      STA	ScoreD2	;3
    939  f461
    940  f461				   Digit0Speed
    941  f461		       a5 8e		      LDA	Player0SpeedL
    942  f463		       29 3c		      AND	#%00111100	;2 Discard the last bits
    943  f465		       4a		      LSR		; 2
    944  f466		       4a		      LSR		; 2
    945  f467		       aa		      TAX		; 2
    946  f468		       bd be fd 	      LDA	FontLookup,X	;4
    947  f46b		       85 d4		      STA	ScoreD4	;3
    948  f46d
    949  f46d				   Digit1Speed
    950  f46d		       a5 8e		      LDA	Player0SpeedL
    951  f46f		       29 c0		      AND	#%11000000	;2 Discard the last bits
    952  f471		       18		      CLC
    953  f472		       2a		      ROL		;First goes into carry
    954  f473		       2a		      ROL
    955  f474		       2a		      ROL
    956  f475		       85 b0		      STA	Tmp0
    957  f477		       a5 8f		      LDA	Player0SpeedH
    958  f479		       0a		      ASL
    959  f47a		       0a		      ASL
    960  f47b		       05 b0		      ORA	Tmp0
    961  f47d		       aa		      TAX		; 2
    962  f47e		       bd be fd 	      LDA	FontLookup,X	;4
    963  f481		       85 d3		      STA	ScoreD3	;3
    964  f483		       4c a7 f4 	      JMP	RightScoreWriteEnd
    965  f486
    966  f486				   PrintHellwayRight
    967  f486		       a5 8d		      LDA	FrameCount1
    968  f488		       29 01		      AND	#1
    969  f48a		       d0 05		      BNE	PrintCreditsRight
    970  f48c		       a2 0a		      LDX	#<HellwayRightText
    971  f48e		       4c 93 f4 	      JMP	PrintRightIntro
    972  f491				   PrintCreditsRight
    973  f491		       a2 14		      LDX	#<YearText
    974  f493				   PrintRightIntro
    975  f493		       20 57 f8 	      JSR	PrintStaticText
    976  f496		       4c a7 f4 	      JMP	RightScoreWriteEnd
    977  f499				   PrintGameOver
    978  f499		       a5 8c		      LDA	FrameCount0
    979  f49b		       30 05		      BMI	PrintOverText
    980  f49d		       a2 19		      LDX	#<GameText
    981  f49f		       4c a4 f4 	      JMP	StoreGameOverText
    982  f4a2				   PrintOverText
    983  f4a2		       a2 1e		      LDX	#<OverText
    984  f4a4				   StoreGameOverText
    985  f4a4		       20 57 f8 	      JSR	PrintStaticText
    986  f4a7				   RightScoreWriteEnd
    987  f4a7
    988  f4a7
    989  f4a7				   ScoreBackgroundColor
    990  f4a7		       a2 00		      LDX	#0
    991  f4a9		       ad 82 02 	      LDA	SWCHB
    992  f4ac		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    993  f4ae		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    994  f4b0		       f0 04		      BEQ	BlackAndWhiteScoreBg
    995  f4b2		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    996  f4b4		       a2 03		      LDX	#BACKGROUND_COLOR
    997  f4b6				   BlackAndWhiteScoreBg
    998  f4b6		       85 b2		      STA	Tmp2	; Score Background
    999  f4b8		       86 b3		      STX	Tmp3	; Traffic Background
   1000  f4ba
   1001  f4ba				   ConfigurePFForScore
   1002  f4ba							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1003  f4ba		       85 09		      STA	COLUBK
   1004  f4bc		       20 ca f7 	      JSR	ClearAll
   1005  f4bf		       a9 02		      LDA	#%00000010	; Score mode
   1006  f4c1		       85 0a		      STA	CTRLPF
   1007  f4c3		       a5 f2		      LDA	TextSide	;3
   1008  f4c5		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1009  f4c7				   LeftScoreOn
   1010  f4c7		       a5 d5		      LDA	ScoreFontColor
   1011  f4c9		       85 07		      STA	COLUP1
   1012  f4cb		       a5 b2		      LDA	Tmp2
   1013  f4cd		       85 06		      STA	COLUP0
   1014  f4cf		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1015  f4d1		       85 b1		      STA	Tmp1
   1016  f4d3		       4c e2 f4 	      JMP	CallWaitForVblankEnd
   1017  f4d6				   RightScoreOn
   1018  f4d6		       a5 d5		      LDA	ScoreFontColor
   1019  f4d8		       85 06		      STA	COLUP0
   1020  f4da		       a5 b2		      LDA	Tmp2
   1021  f4dc		       85 07		      STA	COLUP1
   1022  f4de		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1023  f4e0		       85 b1		      STA	Tmp1
   1024  f4e2
   1025  f4e2							; After here we are going to update the screen, No more heavy code
   1026  f4e2				   CallWaitForVblankEnd
   1027  f4e2		       20 58 fa 	      JSR	WaitForVblankEnd
   1028  f4e5
   1029  f4e5				   DrawScoreHud
   1030  f4e5		       20 e7 f8 	      JSR	PrintScore
   1031  f4e8
   1032  f4e8		       85 02		      STA	WSYNC
   1033  f4ea
   1034  f4ea		       a5 0c		      LDA	INPT4	;3
   1035  f4ec		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1036  f4ee		       a5 d5		      LDA	ScoreFontColor
   1037  f4f0		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1038  f4f2		       d0 0a		      BNE	WaitAnotherScoreLine
   1039  f4f4		       a5 f2		      LDA	TextSide	;3
   1040  f4f6		       d0 03		      BNE	LeftScoreOnGameOver
   1041  f4f8		       4c 32 fa 	      JMP	DrawGameOverScreenRight
   1042  f4fb				   LeftScoreOnGameOver
   1043  f4fb		       4c a4 f9 	      JMP	DrawGameOverScreenLeft
   1044  f4fe
   1045  f4fe				   WaitAnotherScoreLine
   1046  f4fe		       85 02		      STA	WSYNC
   1047  f500
   1048  f500				   PrepareForTraffic
   1049  f500		       20 dc f7 	      JSR	ClearPF	; 32
   1050  f503
   1051  f503		       85 02		      STA	WSYNC
   1052  f505		       85 02		      STA	WSYNC
   1053  f507
   1054  f507		       a9 30		      LDA	#%00110000	; 2 Score mode
   1055  f509		       85 0a		      STA	CTRLPF	;3
   1056  f50b
   1057  f50b		       a5 c3		      LDA	TrafficColor	;3
   1058  f50d		       85 08		      STA	COLUPF	;3
   1059  f50f
   1060  f50f		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1061  f511		       85 07		      STA	COLUP1	;3
   1062  f513
   1063  f513		       a5 d5		      LDA	ScoreFontColor	;3
   1064  f515		       85 06		      STA	COLUP0	;3
   1065  f517
   1066  f517		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1067  f519
   1068  f519		       20 dc f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1069  f51c
      0  f51c					      SLEEP	14
      1  f51c				   .CYCLES    SET	14
      2  f51c
      3  f51c				  -	      IF	.CYCLES < 2
      4  f51c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f51c				  -	      ERR
      6  f51c					      ENDIF
      7  f51c
      8  f51c				  -	      IF	.CYCLES & 1
      9  f51c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f51c				  -	      nop	0
     11  f51c				  -	      ELSE
     12  f51c				  -	      bit	VSYNC
     13  f51c				  -	      ENDIF
     14  f51c				  -.CYCLES    SET	.CYCLES - 3
     15  f51c					      ENDIF
     16  f51c
     17  f51c					      REPEAT	.CYCLES / 2
     18  f51c		       ea		      nop
     17  f51c					      REPEND
     18  f51d		       ea		      nop
     17  f51d					      REPEND
     18  f51e		       ea		      nop
     17  f51e					      REPEND
     18  f51f		       ea		      nop
     17  f51f					      REPEND
     18  f520		       ea		      nop
     17  f520					      REPEND
     18  f521		       ea		      nop
     17  f521					      REPEND
     18  f522		       ea		      nop
     19  f523					      REPEND
   1071  f523
   1072  f523		       a5 b3		      LDA	Tmp3	;3
   1073  f525		       85 09		      STA	COLUBK	;3
   1074  f527		       a5 8c		      LDA	FrameCount0
   1075  f529		       29 01		      AND	#%00000001
   1076  f52b		       d0 05		      BNE	OpDrawCache
   1077  f52d		       4c ec f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1078  f530							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1079  f530
   1080  f530							;main scanline loop...
   1081  f530				   OpScanLoop
   1082  f530		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1083  f532
   1084  f532							;Start of next line!			
   1085  f532				   OpDrawCache		;63 Is the last line going to the top of the next frame?
   1086  f532
   1087  f532		       a5 80		      LDA	GRP0Cache	;3
   1088  f534		       85 1b		      STA	GRP0	;3
   1089  f536
   1090  f536		       a5 84		      LDA	GRP1Cache	;3
   1091  f538		       85 1c		      STA	GRP1	;3
   1092  f53a
   1093  f53a		       a5 85		      LDA	ENABLCache	;3
   1094  f53c		       85 1f		      STA	ENABL	;3
   1095  f53e
   1096  f53e		       a5 86		      LDA	ENAM0Cache	;3
   1097  f540		       85 1d		      STA	ENAM0	;3
   1098  f542
   1099  f542		       a5 87		      LDA	ENAM1Cache	;3
   1100  f544		       85 1e		      STA	ENAM1	;3
   1101  f546
   1102  f546		       a5 81		      LDA	PF0Cache	;3
   1103  f548		       85 0d		      STA	PF0	;3
   1104  f54a
   1105  f54a		       a9 00		      LDA	#0	;2
   1106  f54c							;STA PF0	     ;3
   1107  f54c		       85 80		      STA	GRP0Cache	;3
   1108  f54e		       85 86		      STA	ENAM0Cache	;3
   1109  f550		       85 85		      STA	ENABLCache	;3
   1110  f552		       85 87		      STA	ENAM1Cache	; 3
   1111  f554							;STA GRP1Cache ;3
   1112  f554		       85 0d		      STA	PF0	;3
   1113  f556							;STA PF2	     ;3
   1114  f556
   1115  f556		       a5 83		      LDA	PF2Cache	;3
   1116  f558		       85 0f		      STA	PF2	;3
   1117  f55a
   1118  f55a				   OpDrawCar0
   1119  f55a		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1120  f55c		       b0 04		      BCS	OpSkipDrawCar	;2
   1121  f55e		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1122  f560		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
   1123  f562				   OpSkipDrawCar
   1124  f562
   1125  f562							;BEQ DrawTraffic3
   1126  f562				   OpDrawTraffic1		; 33
   1127  f562		       98		      TYA		; 2
   1128  f563		       18		      CLC		; 2 
   1129  f564		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
   1130  f566		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1131  f568		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1132  f56a		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
   1133  f56c		       4c 71 f5 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1134  f56f				   OpEorOffsetWithCarry
   1135  f56f		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1136  f571				   OpAfterEorOffsetWithCarry		;17
   1137  f571		       aa		      TAX		;2
   1138  f572		       bd 00 fe 	      LDA	AesTable,X	; 4
   1139  f575		       c5 c1		      CMP	TrafficChance	;3
   1140  f577		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1141  f579		       a9 ff		      LDA	#$FF	;2
   1142  f57b		       85 86		      STA	ENAM0Cache	;3
   1143  f57d				   OpFinishDrawTraffic1
   1144  f57d
   1145  f57d				   OpErasePF2
   1146  f57d		       a9 00		      LDA	#0
   1147  f57f		       85 0f		      STA	PF2
   1148  f581
   1149  f581				   OpDrawTraffic2		; 33
   1150  f581		       98		      TYA		; 2
   1151  f582		       18		      CLC		; 2 
   1152  f583		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
   1153  f585		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1154  f587		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1155  f589		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
   1156  f58b		       4c 90 f5 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1157  f58e				   OpEorOffsetWithCarry2
   1158  f58e		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1159  f590				   OpAfterEorOffsetWithCarry2		;17
   1160  f590		       aa		      TAX		;2
   1161  f591		       bd 00 fe 	      LDA	AesTable,X	; 4
   1162  f594		       c5 c1		      CMP	TrafficChance	;3
   1163  f596		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1164  f598		       a9 02		      LDA	#%00000010	;2
   1165  f59a		       85 85		      STA	ENABLCache	;3
   1166  f59c				   OpFinishDrawTraffic2
   1167  f59c
   1168  f59c							;STA WSYNC ;65 / 137
   1169  f59c
   1170  f59c							; LDA Tmp0 ; Flicker this line if drawing car
   1171  f59c							; BEQ FinishDrawTraffic4
   1172  f59c				   OpDrawTraffic3		; 33
   1173  f59c		       98		      TYA		; 2
   1174  f59d		       18		      CLC		; 2 
   1175  f59e		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
   1176  f5a0		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1177  f5a2		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1178  f5a4		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
   1179  f5a6		       4c ab f5 	      JMP	OpAfterEorOffsetWithCarry3	; 3
   1180  f5a9				   OpEorOffsetWithCarry3
   1181  f5a9		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1182  f5ab				   OpAfterEorOffsetWithCarry3		;17
   1183  f5ab		       aa		      TAX		;2
   1184  f5ac		       bd 00 fe 	      LDA	AesTable,X	; 4
   1185  f5af		       c5 c1		      CMP	TrafficChance	;3
   1186  f5b1		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1187  f5b3		       a9 02		      LDA	#%00000010	;2
   1188  f5b5		       85 87		      STA	ENAM1Cache
   1189  f5b7				   OpFinishDrawTraffic3
   1190  f5b7
   1191  f5b7				   OpDrawOponent		;26
   1192  f5b7		       84 b0		      STY	Tmp0	;3
   1193  f5b9		       a4 d8		      LDY	OpponentLine	;3
   1194  f5bb		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1195  f5bd		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1196  f5bf				   OpDrawOpponent
   1197  f5bf		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1198  f5c1		       85 80		      STA	GRP0Cache	;3
   1199  f5c3		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1200  f5c5		       a4 b0		      LDY	Tmp0	;3
   1201  f5c7		       4c db f5 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
   1202  f5ca				   OpSkipDrawOpponent
   1203  f5ca		       c6 d8		      DEC	OpponentLine	;5
   1204  f5cc		       a4 b0		      LDY	Tmp0	;3
   1205  f5ce
   1206  f5ce
   1207  f5ce				   OpDrawTraffic0		; 21 2pe
   1208  f5ce		       98		      TYA		; 2
   1209  f5cf		       18		      CLC		; 2 
   1210  f5d0		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1211  f5d2		       29 08		      AND	#%00001000	;2
   1212  f5d4		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1213  f5d6				   OpHasBorderP0
   1214  f5d6		       a9 70		      LDA	#%01110000	; 2
   1215  f5d8		       4c dd f5 	      JMP	OpStoreBorderP0	; 3
   1216  f5db				   OpHasNoBorderP0
   1217  f5db		       a9 00		      LDA	#0	; 2
   1218  f5dd				   OpStoreBorderP0
   1219  f5dd		       85 81		      STA	PF0Cache	; 3
   1220  f5df		       85 83		      STA	PF2Cache	; 3
   1221  f5e1
   1222  f5e1				   OpSkipDrawTraffic0
   1223  f5e1
   1224  f5e1				   OpWhileScanLoop
   1225  f5e1		       88		      DEY		;2
   1226  f5e2		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1227  f5e4		       4c 30 f5 	      JMP	OpScanLoop	;3
   1228  f5e7				   OpFinishScanLoop		; 7 209 of 222
   1229  f5e7		       4c 9f f6 	      JMP	FinishScanLoop
   1230  f5ea
   1231  f5ea							;main scanline loop...
   1232  f5ea				   ScanLoop
   1233  f5ea		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1234  f5ec
   1235  f5ec							;Start of next line!			
   1236  f5ec				   DrawCache		;63 Is the last line going to the top of the next frame?
   1237  f5ec		       a5 81		      LDA	PF0Cache	;3
   1238  f5ee		       85 0d		      STA	PF0	;3
   1239  f5f0
   1240  f5f0		       a5 80		      LDA	GRP0Cache	;3
   1241  f5f2		       85 1b		      STA	GRP0	;3
   1242  f5f4
   1243  f5f4		       a5 84		      LDA	GRP1Cache	;3
   1244  f5f6		       85 1c		      STA	GRP1	;3
   1245  f5f8
   1246  f5f8		       a5 86		      LDA	ENAM0Cache	;3
   1247  f5fa		       85 1d		      STA	ENAM0	;3
   1248  f5fc
   1249  f5fc		       a5 85		      LDA	ENABLCache	;3
   1250  f5fe		       85 1f		      STA	ENABL	;3
   1251  f600
   1252  f600		       a5 87		      LDA	ENAM1Cache	;3
   1253  f602		       85 1e		      STA	ENAM1	;3
   1254  f604
   1255  f604		       a5 83		      LDA	PF2Cache	;3
   1256  f606		       85 0f		      STA	PF2	;3
   1257  f608
   1258  f608		       a9 00		      LDA	#0	;2
   1259  f60a		       85 0d		      STA	PF0	;3
   1260  f60c		       85 84		      STA	GRP1Cache	;3
   1261  f60e		       85 85		      STA	ENABLCache	;3
   1262  f610		       85 86		      STA	ENAM0Cache	;3
   1263  f612		       85 87		      STA	ENAM1Cache	; 3
   1264  f614							;STA GRP0Cache
   1265  f614		       85 0f		      STA	PF2	;3
   1266  f616
   1267  f616				   DrawCar0
   1268  f616		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1269  f618		       b0 04		      BCS	SkipDrawCar	;2
   1270  f61a		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1271  f61c		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1272  f61e				   SkipDrawCar
   1273  f61e
   1274  f61e							;BEQ DrawTraffic3
   1275  f61e				   DrawTraffic1 		; 33
   1276  f61e		       98		      TYA		; 2
   1277  f61f		       18		      CLC		; 2 
   1278  f620		       65 95		      ADC	TrafficOffset1 + 1	;3
   1279  f622		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1280  f624		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1281  f626		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1282  f628		       4c 2d f6 	      JMP	AfterEorOffsetWithCarry	; 3
   1283  f62b				   EorOffsetWithCarry
   1284  f62b		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1285  f62d				   AfterEorOffsetWithCarry		;17
   1286  f62d		       aa		      TAX		;2
   1287  f62e		       bd 00 fe 	      LDA	AesTable,X	; 4
   1288  f631		       c5 c1		      CMP	TrafficChance	;3
   1289  f633		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1290  f635		       a9 ff		      LDA	#$FF	;2
   1291  f637		       85 86		      STA	ENAM0Cache	;3
   1292  f639				   FinishDrawTraffic1
   1293  f639
   1294  f639				   DrawTraffic2 		; 33
   1295  f639		       98		      TYA		; 2
   1296  f63a		       18		      CLC		; 2 
   1297  f63b		       65 99		      ADC	TrafficOffset2 + 1	;3
   1298  f63d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1299  f63f		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1300  f641		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1301  f643		       4c 48 f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1302  f646				   EorOffsetWithCarry2
   1303  f646		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1304  f648				   AfterEorOffsetWithCarry2		;17
   1305  f648		       aa		      TAX		;2
   1306  f649		       bd 00 fe 	      LDA	AesTable,X	; 4
   1307  f64c		       c5 c1		      CMP	TrafficChance	;3
   1308  f64e		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1309  f650		       a9 02		      LDA	#%00000010	;2
   1310  f652		       85 85		      STA	ENABLCache	;3
   1311  f654				   FinishDrawTraffic2
   1312  f654
   1313  f654							;STA WSYNC ;65 / 137
   1314  f654
   1315  f654							; LDA Tmp0 ; Flicker this line if drawing car
   1316  f654							; BEQ FinishDrawTraffic4
   1317  f654				   DrawTraffic3 		; 33
   1318  f654		       98		      TYA		; 2
   1319  f655		       18		      CLC		; 2 
   1320  f656		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1321  f658		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1322  f65a		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1323  f65c		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1324  f65e		       4c 63 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1325  f661				   EorOffsetWithCarry3
   1326  f661		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1327  f663				   AfterEorOffsetWithCarry3		;17
   1328  f663		       aa		      TAX		;2
   1329  f664		       bd 00 fe 	      LDA	AesTable,X	; 4
   1330  f667		       c5 c1		      CMP	TrafficChance	;3
   1331  f669		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1332  f66b		       a9 02		      LDA	#%00000010	;2
   1333  f66d		       85 87		      STA	ENAM1Cache
   1334  f66f				   FinishDrawTraffic3
   1335  f66f
   1336  f66f
   1337  f66f				   DrawOponent		;26
   1338  f66f		       84 b0		      STY	Tmp0	;3
   1339  f671		       a4 d8		      LDY	OpponentLine	;3
   1340  f673		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1341  f675		       b0 0b		      BCS	SkipDrawOpponent	;2
   1342  f677				   DrawOpponent
   1343  f677		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1344  f679		       85 84		      STA	GRP1Cache	;3
   1345  f67b		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1346  f67d		       a4 b0		      LDY	Tmp0	;3
   1347  f67f		       4c 93 f6 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1348  f682				   SkipDrawOpponent
   1349  f682		       c6 d8		      DEC	OpponentLine	;5
   1350  f684		       a4 b0		      LDY	Tmp0	;3
   1351  f686
   1352  f686				   DrawTraffic0 		; 21 2pe
   1353  f686		       98		      TYA		; 2
   1354  f687		       18		      CLC		; 2 
   1355  f688		       65 91		      ADC	TrafficOffset0 + 1	;3
   1356  f68a		       29 08		      AND	#%00001000	;2
   1357  f68c		       f0 05		      BEQ	HasNoBorderP0	;3
   1358  f68e				   HasBorderP0
   1359  f68e		       a9 70		      LDA	#%01110000	; 2
   1360  f690		       4c 95 f6 	      JMP	StoreBorderP0	; 3
   1361  f693				   HasNoBorderP0
   1362  f693		       a9 00		      LDA	#0	; 2
   1363  f695				   StoreBorderP0
   1364  f695		       85 81		      STA	PF0Cache	; 3
   1365  f697		       85 83		      STA	PF2Cache	; 3
   1366  f699
   1367  f699				   SkipDrawTraffic0
   1368  f699
   1369  f699				   WhileScanLoop
   1370  f699		       88		      DEY		;2
   1371  f69a		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1372  f69c		       4c ea f5 	      JMP	ScanLoop	;3
   1373  f69f				   FinishScanLoop		; 7 209 of 222
   1374  f69f
   1375  f69f		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1376  f6a1		       20 eb f7 	      JSR	LoadAll
   1377  f6a4		       85 02		      STA	WSYNC	; do stuff!
   1378  f6a6		       85 02		      STA	WSYNC
   1379  f6a8		       85 02		      STA	WSYNC
   1380  f6aa							;42 cycles to use here
   1381  f6aa
   1382  f6aa				   PrepareOverscan
   1383  f6aa		       a9 02		      LDA	#2
   1384  f6ac		       85 02		      STA	WSYNC
   1385  f6ae		       85 01		      STA	VBLANK
   1386  f6b0
   1387  f6b0		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1388  f6b2		       8d 96 02 	      STA	TIM64T
   1389  f6b5
   1390  f6b5				   LeftSound		;41
   1391  f6b5		       a5 b7		      LDA	CountdownTimer	;3
   1392  f6b7		       f0 1b		      BEQ	EngineOff	;2
   1393  f6b9		       a6 f4		      LDX	Gear
   1394  f6bb		       a5 8e		      LDA	Player0SpeedL	;3
   1395  f6bd		       4a		      LSR		;2
   1396  f6be		       4a		      LSR		;2
   1397  f6bf		       4a		      LSR		;2
   1398  f6c0		       29 0f		      AND	#%00001111	;2
   1399  f6c2		       85 b0		      STA	Tmp0	;3
   1400  f6c4		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1401  f6c7		       38		      SEC		;2
   1402  f6c8		       e5 b0		      SBC	Tmp0	;3
   1403  f6ca		       85 17		      STA	AUDF0	;3
   1404  f6cc		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1405  f6cf		       85 15		      STA	AUDC0	;3
   1406  f6d1		       4c d8 f6 	      JMP	EndLeftSound	;3
   1407  f6d4				   EngineOff
   1408  f6d4		       a9 00		      LDA	#0
   1409  f6d6		       85 15		      STA	AUDC0
   1410  f6d8
   1411  f6d8				   EndLeftSound
   1412  f6d8
   1413  f6d8
   1414  f6d8				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1415  f6d8		       a5 d5		      LDA	ScoreFontColor	;3
   1416  f6da		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1417  f6dc		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1418  f6de		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1419  f6e0		       f0 29		      BEQ	PlayCheckpoint	;2
   1420  f6e2		       a5 b4		      LDA	CollisionCounter	;3
   1421  f6e4		       c9 e0		      CMP	#$E0	;2
   1422  f6e6		       b0 14		      BCS	PlayColision	;2
   1423  f6e8		       a5 d7		      LDA	NextCheckpoint	;3
   1424  f6ea		       38		      SEC		;2
   1425  f6eb		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1426  f6ed		       c9 02		      CMP	#$02	;2
   1427  f6ef		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1428  f6f1		       a5 b7		      LDA	CountdownTimer	; 3
   1429  f6f3		       f0 53		      BEQ	MuteRightSound	;2
   1430  f6f5		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1431  f6f7		       90 37		      BCC	PlayWarnTimeEnding	;4
   1432  f6f9		       4c 48 f7 	      JMP	MuteRightSound	;3
   1433  f6fc				   PlayColision
   1434  f6fc		       a9 1f		      LDA	#31
   1435  f6fe		       85 18		      STA	AUDF1
   1436  f700		       a9 08		      LDA	#8
   1437  f702		       85 16		      STA	AUDC1
   1438  f704		       a9 08		      LDA	#8
   1439  f706		       85 1a		      STA	AUDV1
   1440  f708		       4c 4c f7 	      JMP	EndRightSound
   1441  f70b
   1442  f70b				   PlayCheckpoint
   1443  f70b		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1444  f70d		       4a		      LSR		;2
   1445  f70e		       4a		      LSR		;2
   1446  f70f		       4a		      LSR		;2
   1447  f710		       85 18		      STA	AUDF1	;3
   1448  f712		       a9 0c		      LDA	#12	;2
   1449  f714		       85 16		      STA	AUDC1	;3
   1450  f716		       a9 06		      LDA	#6	;2
   1451  f718		       85 1a		      STA	AUDV1	;3
   1452  f71a		       4c 4c f7 	      JMP	EndRightSound	;3
   1453  f71d
   1454  f71d				   PlayBeforeCheckpoint
   1455  f71d		       a5 8c		      LDA	FrameCount0	;3
   1456  f71f		       29 1c		      AND	#%00011100	;2
   1457  f721		       09 03		      ORA	#%00000011	;2
   1458  f723		       85 18		      STA	AUDF1	;3
   1459  f725		       a9 0c		      LDA	#12	;2
   1460  f727		       85 16		      STA	AUDC1	;3
   1461  f729		       a9 03		      LDA	#3	;2
   1462  f72b		       85 1a		      STA	AUDV1	;3
   1463  f72d		       4c 4c f7 	      JMP	EndRightSound	;3
   1464  f730
   1465  f730				   PlayWarnTimeEnding
   1466  f730		       a5 8c		      LDA	FrameCount0	;3
   1467  f732		       29 04		      AND	#%00000100	;2
   1468  f734		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1469  f736		       18		      CLC		;2
   1470  f737		       a9 0a		      LDA	#10	;2
   1471  f739		       65 b7		      ADC	CountdownTimer	;2
   1472  f73b		       85 18		      STA	AUDF1	;3
   1473  f73d		       a9 0c		      LDA	#12	;2
   1474  f73f		       85 16		      STA	AUDC1	;3
   1475  f741		       a9 03		      LDA	#3	;2
   1476  f743		       85 1a		      STA	AUDV1	;3
   1477  f745		       4c 4c f7 	      JMP	EndRightSound	;3
   1478  f748
   1479  f748				   MuteRightSound
   1480  f748		       a9 00		      LDA	#0
   1481  f74a		       85 1a		      STA	AUDV1
   1482  f74c				   EndRightSound
   1483  f74c
   1484  f74c							;Read Fire Button before, will make it start the game for now.
   1485  f74c				   StartGame
   1486  f74c		       a5 0c		      LDA	INPT4	;3
   1487  f74e		       25 0d		      AND	INPT5	;3 player 
   1488  f750		       30 31		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1489  f752		       a5 8c		      LDA	FrameCount0
   1490  f754		       29 01		      AND	#%00000001
   1491  f756		       d0 2b		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1492  f758		       a5 c0		      LDA	GameStatus	;3
   1493  f75a		       05 b9		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1494  f75c		       d0 25		      BNE	SkipGameStart
   1495  f75e		       a5 c5		      LDA	GameMode
   1496  f760		       c9 10		      CMP	#MAX_GAME_MODE
   1497  f762		       d0 0b		      BNE	SetGameRunning
   1498  f764		       a9 00		      LDA	#0
   1499  f766		       85 c5		      STA	GameMode
   1500  f768		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1501  f76a		       85 b9		      STA	SwitchDebounceCounter
   1502  f76c		       4c 83 f7 	      JMP	SkipGameStart
   1503  f76f				   SetGameRunning
   1504  f76f		       e6 c0		      INC	GameStatus
   1505  f771		       a9 00		      LDA	#0	;
   1506  f773		       85 8c		      STA	FrameCount0
   1507  f775		       85 8d		      STA	FrameCount1
   1508  f777		       a9 0a		      LDA	#10
   1509  f779		       85 19		      STA	AUDV0
   1510  f77b		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1511  f77d		       85 d5		      STA	ScoreFontColor
   1512  f77f		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1513  f781		       85 d6		      STA	ScoreFontColorHoldChange
   1514  f783				   SkipGameStart
   1515  f783
   1516  f783				   ReadSwitches
   1517  f783		       a6 b9		      LDX	SwitchDebounceCounter
   1518  f785		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1519  f787		       a9 01		      LDA	#%00000001
   1520  f789		       2c 82 02 	      BIT	SWCHB
   1521  f78c		       d0 07		      BNE	SkipReset
   1522  f78e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1523  f790		       85 b9		      STA	SwitchDebounceCounter
   1524  f792		       4c c2 f7 	      JMP	OverScanWaitBeforeReset
   1525  f795				   SkipReset
   1526  f795
   1527  f795				   GameModeSelect
   1528  f795		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1529  f797		       d0 1c		      BNE	SkipGameSelect
   1530  f799		       20 17 f8 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1531  f79c				   ContinueGameSelect
   1532  f79c		       a9 02		      LDA	#%00000010
   1533  f79e		       2c 82 02 	      BIT	SWCHB
   1534  f7a1		       d0 12		      BNE	SkipGameSelect
   1535  f7a3		       a6 c5		      LDX	GameMode
   1536  f7a5		       e0 10		      CPX	#MAX_GAME_MODE
   1537  f7a7		       f0 04		      BEQ	ResetGameMode
   1538  f7a9		       e8		      INX
   1539  f7aa		       4c af f7 	      JMP	StoreGameMode
   1540  f7ad				   ResetGameMode
   1541  f7ad		       a2 00		      LDX	#0
   1542  f7af				   StoreGameMode
   1543  f7af		       86 c5		      STX	GameMode
   1544  f7b1		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1545  f7b3		       85 b9		      STA	SwitchDebounceCounter
   1546  f7b5				   SkipGameSelect
   1547  f7b5		       4c ba f7 	      JMP	EndReadSwitches
   1548  f7b8				   DecrementSwitchDebounceCounter
   1549  f7b8		       c6 b9		      DEC	SwitchDebounceCounter
   1550  f7ba				   EndReadSwitches
   1551  f7ba
   1552  f7ba				   OverScanWait
   1553  f7ba		       ad 84 02 	      LDA	INTIM
   1554  f7bd		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1555  f7bf		       4c c4 f0 	      JMP	MainLoop
   1556  f7c2
   1557  f7c2				   OverScanWaitBeforeReset
   1558  f7c2		       ad 84 02 	      LDA	INTIM
   1559  f7c5		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1560  f7c7		       4c 12 f0 	      JMP	Start
   1561  f7ca
   1562  f7ca				   Subroutines
   1563  f7ca
   1564  f7ca				   ClearAll		; 52
   1565  f7ca		       a9 00		      LDA	#0	;2
   1566  f7cc		       85 1c		      STA	GRP1	;3
   1567  f7ce		       85 1f		      STA	ENABL	;3
   1568  f7d0		       85 1d		      STA	ENAM0	;3
   1569  f7d2		       85 1e		      STA	ENAM1	;3
   1570  f7d4		       85 84		      STA	GRP1Cache	;3
   1571  f7d6		       85 85		      STA	ENABLCache	;3
   1572  f7d8		       85 86		      STA	ENAM0Cache	;3
   1573  f7da		       85 87		      STA	ENAM1Cache	;3
   1574  f7dc
   1575  f7dc				   ClearPF		; 26
   1576  f7dc		       a9 00		      LDA	#0	;2
   1577  f7de				   ClearPFSkipLDA0
   1578  f7de		       85 0d		      STA	PF0	;3
   1579  f7e0		       85 0e		      STA	PF1	;3
   1580  f7e2		       85 0f		      STA	PF2	;3	
   1581  f7e4		       85 81		      STA	PF0Cache	;3
   1582  f7e6		       85 82		      STA	PF1Cache	;3
   1583  f7e8		       85 83		      STA	PF2Cache	;3 
   1584  f7ea		       60		      RTS		;6
   1585  f7eb				   EndClearAll
   1586  f7eb
   1587  f7eb				   LoadAll		; 48
   1588  f7eb		       a5 81		      LDA	PF0Cache	;3
   1589  f7ed		       85 0d		      STA	PF0	;3
   1590  f7ef
   1591  f7ef		       a5 82		      LDA	PF1Cache	;3
   1592  f7f1		       85 0e		      STA	PF1	;3
   1593  f7f3
   1594  f7f3		       a5 83		      LDA	PF2Cache	;3
   1595  f7f5		       85 0f		      STA	PF2	;3
   1596  f7f7
   1597  f7f7		       a5 84		      LDA	GRP1Cache	;3
   1598  f7f9		       85 1c		      STA	GRP1	;3
   1599  f7fb
   1600  f7fb		       a5 85		      LDA	ENABLCache	;3
   1601  f7fd		       85 1f		      STA	ENABL	;3
   1602  f7ff
   1603  f7ff		       a5 86		      LDA	ENAM0Cache	;3
   1604  f801		       85 1d		      STA	ENAM0	;3
   1605  f803
   1606  f803		       a5 87		      LDA	ENAM1Cache	;3
   1607  f805		       85 1e		      STA	ENAM1	;3
   1608  f807
   1609  f807		       60		      RTS		;6
   1610  f808				   EndLoadAll
   1611  f808
   1612  f808				   NextDifficulty
   1613  f808		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1614  f80a		       29 01		      AND	#%00000001
   1615  f80c		       d0 24		      BNE	CheckRandomDifficulty
   1616  f80e
   1617  f80e		       a5 c4		      LDA	CurrentDifficulty
   1618  f810		       18		      CLC
   1619  f811		       69 01		      ADC	#1
   1620  f813		       29 03		      AND	#%00000011	; 0 to 3
   1621  f815		       85 c4		      STA	CurrentDifficulty
   1622  f817
   1623  f817				   ConfigureDifficulty
   1624  f817		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1625  f819		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1626  f81c		       85 c1		      STA	TrafficChance
   1627  f81e		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1628  f821		       85 c3		      STA	TrafficColor
   1629  f823
   1630  f823		       a5 c5		      LDA	GameMode	;
   1631  f825		       29 01		      AND	#%00000001
   1632  f827		       f0 03		      BEQ	UseNextDifficultyTime
   1633  f829		       4c 2d f8 	      JMP	StoreDifficultyTime
   1634  f82c				   UseNextDifficultyTime
   1635  f82c		       c8		      INY
   1636  f82d				   StoreDifficultyTime
   1637  f82d		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1638  f830		       85 c2		      STA	CheckpointTime
   1639  f832
   1640  f832				   CheckRandomDifficulty
   1641  f832		       a5 c5		      LDA	GameMode
   1642  f834		       29 08		      AND	#%00001000	; Random difficulties
   1643  f836		       f0 09		      BEQ	ReturnFromNextDifficulty
   1644  f838				   RandomDifficulty
   1645  f838		       a6 8c		      LDX	FrameCount0
   1646  f83a		       bd 00 fe 	      LDA	AesTable,X
   1647  f83d							;EOR TrafficChance, no need, lets make life simple
   1648  f83d		       29 3f		      AND	#%00111111
   1649  f83f		       85 c1		      STA	TrafficChance
   1650  f841
   1651  f841				   ReturnFromNextDifficulty
   1652  f841		       60		      RTS
   1653  f842				   EndNextDifficulty
   1654  f842
   1655  f842				   DefaultOffsets
   1656  f842		       a9 20		      LDA	#$20
   1657  f844		       85 96		      STA	TrafficOffset1 + 2
   1658  f846		       85 a6		      STA	OpTrafficOffset1 + 2
   1659  f848		       a9 40		      LDA	#$40
   1660  f84a		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1661  f84c		       85 aa		      STA	OpTrafficOffset2 + 2
   1662  f84e		       a9 60		      LDA	#$60
   1663  f850		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1664  f852		       85 ae		      STA	OpTrafficOffset3 + 2
   1665  f854		       a9 80		      LDA	#$80
   1666  f856		       60		      RTS
   1667  f857
   1668  f857				   PrintStaticText		; Preload X with the offset referent to StaticText
   1669  f857		       bd 00 ff 	      LDA	StaticText,X
   1670  f85a		       85 d0		      STA	ScoreD0
   1671  f85c		       e8		      INX
   1672  f85d		       bd 00 ff 	      LDA	StaticText,X
   1673  f860		       85 d1		      STA	ScoreD1
   1674  f862		       e8		      INX
   1675  f863		       bd 00 ff 	      LDA	StaticText,X
   1676  f866		       85 d2		      STA	ScoreD2
   1677  f868		       e8		      INX
   1678  f869		       bd 00 ff 	      LDA	StaticText,X
   1679  f86c		       85 d3		      STA	ScoreD3
   1680  f86e		       e8		      INX
   1681  f86f		       bd 00 ff 	      LDA	StaticText,X
   1682  f872		       85 d4		      STA	ScoreD4
   1683  f874		       60		      RTS
   1684  f875
   1685  f875				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1686  f875		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1687  f877		       85 d5		      STA	ScoreFontColor
   1688  f879		       a9 01		      LDA	#1
   1689  f87b		       85 d6		      STA	ScoreFontColorHoldChange
   1690  f87d
   1691  f87d		       a5 8d		      LDA	FrameCount1
   1692  f87f		       29 07		      AND	#%00000111
   1693  f881		       85 b3		      STA	Tmp3
   1694  f883							;0 is Zelda Name, (default)
   1695  f883		       a9 01		      LDA	#1
   1696  f885		       c5 b3		      CMP	Tmp3
   1697  f887		       f0 38		      BEQ	PrintZeldaDateLeft
   1698  f889
   1699  f889		       a9 02		      LDA	#2
   1700  f88b		       c5 b3		      CMP	Tmp3
   1701  f88d		       f0 23		      BEQ	PrintPolvinhosLeft
   1702  f88f
   1703  f88f		       a9 03		      LDA	#3
   1704  f891		       c5 b3		      CMP	Tmp3
   1705  f893		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1706  f895
   1707  f895		       a9 04		      LDA	#4
   1708  f897		       c5 b3		      CMP	Tmp3
   1709  f899		       f0 1c		      BEQ	PrintIvonneLeft
   1710  f89b
   1711  f89b		       a9 05		      LDA	#5
   1712  f89d		       c5 b3		      CMP	Tmp3
   1713  f89f		       f0 2a		      BEQ	PrintIvonneDateLeft
   1714  f8a1
   1715  f8a1		       a9 06		      LDA	#6
   1716  f8a3		       c5 b3		      CMP	Tmp3
   1717  f8a5		       f0 15		      BEQ	PrintArtLeft
   1718  f8a7
   1719  f8a7		       a9 07		      LDA	#7
   1720  f8a9		       c5 b3		      CMP	Tmp3
   1721  f8ab		       f0 23		      BEQ	PrintLeonardoLeft
   1722  f8ad
   1723  f8ad				   PrintZeldaLeft
   1724  f8ad		       a2 28		      LDX	#<ZeldaTextLeft
   1725  f8af		       4c d5 f8 	      JMP	ProcessPrintEasterEgg
   1726  f8b2				   PrintPolvinhosLeft
   1727  f8b2		       a2 3c		      LDX	#<PolvinhosTextLeft
   1728  f8b4		       4c d5 f8 	      JMP	ProcessPrintEasterEgg
   1729  f8b7				   PrintIvonneLeft
   1730  f8b7		       a2 50		      LDX	#<IvonneTextLeft
   1731  f8b9		       4c d5 f8 	      JMP	ProcessPrintEasterEgg
   1732  f8bc				   PrintArtLeft
   1733  f8bc		       a2 64		      LDX	#<PaperArtTextLeft
   1734  f8be		       4c d5 f8 	      JMP	ProcessPrintEasterEgg
   1735  f8c1
   1736  f8c1				   PrintZeldaDateLeft
   1737  f8c1		       a2 32		      LDX	#<ZeldaDateLeft
   1738  f8c3		       4c d5 f8 	      JMP	ProcessPrintEasterEgg
   1739  f8c6				   PrintPolvinhosDateLeft
   1740  f8c6		       a2 46		      LDX	#<PolvinhosDateLeft
   1741  f8c8		       4c d5 f8 	      JMP	ProcessPrintEasterEgg
   1742  f8cb				   PrintIvonneDateLeft
   1743  f8cb		       a2 5a		      LDX	#<IvonneDateLeft
   1744  f8cd		       4c d5 f8 	      JMP	ProcessPrintEasterEgg
   1745  f8d0				   PrintLeonardoLeft
   1746  f8d0		       a2 6e		      LDX	#<LeonardoTextLeft
   1747  f8d2		       4c d5 f8 	      JMP	ProcessPrintEasterEgg
   1748  f8d5
   1749  f8d5				   ProcessPrintEasterEgg
   1750  f8d5		       a5 8c		      LDA	FrameCount0	;3
   1751  f8d7		       29 01		      AND	#%00000001	;2
   1752  f8d9		       d0 03		      BNE	TranformIntoRightText
   1753  f8db		       4c e3 f8 	      JMP	PrintEasterEggText
   1754  f8de				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1755  f8de		       8a		      TXA
   1756  f8df		       18		      CLC
   1757  f8e0		       69 05		      ADC	#HALF_TEXT_SIZE
   1758  f8e2		       aa		      TAX
   1759  f8e3
   1760  f8e3				   PrintEasterEggText
   1761  f8e3		       20 57 f8 	      JSR	PrintStaticText
   1762  f8e6		       60		      RTS
   1763  f8e7
   1764  f8e7				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1765  f8e7		       a2 00		      LDX	#0
   1766  f8e9		       a0 04		      LDY	#FONT_OFFSET
   1767  f8eb
   1768  f8eb				   ScoreLoop		; 20 
   1769  f8eb		       85 02		      STA	WSYNC	;2
   1770  f8ed
   1771  f8ed		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1772  f8ef		       85 0d		      STA	PF0	;3
   1773  f8f1
   1774  f8f1		       a5 82		      LDA	PF1Cache	;3
   1775  f8f3		       85 0e		      STA	PF1	;3
   1776  f8f5
   1777  f8f5		       a5 83		      LDA	PF2Cache	;3
   1778  f8f7		       85 0f		      STA	PF2	;3
   1779  f8f9
   1780  f8f9				   DrawScoreD0		; 15
   1781  f8f9		       a6 d0		      LDX	ScoreD0	; 3
   1782  f8fb		       bd 00 fd 	      LDA	Font,X	;4
   1783  f8fe		       85 81		      STA	PF0Cache	;3
   1784  f900		       c6 d0		      DEC	ScoreD0	;5
   1785  f902
   1786  f902				   DrawScoreD1		; 23	
   1787  f902		       a6 d1		      LDX	ScoreD1	; 3
   1788  f904		       bd 00 fd 	      LDA	Font,X	;4
   1789  f907		       0a		      ASL		;2
   1790  f908		       0a		      ASL		;2
   1791  f909		       0a		      ASL		;2
   1792  f90a		       0a		      ASL		;2
   1793  f90b		       85 82		      STA	PF1Cache	;3
   1794  f90d		       c6 d1		      DEC	ScoreD1	;5
   1795  f90f
   1796  f90f				   DrawScoreD2		; 20
   1797  f90f		       a6 d2		      LDX	ScoreD2	; 3
   1798  f911		       bd 00 fd 	      LDA	Font,X	;4
   1799  f914		       29 0f		      AND	#%00001111	;2
   1800  f916		       05 82		      ORA	PF1Cache	;3
   1801  f918		       85 82		      STA	PF1Cache	;3
   1802  f91a		       c6 d2		      DEC	ScoreD2	;5
   1803  f91c
   1804  f91c				   DrawScoreD3		; 23
   1805  f91c		       a6 d3		      LDX	ScoreD3	; 3
   1806  f91e		       bd 00 fd 	      LDA	Font,X	;4
   1807  f921		       4a		      LSR		;2
   1808  f922		       4a		      LSR		;2
   1809  f923		       4a		      LSR		;2
   1810  f924		       4a		      LSR		;2
   1811  f925		       85 83		      STA	PF2Cache	;3
   1812  f927		       c6 d3		      DEC	ScoreD3	;5
   1813  f929
   1814  f929				   DrawScoreD4		; 20
   1815  f929		       a6 d4		      LDX	ScoreD4	; 3
   1816  f92b		       bd 00 fd 	      LDA	Font,X	;4
   1817  f92e		       29 f0		      AND	#%11110000	;2
   1818  f930		       05 83		      ORA	PF2Cache	;3
   1819  f932		       85 83		      STA	PF2Cache	;3
   1820  f934		       c6 d4		      DEC	ScoreD4	;5
   1821  f936
   1822  f936
   1823  f936		       88		      DEY		;2
   1824  f937		       10 b2		      BPL	ScoreLoop	;4
   1825  f939
   1826  f939		       85 02		      STA	WSYNC
   1827  f93b		       20 eb f7 	      JSR	LoadAll
   1828  f93e		       60		      RTS		; 6
   1829  f93f
   1830  f93f				   PrintRightDecimalDigits
   1831  f93f		       b9 00 00 	      LDA	0,Y
   1832  f942		       4a		      LSR
   1833  f943		       4a		      LSR
   1834  f944		       4a		      LSR
   1835  f945		       4a		      LSR
   1836  f946		       aa		      TAX
   1837  f947		       bd be fd 	      LDA	FontLookup,X	;4
   1838  f94a		       85 d2		      STA	ScoreD2	;3
   1839  f94c
   1840  f94c		       b9 00 00 	      LDA	0,Y
   1841  f94f		       29 0f		      AND	#%00001111
   1842  f951		       aa		      TAX
   1843  f952		       bd be fd 	      LDA	FontLookup,X	;4
   1844  f955		       85 d3		      STA	ScoreD3	;3
   1845  f957
   1846  f957		       c8		      INY
   1847  f958		       b9 00 00 	      LDA	0,Y
   1848  f95b		       4a		      LSR
   1849  f95c		       4a		      LSR
   1850  f95d		       4a		      LSR
   1851  f95e		       4a		      LSR
   1852  f95f		       aa		      TAX
   1853  f960		       bd be fd 	      LDA	FontLookup,X	;4
   1854  f963		       85 d0		      STA	ScoreD0	;3
   1855  f965
   1856  f965		       b9 00 00 	      LDA	0,Y
   1857  f968		       29 0f		      AND	#%00001111
   1858  f96a		       aa		      TAX
   1859  f96b		       bd be fd 	      LDA	FontLookup,X	;4
   1860  f96e		       85 d1		      STA	ScoreD1	;3
   1861  f970
   1862  f970		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1863  f972		       85 d4		      STA	ScoreD4
   1864  f974		       60		      RTS
   1865  f975
   1866  f975				   PrintLastLeftDecimalDigits
   1867  f975		       b9 00 00 	      LDA	0,Y
   1868  f978		       4a		      LSR
   1869  f979		       4a		      LSR
   1870  f97a		       4a		      LSR
   1871  f97b		       4a		      LSR
   1872  f97c		       aa		      TAX
   1873  f97d		       bd be fd 	      LDA	FontLookup,X	;4
   1874  f980		       85 d3		      STA	ScoreD3	;3
   1875  f982		       b9 00 00 	      LDA	0,Y
   1876  f985		       29 0f		      AND	#%00001111
   1877  f987		       aa		      TAX
   1878  f988		       bd be fd 	      LDA	FontLookup,X	;4
   1879  f98b		       85 d4		      STA	ScoreD4	;3
   1880  f98d		       60		      RTS
   1881  f98e
   1882  f98e				   PrintZerosLeft
   1883  f98e		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1884  f990		       85 d2		      STA	ScoreD2
   1885  f992		       85 d3		      STA	ScoreD3
   1886  f994		       85 d4		      STA	ScoreD4
   1887  f996		       60		      RTS
   1888  f997
   1889  f997				   DrawGameOverScoreLine
   1890  f997		       85 02		      STA	WSYNC
   1891  f999		       20 e7 f8 	      JSR	PrintScore
   1892  f99c		       85 02		      STA	WSYNC
   1893  f99e		       85 02		      STA	WSYNC
   1894  f9a0		       20 dc f7 	      JSR	ClearPF
   1895  f9a3		       60		      RTS
   1896  f9a4
   1897  f9a4				   DrawGameOverScreenLeft
   1898  f9a4		       85 02		      STA	WSYNC
   1899  f9a6		       20 dc f7 	      JSR	ClearPF
   1900  f9a9
   1901  f9a9				   DrawGlideTimerLeft
   1902  f9a9		       20 6b fa 	      JSR	Sleep8Lines
   1903  f9ac		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1904  f9ae		       85 06		      STA	COLUP0
   1905  f9b0		       85 02		      STA	WSYNC
   1906  f9b2		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1907  f9b4		       85 d0		      STA	ScoreD0
   1908  f9b6		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1909  f9b8		       85 d1		      STA	ScoreD1
   1910  f9ba		       20 8e f9 	      JSR	PrintZerosLeft
   1911  f9bd		       20 97 f9 	      JSR	DrawGameOverScoreLine
   1912  f9c0
   1913  f9c0				   DrawHitCountLeft
   1914  f9c0		       20 6b fa 	      JSR	Sleep8Lines
   1915  f9c3		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1916  f9c5		       85 06		      STA	COLUP0
   1917  f9c7		       85 02		      STA	WSYNC
   1918  f9c9		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1919  f9cb		       85 d0		      STA	ScoreD0
   1920  f9cd		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1921  f9cf		       85 d1		      STA	ScoreD1
   1922  f9d1		       20 8e f9 	      JSR	PrintZerosLeft
   1923  f9d4		       20 97 f9 	      JSR	DrawGameOverScoreLine
   1924  f9d7
   1925  f9d7				   DrawCheckpointCountLeft
   1926  f9d7		       20 6b fa 	      JSR	Sleep8Lines
   1927  f9da		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1928  f9dc		       85 06		      STA	COLUP0
   1929  f9de		       85 02		      STA	WSYNC
   1930  f9e0		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1931  f9e2		       85 d0		      STA	ScoreD0
   1932  f9e4		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1933  f9e6		       85 d1		      STA	ScoreD1
   1934  f9e8		       20 8e f9 	      JSR	PrintZerosLeft
   1935  f9eb		       20 97 f9 	      JSR	DrawGameOverScoreLine
   1936  f9ee
   1937  f9ee				   DrawGameVersionLeft
   1938  f9ee		       20 6b fa 	      JSR	Sleep8Lines
   1939  f9f1		       a9 49		      LDA	#VERSION_COLOR
   1940  f9f3		       85 06		      STA	COLUP0
   1941  f9f5
   1942  f9f5		       a5 c5		      LDA	GameMode
   1943  f9f7		       aa		      TAX
   1944  f9f8		       bd be fd 	      LDA	FontLookup,X	;4
   1945  f9fb		       85 d0		      STA	ScoreD0	;3
   1946  f9fd
   1947  f9fd		       a5 f0		      LDA	CurrentCarId
   1948  f9ff		       aa		      TAX
   1949  fa00		       bd be fd 	      LDA	FontLookup,X	;4
   1950  fa03		       85 d1		      STA	ScoreD1	;3
   1951  fa05
   1952  fa05		       a5 dd		      LDA	StartSWCHB
   1953  fa07		       29 40		      AND	#%01000000	; P0 difficulty
   1954  fa09		       49 40		      EOR	#%01000000	; Reverse bytes
   1955  fa0b		       2a		      ROL
   1956  fa0c		       2a		      ROL
   1957  fa0d		       2a		      ROL
   1958  fa0e		       18		      CLC
   1959  fa0f		       69 0a		      ADC	#10
   1960  fa11		       aa		      TAX
   1961  fa12		       bd be fd 	      LDA	FontLookup,X	;4
   1962  fa15		       85 d2		      STA	ScoreD2	;3
   1963  fa17
   1964  fa17		       a5 dd		      LDA	StartSWCHB
   1965  fa19		       29 80		      AND	#%10000000	; P0 difficulty
   1966  fa1b		       49 80		      EOR	#%10000000	; Reverse bytes
   1967  fa1d		       2a		      ROL
   1968  fa1e		       2a		      ROL
   1969  fa1f		       18		      CLC
   1970  fa20		       69 0a		      ADC	#10
   1971  fa22		       aa		      TAX
   1972  fa23		       bd be fd 	      LDA	FontLookup,X	;4
   1973  fa26		       85 d3		      STA	ScoreD3	;3
   1974  fa28
   1975  fa28		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1976  fa2a		       85 d4		      STA	ScoreD4
   1977  fa2c
   1978  fa2c		       20 97 f9 	      JSR	DrawGameOverScoreLine
   1979  fa2f
   1980  fa2f		       4c 48 fa 	      JMP	FinalizeDrawGameOver
   1981  fa32
   1982  fa32				   DrawGameOverScreenRight
   1983  fa32		       85 02		      STA	WSYNC
   1984  fa34		       20 dc f7 	      JSR	ClearPF
   1985  fa37
   1986  fa37				   DrawVersionRight
   1987  fa37		       20 6b fa 	      JSR	Sleep8Lines
   1988  fa3a		       a9 49		      LDA	#VERSION_COLOR
   1989  fa3c		       85 07		      STA	COLUP1
   1990  fa3e		       85 02		      STA	WSYNC
   1991  fa40		       a2 78		      LDX	#<VersionText
   1992  fa42		       20 57 f8 	      JSR	PrintStaticText
   1993  fa45		       20 97 f9 	      JSR	DrawGameOverScoreLine
   1994  fa48
   1995  fa48				   FinalizeDrawGameOver
   1996  fa48		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1997  fa4a		       85 d5		      STA	ScoreFontColor
   1998  fa4c		       20 62 fa 	      JSR	Sleep4Lines
   1999  fa4f		       20 72 fa 	      JSR	Sleep32Lines
   2000  fa52		       20 72 fa 	      JSR	Sleep32Lines
   2001  fa55		       4c aa f6 	      JMP	PrepareOverscan
   2002  fa58
   2003  fa58				   WaitForVblankEnd
   2004  fa58		       ad 84 02 	      LDA	INTIM
   2005  fa5b		       d0 fb		      BNE	WaitForVblankEnd
   2006  fa5d		       85 02		      STA	WSYNC
   2007  fa5f		       85 01		      STA	VBLANK
   2008  fa61		       60		      RTS
   2009  fa62
   2010  fa62				   Sleep4Lines
   2011  fa62		       85 02		      STA	WSYNC
   2012  fa64		       85 02		      STA	WSYNC
   2013  fa66		       85 02		      STA	WSYNC
   2014  fa68		       85 02		      STA	WSYNC
   2015  fa6a		       60		      RTS
   2016  fa6b
   2017  fa6b				   Sleep8Lines
   2018  fa6b		       20 62 fa 	      JSR	Sleep4Lines
   2019  fa6e		       20 62 fa 	      JSR	Sleep4Lines
   2020  fa71		       60		      RTS
   2021  fa72
   2022  fa72				   Sleep32Lines
   2023  fa72		       20 6b fa 	      JSR	Sleep8Lines
   2024  fa75		       20 6b fa 	      JSR	Sleep8Lines
   2025  fa78		       20 6b fa 	      JSR	Sleep8Lines
   2026  fa7b		       20 6b fa 	      JSR	Sleep8Lines
   2027  fa7e		       60		      RTS
   2028  fa7f
   2029  fa7f				   ConfigureCarSprites
   2030  fa7f		       a5 8c		      LDA	FrameCount0
   2031  fa81		       29 01		      AND	#%00000001
   2032  fa83		       d0 0b		      BNE	LoadForRightScreenSprites
   2033  fa85				   LoadForLeftScreenSprites
   2034  fa85		       a5 f0		      LDA	CurrentCarId
   2035  fa87		       85 b0		      STA	Tmp0
   2036  fa89		       a5 f5		      LDA	CurrentOpponentCarId
   2037  fa8b		       85 b1		      STA	Tmp1
   2038  fa8d		       4c 98 fa 	      JMP	LoadCarSpritesFromIds
   2039  fa90				   LoadForRightScreenSprites
   2040  fa90		       a5 f0		      LDA	CurrentCarId
   2041  fa92		       85 b1		      STA	Tmp1
   2042  fa94		       a5 f5		      LDA	CurrentOpponentCarId
   2043  fa96		       85 b0		      STA	Tmp0
   2044  fa98
   2045  fa98				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   2046  fa98		       a4 b0		      LDY	Tmp0
   2047  fa9a		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   2048  fa9d		       85 de		      STA	CarSpritePointerL
   2049  fa9f		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   2050  faa2		       85 df		      STA	CarSpritePointerH
   2051  faa4				   ConfigureOpponentCarSprite
   2052  faa4		       a4 b1		      LDY	Tmp1
   2053  faa6		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   2054  faa9		       85 d9		      STA	EnemyCarSpritePointerL
   2055  faab		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   2056  faae		       85 da		      STA	EnemyCarSpritePointerH
   2057  fab0		       60		      RTS
   2058  fab1
   2059  fab1							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2060  fc00					      org	$FC00
   2061  fc00				   QrCode1
   2062  fc00		       1f		      .byte.b	#%00011111
   2063  fc01		       10		      .byte.b	#%00010000
   2064  fc02		       17		      .byte.b	#%00010111
   2065  fc03		       17		      .byte.b	#%00010111
   2066  fc04		       17		      .byte.b	#%00010111
   2067  fc05		       10		      .byte.b	#%00010000
   2068  fc06		       1f		      .byte.b	#%00011111
   2069  fc07		       00		      .byte.b	#%00000000
   2070  fc08		       17		      .byte.b	#%00010111
   2071  fc09		       10		      .byte.b	#%00010000
   2072  fc0a		       1d		      .byte.b	#%00011101
   2073  fc0b		       16		      .byte.b	#%00010110
   2074  fc0c		       03		      .byte.b	#%00000011
   2075  fc0d		       19		      .byte.b	#%00011001
   2076  fc0e		       13		      .byte.b	#%00010011
   2077  fc0f		       1c		      .byte.b	#%00011100
   2078  fc10		       0b		      .byte.b	#%00001011
   2079  fc11		       00		      .byte.b	#%00000000
   2080  fc12		       1f		      .byte.b	#%00011111
   2081  fc13		       10		      .byte.b	#%00010000
   2082  fc14		       17		      .byte.b	#%00010111
   2083  fc15		       17		      .byte.b	#%00010111
   2084  fc16		       17		      .byte.b	#%00010111
   2085  fc17		       10		      .byte.b	#%00010000
   2086  fc18		       1f		      .byte.b	#%00011111
   2087  fc19
   2088  fc19				   QrCode2
   2089  fc19		       c3		      .byte.b	#%11000011
   2090  fc1a		       9a		      .byte.b	#%10011010
   2091  fc1b		       82		      .byte.b	#%10000010
   2092  fc1c		       da		      .byte.b	#%11011010
   2093  fc1d		       aa		      .byte.b	#%10101010
   2094  fc1e		       ca		      .byte.b	#%11001010
   2095  fc1f		       f3		      .byte.b	#%11110011
   2096  fc20		       78		      .byte.b	#%01111000
   2097  fc21		       df		      .byte.b	#%11011111
   2098  fc22		       fc		      .byte.b	#%11111100
   2099  fc23		       c7		      .byte.b	#%11000111
   2100  fc24		       98		      .byte.b	#%10011000
   2101  fc25		       23		      .byte.b	#%00100011
   2102  fc26		       b9		      .byte.b	#%10111001
   2103  fc27		       d2		      .byte.b	#%11010010
   2104  fc28		       30		      .byte.b	#%00110000
   2105  fc29		       eb		      .byte.b	#%11101011
   2106  fc2a		       28		      .byte.b	#%00101000
   2107  fc2b		       ab		      .byte.b	#%10101011
   2108  fc2c		       72		      .byte.b	#%01110010
   2109  fc2d		       fa		      .byte.b	#%11111010
   2110  fc2e		       7a		      .byte.b	#%01111010
   2111  fc2f		       32		      .byte.b	#%00110010
   2112  fc30		       3a		      .byte.b	#%00111010
   2113  fc31		       63		      .byte.b	#%01100011
   2114  fc32
   2115  fc32				   QrCode3
   2116  fc32		       98		      .byte.b	#%10011000
   2117  fc33		       c3		      .byte.b	#%11000011
   2118  fc34		       39		      .byte.b	#%00111001
   2119  fc35		       34		      .byte.b	#%00110100
   2120  fc36		       ff		      .byte.b	#%11111111
   2121  fc37		       71		      .byte.b	#%01110001
   2122  fc38		       d5		      .byte.b	#%11010101
   2123  fc39		       d1		      .byte.b	#%11010001
   2124  fc3a		       5f		      .byte.b	#%01011111
   2125  fc3b		       26		      .byte.b	#%00100110
   2126  fc3c		       2d		      .byte.b	#%00101101
   2127  fc3d		       e9		      .byte.b	#%11101001
   2128  fc3e		       d6		      .byte.b	#%11010110
   2129  fc3f		       26		      .byte.b	#%00100110
   2130  fc40		       ba		      .byte.b	#%10111010
   2131  fc41		       03		      .byte.b	#%00000011
   2132  fc42		       dd		      .byte.b	#%11011101
   2133  fc43		       e0		      .byte.b	#%11100000
   2134  fc44		       57		      .byte.b	#%01010111
   2135  fc45		       14		      .byte.b	#%00010100
   2136  fc46		       35		      .byte.b	#%00110101
   2137  fc47		       e5		      .byte.b	#%11100101
   2138  fc48		       b5		      .byte.b	#%10110101
   2139  fc49		       d4		      .byte.b	#%11010100
   2140  fc4a		       97		      .byte.b	#%10010111
   2141  fc4b
   2142  fc4b				   QrCode4
   2143  fc4b		       09		      .byte.b	#%00001001
   2144  fc4c		       0e		      .byte.b	#%00001110
   2145  fc4d		       0f		      .byte.b	#%00001111
   2146  fc4e		       0c		      .byte.b	#%00001100
   2147  fc4f		       0c		      .byte.b	#%00001100
   2148  fc50		       08		      .byte.b	#%00001000
   2149  fc51		       08		      .byte.b	#%00001000
   2150  fc52		       06		      .byte.b	#%00000110
   2151  fc53		       06		      .byte.b	#%00000110
   2152  fc54		       0b		      .byte.b	#%00001011
   2153  fc55		       0f		      .byte.b	#%00001111
   2154  fc56		       04		      .byte.b	#%00000100
   2155  fc57		       08		      .byte.b	#%00001000
   2156  fc58		       0f		      .byte.b	#%00001111
   2157  fc59		       09		      .byte.b	#%00001001
   2158  fc5a		       07		      .byte.b	#%00000111
   2159  fc5b		       05		      .byte.b	#%00000101
   2160  fc5c		       00		      .byte.b	#%00000000
   2161  fc5d		       0f		      .byte.b	#%00001111
   2162  fc5e		       08		      .byte.b	#%00001000
   2163  fc5f		       0b		      .byte.b	#%00001011
   2164  fc60		       0b		      .byte.b	#%00001011
   2165  fc61		       0b		      .byte.b	#%00001011
   2166  fc62		       08		      .byte.b	#%00001000
   2167  fc63		       0f		      .byte.b	#%00001111
   2168  fc64
   2169  fc64							; Moved here because of rom space.
   2170  fc64							; The only SBR in constants space
   2171  fc64				   DrawQrCode
   2172  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2173  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2174  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2175  fc6a		       85 0a		      STA	CTRLPF
   2176  fc6c		       20 ca f7 	      JSR	ClearAll	; To be 100 sure!
   2177  fc6f		       ad 82 02 	      LDA	SWCHB
   2178  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2179  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2180  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2181  fc78		       86 09		      STX	COLUBK
   2182  fc7a		       84 08		      STY	COLUPF
   2183  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2184  fc7f				   StoreReversedQrCode
   2185  fc7f		       86 08		      STX	COLUPF
   2186  fc81		       84 09		      STY	COLUBK
   2187  fc83
   2188  fc83				   ContinueQrCode
   2189  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2190  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2191  fc87		       20 58 fa 	      JSR	WaitForVblankEnd
   2192  fc8a		       20 6b fa 	      JSR	Sleep8Lines
   2193  fc8d		       20 6b fa 	      JSR	Sleep8Lines
   2194  fc90		       20 6b fa 	      JSR	Sleep8Lines
   2195  fc93
   2196  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2197  fc93		       85 02		      STA	WSYNC
   2198  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2199  fc98		       85 0e		      STA	PF1	;3
   2200  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2201  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2203  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2204  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2205  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2206  fcb5		       85 0e		      STA	PF1	;3
   2207  fcb7
   2208  fcb7		       ca		      DEX		;2
   2209  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2210  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2211  fcbc		       88		      DEY		;2
   2212  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2213  fcbf
   2214  fcbf				   EndQrCodeLoop
   2215  fcbf		       85 02		      STA	WSYNC	;
   2216  fcc1		       a9 00		      LDA	#0
   2217  fcc3		       85 0e		      STA	PF1	;3
   2218  fcc5		       85 0f		      STA	PF2	;3
   2219  fcc7
   2220  fcc7		       20 72 fa 	      JSR	Sleep32Lines
   2221  fcca		       4c aa f6 	      JMP	PrepareOverscan
   2222  fccd
   2223  fd00					      org	$FD00
   2224  fd00				   Font
   2225  fd00				   C0
   2226  fd00		       e7		      .byte.b	#%11100111	;
   2227  fd01		       a5		      .byte.b	#%10100101	; 
   2228  fd02		       a5		      .byte.b	#%10100101	; 
   2229  fd03		       a5		      .byte.b	#%10100101	; 
   2230  fd04		       e7		      .byte.b	#%11100111	;	
   2231  fd05				   C1
   2232  fd05		       e7		      .byte.b	#%11100111	;
   2233  fd06		       42		      .byte.b	#%01000010	; 
   2234  fd07		       42		      .byte.b	#%01000010	; 
   2235  fd08		       42		      .byte.b	#%01000010	; 
   2236  fd09		       66		      .byte.b	#%01100110	;
   2237  fd0a				   C2
   2238  fd0a		       e7		      .byte.b	#%11100111	;
   2239  fd0b		       24		      .byte.b	#%00100100	; 
   2240  fd0c		       e7		      .byte.b	#%11100111	; 
   2241  fd0d		       81		      .byte.b	#%10000001	; 
   2242  fd0e		       e7		      .byte.b	#%11100111	;
   2243  fd0f				   C3
   2244  fd0f		       e7		      .byte.b	#%11100111	;
   2245  fd10		       81		      .byte.b	#%10000001	; 
   2246  fd11		       e7		      .byte.b	#%11100111	; 
   2247  fd12		       81		      .byte.b	#%10000001	; 
   2248  fd13		       e7		      .byte.b	#%11100111	;
   2249  fd14				   C4
   2250  fd14		       81		      .byte.b	#%10000001	;
   2251  fd15		       81		      .byte.b	#%10000001	; 
   2252  fd16		       e7		      .byte.b	#%11100111	; 
   2253  fd17		       a5		      .byte.b	#%10100101	; 
   2254  fd18		       a5		      .byte.b	#%10100101	;
   2255  fd19				   C5
   2256  fd19		       e7		      .byte.b	#%11100111	;
   2257  fd1a		       81		      .byte.b	#%10000001	; 
   2258  fd1b		       e7		      .byte.b	#%11100111	; 
   2259  fd1c		       24		      .byte.b	#%00100100	; 
   2260  fd1d		       e7		      .byte.b	#%11100111	;
   2261  fd1e				   C6
   2262  fd1e		       e7		      .byte.b	#%11100111	;
   2263  fd1f		       a5		      .byte.b	#%10100101	; 
   2264  fd20		       e7		      .byte.b	#%11100111	; 
   2265  fd21		       24		      .byte.b	#%00100100	; 
   2266  fd22		       e7		      .byte.b	#%11100111	;
   2267  fd23				   C7
   2268  fd23		       81		      .byte.b	#%10000001	;
   2269  fd24		       81		      .byte.b	#%10000001	; 
   2270  fd25		       81		      .byte.b	#%10000001	; 
   2271  fd26		       81		      .byte.b	#%10000001	; 
   2272  fd27		       e7		      .byte.b	#%11100111	;
   2273  fd28				   C8
   2274  fd28		       e7		      .byte.b	#%11100111	;
   2275  fd29		       a5		      .byte.b	#%10100101	; 
   2276  fd2a		       e7		      .byte.b	#%11100111	; 
   2277  fd2b		       a5		      .byte.b	#%10100101	; 
   2278  fd2c		       e7		      .byte.b	#%11100111	;
   2279  fd2d				   C9
   2280  fd2d		       e7		      .byte.b	#%11100111	;
   2281  fd2e		       81		      .byte.b	#%10000001	; 
   2282  fd2f		       e7		      .byte.b	#%11100111	; 
   2283  fd30		       a5		      .byte.b	#%10100101	; 
   2284  fd31		       e7		      .byte.b	#%11100111	;
   2285  fd32				   CA
   2286  fd32		       a5		      .byte.b	#%10100101	;
   2287  fd33		       a5		      .byte.b	#%10100101	; 
   2288  fd34		       e7		      .byte.b	#%11100111	; 
   2289  fd35		       a5		      .byte.b	#%10100101	; 
   2290  fd36		       e7		      .byte.b	#%11100111	;
   2291  fd37				   CB
   2292  fd37		       66		      .byte.b	#%01100110	;
   2293  fd38		       a5		      .byte.b	#%10100101	; 
   2294  fd39		       66		      .byte.b	#%01100110	; 
   2295  fd3a		       a5		      .byte.b	#%10100101	;
   2296  fd3b		       66		      .byte.b	#%01100110	;
   2297  fd3c				   CC
   2298  fd3c		       e7		      .byte.b	#%11100111	;
   2299  fd3d		       24		      .byte.b	#%00100100	; 
   2300  fd3e		       24		      .byte.b	#%00100100	; 
   2301  fd3f		       24		      .byte.b	#%00100100	;
   2302  fd40		       e7		      .byte.b	#%11100111	;
   2303  fd41
   2304  fd41				   CD
   2305  fd41		       66		      .byte.b	#%01100110	;
   2306  fd42		       a5		      .byte.b	#%10100101	; 
   2307  fd43		       a5		      .byte.b	#%10100101	; 
   2308  fd44		       a5		      .byte.b	#%10100101	;
   2309  fd45		       66		      .byte.b	#%01100110	;
   2310  fd46
   2311  fd46				   CE
   2312  fd46		       e7		      .byte.b	#%11100111	;
   2313  fd47		       24		      .byte.b	#%00100100	; 
   2314  fd48		       e7		      .byte.b	#%11100111	; 
   2315  fd49		       24		      .byte.b	#%00100100	; 
   2316  fd4a		       e7		      .byte.b	#%11100111	;
   2317  fd4b
   2318  fd4b				   CF
   2319  fd4b		       24		      .byte.b	#%00100100	;
   2320  fd4c		       24		      .byte.b	#%00100100	; 
   2321  fd4d		       e7		      .byte.b	#%11100111	; 
   2322  fd4e		       24		      .byte.b	#%00100100	; 
   2323  fd4f		       e7		      .byte.b	#%11100111	;
   2324  fd50
   2325  fd50				   CG
   2326  fd50		       c3		      .byte.b	#%11000011	;
   2327  fd51		       a5		      .byte.b	#%10100101	; 
   2328  fd52		       a5		      .byte.b	#%10100101	; 
   2329  fd53		       24		      .byte.b	#%00100100	; 
   2330  fd54		       c3		      .byte.b	#%11000011	;	
   2331  fd55
   2332  fd55				   CH
   2333  fd55		       a5		      .byte.b	#%10100101	;
   2334  fd56		       a5		      .byte.b	#%10100101	; 
   2335  fd57		       e7		      .byte.b	#%11100111	; 
   2336  fd58		       a5		      .byte.b	#%10100101	; 
   2337  fd59		       a5		      .byte.b	#%10100101	;
   2338  fd5a
   2339  fd5a				   CK
   2340  fd5a		       a5		      .byte.b	#%10100101	;
   2341  fd5b		       a5		      .byte.b	#%10100101	; 
   2342  fd5c		       66		      .byte.b	#%01100110	; 
   2343  fd5d		       a5		      .byte.b	#%10100101	; 
   2344  fd5e		       a5		      .byte.b	#%10100101	;
   2345  fd5f
   2346  fd5f				   CL
   2347  fd5f		       e7		      .byte.b	#%11100111	;
   2348  fd60		       24		      .byte.b	#%00100100	; 
   2349  fd61		       24		      .byte.b	#%00100100	; 
   2350  fd62		       24		      .byte.b	#%00100100	; 
   2351  fd63		       24		      .byte.b	#%00100100	;
   2352  fd64
   2353  fd64				   CI
   2354  fd64		       42		      .byte.b	#%01000010	;
   2355  fd65		       42		      .byte.b	#%01000010	; 
   2356  fd66		       42		      .byte.b	#%01000010	; 
   2357  fd67		       42		      .byte.b	#%01000010	; 
   2358  fd68		       42		      .byte.b	#%01000010	;
   2359  fd69
   2360  fd69				   CM
   2361  fd69		       a5		      .byte.b	#%10100101	;
   2362  fd6a		       a5		      .byte.b	#%10100101	; 
   2363  fd6b		       a5		      .byte.b	#%10100101	; 
   2364  fd6c		       e7		      .byte.b	#%11100111	; 
   2365  fd6d		       a5		      .byte.b	#%10100101	;
   2366  fd6e
   2367  fd6e				   CN
   2368  fd6e		       a5		      .byte.b	#%10100101	;
   2369  fd6f		       a5		      .byte.b	#%10100101	; 
   2370  fd70		       a5		      .byte.b	#%10100101	; 
   2371  fd71		       a5		      .byte.b	#%10100101	; 
   2372  fd72		       66		      .byte.b	#%01100110	;	
   2373  fd73
   2374  fd73
   2375  fd73				   CO
   2376  fd73		       42		      .byte.b	#%01000010	;
   2377  fd74		       a5		      .byte.b	#%10100101	; 
   2378  fd75		       a5		      .byte.b	#%10100101	; 
   2379  fd76		       a5		      .byte.b	#%10100101	; 
   2380  fd77		       42		      .byte.b	#%01000010	;	
   2381  fd78
   2382  fd78				   CP
   2383  fd78		       24		      .byte.b	#%00100100	;
   2384  fd79		       24		      .byte.b	#%00100100	; 
   2385  fd7a		       e7		      .byte.b	#%11100111	; 
   2386  fd7b		       a5		      .byte.b	#%10100101	; 
   2387  fd7c		       e7		      .byte.b	#%11100111	;
   2388  fd7d
   2389  fd7d				   CR
   2390  fd7d		       a5		      .byte.b	#%10100101	;
   2391  fd7e		       a5		      .byte.b	#%10100101	; 
   2392  fd7f		       66		      .byte.b	#%01100110	; 
   2393  fd80		       a5		      .byte.b	#%10100101	; 
   2394  fd81		       66		      .byte.b	#%01100110	;
   2395  fd82
   2396  fd82				   CS
   2397  fd82		       66		      .byte.b	#%01100110	;
   2398  fd83		       81		      .byte.b	#%10000001	; 
   2399  fd84		       42		      .byte.b	#%01000010	; 
   2400  fd85		       24		      .byte.b	#%00100100	; 
   2401  fd86		       c3		      .byte.b	#%11000011	;
   2402  fd87
   2403  fd87				   CT
   2404  fd87		       42		      .byte.b	#%01000010	;
   2405  fd88		       42		      .byte.b	#%01000010	; 
   2406  fd89		       42		      .byte.b	#%01000010	; 
   2407  fd8a		       42		      .byte.b	#%01000010	; 
   2408  fd8b		       e7		      .byte.b	#%11100111	;
   2409  fd8c
   2410  fd8c				   CV
   2411  fd8c		       42		      .byte.b	#%01000010	;
   2412  fd8d		       a5		      .byte.b	#%10100101	; 
   2413  fd8e		       a5		      .byte.b	#%10100101	; 
   2414  fd8f		       a5		      .byte.b	#%10100101	; 
   2415  fd90		       a5		      .byte.b	#%10100101	;	
   2416  fd91
   2417  fd91				   CY
   2418  fd91		       42		      .byte.b	#%01000010	;
   2419  fd92		       42		      .byte.b	#%01000010	; 
   2420  fd93		       42		      .byte.b	#%01000010	; 
   2421  fd94		       a5		      .byte.b	#%10100101	; 
   2422  fd95		       a5		      .byte.b	#%10100101	;
   2423  fd96
   2424  fd96				   CW
   2425  fd96		       a5		      .byte.b	#%10100101	;
   2426  fd97		       e7		      .byte.b	#%11100111	; 
   2427  fd98		       a5		      .byte.b	#%10100101	; 
   2428  fd99		       a5		      .byte.b	#%10100101	; 
   2429  fd9a		       a5		      .byte.b	#%10100101	;
   2430  fd9b
   2431  fd9b				   CZ
   2432  fd9b		       e7		      .byte.b	#%11100111	;
   2433  fd9c		       24		      .byte.b	#%00100100	; 
   2434  fd9d		       42		      .byte.b	#%01000010	; 
   2435  fd9e		       81		      .byte.b	#%10000001	; 
   2436  fd9f		       e7		      .byte.b	#%11100111	;
   2437  fda0
   2438  fda0				   Pipe
   2439  fda0		       42		      .byte.b	#%01000010	;
   2440  fda1		       00		      .byte.b	#%00000000	; 
   2441  fda2		       42		      .byte.b	#%01000010	; 
   2442  fda3		       00		      .byte.b	#%00000000	; 
   2443  fda4		       42		      .byte.b	#%01000010	;
   2444  fda5
   2445  fda5				   Exclamation
   2446  fda5		       42		      .byte.b	#%01000010	;
   2447  fda6		       00		      .byte.b	#%00000000	; 
   2448  fda7		       42		      .byte.b	#%01000010	; 
   2449  fda8		       42		      .byte.b	#%01000010	; 
   2450  fda9		       42		      .byte.b	#%01000010	;
   2451  fdaa
   2452  fdaa				   Dot
   2453  fdaa		       42		      .byte.b	#%01000010	;
   2454  fdab		       42		      .byte.b	#%01000010	; 
   2455  fdac		       00		      .byte.b	#%00000000	; 
   2456  fdad		       00		      .byte.b	#%00000000	; 
   2457  fdae		       00		      .byte.b	#%00000000	;
   2458  fdaf
   2459  fdaf				   Colon
   2460  fdaf		       42		      .byte.b	#%01000010	;
   2461  fdb0		       42		      .byte.b	#%01000010	; 
   2462  fdb1		       00		      .byte.b	#%00000000	; 
   2463  fdb2		       42		      .byte.b	#%01000010	; 
   2464  fdb3		       42		      .byte.b	#%01000010	;
   2465  fdb4
   2466  fdb4				   Triangle
   2467  fdb4		       81		      .byte.b	#%10000001	;
   2468  fdb5		       c3		      .byte.b	#%11000011	; 
   2469  fdb6		       e7		      .byte.b	#%11100111	; 
   2470  fdb7		       c3		      .byte.b	#%11000011	; 
   2471  fdb8		       81		      .byte.b	#%10000001	;
   2472  fdb9
   2473  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2474  fdb9		       00		      .byte.b	#0	;
   2475  fdba		       00		      .byte.b	#0	;
   2476  fdbb		       00		      .byte.b	#0	;
   2477  fdbc		       00		      .byte.b	#0	;
   2478  fdbd		       00		      .byte.b	#0	;
   2479  fdbe
   2480  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2481  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2482  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2483  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2484  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2485  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2486  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2487  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2488  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2489  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2490  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2491  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2492  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2493  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2494  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2495  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2496  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2497  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2498  fdcf
   2499  fdcf				   EngineSoundType
   2500  fdcf		       02		      .byte.b	#2
   2501  fdd0		       02		      .byte.b	#2
   2502  fdd1		       0e		      .byte.b	#14
   2503  fdd2		       06		      .byte.b	#6
   2504  fdd3		       06		      .byte.b	#6
   2505  fdd4		       0e		      .byte.b	#14
   2506  fdd5
   2507  fdd5				   EngineBaseFrequence
   2508  fdd5		       1f		      .byte.b	#31
   2509  fdd6		       15		      .byte.b	#21
   2510  fdd7		       14		      .byte.b	#20
   2511  fdd8		       1f		      .byte.b	#31
   2512  fdd9		       16		      .byte.b	#22
   2513  fdda		       03		      .byte.b	#3
   2514  fddb
   2515  fddb				   TachometerSizeLookup1
   2516  fddb		       1f		      .byte.b	#%00011111
   2517  fddc		       3f		      .byte.b	#%00111111
   2518  fddd		       7f		      .byte.b	#%01111111
   2519  fdde		       ff		      .byte.b	#%11111111
   2520  fddf		       ff		      .byte.b	#%11111111
   2521  fde0		       ff		      .byte.b	#%11111111
   2522  fde1		       ff		      .byte.b	#%11111111
   2523  fde2		       ff		      .byte.b	#%11111111
   2524  fde3
   2525  fde3				   TachometerSizeLookup2
   2526  fde3		       00		      .byte.b	#%00000000
   2527  fde4		       00		      .byte.b	#%00000000
   2528  fde5		       00		      .byte.b	#%00000000
   2529  fde6		       00		      .byte.b	#%00000000
   2530  fde7		       80		      .byte.b	#%10000000
   2531  fde8		       c0		      .byte.b	#%11000000
   2532  fde9		       e0		      .byte.b	#%11100000
   2533  fdea		       f0		      .byte.b	#%11110000
   2534  fdeb
   2535  fdeb				   TachometerGearLookup
   2536  fdeb		       01		      .byte.b	#%00000001
   2537  fdec		       02		      .byte.b	#%00000010
   2538  fded		       04		      .byte.b	#%00000100
   2539  fdee		       08		      .byte.b	#%00001000
   2540  fdef		       10		      .byte.b	#%00010000
   2541  fdf0		       30		      .byte.b	#%00110000
   2542  fdf1
   2543  fe00					      org	$FE00
   2544  fe00				   AesTable
   2545  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2546  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2547  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2548  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2549  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2550  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2551  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2552  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2553  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2554  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2555  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2556  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2557  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2558  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2559  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2560  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2561  ff00
   2562  ff00							; From FF00 to FFFB (122 bytes) to use here
   2563  ff00
   2564  ff00				   StaticText		; All static text must be on the same MSB block. 
   2565  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2566  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2567  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2568  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2569  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2570  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2571  ff05
   2572  ff05				   HellwayLeftText
   2573  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2574  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2575  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2576  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2577  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2578  ff0a
   2579  ff0a				   HellwayRightText
   2580  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2581  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2582  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2583  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2584  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2585  ff0f
   2586  ff0f				   OpbText
   2587  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2588  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2589  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2590  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2591  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2592  ff14
   2593  ff14				   YearText
   2594  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2595  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2596  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2597  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2598  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2599  ff19
   2600  ff19				   GameText
   2601  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2602  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2603  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2604  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2605  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2606  ff1e
   2607  ff1e				   OverText
   2608  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2609  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2610  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2611  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2612  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2613  ff23				   GoText
   2614  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2615  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2616  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2617  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2618  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2619  ff28
   2620  ff28				   ZeldaTextLeft
   2621  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2622  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2623  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2624  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2625  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2626  ff2d
   2627  ff2d				   ZeldaTextRight
   2628  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2629  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2630  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2631  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2632  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2633  ff32
   2634  ff32				   ZeldaDateLeft
   2635  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2636  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2637  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2638  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2639  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2640  ff37
   2641  ff37				   ZeldaDateRight
   2642  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2643  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2644  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2645  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2646  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2647  ff3c
   2648  ff3c				   PolvinhosTextLeft
   2649  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2650  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2651  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2652  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2653  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2654  ff41
   2655  ff41				   PolvinhosTextRight
   2656  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2657  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2658  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2659  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2660  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2661  ff46
   2662  ff46				   PolvinhosDateLeft
   2663  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2664  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2665  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2666  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2667  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2668  ff4b
   2669  ff4b				   PolvinhosDateRight
   2670  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2671  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2672  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2673  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2674  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2675  ff50
   2676  ff50				   IvonneTextLeft
   2677  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2678  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2679  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2680  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2681  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2682  ff55
   2683  ff55				   IvonneTextRight
   2684  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2685  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2686  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2687  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2688  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2689  ff5a
   2690  ff5a				   IvonneDateLeft
   2691  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2692  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2693  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2694  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2695  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2696  ff5f
   2697  ff5f				   IvonneDateRight
   2698  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2699  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2700  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2701  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2702  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2703  ff64
   2704  ff64				   PaperArtTextLeft
   2705  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2706  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2707  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2708  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2709  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2710  ff69
   2711  ff69				   PaperArtTextRight
   2712  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2713  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2714  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2715  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2716  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2717  ff6e
   2718  ff6e				   LeonardoTextLeft
   2719  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2720  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2721  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2722  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2723  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2724  ff73
   2725  ff73				   LeonardoTextRight
   2726  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2727  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2728  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2729  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2730  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2731  ff78
   2732  ff78				   VersionText
   2733  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2734  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2735  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2736  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2737  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2738  ff7d
   2739  ff7d
   2740  ff7d				   EndStaticText
   2741  ff7d
   2742  ff7d				   CarSprite0		; Upside down, Original Car
   2743  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2744  ff85				   CarSprite0NoPadding
   2745  ff85		       7e		      .byte.b	#%01111110
   2746  ff86		       24		      .byte.b	#%00100100
   2747  ff87		       bd		      .byte.b	#%10111101
   2748  ff88		       3c		      .byte.b	#%00111100
   2749  ff89		       bd		      .byte.b	#%10111101
   2750  ff8a		       3c		      .byte.b	#%00111100
   2751  ff8b
   2752  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2753  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2754  ff93				   CarSprite1NoPadding
   2755  ff93		       bd		      .byte.b	#%10111101
   2756  ff94		       7e		      .byte.b	#%01111110
   2757  ff95		       5a		      .byte.b	#%01011010
   2758  ff96		       66		      .byte.b	#%01100110
   2759  ff97		       bd		      .byte.b	#%10111101
   2760  ff98		       3c		      .byte.b	#%00111100
   2761  ff99
   2762  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2763  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2764  ffa1				   CarSprite2NoPadding
   2765  ffa1		       7e		      .byte.b	#%01111110
   2766  ffa2		       a5		      .byte.b	#%10100101
   2767  ffa3		       42		      .byte.b	#%01000010
   2768  ffa4		       42		      .byte.b	#%01000010
   2769  ffa5		       bd		      .byte.b	#%10111101
   2770  ffa6		       7e		      .byte.b	#%01111110
   2771  ffa7
   2772  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2773  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2774  ffaf				   CarSprite3NoPadding
   2775  ffaf		       3c		      .byte.b	#%00111100
   2776  ffb0		       db		      .byte.b	#%11011011
   2777  ffb1		       db		      .byte.b	#%11011011
   2778  ffb2		       3c		      .byte.b	#%00111100
   2779  ffb3		       5a		      .byte.b	#%01011010
   2780  ffb4		       3c		      .byte.b	#%00111100
   2781  ffb5
   2782  ffb5				   TrafficSpeeds
   2783  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2784  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2785  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2786  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2787  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2788  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2789  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2790  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2791  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2792  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2793  ffbf				   TrafficSpeedsHighDelta
   2794  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2795  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2796  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2797  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2798  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2799  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2800  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2801  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2802  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2803  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2804  ffc9
   2805  ffc9				   CarIdToSpriteAddressL
   2806  ffc9		       7d		      .byte.b	#<CarSprite0
   2807  ffca		       8b		      .byte.b	#<CarSprite1
   2808  ffcb		       99		      .byte.b	#<CarSprite2
   2809  ffcc		       a7		      .byte.b	#<CarSprite3
   2810  ffcd
   2811  ffcd				   CarIdToSpriteAddressH
   2812  ffcd		       ff		      .byte.b	#>CarSprite0
   2813  ffce		       ff		      .byte.b	#>CarSprite1
   2814  ffcf		       ff		      .byte.b	#>CarSprite2
   2815  ffd0		       ff		      .byte.b	#>CarSprite3
   2816  ffd1
   2817  ffd1				   EnemyCarIdToSpriteAddressL
   2818  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2819  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2820  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2821  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2822  ffd5
   2823  ffd5				   EnemyCarIdToSpriteAddressH
   2824  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2825  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2826  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2827  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2828  ffd9
   2829  ffd9				   CarIdToAccelerateSpeed
   2830  ffd9		       80		      .byte.b	#128
   2831  ffda		       c0		      .byte.b	#192
   2832  ffdb		       60		      .byte.b	#96
   2833  ffdc		       c0		      .byte.b	#192
   2834  ffdd
   2835  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2836  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2837  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2838  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2839  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2840  ffe1
   2841  ffe1				   CarIdToMaxSpeedL
   2842  ffe1		       80		      .byte.b	#$80
   2843  ffe2		       00		      .byte.b	#$00	; One less gear
   2844  ffe3		       80		      .byte.b	#$80
   2845  ffe4		       80		      .byte.b	#$80
   2846  ffe5
   2847  ffe5				   CarIdToMaxGear
   2848  ffe5		       05		      .byte.b	#5
   2849  ffe6		       04		      .byte.b	#4	; One less gear
   2850  ffe7		       05		      .byte.b	#5
   2851  ffe8		       05		      .byte.b	#5
   2852  ffe9
   2853  ffe9				   GearToBreakSpeedTable
   2854  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2855  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2856  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2857  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2858  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2859  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2860  ffef
   2861  ffef				   TrafficColorTable
   2862  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2863  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2864  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2865  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2866  fff3
   2867  fff3				   TrafficChanceTable
   2868  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2869  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2870  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2871  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2872  fff7
   2873  fff7				   TrafficTimeTable
   2874  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2875  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2876  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2877  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2878  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2879  fffc
   2880  fffc
   2881  fffc					      org	$FFFC
   2882  fffc		       00 f0		      .word.w	BeforeStart
   2883  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
