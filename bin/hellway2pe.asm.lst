------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     58  f000
     59  f000		       00 f9	   PLAYER0_COLOR =	$F9
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 20	   PLAYER_0_X_START =	32	;
     69  f000		       00 29	   PLAYER_1_X_START =	41	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 08	   ENGINE_VOLUME =	8
    103  f000
    104  f000		       00 08	   CAR_SIZE   =	8
    105  f000
    106  f000		       00 80	   GRP0Cache  =	$80
    107  f000		       00 81	   PF0Cache   =	$81
    108  f000		       00 82	   PF1Cache   =	$82
    109  f000		       00 83	   PF2Cache   =	$83
    110  f000		       00 84	   GRP1Cache  =	$84
    111  f000		       00 85	   ENABLCache =	$85
    112  f000		       00 86	   ENAM0Cache =	$86
    113  f000		       00 87	   ENAM1Cache =	$87
    114  f000
    115  f000		       00 8c	   FrameCount0 =	$8C	;
    116  f000		       00 8d	   FrameCount1 =	$8D	;
    117  f000
    118  f000		       00 8e	   CollisionCounter =	$8E
    119  f000		       00 8f	   OpCollisionCounter =	$8F
    120  f000
    121  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    122  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    123  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    124  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    125  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    126  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    127  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    128  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    129  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    130  f000
    131  f000							;Temporary variables, multiple uses
    132  f000		       00 b0	   Tmp0       =	$B0
    133  f000		       00 b1	   Tmp1       =	$B1
    134  f000		       00 b2	   Tmp2       =	$B2
    135  f000		       00 b3	   Tmp3       =	$B3
    136  f000		       00 b4	   Tmp4       =	$B4
    137  f000		       00 b5	   Tmp5       =	$B5
    138  f000
    139  f000		       00 b6	   Player0X   =	$B6
    140  f000		       00 b7	   Player1X   =	$B7
    141  f000		       00 b8	   CountdownTimer =	$B8
    142  f000		       00 b9	   OpCountdownTimer =	$B9
    143  f000		       00 ba	   Traffic0Msb =	$BA
    144  f000		       00 bb	   OpTraffic0Msb =	$BB
    145  f000		       00 bc	   SwitchDebounceCounter =	$BC
    146  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    147  f000		       00 be	   TrafficChance =	$BE
    148  f000		       00 bf	   OpTrafficChance =	$BF
    149  f000
    150  f000		       00 c0	   CheckpointTime =	$C0
    151  f000		       00 c1	   OpCheckpointTime =	$C1
    152  f000		       00 c2	   TrafficColor =	$C2
    153  f000		       00 c3	   OpTrafficColor =	$C3
    154  f000		       00 c4	   CurrentDifficulty =	$C4
    155  f000		       00 c5	   OpCurrentDifficulty =	$C5
    156  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    157  f000
    158  f000		       00 c7	   CurrentCarId =	$C7
    159  f000		       00 c8	   OpCurrentCarId =	$C8
    160  f000
    161  f000		       00 c9	   ScoreFontColor =	$C9
    162  f000		       00 ca	   OpScoreFontColor =	$CA
    163  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    164  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    165  f000		       00 cd	   NextCheckpoint =	$CD
    166  f000		       00 ce	   OpNextCheckpoint =	$CE
    167  f000		       00 cf	   OpponentLine =	$CF
    168  f000
    169  f000		       00 d0	   ScoreD0    =	$D0
    170  f000		       00 d1	   ScoreD1    =	$D1
    171  f000		       00 d2	   ScoreD2    =	$D2
    172  f000		       00 d3	   ScoreD3    =	$D3
    173  f000		       00 d4	   ScoreD4    =	$D4
    174  f000
    175  f000		       00 d5	   Gear       =	$D5
    176  f000		       00 d6	   OpGear     =	$D6
    177  f000
    178  f000		       00 d7	   CarSpritePointerL =	$D7
    179  f000		       00 d8	   CarSpritePointerH =	$D8
    180  f000
    181  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    182  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    183  f000
    184  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    185  f000
    186  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    187  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    188  f000
    189  f000		       00 de	   Player0SpeedL =	$DE
    190  f000		       00 df	   Player1SpeedL =	$DF
    191  f000		       00 f0	   Player0SpeedH =	$F0
    192  f000		       00 f1	   Player1SpeedH =	$F1
    193  f000
    194  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    195  f000
    196  f000							;generic start up stuff, put zero in almost all...
    197  f000				   BeforeStart		;All variables that are kept on game reset or select
    198  f000		       a0 00		      LDY	#0
    199  f002		       84 bc		      STY	SwitchDebounceCounter
    200  f004		       84 c4		      STY	CurrentDifficulty
    201  f006		       84 c5		      STY	OpCurrentDifficulty
    202  f008		       84 bd		      STY	GameStatus
    203  f00a		       84 c7		      STY	CurrentCarId
    204  f00c		       84 c8		      STY	OpCurrentCarId
    205  f00e		       a0 10		      LDY	#16
    206  f010		       84 c6		      STY	GameMode
    207  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    208  f014
    209  f014				   Start
    210  f014		       a9 02		      LDA	#2
    211  f016		       85 00		      STA	VSYNC
    212  f018		       85 02		      STA	WSYNC
    213  f01a		       85 02		      STA	WSYNC
    214  f01c		       85 02		      STA	WSYNC
    215  f01e		       a9 00		      LDA	#0	;2
    216  f020		       85 00		      STA	VSYNC	;3
    217  f022
    218  f022		       78		      SEI
    219  f023		       d8		      CLD
    220  f024		       a2 ff		      LDX	#$FF
    221  f026		       9a		      TXS
    222  f027
    223  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    224  f029				   CleanMem
    225  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    226  f02b		       f0 1a		      BEQ	SkipClean
    227  f02d		       e0 c6		      CPX	#GameMode
    228  f02f		       f0 16		      BEQ	SkipClean
    229  f031		       e0 c7		      CPX	#CurrentCarId
    230  f033		       f0 12		      BEQ	SkipClean
    231  f035		       e0 c8		      CPX	#OpCurrentCarId
    232  f037		       f0 0e		      BEQ	SkipClean
    233  f039		       e0 c4		      CPX	#CurrentDifficulty
    234  f03b		       f0 0a		      BEQ	SkipClean
    235  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    236  f03f		       f0 06		      BEQ	SkipClean
    237  f041		       e0 bd		      CPX	#GameStatus
    238  f043		       f0 02		      BEQ	SkipClean
    239  f045		       95 00		      STA	0,X
    240  f047				   SkipClean
    241  f047		       e8		      INX
    242  f048		       d0 df		      BNE	CleanMem
    243  f04a
    244  f04a		       a9 d5		      LDA	#213
    245  f04c		       8d 96 02 	      STA	TIM64T	;3	
    246  f04f
    247  f04f							;Setting some variables...
    248  f04f
    249  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    250  f04f		       85 02		      STA	WSYNC	;We will set player position
    251  f051		       20 0d f7 	      JSR	DefaultOffsets
    252  f054
    253  f054		       ad 89 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    254  f057		       85 de		      STA	Player0SpeedL
    255  f059		       85 df		      STA	Player1SpeedL
    256  f05b
    257  f05b							;SLEEP 11;18
    258  f05b		       a2 00		      LDX	#0
    259  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    260  f060		       85 db		      STA	StartSWCHB	; For game over
    261  f062		       29 c0		      AND	#%11000000
    262  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    263  f066		       e8		      INX
    264  f067		       c9 80		      CMP	#%10000000
    265  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    266  f06b		       e8		      INX
    267  f06c		       c9 40		      CMP	#%01000000
    268  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    269  f070		       e8		      INX
    270  f071
    271  f071				   StoreCurrentDifficulty
    272  f071		       86 c4		      STX	CurrentDifficulty
    273  f073		       86 c5		      STX	OpCurrentDifficulty
    274  f075		       a2 00		      LDX	#0
    275  f077		       20 c5 f6 	      JSR	ConfigureDifficulty
    276  f07a		       e8		      INX
    277  f07b		       20 c5 f6 	      JSR	ConfigureDifficulty
    278  f07e
    279  f07e				   SetGameNotRunning
    280  f07e		       a9 00		      LDA	#0
    281  f080		       85 bd		      STA	GameStatus
    282  f082
    283  f082				   ConfigureTimer
    284  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    285  f084		       85 b8		      STA	CountdownTimer	;3
    286  f086		       85 b9		      STA	OpCountdownTimer	;3
    287  f088
    288  f088				   ConfigurePlayer1XPosition
    289  f088		       a9 29		      LDA	#PLAYER_1_X_START	;2
    290  f08a		       85 b7		      STA	Player1X	;3
    291  f08c
    292  f08c				   ConfigureOpNextCheckpoint
    293  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    294  f08e		       85 ce		      STA	OpNextCheckpoint
    295  f090
    296  f090				   HPositioning 		; Avoid sleep doing needed stuff
    297  f090		       85 02		      STA	WSYNC
    298  f092
    299  f092				   ConfigurePlayer0XPosition
    300  f092		       a9 20		      LDA	#PLAYER_0_X_START	;2
    301  f094		       85 b6		      STA	Player0X	;3
    302  f096
    303  f096				   ConfigureMissileSize
    304  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    305  f098		       85 04		      STA	NUSIZ0	;3
    306  f09a		       85 05		      STA	NUSIZ1	;3
    307  f09c
    308  f09c				   ConfigureNextCheckpoint
    309  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    310  f09e		       85 cd		      STA	NextCheckpoint
    311  f0a0
    312  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    313  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	5	;
      1  f0a2				   .CYCLES    SET	5
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    315  f0a5		       85 12		      STA	RESM0
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    317  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    319  f0ab		       85 13		      STA	RESM1
      0  f0ad					      SLEEP	3
      1  f0ad				   .CYCLES    SET	3
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad					      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad					      ELSE
     12  f0ad		       24 00		      bit	VSYNC
     13  f0af					      ENDIF
     14  f0af				   .CYCLES    SET	.CYCLES - 3
     15  f0af					      ENDIF
     16  f0af
     17  f0af				  -	      REPEAT	.CYCLES / 2
     18  f0af				  -	      nop
     19  f0af					      REPEND
    321  f0af
    322  f0af		       a9 d0		      LDA	#$D0
    323  f0b1		       85 24		      STA	HMBL
    324  f0b3		       85 22		      STA	HMM0
    325  f0b5		       85 23		      STA	HMM1
    326  f0b7		       85 02		      STA	WSYNC
    327  f0b9		       85 2a		      STA	HMOVE
    328  f0bb		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    329  f0bd		       85 2b		      STA	HMCLR
      0  f0bf					      SLEEP	31
      1  f0bf				   .CYCLES    SET	31
      2  f0bf
      3  f0bf				  -	      IF	.CYCLES < 2
      4  f0bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bf				  -	      ERR
      6  f0bf					      ENDIF
      7  f0bf
      8  f0bf					      IF	.CYCLES & 1
      9  f0bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bf				  -	      nop	0
     11  f0bf					      ELSE
     12  f0bf		       24 00		      bit	VSYNC
     13  f0c1					      ENDIF
     14  f0c1				   .CYCLES    SET	.CYCLES - 3
     15  f0c1					      ENDIF
     16  f0c1
     17  f0c1					      REPEAT	.CYCLES / 2
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     19  f0cf					      REPEND
    331  f0cf		       85 10		      STA	RESP0
    332  f0d1		       85 11		      STA	RESP1
    333  f0d3
    334  f0d3				   WaitResetToEnd
    335  f0d3		       ad 84 02 	      LDA	INTIM
    336  f0d6		       d0 fb		      BNE	WaitResetToEnd
    337  f0d8
    338  f0d8				   MainLoop
    339  f0d8		       a9 02		      LDA	#2
    340  f0da		       85 00		      STA	VSYNC
    341  f0dc		       85 02		      STA	WSYNC
    342  f0de		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    343  f0e0							;Some free cycles here!
    344  f0e0				   PrepareMaxHMove
    345  f0e0		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    346  f0e2		       85 09		      STA	COLUBK
      0  f0e4					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e4				   .CYCLES    SET	24 - 11
      2  f0e4
      3  f0e4				  -	      IF	.CYCLES < 2
      4  f0e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e4				  -	      ERR
      6  f0e4					      ENDIF
      7  f0e4
      8  f0e4					      IF	.CYCLES & 1
      9  f0e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e4				  -	      nop	0
     11  f0e4					      ELSE
     12  f0e4		       24 00		      bit	VSYNC
     13  f0e6					      ENDIF
     14  f0e6				   .CYCLES    SET	.CYCLES - 3
     15  f0e6					      ENDIF
     16  f0e6
     17  f0e6					      REPEAT	.CYCLES / 2
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    348  f0eb		       a9 80		      LDA	#$80
    349  f0ed		       85 24		      STA	HMBL
    350  f0ef		       85 22		      STA	HMM0
    351  f0f1		       85 23		      STA	HMM1
    352  f0f3		       85 20		      STA	HMP0
    353  f0f5		       85 21		      STA	HMP1
    354  f0f7		       85 02		      STA	WSYNC
    355  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    356  f0fb
    357  f0fb				   ConfigVBlankTimer
    358  f0fb		       a5 c6		      LDA	GameMode
    359  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    360  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    361  f101		       a9 29		      LDA	#VBLANK_TIMER
    362  f103		       4c 08 f1 	      JMP	SetVblankTimer
    363  f106				   SetVblankTimerQrCode
    364  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    365  f108
    366  f108				   SetVblankTimer
    367  f108		       85 02		      STA	WSYNC	;3
    368  f10a		       8d 96 02 	      STA	TIM64T	;3	
    369  f10d		       a9 00		      LDA	#0	;2
    370  f10f		       85 00		      STA	VSYNC	;3	
    371  f111
    372  f111				   RandomizeGame
    373  f111		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    374  f113		       d0 2d		      BNE	EndRandomizeGame
    375  f115		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    376  f117		       29 02		      AND	#%00000010
    377  f119		       f0 24		      BEQ	DeterministicGame
    378  f11b		       a6 96		      LDX	TrafficOffset1 + 2
    379  f11d		       bd 00 fe 	      LDA	AesTable,X
    380  f120		       45 8c		      EOR	FrameCount0
    381  f122		       85 96		      STA	TrafficOffset1 + 2
    382  f124		       85 a6		      STA	OpTrafficOffset1 + 2
    383  f126		       a6 9a		      LDX	TrafficOffset2 + 2
    384  f128		       bd 00 fe 	      LDA	AesTable,X
    385  f12b		       45 8c		      EOR	FrameCount0
    386  f12d		       85 9a		      STA	TrafficOffset2 + 2
    387  f12f		       85 aa		      STA	OpTrafficOffset2 + 2
    388  f131		       a6 9e		      LDX	TrafficOffset3 + 2
    389  f133		       bd 00 fe 	      LDA	AesTable,X
    390  f136		       45 8c		      EOR	FrameCount0
    391  f138		       85 9e		      STA	TrafficOffset3 + 2
    392  f13a		       85 ae		      STA	OpTrafficOffset3 + 2
    393  f13c		       4c 42 f1 	      JMP	EndRandomizeGame
    394  f13f
    395  f13f				   DeterministicGame
    396  f13f		       20 0d f7 	      JSR	DefaultOffsets
    397  f142
    398  f142				   EndRandomizeGame
    399  f142
    400  f142
    401  f142				   CountFrame
    402  f142		       e6 8c		      INC	FrameCount0	; 5
    403  f144		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    404  f146		       e6 8d		      INC	FrameCount1	; 5 
    405  f148				   SkipIncFC1
    406  f148
    407  f148				   CallDrawQrCode
    408  f148		       a5 c6		      LDA	GameMode
    409  f14a		       c9 10		      CMP	#MAX_GAME_MODE
    410  f14c		       d0 03		      BNE	TestIsGameRunning
    411  f14e		       4c 6e fa 	      JMP	DrawQrCode
    412  f151
    413  f151							;Does not update the game if not running
    414  f151				   TestIsGameRunning
    415  f151		       a5 bd		      LDA	GameStatus	;3
    416  f153		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    417  f155				   SelectCarWithDpadCall		; Only do it when game is stoped
    418  f155		       a2 00		      LDX	#0	; Player 0
    419  f157		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    420  f159		       85 b0		      STA	Tmp0
    421  f15b		       20 11 f8 	      JSR	SelectCarWithDpad
    422  f15e		       e8		      INX		; Player 1
    423  f15f		       20 11 f8 	      JSR	SelectCarWithDpad
    424  f162
    425  f162							; Needs to draw the opponent in the correct line even when game stoped  
    426  f162							; Draeing is a destructive operation
    427  f162		       20 23 f8 	      JSR	ProcessOpponentLine
    428  f165
    429  f165				   CallConfigureCarSprites
    430  f165		       20 cb f7 	      JSR	ConfigureCarSprites
    431  f168				   SkipUpdateLogicJump
    432  f168		       4c a0 f1 	      JMP	SkipUpdateLogic
    433  f16b				   ContinueWithGameLogic
    434  f16b
    435  f16b				   CallEverySecond		; Timer for now
    436  f16b		       a2 00		      LDX	#0
    437  f16d		       20 44 fa 	      JSR	EverySecond
    438  f170		       e8		      INX
    439  f171		       20 44 fa 	      JSR	EverySecond
    440  f174
    441  f174				   CallProcessSpeed
    442  f174		       a2 00		      LDX	#0
    443  f176		       20 5b f9 	      JSR	ProcessSpeed
    444  f179
    445  f179		       e8		      INX		; Player 1
    446  f17a		       20 5b f9 	      JSR	ProcessSpeed
    447  f17d
    448  f17d				   CallUpdateOffsets
    449  f17d		       a2 00		      LDX	#0	; Player 0
    450  f17f		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    451  f181		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    452  f183		       a5 de		      LDA	Player0SpeedL
    453  f185		       85 b4		      STA	Tmp4
    454  f187		       a5 f0		      LDA	Player0SpeedH
    455  f189		       85 b5		      STA	Tmp5
    456  f18b		       20 08 f9 	      JSR	UpdateOffsets
    457  f18e
    458  f18e							;LDX Exits the call with correct value.
    459  f18e		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    460  f190		       85 b3		      STA	Tmp3
    461  f192		       a5 df		      LDA	Player1SpeedL
    462  f194		       85 b4		      STA	Tmp4
    463  f196		       a5 f1		      LDA	Player1SpeedH
    464  f198		       85 b5		      STA	Tmp5
    465  f19a		       20 08 f9 	      JSR	UpdateOffsets
    466  f19d
    467  f19d				   CallProcessOpponentLine
    468  f19d		       20 23 f8 	      JSR	ProcessOpponentLine
    469  f1a0
    470  f1a0				   SkipUpdateLogic		; Continue here if not paused
    471  f1a0
    472  f1a0				   CallStatusUpdateSbr
    473  f1a0		       a2 00		      LDX	#0
    474  f1a2		       20 51 fa 	      JSR	CalculateGear
    475  f1a5		       20 5e fa 	      JSR	ProcessScoreFontColor
    476  f1a8		       e8		      INX
    477  f1a9		       20 51 fa 	      JSR	CalculateGear
    478  f1ac		       20 5e fa 	      JSR	ProcessScoreFontColor
    479  f1af
    480  f1af				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    481  f1af		       a5 8c		      LDA	FrameCount0
    482  f1b1		       29 01		      AND	#%00000001
    483  f1b3		       d0 0c		      BNE	CallProcessPlayer1Status
    484  f1b5				   CallProcessPlayer0Status
    485  f1b5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    486  f1b7		       85 b0		      STA	Tmp0
    487  f1b9		       a2 00		      LDX	#0
    488  f1bb		       20 fe f9 	      JSR	ProcessPlayerStatus
    489  f1be		       4c ca f1 	      JMP	EndCallProcessPlayerStatus
    490  f1c1				   CallProcessPlayer1Status
    491  f1c1		       a5 a2		      LDA	OpTrafficOffset0 + 2
    492  f1c3		       85 b0		      STA	Tmp0
    493  f1c5		       a2 01		      LDX	#1
    494  f1c7		       20 fe f9 	      JSR	ProcessPlayerStatus
    495  f1ca				   EndCallProcessPlayerStatus
    496  f1ca
    497  f1ca				   CallProcessPlayerSprites
    498  f1ca		       20 cb f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    499  f1cd
    500  f1cd				   CallProcessSound		; We might save cycles by updating one channel per frame.
    501  f1cd		       a2 00		      LDX	#0
    502  f1cf		       a5 92		      LDA	TrafficOffset0 + 2
    503  f1d1		       85 b1		      STA	Tmp1
    504  f1d3		       20 dc f5 	      JSR	ProcessSound
    505  f1d6		       e8		      INX		; Player 1
    506  f1d7		       a5 a2		      LDA	OpTrafficOffset0 + 2
    507  f1d9		       85 b1		      STA	Tmp1
    508  f1db		       20 dc f5 	      JSR	ProcessSound
    509  f1de
    510  f1de				   ChooseTextSide		; 
    511  f1de		       a5 8c		      LDA	FrameCount0	;3
    512  f1e0		       29 01		      AND	#%00000001
    513  f1e2		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    514  f1e4		       4c 9a f2 	      JMP	RightScoreWrite
    515  f1e7
    516  f1e7				   LeftScoreWrite
    517  f1e7		       a5 c9		      LDA	ScoreFontColor
    518  f1e9		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    519  f1eb		       f0 77		      BEQ	PrintCheckpoint
    520  f1ed		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    521  f1ef		       f0 7b		      BEQ	PrintStartGame
    522  f1f1		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    523  f1f3		       f0 3a		      BEQ	ProcessPlayer0OverText
    524  f1f5		       a5 bd		      LDA	GameStatus
    525  f1f7		       f0 7b		      BEQ	PrintHellwayLeft
    526  f1f9
    527  f1f9				   Digit0Timer
    528  f1f9		       a5 b8		      LDA	CountdownTimer	;3
    529  f1fb		       85 b0		      STA	Tmp0
    530  f1fd		       20 fd f7 	      JSR	BINBCD8
    531  f200							; LDA Tmp1 Also returned in A
    532  f200		       29 0f		      AND	#%00001111	;2
    533  f202		       aa		      TAX		; 2
    534  f203		       bd 6c fc 	      LDA	FontLookup,X	;4 
    535  f206		       85 d1		      STA	ScoreD1	;3
    536  f208
    537  f208				   Digit1Timer
    538  f208		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    539  f20a		       4a		      LSR		; 2
    540  f20b		       4a		      LSR		; 2
    541  f20c		       4a		      LSR		; 2
    542  f20d		       4a		      LSR		; 2
    543  f20e		       aa		      TAX		; 2
    544  f20f		       bd 6c fc 	      LDA	FontLookup,X	;4
    545  f212		       85 d0		      STA	ScoreD0	;3
    546  f214
    547  f214				   SpeedBar
    548  f214		       a5 de		      LDA	Player0SpeedL
    549  f216		       29 e0		      AND	#%11100000	;2 Discard the last bits
    550  f218		       18		      CLC
    551  f219		       2a		      ROL		;First goes into carry
    552  f21a		       2a		      ROL
    553  f21b		       2a		      ROL
    554  f21c		       2a		      ROL
    555  f21d		       85 b0		      STA	Tmp0
    556  f21f		       a5 f0		      LDA	Player0SpeedH
    557  f221		       0a		      ASL
    558  f222		       0a		      ASL
    559  f223		       0a		      ASL
    560  f224		       05 b0		      ORA	Tmp0
    561  f226		       aa		      TAX		; 2
    562  f227		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    563  f22a		       85 d2		      STA	ScoreD2	;3
    564  f22c		       4c 3d f2 	      JMP	DistanceCheckpointCount
    565  f22f
    566  f22f				   ProcessPlayer0OverText
    567  f22f		       a5 f2		      LDA	IsOpponentInFront
    568  f231		       30 05		      BMI	PrintPlayer0Lose
    569  f233				   PrintPlayer0Win
    570  f233		       a2 21		      LDX	#<WinText
    571  f235		       4c 3a f2 	      JMP	PrintPlayer0Status
    572  f238				   PrintPlayer0Lose
    573  f238		       a2 24		      LDX	#<LoseText
    574  f23a				   PrintPlayer0Status
    575  f23a		       20 22 f7 	      JSR	PrintStaticText
    576  f23d
    577  f23d				   DistanceCheckpointCount		; Will run all letters in the future
    578  f23d		       a5 ba		      LDA	Traffic0Msb
    579  f23f		       29 01		      AND	#%00000001
    580  f241		       0a		      ASL
    581  f242		       0a		      ASL
    582  f243		       0a		      ASL
    583  f244		       0a		      ASL
    584  f245		       85 b0		      STA	Tmp0
    585  f247		       a5 92		      LDA	TrafficOffset0 + 2	;3
    586  f249		       29 f0		      AND	#%11110000	;2
    587  f24b		       4a		      LSR
    588  f24c		       4a		      LSR
    589  f24d		       4a		      LSR
    590  f24e		       4a		      LSR
    591  f24f		       05 b0		      ORA	Tmp0
    592  f251		       aa		      TAX		; 2
    593  f252		       bd 6c fc 	      LDA	FontLookup,X	;4 
    594  f255		       85 d3		      STA	ScoreD3	;3
    595  f257
    596  f257				   DistanceBar		; 16 subdivisions per checkpoint
    597  f257		       a5 92		      LDA	TrafficOffset0 + 2	;3
    598  f259		       29 0f		      AND	#%00001111	;2
    599  f25b		       aa		      TAX		; 2
    600  f25c		       bd 8c fc 	      LDA	BarLookup,X	;4 
    601  f25f		       85 d4		      STA	ScoreD4	;3
    602  f261
    603  f261				   EndDrawDistance
    604  f261		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    605  f264
    606  f264				   PrintCheckpoint
    607  f264		       a2 00		      LDX	#<CheckpointText
    608  f266		       20 22 f7 	      JSR	PrintStaticText
    609  f269		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    610  f26c				   PrintStartGame
    611  f26c		       a2 17		      LDX	#<GoText
    612  f26e		       20 22 f7 	      JSR	PrintStaticText
    613  f271		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    614  f274
    615  f274				   PrintHellwayLeft
    616  f274		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    617  f276		       30 08		      BMI	ContinueWithDefaultLeftText
    618  f278				   Player0IsReady
    619  f278		       a2 1c		      LDX	#<ReadyText
    620  f27a		       20 22 f7 	      JSR	PrintStaticText
    621  f27d		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    622  f280				   ContinueWithDefaultLeftText
    623  f280		       a5 8d		      LDA	FrameCount1
    624  f282		       29 01		      AND	#1
    625  f284		       d0 05		      BNE	PrintCreditsLeft
    626  f286		       a2 04		      LDX	#<HellwayLeftText - 1	; Padding
    627  f288		       4c 8d f2 	      JMP	PrintGameMode
    628  f28b				   PrintCreditsLeft
    629  f28b		       a2 0d		      LDX	#<OpbText - 1	; Padding
    630  f28d
    631  f28d				   PrintGameMode
    632  f28d		       20 22 f7 	      JSR	PrintStaticText
    633  f290		       a6 c6		      LDX	GameMode
    634  f292		       bd 6c fc 	      LDA	FontLookup,X	;4 
    635  f295		       85 d0		      STA	ScoreD0	;3
    636  f297		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    637  f29a
    638  f29a				   RightScoreWrite
    639  f29a		       a5 bd		      LDA	GameStatus
    640  f29c		       f0 79		      BEQ	PrintHellwayRight
    641  f29e		       a5 ca		      LDA	OpScoreFontColor
    642  f2a0		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    643  f2a2		       f0 c0		      BEQ	PrintCheckpoint
    644  f2a4		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    645  f2a6		       f0 c4		      BEQ	PrintStartGame
    646  f2a8		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    647  f2aa		       f0 36		      BEQ	ProcessPlayer1OverText
    648  f2ac
    649  f2ac				   OpDigit0Timer
    650  f2ac		       a5 b9		      LDA	OpCountdownTimer	;3
    651  f2ae		       85 b0		      STA	Tmp0
    652  f2b0		       20 fd f7 	      JSR	BINBCD8
    653  f2b3							; LDA Tmp1 Also returned in A
    654  f2b3		       29 0f		      AND	#%00001111	;2
    655  f2b5		       aa		      TAX		; 2
    656  f2b6		       bd 6c fc 	      LDA	FontLookup,X	;4 
    657  f2b9		       85 d4		      STA	ScoreD4	;3
    658  f2bb
    659  f2bb				   OpDigit1Timer
    660  f2bb		       a5 b1		      LDA	Tmp1	;3
    661  f2bd		       4a		      LSR		; 2
    662  f2be		       4a		      LSR		; 2
    663  f2bf		       4a		      LSR		; 2
    664  f2c0		       4a		      LSR		; 2
    665  f2c1		       aa		      TAX		; 2
    666  f2c2		       bd 6c fc 	      LDA	FontLookup,X	;4
    667  f2c5		       85 d3		      STA	ScoreD3	;3
    668  f2c7
    669  f2c7				   OpSpeedBar
    670  f2c7		       a5 df		      LDA	Player1SpeedL
    671  f2c9		       29 e0		      AND	#%11100000	;2 Discard the last bits
    672  f2cb		       18		      CLC
    673  f2cc		       2a		      ROL		;First goes into carry
    674  f2cd		       2a		      ROL
    675  f2ce		       2a		      ROL
    676  f2cf		       2a		      ROL
    677  f2d0		       85 b0		      STA	Tmp0
    678  f2d2		       a5 f1		      LDA	Player1SpeedH
    679  f2d4		       0a		      ASL
    680  f2d5		       0a		      ASL
    681  f2d6		       0a		      ASL
    682  f2d7		       05 b0		      ORA	Tmp0
    683  f2d9		       aa		      TAX		; 2
    684  f2da		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    685  f2dd		       85 d2		      STA	ScoreD2	;3
    686  f2df		       4c f0 f2 	      JMP	OpDistanceCheckpointCount
    687  f2e2
    688  f2e2				   ProcessPlayer1OverText
    689  f2e2		       a5 f2		      LDA	IsOpponentInFront
    690  f2e4		       30 05		      BMI	PrintPlayer1Lose
    691  f2e6				   PrintPlayer1Win
    692  f2e6		       a2 1f		      LDX	#<WinText - 2
    693  f2e8		       4c f0 f2 	      JMP	OpDistanceCheckpointCount
    694  f2eb				   PrintPlayer1Lose
    695  f2eb		       a2 22		      LDX	#<LoseText - 2
    696  f2ed				   PrintPlayer1Status
    697  f2ed		       20 22 f7 	      JSR	PrintStaticText
    698  f2f0
    699  f2f0				   OpDistanceCheckpointCount
    700  f2f0		       a5 bb		      LDA	OpTraffic0Msb
    701  f2f2		       29 01		      AND	#%00000001
    702  f2f4		       0a		      ASL
    703  f2f5		       0a		      ASL
    704  f2f6		       0a		      ASL
    705  f2f7		       0a		      ASL
    706  f2f8		       85 b0		      STA	Tmp0
    707  f2fa		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    708  f2fc		       29 f0		      AND	#%11110000	;2
    709  f2fe		       4a		      LSR
    710  f2ff		       4a		      LSR
    711  f300		       4a		      LSR
    712  f301		       4a		      LSR
    713  f302		       05 b0		      ORA	Tmp0
    714  f304		       aa		      TAX		; 2
    715  f305		       bd 6c fc 	      LDA	FontLookup,X	;4 
    716  f308		       85 d1		      STA	ScoreD1	;3
    717  f30a
    718  f30a				   OpDistanceBar		; 16 subdivisions per checkpoint
    719  f30a		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    720  f30c		       29 0f		      AND	#%00001111	;2
    721  f30e		       aa		      TAX		; 2
    722  f30f		       bd 8c fc 	      LDA	BarLookup,X	;4 
    723  f312		       85 d0		      STA	ScoreD0	;3
    724  f314		       4c 36 f3 	      JMP	RightScoreWriteEnd
    725  f317
    726  f317				   PrintHellwayRight
    727  f317		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    728  f319		       30 08		      BMI	ContinueWithDefaultRightText
    729  f31b				   Player1IsReady
    730  f31b		       a2 1c		      LDX	#<ReadyText
    731  f31d		       20 22 f7 	      JSR	PrintStaticText
    732  f320		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    733  f323				   ContinueWithDefaultRightText
    734  f323		       a5 8d		      LDA	FrameCount1
    735  f325		       29 01		      AND	#1
    736  f327		       d0 05		      BNE	PrintCreditsRight
    737  f329		       a2 09		      LDX	#<HellwayRightText
    738  f32b		       4c 30 f3 	      JMP	PrintRightIntro
    739  f32e				   PrintCreditsRight
    740  f32e		       a2 12		      LDX	#<YearText
    741  f330				   PrintRightIntro
    742  f330		       20 22 f7 	      JSR	PrintStaticText
    743  f333		       4c 36 f3 	      JMP	RightScoreWriteEnd
    744  f336				   RightScoreWriteEnd
    745  f336
    746  f336
    747  f336				   ConfigurePFForScore
    748  f336		       20 74 f6 	      JSR	ClearAll
    749  f339		       a9 02		      LDA	#%00000010	; Score mode
    750  f33b		       85 0a		      STA	CTRLPF
    751  f33d		       a5 8c		      LDA	FrameCount0	;3
    752  f33f		       29 01		      AND	#%00000001
    753  f341		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    754  f343				   RightScoreOn
    755  f343		       a5 ca		      LDA	OpScoreFontColor
    756  f345		       85 07		      STA	COLUP1
    757  f347		       a9 00		      LDA	#BACKGROUND_COLOR
    758  f349		       85 06		      STA	COLUP0
    759  f34b		       4c 56 f3 	      JMP	CallWaitForVblankEnd
    760  f34e				   LeftScoreOn
    761  f34e		       a5 c9		      LDA	ScoreFontColor
    762  f350		       85 06		      STA	COLUP0
    763  f352		       a9 00		      LDA	#BACKGROUND_COLOR
    764  f354		       85 07		      STA	COLUP1
    765  f356
    766  f356							; After here we are going to update the screen, No more heavy code
    767  f356				   CallWaitForVblankEnd
    768  f356		       20 9c f7 	      JSR	WaitForVblankEnd
    769  f359
    770  f359				   DrawScoreHud
    771  f359		       20 40 f7 	      JSR	PrintScore
    772  f35c
    773  f35c							; 4 lines to go crazy
    774  f35c		       85 02		      STA	WSYNC
    775  f35e							;STA HMOVE
    776  f35e
    777  f35e		       85 02		      STA	WSYNC
    778  f360		       85 2a		      STA	HMOVE
    779  f362
    780  f362				   PrepareForTraffic
    781  f362		       20 8a f6 	      JSR	ClearPF	; 32
    782  f365
    783  f365		       85 02		      STA	WSYNC
    784  f367		       85 2a		      STA	HMOVE
    785  f369		       85 02		      STA	WSYNC
    786  f36b		       85 2a		      STA	HMOVE
    787  f36d
    788  f36d		       a9 30		      LDA	#%00110000	; 2 Score mode
    789  f36f		       85 0a		      STA	CTRLPF	;3
    790  f371
    791  f371		       a5 8c		      LDA	FrameCount0	;3
    792  f373		       29 01		      AND	#%00000001	;2
    793  f375		       aa		      TAX		;2
    794  f376		       b5 c2		      LDA	TrafficColor,X	;4
    795  f378		       85 08		      STA	COLUPF	;3
    796  f37a
    797  f37a		       a9 96		      LDA	#PLAYER1_COLOR	;2
    798  f37c		       85 07		      STA	COLUP1	;3
    799  f37e
    800  f37e		       a5 c9		      LDA	ScoreFontColor	;3
    801  f380		       85 06		      STA	COLUP0	;3
    802  f382
    803  f382		       a5 ca		      LDA	OpScoreFontColor	;3
    804  f384		       85 07		      STA	COLUP1	;3
    805  f386
    806  f386		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    807  f388
    808  f388		       a5 8c		      LDA	FrameCount0	;Brach flag
    809  f38a		       29 01		      AND	#%00000001
    810  f38c
    811  f38c		       d0 03		      BNE	OpScanLoop	;2
    812  f38e		       4c 4b f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    813  f391							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    814  f391
    815  f391							;main scanline loop...
    816  f391				   OpScanLoop
    817  f391		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    818  f393
    819  f393		       a5 80		      LDA	GRP0Cache	;3
    820  f395		       85 1b		      STA	GRP0	;3
    821  f397
    822  f397		       a5 84		      LDA	GRP1Cache	;3
    823  f399		       85 1c		      STA	GRP1	;3
    824  f39b
    825  f39b		       a5 85		      LDA	ENABLCache	;3
    826  f39d		       85 1f		      STA	ENABL	;3
    827  f39f
    828  f39f		       a5 86		      LDA	ENAM0Cache	;3
    829  f3a1		       85 1d		      STA	ENAM0	;3
    830  f3a3
    831  f3a3		       a5 87		      LDA	ENAM1Cache	;3
    832  f3a5		       85 1e		      STA	ENAM1	;3
    833  f3a7
    834  f3a7		       a5 81		      LDA	PF0Cache	;3
    835  f3a9		       85 0d		      STA	PF0	;3
    836  f3ab
    837  f3ab		       a9 00		      LDA	#0	;2
    838  f3ad							;STA PF0	     ;3
    839  f3ad		       85 80		      STA	GRP0Cache	;3
    840  f3af		       85 86		      STA	ENAM0Cache	;3
    841  f3b1		       85 85		      STA	ENABLCache	;3
    842  f3b3		       85 87		      STA	ENAM1Cache	; 3
    843  f3b5							;STA GRP1Cache ;3
    844  f3b5		       85 0d		      STA	PF0	;3
    845  f3b7							;STA PF2	     ;3
    846  f3b7
    847  f3b7		       a5 83		      LDA	PF2Cache	;3
    848  f3b9		       85 0f		      STA	PF2	;3
    849  f3bb
    850  f3bb				   OpDrawCar0
    851  f3bb		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    852  f3bd		       b0 04		      BCS	OpSkipDrawCar	;2
    853  f3bf		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    854  f3c1		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    855  f3c3				   OpSkipDrawCar
    856  f3c3
    857  f3c3							;BEQ DrawTraffic3
    858  f3c3				   OpDrawTraffic1		; 33
    859  f3c3		       98		      TYA		; 2
    860  f3c4		       18		      CLC		; 2 
    861  f3c5		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    862  f3c7		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    863  f3c9		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    864  f3cb		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    865  f3cd		       4c d2 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    866  f3d0				   OpEorOffsetWithCarry
    867  f3d0		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    868  f3d2				   OpAfterEorOffsetWithCarry		;17
    869  f3d2		       aa		      TAX		;2
    870  f3d3		       bd 00 fe 	      LDA	AesTable,X	; 4
    871  f3d6		       c5 bf		      CMP	OpTrafficChance	;3
    872  f3d8		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    873  f3da		       a9 ff		      LDA	#$FF	;2
    874  f3dc		       85 86		      STA	ENAM0Cache	;3
    875  f3de				   OpFinishDrawTraffic1
    876  f3de
    877  f3de				   OpErasePF2
    878  f3de		       a9 00		      LDA	#0
    879  f3e0		       85 0f		      STA	PF2
    880  f3e2
    881  f3e2				   OpDrawTraffic2		; 33
    882  f3e2		       98		      TYA		; 2
    883  f3e3		       18		      CLC		; 2 
    884  f3e4		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    885  f3e6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    886  f3e8		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    887  f3ea		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    888  f3ec		       4c f1 f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    889  f3ef				   OpEorOffsetWithCarry2
    890  f3ef		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    891  f3f1				   OpAfterEorOffsetWithCarry2		;17
    892  f3f1		       aa		      TAX		;2
    893  f3f2		       bd 00 fe 	      LDA	AesTable,X	; 4
    894  f3f5		       c5 bf		      CMP	OpTrafficChance	;3
    895  f3f7		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    896  f3f9		       a9 02		      LDA	#%00000010	;2
    897  f3fb		       85 85		      STA	ENABLCache	;3
    898  f3fd				   OpFinishDrawTraffic2
    899  f3fd
    900  f3fd							;STA WSYNC ;65 / 137
    901  f3fd
    902  f3fd							; LDA Tmp0 ; Flicker this line if drawing car
    903  f3fd							; BEQ FinishDrawTraffic4
    904  f3fd				   OpDrawTraffic3		; 33
    905  f3fd		       98		      TYA		; 2
    906  f3fe		       18		      CLC		; 2 
    907  f3ff		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    908  f401		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    909  f403		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    910  f405		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    911  f407		       4c 0c f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    912  f40a				   OpEorOffsetWithCarry3
    913  f40a		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    914  f40c				   OpAfterEorOffsetWithCarry3		;17
    915  f40c		       aa		      TAX		;2
    916  f40d		       bd 00 fe 	      LDA	AesTable,X	; 4
    917  f410		       c5 bf		      CMP	OpTrafficChance	;3
    918  f412		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    919  f414		       a9 02		      LDA	#%00000010	;2
    920  f416		       85 87		      STA	ENAM1Cache
    921  f418				   OpFinishDrawTraffic3
    922  f418
    923  f418				   OpDrawOponent		;26
    924  f418		       84 b0		      STY	Tmp0	;3
    925  f41a		       a4 cf		      LDY	OpponentLine	;3
    926  f41c		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    927  f41e		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    928  f420				   OpDrawOpponent
    929  f420		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    930  f422		       85 80		      STA	GRP0Cache	;3
    931  f424		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    932  f426		       a4 b0		      LDY	Tmp0	;3
    933  f428		       4c 3c f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    934  f42b				   OpSkipDrawOpponent
    935  f42b		       c6 cf		      DEC	OpponentLine	;5
    936  f42d		       a4 b0		      LDY	Tmp0	;3
    937  f42f
    938  f42f
    939  f42f				   OpDrawTraffic0		; 21 2pe
    940  f42f		       98		      TYA		; 2
    941  f430		       18		      CLC		; 2 
    942  f431		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    943  f433		       29 08		      AND	#%00001000	;2
    944  f435		       f0 05		      BEQ	OpHasNoBorderP0	;3
    945  f437				   OpHasBorderP0
    946  f437		       a9 e0		      LDA	#%11100000	; 2
    947  f439		       4c 3e f4 	      JMP	OpStoreBorderP0	; 3
    948  f43c				   OpHasNoBorderP0
    949  f43c		       a9 00		      LDA	#0	; 2
    950  f43e				   OpStoreBorderP0
    951  f43e		       85 81		      STA	PF0Cache	; 3
    952  f440		       85 83		      STA	PF2Cache	; 3
    953  f442
    954  f442				   OpSkipDrawTraffic0
    955  f442
    956  f442				   OpWhileScanLoop
    957  f442		       88		      DEY		;2
    958  f443		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    959  f445		       4c 91 f3 	      JMP	OpScanLoop	;3
    960  f448				   OpFinishScanLoop		; 7 209 of 222
    961  f448		       4c 00 f5 	      JMP	FinishScanLoop
    962  f44b
    963  f44b							;main scanline loop...
    964  f44b				   ScanLoop
    965  f44b		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    966  f44d
    967  f44d		       a5 81		      LDA	PF0Cache	;3
    968  f44f		       85 0d		      STA	PF0	;3
    969  f451
    970  f451		       a5 80		      LDA	GRP0Cache	;3
    971  f453		       85 1b		      STA	GRP0	;3
    972  f455
    973  f455		       a5 84		      LDA	GRP1Cache	;3
    974  f457		       85 1c		      STA	GRP1	;3
    975  f459
    976  f459		       a5 86		      LDA	ENAM0Cache	;3
    977  f45b		       85 1d		      STA	ENAM0	;3
    978  f45d
    979  f45d		       a5 85		      LDA	ENABLCache	;3
    980  f45f		       85 1f		      STA	ENABL	;3
    981  f461
    982  f461		       a5 87		      LDA	ENAM1Cache	;3
    983  f463		       85 1e		      STA	ENAM1	;3
    984  f465
    985  f465		       a5 83		      LDA	PF2Cache	;3
    986  f467		       85 0f		      STA	PF2	;3
    987  f469
    988  f469		       a9 00		      LDA	#0	;2
    989  f46b		       85 0d		      STA	PF0	;3
    990  f46d		       85 84		      STA	GRP1Cache	;3
    991  f46f		       85 85		      STA	ENABLCache	;3
    992  f471		       85 86		      STA	ENAM0Cache	;3
    993  f473		       85 87		      STA	ENAM1Cache	; 3
    994  f475							;STA GRP0Cache
    995  f475		       85 0f		      STA	PF2	;3
    996  f477
    997  f477				   DrawCar0
    998  f477		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    999  f479		       b0 04		      BCS	SkipDrawCar	;2
   1000  f47b		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1001  f47d		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1002  f47f				   SkipDrawCar
   1003  f47f
   1004  f47f							;BEQ DrawTraffic3
   1005  f47f				   DrawTraffic1 		; 33
   1006  f47f		       98		      TYA		; 2
   1007  f480		       18		      CLC		; 2 
   1008  f481		       65 95		      ADC	TrafficOffset1 + 1	;3
   1009  f483		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1010  f485		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1011  f487		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1012  f489		       4c 8e f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1013  f48c				   EorOffsetWithCarry
   1014  f48c		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1015  f48e				   AfterEorOffsetWithCarry		;17
   1016  f48e		       aa		      TAX		;2
   1017  f48f		       bd 00 fe 	      LDA	AesTable,X	; 4
   1018  f492		       c5 be		      CMP	TrafficChance	;3
   1019  f494		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1020  f496		       a9 ff		      LDA	#$FF	;2
   1021  f498		       85 86		      STA	ENAM0Cache	;3
   1022  f49a				   FinishDrawTraffic1
   1023  f49a
   1024  f49a				   DrawTraffic2 		; 33
   1025  f49a		       98		      TYA		; 2
   1026  f49b		       18		      CLC		; 2 
   1027  f49c		       65 99		      ADC	TrafficOffset2 + 1	;3
   1028  f49e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1029  f4a0		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1030  f4a2		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1031  f4a4		       4c a9 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1032  f4a7				   EorOffsetWithCarry2
   1033  f4a7		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1034  f4a9				   AfterEorOffsetWithCarry2		;17
   1035  f4a9		       aa		      TAX		;2
   1036  f4aa		       bd 00 fe 	      LDA	AesTable,X	; 4
   1037  f4ad		       c5 be		      CMP	TrafficChance	;3
   1038  f4af		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1039  f4b1		       a9 02		      LDA	#%00000010	;2
   1040  f4b3		       85 85		      STA	ENABLCache	;3
   1041  f4b5				   FinishDrawTraffic2
   1042  f4b5
   1043  f4b5							;STA WSYNC ;65 / 137
   1044  f4b5
   1045  f4b5							; LDA Tmp0 ; Flicker this line if drawing car
   1046  f4b5							; BEQ FinishDrawTraffic4
   1047  f4b5				   DrawTraffic3 		; 33
   1048  f4b5		       98		      TYA		; 2
   1049  f4b6		       18		      CLC		; 2 
   1050  f4b7		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1051  f4b9		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1052  f4bb		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1053  f4bd		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1054  f4bf		       4c c4 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1055  f4c2				   EorOffsetWithCarry3
   1056  f4c2		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1057  f4c4				   AfterEorOffsetWithCarry3		;17
   1058  f4c4		       aa		      TAX		;2
   1059  f4c5		       bd 00 fe 	      LDA	AesTable,X	; 4
   1060  f4c8		       c5 be		      CMP	TrafficChance	;3
   1061  f4ca		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1062  f4cc		       a9 02		      LDA	#%00000010	;2
   1063  f4ce		       85 87		      STA	ENAM1Cache
   1064  f4d0				   FinishDrawTraffic3
   1065  f4d0
   1066  f4d0
   1067  f4d0				   DrawOponent		;26
   1068  f4d0		       84 b0		      STY	Tmp0	;3
   1069  f4d2		       a4 cf		      LDY	OpponentLine	;3
   1070  f4d4		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1071  f4d6		       b0 0b		      BCS	SkipDrawOpponent	;2
   1072  f4d8				   DrawOpponent
   1073  f4d8		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1074  f4da		       85 84		      STA	GRP1Cache	;3
   1075  f4dc		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1076  f4de		       a4 b0		      LDY	Tmp0	;3
   1077  f4e0		       4c f4 f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1078  f4e3				   SkipDrawOpponent
   1079  f4e3		       c6 cf		      DEC	OpponentLine	;5
   1080  f4e5		       a4 b0		      LDY	Tmp0	;3
   1081  f4e7
   1082  f4e7				   DrawTraffic0 		; 21 2pe
   1083  f4e7		       98		      TYA		; 2
   1084  f4e8		       18		      CLC		; 2 
   1085  f4e9		       65 91		      ADC	TrafficOffset0 + 1	;3
   1086  f4eb		       29 08		      AND	#%00001000	;2
   1087  f4ed		       f0 05		      BEQ	HasNoBorderP0	;3
   1088  f4ef				   HasBorderP0
   1089  f4ef		       a9 e0		      LDA	#%11100000	; 2
   1090  f4f1		       4c f6 f4 	      JMP	StoreBorderP0	; 3
   1091  f4f4				   HasNoBorderP0
   1092  f4f4		       a9 00		      LDA	#0	; 2
   1093  f4f6				   StoreBorderP0
   1094  f4f6		       85 81		      STA	PF0Cache	; 3
   1095  f4f8		       85 83		      STA	PF2Cache	; 3
   1096  f4fa
   1097  f4fa				   SkipDrawTraffic0
   1098  f4fa
   1099  f4fa				   WhileScanLoop
   1100  f4fa		       88		      DEY		;2
   1101  f4fb		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1102  f4fd		       4c 4b f4 	      JMP	ScanLoop	;3
   1103  f500				   FinishScanLoop		; 7 209 of 222
   1104  f500
   1105  f500		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1106  f502		       20 99 f6 	      JSR	LoadAll
   1107  f505		       85 02		      STA	WSYNC	; do stuff!
   1108  f507		       85 02		      STA	WSYNC
   1109  f509		       85 02		      STA	WSYNC
   1110  f50b
   1111  f50b				   PrepareOverscan
   1112  f50b		       a9 02		      LDA	#2
   1113  f50d		       85 02		      STA	WSYNC
   1114  f50f							;STA HMOVE	; HMOVE 10
   1115  f50f		       85 01		      STA	VBLANK
   1116  f511
   1117  f511		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1118  f513		       8d 96 02 	      STA	TIM64T
   1119  f516
   1120  f516		       85 2b		      STA	HMCLR	; Before we process car movement
   1121  f518							;Read Fire Button before, will make it start the game for now.
   1122  f518				   StartGame
   1123  f518		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1124  f51a		       25 0d		      AND	INPT5	;3 player 1
   1125  f51c		       30 3a		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1126  f51e		       a5 8c		      LDA	FrameCount0
   1127  f520		       29 01		      AND	#%00000001
   1128  f522		       d0 34		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1129  f524		       a5 bd		      LDA	GameStatus	;3
   1130  f526		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1131  f528		       d0 2e		      BNE	SkipGameStart
   1132  f52a		       a5 c6		      LDA	GameMode
   1133  f52c		       c9 10		      CMP	#MAX_GAME_MODE
   1134  f52e		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1135  f530		       a9 00		      LDA	#0
   1136  f532		       85 c6		      STA	GameMode
   1137  f534		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1138  f536		       85 bc		      STA	SwitchDebounceCounter
   1139  f538		       4c 58 f5 	      JMP	SkipGameStart
   1140  f53b				   SetGameRunningIfBothPressing
   1141  f53b		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1142  f53d		       05 0d		      ORA	INPT5	;3 player 1
   1143  f53f		       30 17		      BMI	SkipGameStart
   1144  f541				   SetGameRunning
   1145  f541		       e6 bd		      INC	GameStatus
   1146  f543		       a9 00		      LDA	#0	;
   1147  f545		       85 8c		      STA	FrameCount0
   1148  f547		       85 8d		      STA	FrameCount1
   1149  f549		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1150  f54b		       85 c9		      STA	ScoreFontColor
   1151  f54d		       85 ca		      STA	OpScoreFontColor
   1152  f54f		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1153  f551		       85 cb		      STA	ScoreFontColorHoldChange
   1154  f553		       85 cc		      STA	OpScoreFontColorHoldChange
   1155  f555		       4c cc f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1156  f558				   SkipGameStart
   1157  f558
   1158  f558				   ReadSwitches
   1159  f558		       a6 bc		      LDX	SwitchDebounceCounter
   1160  f55a		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1161  f55c		       a9 01		      LDA	#%00000001
   1162  f55e		       2c 82 02 	      BIT	SWCHB
   1163  f561		       d0 07		      BNE	SkipReset
   1164  f563		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1165  f565		       85 bc		      STA	SwitchDebounceCounter
   1166  f567		       4c d4 f5 	      JMP	OverScanWaitBeforeReset
   1167  f56a				   SkipReset
   1168  f56a
   1169  f56a				   GameModeSelect
   1170  f56a		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1171  f56c		       d0 22		      BNE	SkipGameSelect
   1172  f56e		       a2 00		      LDX	#0
   1173  f570		       20 c5 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1174  f573		       e8		      INX
   1175  f574		       20 c5 f6 	      JSR	ConfigureDifficulty
   1176  f577				   ContinueGameSelect
   1177  f577		       a9 02		      LDA	#%00000010
   1178  f579		       2c 82 02 	      BIT	SWCHB
   1179  f57c		       d0 12		      BNE	SkipGameSelect
   1180  f57e		       a6 c6		      LDX	GameMode
   1181  f580		       e0 10		      CPX	#MAX_GAME_MODE
   1182  f582		       f0 04		      BEQ	ResetGameMode
   1183  f584		       e8		      INX
   1184  f585		       4c 8a f5 	      JMP	StoreGameMode
   1185  f588				   ResetGameMode
   1186  f588		       a2 00		      LDX	#0
   1187  f58a				   StoreGameMode
   1188  f58a		       86 c6		      STX	GameMode
   1189  f58c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1190  f58e		       85 bc		      STA	SwitchDebounceCounter
   1191  f590				   SkipGameSelect
   1192  f590		       4c 95 f5 	      JMP	EndReadSwitches
   1193  f593				   DecrementSwitchDebounceCounter
   1194  f593		       c6 bc		      DEC	SwitchDebounceCounter
   1195  f595				   EndReadSwitches
   1196  f595
   1197  f595				   DoNotTurnBeforeStart
   1198  f595							;STA HMCLR
   1199  f595		       a5 bd		      LDA	GameStatus
   1200  f597		       f0 33		      BEQ	OverScanWait
   1201  f599
   1202  f599							; Last thing, will overrride hmove
   1203  f599				   CallTestColisionAndMove
   1204  f599		       a2 00		      LDX	#0	; Player 0
   1205  f59b							; Colision with traffic, each player check different flags,
   1206  f59b		       a5 8c		      LDA	FrameCount0
   1207  f59d		       29 01		      AND	#%00000001
   1208  f59f		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1209  f5a1		       20 74 f8 	      JSR	IsOpponentColliding
   1210  f5a4		       05 01		      ORA	CXM1P
   1211  f5a6		       4a		      LSR
   1212  f5a7		       05 00		      ORA	CXM0P
   1213  f5a9		       05 02		      ORA	CXP0FB
   1214  f5ab							; ORA CXPPMM ; Collision between players will have its own rules
   1215  f5ab				   SkipColisionPlayer0		; Should not colide on opponent side.
   1216  f5ab		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1217  f5ad		       85 b2		      STA	Tmp2
   1218  f5af		       20 88 f8 	      JSR	TestCollisionAndMove
   1219  f5b2
   1220  f5b2		       e8		      INX		; player 1
   1221  f5b3		       a5 8c		      LDA	FrameCount0
   1222  f5b5		       29 01		      AND	#%00000001
   1223  f5b7		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1224  f5b9		       20 74 f8 	      JSR	IsOpponentColliding
   1225  f5bc		       05 00		      ORA	CXM0P
   1226  f5be		       4a		      LSR
   1227  f5bf		       05 01		      ORA	CXM1P
   1228  f5c1		       05 03		      ORA	CXP1FB
   1229  f5c3				   SkipColisionPlayer1
   1230  f5c3		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1231  f5c5		       85 b2		      STA	Tmp2
   1232  f5c7		       20 88 f8 	      JSR	TestCollisionAndMove
   1233  f5ca
   1234  f5ca				   ClearCollision
   1235  f5ca		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1236  f5cc
   1237  f5cc				   OverScanWait
   1238  f5cc		       ad 84 02 	      LDA	INTIM
   1239  f5cf		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1240  f5d1		       4c d8 f0 	      JMP	MainLoop
   1241  f5d4
   1242  f5d4				   OverScanWaitBeforeReset
   1243  f5d4		       ad 84 02 	      LDA	INTIM
   1244  f5d7		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1245  f5d9		       4c 14 f0 	      JMP	Start
   1246  f5dc
   1247  f5dc				   Subroutines
   1248  f5dc
   1249  f5dc							;X Player
   1250  f5dc							;Tmp1 TrafficOffset 2
   1251  f5dc				   ProcessSound
   1252  f5dc				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1253  f5dc		       b5 c9		      LDA	ScoreFontColor,X	;3
   1254  f5de		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1255  f5e0		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1256  f5e2		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1257  f5e4		       f0 29		      BEQ	PlayCheckpoint	;2
   1258  f5e6		       b5 8e		      LDA	CollisionCounter,X	;3
   1259  f5e8		       c9 e0		      CMP	#$E0	;2
   1260  f5ea		       b0 14		      BCS	PlayColision	;2
   1261  f5ec		       b5 cd		      LDA	NextCheckpoint,X	;3
   1262  f5ee		       38		      SEC		;2
   1263  f5ef		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1264  f5f1		       c9 02		      CMP	#$02	;2
   1265  f5f3		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1266  f5f5		       b5 b8		      LDA	CountdownTimer,X	; 3
   1267  f5f7		       f0 53		      BEQ	EngineSound	;2
   1268  f5f9		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1269  f5fb		       90 37		      BCC	PlayWarnTimeEnding	;4
   1270  f5fd		       4c 4c f6 	      JMP	EngineSound	;3
   1271  f600				   PlayColision
   1272  f600		       a9 1f		      LDA	#31
   1273  f602		       95 17		      STA	AUDF0,X
   1274  f604		       a9 08		      LDA	#8
   1275  f606		       95 15		      STA	AUDC0,X
   1276  f608		       a9 08		      LDA	#8
   1277  f60a		       95 19		      STA	AUDV0,X
   1278  f60c		       4c 73 f6 	      JMP	EndSound
   1279  f60f
   1280  f60f				   PlayCheckpoint
   1281  f60f		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1282  f611		       4a		      LSR		;2
   1283  f612		       4a		      LSR		;2
   1284  f613		       4a		      LSR		;2
   1285  f614		       95 17		      STA	AUDF0,X	;3
   1286  f616		       a9 0c		      LDA	#12	;2
   1287  f618		       95 15		      STA	AUDC0,X	;3
   1288  f61a		       a9 06		      LDA	#6	;2
   1289  f61c		       95 19		      STA	AUDV0,X	;3
   1290  f61e		       4c 73 f6 	      JMP	EndSound	;3
   1291  f621
   1292  f621				   PlayBeforeCheckpoint
   1293  f621		       a5 8c		      LDA	FrameCount0	;3
   1294  f623		       29 1c		      AND	#%00011100	;2
   1295  f625		       09 03		      ORA	#%00000011	;2
   1296  f627		       95 17		      STA	AUDF0,X	;3
   1297  f629		       a9 0c		      LDA	#12	;2
   1298  f62b		       95 15		      STA	AUDC0,X	;3
   1299  f62d		       a9 03		      LDA	#3	;2
   1300  f62f		       95 19		      STA	AUDV0,X	;3
   1301  f631		       4c 73 f6 	      JMP	EndSound	;3
   1302  f634
   1303  f634				   PlayWarnTimeEnding
   1304  f634		       a5 8c		      LDA	FrameCount0	;3
   1305  f636		       29 04		      AND	#%00000100	;2
   1306  f638		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1307  f63a		       18		      CLC		;2
   1308  f63b		       a9 0a		      LDA	#10	;2
   1309  f63d		       75 b8		      ADC	CountdownTimer,X	;2
   1310  f63f		       95 17		      STA	AUDF0,X	;3
   1311  f641		       a9 0c		      LDA	#12	;2
   1312  f643		       95 15		      STA	AUDC0,X	;3
   1313  f645		       a9 03		      LDA	#3	;2
   1314  f647		       95 19		      STA	AUDV0,X	;3
   1315  f649		       4c 73 f6 	      JMP	EndSound	;3
   1316  f64c
   1317  f64c				   EngineSound		;41
   1318  f64c		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1319  f64e		       95 19		      STA	AUDV0,X
   1320  f650		       b5 b8		      LDA	CountdownTimer,X	;3
   1321  f652		       f0 1b		      BEQ	EngineOff	;2
   1322  f654		       b4 d5		      LDY	Gear,X
   1323  f656		       b5 de		      LDA	Player0SpeedL,X	;3
   1324  f658		       4a		      LSR		;2
   1325  f659		       4a		      LSR		;2
   1326  f65a		       4a		      LSR		;2
   1327  f65b		       29 0f		      AND	#%00001111	;2
   1328  f65d		       85 b0		      STA	Tmp0	;3
   1329  f65f		       b9 43 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1330  f662		       38		      SEC		;2
   1331  f663		       e5 b0		      SBC	Tmp0	;3
   1332  f665		       95 17		      STA	AUDF0,X	;3
   1333  f667		       b9 3d ff 	      LDA	EngineSoundType,Y	;4
   1334  f66a		       95 15		      STA	AUDC0,X	;3
   1335  f66c		       4c 73 f6 	      JMP	EndEngineSound	;3
   1336  f66f				   EngineOff
   1337  f66f				   MuteSound
   1338  f66f		       a9 00		      LDA	#0
   1339  f671		       95 15		      STA	AUDC0,X
   1340  f673				   EndEngineSound
   1341  f673				   EndSound
   1342  f673		       60		      RTS
   1343  f674
   1344  f674				   ClearAll		; 58
   1345  f674		       a9 00		      LDA	#0	;2
   1346  f676		       85 1b		      STA	GRP0	;3
   1347  f678		       85 1c		      STA	GRP1	;3
   1348  f67a		       85 1f		      STA	ENABL	;3
   1349  f67c		       85 1d		      STA	ENAM0	;3
   1350  f67e		       85 1e		      STA	ENAM1	;3
   1351  f680		       85 80		      STA	GRP0Cache	;3
   1352  f682		       85 84		      STA	GRP1Cache	;3
   1353  f684		       85 85		      STA	ENABLCache	;3
   1354  f686		       85 86		      STA	ENAM0Cache	;3
   1355  f688		       85 87		      STA	ENAM1Cache	;3
   1356  f68a
   1357  f68a				   ClearPF		; 26
   1358  f68a		       a9 00		      LDA	#0	;2
   1359  f68c				   ClearPFSkipLDA0
   1360  f68c		       85 0d		      STA	PF0	;3
   1361  f68e		       85 0e		      STA	PF1	;3
   1362  f690		       85 0f		      STA	PF2	;3	
   1363  f692		       85 81		      STA	PF0Cache	;3
   1364  f694		       85 82		      STA	PF1Cache	;3
   1365  f696		       85 83		      STA	PF2Cache	;3 
   1366  f698		       60		      RTS		;6
   1367  f699				   EndClearAll
   1368  f699
   1369  f699				   LoadAll		; 48
   1370  f699		       a5 81		      LDA	PF0Cache	;3
   1371  f69b		       85 0d		      STA	PF0	;3
   1372  f69d
   1373  f69d		       a5 82		      LDA	PF1Cache	;3
   1374  f69f		       85 0e		      STA	PF1	;3
   1375  f6a1
   1376  f6a1		       a5 83		      LDA	PF2Cache	;3
   1377  f6a3		       85 0f		      STA	PF2	;3
   1378  f6a5
   1379  f6a5		       a5 84		      LDA	GRP1Cache	;3
   1380  f6a7		       85 1c		      STA	GRP1	;3
   1381  f6a9
   1382  f6a9		       a5 85		      LDA	ENABLCache	;3
   1383  f6ab		       85 1f		      STA	ENABL	;3
   1384  f6ad
   1385  f6ad		       a5 86		      LDA	ENAM0Cache	;3
   1386  f6af		       85 1d		      STA	ENAM0	;3
   1387  f6b1
   1388  f6b1		       a5 87		      LDA	ENAM1Cache	;3
   1389  f6b3		       85 1e		      STA	ENAM1	;3
   1390  f6b5
   1391  f6b5		       60		      RTS		;6
   1392  f6b6				   EndLoadAll
   1393  f6b6
   1394  f6b6				   NextDifficulty		;Is a SBR
   1395  f6b6		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1396  f6b8		       29 01		      AND	#%00000001
   1397  f6ba		       d0 24		      BNE	CheckRandomDifficulty
   1398  f6bc
   1399  f6bc		       b5 c4		      LDA	CurrentDifficulty,X
   1400  f6be		       18		      CLC
   1401  f6bf		       69 01		      ADC	#1
   1402  f6c1		       29 03		      AND	#%00000011	; 0 to 3
   1403  f6c3		       95 c4		      STA	CurrentDifficulty,X
   1404  f6c5
   1405  f6c5				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1406  f6c5		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1407  f6c7		       b9 bf ff 	      LDA	TrafficChanceTable,Y
   1408  f6ca		       95 be		      STA	TrafficChance,X
   1409  f6cc		       b9 bb ff 	      LDA	TrafficColorTable,Y
   1410  f6cf		       95 c2		      STA	TrafficColor,X
   1411  f6d1
   1412  f6d1		       a5 c6		      LDA	GameMode	;
   1413  f6d3		       29 01		      AND	#%00000001
   1414  f6d5		       f0 03		      BEQ	UseNextDifficultyTime
   1415  f6d7		       4c db f6 	      JMP	StoreDifficultyTime
   1416  f6da				   UseNextDifficultyTime
   1417  f6da		       c8		      INY
   1418  f6db				   StoreDifficultyTime
   1419  f6db		       b9 c3 ff 	      LDA	TrafficTimeTable,Y
   1420  f6de		       95 c0		      STA	CheckpointTime,X
   1421  f6e0
   1422  f6e0				   CheckRandomDifficulty
   1423  f6e0		       a5 c6		      LDA	GameMode
   1424  f6e2		       29 08		      AND	#%00001000	; Random difficulties
   1425  f6e4		       f0 26		      BEQ	ReturnFromNextDifficulty
   1426  f6e6				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1427  f6e6		       a5 f2		      LDA	IsOpponentInFront
   1428  f6e8		       30 12		      BMI	UseOpponentChance
   1429  f6ea		       a5 cf		      LDA	OpponentLine	; Same line
   1430  f6ec		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1431  f6ee		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1432  f6f0		       a4 8c		      LDY	FrameCount0
   1433  f6f2		       b9 00 fe 	      LDA	AesTable,Y
   1434  f6f5							;EOR TrafficChance, no need, lets make life simple
   1435  f6f5		       29 3f		      AND	#%00111111
   1436  f6f7		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1437  f6f9		       4c 0c f7 	      JMP	ReturnFromNextDifficulty
   1438  f6fc				   UseOpponentChance
   1439  f6fc		       8a		      TXA
   1440  f6fd		       49 01		      EOR	#%00000001	; Reverts the player
   1441  f6ff		       aa		      TAX
   1442  f700		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1443  f702		       85 b3		      STA	Tmp3
   1444  f704		       8a		      TXA
   1445  f705		       49 01		      EOR	#%00000001	; Restors the player
   1446  f707		       aa		      TAX
   1447  f708		       a5 b3		      LDA	Tmp3
   1448  f70a		       95 be		      STA	TrafficChance,X
   1449  f70c
   1450  f70c				   ReturnFromNextDifficulty
   1451  f70c		       60		      RTS
   1452  f70d
   1453  f70d				   DefaultOffsets
   1454  f70d		       a9 20		      LDA	#$20
   1455  f70f		       85 96		      STA	TrafficOffset1 + 2
   1456  f711		       85 a6		      STA	OpTrafficOffset1 + 2
   1457  f713		       a9 40		      LDA	#$40
   1458  f715		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1459  f717		       85 aa		      STA	OpTrafficOffset2 + 2
   1460  f719		       a9 60		      LDA	#$60
   1461  f71b		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1462  f71d		       85 ae		      STA	OpTrafficOffset3 + 2
   1463  f71f		       a9 80		      LDA	#$80
   1464  f721		       60		      RTS
   1465  f722
   1466  f722				   PrintStaticText		; Preload X with the offset referent to StaticText
   1467  f722		       bd 00 ff 	      LDA	StaticText,X
   1468  f725		       85 d0		      STA	ScoreD0
   1469  f727		       e8		      INX
   1470  f728		       bd 00 ff 	      LDA	StaticText,X
   1471  f72b		       85 d1		      STA	ScoreD1
   1472  f72d		       e8		      INX
   1473  f72e		       bd 00 ff 	      LDA	StaticText,X
   1474  f731		       85 d2		      STA	ScoreD2
   1475  f733		       e8		      INX
   1476  f734		       bd 00 ff 	      LDA	StaticText,X
   1477  f737		       85 d3		      STA	ScoreD3
   1478  f739		       e8		      INX
   1479  f73a		       bd 00 ff 	      LDA	StaticText,X
   1480  f73d		       85 d4		      STA	ScoreD4
   1481  f73f		       60		      RTS
   1482  f740
   1483  f740				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1484  f740		       a2 00		      LDX	#0
   1485  f742		       a0 04		      LDY	#FONT_OFFSET
   1486  f744
   1487  f744				   ScoreLoop		; 20 
   1488  f744		       85 02		      STA	WSYNC	;2
   1489  f746		       85 2a		      STA	HMOVE
   1490  f748
   1491  f748		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1492  f74a		       85 0d		      STA	PF0	;3
   1493  f74c
   1494  f74c		       a5 82		      LDA	PF1Cache	;3
   1495  f74e		       85 0e		      STA	PF1	;3
   1496  f750
   1497  f750		       a5 83		      LDA	PF2Cache	;3
   1498  f752		       85 0f		      STA	PF2	;3
   1499  f754
   1500  f754				   DrawScoreD0		; 15
   1501  f754		       a6 d0		      LDX	ScoreD0	; 3
   1502  f756		       bd 00 fd 	      LDA	Font,X	;4
   1503  f759		       85 81		      STA	PF0Cache	;3
   1504  f75b		       c6 d0		      DEC	ScoreD0	;5
   1505  f75d
   1506  f75d				   DrawScoreD1		; 23	
   1507  f75d		       a6 d1		      LDX	ScoreD1	; 3
   1508  f75f		       bd 00 fd 	      LDA	Font,X	;4
   1509  f762		       0a		      ASL		;2
   1510  f763		       0a		      ASL		;2
   1511  f764		       0a		      ASL		;2
   1512  f765		       0a		      ASL		;2
   1513  f766		       85 82		      STA	PF1Cache	;3
   1514  f768		       c6 d1		      DEC	ScoreD1	;5
   1515  f76a
   1516  f76a				   DrawScoreD2		; 20
   1517  f76a		       a6 d2		      LDX	ScoreD2	; 3
   1518  f76c		       bd 00 fd 	      LDA	Font,X	;4
   1519  f76f		       29 0f		      AND	#%00001111	;2
   1520  f771		       05 82		      ORA	PF1Cache	;3
   1521  f773		       85 82		      STA	PF1Cache	;3
   1522  f775		       c6 d2		      DEC	ScoreD2	;5
   1523  f777
   1524  f777				   DrawScoreD3		; 23
   1525  f777		       a6 d3		      LDX	ScoreD3	; 3
   1526  f779		       bd 00 fd 	      LDA	Font,X	;4
   1527  f77c		       4a		      LSR		;2
   1528  f77d		       4a		      LSR		;2
   1529  f77e		       4a		      LSR		;2
   1530  f77f		       4a		      LSR		;2
   1531  f780		       85 83		      STA	PF2Cache	;3
   1532  f782		       c6 d3		      DEC	ScoreD3	;5
   1533  f784
   1534  f784				   DrawScoreD4		; 20
   1535  f784		       a6 d4		      LDX	ScoreD4	; 3
   1536  f786		       bd 00 fd 	      LDA	Font,X	;4
   1537  f789		       29 f0		      AND	#%11110000	;2
   1538  f78b		       05 83		      ORA	PF2Cache	;3
   1539  f78d		       85 83		      STA	PF2Cache	;3
   1540  f78f		       c6 d4		      DEC	ScoreD4	;5
   1541  f791
   1542  f791
   1543  f791		       88		      DEY		;2
   1544  f792		       10 b0		      BPL	ScoreLoop	;4
   1545  f794
   1546  f794		       85 02		      STA	WSYNC
   1547  f796		       85 2a		      STA	HMOVE
   1548  f798		       20 99 f6 	      JSR	LoadAll
   1549  f79b		       60		      RTS		; 6
   1550  f79c
   1551  f79c				   WaitForVblankEnd
   1552  f79c		       ad 84 02 	      LDA	INTIM
   1553  f79f		       d0 fb		      BNE	WaitForVblankEnd
   1554  f7a1		       85 02		      STA	WSYNC
   1555  f7a3		       85 01		      STA	VBLANK
   1556  f7a5		       60		      RTS
   1557  f7a6
   1558  f7a6				   Sleep4Lines
   1559  f7a6		       85 02		      STA	WSYNC
   1560  f7a8		       85 02		      STA	WSYNC
   1561  f7aa		       85 02		      STA	WSYNC
   1562  f7ac		       85 02		      STA	WSYNC
   1563  f7ae		       60		      RTS
   1564  f7af
   1565  f7af				   Sleep8Lines
   1566  f7af		       20 a6 f7 	      JSR	Sleep4Lines
   1567  f7b2		       20 a6 f7 	      JSR	Sleep4Lines
   1568  f7b5		       60		      RTS
   1569  f7b6
   1570  f7b6				   Sleep32Lines
   1571  f7b6		       20 af f7 	      JSR	Sleep8Lines
   1572  f7b9		       20 af f7 	      JSR	Sleep8Lines
   1573  f7bc		       20 af f7 	      JSR	Sleep8Lines
   1574  f7bf		       20 af f7 	      JSR	Sleep8Lines
   1575  f7c2		       60		      RTS
   1576  f7c3
   1577  f7c3							;X = number of WSYNC HMOVE to run
   1578  f7c3				   HMoveXTimes
   1579  f7c3		       85 02		      STA	WSYNC	;3
   1580  f7c5		       85 2a		      STA	HMOVE	; 3/10 
   1581  f7c7		       ca		      DEX
   1582  f7c8		       d0 f9		      BNE	HMoveXTimes
   1583  f7ca		       60		      RTS
   1584  f7cb
   1585  f7cb				   ConfigureCarSprites
   1586  f7cb		       a5 8c		      LDA	FrameCount0
   1587  f7cd		       29 01		      AND	#%00000001
   1588  f7cf		       d0 0b		      BNE	LoadForRightScreenSprites
   1589  f7d1				   LoadForLeftScreenSprites
   1590  f7d1		       a5 c7		      LDA	CurrentCarId
   1591  f7d3		       85 b0		      STA	Tmp0
   1592  f7d5		       a5 c8		      LDA	OpCurrentCarId
   1593  f7d7		       85 b1		      STA	Tmp1
   1594  f7d9		       4c e4 f7 	      JMP	LoadCarSpritesFromIds
   1595  f7dc				   LoadForRightScreenSprites
   1596  f7dc		       a5 c7		      LDA	CurrentCarId
   1597  f7de		       85 b1		      STA	Tmp1
   1598  f7e0		       a5 c8		      LDA	OpCurrentCarId
   1599  f7e2		       85 b0		      STA	Tmp0
   1600  f7e4
   1601  f7e4				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1602  f7e4		       a4 b0		      LDY	Tmp0
   1603  f7e6		       b9 95 ff 	      LDA	CarIdToSpriteAddressL,Y
   1604  f7e9		       85 d7		      STA	CarSpritePointerL
   1605  f7eb		       b9 99 ff 	      LDA	CarIdToSpriteAddressH,Y
   1606  f7ee		       85 d8		      STA	CarSpritePointerH
   1607  f7f0				   ConfigureOpponentCarSprite
   1608  f7f0		       a4 b1		      LDY	Tmp1
   1609  f7f2		       b9 9d ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1610  f7f5		       85 d9		      STA	EnemyCarSpritePointerL
   1611  f7f7		       b9 a1 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1612  f7fa		       85 da		      STA	EnemyCarSpritePointerH
   1613  f7fc		       60		      RTS
   1614  f7fd
   1615  f7fd							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1616  f7fd							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1617  f7fd							; Tmp0 Binary Number
   1618  f7fd							; Result Returned in Tmp 1 and A
   1619  f7fd				   BINBCD8
   1620  f7fd		       f8		      SED		; Switch to decimal mode
   1621  f7fe		       a9 00		      LDA	#0	; Ensure the result is clear
   1622  f800		       85 b1		      STA	Tmp1+0
   1623  f802							;STA Tmp1+1
   1624  f802		       a2 08		      LDX	#8	; The number of source bits
   1625  f804
   1626  f804				   CNVBIT
   1627  f804		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1628  f806		       a5 b1		      LDA	Tmp1+0	; And add into result
   1629  f808		       65 b1		      ADC	Tmp1+0
   1630  f80a		       85 b1		      STA	Tmp1+0
   1631  f80c							;Not needed now, 0 to 99 is enought for timer!
   1632  f80c							; LDA Tmp1+1	; propagating any carry
   1633  f80c							; ADC Tmp1+1
   1634  f80c							; STA Tmp1+1
   1635  f80c		       ca		      DEX		; And repeat for next bit
   1636  f80d		       d0 f5		      BNE	CNVBIT
   1637  f80f		       d8		      CLD		; Back to binary
   1638  f810
   1639  f810		       60		      RTS		; All Done.
   1640  f811
   1641  f811							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1642  f811							;X player 0 or 1
   1643  f811				   SelectCarWithDpad
   1644  f811		       a0 03		      LDY	#3
   1645  f813				   SelectCarWithDpadLoop
   1646  f813		       ad 80 02 	      LDA	SWCHA
   1647  f816		       25 b0		      AND	Tmp0
   1648  f818		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1649  f81a		       98		      TYA
   1650  f81b		       95 c7		      STA	CurrentCarId,X
   1651  f81d				   ContinueSelectCarWithDpadLoop
   1652  f81d		       46 b0		      LSR	Tmp0
   1653  f81f		       88		      DEY
   1654  f820		       10 f1		      BPL	SelectCarWithDpadLoop
   1655  f822		       60		      RTS
   1656  f823
   1657  f823				   ProcessOpponentLine
   1658  f823		       a5 8c		      LDA	FrameCount0
   1659  f825		       29 01		      AND	#%00000001
   1660  f827		       38		      SEC
   1661  f828		       d0 15		      BNE	Player0IsOpponent
   1662  f82a				   Player1IsOpponent		; Code could be reused?
   1663  f82a		       a5 91		      LDA	TrafficOffset0 + 1
   1664  f82c		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1665  f82e		       85 b0		      STA	Tmp0
   1666  f830		       a5 92		      LDA	TrafficOffset0 + 2
   1667  f832		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1668  f834		       85 b1		      STA	Tmp1
   1669  f836		       a5 ba		      LDA	Traffic0Msb
   1670  f838		       e5 bb		      SBC	OpTraffic0Msb
   1671  f83a		       85 b2		      STA	Tmp2
   1672  f83c		       4c 51 f8 	      JMP	StoreInFrontPlayer
   1673  f83f				   Player0IsOpponent
   1674  f83f		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1675  f841		       e5 91		      SBC	TrafficOffset0 + 1
   1676  f843		       85 b0		      STA	Tmp0
   1677  f845		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1678  f847		       e5 92		      SBC	TrafficOffset0 + 2
   1679  f849		       85 b1		      STA	Tmp1
   1680  f84b		       a5 bb		      LDA	OpTraffic0Msb
   1681  f84d		       e5 ba		      SBC	Traffic0Msb
   1682  f84f		       85 b2		      STA	Tmp2
   1683  f851
   1684  f851				   StoreInFrontPlayer
   1685  f851		       85 f2		      STA	IsOpponentInFront
   1686  f853
   1687  f853				   AddOffsetToOpponentLine
   1688  f853		       18		      CLC
   1689  f854		       a5 b0		      LDA	Tmp0
   1690  f856		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1691  f858		       85 b0		      STA	Tmp0
   1692  f85a		       a5 b1		      LDA	Tmp1
   1693  f85c		       69 00		      ADC	#0
   1694  f85e		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1695  f860		       a5 b2		      LDA	Tmp2
   1696  f862		       69 00		      ADC	#0
   1697  f864		       05 b1		      ORA	Tmp1
   1698  f866		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1699  f868				   OpponentNotVisible
   1700  f868		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1701  f86a		       85 cf		      STA	OpponentLine
   1702  f86c		       4c 73 f8 	      JMP	ReturnFromProcessOpponentLine
   1703  f86f				   OpponentVisible
   1704  f86f		       a5 b0		      LDA	Tmp0
   1705  f871		       85 cf		      STA	OpponentLine
   1706  f873				   ReturnFromProcessOpponentLine
   1707  f873		       60		      RTS
   1708  f874
   1709  f874							; Value stored in A
   1710  f874				   IsOpponentColliding
   1711  f874							;Any non default state, opponent do not colide
   1712  f874		       a5 8e		      LDA	CollisionCounter
   1713  f876		       05 8f		      ORA	OpCollisionCounter
   1714  f878		       05 cb		      ORA	ScoreFontColorHoldChange
   1715  f87a		       05 cc		      ORA	OpScoreFontColorHoldChange
   1716  f87c		       d0 07		      BNE	OpponentNotColliding
   1717  f87e		       a5 f2		      LDA	IsOpponentInFront
   1718  f880		       25 07		      AND	CXPPMM
   1719  f882		       4c 87 f8 	      JMP	ReturnIsOpponentColliding
   1720  f885				   OpponentNotColliding
   1721  f885		       a9 00		      LDA	#0
   1722  f887				   ReturnIsOpponentColliding
   1723  f887		       60		      RTS
   1724  f888
   1725  f888
   1726  f888							; Movement and colision are binded because the car must be moved after duplicate size.
   1727  f888							; Use X for the player
   1728  f888							; Tmp2 Traffic colision result
   1729  f888				   TestCollisionAndMove
   1730  f888							; Until store the movemnt, Y contains the value to be stored.
   1731  f888							; see if player0 colides with the rest
   1732  f888		       a5 b2		      LDA	Tmp2
   1733  f88a		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1734  f88c		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1735  f88e		       d0 25		      BNE	NoCollision
   1736  f890		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1737  f892		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1738  f894		       f0 1f		      BEQ	NoCollision
   1739  f896		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1740  f898		       f0 1b		      BEQ	NoCollision
   1741  f89a		       a9 ff		      LDA	#COLLISION_FRAMES
   1742  f89c		       95 8e		      STA	CollisionCounter,X
   1743  f89e		       b5 f0		      LDA	Player0SpeedH,X
   1744  f8a0		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1745  f8a2		       a9 10		      LDA	#COLLISION_SPEED_L
   1746  f8a4		       d5 de		      CMP	Player0SpeedL,X
   1747  f8a6		       b0 04		      BCS	SkipSetColisionSpeedL
   1748  f8a8				   SetColisionSpeedL
   1749  f8a8		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1750  f8aa		       95 de		      STA	Player0SpeedL,X
   1751  f8ac				   SkipSetColisionSpeedL
   1752  f8ac		       a9 00		      LDA	#0
   1753  f8ae		       95 f0		      STA	Player0SpeedH,X
   1754  f8b0		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1755  f8b2		       4c 05 f9 	      JMP	StoreHMove	; We keep position consistent
   1756  f8b5				   NoCollision
   1757  f8b5
   1758  f8b5				   DecrementCollision
   1759  f8b5		       b5 8e		      LDA	CollisionCounter,X
   1760  f8b7		       f0 06		      BEQ	FinishDecrementCollision
   1761  f8b9		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1762  f8bb		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1763  f8bd		       d6 8e		      DEC	CollisionCounter,X
   1764  f8bf				   FinishDecrementCollision
   1765  f8bf
   1766  f8bf				   ResetPlayerSize
   1767  f8bf		       d0 04		      BNE	FinishResetPlayerSize
   1768  f8c1		       a9 30		      LDA	#%00110000
   1769  f8c3		       95 04		      STA	NUSIZ0,X	;
   1770  f8c5				   FinishResetPlayerSize
   1771  f8c5
   1772  f8c5				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1773  f8c5		       b5 8e		      LDA	CollisionCounter,X
   1774  f8c7		       c9 01		      CMP	#1	; Last frame before reset
   1775  f8c9		       d0 05		      BNE	SkipResetPlayerPosition
   1776  f8cb		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1777  f8cd		       4c 05 f9 	      JMP	StoreHMove
   1778  f8d0				   SkipResetPlayerPosition
   1779  f8d0
   1780  f8d0				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1781  f8d0		       b5 c7		      LDA	CurrentCarId,X
   1782  f8d2		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1783  f8d4		       d0 08		      BNE	PrepareReadXAxis
   1784  f8d6		       a0 00		      LDY	#0
   1785  f8d8		       a5 8c		      LDA	FrameCount0
   1786  f8da		       29 01		      AND	#DRAGSTER_TURN_MASK
   1787  f8dc		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1788  f8de
   1789  f8de				   PrepareReadXAxis
   1790  f8de		       a0 00		      LDY	#0
   1791  f8e0		       b5 b6		      LDA	Player0X,X
   1792  f8e2				   BeginReadLeft
   1793  f8e2		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1794  f8e4		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1795  f8e7		       2c 80 02 	      BIT	SWCHA
   1796  f8ea		       d0 07		      BNE	SkipMoveLeft
   1797  f8ec		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1798  f8ee		       d6 b6		      DEC	Player0X,X
   1799  f8f0		       4c 05 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1800  f8f3				   SkipMoveLeft
   1801  f8f3				   BeginReadRight
   1802  f8f3		       b5 b6		      LDA	Player0X,X
   1803  f8f5		       c9 2c		      CMP	#PLAYER_MAX_X
   1804  f8f7		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1805  f8f9		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1806  f8fc		       2c 80 02 	      BIT	SWCHA
   1807  f8ff		       d0 04		      BNE	SkipMoveRight
   1808  f901		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1809  f903		       f6 b6		      INC	Player0X,X
   1810  f905				   SkipMoveRight
   1811  f905				   StoreHMove
   1812  f905		       94 20		      STY	HMP0,X	;set the move for player 0
   1813  f907
   1814  f907		       60		      RTS
   1815  f908
   1816  f908							; X Traffic offset 4 bits each lane, 4 lanes per player
   1817  f908							; Tmp3 Max X offset
   1818  f908							; Tmp4 Max Player Speed L
   1819  f908							; Tmp5 Max Player Speed H
   1820  f908				   UpdateOffsets
   1821  f908		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1822  f90a		       a5 c6		      LDA	GameMode
   1823  f90c		       29 04		      AND	#%00000100	; GameModes with high delta
   1824  f90e		       f0 02		      BEQ	UpdateOffsetsLoop
   1825  f910		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1826  f912
   1827  f912				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1828  f912		       38		      SEC
   1829  f913		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1830  f915		       f9 81 ff 	      SBC	TrafficSpeeds,Y
   1831  f918		       85 b0		      STA	Tmp0
   1832  f91a		       c8		      INY
   1833  f91b		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1834  f91d		       f9 81 ff 	      SBC	TrafficSpeeds,Y
   1835  f920		       85 b1		      STA	Tmp1
   1836  f922		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1837  f924		       e9 00		      SBC	#0
   1838  f926		       85 b2		      STA	Tmp2
   1839  f928
   1840  f928				   AddsTheResult
   1841  f928		       18		      CLC
   1842  f929		       a5 b0		      LDA	Tmp0
   1843  f92b		       75 90		      ADC	TrafficOffset0,X
   1844  f92d		       95 90		      STA	TrafficOffset0,X
   1845  f92f		       e8		      INX
   1846  f930		       a5 b1		      LDA	Tmp1
   1847  f932		       75 90		      ADC	TrafficOffset0,X
   1848  f934		       95 90		      STA	TrafficOffset0,X
   1849  f936		       e8		      INX
   1850  f937		       a5 b2		      LDA	Tmp2	; Carry
   1851  f939		       75 90		      ADC	TrafficOffset0,X
   1852  f93b		       95 90		      STA	TrafficOffset0,X
   1853  f93d		       90 0f		      BCC	CalculateOffsetCache
   1854  f93f				   CalculatePlayer0Msb
   1855  f93f		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1856  f941		       d0 05		      BNE	CalculatePlayer1Msb
   1857  f943		       e6 ba		      INC	Traffic0Msb
   1858  f945		       4c 4e f9 	      JMP	CalculateOffsetCache
   1859  f948				   CalculatePlayer1Msb
   1860  f948		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1861  f94a		       d0 02		      BNE	CalculateOffsetCache
   1862  f94c		       e6 bb		      INC	OpTraffic0Msb
   1863  f94e
   1864  f94e				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1865  f94e		       e8		      INX
   1866  f94f		       38		      SEC
   1867  f950		       69 00		      ADC	#0	;Increment by one
   1868  f952		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1869  f954
   1870  f954				   PrepareNextUpdateLoop
   1871  f954		       c8		      INY
   1872  f955		       e8		      INX
   1873  f956		       e4 b3		      CPX	Tmp3	; Max X offset
   1874  f958		       d0 b8		      BNE	UpdateOffsetsLoop
   1875  f95a		       60		      RTS
   1876  f95b
   1877  f95b							; X Player 0 or 1
   1878  f95b				   ProcessSpeed
   1879  f95b				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1880  f95b		       a9 00		      LDA	#0
   1881  f95d		       85 b0		      STA	Tmp0	; Break speed
   1882  f95f		       b5 b8		      LDA	CountdownTimer,X
   1883  f961		       d0 0d		      BNE	Break
   1884  f963		       b4 c7		      LDY	CurrentCarId,X
   1885  f965		       a5 8c		      LDA	FrameCount0
   1886  f967		       39 a9 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1887  f96a		       d0 04		      BNE	Break
   1888  f96c		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1889  f96e		       85 b0		      STA	Tmp0
   1890  f970
   1891  f970				   Break
   1892  f970		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1893  f973		       2c 80 02 	      BIT	SWCHA
   1894  f976		       d0 12		      BNE	BreakNonZero
   1895  f978		       b5 0c		      LDA	INPT4,X	;3
   1896  f97a		       10 0a		      BPL	BreakWhileAccelerating
   1897  f97c		       b4 d5		      LDY	Gear,X
   1898  f97e		       b9 b5 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1899  f981		       85 b0		      STA	Tmp0
   1900  f983		       4c 8a f9 	      JMP	BreakNonZero
   1901  f986				   BreakWhileAccelerating		; Allow better control while breaking.
   1902  f986		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1903  f988		       85 b0		      STA	Tmp0
   1904  f98a
   1905  f98a				   BreakNonZero
   1906  f98a		       a5 b0		      LDA	Tmp0
   1907  f98c		       f0 29		      BEQ	SkipBreak
   1908  f98e
   1909  f98e				   DecreaseSpeed
   1910  f98e		       38		      SEC
   1911  f98f		       b5 de		      LDA	Player0SpeedL,X
   1912  f991		       e5 b0		      SBC	Tmp0
   1913  f993		       95 de		      STA	Player0SpeedL,X
   1914  f995		       b5 f0		      LDA	Player0SpeedH,X
   1915  f997		       e9 00		      SBC	#0
   1916  f999		       95 f0		      STA	Player0SpeedH,X
   1917  f99b
   1918  f99b				   CheckMinSpeed
   1919  f99b		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1920  f99d		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1921  f99f		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1922  f9a1		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1923  f9a3
   1924  f9a3				   CompareLBreakSpeed
   1925  f9a3		       b5 de		      LDA	Player0SpeedL,X
   1926  f9a5		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1927  f9a7		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1928  f9a9		       4c b4 f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1929  f9ac
   1930  f9ac				   ResetMinSpeed
   1931  f9ac		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1932  f9ae		       95 f0		      STA	Player0SpeedH,X
   1933  f9b0		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1934  f9b2		       95 de		      STA	Player0SpeedL,X
   1935  f9b4
   1936  f9b4				   SkipAccelerateIfBreaking
   1937  f9b4		       4c fd f9 	      JMP	SkipAccelerate
   1938  f9b7				   SkipBreak
   1939  f9b7
   1940  f9b7				   Acelerates
   1941  f9b7		       b5 b8		      LDA	CountdownTimer,X
   1942  f9b9		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1943  f9bb
   1944  f9bb				   ContinueAccelerateTest
   1945  f9bb		       b5 0c		      LDA	INPT4,X	;3
   1946  f9bd		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1947  f9bf		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1948  f9c2		       2c 80 02 	      BIT	SWCHA
   1949  f9c5		       d0 36		      BNE	SkipAccelerate
   1950  f9c7
   1951  f9c7				   IncreaseCarSpeed
   1952  f9c7		       a9 02		      LDA	#2
   1953  f9c9		       85 b0		      STA	Tmp0	; Loop control
   1954  f9cb		       b4 c7		      LDY	CurrentCarId,X
   1955  f9cd				   IncreaseCarSpeedLoop
   1956  f9cd							;Adds speed
   1957  f9cd		       18		      CLC
   1958  f9ce		       b5 dc		      LDA	AccelerateBuffer,X
   1959  f9d0		       79 a5 ff 	      ADC	CarIdToAccelerateSpeed,Y
   1960  f9d3		       95 dc		      STA	AccelerateBuffer,X
   1961  f9d5		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1962  f9d7		       f6 de		      INC	Player0SpeedL,X
   1963  f9d9		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1964  f9db		       f6 f0		      INC	Player0SpeedH,X
   1965  f9dd				   ContinueIncreaseSpeedLoop
   1966  f9dd		       c6 b0		      DEC	Tmp0
   1967  f9df		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1968  f9e1				   SkipIncreaseCarSpeed
   1969  f9e1
   1970  f9e1				   CheckIfAlreadyMaxSpeed
   1971  f9e1		       b5 f0		      LDA	Player0SpeedH,X
   1972  f9e3		       c9 02		      CMP	#CAR_MAX_SPEED_H
   1973  f9e5		       90 16		      BCC	SkipAccelerate	; less than my max speed
   1974  f9e7		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   1975  f9e9							;High bit is max, compare the low
   1976  f9e9		       b4 c7		      LDY	CurrentCarId,X
   1977  f9eb		       b5 de		      LDA	Player0SpeedL,X
   1978  f9ed		       d9 ad ff 	      CMP	CarIdToMaxSpeedL,Y
   1979  f9f0		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   1980  f9f2							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   1981  f9f2
   1982  f9f2				   ResetToMaxSpeed		; Speed is more, or is already max
   1983  f9f2		       a9 02		      LDA	#CAR_MAX_SPEED_H
   1984  f9f4		       95 f0		      STA	Player0SpeedH,X
   1985  f9f6		       b4 c7		      LDY	CurrentCarId,X
   1986  f9f8		       b9 ad ff 	      LDA	CarIdToMaxSpeedL,Y
   1987  f9fb		       95 de		      STA	Player0SpeedL,X
   1988  f9fd				   SkipAccelerate
   1989  f9fd		       60		      RTS
   1990  f9fe
   1991  f9fe							;Tmp0 Traffic Offset to compare with next checkpoint
   1992  f9fe				   ProcessPlayerStatus
   1993  f9fe				   IsGameOver
   1994  f9fe		       b5 b8		      LDA	CountdownTimer,X
   1995  fa00		       15 de		      ORA	Player0SpeedL,X
   1996  fa02		       15 f0		      ORA	Player0SpeedH,X
   1997  fa04		       d0 0b		      BNE	IsCheckpoint
   1998  fa06		       a9 01		      LDA	#1
   1999  fa08		       95 cb		      STA	ScoreFontColorHoldChange,X
   2000  fa0a		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2001  fa0c		       95 c9		      STA	ScoreFontColor,X
   2002  fa0e		       4c 43 fa 	      JMP	SkipIsTimeOver
   2003  fa11
   2004  fa11				   IsCheckpoint
   2005  fa11		       b5 cd		      LDA	NextCheckpoint,X
   2006  fa13		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2007  fa15		       d0 20		      BNE	SkipIsCheckpoint
   2008  fa17		       18		      CLC
   2009  fa18		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2010  fa1a		       95 cd		      STA	NextCheckpoint,X
   2011  fa1c		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2012  fa1e		       95 c9		      STA	ScoreFontColor,X
   2013  fa20		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2014  fa22		       95 cb		      STA	ScoreFontColorHoldChange,X
   2015  fa24		       b5 b8		      LDA	CountdownTimer,X
   2016  fa26		       18		      CLC
   2017  fa27		       75 c0		      ADC	CheckpointTime,X
   2018  fa29		       95 b8		      STA	CountdownTimer,X
   2019  fa2b		       90 04		      BCC	JumpSkipTimeOver
   2020  fa2d		       a9 ff		      LDA	#$FF
   2021  fa2f		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2022  fa31				   JumpSkipTimeOver
   2023  fa31		       20 b6 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2024  fa34		       4c 43 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2025  fa37				   SkipIsCheckpoint
   2026  fa37
   2027  fa37				   IsTimeOver
   2028  fa37		       b5 b8		      LDA	CountdownTimer,X
   2029  fa39		       d0 08		      BNE	SkipIsTimeOver
   2030  fa3b		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2031  fa3d		       95 cb		      STA	ScoreFontColorHoldChange,X
   2032  fa3f		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2033  fa41		       95 c9		      STA	ScoreFontColor,X
   2034  fa43				   SkipIsTimeOver
   2035  fa43		       60		      RTS
   2036  fa44
   2037  fa44
   2038  fa44				   EverySecond		; 64 frames to be more precise
   2039  fa44		       a9 3f		      LDA	#%00111111
   2040  fa46		       25 8c		      AND	FrameCount0
   2041  fa48		       d0 06		      BNE	SkipEverySecondAction
   2042  fa4a		       d5 b8		      CMP	CountdownTimer,X
   2043  fa4c		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2044  fa4e		       d6 b8		      DEC	CountdownTimer,X
   2045  fa50				   SkipEverySecondAction
   2046  fa50		       60		      RTS
   2047  fa51
   2048  fa51				   CalculateGear
   2049  fa51		       b5 de		      LDA	Player0SpeedL,X	;3
   2050  fa53		       29 80		      AND	#%10000000	;2
   2051  fa55		       15 f0		      ORA	Player0SpeedH,X	;3
   2052  fa57		       18		      CLC		;2
   2053  fa58		       2a		      ROL		;2
   2054  fa59		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2055  fa5b		       95 d5		      STA	Gear,X
   2056  fa5d		       60		      RTS
   2057  fa5e
   2058  fa5e				   ProcessScoreFontColor
   2059  fa5e		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2060  fa60		       f0 06		      BEQ	ResetScoreFontColor
   2061  fa62		       88		      DEY
   2062  fa63		       94 cb		      STY	ScoreFontColorHoldChange,X
   2063  fa65		       4c 6d fa 	      JMP	SkipScoreFontColor
   2064  fa68				   ResetScoreFontColor
   2065  fa68		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2066  fa6b		       95 c9		      STA	ScoreFontColor,X
   2067  fa6d				   SkipScoreFontColor
   2068  fa6d		       60		      RTS
   2069  fa6e
   2070  fa6e							; Moved here because of rom space.
   2071  fa6e							; The only SBR in constants space
   2072  fa6e				   DrawQrCode
   2073  fa6e		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2074  fa70		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2075  fa72		       a9 01		      LDA	#%00000001	; Mirror playfield
   2076  fa74		       85 0a		      STA	CTRLPF
   2077  fa76		       20 74 f6 	      JSR	ClearAll	; To be 100 sure!
   2078  fa79		       ad 82 02 	      LDA	SWCHB
   2079  fa7c		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2080  fa7e		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2081  fa80		       f0 07		      BEQ	StoreReversedQrCode
   2082  fa82		       86 09		      STX	COLUBK
   2083  fa84		       84 08		      STY	COLUPF
   2084  fa86		       4c 8d fa 	      JMP	ContinueQrCode
   2085  fa89				   StoreReversedQrCode
   2086  fa89		       86 08		      STX	COLUPF
   2087  fa8b		       84 09		      STY	COLUBK
   2088  fa8d
   2089  fa8d				   ContinueQrCode
   2090  fa8d		       a2 09		      LDX	#9
   2091  fa8f		       20 c3 f7 	      JSR	HMoveXTimes
   2092  fa92		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2093  fa94		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2094  fa96		       20 9c f7 	      JSR	WaitForVblankEnd
   2095  fa99		       20 af f7 	      JSR	Sleep8Lines
   2096  fa9c		       20 af f7 	      JSR	Sleep8Lines
   2097  fa9f		       20 af f7 	      JSR	Sleep8Lines
   2098  faa2
   2099  faa2				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2100  faa2		       85 02		      STA	WSYNC
   2101  faa4		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2102  faa7		       85 0e		      STA	PF1	;3
   2103  faa9		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2104  faac		       85 0f		      STA	PF2	;3
      0  faae					      SLEEP	27	; 
      1  faae				   .CYCLES    SET	27
      2  faae
      3  faae				  -	      IF	.CYCLES < 2
      4  faae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  faae				  -	      ERR
      6  faae					      ENDIF
      7  faae
      8  faae					      IF	.CYCLES & 1
      9  faae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  faae				  -	      nop	0
     11  faae					      ELSE
     12  faae		       24 00		      bit	VSYNC
     13  fab0					      ENDIF
     14  fab0				   .CYCLES    SET	.CYCLES - 3
     15  fab0					      ENDIF
     16  fab0
     17  fab0					      REPEAT	.CYCLES / 2
     18  fab0		       ea		      nop
     17  fab0					      REPEND
     18  fab1		       ea		      nop
     17  fab1					      REPEND
     18  fab2		       ea		      nop
     17  fab2					      REPEND
     18  fab3		       ea		      nop
     17  fab3					      REPEND
     18  fab4		       ea		      nop
     17  fab4					      REPEND
     18  fab5		       ea		      nop
     17  fab5					      REPEND
     18  fab6		       ea		      nop
     17  fab6					      REPEND
     18  fab7		       ea		      nop
     17  fab7					      REPEND
     18  fab8		       ea		      nop
     17  fab8					      REPEND
     18  fab9		       ea		      nop
     17  fab9					      REPEND
     18  faba		       ea		      nop
     17  faba					      REPEND
     18  fabb		       ea		      nop
     19  fabc					      REPEND
   2106  fabc		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2107  fabf		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2108  fac1		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2109  fac4		       85 0e		      STA	PF1	;3
   2110  fac6
   2111  fac6		       ca		      DEX		;2
   2112  fac7		       d0 d9		      BNE	QrCodeLoop	;2
   2113  fac9		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2114  facb		       88		      DEY		;2
   2115  facc		       10 d4		      BPL	QrCodeLoop	;4
   2116  face
   2117  face				   EndQrCodeLoop
   2118  face		       85 02		      STA	WSYNC	;
   2119  fad0		       a9 00		      LDA	#0
   2120  fad2		       85 0e		      STA	PF1	;3
   2121  fad4		       85 0f		      STA	PF2	;3
   2122  fad6
   2123  fad6		       20 b6 f7 	      JSR	Sleep32Lines
   2124  fad9		       4c 0b f5 	      JMP	PrepareOverscan
   2125  fadc
   2126  fadc							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2127  fc00					      org	$FC00
   2128  fc00				   QrCode1
   2129  fc00		       1f		      .byte.b	#%00011111
   2130  fc01		       10		      .byte.b	#%00010000
   2131  fc02		       17		      .byte.b	#%00010111
   2132  fc03		       17		      .byte.b	#%00010111
   2133  fc04		       17		      .byte.b	#%00010111
   2134  fc05		       10		      .byte.b	#%00010000
   2135  fc06		       1f		      .byte.b	#%00011111
   2136  fc07		       00		      .byte.b	#%00000000
   2137  fc08		       17		      .byte.b	#%00010111
   2138  fc09		       10		      .byte.b	#%00010000
   2139  fc0a		       1d		      .byte.b	#%00011101
   2140  fc0b		       16		      .byte.b	#%00010110
   2141  fc0c		       03		      .byte.b	#%00000011
   2142  fc0d		       19		      .byte.b	#%00011001
   2143  fc0e		       13		      .byte.b	#%00010011
   2144  fc0f		       1c		      .byte.b	#%00011100
   2145  fc10		       0b		      .byte.b	#%00001011
   2146  fc11		       00		      .byte.b	#%00000000
   2147  fc12		       1f		      .byte.b	#%00011111
   2148  fc13		       10		      .byte.b	#%00010000
   2149  fc14		       17		      .byte.b	#%00010111
   2150  fc15		       17		      .byte.b	#%00010111
   2151  fc16		       17		      .byte.b	#%00010111
   2152  fc17		       10		      .byte.b	#%00010000
   2153  fc18		       1f		      .byte.b	#%00011111
   2154  fc19
   2155  fc19				   QrCode2
   2156  fc19		       c3		      .byte.b	#%11000011
   2157  fc1a		       9a		      .byte.b	#%10011010
   2158  fc1b		       82		      .byte.b	#%10000010
   2159  fc1c		       da		      .byte.b	#%11011010
   2160  fc1d		       aa		      .byte.b	#%10101010
   2161  fc1e		       ca		      .byte.b	#%11001010
   2162  fc1f		       f3		      .byte.b	#%11110011
   2163  fc20		       78		      .byte.b	#%01111000
   2164  fc21		       df		      .byte.b	#%11011111
   2165  fc22		       fc		      .byte.b	#%11111100
   2166  fc23		       c7		      .byte.b	#%11000111
   2167  fc24		       98		      .byte.b	#%10011000
   2168  fc25		       23		      .byte.b	#%00100011
   2169  fc26		       b9		      .byte.b	#%10111001
   2170  fc27		       d2		      .byte.b	#%11010010
   2171  fc28		       30		      .byte.b	#%00110000
   2172  fc29		       eb		      .byte.b	#%11101011
   2173  fc2a		       28		      .byte.b	#%00101000
   2174  fc2b		       ab		      .byte.b	#%10101011
   2175  fc2c		       72		      .byte.b	#%01110010
   2176  fc2d		       fa		      .byte.b	#%11111010
   2177  fc2e		       7a		      .byte.b	#%01111010
   2178  fc2f		       32		      .byte.b	#%00110010
   2179  fc30		       3a		      .byte.b	#%00111010
   2180  fc31		       63		      .byte.b	#%01100011
   2181  fc32
   2182  fc32				   QrCode3
   2183  fc32		       98		      .byte.b	#%10011000
   2184  fc33		       c3		      .byte.b	#%11000011
   2185  fc34		       39		      .byte.b	#%00111001
   2186  fc35		       34		      .byte.b	#%00110100
   2187  fc36		       ff		      .byte.b	#%11111111
   2188  fc37		       71		      .byte.b	#%01110001
   2189  fc38		       d5		      .byte.b	#%11010101
   2190  fc39		       d1		      .byte.b	#%11010001
   2191  fc3a		       5f		      .byte.b	#%01011111
   2192  fc3b		       26		      .byte.b	#%00100110
   2193  fc3c		       2d		      .byte.b	#%00101101
   2194  fc3d		       e9		      .byte.b	#%11101001
   2195  fc3e		       d6		      .byte.b	#%11010110
   2196  fc3f		       26		      .byte.b	#%00100110
   2197  fc40		       ba		      .byte.b	#%10111010
   2198  fc41		       03		      .byte.b	#%00000011
   2199  fc42		       dd		      .byte.b	#%11011101
   2200  fc43		       e0		      .byte.b	#%11100000
   2201  fc44		       57		      .byte.b	#%01010111
   2202  fc45		       14		      .byte.b	#%00010100
   2203  fc46		       35		      .byte.b	#%00110101
   2204  fc47		       e5		      .byte.b	#%11100101
   2205  fc48		       b5		      .byte.b	#%10110101
   2206  fc49		       d4		      .byte.b	#%11010100
   2207  fc4a		       97		      .byte.b	#%10010111
   2208  fc4b
   2209  fc4b				   QrCode4
   2210  fc4b		       09		      .byte.b	#%00001001
   2211  fc4c		       0e		      .byte.b	#%00001110
   2212  fc4d		       0f		      .byte.b	#%00001111
   2213  fc4e		       0c		      .byte.b	#%00001100
   2214  fc4f		       0c		      .byte.b	#%00001100
   2215  fc50		       08		      .byte.b	#%00001000
   2216  fc51		       08		      .byte.b	#%00001000
   2217  fc52		       06		      .byte.b	#%00000110
   2218  fc53		       06		      .byte.b	#%00000110
   2219  fc54		       0b		      .byte.b	#%00001011
   2220  fc55		       0f		      .byte.b	#%00001111
   2221  fc56		       04		      .byte.b	#%00000100
   2222  fc57		       08		      .byte.b	#%00001000
   2223  fc58		       0f		      .byte.b	#%00001111
   2224  fc59		       09		      .byte.b	#%00001001
   2225  fc5a		       07		      .byte.b	#%00000111
   2226  fc5b		       05		      .byte.b	#%00000101
   2227  fc5c		       00		      .byte.b	#%00000000
   2228  fc5d		       0f		      .byte.b	#%00001111
   2229  fc5e		       08		      .byte.b	#%00001000
   2230  fc5f		       0b		      .byte.b	#%00001011
   2231  fc60		       0b		      .byte.b	#%00001011
   2232  fc61		       0b		      .byte.b	#%00001011
   2233  fc62		       08		      .byte.b	#%00001000
   2234  fc63		       0f		      .byte.b	#%00001111
   2235  fc64
   2236  fc64				   PlayerToUpMask
   2237  fc64		       10		      .byte.b	#%00010000	;
   2238  fc65		       01		      .byte.b	#%00000001	;
   2239  fc66
   2240  fc66				   PlayerToDownMask
   2241  fc66		       20		      .byte.b	#%00100000	;
   2242  fc67		       02		      .byte.b	#%00000010	;
   2243  fc68
   2244  fc68				   PlayerToLeftMask
   2245  fc68		       40		      .byte.b	#%01000000	;
   2246  fc69		       04		      .byte.b	#%00000100	;
   2247  fc6a
   2248  fc6a				   PlayerToRightMask
   2249  fc6a		       80		      .byte.b	#%10000000	;
   2250  fc6b		       08		      .byte.b	#%00001000	;
   2251  fc6c
   2252  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2253  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2254  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2255  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2256  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2257  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2258  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2259  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2260  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2261  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2262  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2263  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2264  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2265  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2266  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2267  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2268  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2269  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2270  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2271  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2272  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2273  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2274  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2275  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2276  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2277  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2278  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2279  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2280  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2281  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2282  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2283  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2284  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2285  fc8c
   2286  fc8c
   2287  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2288  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2289  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2290  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2291  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2292  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2293  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2294  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2295  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2296  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2297  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2298  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2299  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2300  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2301  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2302  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2303  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2304  fc9c
   2305  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2306  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2307  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2308  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2309  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2310  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2311  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2312  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2313  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2314  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2315  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2316  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2317  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2318  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2319  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2320  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2321  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2322  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2323  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2324  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2325  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2326  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2327  fcb1
   2328  fcb1				   PlayerToDefaultColor
   2329  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2330  fcb2		       96		      .byte.b	#PLAYER1_COLOR
   2331  fcb3
   2332  fd00					      org	$FD00
   2333  fd00				   Font
   2334  fd00				   C0
   2335  fd00		       e7		      .byte.b	#%11100111	;
   2336  fd01		       a5		      .byte.b	#%10100101	; 
   2337  fd02		       a5		      .byte.b	#%10100101	; 
   2338  fd03		       a5		      .byte.b	#%10100101	; 
   2339  fd04		       e7		      .byte.b	#%11100111	;	
   2340  fd05				   C1
   2341  fd05		       e7		      .byte.b	#%11100111	;
   2342  fd06		       42		      .byte.b	#%01000010	; 
   2343  fd07		       42		      .byte.b	#%01000010	; 
   2344  fd08		       42		      .byte.b	#%01000010	; 
   2345  fd09		       66		      .byte.b	#%01100110	;
   2346  fd0a				   C2
   2347  fd0a		       e7		      .byte.b	#%11100111	;
   2348  fd0b		       24		      .byte.b	#%00100100	; 
   2349  fd0c		       e7		      .byte.b	#%11100111	; 
   2350  fd0d		       81		      .byte.b	#%10000001	; 
   2351  fd0e		       e7		      .byte.b	#%11100111	;
   2352  fd0f				   C3
   2353  fd0f		       e7		      .byte.b	#%11100111	;
   2354  fd10		       81		      .byte.b	#%10000001	; 
   2355  fd11		       e7		      .byte.b	#%11100111	; 
   2356  fd12		       81		      .byte.b	#%10000001	; 
   2357  fd13		       e7		      .byte.b	#%11100111	;
   2358  fd14				   C4
   2359  fd14		       81		      .byte.b	#%10000001	;
   2360  fd15		       81		      .byte.b	#%10000001	; 
   2361  fd16		       e7		      .byte.b	#%11100111	; 
   2362  fd17		       a5		      .byte.b	#%10100101	; 
   2363  fd18		       a5		      .byte.b	#%10100101	;
   2364  fd19				   C5
   2365  fd19		       e7		      .byte.b	#%11100111	;
   2366  fd1a		       81		      .byte.b	#%10000001	; 
   2367  fd1b		       e7		      .byte.b	#%11100111	; 
   2368  fd1c		       24		      .byte.b	#%00100100	; 
   2369  fd1d		       e7		      .byte.b	#%11100111	;
   2370  fd1e				   C6
   2371  fd1e		       e7		      .byte.b	#%11100111	;
   2372  fd1f		       a5		      .byte.b	#%10100101	; 
   2373  fd20		       e7		      .byte.b	#%11100111	; 
   2374  fd21		       24		      .byte.b	#%00100100	; 
   2375  fd22		       e7		      .byte.b	#%11100111	;
   2376  fd23				   C7
   2377  fd23		       81		      .byte.b	#%10000001	;
   2378  fd24		       81		      .byte.b	#%10000001	; 
   2379  fd25		       81		      .byte.b	#%10000001	; 
   2380  fd26		       81		      .byte.b	#%10000001	; 
   2381  fd27		       e7		      .byte.b	#%11100111	;
   2382  fd28				   C8
   2383  fd28		       e7		      .byte.b	#%11100111	;
   2384  fd29		       a5		      .byte.b	#%10100101	; 
   2385  fd2a		       e7		      .byte.b	#%11100111	; 
   2386  fd2b		       a5		      .byte.b	#%10100101	; 
   2387  fd2c		       e7		      .byte.b	#%11100111	;
   2388  fd2d				   C9
   2389  fd2d		       e7		      .byte.b	#%11100111	;
   2390  fd2e		       81		      .byte.b	#%10000001	; 
   2391  fd2f		       e7		      .byte.b	#%11100111	; 
   2392  fd30		       a5		      .byte.b	#%10100101	; 
   2393  fd31		       e7		      .byte.b	#%11100111	;
   2394  fd32				   CA
   2395  fd32		       a5		      .byte.b	#%10100101	;
   2396  fd33		       a5		      .byte.b	#%10100101	; 
   2397  fd34		       e7		      .byte.b	#%11100111	; 
   2398  fd35		       a5		      .byte.b	#%10100101	; 
   2399  fd36		       e7		      .byte.b	#%11100111	;
   2400  fd37				   CB
   2401  fd37		       66		      .byte.b	#%01100110	;
   2402  fd38		       a5		      .byte.b	#%10100101	; 
   2403  fd39		       66		      .byte.b	#%01100110	; 
   2404  fd3a		       a5		      .byte.b	#%10100101	;
   2405  fd3b		       66		      .byte.b	#%01100110	;
   2406  fd3c				   CC
   2407  fd3c		       e7		      .byte.b	#%11100111	;
   2408  fd3d		       24		      .byte.b	#%00100100	; 
   2409  fd3e		       24		      .byte.b	#%00100100	; 
   2410  fd3f		       24		      .byte.b	#%00100100	;
   2411  fd40		       e7		      .byte.b	#%11100111	;
   2412  fd41
   2413  fd41				   CD
   2414  fd41		       66		      .byte.b	#%01100110	;
   2415  fd42		       a5		      .byte.b	#%10100101	; 
   2416  fd43		       a5		      .byte.b	#%10100101	; 
   2417  fd44		       a5		      .byte.b	#%10100101	;
   2418  fd45		       66		      .byte.b	#%01100110	;
   2419  fd46
   2420  fd46				   CE
   2421  fd46		       e7		      .byte.b	#%11100111	;
   2422  fd47		       24		      .byte.b	#%00100100	; 
   2423  fd48		       e7		      .byte.b	#%11100111	; 
   2424  fd49		       24		      .byte.b	#%00100100	; 
   2425  fd4a		       e7		      .byte.b	#%11100111	;
   2426  fd4b
   2427  fd4b				   CF
   2428  fd4b		       24		      .byte.b	#%00100100	;
   2429  fd4c		       24		      .byte.b	#%00100100	; 
   2430  fd4d		       e7		      .byte.b	#%11100111	; 
   2431  fd4e		       24		      .byte.b	#%00100100	; 
   2432  fd4f		       e7		      .byte.b	#%11100111	;
   2433  fd50
   2434  fd50				   CG
   2435  fd50		       c3		      .byte.b	#%11000011	;
   2436  fd51		       a5		      .byte.b	#%10100101	; 
   2437  fd52		       a5		      .byte.b	#%10100101	; 
   2438  fd53		       24		      .byte.b	#%00100100	; 
   2439  fd54		       c3		      .byte.b	#%11000011	;	
   2440  fd55
   2441  fd55				   CH
   2442  fd55		       a5		      .byte.b	#%10100101	;
   2443  fd56		       a5		      .byte.b	#%10100101	; 
   2444  fd57		       e7		      .byte.b	#%11100111	; 
   2445  fd58		       a5		      .byte.b	#%10100101	; 
   2446  fd59		       a5		      .byte.b	#%10100101	;
   2447  fd5a
   2448  fd5a				   CI
   2449  fd5a		       e7		      .byte.b	#%11100111	;
   2450  fd5b		       42		      .byte.b	#%01000010	; 
   2451  fd5c		       42		      .byte.b	#%01000010	; 
   2452  fd5d		       42		      .byte.b	#%01000010	; 
   2453  fd5e		       e7		      .byte.b	#%11100111	;
   2454  fd5f
   2455  fd5f				   CJ
   2456  fd5f		       e7		      .byte.b	#%11100111	;
   2457  fd60		       a5		      .byte.b	#%10100101	; 
   2458  fd61		       81		      .byte.b	#%10000001	; 
   2459  fd62		       81		      .byte.b	#%10000001	; 
   2460  fd63		       81		      .byte.b	#%10000001	;	
   2461  fd64
   2462  fd64				   CK
   2463  fd64		       a5		      .byte.b	#%10100101	;
   2464  fd65		       a5		      .byte.b	#%10100101	; 
   2465  fd66		       66		      .byte.b	#%01100110	; 
   2466  fd67		       a5		      .byte.b	#%10100101	; 
   2467  fd68		       a5		      .byte.b	#%10100101	;
   2468  fd69
   2469  fd69				   CL
   2470  fd69		       e7		      .byte.b	#%11100111	;
   2471  fd6a		       24		      .byte.b	#%00100100	; 
   2472  fd6b		       24		      .byte.b	#%00100100	; 
   2473  fd6c		       24		      .byte.b	#%00100100	; 
   2474  fd6d		       24		      .byte.b	#%00100100	;
   2475  fd6e
   2476  fd6e				   CM
   2477  fd6e		       a5		      .byte.b	#%10100101	;
   2478  fd6f		       a5		      .byte.b	#%10100101	; 
   2479  fd70		       a5		      .byte.b	#%10100101	; 
   2480  fd71		       e7		      .byte.b	#%11100111	; 
   2481  fd72		       a5		      .byte.b	#%10100101	;
   2482  fd73
   2483  fd73				   CN
   2484  fd73		       a5		      .byte.b	#%10100101	;
   2485  fd74		       a5		      .byte.b	#%10100101	; 
   2486  fd75		       a5		      .byte.b	#%10100101	; 
   2487  fd76		       a5		      .byte.b	#%10100101	; 
   2488  fd77		       66		      .byte.b	#%01100110	;	
   2489  fd78
   2490  fd78
   2491  fd78				   CO
   2492  fd78		       42		      .byte.b	#%01000010	;
   2493  fd79		       a5		      .byte.b	#%10100101	; 
   2494  fd7a		       a5		      .byte.b	#%10100101	; 
   2495  fd7b		       a5		      .byte.b	#%10100101	; 
   2496  fd7c		       42		      .byte.b	#%01000010	;	
   2497  fd7d
   2498  fd7d				   CP
   2499  fd7d		       24		      .byte.b	#%00100100	;
   2500  fd7e		       24		      .byte.b	#%00100100	; 
   2501  fd7f		       e7		      .byte.b	#%11100111	; 
   2502  fd80		       a5		      .byte.b	#%10100101	; 
   2503  fd81		       e7		      .byte.b	#%11100111	;
   2504  fd82
   2505  fd82				   CQ
   2506  fd82		       81		      .byte.b	#%10000001	;
   2507  fd83		       e5		      .byte.b	#%11100101	; 
   2508  fd84		       a5		      .byte.b	#%10100101	; 
   2509  fd85		       a5		      .byte.b	#%10100101	; 
   2510  fd86		       e7		      .byte.b	#%11100111	;	
   2511  fd87
   2512  fd87				   CR
   2513  fd87		       a5		      .byte.b	#%10100101	;
   2514  fd88		       a5		      .byte.b	#%10100101	; 
   2515  fd89		       66		      .byte.b	#%01100110	; 
   2516  fd8a		       a5		      .byte.b	#%10100101	; 
   2517  fd8b		       66		      .byte.b	#%01100110	;
   2518  fd8c
   2519  fd8c				   CS
   2520  fd8c		       66		      .byte.b	#%01100110	;
   2521  fd8d		       81		      .byte.b	#%10000001	; 
   2522  fd8e		       42		      .byte.b	#%01000010	; 
   2523  fd8f		       24		      .byte.b	#%00100100	; 
   2524  fd90		       c3		      .byte.b	#%11000011	;
   2525  fd91
   2526  fd91				   CT
   2527  fd91		       42		      .byte.b	#%01000010	;
   2528  fd92		       42		      .byte.b	#%01000010	; 
   2529  fd93		       42		      .byte.b	#%01000010	; 
   2530  fd94		       42		      .byte.b	#%01000010	; 
   2531  fd95		       e7		      .byte.b	#%11100111	;
   2532  fd96
   2533  fd96				   CU
   2534  fd96		       e7		      .byte.b	#%11100111	;
   2535  fd97		       a5		      .byte.b	#%10100101	; 
   2536  fd98		       a5		      .byte.b	#%10100101	; 
   2537  fd99		       a5		      .byte.b	#%10100101	; 
   2538  fd9a		       a5		      .byte.b	#%10100101	;	
   2539  fd9b
   2540  fd9b				   CW
   2541  fd9b		       a5		      .byte.b	#%10100101	;
   2542  fd9c		       e7		      .byte.b	#%11100111	; 
   2543  fd9d		       a5		      .byte.b	#%10100101	; 
   2544  fd9e		       a5		      .byte.b	#%10100101	; 
   2545  fd9f		       a5		      .byte.b	#%10100101	;
   2546  fda0
   2547  fda0				   CY
   2548  fda0		       42		      .byte.b	#%01000010	;
   2549  fda1		       42		      .byte.b	#%01000010	; 
   2550  fda2		       42		      .byte.b	#%01000010	; 
   2551  fda3		       a5		      .byte.b	#%10100101	; 
   2552  fda4		       a5		      .byte.b	#%10100101	;
   2553  fda5
   2554  fda5				   Exclamation
   2555  fda5		       42		      .byte.b	#%01000010	;
   2556  fda6		       00		      .byte.b	#%00000000	; 
   2557  fda7		       42		      .byte.b	#%01000010	; 
   2558  fda8		       42		      .byte.b	#%01000010	; 
   2559  fda9		       42		      .byte.b	#%01000010	;
   2560  fdaa
   2561  fdaa				   Pipe
   2562  fdaa				   Colon
   2563  fdaa		       42		      .byte.b	#%01000010	;
   2564  fdab		       42		      .byte.b	#%01000010	; 
   2565  fdac		       00		      .byte.b	#%00000000	; 
   2566  fdad		       42		      .byte.b	#%01000010	; 
   2567  fdae		       42		      .byte.b	#%01000010	;
   2568  fdaf
   2569  fdaf				   Space
   2570  fdaf				   C0B
   2571  fdaf		       00		      .byte.b	#%00000000	;
   2572  fdb0		       00		      .byte.b	#%00000000	; 
   2573  fdb1		       00		      .byte.b	#%00000000	; 
   2574  fdb2		       00		      .byte.b	#%00000000	; 
   2575  fdb3		       00		      .byte.b	#%00000000	;	
   2576  fdb4				   C1B
   2577  fdb4		       24		      .byte.b	#%00100100	;
   2578  fdb5		       00		      .byte.b	#%00000000	; 
   2579  fdb6		       00		      .byte.b	#%00000000	; 
   2580  fdb7		       00		      .byte.b	#%00000000	; 
   2581  fdb8		       00		      .byte.b	#%00000000	;
   2582  fdb9				   C2B
   2583  fdb9		       66		      .byte.b	#%01100110	;
   2584  fdba		       00		      .byte.b	#%00000000	; 
   2585  fdbb		       00		      .byte.b	#%00000000	; 
   2586  fdbc		       00		      .byte.b	#%00000000	; 
   2587  fdbd		       00		      .byte.b	#%00000000	;
   2588  fdbe				   C3B
   2589  fdbe		       e7		      .byte.b	#%11100111	;
   2590  fdbf		       00		      .byte.b	#%00000000	; 
   2591  fdc0		       00		      .byte.b	#%00000000	; 
   2592  fdc1		       00		      .byte.b	#%00000000	; 
   2593  fdc2		       00		      .byte.b	#%00000000	;
   2594  fdc3				   C4B
   2595  fdc3		       e7		      .byte.b	#%11100111	;
   2596  fdc4		       24		      .byte.b	#%00100100	; 
   2597  fdc5		       00		      .byte.b	#%00000000	; 
   2598  fdc6		       00		      .byte.b	#%00000000	; 
   2599  fdc7		       00		      .byte.b	#%00000000	;
   2600  fdc8				   C5B
   2601  fdc8		       e7		      .byte.b	#%11100111	;
   2602  fdc9		       66		      .byte.b	#%01100110	; 
   2603  fdca		       00		      .byte.b	#%00000000	; 
   2604  fdcb		       00		      .byte.b	#%00000000	; 
   2605  fdcc		       00		      .byte.b	#%00000000	;
   2606  fdcd				   C6B
   2607  fdcd		       e7		      .byte.b	#%11100111	;
   2608  fdce		       e7		      .byte.b	#%11100111	; 
   2609  fdcf		       00		      .byte.b	#%00000000	; 
   2610  fdd0		       00		      .byte.b	#%00000000	; 
   2611  fdd1		       00		      .byte.b	#%00000000	;
   2612  fdd2				   C7B
   2613  fdd2		       e7		      .byte.b	#%11100111	;
   2614  fdd3		       e7		      .byte.b	#%11100111	; 
   2615  fdd4		       24		      .byte.b	#%00100100	; 
   2616  fdd5		       00		      .byte.b	#%00000000	; 
   2617  fdd6		       00		      .byte.b	#%00000000	;
   2618  fdd7				   C8B
   2619  fdd7		       e7		      .byte.b	#%11100111	;
   2620  fdd8		       e7		      .byte.b	#%11100111	; 
   2621  fdd9		       66		      .byte.b	#%01100110	; 
   2622  fdda		       00		      .byte.b	#%00000000	; 
   2623  fddb		       00		      .byte.b	#%00000000	;
   2624  fddc				   C9B
   2625  fddc		       e7		      .byte.b	#%11100111	;
   2626  fddd		       e7		      .byte.b	#%11100111	; 
   2627  fdde		       e7		      .byte.b	#%11100111	; 
   2628  fddf		       00		      .byte.b	#%00000000	; 
   2629  fde0		       00		      .byte.b	#%00000000	;
   2630  fde1				   CAB
   2631  fde1		       e7		      .byte.b	#%11100111	;
   2632  fde2		       e7		      .byte.b	#%11100111	; 
   2633  fde3		       e7		      .byte.b	#%11100111	; 
   2634  fde4		       24		      .byte.b	#%00100100	; 
   2635  fde5		       00		      .byte.b	#%00000000	;
   2636  fde6				   CBB
   2637  fde6		       e7		      .byte.b	#%11100111	;
   2638  fde7		       e7		      .byte.b	#%11100111	; 
   2639  fde8		       e7		      .byte.b	#%11100111	; 
   2640  fde9		       66		      .byte.b	#%01100110	; 
   2641  fdea		       00		      .byte.b	#%00000000	;
   2642  fdeb				   CCB
   2643  fdeb		       e7		      .byte.b	#%11100111	;
   2644  fdec		       e7		      .byte.b	#%11100111	; 
   2645  fded		       e7		      .byte.b	#%11100111	; 
   2646  fdee		       e7		      .byte.b	#%11100111	; 
   2647  fdef		       00		      .byte.b	#%00000000	;
   2648  fdf0
   2649  fdf0				   CDB
   2650  fdf0		       e7		      .byte.b	#%11100111	;
   2651  fdf1		       e7		      .byte.b	#%11100111	; 
   2652  fdf2		       e7		      .byte.b	#%11100111	; 
   2653  fdf3		       e7		      .byte.b	#%11100111	; 
   2654  fdf4		       24		      .byte.b	#%00100100	;
   2655  fdf5
   2656  fdf5				   CEB
   2657  fdf5		       e7		      .byte.b	#%11100111	;
   2658  fdf6		       e7		      .byte.b	#%11100111	; 
   2659  fdf7		       e7		      .byte.b	#%11100111	; 
   2660  fdf8		       e7		      .byte.b	#%11100111	; 
   2661  fdf9		       66		      .byte.b	#%01100110	;
   2662  fdfa
   2663  fdfa				   CFB
   2664  fdfa		       e7		      .byte.b	#%11100111	;
   2665  fdfb		       e7		      .byte.b	#%11100111	; 
   2666  fdfc		       e7		      .byte.b	#%11100111	; 
   2667  fdfd		       e7		      .byte.b	#%11100111	; 
   2668  fdfe		       e7		      .byte.b	#%11100111	;
   2669  fdff
   2670  fe00					      org	$FE00
   2671  fe00				   AesTable
   2672  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2673  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2674  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2675  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2676  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2677  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2678  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2679  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2680  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2681  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2682  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2683  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2684  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2685  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2686  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2687  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2688  ff00
   2689  ff00					      org	$FF00
   2690  ff00				   StaticText		; All static text must be on the same MSB block. 
   2691  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2692  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2693  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2694  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2695  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2696  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2697  ff05
   2698  ff05				   HellwayLeftText
   2699  ff05		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2700  ff06		       59		      .byte.b	#<CH + #FONT_OFFSET
   2701  ff07		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2702  ff08		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2703  ff09
   2704  ff09				   HellwayRightText
   2705  ff09		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2706  ff0a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2707  ff0b		       81		      .byte.b	#<CP + #FONT_OFFSET
   2708  ff0c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2709  ff0d		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2710  ff0e
   2711  ff0e				   OpbText
   2712  ff0e		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2713  ff0f		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2714  ff10		       81		      .byte.b	#<CP + #FONT_OFFSET
   2715  ff11		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2716  ff12
   2717  ff12				   YearText
   2718  ff12		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2719  ff13		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2720  ff14		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2721  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2722  ff16		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2723  ff17
   2724  ff17				   GoText
   2725  ff17		       54		      .byte.b	#<CG + #FONT_OFFSET
   2726  ff18		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2727  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2728  ff1a		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2729  ff1b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2730  ff1c
   2731  ff1c				   ReadyText
   2732  ff1c		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2733  ff1d		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2734  ff1e		       36		      .byte.b	#<CA + #FONT_OFFSET
   2735  ff1f		       45		      .byte.b	#<CD + #FONT_OFFSET
   2736  ff20		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2737  ff21
   2738  ff21				   WinText
   2739  ff21		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2740  ff22		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2741  ff23		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2742  ff24
   2743  ff24				   LoseText
   2744  ff24		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2745  ff25		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2746  ff26		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2747  ff27
   2748  ff27				   EndStaticText
   2749  ff27
   2750  ff27				   TachometerSizeLookup1
   2751  ff27		       1f		      .byte.b	#%00011111
   2752  ff28		       3f		      .byte.b	#%00111111
   2753  ff29		       7f		      .byte.b	#%01111111
   2754  ff2a		       ff		      .byte.b	#%11111111
   2755  ff2b		       ff		      .byte.b	#%11111111
   2756  ff2c		       ff		      .byte.b	#%11111111
   2757  ff2d		       ff		      .byte.b	#%11111111
   2758  ff2e		       ff		      .byte.b	#%11111111
   2759  ff2f
   2760  ff2f				   TachometerSizeLookup2
   2761  ff2f		       00		      .byte.b	#%00000000
   2762  ff30		       00		      .byte.b	#%00000000
   2763  ff31		       00		      .byte.b	#%00000000
   2764  ff32		       00		      .byte.b	#%00000000
   2765  ff33		       80		      .byte.b	#%10000000
   2766  ff34		       c0		      .byte.b	#%11000000
   2767  ff35		       e0		      .byte.b	#%11100000
   2768  ff36		       f0		      .byte.b	#%11110000
   2769  ff37
   2770  ff37				   TachometerGearLookup
   2771  ff37		       01		      .byte.b	#%00000001
   2772  ff38		       02		      .byte.b	#%00000010
   2773  ff39		       04		      .byte.b	#%00000100
   2774  ff3a		       08		      .byte.b	#%00001000
   2775  ff3b		       10		      .byte.b	#%00010000
   2776  ff3c		       30		      .byte.b	#%00110000
   2777  ff3d
   2778  ff3d				   EngineSoundType
   2779  ff3d		       02		      .byte.b	#2
   2780  ff3e		       02		      .byte.b	#2
   2781  ff3f		       0e		      .byte.b	#14
   2782  ff40		       06		      .byte.b	#6
   2783  ff41		       06		      .byte.b	#6
   2784  ff42		       0e		      .byte.b	#14
   2785  ff43
   2786  ff43				   EngineBaseFrequence
   2787  ff43		       1f		      .byte.b	#31
   2788  ff44		       15		      .byte.b	#21
   2789  ff45		       14		      .byte.b	#20
   2790  ff46		       1f		      .byte.b	#31
   2791  ff47		       16		      .byte.b	#22
   2792  ff48		       03		      .byte.b	#3
   2793  ff49
   2794  ff49				   CarSprite0		; Upside down, Original Car
   2795  ff49		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2796  ff51				   CarSprite0NoPadding
   2797  ff51		       7e		      .byte.b	#%01111110
   2798  ff52		       24		      .byte.b	#%00100100
   2799  ff53		       bd		      .byte.b	#%10111101
   2800  ff54		       3c		      .byte.b	#%00111100
   2801  ff55		       bd		      .byte.b	#%10111101
   2802  ff56		       3c		      .byte.b	#%00111100
   2803  ff57
   2804  ff57				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2805  ff57		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2806  ff5f				   CarSprite1NoPadding
   2807  ff5f		       bd		      .byte.b	#%10111101
   2808  ff60		       7e		      .byte.b	#%01111110
   2809  ff61		       5a		      .byte.b	#%01011010
   2810  ff62		       66		      .byte.b	#%01100110
   2811  ff63		       bd		      .byte.b	#%10111101
   2812  ff64		       3c		      .byte.b	#%00111100
   2813  ff65
   2814  ff65				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2815  ff65		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2816  ff6d				   CarSprite2NoPadding
   2817  ff6d		       7e		      .byte.b	#%01111110
   2818  ff6e		       a5		      .byte.b	#%10100101
   2819  ff6f		       42		      .byte.b	#%01000010
   2820  ff70		       42		      .byte.b	#%01000010
   2821  ff71		       bd		      .byte.b	#%10111101
   2822  ff72		       7e		      .byte.b	#%01111110
   2823  ff73
   2824  ff73				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2825  ff73		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2826  ff7b				   CarSprite3NoPadding
   2827  ff7b		       3c		      .byte.b	#%00111100
   2828  ff7c		       db		      .byte.b	#%11011011
   2829  ff7d		       db		      .byte.b	#%11011011
   2830  ff7e		       3c		      .byte.b	#%00111100
   2831  ff7f		       5a		      .byte.b	#%01011010
   2832  ff80		       3c		      .byte.b	#%00111100
   2833  ff81
   2834  ff81				   TrafficSpeeds
   2835  ff81		       00		      .byte.b	#$00	;  Trafic0 L
   2836  ff82		       00		      .byte.b	#$00	;  Trafic0 H
   2837  ff83		       0a		      .byte.b	#$0A	;  Trafic1 L
   2838  ff84		       01		      .byte.b	#$01	;  Trafic1 H
   2839  ff85		       e6		      .byte.b	#$E6	;  Trafic2 L
   2840  ff86		       00		      .byte.b	#$00	;  Trafic2 H
   2841  ff87		       c2		      .byte.b	#$C2	;  Trafic3 L
   2842  ff88		       00		      .byte.b	#$00	;  Trafic3 H
   2843  ff89		       9e		      .byte.b	#$9E	;  Trafic4 L
   2844  ff8a		       00		      .byte.b	#$00	;  Trafic4 H
   2845  ff8b				   TrafficSpeedsHighDelta
   2846  ff8b		       00		      .byte.b	#$00	;  Trafic0 L
   2847  ff8c		       00		      .byte.b	#$00	;  Trafic0 H
   2848  ff8d		       0a		      .byte.b	#$0A	;  Trafic1 L
   2849  ff8e		       01		      .byte.b	#$01	;  Trafic1 H
   2850  ff8f		       c8		      .byte.b	#$C8	;  Trafic2 L
   2851  ff90		       00		      .byte.b	#$00	;  Trafic2 H
   2852  ff91		       86		      .byte.b	#$86	;  Trafic3 L
   2853  ff92		       00		      .byte.b	#$00	;  Trafic3 H
   2854  ff93		       44		      .byte.b	#$44	;  Trafic4 L
   2855  ff94		       00		      .byte.b	#$00	;  Trafic4 H
   2856  ff95
   2857  ff95				   CarIdToSpriteAddressL
   2858  ff95		       49		      .byte.b	#<CarSprite0
   2859  ff96		       57		      .byte.b	#<CarSprite1
   2860  ff97		       65		      .byte.b	#<CarSprite2
   2861  ff98		       73		      .byte.b	#<CarSprite3
   2862  ff99
   2863  ff99				   CarIdToSpriteAddressH
   2864  ff99		       ff		      .byte.b	#>CarSprite0
   2865  ff9a		       ff		      .byte.b	#>CarSprite1
   2866  ff9b		       ff		      .byte.b	#>CarSprite2
   2867  ff9c		       ff		      .byte.b	#>CarSprite3
   2868  ff9d
   2869  ff9d				   EnemyCarIdToSpriteAddressL
   2870  ff9d		       51		      .byte.b	#<CarSprite0NoPadding
   2871  ff9e		       5f		      .byte.b	#<CarSprite1NoPadding
   2872  ff9f		       6d		      .byte.b	#<CarSprite2NoPadding
   2873  ffa0		       7b		      .byte.b	#<CarSprite3NoPadding
   2874  ffa1
   2875  ffa1				   EnemyCarIdToSpriteAddressH
   2876  ffa1		       ff		      .byte.b	#>CarSprite0NoPadding
   2877  ffa2		       ff		      .byte.b	#>CarSprite1NoPadding
   2878  ffa3		       ff		      .byte.b	#>CarSprite2NoPadding
   2879  ffa4		       ff		      .byte.b	#>CarSprite3NoPadding
   2880  ffa5
   2881  ffa5				   CarIdToAccelerateSpeed
   2882  ffa5		       80		      .byte.b	#128
   2883  ffa6		       c0		      .byte.b	#192
   2884  ffa7		       60		      .byte.b	#96
   2885  ffa8		       c0		      .byte.b	#192
   2886  ffa9
   2887  ffa9				   CarIdToTimeoverBreakInterval 		; Glide
   2888  ffa9		       03		      .byte.b	#%00000011	;Every 4 frames
   2889  ffaa		       03		      .byte.b	#%00000011	;Every 4 frames
   2890  ffab		       0f		      .byte.b	#%00001111	;Every 16 frames
   2891  ffac		       03		      .byte.b	#%00000011	;Every 4 frames
   2892  ffad
   2893  ffad				   CarIdToMaxSpeedL
   2894  ffad		       80		      .byte.b	#$80
   2895  ffae		       00		      .byte.b	#$00	; One less gear
   2896  ffaf		       80		      .byte.b	#$80
   2897  ffb0		       80		      .byte.b	#$80
   2898  ffb1
   2899  ffb1				   CarIdToMaxGear
   2900  ffb1		       05		      .byte.b	#5
   2901  ffb2		       04		      .byte.b	#4	; One less gear
   2902  ffb3		       05		      .byte.b	#5
   2903  ffb4		       05		      .byte.b	#5
   2904  ffb5
   2905  ffb5				   GearToBreakSpeedTable
   2906  ffb5		       09		      .byte.b	#(BREAK_SPEED - 1)
   2907  ffb6		       09		      .byte.b	#(BREAK_SPEED - 1)
   2908  ffb7		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2909  ffb8		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2910  ffb9		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2911  ffba		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2912  ffbb
   2913  ffbb				   TrafficColorTable
   2914  ffbb		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2915  ffbc		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2916  ffbd		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2917  ffbe		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2918  ffbf
   2919  ffbf				   TrafficChanceTable
   2920  ffbf		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2921  ffc0		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2922  ffc1		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2923  ffc2		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2924  ffc3
   2925  ffc3				   TrafficTimeTable
   2926  ffc3		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2927  ffc4		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2928  ffc5		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2929  ffc6		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2930  ffc7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2931  ffc8
   2932  ffc8
   2933  fffc					      org	$FFFC
   2934  fffc		       00 f0		      .word.w	BeforeStart
   2935  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
