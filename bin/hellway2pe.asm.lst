------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 09	   ENGINE_VOLUME =	9
    104  f000
    105  f000		       00 80	   GRP0Cache  =	$80
    106  f000		       00 81	   PF0Cache   =	$81
    107  f000		       00 82	   PF1Cache   =	$82
    108  f000		       00 83	   PF2Cache   =	$83
    109  f000		       00 84	   GRP1Cache  =	$84
    110  f000		       00 85	   ENABLCache =	$85
    111  f000		       00 86	   ENAM0Cache =	$86
    112  f000		       00 87	   ENAM1Cache =	$87
    113  f000
    114  f000		       00 8c	   FrameCount0 =	$8C	;
    115  f000		       00 8d	   FrameCount1 =	$8D	;
    116  f000
    117  f000		       00 8e	   CollisionCounter =	$8E
    118  f000		       00 8f	   OpCollisionCounter =	$8F
    119  f000
    120  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    121  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    122  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    123  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    124  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    125  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    126  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    127  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    128  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    129  f000
    130  f000							;Temporary variables, multiple uses
    131  f000		       00 b0	   Tmp0       =	$B0
    132  f000		       00 b1	   Tmp1       =	$B1
    133  f000		       00 b2	   Tmp2       =	$B2
    134  f000		       00 b3	   Tmp3       =	$B3
    135  f000		       00 b4	   Tmp4       =	$B4
    136  f000		       00 b5	   Tmp5       =	$B5
    137  f000
    138  f000		       00 b6	   Player0X   =	$B6
    139  f000		       00 b7	   Player1X   =	$B7
    140  f000		       00 b8	   CountdownTimer =	$B8
    141  f000		       00 b9	   OpCountdownTimer =	$B9
    142  f000		       00 ba	   Traffic0Msb =	$BA
    143  f000		       00 bb	   OpTraffic0Msb =	$BB
    144  f000		       00 bc	   SwitchDebounceCounter =	$BC
    145  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    146  f000		       00 be	   TrafficChance =	$BE
    147  f000		       00 bf	   OpTrafficChance =	$BF
    148  f000
    149  f000		       00 c0	   CheckpointTime =	$C0
    150  f000		       00 c1	   OpCheckpointTime =	$C1
    151  f000		       00 c2	   TrafficColor =	$C2
    152  f000		       00 c3	   OpTrafficColor =	$C3
    153  f000		       00 c4	   CurrentDifficulty =	$C4
    154  f000		       00 c5	   OpCurrentDifficulty =	$C5
    155  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    156  f000
    157  f000		       00 c7	   CurrentCarId =	$C7
    158  f000		       00 c8	   OpCurrentCarId =	$C8
    159  f000
    160  f000		       00 c9	   ScoreFontColor =	$C9
    161  f000		       00 ca	   OpScoreFontColor =	$CA
    162  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    163  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    164  f000		       00 cd	   NextCheckpoint =	$CD
    165  f000		       00 ce	   OpNextCheckpoint =	$CE
    166  f000		       00 cf	   OpponentLine =	$CF
    167  f000
    168  f000		       00 d0	   ScoreD0    =	$D0
    169  f000		       00 d1	   ScoreD1    =	$D1
    170  f000		       00 d2	   ScoreD2    =	$D2
    171  f000		       00 d3	   ScoreD3    =	$D3
    172  f000		       00 d4	   ScoreD4    =	$D4
    173  f000
    174  f000		       00 d5	   Gear       =	$D5
    175  f000		       00 d6	   OpGear     =	$D6
    176  f000
    177  f000		       00 d7	   CarSpritePointerL =	$D7
    178  f000		       00 d8	   CarSpritePointerH =	$D8
    179  f000
    180  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    181  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    182  f000
    183  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    184  f000
    185  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    186  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    187  f000
    188  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    189  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    190  f000
    191  f000		       00 f0	   Player0SpeedL =	$F0
    192  f000		       00 f1	   Player1SpeedL =	$F1
    193  f000		       00 f2	   Player0SpeedH =	$F2
    194  f000		       00 f3	   Player1SpeedH =	$F3
    195  f000
    196  f000		       00 f4	   IsOpponentInFront =	$F4	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 00 f7 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 8f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 f0		      STA	Player0SpeedL
    257  f059		       85 f1		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	CallConfigureDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	CallConfigureDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	CallConfigureDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   CallConfigureDifficulty
    274  f071		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    275  f073		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    276  f075		       a5 bd		      LDA	GameStatus
    277  f077		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    278  f079				   StoreCurrentDifficulty
    279  f079		       86 c4		      STX	CurrentDifficulty
    280  f07b		       86 c5		      STX	OpCurrentDifficulty
    281  f07d		       a2 00		      LDX	#0
    282  f07f		       20 d5 f6 	      JSR	ConfigureDifficulty
    283  f082		       e8		      INX
    284  f083		       20 d5 f6 	      JSR	ConfigureDifficulty
    285  f086
    286  f086				   SetGameNotRunning
    287  f086		       a9 00		      LDA	#0
    288  f088		       85 bd		      STA	GameStatus
    289  f08a
    290  f08a				   ConfigureTimer
    291  f08a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    292  f08c		       85 b8		      STA	CountdownTimer	;3
    293  f08e		       85 b9		      STA	OpCountdownTimer	;3
    294  f090
    295  f090				   ConfigurePlayer1XPosition
    296  f090		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    297  f092		       85 b7		      STA	Player1X	;3
    298  f094
    299  f094				   ConfigureOpNextCheckpoint
    300  f094		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    301  f096		       85 ce		      STA	OpNextCheckpoint
    302  f098
    303  f098				   HPositioning 		; Avoid sleep doing needed stuff
    304  f098		       85 02		      STA	WSYNC
    305  f09a
    306  f09a				   ConfigurePlayer0XPosition
    307  f09a		       a9 21		      LDA	#PLAYER_0_X_START	;2
    308  f09c		       85 b6		      STA	Player0X	;3
    309  f09e
    310  f09e				   ConfigureMissileSize
    311  f09e		       a9 30		      LDA	#%00110000	;2 Missile Size
    312  f0a0		       85 04		      STA	NUSIZ0	;3
    313  f0a2		       85 05		      STA	NUSIZ1	;3
    314  f0a4
    315  f0a4				   ConfigureNextCheckpoint
    316  f0a4		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    317  f0a6		       85 cd		      STA	NextCheckpoint
    318  f0a8
    319  f0a8		       a9 00		      LDA	#0	; Avoid missile reseting position 
    320  f0aa							;SLEEP 41
      0  f0aa					      SLEEP	4	;
      1  f0aa				   .CYCLES    SET	4
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     17  f0aa					      REPEND
     18  f0ab		       ea		      nop
     19  f0ac					      REPEND
    322  f0ac		       85 12		      STA	RESM0
      0  f0ae					      SLEEP	2	;
      1  f0ae				   .CYCLES    SET	2
      2  f0ae
      3  f0ae				  -	      IF	.CYCLES < 2
      4  f0ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ae				  -	      ERR
      6  f0ae					      ENDIF
      7  f0ae
      8  f0ae				  -	      IF	.CYCLES & 1
      9  f0ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ae				  -	      nop	0
     11  f0ae				  -	      ELSE
     12  f0ae				  -	      bit	VSYNC
     13  f0ae				  -	      ENDIF
     14  f0ae				  -.CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae					      REPEAT	.CYCLES / 2
     18  f0ae		       ea		      nop
     19  f0af					      REPEND
    324  f0af		       85 14		      STA	RESBL
      0  f0b1					      SLEEP	2
      1  f0b1				   .CYCLES    SET	2
      2  f0b1
      3  f0b1				  -	      IF	.CYCLES < 2
      4  f0b1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b1				  -	      ERR
      6  f0b1					      ENDIF
      7  f0b1
      8  f0b1				  -	      IF	.CYCLES & 1
      9  f0b1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b1				  -	      nop	0
     11  f0b1				  -	      ELSE
     12  f0b1				  -	      bit	VSYNC
     13  f0b1				  -	      ENDIF
     14  f0b1				  -.CYCLES    SET	.CYCLES - 3
     15  f0b1					      ENDIF
     16  f0b1
     17  f0b1					      REPEAT	.CYCLES / 2
     18  f0b1		       ea		      nop
     19  f0b2					      REPEND
    326  f0b2		       85 13		      STA	RESM1
      0  f0b4					      SLEEP	3
      1  f0b4				   .CYCLES    SET	3
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4					      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4					      ELSE
     12  f0b4		       24 00		      bit	VSYNC
     13  f0b6					      ENDIF
     14  f0b6				   .CYCLES    SET	.CYCLES - 3
     15  f0b6					      ENDIF
     16  f0b6
     17  f0b6				  -	      REPEAT	.CYCLES / 2
     18  f0b6				  -	      nop
     19  f0b6					      REPEND
    328  f0b6
    329  f0b6		       a9 e0		      LDA	#$E0
    330  f0b8		       85 24		      STA	HMBL
    331  f0ba		       85 22		      STA	HMM0
    332  f0bc		       85 23		      STA	HMM1
    333  f0be		       85 02		      STA	WSYNC
    334  f0c0		       85 2a		      STA	HMOVE
    335  f0c2		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    336  f0c4		       85 2b		      STA	HMCLR
      0  f0c6					      SLEEP	30
      1  f0c6				   .CYCLES    SET	30
      2  f0c6
      3  f0c6				  -	      IF	.CYCLES < 2
      4  f0c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c6				  -	      ERR
      6  f0c6					      ENDIF
      7  f0c6
      8  f0c6				  -	      IF	.CYCLES & 1
      9  f0c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c6				  -	      nop	0
     11  f0c6				  -	      ELSE
     12  f0c6				  -	      bit	VSYNC
     13  f0c6				  -	      ENDIF
     14  f0c6				  -.CYCLES    SET	.CYCLES - 3
     15  f0c6					      ENDIF
     16  f0c6
     17  f0c6					      REPEAT	.CYCLES / 2
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     17  f0ce					      REPEND
     18  f0cf		       ea		      nop
     17  f0cf					      REPEND
     18  f0d0		       ea		      nop
     17  f0d0					      REPEND
     18  f0d1		       ea		      nop
     17  f0d1					      REPEND
     18  f0d2		       ea		      nop
     17  f0d2					      REPEND
     18  f0d3		       ea		      nop
     17  f0d3					      REPEND
     18  f0d4		       ea		      nop
     19  f0d5					      REPEND
    338  f0d5		       85 10		      STA	RESP0
    339  f0d7							;SLEEP 5 ; Temporarily move player 1 away.
    340  f0d7		       85 11		      STA	RESP1
    341  f0d9
    342  f0d9				   WaitResetToEnd
    343  f0d9		       ad 84 02 	      LDA	INTIM
    344  f0dc		       d0 fb		      BNE	WaitResetToEnd
    345  f0de
    346  f0de				   MainLoop
    347  f0de		       a9 02		      LDA	#2
    348  f0e0		       85 00		      STA	VSYNC
    349  f0e2		       85 02		      STA	WSYNC
    350  f0e4		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    351  f0e6				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    352  f0e6		       a9 01		      LDA	#%00000001	;3
    353  f0e8		       24 df		      BIT	TextFlickerMode	;2
    354  f0ea		       f0 05		      BEQ	TextSideFrameZero	;2
    355  f0ec		       25 8d		      AND	FrameCount1	;2
    356  f0ee		       4c f3 f0 	      JMP	StoreTextSize	;3
    357  f0f1				   TextSideFrameZero
    358  f0f1		       25 8c		      AND	FrameCount0	;2
    359  f0f3				   StoreTextSize
    360  f0f3		       85 de		      STA	TextSide	;3
    361  f0f5
    362  f0f5				   PrepareMaxHMove
      0  f0f5					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0f5				   .CYCLES    SET	18
      2  f0f5
      3  f0f5				  -	      IF	.CYCLES < 2
      4  f0f5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0f5				  -	      ERR
      6  f0f5					      ENDIF
      7  f0f5
      8  f0f5				  -	      IF	.CYCLES & 1
      9  f0f5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0f5				  -	      nop	0
     11  f0f5				  -	      ELSE
     12  f0f5				  -	      bit	VSYNC
     13  f0f5				  -	      ENDIF
     14  f0f5				  -.CYCLES    SET	.CYCLES - 3
     15  f0f5					      ENDIF
     16  f0f5
     17  f0f5					      REPEAT	.CYCLES / 2
     18  f0f5		       ea		      nop
     17  f0f5					      REPEND
     18  f0f6		       ea		      nop
     17  f0f6					      REPEND
     18  f0f7		       ea		      nop
     17  f0f7					      REPEND
     18  f0f8		       ea		      nop
     17  f0f8					      REPEND
     18  f0f9		       ea		      nop
     17  f0f9					      REPEND
     18  f0fa		       ea		      nop
     17  f0fa					      REPEND
     18  f0fb		       ea		      nop
     17  f0fb					      REPEND
     18  f0fc		       ea		      nop
     17  f0fc					      REPEND
     18  f0fd		       ea		      nop
     19  f0fe					      REPEND
    364  f0fe		       a9 80		      LDA	#$80
    365  f100		       85 24		      STA	HMBL
    366  f102		       85 22		      STA	HMM0
    367  f104		       85 23		      STA	HMM1
    368  f106		       85 20		      STA	HMP0
    369  f108		       85 21		      STA	HMP1
    370  f10a		       85 02		      STA	WSYNC
    371  f10c		       85 2a		      STA	HMOVE	; 1/10			
    372  f10e
    373  f10e				   ConfigVBlankTimer
    374  f10e		       a5 c6		      LDA	GameMode
    375  f110		       c9 10		      CMP	#MAX_GAME_MODE
    376  f112		       f0 05		      BEQ	SetVblankTimerQrCode
    377  f114		       a9 29		      LDA	#VBLANK_TIMER
    378  f116		       4c 1b f1 	      JMP	SetVblankTimer
    379  f119				   SetVblankTimerQrCode
    380  f119		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    381  f11b
    382  f11b				   SetVblankTimer
    383  f11b		       85 02		      STA	WSYNC	;3
    384  f11d		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    385  f11f		       8d 96 02 	      STA	TIM64T	;3	
    386  f122		       a9 00		      LDA	#0	;2
    387  f124		       85 00		      STA	VSYNC	;3	
    388  f126
    389  f126				   RandomizeGame
    390  f126		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    391  f128		       d0 2d		      BNE	EndRandomizeGame
    392  f12a		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    393  f12c		       29 02		      AND	#%00000010
    394  f12e		       f0 24		      BEQ	DeterministicGame
    395  f130		       a6 96		      LDX	TrafficOffset1 + 2
    396  f132		       bd 00 fe 	      LDA	AesTable,X
    397  f135		       45 8c		      EOR	FrameCount0
    398  f137		       85 96		      STA	TrafficOffset1 + 2
    399  f139		       85 a6		      STA	OpTrafficOffset1 + 2
    400  f13b		       a6 9a		      LDX	TrafficOffset2 + 2
    401  f13d		       bd 00 fe 	      LDA	AesTable,X
    402  f140		       45 8c		      EOR	FrameCount0
    403  f142		       85 9a		      STA	TrafficOffset2 + 2
    404  f144		       85 aa		      STA	OpTrafficOffset2 + 2
    405  f146		       a6 9e		      LDX	TrafficOffset3 + 2
    406  f148		       bd 00 fe 	      LDA	AesTable,X
    407  f14b		       45 8c		      EOR	FrameCount0
    408  f14d		       85 9e		      STA	TrafficOffset3 + 2
    409  f14f		       85 ae		      STA	OpTrafficOffset3 + 2
    410  f151		       4c 57 f1 	      JMP	EndRandomizeGame
    411  f154
    412  f154				   DeterministicGame
    413  f154		       20 00 f7 	      JSR	DefaultOffsets
    414  f157
    415  f157				   EndRandomizeGame
    416  f157
    417  f157
    418  f157				   CountFrame
    419  f157		       e6 8c		      INC	FrameCount0	; 5
    420  f159		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    421  f15b		       e6 8d		      INC	FrameCount1	; 5 
    422  f15d				   SkipIncFC1
    423  f15d
    424  f15d				   CallDrawQrCode
    425  f15d		       a5 c6		      LDA	GameMode
    426  f15f		       c9 10		      CMP	#MAX_GAME_MODE
    427  f161		       d0 03		      BNE	TestIsGameRunning
    428  f163		       4c 7a fb 	      JMP	DrawQrCode
    429  f166
    430  f166							;Does not update the game if not running
    431  f166				   TestIsGameRunning
    432  f166		       a5 bd		      LDA	GameStatus	;3
    433  f168		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    434  f16a				   SelectCarWithDpadCall		; Only do it when game is stoped
    435  f16a		       a2 00		      LDX	#0	; Player 0
    436  f16c		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    437  f16e		       85 b0		      STA	Tmp0
    438  f170		       20 1d f9 	      JSR	SelectCarWithDpad
    439  f173		       e8		      INX		; Player 1
    440  f174		       20 1d f9 	      JSR	SelectCarWithDpad
    441  f177
    442  f177							; Needs to draw the opponent in the correct line even when game stoped  
    443  f177							; Draeing is a destructive operation
    444  f177		       20 2f f9 	      JSR	ProcessOpponentLine
    445  f17a
    446  f17a				   CallConfigureCarSprites
    447  f17a		       20 d7 f8 	      JSR	ConfigureCarSprites
    448  f17d				   SkipUpdateLogicJump
    449  f17d		       4c c6 f1 	      JMP	SkipUpdateLogic
    450  f180				   ContinueWithGameLogic
    451  f180
    452  f180				   CallEverySecond		; Timer for now
    453  f180		       a2 00		      LDX	#0
    454  f182		       20 50 fb 	      JSR	EverySecond
    455  f185		       e8		      INX
    456  f186		       20 50 fb 	      JSR	EverySecond
    457  f189
    458  f189
    459  f189				   ChangeTextFlickerMode
    460  f189		       a5 bc		      LDA	SwitchDebounceCounter
    461  f18b		       d0 0d		      BNE	EndChangeTextFlickerMode
    462  f18d		       ad 82 02 	      LDA	SWCHB
    463  f190		       29 02		      AND	#%00000010	;Game select
    464  f192		       d0 06		      BNE	EndChangeTextFlickerMode
    465  f194		       e6 df		      INC	TextFlickerMode
    466  f196		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    467  f198		       85 bc		      STA	SwitchDebounceCounter
    468  f19a				   EndChangeTextFlickerMode
    469  f19a
    470  f19a				   CallProcessSpeed
    471  f19a		       a2 00		      LDX	#0
    472  f19c		       20 67 fa 	      JSR	ProcessSpeed
    473  f19f
    474  f19f		       e8		      INX		; Player 1
    475  f1a0		       20 67 fa 	      JSR	ProcessSpeed
    476  f1a3
    477  f1a3				   CallUpdateOffsets
    478  f1a3		       a2 00		      LDX	#0	; Player 0
    479  f1a5		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    480  f1a7		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    481  f1a9		       a5 f0		      LDA	Player0SpeedL
    482  f1ab		       85 b4		      STA	Tmp4
    483  f1ad		       a5 f2		      LDA	Player0SpeedH
    484  f1af		       85 b5		      STA	Tmp5
    485  f1b1		       20 14 fa 	      JSR	UpdateOffsets
    486  f1b4
    487  f1b4							;LDX Exits the call with correct value.
    488  f1b4		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    489  f1b6		       85 b3		      STA	Tmp3
    490  f1b8		       a5 f1		      LDA	Player1SpeedL
    491  f1ba		       85 b4		      STA	Tmp4
    492  f1bc		       a5 f3		      LDA	Player1SpeedH
    493  f1be		       85 b5		      STA	Tmp5
    494  f1c0		       20 14 fa 	      JSR	UpdateOffsets
    495  f1c3
    496  f1c3				   CallProcessOpponentLine
    497  f1c3		       20 2f f9 	      JSR	ProcessOpponentLine
    498  f1c6
    499  f1c6
    500  f1c6				   SkipUpdateLogic		; Continue here if not paused
    501  f1c6
    502  f1c6				   CallStatusUpdateSbr
    503  f1c6		       a2 00		      LDX	#0
    504  f1c8		       20 5d fb 	      JSR	CalculateGear
    505  f1cb		       20 6a fb 	      JSR	ProcessScoreFontColor
    506  f1ce		       e8		      INX
    507  f1cf		       20 5d fb 	      JSR	CalculateGear
    508  f1d2		       20 6a fb 	      JSR	ProcessScoreFontColor
    509  f1d5
    510  f1d5				   CallProcessPlayerStatus
    511  f1d5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    512  f1d7		       85 b0		      STA	Tmp0
    513  f1d9		       a2 00		      LDX	#0
    514  f1db		       20 0a fb 	      JSR	ProcessPlayerStatus
    515  f1de		       a5 a2		      LDA	OpTrafficOffset0 + 2
    516  f1e0		       85 b0		      STA	Tmp0
    517  f1e2		       e8		      INX
    518  f1e3		       20 0a fb 	      JSR	ProcessPlayerStatus
    519  f1e6
    520  f1e6				   CallProcessPlayerSprites
    521  f1e6		       20 d7 f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    522  f1e9
    523  f1e9				   CallProcessSound
    524  f1e9		       a2 00		      LDX	#0
    525  f1eb		       a5 92		      LDA	TrafficOffset0 + 2
    526  f1ed		       85 b1		      STA	Tmp1
    527  f1ef		       20 ec f5 	      JSR	ProcessSound
    528  f1f2		       e8		      INX		; Player 1
    529  f1f3		       a5 a2		      LDA	OpTrafficOffset0 + 2
    530  f1f5		       85 b1		      STA	Tmp1
    531  f1f7		       20 ec f5 	      JSR	ProcessSound
    532  f1fa
    533  f1fa							;Could be done during on vblank to save this comparisson time (before draw score), 
    534  f1fa							;but I am saving vblank cycles for now, in case of 2 players.
    535  f1fa				   ChooseTextSide		; 
    536  f1fa		       a5 de		      LDA	TextSide	;3
    537  f1fc		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    538  f1fe		       4c 93 f2 	      JMP	RightScoreWrite
    539  f201
    540  f201				   LeftScoreWrite
    541  f201		       a5 c9		      LDA	ScoreFontColor
    542  f203		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    543  f205		       f0 62		      BEQ	PrintCheckpoint
    544  f207		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    545  f209		       f0 66		      BEQ	PrintStartGame
    546  f20b		       a5 bd		      LDA	GameStatus
    547  f20d		       f0 6a		      BEQ	PrintHellwayLeft
    548  f20f				   WriteDistance		;Not optimized yet, ugly code.
    549  f20f				   Digit0Timer
    550  f20f		       a5 b8		      LDA	CountdownTimer	;3
    551  f211		       85 b0		      STA	Tmp0
    552  f213		       20 09 f9 	      JSR	BINBCD8
    553  f216							; LDA Tmp1 Also returned in A
    554  f216		       29 0f		      AND	#%00001111	;2
    555  f218		       aa		      TAX		; 2
    556  f219		       bd 6c fc 	      LDA	FontLookup,X	;4 
    557  f21c		       85 d1		      STA	ScoreD1	;3
    558  f21e
    559  f21e				   Digit1Timer
    560  f21e		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    561  f220		       4a		      LSR		; 2
    562  f221		       4a		      LSR		; 2
    563  f222		       4a		      LSR		; 2
    564  f223		       4a		      LSR		; 2
    565  f224		       aa		      TAX		; 2
    566  f225		       bd 6c fc 	      LDA	FontLookup,X	;4
    567  f228		       85 d0		      STA	ScoreD0	;3
    568  f22a
    569  f22a				   SpeedBar
    570  f22a		       a5 f0		      LDA	Player0SpeedL
    571  f22c		       29 e0		      AND	#%11100000	;2 Discard the last bits
    572  f22e		       18		      CLC
    573  f22f		       2a		      ROL		;First goes into carry
    574  f230		       2a		      ROL
    575  f231		       2a		      ROL
    576  f232		       2a		      ROL
    577  f233		       85 b0		      STA	Tmp0
    578  f235		       a5 f2		      LDA	Player0SpeedH
    579  f237		       0a		      ASL
    580  f238		       0a		      ASL
    581  f239		       0a		      ASL
    582  f23a		       05 b0		      ORA	Tmp0
    583  f23c		       aa		      TAX		; 2
    584  f23d		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    585  f240		       85 d2		      STA	ScoreD2	;3
    586  f242
    587  f242				   DistanceCheckpointCount		; Will run all letters in the future
    588  f242		       a5 ba		      LDA	Traffic0Msb
    589  f244		       29 01		      AND	#%00000001
    590  f246		       0a		      ASL
    591  f247		       0a		      ASL
    592  f248		       0a		      ASL
    593  f249		       0a		      ASL
    594  f24a		       85 b0		      STA	Tmp0
    595  f24c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    596  f24e		       29 f0		      AND	#%11110000	;2
    597  f250		       4a		      LSR
    598  f251		       4a		      LSR
    599  f252		       4a		      LSR
    600  f253		       4a		      LSR
    601  f254		       05 b0		      ORA	Tmp0
    602  f256		       aa		      TAX		; 2
    603  f257		       bd 6c fc 	      LDA	FontLookup,X	;4 
    604  f25a		       85 d3		      STA	ScoreD3	;3
    605  f25c
    606  f25c				   DistanceBar		; 16 subdivisions per checkpoint
    607  f25c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    608  f25e		       29 0f		      AND	#%00001111	;2
    609  f260		       aa		      TAX		; 2
    610  f261		       bd 8c fc 	      LDA	BarLookup,X	;4 
    611  f264		       85 d4		      STA	ScoreD4	;3
    612  f266
    613  f266				   EndDrawDistance
    614  f266		       4c 1c f3 	      JMP	RightScoreWriteEnd	;3
    615  f269
    616  f269				   PrintCheckpoint
    617  f269		       a2 00		      LDX	#<CheckpointText
    618  f26b		       20 15 f7 	      JSR	PrintStaticText
    619  f26e		       4c 1c f3 	      JMP	RightScoreWriteEnd	;3
    620  f271				   PrintStartGame
    621  f271		       a2 23		      LDX	#<GoText
    622  f273		       20 15 f7 	      JSR	PrintStaticText
    623  f276		       4c 1c f3 	      JMP	RightScoreWriteEnd	;3
    624  f279
    625  f279				   PrintHellwayLeft
    626  f279		       a5 8d		      LDA	FrameCount1
    627  f27b		       29 01		      AND	#1
    628  f27d		       d0 05		      BNE	PrintCreditsLeft
    629  f27f		       a2 05		      LDX	#<HellwayLeftText
    630  f281		       4c 86 f2 	      JMP	PrintGameMode
    631  f284				   PrintCreditsLeft
    632  f284		       a2 0f		      LDX	#<OpbText
    633  f286
    634  f286				   PrintGameMode
    635  f286		       20 15 f7 	      JSR	PrintStaticText
    636  f289		       a6 c6		      LDX	GameMode
    637  f28b		       bd 6c fc 	      LDA	FontLookup,X	;4 
    638  f28e		       85 d0		      STA	ScoreD0	;3
    639  f290		       4c 1c f3 	      JMP	RightScoreWriteEnd	;3
    640  f293
    641  f293				   RightScoreWrite
    642  f293		       a5 bd		      LDA	GameStatus
    643  f295		       f0 64		      BEQ	PrintHellwayRight
    644  f297		       a5 c9		      LDA	ScoreFontColor
    645  f299		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    646  f29b		       f0 d4		      BEQ	PrintStartGame
    647  f29d		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    648  f29f		       f0 6d		      BEQ	PrintGameOver
    649  f2a1
    650  f2a1				   OpDigit0Timer
    651  f2a1		       a5 b9		      LDA	OpCountdownTimer	;3
    652  f2a3		       85 b0		      STA	Tmp0
    653  f2a5		       20 09 f9 	      JSR	BINBCD8
    654  f2a8							; LDA Tmp1 Also returned in A
    655  f2a8		       29 0f		      AND	#%00001111	;2
    656  f2aa		       aa		      TAX		; 2
    657  f2ab		       bd 6c fc 	      LDA	FontLookup,X	;4 
    658  f2ae		       85 d4		      STA	ScoreD4	;3
    659  f2b0
    660  f2b0				   OpDigit1Timer
    661  f2b0		       a5 b1		      LDA	Tmp1	;3
    662  f2b2		       4a		      LSR		; 2
    663  f2b3		       4a		      LSR		; 2
    664  f2b4		       4a		      LSR		; 2
    665  f2b5		       4a		      LSR		; 2
    666  f2b6		       aa		      TAX		; 2
    667  f2b7		       bd 6c fc 	      LDA	FontLookup,X	;4
    668  f2ba		       85 d3		      STA	ScoreD3	;3
    669  f2bc
    670  f2bc				   OpSpeedBar
    671  f2bc		       a5 f1		      LDA	Player1SpeedL
    672  f2be		       29 e0		      AND	#%11100000	;2 Discard the last bits
    673  f2c0		       18		      CLC
    674  f2c1		       2a		      ROL		;First goes into carry
    675  f2c2		       2a		      ROL
    676  f2c3		       2a		      ROL
    677  f2c4		       2a		      ROL
    678  f2c5		       85 b0		      STA	Tmp0
    679  f2c7		       a5 f3		      LDA	Player1SpeedH
    680  f2c9		       0a		      ASL
    681  f2ca		       0a		      ASL
    682  f2cb		       0a		      ASL
    683  f2cc		       05 b0		      ORA	Tmp0
    684  f2ce		       aa		      TAX		; 2
    685  f2cf		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    686  f2d2		       85 d2		      STA	ScoreD2	;3
    687  f2d4
    688  f2d4				   OpDistanceCheckpointCount
    689  f2d4		       a5 bb		      LDA	OpTraffic0Msb
    690  f2d6		       29 01		      AND	#%00000001
    691  f2d8		       0a		      ASL
    692  f2d9		       0a		      ASL
    693  f2da		       0a		      ASL
    694  f2db		       0a		      ASL
    695  f2dc		       85 b0		      STA	Tmp0
    696  f2de		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    697  f2e0		       29 f0		      AND	#%11110000	;2
    698  f2e2		       4a		      LSR
    699  f2e3		       4a		      LSR
    700  f2e4		       4a		      LSR
    701  f2e5		       4a		      LSR
    702  f2e6		       05 b0		      ORA	Tmp0
    703  f2e8		       aa		      TAX		; 2
    704  f2e9		       bd 6c fc 	      LDA	FontLookup,X	;4 
    705  f2ec		       85 d1		      STA	ScoreD1	;3
    706  f2ee
    707  f2ee				   OpDistanceBar		; 16 subdivisions per checkpoint
    708  f2ee		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    709  f2f0		       29 0f		      AND	#%00001111	;2
    710  f2f2		       aa		      TAX		; 2
    711  f2f3		       bd 8c fc 	      LDA	BarLookup,X	;4 
    712  f2f6		       85 d0		      STA	ScoreD0	;3
    713  f2f8		       4c 1c f3 	      JMP	RightScoreWriteEnd
    714  f2fb
    715  f2fb				   PrintHellwayRight
    716  f2fb		       a5 8d		      LDA	FrameCount1
    717  f2fd		       29 01		      AND	#1
    718  f2ff		       d0 05		      BNE	PrintCreditsRight
    719  f301		       a2 0a		      LDX	#<HellwayRightText
    720  f303		       4c 08 f3 	      JMP	PrintRightIntro
    721  f306				   PrintCreditsRight
    722  f306		       a2 14		      LDX	#<YearText
    723  f308				   PrintRightIntro
    724  f308		       20 15 f7 	      JSR	PrintStaticText
    725  f30b		       4c 1c f3 	      JMP	RightScoreWriteEnd
    726  f30e				   PrintGameOver
    727  f30e		       a5 8c		      LDA	FrameCount0
    728  f310		       30 05		      BMI	PrintOverText
    729  f312		       a2 19		      LDX	#<GameText
    730  f314		       4c 19 f3 	      JMP	StoreGameOverText
    731  f317				   PrintOverText
    732  f317		       a2 1e		      LDX	#<OverText
    733  f319				   StoreGameOverText
    734  f319		       20 15 f7 	      JSR	PrintStaticText
    735  f31c				   RightScoreWriteEnd
    736  f31c
    737  f31c
    738  f31c				   ScoreBackgroundColor
    739  f31c		       a2 00		      LDX	#0
    740  f31e		       ad 82 02 	      LDA	SWCHB
    741  f321		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    742  f323		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    743  f325		       f0 04		      BEQ	BlackAndWhiteScoreBg
    744  f327		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    745  f329		       a2 03		      LDX	#BACKGROUND_COLOR
    746  f32b				   BlackAndWhiteScoreBg
    747  f32b		       85 b2		      STA	Tmp2	; Score Background
    748  f32d		       86 b3		      STX	Tmp3	; Traffic Background
    749  f32f
    750  f32f				   ConfigurePFForScore
    751  f32f							;LDA #SCORE_BACKGROUND_COLOR; Done above
    752  f32f		       85 09		      STA	COLUBK
    753  f331		       20 84 f6 	      JSR	ClearAll
    754  f334		       a9 02		      LDA	#%00000010	; Score mode
    755  f336		       85 0a		      STA	CTRLPF
    756  f338		       a5 de		      LDA	TextSide	;3
    757  f33a		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    758  f33c				   RightScoreOn
    759  f33c		       a5 ca		      LDA	OpScoreFontColor
    760  f33e		       85 07		      STA	COLUP1
    761  f340		       a5 b2		      LDA	Tmp2
    762  f342		       85 06		      STA	COLUP0
    763  f344		       4c 4f f3 	      JMP	CallWaitForVblankEnd
    764  f347				   LeftScoreOn
    765  f347		       a5 c9		      LDA	ScoreFontColor
    766  f349		       85 06		      STA	COLUP0
    767  f34b		       a5 b2		      LDA	Tmp2
    768  f34d		       85 07		      STA	COLUP1
    769  f34f
    770  f34f							; After here we are going to update the screen, No more heavy code
    771  f34f				   CallWaitForVblankEnd
    772  f34f		       20 a8 f8 	      JSR	WaitForVblankEnd
    773  f352
    774  f352				   DrawScoreHud
    775  f352		       20 33 f7 	      JSR	PrintScore
    776  f355
    777  f355		       85 02		      STA	WSYNC
    778  f357
    779  f357		       a5 0c		      LDA	INPT4	;3
    780  f359							;BPL WaitAnotherScoreLine ; Draw traffic while button is pressed.
    781  f359		       4c 6c f3 	      JMP	WaitAnotherScoreLine	; Temporary disabling score, please enable line above!
    782  f35c		       a5 c9		      LDA	ScoreFontColor
    783  f35e		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    784  f360		       d0 0a		      BNE	WaitAnotherScoreLine
    785  f362		       a5 de		      LDA	TextSide	;3
    786  f364		       d0 03		      BNE	LeftScoreOnGameOver
    787  f366		       4c 82 f8 	      JMP	DrawGameOverScreenRight
    788  f369				   LeftScoreOnGameOver
    789  f369		       4c f4 f7 	      JMP	DrawGameOverScreenLeft
    790  f36c
    791  f36c				   WaitAnotherScoreLine
    792  f36c		       85 02		      STA	WSYNC
    793  f36e
    794  f36e				   PrepareForTraffic
    795  f36e		       20 9a f6 	      JSR	ClearPF	; 32
    796  f371
    797  f371		       85 02		      STA	WSYNC
    798  f373		       85 2a		      STA	HMOVE
    799  f375		       85 02		      STA	WSYNC
    800  f377		       85 2a		      STA	HMOVE
    801  f379
    802  f379		       a9 30		      LDA	#%00110000	; 2 Score mode
    803  f37b		       85 0a		      STA	CTRLPF	;3
    804  f37d
    805  f37d		       a5 8c		      LDA	FrameCount0	;3
    806  f37f		       29 01		      AND	#%00000001	;2
    807  f381		       aa		      TAX		;2
    808  f382		       b5 c2		      LDA	TrafficColor,X	;4
    809  f384		       85 08		      STA	COLUPF	;3
    810  f386
    811  f386		       a9 96		      LDA	#PLAYER1_COLOR	;2
    812  f388		       85 07		      STA	COLUP1	;3
    813  f38a
    814  f38a		       a5 c9		      LDA	ScoreFontColor	;3
    815  f38c		       85 06		      STA	COLUP0	;3
    816  f38e
    817  f38e		       a5 ca		      LDA	OpScoreFontColor	;3
    818  f390		       85 07		      STA	COLUP1	;3
    819  f392
    820  f392		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    821  f394
      0  f394					      SLEEP	24	; Keep the backround color more time, only needed if still support non dark mode
      1  f394				   .CYCLES    SET	24
      2  f394
      3  f394				  -	      IF	.CYCLES < 2
      4  f394				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f394				  -	      ERR
      6  f394					      ENDIF
      7  f394
      8  f394				  -	      IF	.CYCLES & 1
      9  f394				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f394				  -	      nop	0
     11  f394				  -	      ELSE
     12  f394				  -	      bit	VSYNC
     13  f394				  -	      ENDIF
     14  f394				  -.CYCLES    SET	.CYCLES - 3
     15  f394					      ENDIF
     16  f394
     17  f394					      REPEAT	.CYCLES / 2
     18  f394		       ea		      nop
     17  f394					      REPEND
     18  f395		       ea		      nop
     17  f395					      REPEND
     18  f396		       ea		      nop
     17  f396					      REPEND
     18  f397		       ea		      nop
     17  f397					      REPEND
     18  f398		       ea		      nop
     17  f398					      REPEND
     18  f399		       ea		      nop
     17  f399					      REPEND
     18  f39a		       ea		      nop
     17  f39a					      REPEND
     18  f39b		       ea		      nop
     17  f39b					      REPEND
     18  f39c		       ea		      nop
     17  f39c					      REPEND
     18  f39d		       ea		      nop
     17  f39d					      REPEND
     18  f39e		       ea		      nop
     17  f39e					      REPEND
     18  f39f		       ea		      nop
     19  f3a0					      REPEND
    823  f3a0
    824  f3a0		       a6 b3		      LDX	Tmp3	; Background color.
    825  f3a2
    826  f3a2		       a5 8c		      LDA	FrameCount0	;Brach flag
    827  f3a4		       29 01		      AND	#%00000001
    828  f3a6
    829  f3a6		       86 09		      STX	COLUBK	;3
    830  f3a8		       d0 05		      BNE	OpDrawCache	;2
    831  f3aa		       4c 69 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    832  f3ad							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    833  f3ad
    834  f3ad							;main scanline loop...
    835  f3ad				   OpScanLoop
    836  f3ad		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    837  f3af
    838  f3af							;Start of next line!			
    839  f3af				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    840  f3af
    841  f3af		       a5 80		      LDA	GRP0Cache	;3
    842  f3b1		       85 1b		      STA	GRP0	;3
    843  f3b3
    844  f3b3		       a5 84		      LDA	GRP1Cache	;3
    845  f3b5		       85 1c		      STA	GRP1	;3
    846  f3b7
    847  f3b7		       a5 85		      LDA	ENABLCache	;3
    848  f3b9		       85 1f		      STA	ENABL	;3
    849  f3bb
    850  f3bb		       a5 86		      LDA	ENAM0Cache	;3
    851  f3bd		       85 1d		      STA	ENAM0	;3
    852  f3bf
    853  f3bf		       a5 87		      LDA	ENAM1Cache	;3
    854  f3c1		       85 1e		      STA	ENAM1	;3
    855  f3c3
    856  f3c3		       a5 81		      LDA	PF0Cache	;3
    857  f3c5		       85 0d		      STA	PF0	;3
    858  f3c7
    859  f3c7		       a9 00		      LDA	#0	;2
    860  f3c9							;STA PF0	     ;3
    861  f3c9		       85 80		      STA	GRP0Cache	;3
    862  f3cb		       85 86		      STA	ENAM0Cache	;3
    863  f3cd		       85 85		      STA	ENABLCache	;3
    864  f3cf		       85 87		      STA	ENAM1Cache	; 3
    865  f3d1							;STA GRP1Cache ;3
    866  f3d1		       85 0d		      STA	PF0	;3
    867  f3d3							;STA PF2	     ;3
    868  f3d3
    869  f3d3		       a5 83		      LDA	PF2Cache	;3
    870  f3d5		       85 0f		      STA	PF2	;3
    871  f3d7
    872  f3d7				   OpDrawCar0
    873  f3d7		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    874  f3d9		       b0 04		      BCS	OpSkipDrawCar	;2
    875  f3db		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    876  f3dd		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    877  f3df				   OpSkipDrawCar
    878  f3df
    879  f3df							;BEQ DrawTraffic3
    880  f3df				   OpDrawTraffic1		; 33
    881  f3df		       98		      TYA		; 2
    882  f3e0		       18		      CLC		; 2 
    883  f3e1		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    884  f3e3		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    885  f3e5		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    886  f3e7		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    887  f3e9		       4c ee f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    888  f3ec				   OpEorOffsetWithCarry
    889  f3ec		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    890  f3ee				   OpAfterEorOffsetWithCarry		;17
    891  f3ee		       aa		      TAX		;2
    892  f3ef		       bd 00 fe 	      LDA	AesTable,X	; 4
    893  f3f2		       c5 bf		      CMP	OpTrafficChance	;3
    894  f3f4		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    895  f3f6		       a9 ff		      LDA	#$FF	;2
    896  f3f8		       85 86		      STA	ENAM0Cache	;3
    897  f3fa				   OpFinishDrawTraffic1
    898  f3fa
    899  f3fa				   OpErasePF2
    900  f3fa		       a9 00		      LDA	#0
    901  f3fc		       85 0f		      STA	PF2
    902  f3fe
    903  f3fe				   OpDrawTraffic2		; 33
    904  f3fe		       98		      TYA		; 2
    905  f3ff		       18		      CLC		; 2 
    906  f400		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    907  f402		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    908  f404		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    909  f406		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    910  f408		       4c 0d f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    911  f40b				   OpEorOffsetWithCarry2
    912  f40b		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    913  f40d				   OpAfterEorOffsetWithCarry2		;17
    914  f40d		       aa		      TAX		;2
    915  f40e		       bd 00 fe 	      LDA	AesTable,X	; 4
    916  f411		       c5 bf		      CMP	OpTrafficChance	;3
    917  f413		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    918  f415		       a9 02		      LDA	#%00000010	;2
    919  f417		       85 85		      STA	ENABLCache	;3
    920  f419				   OpFinishDrawTraffic2
    921  f419
    922  f419							;STA WSYNC ;65 / 137
    923  f419
    924  f419							; LDA Tmp0 ; Flicker this line if drawing car
    925  f419							; BEQ FinishDrawTraffic4
    926  f419				   OpDrawTraffic3		; 33
    927  f419		       98		      TYA		; 2
    928  f41a		       18		      CLC		; 2 
    929  f41b		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    930  f41d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    931  f41f		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    932  f421		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    933  f423		       4c 28 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    934  f426				   OpEorOffsetWithCarry3
    935  f426		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    936  f428				   OpAfterEorOffsetWithCarry3		;17
    937  f428		       aa		      TAX		;2
    938  f429		       bd 00 fe 	      LDA	AesTable,X	; 4
    939  f42c		       c5 bf		      CMP	OpTrafficChance	;3
    940  f42e		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    941  f430		       a9 02		      LDA	#%00000010	;2
    942  f432		       85 87		      STA	ENAM1Cache
    943  f434				   OpFinishDrawTraffic3
    944  f434
    945  f434				   OpDrawOponent		;26
    946  f434		       84 b0		      STY	Tmp0	;3
    947  f436		       a4 cf		      LDY	OpponentLine	;3
    948  f438		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    949  f43a		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    950  f43c				   OpDrawOpponent
    951  f43c		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    952  f43e		       85 80		      STA	GRP0Cache	;3
    953  f440		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    954  f442		       a4 b0		      LDY	Tmp0	;3
    955  f444		       4c 58 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    956  f447				   OpSkipDrawOpponent
    957  f447		       c6 cf		      DEC	OpponentLine	;5
    958  f449		       a4 b0		      LDY	Tmp0	;3
    959  f44b
    960  f44b
    961  f44b				   OpDrawTraffic0		; 21 2pe
    962  f44b		       98		      TYA		; 2
    963  f44c		       18		      CLC		; 2 
    964  f44d		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    965  f44f		       29 08		      AND	#%00001000	;2
    966  f451		       f0 05		      BEQ	OpHasNoBorderP0	;3
    967  f453				   OpHasBorderP0
    968  f453		       a9 70		      LDA	#%01110000	; 2
    969  f455		       4c 5a f4 	      JMP	OpStoreBorderP0	; 3
    970  f458				   OpHasNoBorderP0
    971  f458		       a9 00		      LDA	#0	; 2
    972  f45a				   OpStoreBorderP0
    973  f45a		       85 81		      STA	PF0Cache	; 3
    974  f45c		       85 83		      STA	PF2Cache	; 3
    975  f45e
    976  f45e				   OpSkipDrawTraffic0
    977  f45e
    978  f45e				   OpWhileScanLoop
    979  f45e		       88		      DEY		;2
    980  f45f		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    981  f461		       4c ad f3 	      JMP	OpScanLoop	;3
    982  f464				   OpFinishScanLoop		; 7 209 of 222
    983  f464		       4c 1c f5 	      JMP	FinishScanLoop
    984  f467
    985  f467							;main scanline loop...
    986  f467				   ScanLoop
    987  f467		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    988  f469
    989  f469							;Start of next line!			
    990  f469				   DrawCache		;63 Is the last line going to the top of the next frame?
    991  f469		       a5 81		      LDA	PF0Cache	;3
    992  f46b		       85 0d		      STA	PF0	;3
    993  f46d
    994  f46d		       a5 80		      LDA	GRP0Cache	;3
    995  f46f		       85 1b		      STA	GRP0	;3
    996  f471
    997  f471		       a5 84		      LDA	GRP1Cache	;3
    998  f473		       85 1c		      STA	GRP1	;3
    999  f475
   1000  f475		       a5 86		      LDA	ENAM0Cache	;3
   1001  f477		       85 1d		      STA	ENAM0	;3
   1002  f479
   1003  f479		       a5 85		      LDA	ENABLCache	;3
   1004  f47b		       85 1f		      STA	ENABL	;3
   1005  f47d
   1006  f47d		       a5 87		      LDA	ENAM1Cache	;3
   1007  f47f		       85 1e		      STA	ENAM1	;3
   1008  f481
   1009  f481		       a5 83		      LDA	PF2Cache	;3
   1010  f483		       85 0f		      STA	PF2	;3
   1011  f485
   1012  f485		       a9 00		      LDA	#0	;2
   1013  f487		       85 0d		      STA	PF0	;3
   1014  f489		       85 84		      STA	GRP1Cache	;3
   1015  f48b		       85 85		      STA	ENABLCache	;3
   1016  f48d		       85 86		      STA	ENAM0Cache	;3
   1017  f48f		       85 87		      STA	ENAM1Cache	; 3
   1018  f491							;STA GRP0Cache
   1019  f491		       85 0f		      STA	PF2	;3
   1020  f493
   1021  f493				   DrawCar0
   1022  f493		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1023  f495		       b0 04		      BCS	SkipDrawCar	;2
   1024  f497		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1025  f499		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1026  f49b				   SkipDrawCar
   1027  f49b
   1028  f49b							;BEQ DrawTraffic3
   1029  f49b				   DrawTraffic1 		; 33
   1030  f49b		       98		      TYA		; 2
   1031  f49c		       18		      CLC		; 2 
   1032  f49d		       65 95		      ADC	TrafficOffset1 + 1	;3
   1033  f49f		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1034  f4a1		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1035  f4a3		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1036  f4a5		       4c aa f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1037  f4a8				   EorOffsetWithCarry
   1038  f4a8		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1039  f4aa				   AfterEorOffsetWithCarry		;17
   1040  f4aa		       aa		      TAX		;2
   1041  f4ab		       bd 00 fe 	      LDA	AesTable,X	; 4
   1042  f4ae		       c5 be		      CMP	TrafficChance	;3
   1043  f4b0		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1044  f4b2		       a9 ff		      LDA	#$FF	;2
   1045  f4b4		       85 86		      STA	ENAM0Cache	;3
   1046  f4b6				   FinishDrawTraffic1
   1047  f4b6
   1048  f4b6				   DrawTraffic2 		; 33
   1049  f4b6		       98		      TYA		; 2
   1050  f4b7		       18		      CLC		; 2 
   1051  f4b8		       65 99		      ADC	TrafficOffset2 + 1	;3
   1052  f4ba		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1053  f4bc		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1054  f4be		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1055  f4c0		       4c c5 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1056  f4c3				   EorOffsetWithCarry2
   1057  f4c3		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1058  f4c5				   AfterEorOffsetWithCarry2		;17
   1059  f4c5		       aa		      TAX		;2
   1060  f4c6		       bd 00 fe 	      LDA	AesTable,X	; 4
   1061  f4c9		       c5 be		      CMP	TrafficChance	;3
   1062  f4cb		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1063  f4cd		       a9 02		      LDA	#%00000010	;2
   1064  f4cf		       85 85		      STA	ENABLCache	;3
   1065  f4d1				   FinishDrawTraffic2
   1066  f4d1
   1067  f4d1							;STA WSYNC ;65 / 137
   1068  f4d1
   1069  f4d1							; LDA Tmp0 ; Flicker this line if drawing car
   1070  f4d1							; BEQ FinishDrawTraffic4
   1071  f4d1				   DrawTraffic3 		; 33
   1072  f4d1		       98		      TYA		; 2
   1073  f4d2		       18		      CLC		; 2 
   1074  f4d3		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1075  f4d5		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1076  f4d7		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1077  f4d9		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1078  f4db		       4c e0 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1079  f4de				   EorOffsetWithCarry3
   1080  f4de		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1081  f4e0				   AfterEorOffsetWithCarry3		;17
   1082  f4e0		       aa		      TAX		;2
   1083  f4e1		       bd 00 fe 	      LDA	AesTable,X	; 4
   1084  f4e4		       c5 be		      CMP	TrafficChance	;3
   1085  f4e6		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1086  f4e8		       a9 02		      LDA	#%00000010	;2
   1087  f4ea		       85 87		      STA	ENAM1Cache
   1088  f4ec				   FinishDrawTraffic3
   1089  f4ec
   1090  f4ec
   1091  f4ec				   DrawOponent		;26
   1092  f4ec		       84 b0		      STY	Tmp0	;3
   1093  f4ee		       a4 cf		      LDY	OpponentLine	;3
   1094  f4f0		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1095  f4f2		       b0 0b		      BCS	SkipDrawOpponent	;2
   1096  f4f4				   DrawOpponent
   1097  f4f4		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1098  f4f6		       85 84		      STA	GRP1Cache	;3
   1099  f4f8		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1100  f4fa		       a4 b0		      LDY	Tmp0	;3
   1101  f4fc		       4c 10 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1102  f4ff				   SkipDrawOpponent
   1103  f4ff		       c6 cf		      DEC	OpponentLine	;5
   1104  f501		       a4 b0		      LDY	Tmp0	;3
   1105  f503
   1106  f503				   DrawTraffic0 		; 21 2pe
   1107  f503		       98		      TYA		; 2
   1108  f504		       18		      CLC		; 2 
   1109  f505		       65 91		      ADC	TrafficOffset0 + 1	;3
   1110  f507		       29 08		      AND	#%00001000	;2
   1111  f509		       f0 05		      BEQ	HasNoBorderP0	;3
   1112  f50b				   HasBorderP0
   1113  f50b		       a9 70		      LDA	#%01110000	; 2
   1114  f50d		       4c 12 f5 	      JMP	StoreBorderP0	; 3
   1115  f510				   HasNoBorderP0
   1116  f510		       a9 00		      LDA	#0	; 2
   1117  f512				   StoreBorderP0
   1118  f512		       85 81		      STA	PF0Cache	; 3
   1119  f514		       85 83		      STA	PF2Cache	; 3
   1120  f516
   1121  f516				   SkipDrawTraffic0
   1122  f516
   1123  f516				   WhileScanLoop
   1124  f516		       88		      DEY		;2
   1125  f517		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1126  f519		       4c 67 f4 	      JMP	ScanLoop	;3
   1127  f51c				   FinishScanLoop		; 7 209 of 222
   1128  f51c
   1129  f51c		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1130  f51e		       20 a9 f6 	      JSR	LoadAll
   1131  f521		       85 02		      STA	WSYNC	; do stuff!
   1132  f523		       85 02		      STA	WSYNC
   1133  f525		       85 02		      STA	WSYNC
   1134  f527
   1135  f527				   PrepareOverscan
   1136  f527		       a9 02		      LDA	#2
   1137  f529		       85 02		      STA	WSYNC
   1138  f52b							;STA HMOVE	; HMOVE 10
   1139  f52b		       85 01		      STA	VBLANK
   1140  f52d
   1141  f52d		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1142  f52f		       8d 96 02 	      STA	TIM64T
   1143  f532
   1144  f532		       85 2b		      STA	HMCLR	; Before we process car movement
   1145  f534							;Read Fire Button before, will make it start the game for now.
   1146  f534				   StartGame
   1147  f534		       a5 0c		      LDA	INPT4	;3
   1148  f536		       25 0d		      AND	INPT5	;3 player 
   1149  f538		       30 34		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1150  f53a		       a5 8c		      LDA	FrameCount0
   1151  f53c		       29 01		      AND	#%00000001
   1152  f53e		       d0 2e		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1153  f540		       a5 bd		      LDA	GameStatus	;3
   1154  f542		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1155  f544		       d0 28		      BNE	SkipGameStart
   1156  f546		       a5 c6		      LDA	GameMode
   1157  f548		       c9 10		      CMP	#MAX_GAME_MODE
   1158  f54a		       d0 0b		      BNE	SetGameRunning
   1159  f54c		       a9 00		      LDA	#0
   1160  f54e		       85 c6		      STA	GameMode
   1161  f550		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1162  f552		       85 bc		      STA	SwitchDebounceCounter
   1163  f554		       4c 6e f5 	      JMP	SkipGameStart
   1164  f557				   SetGameRunning
   1165  f557		       e6 bd		      INC	GameStatus
   1166  f559		       a9 00		      LDA	#0	;
   1167  f55b		       85 8c		      STA	FrameCount0
   1168  f55d		       85 8d		      STA	FrameCount1
   1169  f55f		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1170  f561		       85 c9		      STA	ScoreFontColor
   1171  f563		       85 ca		      STA	OpScoreFontColor
   1172  f565		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1173  f567		       85 cb		      STA	ScoreFontColorHoldChange
   1174  f569		       85 cc		      STA	OpScoreFontColorHoldChange
   1175  f56b		       4c dc f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1176  f56e				   SkipGameStart
   1177  f56e
   1178  f56e				   ReadSwitches
   1179  f56e		       a6 bc		      LDX	SwitchDebounceCounter
   1180  f570		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1181  f572		       a9 01		      LDA	#%00000001
   1182  f574		       2c 82 02 	      BIT	SWCHB
   1183  f577		       d0 07		      BNE	SkipReset
   1184  f579		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1185  f57b		       85 bc		      STA	SwitchDebounceCounter
   1186  f57d		       4c e4 f5 	      JMP	OverScanWaitBeforeReset
   1187  f580				   SkipReset
   1188  f580
   1189  f580				   GameModeSelect
   1190  f580		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1191  f582		       d0 1c		      BNE	SkipGameSelect
   1192  f584		       20 d5 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1193  f587				   ContinueGameSelect
   1194  f587		       a9 02		      LDA	#%00000010
   1195  f589		       2c 82 02 	      BIT	SWCHB
   1196  f58c		       d0 12		      BNE	SkipGameSelect
   1197  f58e		       a6 c6		      LDX	GameMode
   1198  f590		       e0 10		      CPX	#MAX_GAME_MODE
   1199  f592		       f0 04		      BEQ	ResetGameMode
   1200  f594		       e8		      INX
   1201  f595		       4c 9a f5 	      JMP	StoreGameMode
   1202  f598				   ResetGameMode
   1203  f598		       a2 00		      LDX	#0
   1204  f59a				   StoreGameMode
   1205  f59a		       86 c6		      STX	GameMode
   1206  f59c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1207  f59e		       85 bc		      STA	SwitchDebounceCounter
   1208  f5a0				   SkipGameSelect
   1209  f5a0		       4c a5 f5 	      JMP	EndReadSwitches
   1210  f5a3				   DecrementSwitchDebounceCounter
   1211  f5a3		       c6 bc		      DEC	SwitchDebounceCounter
   1212  f5a5				   EndReadSwitches
   1213  f5a5
   1214  f5a5				   DoNotTurnBeforeStart
   1215  f5a5							;STA HMCLR
   1216  f5a5		       a5 bd		      LDA	GameStatus
   1217  f5a7		       f0 33		      BEQ	OverScanWait
   1218  f5a9
   1219  f5a9							; Last thing, will overrride hmove
   1220  f5a9				   CallTestColisionAndMove
   1221  f5a9		       a2 00		      LDX	#0	; Player 0
   1222  f5ab							; Colision with traffic, each player check different flags,
   1223  f5ab		       a5 8c		      LDA	FrameCount0
   1224  f5ad		       29 01		      AND	#%00000001
   1225  f5af		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1226  f5b1		       20 80 f9 	      JSR	IsOpponentColliding
   1227  f5b4		       05 01		      ORA	CXM1P
   1228  f5b6		       4a		      LSR
   1229  f5b7		       05 00		      ORA	CXM0P
   1230  f5b9		       05 02		      ORA	CXP0FB
   1231  f5bb							; ORA CXPPMM ; Collision between players will have its own rules
   1232  f5bb				   SkipColisionPlayer0		; Should not colide on opponent side.
   1233  f5bb		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1234  f5bd		       85 b2		      STA	Tmp2
   1235  f5bf		       20 94 f9 	      JSR	TestCollisionAndMove
   1236  f5c2
   1237  f5c2		       e8		      INX		; player 1
   1238  f5c3		       a5 8c		      LDA	FrameCount0
   1239  f5c5		       29 01		      AND	#%00000001
   1240  f5c7		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1241  f5c9		       20 80 f9 	      JSR	IsOpponentColliding
   1242  f5cc		       05 00		      ORA	CXM0P
   1243  f5ce		       4a		      LSR
   1244  f5cf		       05 01		      ORA	CXM1P
   1245  f5d1		       05 03		      ORA	CXP1FB
   1246  f5d3				   SkipColisionPlayer1
   1247  f5d3		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1248  f5d5		       85 b2		      STA	Tmp2
   1249  f5d7		       20 94 f9 	      JSR	TestCollisionAndMove
   1250  f5da
   1251  f5da				   ClearCollision
   1252  f5da		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1253  f5dc
   1254  f5dc				   OverScanWait
   1255  f5dc		       ad 84 02 	      LDA	INTIM
   1256  f5df		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1257  f5e1		       4c de f0 	      JMP	MainLoop
   1258  f5e4
   1259  f5e4				   OverScanWaitBeforeReset
   1260  f5e4		       ad 84 02 	      LDA	INTIM
   1261  f5e7		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1262  f5e9		       4c 14 f0 	      JMP	Start
   1263  f5ec
   1264  f5ec				   Subroutines
   1265  f5ec
   1266  f5ec							;X Player
   1267  f5ec							;Tmp1 TrafficOffset 2
   1268  f5ec				   ProcessSound
   1269  f5ec				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1270  f5ec		       b5 c9		      LDA	ScoreFontColor,X	;3
   1271  f5ee		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1272  f5f0		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1273  f5f2		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1274  f5f4		       f0 29		      BEQ	PlayCheckpoint	;2
   1275  f5f6		       b5 8e		      LDA	CollisionCounter,X	;3
   1276  f5f8		       c9 e0		      CMP	#$E0	;2
   1277  f5fa		       b0 14		      BCS	PlayColision	;2
   1278  f5fc		       b5 cd		      LDA	NextCheckpoint,X	;3
   1279  f5fe		       38		      SEC		;2
   1280  f5ff		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1281  f601		       c9 02		      CMP	#$02	;2
   1282  f603		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1283  f605		       b5 b8		      LDA	CountdownTimer,X	; 3
   1284  f607		       f0 53		      BEQ	EngineSound	;2
   1285  f609		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1286  f60b		       90 37		      BCC	PlayWarnTimeEnding	;4
   1287  f60d		       4c 5c f6 	      JMP	EngineSound	;3
   1288  f610				   PlayColision
   1289  f610		       a9 1f		      LDA	#31
   1290  f612		       95 17		      STA	AUDF0,X
   1291  f614		       a9 08		      LDA	#8
   1292  f616		       95 15		      STA	AUDC0,X
   1293  f618		       a9 08		      LDA	#8
   1294  f61a		       95 19		      STA	AUDV0,X
   1295  f61c		       4c 83 f6 	      JMP	EndSound
   1296  f61f
   1297  f61f				   PlayCheckpoint
   1298  f61f		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1299  f621		       4a		      LSR		;2
   1300  f622		       4a		      LSR		;2
   1301  f623		       4a		      LSR		;2
   1302  f624		       95 17		      STA	AUDF0,X	;3
   1303  f626		       a9 0c		      LDA	#12	;2
   1304  f628		       95 15		      STA	AUDC0,X	;3
   1305  f62a		       a9 06		      LDA	#6	;2
   1306  f62c		       95 19		      STA	AUDV0,X	;3
   1307  f62e		       4c 83 f6 	      JMP	EndSound	;3
   1308  f631
   1309  f631				   PlayBeforeCheckpoint
   1310  f631		       a5 8c		      LDA	FrameCount0	;3
   1311  f633		       29 1c		      AND	#%00011100	;2
   1312  f635		       09 03		      ORA	#%00000011	;2
   1313  f637		       95 17		      STA	AUDF0,X	;3
   1314  f639		       a9 0c		      LDA	#12	;2
   1315  f63b		       95 15		      STA	AUDC0,X	;3
   1316  f63d		       a9 03		      LDA	#3	;2
   1317  f63f		       95 19		      STA	AUDV0,X	;3
   1318  f641		       4c 83 f6 	      JMP	EndSound	;3
   1319  f644
   1320  f644				   PlayWarnTimeEnding
   1321  f644		       a5 8c		      LDA	FrameCount0	;3
   1322  f646		       29 04		      AND	#%00000100	;2
   1323  f648		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1324  f64a		       18		      CLC		;2
   1325  f64b		       a9 0a		      LDA	#10	;2
   1326  f64d		       75 b8		      ADC	CountdownTimer,X	;2
   1327  f64f		       95 17		      STA	AUDF0,X	;3
   1328  f651		       a9 0c		      LDA	#12	;2
   1329  f653		       95 15		      STA	AUDC0,X	;3
   1330  f655		       a9 03		      LDA	#3	;2
   1331  f657		       95 19		      STA	AUDV0,X	;3
   1332  f659		       4c 83 f6 	      JMP	EndSound	;3
   1333  f65c
   1334  f65c				   EngineSound		;41
   1335  f65c		       a9 09		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1336  f65e		       95 19		      STA	AUDV0,X
   1337  f660		       b5 b8		      LDA	CountdownTimer,X	;3
   1338  f662		       f0 1b		      BEQ	EngineOff	;2
   1339  f664		       b4 d5		      LDY	Gear,X
   1340  f666		       b5 f0		      LDA	Player0SpeedL,X	;3
   1341  f668		       4a		      LSR		;2
   1342  f669		       4a		      LSR		;2
   1343  f66a		       4a		      LSR		;2
   1344  f66b		       29 0f		      AND	#%00001111	;2
   1345  f66d		       85 b0		      STA	Tmp0	;3
   1346  f66f		       b9 49 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1347  f672		       38		      SEC		;2
   1348  f673		       e5 b0		      SBC	Tmp0	;3
   1349  f675		       95 17		      STA	AUDF0,X	;3
   1350  f677		       b9 43 ff 	      LDA	EngineSoundType,Y	;4
   1351  f67a		       95 15		      STA	AUDC0,X	;3
   1352  f67c		       4c 83 f6 	      JMP	EndEngineSound	;3
   1353  f67f				   EngineOff
   1354  f67f				   MuteSound
   1355  f67f		       a9 00		      LDA	#0
   1356  f681		       95 15		      STA	AUDC0,X
   1357  f683				   EndEngineSound
   1358  f683				   EndSound
   1359  f683		       60		      RTS
   1360  f684
   1361  f684				   ClearAll		; 58
   1362  f684		       a9 00		      LDA	#0	;2
   1363  f686		       85 1b		      STA	GRP0	;3
   1364  f688		       85 1c		      STA	GRP1	;3
   1365  f68a		       85 1f		      STA	ENABL	;3
   1366  f68c		       85 1d		      STA	ENAM0	;3
   1367  f68e		       85 1e		      STA	ENAM1	;3
   1368  f690		       85 80		      STA	GRP0Cache	;3
   1369  f692		       85 84		      STA	GRP1Cache	;3
   1370  f694		       85 85		      STA	ENABLCache	;3
   1371  f696		       85 86		      STA	ENAM0Cache	;3
   1372  f698		       85 87		      STA	ENAM1Cache	;3
   1373  f69a
   1374  f69a				   ClearPF		; 26
   1375  f69a		       a9 00		      LDA	#0	;2
   1376  f69c				   ClearPFSkipLDA0
   1377  f69c		       85 0d		      STA	PF0	;3
   1378  f69e		       85 0e		      STA	PF1	;3
   1379  f6a0		       85 0f		      STA	PF2	;3	
   1380  f6a2		       85 81		      STA	PF0Cache	;3
   1381  f6a4		       85 82		      STA	PF1Cache	;3
   1382  f6a6		       85 83		      STA	PF2Cache	;3 
   1383  f6a8		       60		      RTS		;6
   1384  f6a9				   EndClearAll
   1385  f6a9
   1386  f6a9				   LoadAll		; 48
   1387  f6a9		       a5 81		      LDA	PF0Cache	;3
   1388  f6ab		       85 0d		      STA	PF0	;3
   1389  f6ad
   1390  f6ad		       a5 82		      LDA	PF1Cache	;3
   1391  f6af		       85 0e		      STA	PF1	;3
   1392  f6b1
   1393  f6b1		       a5 83		      LDA	PF2Cache	;3
   1394  f6b3		       85 0f		      STA	PF2	;3
   1395  f6b5
   1396  f6b5		       a5 84		      LDA	GRP1Cache	;3
   1397  f6b7		       85 1c		      STA	GRP1	;3
   1398  f6b9
   1399  f6b9		       a5 85		      LDA	ENABLCache	;3
   1400  f6bb		       85 1f		      STA	ENABL	;3
   1401  f6bd
   1402  f6bd		       a5 86		      LDA	ENAM0Cache	;3
   1403  f6bf		       85 1d		      STA	ENAM0	;3
   1404  f6c1
   1405  f6c1		       a5 87		      LDA	ENAM1Cache	;3
   1406  f6c3		       85 1e		      STA	ENAM1	;3
   1407  f6c5
   1408  f6c5		       60		      RTS		;6
   1409  f6c6				   EndLoadAll
   1410  f6c6
   1411  f6c6				   NextDifficulty		;Is a SBR
   1412  f6c6		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1413  f6c8		       29 01		      AND	#%00000001
   1414  f6ca		       d0 24		      BNE	CheckRandomDifficulty
   1415  f6cc
   1416  f6cc		       b5 c4		      LDA	CurrentDifficulty,X
   1417  f6ce		       18		      CLC
   1418  f6cf		       69 01		      ADC	#1
   1419  f6d1		       29 03		      AND	#%00000011	; 0 to 3
   1420  f6d3		       95 c4		      STA	CurrentDifficulty,X
   1421  f6d5
   1422  f6d5				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1423  f6d5		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1424  f6d7		       b9 c5 ff 	      LDA	TrafficChanceTable,Y
   1425  f6da		       95 be		      STA	TrafficChance,X
   1426  f6dc		       b9 c1 ff 	      LDA	TrafficColorTable,Y
   1427  f6df		       95 c2		      STA	TrafficColor,X
   1428  f6e1
   1429  f6e1		       a5 c6		      LDA	GameMode	;
   1430  f6e3		       29 01		      AND	#%00000001
   1431  f6e5		       f0 03		      BEQ	UseNextDifficultyTime
   1432  f6e7		       4c eb f6 	      JMP	StoreDifficultyTime
   1433  f6ea				   UseNextDifficultyTime
   1434  f6ea		       c8		      INY
   1435  f6eb				   StoreDifficultyTime
   1436  f6eb		       b9 c9 ff 	      LDA	TrafficTimeTable,Y
   1437  f6ee		       95 c0		      STA	CheckpointTime,X
   1438  f6f0
   1439  f6f0				   CheckRandomDifficulty
   1440  f6f0		       a5 c6		      LDA	GameMode
   1441  f6f2		       29 08		      AND	#%00001000	; Random difficulties
   1442  f6f4		       f0 09		      BEQ	ReturnFromNextDifficulty
   1443  f6f6				   RandomDifficulty		; need work to make 2 players compatible
   1444  f6f6		       a4 8c		      LDY	FrameCount0
   1445  f6f8		       b9 00 fe 	      LDA	AesTable,Y
   1446  f6fb							;EOR TrafficChance, no need, lets make life simple
   1447  f6fb		       29 3f		      AND	#%00111111
   1448  f6fd		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1449  f6ff
   1450  f6ff				   ReturnFromNextDifficulty
   1451  f6ff		       60		      RTS
   1452  f700
   1453  f700				   DefaultOffsets
   1454  f700		       a9 20		      LDA	#$20
   1455  f702		       85 96		      STA	TrafficOffset1 + 2
   1456  f704		       85 a6		      STA	OpTrafficOffset1 + 2
   1457  f706		       a9 40		      LDA	#$40
   1458  f708		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1459  f70a		       85 aa		      STA	OpTrafficOffset2 + 2
   1460  f70c		       a9 60		      LDA	#$60
   1461  f70e		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1462  f710		       85 ae		      STA	OpTrafficOffset3 + 2
   1463  f712		       a9 80		      LDA	#$80
   1464  f714		       60		      RTS
   1465  f715
   1466  f715				   PrintStaticText		; Preload X with the offset referent to StaticText
   1467  f715		       bd 00 ff 	      LDA	StaticText,X
   1468  f718		       85 d0		      STA	ScoreD0
   1469  f71a		       e8		      INX
   1470  f71b		       bd 00 ff 	      LDA	StaticText,X
   1471  f71e		       85 d1		      STA	ScoreD1
   1472  f720		       e8		      INX
   1473  f721		       bd 00 ff 	      LDA	StaticText,X
   1474  f724		       85 d2		      STA	ScoreD2
   1475  f726		       e8		      INX
   1476  f727		       bd 00 ff 	      LDA	StaticText,X
   1477  f72a		       85 d3		      STA	ScoreD3
   1478  f72c		       e8		      INX
   1479  f72d		       bd 00 ff 	      LDA	StaticText,X
   1480  f730		       85 d4		      STA	ScoreD4
   1481  f732		       60		      RTS
   1482  f733
   1483  f733				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1484  f733		       a2 00		      LDX	#0
   1485  f735		       a0 04		      LDY	#FONT_OFFSET
   1486  f737
   1487  f737				   ScoreLoop		; 20 
   1488  f737		       85 02		      STA	WSYNC	;2
   1489  f739		       85 2a		      STA	HMOVE
   1490  f73b
   1491  f73b		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1492  f73d		       85 0d		      STA	PF0	;3
   1493  f73f
   1494  f73f		       a5 82		      LDA	PF1Cache	;3
   1495  f741		       85 0e		      STA	PF1	;3
   1496  f743
   1497  f743		       a5 83		      LDA	PF2Cache	;3
   1498  f745		       85 0f		      STA	PF2	;3
   1499  f747
   1500  f747				   DrawScoreD0		; 15
   1501  f747		       a6 d0		      LDX	ScoreD0	; 3
   1502  f749		       bd 00 fd 	      LDA	Font,X	;4
   1503  f74c		       85 81		      STA	PF0Cache	;3
   1504  f74e		       c6 d0		      DEC	ScoreD0	;5
   1505  f750
   1506  f750				   DrawScoreD1		; 23	
   1507  f750		       a6 d1		      LDX	ScoreD1	; 3
   1508  f752		       bd 00 fd 	      LDA	Font,X	;4
   1509  f755		       0a		      ASL		;2
   1510  f756		       0a		      ASL		;2
   1511  f757		       0a		      ASL		;2
   1512  f758		       0a		      ASL		;2
   1513  f759		       85 82		      STA	PF1Cache	;3
   1514  f75b		       c6 d1		      DEC	ScoreD1	;5
   1515  f75d
   1516  f75d				   DrawScoreD2		; 20
   1517  f75d		       a6 d2		      LDX	ScoreD2	; 3
   1518  f75f		       bd 00 fd 	      LDA	Font,X	;4
   1519  f762		       29 0f		      AND	#%00001111	;2
   1520  f764		       05 82		      ORA	PF1Cache	;3
   1521  f766		       85 82		      STA	PF1Cache	;3
   1522  f768		       c6 d2		      DEC	ScoreD2	;5
   1523  f76a
   1524  f76a				   DrawScoreD3		; 23
   1525  f76a		       a6 d3		      LDX	ScoreD3	; 3
   1526  f76c		       bd 00 fd 	      LDA	Font,X	;4
   1527  f76f		       4a		      LSR		;2
   1528  f770		       4a		      LSR		;2
   1529  f771		       4a		      LSR		;2
   1530  f772		       4a		      LSR		;2
   1531  f773		       85 83		      STA	PF2Cache	;3
   1532  f775		       c6 d3		      DEC	ScoreD3	;5
   1533  f777
   1534  f777				   DrawScoreD4		; 20
   1535  f777		       a6 d4		      LDX	ScoreD4	; 3
   1536  f779		       bd 00 fd 	      LDA	Font,X	;4
   1537  f77c		       29 f0		      AND	#%11110000	;2
   1538  f77e		       05 83		      ORA	PF2Cache	;3
   1539  f780		       85 83		      STA	PF2Cache	;3
   1540  f782		       c6 d4		      DEC	ScoreD4	;5
   1541  f784
   1542  f784
   1543  f784		       88		      DEY		;2
   1544  f785		       10 b0		      BPL	ScoreLoop	;4
   1545  f787
   1546  f787		       85 02		      STA	WSYNC
   1547  f789		       85 2a		      STA	HMOVE
   1548  f78b		       20 a9 f6 	      JSR	LoadAll
   1549  f78e		       60		      RTS		; 6
   1550  f78f
   1551  f78f				   PrintRightDecimalDigits
   1552  f78f		       b9 00 00 	      LDA	0,Y
   1553  f792		       4a		      LSR
   1554  f793		       4a		      LSR
   1555  f794		       4a		      LSR
   1556  f795		       4a		      LSR
   1557  f796		       aa		      TAX
   1558  f797		       bd 6c fc 	      LDA	FontLookup,X	;4
   1559  f79a		       85 d2		      STA	ScoreD2	;3
   1560  f79c
   1561  f79c		       b9 00 00 	      LDA	0,Y
   1562  f79f		       29 0f		      AND	#%00001111
   1563  f7a1		       aa		      TAX
   1564  f7a2		       bd 6c fc 	      LDA	FontLookup,X	;4
   1565  f7a5		       85 d3		      STA	ScoreD3	;3
   1566  f7a7
   1567  f7a7		       c8		      INY
   1568  f7a8		       b9 00 00 	      LDA	0,Y
   1569  f7ab		       4a		      LSR
   1570  f7ac		       4a		      LSR
   1571  f7ad		       4a		      LSR
   1572  f7ae		       4a		      LSR
   1573  f7af		       aa		      TAX
   1574  f7b0		       bd 6c fc 	      LDA	FontLookup,X	;4
   1575  f7b3		       85 d0		      STA	ScoreD0	;3
   1576  f7b5
   1577  f7b5		       b9 00 00 	      LDA	0,Y
   1578  f7b8		       29 0f		      AND	#%00001111
   1579  f7ba		       aa		      TAX
   1580  f7bb		       bd 6c fc 	      LDA	FontLookup,X	;4
   1581  f7be		       85 d1		      STA	ScoreD1	;3
   1582  f7c0
   1583  f7c0		       a9 ae		      LDA	#<Triangle + FONT_OFFSET
   1584  f7c2		       85 d4		      STA	ScoreD4
   1585  f7c4		       60		      RTS
   1586  f7c5
   1587  f7c5				   PrintLastLeftDecimalDigits
   1588  f7c5		       b9 00 00 	      LDA	0,Y
   1589  f7c8		       4a		      LSR
   1590  f7c9		       4a		      LSR
   1591  f7ca		       4a		      LSR
   1592  f7cb		       4a		      LSR
   1593  f7cc		       aa		      TAX
   1594  f7cd		       bd 6c fc 	      LDA	FontLookup,X	;4
   1595  f7d0		       85 d3		      STA	ScoreD3	;3
   1596  f7d2		       b9 00 00 	      LDA	0,Y
   1597  f7d5		       29 0f		      AND	#%00001111
   1598  f7d7		       aa		      TAX
   1599  f7d8		       bd 6c fc 	      LDA	FontLookup,X	;4
   1600  f7db		       85 d4		      STA	ScoreD4	;3
   1601  f7dd		       60		      RTS
   1602  f7de
   1603  f7de				   PrintZerosLeft
   1604  f7de		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1605  f7e0		       85 d2		      STA	ScoreD2
   1606  f7e2		       85 d3		      STA	ScoreD3
   1607  f7e4		       85 d4		      STA	ScoreD4
   1608  f7e6		       60		      RTS
   1609  f7e7
   1610  f7e7				   DrawGameOverScoreLine
   1611  f7e7		       85 02		      STA	WSYNC
   1612  f7e9		       20 33 f7 	      JSR	PrintScore
   1613  f7ec		       85 02		      STA	WSYNC
   1614  f7ee		       85 02		      STA	WSYNC
   1615  f7f0		       20 9a f6 	      JSR	ClearPF
   1616  f7f3		       60		      RTS
   1617  f7f4
   1618  f7f4				   DrawGameOverScreenLeft
   1619  f7f4		       85 02		      STA	WSYNC
   1620  f7f6		       20 9a f6 	      JSR	ClearPF
   1621  f7f9
   1622  f7f9				   DrawGlideTimerLeft
   1623  f7f9		       20 bb f8 	      JSR	Sleep8Lines
   1624  f7fc		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1625  f7fe		       85 06		      STA	COLUP0
   1626  f800		       85 02		      STA	WSYNC
   1627  f802		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1628  f804		       85 d0		      STA	ScoreD0
   1629  f806		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1630  f808		       85 d1		      STA	ScoreD1
   1631  f80a		       20 de f7 	      JSR	PrintZerosLeft
   1632  f80d		       20 e7 f7 	      JSR	DrawGameOverScoreLine
   1633  f810
   1634  f810				   DrawHitCountLeft
   1635  f810		       20 bb f8 	      JSR	Sleep8Lines
   1636  f813		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1637  f815		       85 06		      STA	COLUP0
   1638  f817		       85 02		      STA	WSYNC
   1639  f819		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1640  f81b		       85 d0		      STA	ScoreD0
   1641  f81d		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1642  f81f		       85 d1		      STA	ScoreD1
   1643  f821		       20 de f7 	      JSR	PrintZerosLeft
   1644  f824		       20 e7 f7 	      JSR	DrawGameOverScoreLine
   1645  f827
   1646  f827				   DrawCheckpointCountLeft
   1647  f827		       20 bb f8 	      JSR	Sleep8Lines
   1648  f82a		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1649  f82c		       85 06		      STA	COLUP0
   1650  f82e		       85 02		      STA	WSYNC
   1651  f830		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1652  f832		       85 d0		      STA	ScoreD0
   1653  f834		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1654  f836		       85 d1		      STA	ScoreD1
   1655  f838		       20 de f7 	      JSR	PrintZerosLeft
   1656  f83b		       20 e7 f7 	      JSR	DrawGameOverScoreLine
   1657  f83e
   1658  f83e				   DrawGameVersionLeft
   1659  f83e		       20 bb f8 	      JSR	Sleep8Lines
   1660  f841		       a9 49		      LDA	#VERSION_COLOR
   1661  f843		       85 06		      STA	COLUP0
   1662  f845
   1663  f845		       a5 c6		      LDA	GameMode
   1664  f847		       aa		      TAX
   1665  f848		       bd 6c fc 	      LDA	FontLookup,X	;4
   1666  f84b		       85 d0		      STA	ScoreD0	;3
   1667  f84d
   1668  f84d		       a5 c7		      LDA	CurrentCarId
   1669  f84f		       aa		      TAX
   1670  f850		       bd 6c fc 	      LDA	FontLookup,X	;4
   1671  f853		       85 d1		      STA	ScoreD1	;3
   1672  f855
   1673  f855		       a5 db		      LDA	StartSWCHB
   1674  f857		       29 40		      AND	#%01000000	; P0 difficulty
   1675  f859		       49 40		      EOR	#%01000000	; Reverse bytes
   1676  f85b		       2a		      ROL
   1677  f85c		       2a		      ROL
   1678  f85d		       2a		      ROL
   1679  f85e		       18		      CLC
   1680  f85f		       69 0a		      ADC	#10
   1681  f861		       aa		      TAX
   1682  f862		       bd 6c fc 	      LDA	FontLookup,X	;4
   1683  f865		       85 d2		      STA	ScoreD2	;3
   1684  f867
   1685  f867		       a5 db		      LDA	StartSWCHB
   1686  f869		       29 80		      AND	#%10000000	; P0 difficulty
   1687  f86b		       49 80		      EOR	#%10000000	; Reverse bytes
   1688  f86d		       2a		      ROL
   1689  f86e		       2a		      ROL
   1690  f86f		       18		      CLC
   1691  f870		       69 0a		      ADC	#10
   1692  f872		       aa		      TAX
   1693  f873		       bd 6c fc 	      LDA	FontLookup,X	;4
   1694  f876		       85 d3		      STA	ScoreD3	;3
   1695  f878
   1696  f878		       a9 a9		      LDA	#<Pipe + FONT_OFFSET
   1697  f87a		       85 d4		      STA	ScoreD4
   1698  f87c
   1699  f87c		       20 e7 f7 	      JSR	DrawGameOverScoreLine
   1700  f87f
   1701  f87f		       4c 98 f8 	      JMP	FinalizeDrawGameOver
   1702  f882
   1703  f882				   DrawGameOverScreenRight
   1704  f882		       85 02		      STA	WSYNC
   1705  f884		       20 9a f6 	      JSR	ClearPF
   1706  f887
   1707  f887				   DrawVersionRight
   1708  f887		       20 bb f8 	      JSR	Sleep8Lines
   1709  f88a		       a9 49		      LDA	#VERSION_COLOR
   1710  f88c		       85 07		      STA	COLUP1
   1711  f88e		       85 02		      STA	WSYNC
   1712  f890		       a2 28		      LDX	#<VersionText
   1713  f892		       20 15 f7 	      JSR	PrintStaticText
   1714  f895		       20 e7 f7 	      JSR	DrawGameOverScoreLine
   1715  f898
   1716  f898				   FinalizeDrawGameOver
   1717  f898		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1718  f89a		       85 c9		      STA	ScoreFontColor
   1719  f89c		       20 b2 f8 	      JSR	Sleep4Lines
   1720  f89f		       20 c2 f8 	      JSR	Sleep32Lines
   1721  f8a2		       20 c2 f8 	      JSR	Sleep32Lines
   1722  f8a5		       4c 27 f5 	      JMP	PrepareOverscan
   1723  f8a8
   1724  f8a8				   WaitForVblankEnd
   1725  f8a8		       ad 84 02 	      LDA	INTIM
   1726  f8ab		       d0 fb		      BNE	WaitForVblankEnd
   1727  f8ad		       85 02		      STA	WSYNC
   1728  f8af		       85 01		      STA	VBLANK
   1729  f8b1		       60		      RTS
   1730  f8b2
   1731  f8b2				   Sleep4Lines
   1732  f8b2		       85 02		      STA	WSYNC
   1733  f8b4		       85 02		      STA	WSYNC
   1734  f8b6		       85 02		      STA	WSYNC
   1735  f8b8		       85 02		      STA	WSYNC
   1736  f8ba		       60		      RTS
   1737  f8bb
   1738  f8bb				   Sleep8Lines
   1739  f8bb		       20 b2 f8 	      JSR	Sleep4Lines
   1740  f8be		       20 b2 f8 	      JSR	Sleep4Lines
   1741  f8c1		       60		      RTS
   1742  f8c2
   1743  f8c2				   Sleep32Lines
   1744  f8c2		       20 bb f8 	      JSR	Sleep8Lines
   1745  f8c5		       20 bb f8 	      JSR	Sleep8Lines
   1746  f8c8		       20 bb f8 	      JSR	Sleep8Lines
   1747  f8cb		       20 bb f8 	      JSR	Sleep8Lines
   1748  f8ce		       60		      RTS
   1749  f8cf
   1750  f8cf							;X = number of WSYNC HMOVE to run
   1751  f8cf				   HMoveXTimes
   1752  f8cf		       85 02		      STA	WSYNC	;3
   1753  f8d1		       85 2a		      STA	HMOVE	; 3/10 
   1754  f8d3		       ca		      DEX
   1755  f8d4		       d0 f9		      BNE	HMoveXTimes
   1756  f8d6		       60		      RTS
   1757  f8d7
   1758  f8d7				   ConfigureCarSprites
   1759  f8d7		       a5 8c		      LDA	FrameCount0
   1760  f8d9		       29 01		      AND	#%00000001
   1761  f8db		       d0 0b		      BNE	LoadForRightScreenSprites
   1762  f8dd				   LoadForLeftScreenSprites
   1763  f8dd		       a5 c7		      LDA	CurrentCarId
   1764  f8df		       85 b0		      STA	Tmp0
   1765  f8e1		       a5 c8		      LDA	OpCurrentCarId
   1766  f8e3		       85 b1		      STA	Tmp1
   1767  f8e5		       4c f0 f8 	      JMP	LoadCarSpritesFromIds
   1768  f8e8				   LoadForRightScreenSprites
   1769  f8e8		       a5 c7		      LDA	CurrentCarId
   1770  f8ea		       85 b1		      STA	Tmp1
   1771  f8ec		       a5 c8		      LDA	OpCurrentCarId
   1772  f8ee		       85 b0		      STA	Tmp0
   1773  f8f0
   1774  f8f0				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1775  f8f0		       a4 b0		      LDY	Tmp0
   1776  f8f2		       b9 9b ff 	      LDA	CarIdToSpriteAddressL,Y
   1777  f8f5		       85 d7		      STA	CarSpritePointerL
   1778  f8f7		       b9 9f ff 	      LDA	CarIdToSpriteAddressH,Y
   1779  f8fa		       85 d8		      STA	CarSpritePointerH
   1780  f8fc				   ConfigureOpponentCarSprite
   1781  f8fc		       a4 b1		      LDY	Tmp1
   1782  f8fe		       b9 a3 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1783  f901		       85 d9		      STA	EnemyCarSpritePointerL
   1784  f903		       b9 a7 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1785  f906		       85 da		      STA	EnemyCarSpritePointerH
   1786  f908		       60		      RTS
   1787  f909
   1788  f909							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1789  f909							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1790  f909							; Tmp0 Binary Number
   1791  f909							; Result Returned in Tmp 1 and A
   1792  f909				   BINBCD8
   1793  f909		       f8		      SED		; Switch to decimal mode
   1794  f90a		       a9 00		      LDA	#0	; Ensure the result is clear
   1795  f90c		       85 b1		      STA	Tmp1+0
   1796  f90e							;STA Tmp1+1
   1797  f90e		       a2 08		      LDX	#8	; The number of source bits
   1798  f910
   1799  f910				   CNVBIT
   1800  f910		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1801  f912		       a5 b1		      LDA	Tmp1+0	; And add into result
   1802  f914		       65 b1		      ADC	Tmp1+0
   1803  f916		       85 b1		      STA	Tmp1+0
   1804  f918							;Not needed now, 0 to 99 is enought for timer!
   1805  f918							; LDA Tmp1+1	; propagating any carry
   1806  f918							; ADC Tmp1+1
   1807  f918							; STA Tmp1+1
   1808  f918		       ca		      DEX		; And repeat for next bit
   1809  f919		       d0 f5		      BNE	CNVBIT
   1810  f91b		       d8		      CLD		; Back to binary
   1811  f91c
   1812  f91c		       60		      RTS		; All Done.
   1813  f91d
   1814  f91d							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1815  f91d							;X player 0 or 1
   1816  f91d				   SelectCarWithDpad
   1817  f91d		       a0 03		      LDY	#3
   1818  f91f				   SelectCarWithDpadLoop
   1819  f91f		       ad 80 02 	      LDA	SWCHA
   1820  f922		       25 b0		      AND	Tmp0
   1821  f924		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1822  f926		       98		      TYA
   1823  f927		       95 c7		      STA	CurrentCarId,X
   1824  f929				   ContinueSelectCarWithDpadLoop
   1825  f929		       46 b0		      LSR	Tmp0
   1826  f92b		       88		      DEY
   1827  f92c		       10 f1		      BPL	SelectCarWithDpadLoop
   1828  f92e		       60		      RTS
   1829  f92f
   1830  f92f				   ProcessOpponentLine
   1831  f92f		       a5 8c		      LDA	FrameCount0
   1832  f931		       29 01		      AND	#%00000001
   1833  f933		       38		      SEC
   1834  f934		       d0 15		      BNE	Player0IsOpponent
   1835  f936				   Player1IsOpponent		; Code could be reused?
   1836  f936		       a5 91		      LDA	TrafficOffset0 + 1
   1837  f938		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1838  f93a		       85 b0		      STA	Tmp0
   1839  f93c		       a5 92		      LDA	TrafficOffset0 + 2
   1840  f93e		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1841  f940		       85 b1		      STA	Tmp1
   1842  f942		       a5 ba		      LDA	Traffic0Msb
   1843  f944		       e5 bb		      SBC	OpTraffic0Msb
   1844  f946		       85 b2		      STA	Tmp2
   1845  f948		       4c 5d f9 	      JMP	StoreInFrontPlayer
   1846  f94b				   Player0IsOpponent
   1847  f94b		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1848  f94d		       e5 91		      SBC	TrafficOffset0 + 1
   1849  f94f		       85 b0		      STA	Tmp0
   1850  f951		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1851  f953		       e5 92		      SBC	TrafficOffset0 + 2
   1852  f955		       85 b1		      STA	Tmp1
   1853  f957		       a5 bb		      LDA	OpTraffic0Msb
   1854  f959		       e5 ba		      SBC	Traffic0Msb
   1855  f95b		       85 b2		      STA	Tmp2
   1856  f95d
   1857  f95d				   StoreInFrontPlayer
   1858  f95d		       85 f4		      STA	IsOpponentInFront
   1859  f95f
   1860  f95f				   AddOffsetToOpponentLine
   1861  f95f		       18		      CLC
   1862  f960		       a5 b0		      LDA	Tmp0
   1863  f962		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1864  f964		       85 b0		      STA	Tmp0
   1865  f966		       a5 b1		      LDA	Tmp1
   1866  f968		       69 00		      ADC	#0
   1867  f96a		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1868  f96c		       a5 b2		      LDA	Tmp2
   1869  f96e		       69 00		      ADC	#0
   1870  f970		       05 b1		      ORA	Tmp1
   1871  f972		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1872  f974				   OpponentNotVisible
   1873  f974		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1874  f976		       85 cf		      STA	OpponentLine
   1875  f978		       4c 7f f9 	      JMP	ReturnFromProcessOpponentLine
   1876  f97b				   OpponentVisible
   1877  f97b		       a5 b0		      LDA	Tmp0
   1878  f97d		       85 cf		      STA	OpponentLine
   1879  f97f				   ReturnFromProcessOpponentLine
   1880  f97f		       60		      RTS
   1881  f980
   1882  f980							; Value stored in A
   1883  f980				   IsOpponentColliding
   1884  f980							;Any non default state, opponent do not colide
   1885  f980		       a5 8e		      LDA	CollisionCounter
   1886  f982		       05 8f		      ORA	OpCollisionCounter
   1887  f984		       05 cb		      ORA	ScoreFontColorHoldChange
   1888  f986		       05 cc		      ORA	OpScoreFontColorHoldChange
   1889  f988		       d0 07		      BNE	OpponentNotColliding
   1890  f98a		       a5 f4		      LDA	IsOpponentInFront
   1891  f98c		       25 07		      AND	CXPPMM
   1892  f98e		       4c 93 f9 	      JMP	ReturnIsOpponentColliding
   1893  f991				   OpponentNotColliding
   1894  f991		       a9 00		      LDA	#0
   1895  f993				   ReturnIsOpponentColliding
   1896  f993		       60		      RTS
   1897  f994
   1898  f994
   1899  f994							; Movement and colision are binded because the car must be moved after duplicate size.
   1900  f994							; Use X for the player
   1901  f994							; Tmp2 Traffic colision result
   1902  f994				   TestCollisionAndMove
   1903  f994							; Until store the movemnt, Y contains the value to be stored.
   1904  f994							; see if player0 colides with the rest
   1905  f994		       a5 b2		      LDA	Tmp2
   1906  f996		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1907  f998		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1908  f99a		       d0 25		      BNE	NoCollision
   1909  f99c		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1910  f99e		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1911  f9a0		       f0 1f		      BEQ	NoCollision
   1912  f9a2		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1913  f9a4		       f0 1b		      BEQ	NoCollision
   1914  f9a6		       a9 ff		      LDA	#COLLISION_FRAMES
   1915  f9a8		       95 8e		      STA	CollisionCounter,X
   1916  f9aa		       b5 f2		      LDA	Player0SpeedH,X
   1917  f9ac		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1918  f9ae		       a9 10		      LDA	#COLLISION_SPEED_L
   1919  f9b0		       d5 f0		      CMP	Player0SpeedL,X
   1920  f9b2		       b0 04		      BCS	SkipSetColisionSpeedL
   1921  f9b4				   SetColisionSpeedL
   1922  f9b4		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1923  f9b6		       95 f0		      STA	Player0SpeedL,X
   1924  f9b8				   SkipSetColisionSpeedL
   1925  f9b8		       a9 00		      LDA	#0
   1926  f9ba		       95 f2		      STA	Player0SpeedH,X
   1927  f9bc		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1928  f9be		       4c 11 fa 	      JMP	StoreHMove	; We keep position consistent
   1929  f9c1				   NoCollision
   1930  f9c1
   1931  f9c1				   DecrementCollision
   1932  f9c1		       b5 8e		      LDA	CollisionCounter,X
   1933  f9c3		       f0 06		      BEQ	FinishDecrementCollision
   1934  f9c5		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1935  f9c7		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1936  f9c9		       d6 8e		      DEC	CollisionCounter,X
   1937  f9cb				   FinishDecrementCollision
   1938  f9cb
   1939  f9cb				   ResetPlayerSize
   1940  f9cb		       d0 04		      BNE	FinishResetPlayerSize
   1941  f9cd		       a9 30		      LDA	#%00110000
   1942  f9cf		       95 04		      STA	NUSIZ0,X	;
   1943  f9d1				   FinishResetPlayerSize
   1944  f9d1
   1945  f9d1				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1946  f9d1		       b5 8e		      LDA	CollisionCounter,X
   1947  f9d3		       c9 01		      CMP	#1	; Last frame before reset
   1948  f9d5		       d0 05		      BNE	SkipResetPlayerPosition
   1949  f9d7		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1950  f9d9		       4c 11 fa 	      JMP	StoreHMove
   1951  f9dc				   SkipResetPlayerPosition
   1952  f9dc
   1953  f9dc				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1954  f9dc		       b5 c7		      LDA	CurrentCarId,X
   1955  f9de		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1956  f9e0		       d0 08		      BNE	PrepareReadXAxis
   1957  f9e2		       a0 00		      LDY	#0
   1958  f9e4		       a5 8c		      LDA	FrameCount0
   1959  f9e6		       29 01		      AND	#DRAGSTER_TURN_MASK
   1960  f9e8		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1961  f9ea
   1962  f9ea				   PrepareReadXAxis
   1963  f9ea		       a0 00		      LDY	#0
   1964  f9ec		       b5 b6		      LDA	Player0X,X
   1965  f9ee				   BeginReadLeft
   1966  f9ee		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1967  f9f0		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1968  f9f3		       2c 80 02 	      BIT	SWCHA
   1969  f9f6		       d0 07		      BNE	SkipMoveLeft
   1970  f9f8		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1971  f9fa		       d6 b6		      DEC	Player0X,X
   1972  f9fc		       4c 11 fa 	      JMP	StoreHMove	; Cannot move left and right...
   1973  f9ff				   SkipMoveLeft
   1974  f9ff				   BeginReadRight
   1975  f9ff		       b5 b6		      LDA	Player0X,X
   1976  fa01		       c9 2c		      CMP	#PLAYER_MAX_X
   1977  fa03		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1978  fa05		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1979  fa08		       2c 80 02 	      BIT	SWCHA
   1980  fa0b		       d0 04		      BNE	SkipMoveRight
   1981  fa0d		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1982  fa0f		       f6 b6		      INC	Player0X,X
   1983  fa11				   SkipMoveRight
   1984  fa11				   StoreHMove
   1985  fa11		       94 20		      STY	HMP0,X	;set the move for player 0
   1986  fa13
   1987  fa13		       60		      RTS
   1988  fa14
   1989  fa14							; X Traffic offset 4 bits each lane, 4 lanes per player
   1990  fa14							; Tmp3 Max X offset
   1991  fa14							; Tmp4 Max Player Speed L
   1992  fa14							; Tmp5 Max Player Speed H
   1993  fa14				   UpdateOffsets
   1994  fa14		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1995  fa16		       a5 c6		      LDA	GameMode
   1996  fa18		       29 04		      AND	#%00000100	; GameModes with high delta
   1997  fa1a		       f0 02		      BEQ	UpdateOffsetsLoop
   1998  fa1c		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1999  fa1e
   2000  fa1e				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   2001  fa1e		       38		      SEC
   2002  fa1f		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   2003  fa21		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   2004  fa24		       85 b0		      STA	Tmp0
   2005  fa26		       c8		      INY
   2006  fa27		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   2007  fa29		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   2008  fa2c		       85 b1		      STA	Tmp1
   2009  fa2e		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   2010  fa30		       e9 00		      SBC	#0
   2011  fa32		       85 b2		      STA	Tmp2
   2012  fa34
   2013  fa34				   AddsTheResult
   2014  fa34		       18		      CLC
   2015  fa35		       a5 b0		      LDA	Tmp0
   2016  fa37		       75 90		      ADC	TrafficOffset0,X
   2017  fa39		       95 90		      STA	TrafficOffset0,X
   2018  fa3b		       e8		      INX
   2019  fa3c		       a5 b1		      LDA	Tmp1
   2020  fa3e		       75 90		      ADC	TrafficOffset0,X
   2021  fa40		       95 90		      STA	TrafficOffset0,X
   2022  fa42		       e8		      INX
   2023  fa43		       a5 b2		      LDA	Tmp2	; Carry
   2024  fa45		       75 90		      ADC	TrafficOffset0,X
   2025  fa47		       95 90		      STA	TrafficOffset0,X
   2026  fa49		       90 0f		      BCC	CalculateOffsetCache
   2027  fa4b				   CalculatePlayer0Msb
   2028  fa4b		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   2029  fa4d		       d0 05		      BNE	CalculatePlayer1Msb
   2030  fa4f		       e6 ba		      INC	Traffic0Msb
   2031  fa51		       4c 5a fa 	      JMP	CalculateOffsetCache
   2032  fa54				   CalculatePlayer1Msb
   2033  fa54		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   2034  fa56		       d0 02		      BNE	CalculateOffsetCache
   2035  fa58		       e6 bb		      INC	OpTraffic0Msb
   2036  fa5a
   2037  fa5a				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   2038  fa5a		       e8		      INX
   2039  fa5b		       38		      SEC
   2040  fa5c		       69 00		      ADC	#0	;Increment by one
   2041  fa5e		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   2042  fa60
   2043  fa60				   PrepareNextUpdateLoop
   2044  fa60		       c8		      INY
   2045  fa61		       e8		      INX
   2046  fa62		       e4 b3		      CPX	Tmp3	; Max X offset
   2047  fa64		       d0 b8		      BNE	UpdateOffsetsLoop
   2048  fa66		       60		      RTS
   2049  fa67
   2050  fa67							; X Player 0 or 1
   2051  fa67				   ProcessSpeed
   2052  fa67				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2053  fa67		       a9 00		      LDA	#0
   2054  fa69		       85 b0		      STA	Tmp0	; Break speed
   2055  fa6b		       b5 b8		      LDA	CountdownTimer,X
   2056  fa6d		       d0 0d		      BNE	Break
   2057  fa6f		       b4 c7		      LDY	CurrentCarId,X
   2058  fa71		       a5 8c		      LDA	FrameCount0
   2059  fa73		       39 af ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2060  fa76		       d0 04		      BNE	Break
   2061  fa78		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2062  fa7a		       85 b0		      STA	Tmp0
   2063  fa7c
   2064  fa7c				   Break
   2065  fa7c		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2066  fa7f		       2c 80 02 	      BIT	SWCHA
   2067  fa82		       d0 12		      BNE	BreakNonZero
   2068  fa84		       b5 0c		      LDA	INPT4,X	;3
   2069  fa86		       10 0a		      BPL	BreakWhileAccelerating
   2070  fa88		       b4 d5		      LDY	Gear,X
   2071  fa8a		       b9 bb ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2072  fa8d		       85 b0		      STA	Tmp0
   2073  fa8f		       4c 96 fa 	      JMP	BreakNonZero
   2074  fa92				   BreakWhileAccelerating		; Allow better control while breaking.
   2075  fa92		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2076  fa94		       85 b0		      STA	Tmp0
   2077  fa96
   2078  fa96				   BreakNonZero
   2079  fa96		       a5 b0		      LDA	Tmp0
   2080  fa98		       f0 29		      BEQ	SkipBreak
   2081  fa9a
   2082  fa9a				   DecreaseSpeed
   2083  fa9a		       38		      SEC
   2084  fa9b		       b5 f0		      LDA	Player0SpeedL,X
   2085  fa9d		       e5 b0		      SBC	Tmp0
   2086  fa9f		       95 f0		      STA	Player0SpeedL,X
   2087  faa1		       b5 f2		      LDA	Player0SpeedH,X
   2088  faa3		       e9 00		      SBC	#0
   2089  faa5		       95 f2		      STA	Player0SpeedH,X
   2090  faa7
   2091  faa7				   CheckMinSpeed
   2092  faa7		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2093  faa9		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2094  faab		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2095  faad		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2096  faaf
   2097  faaf				   CompareLBreakSpeed
   2098  faaf		       b5 f0		      LDA	Player0SpeedL,X
   2099  fab1		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2100  fab3		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2101  fab5		       4c c0 fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2102  fab8
   2103  fab8				   ResetMinSpeed
   2104  fab8		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2105  faba		       95 f2		      STA	Player0SpeedH,X
   2106  fabc		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2107  fabe		       95 f0		      STA	Player0SpeedL,X
   2108  fac0
   2109  fac0				   SkipAccelerateIfBreaking
   2110  fac0		       4c 09 fb 	      JMP	SkipAccelerate
   2111  fac3				   SkipBreak
   2112  fac3
   2113  fac3				   Acelerates
   2114  fac3		       b5 b8		      LDA	CountdownTimer,X
   2115  fac5		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2116  fac7
   2117  fac7				   ContinueAccelerateTest
   2118  fac7		       b5 0c		      LDA	INPT4,X	;3
   2119  fac9		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2120  facb		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2121  face		       2c 80 02 	      BIT	SWCHA
   2122  fad1		       d0 36		      BNE	SkipAccelerate
   2123  fad3
   2124  fad3				   IncreaseCarSpeed
   2125  fad3		       a9 02		      LDA	#2
   2126  fad5		       85 b0		      STA	Tmp0	; Loop control
   2127  fad7		       b4 c7		      LDY	CurrentCarId,X
   2128  fad9				   IncreaseCarSpeedLoop
   2129  fad9							;Adds speed
   2130  fad9		       18		      CLC
   2131  fada		       b5 dc		      LDA	AccelerateBuffer,X
   2132  fadc		       79 ab ff 	      ADC	CarIdToAccelerateSpeed,Y
   2133  fadf		       95 dc		      STA	AccelerateBuffer,X
   2134  fae1		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2135  fae3		       f6 f0		      INC	Player0SpeedL,X
   2136  fae5		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2137  fae7		       f6 f2		      INC	Player0SpeedH,X
   2138  fae9				   ContinueIncreaseSpeedLoop
   2139  fae9		       c6 b0		      DEC	Tmp0
   2140  faeb		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2141  faed				   SkipIncreaseCarSpeed
   2142  faed
   2143  faed				   CheckIfAlreadyMaxSpeed
   2144  faed		       b5 f2		      LDA	Player0SpeedH,X
   2145  faef		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2146  faf1		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2147  faf3		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2148  faf5							;High bit is max, compare the low
   2149  faf5		       b4 c7		      LDY	CurrentCarId,X
   2150  faf7		       b5 f0		      LDA	Player0SpeedL,X
   2151  faf9		       d9 b3 ff 	      CMP	CarIdToMaxSpeedL,Y
   2152  fafc		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2153  fafe							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2154  fafe
   2155  fafe				   ResetToMaxSpeed		; Speed is more, or is already max
   2156  fafe		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2157  fb00		       95 f2		      STA	Player0SpeedH,X
   2158  fb02		       b4 c7		      LDY	CurrentCarId,X
   2159  fb04		       b9 b3 ff 	      LDA	CarIdToMaxSpeedL,Y
   2160  fb07		       95 f0		      STA	Player0SpeedL,X
   2161  fb09				   SkipAccelerate
   2162  fb09		       60		      RTS
   2163  fb0a
   2164  fb0a							;Tmp0 Traffic Offset to compare with next checkpoint
   2165  fb0a				   ProcessPlayerStatus
   2166  fb0a				   IsGameOver
   2167  fb0a		       b5 b8		      LDA	CountdownTimer,X
   2168  fb0c		       15 f0		      ORA	Player0SpeedL,X
   2169  fb0e		       15 f2		      ORA	Player0SpeedH,X
   2170  fb10		       d0 0b		      BNE	IsCheckpoint
   2171  fb12		       a9 01		      LDA	#1
   2172  fb14		       95 cb		      STA	ScoreFontColorHoldChange,X
   2173  fb16		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2174  fb18		       95 c9		      STA	ScoreFontColor,X
   2175  fb1a		       4c 4f fb 	      JMP	SkipIsTimeOver
   2176  fb1d
   2177  fb1d				   IsCheckpoint
   2178  fb1d		       b5 cd		      LDA	NextCheckpoint,X
   2179  fb1f		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2180  fb21		       d0 20		      BNE	SkipIsCheckpoint
   2181  fb23		       18		      CLC
   2182  fb24		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2183  fb26		       95 cd		      STA	NextCheckpoint,X
   2184  fb28		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2185  fb2a		       95 c9		      STA	ScoreFontColor,X
   2186  fb2c		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2187  fb2e		       95 cb		      STA	ScoreFontColorHoldChange,X
   2188  fb30		       b5 b8		      LDA	CountdownTimer,X
   2189  fb32		       18		      CLC
   2190  fb33		       75 c0		      ADC	CheckpointTime,X
   2191  fb35		       95 b8		      STA	CountdownTimer,X
   2192  fb37		       90 04		      BCC	JumpSkipTimeOver
   2193  fb39		       a9 ff		      LDA	#$FF
   2194  fb3b		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2195  fb3d				   JumpSkipTimeOver
   2196  fb3d		       20 c6 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2197  fb40		       4c 4f fb 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2198  fb43				   SkipIsCheckpoint
   2199  fb43
   2200  fb43				   IsTimeOver
   2201  fb43		       b5 b8		      LDA	CountdownTimer,X
   2202  fb45		       d0 08		      BNE	SkipIsTimeOver
   2203  fb47		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2204  fb49		       95 cb		      STA	ScoreFontColorHoldChange,X
   2205  fb4b		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2206  fb4d		       95 c9		      STA	ScoreFontColor,X
   2207  fb4f				   SkipIsTimeOver
   2208  fb4f		       60		      RTS
   2209  fb50
   2210  fb50
   2211  fb50				   EverySecond		; 64 frames to be more precise
   2212  fb50		       a9 3f		      LDA	#%00111111
   2213  fb52		       25 8c		      AND	FrameCount0
   2214  fb54		       d0 06		      BNE	SkipEverySecondAction
   2215  fb56		       d5 b8		      CMP	CountdownTimer,X
   2216  fb58		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2217  fb5a		       d6 b8		      DEC	CountdownTimer,X
   2218  fb5c				   SkipEverySecondAction
   2219  fb5c		       60		      RTS
   2220  fb5d
   2221  fb5d				   CalculateGear
   2222  fb5d		       b5 f0		      LDA	Player0SpeedL,X	;3
   2223  fb5f		       29 80		      AND	#%10000000	;2
   2224  fb61		       15 f2		      ORA	Player0SpeedH,X	;3
   2225  fb63		       18		      CLC		;2
   2226  fb64		       2a		      ROL		;2
   2227  fb65		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2228  fb67		       95 d5		      STA	Gear,X
   2229  fb69		       60		      RTS
   2230  fb6a
   2231  fb6a				   ProcessScoreFontColor
   2232  fb6a		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2233  fb6c		       f0 06		      BEQ	ResetScoreFontColor
   2234  fb6e		       88		      DEY
   2235  fb6f		       94 cb		      STY	ScoreFontColorHoldChange,X
   2236  fb71		       4c 79 fb 	      JMP	SkipScoreFontColor
   2237  fb74				   ResetScoreFontColor
   2238  fb74		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2239  fb77		       95 c9		      STA	ScoreFontColor,X
   2240  fb79				   SkipScoreFontColor
   2241  fb79		       60		      RTS
   2242  fb7a
   2243  fb7a							; Moved here because of rom space.
   2244  fb7a							; The only SBR in constants space
   2245  fb7a				   DrawQrCode
   2246  fb7a		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2247  fb7c		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2248  fb7e		       a9 01		      LDA	#%00000001	; Mirror playfield
   2249  fb80		       85 0a		      STA	CTRLPF
   2250  fb82		       20 84 f6 	      JSR	ClearAll	; To be 100 sure!
   2251  fb85		       ad 82 02 	      LDA	SWCHB
   2252  fb88		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2253  fb8a		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2254  fb8c		       f0 07		      BEQ	StoreReversedQrCode
   2255  fb8e		       86 09		      STX	COLUBK
   2256  fb90		       84 08		      STY	COLUPF
   2257  fb92		       4c 99 fb 	      JMP	ContinueQrCode
   2258  fb95				   StoreReversedQrCode
   2259  fb95		       86 08		      STX	COLUPF
   2260  fb97		       84 09		      STY	COLUBK
   2261  fb99
   2262  fb99				   ContinueQrCode
   2263  fb99		       a2 08		      LDX	#8
   2264  fb9b		       20 cf f8 	      JSR	HMoveXTimes
   2265  fb9e		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2266  fba0		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2267  fba2		       20 a8 f8 	      JSR	WaitForVblankEnd
   2268  fba5		       20 bb f8 	      JSR	Sleep8Lines
   2269  fba8		       20 bb f8 	      JSR	Sleep8Lines
   2270  fbab		       20 bb f8 	      JSR	Sleep8Lines
   2271  fbae
   2272  fbae				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2273  fbae		       85 02		      STA	WSYNC
   2274  fbb0		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2275  fbb3		       85 0e		      STA	PF1	;3
   2276  fbb5		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2277  fbb8		       85 0f		      STA	PF2	;3
      0  fbba					      SLEEP	27	; 
      1  fbba				   .CYCLES    SET	27
      2  fbba
      3  fbba				  -	      IF	.CYCLES < 2
      4  fbba				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fbba				  -	      ERR
      6  fbba					      ENDIF
      7  fbba
      8  fbba					      IF	.CYCLES & 1
      9  fbba				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fbba				  -	      nop	0
     11  fbba					      ELSE
     12  fbba		       24 00		      bit	VSYNC
     13  fbbc					      ENDIF
     14  fbbc				   .CYCLES    SET	.CYCLES - 3
     15  fbbc					      ENDIF
     16  fbbc
     17  fbbc					      REPEAT	.CYCLES / 2
     18  fbbc		       ea		      nop
     17  fbbc					      REPEND
     18  fbbd		       ea		      nop
     17  fbbd					      REPEND
     18  fbbe		       ea		      nop
     17  fbbe					      REPEND
     18  fbbf		       ea		      nop
     17  fbbf					      REPEND
     18  fbc0		       ea		      nop
     17  fbc0					      REPEND
     18  fbc1		       ea		      nop
     17  fbc1					      REPEND
     18  fbc2		       ea		      nop
     17  fbc2					      REPEND
     18  fbc3		       ea		      nop
     17  fbc3					      REPEND
     18  fbc4		       ea		      nop
     17  fbc4					      REPEND
     18  fbc5		       ea		      nop
     17  fbc5					      REPEND
     18  fbc6		       ea		      nop
     17  fbc6					      REPEND
     18  fbc7		       ea		      nop
     19  fbc8					      REPEND
   2279  fbc8		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2280  fbcb		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2281  fbcd		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2282  fbd0		       85 0e		      STA	PF1	;3
   2283  fbd2
   2284  fbd2		       ca		      DEX		;2
   2285  fbd3		       d0 d9		      BNE	QrCodeLoop	;2
   2286  fbd5		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2287  fbd7		       88		      DEY		;2
   2288  fbd8		       10 d4		      BPL	QrCodeLoop	;4
   2289  fbda
   2290  fbda				   EndQrCodeLoop
   2291  fbda		       85 02		      STA	WSYNC	;
   2292  fbdc		       a9 00		      LDA	#0
   2293  fbde		       85 0e		      STA	PF1	;3
   2294  fbe0		       85 0f		      STA	PF2	;3
   2295  fbe2
   2296  fbe2		       20 c2 f8 	      JSR	Sleep32Lines
   2297  fbe5		       4c 27 f5 	      JMP	PrepareOverscan
   2298  fbe8
   2299  fbe8							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2300  fc00					      org	$FC00
   2301  fc00				   QrCode1
   2302  fc00		       1f		      .byte.b	#%00011111
   2303  fc01		       10		      .byte.b	#%00010000
   2304  fc02		       17		      .byte.b	#%00010111
   2305  fc03		       17		      .byte.b	#%00010111
   2306  fc04		       17		      .byte.b	#%00010111
   2307  fc05		       10		      .byte.b	#%00010000
   2308  fc06		       1f		      .byte.b	#%00011111
   2309  fc07		       00		      .byte.b	#%00000000
   2310  fc08		       17		      .byte.b	#%00010111
   2311  fc09		       10		      .byte.b	#%00010000
   2312  fc0a		       1d		      .byte.b	#%00011101
   2313  fc0b		       16		      .byte.b	#%00010110
   2314  fc0c		       03		      .byte.b	#%00000011
   2315  fc0d		       19		      .byte.b	#%00011001
   2316  fc0e		       13		      .byte.b	#%00010011
   2317  fc0f		       1c		      .byte.b	#%00011100
   2318  fc10		       0b		      .byte.b	#%00001011
   2319  fc11		       00		      .byte.b	#%00000000
   2320  fc12		       1f		      .byte.b	#%00011111
   2321  fc13		       10		      .byte.b	#%00010000
   2322  fc14		       17		      .byte.b	#%00010111
   2323  fc15		       17		      .byte.b	#%00010111
   2324  fc16		       17		      .byte.b	#%00010111
   2325  fc17		       10		      .byte.b	#%00010000
   2326  fc18		       1f		      .byte.b	#%00011111
   2327  fc19
   2328  fc19				   QrCode2
   2329  fc19		       c3		      .byte.b	#%11000011
   2330  fc1a		       9a		      .byte.b	#%10011010
   2331  fc1b		       82		      .byte.b	#%10000010
   2332  fc1c		       da		      .byte.b	#%11011010
   2333  fc1d		       aa		      .byte.b	#%10101010
   2334  fc1e		       ca		      .byte.b	#%11001010
   2335  fc1f		       f3		      .byte.b	#%11110011
   2336  fc20		       78		      .byte.b	#%01111000
   2337  fc21		       df		      .byte.b	#%11011111
   2338  fc22		       fc		      .byte.b	#%11111100
   2339  fc23		       c7		      .byte.b	#%11000111
   2340  fc24		       98		      .byte.b	#%10011000
   2341  fc25		       23		      .byte.b	#%00100011
   2342  fc26		       b9		      .byte.b	#%10111001
   2343  fc27		       d2		      .byte.b	#%11010010
   2344  fc28		       30		      .byte.b	#%00110000
   2345  fc29		       eb		      .byte.b	#%11101011
   2346  fc2a		       28		      .byte.b	#%00101000
   2347  fc2b		       ab		      .byte.b	#%10101011
   2348  fc2c		       72		      .byte.b	#%01110010
   2349  fc2d		       fa		      .byte.b	#%11111010
   2350  fc2e		       7a		      .byte.b	#%01111010
   2351  fc2f		       32		      .byte.b	#%00110010
   2352  fc30		       3a		      .byte.b	#%00111010
   2353  fc31		       63		      .byte.b	#%01100011
   2354  fc32
   2355  fc32				   QrCode3
   2356  fc32		       98		      .byte.b	#%10011000
   2357  fc33		       c3		      .byte.b	#%11000011
   2358  fc34		       39		      .byte.b	#%00111001
   2359  fc35		       34		      .byte.b	#%00110100
   2360  fc36		       ff		      .byte.b	#%11111111
   2361  fc37		       71		      .byte.b	#%01110001
   2362  fc38		       d5		      .byte.b	#%11010101
   2363  fc39		       d1		      .byte.b	#%11010001
   2364  fc3a		       5f		      .byte.b	#%01011111
   2365  fc3b		       26		      .byte.b	#%00100110
   2366  fc3c		       2d		      .byte.b	#%00101101
   2367  fc3d		       e9		      .byte.b	#%11101001
   2368  fc3e		       d6		      .byte.b	#%11010110
   2369  fc3f		       26		      .byte.b	#%00100110
   2370  fc40		       ba		      .byte.b	#%10111010
   2371  fc41		       03		      .byte.b	#%00000011
   2372  fc42		       dd		      .byte.b	#%11011101
   2373  fc43		       e0		      .byte.b	#%11100000
   2374  fc44		       57		      .byte.b	#%01010111
   2375  fc45		       14		      .byte.b	#%00010100
   2376  fc46		       35		      .byte.b	#%00110101
   2377  fc47		       e5		      .byte.b	#%11100101
   2378  fc48		       b5		      .byte.b	#%10110101
   2379  fc49		       d4		      .byte.b	#%11010100
   2380  fc4a		       97		      .byte.b	#%10010111
   2381  fc4b
   2382  fc4b				   QrCode4
   2383  fc4b		       09		      .byte.b	#%00001001
   2384  fc4c		       0e		      .byte.b	#%00001110
   2385  fc4d		       0f		      .byte.b	#%00001111
   2386  fc4e		       0c		      .byte.b	#%00001100
   2387  fc4f		       0c		      .byte.b	#%00001100
   2388  fc50		       08		      .byte.b	#%00001000
   2389  fc51		       08		      .byte.b	#%00001000
   2390  fc52		       06		      .byte.b	#%00000110
   2391  fc53		       06		      .byte.b	#%00000110
   2392  fc54		       0b		      .byte.b	#%00001011
   2393  fc55		       0f		      .byte.b	#%00001111
   2394  fc56		       04		      .byte.b	#%00000100
   2395  fc57		       08		      .byte.b	#%00001000
   2396  fc58		       0f		      .byte.b	#%00001111
   2397  fc59		       09		      .byte.b	#%00001001
   2398  fc5a		       07		      .byte.b	#%00000111
   2399  fc5b		       05		      .byte.b	#%00000101
   2400  fc5c		       00		      .byte.b	#%00000000
   2401  fc5d		       0f		      .byte.b	#%00001111
   2402  fc5e		       08		      .byte.b	#%00001000
   2403  fc5f		       0b		      .byte.b	#%00001011
   2404  fc60		       0b		      .byte.b	#%00001011
   2405  fc61		       0b		      .byte.b	#%00001011
   2406  fc62		       08		      .byte.b	#%00001000
   2407  fc63		       0f		      .byte.b	#%00001111
   2408  fc64
   2409  fc64				   PlayerToUpMask
   2410  fc64		       10		      .byte.b	#%00010000	;
   2411  fc65		       01		      .byte.b	#%00000001	;
   2412  fc66
   2413  fc66				   PlayerToDownMask
   2414  fc66		       20		      .byte.b	#%00100000	;
   2415  fc67		       02		      .byte.b	#%00000010	;
   2416  fc68
   2417  fc68				   PlayerToLeftMask
   2418  fc68		       40		      .byte.b	#%01000000	;
   2419  fc69		       04		      .byte.b	#%00000100	;
   2420  fc6a
   2421  fc6a				   PlayerToRightMask
   2422  fc6a		       80		      .byte.b	#%10000000	;
   2423  fc6b		       08		      .byte.b	#%00001000	;
   2424  fc6c
   2425  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2426  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2427  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2428  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2429  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2430  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2431  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2432  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2433  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2434  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2435  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2436  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2437  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2438  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2439  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2440  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2441  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2442  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2443  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2444  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2445  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2446  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2447  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2448  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2449  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2450  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2451  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2452  fc86		       86		      .byte.b	#<CR + #FONT_OFFSET	; Last point that is continuos
   2453  fc87		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2454  fc88		       90		      .byte.b	#<CV + #FONT_OFFSET
   2455  fc89		       95		      .byte.b	#<CW + #FONT_OFFSET
   2456  fc8a		       9a		      .byte.b	#<CY + #FONT_OFFSET
   2457  fc8b		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2458  fc8c
   2459  fc8c
   2460  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2461  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2462  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2463  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2464  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2465  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2466  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2467  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2468  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2469  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2470  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2471  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2472  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2473  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2474  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2475  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2476  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2477  fc9c
   2478  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2479  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2480  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2481  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2482  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2483  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2484  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2485  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2486  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2487  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2488  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2489  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2490  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2491  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2492  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2493  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2494  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2495  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2496  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2497  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2498  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2499  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2500  fcb1
   2501  fcb1				   PlayerToDefaultColor
   2502  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2503  fcb2		       96		      .byte.b	#PLAYER1_COLOR
   2504  fcb3
   2505  fd00					      org	$FD00
   2506  fd00				   Font
   2507  fd00				   C0
   2508  fd00		       e7		      .byte.b	#%11100111	;
   2509  fd01		       a5		      .byte.b	#%10100101	; 
   2510  fd02		       a5		      .byte.b	#%10100101	; 
   2511  fd03		       a5		      .byte.b	#%10100101	; 
   2512  fd04		       e7		      .byte.b	#%11100111	;	
   2513  fd05				   C1
   2514  fd05		       e7		      .byte.b	#%11100111	;
   2515  fd06		       42		      .byte.b	#%01000010	; 
   2516  fd07		       42		      .byte.b	#%01000010	; 
   2517  fd08		       42		      .byte.b	#%01000010	; 
   2518  fd09		       66		      .byte.b	#%01100110	;
   2519  fd0a				   C2
   2520  fd0a		       e7		      .byte.b	#%11100111	;
   2521  fd0b		       24		      .byte.b	#%00100100	; 
   2522  fd0c		       e7		      .byte.b	#%11100111	; 
   2523  fd0d		       81		      .byte.b	#%10000001	; 
   2524  fd0e		       e7		      .byte.b	#%11100111	;
   2525  fd0f				   C3
   2526  fd0f		       e7		      .byte.b	#%11100111	;
   2527  fd10		       81		      .byte.b	#%10000001	; 
   2528  fd11		       e7		      .byte.b	#%11100111	; 
   2529  fd12		       81		      .byte.b	#%10000001	; 
   2530  fd13		       e7		      .byte.b	#%11100111	;
   2531  fd14				   C4
   2532  fd14		       81		      .byte.b	#%10000001	;
   2533  fd15		       81		      .byte.b	#%10000001	; 
   2534  fd16		       e7		      .byte.b	#%11100111	; 
   2535  fd17		       a5		      .byte.b	#%10100101	; 
   2536  fd18		       a5		      .byte.b	#%10100101	;
   2537  fd19				   C5
   2538  fd19		       e7		      .byte.b	#%11100111	;
   2539  fd1a		       81		      .byte.b	#%10000001	; 
   2540  fd1b		       e7		      .byte.b	#%11100111	; 
   2541  fd1c		       24		      .byte.b	#%00100100	; 
   2542  fd1d		       e7		      .byte.b	#%11100111	;
   2543  fd1e				   C6
   2544  fd1e		       e7		      .byte.b	#%11100111	;
   2545  fd1f		       a5		      .byte.b	#%10100101	; 
   2546  fd20		       e7		      .byte.b	#%11100111	; 
   2547  fd21		       24		      .byte.b	#%00100100	; 
   2548  fd22		       e7		      .byte.b	#%11100111	;
   2549  fd23				   C7
   2550  fd23		       81		      .byte.b	#%10000001	;
   2551  fd24		       81		      .byte.b	#%10000001	; 
   2552  fd25		       81		      .byte.b	#%10000001	; 
   2553  fd26		       81		      .byte.b	#%10000001	; 
   2554  fd27		       e7		      .byte.b	#%11100111	;
   2555  fd28				   C8
   2556  fd28		       e7		      .byte.b	#%11100111	;
   2557  fd29		       a5		      .byte.b	#%10100101	; 
   2558  fd2a		       e7		      .byte.b	#%11100111	; 
   2559  fd2b		       a5		      .byte.b	#%10100101	; 
   2560  fd2c		       e7		      .byte.b	#%11100111	;
   2561  fd2d				   C9
   2562  fd2d		       e7		      .byte.b	#%11100111	;
   2563  fd2e		       81		      .byte.b	#%10000001	; 
   2564  fd2f		       e7		      .byte.b	#%11100111	; 
   2565  fd30		       a5		      .byte.b	#%10100101	; 
   2566  fd31		       e7		      .byte.b	#%11100111	;
   2567  fd32				   CA
   2568  fd32		       a5		      .byte.b	#%10100101	;
   2569  fd33		       a5		      .byte.b	#%10100101	; 
   2570  fd34		       e7		      .byte.b	#%11100111	; 
   2571  fd35		       a5		      .byte.b	#%10100101	; 
   2572  fd36		       e7		      .byte.b	#%11100111	;
   2573  fd37				   CB
   2574  fd37		       66		      .byte.b	#%01100110	;
   2575  fd38		       a5		      .byte.b	#%10100101	; 
   2576  fd39		       66		      .byte.b	#%01100110	; 
   2577  fd3a		       a5		      .byte.b	#%10100101	;
   2578  fd3b		       66		      .byte.b	#%01100110	;
   2579  fd3c				   CC
   2580  fd3c		       e7		      .byte.b	#%11100111	;
   2581  fd3d		       24		      .byte.b	#%00100100	; 
   2582  fd3e		       24		      .byte.b	#%00100100	; 
   2583  fd3f		       24		      .byte.b	#%00100100	;
   2584  fd40		       e7		      .byte.b	#%11100111	;
   2585  fd41
   2586  fd41				   CD
   2587  fd41		       66		      .byte.b	#%01100110	;
   2588  fd42		       a5		      .byte.b	#%10100101	; 
   2589  fd43		       a5		      .byte.b	#%10100101	; 
   2590  fd44		       a5		      .byte.b	#%10100101	;
   2591  fd45		       66		      .byte.b	#%01100110	;
   2592  fd46
   2593  fd46				   CE
   2594  fd46		       e7		      .byte.b	#%11100111	;
   2595  fd47		       24		      .byte.b	#%00100100	; 
   2596  fd48		       e7		      .byte.b	#%11100111	; 
   2597  fd49		       24		      .byte.b	#%00100100	; 
   2598  fd4a		       e7		      .byte.b	#%11100111	;
   2599  fd4b
   2600  fd4b				   CF
   2601  fd4b		       24		      .byte.b	#%00100100	;
   2602  fd4c		       24		      .byte.b	#%00100100	; 
   2603  fd4d		       e7		      .byte.b	#%11100111	; 
   2604  fd4e		       24		      .byte.b	#%00100100	; 
   2605  fd4f		       e7		      .byte.b	#%11100111	;
   2606  fd50
   2607  fd50				   CG
   2608  fd50		       c3		      .byte.b	#%11000011	;
   2609  fd51		       a5		      .byte.b	#%10100101	; 
   2610  fd52		       a5		      .byte.b	#%10100101	; 
   2611  fd53		       24		      .byte.b	#%00100100	; 
   2612  fd54		       c3		      .byte.b	#%11000011	;	
   2613  fd55
   2614  fd55				   CH
   2615  fd55		       a5		      .byte.b	#%10100101	;
   2616  fd56		       a5		      .byte.b	#%10100101	; 
   2617  fd57		       e7		      .byte.b	#%11100111	; 
   2618  fd58		       a5		      .byte.b	#%10100101	; 
   2619  fd59		       a5		      .byte.b	#%10100101	;
   2620  fd5a
   2621  fd5a				   CI
   2622  fd5a		       e7		      .byte.b	#%11100111	;
   2623  fd5b		       42		      .byte.b	#%01000010	; 
   2624  fd5c		       42		      .byte.b	#%01000010	; 
   2625  fd5d		       42		      .byte.b	#%01000010	; 
   2626  fd5e		       e7		      .byte.b	#%11100111	;
   2627  fd5f
   2628  fd5f				   CJ
   2629  fd5f		       e7		      .byte.b	#%11100111	;
   2630  fd60		       a5		      .byte.b	#%10100101	; 
   2631  fd61		       81		      .byte.b	#%10000001	; 
   2632  fd62		       81		      .byte.b	#%10000001	; 
   2633  fd63		       81		      .byte.b	#%10000001	;	
   2634  fd64
   2635  fd64				   CK
   2636  fd64		       a5		      .byte.b	#%10100101	;
   2637  fd65		       a5		      .byte.b	#%10100101	; 
   2638  fd66		       66		      .byte.b	#%01100110	; 
   2639  fd67		       a5		      .byte.b	#%10100101	; 
   2640  fd68		       a5		      .byte.b	#%10100101	;
   2641  fd69
   2642  fd69				   CL
   2643  fd69		       e7		      .byte.b	#%11100111	;
   2644  fd6a		       24		      .byte.b	#%00100100	; 
   2645  fd6b		       24		      .byte.b	#%00100100	; 
   2646  fd6c		       24		      .byte.b	#%00100100	; 
   2647  fd6d		       24		      .byte.b	#%00100100	;
   2648  fd6e
   2649  fd6e				   CM
   2650  fd6e		       a5		      .byte.b	#%10100101	;
   2651  fd6f		       a5		      .byte.b	#%10100101	; 
   2652  fd70		       a5		      .byte.b	#%10100101	; 
   2653  fd71		       e7		      .byte.b	#%11100111	; 
   2654  fd72		       a5		      .byte.b	#%10100101	;
   2655  fd73
   2656  fd73				   CN
   2657  fd73		       a5		      .byte.b	#%10100101	;
   2658  fd74		       a5		      .byte.b	#%10100101	; 
   2659  fd75		       a5		      .byte.b	#%10100101	; 
   2660  fd76		       a5		      .byte.b	#%10100101	; 
   2661  fd77		       66		      .byte.b	#%01100110	;	
   2662  fd78
   2663  fd78
   2664  fd78				   CO
   2665  fd78		       42		      .byte.b	#%01000010	;
   2666  fd79		       a5		      .byte.b	#%10100101	; 
   2667  fd7a		       a5		      .byte.b	#%10100101	; 
   2668  fd7b		       a5		      .byte.b	#%10100101	; 
   2669  fd7c		       42		      .byte.b	#%01000010	;	
   2670  fd7d
   2671  fd7d				   CP
   2672  fd7d		       24		      .byte.b	#%00100100	;
   2673  fd7e		       24		      .byte.b	#%00100100	; 
   2674  fd7f		       e7		      .byte.b	#%11100111	; 
   2675  fd80		       a5		      .byte.b	#%10100101	; 
   2676  fd81		       e7		      .byte.b	#%11100111	;
   2677  fd82
   2678  fd82				   CR
   2679  fd82		       a5		      .byte.b	#%10100101	;
   2680  fd83		       a5		      .byte.b	#%10100101	; 
   2681  fd84		       66		      .byte.b	#%01100110	; 
   2682  fd85		       a5		      .byte.b	#%10100101	; 
   2683  fd86		       66		      .byte.b	#%01100110	;
   2684  fd87
   2685  fd87				   CT
   2686  fd87		       42		      .byte.b	#%01000010	;
   2687  fd88		       42		      .byte.b	#%01000010	; 
   2688  fd89		       42		      .byte.b	#%01000010	; 
   2689  fd8a		       42		      .byte.b	#%01000010	; 
   2690  fd8b		       e7		      .byte.b	#%11100111	;
   2691  fd8c
   2692  fd8c				   CV
   2693  fd8c		       42		      .byte.b	#%01000010	;
   2694  fd8d		       a5		      .byte.b	#%10100101	; 
   2695  fd8e		       a5		      .byte.b	#%10100101	; 
   2696  fd8f		       a5		      .byte.b	#%10100101	; 
   2697  fd90		       a5		      .byte.b	#%10100101	;	
   2698  fd91
   2699  fd91				   CW
   2700  fd91		       a5		      .byte.b	#%10100101	;
   2701  fd92		       e7		      .byte.b	#%11100111	; 
   2702  fd93		       a5		      .byte.b	#%10100101	; 
   2703  fd94		       a5		      .byte.b	#%10100101	; 
   2704  fd95		       a5		      .byte.b	#%10100101	;
   2705  fd96
   2706  fd96				   CY
   2707  fd96		       42		      .byte.b	#%01000010	;
   2708  fd97		       42		      .byte.b	#%01000010	; 
   2709  fd98		       42		      .byte.b	#%01000010	; 
   2710  fd99		       a5		      .byte.b	#%10100101	; 
   2711  fd9a		       a5		      .byte.b	#%10100101	;
   2712  fd9b
   2713  fd9b				   Exclamation
   2714  fd9b		       42		      .byte.b	#%01000010	;
   2715  fd9c		       00		      .byte.b	#%00000000	; 
   2716  fd9d		       42		      .byte.b	#%01000010	; 
   2717  fd9e		       42		      .byte.b	#%01000010	; 
   2718  fd9f		       42		      .byte.b	#%01000010	;
   2719  fda0
   2720  fda0				   Dot
   2721  fda0		       42		      .byte.b	#%01000010	;
   2722  fda1		       42		      .byte.b	#%01000010	; 
   2723  fda2		       00		      .byte.b	#%00000000	; 
   2724  fda3		       00		      .byte.b	#%00000000	; 
   2725  fda4		       00		      .byte.b	#%00000000	;
   2726  fda5
   2727  fda5				   Pipe
   2728  fda5				   Colon
   2729  fda5		       42		      .byte.b	#%01000010	;
   2730  fda6		       42		      .byte.b	#%01000010	; 
   2731  fda7		       00		      .byte.b	#%00000000	; 
   2732  fda8		       42		      .byte.b	#%01000010	; 
   2733  fda9		       42		      .byte.b	#%01000010	;
   2734  fdaa
   2735  fdaa				   Triangle
   2736  fdaa		       81		      .byte.b	#%10000001	;
   2737  fdab		       c3		      .byte.b	#%11000011	; 
   2738  fdac		       e7		      .byte.b	#%11100111	; 
   2739  fdad		       c3		      .byte.b	#%11000011	; 
   2740  fdae		       81		      .byte.b	#%10000001	;
   2741  fdaf
   2742  fdaf				   Space
   2743  fdaf				   C0B
   2744  fdaf		       00		      .byte.b	#%00000000	;
   2745  fdb0		       00		      .byte.b	#%00000000	; 
   2746  fdb1		       00		      .byte.b	#%00000000	; 
   2747  fdb2		       00		      .byte.b	#%00000000	; 
   2748  fdb3		       00		      .byte.b	#%00000000	;	
   2749  fdb4				   C1B
   2750  fdb4		       24		      .byte.b	#%00100100	;
   2751  fdb5		       00		      .byte.b	#%00000000	; 
   2752  fdb6		       00		      .byte.b	#%00000000	; 
   2753  fdb7		       00		      .byte.b	#%00000000	; 
   2754  fdb8		       00		      .byte.b	#%00000000	;
   2755  fdb9				   C2B
   2756  fdb9		       66		      .byte.b	#%01100110	;
   2757  fdba		       00		      .byte.b	#%00000000	; 
   2758  fdbb		       00		      .byte.b	#%00000000	; 
   2759  fdbc		       00		      .byte.b	#%00000000	; 
   2760  fdbd		       00		      .byte.b	#%00000000	;
   2761  fdbe				   C3B
   2762  fdbe		       e7		      .byte.b	#%11100111	;
   2763  fdbf		       00		      .byte.b	#%00000000	; 
   2764  fdc0		       00		      .byte.b	#%00000000	; 
   2765  fdc1		       00		      .byte.b	#%00000000	; 
   2766  fdc2		       00		      .byte.b	#%00000000	;
   2767  fdc3				   C4B
   2768  fdc3		       e7		      .byte.b	#%11100111	;
   2769  fdc4		       24		      .byte.b	#%00100100	; 
   2770  fdc5		       00		      .byte.b	#%00000000	; 
   2771  fdc6		       00		      .byte.b	#%00000000	; 
   2772  fdc7		       00		      .byte.b	#%00000000	;
   2773  fdc8				   C5B
   2774  fdc8		       e7		      .byte.b	#%11100111	;
   2775  fdc9		       66		      .byte.b	#%01100110	; 
   2776  fdca		       00		      .byte.b	#%00000000	; 
   2777  fdcb		       00		      .byte.b	#%00000000	; 
   2778  fdcc		       00		      .byte.b	#%00000000	;
   2779  fdcd				   C6B
   2780  fdcd		       e7		      .byte.b	#%11100111	;
   2781  fdce		       e7		      .byte.b	#%11100111	; 
   2782  fdcf		       00		      .byte.b	#%00000000	; 
   2783  fdd0		       00		      .byte.b	#%00000000	; 
   2784  fdd1		       00		      .byte.b	#%00000000	;
   2785  fdd2				   C7B
   2786  fdd2		       e7		      .byte.b	#%11100111	;
   2787  fdd3		       e7		      .byte.b	#%11100111	; 
   2788  fdd4		       24		      .byte.b	#%00100100	; 
   2789  fdd5		       00		      .byte.b	#%00000000	; 
   2790  fdd6		       00		      .byte.b	#%00000000	;
   2791  fdd7				   C8B
   2792  fdd7		       e7		      .byte.b	#%11100111	;
   2793  fdd8		       e7		      .byte.b	#%11100111	; 
   2794  fdd9		       66		      .byte.b	#%01100110	; 
   2795  fdda		       00		      .byte.b	#%00000000	; 
   2796  fddb		       00		      .byte.b	#%00000000	;
   2797  fddc				   C9B
   2798  fddc		       e7		      .byte.b	#%11100111	;
   2799  fddd		       e7		      .byte.b	#%11100111	; 
   2800  fdde		       e7		      .byte.b	#%11100111	; 
   2801  fddf		       00		      .byte.b	#%00000000	; 
   2802  fde0		       00		      .byte.b	#%00000000	;
   2803  fde1				   CAB
   2804  fde1		       e7		      .byte.b	#%11100111	;
   2805  fde2		       e7		      .byte.b	#%11100111	; 
   2806  fde3		       e7		      .byte.b	#%11100111	; 
   2807  fde4		       24		      .byte.b	#%00100100	; 
   2808  fde5		       00		      .byte.b	#%00000000	;
   2809  fde6				   CBB
   2810  fde6		       e7		      .byte.b	#%11100111	;
   2811  fde7		       e7		      .byte.b	#%11100111	; 
   2812  fde8		       e7		      .byte.b	#%11100111	; 
   2813  fde9		       66		      .byte.b	#%01100110	; 
   2814  fdea		       00		      .byte.b	#%00000000	;
   2815  fdeb				   CCB
   2816  fdeb		       e7		      .byte.b	#%11100111	;
   2817  fdec		       e7		      .byte.b	#%11100111	; 
   2818  fded		       e7		      .byte.b	#%11100111	; 
   2819  fdee		       e7		      .byte.b	#%11100111	; 
   2820  fdef		       00		      .byte.b	#%00000000	;
   2821  fdf0
   2822  fdf0				   CDB
   2823  fdf0		       e7		      .byte.b	#%11100111	;
   2824  fdf1		       e7		      .byte.b	#%11100111	; 
   2825  fdf2		       e7		      .byte.b	#%11100111	; 
   2826  fdf3		       e7		      .byte.b	#%11100111	; 
   2827  fdf4		       24		      .byte.b	#%00100100	;
   2828  fdf5
   2829  fdf5				   CEB
   2830  fdf5		       e7		      .byte.b	#%11100111	;
   2831  fdf6		       e7		      .byte.b	#%11100111	; 
   2832  fdf7		       e7		      .byte.b	#%11100111	; 
   2833  fdf8		       e7		      .byte.b	#%11100111	; 
   2834  fdf9		       66		      .byte.b	#%01100110	;
   2835  fdfa
   2836  fdfa				   CFB
   2837  fdfa		       e7		      .byte.b	#%11100111	;
   2838  fdfb		       e7		      .byte.b	#%11100111	; 
   2839  fdfc		       e7		      .byte.b	#%11100111	; 
   2840  fdfd		       e7		      .byte.b	#%11100111	; 
   2841  fdfe		       e7		      .byte.b	#%11100111	;
   2842  fdff
   2843  fe00					      org	$FE00
   2844  fe00				   AesTable
   2845  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2846  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2847  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2848  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2849  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2850  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2851  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2852  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2853  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2854  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2855  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2856  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2857  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2858  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2859  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2860  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2861  ff00
   2862  ff00							; From FF00 to FFFB (122 bytes) to use here
   2863  ff00
   2864  ff00				   StaticText		; All static text must be on the same MSB block. 
   2865  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2866  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2867  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2868  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2869  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2870  ff04		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2871  ff05
   2872  ff05				   HellwayLeftText
   2873  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2874  ff06		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2875  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2876  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2877  ff09		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2878  ff0a
   2879  ff0a				   HellwayRightText
   2880  ff0a		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2881  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2882  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2883  ff0d		       9a		      .byte.b	#<CY + #FONT_OFFSET
   2884  ff0e		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2885  ff0f
   2886  ff0f				   OpbText
   2887  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2888  ff10		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2889  ff11		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2890  ff12		       81		      .byte.b	#<CP + #FONT_OFFSET
   2891  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2892  ff14
   2893  ff14				   YearText
   2894  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2895  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2896  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2897  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2898  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2899  ff19
   2900  ff19				   GameText
   2901  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2902  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2903  ff1b		       72		      .byte.b	#<CM + #FONT_OFFSET
   2904  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2905  ff1d		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2906  ff1e
   2907  ff1e				   OverText
   2908  ff1e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2909  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2910  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2911  ff21		       86		      .byte.b	#<CR + #FONT_OFFSET
   2912  ff22		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2913  ff23				   GoText
   2914  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2915  ff24		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2916  ff25		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2917  ff26		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2918  ff27		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2919  ff28
   2920  ff28				   VersionText
   2921  ff28		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2922  ff29		       a4		      .byte.b	#<Dot + #FONT_OFFSET
   2923  ff2a		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2924  ff2b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2925  ff2c		       ae		      .byte.b	#<Triangle + #FONT_OFFSET
   2926  ff2d				   EndStaticText
   2927  ff2d
   2928  ff2d				   TachometerSizeLookup1
   2929  ff2d		       1f		      .byte.b	#%00011111
   2930  ff2e		       3f		      .byte.b	#%00111111
   2931  ff2f		       7f		      .byte.b	#%01111111
   2932  ff30		       ff		      .byte.b	#%11111111
   2933  ff31		       ff		      .byte.b	#%11111111
   2934  ff32		       ff		      .byte.b	#%11111111
   2935  ff33		       ff		      .byte.b	#%11111111
   2936  ff34		       ff		      .byte.b	#%11111111
   2937  ff35
   2938  ff35				   TachometerSizeLookup2
   2939  ff35		       00		      .byte.b	#%00000000
   2940  ff36		       00		      .byte.b	#%00000000
   2941  ff37		       00		      .byte.b	#%00000000
   2942  ff38		       00		      .byte.b	#%00000000
   2943  ff39		       80		      .byte.b	#%10000000
   2944  ff3a		       c0		      .byte.b	#%11000000
   2945  ff3b		       e0		      .byte.b	#%11100000
   2946  ff3c		       f0		      .byte.b	#%11110000
   2947  ff3d
   2948  ff3d				   TachometerGearLookup
   2949  ff3d		       01		      .byte.b	#%00000001
   2950  ff3e		       02		      .byte.b	#%00000010
   2951  ff3f		       04		      .byte.b	#%00000100
   2952  ff40		       08		      .byte.b	#%00001000
   2953  ff41		       10		      .byte.b	#%00010000
   2954  ff42		       30		      .byte.b	#%00110000
   2955  ff43
   2956  ff43				   EngineSoundType
   2957  ff43		       02		      .byte.b	#2
   2958  ff44		       02		      .byte.b	#2
   2959  ff45		       0e		      .byte.b	#14
   2960  ff46		       06		      .byte.b	#6
   2961  ff47		       06		      .byte.b	#6
   2962  ff48		       0e		      .byte.b	#14
   2963  ff49
   2964  ff49				   EngineBaseFrequence
   2965  ff49		       1f		      .byte.b	#31
   2966  ff4a		       15		      .byte.b	#21
   2967  ff4b		       14		      .byte.b	#20
   2968  ff4c		       1f		      .byte.b	#31
   2969  ff4d		       16		      .byte.b	#22
   2970  ff4e		       03		      .byte.b	#3
   2971  ff4f
   2972  ff4f				   CarSprite0		; Upside down, Original Car
   2973  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2974  ff57				   CarSprite0NoPadding
   2975  ff57		       7e		      .byte.b	#%01111110
   2976  ff58		       24		      .byte.b	#%00100100
   2977  ff59		       bd		      .byte.b	#%10111101
   2978  ff5a		       3c		      .byte.b	#%00111100
   2979  ff5b		       bd		      .byte.b	#%10111101
   2980  ff5c		       3c		      .byte.b	#%00111100
   2981  ff5d
   2982  ff5d				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2983  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2984  ff65				   CarSprite1NoPadding
   2985  ff65		       bd		      .byte.b	#%10111101
   2986  ff66		       7e		      .byte.b	#%01111110
   2987  ff67		       5a		      .byte.b	#%01011010
   2988  ff68		       66		      .byte.b	#%01100110
   2989  ff69		       bd		      .byte.b	#%10111101
   2990  ff6a		       3c		      .byte.b	#%00111100
   2991  ff6b
   2992  ff6b				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2993  ff6b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2994  ff73				   CarSprite2NoPadding
   2995  ff73		       7e		      .byte.b	#%01111110
   2996  ff74		       a5		      .byte.b	#%10100101
   2997  ff75		       42		      .byte.b	#%01000010
   2998  ff76		       42		      .byte.b	#%01000010
   2999  ff77		       bd		      .byte.b	#%10111101
   3000  ff78		       7e		      .byte.b	#%01111110
   3001  ff79
   3002  ff79				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   3003  ff79		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   3004  ff81				   CarSprite3NoPadding
   3005  ff81		       3c		      .byte.b	#%00111100
   3006  ff82		       db		      .byte.b	#%11011011
   3007  ff83		       db		      .byte.b	#%11011011
   3008  ff84		       3c		      .byte.b	#%00111100
   3009  ff85		       5a		      .byte.b	#%01011010
   3010  ff86		       3c		      .byte.b	#%00111100
   3011  ff87
   3012  ff87				   TrafficSpeeds
   3013  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   3014  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   3015  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   3016  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   3017  ff8b		       e6		      .byte.b	#$E6	;  Trafic2 L
   3018  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   3019  ff8d		       c2		      .byte.b	#$C2	;  Trafic3 L
   3020  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   3021  ff8f		       9e		      .byte.b	#$9E	;  Trafic4 L
   3022  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   3023  ff91				   TrafficSpeedsHighDelta
   3024  ff91		       00		      .byte.b	#$00	;  Trafic0 L
   3025  ff92		       00		      .byte.b	#$00	;  Trafic0 H
   3026  ff93		       0a		      .byte.b	#$0A	;  Trafic1 L
   3027  ff94		       01		      .byte.b	#$01	;  Trafic1 H
   3028  ff95		       c8		      .byte.b	#$C8	;  Trafic2 L
   3029  ff96		       00		      .byte.b	#$00	;  Trafic2 H
   3030  ff97		       86		      .byte.b	#$86	;  Trafic3 L
   3031  ff98		       00		      .byte.b	#$00	;  Trafic3 H
   3032  ff99		       44		      .byte.b	#$44	;  Trafic4 L
   3033  ff9a		       00		      .byte.b	#$00	;  Trafic4 H
   3034  ff9b
   3035  ff9b				   CarIdToSpriteAddressL
   3036  ff9b		       4f		      .byte.b	#<CarSprite0
   3037  ff9c		       5d		      .byte.b	#<CarSprite1
   3038  ff9d		       6b		      .byte.b	#<CarSprite2
   3039  ff9e		       79		      .byte.b	#<CarSprite3
   3040  ff9f
   3041  ff9f				   CarIdToSpriteAddressH
   3042  ff9f		       ff		      .byte.b	#>CarSprite0
   3043  ffa0		       ff		      .byte.b	#>CarSprite1
   3044  ffa1		       ff		      .byte.b	#>CarSprite2
   3045  ffa2		       ff		      .byte.b	#>CarSprite3
   3046  ffa3
   3047  ffa3				   EnemyCarIdToSpriteAddressL
   3048  ffa3		       57		      .byte.b	#<CarSprite0NoPadding
   3049  ffa4		       65		      .byte.b	#<CarSprite1NoPadding
   3050  ffa5		       73		      .byte.b	#<CarSprite2NoPadding
   3051  ffa6		       81		      .byte.b	#<CarSprite3NoPadding
   3052  ffa7
   3053  ffa7				   EnemyCarIdToSpriteAddressH
   3054  ffa7		       ff		      .byte.b	#>CarSprite0NoPadding
   3055  ffa8		       ff		      .byte.b	#>CarSprite1NoPadding
   3056  ffa9		       ff		      .byte.b	#>CarSprite2NoPadding
   3057  ffaa		       ff		      .byte.b	#>CarSprite3NoPadding
   3058  ffab
   3059  ffab				   CarIdToAccelerateSpeed
   3060  ffab		       80		      .byte.b	#128
   3061  ffac		       c0		      .byte.b	#192
   3062  ffad		       60		      .byte.b	#96
   3063  ffae		       c0		      .byte.b	#192
   3064  ffaf
   3065  ffaf				   CarIdToTimeoverBreakInterval 		; Glide
   3066  ffaf		       03		      .byte.b	#%00000011	;Every 4 frames
   3067  ffb0		       03		      .byte.b	#%00000011	;Every 4 frames
   3068  ffb1		       0f		      .byte.b	#%00001111	;Every 16 frames
   3069  ffb2		       03		      .byte.b	#%00000011	;Every 4 frames
   3070  ffb3
   3071  ffb3				   CarIdToMaxSpeedL
   3072  ffb3		       80		      .byte.b	#$80
   3073  ffb4		       00		      .byte.b	#$00	; One less gear
   3074  ffb5		       80		      .byte.b	#$80
   3075  ffb6		       80		      .byte.b	#$80
   3076  ffb7
   3077  ffb7				   CarIdToMaxGear
   3078  ffb7		       05		      .byte.b	#5
   3079  ffb8		       04		      .byte.b	#4	; One less gear
   3080  ffb9		       05		      .byte.b	#5
   3081  ffba		       05		      .byte.b	#5
   3082  ffbb
   3083  ffbb				   GearToBreakSpeedTable
   3084  ffbb		       09		      .byte.b	#(BREAK_SPEED - 1)
   3085  ffbc		       09		      .byte.b	#(BREAK_SPEED - 1)
   3086  ffbd		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3087  ffbe		       0b		      .byte.b	#(BREAK_SPEED + 1)
   3088  ffbf		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3089  ffc0		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3090  ffc1
   3091  ffc1				   TrafficColorTable
   3092  ffc1		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3093  ffc2		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3094  ffc3		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3095  ffc4		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3096  ffc5
   3097  ffc5				   TrafficChanceTable
   3098  ffc5		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3099  ffc6		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3100  ffc7		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3101  ffc8		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3102  ffc9
   3103  ffc9				   TrafficTimeTable
   3104  ffc9		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3105  ffca		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3106  ffcb		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3107  ffcc		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3108  ffcd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3109  ffce
   3110  ffce
   3111  fffc					      org	$FFFC
   3112  fffc		       00 f0		      .word.w	BeforeStart
   3113  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
