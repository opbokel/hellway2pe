------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 8c	   FrameCount0 =	$8C	;
    111  f000		       00 8d	   FrameCount1 =	$8D	;
    112  f000
    113  f000		       00 8e	   Player0SpeedL =	$8E
    114  f000		       00 8f	   Player0SpeedH =	$8F
    115  f000
    116  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    117  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    118  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    119  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    120  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    121  f000
    122  f000		       00 a4	   CheckpointBcd0 =	$A4
    123  f000		       00 a5	   CheckpointBcd1 =	$A5
    124  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    125  f000		       00 a7	   CarSpritePointerL =	$A7
    126  f000		       00 a8	   CarSpritePointerH =	$A8
    127  f000		       00 a9	   CurrentCarId =	$A9
    128  f000		       00 aa	   AccelerateBuffer =	$AA	; Change speed on buffer overflow.
    129  f000		       00 ab	   TextSide   =	$AB
    130  f000		       00 ac	   TextFlickerMode =	$AC
    131  f000		       00 ad	   Gear       =	$AD
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000
    139  f000		       00 b4	   ScoreBcd0  =	$B4
    140  f000		       00 b5	   ScoreBcd1  =	$B5
    141  f000		       00 b6	   ScoreBcd2  =	$B6
    142  f000		       00 b7	   ScoreBcd3  =	$B7
    143  f000
    144  f000		       00 b8	   CollisionCounter =	$B8
    145  f000		       00 b9	   Player0X   =	$B9
    146  f000		       00 ba	   CountdownTimer =	$BA
    147  f000		       00 bb	   Traffic0Msb =	$BB
    148  f000		       00 bc	   SwitchDebounceCounter =	$BC
    149  f000
    150  f000		       00 bd	   TimeBcd0   =	$BD
    151  f000		       00 be	   TimeBcd1   =	$BE
    152  f000		       00 bf	   TimeBcd2   =	$BF
    153  f000
    154  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    155  f000		       00 c1	   TrafficChance =	$C1
    156  f000		       00 c2	   CheckpointTime =	$C2
    157  f000		       00 c3	   TrafficColor =	$C3
    158  f000		       00 c4	   CurrentDifficulty =	$C4
    159  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    160  f000							;Bit 2 speed delta, Bit 3 random traffic 
    161  f000
    162  f000
    163  f000		       00 ca	   BorderType =	$CA
    164  f000
    165  f000		       00 cb	   HitCountBcd0 =	$CB
    166  f000		       00 cc	   HitCountBcd1 =	$CC
    167  f000
    168  f000		       00 cd	   GlideTimeBcd0 =	$CD
    169  f000		       00 ce	   GlideTimeBcd1 =	$CE
    170  f000
    171  f000		       00 cf	   OneSecondConter =	$CF
    172  f000
    173  f000		       00 d0	   ScoreD0    =	$D0
    174  f000		       00 d1	   ScoreD1    =	$D1
    175  f000		       00 d2	   ScoreD2    =	$D2
    176  f000		       00 d3	   ScoreD3    =	$D3
    177  f000		       00 d4	   ScoreD4    =	$D4
    178  f000		       00 d5	   ScoreFontColor =	$D5
    179  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    180  f000		       00 d7	   NextCheckpoint =	$D7
    181  f000
    182  f000		       00 d8	   OpponentLine =	$D8
    183  f000
    184  f000
    185  f000							;generic start up stuff, put zero in almost all...
    186  f000				   BeforeStart		;All variables that are kept on game reset or select
    187  f000		       a0 00		      LDY	#0
    188  f002		       84 bc		      STY	SwitchDebounceCounter
    189  f004		       84 c4		      STY	CurrentDifficulty
    190  f006		       84 c0		      STY	GameStatus
    191  f008		       a0 10		      LDY	#16
    192  f00a		       84 c5		      STY	GameMode
    193  f00c		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    194  f00e		       84 a9		      STY	CurrentCarId
    195  f010
    196  f010				   Start
    197  f010		       a9 02		      LDA	#2
    198  f012		       85 00		      STA	VSYNC
    199  f014		       85 02		      STA	WSYNC
    200  f016		       85 02		      STA	WSYNC
    201  f018		       85 02		      STA	WSYNC
    202  f01a		       a9 00		      LDA	#0	;2
    203  f01c		       85 00		      STA	VSYNC	;3
    204  f01e
    205  f01e		       78		      SEI
    206  f01f		       d8		      CLD
    207  f020		       a2 ff		      LDX	#$FF
    208  f022		       9a		      TXS
    209  f023
    210  f023		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    211  f025				   CleanMem
    212  f025		       e0 bc		      CPX	#SwitchDebounceCounter
    213  f027		       f0 12		      BEQ	SkipClean
    214  f029		       e0 c5		      CPX	#GameMode
    215  f02b		       f0 0e		      BEQ	SkipClean
    216  f02d		       e0 a9		      CPX	#CurrentCarId
    217  f02f		       f0 0a		      BEQ	SkipClean
    218  f031		       e0 c4		      CPX	#CurrentDifficulty
    219  f033		       f0 06		      BEQ	SkipClean
    220  f035		       e0 c0		      CPX	#GameStatus
    221  f037		       f0 02		      BEQ	SkipClean
    222  f039		       95 00		      STA	0,X
    223  f03b				   SkipClean
    224  f03b		       e8		      INX
    225  f03c		       d0 e7		      BNE	CleanMem
    226  f03e
    227  f03e		       a9 d5		      LDA	#213
    228  f040		       8d 96 02 	      STA	TIM64T	;3	
    229  f043
    230  f043							;Setting some variables...
    231  f043
    232  f043				   SettingTrafficOffsets		; Time sensitive with player H position
    233  f043		       85 02		      STA	WSYNC	;We will set player position
    234  f045		       20 6c f7 	      JSR	DefaultOffsets
    235  f048
    236  f048		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    237  f04b		       85 8e		      STA	Player0SpeedL
    238  f04d
    239  f04d							;SLEEP 11;18
    240  f04d		       85 10		      STA	RESP0
    241  f04f
    242  f04f		       a2 00		      LDX	#0
    243  f051		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    244  f054		       85 a6		      STA	StartSWCHB	; For game over
    245  f056		       29 c0		      AND	#%11000000
    246  f058		       f0 0b		      BEQ	CallConfigureDifficulty
    247  f05a		       e8		      INX
    248  f05b		       c9 80		      CMP	#%10000000
    249  f05d		       f0 06		      BEQ	CallConfigureDifficulty
    250  f05f		       e8		      INX
    251  f060		       c9 40		      CMP	#%01000000
    252  f062		       f0 01		      BEQ	CallConfigureDifficulty
    253  f064		       e8		      INX
    254  f065
    255  f065				   CallConfigureDifficulty
    256  f065		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    257  f067		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    258  f069		       a5 c0		      LDA	GameStatus
    259  f06b		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    260  f06d				   NextCar
    261  f06d		       a4 a9		      LDY	CurrentCarId
    262  f06f		       c8		      INY
    263  f070		       98		      TYA
    264  f071		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    265  f073		       85 a9		      STA	CurrentCarId
    266  f075				   StoreCurrentDifficulty
    267  f075		       86 c4		      STX	CurrentDifficulty
    268  f077		       20 41 f7 	      JSR	ConfigureDifficulty
    269  f07a
    270  f07a				   ConfigureCarSprite
    271  f07a		       a4 a9		      LDY	CurrentCarId
    272  f07c		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    273  f07f		       85 a7		      STA	CarSpritePointerL
    274  f081		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    275  f084		       85 a8		      STA	CarSpritePointerH
    276  f086
    277  f086				   SetGameNotRunning
    278  f086		       a9 00		      LDA	#0
    279  f088		       85 c0		      STA	GameStatus
    280  f08a
    281  f08a				   ConfigureOneSecondTimer
    282  f08a		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    283  f08c		       85 cf		      STA	OneSecondConter
    284  f08e
    285  f08e				   HPositioning
    286  f08e		       85 02		      STA	WSYNC
    287  f090
    288  f090		       a9 30		      LDA	#%00110000	;2 Missile Size
    289  f092		       85 04		      STA	NUSIZ0	;3
    290  f094		       85 05		      STA	NUSIZ1	;3
    291  f096
    292  f096		       a9 35		      LDA	#PLAYER_0_X_START	;2
    293  f098		       85 b9		      STA	Player0X	;3
    294  f09a
    295  f09a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    296  f09c		       85 ba		      STA	CountdownTimer	;3
    297  f09e
    298  f09e		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0a0					      SLEEP	6	;
      1  f0a0				   .CYCLES    SET	6
      2  f0a0
      3  f0a0				  -	      IF	.CYCLES < 2
      4  f0a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a0				  -	      ERR
      6  f0a0					      ENDIF
      7  f0a0
      8  f0a0				  -	      IF	.CYCLES & 1
      9  f0a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a0				  -	      nop	0
     11  f0a0				  -	      ELSE
     12  f0a0				  -	      bit	VSYNC
     13  f0a0				  -	      ENDIF
     14  f0a0				  -.CYCLES    SET	.CYCLES - 3
     15  f0a0					      ENDIF
     16  f0a0
     17  f0a0					      REPEAT	.CYCLES / 2
     18  f0a0		       ea		      nop
     17  f0a0					      REPEND
     18  f0a1		       ea		      nop
     17  f0a1					      REPEND
     18  f0a2		       ea		      nop
     19  f0a3					      REPEND
    300  f0a3		       85 11		      STA	RESP1
      0  f0a5					      SLEEP	2	;
      1  f0a5				   .CYCLES    SET	2
      2  f0a5
      3  f0a5				  -	      IF	.CYCLES < 2
      4  f0a5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a5				  -	      ERR
      6  f0a5					      ENDIF
      7  f0a5
      8  f0a5				  -	      IF	.CYCLES & 1
      9  f0a5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a5				  -	      nop	0
     11  f0a5				  -	      ELSE
     12  f0a5				  -	      bit	VSYNC
     13  f0a5				  -	      ENDIF
     14  f0a5				  -.CYCLES    SET	.CYCLES - 3
     15  f0a5					      ENDIF
     16  f0a5
     17  f0a5					      REPEAT	.CYCLES / 2
     18  f0a5		       ea		      nop
     19  f0a6					      REPEND
    302  f0a6		       85 14		      STA	RESBL
      0  f0a8					      SLEEP	2	;
      1  f0a8				   .CYCLES    SET	2
      2  f0a8
      3  f0a8				  -	      IF	.CYCLES < 2
      4  f0a8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a8				  -	      ERR
      6  f0a8					      ENDIF
      7  f0a8
      8  f0a8				  -	      IF	.CYCLES & 1
      9  f0a8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a8				  -	      nop	0
     11  f0a8				  -	      ELSE
     12  f0a8				  -	      bit	VSYNC
     13  f0a8				  -	      ENDIF
     14  f0a8				  -.CYCLES    SET	.CYCLES - 3
     15  f0a8					      ENDIF
     16  f0a8
     17  f0a8					      REPEAT	.CYCLES / 2
     18  f0a8		       ea		      nop
     19  f0a9					      REPEND
    304  f0a9		       85 12		      STA	RESM0
      0  f0ab					      SLEEP	2
      1  f0ab				   .CYCLES    SET	2
      2  f0ab
      3  f0ab				  -	      IF	.CYCLES < 2
      4  f0ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ab				  -	      ERR
      6  f0ab					      ENDIF
      7  f0ab
      8  f0ab				  -	      IF	.CYCLES & 1
      9  f0ab				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ab				  -	      nop	0
     11  f0ab				  -	      ELSE
     12  f0ab				  -	      bit	VSYNC
     13  f0ab				  -	      ENDIF
     14  f0ab				  -.CYCLES    SET	.CYCLES - 3
     15  f0ab					      ENDIF
     16  f0ab
     17  f0ab					      REPEAT	.CYCLES / 2
     18  f0ab		       ea		      nop
     19  f0ac					      REPEND
    306  f0ac		       85 13		      STA	RESM1
    307  f0ae
    308  f0ae		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    309  f0b0		       85 d7		      STA	NextCheckpoint
    310  f0b2
    311  f0b2		       a9 f0		      LDA	#$F0
    312  f0b4		       85 24		      STA	HMBL
    313  f0b6		       85 22		      STA	HMM0
    314  f0b8		       85 23		      STA	HMM1
    315  f0ba		       85 02		      STA	WSYNC
    316  f0bc		       85 2a		      STA	HMOVE
    317  f0be		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    318  f0c0		       85 2b		      STA	HMCLR
    319  f0c2
    320  f0c2				   WaitResetToEnd
    321  f0c2		       ad 84 02 	      LDA	INTIM
    322  f0c5		       d0 fb		      BNE	WaitResetToEnd
    323  f0c7
    324  f0c7				   MainLoop
    325  f0c7		       a9 02		      LDA	#2
    326  f0c9		       85 00		      STA	VSYNC
    327  f0cb		       85 02		      STA	WSYNC
    328  f0cd
    329  f0cd				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    330  f0cd		       a9 01		      LDA	#%00000001
    331  f0cf		       24 ac		      BIT	TextFlickerMode
    332  f0d1		       f0 05		      BEQ	TextSideFrameZero
    333  f0d3		       25 8d		      AND	FrameCount1
    334  f0d5		       4c da f0 	      JMP	StoreTextSize
    335  f0d8				   TextSideFrameZero
    336  f0d8		       25 8c		      AND	FrameCount0
    337  f0da				   StoreTextSize
    338  f0da		       85 ab		      STA	TextSide
    339  f0dc
    340  f0dc		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    341  f0de		       85 2a		      STA	HMOVE	;2
    342  f0e0				   ConfigVBlankTimer
    343  f0e0		       a5 c5		      LDA	GameMode
    344  f0e2		       c9 10		      CMP	#MAX_GAME_MODE
    345  f0e4		       f0 05		      BEQ	SetVblankTimerQrCode
    346  f0e6		       a9 29		      LDA	#VBLANK_TIMER
    347  f0e8		       4c ed f0 	      JMP	SetVblankTimer
    348  f0eb				   SetVblankTimerQrCode
    349  f0eb		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    350  f0ed				   SetVblankTimer
    351  f0ed		       85 02		      STA	WSYNC	;3
    352  f0ef		       8d 96 02 	      STA	TIM64T	;3	
    353  f0f2		       a9 00		      LDA	#0	;2
    354  f0f4		       85 00		      STA	VSYNC	;3	
    355  f0f6
    356  f0f6				   RandomizeGame
    357  f0f6		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    358  f0f8		       d0 30		      BNE	EndRandomizeGame
    359  f0fa		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    360  f0fc		       29 02		      AND	#%00000010
    361  f0fe		       f0 27		      BEQ	DeterministicGame
    362  f100		       a6 96		      LDX	TrafficOffset1 + 2
    363  f102		       bd 00 fe 	      LDA	AesTable,X
    364  f105		       45 8c		      EOR	FrameCount0
    365  f107		       85 96		      STA	TrafficOffset1 + 2
    366  f109		       a6 9a		      LDX	TrafficOffset2 + 2
    367  f10b		       bd 00 fe 	      LDA	AesTable,X
    368  f10e		       45 8c		      EOR	FrameCount0
    369  f110		       85 9a		      STA	TrafficOffset2 + 2
    370  f112		       a6 9e		      LDX	TrafficOffset3 + 2
    371  f114		       bd 00 fe 	      LDA	AesTable,X
    372  f117		       45 8c		      EOR	FrameCount0
    373  f119		       85 9e		      STA	TrafficOffset3 + 2
    374  f11b		       a6 a2		      LDX	TrafficOffset4 + 2
    375  f11d		       bd 00 fe 	      LDA	AesTable,X
    376  f120		       45 8c		      EOR	FrameCount0
    377  f122		       85 a2		      STA	TrafficOffset4 + 2
    378  f124		       4c 2a f1 	      JMP	EndRandomizeGame
    379  f127
    380  f127				   DeterministicGame
    381  f127		       20 6c f7 	      JSR	DefaultOffsets
    382  f12a
    383  f12a				   EndRandomizeGame
    384  f12a
    385  f12a				   CountFrame
    386  f12a		       e6 8c		      INC	FrameCount0	; 5
    387  f12c		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    388  f12e		       e6 8d		      INC	FrameCount1	; 5 
    389  f130				   SkipIncFC1
    390  f130
    391  f130				   CallDrawQrCode
    392  f130		       a5 c5		      LDA	GameMode
    393  f132		       c9 10		      CMP	#MAX_GAME_MODE
    394  f134		       d0 03		      BNE	TestIsGameRunning
    395  f136		       4c 64 fc 	      JMP	DrawQrCode
    396  f139
    397  f139							;Does not update the game if not running
    398  f139				   TestIsGameRunning
    399  f139		       a5 c0		      LDA	GameStatus	;3
    400  f13b		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    401  f13d		       4c 05 f3 	      JMP	SkipUpdateLogic
    402  f140				   ContinueWithGameLogic
    403  f140
    404  f140				   EverySecond		; 64 frames to be more precise
    405  f140		       a9 3f		      LDA	#%00111111
    406  f142		       25 8c		      AND	FrameCount0
    407  f144		       d0 06		      BNE	SkipEverySecondAction
    408  f146		       c5 ba		      CMP	CountdownTimer
    409  f148		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    410  f14a		       c6 ba		      DEC	CountdownTimer
    411  f14c				   SkipEverySecondAction
    412  f14c
    413  f14c				   ChangeTextFlickerMode
    414  f14c		       a5 bc		      LDA	SwitchDebounceCounter
    415  f14e		       d0 0d		      BNE	EndChangeTextFlickerMode
    416  f150		       ad 82 02 	      LDA	SWCHB
    417  f153		       29 02		      AND	#%00000010	;Game select
    418  f155		       d0 06		      BNE	EndChangeTextFlickerMode
    419  f157		       e6 ac		      INC	TextFlickerMode
    420  f159		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    421  f15b		       85 bc		      STA	SwitchDebounceCounter
    422  f15d				   EndChangeTextFlickerMode
    423  f15d
    424  f15d				   BreakOnTimeOver		; Uses LDX as the breaking speed
    425  f15d		       a2 00		      LDX	#0
    426  f15f		       a5 ba		      LDA	CountdownTimer
    427  f161		       d0 0b		      BNE	Break
    428  f163		       a4 a9		      LDY	CurrentCarId
    429  f165		       a5 8c		      LDA	FrameCount0
    430  f167		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    431  f16a		       d0 02		      BNE	Break
    432  f16c		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    433  f16e
    434  f16e				   Break
    435  f16e		       a9 20		      LDA	#%00100000	;Down in controller
    436  f170		       2c 80 02 	      BIT	SWCHA
    437  f173		       d0 0e		      BNE	BreakNonZero
    438  f175		       a5 0c		      LDA	INPT4	;3
    439  f177		       10 08		      BPL	BreakWhileAccelerating
    440  f179		       a4 ad		      LDY	Gear
    441  f17b		       be dd ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    442  f17e		       4c 83 f1 	      JMP	BreakNonZero
    443  f181				   BreakWhileAccelerating		; Allow better control while breaking.
    444  f181		       a2 05		      LDX	(#BREAK_SPEED / 2)
    445  f183
    446  f183				   BreakNonZero
    447  f183		       e0 00		      CPX	#0
    448  f185		       f0 2b		      BEQ	SkipBreak
    449  f187		       86 b0		      STX	Tmp0
    450  f189
    451  f189				   DecreaseSpeed
    452  f189		       38		      SEC
    453  f18a		       a5 8e		      LDA	Player0SpeedL
    454  f18c		       e5 b0		      SBC	Tmp0
    455  f18e		       85 8e		      STA	Player0SpeedL
    456  f190		       a5 8f		      LDA	Player0SpeedH
    457  f192		       e9 00		      SBC	#0
    458  f194		       85 8f		      STA	Player0SpeedH
    459  f196
    460  f196				   CheckMinSpeed
    461  f196		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    462  f198		       c9 00		      CMP	#CAR_MIN_SPEED_H
    463  f19a		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    464  f19c		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    465  f19e
    466  f19e				   CompareLBreakSpeed
    467  f19e		       a5 8e		      LDA	Player0SpeedL
    468  f1a0		       c9 00		      CMP	#CAR_MIN_SPEED_L
    469  f1a2		       90 03		      BCC	ResetMinSpeed	; Less than memory
    470  f1a4		       4c af f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    471  f1a7
    472  f1a7				   ResetMinSpeed
    473  f1a7		       a9 00		      LDA	#CAR_MIN_SPEED_H
    474  f1a9		       85 8f		      STA	Player0SpeedH
    475  f1ab		       a9 00		      LDA	#CAR_MIN_SPEED_L
    476  f1ad		       85 8e		      STA	Player0SpeedL
    477  f1af
    478  f1af				   SkipAccelerateIfBreaking
    479  f1af		       4c f4 f1 	      JMP	SkipAccelerate
    480  f1b2				   SkipBreak
    481  f1b2
    482  f1b2				   Acelerates
    483  f1b2		       a5 ba		      LDA	CountdownTimer
    484  f1b4		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    485  f1b6
    486  f1b6				   ContinueAccelerateTest
    487  f1b6		       a5 0c		      LDA	INPT4	;3
    488  f1b8		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    489  f1ba		       a9 10		      LDA	#%00010000	;UP in controller
    490  f1bc		       2c 80 02 	      BIT	SWCHA
    491  f1bf		       d0 33		      BNE	SkipAccelerate
    492  f1c1
    493  f1c1				   IncreaseCarSpeed
    494  f1c1		       a2 02		      LDX	#2
    495  f1c3		       a4 a9		      LDY	CurrentCarId
    496  f1c5				   IncreaseCarSpeedLoop
    497  f1c5							;Adds speed
    498  f1c5		       18		      CLC
    499  f1c6		       a5 aa		      LDA	AccelerateBuffer
    500  f1c8		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    501  f1cb		       85 aa		      STA	AccelerateBuffer
    502  f1cd		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    503  f1cf		       e6 8e		      INC	Player0SpeedL
    504  f1d1		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    505  f1d3		       e6 8f		      INC	Player0SpeedH
    506  f1d5				   ContinueIncreaseSpeedLoop
    507  f1d5		       ca		      DEX
    508  f1d6		       d0 ed		      BNE	IncreaseCarSpeedLoop
    509  f1d8				   SkipIncreaseCarSpeed
    510  f1d8
    511  f1d8				   CheckIfAlreadyMaxSpeed
    512  f1d8		       a5 8f		      LDA	Player0SpeedH
    513  f1da		       c9 02		      CMP	#CAR_MAX_SPEED_H
    514  f1dc		       90 16		      BCC	SkipAccelerate	; less than my max speed
    515  f1de		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    516  f1e0							;High bit is max, compare the low
    517  f1e0		       a4 a9		      LDY	CurrentCarId
    518  f1e2		       a5 8e		      LDA	Player0SpeedL
    519  f1e4		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    520  f1e7		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    521  f1e9							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    522  f1e9
    523  f1e9				   ResetToMaxSpeed		; Speed is more, or is already max
    524  f1e9		       a9 02		      LDA	#CAR_MAX_SPEED_H
    525  f1eb		       85 8f		      STA	Player0SpeedH
    526  f1ed		       a4 a9		      LDY	CurrentCarId
    527  f1ef		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    528  f1f2		       85 8e		      STA	Player0SpeedL
    529  f1f4				   SkipAccelerate
    530  f1f4
    531  f1f4				   InitUpdateOffsets
    532  f1f4		       a2 00		      LDX	#0	; Memory Offset 24 bit
    533  f1f6		       a0 00		      LDY	#0	; Line Speeds 16 bits
    534  f1f8		       a5 91		      LDA	TrafficOffset0 + 1	;
    535  f1fa		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    536  f1fc		       a5 c5		      LDA	GameMode
    537  f1fe		       29 04		      AND	#%00000100	; GameModes with high delta
    538  f200		       f0 02		      BEQ	UpdateOffsets
    539  f202		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    540  f204
    541  f204				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    542  f204		       38		      SEC
    543  f205		       a5 8e		      LDA	Player0SpeedL
    544  f207		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    545  f20a		       85 b0		      STA	Tmp0
    546  f20c		       c8		      INY
    547  f20d		       a5 8f		      LDA	Player0SpeedH
    548  f20f		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    549  f212		       85 b1		      STA	Tmp1
    550  f214		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    551  f216		       e9 00		      SBC	#0
    552  f218		       85 b2		      STA	Tmp2
    553  f21a
    554  f21a				   AddsTheResult
    555  f21a		       18		      CLC
    556  f21b		       a5 b0		      LDA	Tmp0
    557  f21d		       75 90		      ADC	TrafficOffset0,X
    558  f21f		       95 90		      STA	TrafficOffset0,X
    559  f221		       e8		      INX
    560  f222		       a5 b1		      LDA	Tmp1
    561  f224		       75 90		      ADC	TrafficOffset0,X
    562  f226		       95 90		      STA	TrafficOffset0,X
    563  f228		       e8		      INX
    564  f229		       a5 b2		      LDA	Tmp2	; Carry
    565  f22b		       75 90		      ADC	TrafficOffset0,X
    566  f22d		       95 90		      STA	TrafficOffset0,X
    567  f22f		       90 06		      BCC	CalculateOffsetCache
    568  f231		       e0 02		      CPX	#2	;MSB offset 0
    569  f233		       d0 02		      BNE	CalculateOffsetCache
    570  f235		       e6 bb		      INC	Traffic0Msb
    571  f237
    572  f237				   CalculateOffsetCache
    573  f237		       e8		      INX
    574  f238		       38		      SEC
    575  f239		       69 00		      ADC	#0	;Increment by one
    576  f23b		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    577  f23d
    578  f23d				   ConfigureOpponentLine		; Temporary
    579  f23d		       a9 1e		      LDA	#30	; Extract to constant
    580  f23f		       85 d8		      STA	OpponentLine
    581  f241
    582  f241				   PrepareNextUpdateLoop
    583  f241		       c8		      INY
    584  f242		       e8		      INX
    585  f243		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    586  f245		       d0 bd		      BNE	UpdateOffsets
    587  f247
    588  f247				   BcdScore		; 48
    589  f247		       a5 91		      LDA	TrafficOffset0 + 1	;3
    590  f249		       45 b3		      EOR	Tmp3	;3
    591  f24b		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    592  f24d		       f0 1b		      BEQ	FinishBcdScore	;2
    593  f24f
    594  f24f				   ContinueBcdScore
    595  f24f		       f8		      SED		;2
    596  f250		       18		      CLC		;2
    597  f251		       a5 b4		      LDA	ScoreBcd0	;3
    598  f253		       69 01		      ADC	#1	;2
    599  f255		       85 b4		      STA	ScoreBcd0	;3
    600  f257		       a5 b5		      LDA	ScoreBcd1	;3
    601  f259		       69 00		      ADC	#0	;2
    602  f25b		       85 b5		      STA	ScoreBcd1	;3
    603  f25d		       a5 b6		      LDA	ScoreBcd2	;3
    604  f25f		       69 00		      ADC	#0	;2
    605  f261		       85 b6		      STA	ScoreBcd2	;3
    606  f263		       a5 b7		      LDA	ScoreBcd3	;3
    607  f265		       69 00		      ADC	#0	;2
    608  f267		       85 b7		      STA	ScoreBcd3	;3
    609  f269		       d8		      CLD		;2
    610  f26a				   FinishBcdScore
    611  f26a
    612  f26a							;Until store the movemnt, LDX contains the value to be stored.
    613  f26a				   TestCollision		;
    614  f26a							; see if player0 colides with the rest
    615  f26a		       a5 00		      LDA	CXM0P
    616  f26c		       05 01		      ORA	CXM1P
    617  f26e		       05 01		      ORA	CXM1P
    618  f270		       05 02		      ORA	CXP0FB
    619  f272		       05 07		      ORA	CXPPMM
    620  f274		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    621  f276		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    622  f278		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    623  f27a		       d0 3a		      BNE	NoCollision
    624  f27c		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    625  f27e		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    626  f280		       f0 34		      BEQ	NoCollision
    627  f282		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    628  f284		       f0 30		      BEQ	NoCollision
    629  f286		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    630  f288		       85 b8		      STA	CollisionCounter	;and store as colision.
    631  f28a				   CountBcdColision
    632  f28a		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    633  f28c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    634  f28e		       f0 1d		      BEQ	SkipSetColisionSpeedL
    635  f290		       f8		      SED		;2
    636  f291		       18		      CLC		;2
    637  f292		       a5 cb		      LDA	HitCountBcd0	;3
    638  f294		       69 01		      ADC	#1	;3
    639  f296		       85 cb		      STA	HitCountBcd0	;3
    640  f298		       a5 cc		      LDA	HitCountBcd1	;3
    641  f29a		       69 00		      ADC	#0	;2
    642  f29c		       85 cc		      STA	HitCountBcd1	;3
    643  f29e		       d8		      CLD		;2
    644  f29f				   EndCountBcdColision
    645  f29f		       a5 8f		      LDA	Player0SpeedH
    646  f2a1		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    647  f2a3		       a9 10		      LDA	#COLLISION_SPEED_L
    648  f2a5		       c5 8e		      CMP	Player0SpeedL
    649  f2a7		       b0 04		      BCS	SkipSetColisionSpeedL
    650  f2a9				   SetColisionSpeedL
    651  f2a9		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    652  f2ab		       85 8e		      STA	Player0SpeedL
    653  f2ad				   SkipSetColisionSpeedL
    654  f2ad		       a9 00		      LDA	#0
    655  f2af		       85 8f		      STA	Player0SpeedH
    656  f2b1		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    657  f2b3		       4c 01 f3 	      JMP	StoreHMove	; We keep position consistent
    658  f2b6				   NoCollision
    659  f2b6
    660  f2b6				   DecrementCollision
    661  f2b6		       a4 b8		      LDY	CollisionCounter
    662  f2b8		       f0 07		      BEQ	FinishDecrementCollision
    663  f2ba		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    664  f2bc		       85 04		      STA	NUSIZ0
    665  f2be		       88		      DEY
    666  f2bf		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    667  f2c1				   FinishDecrementCollision
    668  f2c1
    669  f2c1				   ResetPlayerSize
    670  f2c1		       d0 04		      BNE	FinishResetPlayerSize
    671  f2c3		       a9 30		      LDA	#%00110000
    672  f2c5		       85 04		      STA	NUSIZ0	;
    673  f2c7				   FinishResetPlayerSize
    674  f2c7
    675  f2c7				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    676  f2c7		       c0 01		      CPY	#1	; Last frame before reset
    677  f2c9		       d0 05		      BNE	SkipResetPlayerPosition
    678  f2cb		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    679  f2cd		       4c 01 f3 	      JMP	StoreHMove
    680  f2d0				   SkipResetPlayerPosition
    681  f2d0
    682  f2d0				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    683  f2d0		       a5 a9		      LDA	CurrentCarId
    684  f2d2		       c9 03		      CMP	#CAR_ID_DRAGSTER
    685  f2d4		       d0 08		      BNE	PrepareReadXAxis
    686  f2d6		       a2 00		      LDX	#0
    687  f2d8		       a5 8c		      LDA	FrameCount0
    688  f2da		       29 01		      AND	#DRAGSTER_TURN_MASK
    689  f2dc		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    690  f2de
    691  f2de							; for left and right, we're gonna 
    692  f2de							; set the horizontal speed, and then do
    693  f2de							; a single HMOVE.  We'll use X to hold the
    694  f2de							; horizontal speed, then store it in the 
    695  f2de							; appropriate register
    696  f2de				   PrepareReadXAxis
    697  f2de		       a2 00		      LDX	#0
    698  f2e0		       a4 b9		      LDY	Player0X
    699  f2e2				   BeginReadLeft
    700  f2e2		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    701  f2e4		       a9 40		      LDA	#%01000000	;Left
    702  f2e6		       2c 80 02 	      BIT	SWCHA
    703  f2e9		       d0 07		      BNE	SkipMoveLeft
    704  f2eb		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    705  f2ed		       c6 b9		      DEC	Player0X
    706  f2ef		       4c 01 f3 	      JMP	StoreHMove	; Cannot move left and right...
    707  f2f2				   SkipMoveLeft
    708  f2f2				   BeginReadRight
    709  f2f2		       c0 36		      CPY	#PLAYER_0_MAX_X
    710  f2f4		       f0 0b		      BEQ	SkipMoveRight	; At max already
    711  f2f6		       a9 80		      LDA	#%10000000	;Right
    712  f2f8		       2c 80 02 	      BIT	SWCHA
    713  f2fb		       d0 04		      BNE	SkipMoveRight
    714  f2fd		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    715  f2ff		       e6 b9		      INC	Player0X
    716  f301				   SkipMoveRight
    717  f301				   StoreHMove
    718  f301		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    719  f303		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    720  f305
    721  f305				   SkipUpdateLogic		; Continue here if not paused
    722  f305
    723  f305				   CalculateGear
    724  f305		       a5 8e		      LDA	Player0SpeedL	;3
    725  f307		       29 80		      AND	#%10000000	;2
    726  f309		       05 8f		      ORA	Player0SpeedH	;3
    727  f30b		       18		      CLC		;2
    728  f30c		       2a		      ROL		;2
    729  f30d		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    730  f30f		       85 ad		      STA	Gear
    731  f311
    732  f311				   EndProcessingBorder
    733  f311
    734  f311				   ProcessScoreFontColor
    735  f311		       a6 d6		      LDX	ScoreFontColorHoldChange
    736  f313		       f0 06		      BEQ	ResetScoreFontColor
    737  f315		       ca		      DEX
    738  f316		       86 d6		      STX	ScoreFontColorHoldChange
    739  f318		       4c 1f f3 	      JMP	SkipScoreFontColor
    740  f31b				   ResetScoreFontColor
    741  f31b		       a9 f9		      LDA	#SCORE_FONT_COLOR
    742  f31d		       85 d5		      STA	ScoreFontColor
    743  f31f				   SkipScoreFontColor
    744  f31f
    745  f31f				   IsGameOver
    746  f31f		       a5 ba		      LDA	CountdownTimer
    747  f321		       05 8e		      ORA	Player0SpeedL
    748  f323		       05 8f		      ORA	Player0SpeedH
    749  f325		       d0 0b		      BNE	IsCheckpoint
    750  f327		       a9 01		      LDA	#1
    751  f329		       85 d6		      STA	ScoreFontColorHoldChange
    752  f32b		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    753  f32d		       85 d5		      STA	ScoreFontColor
    754  f32f		       4c 73 f3 	      JMP	SkipIsTimeOver
    755  f332
    756  f332				   IsCheckpoint
    757  f332		       a5 d7		      LDA	NextCheckpoint
    758  f334		       c5 92		      CMP	TrafficOffset0 + 2
    759  f336		       d0 2f		      BNE	SkipIsCheckpoint
    760  f338		       18		      CLC
    761  f339		       69 10		      ADC	#CHECKPOINT_INTERVAL
    762  f33b		       85 d7		      STA	NextCheckpoint
    763  f33d		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    764  f33f		       85 d5		      STA	ScoreFontColor
    765  f341		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    766  f343		       85 d6		      STA	ScoreFontColorHoldChange
    767  f345				   AddCheckpointBcd
    768  f345		       f8		      SED		;2
    769  f346		       18		      CLC		;2
    770  f347		       a5 a4		      LDA	CheckpointBcd0	;3
    771  f349		       69 01		      ADC	#1	;3
    772  f34b		       85 a4		      STA	CheckpointBcd0	;3
    773  f34d		       a5 a5		      LDA	CheckpointBcd1	;3
    774  f34f		       69 00		      ADC	#0	;2
    775  f351		       85 a5		      STA	CheckpointBcd1	;3
    776  f353		       d8		      CLD		;2
    777  f354				   EndCheckpointBcd
    778  f354		       a5 ba		      LDA	CountdownTimer
    779  f356		       18		      CLC
    780  f357		       65 c2		      ADC	CheckpointTime
    781  f359		       85 ba		      STA	CountdownTimer
    782  f35b		       90 04		      BCC	JumpSkipTimeOver
    783  f35d		       a9 ff		      LDA	#$FF
    784  f35f		       85 ba		      STA	CountdownTimer	; Does not overflow!
    785  f361				   JumpSkipTimeOver
    786  f361		       20 32 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    787  f364		       4c 73 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    788  f367				   SkipIsCheckpoint
    789  f367
    790  f367				   IsTimeOver
    791  f367		       a5 ba		      LDA	CountdownTimer
    792  f369		       d0 08		      BNE	SkipIsTimeOver
    793  f36b		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    794  f36d		       85 d6		      STA	ScoreFontColorHoldChange
    795  f36f		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    796  f371		       85 d5		      STA	ScoreFontColor
    797  f373				   SkipIsTimeOver
    798  f373
    799  f373				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
    800  f373		       a5 c0		      LDA	GameStatus	;3
    801  f375		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
    802  f377		       a5 d5		      LDA	ScoreFontColor	;3
    803  f379		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
    804  f37b		       f0 30		      BEQ	EndExactlyEverySecond	;2
    805  f37d		       c6 cf		      DEC	OneSecondConter	;5
    806  f37f		       d0 2c		      BNE	EndExactlyEverySecond	;2
    807  f381
    808  f381		       f8		      SED		;2 BCD Operations after this point
    809  f382				   CountGlideTimeBcd
    810  f382		       a5 d5		      LDA	ScoreFontColor	;3
    811  f384		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
    812  f386		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
    813  f388		       18		      CLC		;2
    814  f389		       a5 cd		      LDA	GlideTimeBcd0	;3
    815  f38b		       69 01		      ADC	#1	;3
    816  f38d		       85 cd		      STA	GlideTimeBcd0	;3
    817  f38f		       a5 ce		      LDA	GlideTimeBcd1	;3
    818  f391		       69 00		      ADC	#0	;2
    819  f393		       85 ce		      STA	GlideTimeBcd1	;3
    820  f395				   EndCountGlideTimeBcd
    821  f395				   IncreaseTotalTimerBcd
    822  f395		       18		      CLC		;2
    823  f396		       a5 bd		      LDA	TimeBcd0	;3
    824  f398		       69 01		      ADC	#1	;2
    825  f39a		       85 bd		      STA	TimeBcd0	;3
    826  f39c		       a5 be		      LDA	TimeBcd1	;3
    827  f39e		       69 00		      ADC	#0	;2
    828  f3a0		       85 be		      STA	TimeBcd1	;3
    829  f3a2		       a5 bf		      LDA	TimeBcd2	;3
    830  f3a4		       69 00		      ADC	#0	;2
    831  f3a6		       85 bf		      STA	TimeBcd2	;3
    832  f3a8
    833  f3a8				   ResetOneSecondCounter
    834  f3a8		       d8		      CLD		;2
    835  f3a9		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
    836  f3ab		       85 cf		      STA	OneSecondConter	;3
    837  f3ad
    838  f3ad				   EndExactlyEverySecond
    839  f3ad
    840  f3ad				   PrintEasterEggCondition
    841  f3ad		       a5 8d		      LDA	FrameCount1
    842  f3af		       29 38		      AND	#%00111000
    843  f3b1		       05 c0		      ORA	GameStatus
    844  f3b3		       c9 38		      CMP	#%00111000
    845  f3b5		       d0 06		      BNE	ChooseTextSide
    846  f3b7		       20 9d f7 	      JSR	PrintEasterEgg
    847  f3ba		       4c ac f4 	      JMP	RightScoreWriteEnd
    848  f3bd
    849  f3bd							;Could be done during on vblank to save this comparisson time (before draw score), 
    850  f3bd							;but I am saving vblank cycles for now, in case of 2 players.
    851  f3bd				   ChooseTextSide		; 
    852  f3bd		       a5 ab		      LDA	TextSide	;3
    853  f3bf		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    854  f3c1		       4c 42 f4 	      JMP	RightScoreWrite
    855  f3c4
    856  f3c4				   LeftScoreWrite
    857  f3c4		       a5 d5		      LDA	ScoreFontColor
    858  f3c6		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    859  f3c8		       f0 4e		      BEQ	PrintCheckpoint
    860  f3ca		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    861  f3cc		       f0 52		      BEQ	PrintStartGame
    862  f3ce		       a5 c0		      LDA	GameStatus
    863  f3d0		       f0 56		      BEQ	PrintHellwayLeft
    864  f3d2				   WriteDistance		;Not optimized yet, ugly code.
    865  f3d2				   Digit0Distance
    866  f3d2		       a5 91		      LDA	TrafficOffset0 + 1	;3
    867  f3d4		       4a		      LSR		; 2
    868  f3d5		       4a		      LSR		; 2
    869  f3d6		       4a		      LSR		; 2
    870  f3d7		       4a		      LSR		; 2
    871  f3d8		       aa		      TAX		; 2
    872  f3d9		       bd be fd 	      LDA	FontLookup,X	;4
    873  f3dc		       85 d3		      STA	ScoreD3	;3
    874  f3de
    875  f3de				   Digit1Distance
    876  f3de		       a5 92		      LDA	TrafficOffset0 + 2	;3
    877  f3e0		       29 0f		      AND	#%00001111	;2
    878  f3e2		       aa		      TAX		; 2
    879  f3e3		       bd be fd 	      LDA	FontLookup,X	;4 
    880  f3e6		       85 d2		      STA	ScoreD2	;3
    881  f3e8
    882  f3e8				   Digit2Distance
    883  f3e8		       a5 92		      LDA	TrafficOffset0 + 2	;3
    884  f3ea		       4a		      LSR		; 2
    885  f3eb		       4a		      LSR		; 2
    886  f3ec		       4a		      LSR		; 2
    887  f3ed		       4a		      LSR		; 2
    888  f3ee		       aa		      TAX		; 2
    889  f3ef		       bd be fd 	      LDA	FontLookup,X	;4
    890  f3f2		       85 d1		      STA	ScoreD1	;3
    891  f3f4
    892  f3f4				   Digit3Distance
    893  f3f4		       a5 bb		      LDA	Traffic0Msb	;3
    894  f3f6		       29 0f		      AND	#%00001111	;2
    895  f3f8		       aa		      TAX		; 2
    896  f3f9		       bd be fd 	      LDA	FontLookup,X	;4 
    897  f3fc		       85 d0		      STA	ScoreD0	;3
    898  f3fe
    899  f3fe				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    900  f3fe		       a5 bb		      LDA	Traffic0Msb
    901  f400		       29 f0		      AND	#%11110000	;2
    902  f402		       d0 07		      BNE	DrawDistanceExtraDigit
    903  f404		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    904  f406		       85 d4		      STA	ScoreD4	;3
    905  f408		       4c 15 f4 	      JMP	EndDrawDistance
    906  f40b				   DrawDistanceExtraDigit
    907  f40b		       4a		      LSR		; 2
    908  f40c		       4a		      LSR		; 2
    909  f40d		       4a		      LSR		; 2
    910  f40e		       4a		      LSR		; 2
    911  f40f		       aa		      TAX		; 2
    912  f410		       bd be fd 	      LDA	FontLookup,X	;4
    913  f413		       85 d4		      STA	ScoreD4	;3
    914  f415
    915  f415				   EndDrawDistance
    916  f415		       4c ac f4 	      JMP	RightScoreWriteEnd	;3
    917  f418
    918  f418				   PrintCheckpoint
    919  f418		       a2 00		      LDX	#<CheckpointText
    920  f41a		       20 7f f7 	      JSR	PrintStaticText
    921  f41d		       4c ac f4 	      JMP	RightScoreWriteEnd	;3
    922  f420				   PrintStartGame
    923  f420		       a2 23		      LDX	#<GoText
    924  f422		       20 7f f7 	      JSR	PrintStaticText
    925  f425		       4c ac f4 	      JMP	RightScoreWriteEnd	;3
    926  f428
    927  f428				   PrintHellwayLeft
    928  f428		       a5 8d		      LDA	FrameCount1
    929  f42a		       29 01		      AND	#1
    930  f42c		       d0 05		      BNE	PrintCreditsLeft
    931  f42e		       a2 05		      LDX	#<HellwayLeftText
    932  f430		       4c 35 f4 	      JMP	PrintGameMode
    933  f433				   PrintCreditsLeft
    934  f433		       a2 0f		      LDX	#<OpbText
    935  f435
    936  f435				   PrintGameMode
    937  f435		       20 7f f7 	      JSR	PrintStaticText
    938  f438		       a6 c5		      LDX	GameMode
    939  f43a		       bd be fd 	      LDA	FontLookup,X	;4 
    940  f43d		       85 d0		      STA	ScoreD0	;3
    941  f43f		       4c ac f4 	      JMP	RightScoreWriteEnd	;3
    942  f442
    943  f442				   RightScoreWrite
    944  f442		       a5 c0		      LDA	GameStatus
    945  f444		       f0 45		      BEQ	PrintHellwayRight
    946  f446		       a5 d5		      LDA	ScoreFontColor
    947  f448		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    948  f44a		       f0 52		      BEQ	PrintGameOver
    949  f44c				   Digit0Timer
    950  f44c		       a5 ba		      LDA	CountdownTimer	;3
    951  f44e		       29 0f		      AND	#%00001111	;2
    952  f450		       aa		      TAX		; 2
    953  f451		       bd be fd 	      LDA	FontLookup,X	;4 
    954  f454		       85 d1		      STA	ScoreD1	;3
    955  f456
    956  f456				   Digit1Timer
    957  f456		       a5 ba		      LDA	CountdownTimer	;3
    958  f458		       4a		      LSR		; 2
    959  f459		       4a		      LSR		; 2
    960  f45a		       4a		      LSR		; 2
    961  f45b		       4a		      LSR		; 2
    962  f45c		       aa		      TAX		; 2
    963  f45d		       bd be fd 	      LDA	FontLookup,X	;4
    964  f460		       85 d0		      STA	ScoreD0	;3
    965  f462
    966  f462		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    967  f464		       85 d2		      STA	ScoreD2	;3
    968  f466
    969  f466				   Digit0Speed
    970  f466		       a5 8e		      LDA	Player0SpeedL
    971  f468		       29 3c		      AND	#%00111100	;2 Discard the last bits
    972  f46a		       4a		      LSR		; 2
    973  f46b		       4a		      LSR		; 2
    974  f46c		       aa		      TAX		; 2
    975  f46d		       bd be fd 	      LDA	FontLookup,X	;4
    976  f470		       85 d4		      STA	ScoreD4	;3
    977  f472
    978  f472				   Digit1Speed
    979  f472		       a5 8e		      LDA	Player0SpeedL
    980  f474		       29 c0		      AND	#%11000000	;2 Discard the last bits
    981  f476		       18		      CLC
    982  f477		       2a		      ROL		;First goes into carry
    983  f478		       2a		      ROL
    984  f479		       2a		      ROL
    985  f47a		       85 b0		      STA	Tmp0
    986  f47c		       a5 8f		      LDA	Player0SpeedH
    987  f47e		       0a		      ASL
    988  f47f		       0a		      ASL
    989  f480		       05 b0		      ORA	Tmp0
    990  f482		       aa		      TAX		; 2
    991  f483		       bd be fd 	      LDA	FontLookup,X	;4
    992  f486		       85 d3		      STA	ScoreD3	;3
    993  f488		       4c ac f4 	      JMP	RightScoreWriteEnd
    994  f48b
    995  f48b				   PrintHellwayRight
    996  f48b		       a5 8d		      LDA	FrameCount1
    997  f48d		       29 01		      AND	#1
    998  f48f		       d0 05		      BNE	PrintCreditsRight
    999  f491		       a2 0a		      LDX	#<HellwayRightText
   1000  f493		       4c 98 f4 	      JMP	PrintRightIntro
   1001  f496				   PrintCreditsRight
   1002  f496		       a2 14		      LDX	#<YearText
   1003  f498				   PrintRightIntro
   1004  f498		       20 7f f7 	      JSR	PrintStaticText
   1005  f49b		       4c ac f4 	      JMP	RightScoreWriteEnd
   1006  f49e				   PrintGameOver
   1007  f49e		       a5 8c		      LDA	FrameCount0
   1008  f4a0		       30 05		      BMI	PrintOverText
   1009  f4a2		       a2 19		      LDX	#<GameText
   1010  f4a4		       4c a9 f4 	      JMP	StoreGameOverText
   1011  f4a7				   PrintOverText
   1012  f4a7		       a2 1e		      LDX	#<OverText
   1013  f4a9				   StoreGameOverText
   1014  f4a9		       20 7f f7 	      JSR	PrintStaticText
   1015  f4ac				   RightScoreWriteEnd
   1016  f4ac
   1017  f4ac
   1018  f4ac				   ScoreBackgroundColor
   1019  f4ac		       a2 00		      LDX	#0
   1020  f4ae		       ad 82 02 	      LDA	SWCHB
   1021  f4b1		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1022  f4b3		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1023  f4b5		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1024  f4b7		       a2 03		      LDX	#BACKGROUND_COLOR
   1025  f4b9				   BlackAndWhiteScoreBg
   1026  f4b9		       85 b2		      STA	Tmp2	; Score Background
   1027  f4bb		       86 b3		      STX	Tmp3	; Traffic Background
   1028  f4bd
   1029  f4bd				   ConfigurePFForScore
   1030  f4bd							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1031  f4bd		       85 09		      STA	COLUBK
   1032  f4bf		       20 f4 f6 	      JSR	ClearAll
   1033  f4c2		       a9 02		      LDA	#%00000010	; Score mode
   1034  f4c4		       85 0a		      STA	CTRLPF
   1035  f4c6		       a5 ab		      LDA	TextSide	;3
   1036  f4c8		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1037  f4ca				   LeftScoreOn
   1038  f4ca		       a5 d5		      LDA	ScoreFontColor
   1039  f4cc		       85 07		      STA	COLUP1
   1040  f4ce		       a5 b2		      LDA	Tmp2
   1041  f4d0		       85 06		      STA	COLUP0
   1042  f4d2		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1043  f4d4		       85 b1		      STA	Tmp1
   1044  f4d6		       4c e5 f4 	      JMP	CallWaitForVblankEnd
   1045  f4d9				   RightScoreOn
   1046  f4d9		       a5 d5		      LDA	ScoreFontColor
   1047  f4db		       85 06		      STA	COLUP0
   1048  f4dd		       a5 b2		      LDA	Tmp2
   1049  f4df		       85 07		      STA	COLUP1
   1050  f4e1		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1051  f4e3		       85 b1		      STA	Tmp1
   1052  f4e5
   1053  f4e5							; After here we are going to update the screen, No more heavy code
   1054  f4e5				   CallWaitForVblankEnd
   1055  f4e5		       20 0d fa 	      JSR	WaitForVblankEnd
   1056  f4e8
   1057  f4e8				   DrawScoreHud
   1058  f4e8		       20 0f f8 	      JSR	PrintScore
   1059  f4eb
   1060  f4eb		       85 02		      STA	WSYNC
   1061  f4ed
   1062  f4ed		       a5 0c		      LDA	INPT4	;3
   1063  f4ef		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1064  f4f1		       a5 d5		      LDA	ScoreFontColor
   1065  f4f3		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1066  f4f5		       d0 0a		      BNE	WaitAnotherScoreLine
   1067  f4f7		       a5 ab		      LDA	TextSide	;3
   1068  f4f9		       d0 03		      BNE	LeftScoreOnGameOver
   1069  f4fb		       4c 9a f9 	      JMP	DrawGameOverScreenRight
   1070  f4fe				   LeftScoreOnGameOver
   1071  f4fe		       4c cc f8 	      JMP	DrawGameOverScreenLeft
   1072  f501
   1073  f501				   WaitAnotherScoreLine
   1074  f501		       85 02		      STA	WSYNC
   1075  f503
   1076  f503				   PrepareForTraffic
   1077  f503		       20 06 f7 	      JSR	ClearPF	; 32
   1078  f506
   1079  f506		       85 02		      STA	WSYNC
   1080  f508		       85 02		      STA	WSYNC
   1081  f50a
   1082  f50a		       a9 31		      LDA	#%00110001	; 2 Score mode
   1083  f50c		       85 0a		      STA	CTRLPF	;3
   1084  f50e
   1085  f50e		       a5 c3		      LDA	TrafficColor	;3
   1086  f510		       85 08		      STA	COLUPF	;3
   1087  f512
   1088  f512		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1089  f514		       85 07		      STA	COLUP1	;3
   1090  f516
   1091  f516		       a5 d5		      LDA	ScoreFontColor	;3
   1092  f518		       85 06		      STA	COLUP0	;3
   1093  f51a
   1094  f51a		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1095  f51c
   1096  f51c		       20 06 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1097  f51f
      0  f51f					      SLEEP	14
      1  f51f				   .CYCLES    SET	14
      2  f51f
      3  f51f				  -	      IF	.CYCLES < 2
      4  f51f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f51f				  -	      ERR
      6  f51f					      ENDIF
      7  f51f
      8  f51f				  -	      IF	.CYCLES & 1
      9  f51f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f51f				  -	      nop	0
     11  f51f				  -	      ELSE
     12  f51f				  -	      bit	VSYNC
     13  f51f				  -	      ENDIF
     14  f51f				  -.CYCLES    SET	.CYCLES - 3
     15  f51f					      ENDIF
     16  f51f
     17  f51f					      REPEAT	.CYCLES / 2
     18  f51f		       ea		      nop
     17  f51f					      REPEND
     18  f520		       ea		      nop
     17  f520					      REPEND
     18  f521		       ea		      nop
     17  f521					      REPEND
     18  f522		       ea		      nop
     17  f522					      REPEND
     18  f523		       ea		      nop
     17  f523					      REPEND
     18  f524		       ea		      nop
     17  f524					      REPEND
     18  f525		       ea		      nop
     19  f526					      REPEND
   1099  f526
   1100  f526		       a5 b3		      LDA	Tmp3	;3
   1101  f528		       85 09		      STA	COLUBK	;3
   1102  f52a		       4c 2f f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1103  f52d							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1104  f52d
   1105  f52d							;main scanline loop...
   1106  f52d				   ScanLoop
   1107  f52d		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1108  f52f
   1109  f52f							;Start of next line!			
   1110  f52f				   DrawCache		;63 Is the last line going to the top of the next frame?
   1111  f52f		       a5 81		      LDA	PF0Cache	;3
   1112  f531		       85 0d		      STA	PF0	;3
   1113  f533
   1114  f533		       a5 83		      LDA	PF2Cache	;3
   1115  f535		       85 0f		      STA	PF2	;3
   1116  f537
   1117  f537		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1118  f539		       b0 04		      BCS	SkipDrawCar	;2
   1119  f53b		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1120  f53d		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1121  f53f				   SkipDrawCar
   1122  f53f
   1123  f53f		       a5 84		      LDA	GRP1Cache	;3
   1124  f541		       85 1c		      STA	GRP1	;3
   1125  f543
   1126  f543		       a5 85		      LDA	ENABLCache	;3
   1127  f545		       85 1f		      STA	ENABL	;3
   1128  f547
   1129  f547		       a5 86		      LDA	ENAM0Cache	;3
   1130  f549		       85 1d		      STA	ENAM0	;3
   1131  f54b
   1132  f54b		       a5 87		      LDA	ENAM1Cache	;3
   1133  f54d		       85 1e		      STA	ENAM1	;3
   1134  f54f
   1135  f54f		       a9 00		      LDA	#0	;2
   1136  f551							;STA PF1Cache ;3
   1137  f551		       85 84		      STA	GRP1Cache	;3
   1138  f553		       85 85		      STA	ENABLCache	;3
   1139  f555		       85 86		      STA	ENAM0Cache	;3
   1140  f557		       85 87		      STA	ENAM1Cache	; 3
   1141  f559
   1142  f559				   DrawOponent
   1143  f559		       84 b0		      STY	Tmp0
   1144  f55b		       a4 d8		      LDY	OpponentLine
   1145  f55d		       c0 0e		      CPY	#CAR_START_LINE	;3
   1146  f55f		       b0 04		      BCS	SkipDrawOpponent
   1147  f561				   DrawOpponent
   1148  f561		       b1 a7		      LDA	(CarSpritePointerL),Y
   1149  f563		       85 84		      STA	GRP1Cache
   1150  f565				   SkipDrawOpponent
   1151  f565		       c6 d8		      DEC	OpponentLine
   1152  f567		       a4 b0		      LDY	Tmp0
   1153  f569
   1154  f569							;BEQ DrawTraffic3
   1155  f569							; DrawTraffic1; 33
   1156  f569							;	TYA; 2
   1157  f569							;	CLC; 2 
   1158  f569							;	ADC TrafficOffset1 + 1;3
   1159  f569							;	AND #TRAFFIC_1_MASK ;2 ;#%11111000
   1160  f569							;	BCS EorOffsetWithCarry; 2(worse not to jump), 4 if branch
   1161  f569							;	EOR TrafficOffset1 + 2 ; 3
   1162  f569							;	JMP AfterEorOffsetWithCarry ; 3
   1163  f569							; EorOffsetWithCarry
   1164  f569							;	EOR TrafficOffset1 + 3 ; 3
   1165  f569							; AfterEorOffsetWithCarry ;17
   1166  f569							;	TAX ;2
   1167  f569							;	LDA AesTable,X ; 4
   1168  f569							;	CMP TrafficChance;3
   1169  f569							;	BCS FinishDrawTraffic1 ; 2
   1170  f569							;	LDA #$FF ;2
   1171  f569							;	STA GRP1Cache ;3
   1172  f569							; FinishDrawTraffic1
   1173  f569
   1174  f569				   DrawTraffic2 		; 33
   1175  f569		       98		      TYA		; 2
   1176  f56a		       18		      CLC		; 2 
   1177  f56b		       65 99		      ADC	TrafficOffset2 + 1	;3
   1178  f56d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1179  f56f		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1180  f571		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1181  f573		       4c 78 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1182  f576				   EorOffsetWithCarry2
   1183  f576		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1184  f578				   AfterEorOffsetWithCarry2		;17
   1185  f578		       aa		      TAX		;2
   1186  f579		       bd 00 fe 	      LDA	AesTable,X	; 4
   1187  f57c		       c5 c1		      CMP	TrafficChance	;3
   1188  f57e		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1189  f580		       a9 02		      LDA	#%00000010	;2
   1190  f582		       85 85		      STA	ENABLCache	;3
   1191  f584				   FinishDrawTraffic2
   1192  f584
   1193  f584							;STA WSYNC ;65 / 137
   1194  f584
   1195  f584							; LDA Tmp0 ; Flicker this line if drawing car
   1196  f584							; BEQ FinishDrawTraffic4
   1197  f584				   DrawTraffic3 		; 33
   1198  f584		       98		      TYA		; 2
   1199  f585		       18		      CLC		; 2 
   1200  f586		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1201  f588		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1202  f58a		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1203  f58c		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1204  f58e		       4c 93 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1205  f591				   EorOffsetWithCarry3
   1206  f591		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1207  f593				   AfterEorOffsetWithCarry3		;17
   1208  f593		       aa		      TAX		;2
   1209  f594		       bd 00 fe 	      LDA	AesTable,X	; 4
   1210  f597		       c5 c1		      CMP	TrafficChance	;3
   1211  f599		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1212  f59b		       a9 02		      LDA	#%00000010	;2
   1213  f59d		       85 86		      STA	ENAM0Cache
   1214  f59f				   FinishDrawTraffic3
   1215  f59f
   1216  f59f				   DrawTraffic4 		; 33
   1217  f59f		       98		      TYA		; 2
   1218  f5a0		       18		      CLC		; 2 
   1219  f5a1		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1220  f5a3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1221  f5a5		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1222  f5a7		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1223  f5a9		       4c ae f5 	      JMP	AfterEorOffsetWithCarry4	; 3
   1224  f5ac				   EorOffsetWithCarry4
   1225  f5ac		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1226  f5ae				   AfterEorOffsetWithCarry4		;17
   1227  f5ae		       aa		      TAX		;2
   1228  f5af		       bd 00 fe 	      LDA	AesTable,X	; 4
   1229  f5b2		       c5 c1		      CMP	TrafficChance	;3
   1230  f5b4		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1231  f5b6		       a9 02		      LDA	#%00000010	;2
   1232  f5b8		       85 87		      STA	ENAM1Cache	;3
   1233  f5ba				   FinishDrawTraffic4
   1234  f5ba
   1235  f5ba				   DrawTraffic0 		; 21 2pe
   1236  f5ba		       98		      TYA		; 2
   1237  f5bb		       18		      CLC		; 2 
   1238  f5bc		       65 91		      ADC	TrafficOffset0 + 1	;3
   1239  f5be		       29 04		      AND	#%00000100	;2
   1240  f5c0		       f0 05		      BEQ	HasNoBorderP0	;3
   1241  f5c2				   HasBorderP0
   1242  f5c2		       a9 f0		      LDA	#$F0	; 2
   1243  f5c4		       4c c9 f5 	      JMP	StoreBorderP0	; 3
   1244  f5c7				   HasNoBorderP0
   1245  f5c7		       a9 00		      LDA	#0	; 2
   1246  f5c9				   StoreBorderP0
   1247  f5c9		       85 81		      STA	PF0Cache	; 3
   1248  f5cb							;STA PF2Cache ; 3
   1249  f5cb
   1250  f5cb
   1251  f5cb				   SkipDrawTraffic0
   1252  f5cb
   1253  f5cb				   WhileScanLoop
   1254  f5cb		       88		      DEY		;2
   1255  f5cc		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1256  f5ce		       4c 2d f5 	      JMP	ScanLoop	;3
   1257  f5d1				   FinishScanLoop		; 7 209 of 222
   1258  f5d1
   1259  f5d1		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1260  f5d3		       20 15 f7 	      JSR	LoadAll
   1261  f5d6		       85 02		      STA	WSYNC	; do stuff!
   1262  f5d8		       85 02		      STA	WSYNC
   1263  f5da		       85 02		      STA	WSYNC
   1264  f5dc							;42 cycles to use here
   1265  f5dc
   1266  f5dc				   PrepareOverscan
   1267  f5dc		       a9 02		      LDA	#2
   1268  f5de		       85 02		      STA	WSYNC
   1269  f5e0		       85 01		      STA	VBLANK
   1270  f5e2
   1271  f5e2		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1272  f5e4		       8d 96 02 	      STA	TIM64T
   1273  f5e7
   1274  f5e7				   LeftSound		;41
   1275  f5e7		       a5 ba		      LDA	CountdownTimer	;3
   1276  f5e9		       f0 1b		      BEQ	EngineOff	;2
   1277  f5eb		       a6 ad		      LDX	Gear
   1278  f5ed		       a5 8e		      LDA	Player0SpeedL	;3
   1279  f5ef		       4a		      LSR		;2
   1280  f5f0		       4a		      LSR		;2
   1281  f5f1		       4a		      LSR		;2
   1282  f5f2		       29 0f		      AND	#%00001111	;2
   1283  f5f4		       85 b0		      STA	Tmp0	;3
   1284  f5f6		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1285  f5f9		       38		      SEC		;2
   1286  f5fa		       e5 b0		      SBC	Tmp0	;3
   1287  f5fc		       85 17		      STA	AUDF0	;3
   1288  f5fe		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1289  f601		       85 15		      STA	AUDC0	;3
   1290  f603		       4c 0a f6 	      JMP	EndLeftSound	;3
   1291  f606				   EngineOff
   1292  f606		       a9 00		      LDA	#0
   1293  f608		       85 15		      STA	AUDC0
   1294  f60a
   1295  f60a				   EndLeftSound
   1296  f60a
   1297  f60a
   1298  f60a				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1299  f60a		       a5 d5		      LDA	ScoreFontColor	;3
   1300  f60c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1301  f60e		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1302  f610		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1303  f612		       f0 29		      BEQ	PlayCheckpoint	;2
   1304  f614		       a5 b8		      LDA	CollisionCounter	;3
   1305  f616		       c9 e0		      CMP	#$E0	;2
   1306  f618		       b0 14		      BCS	PlayColision	;2
   1307  f61a		       a5 d7		      LDA	NextCheckpoint	;3
   1308  f61c		       38		      SEC		;2
   1309  f61d		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1310  f61f		       c9 02		      CMP	#$02	;2
   1311  f621		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1312  f623		       a5 ba		      LDA	CountdownTimer	; 3
   1313  f625		       f0 53		      BEQ	MuteRightSound	;2
   1314  f627		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1315  f629		       90 37		      BCC	PlayWarnTimeEnding	;4
   1316  f62b		       4c 7a f6 	      JMP	MuteRightSound	;3
   1317  f62e				   PlayColision
   1318  f62e		       a9 1f		      LDA	#31
   1319  f630		       85 18		      STA	AUDF1
   1320  f632		       a9 08		      LDA	#8
   1321  f634		       85 16		      STA	AUDC1
   1322  f636		       a9 08		      LDA	#8
   1323  f638		       85 1a		      STA	AUDV1
   1324  f63a		       4c 7e f6 	      JMP	EndRightSound
   1325  f63d
   1326  f63d				   PlayCheckpoint
   1327  f63d		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1328  f63f		       4a		      LSR		;2
   1329  f640		       4a		      LSR		;2
   1330  f641		       4a		      LSR		;2
   1331  f642		       85 18		      STA	AUDF1	;3
   1332  f644		       a9 0c		      LDA	#12	;2
   1333  f646		       85 16		      STA	AUDC1	;3
   1334  f648		       a9 06		      LDA	#6	;2
   1335  f64a		       85 1a		      STA	AUDV1	;3
   1336  f64c		       4c 7e f6 	      JMP	EndRightSound	;3
   1337  f64f
   1338  f64f				   PlayBeforeCheckpoint
   1339  f64f		       a5 8c		      LDA	FrameCount0	;3
   1340  f651		       29 1c		      AND	#%00011100	;2
   1341  f653		       09 03		      ORA	#%00000011	;2
   1342  f655		       85 18		      STA	AUDF1	;3
   1343  f657		       a9 0c		      LDA	#12	;2
   1344  f659		       85 16		      STA	AUDC1	;3
   1345  f65b		       a9 03		      LDA	#3	;2
   1346  f65d		       85 1a		      STA	AUDV1	;3
   1347  f65f		       4c 7e f6 	      JMP	EndRightSound	;3
   1348  f662
   1349  f662				   PlayWarnTimeEnding
   1350  f662		       a5 8c		      LDA	FrameCount0	;3
   1351  f664		       29 04		      AND	#%00000100	;2
   1352  f666		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1353  f668		       18		      CLC		;2
   1354  f669		       a9 0a		      LDA	#10	;2
   1355  f66b		       65 ba		      ADC	CountdownTimer	;2
   1356  f66d		       85 18		      STA	AUDF1	;3
   1357  f66f		       a9 0c		      LDA	#12	;2
   1358  f671		       85 16		      STA	AUDC1	;3
   1359  f673		       a9 03		      LDA	#3	;2
   1360  f675		       85 1a		      STA	AUDV1	;3
   1361  f677		       4c 7e f6 	      JMP	EndRightSound	;3
   1362  f67a
   1363  f67a				   MuteRightSound
   1364  f67a		       a9 00		      LDA	#0
   1365  f67c		       85 1a		      STA	AUDV1
   1366  f67e				   EndRightSound
   1367  f67e
   1368  f67e							;Read Fire Button before, will make it start the game for now.
   1369  f67e				   StartGame
   1370  f67e		       a5 0c		      LDA	INPT4	;3
   1371  f680		       30 2b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1372  f682		       a5 c0		      LDA	GameStatus	;3
   1373  f684		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1374  f686		       d0 25		      BNE	SkipGameStart
   1375  f688		       a5 c5		      LDA	GameMode
   1376  f68a		       c9 10		      CMP	#MAX_GAME_MODE
   1377  f68c		       d0 0b		      BNE	SetGameRunning
   1378  f68e		       a9 00		      LDA	#0
   1379  f690		       85 c5		      STA	GameMode
   1380  f692		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1381  f694		       85 bc		      STA	SwitchDebounceCounter
   1382  f696		       4c ad f6 	      JMP	SkipGameStart
   1383  f699				   SetGameRunning
   1384  f699		       e6 c0		      INC	GameStatus
   1385  f69b		       a9 00		      LDA	#0	;
   1386  f69d		       85 8c		      STA	FrameCount0
   1387  f69f		       85 8d		      STA	FrameCount1
   1388  f6a1		       a9 0a		      LDA	#10
   1389  f6a3		       85 19		      STA	AUDV0
   1390  f6a5		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1391  f6a7		       85 d5		      STA	ScoreFontColor
   1392  f6a9		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1393  f6ab		       85 d6		      STA	ScoreFontColorHoldChange
   1394  f6ad				   SkipGameStart
   1395  f6ad
   1396  f6ad				   ReadSwitches
   1397  f6ad		       a6 bc		      LDX	SwitchDebounceCounter
   1398  f6af		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1399  f6b1		       a9 01		      LDA	#%00000001
   1400  f6b3		       2c 82 02 	      BIT	SWCHB
   1401  f6b6		       d0 07		      BNE	SkipReset
   1402  f6b8		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1403  f6ba		       85 bc		      STA	SwitchDebounceCounter
   1404  f6bc		       4c ec f6 	      JMP	OverScanWaitBeforeReset
   1405  f6bf				   SkipReset
   1406  f6bf
   1407  f6bf				   GameModeSelect
   1408  f6bf		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1409  f6c1		       d0 1c		      BNE	SkipGameSelect
   1410  f6c3		       20 41 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1411  f6c6				   ContinueGameSelect
   1412  f6c6		       a9 02		      LDA	#%00000010
   1413  f6c8		       2c 82 02 	      BIT	SWCHB
   1414  f6cb		       d0 12		      BNE	SkipGameSelect
   1415  f6cd		       a6 c5		      LDX	GameMode
   1416  f6cf		       e0 10		      CPX	#MAX_GAME_MODE
   1417  f6d1		       f0 04		      BEQ	ResetGameMode
   1418  f6d3		       e8		      INX
   1419  f6d4		       4c d9 f6 	      JMP	StoreGameMode
   1420  f6d7				   ResetGameMode
   1421  f6d7		       a2 00		      LDX	#0
   1422  f6d9				   StoreGameMode
   1423  f6d9		       86 c5		      STX	GameMode
   1424  f6db		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1425  f6dd		       85 bc		      STA	SwitchDebounceCounter
   1426  f6df				   SkipGameSelect
   1427  f6df		       4c e4 f6 	      JMP	EndReadSwitches
   1428  f6e2				   DecrementSwitchDebounceCounter
   1429  f6e2		       c6 bc		      DEC	SwitchDebounceCounter
   1430  f6e4				   EndReadSwitches
   1431  f6e4
   1432  f6e4				   OverScanWait
   1433  f6e4		       ad 84 02 	      LDA	INTIM
   1434  f6e7		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1435  f6e9		       4c c7 f0 	      JMP	MainLoop
   1436  f6ec
   1437  f6ec				   OverScanWaitBeforeReset
   1438  f6ec		       ad 84 02 	      LDA	INTIM
   1439  f6ef		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1440  f6f1		       4c 10 f0 	      JMP	Start
   1441  f6f4
   1442  f6f4				   Subroutines
   1443  f6f4
   1444  f6f4				   ClearAll		; 52
   1445  f6f4		       a9 00		      LDA	#0	;2
   1446  f6f6		       85 1c		      STA	GRP1	;3
   1447  f6f8		       85 1f		      STA	ENABL	;3
   1448  f6fa		       85 1d		      STA	ENAM0	;3
   1449  f6fc		       85 1e		      STA	ENAM1	;3
   1450  f6fe		       85 84		      STA	GRP1Cache	;3
   1451  f700		       85 85		      STA	ENABLCache	;3
   1452  f702		       85 86		      STA	ENAM0Cache	;3
   1453  f704		       85 87		      STA	ENAM1Cache	;3
   1454  f706
   1455  f706				   ClearPF		; 26
   1456  f706		       a9 00		      LDA	#0	;2
   1457  f708				   ClearPFSkipLDA0
   1458  f708		       85 0d		      STA	PF0	;3
   1459  f70a		       85 0e		      STA	PF1	;3
   1460  f70c		       85 0f		      STA	PF2	;3	
   1461  f70e		       85 81		      STA	PF0Cache	;3
   1462  f710		       85 82		      STA	PF1Cache	;3
   1463  f712		       85 83		      STA	PF2Cache	;3 
   1464  f714		       60		      RTS		;6
   1465  f715				   EndClearAll
   1466  f715
   1467  f715				   LoadAll		; 48
   1468  f715		       a5 81		      LDA	PF0Cache	;3
   1469  f717		       85 0d		      STA	PF0	;3
   1470  f719
   1471  f719		       a5 82		      LDA	PF1Cache	;3
   1472  f71b		       85 0e		      STA	PF1	;3
   1473  f71d
   1474  f71d		       a5 83		      LDA	PF2Cache	;3
   1475  f71f		       85 0f		      STA	PF2	;3
   1476  f721
   1477  f721		       a5 84		      LDA	GRP1Cache	;3
   1478  f723		       85 1c		      STA	GRP1	;3
   1479  f725
   1480  f725		       a5 85		      LDA	ENABLCache	;3
   1481  f727		       85 1f		      STA	ENABL	;3
   1482  f729
   1483  f729		       a5 86		      LDA	ENAM0Cache	;3
   1484  f72b		       85 1d		      STA	ENAM0	;3
   1485  f72d
   1486  f72d		       a5 87		      LDA	ENAM1Cache	;3
   1487  f72f		       85 1e		      STA	ENAM1	;3
   1488  f731
   1489  f731		       60		      RTS		;6
   1490  f732				   EndLoadAll
   1491  f732
   1492  f732				   NextDifficulty
   1493  f732		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1494  f734		       29 01		      AND	#%00000001
   1495  f736		       d0 24		      BNE	CheckRandomDifficulty
   1496  f738
   1497  f738		       a5 c4		      LDA	CurrentDifficulty
   1498  f73a		       18		      CLC
   1499  f73b		       69 01		      ADC	#1
   1500  f73d		       29 03		      AND	#%00000011	; 0 to 3
   1501  f73f		       85 c4		      STA	CurrentDifficulty
   1502  f741
   1503  f741				   ConfigureDifficulty
   1504  f741		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1505  f743		       b9 e7 ff 	      LDA	TrafficChanceTable,Y
   1506  f746		       85 c1		      STA	TrafficChance
   1507  f748		       b9 e3 ff 	      LDA	TrafficColorTable,Y
   1508  f74b		       85 c3		      STA	TrafficColor
   1509  f74d
   1510  f74d		       a5 c5		      LDA	GameMode	;
   1511  f74f		       29 01		      AND	#%00000001
   1512  f751		       f0 03		      BEQ	UseNextDifficultyTime
   1513  f753		       4c 57 f7 	      JMP	StoreDifficultyTime
   1514  f756				   UseNextDifficultyTime
   1515  f756		       c8		      INY
   1516  f757				   StoreDifficultyTime
   1517  f757		       b9 eb ff 	      LDA	TrafficTimeTable,Y
   1518  f75a		       85 c2		      STA	CheckpointTime
   1519  f75c
   1520  f75c				   CheckRandomDifficulty
   1521  f75c		       a5 c5		      LDA	GameMode
   1522  f75e		       29 08		      AND	#%00001000	; Random difficulties
   1523  f760		       f0 09		      BEQ	ReturnFromNextDifficulty
   1524  f762				   RandomDifficulty
   1525  f762		       a6 8c		      LDX	FrameCount0
   1526  f764		       bd 00 fe 	      LDA	AesTable,X
   1527  f767							;EOR TrafficChance, no need, lets make life simple
   1528  f767		       29 3f		      AND	#%00111111
   1529  f769		       85 c1		      STA	TrafficChance
   1530  f76b
   1531  f76b				   ReturnFromNextDifficulty
   1532  f76b		       60		      RTS
   1533  f76c				   EndNextDifficulty
   1534  f76c
   1535  f76c				   DefaultOffsets
   1536  f76c		       a9 20		      LDA	#$20
   1537  f76e		       85 96		      STA	TrafficOffset1 + 2
   1538  f770		       a9 40		      LDA	#$40
   1539  f772		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1540  f774		       a9 60		      LDA	#$60
   1541  f776		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1542  f778		       a9 80		      LDA	#$80
   1543  f77a		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1544  f77c		       a9 a0		      LDA	#$A0
   1545  f77e		       60		      RTS
   1546  f77f
   1547  f77f				   PrintStaticText		; Preload X with the offset referent to StaticText
   1548  f77f		       bd 00 ff 	      LDA	StaticText,X
   1549  f782		       85 d0		      STA	ScoreD0
   1550  f784		       e8		      INX
   1551  f785		       bd 00 ff 	      LDA	StaticText,X
   1552  f788		       85 d1		      STA	ScoreD1
   1553  f78a		       e8		      INX
   1554  f78b		       bd 00 ff 	      LDA	StaticText,X
   1555  f78e		       85 d2		      STA	ScoreD2
   1556  f790		       e8		      INX
   1557  f791		       bd 00 ff 	      LDA	StaticText,X
   1558  f794		       85 d3		      STA	ScoreD3
   1559  f796		       e8		      INX
   1560  f797		       bd 00 ff 	      LDA	StaticText,X
   1561  f79a		       85 d4		      STA	ScoreD4
   1562  f79c		       60		      RTS
   1563  f79d
   1564  f79d				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1565  f79d		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1566  f79f		       85 d5		      STA	ScoreFontColor
   1567  f7a1		       a9 01		      LDA	#1
   1568  f7a3		       85 d6		      STA	ScoreFontColorHoldChange
   1569  f7a5
   1570  f7a5		       a5 8d		      LDA	FrameCount1
   1571  f7a7		       29 07		      AND	#%00000111
   1572  f7a9		       85 b3		      STA	Tmp3
   1573  f7ab							;0 is Zelda Name, (default)
   1574  f7ab		       a9 01		      LDA	#1
   1575  f7ad		       c5 b3		      CMP	Tmp3
   1576  f7af		       f0 38		      BEQ	PrintZeldaDateLeft
   1577  f7b1
   1578  f7b1		       a9 02		      LDA	#2
   1579  f7b3		       c5 b3		      CMP	Tmp3
   1580  f7b5		       f0 23		      BEQ	PrintPolvinhosLeft
   1581  f7b7
   1582  f7b7		       a9 03		      LDA	#3
   1583  f7b9		       c5 b3		      CMP	Tmp3
   1584  f7bb		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1585  f7bd
   1586  f7bd		       a9 04		      LDA	#4
   1587  f7bf		       c5 b3		      CMP	Tmp3
   1588  f7c1		       f0 1c		      BEQ	PrintIvonneLeft
   1589  f7c3
   1590  f7c3		       a9 05		      LDA	#5
   1591  f7c5		       c5 b3		      CMP	Tmp3
   1592  f7c7		       f0 2a		      BEQ	PrintIvonneDateLeft
   1593  f7c9
   1594  f7c9		       a9 06		      LDA	#6
   1595  f7cb		       c5 b3		      CMP	Tmp3
   1596  f7cd		       f0 15		      BEQ	PrintArtLeft
   1597  f7cf
   1598  f7cf		       a9 07		      LDA	#7
   1599  f7d1		       c5 b3		      CMP	Tmp3
   1600  f7d3		       f0 23		      BEQ	PrintLeonardoLeft
   1601  f7d5
   1602  f7d5				   PrintZeldaLeft
   1603  f7d5		       a2 28		      LDX	#<ZeldaTextLeft
   1604  f7d7		       4c fd f7 	      JMP	ProcessPrintEasterEgg
   1605  f7da				   PrintPolvinhosLeft
   1606  f7da		       a2 3c		      LDX	#<PolvinhosTextLeft
   1607  f7dc		       4c fd f7 	      JMP	ProcessPrintEasterEgg
   1608  f7df				   PrintIvonneLeft
   1609  f7df		       a2 50		      LDX	#<IvonneTextLeft
   1610  f7e1		       4c fd f7 	      JMP	ProcessPrintEasterEgg
   1611  f7e4				   PrintArtLeft
   1612  f7e4		       a2 64		      LDX	#<PaperArtTextLeft
   1613  f7e6		       4c fd f7 	      JMP	ProcessPrintEasterEgg
   1614  f7e9
   1615  f7e9				   PrintZeldaDateLeft
   1616  f7e9		       a2 32		      LDX	#<ZeldaDateLeft
   1617  f7eb		       4c fd f7 	      JMP	ProcessPrintEasterEgg
   1618  f7ee				   PrintPolvinhosDateLeft
   1619  f7ee		       a2 46		      LDX	#<PolvinhosDateLeft
   1620  f7f0		       4c fd f7 	      JMP	ProcessPrintEasterEgg
   1621  f7f3				   PrintIvonneDateLeft
   1622  f7f3		       a2 5a		      LDX	#<IvonneDateLeft
   1623  f7f5		       4c fd f7 	      JMP	ProcessPrintEasterEgg
   1624  f7f8				   PrintLeonardoLeft
   1625  f7f8		       a2 6e		      LDX	#<LeonardoTextLeft
   1626  f7fa		       4c fd f7 	      JMP	ProcessPrintEasterEgg
   1627  f7fd
   1628  f7fd				   ProcessPrintEasterEgg
   1629  f7fd		       a5 8c		      LDA	FrameCount0	;3
   1630  f7ff		       29 01		      AND	#%00000001	;2
   1631  f801		       d0 03		      BNE	TranformIntoRightText
   1632  f803		       4c 0b f8 	      JMP	PrintEasterEggText
   1633  f806				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1634  f806		       8a		      TXA
   1635  f807		       18		      CLC
   1636  f808		       69 05		      ADC	#HALF_TEXT_SIZE
   1637  f80a		       aa		      TAX
   1638  f80b
   1639  f80b				   PrintEasterEggText
   1640  f80b		       20 7f f7 	      JSR	PrintStaticText
   1641  f80e		       60		      RTS
   1642  f80f
   1643  f80f				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1644  f80f		       a2 00		      LDX	#0
   1645  f811		       a0 04		      LDY	#FONT_OFFSET
   1646  f813
   1647  f813				   ScoreLoop		; 20 
   1648  f813		       85 02		      STA	WSYNC	;2
   1649  f815
   1650  f815		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1651  f817		       85 0d		      STA	PF0	;3
   1652  f819
   1653  f819		       a5 82		      LDA	PF1Cache	;3
   1654  f81b		       85 0e		      STA	PF1	;3
   1655  f81d
   1656  f81d		       a5 83		      LDA	PF2Cache	;3
   1657  f81f		       85 0f		      STA	PF2	;3
   1658  f821
   1659  f821				   DrawScoreD0		; 15
   1660  f821		       a6 d0		      LDX	ScoreD0	; 3
   1661  f823		       bd 00 fd 	      LDA	Font,X	;4
   1662  f826		       85 81		      STA	PF0Cache	;3
   1663  f828		       c6 d0		      DEC	ScoreD0	;5
   1664  f82a
   1665  f82a				   DrawScoreD1		; 23	
   1666  f82a		       a6 d1		      LDX	ScoreD1	; 3
   1667  f82c		       bd 00 fd 	      LDA	Font,X	;4
   1668  f82f		       0a		      ASL		;2
   1669  f830		       0a		      ASL		;2
   1670  f831		       0a		      ASL		;2
   1671  f832		       0a		      ASL		;2
   1672  f833		       85 82		      STA	PF1Cache	;3
   1673  f835		       c6 d1		      DEC	ScoreD1	;5
   1674  f837
   1675  f837				   DrawScoreD2		; 20
   1676  f837		       a6 d2		      LDX	ScoreD2	; 3
   1677  f839		       bd 00 fd 	      LDA	Font,X	;4
   1678  f83c		       29 0f		      AND	#%00001111	;2
   1679  f83e		       05 82		      ORA	PF1Cache	;3
   1680  f840		       85 82		      STA	PF1Cache	;3
   1681  f842		       c6 d2		      DEC	ScoreD2	;5
   1682  f844
   1683  f844				   DrawScoreD3		; 23
   1684  f844		       a6 d3		      LDX	ScoreD3	; 3
   1685  f846		       bd 00 fd 	      LDA	Font,X	;4
   1686  f849		       4a		      LSR		;2
   1687  f84a		       4a		      LSR		;2
   1688  f84b		       4a		      LSR		;2
   1689  f84c		       4a		      LSR		;2
   1690  f84d		       85 83		      STA	PF2Cache	;3
   1691  f84f		       c6 d3		      DEC	ScoreD3	;5
   1692  f851
   1693  f851				   DrawScoreD4		; 20
   1694  f851		       a6 d4		      LDX	ScoreD4	; 3
   1695  f853		       bd 00 fd 	      LDA	Font,X	;4
   1696  f856		       29 f0		      AND	#%11110000	;2
   1697  f858		       05 83		      ORA	PF2Cache	;3
   1698  f85a		       85 83		      STA	PF2Cache	;3
   1699  f85c		       c6 d4		      DEC	ScoreD4	;5
   1700  f85e
   1701  f85e
   1702  f85e		       88		      DEY		;2
   1703  f85f		       10 b2		      BPL	ScoreLoop	;4
   1704  f861
   1705  f861		       85 02		      STA	WSYNC
   1706  f863		       20 15 f7 	      JSR	LoadAll
   1707  f866		       60		      RTS		; 6
   1708  f867
   1709  f867				   PrintRightDecimalDigits
   1710  f867		       b9 00 00 	      LDA	0,Y
   1711  f86a		       4a		      LSR
   1712  f86b		       4a		      LSR
   1713  f86c		       4a		      LSR
   1714  f86d		       4a		      LSR
   1715  f86e		       aa		      TAX
   1716  f86f		       bd be fd 	      LDA	FontLookup,X	;4
   1717  f872		       85 d2		      STA	ScoreD2	;3
   1718  f874
   1719  f874		       b9 00 00 	      LDA	0,Y
   1720  f877		       29 0f		      AND	#%00001111
   1721  f879		       aa		      TAX
   1722  f87a		       bd be fd 	      LDA	FontLookup,X	;4
   1723  f87d		       85 d3		      STA	ScoreD3	;3
   1724  f87f
   1725  f87f		       c8		      INY
   1726  f880		       b9 00 00 	      LDA	0,Y
   1727  f883		       4a		      LSR
   1728  f884		       4a		      LSR
   1729  f885		       4a		      LSR
   1730  f886		       4a		      LSR
   1731  f887		       aa		      TAX
   1732  f888		       bd be fd 	      LDA	FontLookup,X	;4
   1733  f88b		       85 d0		      STA	ScoreD0	;3
   1734  f88d
   1735  f88d		       b9 00 00 	      LDA	0,Y
   1736  f890		       29 0f		      AND	#%00001111
   1737  f892		       aa		      TAX
   1738  f893		       bd be fd 	      LDA	FontLookup,X	;4
   1739  f896		       85 d1		      STA	ScoreD1	;3
   1740  f898
   1741  f898		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1742  f89a		       85 d4		      STA	ScoreD4
   1743  f89c		       60		      RTS
   1744  f89d
   1745  f89d				   PrintLastLeftDecimalDigits
   1746  f89d		       b9 00 00 	      LDA	0,Y
   1747  f8a0		       4a		      LSR
   1748  f8a1		       4a		      LSR
   1749  f8a2		       4a		      LSR
   1750  f8a3		       4a		      LSR
   1751  f8a4		       aa		      TAX
   1752  f8a5		       bd be fd 	      LDA	FontLookup,X	;4
   1753  f8a8		       85 d3		      STA	ScoreD3	;3
   1754  f8aa		       b9 00 00 	      LDA	0,Y
   1755  f8ad		       29 0f		      AND	#%00001111
   1756  f8af		       aa		      TAX
   1757  f8b0		       bd be fd 	      LDA	FontLookup,X	;4
   1758  f8b3		       85 d4		      STA	ScoreD4	;3
   1759  f8b5		       60		      RTS
   1760  f8b6
   1761  f8b6				   PrintZerosLeft
   1762  f8b6		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1763  f8b8		       85 d2		      STA	ScoreD2
   1764  f8ba		       85 d3		      STA	ScoreD3
   1765  f8bc		       85 d4		      STA	ScoreD4
   1766  f8be		       60		      RTS
   1767  f8bf
   1768  f8bf				   DrawGameOverScoreLine
   1769  f8bf		       85 02		      STA	WSYNC
   1770  f8c1		       20 0f f8 	      JSR	PrintScore
   1771  f8c4		       85 02		      STA	WSYNC
   1772  f8c6		       85 02		      STA	WSYNC
   1773  f8c8		       20 06 f7 	      JSR	ClearPF
   1774  f8cb		       60		      RTS
   1775  f8cc
   1776  f8cc				   DrawGameOverScreenLeft
   1777  f8cc		       85 02		      STA	WSYNC
   1778  f8ce		       20 06 f7 	      JSR	ClearPF
   1779  f8d1
   1780  f8d1				   DrawBcdScoreLeft
   1781  f8d1		       20 20 fa 	      JSR	Sleep8Lines
   1782  f8d4		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1783  f8d6		       85 06		      STA	COLUP0
   1784  f8d8		       85 02		      STA	WSYNC
   1785  f8da		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1786  f8dc		       85 d0		      STA	ScoreD0
   1787  f8de
   1788  f8de		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1789  f8e0		       85 d1		      STA	ScoreD1
   1790  f8e2
   1791  f8e2		       a5 b7		      LDA	ScoreBcd3
   1792  f8e4		       29 0f		      AND	#%00001111
   1793  f8e6		       aa		      TAX
   1794  f8e7		       bd be fd 	      LDA	FontLookup,X	;4
   1795  f8ea		       85 d2		      STA	ScoreD2	;3
   1796  f8ec
   1797  f8ec		       a0 b6		      LDY	#ScoreBcd2
   1798  f8ee		       20 9d f8 	      JSR	PrintLastLeftDecimalDigits
   1799  f8f1
   1800  f8f1		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1801  f8f4
   1802  f8f4				   DrawTimerLeft
   1803  f8f4		       20 20 fa 	      JSR	Sleep8Lines
   1804  f8f7		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1805  f8f9		       85 06		      STA	COLUP0
   1806  f8fb		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1807  f8fd		       85 d0		      STA	ScoreD0
   1808  f8ff		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1809  f901		       85 d1		      STA	ScoreD1
   1810  f903		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1811  f905		       85 d2		      STA	ScoreD2
   1812  f907		       a0 bf		      LDY	#TimeBcd2
   1813  f909		       85 02		      STA	WSYNC
   1814  f90b		       20 9d f8 	      JSR	PrintLastLeftDecimalDigits
   1815  f90e		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1816  f911
   1817  f911				   DrawGlideTimerLeft
   1818  f911		       20 20 fa 	      JSR	Sleep8Lines
   1819  f914		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1820  f916		       85 06		      STA	COLUP0
   1821  f918		       85 02		      STA	WSYNC
   1822  f91a		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1823  f91c		       85 d0		      STA	ScoreD0
   1824  f91e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1825  f920		       85 d1		      STA	ScoreD1
   1826  f922		       20 b6 f8 	      JSR	PrintZerosLeft
   1827  f925		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1828  f928
   1829  f928				   DrawHitCountLeft
   1830  f928		       20 20 fa 	      JSR	Sleep8Lines
   1831  f92b		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1832  f92d		       85 06		      STA	COLUP0
   1833  f92f		       85 02		      STA	WSYNC
   1834  f931		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1835  f933		       85 d0		      STA	ScoreD0
   1836  f935		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1837  f937		       85 d1		      STA	ScoreD1
   1838  f939		       20 b6 f8 	      JSR	PrintZerosLeft
   1839  f93c		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1840  f93f
   1841  f93f				   DrawCheckpointCountLeft
   1842  f93f		       20 20 fa 	      JSR	Sleep8Lines
   1843  f942		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1844  f944		       85 06		      STA	COLUP0
   1845  f946		       85 02		      STA	WSYNC
   1846  f948		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1847  f94a		       85 d0		      STA	ScoreD0
   1848  f94c		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1849  f94e		       85 d1		      STA	ScoreD1
   1850  f950		       20 b6 f8 	      JSR	PrintZerosLeft
   1851  f953		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1852  f956
   1853  f956				   DrawGameVersionLeft
   1854  f956		       20 20 fa 	      JSR	Sleep8Lines
   1855  f959		       a9 49		      LDA	#VERSION_COLOR
   1856  f95b		       85 06		      STA	COLUP0
   1857  f95d
   1858  f95d		       a5 c5		      LDA	GameMode
   1859  f95f		       aa		      TAX
   1860  f960		       bd be fd 	      LDA	FontLookup,X	;4
   1861  f963		       85 d0		      STA	ScoreD0	;3
   1862  f965
   1863  f965		       a5 a9		      LDA	CurrentCarId
   1864  f967		       aa		      TAX
   1865  f968		       bd be fd 	      LDA	FontLookup,X	;4
   1866  f96b		       85 d1		      STA	ScoreD1	;3
   1867  f96d
   1868  f96d		       a5 a6		      LDA	StartSWCHB
   1869  f96f		       29 40		      AND	#%01000000	; P0 difficulty
   1870  f971		       49 40		      EOR	#%01000000	; Reverse bytes
   1871  f973		       2a		      ROL
   1872  f974		       2a		      ROL
   1873  f975		       2a		      ROL
   1874  f976		       18		      CLC
   1875  f977		       69 0a		      ADC	#10
   1876  f979		       aa		      TAX
   1877  f97a		       bd be fd 	      LDA	FontLookup,X	;4
   1878  f97d		       85 d2		      STA	ScoreD2	;3
   1879  f97f
   1880  f97f		       a5 a6		      LDA	StartSWCHB
   1881  f981		       29 80		      AND	#%10000000	; P0 difficulty
   1882  f983		       49 80		      EOR	#%10000000	; Reverse bytes
   1883  f985		       2a		      ROL
   1884  f986		       2a		      ROL
   1885  f987		       18		      CLC
   1886  f988		       69 0a		      ADC	#10
   1887  f98a		       aa		      TAX
   1888  f98b		       bd be fd 	      LDA	FontLookup,X	;4
   1889  f98e		       85 d3		      STA	ScoreD3	;3
   1890  f990
   1891  f990		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1892  f992		       85 d4		      STA	ScoreD4
   1893  f994
   1894  f994		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1895  f997
   1896  f997		       4c fd f9 	      JMP	FinalizeDrawGameOver
   1897  f99a
   1898  f99a				   DrawGameOverScreenRight
   1899  f99a		       85 02		      STA	WSYNC
   1900  f99c		       20 06 f7 	      JSR	ClearPF
   1901  f99f
   1902  f99f				   DrawBcdScoreRight
   1903  f99f		       20 20 fa 	      JSR	Sleep8Lines
   1904  f9a2		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1905  f9a4		       85 07		      STA	COLUP1
   1906  f9a6		       85 02		      STA	WSYNC
   1907  f9a8		       a0 b4		      LDY	#ScoreBcd0
   1908  f9aa		       20 67 f8 	      JSR	PrintRightDecimalDigits
   1909  f9ad
   1910  f9ad		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1911  f9b0
   1912  f9b0				   DrawTimerRight
   1913  f9b0		       20 20 fa 	      JSR	Sleep8Lines
   1914  f9b3		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1915  f9b5		       85 07		      STA	COLUP1
   1916  f9b7		       a0 bd		      LDY	#TimeBcd0
   1917  f9b9		       20 67 f8 	      JSR	PrintRightDecimalDigits
   1918  f9bc
   1919  f9bc		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1920  f9bf				   DrawGlideTimeRight
   1921  f9bf		       20 20 fa 	      JSR	Sleep8Lines
   1922  f9c2		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1923  f9c4		       85 07		      STA	COLUP1
   1924  f9c6		       a0 cd		      LDY	#GlideTimeBcd0
   1925  f9c8		       20 67 f8 	      JSR	PrintRightDecimalDigits
   1926  f9cb		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1927  f9ce
   1928  f9ce				   DrawHitCountRight
   1929  f9ce		       20 20 fa 	      JSR	Sleep8Lines
   1930  f9d1		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1931  f9d3		       85 07		      STA	COLUP1
   1932  f9d5		       a0 cb		      LDY	#HitCountBcd0
   1933  f9d7		       20 67 f8 	      JSR	PrintRightDecimalDigits
   1934  f9da		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1935  f9dd
   1936  f9dd				   DrawCheckpointCountRight
   1937  f9dd		       20 20 fa 	      JSR	Sleep8Lines
   1938  f9e0		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1939  f9e2		       85 07		      STA	COLUP1
   1940  f9e4		       a0 a4		      LDY	#CheckpointBcd0
   1941  f9e6		       20 67 f8 	      JSR	PrintRightDecimalDigits
   1942  f9e9		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1943  f9ec
   1944  f9ec				   DrawVersionRight
   1945  f9ec		       20 20 fa 	      JSR	Sleep8Lines
   1946  f9ef		       a9 49		      LDA	#VERSION_COLOR
   1947  f9f1		       85 07		      STA	COLUP1
   1948  f9f3		       85 02		      STA	WSYNC
   1949  f9f5		       a2 78		      LDX	#<VersionText
   1950  f9f7		       20 7f f7 	      JSR	PrintStaticText
   1951  f9fa		       20 bf f8 	      JSR	DrawGameOverScoreLine
   1952  f9fd
   1953  f9fd				   FinalizeDrawGameOver
   1954  f9fd		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1955  f9ff		       85 d5		      STA	ScoreFontColor
   1956  fa01		       20 17 fa 	      JSR	Sleep4Lines
   1957  fa04		       20 27 fa 	      JSR	Sleep32Lines
   1958  fa07		       20 27 fa 	      JSR	Sleep32Lines
   1959  fa0a		       4c dc f5 	      JMP	PrepareOverscan
   1960  fa0d
   1961  fa0d				   WaitForVblankEnd
   1962  fa0d		       ad 84 02 	      LDA	INTIM
   1963  fa10		       d0 fb		      BNE	WaitForVblankEnd
   1964  fa12		       85 02		      STA	WSYNC
   1965  fa14		       85 01		      STA	VBLANK
   1966  fa16		       60		      RTS
   1967  fa17
   1968  fa17				   Sleep4Lines
   1969  fa17		       85 02		      STA	WSYNC
   1970  fa19		       85 02		      STA	WSYNC
   1971  fa1b		       85 02		      STA	WSYNC
   1972  fa1d		       85 02		      STA	WSYNC
   1973  fa1f		       60		      RTS
   1974  fa20
   1975  fa20				   Sleep8Lines
   1976  fa20		       20 17 fa 	      JSR	Sleep4Lines
   1977  fa23		       20 17 fa 	      JSR	Sleep4Lines
   1978  fa26		       60		      RTS
   1979  fa27
   1980  fa27				   Sleep32Lines
   1981  fa27		       20 20 fa 	      JSR	Sleep8Lines
   1982  fa2a		       20 20 fa 	      JSR	Sleep8Lines
   1983  fa2d		       20 20 fa 	      JSR	Sleep8Lines
   1984  fa30		       20 20 fa 	      JSR	Sleep8Lines
   1985  fa33		       60		      RTS
   1986  fa34
   1987  fa34							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   1988  fc00					      org	$FC00
   1989  fc00				   QrCode1
   1990  fc00		       1f		      .byte.b	#%00011111
   1991  fc01		       10		      .byte.b	#%00010000
   1992  fc02		       17		      .byte.b	#%00010111
   1993  fc03		       17		      .byte.b	#%00010111
   1994  fc04		       17		      .byte.b	#%00010111
   1995  fc05		       10		      .byte.b	#%00010000
   1996  fc06		       1f		      .byte.b	#%00011111
   1997  fc07		       00		      .byte.b	#%00000000
   1998  fc08		       17		      .byte.b	#%00010111
   1999  fc09		       10		      .byte.b	#%00010000
   2000  fc0a		       1d		      .byte.b	#%00011101
   2001  fc0b		       16		      .byte.b	#%00010110
   2002  fc0c		       03		      .byte.b	#%00000011
   2003  fc0d		       19		      .byte.b	#%00011001
   2004  fc0e		       13		      .byte.b	#%00010011
   2005  fc0f		       1c		      .byte.b	#%00011100
   2006  fc10		       0b		      .byte.b	#%00001011
   2007  fc11		       00		      .byte.b	#%00000000
   2008  fc12		       1f		      .byte.b	#%00011111
   2009  fc13		       10		      .byte.b	#%00010000
   2010  fc14		       17		      .byte.b	#%00010111
   2011  fc15		       17		      .byte.b	#%00010111
   2012  fc16		       17		      .byte.b	#%00010111
   2013  fc17		       10		      .byte.b	#%00010000
   2014  fc18		       1f		      .byte.b	#%00011111
   2015  fc19
   2016  fc19				   QrCode2
   2017  fc19		       c3		      .byte.b	#%11000011
   2018  fc1a		       9a		      .byte.b	#%10011010
   2019  fc1b		       82		      .byte.b	#%10000010
   2020  fc1c		       da		      .byte.b	#%11011010
   2021  fc1d		       aa		      .byte.b	#%10101010
   2022  fc1e		       ca		      .byte.b	#%11001010
   2023  fc1f		       f3		      .byte.b	#%11110011
   2024  fc20		       78		      .byte.b	#%01111000
   2025  fc21		       df		      .byte.b	#%11011111
   2026  fc22		       fc		      .byte.b	#%11111100
   2027  fc23		       c7		      .byte.b	#%11000111
   2028  fc24		       98		      .byte.b	#%10011000
   2029  fc25		       23		      .byte.b	#%00100011
   2030  fc26		       b9		      .byte.b	#%10111001
   2031  fc27		       d2		      .byte.b	#%11010010
   2032  fc28		       30		      .byte.b	#%00110000
   2033  fc29		       eb		      .byte.b	#%11101011
   2034  fc2a		       28		      .byte.b	#%00101000
   2035  fc2b		       ab		      .byte.b	#%10101011
   2036  fc2c		       72		      .byte.b	#%01110010
   2037  fc2d		       fa		      .byte.b	#%11111010
   2038  fc2e		       7a		      .byte.b	#%01111010
   2039  fc2f		       32		      .byte.b	#%00110010
   2040  fc30		       3a		      .byte.b	#%00111010
   2041  fc31		       63		      .byte.b	#%01100011
   2042  fc32
   2043  fc32				   QrCode3
   2044  fc32		       98		      .byte.b	#%10011000
   2045  fc33		       c3		      .byte.b	#%11000011
   2046  fc34		       39		      .byte.b	#%00111001
   2047  fc35		       34		      .byte.b	#%00110100
   2048  fc36		       ff		      .byte.b	#%11111111
   2049  fc37		       71		      .byte.b	#%01110001
   2050  fc38		       d5		      .byte.b	#%11010101
   2051  fc39		       d1		      .byte.b	#%11010001
   2052  fc3a		       5f		      .byte.b	#%01011111
   2053  fc3b		       26		      .byte.b	#%00100110
   2054  fc3c		       2d		      .byte.b	#%00101101
   2055  fc3d		       e9		      .byte.b	#%11101001
   2056  fc3e		       d6		      .byte.b	#%11010110
   2057  fc3f		       26		      .byte.b	#%00100110
   2058  fc40		       ba		      .byte.b	#%10111010
   2059  fc41		       03		      .byte.b	#%00000011
   2060  fc42		       dd		      .byte.b	#%11011101
   2061  fc43		       e0		      .byte.b	#%11100000
   2062  fc44		       57		      .byte.b	#%01010111
   2063  fc45		       14		      .byte.b	#%00010100
   2064  fc46		       35		      .byte.b	#%00110101
   2065  fc47		       e5		      .byte.b	#%11100101
   2066  fc48		       b5		      .byte.b	#%10110101
   2067  fc49		       d4		      .byte.b	#%11010100
   2068  fc4a		       97		      .byte.b	#%10010111
   2069  fc4b
   2070  fc4b				   QrCode4
   2071  fc4b		       09		      .byte.b	#%00001001
   2072  fc4c		       0e		      .byte.b	#%00001110
   2073  fc4d		       0f		      .byte.b	#%00001111
   2074  fc4e		       0c		      .byte.b	#%00001100
   2075  fc4f		       0c		      .byte.b	#%00001100
   2076  fc50		       08		      .byte.b	#%00001000
   2077  fc51		       08		      .byte.b	#%00001000
   2078  fc52		       06		      .byte.b	#%00000110
   2079  fc53		       06		      .byte.b	#%00000110
   2080  fc54		       0b		      .byte.b	#%00001011
   2081  fc55		       0f		      .byte.b	#%00001111
   2082  fc56		       04		      .byte.b	#%00000100
   2083  fc57		       08		      .byte.b	#%00001000
   2084  fc58		       0f		      .byte.b	#%00001111
   2085  fc59		       09		      .byte.b	#%00001001
   2086  fc5a		       07		      .byte.b	#%00000111
   2087  fc5b		       05		      .byte.b	#%00000101
   2088  fc5c		       00		      .byte.b	#%00000000
   2089  fc5d		       0f		      .byte.b	#%00001111
   2090  fc5e		       08		      .byte.b	#%00001000
   2091  fc5f		       0b		      .byte.b	#%00001011
   2092  fc60		       0b		      .byte.b	#%00001011
   2093  fc61		       0b		      .byte.b	#%00001011
   2094  fc62		       08		      .byte.b	#%00001000
   2095  fc63		       0f		      .byte.b	#%00001111
   2096  fc64
   2097  fc64							; Moved here because of rom space.
   2098  fc64							; The only SBR in constants space
   2099  fc64				   DrawQrCode
   2100  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2101  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2102  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2103  fc6a		       85 0a		      STA	CTRLPF
   2104  fc6c		       20 f4 f6 	      JSR	ClearAll	; To be 100 sure!
   2105  fc6f		       ad 82 02 	      LDA	SWCHB
   2106  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2107  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2108  fc76		       86 09		      STX	COLUBK
   2109  fc78		       84 08		      STY	COLUPF
   2110  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2111  fc7d				   StoreReversedQrCode
   2112  fc7d		       86 08		      STX	COLUPF
   2113  fc7f		       84 09		      STY	COLUBK
   2114  fc81
   2115  fc81				   ContinueQrCode
   2116  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2117  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2118  fc85		       20 0d fa 	      JSR	WaitForVblankEnd
   2119  fc88		       20 20 fa 	      JSR	Sleep8Lines
   2120  fc8b		       20 20 fa 	      JSR	Sleep8Lines
   2121  fc8e		       20 20 fa 	      JSR	Sleep8Lines
   2122  fc91
   2123  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2124  fc91		       85 02		      STA	WSYNC
   2125  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2126  fc96		       85 0e		      STA	PF1	;3
   2127  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2128  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2130  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2131  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2132  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2133  fcb3		       85 0e		      STA	PF1	;3
   2134  fcb5
   2135  fcb5		       ca		      DEX		;2
   2136  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2137  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2138  fcba		       88		      DEY		;2
   2139  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2140  fcbd
   2141  fcbd				   EndQrCodeLoop
   2142  fcbd		       85 02		      STA	WSYNC	;
   2143  fcbf		       a9 00		      LDA	#0
   2144  fcc1		       85 0e		      STA	PF1	;3
   2145  fcc3		       85 0f		      STA	PF2	;3
   2146  fcc5
   2147  fcc5		       20 27 fa 	      JSR	Sleep32Lines
   2148  fcc8		       4c dc f5 	      JMP	PrepareOverscan
   2149  fccb
   2150  fd00					      org	$FD00
   2151  fd00				   Font
   2152  fd00				   C0
   2153  fd00		       e7		      .byte.b	#%11100111	;
   2154  fd01		       a5		      .byte.b	#%10100101	; 
   2155  fd02		       a5		      .byte.b	#%10100101	; 
   2156  fd03		       a5		      .byte.b	#%10100101	; 
   2157  fd04		       e7		      .byte.b	#%11100111	;	
   2158  fd05				   C1
   2159  fd05		       e7		      .byte.b	#%11100111	;
   2160  fd06		       42		      .byte.b	#%01000010	; 
   2161  fd07		       42		      .byte.b	#%01000010	; 
   2162  fd08		       42		      .byte.b	#%01000010	; 
   2163  fd09		       66		      .byte.b	#%01100110	;
   2164  fd0a				   C2
   2165  fd0a		       e7		      .byte.b	#%11100111	;
   2166  fd0b		       24		      .byte.b	#%00100100	; 
   2167  fd0c		       e7		      .byte.b	#%11100111	; 
   2168  fd0d		       81		      .byte.b	#%10000001	; 
   2169  fd0e		       e7		      .byte.b	#%11100111	;
   2170  fd0f				   C3
   2171  fd0f		       e7		      .byte.b	#%11100111	;
   2172  fd10		       81		      .byte.b	#%10000001	; 
   2173  fd11		       e7		      .byte.b	#%11100111	; 
   2174  fd12		       81		      .byte.b	#%10000001	; 
   2175  fd13		       e7		      .byte.b	#%11100111	;
   2176  fd14				   C4
   2177  fd14		       81		      .byte.b	#%10000001	;
   2178  fd15		       81		      .byte.b	#%10000001	; 
   2179  fd16		       e7		      .byte.b	#%11100111	; 
   2180  fd17		       a5		      .byte.b	#%10100101	; 
   2181  fd18		       a5		      .byte.b	#%10100101	;
   2182  fd19				   C5
   2183  fd19		       e7		      .byte.b	#%11100111	;
   2184  fd1a		       81		      .byte.b	#%10000001	; 
   2185  fd1b		       e7		      .byte.b	#%11100111	; 
   2186  fd1c		       24		      .byte.b	#%00100100	; 
   2187  fd1d		       e7		      .byte.b	#%11100111	;
   2188  fd1e				   C6
   2189  fd1e		       e7		      .byte.b	#%11100111	;
   2190  fd1f		       a5		      .byte.b	#%10100101	; 
   2191  fd20		       e7		      .byte.b	#%11100111	; 
   2192  fd21		       24		      .byte.b	#%00100100	; 
   2193  fd22		       e7		      .byte.b	#%11100111	;
   2194  fd23				   C7
   2195  fd23		       81		      .byte.b	#%10000001	;
   2196  fd24		       81		      .byte.b	#%10000001	; 
   2197  fd25		       81		      .byte.b	#%10000001	; 
   2198  fd26		       81		      .byte.b	#%10000001	; 
   2199  fd27		       e7		      .byte.b	#%11100111	;
   2200  fd28				   C8
   2201  fd28		       e7		      .byte.b	#%11100111	;
   2202  fd29		       a5		      .byte.b	#%10100101	; 
   2203  fd2a		       e7		      .byte.b	#%11100111	; 
   2204  fd2b		       a5		      .byte.b	#%10100101	; 
   2205  fd2c		       e7		      .byte.b	#%11100111	;
   2206  fd2d				   C9
   2207  fd2d		       e7		      .byte.b	#%11100111	;
   2208  fd2e		       81		      .byte.b	#%10000001	; 
   2209  fd2f		       e7		      .byte.b	#%11100111	; 
   2210  fd30		       a5		      .byte.b	#%10100101	; 
   2211  fd31		       e7		      .byte.b	#%11100111	;
   2212  fd32				   CA
   2213  fd32		       a5		      .byte.b	#%10100101	;
   2214  fd33		       a5		      .byte.b	#%10100101	; 
   2215  fd34		       e7		      .byte.b	#%11100111	; 
   2216  fd35		       a5		      .byte.b	#%10100101	; 
   2217  fd36		       e7		      .byte.b	#%11100111	;
   2218  fd37				   CB
   2219  fd37		       66		      .byte.b	#%01100110	;
   2220  fd38		       a5		      .byte.b	#%10100101	; 
   2221  fd39		       66		      .byte.b	#%01100110	; 
   2222  fd3a		       a5		      .byte.b	#%10100101	;
   2223  fd3b		       66		      .byte.b	#%01100110	;
   2224  fd3c				   CC
   2225  fd3c		       e7		      .byte.b	#%11100111	;
   2226  fd3d		       24		      .byte.b	#%00100100	; 
   2227  fd3e		       24		      .byte.b	#%00100100	; 
   2228  fd3f		       24		      .byte.b	#%00100100	;
   2229  fd40		       e7		      .byte.b	#%11100111	;
   2230  fd41
   2231  fd41				   CD
   2232  fd41		       66		      .byte.b	#%01100110	;
   2233  fd42		       a5		      .byte.b	#%10100101	; 
   2234  fd43		       a5		      .byte.b	#%10100101	; 
   2235  fd44		       a5		      .byte.b	#%10100101	;
   2236  fd45		       66		      .byte.b	#%01100110	;
   2237  fd46
   2238  fd46				   CE
   2239  fd46		       e7		      .byte.b	#%11100111	;
   2240  fd47		       24		      .byte.b	#%00100100	; 
   2241  fd48		       e7		      .byte.b	#%11100111	; 
   2242  fd49		       24		      .byte.b	#%00100100	; 
   2243  fd4a		       e7		      .byte.b	#%11100111	;
   2244  fd4b
   2245  fd4b				   CF
   2246  fd4b		       24		      .byte.b	#%00100100	;
   2247  fd4c		       24		      .byte.b	#%00100100	; 
   2248  fd4d		       e7		      .byte.b	#%11100111	; 
   2249  fd4e		       24		      .byte.b	#%00100100	; 
   2250  fd4f		       e7		      .byte.b	#%11100111	;
   2251  fd50
   2252  fd50				   CG
   2253  fd50		       c3		      .byte.b	#%11000011	;
   2254  fd51		       a5		      .byte.b	#%10100101	; 
   2255  fd52		       a5		      .byte.b	#%10100101	; 
   2256  fd53		       24		      .byte.b	#%00100100	; 
   2257  fd54		       c3		      .byte.b	#%11000011	;	
   2258  fd55
   2259  fd55				   CH
   2260  fd55		       a5		      .byte.b	#%10100101	;
   2261  fd56		       a5		      .byte.b	#%10100101	; 
   2262  fd57		       e7		      .byte.b	#%11100111	; 
   2263  fd58		       a5		      .byte.b	#%10100101	; 
   2264  fd59		       a5		      .byte.b	#%10100101	;
   2265  fd5a
   2266  fd5a				   CK
   2267  fd5a		       a5		      .byte.b	#%10100101	;
   2268  fd5b		       a5		      .byte.b	#%10100101	; 
   2269  fd5c		       66		      .byte.b	#%01100110	; 
   2270  fd5d		       a5		      .byte.b	#%10100101	; 
   2271  fd5e		       a5		      .byte.b	#%10100101	;
   2272  fd5f
   2273  fd5f				   CL
   2274  fd5f		       e7		      .byte.b	#%11100111	;
   2275  fd60		       24		      .byte.b	#%00100100	; 
   2276  fd61		       24		      .byte.b	#%00100100	; 
   2277  fd62		       24		      .byte.b	#%00100100	; 
   2278  fd63		       24		      .byte.b	#%00100100	;
   2279  fd64
   2280  fd64				   CI
   2281  fd64		       42		      .byte.b	#%01000010	;
   2282  fd65		       42		      .byte.b	#%01000010	; 
   2283  fd66		       42		      .byte.b	#%01000010	; 
   2284  fd67		       42		      .byte.b	#%01000010	; 
   2285  fd68		       42		      .byte.b	#%01000010	;
   2286  fd69
   2287  fd69				   CM
   2288  fd69		       a5		      .byte.b	#%10100101	;
   2289  fd6a		       a5		      .byte.b	#%10100101	; 
   2290  fd6b		       a5		      .byte.b	#%10100101	; 
   2291  fd6c		       e7		      .byte.b	#%11100111	; 
   2292  fd6d		       a5		      .byte.b	#%10100101	;
   2293  fd6e
   2294  fd6e				   CN
   2295  fd6e		       a5		      .byte.b	#%10100101	;
   2296  fd6f		       a5		      .byte.b	#%10100101	; 
   2297  fd70		       a5		      .byte.b	#%10100101	; 
   2298  fd71		       a5		      .byte.b	#%10100101	; 
   2299  fd72		       66		      .byte.b	#%01100110	;	
   2300  fd73
   2301  fd73
   2302  fd73				   CO
   2303  fd73		       42		      .byte.b	#%01000010	;
   2304  fd74		       a5		      .byte.b	#%10100101	; 
   2305  fd75		       a5		      .byte.b	#%10100101	; 
   2306  fd76		       a5		      .byte.b	#%10100101	; 
   2307  fd77		       42		      .byte.b	#%01000010	;	
   2308  fd78
   2309  fd78				   CP
   2310  fd78		       24		      .byte.b	#%00100100	;
   2311  fd79		       24		      .byte.b	#%00100100	; 
   2312  fd7a		       e7		      .byte.b	#%11100111	; 
   2313  fd7b		       a5		      .byte.b	#%10100101	; 
   2314  fd7c		       e7		      .byte.b	#%11100111	;
   2315  fd7d
   2316  fd7d				   CR
   2317  fd7d		       a5		      .byte.b	#%10100101	;
   2318  fd7e		       a5		      .byte.b	#%10100101	; 
   2319  fd7f		       66		      .byte.b	#%01100110	; 
   2320  fd80		       a5		      .byte.b	#%10100101	; 
   2321  fd81		       66		      .byte.b	#%01100110	;
   2322  fd82
   2323  fd82				   CS
   2324  fd82		       66		      .byte.b	#%01100110	;
   2325  fd83		       81		      .byte.b	#%10000001	; 
   2326  fd84		       42		      .byte.b	#%01000010	; 
   2327  fd85		       24		      .byte.b	#%00100100	; 
   2328  fd86		       c3		      .byte.b	#%11000011	;
   2329  fd87
   2330  fd87				   CT
   2331  fd87		       42		      .byte.b	#%01000010	;
   2332  fd88		       42		      .byte.b	#%01000010	; 
   2333  fd89		       42		      .byte.b	#%01000010	; 
   2334  fd8a		       42		      .byte.b	#%01000010	; 
   2335  fd8b		       e7		      .byte.b	#%11100111	;
   2336  fd8c
   2337  fd8c				   CV
   2338  fd8c		       42		      .byte.b	#%01000010	;
   2339  fd8d		       a5		      .byte.b	#%10100101	; 
   2340  fd8e		       a5		      .byte.b	#%10100101	; 
   2341  fd8f		       a5		      .byte.b	#%10100101	; 
   2342  fd90		       a5		      .byte.b	#%10100101	;	
   2343  fd91
   2344  fd91				   CY
   2345  fd91		       42		      .byte.b	#%01000010	;
   2346  fd92		       42		      .byte.b	#%01000010	; 
   2347  fd93		       42		      .byte.b	#%01000010	; 
   2348  fd94		       a5		      .byte.b	#%10100101	; 
   2349  fd95		       a5		      .byte.b	#%10100101	;
   2350  fd96
   2351  fd96				   CW
   2352  fd96		       a5		      .byte.b	#%10100101	;
   2353  fd97		       e7		      .byte.b	#%11100111	; 
   2354  fd98		       a5		      .byte.b	#%10100101	; 
   2355  fd99		       a5		      .byte.b	#%10100101	; 
   2356  fd9a		       a5		      .byte.b	#%10100101	;
   2357  fd9b
   2358  fd9b				   CZ
   2359  fd9b		       e7		      .byte.b	#%11100111	;
   2360  fd9c		       24		      .byte.b	#%00100100	; 
   2361  fd9d		       42		      .byte.b	#%01000010	; 
   2362  fd9e		       81		      .byte.b	#%10000001	; 
   2363  fd9f		       e7		      .byte.b	#%11100111	;
   2364  fda0
   2365  fda0				   Pipe
   2366  fda0		       42		      .byte.b	#%01000010	;
   2367  fda1		       00		      .byte.b	#%00000000	; 
   2368  fda2		       42		      .byte.b	#%01000010	; 
   2369  fda3		       00		      .byte.b	#%00000000	; 
   2370  fda4		       42		      .byte.b	#%01000010	;
   2371  fda5
   2372  fda5				   Exclamation
   2373  fda5		       42		      .byte.b	#%01000010	;
   2374  fda6		       00		      .byte.b	#%00000000	; 
   2375  fda7		       42		      .byte.b	#%01000010	; 
   2376  fda8		       42		      .byte.b	#%01000010	; 
   2377  fda9		       42		      .byte.b	#%01000010	;
   2378  fdaa
   2379  fdaa				   Dot
   2380  fdaa		       42		      .byte.b	#%01000010	;
   2381  fdab		       42		      .byte.b	#%01000010	; 
   2382  fdac		       00		      .byte.b	#%00000000	; 
   2383  fdad		       00		      .byte.b	#%00000000	; 
   2384  fdae		       00		      .byte.b	#%00000000	;
   2385  fdaf
   2386  fdaf				   Colon
   2387  fdaf		       42		      .byte.b	#%01000010	;
   2388  fdb0		       42		      .byte.b	#%01000010	; 
   2389  fdb1		       00		      .byte.b	#%00000000	; 
   2390  fdb2		       42		      .byte.b	#%01000010	; 
   2391  fdb3		       42		      .byte.b	#%01000010	;
   2392  fdb4
   2393  fdb4				   Triangle
   2394  fdb4		       81		      .byte.b	#%10000001	;
   2395  fdb5		       c3		      .byte.b	#%11000011	; 
   2396  fdb6		       e7		      .byte.b	#%11100111	; 
   2397  fdb7		       c3		      .byte.b	#%11000011	; 
   2398  fdb8		       81		      .byte.b	#%10000001	;
   2399  fdb9
   2400  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2401  fdb9		       00		      .byte.b	#0	;
   2402  fdba		       00		      .byte.b	#0	;
   2403  fdbb		       00		      .byte.b	#0	;
   2404  fdbc		       00		      .byte.b	#0	;
   2405  fdbd		       00		      .byte.b	#0	;
   2406  fdbe
   2407  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2408  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2409  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2410  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2411  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2412  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2413  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2414  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2415  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2416  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2417  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2418  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2419  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2420  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2421  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2422  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2423  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2424  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2425  fdcf
   2426  fdcf				   EngineSoundType
   2427  fdcf		       02		      .byte.b	#2
   2428  fdd0		       02		      .byte.b	#2
   2429  fdd1		       0e		      .byte.b	#14
   2430  fdd2		       06		      .byte.b	#6
   2431  fdd3		       06		      .byte.b	#6
   2432  fdd4		       0e		      .byte.b	#14
   2433  fdd5
   2434  fdd5				   EngineBaseFrequence
   2435  fdd5		       1f		      .byte.b	#31
   2436  fdd6		       15		      .byte.b	#21
   2437  fdd7		       14		      .byte.b	#20
   2438  fdd8		       1f		      .byte.b	#31
   2439  fdd9		       16		      .byte.b	#22
   2440  fdda		       03		      .byte.b	#3
   2441  fddb
   2442  fddb				   TachometerSizeLookup1
   2443  fddb		       1f		      .byte.b	#%00011111
   2444  fddc		       3f		      .byte.b	#%00111111
   2445  fddd		       7f		      .byte.b	#%01111111
   2446  fdde		       ff		      .byte.b	#%11111111
   2447  fddf		       ff		      .byte.b	#%11111111
   2448  fde0		       ff		      .byte.b	#%11111111
   2449  fde1		       ff		      .byte.b	#%11111111
   2450  fde2		       ff		      .byte.b	#%11111111
   2451  fde3
   2452  fde3				   TachometerSizeLookup2
   2453  fde3		       00		      .byte.b	#%00000000
   2454  fde4		       00		      .byte.b	#%00000000
   2455  fde5		       00		      .byte.b	#%00000000
   2456  fde6		       00		      .byte.b	#%00000000
   2457  fde7		       80		      .byte.b	#%10000000
   2458  fde8		       c0		      .byte.b	#%11000000
   2459  fde9		       e0		      .byte.b	#%11100000
   2460  fdea		       f0		      .byte.b	#%11110000
   2461  fdeb
   2462  fdeb				   TachometerGearLookup
   2463  fdeb		       01		      .byte.b	#%00000001
   2464  fdec		       02		      .byte.b	#%00000010
   2465  fded		       04		      .byte.b	#%00000100
   2466  fdee		       08		      .byte.b	#%00001000
   2467  fdef		       10		      .byte.b	#%00010000
   2468  fdf0		       30		      .byte.b	#%00110000
   2469  fdf1
   2470  fe00					      org	$FE00
   2471  fe00				   AesTable
   2472  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2473  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2474  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2475  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2476  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2477  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2478  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2479  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2480  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2481  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2482  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2483  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2484  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2485  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2486  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2487  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2488  ff00
   2489  ff00							; From FF00 to FFFB (122 bytes) to use here
   2490  ff00
   2491  ff00				   StaticText		; All static text must be on the same MSB block. 
   2492  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2493  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2494  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2495  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2496  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2497  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2498  ff05
   2499  ff05				   HellwayLeftText
   2500  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2501  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2502  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2503  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2504  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2505  ff0a
   2506  ff0a				   HellwayRightText
   2507  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2508  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2509  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2510  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2511  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2512  ff0f
   2513  ff0f				   OpbText
   2514  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2515  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2516  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2517  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2518  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2519  ff14
   2520  ff14				   YearText
   2521  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2522  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2523  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2524  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2525  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2526  ff19
   2527  ff19				   GameText
   2528  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2529  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2530  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2531  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2532  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2533  ff1e
   2534  ff1e				   OverText
   2535  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2536  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2537  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2538  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2539  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2540  ff23				   GoText
   2541  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2542  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2543  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2544  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2545  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2546  ff28
   2547  ff28				   ZeldaTextLeft
   2548  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2549  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2550  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2551  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2552  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2553  ff2d
   2554  ff2d				   ZeldaTextRight
   2555  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2556  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2557  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2558  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2559  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2560  ff32
   2561  ff32				   ZeldaDateLeft
   2562  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2563  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2564  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2565  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2566  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2567  ff37
   2568  ff37				   ZeldaDateRight
   2569  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2570  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2571  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2572  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2573  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2574  ff3c
   2575  ff3c				   PolvinhosTextLeft
   2576  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2577  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2578  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2579  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2580  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2581  ff41
   2582  ff41				   PolvinhosTextRight
   2583  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2584  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2585  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2586  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2587  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2588  ff46
   2589  ff46				   PolvinhosDateLeft
   2590  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2591  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2592  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2593  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2594  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2595  ff4b
   2596  ff4b				   PolvinhosDateRight
   2597  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2598  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2599  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2600  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2601  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2602  ff50
   2603  ff50				   IvonneTextLeft
   2604  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2605  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2606  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2607  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2608  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2609  ff55
   2610  ff55				   IvonneTextRight
   2611  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2612  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2613  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2614  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2615  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2616  ff5a
   2617  ff5a				   IvonneDateLeft
   2618  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2619  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2620  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2621  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2622  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2623  ff5f
   2624  ff5f				   IvonneDateRight
   2625  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2626  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2627  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2628  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2629  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2630  ff64
   2631  ff64				   PaperArtTextLeft
   2632  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2633  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2634  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2635  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2636  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2637  ff69
   2638  ff69				   PaperArtTextRight
   2639  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2640  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2641  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2642  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2643  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2644  ff6e
   2645  ff6e				   LeonardoTextLeft
   2646  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2647  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2648  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2649  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2650  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2651  ff73
   2652  ff73				   LeonardoTextRight
   2653  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2654  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2655  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2656  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2657  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2658  ff78
   2659  ff78				   VersionText
   2660  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2661  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2662  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2663  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2664  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2665  ff7d
   2666  ff7d
   2667  ff7d				   EndStaticText
   2668  ff7d
   2669  ff7d				   CarSprite0		; Upside down, Original Car
   2670  ff7d		       00 00 00 00*	      ds	7
   2671  ff84		       7e		      .byte.b	#%01111110
   2672  ff85		       24		      .byte.b	#%00100100
   2673  ff86		       bd		      .byte.b	#%10111101
   2674  ff87		       3c		      .byte.b	#%00111100
   2675  ff88		       bd		      .byte.b	#%10111101
   2676  ff89		       3c		      .byte.b	#%00111100
   2677  ff8a
   2678  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2679  ff8a		       00 00 00 00*	      ds	7
   2680  ff91		       bd		      .byte.b	#%10111101
   2681  ff92		       7e		      .byte.b	#%01111110
   2682  ff93		       5a		      .byte.b	#%01011010
   2683  ff94		       66		      .byte.b	#%01100110
   2684  ff95		       bd		      .byte.b	#%10111101
   2685  ff96		       3c		      .byte.b	#%00111100
   2686  ff97
   2687  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2688  ff97		       00 00 00 00*	      ds	7
   2689  ff9e		       7e		      .byte.b	#%01111110
   2690  ff9f		       a5		      .byte.b	#%10100101
   2691  ffa0		       42		      .byte.b	#%01000010
   2692  ffa1		       42		      .byte.b	#%01000010
   2693  ffa2		       bd		      .byte.b	#%10111101
   2694  ffa3		       7e		      .byte.b	#%01111110
   2695  ffa4
   2696  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2697  ffa4		       00 00 00 00*	      ds	7
   2698  ffab		       3c		      .byte.b	#%00111100
   2699  ffac		       db		      .byte.b	#%11011011
   2700  ffad		       db		      .byte.b	#%11011011
   2701  ffae		       3c		      .byte.b	#%00111100
   2702  ffaf		       5a		      .byte.b	#%01011010
   2703  ffb0		       3c		      .byte.b	#%00111100
   2704  ffb1
   2705  ffb1				   TrafficSpeeds
   2706  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2707  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2708  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2709  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2710  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2711  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2712  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2713  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2714  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2715  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2716  ffbb				   TrafficSpeedsHighDelta
   2717  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2718  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2719  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2720  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2721  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2722  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2723  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2724  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2725  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2726  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2727  ffc5
   2728  ffc5				   CarIdToSpriteAddressL
   2729  ffc5		       7d		      .byte.b	#<CarSprite0
   2730  ffc6		       8a		      .byte.b	#<CarSprite1
   2731  ffc7		       97		      .byte.b	#<CarSprite2
   2732  ffc8		       a4		      .byte.b	#<CarSprite3
   2733  ffc9
   2734  ffc9				   CarIdToSpriteAddressH
   2735  ffc9		       ff		      .byte.b	#>CarSprite0
   2736  ffca		       ff		      .byte.b	#>CarSprite1
   2737  ffcb		       ff		      .byte.b	#>CarSprite2
   2738  ffcc		       ff		      .byte.b	#>CarSprite3
   2739  ffcd
   2740  ffcd				   CarIdToAccelerateSpeed
   2741  ffcd		       80		      .byte.b	#128
   2742  ffce		       c0		      .byte.b	#192
   2743  ffcf		       60		      .byte.b	#96
   2744  ffd0		       c0		      .byte.b	#192
   2745  ffd1
   2746  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2747  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   2748  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   2749  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   2750  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   2751  ffd5
   2752  ffd5				   CarIdToMaxSpeedL
   2753  ffd5		       80		      .byte.b	#$80
   2754  ffd6		       00		      .byte.b	#$00	; One less gear
   2755  ffd7		       80		      .byte.b	#$80
   2756  ffd8		       80		      .byte.b	#$80
   2757  ffd9
   2758  ffd9				   CarIdToMaxGear
   2759  ffd9		       05		      .byte.b	#5
   2760  ffda		       04		      .byte.b	#4	; One less gear
   2761  ffdb		       05		      .byte.b	#5
   2762  ffdc		       05		      .byte.b	#5
   2763  ffdd
   2764  ffdd				   GearToBreakSpeedTable
   2765  ffdd		       09		      .byte.b	#(BREAK_SPEED - 1)
   2766  ffde		       09		      .byte.b	#(BREAK_SPEED - 1)
   2767  ffdf		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2768  ffe0		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2769  ffe1		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2770  ffe2		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2771  ffe3
   2772  ffe3				   TrafficColorTable
   2773  ffe3		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2774  ffe4		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2775  ffe5		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2776  ffe6		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2777  ffe7
   2778  ffe7				   TrafficChanceTable
   2779  ffe7		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2780  ffe8		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2781  ffe9		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2782  ffea		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2783  ffeb
   2784  ffeb				   TrafficTimeTable
   2785  ffeb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2786  ffec		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2787  ffed		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2788  ffee		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2789  ffef		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2790  fff0
   2791  fff0
   2792  fffc					      org	$FFFC
   2793  fffc		       00 f0		      .word.w	BeforeStart
   2794  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
