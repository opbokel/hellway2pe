------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 80	   GRP0Cache  =	$80
    104  f000		       00 81	   PF0Cache   =	$81
    105  f000		       00 82	   PF1Cache   =	$82
    106  f000		       00 83	   PF2Cache   =	$83
    107  f000		       00 84	   GRP1Cache  =	$84
    108  f000		       00 85	   ENABLCache =	$85
    109  f000		       00 86	   ENAM0Cache =	$86
    110  f000		       00 87	   ENAM1Cache =	$87
    111  f000
    112  f000		       00 8c	   FrameCount0 =	$8C	;
    113  f000		       00 8d	   FrameCount1 =	$8D	;
    114  f000
    115  f000		       00 8e	   CollisionCounter =	$8E
    116  f000		       00 8f	   OpCollisionCounter =	$8F
    117  f000
    118  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    119  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    120  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    121  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    122  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    123  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    124  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    125  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    126  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    127  f000
    128  f000							;Temporary variables, multiple uses
    129  f000		       00 b0	   Tmp0       =	$B0
    130  f000		       00 b1	   Tmp1       =	$B1
    131  f000		       00 b2	   Tmp2       =	$B2
    132  f000		       00 b3	   Tmp3       =	$B3
    133  f000		       00 b4	   Tmp4       =	$B4
    134  f000		       00 b5	   Tmp5       =	$B5
    135  f000
    136  f000		       00 b6	   Player0X   =	$B6
    137  f000		       00 b7	   Player1X   =	$B7
    138  f000		       00 b8	   CountdownTimer =	$B8
    139  f000		       00 b9	   OpCountdownTimer =	$B9
    140  f000		       00 ba	   Traffic0Msb =	$BA
    141  f000		       00 bb	   OpTraffic0Msb =	$BB
    142  f000		       00 bc	   SwitchDebounceCounter =	$BC
    143  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    144  f000		       00 be	   TrafficChance =	$BE
    145  f000		       00 bf	   OpTrafficChance =	$BF
    146  f000
    147  f000		       00 c0	   CheckpointTime =	$C0
    148  f000		       00 c1	   OpCheckpointTime =	$C1
    149  f000		       00 c2	   TrafficColor =	$C2
    150  f000		       00 c3	   OpTrafficColor =	$C3
    151  f000		       00 c4	   CurrentDifficulty =	$C4
    152  f000		       00 c5	   OpCurrentDifficulty =	$C5
    153  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000		       00 f4	   IsOpponentInFront =	$F4	; Bit 7 tells if negative or positive.
    195  f000
    196  f000							;generic start up stuff, put zero in almost all...
    197  f000				   BeforeStart		;All variables that are kept on game reset or select
    198  f000		       a0 00		      LDY	#0
    199  f002		       84 bc		      STY	SwitchDebounceCounter
    200  f004		       84 c4		      STY	CurrentDifficulty
    201  f006		       84 c5		      STY	OpCurrentDifficulty
    202  f008		       84 bd		      STY	GameStatus
    203  f00a		       84 c7		      STY	CurrentCarId
    204  f00c		       84 c8		      STY	OpCurrentCarId
    205  f00e		       a0 10		      LDY	#16
    206  f010		       84 c6		      STY	GameMode
    207  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    208  f014
    209  f014				   Start
    210  f014		       a9 02		      LDA	#2
    211  f016		       85 00		      STA	VSYNC
    212  f018		       85 02		      STA	WSYNC
    213  f01a		       85 02		      STA	WSYNC
    214  f01c		       85 02		      STA	WSYNC
    215  f01e		       a9 00		      LDA	#0	;2
    216  f020		       85 00		      STA	VSYNC	;3
    217  f022
    218  f022		       78		      SEI
    219  f023		       d8		      CLD
    220  f024		       a2 ff		      LDX	#$FF
    221  f026		       9a		      TXS
    222  f027
    223  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    224  f029				   CleanMem
    225  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    226  f02b		       f0 1a		      BEQ	SkipClean
    227  f02d		       e0 c6		      CPX	#GameMode
    228  f02f		       f0 16		      BEQ	SkipClean
    229  f031		       e0 c7		      CPX	#CurrentCarId
    230  f033		       f0 12		      BEQ	SkipClean
    231  f035		       e0 c8		      CPX	#OpCurrentCarId
    232  f037		       f0 0e		      BEQ	SkipClean
    233  f039		       e0 c4		      CPX	#CurrentDifficulty
    234  f03b		       f0 0a		      BEQ	SkipClean
    235  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    236  f03f		       f0 06		      BEQ	SkipClean
    237  f041		       e0 bd		      CPX	#GameStatus
    238  f043		       f0 02		      BEQ	SkipClean
    239  f045		       95 00		      STA	0,X
    240  f047				   SkipClean
    241  f047		       e8		      INX
    242  f048		       d0 df		      BNE	CleanMem
    243  f04a
    244  f04a		       a9 d5		      LDA	#213
    245  f04c		       8d 96 02 	      STA	TIM64T	;3	
    246  f04f
    247  f04f							;Setting some variables...
    248  f04f
    249  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    250  f04f		       85 02		      STA	WSYNC	;We will set player position
    251  f051		       20 d0 f6 	      JSR	DefaultOffsets
    252  f054
    253  f054		       ad 8f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    254  f057		       85 f0		      STA	Player0SpeedL
    255  f059		       85 f1		      STA	Player1SpeedL
    256  f05b
    257  f05b							;SLEEP 11;18
    258  f05b		       a2 00		      LDX	#0
    259  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    260  f060		       85 db		      STA	StartSWCHB	; For game over
    261  f062		       29 c0		      AND	#%11000000
    262  f064		       f0 0b		      BEQ	CallConfigureDifficulty
    263  f066		       e8		      INX
    264  f067		       c9 80		      CMP	#%10000000
    265  f069		       f0 06		      BEQ	CallConfigureDifficulty
    266  f06b		       e8		      INX
    267  f06c		       c9 40		      CMP	#%01000000
    268  f06e		       f0 01		      BEQ	CallConfigureDifficulty
    269  f070		       e8		      INX
    270  f071
    271  f071				   CallConfigureDifficulty
    272  f071		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    273  f073		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    274  f075		       a5 bd		      LDA	GameStatus
    275  f077		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    276  f079				   StoreCurrentDifficulty
    277  f079		       86 c4		      STX	CurrentDifficulty
    278  f07b		       86 c5		      STX	OpCurrentDifficulty
    279  f07d		       a2 00		      LDX	#0
    280  f07f		       20 a5 f6 	      JSR	ConfigureDifficulty
    281  f082		       e8		      INX
    282  f083		       20 a5 f6 	      JSR	ConfigureDifficulty
    283  f086
    284  f086				   SetGameNotRunning
    285  f086		       a9 00		      LDA	#0
    286  f088		       85 bd		      STA	GameStatus
    287  f08a
    288  f08a				   ConfigureTimer
    289  f08a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    290  f08c		       85 b8		      STA	CountdownTimer	;3
    291  f08e		       85 b9		      STA	OpCountdownTimer	;3
    292  f090
    293  f090				   ConfigurePlayer1XPosition
    294  f090		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    295  f092		       85 b7		      STA	Player1X	;3
    296  f094
    297  f094				   ConfigureOpNextCheckpoint
    298  f094		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    299  f096		       85 ce		      STA	OpNextCheckpoint
    300  f098
    301  f098				   HPositioning 		; Avoid sleep doing needed stuff
    302  f098		       85 02		      STA	WSYNC
    303  f09a
    304  f09a				   ConfigurePlayer0XPosition
    305  f09a		       a9 21		      LDA	#PLAYER_0_X_START	;2
    306  f09c		       85 b6		      STA	Player0X	;3
    307  f09e
    308  f09e				   ConfigureMissileSize
    309  f09e		       a9 30		      LDA	#%00110000	;2 Missile Size
    310  f0a0		       85 04		      STA	NUSIZ0	;3
    311  f0a2		       85 05		      STA	NUSIZ1	;3
    312  f0a4
    313  f0a4				   ConfigureNextCheckpoint
    314  f0a4		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    315  f0a6		       85 cd		      STA	NextCheckpoint
    316  f0a8
    317  f0a8		       a9 00		      LDA	#0	; Avoid missile reseting position 
    318  f0aa							;SLEEP 41
      0  f0aa					      SLEEP	4	;
      1  f0aa				   .CYCLES    SET	4
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     17  f0aa					      REPEND
     18  f0ab		       ea		      nop
     19  f0ac					      REPEND
    320  f0ac		       85 12		      STA	RESM0
      0  f0ae					      SLEEP	2	;
      1  f0ae				   .CYCLES    SET	2
      2  f0ae
      3  f0ae				  -	      IF	.CYCLES < 2
      4  f0ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ae				  -	      ERR
      6  f0ae					      ENDIF
      7  f0ae
      8  f0ae				  -	      IF	.CYCLES & 1
      9  f0ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ae				  -	      nop	0
     11  f0ae				  -	      ELSE
     12  f0ae				  -	      bit	VSYNC
     13  f0ae				  -	      ENDIF
     14  f0ae				  -.CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae					      REPEAT	.CYCLES / 2
     18  f0ae		       ea		      nop
     19  f0af					      REPEND
    322  f0af		       85 14		      STA	RESBL
      0  f0b1					      SLEEP	2
      1  f0b1				   .CYCLES    SET	2
      2  f0b1
      3  f0b1				  -	      IF	.CYCLES < 2
      4  f0b1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b1				  -	      ERR
      6  f0b1					      ENDIF
      7  f0b1
      8  f0b1				  -	      IF	.CYCLES & 1
      9  f0b1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b1				  -	      nop	0
     11  f0b1				  -	      ELSE
     12  f0b1				  -	      bit	VSYNC
     13  f0b1				  -	      ENDIF
     14  f0b1				  -.CYCLES    SET	.CYCLES - 3
     15  f0b1					      ENDIF
     16  f0b1
     17  f0b1					      REPEAT	.CYCLES / 2
     18  f0b1		       ea		      nop
     19  f0b2					      REPEND
    324  f0b2		       85 13		      STA	RESM1
      0  f0b4					      SLEEP	3
      1  f0b4				   .CYCLES    SET	3
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4					      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4					      ELSE
     12  f0b4		       24 00		      bit	VSYNC
     13  f0b6					      ENDIF
     14  f0b6				   .CYCLES    SET	.CYCLES - 3
     15  f0b6					      ENDIF
     16  f0b6
     17  f0b6				  -	      REPEAT	.CYCLES / 2
     18  f0b6				  -	      nop
     19  f0b6					      REPEND
    326  f0b6
    327  f0b6		       a9 e0		      LDA	#$E0
    328  f0b8		       85 24		      STA	HMBL
    329  f0ba		       85 22		      STA	HMM0
    330  f0bc		       85 23		      STA	HMM1
    331  f0be		       85 02		      STA	WSYNC
    332  f0c0		       85 2a		      STA	HMOVE
    333  f0c2		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    334  f0c4		       85 2b		      STA	HMCLR
      0  f0c6					      SLEEP	30
      1  f0c6				   .CYCLES    SET	30
      2  f0c6
      3  f0c6				  -	      IF	.CYCLES < 2
      4  f0c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c6				  -	      ERR
      6  f0c6					      ENDIF
      7  f0c6
      8  f0c6				  -	      IF	.CYCLES & 1
      9  f0c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c6				  -	      nop	0
     11  f0c6				  -	      ELSE
     12  f0c6				  -	      bit	VSYNC
     13  f0c6				  -	      ENDIF
     14  f0c6				  -.CYCLES    SET	.CYCLES - 3
     15  f0c6					      ENDIF
     16  f0c6
     17  f0c6					      REPEAT	.CYCLES / 2
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     17  f0ce					      REPEND
     18  f0cf		       ea		      nop
     17  f0cf					      REPEND
     18  f0d0		       ea		      nop
     17  f0d0					      REPEND
     18  f0d1		       ea		      nop
     17  f0d1					      REPEND
     18  f0d2		       ea		      nop
     17  f0d2					      REPEND
     18  f0d3		       ea		      nop
     17  f0d3					      REPEND
     18  f0d4		       ea		      nop
     19  f0d5					      REPEND
    336  f0d5		       85 10		      STA	RESP0
    337  f0d7							;SLEEP 5 ; Temporarily move player 1 away.
    338  f0d7		       85 11		      STA	RESP1
    339  f0d9
    340  f0d9				   WaitResetToEnd
    341  f0d9		       ad 84 02 	      LDA	INTIM
    342  f0dc		       d0 fb		      BNE	WaitResetToEnd
    343  f0de
    344  f0de				   MainLoop
    345  f0de		       a9 02		      LDA	#2
    346  f0e0		       85 00		      STA	VSYNC
    347  f0e2		       85 02		      STA	WSYNC
    348  f0e4		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    349  f0e6				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    350  f0e6		       a9 01		      LDA	#%00000001	;3
    351  f0e8		       24 df		      BIT	TextFlickerMode	;2
    352  f0ea		       f0 05		      BEQ	TextSideFrameZero	;2
    353  f0ec		       25 8d		      AND	FrameCount1	;2
    354  f0ee		       4c f3 f0 	      JMP	StoreTextSize	;3
    355  f0f1				   TextSideFrameZero
    356  f0f1		       25 8c		      AND	FrameCount0	;2
    357  f0f3				   StoreTextSize
    358  f0f3		       85 de		      STA	TextSide	;3
    359  f0f5
    360  f0f5				   PrepareMaxHMove
      0  f0f5					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0f5				   .CYCLES    SET	18
      2  f0f5
      3  f0f5				  -	      IF	.CYCLES < 2
      4  f0f5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0f5				  -	      ERR
      6  f0f5					      ENDIF
      7  f0f5
      8  f0f5				  -	      IF	.CYCLES & 1
      9  f0f5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0f5				  -	      nop	0
     11  f0f5				  -	      ELSE
     12  f0f5				  -	      bit	VSYNC
     13  f0f5				  -	      ENDIF
     14  f0f5				  -.CYCLES    SET	.CYCLES - 3
     15  f0f5					      ENDIF
     16  f0f5
     17  f0f5					      REPEAT	.CYCLES / 2
     18  f0f5		       ea		      nop
     17  f0f5					      REPEND
     18  f0f6		       ea		      nop
     17  f0f6					      REPEND
     18  f0f7		       ea		      nop
     17  f0f7					      REPEND
     18  f0f8		       ea		      nop
     17  f0f8					      REPEND
     18  f0f9		       ea		      nop
     17  f0f9					      REPEND
     18  f0fa		       ea		      nop
     17  f0fa					      REPEND
     18  f0fb		       ea		      nop
     17  f0fb					      REPEND
     18  f0fc		       ea		      nop
     17  f0fc					      REPEND
     18  f0fd		       ea		      nop
     19  f0fe					      REPEND
    362  f0fe		       a9 80		      LDA	#$80
    363  f100		       85 24		      STA	HMBL
    364  f102		       85 22		      STA	HMM0
    365  f104		       85 23		      STA	HMM1
    366  f106		       85 20		      STA	HMP0
    367  f108		       85 21		      STA	HMP1
    368  f10a		       85 02		      STA	WSYNC
    369  f10c		       85 2a		      STA	HMOVE	; 1/10			
    370  f10e
    371  f10e				   ConfigVBlankTimer
    372  f10e		       a5 c6		      LDA	GameMode
    373  f110		       c9 10		      CMP	#MAX_GAME_MODE
    374  f112		       f0 05		      BEQ	SetVblankTimerQrCode
    375  f114		       a9 29		      LDA	#VBLANK_TIMER
    376  f116		       4c 1b f1 	      JMP	SetVblankTimer
    377  f119				   SetVblankTimerQrCode
    378  f119		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    379  f11b
    380  f11b				   SetVblankTimer
    381  f11b		       85 02		      STA	WSYNC	;3
    382  f11d		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    383  f11f		       8d 96 02 	      STA	TIM64T	;3	
    384  f122		       a9 00		      LDA	#0	;2
    385  f124		       85 00		      STA	VSYNC	;3	
    386  f126
    387  f126				   RandomizeGame
    388  f126		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    389  f128		       d0 2d		      BNE	EndRandomizeGame
    390  f12a		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    391  f12c		       29 02		      AND	#%00000010
    392  f12e		       f0 24		      BEQ	DeterministicGame
    393  f130		       a6 96		      LDX	TrafficOffset1 + 2
    394  f132		       bd 00 fe 	      LDA	AesTable,X
    395  f135		       45 8c		      EOR	FrameCount0
    396  f137		       85 96		      STA	TrafficOffset1 + 2
    397  f139		       85 a6		      STA	OpTrafficOffset1 + 2
    398  f13b		       a6 9a		      LDX	TrafficOffset2 + 2
    399  f13d		       bd 00 fe 	      LDA	AesTable,X
    400  f140		       45 8c		      EOR	FrameCount0
    401  f142		       85 9a		      STA	TrafficOffset2 + 2
    402  f144		       85 aa		      STA	OpTrafficOffset2 + 2
    403  f146		       a6 9e		      LDX	TrafficOffset3 + 2
    404  f148		       bd 00 fe 	      LDA	AesTable,X
    405  f14b		       45 8c		      EOR	FrameCount0
    406  f14d		       85 9e		      STA	TrafficOffset3 + 2
    407  f14f		       85 ae		      STA	OpTrafficOffset3 + 2
    408  f151		       4c 57 f1 	      JMP	EndRandomizeGame
    409  f154
    410  f154				   DeterministicGame
    411  f154		       20 d0 f6 	      JSR	DefaultOffsets
    412  f157
    413  f157				   EndRandomizeGame
    414  f157
    415  f157
    416  f157				   CountFrame
    417  f157		       e6 8c		      INC	FrameCount0	; 5
    418  f159		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    419  f15b		       e6 8d		      INC	FrameCount1	; 5 
    420  f15d				   SkipIncFC1
    421  f15d
    422  f15d				   CallDrawQrCode
    423  f15d		       a5 c6		      LDA	GameMode
    424  f15f		       c9 10		      CMP	#MAX_GAME_MODE
    425  f161		       d0 03		      BNE	TestIsGameRunning
    426  f163		       4c 36 fb 	      JMP	DrawQrCode
    427  f166
    428  f166							;Does not update the game if not running
    429  f166				   TestIsGameRunning
    430  f166		       a5 bd		      LDA	GameStatus	;3
    431  f168		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    432  f16a				   SelectCarWithDpadCall		; Only do it when game is stoped
    433  f16a		       a2 00		      LDX	#0	; Player 0
    434  f16c		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    435  f16e		       85 b0		      STA	Tmp0
    436  f170		       20 d9 f8 	      JSR	SelectCarWithDpad
    437  f173		       e8		      INX		; Player 1
    438  f174		       20 d9 f8 	      JSR	SelectCarWithDpad
    439  f177
    440  f177							; Needs to draw the opponent in the correct line even when game stoped  
    441  f177							; Draeing is a destructive operation
    442  f177		       20 eb f8 	      JSR	ProcessOpponentLine
    443  f17a
    444  f17a				   CallConfigureCarSprites
    445  f17a		       20 a7 f8 	      JSR	ConfigureCarSprites
    446  f17d				   SkipUpdateLogicJump
    447  f17d		       4c c6 f1 	      JMP	SkipUpdateLogic
    448  f180				   ContinueWithGameLogic
    449  f180
    450  f180				   CallEverySecond		; Timer for now
    451  f180		       a2 00		      LDX	#0
    452  f182		       20 0c fb 	      JSR	EverySecond
    453  f185		       e8		      INX
    454  f186		       20 0c fb 	      JSR	EverySecond
    455  f189
    456  f189
    457  f189				   ChangeTextFlickerMode
    458  f189		       a5 bc		      LDA	SwitchDebounceCounter
    459  f18b		       d0 0d		      BNE	EndChangeTextFlickerMode
    460  f18d		       ad 82 02 	      LDA	SWCHB
    461  f190		       29 02		      AND	#%00000010	;Game select
    462  f192		       d0 06		      BNE	EndChangeTextFlickerMode
    463  f194		       e6 df		      INC	TextFlickerMode
    464  f196		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    465  f198		       85 bc		      STA	SwitchDebounceCounter
    466  f19a				   EndChangeTextFlickerMode
    467  f19a
    468  f19a				   CallProcessSpeed
    469  f19a		       a2 00		      LDX	#0
    470  f19c		       20 23 fa 	      JSR	ProcessSpeed
    471  f19f
    472  f19f		       e8		      INX		; Player 1
    473  f1a0		       20 23 fa 	      JSR	ProcessSpeed
    474  f1a3
    475  f1a3				   CallUpdateOffsets
    476  f1a3		       a2 00		      LDX	#0	; Player 0
    477  f1a5		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    478  f1a7		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    479  f1a9		       a5 f0		      LDA	Player0SpeedL
    480  f1ab		       85 b4		      STA	Tmp4
    481  f1ad		       a5 f2		      LDA	Player0SpeedH
    482  f1af		       85 b5		      STA	Tmp5
    483  f1b1		       20 d0 f9 	      JSR	UpdateOffsets
    484  f1b4
    485  f1b4							;LDX Exits the call with correct value.
    486  f1b4		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    487  f1b6		       85 b3		      STA	Tmp3
    488  f1b8		       a5 f1		      LDA	Player1SpeedL
    489  f1ba		       85 b4		      STA	Tmp4
    490  f1bc		       a5 f3		      LDA	Player1SpeedH
    491  f1be		       85 b5		      STA	Tmp5
    492  f1c0		       20 d0 f9 	      JSR	UpdateOffsets
    493  f1c3
    494  f1c3				   CallProcessOpponentLine
    495  f1c3		       20 eb f8 	      JSR	ProcessOpponentLine
    496  f1c6
    497  f1c6
    498  f1c6				   SkipUpdateLogic		; Continue here if not paused
    499  f1c6
    500  f1c6				   CallStatusUpdateSbr
    501  f1c6		       a2 00		      LDX	#0
    502  f1c8		       20 19 fb 	      JSR	CalculateGear
    503  f1cb		       20 26 fb 	      JSR	ProcessScoreFontColor
    504  f1ce		       e8		      INX
    505  f1cf		       20 19 fb 	      JSR	CalculateGear
    506  f1d2		       20 26 fb 	      JSR	ProcessScoreFontColor
    507  f1d5
    508  f1d5				   CallProcessPlayerStatus
    509  f1d5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    510  f1d7		       85 b0		      STA	Tmp0
    511  f1d9		       a2 00		      LDX	#0
    512  f1db		       20 c6 fa 	      JSR	ProcessPlayerStatus
    513  f1de		       a5 a2		      LDA	OpTrafficOffset0 + 2
    514  f1e0		       85 b0		      STA	Tmp0
    515  f1e2		       e8		      INX
    516  f1e3		       20 c6 fa 	      JSR	ProcessPlayerStatus
    517  f1e6
    518  f1e6				   CallProcessPlayerSprites
    519  f1e6		       20 a7 f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    520  f1e9
    521  f1e9				   CallProcessSound
    522  f1e9		       20 c0 f5 	      JSR	ProcessSound
    523  f1ec
    524  f1ec							;Could be done during on vblank to save this comparisson time (before draw score), 
    525  f1ec							;but I am saving vblank cycles for now, in case of 2 players.
    526  f1ec				   ChooseTextSide		; 
    527  f1ec		       a5 de		      LDA	TextSide	;3
    528  f1ee		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    529  f1f0		       4c 74 f2 	      JMP	RightScoreWrite
    530  f1f3
    531  f1f3				   LeftScoreWrite
    532  f1f3		       a5 c9		      LDA	ScoreFontColor
    533  f1f5		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    534  f1f7		       f0 51		      BEQ	PrintCheckpoint
    535  f1f9		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    536  f1fb		       f0 55		      BEQ	PrintStartGame
    537  f1fd		       a5 bd		      LDA	GameStatus
    538  f1ff		       f0 59		      BEQ	PrintHellwayLeft
    539  f201				   WriteDistance		;Not optimized yet, ugly code.
    540  f201				   Digit0Timer
    541  f201		       a5 b8		      LDA	CountdownTimer	;3
    542  f203		       29 0f		      AND	#%00001111	;2
    543  f205		       aa		      TAX		; 2
    544  f206		       bd 6c fc 	      LDA	FontLookup,X	;4 
    545  f209		       85 d1		      STA	ScoreD1	;3
    546  f20b
    547  f20b				   Digit1Timer
    548  f20b		       a5 b8		      LDA	CountdownTimer	;3
    549  f20d		       4a		      LSR		; 2
    550  f20e		       4a		      LSR		; 2
    551  f20f		       4a		      LSR		; 2
    552  f210		       4a		      LSR		; 2
    553  f211		       aa		      TAX		; 2
    554  f212		       bd 6c fc 	      LDA	FontLookup,X	;4
    555  f215		       85 d0		      STA	ScoreD0	;3
    556  f217
    557  f217				   SpeedBar
    558  f217		       a5 f0		      LDA	Player0SpeedL
    559  f219		       29 e0		      AND	#%11100000	;2 Discard the last bits
    560  f21b		       18		      CLC
    561  f21c		       2a		      ROL		;First goes into carry
    562  f21d		       2a		      ROL
    563  f21e		       2a		      ROL
    564  f21f		       2a		      ROL
    565  f220		       85 b0		      STA	Tmp0
    566  f222		       a5 f2		      LDA	Player0SpeedH
    567  f224		       0a		      ASL
    568  f225		       0a		      ASL
    569  f226		       0a		      ASL
    570  f227		       05 b0		      ORA	Tmp0
    571  f229		       aa		      TAX		; 2
    572  f22a		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    573  f22d		       85 d2		      STA	ScoreD2	;3
    574  f22f
    575  f22f				   DistanceCheckpointCount		; Will run all letters in the future
    576  f22f		       a5 92		      LDA	TrafficOffset0 + 2	;3
    577  f231		       29 f0		      AND	#%11110000	;2
    578  f233		       4a		      LSR
    579  f234		       4a		      LSR
    580  f235		       4a		      LSR
    581  f236		       4a		      LSR
    582  f237		       aa		      TAX		; 2
    583  f238		       bd 6c fc 	      LDA	FontLookup,X	;4 
    584  f23b		       85 d3		      STA	ScoreD3	;3
    585  f23d
    586  f23d				   DistanceBar		; 16 subdivisions per checkpoint
    587  f23d		       a5 92		      LDA	TrafficOffset0 + 2	;3
    588  f23f		       29 0f		      AND	#%00001111	;2
    589  f241		       aa		      TAX		; 2
    590  f242		       bd 7d fc 	      LDA	BarLookup,X	;4 
    591  f245		       85 d4		      STA	ScoreD4	;3
    592  f247
    593  f247				   EndDrawDistance
    594  f247		       4c ec f2 	      JMP	RightScoreWriteEnd	;3
    595  f24a
    596  f24a				   PrintCheckpoint
    597  f24a		       a2 00		      LDX	#<CheckpointText
    598  f24c		       20 e5 f6 	      JSR	PrintStaticText
    599  f24f		       4c ec f2 	      JMP	RightScoreWriteEnd	;3
    600  f252				   PrintStartGame
    601  f252		       a2 23		      LDX	#<GoText
    602  f254		       20 e5 f6 	      JSR	PrintStaticText
    603  f257		       4c ec f2 	      JMP	RightScoreWriteEnd	;3
    604  f25a
    605  f25a				   PrintHellwayLeft
    606  f25a		       a5 8d		      LDA	FrameCount1
    607  f25c		       29 01		      AND	#1
    608  f25e		       d0 05		      BNE	PrintCreditsLeft
    609  f260		       a2 05		      LDX	#<HellwayLeftText
    610  f262		       4c 67 f2 	      JMP	PrintGameMode
    611  f265				   PrintCreditsLeft
    612  f265		       a2 0f		      LDX	#<OpbText
    613  f267
    614  f267				   PrintGameMode
    615  f267		       20 e5 f6 	      JSR	PrintStaticText
    616  f26a		       a6 c6		      LDX	GameMode
    617  f26c		       bd 6c fc 	      LDA	FontLookup,X	;4 
    618  f26f		       85 d0		      STA	ScoreD0	;3
    619  f271		       4c ec f2 	      JMP	RightScoreWriteEnd	;3
    620  f274
    621  f274				   RightScoreWrite
    622  f274		       a5 bd		      LDA	GameStatus
    623  f276		       f0 53		      BEQ	PrintHellwayRight
    624  f278		       a5 c9		      LDA	ScoreFontColor
    625  f27a		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    626  f27c		       f0 d4		      BEQ	PrintStartGame
    627  f27e		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    628  f280		       f0 5c		      BEQ	PrintGameOver
    629  f282
    630  f282				   OpDigit0Timer
    631  f282		       a5 b9		      LDA	OpCountdownTimer	;3
    632  f284		       29 0f		      AND	#%00001111	;2
    633  f286		       aa		      TAX		; 2
    634  f287		       bd 6c fc 	      LDA	FontLookup,X	;4 
    635  f28a		       85 d4		      STA	ScoreD4	;3
    636  f28c
    637  f28c				   OpDigit1Timer
    638  f28c		       a5 b9		      LDA	OpCountdownTimer	;3
    639  f28e		       4a		      LSR		; 2
    640  f28f		       4a		      LSR		; 2
    641  f290		       4a		      LSR		; 2
    642  f291		       4a		      LSR		; 2
    643  f292		       aa		      TAX		; 2
    644  f293		       bd 6c fc 	      LDA	FontLookup,X	;4
    645  f296		       85 d3		      STA	ScoreD3	;3
    646  f298
    647  f298				   OpSpeedBar
    648  f298		       a5 f1		      LDA	Player1SpeedL
    649  f29a		       29 e0		      AND	#%11100000	;2 Discard the last bits
    650  f29c		       18		      CLC
    651  f29d		       2a		      ROL		;First goes into carry
    652  f29e		       2a		      ROL
    653  f29f		       2a		      ROL
    654  f2a0		       2a		      ROL
    655  f2a1		       85 b0		      STA	Tmp0
    656  f2a3		       a5 f3		      LDA	Player1SpeedH
    657  f2a5		       0a		      ASL
    658  f2a6		       0a		      ASL
    659  f2a7		       0a		      ASL
    660  f2a8		       05 b0		      ORA	Tmp0
    661  f2aa		       aa		      TAX		; 2
    662  f2ab		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    663  f2ae		       85 d2		      STA	ScoreD2	;3
    664  f2b0
    665  f2b0				   OpDistanceCheckpointCount		; Will run all letters in the future
    666  f2b0		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    667  f2b2		       29 f0		      AND	#%11110000	;2
    668  f2b4		       4a		      LSR
    669  f2b5		       4a		      LSR
    670  f2b6		       4a		      LSR
    671  f2b7		       4a		      LSR
    672  f2b8		       aa		      TAX		; 2
    673  f2b9		       bd 6c fc 	      LDA	FontLookup,X	;4 
    674  f2bc		       85 d1		      STA	ScoreD1	;3
    675  f2be
    676  f2be				   OpDistanceBar		; 16 subdivisions per checkpoint
    677  f2be		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    678  f2c0		       29 0f		      AND	#%00001111	;2
    679  f2c2		       aa		      TAX		; 2
    680  f2c3		       bd 7d fc 	      LDA	BarLookup,X	;4 
    681  f2c6		       85 d0		      STA	ScoreD0	;3
    682  f2c8		       4c ec f2 	      JMP	RightScoreWriteEnd
    683  f2cb
    684  f2cb				   PrintHellwayRight
    685  f2cb		       a5 8d		      LDA	FrameCount1
    686  f2cd		       29 01		      AND	#1
    687  f2cf		       d0 05		      BNE	PrintCreditsRight
    688  f2d1		       a2 0a		      LDX	#<HellwayRightText
    689  f2d3		       4c d8 f2 	      JMP	PrintRightIntro
    690  f2d6				   PrintCreditsRight
    691  f2d6		       a2 14		      LDX	#<YearText
    692  f2d8				   PrintRightIntro
    693  f2d8		       20 e5 f6 	      JSR	PrintStaticText
    694  f2db		       4c ec f2 	      JMP	RightScoreWriteEnd
    695  f2de				   PrintGameOver
    696  f2de		       a5 8c		      LDA	FrameCount0
    697  f2e0		       30 05		      BMI	PrintOverText
    698  f2e2		       a2 19		      LDX	#<GameText
    699  f2e4		       4c e9 f2 	      JMP	StoreGameOverText
    700  f2e7				   PrintOverText
    701  f2e7		       a2 1e		      LDX	#<OverText
    702  f2e9				   StoreGameOverText
    703  f2e9		       20 e5 f6 	      JSR	PrintStaticText
    704  f2ec				   RightScoreWriteEnd
    705  f2ec
    706  f2ec
    707  f2ec				   ScoreBackgroundColor
    708  f2ec		       a2 00		      LDX	#0
    709  f2ee		       ad 82 02 	      LDA	SWCHB
    710  f2f1		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    711  f2f3		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    712  f2f5		       f0 04		      BEQ	BlackAndWhiteScoreBg
    713  f2f7		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    714  f2f9		       a2 03		      LDX	#BACKGROUND_COLOR
    715  f2fb				   BlackAndWhiteScoreBg
    716  f2fb		       85 b2		      STA	Tmp2	; Score Background
    717  f2fd		       86 b3		      STX	Tmp3	; Traffic Background
    718  f2ff
    719  f2ff				   ConfigurePFForScore
    720  f2ff							;LDA #SCORE_BACKGROUND_COLOR; Done above
    721  f2ff		       85 09		      STA	COLUBK
    722  f301		       20 54 f6 	      JSR	ClearAll
    723  f304		       a9 02		      LDA	#%00000010	; Score mode
    724  f306		       85 0a		      STA	CTRLPF
    725  f308		       a5 de		      LDA	TextSide	;3
    726  f30a		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    727  f30c				   RightScoreOn
    728  f30c		       a5 ca		      LDA	OpScoreFontColor
    729  f30e		       85 07		      STA	COLUP1
    730  f310		       a5 b2		      LDA	Tmp2
    731  f312		       85 06		      STA	COLUP0
    732  f314		       4c 1f f3 	      JMP	CallWaitForVblankEnd
    733  f317				   LeftScoreOn
    734  f317		       a5 c9		      LDA	ScoreFontColor
    735  f319		       85 06		      STA	COLUP0
    736  f31b		       a5 b2		      LDA	Tmp2
    737  f31d		       85 07		      STA	COLUP1
    738  f31f
    739  f31f							; After here we are going to update the screen, No more heavy code
    740  f31f				   CallWaitForVblankEnd
    741  f31f		       20 78 f8 	      JSR	WaitForVblankEnd
    742  f322
    743  f322				   DrawScoreHud
    744  f322		       20 03 f7 	      JSR	PrintScore
    745  f325
    746  f325		       85 02		      STA	WSYNC
    747  f327
    748  f327		       a5 0c		      LDA	INPT4	;3
    749  f329							;BPL WaitAnotherScoreLine ; Draw traffic while button is pressed.
    750  f329		       4c 3c f3 	      JMP	WaitAnotherScoreLine	; Temporary disabling score, please enable line above!
    751  f32c		       a5 c9		      LDA	ScoreFontColor
    752  f32e		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    753  f330		       d0 0a		      BNE	WaitAnotherScoreLine
    754  f332		       a5 de		      LDA	TextSide	;3
    755  f334		       d0 03		      BNE	LeftScoreOnGameOver
    756  f336		       4c 52 f8 	      JMP	DrawGameOverScreenRight
    757  f339				   LeftScoreOnGameOver
    758  f339		       4c c4 f7 	      JMP	DrawGameOverScreenLeft
    759  f33c
    760  f33c				   WaitAnotherScoreLine
    761  f33c		       85 02		      STA	WSYNC
    762  f33e
    763  f33e				   PrepareForTraffic
    764  f33e		       20 6a f6 	      JSR	ClearPF	; 32
    765  f341
    766  f341		       85 02		      STA	WSYNC
    767  f343		       85 2a		      STA	HMOVE
    768  f345		       85 02		      STA	WSYNC
    769  f347		       85 2a		      STA	HMOVE
    770  f349
    771  f349		       a9 30		      LDA	#%00110000	; 2 Score mode
    772  f34b		       85 0a		      STA	CTRLPF	;3
    773  f34d
    774  f34d		       a5 8c		      LDA	FrameCount0	;3
    775  f34f		       29 01		      AND	#%00000001	;2
    776  f351		       aa		      TAX		;2
    777  f352		       b5 c2		      LDA	TrafficColor,X	;4
    778  f354		       85 08		      STA	COLUPF	;3
    779  f356
    780  f356		       a9 96		      LDA	#PLAYER1_COLOR	;2
    781  f358		       85 07		      STA	COLUP1	;3
    782  f35a
    783  f35a		       a5 c9		      LDA	ScoreFontColor	;3
    784  f35c		       85 06		      STA	COLUP0	;3
    785  f35e
    786  f35e		       a5 ca		      LDA	OpScoreFontColor	;3
    787  f360		       85 07		      STA	COLUP1	;3
    788  f362
    789  f362		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    790  f364
      0  f364					      SLEEP	24	; Keep the backround color more time, only needed if still support non dark mode
      1  f364				   .CYCLES    SET	24
      2  f364
      3  f364				  -	      IF	.CYCLES < 2
      4  f364				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f364				  -	      ERR
      6  f364					      ENDIF
      7  f364
      8  f364				  -	      IF	.CYCLES & 1
      9  f364				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f364				  -	      nop	0
     11  f364				  -	      ELSE
     12  f364				  -	      bit	VSYNC
     13  f364				  -	      ENDIF
     14  f364				  -.CYCLES    SET	.CYCLES - 3
     15  f364					      ENDIF
     16  f364
     17  f364					      REPEAT	.CYCLES / 2
     18  f364		       ea		      nop
     17  f364					      REPEND
     18  f365		       ea		      nop
     17  f365					      REPEND
     18  f366		       ea		      nop
     17  f366					      REPEND
     18  f367		       ea		      nop
     17  f367					      REPEND
     18  f368		       ea		      nop
     17  f368					      REPEND
     18  f369		       ea		      nop
     17  f369					      REPEND
     18  f36a		       ea		      nop
     17  f36a					      REPEND
     18  f36b		       ea		      nop
     17  f36b					      REPEND
     18  f36c		       ea		      nop
     17  f36c					      REPEND
     18  f36d		       ea		      nop
     17  f36d					      REPEND
     18  f36e		       ea		      nop
     17  f36e					      REPEND
     18  f36f		       ea		      nop
     19  f370					      REPEND
    792  f370
    793  f370		       a6 b3		      LDX	Tmp3	; Background color.
    794  f372
    795  f372		       a5 8c		      LDA	FrameCount0	;Brach flag
    796  f374		       29 01		      AND	#%00000001
    797  f376
    798  f376		       86 09		      STX	COLUBK	;3
    799  f378		       d0 05		      BNE	OpDrawCache	;2
    800  f37a		       4c 39 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    801  f37d							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    802  f37d
    803  f37d							;main scanline loop...
    804  f37d				   OpScanLoop
    805  f37d		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    806  f37f
    807  f37f							;Start of next line!			
    808  f37f				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    809  f37f
    810  f37f		       a5 80		      LDA	GRP0Cache	;3
    811  f381		       85 1b		      STA	GRP0	;3
    812  f383
    813  f383		       a5 84		      LDA	GRP1Cache	;3
    814  f385		       85 1c		      STA	GRP1	;3
    815  f387
    816  f387		       a5 85		      LDA	ENABLCache	;3
    817  f389		       85 1f		      STA	ENABL	;3
    818  f38b
    819  f38b		       a5 86		      LDA	ENAM0Cache	;3
    820  f38d		       85 1d		      STA	ENAM0	;3
    821  f38f
    822  f38f		       a5 87		      LDA	ENAM1Cache	;3
    823  f391		       85 1e		      STA	ENAM1	;3
    824  f393
    825  f393		       a5 81		      LDA	PF0Cache	;3
    826  f395		       85 0d		      STA	PF0	;3
    827  f397
    828  f397		       a9 00		      LDA	#0	;2
    829  f399							;STA PF0	     ;3
    830  f399		       85 80		      STA	GRP0Cache	;3
    831  f39b		       85 86		      STA	ENAM0Cache	;3
    832  f39d		       85 85		      STA	ENABLCache	;3
    833  f39f		       85 87		      STA	ENAM1Cache	; 3
    834  f3a1							;STA GRP1Cache ;3
    835  f3a1		       85 0d		      STA	PF0	;3
    836  f3a3							;STA PF2	     ;3
    837  f3a3
    838  f3a3		       a5 83		      LDA	PF2Cache	;3
    839  f3a5		       85 0f		      STA	PF2	;3
    840  f3a7
    841  f3a7				   OpDrawCar0
    842  f3a7		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    843  f3a9		       b0 04		      BCS	OpSkipDrawCar	;2
    844  f3ab		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    845  f3ad		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    846  f3af				   OpSkipDrawCar
    847  f3af
    848  f3af							;BEQ DrawTraffic3
    849  f3af				   OpDrawTraffic1		; 33
    850  f3af		       98		      TYA		; 2
    851  f3b0		       18		      CLC		; 2 
    852  f3b1		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    853  f3b3		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    854  f3b5		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    855  f3b7		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    856  f3b9		       4c be f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    857  f3bc				   OpEorOffsetWithCarry
    858  f3bc		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    859  f3be				   OpAfterEorOffsetWithCarry		;17
    860  f3be		       aa		      TAX		;2
    861  f3bf		       bd 00 fe 	      LDA	AesTable,X	; 4
    862  f3c2		       c5 bf		      CMP	OpTrafficChance	;3
    863  f3c4		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    864  f3c6		       a9 ff		      LDA	#$FF	;2
    865  f3c8		       85 86		      STA	ENAM0Cache	;3
    866  f3ca				   OpFinishDrawTraffic1
    867  f3ca
    868  f3ca				   OpErasePF2
    869  f3ca		       a9 00		      LDA	#0
    870  f3cc		       85 0f		      STA	PF2
    871  f3ce
    872  f3ce				   OpDrawTraffic2		; 33
    873  f3ce		       98		      TYA		; 2
    874  f3cf		       18		      CLC		; 2 
    875  f3d0		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    876  f3d2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    877  f3d4		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    878  f3d6		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    879  f3d8		       4c dd f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    880  f3db				   OpEorOffsetWithCarry2
    881  f3db		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    882  f3dd				   OpAfterEorOffsetWithCarry2		;17
    883  f3dd		       aa		      TAX		;2
    884  f3de		       bd 00 fe 	      LDA	AesTable,X	; 4
    885  f3e1		       c5 bf		      CMP	OpTrafficChance	;3
    886  f3e3		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    887  f3e5		       a9 02		      LDA	#%00000010	;2
    888  f3e7		       85 85		      STA	ENABLCache	;3
    889  f3e9				   OpFinishDrawTraffic2
    890  f3e9
    891  f3e9							;STA WSYNC ;65 / 137
    892  f3e9
    893  f3e9							; LDA Tmp0 ; Flicker this line if drawing car
    894  f3e9							; BEQ FinishDrawTraffic4
    895  f3e9				   OpDrawTraffic3		; 33
    896  f3e9		       98		      TYA		; 2
    897  f3ea		       18		      CLC		; 2 
    898  f3eb		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    899  f3ed		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    900  f3ef		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    901  f3f1		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    902  f3f3		       4c f8 f3 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    903  f3f6				   OpEorOffsetWithCarry3
    904  f3f6		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    905  f3f8				   OpAfterEorOffsetWithCarry3		;17
    906  f3f8		       aa		      TAX		;2
    907  f3f9		       bd 00 fe 	      LDA	AesTable,X	; 4
    908  f3fc		       c5 bf		      CMP	OpTrafficChance	;3
    909  f3fe		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    910  f400		       a9 02		      LDA	#%00000010	;2
    911  f402		       85 87		      STA	ENAM1Cache
    912  f404				   OpFinishDrawTraffic3
    913  f404
    914  f404				   OpDrawOponent		;26
    915  f404		       84 b0		      STY	Tmp0	;3
    916  f406		       a4 cf		      LDY	OpponentLine	;3
    917  f408		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    918  f40a		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    919  f40c				   OpDrawOpponent
    920  f40c		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    921  f40e		       85 80		      STA	GRP0Cache	;3
    922  f410		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    923  f412		       a4 b0		      LDY	Tmp0	;3
    924  f414		       4c 28 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    925  f417				   OpSkipDrawOpponent
    926  f417		       c6 cf		      DEC	OpponentLine	;5
    927  f419		       a4 b0		      LDY	Tmp0	;3
    928  f41b
    929  f41b
    930  f41b				   OpDrawTraffic0		; 21 2pe
    931  f41b		       98		      TYA		; 2
    932  f41c		       18		      CLC		; 2 
    933  f41d		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    934  f41f		       29 08		      AND	#%00001000	;2
    935  f421		       f0 05		      BEQ	OpHasNoBorderP0	;3
    936  f423				   OpHasBorderP0
    937  f423		       a9 70		      LDA	#%01110000	; 2
    938  f425		       4c 2a f4 	      JMP	OpStoreBorderP0	; 3
    939  f428				   OpHasNoBorderP0
    940  f428		       a9 00		      LDA	#0	; 2
    941  f42a				   OpStoreBorderP0
    942  f42a		       85 81		      STA	PF0Cache	; 3
    943  f42c		       85 83		      STA	PF2Cache	; 3
    944  f42e
    945  f42e				   OpSkipDrawTraffic0
    946  f42e
    947  f42e				   OpWhileScanLoop
    948  f42e		       88		      DEY		;2
    949  f42f		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    950  f431		       4c 7d f3 	      JMP	OpScanLoop	;3
    951  f434				   OpFinishScanLoop		; 7 209 of 222
    952  f434		       4c ec f4 	      JMP	FinishScanLoop
    953  f437
    954  f437							;main scanline loop...
    955  f437				   ScanLoop
    956  f437		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    957  f439
    958  f439							;Start of next line!			
    959  f439				   DrawCache		;63 Is the last line going to the top of the next frame?
    960  f439		       a5 81		      LDA	PF0Cache	;3
    961  f43b		       85 0d		      STA	PF0	;3
    962  f43d
    963  f43d		       a5 80		      LDA	GRP0Cache	;3
    964  f43f		       85 1b		      STA	GRP0	;3
    965  f441
    966  f441		       a5 84		      LDA	GRP1Cache	;3
    967  f443		       85 1c		      STA	GRP1	;3
    968  f445
    969  f445		       a5 86		      LDA	ENAM0Cache	;3
    970  f447		       85 1d		      STA	ENAM0	;3
    971  f449
    972  f449		       a5 85		      LDA	ENABLCache	;3
    973  f44b		       85 1f		      STA	ENABL	;3
    974  f44d
    975  f44d		       a5 87		      LDA	ENAM1Cache	;3
    976  f44f		       85 1e		      STA	ENAM1	;3
    977  f451
    978  f451		       a5 83		      LDA	PF2Cache	;3
    979  f453		       85 0f		      STA	PF2	;3
    980  f455
    981  f455		       a9 00		      LDA	#0	;2
    982  f457		       85 0d		      STA	PF0	;3
    983  f459		       85 84		      STA	GRP1Cache	;3
    984  f45b		       85 85		      STA	ENABLCache	;3
    985  f45d		       85 86		      STA	ENAM0Cache	;3
    986  f45f		       85 87		      STA	ENAM1Cache	; 3
    987  f461							;STA GRP0Cache
    988  f461		       85 0f		      STA	PF2	;3
    989  f463
    990  f463				   DrawCar0
    991  f463		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    992  f465		       b0 04		      BCS	SkipDrawCar	;2
    993  f467		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    994  f469		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
    995  f46b				   SkipDrawCar
    996  f46b
    997  f46b							;BEQ DrawTraffic3
    998  f46b				   DrawTraffic1 		; 33
    999  f46b		       98		      TYA		; 2
   1000  f46c		       18		      CLC		; 2 
   1001  f46d		       65 95		      ADC	TrafficOffset1 + 1	;3
   1002  f46f		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1003  f471		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1004  f473		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1005  f475		       4c 7a f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1006  f478				   EorOffsetWithCarry
   1007  f478		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1008  f47a				   AfterEorOffsetWithCarry		;17
   1009  f47a		       aa		      TAX		;2
   1010  f47b		       bd 00 fe 	      LDA	AesTable,X	; 4
   1011  f47e		       c5 be		      CMP	TrafficChance	;3
   1012  f480		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1013  f482		       a9 ff		      LDA	#$FF	;2
   1014  f484		       85 86		      STA	ENAM0Cache	;3
   1015  f486				   FinishDrawTraffic1
   1016  f486
   1017  f486				   DrawTraffic2 		; 33
   1018  f486		       98		      TYA		; 2
   1019  f487		       18		      CLC		; 2 
   1020  f488		       65 99		      ADC	TrafficOffset2 + 1	;3
   1021  f48a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1022  f48c		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1023  f48e		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1024  f490		       4c 95 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1025  f493				   EorOffsetWithCarry2
   1026  f493		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1027  f495				   AfterEorOffsetWithCarry2		;17
   1028  f495		       aa		      TAX		;2
   1029  f496		       bd 00 fe 	      LDA	AesTable,X	; 4
   1030  f499		       c5 be		      CMP	TrafficChance	;3
   1031  f49b		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1032  f49d		       a9 02		      LDA	#%00000010	;2
   1033  f49f		       85 85		      STA	ENABLCache	;3
   1034  f4a1				   FinishDrawTraffic2
   1035  f4a1
   1036  f4a1							;STA WSYNC ;65 / 137
   1037  f4a1
   1038  f4a1							; LDA Tmp0 ; Flicker this line if drawing car
   1039  f4a1							; BEQ FinishDrawTraffic4
   1040  f4a1				   DrawTraffic3 		; 33
   1041  f4a1		       98		      TYA		; 2
   1042  f4a2		       18		      CLC		; 2 
   1043  f4a3		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1044  f4a5		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1045  f4a7		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1046  f4a9		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1047  f4ab		       4c b0 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1048  f4ae				   EorOffsetWithCarry3
   1049  f4ae		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1050  f4b0				   AfterEorOffsetWithCarry3		;17
   1051  f4b0		       aa		      TAX		;2
   1052  f4b1		       bd 00 fe 	      LDA	AesTable,X	; 4
   1053  f4b4		       c5 be		      CMP	TrafficChance	;3
   1054  f4b6		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1055  f4b8		       a9 02		      LDA	#%00000010	;2
   1056  f4ba		       85 87		      STA	ENAM1Cache
   1057  f4bc				   FinishDrawTraffic3
   1058  f4bc
   1059  f4bc
   1060  f4bc				   DrawOponent		;26
   1061  f4bc		       84 b0		      STY	Tmp0	;3
   1062  f4be		       a4 cf		      LDY	OpponentLine	;3
   1063  f4c0		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1064  f4c2		       b0 0b		      BCS	SkipDrawOpponent	;2
   1065  f4c4				   DrawOpponent
   1066  f4c4		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1067  f4c6		       85 84		      STA	GRP1Cache	;3
   1068  f4c8		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1069  f4ca		       a4 b0		      LDY	Tmp0	;3
   1070  f4cc		       4c e0 f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1071  f4cf				   SkipDrawOpponent
   1072  f4cf		       c6 cf		      DEC	OpponentLine	;5
   1073  f4d1		       a4 b0		      LDY	Tmp0	;3
   1074  f4d3
   1075  f4d3				   DrawTraffic0 		; 21 2pe
   1076  f4d3		       98		      TYA		; 2
   1077  f4d4		       18		      CLC		; 2 
   1078  f4d5		       65 91		      ADC	TrafficOffset0 + 1	;3
   1079  f4d7		       29 08		      AND	#%00001000	;2
   1080  f4d9		       f0 05		      BEQ	HasNoBorderP0	;3
   1081  f4db				   HasBorderP0
   1082  f4db		       a9 70		      LDA	#%01110000	; 2
   1083  f4dd		       4c e2 f4 	      JMP	StoreBorderP0	; 3
   1084  f4e0				   HasNoBorderP0
   1085  f4e0		       a9 00		      LDA	#0	; 2
   1086  f4e2				   StoreBorderP0
   1087  f4e2		       85 81		      STA	PF0Cache	; 3
   1088  f4e4		       85 83		      STA	PF2Cache	; 3
   1089  f4e6
   1090  f4e6				   SkipDrawTraffic0
   1091  f4e6
   1092  f4e6				   WhileScanLoop
   1093  f4e6		       88		      DEY		;2
   1094  f4e7		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1095  f4e9		       4c 37 f4 	      JMP	ScanLoop	;3
   1096  f4ec				   FinishScanLoop		; 7 209 of 222
   1097  f4ec
   1098  f4ec		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1099  f4ee		       20 79 f6 	      JSR	LoadAll
   1100  f4f1		       85 02		      STA	WSYNC	; do stuff!
   1101  f4f3		       85 02		      STA	WSYNC
   1102  f4f5		       85 02		      STA	WSYNC
   1103  f4f7
   1104  f4f7				   PrepareOverscan
   1105  f4f7		       a9 02		      LDA	#2
   1106  f4f9		       85 02		      STA	WSYNC
   1107  f4fb							;STA HMOVE	; HMOVE 10
   1108  f4fb		       85 01		      STA	VBLANK
   1109  f4fd
   1110  f4fd		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1111  f4ff		       8d 96 02 	      STA	TIM64T
   1112  f502
   1113  f502		       85 2b		      STA	HMCLR	; Before we process car movement
   1114  f504							;Read Fire Button before, will make it start the game for now.
   1115  f504				   StartGame
   1116  f504		       a5 0c		      LDA	INPT4	;3
   1117  f506		       25 0d		      AND	INPT5	;3 player 
   1118  f508		       30 38		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1119  f50a		       a5 8c		      LDA	FrameCount0
   1120  f50c		       29 01		      AND	#%00000001
   1121  f50e		       d0 32		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1122  f510		       a5 bd		      LDA	GameStatus	;3
   1123  f512		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1124  f514		       d0 2c		      BNE	SkipGameStart
   1125  f516		       a5 c6		      LDA	GameMode
   1126  f518		       c9 10		      CMP	#MAX_GAME_MODE
   1127  f51a		       d0 0b		      BNE	SetGameRunning
   1128  f51c		       a9 00		      LDA	#0
   1129  f51e		       85 c6		      STA	GameMode
   1130  f520		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1131  f522		       85 bc		      STA	SwitchDebounceCounter
   1132  f524		       4c 42 f5 	      JMP	SkipGameStart
   1133  f527				   SetGameRunning
   1134  f527		       e6 bd		      INC	GameStatus
   1135  f529		       a9 00		      LDA	#0	;
   1136  f52b		       85 8c		      STA	FrameCount0
   1137  f52d		       85 8d		      STA	FrameCount1
   1138  f52f		       a9 0a		      LDA	#10
   1139  f531		       85 19		      STA	AUDV0
   1140  f533		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1141  f535		       85 c9		      STA	ScoreFontColor
   1142  f537		       85 ca		      STA	OpScoreFontColor
   1143  f539		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1144  f53b		       85 cb		      STA	ScoreFontColorHoldChange
   1145  f53d		       85 cc		      STA	OpScoreFontColorHoldChange
   1146  f53f		       4c b0 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1147  f542				   SkipGameStart
   1148  f542
   1149  f542				   ReadSwitches
   1150  f542		       a6 bc		      LDX	SwitchDebounceCounter
   1151  f544		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1152  f546		       a9 01		      LDA	#%00000001
   1153  f548		       2c 82 02 	      BIT	SWCHB
   1154  f54b		       d0 07		      BNE	SkipReset
   1155  f54d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1156  f54f		       85 bc		      STA	SwitchDebounceCounter
   1157  f551		       4c b8 f5 	      JMP	OverScanWaitBeforeReset
   1158  f554				   SkipReset
   1159  f554
   1160  f554				   GameModeSelect
   1161  f554		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1162  f556		       d0 1c		      BNE	SkipGameSelect
   1163  f558		       20 a5 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1164  f55b				   ContinueGameSelect
   1165  f55b		       a9 02		      LDA	#%00000010
   1166  f55d		       2c 82 02 	      BIT	SWCHB
   1167  f560		       d0 12		      BNE	SkipGameSelect
   1168  f562		       a6 c6		      LDX	GameMode
   1169  f564		       e0 10		      CPX	#MAX_GAME_MODE
   1170  f566		       f0 04		      BEQ	ResetGameMode
   1171  f568		       e8		      INX
   1172  f569		       4c 6e f5 	      JMP	StoreGameMode
   1173  f56c				   ResetGameMode
   1174  f56c		       a2 00		      LDX	#0
   1175  f56e				   StoreGameMode
   1176  f56e		       86 c6		      STX	GameMode
   1177  f570		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1178  f572		       85 bc		      STA	SwitchDebounceCounter
   1179  f574				   SkipGameSelect
   1180  f574		       4c 79 f5 	      JMP	EndReadSwitches
   1181  f577				   DecrementSwitchDebounceCounter
   1182  f577		       c6 bc		      DEC	SwitchDebounceCounter
   1183  f579				   EndReadSwitches
   1184  f579
   1185  f579				   DoNotTurnBeforeStart
   1186  f579							;STA HMCLR
   1187  f579		       a5 bd		      LDA	GameStatus
   1188  f57b		       f0 33		      BEQ	OverScanWait
   1189  f57d
   1190  f57d							; Last thing, will overrride hmove
   1191  f57d				   CallTestColisionAndMove
   1192  f57d		       a2 00		      LDX	#0	; Player 0
   1193  f57f							; Colision with traffic, each player check different flags,
   1194  f57f		       a5 8c		      LDA	FrameCount0
   1195  f581		       29 01		      AND	#%00000001
   1196  f583		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1197  f585		       20 3c f9 	      JSR	IsOpponentColliding
   1198  f588		       05 01		      ORA	CXM1P
   1199  f58a		       4a		      LSR
   1200  f58b		       05 00		      ORA	CXM0P
   1201  f58d		       05 02		      ORA	CXP0FB
   1202  f58f							; ORA CXPPMM ; Collision between players will have its own rules
   1203  f58f				   SkipColisionPlayer0		; Should not colide on opponent side.
   1204  f58f		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1205  f591		       85 b2		      STA	Tmp2
   1206  f593		       20 50 f9 	      JSR	TestCollisionAndMove
   1207  f596
   1208  f596		       e8		      INX		; player 1
   1209  f597		       a5 8c		      LDA	FrameCount0
   1210  f599		       29 01		      AND	#%00000001
   1211  f59b		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1212  f59d		       20 3c f9 	      JSR	IsOpponentColliding
   1213  f5a0		       05 00		      ORA	CXM0P
   1214  f5a2		       4a		      LSR
   1215  f5a3		       05 01		      ORA	CXM1P
   1216  f5a5		       05 03		      ORA	CXP1FB
   1217  f5a7				   SkipColisionPlayer1
   1218  f5a7		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1219  f5a9		       85 b2		      STA	Tmp2
   1220  f5ab		       20 50 f9 	      JSR	TestCollisionAndMove
   1221  f5ae
   1222  f5ae				   ClearCollision
   1223  f5ae		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1224  f5b0
   1225  f5b0				   OverScanWait
   1226  f5b0		       ad 84 02 	      LDA	INTIM
   1227  f5b3		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1228  f5b5		       4c de f0 	      JMP	MainLoop
   1229  f5b8
   1230  f5b8				   OverScanWaitBeforeReset
   1231  f5b8		       ad 84 02 	      LDA	INTIM
   1232  f5bb		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1233  f5bd		       4c 14 f0 	      JMP	Start
   1234  f5c0
   1235  f5c0				   Subroutines
   1236  f5c0
   1237  f5c0				   ProcessSound
   1238  f5c0				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1239  f5c0		       a5 c9		      LDA	ScoreFontColor	;3
   1240  f5c2		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1241  f5c4		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1242  f5c6		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1243  f5c8		       f0 29		      BEQ	PlayCheckpoint	;2
   1244  f5ca		       a5 8e		      LDA	CollisionCounter	;3
   1245  f5cc		       c9 e0		      CMP	#$E0	;2
   1246  f5ce		       b0 14		      BCS	PlayColision	;2
   1247  f5d0		       a5 cd		      LDA	NextCheckpoint	;3
   1248  f5d2		       38		      SEC		;2
   1249  f5d3		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1250  f5d5		       c9 02		      CMP	#$02	;2
   1251  f5d7		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1252  f5d9		       a5 b8		      LDA	CountdownTimer	; 3
   1253  f5db		       f0 53		      BEQ	EngineSound	;2
   1254  f5dd		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1255  f5df		       90 37		      BCC	PlayWarnTimeEnding	;4
   1256  f5e1		       4c 30 f6 	      JMP	EngineSound	;3
   1257  f5e4				   PlayColision
   1258  f5e4		       a9 1f		      LDA	#31
   1259  f5e6		       85 17		      STA	AUDF0
   1260  f5e8		       a9 08		      LDA	#8
   1261  f5ea		       85 15		      STA	AUDC0
   1262  f5ec		       a9 08		      LDA	#8
   1263  f5ee		       85 19		      STA	AUDV0
   1264  f5f0		       4c 53 f6 	      JMP	EndSound
   1265  f5f3
   1266  f5f3				   PlayCheckpoint
   1267  f5f3		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1268  f5f5		       4a		      LSR		;2
   1269  f5f6		       4a		      LSR		;2
   1270  f5f7		       4a		      LSR		;2
   1271  f5f8		       85 17		      STA	AUDF0	;3
   1272  f5fa		       a9 0c		      LDA	#12	;2
   1273  f5fc		       85 15		      STA	AUDC0	;3
   1274  f5fe		       a9 06		      LDA	#6	;2
   1275  f600		       85 19		      STA	AUDV0	;3
   1276  f602		       4c 53 f6 	      JMP	EndSound	;3
   1277  f605
   1278  f605				   PlayBeforeCheckpoint
   1279  f605		       a5 8c		      LDA	FrameCount0	;3
   1280  f607		       29 1c		      AND	#%00011100	;2
   1281  f609		       09 03		      ORA	#%00000011	;2
   1282  f60b		       85 17		      STA	AUDF0	;3
   1283  f60d		       a9 0c		      LDA	#12	;2
   1284  f60f		       85 15		      STA	AUDC0	;3
   1285  f611		       a9 03		      LDA	#3	;2
   1286  f613		       85 19		      STA	AUDV0	;3
   1287  f615		       4c 53 f6 	      JMP	EndSound	;3
   1288  f618
   1289  f618				   PlayWarnTimeEnding
   1290  f618		       a5 8c		      LDA	FrameCount0	;3
   1291  f61a		       29 04		      AND	#%00000100	;2
   1292  f61c		       f0 12		      BEQ	EngineSound	;2 Bip at regular intervals
   1293  f61e		       18		      CLC		;2
   1294  f61f		       a9 0a		      LDA	#10	;2
   1295  f621		       65 b8		      ADC	CountdownTimer	;2
   1296  f623		       85 17		      STA	AUDF0	;3
   1297  f625		       a9 0c		      LDA	#12	;2
   1298  f627		       85 15		      STA	AUDC0	;3
   1299  f629		       a9 03		      LDA	#3	;2
   1300  f62b		       85 19		      STA	AUDV0	;3
   1301  f62d		       4c 53 f6 	      JMP	EndSound	;3
   1302  f630
   1303  f630				   EngineSound		;41
   1304  f630		       a5 b8		      LDA	CountdownTimer	;3
   1305  f632		       f0 1b		      BEQ	EngineOff	;2
   1306  f634		       a6 d5		      LDX	Gear
   1307  f636		       a5 f0		      LDA	Player0SpeedL	;3
   1308  f638		       4a		      LSR		;2
   1309  f639		       4a		      LSR		;2
   1310  f63a		       4a		      LSR		;2
   1311  f63b		       29 0f		      AND	#%00001111	;2
   1312  f63d		       85 b0		      STA	Tmp0	;3
   1313  f63f		       bd 49 ff 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1314  f642		       38		      SEC		;2
   1315  f643		       e5 b0		      SBC	Tmp0	;3
   1316  f645		       85 17		      STA	AUDF0	;3
   1317  f647		       bd 43 ff 	      LDA	EngineSoundType,X	;4
   1318  f64a		       85 15		      STA	AUDC0	;3
   1319  f64c		       4c 53 f6 	      JMP	EndEngineSound	;3
   1320  f64f				   EngineOff
   1321  f64f		       a9 00		      LDA	#0
   1322  f651		       85 15		      STA	AUDC0
   1323  f653				   EndEngineSound
   1324  f653				   EndSound
   1325  f653		       60		      RTS
   1326  f654
   1327  f654				   ClearAll		; 58
   1328  f654		       a9 00		      LDA	#0	;2
   1329  f656		       85 1b		      STA	GRP0	;3
   1330  f658		       85 1c		      STA	GRP1	;3
   1331  f65a		       85 1f		      STA	ENABL	;3
   1332  f65c		       85 1d		      STA	ENAM0	;3
   1333  f65e		       85 1e		      STA	ENAM1	;3
   1334  f660		       85 80		      STA	GRP0Cache	;3
   1335  f662		       85 84		      STA	GRP1Cache	;3
   1336  f664		       85 85		      STA	ENABLCache	;3
   1337  f666		       85 86		      STA	ENAM0Cache	;3
   1338  f668		       85 87		      STA	ENAM1Cache	;3
   1339  f66a
   1340  f66a				   ClearPF		; 26
   1341  f66a		       a9 00		      LDA	#0	;2
   1342  f66c				   ClearPFSkipLDA0
   1343  f66c		       85 0d		      STA	PF0	;3
   1344  f66e		       85 0e		      STA	PF1	;3
   1345  f670		       85 0f		      STA	PF2	;3	
   1346  f672		       85 81		      STA	PF0Cache	;3
   1347  f674		       85 82		      STA	PF1Cache	;3
   1348  f676		       85 83		      STA	PF2Cache	;3 
   1349  f678		       60		      RTS		;6
   1350  f679				   EndClearAll
   1351  f679
   1352  f679				   LoadAll		; 48
   1353  f679		       a5 81		      LDA	PF0Cache	;3
   1354  f67b		       85 0d		      STA	PF0	;3
   1355  f67d
   1356  f67d		       a5 82		      LDA	PF1Cache	;3
   1357  f67f		       85 0e		      STA	PF1	;3
   1358  f681
   1359  f681		       a5 83		      LDA	PF2Cache	;3
   1360  f683		       85 0f		      STA	PF2	;3
   1361  f685
   1362  f685		       a5 84		      LDA	GRP1Cache	;3
   1363  f687		       85 1c		      STA	GRP1	;3
   1364  f689
   1365  f689		       a5 85		      LDA	ENABLCache	;3
   1366  f68b		       85 1f		      STA	ENABL	;3
   1367  f68d
   1368  f68d		       a5 86		      LDA	ENAM0Cache	;3
   1369  f68f		       85 1d		      STA	ENAM0	;3
   1370  f691
   1371  f691		       a5 87		      LDA	ENAM1Cache	;3
   1372  f693		       85 1e		      STA	ENAM1	;3
   1373  f695
   1374  f695		       60		      RTS		;6
   1375  f696				   EndLoadAll
   1376  f696
   1377  f696				   NextDifficulty		;Is a SBR
   1378  f696		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1379  f698		       29 01		      AND	#%00000001
   1380  f69a		       d0 24		      BNE	CheckRandomDifficulty
   1381  f69c
   1382  f69c		       b5 c4		      LDA	CurrentDifficulty,X
   1383  f69e		       18		      CLC
   1384  f69f		       69 01		      ADC	#1
   1385  f6a1		       29 03		      AND	#%00000011	; 0 to 3
   1386  f6a3		       95 c4		      STA	CurrentDifficulty,X
   1387  f6a5
   1388  f6a5				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1389  f6a5		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1390  f6a7		       b9 c5 ff 	      LDA	TrafficChanceTable,Y
   1391  f6aa		       95 be		      STA	TrafficChance,X
   1392  f6ac		       b9 c1 ff 	      LDA	TrafficColorTable,Y
   1393  f6af		       95 c2		      STA	TrafficColor,X
   1394  f6b1
   1395  f6b1		       a5 c6		      LDA	GameMode	;
   1396  f6b3		       29 01		      AND	#%00000001
   1397  f6b5		       f0 03		      BEQ	UseNextDifficultyTime
   1398  f6b7		       4c bb f6 	      JMP	StoreDifficultyTime
   1399  f6ba				   UseNextDifficultyTime
   1400  f6ba		       c8		      INY
   1401  f6bb				   StoreDifficultyTime
   1402  f6bb		       b9 c9 ff 	      LDA	TrafficTimeTable,Y
   1403  f6be		       95 c0		      STA	CheckpointTime,X
   1404  f6c0
   1405  f6c0				   CheckRandomDifficulty
   1406  f6c0		       a5 c6		      LDA	GameMode
   1407  f6c2		       29 08		      AND	#%00001000	; Random difficulties
   1408  f6c4		       f0 09		      BEQ	ReturnFromNextDifficulty
   1409  f6c6				   RandomDifficulty		; need work to make 2 players compatible
   1410  f6c6		       a4 8c		      LDY	FrameCount0
   1411  f6c8		       b9 00 fe 	      LDA	AesTable,Y
   1412  f6cb							;EOR TrafficChance, no need, lets make life simple
   1413  f6cb		       29 3f		      AND	#%00111111
   1414  f6cd		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1415  f6cf
   1416  f6cf				   ReturnFromNextDifficulty
   1417  f6cf		       60		      RTS
   1418  f6d0
   1419  f6d0				   DefaultOffsets
   1420  f6d0		       a9 20		      LDA	#$20
   1421  f6d2		       85 96		      STA	TrafficOffset1 + 2
   1422  f6d4		       85 a6		      STA	OpTrafficOffset1 + 2
   1423  f6d6		       a9 40		      LDA	#$40
   1424  f6d8		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1425  f6da		       85 aa		      STA	OpTrafficOffset2 + 2
   1426  f6dc		       a9 60		      LDA	#$60
   1427  f6de		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1428  f6e0		       85 ae		      STA	OpTrafficOffset3 + 2
   1429  f6e2		       a9 80		      LDA	#$80
   1430  f6e4		       60		      RTS
   1431  f6e5
   1432  f6e5				   PrintStaticText		; Preload X with the offset referent to StaticText
   1433  f6e5		       bd 00 ff 	      LDA	StaticText,X
   1434  f6e8		       85 d0		      STA	ScoreD0
   1435  f6ea		       e8		      INX
   1436  f6eb		       bd 00 ff 	      LDA	StaticText,X
   1437  f6ee		       85 d1		      STA	ScoreD1
   1438  f6f0		       e8		      INX
   1439  f6f1		       bd 00 ff 	      LDA	StaticText,X
   1440  f6f4		       85 d2		      STA	ScoreD2
   1441  f6f6		       e8		      INX
   1442  f6f7		       bd 00 ff 	      LDA	StaticText,X
   1443  f6fa		       85 d3		      STA	ScoreD3
   1444  f6fc		       e8		      INX
   1445  f6fd		       bd 00 ff 	      LDA	StaticText,X
   1446  f700		       85 d4		      STA	ScoreD4
   1447  f702		       60		      RTS
   1448  f703
   1449  f703				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1450  f703		       a2 00		      LDX	#0
   1451  f705		       a0 04		      LDY	#FONT_OFFSET
   1452  f707
   1453  f707				   ScoreLoop		; 20 
   1454  f707		       85 02		      STA	WSYNC	;2
   1455  f709		       85 2a		      STA	HMOVE
   1456  f70b
   1457  f70b		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1458  f70d		       85 0d		      STA	PF0	;3
   1459  f70f
   1460  f70f		       a5 82		      LDA	PF1Cache	;3
   1461  f711		       85 0e		      STA	PF1	;3
   1462  f713
   1463  f713		       a5 83		      LDA	PF2Cache	;3
   1464  f715		       85 0f		      STA	PF2	;3
   1465  f717
   1466  f717				   DrawScoreD0		; 15
   1467  f717		       a6 d0		      LDX	ScoreD0	; 3
   1468  f719		       bd 00 fd 	      LDA	Font,X	;4
   1469  f71c		       85 81		      STA	PF0Cache	;3
   1470  f71e		       c6 d0		      DEC	ScoreD0	;5
   1471  f720
   1472  f720				   DrawScoreD1		; 23	
   1473  f720		       a6 d1		      LDX	ScoreD1	; 3
   1474  f722		       bd 00 fd 	      LDA	Font,X	;4
   1475  f725		       0a		      ASL		;2
   1476  f726		       0a		      ASL		;2
   1477  f727		       0a		      ASL		;2
   1478  f728		       0a		      ASL		;2
   1479  f729		       85 82		      STA	PF1Cache	;3
   1480  f72b		       c6 d1		      DEC	ScoreD1	;5
   1481  f72d
   1482  f72d				   DrawScoreD2		; 20
   1483  f72d		       a6 d2		      LDX	ScoreD2	; 3
   1484  f72f		       bd 00 fd 	      LDA	Font,X	;4
   1485  f732		       29 0f		      AND	#%00001111	;2
   1486  f734		       05 82		      ORA	PF1Cache	;3
   1487  f736		       85 82		      STA	PF1Cache	;3
   1488  f738		       c6 d2		      DEC	ScoreD2	;5
   1489  f73a
   1490  f73a				   DrawScoreD3		; 23
   1491  f73a		       a6 d3		      LDX	ScoreD3	; 3
   1492  f73c		       bd 00 fd 	      LDA	Font,X	;4
   1493  f73f		       4a		      LSR		;2
   1494  f740		       4a		      LSR		;2
   1495  f741		       4a		      LSR		;2
   1496  f742		       4a		      LSR		;2
   1497  f743		       85 83		      STA	PF2Cache	;3
   1498  f745		       c6 d3		      DEC	ScoreD3	;5
   1499  f747
   1500  f747				   DrawScoreD4		; 20
   1501  f747		       a6 d4		      LDX	ScoreD4	; 3
   1502  f749		       bd 00 fd 	      LDA	Font,X	;4
   1503  f74c		       29 f0		      AND	#%11110000	;2
   1504  f74e		       05 83		      ORA	PF2Cache	;3
   1505  f750		       85 83		      STA	PF2Cache	;3
   1506  f752		       c6 d4		      DEC	ScoreD4	;5
   1507  f754
   1508  f754
   1509  f754		       88		      DEY		;2
   1510  f755		       10 b0		      BPL	ScoreLoop	;4
   1511  f757
   1512  f757		       85 02		      STA	WSYNC
   1513  f759		       85 2a		      STA	HMOVE
   1514  f75b		       20 79 f6 	      JSR	LoadAll
   1515  f75e		       60		      RTS		; 6
   1516  f75f
   1517  f75f				   PrintRightDecimalDigits
   1518  f75f		       b9 00 00 	      LDA	0,Y
   1519  f762		       4a		      LSR
   1520  f763		       4a		      LSR
   1521  f764		       4a		      LSR
   1522  f765		       4a		      LSR
   1523  f766		       aa		      TAX
   1524  f767		       bd 6c fc 	      LDA	FontLookup,X	;4
   1525  f76a		       85 d2		      STA	ScoreD2	;3
   1526  f76c
   1527  f76c		       b9 00 00 	      LDA	0,Y
   1528  f76f		       29 0f		      AND	#%00001111
   1529  f771		       aa		      TAX
   1530  f772		       bd 6c fc 	      LDA	FontLookup,X	;4
   1531  f775		       85 d3		      STA	ScoreD3	;3
   1532  f777
   1533  f777		       c8		      INY
   1534  f778		       b9 00 00 	      LDA	0,Y
   1535  f77b		       4a		      LSR
   1536  f77c		       4a		      LSR
   1537  f77d		       4a		      LSR
   1538  f77e		       4a		      LSR
   1539  f77f		       aa		      TAX
   1540  f780		       bd 6c fc 	      LDA	FontLookup,X	;4
   1541  f783		       85 d0		      STA	ScoreD0	;3
   1542  f785
   1543  f785		       b9 00 00 	      LDA	0,Y
   1544  f788		       29 0f		      AND	#%00001111
   1545  f78a		       aa		      TAX
   1546  f78b		       bd 6c fc 	      LDA	FontLookup,X	;4
   1547  f78e		       85 d1		      STA	ScoreD1	;3
   1548  f790
   1549  f790		       a9 ae		      LDA	#<Triangle + FONT_OFFSET
   1550  f792		       85 d4		      STA	ScoreD4
   1551  f794		       60		      RTS
   1552  f795
   1553  f795				   PrintLastLeftDecimalDigits
   1554  f795		       b9 00 00 	      LDA	0,Y
   1555  f798		       4a		      LSR
   1556  f799		       4a		      LSR
   1557  f79a		       4a		      LSR
   1558  f79b		       4a		      LSR
   1559  f79c		       aa		      TAX
   1560  f79d		       bd 6c fc 	      LDA	FontLookup,X	;4
   1561  f7a0		       85 d3		      STA	ScoreD3	;3
   1562  f7a2		       b9 00 00 	      LDA	0,Y
   1563  f7a5		       29 0f		      AND	#%00001111
   1564  f7a7		       aa		      TAX
   1565  f7a8		       bd 6c fc 	      LDA	FontLookup,X	;4
   1566  f7ab		       85 d4		      STA	ScoreD4	;3
   1567  f7ad		       60		      RTS
   1568  f7ae
   1569  f7ae				   PrintZerosLeft
   1570  f7ae		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1571  f7b0		       85 d2		      STA	ScoreD2
   1572  f7b2		       85 d3		      STA	ScoreD3
   1573  f7b4		       85 d4		      STA	ScoreD4
   1574  f7b6		       60		      RTS
   1575  f7b7
   1576  f7b7				   DrawGameOverScoreLine
   1577  f7b7		       85 02		      STA	WSYNC
   1578  f7b9		       20 03 f7 	      JSR	PrintScore
   1579  f7bc		       85 02		      STA	WSYNC
   1580  f7be		       85 02		      STA	WSYNC
   1581  f7c0		       20 6a f6 	      JSR	ClearPF
   1582  f7c3		       60		      RTS
   1583  f7c4
   1584  f7c4				   DrawGameOverScreenLeft
   1585  f7c4		       85 02		      STA	WSYNC
   1586  f7c6		       20 6a f6 	      JSR	ClearPF
   1587  f7c9
   1588  f7c9				   DrawGlideTimerLeft
   1589  f7c9		       20 8b f8 	      JSR	Sleep8Lines
   1590  f7cc		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1591  f7ce		       85 06		      STA	COLUP0
   1592  f7d0		       85 02		      STA	WSYNC
   1593  f7d2		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1594  f7d4		       85 d0		      STA	ScoreD0
   1595  f7d6		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1596  f7d8		       85 d1		      STA	ScoreD1
   1597  f7da		       20 ae f7 	      JSR	PrintZerosLeft
   1598  f7dd		       20 b7 f7 	      JSR	DrawGameOverScoreLine
   1599  f7e0
   1600  f7e0				   DrawHitCountLeft
   1601  f7e0		       20 8b f8 	      JSR	Sleep8Lines
   1602  f7e3		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1603  f7e5		       85 06		      STA	COLUP0
   1604  f7e7		       85 02		      STA	WSYNC
   1605  f7e9		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1606  f7eb		       85 d0		      STA	ScoreD0
   1607  f7ed		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1608  f7ef		       85 d1		      STA	ScoreD1
   1609  f7f1		       20 ae f7 	      JSR	PrintZerosLeft
   1610  f7f4		       20 b7 f7 	      JSR	DrawGameOverScoreLine
   1611  f7f7
   1612  f7f7				   DrawCheckpointCountLeft
   1613  f7f7		       20 8b f8 	      JSR	Sleep8Lines
   1614  f7fa		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1615  f7fc		       85 06		      STA	COLUP0
   1616  f7fe		       85 02		      STA	WSYNC
   1617  f800		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1618  f802		       85 d0		      STA	ScoreD0
   1619  f804		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1620  f806		       85 d1		      STA	ScoreD1
   1621  f808		       20 ae f7 	      JSR	PrintZerosLeft
   1622  f80b		       20 b7 f7 	      JSR	DrawGameOverScoreLine
   1623  f80e
   1624  f80e				   DrawGameVersionLeft
   1625  f80e		       20 8b f8 	      JSR	Sleep8Lines
   1626  f811		       a9 49		      LDA	#VERSION_COLOR
   1627  f813		       85 06		      STA	COLUP0
   1628  f815
   1629  f815		       a5 c6		      LDA	GameMode
   1630  f817		       aa		      TAX
   1631  f818		       bd 6c fc 	      LDA	FontLookup,X	;4
   1632  f81b		       85 d0		      STA	ScoreD0	;3
   1633  f81d
   1634  f81d		       a5 c7		      LDA	CurrentCarId
   1635  f81f		       aa		      TAX
   1636  f820		       bd 6c fc 	      LDA	FontLookup,X	;4
   1637  f823		       85 d1		      STA	ScoreD1	;3
   1638  f825
   1639  f825		       a5 db		      LDA	StartSWCHB
   1640  f827		       29 40		      AND	#%01000000	; P0 difficulty
   1641  f829		       49 40		      EOR	#%01000000	; Reverse bytes
   1642  f82b		       2a		      ROL
   1643  f82c		       2a		      ROL
   1644  f82d		       2a		      ROL
   1645  f82e		       18		      CLC
   1646  f82f		       69 0a		      ADC	#10
   1647  f831		       aa		      TAX
   1648  f832		       bd 6c fc 	      LDA	FontLookup,X	;4
   1649  f835		       85 d2		      STA	ScoreD2	;3
   1650  f837
   1651  f837		       a5 db		      LDA	StartSWCHB
   1652  f839		       29 80		      AND	#%10000000	; P0 difficulty
   1653  f83b		       49 80		      EOR	#%10000000	; Reverse bytes
   1654  f83d		       2a		      ROL
   1655  f83e		       2a		      ROL
   1656  f83f		       18		      CLC
   1657  f840		       69 0a		      ADC	#10
   1658  f842		       aa		      TAX
   1659  f843		       bd 6c fc 	      LDA	FontLookup,X	;4
   1660  f846		       85 d3		      STA	ScoreD3	;3
   1661  f848
   1662  f848		       a9 a9		      LDA	#<Pipe + FONT_OFFSET
   1663  f84a		       85 d4		      STA	ScoreD4
   1664  f84c
   1665  f84c		       20 b7 f7 	      JSR	DrawGameOverScoreLine
   1666  f84f
   1667  f84f		       4c 68 f8 	      JMP	FinalizeDrawGameOver
   1668  f852
   1669  f852				   DrawGameOverScreenRight
   1670  f852		       85 02		      STA	WSYNC
   1671  f854		       20 6a f6 	      JSR	ClearPF
   1672  f857
   1673  f857				   DrawVersionRight
   1674  f857		       20 8b f8 	      JSR	Sleep8Lines
   1675  f85a		       a9 49		      LDA	#VERSION_COLOR
   1676  f85c		       85 07		      STA	COLUP1
   1677  f85e		       85 02		      STA	WSYNC
   1678  f860		       a2 28		      LDX	#<VersionText
   1679  f862		       20 e5 f6 	      JSR	PrintStaticText
   1680  f865		       20 b7 f7 	      JSR	DrawGameOverScoreLine
   1681  f868
   1682  f868				   FinalizeDrawGameOver
   1683  f868		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1684  f86a		       85 c9		      STA	ScoreFontColor
   1685  f86c		       20 82 f8 	      JSR	Sleep4Lines
   1686  f86f		       20 92 f8 	      JSR	Sleep32Lines
   1687  f872		       20 92 f8 	      JSR	Sleep32Lines
   1688  f875		       4c f7 f4 	      JMP	PrepareOverscan
   1689  f878
   1690  f878				   WaitForVblankEnd
   1691  f878		       ad 84 02 	      LDA	INTIM
   1692  f87b		       d0 fb		      BNE	WaitForVblankEnd
   1693  f87d		       85 02		      STA	WSYNC
   1694  f87f		       85 01		      STA	VBLANK
   1695  f881		       60		      RTS
   1696  f882
   1697  f882				   Sleep4Lines
   1698  f882		       85 02		      STA	WSYNC
   1699  f884		       85 02		      STA	WSYNC
   1700  f886		       85 02		      STA	WSYNC
   1701  f888		       85 02		      STA	WSYNC
   1702  f88a		       60		      RTS
   1703  f88b
   1704  f88b				   Sleep8Lines
   1705  f88b		       20 82 f8 	      JSR	Sleep4Lines
   1706  f88e		       20 82 f8 	      JSR	Sleep4Lines
   1707  f891		       60		      RTS
   1708  f892
   1709  f892				   Sleep32Lines
   1710  f892		       20 8b f8 	      JSR	Sleep8Lines
   1711  f895		       20 8b f8 	      JSR	Sleep8Lines
   1712  f898		       20 8b f8 	      JSR	Sleep8Lines
   1713  f89b		       20 8b f8 	      JSR	Sleep8Lines
   1714  f89e		       60		      RTS
   1715  f89f
   1716  f89f							;X = number of WSYNC HMOVE to run
   1717  f89f				   HMoveXTimes
   1718  f89f		       85 02		      STA	WSYNC	;3
   1719  f8a1		       85 2a		      STA	HMOVE	; 3/10 
   1720  f8a3		       ca		      DEX
   1721  f8a4		       d0 f9		      BNE	HMoveXTimes
   1722  f8a6		       60		      RTS
   1723  f8a7
   1724  f8a7				   ConfigureCarSprites
   1725  f8a7		       a5 8c		      LDA	FrameCount0
   1726  f8a9		       29 01		      AND	#%00000001
   1727  f8ab		       d0 0b		      BNE	LoadForRightScreenSprites
   1728  f8ad				   LoadForLeftScreenSprites
   1729  f8ad		       a5 c7		      LDA	CurrentCarId
   1730  f8af		       85 b0		      STA	Tmp0
   1731  f8b1		       a5 c8		      LDA	OpCurrentCarId
   1732  f8b3		       85 b1		      STA	Tmp1
   1733  f8b5		       4c c0 f8 	      JMP	LoadCarSpritesFromIds
   1734  f8b8				   LoadForRightScreenSprites
   1735  f8b8		       a5 c7		      LDA	CurrentCarId
   1736  f8ba		       85 b1		      STA	Tmp1
   1737  f8bc		       a5 c8		      LDA	OpCurrentCarId
   1738  f8be		       85 b0		      STA	Tmp0
   1739  f8c0
   1740  f8c0				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1741  f8c0		       a4 b0		      LDY	Tmp0
   1742  f8c2		       b9 9b ff 	      LDA	CarIdToSpriteAddressL,Y
   1743  f8c5		       85 d7		      STA	CarSpritePointerL
   1744  f8c7		       b9 9f ff 	      LDA	CarIdToSpriteAddressH,Y
   1745  f8ca		       85 d8		      STA	CarSpritePointerH
   1746  f8cc				   ConfigureOpponentCarSprite
   1747  f8cc		       a4 b1		      LDY	Tmp1
   1748  f8ce		       b9 a3 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1749  f8d1		       85 d9		      STA	EnemyCarSpritePointerL
   1750  f8d3		       b9 a7 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1751  f8d6		       85 da		      STA	EnemyCarSpritePointerH
   1752  f8d8		       60		      RTS
   1753  f8d9
   1754  f8d9							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1755  f8d9							;X player 0 or 1
   1756  f8d9				   SelectCarWithDpad
   1757  f8d9		       a0 03		      LDY	#3
   1758  f8db				   SelectCarWithDpadLoop
   1759  f8db		       ad 80 02 	      LDA	SWCHA
   1760  f8de		       25 b0		      AND	Tmp0
   1761  f8e0		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1762  f8e2		       98		      TYA
   1763  f8e3		       95 c7		      STA	CurrentCarId,X
   1764  f8e5				   ContinueSelectCarWithDpadLoop
   1765  f8e5		       46 b0		      LSR	Tmp0
   1766  f8e7		       88		      DEY
   1767  f8e8		       10 f1		      BPL	SelectCarWithDpadLoop
   1768  f8ea		       60		      RTS
   1769  f8eb
   1770  f8eb				   ProcessOpponentLine
   1771  f8eb		       a5 8c		      LDA	FrameCount0
   1772  f8ed		       29 01		      AND	#%00000001
   1773  f8ef		       38		      SEC
   1774  f8f0		       d0 15		      BNE	Player0IsOpponent
   1775  f8f2				   Player1IsOpponent		; Code could be reused?
   1776  f8f2		       a5 91		      LDA	TrafficOffset0 + 1
   1777  f8f4		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1778  f8f6		       85 b0		      STA	Tmp0
   1779  f8f8		       a5 92		      LDA	TrafficOffset0 + 2
   1780  f8fa		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1781  f8fc		       85 b1		      STA	Tmp1
   1782  f8fe		       a5 ba		      LDA	Traffic0Msb
   1783  f900		       e5 bb		      SBC	OpTraffic0Msb
   1784  f902		       85 b2		      STA	Tmp2
   1785  f904		       4c 19 f9 	      JMP	StoreInFrontPlayer
   1786  f907				   Player0IsOpponent
   1787  f907		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1788  f909		       e5 91		      SBC	TrafficOffset0 + 1
   1789  f90b		       85 b0		      STA	Tmp0
   1790  f90d		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1791  f90f		       e5 92		      SBC	TrafficOffset0 + 2
   1792  f911		       85 b1		      STA	Tmp1
   1793  f913		       a5 bb		      LDA	OpTraffic0Msb
   1794  f915		       e5 ba		      SBC	Traffic0Msb
   1795  f917		       85 b2		      STA	Tmp2
   1796  f919
   1797  f919				   StoreInFrontPlayer
   1798  f919		       85 f4		      STA	IsOpponentInFront
   1799  f91b
   1800  f91b				   AddOffsetToOpponentLine
   1801  f91b		       18		      CLC
   1802  f91c		       a5 b0		      LDA	Tmp0
   1803  f91e		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1804  f920		       85 b0		      STA	Tmp0
   1805  f922		       a5 b1		      LDA	Tmp1
   1806  f924		       69 00		      ADC	#0
   1807  f926		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1808  f928		       a5 b2		      LDA	Tmp2
   1809  f92a		       69 00		      ADC	#0
   1810  f92c		       05 b1		      ORA	Tmp1
   1811  f92e		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1812  f930				   OpponentNotVisible
   1813  f930		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1814  f932		       85 cf		      STA	OpponentLine
   1815  f934		       4c 3b f9 	      JMP	ReturnFromProcessOpponentLine
   1816  f937				   OpponentVisible
   1817  f937		       a5 b0		      LDA	Tmp0
   1818  f939		       85 cf		      STA	OpponentLine
   1819  f93b				   ReturnFromProcessOpponentLine
   1820  f93b		       60		      RTS
   1821  f93c
   1822  f93c							; Value stored in A
   1823  f93c				   IsOpponentColliding
   1824  f93c							;Any non default state, opponent do not colide
   1825  f93c		       a5 8e		      LDA	CollisionCounter
   1826  f93e		       05 8f		      ORA	OpCollisionCounter
   1827  f940		       05 cb		      ORA	ScoreFontColorHoldChange
   1828  f942		       05 cc		      ORA	OpScoreFontColorHoldChange
   1829  f944		       d0 07		      BNE	OpponentNotColliding
   1830  f946		       a5 f4		      LDA	IsOpponentInFront
   1831  f948		       25 07		      AND	CXPPMM
   1832  f94a		       4c 4f f9 	      JMP	ReturnIsOpponentColliding
   1833  f94d				   OpponentNotColliding
   1834  f94d		       a9 00		      LDA	#0
   1835  f94f				   ReturnIsOpponentColliding
   1836  f94f		       60		      RTS
   1837  f950
   1838  f950
   1839  f950							; Movement and colision are binded because the car must be moved after duplicate size.
   1840  f950							; Use X for the player
   1841  f950							; Tmp2 Traffic colision result
   1842  f950				   TestCollisionAndMove
   1843  f950							; Until store the movemnt, Y contains the value to be stored.
   1844  f950							; see if player0 colides with the rest
   1845  f950		       a5 b2		      LDA	Tmp2
   1846  f952		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1847  f954		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1848  f956		       d0 25		      BNE	NoCollision
   1849  f958		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1850  f95a		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1851  f95c		       f0 1f		      BEQ	NoCollision
   1852  f95e		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1853  f960		       f0 1b		      BEQ	NoCollision
   1854  f962		       a9 ff		      LDA	#COLLISION_FRAMES
   1855  f964		       95 8e		      STA	CollisionCounter,X
   1856  f966		       b5 f2		      LDA	Player0SpeedH,X
   1857  f968		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1858  f96a		       a9 10		      LDA	#COLLISION_SPEED_L
   1859  f96c		       d5 f0		      CMP	Player0SpeedL,X
   1860  f96e		       b0 04		      BCS	SkipSetColisionSpeedL
   1861  f970				   SetColisionSpeedL
   1862  f970		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1863  f972		       95 f0		      STA	Player0SpeedL,X
   1864  f974				   SkipSetColisionSpeedL
   1865  f974		       a9 00		      LDA	#0
   1866  f976		       95 f2		      STA	Player0SpeedH,X
   1867  f978		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1868  f97a		       4c cd f9 	      JMP	StoreHMove	; We keep position consistent
   1869  f97d				   NoCollision
   1870  f97d
   1871  f97d				   DecrementCollision
   1872  f97d		       b5 8e		      LDA	CollisionCounter,X
   1873  f97f		       f0 06		      BEQ	FinishDecrementCollision
   1874  f981		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1875  f983		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1876  f985		       d6 8e		      DEC	CollisionCounter,X
   1877  f987				   FinishDecrementCollision
   1878  f987
   1879  f987				   ResetPlayerSize
   1880  f987		       d0 04		      BNE	FinishResetPlayerSize
   1881  f989		       a9 30		      LDA	#%00110000
   1882  f98b		       95 04		      STA	NUSIZ0,X	;
   1883  f98d				   FinishResetPlayerSize
   1884  f98d
   1885  f98d				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1886  f98d		       b5 8e		      LDA	CollisionCounter,X
   1887  f98f		       c9 01		      CMP	#1	; Last frame before reset
   1888  f991		       d0 05		      BNE	SkipResetPlayerPosition
   1889  f993		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1890  f995		       4c cd f9 	      JMP	StoreHMove
   1891  f998				   SkipResetPlayerPosition
   1892  f998
   1893  f998				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1894  f998		       b5 c7		      LDA	CurrentCarId,X
   1895  f99a		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1896  f99c		       d0 08		      BNE	PrepareReadXAxis
   1897  f99e		       a0 00		      LDY	#0
   1898  f9a0		       a5 8c		      LDA	FrameCount0
   1899  f9a2		       29 01		      AND	#DRAGSTER_TURN_MASK
   1900  f9a4		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1901  f9a6
   1902  f9a6				   PrepareReadXAxis
   1903  f9a6		       a0 00		      LDY	#0
   1904  f9a8		       b5 b6		      LDA	Player0X,X
   1905  f9aa				   BeginReadLeft
   1906  f9aa		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1907  f9ac		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1908  f9af		       2c 80 02 	      BIT	SWCHA
   1909  f9b2		       d0 07		      BNE	SkipMoveLeft
   1910  f9b4		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1911  f9b6		       d6 b6		      DEC	Player0X,X
   1912  f9b8		       4c cd f9 	      JMP	StoreHMove	; Cannot move left and right...
   1913  f9bb				   SkipMoveLeft
   1914  f9bb				   BeginReadRight
   1915  f9bb		       b5 b6		      LDA	Player0X,X
   1916  f9bd		       c9 2c		      CMP	#PLAYER_MAX_X
   1917  f9bf		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1918  f9c1		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1919  f9c4		       2c 80 02 	      BIT	SWCHA
   1920  f9c7		       d0 04		      BNE	SkipMoveRight
   1921  f9c9		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1922  f9cb		       f6 b6		      INC	Player0X,X
   1923  f9cd				   SkipMoveRight
   1924  f9cd				   StoreHMove
   1925  f9cd		       94 20		      STY	HMP0,X	;set the move for player 0
   1926  f9cf
   1927  f9cf		       60		      RTS
   1928  f9d0
   1929  f9d0							; X Traffic offset 4 bits each lane, 4 lanes per player
   1930  f9d0							; Tmp3 Max X offset
   1931  f9d0							; Tmp4 Max Player Speed L
   1932  f9d0							; Tmp5 Max Player Speed H
   1933  f9d0				   UpdateOffsets
   1934  f9d0		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1935  f9d2		       a5 c6		      LDA	GameMode
   1936  f9d4		       29 04		      AND	#%00000100	; GameModes with high delta
   1937  f9d6		       f0 02		      BEQ	UpdateOffsetsLoop
   1938  f9d8		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1939  f9da
   1940  f9da				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1941  f9da		       38		      SEC
   1942  f9db		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1943  f9dd		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1944  f9e0		       85 b0		      STA	Tmp0
   1945  f9e2		       c8		      INY
   1946  f9e3		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1947  f9e5		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1948  f9e8		       85 b1		      STA	Tmp1
   1949  f9ea		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1950  f9ec		       e9 00		      SBC	#0
   1951  f9ee		       85 b2		      STA	Tmp2
   1952  f9f0
   1953  f9f0				   AddsTheResult
   1954  f9f0		       18		      CLC
   1955  f9f1		       a5 b0		      LDA	Tmp0
   1956  f9f3		       75 90		      ADC	TrafficOffset0,X
   1957  f9f5		       95 90		      STA	TrafficOffset0,X
   1958  f9f7		       e8		      INX
   1959  f9f8		       a5 b1		      LDA	Tmp1
   1960  f9fa		       75 90		      ADC	TrafficOffset0,X
   1961  f9fc		       95 90		      STA	TrafficOffset0,X
   1962  f9fe		       e8		      INX
   1963  f9ff		       a5 b2		      LDA	Tmp2	; Carry
   1964  fa01		       75 90		      ADC	TrafficOffset0,X
   1965  fa03		       95 90		      STA	TrafficOffset0,X
   1966  fa05		       90 0f		      BCC	CalculateOffsetCache
   1967  fa07				   CalculatePlayer0Msb
   1968  fa07		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1969  fa09		       d0 05		      BNE	CalculatePlayer1Msb
   1970  fa0b		       e6 ba		      INC	Traffic0Msb
   1971  fa0d		       4c 16 fa 	      JMP	CalculateOffsetCache
   1972  fa10				   CalculatePlayer1Msb
   1973  fa10		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1974  fa12		       d0 02		      BNE	CalculateOffsetCache
   1975  fa14		       e6 bb		      INC	OpTraffic0Msb
   1976  fa16
   1977  fa16				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1978  fa16		       e8		      INX
   1979  fa17		       38		      SEC
   1980  fa18		       69 00		      ADC	#0	;Increment by one
   1981  fa1a		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1982  fa1c
   1983  fa1c				   PrepareNextUpdateLoop
   1984  fa1c		       c8		      INY
   1985  fa1d		       e8		      INX
   1986  fa1e		       e4 b3		      CPX	Tmp3	; Max X offset
   1987  fa20		       d0 b8		      BNE	UpdateOffsetsLoop
   1988  fa22		       60		      RTS
   1989  fa23
   1990  fa23							; X Player 0 or 1
   1991  fa23				   ProcessSpeed
   1992  fa23				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1993  fa23		       a9 00		      LDA	#0
   1994  fa25		       85 b0		      STA	Tmp0	; Break speed
   1995  fa27		       b5 b8		      LDA	CountdownTimer,X
   1996  fa29		       d0 0d		      BNE	Break
   1997  fa2b		       b4 c7		      LDY	CurrentCarId,X
   1998  fa2d		       a5 8c		      LDA	FrameCount0
   1999  fa2f		       39 af ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2000  fa32		       d0 04		      BNE	Break
   2001  fa34		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2002  fa36		       85 b0		      STA	Tmp0
   2003  fa38
   2004  fa38				   Break
   2005  fa38		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2006  fa3b		       2c 80 02 	      BIT	SWCHA
   2007  fa3e		       d0 12		      BNE	BreakNonZero
   2008  fa40		       b5 0c		      LDA	INPT4,X	;3
   2009  fa42		       10 0a		      BPL	BreakWhileAccelerating
   2010  fa44		       b4 d5		      LDY	Gear,X
   2011  fa46		       b9 bb ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2012  fa49		       85 b0		      STA	Tmp0
   2013  fa4b		       4c 52 fa 	      JMP	BreakNonZero
   2014  fa4e				   BreakWhileAccelerating		; Allow better control while breaking.
   2015  fa4e		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2016  fa50		       85 b0		      STA	Tmp0
   2017  fa52
   2018  fa52				   BreakNonZero
   2019  fa52		       a5 b0		      LDA	Tmp0
   2020  fa54		       f0 29		      BEQ	SkipBreak
   2021  fa56
   2022  fa56				   DecreaseSpeed
   2023  fa56		       38		      SEC
   2024  fa57		       b5 f0		      LDA	Player0SpeedL,X
   2025  fa59		       e5 b0		      SBC	Tmp0
   2026  fa5b		       95 f0		      STA	Player0SpeedL,X
   2027  fa5d		       b5 f2		      LDA	Player0SpeedH,X
   2028  fa5f		       e9 00		      SBC	#0
   2029  fa61		       95 f2		      STA	Player0SpeedH,X
   2030  fa63
   2031  fa63				   CheckMinSpeed
   2032  fa63		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2033  fa65		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2034  fa67		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2035  fa69		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2036  fa6b
   2037  fa6b				   CompareLBreakSpeed
   2038  fa6b		       b5 f0		      LDA	Player0SpeedL,X
   2039  fa6d		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2040  fa6f		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2041  fa71		       4c 7c fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2042  fa74
   2043  fa74				   ResetMinSpeed
   2044  fa74		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2045  fa76		       95 f2		      STA	Player0SpeedH,X
   2046  fa78		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2047  fa7a		       95 f0		      STA	Player0SpeedL,X
   2048  fa7c
   2049  fa7c				   SkipAccelerateIfBreaking
   2050  fa7c		       4c c5 fa 	      JMP	SkipAccelerate
   2051  fa7f				   SkipBreak
   2052  fa7f
   2053  fa7f				   Acelerates
   2054  fa7f		       b5 b8		      LDA	CountdownTimer,X
   2055  fa81		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2056  fa83
   2057  fa83				   ContinueAccelerateTest
   2058  fa83		       b5 0c		      LDA	INPT4,X	;3
   2059  fa85		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2060  fa87		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2061  fa8a		       2c 80 02 	      BIT	SWCHA
   2062  fa8d		       d0 36		      BNE	SkipAccelerate
   2063  fa8f
   2064  fa8f				   IncreaseCarSpeed
   2065  fa8f		       a9 02		      LDA	#2
   2066  fa91		       85 b0		      STA	Tmp0	; Loop control
   2067  fa93		       b4 c7		      LDY	CurrentCarId,X
   2068  fa95				   IncreaseCarSpeedLoop
   2069  fa95							;Adds speed
   2070  fa95		       18		      CLC
   2071  fa96		       b5 dc		      LDA	AccelerateBuffer,X
   2072  fa98		       79 ab ff 	      ADC	CarIdToAccelerateSpeed,Y
   2073  fa9b		       95 dc		      STA	AccelerateBuffer,X
   2074  fa9d		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2075  fa9f		       f6 f0		      INC	Player0SpeedL,X
   2076  faa1		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2077  faa3		       f6 f2		      INC	Player0SpeedH,X
   2078  faa5				   ContinueIncreaseSpeedLoop
   2079  faa5		       c6 b0		      DEC	Tmp0
   2080  faa7		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2081  faa9				   SkipIncreaseCarSpeed
   2082  faa9
   2083  faa9				   CheckIfAlreadyMaxSpeed
   2084  faa9		       b5 f2		      LDA	Player0SpeedH,X
   2085  faab		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2086  faad		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2087  faaf		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2088  fab1							;High bit is max, compare the low
   2089  fab1		       b4 c7		      LDY	CurrentCarId,X
   2090  fab3		       b5 f0		      LDA	Player0SpeedL,X
   2091  fab5		       d9 b3 ff 	      CMP	CarIdToMaxSpeedL,Y
   2092  fab8		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2093  faba							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2094  faba
   2095  faba				   ResetToMaxSpeed		; Speed is more, or is already max
   2096  faba		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2097  fabc		       95 f2		      STA	Player0SpeedH,X
   2098  fabe		       b4 c7		      LDY	CurrentCarId,X
   2099  fac0		       b9 b3 ff 	      LDA	CarIdToMaxSpeedL,Y
   2100  fac3		       95 f0		      STA	Player0SpeedL,X
   2101  fac5				   SkipAccelerate
   2102  fac5		       60		      RTS
   2103  fac6
   2104  fac6							;Tmp0 Traffic Offset to compare with next checkpoint
   2105  fac6				   ProcessPlayerStatus
   2106  fac6				   IsGameOver
   2107  fac6		       b5 b8		      LDA	CountdownTimer,X
   2108  fac8		       15 f0		      ORA	Player0SpeedL,X
   2109  faca		       15 f2		      ORA	Player0SpeedH,X
   2110  facc		       d0 0b		      BNE	IsCheckpoint
   2111  face		       a9 01		      LDA	#1
   2112  fad0		       95 cb		      STA	ScoreFontColorHoldChange,X
   2113  fad2		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2114  fad4		       95 c9		      STA	ScoreFontColor,X
   2115  fad6		       4c 0b fb 	      JMP	SkipIsTimeOver
   2116  fad9
   2117  fad9				   IsCheckpoint
   2118  fad9		       b5 cd		      LDA	NextCheckpoint,X
   2119  fadb		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2120  fadd		       d0 20		      BNE	SkipIsCheckpoint
   2121  fadf		       18		      CLC
   2122  fae0		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2123  fae2		       95 cd		      STA	NextCheckpoint,X
   2124  fae4		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2125  fae6		       95 c9		      STA	ScoreFontColor,X
   2126  fae8		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2127  faea		       95 cb		      STA	ScoreFontColorHoldChange,X
   2128  faec		       b5 b8		      LDA	CountdownTimer,X
   2129  faee		       18		      CLC
   2130  faef		       75 c0		      ADC	CheckpointTime,X
   2131  faf1		       95 b8		      STA	CountdownTimer,X
   2132  faf3		       90 04		      BCC	JumpSkipTimeOver
   2133  faf5		       a9 ff		      LDA	#$FF
   2134  faf7		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2135  faf9				   JumpSkipTimeOver
   2136  faf9		       20 96 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2137  fafc		       4c 0b fb 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2138  faff				   SkipIsCheckpoint
   2139  faff
   2140  faff				   IsTimeOver
   2141  faff		       b5 b8		      LDA	CountdownTimer,X
   2142  fb01		       d0 08		      BNE	SkipIsTimeOver
   2143  fb03		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2144  fb05		       95 cb		      STA	ScoreFontColorHoldChange,X
   2145  fb07		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2146  fb09		       95 c9		      STA	ScoreFontColor,X
   2147  fb0b				   SkipIsTimeOver
   2148  fb0b		       60		      RTS
   2149  fb0c
   2150  fb0c
   2151  fb0c				   EverySecond		; 64 frames to be more precise
   2152  fb0c		       a9 3f		      LDA	#%00111111
   2153  fb0e		       25 8c		      AND	FrameCount0
   2154  fb10		       d0 06		      BNE	SkipEverySecondAction
   2155  fb12		       d5 b8		      CMP	CountdownTimer,X
   2156  fb14		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2157  fb16		       d6 b8		      DEC	CountdownTimer,X
   2158  fb18				   SkipEverySecondAction
   2159  fb18		       60		      RTS
   2160  fb19
   2161  fb19				   CalculateGear
   2162  fb19		       b5 f0		      LDA	Player0SpeedL,X	;3
   2163  fb1b		       29 80		      AND	#%10000000	;2
   2164  fb1d		       15 f2		      ORA	Player0SpeedH,X	;3
   2165  fb1f		       18		      CLC		;2
   2166  fb20		       2a		      ROL		;2
   2167  fb21		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2168  fb23		       95 d5		      STA	Gear,X
   2169  fb25		       60		      RTS
   2170  fb26
   2171  fb26				   ProcessScoreFontColor
   2172  fb26		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2173  fb28		       f0 06		      BEQ	ResetScoreFontColor
   2174  fb2a		       88		      DEY
   2175  fb2b		       94 cb		      STY	ScoreFontColorHoldChange,X
   2176  fb2d		       4c 35 fb 	      JMP	SkipScoreFontColor
   2177  fb30				   ResetScoreFontColor
   2178  fb30		       bd a2 fc 	      LDA	PlayerToDefaultColor,X
   2179  fb33		       95 c9		      STA	ScoreFontColor,X
   2180  fb35				   SkipScoreFontColor
   2181  fb35		       60		      RTS
   2182  fb36
   2183  fb36							; Moved here because of rom space.
   2184  fb36							; The only SBR in constants space
   2185  fb36				   DrawQrCode
   2186  fb36		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2187  fb38		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2188  fb3a		       a9 01		      LDA	#%00000001	; Mirror playfield
   2189  fb3c		       85 0a		      STA	CTRLPF
   2190  fb3e		       20 54 f6 	      JSR	ClearAll	; To be 100 sure!
   2191  fb41		       ad 82 02 	      LDA	SWCHB
   2192  fb44		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2193  fb46		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2194  fb48		       f0 07		      BEQ	StoreReversedQrCode
   2195  fb4a		       86 09		      STX	COLUBK
   2196  fb4c		       84 08		      STY	COLUPF
   2197  fb4e		       4c 55 fb 	      JMP	ContinueQrCode
   2198  fb51				   StoreReversedQrCode
   2199  fb51		       86 08		      STX	COLUPF
   2200  fb53		       84 09		      STY	COLUBK
   2201  fb55
   2202  fb55				   ContinueQrCode
   2203  fb55		       a2 08		      LDX	#8
   2204  fb57		       20 9f f8 	      JSR	HMoveXTimes
   2205  fb5a		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2206  fb5c		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2207  fb5e		       20 78 f8 	      JSR	WaitForVblankEnd
   2208  fb61		       20 8b f8 	      JSR	Sleep8Lines
   2209  fb64		       20 8b f8 	      JSR	Sleep8Lines
   2210  fb67		       20 8b f8 	      JSR	Sleep8Lines
   2211  fb6a
   2212  fb6a				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2213  fb6a		       85 02		      STA	WSYNC
   2214  fb6c		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2215  fb6f		       85 0e		      STA	PF1	;3
   2216  fb71		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2217  fb74		       85 0f		      STA	PF2	;3
      0  fb76					      SLEEP	27	; 
      1  fb76				   .CYCLES    SET	27
      2  fb76
      3  fb76				  -	      IF	.CYCLES < 2
      4  fb76				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb76				  -	      ERR
      6  fb76					      ENDIF
      7  fb76
      8  fb76					      IF	.CYCLES & 1
      9  fb76				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb76				  -	      nop	0
     11  fb76					      ELSE
     12  fb76		       24 00		      bit	VSYNC
     13  fb78					      ENDIF
     14  fb78				   .CYCLES    SET	.CYCLES - 3
     15  fb78					      ENDIF
     16  fb78
     17  fb78					      REPEAT	.CYCLES / 2
     18  fb78		       ea		      nop
     17  fb78					      REPEND
     18  fb79		       ea		      nop
     17  fb79					      REPEND
     18  fb7a		       ea		      nop
     17  fb7a					      REPEND
     18  fb7b		       ea		      nop
     17  fb7b					      REPEND
     18  fb7c		       ea		      nop
     17  fb7c					      REPEND
     18  fb7d		       ea		      nop
     17  fb7d					      REPEND
     18  fb7e		       ea		      nop
     17  fb7e					      REPEND
     18  fb7f		       ea		      nop
     17  fb7f					      REPEND
     18  fb80		       ea		      nop
     17  fb80					      REPEND
     18  fb81		       ea		      nop
     17  fb81					      REPEND
     18  fb82		       ea		      nop
     17  fb82					      REPEND
     18  fb83		       ea		      nop
     19  fb84					      REPEND
   2219  fb84		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2220  fb87		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2221  fb89		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2222  fb8c		       85 0e		      STA	PF1	;3
   2223  fb8e
   2224  fb8e		       ca		      DEX		;2
   2225  fb8f		       d0 d9		      BNE	QrCodeLoop	;2
   2226  fb91		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2227  fb93		       88		      DEY		;2
   2228  fb94		       10 d4		      BPL	QrCodeLoop	;4
   2229  fb96
   2230  fb96				   EndQrCodeLoop
   2231  fb96		       85 02		      STA	WSYNC	;
   2232  fb98		       a9 00		      LDA	#0
   2233  fb9a		       85 0e		      STA	PF1	;3
   2234  fb9c		       85 0f		      STA	PF2	;3
   2235  fb9e
   2236  fb9e		       20 92 f8 	      JSR	Sleep32Lines
   2237  fba1		       4c f7 f4 	      JMP	PrepareOverscan
   2238  fba4
   2239  fba4							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2240  fc00					      org	$FC00
   2241  fc00				   QrCode1
   2242  fc00		       1f		      .byte.b	#%00011111
   2243  fc01		       10		      .byte.b	#%00010000
   2244  fc02		       17		      .byte.b	#%00010111
   2245  fc03		       17		      .byte.b	#%00010111
   2246  fc04		       17		      .byte.b	#%00010111
   2247  fc05		       10		      .byte.b	#%00010000
   2248  fc06		       1f		      .byte.b	#%00011111
   2249  fc07		       00		      .byte.b	#%00000000
   2250  fc08		       17		      .byte.b	#%00010111
   2251  fc09		       10		      .byte.b	#%00010000
   2252  fc0a		       1d		      .byte.b	#%00011101
   2253  fc0b		       16		      .byte.b	#%00010110
   2254  fc0c		       03		      .byte.b	#%00000011
   2255  fc0d		       19		      .byte.b	#%00011001
   2256  fc0e		       13		      .byte.b	#%00010011
   2257  fc0f		       1c		      .byte.b	#%00011100
   2258  fc10		       0b		      .byte.b	#%00001011
   2259  fc11		       00		      .byte.b	#%00000000
   2260  fc12		       1f		      .byte.b	#%00011111
   2261  fc13		       10		      .byte.b	#%00010000
   2262  fc14		       17		      .byte.b	#%00010111
   2263  fc15		       17		      .byte.b	#%00010111
   2264  fc16		       17		      .byte.b	#%00010111
   2265  fc17		       10		      .byte.b	#%00010000
   2266  fc18		       1f		      .byte.b	#%00011111
   2267  fc19
   2268  fc19				   QrCode2
   2269  fc19		       c3		      .byte.b	#%11000011
   2270  fc1a		       9a		      .byte.b	#%10011010
   2271  fc1b		       82		      .byte.b	#%10000010
   2272  fc1c		       da		      .byte.b	#%11011010
   2273  fc1d		       aa		      .byte.b	#%10101010
   2274  fc1e		       ca		      .byte.b	#%11001010
   2275  fc1f		       f3		      .byte.b	#%11110011
   2276  fc20		       78		      .byte.b	#%01111000
   2277  fc21		       df		      .byte.b	#%11011111
   2278  fc22		       fc		      .byte.b	#%11111100
   2279  fc23		       c7		      .byte.b	#%11000111
   2280  fc24		       98		      .byte.b	#%10011000
   2281  fc25		       23		      .byte.b	#%00100011
   2282  fc26		       b9		      .byte.b	#%10111001
   2283  fc27		       d2		      .byte.b	#%11010010
   2284  fc28		       30		      .byte.b	#%00110000
   2285  fc29		       eb		      .byte.b	#%11101011
   2286  fc2a		       28		      .byte.b	#%00101000
   2287  fc2b		       ab		      .byte.b	#%10101011
   2288  fc2c		       72		      .byte.b	#%01110010
   2289  fc2d		       fa		      .byte.b	#%11111010
   2290  fc2e		       7a		      .byte.b	#%01111010
   2291  fc2f		       32		      .byte.b	#%00110010
   2292  fc30		       3a		      .byte.b	#%00111010
   2293  fc31		       63		      .byte.b	#%01100011
   2294  fc32
   2295  fc32				   QrCode3
   2296  fc32		       98		      .byte.b	#%10011000
   2297  fc33		       c3		      .byte.b	#%11000011
   2298  fc34		       39		      .byte.b	#%00111001
   2299  fc35		       34		      .byte.b	#%00110100
   2300  fc36		       ff		      .byte.b	#%11111111
   2301  fc37		       71		      .byte.b	#%01110001
   2302  fc38		       d5		      .byte.b	#%11010101
   2303  fc39		       d1		      .byte.b	#%11010001
   2304  fc3a		       5f		      .byte.b	#%01011111
   2305  fc3b		       26		      .byte.b	#%00100110
   2306  fc3c		       2d		      .byte.b	#%00101101
   2307  fc3d		       e9		      .byte.b	#%11101001
   2308  fc3e		       d6		      .byte.b	#%11010110
   2309  fc3f		       26		      .byte.b	#%00100110
   2310  fc40		       ba		      .byte.b	#%10111010
   2311  fc41		       03		      .byte.b	#%00000011
   2312  fc42		       dd		      .byte.b	#%11011101
   2313  fc43		       e0		      .byte.b	#%11100000
   2314  fc44		       57		      .byte.b	#%01010111
   2315  fc45		       14		      .byte.b	#%00010100
   2316  fc46		       35		      .byte.b	#%00110101
   2317  fc47		       e5		      .byte.b	#%11100101
   2318  fc48		       b5		      .byte.b	#%10110101
   2319  fc49		       d4		      .byte.b	#%11010100
   2320  fc4a		       97		      .byte.b	#%10010111
   2321  fc4b
   2322  fc4b				   QrCode4
   2323  fc4b		       09		      .byte.b	#%00001001
   2324  fc4c		       0e		      .byte.b	#%00001110
   2325  fc4d		       0f		      .byte.b	#%00001111
   2326  fc4e		       0c		      .byte.b	#%00001100
   2327  fc4f		       0c		      .byte.b	#%00001100
   2328  fc50		       08		      .byte.b	#%00001000
   2329  fc51		       08		      .byte.b	#%00001000
   2330  fc52		       06		      .byte.b	#%00000110
   2331  fc53		       06		      .byte.b	#%00000110
   2332  fc54		       0b		      .byte.b	#%00001011
   2333  fc55		       0f		      .byte.b	#%00001111
   2334  fc56		       04		      .byte.b	#%00000100
   2335  fc57		       08		      .byte.b	#%00001000
   2336  fc58		       0f		      .byte.b	#%00001111
   2337  fc59		       09		      .byte.b	#%00001001
   2338  fc5a		       07		      .byte.b	#%00000111
   2339  fc5b		       05		      .byte.b	#%00000101
   2340  fc5c		       00		      .byte.b	#%00000000
   2341  fc5d		       0f		      .byte.b	#%00001111
   2342  fc5e		       08		      .byte.b	#%00001000
   2343  fc5f		       0b		      .byte.b	#%00001011
   2344  fc60		       0b		      .byte.b	#%00001011
   2345  fc61		       0b		      .byte.b	#%00001011
   2346  fc62		       08		      .byte.b	#%00001000
   2347  fc63		       0f		      .byte.b	#%00001111
   2348  fc64
   2349  fc64				   PlayerToUpMask
   2350  fc64		       10		      .byte.b	#%00010000	;
   2351  fc65		       01		      .byte.b	#%00000001	;
   2352  fc66
   2353  fc66				   PlayerToDownMask
   2354  fc66		       20		      .byte.b	#%00100000	;
   2355  fc67		       02		      .byte.b	#%00000010	;
   2356  fc68
   2357  fc68
   2358  fc68				   PlayerToLeftMask
   2359  fc68		       40		      .byte.b	#%01000000	;
   2360  fc69		       04		      .byte.b	#%00000100	;
   2361  fc6a
   2362  fc6a				   PlayerToRightMask
   2363  fc6a		       80		      .byte.b	#%10000000	;
   2364  fc6b		       08		      .byte.b	#%00001000	;
   2365  fc6c
   2366  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2367  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2368  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2369  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2370  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2371  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2372  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2373  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2374  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2375  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2376  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2377  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2378  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2379  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2380  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2381  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2382  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2383  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2384  fc7d
   2385  fc7d				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2386  fc7d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2387  fc7e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2388  fc7f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2389  fc80		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2390  fc81		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2391  fc82		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2392  fc83		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2393  fc84		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2394  fc85		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2395  fc86		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2396  fc87		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2397  fc88		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2398  fc89		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2399  fc8a		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2400  fc8b		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2401  fc8c		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2402  fc8d
   2403  fc8d				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2404  fc8d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2405  fc8e		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2406  fc8f		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2407  fc90		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2408  fc91		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2409  fc92		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2410  fc93		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2411  fc94		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2412  fc95		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2413  fc96		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2414  fc97		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2415  fc98		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2416  fc99		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2417  fc9a		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2418  fc9b		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2419  fc9c		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2420  fc9d		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2421  fc9e		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2422  fc9f		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2423  fca0		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2424  fca1		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2425  fca2
   2426  fca2				   PlayerToDefaultColor
   2427  fca2		       f9		      .byte.b	#PLAYER0_COLOR
   2428  fca3		       96		      .byte.b	#PLAYER1_COLOR
   2429  fca4
   2430  fd00					      org	$FD00
   2431  fd00				   Font
   2432  fd00				   C0
   2433  fd00		       e7		      .byte.b	#%11100111	;
   2434  fd01		       a5		      .byte.b	#%10100101	; 
   2435  fd02		       a5		      .byte.b	#%10100101	; 
   2436  fd03		       a5		      .byte.b	#%10100101	; 
   2437  fd04		       e7		      .byte.b	#%11100111	;	
   2438  fd05				   C1
   2439  fd05		       e7		      .byte.b	#%11100111	;
   2440  fd06		       42		      .byte.b	#%01000010	; 
   2441  fd07		       42		      .byte.b	#%01000010	; 
   2442  fd08		       42		      .byte.b	#%01000010	; 
   2443  fd09		       66		      .byte.b	#%01100110	;
   2444  fd0a				   C2
   2445  fd0a		       e7		      .byte.b	#%11100111	;
   2446  fd0b		       24		      .byte.b	#%00100100	; 
   2447  fd0c		       e7		      .byte.b	#%11100111	; 
   2448  fd0d		       81		      .byte.b	#%10000001	; 
   2449  fd0e		       e7		      .byte.b	#%11100111	;
   2450  fd0f				   C3
   2451  fd0f		       e7		      .byte.b	#%11100111	;
   2452  fd10		       81		      .byte.b	#%10000001	; 
   2453  fd11		       e7		      .byte.b	#%11100111	; 
   2454  fd12		       81		      .byte.b	#%10000001	; 
   2455  fd13		       e7		      .byte.b	#%11100111	;
   2456  fd14				   C4
   2457  fd14		       81		      .byte.b	#%10000001	;
   2458  fd15		       81		      .byte.b	#%10000001	; 
   2459  fd16		       e7		      .byte.b	#%11100111	; 
   2460  fd17		       a5		      .byte.b	#%10100101	; 
   2461  fd18		       a5		      .byte.b	#%10100101	;
   2462  fd19				   C5
   2463  fd19		       e7		      .byte.b	#%11100111	;
   2464  fd1a		       81		      .byte.b	#%10000001	; 
   2465  fd1b		       e7		      .byte.b	#%11100111	; 
   2466  fd1c		       24		      .byte.b	#%00100100	; 
   2467  fd1d		       e7		      .byte.b	#%11100111	;
   2468  fd1e				   C6
   2469  fd1e		       e7		      .byte.b	#%11100111	;
   2470  fd1f		       a5		      .byte.b	#%10100101	; 
   2471  fd20		       e7		      .byte.b	#%11100111	; 
   2472  fd21		       24		      .byte.b	#%00100100	; 
   2473  fd22		       e7		      .byte.b	#%11100111	;
   2474  fd23				   C7
   2475  fd23		       81		      .byte.b	#%10000001	;
   2476  fd24		       81		      .byte.b	#%10000001	; 
   2477  fd25		       81		      .byte.b	#%10000001	; 
   2478  fd26		       81		      .byte.b	#%10000001	; 
   2479  fd27		       e7		      .byte.b	#%11100111	;
   2480  fd28				   C8
   2481  fd28		       e7		      .byte.b	#%11100111	;
   2482  fd29		       a5		      .byte.b	#%10100101	; 
   2483  fd2a		       e7		      .byte.b	#%11100111	; 
   2484  fd2b		       a5		      .byte.b	#%10100101	; 
   2485  fd2c		       e7		      .byte.b	#%11100111	;
   2486  fd2d				   C9
   2487  fd2d		       e7		      .byte.b	#%11100111	;
   2488  fd2e		       81		      .byte.b	#%10000001	; 
   2489  fd2f		       e7		      .byte.b	#%11100111	; 
   2490  fd30		       a5		      .byte.b	#%10100101	; 
   2491  fd31		       e7		      .byte.b	#%11100111	;
   2492  fd32				   CA
   2493  fd32		       a5		      .byte.b	#%10100101	;
   2494  fd33		       a5		      .byte.b	#%10100101	; 
   2495  fd34		       e7		      .byte.b	#%11100111	; 
   2496  fd35		       a5		      .byte.b	#%10100101	; 
   2497  fd36		       e7		      .byte.b	#%11100111	;
   2498  fd37				   CB
   2499  fd37		       66		      .byte.b	#%01100110	;
   2500  fd38		       a5		      .byte.b	#%10100101	; 
   2501  fd39		       66		      .byte.b	#%01100110	; 
   2502  fd3a		       a5		      .byte.b	#%10100101	;
   2503  fd3b		       66		      .byte.b	#%01100110	;
   2504  fd3c				   CC
   2505  fd3c		       e7		      .byte.b	#%11100111	;
   2506  fd3d		       24		      .byte.b	#%00100100	; 
   2507  fd3e		       24		      .byte.b	#%00100100	; 
   2508  fd3f		       24		      .byte.b	#%00100100	;
   2509  fd40		       e7		      .byte.b	#%11100111	;
   2510  fd41
   2511  fd41				   CD
   2512  fd41		       66		      .byte.b	#%01100110	;
   2513  fd42		       a5		      .byte.b	#%10100101	; 
   2514  fd43		       a5		      .byte.b	#%10100101	; 
   2515  fd44		       a5		      .byte.b	#%10100101	;
   2516  fd45		       66		      .byte.b	#%01100110	;
   2517  fd46
   2518  fd46				   CE
   2519  fd46		       e7		      .byte.b	#%11100111	;
   2520  fd47		       24		      .byte.b	#%00100100	; 
   2521  fd48		       e7		      .byte.b	#%11100111	; 
   2522  fd49		       24		      .byte.b	#%00100100	; 
   2523  fd4a		       e7		      .byte.b	#%11100111	;
   2524  fd4b
   2525  fd4b				   CF
   2526  fd4b		       24		      .byte.b	#%00100100	;
   2527  fd4c		       24		      .byte.b	#%00100100	; 
   2528  fd4d		       e7		      .byte.b	#%11100111	; 
   2529  fd4e		       24		      .byte.b	#%00100100	; 
   2530  fd4f		       e7		      .byte.b	#%11100111	;
   2531  fd50
   2532  fd50				   CG
   2533  fd50		       c3		      .byte.b	#%11000011	;
   2534  fd51		       a5		      .byte.b	#%10100101	; 
   2535  fd52		       a5		      .byte.b	#%10100101	; 
   2536  fd53		       24		      .byte.b	#%00100100	; 
   2537  fd54		       c3		      .byte.b	#%11000011	;	
   2538  fd55
   2539  fd55				   CH
   2540  fd55		       a5		      .byte.b	#%10100101	;
   2541  fd56		       a5		      .byte.b	#%10100101	; 
   2542  fd57		       e7		      .byte.b	#%11100111	; 
   2543  fd58		       a5		      .byte.b	#%10100101	; 
   2544  fd59		       a5		      .byte.b	#%10100101	;
   2545  fd5a
   2546  fd5a				   CK
   2547  fd5a		       a5		      .byte.b	#%10100101	;
   2548  fd5b		       a5		      .byte.b	#%10100101	; 
   2549  fd5c		       66		      .byte.b	#%01100110	; 
   2550  fd5d		       a5		      .byte.b	#%10100101	; 
   2551  fd5e		       a5		      .byte.b	#%10100101	;
   2552  fd5f
   2553  fd5f				   CL
   2554  fd5f		       e7		      .byte.b	#%11100111	;
   2555  fd60		       24		      .byte.b	#%00100100	; 
   2556  fd61		       24		      .byte.b	#%00100100	; 
   2557  fd62		       24		      .byte.b	#%00100100	; 
   2558  fd63		       24		      .byte.b	#%00100100	;
   2559  fd64
   2560  fd64				   CM
   2561  fd64		       a5		      .byte.b	#%10100101	;
   2562  fd65		       a5		      .byte.b	#%10100101	; 
   2563  fd66		       a5		      .byte.b	#%10100101	; 
   2564  fd67		       e7		      .byte.b	#%11100111	; 
   2565  fd68		       a5		      .byte.b	#%10100101	;
   2566  fd69
   2567  fd69				   CN
   2568  fd69		       a5		      .byte.b	#%10100101	;
   2569  fd6a		       a5		      .byte.b	#%10100101	; 
   2570  fd6b		       a5		      .byte.b	#%10100101	; 
   2571  fd6c		       a5		      .byte.b	#%10100101	; 
   2572  fd6d		       66		      .byte.b	#%01100110	;	
   2573  fd6e
   2574  fd6e
   2575  fd6e				   CO
   2576  fd6e		       42		      .byte.b	#%01000010	;
   2577  fd6f		       a5		      .byte.b	#%10100101	; 
   2578  fd70		       a5		      .byte.b	#%10100101	; 
   2579  fd71		       a5		      .byte.b	#%10100101	; 
   2580  fd72		       42		      .byte.b	#%01000010	;	
   2581  fd73
   2582  fd73				   CP
   2583  fd73		       24		      .byte.b	#%00100100	;
   2584  fd74		       24		      .byte.b	#%00100100	; 
   2585  fd75		       e7		      .byte.b	#%11100111	; 
   2586  fd76		       a5		      .byte.b	#%10100101	; 
   2587  fd77		       e7		      .byte.b	#%11100111	;
   2588  fd78
   2589  fd78				   CR
   2590  fd78		       a5		      .byte.b	#%10100101	;
   2591  fd79		       a5		      .byte.b	#%10100101	; 
   2592  fd7a		       66		      .byte.b	#%01100110	; 
   2593  fd7b		       a5		      .byte.b	#%10100101	; 
   2594  fd7c		       66		      .byte.b	#%01100110	;
   2595  fd7d
   2596  fd7d				   CS
   2597  fd7d		       66		      .byte.b	#%01100110	;
   2598  fd7e		       81		      .byte.b	#%10000001	; 
   2599  fd7f		       42		      .byte.b	#%01000010	; 
   2600  fd80		       24		      .byte.b	#%00100100	; 
   2601  fd81		       c3		      .byte.b	#%11000011	;
   2602  fd82
   2603  fd82				   CT
   2604  fd82		       42		      .byte.b	#%01000010	;
   2605  fd83		       42		      .byte.b	#%01000010	; 
   2606  fd84		       42		      .byte.b	#%01000010	; 
   2607  fd85		       42		      .byte.b	#%01000010	; 
   2608  fd86		       e7		      .byte.b	#%11100111	;
   2609  fd87
   2610  fd87				   CV
   2611  fd87		       42		      .byte.b	#%01000010	;
   2612  fd88		       a5		      .byte.b	#%10100101	; 
   2613  fd89		       a5		      .byte.b	#%10100101	; 
   2614  fd8a		       a5		      .byte.b	#%10100101	; 
   2615  fd8b		       a5		      .byte.b	#%10100101	;	
   2616  fd8c
   2617  fd8c				   CY
   2618  fd8c		       42		      .byte.b	#%01000010	;
   2619  fd8d		       42		      .byte.b	#%01000010	; 
   2620  fd8e		       42		      .byte.b	#%01000010	; 
   2621  fd8f		       a5		      .byte.b	#%10100101	; 
   2622  fd90		       a5		      .byte.b	#%10100101	;
   2623  fd91
   2624  fd91				   CW
   2625  fd91		       a5		      .byte.b	#%10100101	;
   2626  fd92		       e7		      .byte.b	#%11100111	; 
   2627  fd93		       a5		      .byte.b	#%10100101	; 
   2628  fd94		       a5		      .byte.b	#%10100101	; 
   2629  fd95		       a5		      .byte.b	#%10100101	;
   2630  fd96
   2631  fd96				   CZ
   2632  fd96		       e7		      .byte.b	#%11100111	;
   2633  fd97		       24		      .byte.b	#%00100100	; 
   2634  fd98		       42		      .byte.b	#%01000010	; 
   2635  fd99		       81		      .byte.b	#%10000001	; 
   2636  fd9a		       e7		      .byte.b	#%11100111	;
   2637  fd9b
   2638  fd9b
   2639  fd9b				   Exclamation
   2640  fd9b		       42		      .byte.b	#%01000010	;
   2641  fd9c		       00		      .byte.b	#%00000000	; 
   2642  fd9d		       42		      .byte.b	#%01000010	; 
   2643  fd9e		       42		      .byte.b	#%01000010	; 
   2644  fd9f		       42		      .byte.b	#%01000010	;
   2645  fda0
   2646  fda0				   Dot
   2647  fda0		       42		      .byte.b	#%01000010	;
   2648  fda1		       42		      .byte.b	#%01000010	; 
   2649  fda2		       00		      .byte.b	#%00000000	; 
   2650  fda3		       00		      .byte.b	#%00000000	; 
   2651  fda4		       00		      .byte.b	#%00000000	;
   2652  fda5
   2653  fda5				   Pipe
   2654  fda5				   Colon
   2655  fda5		       42		      .byte.b	#%01000010	;
   2656  fda6		       42		      .byte.b	#%01000010	; 
   2657  fda7		       00		      .byte.b	#%00000000	; 
   2658  fda8		       42		      .byte.b	#%01000010	; 
   2659  fda9		       42		      .byte.b	#%01000010	;
   2660  fdaa
   2661  fdaa				   Triangle
   2662  fdaa		       81		      .byte.b	#%10000001	;
   2663  fdab		       c3		      .byte.b	#%11000011	; 
   2664  fdac		       e7		      .byte.b	#%11100111	; 
   2665  fdad		       c3		      .byte.b	#%11000011	; 
   2666  fdae		       81		      .byte.b	#%10000001	;
   2667  fdaf
   2668  fdaf				   Space
   2669  fdaf				   C0B
   2670  fdaf		       00		      .byte.b	#%00000000	;
   2671  fdb0		       00		      .byte.b	#%00000000	; 
   2672  fdb1		       00		      .byte.b	#%00000000	; 
   2673  fdb2		       00		      .byte.b	#%00000000	; 
   2674  fdb3		       00		      .byte.b	#%00000000	;	
   2675  fdb4				   C1B
   2676  fdb4		       24		      .byte.b	#%00100100	;
   2677  fdb5		       00		      .byte.b	#%00000000	; 
   2678  fdb6		       00		      .byte.b	#%00000000	; 
   2679  fdb7		       00		      .byte.b	#%00000000	; 
   2680  fdb8		       00		      .byte.b	#%00000000	;
   2681  fdb9				   C2B
   2682  fdb9		       66		      .byte.b	#%01100110	;
   2683  fdba		       00		      .byte.b	#%00000000	; 
   2684  fdbb		       00		      .byte.b	#%00000000	; 
   2685  fdbc		       00		      .byte.b	#%00000000	; 
   2686  fdbd		       00		      .byte.b	#%00000000	;
   2687  fdbe				   C3B
   2688  fdbe		       e7		      .byte.b	#%11100111	;
   2689  fdbf		       00		      .byte.b	#%00000000	; 
   2690  fdc0		       00		      .byte.b	#%00000000	; 
   2691  fdc1		       00		      .byte.b	#%00000000	; 
   2692  fdc2		       00		      .byte.b	#%00000000	;
   2693  fdc3				   C4B
   2694  fdc3		       e7		      .byte.b	#%11100111	;
   2695  fdc4		       24		      .byte.b	#%00100100	; 
   2696  fdc5		       00		      .byte.b	#%00000000	; 
   2697  fdc6		       00		      .byte.b	#%00000000	; 
   2698  fdc7		       00		      .byte.b	#%00000000	;
   2699  fdc8				   C5B
   2700  fdc8		       e7		      .byte.b	#%11100111	;
   2701  fdc9		       66		      .byte.b	#%01100110	; 
   2702  fdca		       00		      .byte.b	#%00000000	; 
   2703  fdcb		       00		      .byte.b	#%00000000	; 
   2704  fdcc		       00		      .byte.b	#%00000000	;
   2705  fdcd				   C6B
   2706  fdcd		       e7		      .byte.b	#%11100111	;
   2707  fdce		       e7		      .byte.b	#%11100111	; 
   2708  fdcf		       00		      .byte.b	#%00000000	; 
   2709  fdd0		       00		      .byte.b	#%00000000	; 
   2710  fdd1		       00		      .byte.b	#%00000000	;
   2711  fdd2				   C7B
   2712  fdd2		       e7		      .byte.b	#%11100111	;
   2713  fdd3		       e7		      .byte.b	#%11100111	; 
   2714  fdd4		       24		      .byte.b	#%00100100	; 
   2715  fdd5		       00		      .byte.b	#%00000000	; 
   2716  fdd6		       00		      .byte.b	#%00000000	;
   2717  fdd7				   C8B
   2718  fdd7		       e7		      .byte.b	#%11100111	;
   2719  fdd8		       e7		      .byte.b	#%11100111	; 
   2720  fdd9		       66		      .byte.b	#%01100110	; 
   2721  fdda		       00		      .byte.b	#%00000000	; 
   2722  fddb		       00		      .byte.b	#%00000000	;
   2723  fddc				   C9B
   2724  fddc		       e7		      .byte.b	#%11100111	;
   2725  fddd		       e7		      .byte.b	#%11100111	; 
   2726  fdde		       e7		      .byte.b	#%11100111	; 
   2727  fddf		       00		      .byte.b	#%00000000	; 
   2728  fde0		       00		      .byte.b	#%00000000	;
   2729  fde1				   CAB
   2730  fde1		       e7		      .byte.b	#%11100111	;
   2731  fde2		       e7		      .byte.b	#%11100111	; 
   2732  fde3		       e7		      .byte.b	#%11100111	; 
   2733  fde4		       24		      .byte.b	#%00100100	; 
   2734  fde5		       00		      .byte.b	#%00000000	;
   2735  fde6				   CBB
   2736  fde6		       e7		      .byte.b	#%11100111	;
   2737  fde7		       e7		      .byte.b	#%11100111	; 
   2738  fde8		       e7		      .byte.b	#%11100111	; 
   2739  fde9		       66		      .byte.b	#%01100110	; 
   2740  fdea		       00		      .byte.b	#%00000000	;
   2741  fdeb				   CCB
   2742  fdeb		       e7		      .byte.b	#%11100111	;
   2743  fdec		       e7		      .byte.b	#%11100111	; 
   2744  fded		       e7		      .byte.b	#%11100111	; 
   2745  fdee		       e7		      .byte.b	#%11100111	; 
   2746  fdef		       00		      .byte.b	#%00000000	;
   2747  fdf0
   2748  fdf0				   CDB
   2749  fdf0		       e7		      .byte.b	#%11100111	;
   2750  fdf1		       e7		      .byte.b	#%11100111	; 
   2751  fdf2		       e7		      .byte.b	#%11100111	; 
   2752  fdf3		       e7		      .byte.b	#%11100111	; 
   2753  fdf4		       24		      .byte.b	#%00100100	;
   2754  fdf5
   2755  fdf5				   CEB
   2756  fdf5		       e7		      .byte.b	#%11100111	;
   2757  fdf6		       e7		      .byte.b	#%11100111	; 
   2758  fdf7		       e7		      .byte.b	#%11100111	; 
   2759  fdf8		       e7		      .byte.b	#%11100111	; 
   2760  fdf9		       66		      .byte.b	#%01100110	;
   2761  fdfa
   2762  fdfa				   CFB
   2763  fdfa		       e7		      .byte.b	#%11100111	;
   2764  fdfb		       e7		      .byte.b	#%11100111	; 
   2765  fdfc		       e7		      .byte.b	#%11100111	; 
   2766  fdfd		       e7		      .byte.b	#%11100111	; 
   2767  fdfe		       e7		      .byte.b	#%11100111	;
   2768  fdff
   2769  fe00					      org	$FE00
   2770  fe00				   AesTable
   2771  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2772  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2773  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2774  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2775  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2776  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2777  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2778  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2779  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2780  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2781  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2782  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2783  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2784  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2785  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2786  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2787  ff00
   2788  ff00							; From FF00 to FFFB (122 bytes) to use here
   2789  ff00
   2790  ff00				   StaticText		; All static text must be on the same MSB block. 
   2791  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2792  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2793  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2794  ff02		       77		      .byte.b	#<CP + #FONT_OFFSET
   2795  ff03		       86		      .byte.b	#<CT + #FONT_OFFSET
   2796  ff04		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2797  ff05
   2798  ff05				   HellwayLeftText
   2799  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2800  ff06		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2801  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2802  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2803  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2804  ff0a
   2805  ff0a				   HellwayRightText
   2806  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2807  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2808  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2809  ff0d		       90		      .byte.b	#<CY + #FONT_OFFSET
   2810  ff0e		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2811  ff0f
   2812  ff0f				   OpbText
   2813  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2814  ff10		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2815  ff11		       72		      .byte.b	#<CO + #FONT_OFFSET
   2816  ff12		       77		      .byte.b	#<CP + #FONT_OFFSET
   2817  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2818  ff14
   2819  ff14				   YearText
   2820  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2821  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2822  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2823  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2824  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2825  ff19
   2826  ff19				   GameText
   2827  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2828  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2829  ff1b		       68		      .byte.b	#<CM + #FONT_OFFSET
   2830  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2831  ff1d		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2832  ff1e
   2833  ff1e				   OverText
   2834  ff1e		       72		      .byte.b	#<CO + #FONT_OFFSET
   2835  ff1f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2836  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2837  ff21		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2838  ff22		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2839  ff23				   GoText
   2840  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2841  ff24		       72		      .byte.b	#<CO + #FONT_OFFSET
   2842  ff25		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2843  ff26		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2844  ff27		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2845  ff28
   2846  ff28				   VersionText
   2847  ff28		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2848  ff29		       a4		      .byte.b	#<Dot + #FONT_OFFSET
   2849  ff2a		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2850  ff2b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2851  ff2c		       ae		      .byte.b	#<Triangle + #FONT_OFFSET
   2852  ff2d				   EndStaticText
   2853  ff2d
   2854  ff2d				   TachometerSizeLookup1
   2855  ff2d		       1f		      .byte.b	#%00011111
   2856  ff2e		       3f		      .byte.b	#%00111111
   2857  ff2f		       7f		      .byte.b	#%01111111
   2858  ff30		       ff		      .byte.b	#%11111111
   2859  ff31		       ff		      .byte.b	#%11111111
   2860  ff32		       ff		      .byte.b	#%11111111
   2861  ff33		       ff		      .byte.b	#%11111111
   2862  ff34		       ff		      .byte.b	#%11111111
   2863  ff35
   2864  ff35				   TachometerSizeLookup2
   2865  ff35		       00		      .byte.b	#%00000000
   2866  ff36		       00		      .byte.b	#%00000000
   2867  ff37		       00		      .byte.b	#%00000000
   2868  ff38		       00		      .byte.b	#%00000000
   2869  ff39		       80		      .byte.b	#%10000000
   2870  ff3a		       c0		      .byte.b	#%11000000
   2871  ff3b		       e0		      .byte.b	#%11100000
   2872  ff3c		       f0		      .byte.b	#%11110000
   2873  ff3d
   2874  ff3d				   TachometerGearLookup
   2875  ff3d		       01		      .byte.b	#%00000001
   2876  ff3e		       02		      .byte.b	#%00000010
   2877  ff3f		       04		      .byte.b	#%00000100
   2878  ff40		       08		      .byte.b	#%00001000
   2879  ff41		       10		      .byte.b	#%00010000
   2880  ff42		       30		      .byte.b	#%00110000
   2881  ff43
   2882  ff43				   EngineSoundType
   2883  ff43		       02		      .byte.b	#2
   2884  ff44		       02		      .byte.b	#2
   2885  ff45		       0e		      .byte.b	#14
   2886  ff46		       06		      .byte.b	#6
   2887  ff47		       06		      .byte.b	#6
   2888  ff48		       0e		      .byte.b	#14
   2889  ff49
   2890  ff49				   EngineBaseFrequence
   2891  ff49		       1f		      .byte.b	#31
   2892  ff4a		       15		      .byte.b	#21
   2893  ff4b		       14		      .byte.b	#20
   2894  ff4c		       1f		      .byte.b	#31
   2895  ff4d		       16		      .byte.b	#22
   2896  ff4e		       03		      .byte.b	#3
   2897  ff4f
   2898  ff4f				   CarSprite0		; Upside down, Original Car
   2899  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2900  ff57				   CarSprite0NoPadding
   2901  ff57		       7e		      .byte.b	#%01111110
   2902  ff58		       24		      .byte.b	#%00100100
   2903  ff59		       bd		      .byte.b	#%10111101
   2904  ff5a		       3c		      .byte.b	#%00111100
   2905  ff5b		       bd		      .byte.b	#%10111101
   2906  ff5c		       3c		      .byte.b	#%00111100
   2907  ff5d
   2908  ff5d				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2909  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2910  ff65				   CarSprite1NoPadding
   2911  ff65		       bd		      .byte.b	#%10111101
   2912  ff66		       7e		      .byte.b	#%01111110
   2913  ff67		       5a		      .byte.b	#%01011010
   2914  ff68		       66		      .byte.b	#%01100110
   2915  ff69		       bd		      .byte.b	#%10111101
   2916  ff6a		       3c		      .byte.b	#%00111100
   2917  ff6b
   2918  ff6b				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2919  ff6b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2920  ff73				   CarSprite2NoPadding
   2921  ff73		       7e		      .byte.b	#%01111110
   2922  ff74		       a5		      .byte.b	#%10100101
   2923  ff75		       42		      .byte.b	#%01000010
   2924  ff76		       42		      .byte.b	#%01000010
   2925  ff77		       bd		      .byte.b	#%10111101
   2926  ff78		       7e		      .byte.b	#%01111110
   2927  ff79
   2928  ff79				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2929  ff79		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2930  ff81				   CarSprite3NoPadding
   2931  ff81		       3c		      .byte.b	#%00111100
   2932  ff82		       db		      .byte.b	#%11011011
   2933  ff83		       db		      .byte.b	#%11011011
   2934  ff84		       3c		      .byte.b	#%00111100
   2935  ff85		       5a		      .byte.b	#%01011010
   2936  ff86		       3c		      .byte.b	#%00111100
   2937  ff87
   2938  ff87				   TrafficSpeeds
   2939  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2940  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2941  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2942  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2943  ff8b		       e6		      .byte.b	#$E6	;  Trafic2 L
   2944  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2945  ff8d		       c2		      .byte.b	#$C2	;  Trafic3 L
   2946  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2947  ff8f		       9e		      .byte.b	#$9E	;  Trafic4 L
   2948  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2949  ff91				   TrafficSpeedsHighDelta
   2950  ff91		       00		      .byte.b	#$00	;  Trafic0 L
   2951  ff92		       00		      .byte.b	#$00	;  Trafic0 H
   2952  ff93		       0a		      .byte.b	#$0A	;  Trafic1 L
   2953  ff94		       01		      .byte.b	#$01	;  Trafic1 H
   2954  ff95		       c8		      .byte.b	#$C8	;  Trafic2 L
   2955  ff96		       00		      .byte.b	#$00	;  Trafic2 H
   2956  ff97		       86		      .byte.b	#$86	;  Trafic3 L
   2957  ff98		       00		      .byte.b	#$00	;  Trafic3 H
   2958  ff99		       44		      .byte.b	#$44	;  Trafic4 L
   2959  ff9a		       00		      .byte.b	#$00	;  Trafic4 H
   2960  ff9b
   2961  ff9b				   CarIdToSpriteAddressL
   2962  ff9b		       4f		      .byte.b	#<CarSprite0
   2963  ff9c		       5d		      .byte.b	#<CarSprite1
   2964  ff9d		       6b		      .byte.b	#<CarSprite2
   2965  ff9e		       79		      .byte.b	#<CarSprite3
   2966  ff9f
   2967  ff9f				   CarIdToSpriteAddressH
   2968  ff9f		       ff		      .byte.b	#>CarSprite0
   2969  ffa0		       ff		      .byte.b	#>CarSprite1
   2970  ffa1		       ff		      .byte.b	#>CarSprite2
   2971  ffa2		       ff		      .byte.b	#>CarSprite3
   2972  ffa3
   2973  ffa3				   EnemyCarIdToSpriteAddressL
   2974  ffa3		       57		      .byte.b	#<CarSprite0NoPadding
   2975  ffa4		       65		      .byte.b	#<CarSprite1NoPadding
   2976  ffa5		       73		      .byte.b	#<CarSprite2NoPadding
   2977  ffa6		       81		      .byte.b	#<CarSprite3NoPadding
   2978  ffa7
   2979  ffa7				   EnemyCarIdToSpriteAddressH
   2980  ffa7		       ff		      .byte.b	#>CarSprite0NoPadding
   2981  ffa8		       ff		      .byte.b	#>CarSprite1NoPadding
   2982  ffa9		       ff		      .byte.b	#>CarSprite2NoPadding
   2983  ffaa		       ff		      .byte.b	#>CarSprite3NoPadding
   2984  ffab
   2985  ffab				   CarIdToAccelerateSpeed
   2986  ffab		       80		      .byte.b	#128
   2987  ffac		       c0		      .byte.b	#192
   2988  ffad		       60		      .byte.b	#96
   2989  ffae		       c0		      .byte.b	#192
   2990  ffaf
   2991  ffaf				   CarIdToTimeoverBreakInterval 		; Glide
   2992  ffaf		       03		      .byte.b	#%00000011	;Every 4 frames
   2993  ffb0		       03		      .byte.b	#%00000011	;Every 4 frames
   2994  ffb1		       0f		      .byte.b	#%00001111	;Every 16 frames
   2995  ffb2		       03		      .byte.b	#%00000011	;Every 4 frames
   2996  ffb3
   2997  ffb3				   CarIdToMaxSpeedL
   2998  ffb3		       80		      .byte.b	#$80
   2999  ffb4		       00		      .byte.b	#$00	; One less gear
   3000  ffb5		       80		      .byte.b	#$80
   3001  ffb6		       80		      .byte.b	#$80
   3002  ffb7
   3003  ffb7				   CarIdToMaxGear
   3004  ffb7		       05		      .byte.b	#5
   3005  ffb8		       04		      .byte.b	#4	; One less gear
   3006  ffb9		       05		      .byte.b	#5
   3007  ffba		       05		      .byte.b	#5
   3008  ffbb
   3009  ffbb				   GearToBreakSpeedTable
   3010  ffbb		       09		      .byte.b	#(BREAK_SPEED - 1)
   3011  ffbc		       09		      .byte.b	#(BREAK_SPEED - 1)
   3012  ffbd		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3013  ffbe		       0b		      .byte.b	#(BREAK_SPEED + 1)
   3014  ffbf		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3015  ffc0		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3016  ffc1
   3017  ffc1				   TrafficColorTable
   3018  ffc1		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3019  ffc2		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3020  ffc3		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3021  ffc4		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3022  ffc5
   3023  ffc5				   TrafficChanceTable
   3024  ffc5		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3025  ffc6		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3026  ffc7		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3027  ffc8		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3028  ffc9
   3029  ffc9				   TrafficTimeTable
   3030  ffc9		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3031  ffca		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3032  ffcb		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3033  ffcc		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3034  ffcd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3035  ffce
   3036  ffce
   3037  fffc					      org	$FFFC
   3038  fffc		       00 f0		      .word.w	BeforeStart
   3039  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
