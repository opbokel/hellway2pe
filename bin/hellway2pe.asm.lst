------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 09	   ENGINE_VOLUME =	9
    104  f000
    105  f000		       00 80	   GRP0Cache  =	$80
    106  f000		       00 81	   PF0Cache   =	$81
    107  f000		       00 82	   PF1Cache   =	$82
    108  f000		       00 83	   PF2Cache   =	$83
    109  f000		       00 84	   GRP1Cache  =	$84
    110  f000		       00 85	   ENABLCache =	$85
    111  f000		       00 86	   ENAM0Cache =	$86
    112  f000		       00 87	   ENAM1Cache =	$87
    113  f000
    114  f000		       00 8c	   FrameCount0 =	$8C	;
    115  f000		       00 8d	   FrameCount1 =	$8D	;
    116  f000
    117  f000		       00 8e	   CollisionCounter =	$8E
    118  f000		       00 8f	   OpCollisionCounter =	$8F
    119  f000
    120  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    121  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    122  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    123  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    124  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    125  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    126  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    127  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    128  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    129  f000
    130  f000							;Temporary variables, multiple uses
    131  f000		       00 b0	   Tmp0       =	$B0
    132  f000		       00 b1	   Tmp1       =	$B1
    133  f000		       00 b2	   Tmp2       =	$B2
    134  f000		       00 b3	   Tmp3       =	$B3
    135  f000		       00 b4	   Tmp4       =	$B4
    136  f000		       00 b5	   Tmp5       =	$B5
    137  f000
    138  f000		       00 b6	   Player0X   =	$B6
    139  f000		       00 b7	   Player1X   =	$B7
    140  f000		       00 b8	   CountdownTimer =	$B8
    141  f000		       00 b9	   OpCountdownTimer =	$B9
    142  f000		       00 ba	   Traffic0Msb =	$BA
    143  f000		       00 bb	   OpTraffic0Msb =	$BB
    144  f000		       00 bc	   SwitchDebounceCounter =	$BC
    145  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    146  f000		       00 be	   TrafficChance =	$BE
    147  f000		       00 bf	   OpTrafficChance =	$BF
    148  f000
    149  f000		       00 c0	   CheckpointTime =	$C0
    150  f000		       00 c1	   OpCheckpointTime =	$C1
    151  f000		       00 c2	   TrafficColor =	$C2
    152  f000		       00 c3	   OpTrafficColor =	$C3
    153  f000		       00 c4	   CurrentDifficulty =	$C4
    154  f000		       00 c5	   OpCurrentDifficulty =	$C5
    155  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    156  f000
    157  f000		       00 c7	   CurrentCarId =	$C7
    158  f000		       00 c8	   OpCurrentCarId =	$C8
    159  f000
    160  f000		       00 c9	   ScoreFontColor =	$C9
    161  f000		       00 ca	   OpScoreFontColor =	$CA
    162  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    163  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    164  f000		       00 cd	   NextCheckpoint =	$CD
    165  f000		       00 ce	   OpNextCheckpoint =	$CE
    166  f000		       00 cf	   OpponentLine =	$CF
    167  f000
    168  f000		       00 d0	   ScoreD0    =	$D0
    169  f000		       00 d1	   ScoreD1    =	$D1
    170  f000		       00 d2	   ScoreD2    =	$D2
    171  f000		       00 d3	   ScoreD3    =	$D3
    172  f000		       00 d4	   ScoreD4    =	$D4
    173  f000
    174  f000		       00 d5	   Gear       =	$D5
    175  f000		       00 d6	   OpGear     =	$D6
    176  f000
    177  f000		       00 d7	   CarSpritePointerL =	$D7
    178  f000		       00 d8	   CarSpritePointerH =	$D8
    179  f000
    180  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    181  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    182  f000
    183  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    184  f000
    185  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    186  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    187  f000
    188  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    189  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    190  f000
    191  f000		       00 f0	   Player0SpeedL =	$F0
    192  f000		       00 f1	   Player1SpeedL =	$F1
    193  f000		       00 f2	   Player0SpeedH =	$F2
    194  f000		       00 f3	   Player1SpeedH =	$F3
    195  f000
    196  f000		       00 f4	   IsOpponentInFront =	$F4	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 e8 f6 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 8f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 f0		      STA	Player0SpeedL
    257  f059		       85 f1		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	CallConfigureDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	CallConfigureDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	CallConfigureDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   CallConfigureDifficulty
    274  f071		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    275  f073		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    276  f075		       a5 bd		      LDA	GameStatus
    277  f077		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    278  f079				   StoreCurrentDifficulty
    279  f079		       86 c4		      STX	CurrentDifficulty
    280  f07b		       86 c5		      STX	OpCurrentDifficulty
    281  f07d		       a2 00		      LDX	#0
    282  f07f		       20 bd f6 	      JSR	ConfigureDifficulty
    283  f082		       e8		      INX
    284  f083		       20 bd f6 	      JSR	ConfigureDifficulty
    285  f086
    286  f086				   SetGameNotRunning
    287  f086		       a9 00		      LDA	#0
    288  f088		       85 bd		      STA	GameStatus
    289  f08a
    290  f08a				   ConfigureTimer
    291  f08a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    292  f08c		       85 b8		      STA	CountdownTimer	;3
    293  f08e		       85 b9		      STA	OpCountdownTimer	;3
    294  f090
    295  f090				   ConfigurePlayer1XPosition
    296  f090		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    297  f092		       85 b7		      STA	Player1X	;3
    298  f094
    299  f094				   ConfigureOpNextCheckpoint
    300  f094		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    301  f096		       85 ce		      STA	OpNextCheckpoint
    302  f098
    303  f098				   HPositioning 		; Avoid sleep doing needed stuff
    304  f098		       85 02		      STA	WSYNC
    305  f09a
    306  f09a				   ConfigurePlayer0XPosition
    307  f09a		       a9 21		      LDA	#PLAYER_0_X_START	;2
    308  f09c		       85 b6		      STA	Player0X	;3
    309  f09e
    310  f09e				   ConfigureMissileSize
    311  f09e		       a9 30		      LDA	#%00110000	;2 Missile Size
    312  f0a0		       85 04		      STA	NUSIZ0	;3
    313  f0a2		       85 05		      STA	NUSIZ1	;3
    314  f0a4
    315  f0a4				   ConfigureNextCheckpoint
    316  f0a4		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    317  f0a6		       85 cd		      STA	NextCheckpoint
    318  f0a8
    319  f0a8		       a9 00		      LDA	#0	; Avoid missile reseting position 
    320  f0aa							;SLEEP 41
      0  f0aa					      SLEEP	4	;
      1  f0aa				   .CYCLES    SET	4
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     17  f0aa					      REPEND
     18  f0ab		       ea		      nop
     19  f0ac					      REPEND
    322  f0ac		       85 12		      STA	RESM0
      0  f0ae					      SLEEP	2	;
      1  f0ae				   .CYCLES    SET	2
      2  f0ae
      3  f0ae				  -	      IF	.CYCLES < 2
      4  f0ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ae				  -	      ERR
      6  f0ae					      ENDIF
      7  f0ae
      8  f0ae				  -	      IF	.CYCLES & 1
      9  f0ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ae				  -	      nop	0
     11  f0ae				  -	      ELSE
     12  f0ae				  -	      bit	VSYNC
     13  f0ae				  -	      ENDIF
     14  f0ae				  -.CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae					      REPEAT	.CYCLES / 2
     18  f0ae		       ea		      nop
     19  f0af					      REPEND
    324  f0af		       85 14		      STA	RESBL
      0  f0b1					      SLEEP	2
      1  f0b1				   .CYCLES    SET	2
      2  f0b1
      3  f0b1				  -	      IF	.CYCLES < 2
      4  f0b1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b1				  -	      ERR
      6  f0b1					      ENDIF
      7  f0b1
      8  f0b1				  -	      IF	.CYCLES & 1
      9  f0b1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b1				  -	      nop	0
     11  f0b1				  -	      ELSE
     12  f0b1				  -	      bit	VSYNC
     13  f0b1				  -	      ENDIF
     14  f0b1				  -.CYCLES    SET	.CYCLES - 3
     15  f0b1					      ENDIF
     16  f0b1
     17  f0b1					      REPEAT	.CYCLES / 2
     18  f0b1		       ea		      nop
     19  f0b2					      REPEND
    326  f0b2		       85 13		      STA	RESM1
      0  f0b4					      SLEEP	3
      1  f0b4				   .CYCLES    SET	3
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4					      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4					      ELSE
     12  f0b4		       24 00		      bit	VSYNC
     13  f0b6					      ENDIF
     14  f0b6				   .CYCLES    SET	.CYCLES - 3
     15  f0b6					      ENDIF
     16  f0b6
     17  f0b6				  -	      REPEAT	.CYCLES / 2
     18  f0b6				  -	      nop
     19  f0b6					      REPEND
    328  f0b6
    329  f0b6		       a9 e0		      LDA	#$E0
    330  f0b8		       85 24		      STA	HMBL
    331  f0ba		       85 22		      STA	HMM0
    332  f0bc		       85 23		      STA	HMM1
    333  f0be		       85 02		      STA	WSYNC
    334  f0c0		       85 2a		      STA	HMOVE
    335  f0c2		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    336  f0c4		       85 2b		      STA	HMCLR
      0  f0c6					      SLEEP	30
      1  f0c6				   .CYCLES    SET	30
      2  f0c6
      3  f0c6				  -	      IF	.CYCLES < 2
      4  f0c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c6				  -	      ERR
      6  f0c6					      ENDIF
      7  f0c6
      8  f0c6				  -	      IF	.CYCLES & 1
      9  f0c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c6				  -	      nop	0
     11  f0c6				  -	      ELSE
     12  f0c6				  -	      bit	VSYNC
     13  f0c6				  -	      ENDIF
     14  f0c6				  -.CYCLES    SET	.CYCLES - 3
     15  f0c6					      ENDIF
     16  f0c6
     17  f0c6					      REPEAT	.CYCLES / 2
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     17  f0ce					      REPEND
     18  f0cf		       ea		      nop
     17  f0cf					      REPEND
     18  f0d0		       ea		      nop
     17  f0d0					      REPEND
     18  f0d1		       ea		      nop
     17  f0d1					      REPEND
     18  f0d2		       ea		      nop
     17  f0d2					      REPEND
     18  f0d3		       ea		      nop
     17  f0d3					      REPEND
     18  f0d4		       ea		      nop
     19  f0d5					      REPEND
    338  f0d5		       85 10		      STA	RESP0
    339  f0d7							;SLEEP 5 ; Temporarily move player 1 away.
    340  f0d7		       85 11		      STA	RESP1
    341  f0d9
    342  f0d9				   WaitResetToEnd
    343  f0d9		       ad 84 02 	      LDA	INTIM
    344  f0dc		       d0 fb		      BNE	WaitResetToEnd
    345  f0de
    346  f0de				   MainLoop
    347  f0de		       a9 02		      LDA	#2
    348  f0e0		       85 00		      STA	VSYNC
    349  f0e2		       85 02		      STA	WSYNC
    350  f0e4		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    351  f0e6				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    352  f0e6		       a9 01		      LDA	#%00000001	;3
    353  f0e8		       24 df		      BIT	TextFlickerMode	;2
    354  f0ea		       f0 05		      BEQ	TextSideFrameZero	;2
    355  f0ec		       25 8d		      AND	FrameCount1	;2
    356  f0ee		       4c f3 f0 	      JMP	StoreTextSize	;3
    357  f0f1				   TextSideFrameZero
    358  f0f1		       25 8c		      AND	FrameCount0	;2
    359  f0f3				   StoreTextSize
    360  f0f3		       85 de		      STA	TextSide	;3
    361  f0f5
    362  f0f5				   PrepareMaxHMove
      0  f0f5					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0f5				   .CYCLES    SET	18
      2  f0f5
      3  f0f5				  -	      IF	.CYCLES < 2
      4  f0f5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0f5				  -	      ERR
      6  f0f5					      ENDIF
      7  f0f5
      8  f0f5				  -	      IF	.CYCLES & 1
      9  f0f5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0f5				  -	      nop	0
     11  f0f5				  -	      ELSE
     12  f0f5				  -	      bit	VSYNC
     13  f0f5				  -	      ENDIF
     14  f0f5				  -.CYCLES    SET	.CYCLES - 3
     15  f0f5					      ENDIF
     16  f0f5
     17  f0f5					      REPEAT	.CYCLES / 2
     18  f0f5		       ea		      nop
     17  f0f5					      REPEND
     18  f0f6		       ea		      nop
     17  f0f6					      REPEND
     18  f0f7		       ea		      nop
     17  f0f7					      REPEND
     18  f0f8		       ea		      nop
     17  f0f8					      REPEND
     18  f0f9		       ea		      nop
     17  f0f9					      REPEND
     18  f0fa		       ea		      nop
     17  f0fa					      REPEND
     18  f0fb		       ea		      nop
     17  f0fb					      REPEND
     18  f0fc		       ea		      nop
     17  f0fc					      REPEND
     18  f0fd		       ea		      nop
     19  f0fe					      REPEND
    364  f0fe		       a9 80		      LDA	#$80
    365  f100		       85 24		      STA	HMBL
    366  f102		       85 22		      STA	HMM0
    367  f104		       85 23		      STA	HMM1
    368  f106		       85 20		      STA	HMP0
    369  f108		       85 21		      STA	HMP1
    370  f10a		       85 02		      STA	WSYNC
    371  f10c		       85 2a		      STA	HMOVE	; 1/10			
    372  f10e
    373  f10e				   ConfigVBlankTimer
    374  f10e		       a5 c6		      LDA	GameMode
    375  f110		       c9 10		      CMP	#MAX_GAME_MODE
    376  f112		       f0 05		      BEQ	SetVblankTimerQrCode
    377  f114		       a9 29		      LDA	#VBLANK_TIMER
    378  f116		       4c 1b f1 	      JMP	SetVblankTimer
    379  f119				   SetVblankTimerQrCode
    380  f119		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    381  f11b
    382  f11b				   SetVblankTimer
    383  f11b		       85 02		      STA	WSYNC	;3
    384  f11d		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    385  f11f		       8d 96 02 	      STA	TIM64T	;3	
    386  f122		       a9 00		      LDA	#0	;2
    387  f124		       85 00		      STA	VSYNC	;3	
    388  f126
    389  f126				   RandomizeGame
    390  f126		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    391  f128		       d0 2d		      BNE	EndRandomizeGame
    392  f12a		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    393  f12c		       29 02		      AND	#%00000010
    394  f12e		       f0 24		      BEQ	DeterministicGame
    395  f130		       a6 96		      LDX	TrafficOffset1 + 2
    396  f132		       bd 00 fe 	      LDA	AesTable,X
    397  f135		       45 8c		      EOR	FrameCount0
    398  f137		       85 96		      STA	TrafficOffset1 + 2
    399  f139		       85 a6		      STA	OpTrafficOffset1 + 2
    400  f13b		       a6 9a		      LDX	TrafficOffset2 + 2
    401  f13d		       bd 00 fe 	      LDA	AesTable,X
    402  f140		       45 8c		      EOR	FrameCount0
    403  f142		       85 9a		      STA	TrafficOffset2 + 2
    404  f144		       85 aa		      STA	OpTrafficOffset2 + 2
    405  f146		       a6 9e		      LDX	TrafficOffset3 + 2
    406  f148		       bd 00 fe 	      LDA	AesTable,X
    407  f14b		       45 8c		      EOR	FrameCount0
    408  f14d		       85 9e		      STA	TrafficOffset3 + 2
    409  f14f		       85 ae		      STA	OpTrafficOffset3 + 2
    410  f151		       4c 57 f1 	      JMP	EndRandomizeGame
    411  f154
    412  f154				   DeterministicGame
    413  f154		       20 e8 f6 	      JSR	DefaultOffsets
    414  f157
    415  f157				   EndRandomizeGame
    416  f157
    417  f157
    418  f157				   CountFrame
    419  f157		       e6 8c		      INC	FrameCount0	; 5
    420  f159		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    421  f15b		       e6 8d		      INC	FrameCount1	; 5 
    422  f15d				   SkipIncFC1
    423  f15d
    424  f15d				   CallDrawQrCode
    425  f15d		       a5 c6		      LDA	GameMode
    426  f15f		       c9 10		      CMP	#MAX_GAME_MODE
    427  f161		       d0 03		      BNE	TestIsGameRunning
    428  f163		       4c 60 fb 	      JMP	DrawQrCode
    429  f166
    430  f166							;Does not update the game if not running
    431  f166				   TestIsGameRunning
    432  f166		       a5 bd		      LDA	GameStatus	;3
    433  f168		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    434  f16a				   SelectCarWithDpadCall		; Only do it when game is stoped
    435  f16a		       a2 00		      LDX	#0	; Player 0
    436  f16c		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    437  f16e		       85 b0		      STA	Tmp0
    438  f170		       20 03 f9 	      JSR	SelectCarWithDpad
    439  f173		       e8		      INX		; Player 1
    440  f174		       20 03 f9 	      JSR	SelectCarWithDpad
    441  f177
    442  f177							; Needs to draw the opponent in the correct line even when game stoped  
    443  f177							; Draeing is a destructive operation
    444  f177		       20 15 f9 	      JSR	ProcessOpponentLine
    445  f17a
    446  f17a				   CallConfigureCarSprites
    447  f17a		       20 bf f8 	      JSR	ConfigureCarSprites
    448  f17d				   SkipUpdateLogicJump
    449  f17d		       4c c6 f1 	      JMP	SkipUpdateLogic
    450  f180				   ContinueWithGameLogic
    451  f180
    452  f180				   CallEverySecond		; Timer for now
    453  f180		       a2 00		      LDX	#0
    454  f182		       20 36 fb 	      JSR	EverySecond
    455  f185		       e8		      INX
    456  f186		       20 36 fb 	      JSR	EverySecond
    457  f189
    458  f189
    459  f189				   ChangeTextFlickerMode
    460  f189		       a5 bc		      LDA	SwitchDebounceCounter
    461  f18b		       d0 0d		      BNE	EndChangeTextFlickerMode
    462  f18d		       ad 82 02 	      LDA	SWCHB
    463  f190		       29 02		      AND	#%00000010	;Game select
    464  f192		       d0 06		      BNE	EndChangeTextFlickerMode
    465  f194		       e6 df		      INC	TextFlickerMode
    466  f196		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    467  f198		       85 bc		      STA	SwitchDebounceCounter
    468  f19a				   EndChangeTextFlickerMode
    469  f19a
    470  f19a				   CallProcessSpeed
    471  f19a		       a2 00		      LDX	#0
    472  f19c		       20 4d fa 	      JSR	ProcessSpeed
    473  f19f
    474  f19f		       e8		      INX		; Player 1
    475  f1a0		       20 4d fa 	      JSR	ProcessSpeed
    476  f1a3
    477  f1a3				   CallUpdateOffsets
    478  f1a3		       a2 00		      LDX	#0	; Player 0
    479  f1a5		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    480  f1a7		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    481  f1a9		       a5 f0		      LDA	Player0SpeedL
    482  f1ab		       85 b4		      STA	Tmp4
    483  f1ad		       a5 f2		      LDA	Player0SpeedH
    484  f1af		       85 b5		      STA	Tmp5
    485  f1b1		       20 fa f9 	      JSR	UpdateOffsets
    486  f1b4
    487  f1b4							;LDX Exits the call with correct value.
    488  f1b4		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    489  f1b6		       85 b3		      STA	Tmp3
    490  f1b8		       a5 f1		      LDA	Player1SpeedL
    491  f1ba		       85 b4		      STA	Tmp4
    492  f1bc		       a5 f3		      LDA	Player1SpeedH
    493  f1be		       85 b5		      STA	Tmp5
    494  f1c0		       20 fa f9 	      JSR	UpdateOffsets
    495  f1c3
    496  f1c3				   CallProcessOpponentLine
    497  f1c3		       20 15 f9 	      JSR	ProcessOpponentLine
    498  f1c6
    499  f1c6
    500  f1c6				   SkipUpdateLogic		; Continue here if not paused
    501  f1c6
    502  f1c6				   CallStatusUpdateSbr
    503  f1c6		       a2 00		      LDX	#0
    504  f1c8		       20 43 fb 	      JSR	CalculateGear
    505  f1cb		       20 50 fb 	      JSR	ProcessScoreFontColor
    506  f1ce		       e8		      INX
    507  f1cf		       20 43 fb 	      JSR	CalculateGear
    508  f1d2		       20 50 fb 	      JSR	ProcessScoreFontColor
    509  f1d5
    510  f1d5				   CallProcessPlayerStatus
    511  f1d5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    512  f1d7		       85 b0		      STA	Tmp0
    513  f1d9		       a2 00		      LDX	#0
    514  f1db		       20 f0 fa 	      JSR	ProcessPlayerStatus
    515  f1de		       a5 a2		      LDA	OpTrafficOffset0 + 2
    516  f1e0		       85 b0		      STA	Tmp0
    517  f1e2		       e8		      INX
    518  f1e3		       20 f0 fa 	      JSR	ProcessPlayerStatus
    519  f1e6
    520  f1e6				   CallProcessPlayerSprites
    521  f1e6		       20 bf f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    522  f1e9
    523  f1e9				   CallProcessSound
    524  f1e9		       a2 00		      LDX	#0
    525  f1eb		       a5 92		      LDA	TrafficOffset0 + 2
    526  f1ed		       85 b1		      STA	Tmp1
    527  f1ef		       20 d4 f5 	      JSR	ProcessSound
    528  f1f2		       e8		      INX		; Player 1
    529  f1f3		       a5 a2		      LDA	OpTrafficOffset0 + 2
    530  f1f5		       85 b1		      STA	Tmp1
    531  f1f7		       20 d4 f5 	      JSR	ProcessSound
    532  f1fa
    533  f1fa							;Could be done during on vblank to save this comparisson time (before draw score), 
    534  f1fa							;but I am saving vblank cycles for now, in case of 2 players.
    535  f1fa				   ChooseTextSide		; 
    536  f1fa		       a5 de		      LDA	TextSide	;3
    537  f1fc		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    538  f1fe		       4c 87 f2 	      JMP	RightScoreWrite
    539  f201
    540  f201				   LeftScoreWrite
    541  f201		       a5 c9		      LDA	ScoreFontColor
    542  f203		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    543  f205		       f0 56		      BEQ	PrintCheckpoint
    544  f207		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    545  f209		       f0 5a		      BEQ	PrintStartGame
    546  f20b		       a5 bd		      LDA	GameStatus
    547  f20d		       f0 5e		      BEQ	PrintHellwayLeft
    548  f20f				   WriteDistance		;Not optimized yet, ugly code.
    549  f20f				   Digit0Timer
    550  f20f		       a5 b8		      LDA	CountdownTimer	;3
    551  f211		       85 b0		      STA	Tmp0
    552  f213		       20 f1 f8 	      JSR	BINBCD8
    553  f216							; LDA Tmp1 Also returned in A
    554  f216		       29 0f		      AND	#%00001111	;2
    555  f218		       aa		      TAX		; 2
    556  f219		       bd 6c fc 	      LDA	FontLookup,X	;4 
    557  f21c		       85 d1		      STA	ScoreD1	;3
    558  f21e
    559  f21e				   Digit1Timer
    560  f21e		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    561  f220		       4a		      LSR		; 2
    562  f221		       4a		      LSR		; 2
    563  f222		       4a		      LSR		; 2
    564  f223		       4a		      LSR		; 2
    565  f224		       aa		      TAX		; 2
    566  f225		       bd 6c fc 	      LDA	FontLookup,X	;4
    567  f228		       85 d0		      STA	ScoreD0	;3
    568  f22a
    569  f22a				   SpeedBar
    570  f22a		       a5 f0		      LDA	Player0SpeedL
    571  f22c		       29 e0		      AND	#%11100000	;2 Discard the last bits
    572  f22e		       18		      CLC
    573  f22f		       2a		      ROL		;First goes into carry
    574  f230		       2a		      ROL
    575  f231		       2a		      ROL
    576  f232		       2a		      ROL
    577  f233		       85 b0		      STA	Tmp0
    578  f235		       a5 f2		      LDA	Player0SpeedH
    579  f237		       0a		      ASL
    580  f238		       0a		      ASL
    581  f239		       0a		      ASL
    582  f23a		       05 b0		      ORA	Tmp0
    583  f23c		       aa		      TAX		; 2
    584  f23d		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    585  f240		       85 d2		      STA	ScoreD2	;3
    586  f242
    587  f242				   DistanceCheckpointCount		; Will run all letters in the future
    588  f242		       a5 92		      LDA	TrafficOffset0 + 2	;3
    589  f244		       29 f0		      AND	#%11110000	;2
    590  f246		       4a		      LSR
    591  f247		       4a		      LSR
    592  f248		       4a		      LSR
    593  f249		       4a		      LSR
    594  f24a		       aa		      TAX		; 2
    595  f24b		       bd 6c fc 	      LDA	FontLookup,X	;4 
    596  f24e		       85 d3		      STA	ScoreD3	;3
    597  f250
    598  f250				   DistanceBar		; 16 subdivisions per checkpoint
    599  f250		       a5 92		      LDA	TrafficOffset0 + 2	;3
    600  f252		       29 0f		      AND	#%00001111	;2
    601  f254		       aa		      TAX		; 2
    602  f255		       bd 7d fc 	      LDA	BarLookup,X	;4 
    603  f258		       85 d4		      STA	ScoreD4	;3
    604  f25a
    605  f25a				   EndDrawDistance
    606  f25a		       4c 04 f3 	      JMP	RightScoreWriteEnd	;3
    607  f25d
    608  f25d				   PrintCheckpoint
    609  f25d		       a2 00		      LDX	#<CheckpointText
    610  f25f		       20 fd f6 	      JSR	PrintStaticText
    611  f262		       4c 04 f3 	      JMP	RightScoreWriteEnd	;3
    612  f265				   PrintStartGame
    613  f265		       a2 23		      LDX	#<GoText
    614  f267		       20 fd f6 	      JSR	PrintStaticText
    615  f26a		       4c 04 f3 	      JMP	RightScoreWriteEnd	;3
    616  f26d
    617  f26d				   PrintHellwayLeft
    618  f26d		       a5 8d		      LDA	FrameCount1
    619  f26f		       29 01		      AND	#1
    620  f271		       d0 05		      BNE	PrintCreditsLeft
    621  f273		       a2 05		      LDX	#<HellwayLeftText
    622  f275		       4c 7a f2 	      JMP	PrintGameMode
    623  f278				   PrintCreditsLeft
    624  f278		       a2 0f		      LDX	#<OpbText
    625  f27a
    626  f27a				   PrintGameMode
    627  f27a		       20 fd f6 	      JSR	PrintStaticText
    628  f27d		       a6 c6		      LDX	GameMode
    629  f27f		       bd 6c fc 	      LDA	FontLookup,X	;4 
    630  f282		       85 d0		      STA	ScoreD0	;3
    631  f284		       4c 04 f3 	      JMP	RightScoreWriteEnd	;3
    632  f287
    633  f287				   RightScoreWrite
    634  f287		       a5 bd		      LDA	GameStatus
    635  f289		       f0 58		      BEQ	PrintHellwayRight
    636  f28b		       a5 c9		      LDA	ScoreFontColor
    637  f28d		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    638  f28f		       f0 d4		      BEQ	PrintStartGame
    639  f291		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    640  f293		       f0 61		      BEQ	PrintGameOver
    641  f295
    642  f295				   OpDigit0Timer
    643  f295		       a5 b9		      LDA	OpCountdownTimer	;3
    644  f297		       85 b0		      STA	Tmp0
    645  f299		       20 f1 f8 	      JSR	BINBCD8
    646  f29c							; LDA Tmp1 Also returned in A
    647  f29c		       29 0f		      AND	#%00001111	;2
    648  f29e		       aa		      TAX		; 2
    649  f29f		       bd 6c fc 	      LDA	FontLookup,X	;4 
    650  f2a2		       85 d4		      STA	ScoreD4	;3
    651  f2a4
    652  f2a4				   OpDigit1Timer
    653  f2a4		       a5 b1		      LDA	Tmp1	;3
    654  f2a6		       4a		      LSR		; 2
    655  f2a7		       4a		      LSR		; 2
    656  f2a8		       4a		      LSR		; 2
    657  f2a9		       4a		      LSR		; 2
    658  f2aa		       aa		      TAX		; 2
    659  f2ab		       bd 6c fc 	      LDA	FontLookup,X	;4
    660  f2ae		       85 d3		      STA	ScoreD3	;3
    661  f2b0
    662  f2b0				   OpSpeedBar
    663  f2b0		       a5 f1		      LDA	Player1SpeedL
    664  f2b2		       29 e0		      AND	#%11100000	;2 Discard the last bits
    665  f2b4		       18		      CLC
    666  f2b5		       2a		      ROL		;First goes into carry
    667  f2b6		       2a		      ROL
    668  f2b7		       2a		      ROL
    669  f2b8		       2a		      ROL
    670  f2b9		       85 b0		      STA	Tmp0
    671  f2bb		       a5 f3		      LDA	Player1SpeedH
    672  f2bd		       0a		      ASL
    673  f2be		       0a		      ASL
    674  f2bf		       0a		      ASL
    675  f2c0		       05 b0		      ORA	Tmp0
    676  f2c2		       aa		      TAX		; 2
    677  f2c3		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    678  f2c6		       85 d2		      STA	ScoreD2	;3
    679  f2c8
    680  f2c8				   OpDistanceCheckpointCount		; Will run all letters in the future
    681  f2c8		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    682  f2ca		       29 f0		      AND	#%11110000	;2
    683  f2cc		       4a		      LSR
    684  f2cd		       4a		      LSR
    685  f2ce		       4a		      LSR
    686  f2cf		       4a		      LSR
    687  f2d0		       aa		      TAX		; 2
    688  f2d1		       bd 6c fc 	      LDA	FontLookup,X	;4 
    689  f2d4		       85 d1		      STA	ScoreD1	;3
    690  f2d6
    691  f2d6				   OpDistanceBar		; 16 subdivisions per checkpoint
    692  f2d6		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    693  f2d8		       29 0f		      AND	#%00001111	;2
    694  f2da		       aa		      TAX		; 2
    695  f2db		       bd 7d fc 	      LDA	BarLookup,X	;4 
    696  f2de		       85 d0		      STA	ScoreD0	;3
    697  f2e0		       4c 04 f3 	      JMP	RightScoreWriteEnd
    698  f2e3
    699  f2e3				   PrintHellwayRight
    700  f2e3		       a5 8d		      LDA	FrameCount1
    701  f2e5		       29 01		      AND	#1
    702  f2e7		       d0 05		      BNE	PrintCreditsRight
    703  f2e9		       a2 0a		      LDX	#<HellwayRightText
    704  f2eb		       4c f0 f2 	      JMP	PrintRightIntro
    705  f2ee				   PrintCreditsRight
    706  f2ee		       a2 14		      LDX	#<YearText
    707  f2f0				   PrintRightIntro
    708  f2f0		       20 fd f6 	      JSR	PrintStaticText
    709  f2f3		       4c 04 f3 	      JMP	RightScoreWriteEnd
    710  f2f6				   PrintGameOver
    711  f2f6		       a5 8c		      LDA	FrameCount0
    712  f2f8		       30 05		      BMI	PrintOverText
    713  f2fa		       a2 19		      LDX	#<GameText
    714  f2fc		       4c 01 f3 	      JMP	StoreGameOverText
    715  f2ff				   PrintOverText
    716  f2ff		       a2 1e		      LDX	#<OverText
    717  f301				   StoreGameOverText
    718  f301		       20 fd f6 	      JSR	PrintStaticText
    719  f304				   RightScoreWriteEnd
    720  f304
    721  f304
    722  f304				   ScoreBackgroundColor
    723  f304		       a2 00		      LDX	#0
    724  f306		       ad 82 02 	      LDA	SWCHB
    725  f309		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    726  f30b		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    727  f30d		       f0 04		      BEQ	BlackAndWhiteScoreBg
    728  f30f		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    729  f311		       a2 03		      LDX	#BACKGROUND_COLOR
    730  f313				   BlackAndWhiteScoreBg
    731  f313		       85 b2		      STA	Tmp2	; Score Background
    732  f315		       86 b3		      STX	Tmp3	; Traffic Background
    733  f317
    734  f317				   ConfigurePFForScore
    735  f317							;LDA #SCORE_BACKGROUND_COLOR; Done above
    736  f317		       85 09		      STA	COLUBK
    737  f319		       20 6c f6 	      JSR	ClearAll
    738  f31c		       a9 02		      LDA	#%00000010	; Score mode
    739  f31e		       85 0a		      STA	CTRLPF
    740  f320		       a5 de		      LDA	TextSide	;3
    741  f322		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    742  f324				   RightScoreOn
    743  f324		       a5 ca		      LDA	OpScoreFontColor
    744  f326		       85 07		      STA	COLUP1
    745  f328		       a5 b2		      LDA	Tmp2
    746  f32a		       85 06		      STA	COLUP0
    747  f32c		       4c 37 f3 	      JMP	CallWaitForVblankEnd
    748  f32f				   LeftScoreOn
    749  f32f		       a5 c9		      LDA	ScoreFontColor
    750  f331		       85 06		      STA	COLUP0
    751  f333		       a5 b2		      LDA	Tmp2
    752  f335		       85 07		      STA	COLUP1
    753  f337
    754  f337							; After here we are going to update the screen, No more heavy code
    755  f337				   CallWaitForVblankEnd
    756  f337		       20 90 f8 	      JSR	WaitForVblankEnd
    757  f33a
    758  f33a				   DrawScoreHud
    759  f33a		       20 1b f7 	      JSR	PrintScore
    760  f33d
    761  f33d		       85 02		      STA	WSYNC
    762  f33f
    763  f33f		       a5 0c		      LDA	INPT4	;3
    764  f341							;BPL WaitAnotherScoreLine ; Draw traffic while button is pressed.
    765  f341		       4c 54 f3 	      JMP	WaitAnotherScoreLine	; Temporary disabling score, please enable line above!
    766  f344		       a5 c9		      LDA	ScoreFontColor
    767  f346		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    768  f348		       d0 0a		      BNE	WaitAnotherScoreLine
    769  f34a		       a5 de		      LDA	TextSide	;3
    770  f34c		       d0 03		      BNE	LeftScoreOnGameOver
    771  f34e		       4c 6a f8 	      JMP	DrawGameOverScreenRight
    772  f351				   LeftScoreOnGameOver
    773  f351		       4c dc f7 	      JMP	DrawGameOverScreenLeft
    774  f354
    775  f354				   WaitAnotherScoreLine
    776  f354		       85 02		      STA	WSYNC
    777  f356
    778  f356				   PrepareForTraffic
    779  f356		       20 82 f6 	      JSR	ClearPF	; 32
    780  f359
    781  f359		       85 02		      STA	WSYNC
    782  f35b		       85 2a		      STA	HMOVE
    783  f35d		       85 02		      STA	WSYNC
    784  f35f		       85 2a		      STA	HMOVE
    785  f361
    786  f361		       a9 30		      LDA	#%00110000	; 2 Score mode
    787  f363		       85 0a		      STA	CTRLPF	;3
    788  f365
    789  f365		       a5 8c		      LDA	FrameCount0	;3
    790  f367		       29 01		      AND	#%00000001	;2
    791  f369		       aa		      TAX		;2
    792  f36a		       b5 c2		      LDA	TrafficColor,X	;4
    793  f36c		       85 08		      STA	COLUPF	;3
    794  f36e
    795  f36e		       a9 96		      LDA	#PLAYER1_COLOR	;2
    796  f370		       85 07		      STA	COLUP1	;3
    797  f372
    798  f372		       a5 c9		      LDA	ScoreFontColor	;3
    799  f374		       85 06		      STA	COLUP0	;3
    800  f376
    801  f376		       a5 ca		      LDA	OpScoreFontColor	;3
    802  f378		       85 07		      STA	COLUP1	;3
    803  f37a
    804  f37a		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    805  f37c
      0  f37c					      SLEEP	24	; Keep the backround color more time, only needed if still support non dark mode
      1  f37c				   .CYCLES    SET	24
      2  f37c
      3  f37c				  -	      IF	.CYCLES < 2
      4  f37c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f37c				  -	      ERR
      6  f37c					      ENDIF
      7  f37c
      8  f37c				  -	      IF	.CYCLES & 1
      9  f37c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f37c				  -	      nop	0
     11  f37c				  -	      ELSE
     12  f37c				  -	      bit	VSYNC
     13  f37c				  -	      ENDIF
     14  f37c				  -.CYCLES    SET	.CYCLES - 3
     15  f37c					      ENDIF
     16  f37c
     17  f37c					      REPEAT	.CYCLES / 2
     18  f37c		       ea		      nop
     17  f37c					      REPEND
     18  f37d		       ea		      nop
     17  f37d					      REPEND
     18  f37e		       ea		      nop
     17  f37e					      REPEND
     18  f37f		       ea		      nop
     17  f37f					      REPEND
     18  f380		       ea		      nop
     17  f380					      REPEND
     18  f381		       ea		      nop
     17  f381					      REPEND
     18  f382		       ea		      nop
     17  f382					      REPEND
     18  f383		       ea		      nop
     17  f383					      REPEND
     18  f384		       ea		      nop
     17  f384					      REPEND
     18  f385		       ea		      nop
     17  f385					      REPEND
     18  f386		       ea		      nop
     17  f386					      REPEND
     18  f387		       ea		      nop
     19  f388					      REPEND
    807  f388
    808  f388		       a6 b3		      LDX	Tmp3	; Background color.
    809  f38a
    810  f38a		       a5 8c		      LDA	FrameCount0	;Brach flag
    811  f38c		       29 01		      AND	#%00000001
    812  f38e
    813  f38e		       86 09		      STX	COLUBK	;3
    814  f390		       d0 05		      BNE	OpDrawCache	;2
    815  f392		       4c 51 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    816  f395							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    817  f395
    818  f395							;main scanline loop...
    819  f395				   OpScanLoop
    820  f395		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    821  f397
    822  f397							;Start of next line!			
    823  f397				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    824  f397
    825  f397		       a5 80		      LDA	GRP0Cache	;3
    826  f399		       85 1b		      STA	GRP0	;3
    827  f39b
    828  f39b		       a5 84		      LDA	GRP1Cache	;3
    829  f39d		       85 1c		      STA	GRP1	;3
    830  f39f
    831  f39f		       a5 85		      LDA	ENABLCache	;3
    832  f3a1		       85 1f		      STA	ENABL	;3
    833  f3a3
    834  f3a3		       a5 86		      LDA	ENAM0Cache	;3
    835  f3a5		       85 1d		      STA	ENAM0	;3
    836  f3a7
    837  f3a7		       a5 87		      LDA	ENAM1Cache	;3
    838  f3a9		       85 1e		      STA	ENAM1	;3
    839  f3ab
    840  f3ab		       a5 81		      LDA	PF0Cache	;3
    841  f3ad		       85 0d		      STA	PF0	;3
    842  f3af
    843  f3af		       a9 00		      LDA	#0	;2
    844  f3b1							;STA PF0	     ;3
    845  f3b1		       85 80		      STA	GRP0Cache	;3
    846  f3b3		       85 86		      STA	ENAM0Cache	;3
    847  f3b5		       85 85		      STA	ENABLCache	;3
    848  f3b7		       85 87		      STA	ENAM1Cache	; 3
    849  f3b9							;STA GRP1Cache ;3
    850  f3b9		       85 0d		      STA	PF0	;3
    851  f3bb							;STA PF2	     ;3
    852  f3bb
    853  f3bb		       a5 83		      LDA	PF2Cache	;3
    854  f3bd		       85 0f		      STA	PF2	;3
    855  f3bf
    856  f3bf				   OpDrawCar0
    857  f3bf		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    858  f3c1		       b0 04		      BCS	OpSkipDrawCar	;2
    859  f3c3		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    860  f3c5		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    861  f3c7				   OpSkipDrawCar
    862  f3c7
    863  f3c7							;BEQ DrawTraffic3
    864  f3c7				   OpDrawTraffic1		; 33
    865  f3c7		       98		      TYA		; 2
    866  f3c8		       18		      CLC		; 2 
    867  f3c9		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    868  f3cb		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    869  f3cd		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    870  f3cf		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    871  f3d1		       4c d6 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    872  f3d4				   OpEorOffsetWithCarry
    873  f3d4		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    874  f3d6				   OpAfterEorOffsetWithCarry		;17
    875  f3d6		       aa		      TAX		;2
    876  f3d7		       bd 00 fe 	      LDA	AesTable,X	; 4
    877  f3da		       c5 bf		      CMP	OpTrafficChance	;3
    878  f3dc		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    879  f3de		       a9 ff		      LDA	#$FF	;2
    880  f3e0		       85 86		      STA	ENAM0Cache	;3
    881  f3e2				   OpFinishDrawTraffic1
    882  f3e2
    883  f3e2				   OpErasePF2
    884  f3e2		       a9 00		      LDA	#0
    885  f3e4		       85 0f		      STA	PF2
    886  f3e6
    887  f3e6				   OpDrawTraffic2		; 33
    888  f3e6		       98		      TYA		; 2
    889  f3e7		       18		      CLC		; 2 
    890  f3e8		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    891  f3ea		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    892  f3ec		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    893  f3ee		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    894  f3f0		       4c f5 f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    895  f3f3				   OpEorOffsetWithCarry2
    896  f3f3		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    897  f3f5				   OpAfterEorOffsetWithCarry2		;17
    898  f3f5		       aa		      TAX		;2
    899  f3f6		       bd 00 fe 	      LDA	AesTable,X	; 4
    900  f3f9		       c5 bf		      CMP	OpTrafficChance	;3
    901  f3fb		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    902  f3fd		       a9 02		      LDA	#%00000010	;2
    903  f3ff		       85 85		      STA	ENABLCache	;3
    904  f401				   OpFinishDrawTraffic2
    905  f401
    906  f401							;STA WSYNC ;65 / 137
    907  f401
    908  f401							; LDA Tmp0 ; Flicker this line if drawing car
    909  f401							; BEQ FinishDrawTraffic4
    910  f401				   OpDrawTraffic3		; 33
    911  f401		       98		      TYA		; 2
    912  f402		       18		      CLC		; 2 
    913  f403		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    914  f405		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    915  f407		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    916  f409		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    917  f40b		       4c 10 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    918  f40e				   OpEorOffsetWithCarry3
    919  f40e		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    920  f410				   OpAfterEorOffsetWithCarry3		;17
    921  f410		       aa		      TAX		;2
    922  f411		       bd 00 fe 	      LDA	AesTable,X	; 4
    923  f414		       c5 bf		      CMP	OpTrafficChance	;3
    924  f416		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    925  f418		       a9 02		      LDA	#%00000010	;2
    926  f41a		       85 87		      STA	ENAM1Cache
    927  f41c				   OpFinishDrawTraffic3
    928  f41c
    929  f41c				   OpDrawOponent		;26
    930  f41c		       84 b0		      STY	Tmp0	;3
    931  f41e		       a4 cf		      LDY	OpponentLine	;3
    932  f420		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    933  f422		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    934  f424				   OpDrawOpponent
    935  f424		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    936  f426		       85 80		      STA	GRP0Cache	;3
    937  f428		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    938  f42a		       a4 b0		      LDY	Tmp0	;3
    939  f42c		       4c 40 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    940  f42f				   OpSkipDrawOpponent
    941  f42f		       c6 cf		      DEC	OpponentLine	;5
    942  f431		       a4 b0		      LDY	Tmp0	;3
    943  f433
    944  f433
    945  f433				   OpDrawTraffic0		; 21 2pe
    946  f433		       98		      TYA		; 2
    947  f434		       18		      CLC		; 2 
    948  f435		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    949  f437		       29 08		      AND	#%00001000	;2
    950  f439		       f0 05		      BEQ	OpHasNoBorderP0	;3
    951  f43b				   OpHasBorderP0
    952  f43b		       a9 70		      LDA	#%01110000	; 2
    953  f43d		       4c 42 f4 	      JMP	OpStoreBorderP0	; 3
    954  f440				   OpHasNoBorderP0
    955  f440		       a9 00		      LDA	#0	; 2
    956  f442				   OpStoreBorderP0
    957  f442		       85 81		      STA	PF0Cache	; 3
    958  f444		       85 83		      STA	PF2Cache	; 3
    959  f446
    960  f446				   OpSkipDrawTraffic0
    961  f446
    962  f446				   OpWhileScanLoop
    963  f446		       88		      DEY		;2
    964  f447		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    965  f449		       4c 95 f3 	      JMP	OpScanLoop	;3
    966  f44c				   OpFinishScanLoop		; 7 209 of 222
    967  f44c		       4c 04 f5 	      JMP	FinishScanLoop
    968  f44f
    969  f44f							;main scanline loop...
    970  f44f				   ScanLoop
    971  f44f		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    972  f451
    973  f451							;Start of next line!			
    974  f451				   DrawCache		;63 Is the last line going to the top of the next frame?
    975  f451		       a5 81		      LDA	PF0Cache	;3
    976  f453		       85 0d		      STA	PF0	;3
    977  f455
    978  f455		       a5 80		      LDA	GRP0Cache	;3
    979  f457		       85 1b		      STA	GRP0	;3
    980  f459
    981  f459		       a5 84		      LDA	GRP1Cache	;3
    982  f45b		       85 1c		      STA	GRP1	;3
    983  f45d
    984  f45d		       a5 86		      LDA	ENAM0Cache	;3
    985  f45f		       85 1d		      STA	ENAM0	;3
    986  f461
    987  f461		       a5 85		      LDA	ENABLCache	;3
    988  f463		       85 1f		      STA	ENABL	;3
    989  f465
    990  f465		       a5 87		      LDA	ENAM1Cache	;3
    991  f467		       85 1e		      STA	ENAM1	;3
    992  f469
    993  f469		       a5 83		      LDA	PF2Cache	;3
    994  f46b		       85 0f		      STA	PF2	;3
    995  f46d
    996  f46d		       a9 00		      LDA	#0	;2
    997  f46f		       85 0d		      STA	PF0	;3
    998  f471		       85 84		      STA	GRP1Cache	;3
    999  f473		       85 85		      STA	ENABLCache	;3
   1000  f475		       85 86		      STA	ENAM0Cache	;3
   1001  f477		       85 87		      STA	ENAM1Cache	; 3
   1002  f479							;STA GRP0Cache
   1003  f479		       85 0f		      STA	PF2	;3
   1004  f47b
   1005  f47b				   DrawCar0
   1006  f47b		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1007  f47d		       b0 04		      BCS	SkipDrawCar	;2
   1008  f47f		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1009  f481		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1010  f483				   SkipDrawCar
   1011  f483
   1012  f483							;BEQ DrawTraffic3
   1013  f483				   DrawTraffic1 		; 33
   1014  f483		       98		      TYA		; 2
   1015  f484		       18		      CLC		; 2 
   1016  f485		       65 95		      ADC	TrafficOffset1 + 1	;3
   1017  f487		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1018  f489		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1019  f48b		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1020  f48d		       4c 92 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1021  f490				   EorOffsetWithCarry
   1022  f490		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1023  f492				   AfterEorOffsetWithCarry		;17
   1024  f492		       aa		      TAX		;2
   1025  f493		       bd 00 fe 	      LDA	AesTable,X	; 4
   1026  f496		       c5 be		      CMP	TrafficChance	;3
   1027  f498		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1028  f49a		       a9 ff		      LDA	#$FF	;2
   1029  f49c		       85 86		      STA	ENAM0Cache	;3
   1030  f49e				   FinishDrawTraffic1
   1031  f49e
   1032  f49e				   DrawTraffic2 		; 33
   1033  f49e		       98		      TYA		; 2
   1034  f49f		       18		      CLC		; 2 
   1035  f4a0		       65 99		      ADC	TrafficOffset2 + 1	;3
   1036  f4a2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1037  f4a4		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1038  f4a6		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1039  f4a8		       4c ad f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1040  f4ab				   EorOffsetWithCarry2
   1041  f4ab		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1042  f4ad				   AfterEorOffsetWithCarry2		;17
   1043  f4ad		       aa		      TAX		;2
   1044  f4ae		       bd 00 fe 	      LDA	AesTable,X	; 4
   1045  f4b1		       c5 be		      CMP	TrafficChance	;3
   1046  f4b3		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1047  f4b5		       a9 02		      LDA	#%00000010	;2
   1048  f4b7		       85 85		      STA	ENABLCache	;3
   1049  f4b9				   FinishDrawTraffic2
   1050  f4b9
   1051  f4b9							;STA WSYNC ;65 / 137
   1052  f4b9
   1053  f4b9							; LDA Tmp0 ; Flicker this line if drawing car
   1054  f4b9							; BEQ FinishDrawTraffic4
   1055  f4b9				   DrawTraffic3 		; 33
   1056  f4b9		       98		      TYA		; 2
   1057  f4ba		       18		      CLC		; 2 
   1058  f4bb		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1059  f4bd		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1060  f4bf		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1061  f4c1		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1062  f4c3		       4c c8 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1063  f4c6				   EorOffsetWithCarry3
   1064  f4c6		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1065  f4c8				   AfterEorOffsetWithCarry3		;17
   1066  f4c8		       aa		      TAX		;2
   1067  f4c9		       bd 00 fe 	      LDA	AesTable,X	; 4
   1068  f4cc		       c5 be		      CMP	TrafficChance	;3
   1069  f4ce		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1070  f4d0		       a9 02		      LDA	#%00000010	;2
   1071  f4d2		       85 87		      STA	ENAM1Cache
   1072  f4d4				   FinishDrawTraffic3
   1073  f4d4
   1074  f4d4
   1075  f4d4				   DrawOponent		;26
   1076  f4d4		       84 b0		      STY	Tmp0	;3
   1077  f4d6		       a4 cf		      LDY	OpponentLine	;3
   1078  f4d8		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1079  f4da		       b0 0b		      BCS	SkipDrawOpponent	;2
   1080  f4dc				   DrawOpponent
   1081  f4dc		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1082  f4de		       85 84		      STA	GRP1Cache	;3
   1083  f4e0		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1084  f4e2		       a4 b0		      LDY	Tmp0	;3
   1085  f4e4		       4c f8 f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1086  f4e7				   SkipDrawOpponent
   1087  f4e7		       c6 cf		      DEC	OpponentLine	;5
   1088  f4e9		       a4 b0		      LDY	Tmp0	;3
   1089  f4eb
   1090  f4eb				   DrawTraffic0 		; 21 2pe
   1091  f4eb		       98		      TYA		; 2
   1092  f4ec		       18		      CLC		; 2 
   1093  f4ed		       65 91		      ADC	TrafficOffset0 + 1	;3
   1094  f4ef		       29 08		      AND	#%00001000	;2
   1095  f4f1		       f0 05		      BEQ	HasNoBorderP0	;3
   1096  f4f3				   HasBorderP0
   1097  f4f3		       a9 70		      LDA	#%01110000	; 2
   1098  f4f5		       4c fa f4 	      JMP	StoreBorderP0	; 3
   1099  f4f8				   HasNoBorderP0
   1100  f4f8		       a9 00		      LDA	#0	; 2
   1101  f4fa				   StoreBorderP0
   1102  f4fa		       85 81		      STA	PF0Cache	; 3
   1103  f4fc		       85 83		      STA	PF2Cache	; 3
   1104  f4fe
   1105  f4fe				   SkipDrawTraffic0
   1106  f4fe
   1107  f4fe				   WhileScanLoop
   1108  f4fe		       88		      DEY		;2
   1109  f4ff		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1110  f501		       4c 4f f4 	      JMP	ScanLoop	;3
   1111  f504				   FinishScanLoop		; 7 209 of 222
   1112  f504
   1113  f504		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1114  f506		       20 91 f6 	      JSR	LoadAll
   1115  f509		       85 02		      STA	WSYNC	; do stuff!
   1116  f50b		       85 02		      STA	WSYNC
   1117  f50d		       85 02		      STA	WSYNC
   1118  f50f
   1119  f50f				   PrepareOverscan
   1120  f50f		       a9 02		      LDA	#2
   1121  f511		       85 02		      STA	WSYNC
   1122  f513							;STA HMOVE	; HMOVE 10
   1123  f513		       85 01		      STA	VBLANK
   1124  f515
   1125  f515		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1126  f517		       8d 96 02 	      STA	TIM64T
   1127  f51a
   1128  f51a		       85 2b		      STA	HMCLR	; Before we process car movement
   1129  f51c							;Read Fire Button before, will make it start the game for now.
   1130  f51c				   StartGame
   1131  f51c		       a5 0c		      LDA	INPT4	;3
   1132  f51e		       25 0d		      AND	INPT5	;3 player 
   1133  f520		       30 34		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1134  f522		       a5 8c		      LDA	FrameCount0
   1135  f524		       29 01		      AND	#%00000001
   1136  f526		       d0 2e		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1137  f528		       a5 bd		      LDA	GameStatus	;3
   1138  f52a		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1139  f52c		       d0 28		      BNE	SkipGameStart
   1140  f52e		       a5 c6		      LDA	GameMode
   1141  f530		       c9 10		      CMP	#MAX_GAME_MODE
   1142  f532		       d0 0b		      BNE	SetGameRunning
   1143  f534		       a9 00		      LDA	#0
   1144  f536		       85 c6		      STA	GameMode
   1145  f538		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1146  f53a		       85 bc		      STA	SwitchDebounceCounter
   1147  f53c		       4c 56 f5 	      JMP	SkipGameStart
   1148  f53f				   SetGameRunning
   1149  f53f		       e6 bd		      INC	GameStatus
   1150  f541		       a9 00		      LDA	#0	;
   1151  f543		       85 8c		      STA	FrameCount0
   1152  f545		       85 8d		      STA	FrameCount1
   1153  f547		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1154  f549		       85 c9		      STA	ScoreFontColor
   1155  f54b		       85 ca		      STA	OpScoreFontColor
   1156  f54d		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1157  f54f		       85 cb		      STA	ScoreFontColorHoldChange
   1158  f551		       85 cc		      STA	OpScoreFontColorHoldChange
   1159  f553		       4c c4 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1160  f556				   SkipGameStart
   1161  f556
   1162  f556				   ReadSwitches
   1163  f556		       a6 bc		      LDX	SwitchDebounceCounter
   1164  f558		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1165  f55a		       a9 01		      LDA	#%00000001
   1166  f55c		       2c 82 02 	      BIT	SWCHB
   1167  f55f		       d0 07		      BNE	SkipReset
   1168  f561		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1169  f563		       85 bc		      STA	SwitchDebounceCounter
   1170  f565		       4c cc f5 	      JMP	OverScanWaitBeforeReset
   1171  f568				   SkipReset
   1172  f568
   1173  f568				   GameModeSelect
   1174  f568		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1175  f56a		       d0 1c		      BNE	SkipGameSelect
   1176  f56c		       20 bd f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1177  f56f				   ContinueGameSelect
   1178  f56f		       a9 02		      LDA	#%00000010
   1179  f571		       2c 82 02 	      BIT	SWCHB
   1180  f574		       d0 12		      BNE	SkipGameSelect
   1181  f576		       a6 c6		      LDX	GameMode
   1182  f578		       e0 10		      CPX	#MAX_GAME_MODE
   1183  f57a		       f0 04		      BEQ	ResetGameMode
   1184  f57c		       e8		      INX
   1185  f57d		       4c 82 f5 	      JMP	StoreGameMode
   1186  f580				   ResetGameMode
   1187  f580		       a2 00		      LDX	#0
   1188  f582				   StoreGameMode
   1189  f582		       86 c6		      STX	GameMode
   1190  f584		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1191  f586		       85 bc		      STA	SwitchDebounceCounter
   1192  f588				   SkipGameSelect
   1193  f588		       4c 8d f5 	      JMP	EndReadSwitches
   1194  f58b				   DecrementSwitchDebounceCounter
   1195  f58b		       c6 bc		      DEC	SwitchDebounceCounter
   1196  f58d				   EndReadSwitches
   1197  f58d
   1198  f58d				   DoNotTurnBeforeStart
   1199  f58d							;STA HMCLR
   1200  f58d		       a5 bd		      LDA	GameStatus
   1201  f58f		       f0 33		      BEQ	OverScanWait
   1202  f591
   1203  f591							; Last thing, will overrride hmove
   1204  f591				   CallTestColisionAndMove
   1205  f591		       a2 00		      LDX	#0	; Player 0
   1206  f593							; Colision with traffic, each player check different flags,
   1207  f593		       a5 8c		      LDA	FrameCount0
   1208  f595		       29 01		      AND	#%00000001
   1209  f597		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1210  f599		       20 66 f9 	      JSR	IsOpponentColliding
   1211  f59c		       05 01		      ORA	CXM1P
   1212  f59e		       4a		      LSR
   1213  f59f		       05 00		      ORA	CXM0P
   1214  f5a1		       05 02		      ORA	CXP0FB
   1215  f5a3							; ORA CXPPMM ; Collision between players will have its own rules
   1216  f5a3				   SkipColisionPlayer0		; Should not colide on opponent side.
   1217  f5a3		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1218  f5a5		       85 b2		      STA	Tmp2
   1219  f5a7		       20 7a f9 	      JSR	TestCollisionAndMove
   1220  f5aa
   1221  f5aa		       e8		      INX		; player 1
   1222  f5ab		       a5 8c		      LDA	FrameCount0
   1223  f5ad		       29 01		      AND	#%00000001
   1224  f5af		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1225  f5b1		       20 66 f9 	      JSR	IsOpponentColliding
   1226  f5b4		       05 00		      ORA	CXM0P
   1227  f5b6		       4a		      LSR
   1228  f5b7		       05 01		      ORA	CXM1P
   1229  f5b9		       05 03		      ORA	CXP1FB
   1230  f5bb				   SkipColisionPlayer1
   1231  f5bb		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1232  f5bd		       85 b2		      STA	Tmp2
   1233  f5bf		       20 7a f9 	      JSR	TestCollisionAndMove
   1234  f5c2
   1235  f5c2				   ClearCollision
   1236  f5c2		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1237  f5c4
   1238  f5c4				   OverScanWait
   1239  f5c4		       ad 84 02 	      LDA	INTIM
   1240  f5c7		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1241  f5c9		       4c de f0 	      JMP	MainLoop
   1242  f5cc
   1243  f5cc				   OverScanWaitBeforeReset
   1244  f5cc		       ad 84 02 	      LDA	INTIM
   1245  f5cf		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1246  f5d1		       4c 14 f0 	      JMP	Start
   1247  f5d4
   1248  f5d4				   Subroutines
   1249  f5d4
   1250  f5d4							;X Player
   1251  f5d4							;Tmp1 TrafficOffset 2
   1252  f5d4				   ProcessSound
   1253  f5d4				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1254  f5d4		       b5 c9		      LDA	ScoreFontColor,X	;3
   1255  f5d6		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1256  f5d8		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1257  f5da		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1258  f5dc		       f0 29		      BEQ	PlayCheckpoint	;2
   1259  f5de		       b5 8e		      LDA	CollisionCounter,X	;3
   1260  f5e0		       c9 e0		      CMP	#$E0	;2
   1261  f5e2		       b0 14		      BCS	PlayColision	;2
   1262  f5e4		       b5 cd		      LDA	NextCheckpoint,X	;3
   1263  f5e6		       38		      SEC		;2
   1264  f5e7		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1265  f5e9		       c9 02		      CMP	#$02	;2
   1266  f5eb		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1267  f5ed		       b5 b8		      LDA	CountdownTimer,X	; 3
   1268  f5ef		       f0 53		      BEQ	EngineSound	;2
   1269  f5f1		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1270  f5f3		       90 37		      BCC	PlayWarnTimeEnding	;4
   1271  f5f5		       4c 44 f6 	      JMP	EngineSound	;3
   1272  f5f8				   PlayColision
   1273  f5f8		       a9 1f		      LDA	#31
   1274  f5fa		       95 17		      STA	AUDF0,X
   1275  f5fc		       a9 08		      LDA	#8
   1276  f5fe		       95 15		      STA	AUDC0,X
   1277  f600		       a9 08		      LDA	#8
   1278  f602		       95 19		      STA	AUDV0,X
   1279  f604		       4c 6b f6 	      JMP	EndSound
   1280  f607
   1281  f607				   PlayCheckpoint
   1282  f607		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1283  f609		       4a		      LSR		;2
   1284  f60a		       4a		      LSR		;2
   1285  f60b		       4a		      LSR		;2
   1286  f60c		       95 17		      STA	AUDF0,X	;3
   1287  f60e		       a9 0c		      LDA	#12	;2
   1288  f610		       95 15		      STA	AUDC0,X	;3
   1289  f612		       a9 06		      LDA	#6	;2
   1290  f614		       95 19		      STA	AUDV0,X	;3
   1291  f616		       4c 6b f6 	      JMP	EndSound	;3
   1292  f619
   1293  f619				   PlayBeforeCheckpoint
   1294  f619		       a5 8c		      LDA	FrameCount0	;3
   1295  f61b		       29 1c		      AND	#%00011100	;2
   1296  f61d		       09 03		      ORA	#%00000011	;2
   1297  f61f		       95 17		      STA	AUDF0,X	;3
   1298  f621		       a9 0c		      LDA	#12	;2
   1299  f623		       95 15		      STA	AUDC0,X	;3
   1300  f625		       a9 03		      LDA	#3	;2
   1301  f627		       95 19		      STA	AUDV0,X	;3
   1302  f629		       4c 6b f6 	      JMP	EndSound	;3
   1303  f62c
   1304  f62c				   PlayWarnTimeEnding
   1305  f62c		       a5 8c		      LDA	FrameCount0	;3
   1306  f62e		       29 04		      AND	#%00000100	;2
   1307  f630		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1308  f632		       18		      CLC		;2
   1309  f633		       a9 0a		      LDA	#10	;2
   1310  f635		       75 b8		      ADC	CountdownTimer,X	;2
   1311  f637		       95 17		      STA	AUDF0,X	;3
   1312  f639		       a9 0c		      LDA	#12	;2
   1313  f63b		       95 15		      STA	AUDC0,X	;3
   1314  f63d		       a9 03		      LDA	#3	;2
   1315  f63f		       95 19		      STA	AUDV0,X	;3
   1316  f641		       4c 6b f6 	      JMP	EndSound	;3
   1317  f644
   1318  f644				   EngineSound		;41
   1319  f644		       a9 09		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1320  f646		       95 19		      STA	AUDV0,X
   1321  f648		       b5 b8		      LDA	CountdownTimer,X	;3
   1322  f64a		       f0 1b		      BEQ	EngineOff	;2
   1323  f64c		       b4 d5		      LDY	Gear,X
   1324  f64e		       b5 f0		      LDA	Player0SpeedL,X	;3
   1325  f650		       4a		      LSR		;2
   1326  f651		       4a		      LSR		;2
   1327  f652		       4a		      LSR		;2
   1328  f653		       29 0f		      AND	#%00001111	;2
   1329  f655		       85 b0		      STA	Tmp0	;3
   1330  f657		       b9 49 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1331  f65a		       38		      SEC		;2
   1332  f65b		       e5 b0		      SBC	Tmp0	;3
   1333  f65d		       95 17		      STA	AUDF0,X	;3
   1334  f65f		       b9 43 ff 	      LDA	EngineSoundType,Y	;4
   1335  f662		       95 15		      STA	AUDC0,X	;3
   1336  f664		       4c 6b f6 	      JMP	EndEngineSound	;3
   1337  f667				   EngineOff
   1338  f667				   MuteSound
   1339  f667		       a9 00		      LDA	#0
   1340  f669		       95 15		      STA	AUDC0,X
   1341  f66b				   EndEngineSound
   1342  f66b				   EndSound
   1343  f66b		       60		      RTS
   1344  f66c
   1345  f66c				   ClearAll		; 58
   1346  f66c		       a9 00		      LDA	#0	;2
   1347  f66e		       85 1b		      STA	GRP0	;3
   1348  f670		       85 1c		      STA	GRP1	;3
   1349  f672		       85 1f		      STA	ENABL	;3
   1350  f674		       85 1d		      STA	ENAM0	;3
   1351  f676		       85 1e		      STA	ENAM1	;3
   1352  f678		       85 80		      STA	GRP0Cache	;3
   1353  f67a		       85 84		      STA	GRP1Cache	;3
   1354  f67c		       85 85		      STA	ENABLCache	;3
   1355  f67e		       85 86		      STA	ENAM0Cache	;3
   1356  f680		       85 87		      STA	ENAM1Cache	;3
   1357  f682
   1358  f682				   ClearPF		; 26
   1359  f682		       a9 00		      LDA	#0	;2
   1360  f684				   ClearPFSkipLDA0
   1361  f684		       85 0d		      STA	PF0	;3
   1362  f686		       85 0e		      STA	PF1	;3
   1363  f688		       85 0f		      STA	PF2	;3	
   1364  f68a		       85 81		      STA	PF0Cache	;3
   1365  f68c		       85 82		      STA	PF1Cache	;3
   1366  f68e		       85 83		      STA	PF2Cache	;3 
   1367  f690		       60		      RTS		;6
   1368  f691				   EndClearAll
   1369  f691
   1370  f691				   LoadAll		; 48
   1371  f691		       a5 81		      LDA	PF0Cache	;3
   1372  f693		       85 0d		      STA	PF0	;3
   1373  f695
   1374  f695		       a5 82		      LDA	PF1Cache	;3
   1375  f697		       85 0e		      STA	PF1	;3
   1376  f699
   1377  f699		       a5 83		      LDA	PF2Cache	;3
   1378  f69b		       85 0f		      STA	PF2	;3
   1379  f69d
   1380  f69d		       a5 84		      LDA	GRP1Cache	;3
   1381  f69f		       85 1c		      STA	GRP1	;3
   1382  f6a1
   1383  f6a1		       a5 85		      LDA	ENABLCache	;3
   1384  f6a3		       85 1f		      STA	ENABL	;3
   1385  f6a5
   1386  f6a5		       a5 86		      LDA	ENAM0Cache	;3
   1387  f6a7		       85 1d		      STA	ENAM0	;3
   1388  f6a9
   1389  f6a9		       a5 87		      LDA	ENAM1Cache	;3
   1390  f6ab		       85 1e		      STA	ENAM1	;3
   1391  f6ad
   1392  f6ad		       60		      RTS		;6
   1393  f6ae				   EndLoadAll
   1394  f6ae
   1395  f6ae				   NextDifficulty		;Is a SBR
   1396  f6ae		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1397  f6b0		       29 01		      AND	#%00000001
   1398  f6b2		       d0 24		      BNE	CheckRandomDifficulty
   1399  f6b4
   1400  f6b4		       b5 c4		      LDA	CurrentDifficulty,X
   1401  f6b6		       18		      CLC
   1402  f6b7		       69 01		      ADC	#1
   1403  f6b9		       29 03		      AND	#%00000011	; 0 to 3
   1404  f6bb		       95 c4		      STA	CurrentDifficulty,X
   1405  f6bd
   1406  f6bd				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1407  f6bd		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1408  f6bf		       b9 c5 ff 	      LDA	TrafficChanceTable,Y
   1409  f6c2		       95 be		      STA	TrafficChance,X
   1410  f6c4		       b9 c1 ff 	      LDA	TrafficColorTable,Y
   1411  f6c7		       95 c2		      STA	TrafficColor,X
   1412  f6c9
   1413  f6c9		       a5 c6		      LDA	GameMode	;
   1414  f6cb		       29 01		      AND	#%00000001
   1415  f6cd		       f0 03		      BEQ	UseNextDifficultyTime
   1416  f6cf		       4c d3 f6 	      JMP	StoreDifficultyTime
   1417  f6d2				   UseNextDifficultyTime
   1418  f6d2		       c8		      INY
   1419  f6d3				   StoreDifficultyTime
   1420  f6d3		       b9 c9 ff 	      LDA	TrafficTimeTable,Y
   1421  f6d6		       95 c0		      STA	CheckpointTime,X
   1422  f6d8
   1423  f6d8				   CheckRandomDifficulty
   1424  f6d8		       a5 c6		      LDA	GameMode
   1425  f6da		       29 08		      AND	#%00001000	; Random difficulties
   1426  f6dc		       f0 09		      BEQ	ReturnFromNextDifficulty
   1427  f6de				   RandomDifficulty		; need work to make 2 players compatible
   1428  f6de		       a4 8c		      LDY	FrameCount0
   1429  f6e0		       b9 00 fe 	      LDA	AesTable,Y
   1430  f6e3							;EOR TrafficChance, no need, lets make life simple
   1431  f6e3		       29 3f		      AND	#%00111111
   1432  f6e5		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1433  f6e7
   1434  f6e7				   ReturnFromNextDifficulty
   1435  f6e7		       60		      RTS
   1436  f6e8
   1437  f6e8				   DefaultOffsets
   1438  f6e8		       a9 20		      LDA	#$20
   1439  f6ea		       85 96		      STA	TrafficOffset1 + 2
   1440  f6ec		       85 a6		      STA	OpTrafficOffset1 + 2
   1441  f6ee		       a9 40		      LDA	#$40
   1442  f6f0		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1443  f6f2		       85 aa		      STA	OpTrafficOffset2 + 2
   1444  f6f4		       a9 60		      LDA	#$60
   1445  f6f6		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1446  f6f8		       85 ae		      STA	OpTrafficOffset3 + 2
   1447  f6fa		       a9 80		      LDA	#$80
   1448  f6fc		       60		      RTS
   1449  f6fd
   1450  f6fd				   PrintStaticText		; Preload X with the offset referent to StaticText
   1451  f6fd		       bd 00 ff 	      LDA	StaticText,X
   1452  f700		       85 d0		      STA	ScoreD0
   1453  f702		       e8		      INX
   1454  f703		       bd 00 ff 	      LDA	StaticText,X
   1455  f706		       85 d1		      STA	ScoreD1
   1456  f708		       e8		      INX
   1457  f709		       bd 00 ff 	      LDA	StaticText,X
   1458  f70c		       85 d2		      STA	ScoreD2
   1459  f70e		       e8		      INX
   1460  f70f		       bd 00 ff 	      LDA	StaticText,X
   1461  f712		       85 d3		      STA	ScoreD3
   1462  f714		       e8		      INX
   1463  f715		       bd 00 ff 	      LDA	StaticText,X
   1464  f718		       85 d4		      STA	ScoreD4
   1465  f71a		       60		      RTS
   1466  f71b
   1467  f71b				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1468  f71b		       a2 00		      LDX	#0
   1469  f71d		       a0 04		      LDY	#FONT_OFFSET
   1470  f71f
   1471  f71f				   ScoreLoop		; 20 
   1472  f71f		       85 02		      STA	WSYNC	;2
   1473  f721		       85 2a		      STA	HMOVE
   1474  f723
   1475  f723		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1476  f725		       85 0d		      STA	PF0	;3
   1477  f727
   1478  f727		       a5 82		      LDA	PF1Cache	;3
   1479  f729		       85 0e		      STA	PF1	;3
   1480  f72b
   1481  f72b		       a5 83		      LDA	PF2Cache	;3
   1482  f72d		       85 0f		      STA	PF2	;3
   1483  f72f
   1484  f72f				   DrawScoreD0		; 15
   1485  f72f		       a6 d0		      LDX	ScoreD0	; 3
   1486  f731		       bd 00 fd 	      LDA	Font,X	;4
   1487  f734		       85 81		      STA	PF0Cache	;3
   1488  f736		       c6 d0		      DEC	ScoreD0	;5
   1489  f738
   1490  f738				   DrawScoreD1		; 23	
   1491  f738		       a6 d1		      LDX	ScoreD1	; 3
   1492  f73a		       bd 00 fd 	      LDA	Font,X	;4
   1493  f73d		       0a		      ASL		;2
   1494  f73e		       0a		      ASL		;2
   1495  f73f		       0a		      ASL		;2
   1496  f740		       0a		      ASL		;2
   1497  f741		       85 82		      STA	PF1Cache	;3
   1498  f743		       c6 d1		      DEC	ScoreD1	;5
   1499  f745
   1500  f745				   DrawScoreD2		; 20
   1501  f745		       a6 d2		      LDX	ScoreD2	; 3
   1502  f747		       bd 00 fd 	      LDA	Font,X	;4
   1503  f74a		       29 0f		      AND	#%00001111	;2
   1504  f74c		       05 82		      ORA	PF1Cache	;3
   1505  f74e		       85 82		      STA	PF1Cache	;3
   1506  f750		       c6 d2		      DEC	ScoreD2	;5
   1507  f752
   1508  f752				   DrawScoreD3		; 23
   1509  f752		       a6 d3		      LDX	ScoreD3	; 3
   1510  f754		       bd 00 fd 	      LDA	Font,X	;4
   1511  f757		       4a		      LSR		;2
   1512  f758		       4a		      LSR		;2
   1513  f759		       4a		      LSR		;2
   1514  f75a		       4a		      LSR		;2
   1515  f75b		       85 83		      STA	PF2Cache	;3
   1516  f75d		       c6 d3		      DEC	ScoreD3	;5
   1517  f75f
   1518  f75f				   DrawScoreD4		; 20
   1519  f75f		       a6 d4		      LDX	ScoreD4	; 3
   1520  f761		       bd 00 fd 	      LDA	Font,X	;4
   1521  f764		       29 f0		      AND	#%11110000	;2
   1522  f766		       05 83		      ORA	PF2Cache	;3
   1523  f768		       85 83		      STA	PF2Cache	;3
   1524  f76a		       c6 d4		      DEC	ScoreD4	;5
   1525  f76c
   1526  f76c
   1527  f76c		       88		      DEY		;2
   1528  f76d		       10 b0		      BPL	ScoreLoop	;4
   1529  f76f
   1530  f76f		       85 02		      STA	WSYNC
   1531  f771		       85 2a		      STA	HMOVE
   1532  f773		       20 91 f6 	      JSR	LoadAll
   1533  f776		       60		      RTS		; 6
   1534  f777
   1535  f777				   PrintRightDecimalDigits
   1536  f777		       b9 00 00 	      LDA	0,Y
   1537  f77a		       4a		      LSR
   1538  f77b		       4a		      LSR
   1539  f77c		       4a		      LSR
   1540  f77d		       4a		      LSR
   1541  f77e		       aa		      TAX
   1542  f77f		       bd 6c fc 	      LDA	FontLookup,X	;4
   1543  f782		       85 d2		      STA	ScoreD2	;3
   1544  f784
   1545  f784		       b9 00 00 	      LDA	0,Y
   1546  f787		       29 0f		      AND	#%00001111
   1547  f789		       aa		      TAX
   1548  f78a		       bd 6c fc 	      LDA	FontLookup,X	;4
   1549  f78d		       85 d3		      STA	ScoreD3	;3
   1550  f78f
   1551  f78f		       c8		      INY
   1552  f790		       b9 00 00 	      LDA	0,Y
   1553  f793		       4a		      LSR
   1554  f794		       4a		      LSR
   1555  f795		       4a		      LSR
   1556  f796		       4a		      LSR
   1557  f797		       aa		      TAX
   1558  f798		       bd 6c fc 	      LDA	FontLookup,X	;4
   1559  f79b		       85 d0		      STA	ScoreD0	;3
   1560  f79d
   1561  f79d		       b9 00 00 	      LDA	0,Y
   1562  f7a0		       29 0f		      AND	#%00001111
   1563  f7a2		       aa		      TAX
   1564  f7a3		       bd 6c fc 	      LDA	FontLookup,X	;4
   1565  f7a6		       85 d1		      STA	ScoreD1	;3
   1566  f7a8
   1567  f7a8		       a9 ae		      LDA	#<Triangle + FONT_OFFSET
   1568  f7aa		       85 d4		      STA	ScoreD4
   1569  f7ac		       60		      RTS
   1570  f7ad
   1571  f7ad				   PrintLastLeftDecimalDigits
   1572  f7ad		       b9 00 00 	      LDA	0,Y
   1573  f7b0		       4a		      LSR
   1574  f7b1		       4a		      LSR
   1575  f7b2		       4a		      LSR
   1576  f7b3		       4a		      LSR
   1577  f7b4		       aa		      TAX
   1578  f7b5		       bd 6c fc 	      LDA	FontLookup,X	;4
   1579  f7b8		       85 d3		      STA	ScoreD3	;3
   1580  f7ba		       b9 00 00 	      LDA	0,Y
   1581  f7bd		       29 0f		      AND	#%00001111
   1582  f7bf		       aa		      TAX
   1583  f7c0		       bd 6c fc 	      LDA	FontLookup,X	;4
   1584  f7c3		       85 d4		      STA	ScoreD4	;3
   1585  f7c5		       60		      RTS
   1586  f7c6
   1587  f7c6				   PrintZerosLeft
   1588  f7c6		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1589  f7c8		       85 d2		      STA	ScoreD2
   1590  f7ca		       85 d3		      STA	ScoreD3
   1591  f7cc		       85 d4		      STA	ScoreD4
   1592  f7ce		       60		      RTS
   1593  f7cf
   1594  f7cf				   DrawGameOverScoreLine
   1595  f7cf		       85 02		      STA	WSYNC
   1596  f7d1		       20 1b f7 	      JSR	PrintScore
   1597  f7d4		       85 02		      STA	WSYNC
   1598  f7d6		       85 02		      STA	WSYNC
   1599  f7d8		       20 82 f6 	      JSR	ClearPF
   1600  f7db		       60		      RTS
   1601  f7dc
   1602  f7dc				   DrawGameOverScreenLeft
   1603  f7dc		       85 02		      STA	WSYNC
   1604  f7de		       20 82 f6 	      JSR	ClearPF
   1605  f7e1
   1606  f7e1				   DrawGlideTimerLeft
   1607  f7e1		       20 a3 f8 	      JSR	Sleep8Lines
   1608  f7e4		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1609  f7e6		       85 06		      STA	COLUP0
   1610  f7e8		       85 02		      STA	WSYNC
   1611  f7ea		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1612  f7ec		       85 d0		      STA	ScoreD0
   1613  f7ee		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1614  f7f0		       85 d1		      STA	ScoreD1
   1615  f7f2		       20 c6 f7 	      JSR	PrintZerosLeft
   1616  f7f5		       20 cf f7 	      JSR	DrawGameOverScoreLine
   1617  f7f8
   1618  f7f8				   DrawHitCountLeft
   1619  f7f8		       20 a3 f8 	      JSR	Sleep8Lines
   1620  f7fb		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1621  f7fd		       85 06		      STA	COLUP0
   1622  f7ff		       85 02		      STA	WSYNC
   1623  f801		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1624  f803		       85 d0		      STA	ScoreD0
   1625  f805		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1626  f807		       85 d1		      STA	ScoreD1
   1627  f809		       20 c6 f7 	      JSR	PrintZerosLeft
   1628  f80c		       20 cf f7 	      JSR	DrawGameOverScoreLine
   1629  f80f
   1630  f80f				   DrawCheckpointCountLeft
   1631  f80f		       20 a3 f8 	      JSR	Sleep8Lines
   1632  f812		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1633  f814		       85 06		      STA	COLUP0
   1634  f816		       85 02		      STA	WSYNC
   1635  f818		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1636  f81a		       85 d0		      STA	ScoreD0
   1637  f81c		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1638  f81e		       85 d1		      STA	ScoreD1
   1639  f820		       20 c6 f7 	      JSR	PrintZerosLeft
   1640  f823		       20 cf f7 	      JSR	DrawGameOverScoreLine
   1641  f826
   1642  f826				   DrawGameVersionLeft
   1643  f826		       20 a3 f8 	      JSR	Sleep8Lines
   1644  f829		       a9 49		      LDA	#VERSION_COLOR
   1645  f82b		       85 06		      STA	COLUP0
   1646  f82d
   1647  f82d		       a5 c6		      LDA	GameMode
   1648  f82f		       aa		      TAX
   1649  f830		       bd 6c fc 	      LDA	FontLookup,X	;4
   1650  f833		       85 d0		      STA	ScoreD0	;3
   1651  f835
   1652  f835		       a5 c7		      LDA	CurrentCarId
   1653  f837		       aa		      TAX
   1654  f838		       bd 6c fc 	      LDA	FontLookup,X	;4
   1655  f83b		       85 d1		      STA	ScoreD1	;3
   1656  f83d
   1657  f83d		       a5 db		      LDA	StartSWCHB
   1658  f83f		       29 40		      AND	#%01000000	; P0 difficulty
   1659  f841		       49 40		      EOR	#%01000000	; Reverse bytes
   1660  f843		       2a		      ROL
   1661  f844		       2a		      ROL
   1662  f845		       2a		      ROL
   1663  f846		       18		      CLC
   1664  f847		       69 0a		      ADC	#10
   1665  f849		       aa		      TAX
   1666  f84a		       bd 6c fc 	      LDA	FontLookup,X	;4
   1667  f84d		       85 d2		      STA	ScoreD2	;3
   1668  f84f
   1669  f84f		       a5 db		      LDA	StartSWCHB
   1670  f851		       29 80		      AND	#%10000000	; P0 difficulty
   1671  f853		       49 80		      EOR	#%10000000	; Reverse bytes
   1672  f855		       2a		      ROL
   1673  f856		       2a		      ROL
   1674  f857		       18		      CLC
   1675  f858		       69 0a		      ADC	#10
   1676  f85a		       aa		      TAX
   1677  f85b		       bd 6c fc 	      LDA	FontLookup,X	;4
   1678  f85e		       85 d3		      STA	ScoreD3	;3
   1679  f860
   1680  f860		       a9 a9		      LDA	#<Pipe + FONT_OFFSET
   1681  f862		       85 d4		      STA	ScoreD4
   1682  f864
   1683  f864		       20 cf f7 	      JSR	DrawGameOverScoreLine
   1684  f867
   1685  f867		       4c 80 f8 	      JMP	FinalizeDrawGameOver
   1686  f86a
   1687  f86a				   DrawGameOverScreenRight
   1688  f86a		       85 02		      STA	WSYNC
   1689  f86c		       20 82 f6 	      JSR	ClearPF
   1690  f86f
   1691  f86f				   DrawVersionRight
   1692  f86f		       20 a3 f8 	      JSR	Sleep8Lines
   1693  f872		       a9 49		      LDA	#VERSION_COLOR
   1694  f874		       85 07		      STA	COLUP1
   1695  f876		       85 02		      STA	WSYNC
   1696  f878		       a2 28		      LDX	#<VersionText
   1697  f87a		       20 fd f6 	      JSR	PrintStaticText
   1698  f87d		       20 cf f7 	      JSR	DrawGameOverScoreLine
   1699  f880
   1700  f880				   FinalizeDrawGameOver
   1701  f880		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1702  f882		       85 c9		      STA	ScoreFontColor
   1703  f884		       20 9a f8 	      JSR	Sleep4Lines
   1704  f887		       20 aa f8 	      JSR	Sleep32Lines
   1705  f88a		       20 aa f8 	      JSR	Sleep32Lines
   1706  f88d		       4c 0f f5 	      JMP	PrepareOverscan
   1707  f890
   1708  f890				   WaitForVblankEnd
   1709  f890		       ad 84 02 	      LDA	INTIM
   1710  f893		       d0 fb		      BNE	WaitForVblankEnd
   1711  f895		       85 02		      STA	WSYNC
   1712  f897		       85 01		      STA	VBLANK
   1713  f899		       60		      RTS
   1714  f89a
   1715  f89a				   Sleep4Lines
   1716  f89a		       85 02		      STA	WSYNC
   1717  f89c		       85 02		      STA	WSYNC
   1718  f89e		       85 02		      STA	WSYNC
   1719  f8a0		       85 02		      STA	WSYNC
   1720  f8a2		       60		      RTS
   1721  f8a3
   1722  f8a3				   Sleep8Lines
   1723  f8a3		       20 9a f8 	      JSR	Sleep4Lines
   1724  f8a6		       20 9a f8 	      JSR	Sleep4Lines
   1725  f8a9		       60		      RTS
   1726  f8aa
   1727  f8aa				   Sleep32Lines
   1728  f8aa		       20 a3 f8 	      JSR	Sleep8Lines
   1729  f8ad		       20 a3 f8 	      JSR	Sleep8Lines
   1730  f8b0		       20 a3 f8 	      JSR	Sleep8Lines
   1731  f8b3		       20 a3 f8 	      JSR	Sleep8Lines
   1732  f8b6		       60		      RTS
   1733  f8b7
   1734  f8b7							;X = number of WSYNC HMOVE to run
   1735  f8b7				   HMoveXTimes
   1736  f8b7		       85 02		      STA	WSYNC	;3
   1737  f8b9		       85 2a		      STA	HMOVE	; 3/10 
   1738  f8bb		       ca		      DEX
   1739  f8bc		       d0 f9		      BNE	HMoveXTimes
   1740  f8be		       60		      RTS
   1741  f8bf
   1742  f8bf				   ConfigureCarSprites
   1743  f8bf		       a5 8c		      LDA	FrameCount0
   1744  f8c1		       29 01		      AND	#%00000001
   1745  f8c3		       d0 0b		      BNE	LoadForRightScreenSprites
   1746  f8c5				   LoadForLeftScreenSprites
   1747  f8c5		       a5 c7		      LDA	CurrentCarId
   1748  f8c7		       85 b0		      STA	Tmp0
   1749  f8c9		       a5 c8		      LDA	OpCurrentCarId
   1750  f8cb		       85 b1		      STA	Tmp1
   1751  f8cd		       4c d8 f8 	      JMP	LoadCarSpritesFromIds
   1752  f8d0				   LoadForRightScreenSprites
   1753  f8d0		       a5 c7		      LDA	CurrentCarId
   1754  f8d2		       85 b1		      STA	Tmp1
   1755  f8d4		       a5 c8		      LDA	OpCurrentCarId
   1756  f8d6		       85 b0		      STA	Tmp0
   1757  f8d8
   1758  f8d8				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1759  f8d8		       a4 b0		      LDY	Tmp0
   1760  f8da		       b9 9b ff 	      LDA	CarIdToSpriteAddressL,Y
   1761  f8dd		       85 d7		      STA	CarSpritePointerL
   1762  f8df		       b9 9f ff 	      LDA	CarIdToSpriteAddressH,Y
   1763  f8e2		       85 d8		      STA	CarSpritePointerH
   1764  f8e4				   ConfigureOpponentCarSprite
   1765  f8e4		       a4 b1		      LDY	Tmp1
   1766  f8e6		       b9 a3 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1767  f8e9		       85 d9		      STA	EnemyCarSpritePointerL
   1768  f8eb		       b9 a7 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1769  f8ee		       85 da		      STA	EnemyCarSpritePointerH
   1770  f8f0		       60		      RTS
   1771  f8f1
   1772  f8f1							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1773  f8f1							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1774  f8f1							; Tmp0 Binary Number
   1775  f8f1							; Result Returned in Tmp 1 and A
   1776  f8f1				   BINBCD8
   1777  f8f1		       f8		      SED		; Switch to decimal mode
   1778  f8f2		       a9 00		      LDA	#0	; Ensure the result is clear
   1779  f8f4		       85 b1		      STA	Tmp1+0
   1780  f8f6							;STA Tmp1+1
   1781  f8f6		       a2 08		      LDX	#8	; The number of source bits
   1782  f8f8
   1783  f8f8				   CNVBIT
   1784  f8f8							;ASL Tmp0 ;BIN		; Shift out one bit
   1785  f8f8		       a5 b1		      LDA	Tmp1+0	; And add into result
   1786  f8fa		       65 b1		      ADC	Tmp1+0
   1787  f8fc		       85 b1		      STA	Tmp1+0
   1788  f8fe							;Not needed now, 0 to 99 is enought for timer!
   1789  f8fe							; LDA Tmp1+1	; propagating any carry
   1790  f8fe							; ADC Tmp1+1
   1791  f8fe							; STA Tmp1+1
   1792  f8fe		       ca		      DEX		; And repeat for next bit
   1793  f8ff		       d0 f7		      BNE	CNVBIT
   1794  f901		       d8		      CLD		; Back to binary
   1795  f902
   1796  f902		       60		      RTS		; All Done.
   1797  f903
   1798  f903							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1799  f903							;X player 0 or 1
   1800  f903				   SelectCarWithDpad
   1801  f903		       a0 03		      LDY	#3
   1802  f905				   SelectCarWithDpadLoop
   1803  f905		       ad 80 02 	      LDA	SWCHA
   1804  f908		       25 b0		      AND	Tmp0
   1805  f90a		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1806  f90c		       98		      TYA
   1807  f90d		       95 c7		      STA	CurrentCarId,X
   1808  f90f				   ContinueSelectCarWithDpadLoop
   1809  f90f		       46 b0		      LSR	Tmp0
   1810  f911		       88		      DEY
   1811  f912		       10 f1		      BPL	SelectCarWithDpadLoop
   1812  f914		       60		      RTS
   1813  f915
   1814  f915				   ProcessOpponentLine
   1815  f915		       a5 8c		      LDA	FrameCount0
   1816  f917		       29 01		      AND	#%00000001
   1817  f919		       38		      SEC
   1818  f91a		       d0 15		      BNE	Player0IsOpponent
   1819  f91c				   Player1IsOpponent		; Code could be reused?
   1820  f91c		       a5 91		      LDA	TrafficOffset0 + 1
   1821  f91e		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1822  f920		       85 b0		      STA	Tmp0
   1823  f922		       a5 92		      LDA	TrafficOffset0 + 2
   1824  f924		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1825  f926		       85 b1		      STA	Tmp1
   1826  f928		       a5 ba		      LDA	Traffic0Msb
   1827  f92a		       e5 bb		      SBC	OpTraffic0Msb
   1828  f92c		       85 b2		      STA	Tmp2
   1829  f92e		       4c 43 f9 	      JMP	StoreInFrontPlayer
   1830  f931				   Player0IsOpponent
   1831  f931		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1832  f933		       e5 91		      SBC	TrafficOffset0 + 1
   1833  f935		       85 b0		      STA	Tmp0
   1834  f937		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1835  f939		       e5 92		      SBC	TrafficOffset0 + 2
   1836  f93b		       85 b1		      STA	Tmp1
   1837  f93d		       a5 bb		      LDA	OpTraffic0Msb
   1838  f93f		       e5 ba		      SBC	Traffic0Msb
   1839  f941		       85 b2		      STA	Tmp2
   1840  f943
   1841  f943				   StoreInFrontPlayer
   1842  f943		       85 f4		      STA	IsOpponentInFront
   1843  f945
   1844  f945				   AddOffsetToOpponentLine
   1845  f945		       18		      CLC
   1846  f946		       a5 b0		      LDA	Tmp0
   1847  f948		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1848  f94a		       85 b0		      STA	Tmp0
   1849  f94c		       a5 b1		      LDA	Tmp1
   1850  f94e		       69 00		      ADC	#0
   1851  f950		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1852  f952		       a5 b2		      LDA	Tmp2
   1853  f954		       69 00		      ADC	#0
   1854  f956		       05 b1		      ORA	Tmp1
   1855  f958		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1856  f95a				   OpponentNotVisible
   1857  f95a		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1858  f95c		       85 cf		      STA	OpponentLine
   1859  f95e		       4c 65 f9 	      JMP	ReturnFromProcessOpponentLine
   1860  f961				   OpponentVisible
   1861  f961		       a5 b0		      LDA	Tmp0
   1862  f963		       85 cf		      STA	OpponentLine
   1863  f965				   ReturnFromProcessOpponentLine
   1864  f965		       60		      RTS
   1865  f966
   1866  f966							; Value stored in A
   1867  f966				   IsOpponentColliding
   1868  f966							;Any non default state, opponent do not colide
   1869  f966		       a5 8e		      LDA	CollisionCounter
   1870  f968		       05 8f		      ORA	OpCollisionCounter
   1871  f96a		       05 cb		      ORA	ScoreFontColorHoldChange
   1872  f96c		       05 cc		      ORA	OpScoreFontColorHoldChange
   1873  f96e		       d0 07		      BNE	OpponentNotColliding
   1874  f970		       a5 f4		      LDA	IsOpponentInFront
   1875  f972		       25 07		      AND	CXPPMM
   1876  f974		       4c 79 f9 	      JMP	ReturnIsOpponentColliding
   1877  f977				   OpponentNotColliding
   1878  f977		       a9 00		      LDA	#0
   1879  f979				   ReturnIsOpponentColliding
   1880  f979		       60		      RTS
   1881  f97a
   1882  f97a
   1883  f97a							; Movement and colision are binded because the car must be moved after duplicate size.
   1884  f97a							; Use X for the player
   1885  f97a							; Tmp2 Traffic colision result
   1886  f97a				   TestCollisionAndMove
   1887  f97a							; Until store the movemnt, Y contains the value to be stored.
   1888  f97a							; see if player0 colides with the rest
   1889  f97a		       a5 b2		      LDA	Tmp2
   1890  f97c		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1891  f97e		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1892  f980		       d0 25		      BNE	NoCollision
   1893  f982		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1894  f984		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1895  f986		       f0 1f		      BEQ	NoCollision
   1896  f988		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1897  f98a		       f0 1b		      BEQ	NoCollision
   1898  f98c		       a9 ff		      LDA	#COLLISION_FRAMES
   1899  f98e		       95 8e		      STA	CollisionCounter,X
   1900  f990		       b5 f2		      LDA	Player0SpeedH,X
   1901  f992		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1902  f994		       a9 10		      LDA	#COLLISION_SPEED_L
   1903  f996		       d5 f0		      CMP	Player0SpeedL,X
   1904  f998		       b0 04		      BCS	SkipSetColisionSpeedL
   1905  f99a				   SetColisionSpeedL
   1906  f99a		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1907  f99c		       95 f0		      STA	Player0SpeedL,X
   1908  f99e				   SkipSetColisionSpeedL
   1909  f99e		       a9 00		      LDA	#0
   1910  f9a0		       95 f2		      STA	Player0SpeedH,X
   1911  f9a2		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1912  f9a4		       4c f7 f9 	      JMP	StoreHMove	; We keep position consistent
   1913  f9a7				   NoCollision
   1914  f9a7
   1915  f9a7				   DecrementCollision
   1916  f9a7		       b5 8e		      LDA	CollisionCounter,X
   1917  f9a9		       f0 06		      BEQ	FinishDecrementCollision
   1918  f9ab		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1919  f9ad		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1920  f9af		       d6 8e		      DEC	CollisionCounter,X
   1921  f9b1				   FinishDecrementCollision
   1922  f9b1
   1923  f9b1				   ResetPlayerSize
   1924  f9b1		       d0 04		      BNE	FinishResetPlayerSize
   1925  f9b3		       a9 30		      LDA	#%00110000
   1926  f9b5		       95 04		      STA	NUSIZ0,X	;
   1927  f9b7				   FinishResetPlayerSize
   1928  f9b7
   1929  f9b7				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1930  f9b7		       b5 8e		      LDA	CollisionCounter,X
   1931  f9b9		       c9 01		      CMP	#1	; Last frame before reset
   1932  f9bb		       d0 05		      BNE	SkipResetPlayerPosition
   1933  f9bd		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1934  f9bf		       4c f7 f9 	      JMP	StoreHMove
   1935  f9c2				   SkipResetPlayerPosition
   1936  f9c2
   1937  f9c2				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1938  f9c2		       b5 c7		      LDA	CurrentCarId,X
   1939  f9c4		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1940  f9c6		       d0 08		      BNE	PrepareReadXAxis
   1941  f9c8		       a0 00		      LDY	#0
   1942  f9ca		       a5 8c		      LDA	FrameCount0
   1943  f9cc		       29 01		      AND	#DRAGSTER_TURN_MASK
   1944  f9ce		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1945  f9d0
   1946  f9d0				   PrepareReadXAxis
   1947  f9d0		       a0 00		      LDY	#0
   1948  f9d2		       b5 b6		      LDA	Player0X,X
   1949  f9d4				   BeginReadLeft
   1950  f9d4		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1951  f9d6		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1952  f9d9		       2c 80 02 	      BIT	SWCHA
   1953  f9dc		       d0 07		      BNE	SkipMoveLeft
   1954  f9de		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1955  f9e0		       d6 b6		      DEC	Player0X,X
   1956  f9e2		       4c f7 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1957  f9e5				   SkipMoveLeft
   1958  f9e5				   BeginReadRight
   1959  f9e5		       b5 b6		      LDA	Player0X,X
   1960  f9e7		       c9 2c		      CMP	#PLAYER_MAX_X
   1961  f9e9		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1962  f9eb		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1963  f9ee		       2c 80 02 	      BIT	SWCHA
   1964  f9f1		       d0 04		      BNE	SkipMoveRight
   1965  f9f3		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1966  f9f5		       f6 b6		      INC	Player0X,X
   1967  f9f7				   SkipMoveRight
   1968  f9f7				   StoreHMove
   1969  f9f7		       94 20		      STY	HMP0,X	;set the move for player 0
   1970  f9f9
   1971  f9f9		       60		      RTS
   1972  f9fa
   1973  f9fa							; X Traffic offset 4 bits each lane, 4 lanes per player
   1974  f9fa							; Tmp3 Max X offset
   1975  f9fa							; Tmp4 Max Player Speed L
   1976  f9fa							; Tmp5 Max Player Speed H
   1977  f9fa				   UpdateOffsets
   1978  f9fa		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1979  f9fc		       a5 c6		      LDA	GameMode
   1980  f9fe		       29 04		      AND	#%00000100	; GameModes with high delta
   1981  fa00		       f0 02		      BEQ	UpdateOffsetsLoop
   1982  fa02		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1983  fa04
   1984  fa04				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1985  fa04		       38		      SEC
   1986  fa05		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1987  fa07		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1988  fa0a		       85 b0		      STA	Tmp0
   1989  fa0c		       c8		      INY
   1990  fa0d		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1991  fa0f		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1992  fa12		       85 b1		      STA	Tmp1
   1993  fa14		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1994  fa16		       e9 00		      SBC	#0
   1995  fa18		       85 b2		      STA	Tmp2
   1996  fa1a
   1997  fa1a				   AddsTheResult
   1998  fa1a		       18		      CLC
   1999  fa1b		       a5 b0		      LDA	Tmp0
   2000  fa1d		       75 90		      ADC	TrafficOffset0,X
   2001  fa1f		       95 90		      STA	TrafficOffset0,X
   2002  fa21		       e8		      INX
   2003  fa22		       a5 b1		      LDA	Tmp1
   2004  fa24		       75 90		      ADC	TrafficOffset0,X
   2005  fa26		       95 90		      STA	TrafficOffset0,X
   2006  fa28		       e8		      INX
   2007  fa29		       a5 b2		      LDA	Tmp2	; Carry
   2008  fa2b		       75 90		      ADC	TrafficOffset0,X
   2009  fa2d		       95 90		      STA	TrafficOffset0,X
   2010  fa2f		       90 0f		      BCC	CalculateOffsetCache
   2011  fa31				   CalculatePlayer0Msb
   2012  fa31		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   2013  fa33		       d0 05		      BNE	CalculatePlayer1Msb
   2014  fa35		       e6 ba		      INC	Traffic0Msb
   2015  fa37		       4c 40 fa 	      JMP	CalculateOffsetCache
   2016  fa3a				   CalculatePlayer1Msb
   2017  fa3a		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   2018  fa3c		       d0 02		      BNE	CalculateOffsetCache
   2019  fa3e		       e6 bb		      INC	OpTraffic0Msb
   2020  fa40
   2021  fa40				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   2022  fa40		       e8		      INX
   2023  fa41		       38		      SEC
   2024  fa42		       69 00		      ADC	#0	;Increment by one
   2025  fa44		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   2026  fa46
   2027  fa46				   PrepareNextUpdateLoop
   2028  fa46		       c8		      INY
   2029  fa47		       e8		      INX
   2030  fa48		       e4 b3		      CPX	Tmp3	; Max X offset
   2031  fa4a		       d0 b8		      BNE	UpdateOffsetsLoop
   2032  fa4c		       60		      RTS
   2033  fa4d
   2034  fa4d							; X Player 0 or 1
   2035  fa4d				   ProcessSpeed
   2036  fa4d				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2037  fa4d		       a9 00		      LDA	#0
   2038  fa4f		       85 b0		      STA	Tmp0	; Break speed
   2039  fa51		       b5 b8		      LDA	CountdownTimer,X
   2040  fa53		       d0 0d		      BNE	Break
   2041  fa55		       b4 c7		      LDY	CurrentCarId,X
   2042  fa57		       a5 8c		      LDA	FrameCount0
   2043  fa59		       39 af ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2044  fa5c		       d0 04		      BNE	Break
   2045  fa5e		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2046  fa60		       85 b0		      STA	Tmp0
   2047  fa62
   2048  fa62				   Break
   2049  fa62		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2050  fa65		       2c 80 02 	      BIT	SWCHA
   2051  fa68		       d0 12		      BNE	BreakNonZero
   2052  fa6a		       b5 0c		      LDA	INPT4,X	;3
   2053  fa6c		       10 0a		      BPL	BreakWhileAccelerating
   2054  fa6e		       b4 d5		      LDY	Gear,X
   2055  fa70		       b9 bb ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2056  fa73		       85 b0		      STA	Tmp0
   2057  fa75		       4c 7c fa 	      JMP	BreakNonZero
   2058  fa78				   BreakWhileAccelerating		; Allow better control while breaking.
   2059  fa78		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2060  fa7a		       85 b0		      STA	Tmp0
   2061  fa7c
   2062  fa7c				   BreakNonZero
   2063  fa7c		       a5 b0		      LDA	Tmp0
   2064  fa7e		       f0 29		      BEQ	SkipBreak
   2065  fa80
   2066  fa80				   DecreaseSpeed
   2067  fa80		       38		      SEC
   2068  fa81		       b5 f0		      LDA	Player0SpeedL,X
   2069  fa83		       e5 b0		      SBC	Tmp0
   2070  fa85		       95 f0		      STA	Player0SpeedL,X
   2071  fa87		       b5 f2		      LDA	Player0SpeedH,X
   2072  fa89		       e9 00		      SBC	#0
   2073  fa8b		       95 f2		      STA	Player0SpeedH,X
   2074  fa8d
   2075  fa8d				   CheckMinSpeed
   2076  fa8d		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2077  fa8f		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2078  fa91		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2079  fa93		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2080  fa95
   2081  fa95				   CompareLBreakSpeed
   2082  fa95		       b5 f0		      LDA	Player0SpeedL,X
   2083  fa97		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2084  fa99		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2085  fa9b		       4c a6 fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2086  fa9e
   2087  fa9e				   ResetMinSpeed
   2088  fa9e		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2089  faa0		       95 f2		      STA	Player0SpeedH,X
   2090  faa2		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2091  faa4		       95 f0		      STA	Player0SpeedL,X
   2092  faa6
   2093  faa6				   SkipAccelerateIfBreaking
   2094  faa6		       4c ef fa 	      JMP	SkipAccelerate
   2095  faa9				   SkipBreak
   2096  faa9
   2097  faa9				   Acelerates
   2098  faa9		       b5 b8		      LDA	CountdownTimer,X
   2099  faab		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2100  faad
   2101  faad				   ContinueAccelerateTest
   2102  faad		       b5 0c		      LDA	INPT4,X	;3
   2103  faaf		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2104  fab1		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2105  fab4		       2c 80 02 	      BIT	SWCHA
   2106  fab7		       d0 36		      BNE	SkipAccelerate
   2107  fab9
   2108  fab9				   IncreaseCarSpeed
   2109  fab9		       a9 02		      LDA	#2
   2110  fabb		       85 b0		      STA	Tmp0	; Loop control
   2111  fabd		       b4 c7		      LDY	CurrentCarId,X
   2112  fabf				   IncreaseCarSpeedLoop
   2113  fabf							;Adds speed
   2114  fabf		       18		      CLC
   2115  fac0		       b5 dc		      LDA	AccelerateBuffer,X
   2116  fac2		       79 ab ff 	      ADC	CarIdToAccelerateSpeed,Y
   2117  fac5		       95 dc		      STA	AccelerateBuffer,X
   2118  fac7		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2119  fac9		       f6 f0		      INC	Player0SpeedL,X
   2120  facb		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2121  facd		       f6 f2		      INC	Player0SpeedH,X
   2122  facf				   ContinueIncreaseSpeedLoop
   2123  facf		       c6 b0		      DEC	Tmp0
   2124  fad1		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2125  fad3				   SkipIncreaseCarSpeed
   2126  fad3
   2127  fad3				   CheckIfAlreadyMaxSpeed
   2128  fad3		       b5 f2		      LDA	Player0SpeedH,X
   2129  fad5		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2130  fad7		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2131  fad9		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2132  fadb							;High bit is max, compare the low
   2133  fadb		       b4 c7		      LDY	CurrentCarId,X
   2134  fadd		       b5 f0		      LDA	Player0SpeedL,X
   2135  fadf		       d9 b3 ff 	      CMP	CarIdToMaxSpeedL,Y
   2136  fae2		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2137  fae4							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2138  fae4
   2139  fae4				   ResetToMaxSpeed		; Speed is more, or is already max
   2140  fae4		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2141  fae6		       95 f2		      STA	Player0SpeedH,X
   2142  fae8		       b4 c7		      LDY	CurrentCarId,X
   2143  faea		       b9 b3 ff 	      LDA	CarIdToMaxSpeedL,Y
   2144  faed		       95 f0		      STA	Player0SpeedL,X
   2145  faef				   SkipAccelerate
   2146  faef		       60		      RTS
   2147  faf0
   2148  faf0							;Tmp0 Traffic Offset to compare with next checkpoint
   2149  faf0				   ProcessPlayerStatus
   2150  faf0				   IsGameOver
   2151  faf0		       b5 b8		      LDA	CountdownTimer,X
   2152  faf2		       15 f0		      ORA	Player0SpeedL,X
   2153  faf4		       15 f2		      ORA	Player0SpeedH,X
   2154  faf6		       d0 0b		      BNE	IsCheckpoint
   2155  faf8		       a9 01		      LDA	#1
   2156  fafa		       95 cb		      STA	ScoreFontColorHoldChange,X
   2157  fafc		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2158  fafe		       95 c9		      STA	ScoreFontColor,X
   2159  fb00		       4c 35 fb 	      JMP	SkipIsTimeOver
   2160  fb03
   2161  fb03				   IsCheckpoint
   2162  fb03		       b5 cd		      LDA	NextCheckpoint,X
   2163  fb05		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2164  fb07		       d0 20		      BNE	SkipIsCheckpoint
   2165  fb09		       18		      CLC
   2166  fb0a		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2167  fb0c		       95 cd		      STA	NextCheckpoint,X
   2168  fb0e		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2169  fb10		       95 c9		      STA	ScoreFontColor,X
   2170  fb12		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2171  fb14		       95 cb		      STA	ScoreFontColorHoldChange,X
   2172  fb16		       b5 b8		      LDA	CountdownTimer,X
   2173  fb18		       18		      CLC
   2174  fb19		       75 c0		      ADC	CheckpointTime,X
   2175  fb1b		       95 b8		      STA	CountdownTimer,X
   2176  fb1d		       90 04		      BCC	JumpSkipTimeOver
   2177  fb1f		       a9 ff		      LDA	#$FF
   2178  fb21		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2179  fb23				   JumpSkipTimeOver
   2180  fb23		       20 ae f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2181  fb26		       4c 35 fb 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2182  fb29				   SkipIsCheckpoint
   2183  fb29
   2184  fb29				   IsTimeOver
   2185  fb29		       b5 b8		      LDA	CountdownTimer,X
   2186  fb2b		       d0 08		      BNE	SkipIsTimeOver
   2187  fb2d		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2188  fb2f		       95 cb		      STA	ScoreFontColorHoldChange,X
   2189  fb31		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2190  fb33		       95 c9		      STA	ScoreFontColor,X
   2191  fb35				   SkipIsTimeOver
   2192  fb35		       60		      RTS
   2193  fb36
   2194  fb36
   2195  fb36				   EverySecond		; 64 frames to be more precise
   2196  fb36		       a9 3f		      LDA	#%00111111
   2197  fb38		       25 8c		      AND	FrameCount0
   2198  fb3a		       d0 06		      BNE	SkipEverySecondAction
   2199  fb3c		       d5 b8		      CMP	CountdownTimer,X
   2200  fb3e		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2201  fb40		       d6 b8		      DEC	CountdownTimer,X
   2202  fb42				   SkipEverySecondAction
   2203  fb42		       60		      RTS
   2204  fb43
   2205  fb43				   CalculateGear
   2206  fb43		       b5 f0		      LDA	Player0SpeedL,X	;3
   2207  fb45		       29 80		      AND	#%10000000	;2
   2208  fb47		       15 f2		      ORA	Player0SpeedH,X	;3
   2209  fb49		       18		      CLC		;2
   2210  fb4a		       2a		      ROL		;2
   2211  fb4b		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2212  fb4d		       95 d5		      STA	Gear,X
   2213  fb4f		       60		      RTS
   2214  fb50
   2215  fb50				   ProcessScoreFontColor
   2216  fb50		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2217  fb52		       f0 06		      BEQ	ResetScoreFontColor
   2218  fb54		       88		      DEY
   2219  fb55		       94 cb		      STY	ScoreFontColorHoldChange,X
   2220  fb57		       4c 5f fb 	      JMP	SkipScoreFontColor
   2221  fb5a				   ResetScoreFontColor
   2222  fb5a		       bd a2 fc 	      LDA	PlayerToDefaultColor,X
   2223  fb5d		       95 c9		      STA	ScoreFontColor,X
   2224  fb5f				   SkipScoreFontColor
   2225  fb5f		       60		      RTS
   2226  fb60
   2227  fb60							; Moved here because of rom space.
   2228  fb60							; The only SBR in constants space
   2229  fb60				   DrawQrCode
   2230  fb60		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2231  fb62		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2232  fb64		       a9 01		      LDA	#%00000001	; Mirror playfield
   2233  fb66		       85 0a		      STA	CTRLPF
   2234  fb68		       20 6c f6 	      JSR	ClearAll	; To be 100 sure!
   2235  fb6b		       ad 82 02 	      LDA	SWCHB
   2236  fb6e		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2237  fb70		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2238  fb72		       f0 07		      BEQ	StoreReversedQrCode
   2239  fb74		       86 09		      STX	COLUBK
   2240  fb76		       84 08		      STY	COLUPF
   2241  fb78		       4c 7f fb 	      JMP	ContinueQrCode
   2242  fb7b				   StoreReversedQrCode
   2243  fb7b		       86 08		      STX	COLUPF
   2244  fb7d		       84 09		      STY	COLUBK
   2245  fb7f
   2246  fb7f				   ContinueQrCode
   2247  fb7f		       a2 08		      LDX	#8
   2248  fb81		       20 b7 f8 	      JSR	HMoveXTimes
   2249  fb84		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2250  fb86		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2251  fb88		       20 90 f8 	      JSR	WaitForVblankEnd
   2252  fb8b		       20 a3 f8 	      JSR	Sleep8Lines
   2253  fb8e		       20 a3 f8 	      JSR	Sleep8Lines
   2254  fb91		       20 a3 f8 	      JSR	Sleep8Lines
   2255  fb94
   2256  fb94				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2257  fb94		       85 02		      STA	WSYNC
   2258  fb96		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2259  fb99		       85 0e		      STA	PF1	;3
   2260  fb9b		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2261  fb9e		       85 0f		      STA	PF2	;3
      0  fba0					      SLEEP	27	; 
      1  fba0				   .CYCLES    SET	27
      2  fba0
      3  fba0				  -	      IF	.CYCLES < 2
      4  fba0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fba0				  -	      ERR
      6  fba0					      ENDIF
      7  fba0
      8  fba0					      IF	.CYCLES & 1
      9  fba0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fba0				  -	      nop	0
     11  fba0					      ELSE
     12  fba0		       24 00		      bit	VSYNC
     13  fba2					      ENDIF
     14  fba2				   .CYCLES    SET	.CYCLES - 3
     15  fba2					      ENDIF
     16  fba2
     17  fba2					      REPEAT	.CYCLES / 2
     18  fba2		       ea		      nop
     17  fba2					      REPEND
     18  fba3		       ea		      nop
     17  fba3					      REPEND
     18  fba4		       ea		      nop
     17  fba4					      REPEND
     18  fba5		       ea		      nop
     17  fba5					      REPEND
     18  fba6		       ea		      nop
     17  fba6					      REPEND
     18  fba7		       ea		      nop
     17  fba7					      REPEND
     18  fba8		       ea		      nop
     17  fba8					      REPEND
     18  fba9		       ea		      nop
     17  fba9					      REPEND
     18  fbaa		       ea		      nop
     17  fbaa					      REPEND
     18  fbab		       ea		      nop
     17  fbab					      REPEND
     18  fbac		       ea		      nop
     17  fbac					      REPEND
     18  fbad		       ea		      nop
     19  fbae					      REPEND
   2263  fbae		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2264  fbb1		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2265  fbb3		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2266  fbb6		       85 0e		      STA	PF1	;3
   2267  fbb8
   2268  fbb8		       ca		      DEX		;2
   2269  fbb9		       d0 d9		      BNE	QrCodeLoop	;2
   2270  fbbb		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2271  fbbd		       88		      DEY		;2
   2272  fbbe		       10 d4		      BPL	QrCodeLoop	;4
   2273  fbc0
   2274  fbc0				   EndQrCodeLoop
   2275  fbc0		       85 02		      STA	WSYNC	;
   2276  fbc2		       a9 00		      LDA	#0
   2277  fbc4		       85 0e		      STA	PF1	;3
   2278  fbc6		       85 0f		      STA	PF2	;3
   2279  fbc8
   2280  fbc8		       20 aa f8 	      JSR	Sleep32Lines
   2281  fbcb		       4c 0f f5 	      JMP	PrepareOverscan
   2282  fbce
   2283  fbce							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2284  fc00					      org	$FC00
   2285  fc00				   QrCode1
   2286  fc00		       1f		      .byte.b	#%00011111
   2287  fc01		       10		      .byte.b	#%00010000
   2288  fc02		       17		      .byte.b	#%00010111
   2289  fc03		       17		      .byte.b	#%00010111
   2290  fc04		       17		      .byte.b	#%00010111
   2291  fc05		       10		      .byte.b	#%00010000
   2292  fc06		       1f		      .byte.b	#%00011111
   2293  fc07		       00		      .byte.b	#%00000000
   2294  fc08		       17		      .byte.b	#%00010111
   2295  fc09		       10		      .byte.b	#%00010000
   2296  fc0a		       1d		      .byte.b	#%00011101
   2297  fc0b		       16		      .byte.b	#%00010110
   2298  fc0c		       03		      .byte.b	#%00000011
   2299  fc0d		       19		      .byte.b	#%00011001
   2300  fc0e		       13		      .byte.b	#%00010011
   2301  fc0f		       1c		      .byte.b	#%00011100
   2302  fc10		       0b		      .byte.b	#%00001011
   2303  fc11		       00		      .byte.b	#%00000000
   2304  fc12		       1f		      .byte.b	#%00011111
   2305  fc13		       10		      .byte.b	#%00010000
   2306  fc14		       17		      .byte.b	#%00010111
   2307  fc15		       17		      .byte.b	#%00010111
   2308  fc16		       17		      .byte.b	#%00010111
   2309  fc17		       10		      .byte.b	#%00010000
   2310  fc18		       1f		      .byte.b	#%00011111
   2311  fc19
   2312  fc19				   QrCode2
   2313  fc19		       c3		      .byte.b	#%11000011
   2314  fc1a		       9a		      .byte.b	#%10011010
   2315  fc1b		       82		      .byte.b	#%10000010
   2316  fc1c		       da		      .byte.b	#%11011010
   2317  fc1d		       aa		      .byte.b	#%10101010
   2318  fc1e		       ca		      .byte.b	#%11001010
   2319  fc1f		       f3		      .byte.b	#%11110011
   2320  fc20		       78		      .byte.b	#%01111000
   2321  fc21		       df		      .byte.b	#%11011111
   2322  fc22		       fc		      .byte.b	#%11111100
   2323  fc23		       c7		      .byte.b	#%11000111
   2324  fc24		       98		      .byte.b	#%10011000
   2325  fc25		       23		      .byte.b	#%00100011
   2326  fc26		       b9		      .byte.b	#%10111001
   2327  fc27		       d2		      .byte.b	#%11010010
   2328  fc28		       30		      .byte.b	#%00110000
   2329  fc29		       eb		      .byte.b	#%11101011
   2330  fc2a		       28		      .byte.b	#%00101000
   2331  fc2b		       ab		      .byte.b	#%10101011
   2332  fc2c		       72		      .byte.b	#%01110010
   2333  fc2d		       fa		      .byte.b	#%11111010
   2334  fc2e		       7a		      .byte.b	#%01111010
   2335  fc2f		       32		      .byte.b	#%00110010
   2336  fc30		       3a		      .byte.b	#%00111010
   2337  fc31		       63		      .byte.b	#%01100011
   2338  fc32
   2339  fc32				   QrCode3
   2340  fc32		       98		      .byte.b	#%10011000
   2341  fc33		       c3		      .byte.b	#%11000011
   2342  fc34		       39		      .byte.b	#%00111001
   2343  fc35		       34		      .byte.b	#%00110100
   2344  fc36		       ff		      .byte.b	#%11111111
   2345  fc37		       71		      .byte.b	#%01110001
   2346  fc38		       d5		      .byte.b	#%11010101
   2347  fc39		       d1		      .byte.b	#%11010001
   2348  fc3a		       5f		      .byte.b	#%01011111
   2349  fc3b		       26		      .byte.b	#%00100110
   2350  fc3c		       2d		      .byte.b	#%00101101
   2351  fc3d		       e9		      .byte.b	#%11101001
   2352  fc3e		       d6		      .byte.b	#%11010110
   2353  fc3f		       26		      .byte.b	#%00100110
   2354  fc40		       ba		      .byte.b	#%10111010
   2355  fc41		       03		      .byte.b	#%00000011
   2356  fc42		       dd		      .byte.b	#%11011101
   2357  fc43		       e0		      .byte.b	#%11100000
   2358  fc44		       57		      .byte.b	#%01010111
   2359  fc45		       14		      .byte.b	#%00010100
   2360  fc46		       35		      .byte.b	#%00110101
   2361  fc47		       e5		      .byte.b	#%11100101
   2362  fc48		       b5		      .byte.b	#%10110101
   2363  fc49		       d4		      .byte.b	#%11010100
   2364  fc4a		       97		      .byte.b	#%10010111
   2365  fc4b
   2366  fc4b				   QrCode4
   2367  fc4b		       09		      .byte.b	#%00001001
   2368  fc4c		       0e		      .byte.b	#%00001110
   2369  fc4d		       0f		      .byte.b	#%00001111
   2370  fc4e		       0c		      .byte.b	#%00001100
   2371  fc4f		       0c		      .byte.b	#%00001100
   2372  fc50		       08		      .byte.b	#%00001000
   2373  fc51		       08		      .byte.b	#%00001000
   2374  fc52		       06		      .byte.b	#%00000110
   2375  fc53		       06		      .byte.b	#%00000110
   2376  fc54		       0b		      .byte.b	#%00001011
   2377  fc55		       0f		      .byte.b	#%00001111
   2378  fc56		       04		      .byte.b	#%00000100
   2379  fc57		       08		      .byte.b	#%00001000
   2380  fc58		       0f		      .byte.b	#%00001111
   2381  fc59		       09		      .byte.b	#%00001001
   2382  fc5a		       07		      .byte.b	#%00000111
   2383  fc5b		       05		      .byte.b	#%00000101
   2384  fc5c		       00		      .byte.b	#%00000000
   2385  fc5d		       0f		      .byte.b	#%00001111
   2386  fc5e		       08		      .byte.b	#%00001000
   2387  fc5f		       0b		      .byte.b	#%00001011
   2388  fc60		       0b		      .byte.b	#%00001011
   2389  fc61		       0b		      .byte.b	#%00001011
   2390  fc62		       08		      .byte.b	#%00001000
   2391  fc63		       0f		      .byte.b	#%00001111
   2392  fc64
   2393  fc64				   PlayerToUpMask
   2394  fc64		       10		      .byte.b	#%00010000	;
   2395  fc65		       01		      .byte.b	#%00000001	;
   2396  fc66
   2397  fc66				   PlayerToDownMask
   2398  fc66		       20		      .byte.b	#%00100000	;
   2399  fc67		       02		      .byte.b	#%00000010	;
   2400  fc68
   2401  fc68
   2402  fc68				   PlayerToLeftMask
   2403  fc68		       40		      .byte.b	#%01000000	;
   2404  fc69		       04		      .byte.b	#%00000100	;
   2405  fc6a
   2406  fc6a				   PlayerToRightMask
   2407  fc6a		       80		      .byte.b	#%10000000	;
   2408  fc6b		       08		      .byte.b	#%00001000	;
   2409  fc6c
   2410  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2411  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2412  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2413  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2414  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2415  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2416  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2417  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2418  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2419  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2420  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2421  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2422  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2423  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2424  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2425  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2426  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2427  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2428  fc7d
   2429  fc7d				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2430  fc7d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2431  fc7e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2432  fc7f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2433  fc80		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2434  fc81		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2435  fc82		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2436  fc83		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2437  fc84		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2438  fc85		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2439  fc86		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2440  fc87		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2441  fc88		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2442  fc89		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2443  fc8a		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2444  fc8b		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2445  fc8c		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2446  fc8d
   2447  fc8d				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2448  fc8d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2449  fc8e		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2450  fc8f		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2451  fc90		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2452  fc91		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2453  fc92		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2454  fc93		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2455  fc94		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2456  fc95		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2457  fc96		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2458  fc97		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2459  fc98		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2460  fc99		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2461  fc9a		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2462  fc9b		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2463  fc9c		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2464  fc9d		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2465  fc9e		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2466  fc9f		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2467  fca0		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2468  fca1		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2469  fca2
   2470  fca2				   PlayerToDefaultColor
   2471  fca2		       f9		      .byte.b	#PLAYER0_COLOR
   2472  fca3		       96		      .byte.b	#PLAYER1_COLOR
   2473  fca4
   2474  fd00					      org	$FD00
   2475  fd00				   Font
   2476  fd00				   C0
   2477  fd00		       e7		      .byte.b	#%11100111	;
   2478  fd01		       a5		      .byte.b	#%10100101	; 
   2479  fd02		       a5		      .byte.b	#%10100101	; 
   2480  fd03		       a5		      .byte.b	#%10100101	; 
   2481  fd04		       e7		      .byte.b	#%11100111	;	
   2482  fd05				   C1
   2483  fd05		       e7		      .byte.b	#%11100111	;
   2484  fd06		       42		      .byte.b	#%01000010	; 
   2485  fd07		       42		      .byte.b	#%01000010	; 
   2486  fd08		       42		      .byte.b	#%01000010	; 
   2487  fd09		       66		      .byte.b	#%01100110	;
   2488  fd0a				   C2
   2489  fd0a		       e7		      .byte.b	#%11100111	;
   2490  fd0b		       24		      .byte.b	#%00100100	; 
   2491  fd0c		       e7		      .byte.b	#%11100111	; 
   2492  fd0d		       81		      .byte.b	#%10000001	; 
   2493  fd0e		       e7		      .byte.b	#%11100111	;
   2494  fd0f				   C3
   2495  fd0f		       e7		      .byte.b	#%11100111	;
   2496  fd10		       81		      .byte.b	#%10000001	; 
   2497  fd11		       e7		      .byte.b	#%11100111	; 
   2498  fd12		       81		      .byte.b	#%10000001	; 
   2499  fd13		       e7		      .byte.b	#%11100111	;
   2500  fd14				   C4
   2501  fd14		       81		      .byte.b	#%10000001	;
   2502  fd15		       81		      .byte.b	#%10000001	; 
   2503  fd16		       e7		      .byte.b	#%11100111	; 
   2504  fd17		       a5		      .byte.b	#%10100101	; 
   2505  fd18		       a5		      .byte.b	#%10100101	;
   2506  fd19				   C5
   2507  fd19		       e7		      .byte.b	#%11100111	;
   2508  fd1a		       81		      .byte.b	#%10000001	; 
   2509  fd1b		       e7		      .byte.b	#%11100111	; 
   2510  fd1c		       24		      .byte.b	#%00100100	; 
   2511  fd1d		       e7		      .byte.b	#%11100111	;
   2512  fd1e				   C6
   2513  fd1e		       e7		      .byte.b	#%11100111	;
   2514  fd1f		       a5		      .byte.b	#%10100101	; 
   2515  fd20		       e7		      .byte.b	#%11100111	; 
   2516  fd21		       24		      .byte.b	#%00100100	; 
   2517  fd22		       e7		      .byte.b	#%11100111	;
   2518  fd23				   C7
   2519  fd23		       81		      .byte.b	#%10000001	;
   2520  fd24		       81		      .byte.b	#%10000001	; 
   2521  fd25		       81		      .byte.b	#%10000001	; 
   2522  fd26		       81		      .byte.b	#%10000001	; 
   2523  fd27		       e7		      .byte.b	#%11100111	;
   2524  fd28				   C8
   2525  fd28		       e7		      .byte.b	#%11100111	;
   2526  fd29		       a5		      .byte.b	#%10100101	; 
   2527  fd2a		       e7		      .byte.b	#%11100111	; 
   2528  fd2b		       a5		      .byte.b	#%10100101	; 
   2529  fd2c		       e7		      .byte.b	#%11100111	;
   2530  fd2d				   C9
   2531  fd2d		       e7		      .byte.b	#%11100111	;
   2532  fd2e		       81		      .byte.b	#%10000001	; 
   2533  fd2f		       e7		      .byte.b	#%11100111	; 
   2534  fd30		       a5		      .byte.b	#%10100101	; 
   2535  fd31		       e7		      .byte.b	#%11100111	;
   2536  fd32				   CA
   2537  fd32		       a5		      .byte.b	#%10100101	;
   2538  fd33		       a5		      .byte.b	#%10100101	; 
   2539  fd34		       e7		      .byte.b	#%11100111	; 
   2540  fd35		       a5		      .byte.b	#%10100101	; 
   2541  fd36		       e7		      .byte.b	#%11100111	;
   2542  fd37				   CB
   2543  fd37		       66		      .byte.b	#%01100110	;
   2544  fd38		       a5		      .byte.b	#%10100101	; 
   2545  fd39		       66		      .byte.b	#%01100110	; 
   2546  fd3a		       a5		      .byte.b	#%10100101	;
   2547  fd3b		       66		      .byte.b	#%01100110	;
   2548  fd3c				   CC
   2549  fd3c		       e7		      .byte.b	#%11100111	;
   2550  fd3d		       24		      .byte.b	#%00100100	; 
   2551  fd3e		       24		      .byte.b	#%00100100	; 
   2552  fd3f		       24		      .byte.b	#%00100100	;
   2553  fd40		       e7		      .byte.b	#%11100111	;
   2554  fd41
   2555  fd41				   CD
   2556  fd41		       66		      .byte.b	#%01100110	;
   2557  fd42		       a5		      .byte.b	#%10100101	; 
   2558  fd43		       a5		      .byte.b	#%10100101	; 
   2559  fd44		       a5		      .byte.b	#%10100101	;
   2560  fd45		       66		      .byte.b	#%01100110	;
   2561  fd46
   2562  fd46				   CE
   2563  fd46		       e7		      .byte.b	#%11100111	;
   2564  fd47		       24		      .byte.b	#%00100100	; 
   2565  fd48		       e7		      .byte.b	#%11100111	; 
   2566  fd49		       24		      .byte.b	#%00100100	; 
   2567  fd4a		       e7		      .byte.b	#%11100111	;
   2568  fd4b
   2569  fd4b				   CF
   2570  fd4b		       24		      .byte.b	#%00100100	;
   2571  fd4c		       24		      .byte.b	#%00100100	; 
   2572  fd4d		       e7		      .byte.b	#%11100111	; 
   2573  fd4e		       24		      .byte.b	#%00100100	; 
   2574  fd4f		       e7		      .byte.b	#%11100111	;
   2575  fd50
   2576  fd50				   CG
   2577  fd50		       c3		      .byte.b	#%11000011	;
   2578  fd51		       a5		      .byte.b	#%10100101	; 
   2579  fd52		       a5		      .byte.b	#%10100101	; 
   2580  fd53		       24		      .byte.b	#%00100100	; 
   2581  fd54		       c3		      .byte.b	#%11000011	;	
   2582  fd55
   2583  fd55				   CH
   2584  fd55		       a5		      .byte.b	#%10100101	;
   2585  fd56		       a5		      .byte.b	#%10100101	; 
   2586  fd57		       e7		      .byte.b	#%11100111	; 
   2587  fd58		       a5		      .byte.b	#%10100101	; 
   2588  fd59		       a5		      .byte.b	#%10100101	;
   2589  fd5a
   2590  fd5a				   CK
   2591  fd5a		       a5		      .byte.b	#%10100101	;
   2592  fd5b		       a5		      .byte.b	#%10100101	; 
   2593  fd5c		       66		      .byte.b	#%01100110	; 
   2594  fd5d		       a5		      .byte.b	#%10100101	; 
   2595  fd5e		       a5		      .byte.b	#%10100101	;
   2596  fd5f
   2597  fd5f				   CL
   2598  fd5f		       e7		      .byte.b	#%11100111	;
   2599  fd60		       24		      .byte.b	#%00100100	; 
   2600  fd61		       24		      .byte.b	#%00100100	; 
   2601  fd62		       24		      .byte.b	#%00100100	; 
   2602  fd63		       24		      .byte.b	#%00100100	;
   2603  fd64
   2604  fd64				   CM
   2605  fd64		       a5		      .byte.b	#%10100101	;
   2606  fd65		       a5		      .byte.b	#%10100101	; 
   2607  fd66		       a5		      .byte.b	#%10100101	; 
   2608  fd67		       e7		      .byte.b	#%11100111	; 
   2609  fd68		       a5		      .byte.b	#%10100101	;
   2610  fd69
   2611  fd69				   CN
   2612  fd69		       a5		      .byte.b	#%10100101	;
   2613  fd6a		       a5		      .byte.b	#%10100101	; 
   2614  fd6b		       a5		      .byte.b	#%10100101	; 
   2615  fd6c		       a5		      .byte.b	#%10100101	; 
   2616  fd6d		       66		      .byte.b	#%01100110	;	
   2617  fd6e
   2618  fd6e
   2619  fd6e				   CO
   2620  fd6e		       42		      .byte.b	#%01000010	;
   2621  fd6f		       a5		      .byte.b	#%10100101	; 
   2622  fd70		       a5		      .byte.b	#%10100101	; 
   2623  fd71		       a5		      .byte.b	#%10100101	; 
   2624  fd72		       42		      .byte.b	#%01000010	;	
   2625  fd73
   2626  fd73				   CP
   2627  fd73		       24		      .byte.b	#%00100100	;
   2628  fd74		       24		      .byte.b	#%00100100	; 
   2629  fd75		       e7		      .byte.b	#%11100111	; 
   2630  fd76		       a5		      .byte.b	#%10100101	; 
   2631  fd77		       e7		      .byte.b	#%11100111	;
   2632  fd78
   2633  fd78				   CR
   2634  fd78		       a5		      .byte.b	#%10100101	;
   2635  fd79		       a5		      .byte.b	#%10100101	; 
   2636  fd7a		       66		      .byte.b	#%01100110	; 
   2637  fd7b		       a5		      .byte.b	#%10100101	; 
   2638  fd7c		       66		      .byte.b	#%01100110	;
   2639  fd7d
   2640  fd7d				   CS
   2641  fd7d		       66		      .byte.b	#%01100110	;
   2642  fd7e		       81		      .byte.b	#%10000001	; 
   2643  fd7f		       42		      .byte.b	#%01000010	; 
   2644  fd80		       24		      .byte.b	#%00100100	; 
   2645  fd81		       c3		      .byte.b	#%11000011	;
   2646  fd82
   2647  fd82				   CT
   2648  fd82		       42		      .byte.b	#%01000010	;
   2649  fd83		       42		      .byte.b	#%01000010	; 
   2650  fd84		       42		      .byte.b	#%01000010	; 
   2651  fd85		       42		      .byte.b	#%01000010	; 
   2652  fd86		       e7		      .byte.b	#%11100111	;
   2653  fd87
   2654  fd87				   CV
   2655  fd87		       42		      .byte.b	#%01000010	;
   2656  fd88		       a5		      .byte.b	#%10100101	; 
   2657  fd89		       a5		      .byte.b	#%10100101	; 
   2658  fd8a		       a5		      .byte.b	#%10100101	; 
   2659  fd8b		       a5		      .byte.b	#%10100101	;	
   2660  fd8c
   2661  fd8c				   CY
   2662  fd8c		       42		      .byte.b	#%01000010	;
   2663  fd8d		       42		      .byte.b	#%01000010	; 
   2664  fd8e		       42		      .byte.b	#%01000010	; 
   2665  fd8f		       a5		      .byte.b	#%10100101	; 
   2666  fd90		       a5		      .byte.b	#%10100101	;
   2667  fd91
   2668  fd91				   CW
   2669  fd91		       a5		      .byte.b	#%10100101	;
   2670  fd92		       e7		      .byte.b	#%11100111	; 
   2671  fd93		       a5		      .byte.b	#%10100101	; 
   2672  fd94		       a5		      .byte.b	#%10100101	; 
   2673  fd95		       a5		      .byte.b	#%10100101	;
   2674  fd96
   2675  fd96				   CZ
   2676  fd96		       e7		      .byte.b	#%11100111	;
   2677  fd97		       24		      .byte.b	#%00100100	; 
   2678  fd98		       42		      .byte.b	#%01000010	; 
   2679  fd99		       81		      .byte.b	#%10000001	; 
   2680  fd9a		       e7		      .byte.b	#%11100111	;
   2681  fd9b
   2682  fd9b
   2683  fd9b				   Exclamation
   2684  fd9b		       42		      .byte.b	#%01000010	;
   2685  fd9c		       00		      .byte.b	#%00000000	; 
   2686  fd9d		       42		      .byte.b	#%01000010	; 
   2687  fd9e		       42		      .byte.b	#%01000010	; 
   2688  fd9f		       42		      .byte.b	#%01000010	;
   2689  fda0
   2690  fda0				   Dot
   2691  fda0		       42		      .byte.b	#%01000010	;
   2692  fda1		       42		      .byte.b	#%01000010	; 
   2693  fda2		       00		      .byte.b	#%00000000	; 
   2694  fda3		       00		      .byte.b	#%00000000	; 
   2695  fda4		       00		      .byte.b	#%00000000	;
   2696  fda5
   2697  fda5				   Pipe
   2698  fda5				   Colon
   2699  fda5		       42		      .byte.b	#%01000010	;
   2700  fda6		       42		      .byte.b	#%01000010	; 
   2701  fda7		       00		      .byte.b	#%00000000	; 
   2702  fda8		       42		      .byte.b	#%01000010	; 
   2703  fda9		       42		      .byte.b	#%01000010	;
   2704  fdaa
   2705  fdaa				   Triangle
   2706  fdaa		       81		      .byte.b	#%10000001	;
   2707  fdab		       c3		      .byte.b	#%11000011	; 
   2708  fdac		       e7		      .byte.b	#%11100111	; 
   2709  fdad		       c3		      .byte.b	#%11000011	; 
   2710  fdae		       81		      .byte.b	#%10000001	;
   2711  fdaf
   2712  fdaf				   Space
   2713  fdaf				   C0B
   2714  fdaf		       00		      .byte.b	#%00000000	;
   2715  fdb0		       00		      .byte.b	#%00000000	; 
   2716  fdb1		       00		      .byte.b	#%00000000	; 
   2717  fdb2		       00		      .byte.b	#%00000000	; 
   2718  fdb3		       00		      .byte.b	#%00000000	;	
   2719  fdb4				   C1B
   2720  fdb4		       24		      .byte.b	#%00100100	;
   2721  fdb5		       00		      .byte.b	#%00000000	; 
   2722  fdb6		       00		      .byte.b	#%00000000	; 
   2723  fdb7		       00		      .byte.b	#%00000000	; 
   2724  fdb8		       00		      .byte.b	#%00000000	;
   2725  fdb9				   C2B
   2726  fdb9		       66		      .byte.b	#%01100110	;
   2727  fdba		       00		      .byte.b	#%00000000	; 
   2728  fdbb		       00		      .byte.b	#%00000000	; 
   2729  fdbc		       00		      .byte.b	#%00000000	; 
   2730  fdbd		       00		      .byte.b	#%00000000	;
   2731  fdbe				   C3B
   2732  fdbe		       e7		      .byte.b	#%11100111	;
   2733  fdbf		       00		      .byte.b	#%00000000	; 
   2734  fdc0		       00		      .byte.b	#%00000000	; 
   2735  fdc1		       00		      .byte.b	#%00000000	; 
   2736  fdc2		       00		      .byte.b	#%00000000	;
   2737  fdc3				   C4B
   2738  fdc3		       e7		      .byte.b	#%11100111	;
   2739  fdc4		       24		      .byte.b	#%00100100	; 
   2740  fdc5		       00		      .byte.b	#%00000000	; 
   2741  fdc6		       00		      .byte.b	#%00000000	; 
   2742  fdc7		       00		      .byte.b	#%00000000	;
   2743  fdc8				   C5B
   2744  fdc8		       e7		      .byte.b	#%11100111	;
   2745  fdc9		       66		      .byte.b	#%01100110	; 
   2746  fdca		       00		      .byte.b	#%00000000	; 
   2747  fdcb		       00		      .byte.b	#%00000000	; 
   2748  fdcc		       00		      .byte.b	#%00000000	;
   2749  fdcd				   C6B
   2750  fdcd		       e7		      .byte.b	#%11100111	;
   2751  fdce		       e7		      .byte.b	#%11100111	; 
   2752  fdcf		       00		      .byte.b	#%00000000	; 
   2753  fdd0		       00		      .byte.b	#%00000000	; 
   2754  fdd1		       00		      .byte.b	#%00000000	;
   2755  fdd2				   C7B
   2756  fdd2		       e7		      .byte.b	#%11100111	;
   2757  fdd3		       e7		      .byte.b	#%11100111	; 
   2758  fdd4		       24		      .byte.b	#%00100100	; 
   2759  fdd5		       00		      .byte.b	#%00000000	; 
   2760  fdd6		       00		      .byte.b	#%00000000	;
   2761  fdd7				   C8B
   2762  fdd7		       e7		      .byte.b	#%11100111	;
   2763  fdd8		       e7		      .byte.b	#%11100111	; 
   2764  fdd9		       66		      .byte.b	#%01100110	; 
   2765  fdda		       00		      .byte.b	#%00000000	; 
   2766  fddb		       00		      .byte.b	#%00000000	;
   2767  fddc				   C9B
   2768  fddc		       e7		      .byte.b	#%11100111	;
   2769  fddd		       e7		      .byte.b	#%11100111	; 
   2770  fdde		       e7		      .byte.b	#%11100111	; 
   2771  fddf		       00		      .byte.b	#%00000000	; 
   2772  fde0		       00		      .byte.b	#%00000000	;
   2773  fde1				   CAB
   2774  fde1		       e7		      .byte.b	#%11100111	;
   2775  fde2		       e7		      .byte.b	#%11100111	; 
   2776  fde3		       e7		      .byte.b	#%11100111	; 
   2777  fde4		       24		      .byte.b	#%00100100	; 
   2778  fde5		       00		      .byte.b	#%00000000	;
   2779  fde6				   CBB
   2780  fde6		       e7		      .byte.b	#%11100111	;
   2781  fde7		       e7		      .byte.b	#%11100111	; 
   2782  fde8		       e7		      .byte.b	#%11100111	; 
   2783  fde9		       66		      .byte.b	#%01100110	; 
   2784  fdea		       00		      .byte.b	#%00000000	;
   2785  fdeb				   CCB
   2786  fdeb		       e7		      .byte.b	#%11100111	;
   2787  fdec		       e7		      .byte.b	#%11100111	; 
   2788  fded		       e7		      .byte.b	#%11100111	; 
   2789  fdee		       e7		      .byte.b	#%11100111	; 
   2790  fdef		       00		      .byte.b	#%00000000	;
   2791  fdf0
   2792  fdf0				   CDB
   2793  fdf0		       e7		      .byte.b	#%11100111	;
   2794  fdf1		       e7		      .byte.b	#%11100111	; 
   2795  fdf2		       e7		      .byte.b	#%11100111	; 
   2796  fdf3		       e7		      .byte.b	#%11100111	; 
   2797  fdf4		       24		      .byte.b	#%00100100	;
   2798  fdf5
   2799  fdf5				   CEB
   2800  fdf5		       e7		      .byte.b	#%11100111	;
   2801  fdf6		       e7		      .byte.b	#%11100111	; 
   2802  fdf7		       e7		      .byte.b	#%11100111	; 
   2803  fdf8		       e7		      .byte.b	#%11100111	; 
   2804  fdf9		       66		      .byte.b	#%01100110	;
   2805  fdfa
   2806  fdfa				   CFB
   2807  fdfa		       e7		      .byte.b	#%11100111	;
   2808  fdfb		       e7		      .byte.b	#%11100111	; 
   2809  fdfc		       e7		      .byte.b	#%11100111	; 
   2810  fdfd		       e7		      .byte.b	#%11100111	; 
   2811  fdfe		       e7		      .byte.b	#%11100111	;
   2812  fdff
   2813  fe00					      org	$FE00
   2814  fe00				   AesTable
   2815  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2816  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2817  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2818  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2819  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2820  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2821  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2822  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2823  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2824  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2825  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2826  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2827  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2828  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2829  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2830  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2831  ff00
   2832  ff00							; From FF00 to FFFB (122 bytes) to use here
   2833  ff00
   2834  ff00				   StaticText		; All static text must be on the same MSB block. 
   2835  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2836  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2837  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2838  ff02		       77		      .byte.b	#<CP + #FONT_OFFSET
   2839  ff03		       86		      .byte.b	#<CT + #FONT_OFFSET
   2840  ff04		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2841  ff05
   2842  ff05				   HellwayLeftText
   2843  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2844  ff06		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2845  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2846  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2847  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2848  ff0a
   2849  ff0a				   HellwayRightText
   2850  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2851  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2852  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2853  ff0d		       90		      .byte.b	#<CY + #FONT_OFFSET
   2854  ff0e		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2855  ff0f
   2856  ff0f				   OpbText
   2857  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2858  ff10		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2859  ff11		       72		      .byte.b	#<CO + #FONT_OFFSET
   2860  ff12		       77		      .byte.b	#<CP + #FONT_OFFSET
   2861  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2862  ff14
   2863  ff14				   YearText
   2864  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2865  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2866  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2867  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2868  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2869  ff19
   2870  ff19				   GameText
   2871  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2872  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2873  ff1b		       68		      .byte.b	#<CM + #FONT_OFFSET
   2874  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2875  ff1d		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2876  ff1e
   2877  ff1e				   OverText
   2878  ff1e		       72		      .byte.b	#<CO + #FONT_OFFSET
   2879  ff1f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2880  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2881  ff21		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2882  ff22		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2883  ff23				   GoText
   2884  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2885  ff24		       72		      .byte.b	#<CO + #FONT_OFFSET
   2886  ff25		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2887  ff26		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2888  ff27		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2889  ff28
   2890  ff28				   VersionText
   2891  ff28		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2892  ff29		       a4		      .byte.b	#<Dot + #FONT_OFFSET
   2893  ff2a		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2894  ff2b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2895  ff2c		       ae		      .byte.b	#<Triangle + #FONT_OFFSET
   2896  ff2d				   EndStaticText
   2897  ff2d
   2898  ff2d				   TachometerSizeLookup1
   2899  ff2d		       1f		      .byte.b	#%00011111
   2900  ff2e		       3f		      .byte.b	#%00111111
   2901  ff2f		       7f		      .byte.b	#%01111111
   2902  ff30		       ff		      .byte.b	#%11111111
   2903  ff31		       ff		      .byte.b	#%11111111
   2904  ff32		       ff		      .byte.b	#%11111111
   2905  ff33		       ff		      .byte.b	#%11111111
   2906  ff34		       ff		      .byte.b	#%11111111
   2907  ff35
   2908  ff35				   TachometerSizeLookup2
   2909  ff35		       00		      .byte.b	#%00000000
   2910  ff36		       00		      .byte.b	#%00000000
   2911  ff37		       00		      .byte.b	#%00000000
   2912  ff38		       00		      .byte.b	#%00000000
   2913  ff39		       80		      .byte.b	#%10000000
   2914  ff3a		       c0		      .byte.b	#%11000000
   2915  ff3b		       e0		      .byte.b	#%11100000
   2916  ff3c		       f0		      .byte.b	#%11110000
   2917  ff3d
   2918  ff3d				   TachometerGearLookup
   2919  ff3d		       01		      .byte.b	#%00000001
   2920  ff3e		       02		      .byte.b	#%00000010
   2921  ff3f		       04		      .byte.b	#%00000100
   2922  ff40		       08		      .byte.b	#%00001000
   2923  ff41		       10		      .byte.b	#%00010000
   2924  ff42		       30		      .byte.b	#%00110000
   2925  ff43
   2926  ff43				   EngineSoundType
   2927  ff43		       02		      .byte.b	#2
   2928  ff44		       02		      .byte.b	#2
   2929  ff45		       0e		      .byte.b	#14
   2930  ff46		       06		      .byte.b	#6
   2931  ff47		       06		      .byte.b	#6
   2932  ff48		       0e		      .byte.b	#14
   2933  ff49
   2934  ff49				   EngineBaseFrequence
   2935  ff49		       1f		      .byte.b	#31
   2936  ff4a		       15		      .byte.b	#21
   2937  ff4b		       14		      .byte.b	#20
   2938  ff4c		       1f		      .byte.b	#31
   2939  ff4d		       16		      .byte.b	#22
   2940  ff4e		       03		      .byte.b	#3
   2941  ff4f
   2942  ff4f				   CarSprite0		; Upside down, Original Car
   2943  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2944  ff57				   CarSprite0NoPadding
   2945  ff57		       7e		      .byte.b	#%01111110
   2946  ff58		       24		      .byte.b	#%00100100
   2947  ff59		       bd		      .byte.b	#%10111101
   2948  ff5a		       3c		      .byte.b	#%00111100
   2949  ff5b		       bd		      .byte.b	#%10111101
   2950  ff5c		       3c		      .byte.b	#%00111100
   2951  ff5d
   2952  ff5d				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2953  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2954  ff65				   CarSprite1NoPadding
   2955  ff65		       bd		      .byte.b	#%10111101
   2956  ff66		       7e		      .byte.b	#%01111110
   2957  ff67		       5a		      .byte.b	#%01011010
   2958  ff68		       66		      .byte.b	#%01100110
   2959  ff69		       bd		      .byte.b	#%10111101
   2960  ff6a		       3c		      .byte.b	#%00111100
   2961  ff6b
   2962  ff6b				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2963  ff6b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2964  ff73				   CarSprite2NoPadding
   2965  ff73		       7e		      .byte.b	#%01111110
   2966  ff74		       a5		      .byte.b	#%10100101
   2967  ff75		       42		      .byte.b	#%01000010
   2968  ff76		       42		      .byte.b	#%01000010
   2969  ff77		       bd		      .byte.b	#%10111101
   2970  ff78		       7e		      .byte.b	#%01111110
   2971  ff79
   2972  ff79				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2973  ff79		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2974  ff81				   CarSprite3NoPadding
   2975  ff81		       3c		      .byte.b	#%00111100
   2976  ff82		       db		      .byte.b	#%11011011
   2977  ff83		       db		      .byte.b	#%11011011
   2978  ff84		       3c		      .byte.b	#%00111100
   2979  ff85		       5a		      .byte.b	#%01011010
   2980  ff86		       3c		      .byte.b	#%00111100
   2981  ff87
   2982  ff87				   TrafficSpeeds
   2983  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2984  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2985  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2986  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2987  ff8b		       e6		      .byte.b	#$E6	;  Trafic2 L
   2988  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2989  ff8d		       c2		      .byte.b	#$C2	;  Trafic3 L
   2990  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2991  ff8f		       9e		      .byte.b	#$9E	;  Trafic4 L
   2992  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2993  ff91				   TrafficSpeedsHighDelta
   2994  ff91		       00		      .byte.b	#$00	;  Trafic0 L
   2995  ff92		       00		      .byte.b	#$00	;  Trafic0 H
   2996  ff93		       0a		      .byte.b	#$0A	;  Trafic1 L
   2997  ff94		       01		      .byte.b	#$01	;  Trafic1 H
   2998  ff95		       c8		      .byte.b	#$C8	;  Trafic2 L
   2999  ff96		       00		      .byte.b	#$00	;  Trafic2 H
   3000  ff97		       86		      .byte.b	#$86	;  Trafic3 L
   3001  ff98		       00		      .byte.b	#$00	;  Trafic3 H
   3002  ff99		       44		      .byte.b	#$44	;  Trafic4 L
   3003  ff9a		       00		      .byte.b	#$00	;  Trafic4 H
   3004  ff9b
   3005  ff9b				   CarIdToSpriteAddressL
   3006  ff9b		       4f		      .byte.b	#<CarSprite0
   3007  ff9c		       5d		      .byte.b	#<CarSprite1
   3008  ff9d		       6b		      .byte.b	#<CarSprite2
   3009  ff9e		       79		      .byte.b	#<CarSprite3
   3010  ff9f
   3011  ff9f				   CarIdToSpriteAddressH
   3012  ff9f		       ff		      .byte.b	#>CarSprite0
   3013  ffa0		       ff		      .byte.b	#>CarSprite1
   3014  ffa1		       ff		      .byte.b	#>CarSprite2
   3015  ffa2		       ff		      .byte.b	#>CarSprite3
   3016  ffa3
   3017  ffa3				   EnemyCarIdToSpriteAddressL
   3018  ffa3		       57		      .byte.b	#<CarSprite0NoPadding
   3019  ffa4		       65		      .byte.b	#<CarSprite1NoPadding
   3020  ffa5		       73		      .byte.b	#<CarSprite2NoPadding
   3021  ffa6		       81		      .byte.b	#<CarSprite3NoPadding
   3022  ffa7
   3023  ffa7				   EnemyCarIdToSpriteAddressH
   3024  ffa7		       ff		      .byte.b	#>CarSprite0NoPadding
   3025  ffa8		       ff		      .byte.b	#>CarSprite1NoPadding
   3026  ffa9		       ff		      .byte.b	#>CarSprite2NoPadding
   3027  ffaa		       ff		      .byte.b	#>CarSprite3NoPadding
   3028  ffab
   3029  ffab				   CarIdToAccelerateSpeed
   3030  ffab		       80		      .byte.b	#128
   3031  ffac		       c0		      .byte.b	#192
   3032  ffad		       60		      .byte.b	#96
   3033  ffae		       c0		      .byte.b	#192
   3034  ffaf
   3035  ffaf				   CarIdToTimeoverBreakInterval 		; Glide
   3036  ffaf		       03		      .byte.b	#%00000011	;Every 4 frames
   3037  ffb0		       03		      .byte.b	#%00000011	;Every 4 frames
   3038  ffb1		       0f		      .byte.b	#%00001111	;Every 16 frames
   3039  ffb2		       03		      .byte.b	#%00000011	;Every 4 frames
   3040  ffb3
   3041  ffb3				   CarIdToMaxSpeedL
   3042  ffb3		       80		      .byte.b	#$80
   3043  ffb4		       00		      .byte.b	#$00	; One less gear
   3044  ffb5		       80		      .byte.b	#$80
   3045  ffb6		       80		      .byte.b	#$80
   3046  ffb7
   3047  ffb7				   CarIdToMaxGear
   3048  ffb7		       05		      .byte.b	#5
   3049  ffb8		       04		      .byte.b	#4	; One less gear
   3050  ffb9		       05		      .byte.b	#5
   3051  ffba		       05		      .byte.b	#5
   3052  ffbb
   3053  ffbb				   GearToBreakSpeedTable
   3054  ffbb		       09		      .byte.b	#(BREAK_SPEED - 1)
   3055  ffbc		       09		      .byte.b	#(BREAK_SPEED - 1)
   3056  ffbd		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3057  ffbe		       0b		      .byte.b	#(BREAK_SPEED + 1)
   3058  ffbf		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3059  ffc0		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3060  ffc1
   3061  ffc1				   TrafficColorTable
   3062  ffc1		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3063  ffc2		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3064  ffc3		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3065  ffc4		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3066  ffc5
   3067  ffc5				   TrafficChanceTable
   3068  ffc5		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3069  ffc6		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3070  ffc7		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3071  ffc8		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3072  ffc9
   3073  ffc9				   TrafficTimeTable
   3074  ffc9		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3075  ffca		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3076  ffcb		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3077  ffcc		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3078  ffcd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3079  ffce
   3080  ffce
   3081  fffc					      org	$FFFC
   3082  fffc		       00 f0		      .word.w	BeforeStart
   3083  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
