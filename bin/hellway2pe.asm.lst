------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00
     56  f000
     57  f000		       00 03	   GREY_BACKGROUND_COLOR =	$03
     58  f000
     59  f000		       00 37	   SCORE_FONT_COLOR_GOOD =	$37
     60  f000		       00 d8	   OP_SCORE_FONT_COLOR_GOOD =	$D8
     61  f000
     62  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     63  f000		       00 56	   OP_SCORE_FONT_COLOR_BAD =	$56
     64  f000
     65  f000		       00 38	   SCORE_FONT_COLOR_START =	$38	;Cannot be the same as good, font colors = game state
     66  f000		       00 c8	   OP_SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000
     68  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     69  f000		       00 ab	   OP_SCORE_FONT_COLOR_OVER =	$AB
     70  f000
     71  f000		       00 f9	   PLAYER0_COLOR =	$F9
     72  f000		       00 98	   PLAYER1_COLOR =	$98
     73  f000
     74  f000		       00 20	   PLAYER_0_X_START =	32	;
     75  f000		       00 29	   PLAYER_1_X_START =	41	;
     76  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     77  f000
     78  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     79  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     80  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     81  f000
     82  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     83  f000
     84  f000		       00 00	   BLACK      =	$00	;
     85  f000
     86  f000		       00 10	   MAX_GAME_MODE =	16
     87  f000
     88  f000		       00 08	   PARALLAX_SIZE =	8
     89  f000
     90  f000		       00 05	   HALF_TEXT_SIZE =	5
     91  f000
     92  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     93  f000
     94  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     95  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     96  f000		       00 00	   QR_CODE_COLOR =	$00
     97  f000		       00 19	   QR_CODE_SIZE =	25
     98  f000
     99  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
    100  f000
    101  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    102  f000		       00 29	   VBLANK_TIMER =	41
    103  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    104  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    105  f000
    106  f000		       00 08	   ENGINE_VOLUME =	8
    107  f000
    108  f000		       00 08	   CAR_SIZE   =	8
    109  f000
    110  f000		       00 80	   GRP0Cache  =	$80
    111  f000		       00 81	   PF0Cache   =	$81
    112  f000		       00 82	   PF1Cache   =	$82
    113  f000		       00 83	   PF2Cache   =	$83
    114  f000		       00 84	   GRP1Cache  =	$84
    115  f000		       00 85	   ENABLCache =	$85
    116  f000		       00 86	   ENAM0Cache =	$86
    117  f000		       00 87	   ENAM1Cache =	$87
    118  f000
    119  f000		       00 8c	   FrameCount0 =	$8C	;
    120  f000		       00 8d	   FrameCount1 =	$8D	;
    121  f000
    122  f000		       00 8e	   CollisionCounter =	$8E
    123  f000		       00 8f	   OpCollisionCounter =	$8F
    124  f000
    125  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    126  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    127  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    128  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    129  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    130  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    131  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    132  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    133  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    134  f000
    135  f000							;Temporary variables, multiple uses
    136  f000		       00 b0	   Tmp0       =	$B0
    137  f000		       00 b1	   Tmp1       =	$B1
    138  f000		       00 b2	   Tmp2       =	$B2
    139  f000		       00 b3	   Tmp3       =	$B3
    140  f000		       00 b4	   Tmp4       =	$B4
    141  f000		       00 b5	   Tmp5       =	$B5
    142  f000
    143  f000		       00 b6	   Player0X   =	$B6
    144  f000		       00 b7	   Player1X   =	$B7
    145  f000		       00 b8	   CountdownTimer =	$B8
    146  f000		       00 b9	   OpCountdownTimer =	$B9
    147  f000		       00 ba	   Traffic0Msb =	$BA
    148  f000		       00 bb	   OpTraffic0Msb =	$BB
    149  f000		       00 bc	   SwitchDebounceCounter =	$BC
    150  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    151  f000		       00 be	   TrafficChance =	$BE
    152  f000		       00 bf	   OpTrafficChance =	$BF
    153  f000
    154  f000		       00 c0	   CheckpointTime =	$C0
    155  f000		       00 c1	   OpCheckpointTime =	$C1
    156  f000		       00 c2	   TrafficColor =	$C2
    157  f000		       00 c3	   OpTrafficColor =	$C3
    158  f000		       00 c4	   CurrentDifficulty =	$C4
    159  f000		       00 c5	   OpCurrentDifficulty =	$C5
    160  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    161  f000
    162  f000		       00 c7	   CurrentCarId =	$C7
    163  f000		       00 c8	   OpCurrentCarId =	$C8
    164  f000
    165  f000		       00 c9	   ScoreFontColor =	$C9
    166  f000		       00 ca	   OpScoreFontColor =	$CA
    167  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    168  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    169  f000		       00 cd	   NextCheckpoint =	$CD
    170  f000		       00 ce	   OpNextCheckpoint =	$CE
    171  f000		       00 cf	   OpponentLine =	$CF
    172  f000
    173  f000		       00 d0	   ScoreD0    =	$D0
    174  f000		       00 d1	   ScoreD1    =	$D1
    175  f000		       00 d2	   ScoreD2    =	$D2
    176  f000		       00 d3	   ScoreD3    =	$D3
    177  f000		       00 d4	   ScoreD4    =	$D4
    178  f000
    179  f000		       00 d5	   Gear       =	$D5
    180  f000		       00 d6	   OpGear     =	$D6
    181  f000
    182  f000		       00 d7	   CarSpritePointerL =	$D7
    183  f000		       00 d8	   CarSpritePointerH =	$D8
    184  f000
    185  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    186  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    187  f000
    188  f000		       00 db	   EnableRubberBadding =	$DB	; Used for Score, so it cannot be cheated.
    189  f000
    190  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    191  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    192  f000
    193  f000		       00 de	   Player0SpeedL =	$DE
    194  f000		       00 df	   Player1SpeedL =	$DF
    195  f000		       00 f0	   Player0SpeedH =	$F0
    196  f000		       00 f1	   Player1SpeedH =	$F1
    197  f000
    198  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    199  f000
    200  f000		       00 f3	   BackgroundColor =	$F3
    201  f000
    202  f000
    203  f000							;generic start up stuff, put zero in almost all...
    204  f000				   BeforeStart		;All variables that are kept on game reset or select
    205  f000		       a0 00		      LDY	#0
    206  f002		       84 bc		      STY	SwitchDebounceCounter
    207  f004		       84 c4		      STY	CurrentDifficulty
    208  f006		       84 c5		      STY	OpCurrentDifficulty
    209  f008		       84 bd		      STY	GameStatus
    210  f00a		       84 c7		      STY	CurrentCarId
    211  f00c		       84 c8		      STY	OpCurrentCarId
    212  f00e		       84 db		      STY	EnableRubberBadding	; Triggered to 1 on first run
    213  f010		       a0 10		      LDY	#16
    214  f012		       84 c6		      STY	GameMode
    215  f014
    216  f014				   Start
    217  f014		       a9 02		      LDA	#2
    218  f016		       85 00		      STA	VSYNC
    219  f018		       85 02		      STA	WSYNC
    220  f01a		       85 02		      STA	WSYNC
    221  f01c		       85 02		      STA	WSYNC
    222  f01e		       a9 00		      LDA	#0	;2
    223  f020		       85 00		      STA	VSYNC	;3
    224  f022
    225  f022		       78		      SEI
    226  f023		       d8		      CLD
    227  f024		       a2 ff		      LDX	#$FF
    228  f026		       9a		      TXS
    229  f027
    230  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    231  f029				   CleanMem
    232  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    233  f02b		       f0 1e		      BEQ	SkipClean
    234  f02d		       e0 c6		      CPX	#GameMode
    235  f02f		       f0 1a		      BEQ	SkipClean
    236  f031		       e0 c7		      CPX	#CurrentCarId
    237  f033		       f0 16		      BEQ	SkipClean
    238  f035		       e0 c8		      CPX	#OpCurrentCarId
    239  f037		       f0 12		      BEQ	SkipClean
    240  f039		       e0 c4		      CPX	#CurrentDifficulty
    241  f03b		       f0 0e		      BEQ	SkipClean
    242  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    243  f03f		       f0 0a		      BEQ	SkipClean
    244  f041		       e0 bd		      CPX	#GameStatus
    245  f043		       f0 06		      BEQ	SkipClean
    246  f045		       e0 db		      CPX	#EnableRubberBadding
    247  f047		       f0 02		      BEQ	SkipClean
    248  f049		       95 00		      STA	0,X
    249  f04b				   SkipClean
    250  f04b		       e8		      INX
    251  f04c		       d0 db		      BNE	CleanMem
    252  f04e
    253  f04e		       a9 be		      LDA	#190	; needs change if memory clean routine changes
    254  f050		       8d 96 02 	      STA	TIM64T	;3	
    255  f053
    256  f053							;Setting some variables...
    257  f053
    258  f053				   SaveOldDifficulty
    259  f053		       a5 c4		      LDA	CurrentDifficulty
    260  f055		       85 b5		      STA	Tmp5	; Used to define if toggles rubberband
    261  f057
    262  f057				   SettingTrafficOffsets		; Time sensitive with player H position
    263  f057		       85 02		      STA	WSYNC	;We will set player position
    264  f059		       20 6a f7 	      JSR	DefaultOffsets
    265  f05c
    266  f05c		       ad 83 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    267  f05f		       85 de		      STA	Player0SpeedL
    268  f061		       85 df		      STA	Player1SpeedL
    269  f063
    270  f063							;SLEEP 11;18
    271  f063		       a2 00		      LDX	#0
    272  f065		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    273  f068		       29 c0		      AND	#%11000000
    274  f06a		       f0 0b		      BEQ	StoreCurrentDifficulty
    275  f06c		       e8		      INX
    276  f06d		       c9 80		      CMP	#%10000000
    277  f06f		       f0 06		      BEQ	StoreCurrentDifficulty
    278  f071		       e8		      INX
    279  f072		       c9 40		      CMP	#%01000000
    280  f074		       f0 01		      BEQ	StoreCurrentDifficulty
    281  f076		       e8		      INX
    282  f077
    283  f077				   StoreCurrentDifficulty
    284  f077		       86 c4		      STX	CurrentDifficulty
    285  f079		       86 c5		      STX	OpCurrentDifficulty
    286  f07b		       a2 00		      LDX	#0
    287  f07d		       20 22 f7 	      JSR	ConfigureDifficulty
    288  f080		       e8		      INX
    289  f081		       20 22 f7 	      JSR	ConfigureDifficulty
    290  f084
    291  f084				   ToggleRubberBanding
    292  f084		       a5 bd		      LDA	GameStatus
    293  f086		       d0 0c		      BNE	SetGameNotRunning	; Do not toggle if game running
    294  f088		       a5 b5		      LDA	Tmp5	; old difficulty
    295  f08a		       c5 c4		      CMP	CurrentDifficulty
    296  f08c		       d0 06		      BNE	SetGameNotRunning	; Do not toggle if change difficulty
    297  f08e		       a5 db		      LDA	EnableRubberBadding
    298  f090		       49 01		      EOR	#%00000001
    299  f092		       85 db		      STA	EnableRubberBadding
    300  f094
    301  f094				   SetGameNotRunning
    302  f094		       a9 00		      LDA	#0
    303  f096		       85 bd		      STA	GameStatus
    304  f098
    305  f098				   ConfigureTimer
    306  f098		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    307  f09a		       85 b8		      STA	CountdownTimer	;3
    308  f09c		       85 b9		      STA	OpCountdownTimer	;3
    309  f09e
    310  f09e				   ConfigurePlayer1XPosition
    311  f09e		       a9 29		      LDA	#PLAYER_1_X_START	;2
    312  f0a0		       85 b7		      STA	Player1X	;3
    313  f0a2
    314  f0a2				   ConfigureOpNextCheckpoint
    315  f0a2		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    316  f0a4		       85 ce		      STA	OpNextCheckpoint
    317  f0a6
    318  f0a6				   HPositioning 		; Avoid sleep doing needed stuff
    319  f0a6		       85 02		      STA	WSYNC
    320  f0a8
    321  f0a8				   ConfigurePlayer0XPosition
    322  f0a8		       a9 20		      LDA	#PLAYER_0_X_START	;2
    323  f0aa		       85 b6		      STA	Player0X	;3
    324  f0ac
    325  f0ac				   ConfigureMissileSize
    326  f0ac		       a9 30		      LDA	#%00110000	;2 Missile Size
    327  f0ae		       85 04		      STA	NUSIZ0	;3
    328  f0b0		       85 05		      STA	NUSIZ1	;3
    329  f0b2
    330  f0b2				   ConfigureNextCheckpoint
    331  f0b2		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    332  f0b4		       85 cd		      STA	NextCheckpoint
    333  f0b6
    334  f0b6		       a9 00		      LDA	#0	; Avoid missile reseting position 
    335  f0b8							;SLEEP 41
      0  f0b8					      SLEEP	5	;
      1  f0b8				   .CYCLES    SET	5
      2  f0b8
      3  f0b8				  -	      IF	.CYCLES < 2
      4  f0b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b8				  -	      ERR
      6  f0b8					      ENDIF
      7  f0b8
      8  f0b8					      IF	.CYCLES & 1
      9  f0b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b8				  -	      nop	0
     11  f0b8					      ELSE
     12  f0b8		       24 00		      bit	VSYNC
     13  f0ba					      ENDIF
     14  f0ba				   .CYCLES    SET	.CYCLES - 3
     15  f0ba					      ENDIF
     16  f0ba
     17  f0ba					      REPEAT	.CYCLES / 2
     18  f0ba		       ea		      nop
     19  f0bb					      REPEND
    337  f0bb		       85 12		      STA	RESM0
      0  f0bd					      SLEEP	2	;
      1  f0bd				   .CYCLES    SET	2
      2  f0bd
      3  f0bd				  -	      IF	.CYCLES < 2
      4  f0bd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bd				  -	      ERR
      6  f0bd					      ENDIF
      7  f0bd
      8  f0bd				  -	      IF	.CYCLES & 1
      9  f0bd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bd				  -	      nop	0
     11  f0bd				  -	      ELSE
     12  f0bd				  -	      bit	VSYNC
     13  f0bd				  -	      ENDIF
     14  f0bd				  -.CYCLES    SET	.CYCLES - 3
     15  f0bd					      ENDIF
     16  f0bd
     17  f0bd					      REPEAT	.CYCLES / 2
     18  f0bd		       ea		      nop
     19  f0be					      REPEND
    339  f0be		       85 14		      STA	RESBL
      0  f0c0					      SLEEP	2
      1  f0c0				   .CYCLES    SET	2
      2  f0c0
      3  f0c0				  -	      IF	.CYCLES < 2
      4  f0c0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c0				  -	      ERR
      6  f0c0					      ENDIF
      7  f0c0
      8  f0c0				  -	      IF	.CYCLES & 1
      9  f0c0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c0				  -	      nop	0
     11  f0c0				  -	      ELSE
     12  f0c0				  -	      bit	VSYNC
     13  f0c0				  -	      ENDIF
     14  f0c0				  -.CYCLES    SET	.CYCLES - 3
     15  f0c0					      ENDIF
     16  f0c0
     17  f0c0					      REPEAT	.CYCLES / 2
     18  f0c0		       ea		      nop
     19  f0c1					      REPEND
    341  f0c1		       85 13		      STA	RESM1
      0  f0c3					      SLEEP	3
      1  f0c3				   .CYCLES    SET	3
      2  f0c3
      3  f0c3				  -	      IF	.CYCLES < 2
      4  f0c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c3				  -	      ERR
      6  f0c3					      ENDIF
      7  f0c3
      8  f0c3					      IF	.CYCLES & 1
      9  f0c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c3				  -	      nop	0
     11  f0c3					      ELSE
     12  f0c3		       24 00		      bit	VSYNC
     13  f0c5					      ENDIF
     14  f0c5				   .CYCLES    SET	.CYCLES - 3
     15  f0c5					      ENDIF
     16  f0c5
     17  f0c5				  -	      REPEAT	.CYCLES / 2
     18  f0c5				  -	      nop
     19  f0c5					      REPEND
    343  f0c5
    344  f0c5		       a9 d0		      LDA	#$D0
    345  f0c7		       85 24		      STA	HMBL
    346  f0c9		       85 22		      STA	HMM0
    347  f0cb		       85 23		      STA	HMM1
    348  f0cd		       85 02		      STA	WSYNC
    349  f0cf		       85 2a		      STA	HMOVE
    350  f0d1		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    351  f0d3		       85 2b		      STA	HMCLR
      0  f0d5					      SLEEP	31
      1  f0d5				   .CYCLES    SET	31
      2  f0d5
      3  f0d5				  -	      IF	.CYCLES < 2
      4  f0d5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0d5				  -	      ERR
      6  f0d5					      ENDIF
      7  f0d5
      8  f0d5					      IF	.CYCLES & 1
      9  f0d5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0d5				  -	      nop	0
     11  f0d5					      ELSE
     12  f0d5		       24 00		      bit	VSYNC
     13  f0d7					      ENDIF
     14  f0d7				   .CYCLES    SET	.CYCLES - 3
     15  f0d7					      ENDIF
     16  f0d7
     17  f0d7					      REPEAT	.CYCLES / 2
     18  f0d7		       ea		      nop
     17  f0d7					      REPEND
     18  f0d8		       ea		      nop
     17  f0d8					      REPEND
     18  f0d9		       ea		      nop
     17  f0d9					      REPEND
     18  f0da		       ea		      nop
     17  f0da					      REPEND
     18  f0db		       ea		      nop
     17  f0db					      REPEND
     18  f0dc		       ea		      nop
     17  f0dc					      REPEND
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     17  f0e1					      REPEND
     18  f0e2		       ea		      nop
     17  f0e2					      REPEND
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     19  f0e5					      REPEND
    353  f0e5		       85 10		      STA	RESP0
    354  f0e7		       85 11		      STA	RESP1
    355  f0e9
    356  f0e9				   WaitResetToEnd
    357  f0e9		       ad 84 02 	      LDA	INTIM
    358  f0ec		       d0 fb		      BNE	WaitResetToEnd
    359  f0ee
    360  f0ee				   MainLoop
    361  f0ee		       a9 02		      LDA	#2
    362  f0f0		       85 00		      STA	VSYNC
    363  f0f2		       85 02		      STA	WSYNC
    364  f0f4		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    365  f0f6							;Some free cycles here!
    366  f0f6				   PrepareMaxHMove
    367  f0f6		       ad 82 02 	      LDA	SWCHB
    368  f0f9		       29 08		      AND	#%00001000
    369  f0fb		       f0 05		      BEQ	GreyBackground
    370  f0fd		       a9 00		      LDA	#BACKGROUND_COLOR
    371  f0ff		       4c 04 f1 	      JMP	StoreBackground
    372  f102				   GreyBackground
    373  f102		       a9 03		      LDA	#GREY_BACKGROUND_COLOR	;
    374  f104				   StoreBackground
    375  f104		       85 09		      STA	COLUBK
    376  f106		       85 f3		      STA	BackgroundColor
      0  f108					      SLEEP	24 - 15	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f108				   .CYCLES    SET	24 - 15
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108					      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108					      ELSE
     12  f108		       24 00		      bit	VSYNC
     13  f10a					      ENDIF
     14  f10a				   .CYCLES    SET	.CYCLES - 3
     15  f10a					      ENDIF
     16  f10a
     17  f10a					      REPEAT	.CYCLES / 2
     18  f10a		       ea		      nop
     17  f10a					      REPEND
     18  f10b		       ea		      nop
     17  f10b					      REPEND
     18  f10c		       ea		      nop
     19  f10d					      REPEND
    378  f10d		       a9 80		      LDA	#$80
    379  f10f		       85 24		      STA	HMBL
    380  f111		       85 22		      STA	HMM0
    381  f113		       85 23		      STA	HMM1
    382  f115		       85 20		      STA	HMP0
    383  f117		       85 21		      STA	HMP1
    384  f119		       85 02		      STA	WSYNC
    385  f11b		       85 2a		      STA	HMOVE	; 1/10			
    386  f11d
    387  f11d				   ConfigVBlankTimer
    388  f11d		       a5 c6		      LDA	GameMode
    389  f11f		       c9 10		      CMP	#MAX_GAME_MODE
    390  f121		       f0 05		      BEQ	SetVblankTimerQrCode
    391  f123		       a9 29		      LDA	#VBLANK_TIMER
    392  f125		       4c 2a f1 	      JMP	SetVblankTimer
    393  f128				   SetVblankTimerQrCode
    394  f128		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    395  f12a
    396  f12a				   SetVblankTimer
    397  f12a		       85 02		      STA	WSYNC	;3
    398  f12c		       8d 96 02 	      STA	TIM64T	;3	
    399  f12f		       a9 00		      LDA	#0	;2
    400  f131		       85 00		      STA	VSYNC	;3	
    401  f133
    402  f133				   RandomizeGame
    403  f133		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    404  f135		       d0 2d		      BNE	EndRandomizeGame
    405  f137		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    406  f139		       29 02		      AND	#%00000010
    407  f13b		       f0 24		      BEQ	DeterministicGame
    408  f13d		       a6 96		      LDX	TrafficOffset1 + 2
    409  f13f		       bd 00 fe 	      LDA	AesTable,X
    410  f142		       45 8c		      EOR	FrameCount0
    411  f144		       85 96		      STA	TrafficOffset1 + 2
    412  f146		       85 a6		      STA	OpTrafficOffset1 + 2
    413  f148		       a6 9a		      LDX	TrafficOffset2 + 2
    414  f14a		       bd 00 fe 	      LDA	AesTable,X
    415  f14d		       45 8c		      EOR	FrameCount0
    416  f14f		       85 9a		      STA	TrafficOffset2 + 2
    417  f151		       85 aa		      STA	OpTrafficOffset2 + 2
    418  f153		       a6 9e		      LDX	TrafficOffset3 + 2
    419  f155		       bd 00 fe 	      LDA	AesTable,X
    420  f158		       45 8c		      EOR	FrameCount0
    421  f15a		       85 9e		      STA	TrafficOffset3 + 2
    422  f15c		       85 ae		      STA	OpTrafficOffset3 + 2
    423  f15e		       4c 64 f1 	      JMP	EndRandomizeGame
    424  f161
    425  f161				   DeterministicGame
    426  f161		       20 6a f7 	      JSR	DefaultOffsets
    427  f164
    428  f164				   EndRandomizeGame
    429  f164
    430  f164				   CountFrame
    431  f164		       e6 8c		      INC	FrameCount0	; 5
    432  f166		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    433  f168		       e6 8d		      INC	FrameCount1	; 5 
    434  f16a				   SkipIncFC1
    435  f16a
    436  f16a				   CallDrawQrCode
    437  f16a		       a5 c6		      LDA	GameMode
    438  f16c		       c9 10		      CMP	#MAX_GAME_MODE
    439  f16e		       d0 03		      BNE	TestIsGameRunning
    440  f170		       4c 28 fb 	      JMP	DrawQrCode
    441  f173
    442  f173							;Does not update the game if not running
    443  f173				   TestIsGameRunning
    444  f173		       a5 bd		      LDA	GameStatus	;3
    445  f175		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    446  f177				   SelectCarWithDpadCall		; Only do it when game is stoped
    447  f177		       a2 00		      LDX	#0	; Player 0
    448  f179		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    449  f17b		       85 b0		      STA	Tmp0
    450  f17d		       20 3c f8 	      JSR	SelectCarWithDpad
    451  f180		       e8		      INX		; Player 1
    452  f181		       20 3c f8 	      JSR	SelectCarWithDpad
    453  f184
    454  f184							; Needs to draw the opponent in the correct line even when game stoped  
    455  f184							; Draeing is a destructive operation
    456  f184		       20 4e f8 	      JSR	ProcessOpponentLineAndPlayerSprite
    457  f187
    458  f187				   SkipUpdateLogicJump
    459  f187		       4c bf f1 	      JMP	SkipUpdateLogic
    460  f18a				   ContinueWithGameLogic
    461  f18a
    462  f18a				   CallEverySecond		; Timer for now
    463  f18a		       a2 00		      LDX	#0
    464  f18c		       20 da fa 	      JSR	EverySecond
    465  f18f		       e8		      INX
    466  f190		       20 da fa 	      JSR	EverySecond
    467  f193
    468  f193				   CallProcessSpeed
    469  f193		       a2 00		      LDX	#0
    470  f195		       20 ee f9 	      JSR	ProcessSpeed
    471  f198
    472  f198		       e8		      INX		; Player 1
    473  f199		       20 ee f9 	      JSR	ProcessSpeed
    474  f19c
    475  f19c				   CallUpdateOffsets
    476  f19c		       a2 00		      LDX	#0	; Player 0
    477  f19e		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    478  f1a0		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    479  f1a2		       a5 de		      LDA	Player0SpeedL
    480  f1a4		       85 b4		      STA	Tmp4
    481  f1a6		       a5 f0		      LDA	Player0SpeedH
    482  f1a8		       85 b5		      STA	Tmp5
    483  f1aa		       20 9b f9 	      JSR	UpdateOffsets
    484  f1ad
    485  f1ad							;LDX Exits the call with correct value.
    486  f1ad		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    487  f1af		       85 b3		      STA	Tmp3
    488  f1b1		       a5 df		      LDA	Player1SpeedL
    489  f1b3		       85 b4		      STA	Tmp4
    490  f1b5		       a5 f1		      LDA	Player1SpeedH
    491  f1b7		       85 b5		      STA	Tmp5
    492  f1b9		       20 9b f9 	      JSR	UpdateOffsets
    493  f1bc
    494  f1bc				   CallProcessOpponentLine
    495  f1bc		       20 4e f8 	      JSR	ProcessOpponentLineAndPlayerSprite
    496  f1bf
    497  f1bf				   SkipUpdateLogic		; Continue here if not paused
    498  f1bf
    499  f1bf				   CallCalculateGear
    500  f1bf		       a2 00		      LDX	#0
    501  f1c1		       20 e7 fa 	      JSR	CalculateGear
    502  f1c4		       e8		      INX
    503  f1c5		       20 e7 fa 	      JSR	CalculateGear
    504  f1c8
    505  f1c8				   CallProcessFontColor
    506  f1c8		       a5 8c		      LDA	FrameCount0
    507  f1ca		       29 01		      AND	#%00000001
    508  f1cc		       d0 0e		      BNE	ContinueProcessFontColorPlayer0	; Not my frame, always process!
    509  f1ce		       a5 db		      LDA	EnableRubberBadding	; Rubber Band Switch
    510  f1d0		       f0 0a		      BEQ	ContinueProcessFontColorPlayer0
    511  f1d2		       a5 f2		      LDA	IsOpponentInFront
    512  f1d4		       f0 06		      BEQ	ContinueProcessFontColorPlayer0	; Oponent not in front
    513  f1d6		       a5 c9		      LDA	ScoreFontColor
    514  f1d8		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    515  f1da		       f0 19		      BEQ	ContinueProcessFontColorPlayer1	; Opponent is in front! Skip counting checkpoint for the frame (double time)
    516  f1dc				   ContinueProcessFontColorPlayer0
    517  f1dc		       a2 00		      LDX	#0
    518  f1de		       20 f4 fa 	      JSR	ProcessScoreFontColor
    519  f1e1				   ContinueProcessIsToUpdateColorPlayer1
    520  f1e1		       a5 8c		      LDA	FrameCount0
    521  f1e3		       29 01		      AND	#%00000001
    522  f1e5		       f0 0e		      BEQ	ContinueProcessFontColorPlayer1	; Not my frame, always process!
    523  f1e7		       a5 db		      LDA	EnableRubberBadding	; Rubber Band Switch
    524  f1e9		       f0 0a		      BEQ	ContinueProcessFontColorPlayer1
    525  f1eb		       a5 f2		      LDA	IsOpponentInFront
    526  f1ed		       f0 06		      BEQ	ContinueProcessFontColorPlayer1	; Oponent not in front
    527  f1ef		       a5 ca		      LDA	OpScoreFontColor
    528  f1f1		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    529  f1f3		       f0 05		      BEQ	SkipProcessFontColor	; Opponent is in front and is checkpoint Skip counting checkpoint for the frame (double time)
    530  f1f5				   ContinueProcessFontColorPlayer1
    531  f1f5		       a2 01		      LDX	#1
    532  f1f7		       20 f4 fa 	      JSR	ProcessScoreFontColor
    533  f1fa				   SkipProcessFontColor
    534  f1fa
    535  f1fa				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    536  f1fa		       a5 8c		      LDA	FrameCount0
    537  f1fc		       29 01		      AND	#%00000001
    538  f1fe		       d0 0c		      BNE	CallProcessPlayer1Status
    539  f200				   CallProcessPlayer0Status
    540  f200		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    541  f202		       85 b0		      STA	Tmp0
    542  f204		       a2 00		      LDX	#0
    543  f206		       20 91 fa 	      JSR	ProcessPlayerStatus
    544  f209		       4c 15 f2 	      JMP	EndCallProcessPlayerStatus
    545  f20c				   CallProcessPlayer1Status
    546  f20c		       a5 a2		      LDA	OpTrafficOffset0 + 2
    547  f20e		       85 b0		      STA	Tmp0
    548  f210		       a2 01		      LDX	#1
    549  f212		       20 91 fa 	      JSR	ProcessPlayerStatus
    550  f215				   EndCallProcessPlayerStatus
    551  f215
    552  f215				   CallProcessSound		; We might save cycles by updating one channel per frame.
    553  f215		       a2 00		      LDX	#0
    554  f217		       a5 92		      LDA	TrafficOffset0 + 2
    555  f219		       85 b1		      STA	Tmp1
    556  f21b		       20 33 f6 	      JSR	ProcessSound
    557  f21e		       e8		      INX		; Player 1
    558  f21f		       a5 a2		      LDA	OpTrafficOffset0 + 2
    559  f221		       85 b1		      STA	Tmp1
    560  f223		       20 33 f6 	      JSR	ProcessSound
    561  f226
    562  f226				   ChooseTextSide		; 
    563  f226		       a5 8c		      LDA	FrameCount0	;3
    564  f228		       29 01		      AND	#%00000001
    565  f22a		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    566  f22c		       4c d9 f2 	      JMP	RightScoreWrite
    567  f22f
    568  f22f				   LeftScoreWrite
    569  f22f		       a5 bd		      LDA	GameStatus
    570  f231		       f0 11		      BEQ	PrintHellwayLeft
    571  f233		       a5 c9		      LDA	ScoreFontColor
    572  f235		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    573  f237		       f0 42		      BEQ	PrintPlayer0Checkpoint
    574  f239		       c9 38		      CMP	#SCORE_FONT_COLOR_START
    575  f23b		       f0 46		      BEQ	PrintPlayer0StartGame
    576  f23d		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    577  f23f		       f0 29		      BEQ	ProcessPlayer0OverText
    578  f241				   ContinueP0Score
    579  f241		       4c 92 f2 	      JMP	Digit0Timer
    580  f244
    581  f244				   PrintHellwayLeft
    582  f244		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    583  f246		       30 08		      BMI	ContinueWithDefaultLeftText
    584  f248				   Player0IsReady
    585  f248		       a2 25		      LDX	#<ReadyText
    586  f24a		       20 7f f7 	      JSR	PrintStaticText
    587  f24d		       4c 8b f3 	      JMP	RightScoreWriteEnd	;3
    588  f250				   ContinueWithDefaultLeftText
    589  f250		       a5 8d		      LDA	FrameCount1
    590  f252		       29 01		      AND	#1
    591  f254		       d0 05		      BNE	PrintCreditsLeft
    592  f256		       a2 03		      LDX	#<HellwayLeftText - 1	; Padding
    593  f258		       4c 5d f2 	      JMP	PrintGameMode
    594  f25b				   PrintCreditsLeft
    595  f25b		       a2 0c		      LDX	#<OpbText - 1	; Padding
    596  f25d
    597  f25d				   PrintGameMode
    598  f25d		       20 7f f7 	      JSR	PrintStaticText
    599  f260		       a6 c6		      LDX	GameMode
    600  f262		       bd 6c fc 	      LDA	FontLookup,X	;4 
    601  f265		       85 d0		      STA	ScoreD0	;3
    602  f267		       4c 8b f3 	      JMP	RightScoreWriteEnd	;3
    603  f26a
    604  f26a				   ProcessPlayer0OverText
    605  f26a		       a5 f2		      LDA	IsOpponentInFront
    606  f26c		       30 05		      BMI	PrintPlayer0Lose
    607  f26e				   PrintPlayer0Win
    608  f26e		       a2 1a		      LDX	#<WinText
    609  f270		       4c 75 f2 	      JMP	PrintPlayer0Status
    610  f273				   PrintPlayer0Lose
    611  f273		       a2 1d		      LDX	#<LoseText
    612  f275				   PrintPlayer0Status
    613  f275		       20 7f f7 	      JSR	PrintStaticText
    614  f278		       4c b2 f2 	      JMP	DistanceCheckpointCount	;3
    615  f27b
    616  f27b				   PrintPlayer0Checkpoint
    617  f27b		       a2 00		      LDX	#<CheckpointText
    618  f27d		       20 7f f7 	      JSR	PrintStaticText
    619  f280		       4c 88 f2 	      JMP	PrintPlayer0ScoreHoldChange	;3
    620  f283
    621  f283				   PrintPlayer0StartGame
    622  f283		       a2 16		      LDX	#<GoText
    623  f285		       20 7f f7 	      JSR	PrintStaticText
    624  f288
    625  f288				   PrintPlayer0ScoreHoldChange
    626  f288		       a2 00		      LDX	#0
    627  f28a		       20 04 fb 	      JSR	PrintScoreHoldChange
    628  f28d		       85 d4		      STA	ScoreD4
    629  f28f		       4c 8b f3 	      JMP	RightScoreWriteEnd	;3
    630  f292
    631  f292				   Digit0Timer
    632  f292		       a5 b8		      LDA	CountdownTimer	;3
    633  f294		       85 b0		      STA	Tmp0
    634  f296		       20 28 f8 	      JSR	BINBCD8
    635  f299							; LDA Tmp1 Also returned in A
    636  f299		       29 0f		      AND	#%00001111	;2
    637  f29b		       aa		      TAX		; 2
    638  f29c		       bd 6c fc 	      LDA	FontLookup,X	;4 
    639  f29f		       85 d1		      STA	ScoreD1	;3
    640  f2a1
    641  f2a1				   Digit1Timer
    642  f2a1		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    643  f2a3		       4a		      LSR		; 2
    644  f2a4		       4a		      LSR		; 2
    645  f2a5		       4a		      LSR		; 2
    646  f2a6		       4a		      LSR		; 2
    647  f2a7		       aa		      TAX		; 2
    648  f2a8		       bd 6c fc 	      LDA	FontLookup,X	;4
    649  f2ab		       85 d0		      STA	ScoreD0	;3
    650  f2ad
    651  f2ad				   SpeedBar
    652  f2ad		       a2 00		      LDX	#0
    653  f2af		       20 0f fb 	      JSR	PrintSpeedBar
    654  f2b2
    655  f2b2				   DistanceCheckpointCount		; Will run all letters in the future
    656  f2b2		       a5 ba		      LDA	Traffic0Msb
    657  f2b4		       29 01		      AND	#%00000001
    658  f2b6		       0a		      ASL
    659  f2b7		       0a		      ASL
    660  f2b8		       0a		      ASL
    661  f2b9		       0a		      ASL
    662  f2ba		       85 b0		      STA	Tmp0
    663  f2bc		       a5 92		      LDA	TrafficOffset0 + 2	;3
    664  f2be		       29 f0		      AND	#%11110000	;2
    665  f2c0		       4a		      LSR
    666  f2c1		       4a		      LSR
    667  f2c2		       4a		      LSR
    668  f2c3		       4a		      LSR
    669  f2c4		       05 b0		      ORA	Tmp0
    670  f2c6		       aa		      TAX		; 2
    671  f2c7		       bd 6c fc 	      LDA	FontLookup,X	;4 
    672  f2ca		       85 d3		      STA	ScoreD3	;3
    673  f2cc
    674  f2cc				   DistanceBar		; 16 subdivisions per checkpoint
    675  f2cc		       a5 92		      LDA	TrafficOffset0 + 2	;3
    676  f2ce		       29 0f		      AND	#%00001111	;2
    677  f2d0		       aa		      TAX		; 2
    678  f2d1		       bd 8c fc 	      LDA	BarLookup,X	;4 
    679  f2d4		       85 d4		      STA	ScoreD4	;3
    680  f2d6
    681  f2d6				   EndDrawDistance
    682  f2d6		       4c 8b f3 	      JMP	RightScoreWriteEnd	;3
    683  f2d9
    684  f2d9				   RightScoreWrite
    685  f2d9		       a5 bd		      LDA	GameStatus
    686  f2db		       f0 11		      BEQ	PrintHellwayRight
    687  f2dd		       a5 ca		      LDA	OpScoreFontColor
    688  f2df		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    689  f2e1		       f0 4d		      BEQ	PrintPlayer1Checkpoint
    690  f2e3		       c9 c8		      CMP	#OP_SCORE_FONT_COLOR_START
    691  f2e5		       f0 51		      BEQ	PrintPlayer1StartGame
    692  f2e7		       c9 ab		      CMP	#OP_SCORE_FONT_COLOR_OVER
    693  f2e9		       f0 34		      BEQ	ProcessPlayer1OverText
    694  f2eb				   ContinueP1Score
    695  f2eb		       4c 47 f3 	      JMP	OpDigit0Timer
    696  f2ee
    697  f2ee				   PrintHellwayRight
    698  f2ee		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    699  f2f0		       30 08		      BMI	ContinueWithDefaultRightText
    700  f2f2				   Player1IsReady
    701  f2f2		       a2 25		      LDX	#<ReadyText
    702  f2f4		       20 7f f7 	      JSR	PrintStaticText
    703  f2f7		       4c 8b f3 	      JMP	RightScoreWriteEnd	;3
    704  f2fa				   ContinueWithDefaultRightText
    705  f2fa		       a5 8d		      LDA	FrameCount1
    706  f2fc		       29 01		      AND	#1
    707  f2fe		       d0 05		      BNE	PrintCreditsRight
    708  f300		       a2 08		      LDX	#<HellwayRightText
    709  f302		       4c 11 f3 	      JMP	PrintRightIntro
    710  f305				   PrintCreditsRight
    711  f305		       a5 8d		      LDA	FrameCount1
    712  f307		       29 02		      AND	#%00000010
    713  f309		       f0 04		      BEQ	PrintYearText
    714  f30b				   PrintBuildNumberText
    715  f30b		       a2 20		      LDX	#<BuildNumberText
    716  f30d		       d0 02		      BNE	PrintRightIntro	; Save one byte, it will neve be equal in not first text constant...
    717  f30f				   PrintYearText
    718  f30f		       a2 11		      LDX	#<YearText
    719  f311				   PrintRightIntro
    720  f311		       20 7f f7 	      JSR	PrintStaticText
    721  f314				   PipeOnRuberBandOff
    722  f314		       a5 db		      LDA	EnableRubberBadding
    723  f316		       d0 04		      BNE	EndPrintHellwayRight
    724  f318		       a9 ae		      LDA	#<Pipe + FONT_OFFSET
    725  f31a		       85 d0		      STA	ScoreD0
    726  f31c				   EndPrintHellwayRight
    727  f31c		       4c 8b f3 	      JMP	RightScoreWriteEnd
    728  f31f
    729  f31f				   ProcessPlayer1OverText
    730  f31f		       a5 f2		      LDA	IsOpponentInFront
    731  f321		       30 05		      BMI	PrintPlayer1Lose
    732  f323				   PrintPlayer1Win
    733  f323		       a2 18		      LDX	#<WinText - 2
    734  f325		       4c 2a f3 	      JMP	PrintPlayer1Status
    735  f328				   PrintPlayer1Lose
    736  f328		       a2 1b		      LDX	#<LoseText - 2
    737  f32a				   PrintPlayer1Status
    738  f32a		       20 7f f7 	      JSR	PrintStaticText
    739  f32d		       4c 67 f3 	      JMP	OpDistanceCheckpointCount
    740  f330
    741  f330				   PrintPlayer1Checkpoint
    742  f330		       a2 ff		      LDX	#<CheckpointText - 1
    743  f332		       20 7f f7 	      JSR	PrintStaticText
    744  f335		       4c 3d f3 	      JMP	PrintPlayer1ScoreHoldChange	;3
    745  f338
    746  f338				   PrintPlayer1StartGame
    747  f338		       a2 15		      LDX	#<GoText - 1
    748  f33a		       20 7f f7 	      JSR	PrintStaticText
    749  f33d
    750  f33d				   PrintPlayer1ScoreHoldChange
    751  f33d		       a2 01		      LDX	#1
    752  f33f		       20 04 fb 	      JSR	PrintScoreHoldChange
    753  f342		       85 d0		      STA	ScoreD0
    754  f344		       4c 8b f3 	      JMP	RightScoreWriteEnd	;3
    755  f347
    756  f347				   OpDigit0Timer
    757  f347		       a5 b9		      LDA	OpCountdownTimer	;3
    758  f349		       85 b0		      STA	Tmp0
    759  f34b		       20 28 f8 	      JSR	BINBCD8
    760  f34e							; LDA Tmp1 Also returned in A
    761  f34e		       29 0f		      AND	#%00001111	;2
    762  f350		       aa		      TAX		; 2
    763  f351		       bd 6c fc 	      LDA	FontLookup,X	;4 
    764  f354		       85 d4		      STA	ScoreD4	;3
    765  f356
    766  f356				   OpDigit1Timer
    767  f356		       a5 b1		      LDA	Tmp1	;3
    768  f358		       4a		      LSR		; 2
    769  f359		       4a		      LSR		; 2
    770  f35a		       4a		      LSR		; 2
    771  f35b		       4a		      LSR		; 2
    772  f35c		       aa		      TAX		; 2
    773  f35d		       bd 6c fc 	      LDA	FontLookup,X	;4
    774  f360		       85 d3		      STA	ScoreD3	;3
    775  f362
    776  f362				   OpSpeedBar
    777  f362		       a2 01		      LDX	#1
    778  f364		       20 0f fb 	      JSR	PrintSpeedBar
    779  f367
    780  f367				   OpDistanceCheckpointCount
    781  f367		       a5 bb		      LDA	OpTraffic0Msb
    782  f369		       29 01		      AND	#%00000001
    783  f36b		       0a		      ASL
    784  f36c		       0a		      ASL
    785  f36d		       0a		      ASL
    786  f36e		       0a		      ASL
    787  f36f		       85 b0		      STA	Tmp0
    788  f371		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    789  f373		       29 f0		      AND	#%11110000	;2
    790  f375		       4a		      LSR
    791  f376		       4a		      LSR
    792  f377		       4a		      LSR
    793  f378		       4a		      LSR
    794  f379		       05 b0		      ORA	Tmp0
    795  f37b		       aa		      TAX		; 2
    796  f37c		       bd 6c fc 	      LDA	FontLookup,X	;4 
    797  f37f		       85 d1		      STA	ScoreD1	;3
    798  f381
    799  f381				   OpDistanceBar		; 16 subdivisions per checkpoint
    800  f381		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    801  f383		       29 0f		      AND	#%00001111	;2
    802  f385		       aa		      TAX		; 2
    803  f386		       bd 8c fc 	      LDA	BarLookup,X	;4 
    804  f389		       85 d0		      STA	ScoreD0	;3
    805  f38b
    806  f38b				   ScoreWriteEnd
    807  f38b				   RightScoreWriteEnd
    808  f38b
    809  f38b				   ConfigurePFForScore
    810  f38b		       20 d1 f6 	      JSR	ClearAll
    811  f38e		       a9 02		      LDA	#%00000010	; Score mode
    812  f390		       85 0a		      STA	CTRLPF
    813  f392		       a5 8c		      LDA	FrameCount0	;3
    814  f394		       29 01		      AND	#%00000001
    815  f396		       f0 0b		      BEQ	LeftScoreOn	; Half of the screen with the correct colors.
    816  f398				   RightScoreOn
    817  f398		       a5 ca		      LDA	OpScoreFontColor
    818  f39a		       85 07		      STA	COLUP1
    819  f39c		       a5 f3		      LDA	BackgroundColor
    820  f39e		       85 06		      STA	COLUP0
    821  f3a0		       4c ab f3 	      JMP	CallWaitForVblankEnd
    822  f3a3				   LeftScoreOn
    823  f3a3		       a5 c9		      LDA	ScoreFontColor
    824  f3a5		       85 06		      STA	COLUP0
    825  f3a7		       a5 f3		      LDA	BackgroundColor
    826  f3a9		       85 07		      STA	COLUP1
    827  f3ab
    828  f3ab							; After here we are going to update the screen, No more heavy code
    829  f3ab				   CallWaitForVblankEnd
    830  f3ab							;SLEEP 222 ;Force the game to its limits and check if no line count issue.
    831  f3ab		       20 f9 f7 	      JSR	WaitForVblankEnd
    832  f3ae
    833  f3ae				   DrawScoreHud
    834  f3ae		       20 9d f7 	      JSR	PrintScore
    835  f3b1
    836  f3b1							; 4 lines to go crazy
    837  f3b1		       85 02		      STA	WSYNC
    838  f3b3							;STA HMOVE
    839  f3b3
    840  f3b3		       85 02		      STA	WSYNC
    841  f3b5		       85 2a		      STA	HMOVE
    842  f3b7
    843  f3b7				   PrepareForTraffic
    844  f3b7		       20 e7 f6 	      JSR	ClearPF	; 32
    845  f3ba
    846  f3ba		       85 02		      STA	WSYNC
    847  f3bc		       85 2a		      STA	HMOVE
    848  f3be		       85 02		      STA	WSYNC
    849  f3c0		       85 2a		      STA	HMOVE
    850  f3c2
    851  f3c2		       a9 30		      LDA	#%00110000	; 2 Score mode
    852  f3c4		       85 0a		      STA	CTRLPF	;3
    853  f3c6
    854  f3c6		       a5 8c		      LDA	FrameCount0	;3
    855  f3c8		       29 01		      AND	#%00000001	;2
    856  f3ca		       aa		      TAX		;2
    857  f3cb		       b5 c2		      LDA	TrafficColor,X	;4
    858  f3cd		       85 08		      STA	COLUPF	;3
    859  f3cf
    860  f3cf		       a9 98		      LDA	#PLAYER1_COLOR	;2
    861  f3d1		       85 07		      STA	COLUP1	;3
    862  f3d3
    863  f3d3		       a5 c9		      LDA	ScoreFontColor	;3
    864  f3d5		       85 06		      STA	COLUP0	;3
    865  f3d7
    866  f3d7		       a5 ca		      LDA	OpScoreFontColor	;3
    867  f3d9		       85 07		      STA	COLUP1	;3
    868  f3db
    869  f3db		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    870  f3dd
    871  f3dd		       a5 8c		      LDA	FrameCount0	;Brach flag
    872  f3df		       29 01		      AND	#%00000001
    873  f3e1
    874  f3e1		       d0 03		      BNE	OpScanLoop	;2
    875  f3e3		       4c a0 f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    876  f3e6							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    877  f3e6
    878  f3e6							;main scanline loop...
    879  f3e6				   OpScanLoop
    880  f3e6		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    881  f3e8
    882  f3e8		       a5 80		      LDA	GRP0Cache	;3
    883  f3ea		       85 1b		      STA	GRP0	;3
    884  f3ec
    885  f3ec		       a5 84		      LDA	GRP1Cache	;3
    886  f3ee		       85 1c		      STA	GRP1	;3
    887  f3f0
    888  f3f0		       a5 85		      LDA	ENABLCache	;3
    889  f3f2		       85 1f		      STA	ENABL	;3
    890  f3f4
    891  f3f4		       a5 86		      LDA	ENAM0Cache	;3
    892  f3f6		       85 1d		      STA	ENAM0	;3
    893  f3f8
    894  f3f8		       a5 87		      LDA	ENAM1Cache	;3
    895  f3fa		       85 1e		      STA	ENAM1	;3
    896  f3fc
    897  f3fc		       a5 81		      LDA	PF0Cache	;3
    898  f3fe		       85 0d		      STA	PF0	;3
    899  f400
    900  f400		       a9 00		      LDA	#0	;2
    901  f402							;STA PF0	     ;3
    902  f402		       85 80		      STA	GRP0Cache	;3
    903  f404		       85 86		      STA	ENAM0Cache	;3
    904  f406		       85 85		      STA	ENABLCache	;3
    905  f408		       85 87		      STA	ENAM1Cache	; 3
    906  f40a							;STA GRP1Cache ;3
    907  f40a		       85 0d		      STA	PF0	;3
    908  f40c							;STA PF2	     ;3
    909  f40c
    910  f40c		       a5 83		      LDA	PF2Cache	;3
    911  f40e		       85 0f		      STA	PF2	;3
    912  f410
    913  f410				   OpDrawCar0
    914  f410		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    915  f412		       b0 04		      BCS	OpSkipDrawCar	;2
    916  f414		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    917  f416		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    918  f418				   OpSkipDrawCar
    919  f418
    920  f418							;BEQ DrawTraffic3
    921  f418				   OpDrawTraffic1		; 33
    922  f418		       98		      TYA		; 2
    923  f419		       18		      CLC		; 2 
    924  f41a		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    925  f41c		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    926  f41e		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    927  f420		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    928  f422		       4c 27 f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
    929  f425				   OpEorOffsetWithCarry
    930  f425		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    931  f427				   OpAfterEorOffsetWithCarry		;17
    932  f427		       aa		      TAX		;2
    933  f428		       bd 00 fe 	      LDA	AesTable,X	; 4
    934  f42b		       c5 bf		      CMP	OpTrafficChance	;3
    935  f42d		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    936  f42f		       a9 ff		      LDA	#$FF	;2
    937  f431		       85 86		      STA	ENAM0Cache	;3
    938  f433				   OpFinishDrawTraffic1
    939  f433
    940  f433				   OpErasePF2
    941  f433		       a9 00		      LDA	#0
    942  f435		       85 0f		      STA	PF2
    943  f437
    944  f437				   OpDrawTraffic2		; 33
    945  f437		       98		      TYA		; 2
    946  f438		       18		      CLC		; 2 
    947  f439		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    948  f43b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    949  f43d		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    950  f43f		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    951  f441		       4c 46 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    952  f444				   OpEorOffsetWithCarry2
    953  f444		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    954  f446				   OpAfterEorOffsetWithCarry2		;17
    955  f446		       aa		      TAX		;2
    956  f447		       bd 00 fe 	      LDA	AesTable,X	; 4
    957  f44a		       c5 bf		      CMP	OpTrafficChance	;3
    958  f44c		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    959  f44e		       a9 02		      LDA	#%00000010	;2
    960  f450		       85 85		      STA	ENABLCache	;3
    961  f452				   OpFinishDrawTraffic2
    962  f452
    963  f452							;STA WSYNC ;65 / 137
    964  f452
    965  f452							; LDA Tmp0 ; Flicker this line if drawing car
    966  f452							; BEQ FinishDrawTraffic4
    967  f452				   OpDrawTraffic3		; 33
    968  f452		       98		      TYA		; 2
    969  f453		       18		      CLC		; 2 
    970  f454		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    971  f456		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    972  f458		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    973  f45a		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    974  f45c		       4c 61 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    975  f45f				   OpEorOffsetWithCarry3
    976  f45f		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    977  f461				   OpAfterEorOffsetWithCarry3		;17
    978  f461		       aa		      TAX		;2
    979  f462		       bd 00 fe 	      LDA	AesTable,X	; 4
    980  f465		       c5 bf		      CMP	OpTrafficChance	;3
    981  f467		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    982  f469		       a9 02		      LDA	#%00000010	;2
    983  f46b		       85 87		      STA	ENAM1Cache
    984  f46d				   OpFinishDrawTraffic3
    985  f46d
    986  f46d				   OpDrawOpponent		;26
    987  f46d		       84 b0		      STY	Tmp0	;3
    988  f46f		       a4 cf		      LDY	OpponentLine	;3
    989  f471		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    990  f473		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    991  f475				   OpDrawOpponentVisible
    992  f475		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    993  f477		       85 80		      STA	GRP0Cache	;3
    994  f479		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    995  f47b		       a4 b0		      LDY	Tmp0	;3
    996  f47d		       4c 91 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    997  f480				   OpSkipDrawOpponent
    998  f480		       c6 cf		      DEC	OpponentLine	;5
    999  f482		       a4 b0		      LDY	Tmp0	;3
   1000  f484
   1001  f484
   1002  f484				   OpDrawTraffic0		; 21 2pe
   1003  f484		       98		      TYA		; 2
   1004  f485		       18		      CLC		; 2 
   1005  f486		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1006  f488		       29 08		      AND	#%00001000	;2
   1007  f48a		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1008  f48c				   OpHasBorderP0
   1009  f48c		       a9 e0		      LDA	#%11100000	; 2
   1010  f48e		       4c 93 f4 	      JMP	OpStoreBorderP0	; 3
   1011  f491				   OpHasNoBorderP0
   1012  f491		       a9 00		      LDA	#0	; 2
   1013  f493				   OpStoreBorderP0
   1014  f493		       85 81		      STA	PF0Cache	; 3
   1015  f495		       85 83		      STA	PF2Cache	; 3
   1016  f497
   1017  f497				   OpSkipDrawTraffic0
   1018  f497
   1019  f497				   OpWhileScanLoop
   1020  f497		       88		      DEY		;2
   1021  f498		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1022  f49a		       4c e6 f3 	      JMP	OpScanLoop	;3
   1023  f49d				   OpFinishScanLoop		; 7 209 of 222
   1024  f49d		       4c 55 f5 	      JMP	FinishScanLoop
   1025  f4a0
   1026  f4a0							;main scanline loop...
   1027  f4a0				   ScanLoop
   1028  f4a0		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
   1029  f4a2
   1030  f4a2		       a5 81		      LDA	PF0Cache	;3
   1031  f4a4		       85 0d		      STA	PF0	;3
   1032  f4a6
   1033  f4a6		       a5 80		      LDA	GRP0Cache	;3
   1034  f4a8		       85 1b		      STA	GRP0	;3
   1035  f4aa
   1036  f4aa		       a5 84		      LDA	GRP1Cache	;3
   1037  f4ac		       85 1c		      STA	GRP1	;3
   1038  f4ae
   1039  f4ae		       a5 86		      LDA	ENAM0Cache	;3
   1040  f4b0		       85 1d		      STA	ENAM0	;3
   1041  f4b2
   1042  f4b2		       a5 85		      LDA	ENABLCache	;3
   1043  f4b4		       85 1f		      STA	ENABL	;3
   1044  f4b6
   1045  f4b6		       a5 87		      LDA	ENAM1Cache	;3
   1046  f4b8		       85 1e		      STA	ENAM1	;3
   1047  f4ba
   1048  f4ba		       a5 83		      LDA	PF2Cache	;3
   1049  f4bc		       85 0f		      STA	PF2	;3
   1050  f4be
   1051  f4be		       a9 00		      LDA	#0	;2
   1052  f4c0		       85 0d		      STA	PF0	;3
   1053  f4c2		       85 84		      STA	GRP1Cache	;3
   1054  f4c4		       85 85		      STA	ENABLCache	;3
   1055  f4c6		       85 86		      STA	ENAM0Cache	;3
   1056  f4c8		       85 87		      STA	ENAM1Cache	; 3
   1057  f4ca							;STA GRP0Cache
   1058  f4ca		       85 0f		      STA	PF2	;3
   1059  f4cc
   1060  f4cc				   DrawCar0
   1061  f4cc		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1062  f4ce		       b0 04		      BCS	SkipDrawCar	;2
   1063  f4d0		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1064  f4d2		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1065  f4d4				   SkipDrawCar
   1066  f4d4
   1067  f4d4							;BEQ DrawTraffic3
   1068  f4d4				   DrawTraffic1 		; 33
   1069  f4d4		       98		      TYA		; 2
   1070  f4d5		       18		      CLC		; 2 
   1071  f4d6		       65 95		      ADC	TrafficOffset1 + 1	;3
   1072  f4d8		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1073  f4da		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1074  f4dc		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1075  f4de		       4c e3 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1076  f4e1				   EorOffsetWithCarry
   1077  f4e1		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1078  f4e3				   AfterEorOffsetWithCarry		;17
   1079  f4e3		       aa		      TAX		;2
   1080  f4e4		       bd 00 fe 	      LDA	AesTable,X	; 4
   1081  f4e7		       c5 be		      CMP	TrafficChance	;3
   1082  f4e9		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1083  f4eb		       a9 ff		      LDA	#$FF	;2
   1084  f4ed		       85 86		      STA	ENAM0Cache	;3
   1085  f4ef				   FinishDrawTraffic1
   1086  f4ef
   1087  f4ef				   DrawTraffic2 		; 33
   1088  f4ef		       98		      TYA		; 2
   1089  f4f0		       18		      CLC		; 2 
   1090  f4f1		       65 99		      ADC	TrafficOffset2 + 1	;3
   1091  f4f3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1092  f4f5		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1093  f4f7		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1094  f4f9		       4c fe f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1095  f4fc				   EorOffsetWithCarry2
   1096  f4fc		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1097  f4fe				   AfterEorOffsetWithCarry2		;17
   1098  f4fe		       aa		      TAX		;2
   1099  f4ff		       bd 00 fe 	      LDA	AesTable,X	; 4
   1100  f502		       c5 be		      CMP	TrafficChance	;3
   1101  f504		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1102  f506		       a9 02		      LDA	#%00000010	;2
   1103  f508		       85 85		      STA	ENABLCache	;3
   1104  f50a				   FinishDrawTraffic2
   1105  f50a
   1106  f50a							;STA WSYNC ;65 / 137
   1107  f50a
   1108  f50a							; LDA Tmp0 ; Flicker this line if drawing car
   1109  f50a							; BEQ FinishDrawTraffic4
   1110  f50a				   DrawTraffic3 		; 33
   1111  f50a		       98		      TYA		; 2
   1112  f50b		       18		      CLC		; 2 
   1113  f50c		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1114  f50e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1115  f510		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1116  f512		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1117  f514		       4c 19 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1118  f517				   EorOffsetWithCarry3
   1119  f517		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1120  f519				   AfterEorOffsetWithCarry3		;17
   1121  f519		       aa		      TAX		;2
   1122  f51a		       bd 00 fe 	      LDA	AesTable,X	; 4
   1123  f51d		       c5 be		      CMP	TrafficChance	;3
   1124  f51f		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1125  f521		       a9 02		      LDA	#%00000010	;2
   1126  f523		       85 87		      STA	ENAM1Cache
   1127  f525				   FinishDrawTraffic3
   1128  f525
   1129  f525
   1130  f525				   DrawOpponent 		;26
   1131  f525		       84 b0		      STY	Tmp0	;3
   1132  f527		       a4 cf		      LDY	OpponentLine	;3
   1133  f529		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1134  f52b		       b0 0b		      BCS	SkipDrawOpponent	;2
   1135  f52d				   DrawOpponentVisible
   1136  f52d		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1137  f52f		       85 84		      STA	GRP1Cache	;3
   1138  f531		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1139  f533		       a4 b0		      LDY	Tmp0	;3
   1140  f535		       4c 49 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1141  f538				   SkipDrawOpponent
   1142  f538		       c6 cf		      DEC	OpponentLine	;5
   1143  f53a		       a4 b0		      LDY	Tmp0	;3
   1144  f53c
   1145  f53c				   DrawTraffic0 		; 21 2pe
   1146  f53c		       98		      TYA		; 2
   1147  f53d		       18		      CLC		; 2 
   1148  f53e		       65 91		      ADC	TrafficOffset0 + 1	;3
   1149  f540		       29 08		      AND	#%00001000	;2
   1150  f542		       f0 05		      BEQ	HasNoBorderP0	;3
   1151  f544				   HasBorderP0
   1152  f544		       a9 e0		      LDA	#%11100000	; 2
   1153  f546		       4c 4b f5 	      JMP	StoreBorderP0	; 3
   1154  f549				   HasNoBorderP0
   1155  f549		       a9 00		      LDA	#0	; 2
   1156  f54b				   StoreBorderP0
   1157  f54b		       85 81		      STA	PF0Cache	; 3
   1158  f54d		       85 83		      STA	PF2Cache	; 3
   1159  f54f
   1160  f54f				   SkipDrawTraffic0
   1161  f54f
   1162  f54f				   WhileScanLoop
   1163  f54f		       88		      DEY		;2
   1164  f550		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1165  f552		       4c a0 f4 	      JMP	ScanLoop	;3
   1166  f555				   FinishScanLoop		; 7 209 of 222
   1167  f555
   1168  f555		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1169  f557		       20 f6 f6 	      JSR	LoadAll
   1170  f55a		       85 02		      STA	WSYNC	; do stuff!
   1171  f55c		       85 02		      STA	WSYNC
   1172  f55e		       85 02		      STA	WSYNC
   1173  f560
   1174  f560				   PrepareOverscan
   1175  f560		       a9 02		      LDA	#2
   1176  f562		       85 02		      STA	WSYNC
   1177  f564							;STA HMOVE	; HMOVE 10
   1178  f564		       85 01		      STA	VBLANK
   1179  f566
   1180  f566		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1181  f568		       8d 96 02 	      STA	TIM64T
   1182  f56b
   1183  f56b		       85 2b		      STA	HMCLR	; Before we process car movement
   1184  f56d							;Read Fire Button before, will make it start the game for now.
   1185  f56d				   StartGame
   1186  f56d		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1187  f56f		       25 0d		      AND	INPT5	;3 player 1
   1188  f571		       30 3c		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1189  f573		       a5 8c		      LDA	FrameCount0
   1190  f575		       29 01		      AND	#%00000001
   1191  f577		       d0 36		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1192  f579		       a5 bd		      LDA	GameStatus	;3
   1193  f57b		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1194  f57d		       d0 30		      BNE	SkipGameStart
   1195  f57f		       a5 c6		      LDA	GameMode
   1196  f581		       c9 10		      CMP	#MAX_GAME_MODE
   1197  f583		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1198  f585		       a9 00		      LDA	#0
   1199  f587		       85 c6		      STA	GameMode
   1200  f589		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1201  f58b		       85 bc		      STA	SwitchDebounceCounter
   1202  f58d		       4c af f5 	      JMP	SkipGameStart
   1203  f590				   SetGameRunningIfBothPressing
   1204  f590		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1205  f592		       05 0d		      ORA	INPT5	;3 player 1
   1206  f594		       30 19		      BMI	SkipGameStart
   1207  f596				   SetGameRunning
   1208  f596		       e6 bd		      INC	GameStatus
   1209  f598		       a9 00		      LDA	#0	;
   1210  f59a		       85 8c		      STA	FrameCount0
   1211  f59c		       85 8d		      STA	FrameCount1
   1212  f59e		       a9 38		      LDA	#SCORE_FONT_COLOR_START
   1213  f5a0		       85 c9		      STA	ScoreFontColor
   1214  f5a2		       a9 c8		      LDA	#OP_SCORE_FONT_COLOR_START
   1215  f5a4		       85 ca		      STA	OpScoreFontColor
   1216  f5a6		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1217  f5a8		       85 cb		      STA	ScoreFontColorHoldChange
   1218  f5aa		       85 cc		      STA	OpScoreFontColorHoldChange
   1219  f5ac		       4c 23 f6 	      JMP	OverScanWait	; Do not process player movement and also start
   1220  f5af				   SkipGameStart
   1221  f5af
   1222  f5af				   ReadSwitches
   1223  f5af		       a6 bc		      LDX	SwitchDebounceCounter
   1224  f5b1		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1225  f5b3		       a9 01		      LDA	#%00000001
   1226  f5b5		       2c 82 02 	      BIT	SWCHB
   1227  f5b8		       d0 07		      BNE	SkipReset
   1228  f5ba		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1229  f5bc		       85 bc		      STA	SwitchDebounceCounter
   1230  f5be		       4c 2b f6 	      JMP	OverScanWaitBeforeReset
   1231  f5c1				   SkipReset
   1232  f5c1
   1233  f5c1				   GameModeSelect
   1234  f5c1		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1235  f5c3		       d0 22		      BNE	SkipGameSelect
   1236  f5c5		       a2 00		      LDX	#0
   1237  f5c7		       20 22 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1238  f5ca		       e8		      INX
   1239  f5cb		       20 22 f7 	      JSR	ConfigureDifficulty
   1240  f5ce				   ContinueGameSelect
   1241  f5ce		       a9 02		      LDA	#%00000010
   1242  f5d0		       2c 82 02 	      BIT	SWCHB
   1243  f5d3		       d0 12		      BNE	SkipGameSelect
   1244  f5d5		       a6 c6		      LDX	GameMode
   1245  f5d7		       e0 10		      CPX	#MAX_GAME_MODE
   1246  f5d9		       f0 04		      BEQ	ResetGameMode
   1247  f5db		       e8		      INX
   1248  f5dc		       4c e1 f5 	      JMP	StoreGameMode
   1249  f5df				   ResetGameMode
   1250  f5df		       a2 00		      LDX	#0
   1251  f5e1				   StoreGameMode
   1252  f5e1		       86 c6		      STX	GameMode
   1253  f5e3		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1254  f5e5		       85 bc		      STA	SwitchDebounceCounter
   1255  f5e7				   SkipGameSelect
   1256  f5e7		       4c ec f5 	      JMP	EndReadSwitches
   1257  f5ea				   DecrementSwitchDebounceCounter
   1258  f5ea		       c6 bc		      DEC	SwitchDebounceCounter
   1259  f5ec				   EndReadSwitches
   1260  f5ec
   1261  f5ec				   DoNotTurnBeforeStart
   1262  f5ec							;STA HMCLR
   1263  f5ec		       a5 bd		      LDA	GameStatus
   1264  f5ee		       f0 33		      BEQ	OverScanWait
   1265  f5f0
   1266  f5f0							; Last thing, will overrride hmove
   1267  f5f0				   CallTestColisionAndMove
   1268  f5f0		       a2 00		      LDX	#0	; Player 0
   1269  f5f2							; Colision with traffic, each player check different flags,
   1270  f5f2		       a5 8c		      LDA	FrameCount0
   1271  f5f4		       29 01		      AND	#%00000001
   1272  f5f6		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1273  f5f8		       20 05 f9 	      JSR	IsOpponentColliding
   1274  f5fb		       05 01		      ORA	CXM1P
   1275  f5fd		       4a		      LSR
   1276  f5fe		       05 00		      ORA	CXM0P
   1277  f600		       05 02		      ORA	CXP0FB
   1278  f602							; ORA CXPPMM ; Collision between players will have its own rules
   1279  f602				   SkipColisionPlayer0		; Should not colide on opponent side.
   1280  f602		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1281  f604		       85 b2		      STA	Tmp2
   1282  f606		       20 19 f9 	      JSR	TestCollisionAndMove
   1283  f609
   1284  f609		       e8		      INX		; player 1
   1285  f60a		       a5 8c		      LDA	FrameCount0
   1286  f60c		       29 01		      AND	#%00000001
   1287  f60e		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1288  f610		       20 05 f9 	      JSR	IsOpponentColliding
   1289  f613		       05 00		      ORA	CXM0P
   1290  f615		       4a		      LSR
   1291  f616		       05 01		      ORA	CXM1P
   1292  f618		       05 03		      ORA	CXP1FB
   1293  f61a				   SkipColisionPlayer1
   1294  f61a		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1295  f61c		       85 b2		      STA	Tmp2
   1296  f61e		       20 19 f9 	      JSR	TestCollisionAndMove
   1297  f621
   1298  f621				   ClearCollision
   1299  f621		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1300  f623
   1301  f623				   OverScanWait
   1302  f623		       ad 84 02 	      LDA	INTIM
   1303  f626		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1304  f628		       4c ee f0 	      JMP	MainLoop
   1305  f62b
   1306  f62b				   OverScanWaitBeforeReset
   1307  f62b		       ad 84 02 	      LDA	INTIM
   1308  f62e		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1309  f630		       4c 14 f0 	      JMP	Start
   1310  f633
   1311  f633				   Subroutines
   1312  f633
   1313  f633							;X Player
   1314  f633							;Tmp1 TrafficOffset 2
   1315  f633				   ProcessSound
   1316  f633				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1317  f633		       b5 c9		      LDA	ScoreFontColor,X	;3
   1318  f635		       dd b7 fc 	      CMP	PlayerToScoreOverColor,X	;2
   1319  f638		       f0 6f		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1320  f63a		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X	;2
   1321  f63d		       f0 2d		      BEQ	PlayCheckpoint	;2
   1322  f63f		       b5 8e		      LDA	CollisionCounter,X	;3
   1323  f641		       c9 e0		      CMP	#$E0	;2
   1324  f643		       b0 18		      BCS	PlayColision	;2
   1325  f645		       b5 cd		      LDA	NextCheckpoint,X	;3
   1326  f647		       38		      SEC		;2
   1327  f648		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1328  f64a		       c9 02		      CMP	#$02	;2
   1329  f64c		       90 30		      BCC	PlayBeforeCheckpoint	;4
   1330  f64e		       b5 b8		      LDA	CountdownTimer,X	; 3
   1331  f650		       f0 57		      BEQ	EngineSound	;2
   1332  f652		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1333  f654		       90 3b		      BCC	PlayWarnTimeEnding	;4
   1334  f656		       a5 bd		      LDA	GameStatus	; Mute while game not running
   1335  f658		       d0 4f		      BNE	EngineSound
   1336  f65a		       4c cc f6 	      JMP	MuteSound	;3
   1337  f65d				   PlayColision
   1338  f65d		       a9 1f		      LDA	#31
   1339  f65f		       95 17		      STA	AUDF0,X
   1340  f661		       a9 08		      LDA	#8
   1341  f663		       95 15		      STA	AUDC0,X
   1342  f665		       a9 08		      LDA	#8
   1343  f667		       95 19		      STA	AUDV0,X
   1344  f669		       4c d0 f6 	      JMP	EndSound
   1345  f66c
   1346  f66c				   PlayCheckpoint
   1347  f66c		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1348  f66e		       4a		      LSR		;2
   1349  f66f		       4a		      LSR		;2
   1350  f670		       4a		      LSR		;2
   1351  f671		       95 17		      STA	AUDF0,X	;3
   1352  f673		       a9 0c		      LDA	#12	;2
   1353  f675		       95 15		      STA	AUDC0,X	;3
   1354  f677		       a9 06		      LDA	#6	;2
   1355  f679		       95 19		      STA	AUDV0,X	;3
   1356  f67b		       4c d0 f6 	      JMP	EndSound	;3
   1357  f67e
   1358  f67e				   PlayBeforeCheckpoint
   1359  f67e		       a5 8c		      LDA	FrameCount0	;3
   1360  f680		       29 1c		      AND	#%00011100	;2
   1361  f682		       09 03		      ORA	#%00000011	;2
   1362  f684		       95 17		      STA	AUDF0,X	;3
   1363  f686		       a9 0c		      LDA	#12	;2
   1364  f688		       95 15		      STA	AUDC0,X	;3
   1365  f68a		       a9 03		      LDA	#3	;2
   1366  f68c		       95 19		      STA	AUDV0,X	;3
   1367  f68e		       4c d0 f6 	      JMP	EndSound	;3
   1368  f691
   1369  f691				   PlayWarnTimeEnding
   1370  f691		       a5 8c		      LDA	FrameCount0	;3
   1371  f693		       29 04		      AND	#%00000100	;2
   1372  f695		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1373  f697		       18		      CLC		;2
   1374  f698		       a9 0a		      LDA	#10	;2
   1375  f69a		       75 b8		      ADC	CountdownTimer,X	;2
   1376  f69c		       95 17		      STA	AUDF0,X	;3
   1377  f69e		       a9 0c		      LDA	#12	;2
   1378  f6a0		       95 15		      STA	AUDC0,X	;3
   1379  f6a2		       a9 03		      LDA	#3	;2
   1380  f6a4		       95 19		      STA	AUDV0,X	;3
   1381  f6a6		       4c d0 f6 	      JMP	EndSound	;3
   1382  f6a9
   1383  f6a9				   EngineSound		;41
   1384  f6a9		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1385  f6ab		       95 19		      STA	AUDV0,X
   1386  f6ad		       b5 b8		      LDA	CountdownTimer,X	;3
   1387  f6af		       f0 1b		      BEQ	EngineOff	;2
   1388  f6b1		       b4 d5		      LDY	Gear,X
   1389  f6b3		       b5 de		      LDA	Player0SpeedL,X	;3
   1390  f6b5		       4a		      LSR		;2
   1391  f6b6		       4a		      LSR		;2
   1392  f6b7		       4a		      LSR		;2
   1393  f6b8		       29 0f		      AND	#%00001111	;2
   1394  f6ba		       85 b0		      STA	Tmp0	;3
   1395  f6bc		       b9 30 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1396  f6bf		       38		      SEC		;2
   1397  f6c0		       e5 b0		      SBC	Tmp0	;3
   1398  f6c2		       95 17		      STA	AUDF0,X	;3
   1399  f6c4		       b9 2a ff 	      LDA	EngineSoundType,Y	;4
   1400  f6c7		       95 15		      STA	AUDC0,X	;3
   1401  f6c9		       4c d0 f6 	      JMP	EndEngineSound	;3
   1402  f6cc				   EngineOff
   1403  f6cc				   MuteSound
   1404  f6cc		       a9 00		      LDA	#0
   1405  f6ce		       95 15		      STA	AUDC0,X
   1406  f6d0				   EndEngineSound
   1407  f6d0				   EndSound
   1408  f6d0		       60		      RTS
   1409  f6d1
   1410  f6d1				   ClearAll		; 58
   1411  f6d1		       a9 00		      LDA	#0	;2
   1412  f6d3		       85 1b		      STA	GRP0	;3
   1413  f6d5		       85 1c		      STA	GRP1	;3
   1414  f6d7		       85 1f		      STA	ENABL	;3
   1415  f6d9		       85 1d		      STA	ENAM0	;3
   1416  f6db		       85 1e		      STA	ENAM1	;3
   1417  f6dd		       85 80		      STA	GRP0Cache	;3
   1418  f6df		       85 84		      STA	GRP1Cache	;3
   1419  f6e1		       85 85		      STA	ENABLCache	;3
   1420  f6e3		       85 86		      STA	ENAM0Cache	;3
   1421  f6e5		       85 87		      STA	ENAM1Cache	;3
   1422  f6e7
   1423  f6e7				   ClearPF		; 26
   1424  f6e7		       a9 00		      LDA	#0	;2
   1425  f6e9				   ClearPFSkipLDA0
   1426  f6e9		       85 0d		      STA	PF0	;3
   1427  f6eb		       85 0e		      STA	PF1	;3
   1428  f6ed		       85 0f		      STA	PF2	;3	
   1429  f6ef		       85 81		      STA	PF0Cache	;3
   1430  f6f1		       85 82		      STA	PF1Cache	;3
   1431  f6f3		       85 83		      STA	PF2Cache	;3 
   1432  f6f5		       60		      RTS		;6
   1433  f6f6				   EndClearAll
   1434  f6f6
   1435  f6f6				   LoadAll		; 48
   1436  f6f6		       a5 81		      LDA	PF0Cache	;3
   1437  f6f8		       85 0d		      STA	PF0	;3
   1438  f6fa
   1439  f6fa		       a5 82		      LDA	PF1Cache	;3
   1440  f6fc		       85 0e		      STA	PF1	;3
   1441  f6fe
   1442  f6fe		       a5 83		      LDA	PF2Cache	;3
   1443  f700		       85 0f		      STA	PF2	;3
   1444  f702
   1445  f702		       a5 84		      LDA	GRP1Cache	;3
   1446  f704		       85 1c		      STA	GRP1	;3
   1447  f706
   1448  f706		       a5 85		      LDA	ENABLCache	;3
   1449  f708		       85 1f		      STA	ENABL	;3
   1450  f70a
   1451  f70a		       a5 86		      LDA	ENAM0Cache	;3
   1452  f70c		       85 1d		      STA	ENAM0	;3
   1453  f70e
   1454  f70e		       a5 87		      LDA	ENAM1Cache	;3
   1455  f710		       85 1e		      STA	ENAM1	;3
   1456  f712
   1457  f712		       60		      RTS		;6
   1458  f713				   EndLoadAll
   1459  f713
   1460  f713				   NextDifficulty		;Is a SBR
   1461  f713		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1462  f715		       29 01		      AND	#%00000001
   1463  f717		       d0 24		      BNE	CheckRandomDifficulty
   1464  f719
   1465  f719		       b5 c4		      LDA	CurrentDifficulty,X
   1466  f71b		       18		      CLC
   1467  f71c		       69 01		      ADC	#1
   1468  f71e		       29 03		      AND	#%00000011	; 0 to 3
   1469  f720		       95 c4		      STA	CurrentDifficulty,X
   1470  f722
   1471  f722				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1472  f722		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1473  f724		       b9 b9 ff 	      LDA	TrafficChanceTable,Y
   1474  f727		       95 be		      STA	TrafficChance,X
   1475  f729		       b9 b5 ff 	      LDA	TrafficColorTable,Y
   1476  f72c		       95 c2		      STA	TrafficColor,X
   1477  f72e
   1478  f72e		       a5 c6		      LDA	GameMode	;
   1479  f730		       29 01		      AND	#%00000001
   1480  f732		       f0 03		      BEQ	UseNextDifficultyTime
   1481  f734		       4c 38 f7 	      JMP	StoreDifficultyTime
   1482  f737				   UseNextDifficultyTime
   1483  f737		       c8		      INY
   1484  f738				   StoreDifficultyTime
   1485  f738		       b9 bd ff 	      LDA	TrafficTimeTable,Y
   1486  f73b		       95 c0		      STA	CheckpointTime,X
   1487  f73d
   1488  f73d				   CheckRandomDifficulty
   1489  f73d		       a5 c6		      LDA	GameMode
   1490  f73f		       29 08		      AND	#%00001000	; Random difficulties
   1491  f741		       f0 26		      BEQ	ReturnFromNextDifficulty
   1492  f743				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1493  f743		       a5 f2		      LDA	IsOpponentInFront
   1494  f745		       30 12		      BMI	UseOpponentChance
   1495  f747		       a5 cf		      LDA	OpponentLine	; Same line
   1496  f749		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1497  f74b		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1498  f74d		       a4 8c		      LDY	FrameCount0
   1499  f74f		       b9 00 fe 	      LDA	AesTable,Y
   1500  f752							;EOR TrafficChance, no need, lets make life simple
   1501  f752		       29 3f		      AND	#%00111111
   1502  f754		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1503  f756		       4c 69 f7 	      JMP	ReturnFromNextDifficulty
   1504  f759				   UseOpponentChance
   1505  f759		       8a		      TXA
   1506  f75a		       49 01		      EOR	#%00000001	; Reverts the player
   1507  f75c		       aa		      TAX
   1508  f75d		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1509  f75f		       85 b3		      STA	Tmp3
   1510  f761		       8a		      TXA
   1511  f762		       49 01		      EOR	#%00000001	; Restors the player
   1512  f764		       aa		      TAX
   1513  f765		       a5 b3		      LDA	Tmp3
   1514  f767		       95 be		      STA	TrafficChance,X
   1515  f769
   1516  f769				   ReturnFromNextDifficulty
   1517  f769		       60		      RTS
   1518  f76a
   1519  f76a				   DefaultOffsets
   1520  f76a		       a9 20		      LDA	#$20
   1521  f76c		       85 96		      STA	TrafficOffset1 + 2
   1522  f76e		       85 a6		      STA	OpTrafficOffset1 + 2
   1523  f770		       a9 40		      LDA	#$40
   1524  f772		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1525  f774		       85 aa		      STA	OpTrafficOffset2 + 2
   1526  f776		       a9 60		      LDA	#$60
   1527  f778		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1528  f77a		       85 ae		      STA	OpTrafficOffset3 + 2
   1529  f77c		       a9 80		      LDA	#$80
   1530  f77e		       60		      RTS
   1531  f77f
   1532  f77f				   PrintStaticText		; Preload X with the offset referent to StaticText
   1533  f77f		       bd 00 ff 	      LDA	StaticText,X
   1534  f782		       85 d0		      STA	ScoreD0
   1535  f784		       e8		      INX
   1536  f785		       bd 00 ff 	      LDA	StaticText,X
   1537  f788		       85 d1		      STA	ScoreD1
   1538  f78a		       e8		      INX
   1539  f78b		       bd 00 ff 	      LDA	StaticText,X
   1540  f78e		       85 d2		      STA	ScoreD2
   1541  f790		       e8		      INX
   1542  f791		       bd 00 ff 	      LDA	StaticText,X
   1543  f794		       85 d3		      STA	ScoreD3
   1544  f796		       e8		      INX
   1545  f797		       bd 00 ff 	      LDA	StaticText,X
   1546  f79a		       85 d4		      STA	ScoreD4
   1547  f79c		       60		      RTS
   1548  f79d
   1549  f79d				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1550  f79d		       a2 00		      LDX	#0
   1551  f79f		       a0 04		      LDY	#FONT_OFFSET
   1552  f7a1
   1553  f7a1				   ScoreLoop		; 20 
   1554  f7a1		       85 02		      STA	WSYNC	;2
   1555  f7a3		       85 2a		      STA	HMOVE
   1556  f7a5
   1557  f7a5		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1558  f7a7		       85 0d		      STA	PF0	;3
   1559  f7a9
   1560  f7a9		       a5 82		      LDA	PF1Cache	;3
   1561  f7ab		       85 0e		      STA	PF1	;3
   1562  f7ad
   1563  f7ad		       a5 83		      LDA	PF2Cache	;3
   1564  f7af		       85 0f		      STA	PF2	;3
   1565  f7b1
   1566  f7b1				   DrawScoreD0		; 15
   1567  f7b1		       a6 d0		      LDX	ScoreD0	; 3
   1568  f7b3		       bd 00 fd 	      LDA	Font,X	;4
   1569  f7b6		       85 81		      STA	PF0Cache	;3
   1570  f7b8		       c6 d0		      DEC	ScoreD0	;5
   1571  f7ba
   1572  f7ba				   DrawScoreD1		; 23	
   1573  f7ba		       a6 d1		      LDX	ScoreD1	; 3
   1574  f7bc		       bd 00 fd 	      LDA	Font,X	;4
   1575  f7bf		       0a		      ASL		;2
   1576  f7c0		       0a		      ASL		;2
   1577  f7c1		       0a		      ASL		;2
   1578  f7c2		       0a		      ASL		;2
   1579  f7c3		       85 82		      STA	PF1Cache	;3
   1580  f7c5		       c6 d1		      DEC	ScoreD1	;5
   1581  f7c7
   1582  f7c7				   DrawScoreD2		; 20
   1583  f7c7		       a6 d2		      LDX	ScoreD2	; 3
   1584  f7c9		       bd 00 fd 	      LDA	Font,X	;4
   1585  f7cc		       29 0f		      AND	#%00001111	;2
   1586  f7ce		       05 82		      ORA	PF1Cache	;3
   1587  f7d0		       85 82		      STA	PF1Cache	;3
   1588  f7d2		       c6 d2		      DEC	ScoreD2	;5
   1589  f7d4
   1590  f7d4				   DrawScoreD3		; 23
   1591  f7d4		       a6 d3		      LDX	ScoreD3	; 3
   1592  f7d6		       bd 00 fd 	      LDA	Font,X	;4
   1593  f7d9		       4a		      LSR		;2
   1594  f7da		       4a		      LSR		;2
   1595  f7db		       4a		      LSR		;2
   1596  f7dc		       4a		      LSR		;2
   1597  f7dd		       85 83		      STA	PF2Cache	;3
   1598  f7df		       c6 d3		      DEC	ScoreD3	;5
   1599  f7e1
   1600  f7e1				   DrawScoreD4		; 20
   1601  f7e1		       a6 d4		      LDX	ScoreD4	; 3
   1602  f7e3		       bd 00 fd 	      LDA	Font,X	;4
   1603  f7e6		       29 f0		      AND	#%11110000	;2
   1604  f7e8		       05 83		      ORA	PF2Cache	;3
   1605  f7ea		       85 83		      STA	PF2Cache	;3
   1606  f7ec		       c6 d4		      DEC	ScoreD4	;5
   1607  f7ee
   1608  f7ee
   1609  f7ee		       88		      DEY		;2
   1610  f7ef		       10 b0		      BPL	ScoreLoop	;4
   1611  f7f1
   1612  f7f1		       85 02		      STA	WSYNC
   1613  f7f3		       85 2a		      STA	HMOVE
   1614  f7f5		       20 f6 f6 	      JSR	LoadAll
   1615  f7f8		       60		      RTS		; 6
   1616  f7f9
   1617  f7f9				   WaitForVblankEnd
   1618  f7f9		       ad 84 02 	      LDA	INTIM
   1619  f7fc		       d0 fb		      BNE	WaitForVblankEnd
   1620  f7fe		       85 02		      STA	WSYNC
   1621  f800		       85 01		      STA	VBLANK
   1622  f802		       60		      RTS
   1623  f803
   1624  f803				   Sleep4Lines
   1625  f803		       85 02		      STA	WSYNC
   1626  f805		       85 02		      STA	WSYNC
   1627  f807		       85 02		      STA	WSYNC
   1628  f809		       85 02		      STA	WSYNC
   1629  f80b		       60		      RTS
   1630  f80c
   1631  f80c				   Sleep8Lines
   1632  f80c		       20 03 f8 	      JSR	Sleep4Lines
   1633  f80f		       20 03 f8 	      JSR	Sleep4Lines
   1634  f812		       60		      RTS
   1635  f813
   1636  f813				   Sleep32Lines
   1637  f813		       20 0c f8 	      JSR	Sleep8Lines
   1638  f816		       20 0c f8 	      JSR	Sleep8Lines
   1639  f819		       20 0c f8 	      JSR	Sleep8Lines
   1640  f81c		       20 0c f8 	      JSR	Sleep8Lines
   1641  f81f		       60		      RTS
   1642  f820
   1643  f820							;X = number of WSYNC HMOVE to run
   1644  f820				   HMoveXTimes
   1645  f820		       85 02		      STA	WSYNC	;3
   1646  f822		       85 2a		      STA	HMOVE	; 3/10 
   1647  f824		       ca		      DEX
   1648  f825		       d0 f9		      BNE	HMoveXTimes
   1649  f827		       60		      RTS
   1650  f828
   1651  f828							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1652  f828							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1653  f828							; Tmp0 Binary Number
   1654  f828							; Result Returned in Tmp 1 and A
   1655  f828				   BINBCD8
   1656  f828		       f8		      SED		; Switch to decimal mode
   1657  f829		       a9 00		      LDA	#0	; Ensure the result is clear
   1658  f82b		       85 b1		      STA	Tmp1+0
   1659  f82d							;STA Tmp1+1
   1660  f82d		       a2 08		      LDX	#8	; The number of source bits
   1661  f82f
   1662  f82f				   CNVBIT
   1663  f82f		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1664  f831		       a5 b1		      LDA	Tmp1+0	; And add into result
   1665  f833		       65 b1		      ADC	Tmp1+0
   1666  f835		       85 b1		      STA	Tmp1+0
   1667  f837							;Not needed now, 0 to 99 is enought for timer!
   1668  f837							; LDA Tmp1+1	; propagating any carry
   1669  f837							; ADC Tmp1+1
   1670  f837							; STA Tmp1+1
   1671  f837		       ca		      DEX		; And repeat for next bit
   1672  f838		       d0 f5		      BNE	CNVBIT
   1673  f83a		       d8		      CLD		; Back to binary
   1674  f83b		       60		      RTS		; All Done.
   1675  f83c
   1676  f83c							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1677  f83c							;X player 0 or 1
   1678  f83c				   SelectCarWithDpad
   1679  f83c		       a0 03		      LDY	#3
   1680  f83e				   SelectCarWithDpadLoop
   1681  f83e		       ad 80 02 	      LDA	SWCHA
   1682  f841		       25 b0		      AND	Tmp0
   1683  f843		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1684  f845		       98		      TYA
   1685  f846		       95 c7		      STA	CurrentCarId,X
   1686  f848				   ContinueSelectCarWithDpadLoop
   1687  f848		       46 b0		      LSR	Tmp0
   1688  f84a		       88		      DEY
   1689  f84b		       10 f1		      BPL	SelectCarWithDpadLoop
   1690  f84d		       60		      RTS
   1691  f84e
   1692  f84e				   ProcessOpponentLineAndPlayerSprite		; The sprite might depend on the line, the SBRs are connected
   1693  f84e		       a5 8c		      LDA	FrameCount0
   1694  f850		       29 01		      AND	#%00000001
   1695  f852		       38		      SEC
   1696  f853		       d0 15		      BNE	Player0IsOpponent
   1697  f855				   Player1IsOpponent		; Code could be reused?
   1698  f855		       a5 91		      LDA	TrafficOffset0 + 1
   1699  f857		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1700  f859		       85 b0		      STA	Tmp0
   1701  f85b		       a5 92		      LDA	TrafficOffset0 + 2
   1702  f85d		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1703  f85f		       85 b1		      STA	Tmp1
   1704  f861		       a5 ba		      LDA	Traffic0Msb
   1705  f863		       e5 bb		      SBC	OpTraffic0Msb
   1706  f865		       85 f2		      STA	IsOpponentInFront
   1707  f867		       4c 7c f8 	      JMP	CalculateOpponentVisibility
   1708  f86a				   Player0IsOpponent
   1709  f86a		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1710  f86c		       e5 91		      SBC	TrafficOffset0 + 1
   1711  f86e		       85 b0		      STA	Tmp0
   1712  f870		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1713  f872		       e5 92		      SBC	TrafficOffset0 + 2
   1714  f874		       85 b1		      STA	Tmp1
   1715  f876		       a5 bb		      LDA	OpTraffic0Msb
   1716  f878		       e5 ba		      SBC	Traffic0Msb
   1717  f87a		       85 f2		      STA	IsOpponentInFront
   1718  f87c
   1719  f87c				   CalculateOpponentVisibility
   1720  f87c		       a5 b1		      LDA	Tmp1
   1721  f87e		       05 f2		      ORA	IsOpponentInFront
   1722  f880		       f0 12		      BEQ	OpponentVisibleBehind	; 2 MSB are all zero
   1723  f882
   1724  f882		       a5 b1		      LDA	Tmp1
   1725  f884		       25 f2		      AND	IsOpponentInFront
   1726  f886		       c9 ff		      CMP	#%11111111
   1727  f888		       f0 22		      BEQ	OpponentVisibleInFront	; 2 MSB are all one
   1728  f88a
   1729  f88a				   OpponentNotVisible
   1730  f88a		       a9 00		      LDA	#0
   1731  f88c		       85 b4		      STA	Tmp4
   1732  f88e		       a9 ff		      LDA	#$FF
   1733  f890		       85 cf		      STA	OpponentLine
   1734  f892		       d0 3b		      BNE	ConfigureCarSprites
   1735  f894
   1736  f894				   OpponentVisibleBehind
   1737  f894		       a5 b0		      LDA	Tmp0
   1738  f896		       30 04		      BMI	OpponentVisibleBehindNegativeNumber
   1739  f898		       c9 0d		      CMP	#13
   1740  f89a		       90 28		      BCC	OpponentFullyVisible	; A is Greater or equal
   1741  f89c				   OpponentVisibleBehindNegativeNumber
   1742  f89c		       a9 33		      LDA	#51
   1743  f89e		       85 cf		      STA	OpponentLine
   1744  f8a0		       85 b4		      STA	Tmp4	; Use sprite override
   1745  f8a2		       a9 74		      LDA	#<ArrowDownSprite
   1746  f8a4		       85 d9		      STA	EnemyCarSpritePointerL
   1747  f8a6		       a9 ff		      LDA	#>ArrowDownSprite
   1748  f8a8		       85 da		      STA	EnemyCarSpritePointerH
   1749  f8aa		       d0 23		      BNE	ConfigureCarSprites	; Always jump
   1750  f8ac
   1751  f8ac				   OpponentVisibleInFront
   1752  f8ac		       a5 b0		      LDA	Tmp0
   1753  f8ae		       10 04		      BPL	OpponentVisibleInFrontPositiveNumber
   1754  f8b0		       c9 c6		      CMP	#-58
   1755  f8b2		       10 10		      BPL	OpponentFullyVisible	; A more than
   1756  f8b4				   OpponentVisibleInFrontPositiveNumber
   1757  f8b4		       a9 04		      LDA	#4
   1758  f8b6		       85 cf		      STA	OpponentLine
   1759  f8b8		       85 b4		      STA	Tmp4	; Use sprite override
   1760  f8ba		       a9 6f		      LDA	#<ArrowUpSprite
   1761  f8bc		       85 d9		      STA	EnemyCarSpritePointerL
   1762  f8be		       a9 ff		      LDA	#>ArrowUpSprite
   1763  f8c0		       85 da		      STA	EnemyCarSpritePointerH
   1764  f8c2		       d0 0b		      BNE	ConfigureCarSprites	; Alwys jump
   1765  f8c4
   1766  f8c4				   OpponentFullyVisible
   1767  f8c4		       a9 00		      LDA	#0
   1768  f8c6		       85 b4		      STA	Tmp4
   1769  f8c8		       18		      CLC
   1770  f8c9		       a5 b0		      LDA	Tmp0
   1771  f8cb		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1772  f8cd		       85 cf		      STA	OpponentLine
   1773  f8cf
   1774  f8cf				   ConfigureCarSprites
   1775  f8cf		       a5 8c		      LDA	FrameCount0
   1776  f8d1		       29 01		      AND	#%00000001
   1777  f8d3		       d0 0b		      BNE	LoadForRightScreenSprites
   1778  f8d5				   LoadForLeftScreenSprites
   1779  f8d5		       a5 c7		      LDA	CurrentCarId
   1780  f8d7		       85 b0		      STA	Tmp0
   1781  f8d9		       a5 c8		      LDA	OpCurrentCarId
   1782  f8db		       85 b1		      STA	Tmp1
   1783  f8dd		       4c e8 f8 	      JMP	LoadCarSpritesFromIds
   1784  f8e0				   LoadForRightScreenSprites
   1785  f8e0		       a5 c7		      LDA	CurrentCarId
   1786  f8e2		       85 b1		      STA	Tmp1
   1787  f8e4		       a5 c8		      LDA	OpCurrentCarId
   1788  f8e6		       85 b0		      STA	Tmp0
   1789  f8e8
   1790  f8e8				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1791  f8e8		       a4 b0		      LDY	Tmp0
   1792  f8ea		       b9 8f ff 	      LDA	CarIdToSpriteAddressL,Y
   1793  f8ed		       85 d7		      STA	CarSpritePointerL
   1794  f8ef		       b9 93 ff 	      LDA	CarIdToSpriteAddressH,Y
   1795  f8f2		       85 d8		      STA	CarSpritePointerH
   1796  f8f4				   ConfigureOpponentCarSprite
   1797  f8f4		       a5 b4		      LDA	Tmp4
   1798  f8f6		       d0 0c		      BNE	ReturnFromConfigureCarSprite	; Using override!
   1799  f8f8				   OpponentCarSprite
   1800  f8f8		       a4 b1		      LDY	Tmp1
   1801  f8fa		       b9 97 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1802  f8fd		       85 d9		      STA	EnemyCarSpritePointerL
   1803  f8ff		       b9 9b ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1804  f902		       85 da		      STA	EnemyCarSpritePointerH
   1805  f904				   ReturnFromConfigureCarSprite
   1806  f904		       60		      RTS
   1807  f905
   1808  f905							; Value stored in A
   1809  f905				   IsOpponentColliding
   1810  f905							;Any non default state, opponent do not colide
   1811  f905		       a5 8e		      LDA	CollisionCounter
   1812  f907		       05 8f		      ORA	OpCollisionCounter
   1813  f909		       05 cb		      ORA	ScoreFontColorHoldChange
   1814  f90b		       05 cc		      ORA	OpScoreFontColorHoldChange
   1815  f90d		       d0 07		      BNE	OpponentNotColliding
   1816  f90f		       a5 f2		      LDA	IsOpponentInFront
   1817  f911		       25 07		      AND	CXPPMM
   1818  f913		       4c 18 f9 	      JMP	ReturnIsOpponentColliding
   1819  f916				   OpponentNotColliding
   1820  f916		       a9 00		      LDA	#0
   1821  f918				   ReturnIsOpponentColliding
   1822  f918		       60		      RTS
   1823  f919
   1824  f919
   1825  f919							; Movement and colision are binded because the car must be moved after duplicate size.
   1826  f919							; Use X for the player
   1827  f919							; Tmp2 Traffic colision result
   1828  f919				   TestCollisionAndMove
   1829  f919							; Until store the movemnt, Y contains the value to be stored.
   1830  f919							; see if player0 colides with the rest
   1831  f919		       a5 b2		      LDA	Tmp2
   1832  f91b		       f0 2b		      BEQ	NoCollision	;skip if not hitting...
   1833  f91d		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1834  f91f		       d0 27		      BNE	NoCollision
   1835  f921		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1836  f923		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X
   1837  f926		       f0 20		      BEQ	NoCollision
   1838  f928		       dd b5 fc 	      CMP	PlayerToScoreStartColor,X
   1839  f92b		       f0 1b		      BEQ	NoCollision
   1840  f92d		       a9 ff		      LDA	#COLLISION_FRAMES
   1841  f92f		       95 8e		      STA	CollisionCounter,X
   1842  f931		       b5 f0		      LDA	Player0SpeedH,X
   1843  f933		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1844  f935		       a9 10		      LDA	#COLLISION_SPEED_L
   1845  f937		       d5 de		      CMP	Player0SpeedL,X
   1846  f939		       b0 04		      BCS	SkipSetColisionSpeedL
   1847  f93b				   SetColisionSpeedL
   1848  f93b		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1849  f93d		       95 de		      STA	Player0SpeedL,X
   1850  f93f				   SkipSetColisionSpeedL
   1851  f93f		       a9 00		      LDA	#0
   1852  f941		       95 f0		      STA	Player0SpeedH,X
   1853  f943		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1854  f945		       4c 98 f9 	      JMP	StoreHMove	; We keep position consistent
   1855  f948				   NoCollision
   1856  f948
   1857  f948				   DecrementCollision
   1858  f948		       b5 8e		      LDA	CollisionCounter,X
   1859  f94a		       f0 06		      BEQ	FinishDecrementCollision
   1860  f94c		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1861  f94e		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1862  f950		       d6 8e		      DEC	CollisionCounter,X
   1863  f952				   FinishDecrementCollision
   1864  f952
   1865  f952				   ResetPlayerSize
   1866  f952		       d0 04		      BNE	FinishResetPlayerSize
   1867  f954		       a9 30		      LDA	#%00110000
   1868  f956		       95 04		      STA	NUSIZ0,X	;
   1869  f958				   FinishResetPlayerSize
   1870  f958
   1871  f958				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1872  f958		       b5 8e		      LDA	CollisionCounter,X
   1873  f95a		       c9 01		      CMP	#1	; Last frame before reset
   1874  f95c		       d0 05		      BNE	SkipResetPlayerPosition
   1875  f95e		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1876  f960		       4c 98 f9 	      JMP	StoreHMove
   1877  f963				   SkipResetPlayerPosition
   1878  f963
   1879  f963				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1880  f963		       b5 c7		      LDA	CurrentCarId,X
   1881  f965		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1882  f967		       d0 08		      BNE	PrepareReadXAxis
   1883  f969		       a0 00		      LDY	#0
   1884  f96b		       a5 8c		      LDA	FrameCount0
   1885  f96d		       29 01		      AND	#DRAGSTER_TURN_MASK
   1886  f96f		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1887  f971
   1888  f971				   PrepareReadXAxis
   1889  f971		       a0 00		      LDY	#0
   1890  f973		       b5 b6		      LDA	Player0X,X
   1891  f975				   BeginReadLeft
   1892  f975		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1893  f977		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1894  f97a		       2c 80 02 	      BIT	SWCHA
   1895  f97d		       d0 07		      BNE	SkipMoveLeft
   1896  f97f		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1897  f981		       d6 b6		      DEC	Player0X,X
   1898  f983		       4c 98 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1899  f986				   SkipMoveLeft
   1900  f986				   BeginReadRight
   1901  f986		       b5 b6		      LDA	Player0X,X
   1902  f988		       c9 2c		      CMP	#PLAYER_MAX_X
   1903  f98a		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1904  f98c		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1905  f98f		       2c 80 02 	      BIT	SWCHA
   1906  f992		       d0 04		      BNE	SkipMoveRight
   1907  f994		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1908  f996		       f6 b6		      INC	Player0X,X
   1909  f998				   SkipMoveRight
   1910  f998				   StoreHMove
   1911  f998		       94 20		      STY	HMP0,X	;set the move for player 0
   1912  f99a
   1913  f99a		       60		      RTS
   1914  f99b
   1915  f99b							; X Traffic offset 4 bits each lane, 4 lanes per player
   1916  f99b							; Tmp3 Max X offset
   1917  f99b							; Tmp4 Max Player Speed L
   1918  f99b							; Tmp5 Max Player Speed H
   1919  f99b				   UpdateOffsets
   1920  f99b		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1921  f99d		       a5 c6		      LDA	GameMode
   1922  f99f		       29 04		      AND	#%00000100	; GameModes with high delta
   1923  f9a1		       f0 02		      BEQ	UpdateOffsetsLoop
   1924  f9a3		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1925  f9a5
   1926  f9a5				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1927  f9a5		       38		      SEC
   1928  f9a6		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1929  f9a8		       f9 7b ff 	      SBC	TrafficSpeeds,Y
   1930  f9ab		       85 b0		      STA	Tmp0
   1931  f9ad		       c8		      INY
   1932  f9ae		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1933  f9b0		       f9 7b ff 	      SBC	TrafficSpeeds,Y
   1934  f9b3		       85 b1		      STA	Tmp1
   1935  f9b5		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1936  f9b7		       e9 00		      SBC	#0
   1937  f9b9		       85 b2		      STA	Tmp2
   1938  f9bb
   1939  f9bb				   AddsTheResult
   1940  f9bb		       18		      CLC
   1941  f9bc		       a5 b0		      LDA	Tmp0
   1942  f9be		       75 90		      ADC	TrafficOffset0,X
   1943  f9c0		       95 90		      STA	TrafficOffset0,X
   1944  f9c2		       e8		      INX
   1945  f9c3		       a5 b1		      LDA	Tmp1
   1946  f9c5		       75 90		      ADC	TrafficOffset0,X
   1947  f9c7		       95 90		      STA	TrafficOffset0,X
   1948  f9c9		       e8		      INX
   1949  f9ca		       a5 b2		      LDA	Tmp2	; Carry
   1950  f9cc		       75 90		      ADC	TrafficOffset0,X
   1951  f9ce		       95 90		      STA	TrafficOffset0,X
   1952  f9d0		       90 0f		      BCC	CalculateOffsetCache
   1953  f9d2				   CalculatePlayer0Msb
   1954  f9d2		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1955  f9d4		       d0 05		      BNE	CalculatePlayer1Msb
   1956  f9d6		       e6 ba		      INC	Traffic0Msb
   1957  f9d8		       4c e1 f9 	      JMP	CalculateOffsetCache
   1958  f9db				   CalculatePlayer1Msb
   1959  f9db		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1960  f9dd		       d0 02		      BNE	CalculateOffsetCache
   1961  f9df		       e6 bb		      INC	OpTraffic0Msb
   1962  f9e1
   1963  f9e1				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1964  f9e1		       e8		      INX
   1965  f9e2		       38		      SEC
   1966  f9e3		       69 00		      ADC	#0	;Increment by one
   1967  f9e5		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1968  f9e7
   1969  f9e7				   PrepareNextUpdateLoop
   1970  f9e7		       c8		      INY
   1971  f9e8		       e8		      INX
   1972  f9e9		       e4 b3		      CPX	Tmp3	; Max X offset
   1973  f9eb		       d0 b8		      BNE	UpdateOffsetsLoop
   1974  f9ed		       60		      RTS
   1975  f9ee
   1976  f9ee							; X Player 0 or 1
   1977  f9ee				   ProcessSpeed
   1978  f9ee				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1979  f9ee		       a9 00		      LDA	#0
   1980  f9f0		       85 b0		      STA	Tmp0	; Break speed
   1981  f9f2		       b5 b8		      LDA	CountdownTimer,X
   1982  f9f4		       d0 0d		      BNE	Break
   1983  f9f6		       b4 c7		      LDY	CurrentCarId,X
   1984  f9f8		       a5 8c		      LDA	FrameCount0
   1985  f9fa		       39 a3 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1986  f9fd		       d0 04		      BNE	Break
   1987  f9ff		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1988  fa01		       85 b0		      STA	Tmp0
   1989  fa03
   1990  fa03				   Break
   1991  fa03		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1992  fa06		       2c 80 02 	      BIT	SWCHA
   1993  fa09		       d0 12		      BNE	BreakNonZero
   1994  fa0b		       b5 0c		      LDA	INPT4,X	;3
   1995  fa0d		       10 0a		      BPL	BreakWhileAccelerating
   1996  fa0f		       b4 d5		      LDY	Gear,X
   1997  fa11		       b9 af ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1998  fa14		       85 b0		      STA	Tmp0
   1999  fa16		       4c 1d fa 	      JMP	BreakNonZero
   2000  fa19				   BreakWhileAccelerating		; Allow better control while breaking.
   2001  fa19		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2002  fa1b		       85 b0		      STA	Tmp0
   2003  fa1d
   2004  fa1d				   BreakNonZero
   2005  fa1d		       a5 b0		      LDA	Tmp0
   2006  fa1f		       f0 29		      BEQ	SkipBreak
   2007  fa21
   2008  fa21				   DecreaseSpeed
   2009  fa21		       38		      SEC
   2010  fa22		       b5 de		      LDA	Player0SpeedL,X
   2011  fa24		       e5 b0		      SBC	Tmp0
   2012  fa26		       95 de		      STA	Player0SpeedL,X
   2013  fa28		       b5 f0		      LDA	Player0SpeedH,X
   2014  fa2a		       e9 00		      SBC	#0
   2015  fa2c		       95 f0		      STA	Player0SpeedH,X
   2016  fa2e
   2017  fa2e				   CheckMinSpeed
   2018  fa2e		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2019  fa30		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2020  fa32		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2021  fa34		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2022  fa36
   2023  fa36				   CompareLBreakSpeed
   2024  fa36		       b5 de		      LDA	Player0SpeedL,X
   2025  fa38		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2026  fa3a		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2027  fa3c		       4c 47 fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2028  fa3f
   2029  fa3f				   ResetMinSpeed
   2030  fa3f		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2031  fa41		       95 f0		      STA	Player0SpeedH,X
   2032  fa43		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2033  fa45		       95 de		      STA	Player0SpeedL,X
   2034  fa47
   2035  fa47				   SkipAccelerateIfBreaking
   2036  fa47		       4c 90 fa 	      JMP	SkipAccelerate
   2037  fa4a				   SkipBreak
   2038  fa4a
   2039  fa4a				   Acelerates
   2040  fa4a		       b5 b8		      LDA	CountdownTimer,X
   2041  fa4c		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2042  fa4e
   2043  fa4e				   ContinueAccelerateTest
   2044  fa4e		       b5 0c		      LDA	INPT4,X	;3
   2045  fa50		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2046  fa52		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2047  fa55		       2c 80 02 	      BIT	SWCHA
   2048  fa58		       d0 36		      BNE	SkipAccelerate
   2049  fa5a
   2050  fa5a				   IncreaseCarSpeed
   2051  fa5a		       a9 02		      LDA	#2
   2052  fa5c		       85 b0		      STA	Tmp0	; Loop control
   2053  fa5e		       b4 c7		      LDY	CurrentCarId,X
   2054  fa60				   IncreaseCarSpeedLoop
   2055  fa60							;Adds speed
   2056  fa60		       18		      CLC
   2057  fa61		       b5 dc		      LDA	AccelerateBuffer,X
   2058  fa63		       79 9f ff 	      ADC	CarIdToAccelerateSpeed,Y
   2059  fa66		       95 dc		      STA	AccelerateBuffer,X
   2060  fa68		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2061  fa6a		       f6 de		      INC	Player0SpeedL,X
   2062  fa6c		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2063  fa6e		       f6 f0		      INC	Player0SpeedH,X
   2064  fa70				   ContinueIncreaseSpeedLoop
   2065  fa70		       c6 b0		      DEC	Tmp0
   2066  fa72		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2067  fa74				   SkipIncreaseCarSpeed
   2068  fa74
   2069  fa74				   CheckIfAlreadyMaxSpeed
   2070  fa74		       b5 f0		      LDA	Player0SpeedH,X
   2071  fa76		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2072  fa78		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2073  fa7a		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2074  fa7c							;High bit is max, compare the low
   2075  fa7c		       b4 c7		      LDY	CurrentCarId,X
   2076  fa7e		       b5 de		      LDA	Player0SpeedL,X
   2077  fa80		       d9 a7 ff 	      CMP	CarIdToMaxSpeedL,Y
   2078  fa83		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2079  fa85							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2080  fa85
   2081  fa85				   ResetToMaxSpeed		; Speed is more, or is already max
   2082  fa85		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2083  fa87		       95 f0		      STA	Player0SpeedH,X
   2084  fa89		       b4 c7		      LDY	CurrentCarId,X
   2085  fa8b		       b9 a7 ff 	      LDA	CarIdToMaxSpeedL,Y
   2086  fa8e		       95 de		      STA	Player0SpeedL,X
   2087  fa90				   SkipAccelerate
   2088  fa90		       60		      RTS
   2089  fa91
   2090  fa91							;Tmp0 Traffic Offset to compare with next checkpoint
   2091  fa91				   ProcessPlayerStatus
   2092  fa91				   IsGameOver
   2093  fa91		       b5 b8		      LDA	CountdownTimer,X
   2094  fa93		       15 de		      ORA	Player0SpeedL,X
   2095  fa95		       15 f0		      ORA	Player0SpeedH,X
   2096  fa97		       d0 0c		      BNE	IsCheckpoint
   2097  fa99		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2098  fa9b		       95 cb		      STA	ScoreFontColorHoldChange,X
   2099  fa9d		       bd b7 fc 	      LDA	PlayerToScoreOverColor,X
   2100  faa0		       95 c9		      STA	ScoreFontColor,X
   2101  faa2		       4c d9 fa 	      JMP	SkipIsTimeOver
   2102  faa5
   2103  faa5				   IsCheckpoint
   2104  faa5		       b5 cd		      LDA	NextCheckpoint,X
   2105  faa7		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2106  faa9		       d0 21		      BNE	SkipIsCheckpoint
   2107  faab		       18		      CLC
   2108  faac		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2109  faae		       95 cd		      STA	NextCheckpoint,X
   2110  fab0		       bd b3 fc 	      LDA	PlayerToScoreGoodColor,X
   2111  fab3		       95 c9		      STA	ScoreFontColor,X
   2112  fab5		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2113  fab7		       95 cb		      STA	ScoreFontColorHoldChange,X
   2114  fab9		       b5 b8		      LDA	CountdownTimer,X
   2115  fabb		       18		      CLC
   2116  fabc		       75 c0		      ADC	CheckpointTime,X
   2117  fabe		       95 b8		      STA	CountdownTimer,X
   2118  fac0		       90 04		      BCC	JumpSkipTimeOver
   2119  fac2		       a9 ff		      LDA	#$FF
   2120  fac4		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2121  fac6				   JumpSkipTimeOver
   2122  fac6		       20 13 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2123  fac9		       4c d9 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2124  facc				   SkipIsCheckpoint
   2125  facc
   2126  facc				   IsTimeOver
   2127  facc		       b5 b8		      LDA	CountdownTimer,X
   2128  face		       d0 09		      BNE	SkipIsTimeOver
   2129  fad0		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2130  fad2		       95 cb		      STA	ScoreFontColorHoldChange,X
   2131  fad4		       bd b9 fc 	      LDA	PlayerToScoreBadColor,X
   2132  fad7		       95 c9		      STA	ScoreFontColor,X
   2133  fad9				   SkipIsTimeOver
   2134  fad9		       60		      RTS
   2135  fada
   2136  fada
   2137  fada				   EverySecond		; 64 frames to be more precise
   2138  fada		       a9 3f		      LDA	#%00111111
   2139  fadc		       25 8c		      AND	FrameCount0
   2140  fade		       d0 06		      BNE	SkipEverySecondAction
   2141  fae0		       d5 b8		      CMP	CountdownTimer,X
   2142  fae2		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2143  fae4		       d6 b8		      DEC	CountdownTimer,X
   2144  fae6				   SkipEverySecondAction
   2145  fae6		       60		      RTS
   2146  fae7
   2147  fae7				   CalculateGear
   2148  fae7		       b5 de		      LDA	Player0SpeedL,X	;3
   2149  fae9		       29 80		      AND	#%10000000	;2
   2150  faeb		       15 f0		      ORA	Player0SpeedH,X	;3
   2151  faed		       18		      CLC		;2
   2152  faee		       2a		      ROL		;2
   2153  faef		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2154  faf1		       95 d5		      STA	Gear,X
   2155  faf3		       60		      RTS
   2156  faf4
   2157  faf4				   ProcessScoreFontColor
   2158  faf4		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2159  faf6		       f0 06		      BEQ	ResetScoreFontColor
   2160  faf8		       88		      DEY
   2161  faf9		       94 cb		      STY	ScoreFontColorHoldChange,X
   2162  fafb		       4c 03 fb 	      JMP	SkipScoreFontColor
   2163  fafe				   ResetScoreFontColor
   2164  fafe		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2165  fb01		       95 c9		      STA	ScoreFontColor,X
   2166  fb03				   SkipScoreFontColor
   2167  fb03		       60		      RTS
   2168  fb04
   2169  fb04							; X = Player
   2170  fb04							; A Returns result to be sotored in the proper digit
   2171  fb04				   PrintScoreHoldChange
   2172  fb04		       b5 cb		      LDA	ScoreFontColorHoldChange,X
   2173  fb06		       4a		      LSR
   2174  fb07		       4a		      LSR
   2175  fb08		       4a		      LSR
   2176  fb09		       4a		      LSR
   2177  fb0a		       a8		      TAY
   2178  fb0b		       b9 8c fc 	      LDA	BarLookup,Y
   2179  fb0e		       60		      RTS
   2180  fb0f
   2181  fb0f				   PrintSpeedBar
   2182  fb0f		       b5 de		      LDA	Player0SpeedL,X
   2183  fb11		       29 e0		      AND	#%11100000	;2 Discard the last bits
   2184  fb13		       18		      CLC
   2185  fb14		       2a		      ROL		;First goes into carry
   2186  fb15		       2a		      ROL
   2187  fb16		       2a		      ROL
   2188  fb17		       2a		      ROL
   2189  fb18		       85 b0		      STA	Tmp0
   2190  fb1a		       b5 f0		      LDA	Player0SpeedH,X
   2191  fb1c		       0a		      ASL
   2192  fb1d		       0a		      ASL
   2193  fb1e		       0a		      ASL
   2194  fb1f		       05 b0		      ORA	Tmp0
   2195  fb21		       a8		      TAY		; 2
   2196  fb22		       b9 9c fc 	      LDA	SpeedToBarLookup,Y	;4
   2197  fb25		       85 d2		      STA	ScoreD2	;3
   2198  fb27		       60		      RTS
   2199  fb28
   2200  fb28							; Moved here because of rom space.
   2201  fb28							; The only SBR in constants space
   2202  fb28				   DrawQrCode
   2203  fb28		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2204  fb2a		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2205  fb2c		       a9 01		      LDA	#%00000001	; Mirror playfield
   2206  fb2e		       85 0a		      STA	CTRLPF
   2207  fb30		       20 d1 f6 	      JSR	ClearAll	; To be 100 sure!
   2208  fb33		       ad 82 02 	      LDA	SWCHB
   2209  fb36		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2210  fb38		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2211  fb3a		       f0 07		      BEQ	StoreReversedQrCode
   2212  fb3c		       86 09		      STX	COLUBK
   2213  fb3e		       84 08		      STY	COLUPF
   2214  fb40		       4c 47 fb 	      JMP	ContinueQrCode
   2215  fb43				   StoreReversedQrCode
   2216  fb43		       86 08		      STX	COLUPF
   2217  fb45		       84 09		      STY	COLUBK
   2218  fb47
   2219  fb47				   ContinueQrCode
   2220  fb47		       a2 09		      LDX	#9
   2221  fb49		       20 20 f8 	      JSR	HMoveXTimes
   2222  fb4c		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2223  fb4e		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2224  fb50		       20 f9 f7 	      JSR	WaitForVblankEnd
   2225  fb53		       20 0c f8 	      JSR	Sleep8Lines
   2226  fb56		       20 0c f8 	      JSR	Sleep8Lines
   2227  fb59		       20 0c f8 	      JSR	Sleep8Lines
   2228  fb5c
   2229  fb5c				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2230  fb5c		       85 02		      STA	WSYNC
   2231  fb5e		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2232  fb61		       85 0e		      STA	PF1	;3
   2233  fb63		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2234  fb66		       85 0f		      STA	PF2	;3
      0  fb68					      SLEEP	27	; 
      1  fb68				   .CYCLES    SET	27
      2  fb68
      3  fb68				  -	      IF	.CYCLES < 2
      4  fb68				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb68				  -	      ERR
      6  fb68					      ENDIF
      7  fb68
      8  fb68					      IF	.CYCLES & 1
      9  fb68				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb68				  -	      nop	0
     11  fb68					      ELSE
     12  fb68		       24 00		      bit	VSYNC
     13  fb6a					      ENDIF
     14  fb6a				   .CYCLES    SET	.CYCLES - 3
     15  fb6a					      ENDIF
     16  fb6a
     17  fb6a					      REPEAT	.CYCLES / 2
     18  fb6a		       ea		      nop
     17  fb6a					      REPEND
     18  fb6b		       ea		      nop
     17  fb6b					      REPEND
     18  fb6c		       ea		      nop
     17  fb6c					      REPEND
     18  fb6d		       ea		      nop
     17  fb6d					      REPEND
     18  fb6e		       ea		      nop
     17  fb6e					      REPEND
     18  fb6f		       ea		      nop
     17  fb6f					      REPEND
     18  fb70		       ea		      nop
     17  fb70					      REPEND
     18  fb71		       ea		      nop
     17  fb71					      REPEND
     18  fb72		       ea		      nop
     17  fb72					      REPEND
     18  fb73		       ea		      nop
     17  fb73					      REPEND
     18  fb74		       ea		      nop
     17  fb74					      REPEND
     18  fb75		       ea		      nop
     19  fb76					      REPEND
   2236  fb76		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2237  fb79		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2238  fb7b		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2239  fb7e		       85 0e		      STA	PF1	;3
   2240  fb80
   2241  fb80		       ca		      DEX		;2
   2242  fb81		       d0 d9		      BNE	QrCodeLoop	;2
   2243  fb83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2244  fb85		       88		      DEY		;2
   2245  fb86		       10 d4		      BPL	QrCodeLoop	;4
   2246  fb88
   2247  fb88				   EndQrCodeLoop
   2248  fb88		       85 02		      STA	WSYNC	;
   2249  fb8a		       a9 00		      LDA	#0
   2250  fb8c		       85 0e		      STA	PF1	;3
   2251  fb8e		       85 0f		      STA	PF2	;3
   2252  fb90
   2253  fb90		       20 13 f8 	      JSR	Sleep32Lines
   2254  fb93		       4c 60 f5 	      JMP	PrepareOverscan
   2255  fb96
   2256  fb96							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2257  fc00					      org	$FC00
   2258  fc00				   QrCode1
   2259  fc00		       1f		      .byte.b	#%00011111
   2260  fc01		       10		      .byte.b	#%00010000
   2261  fc02		       17		      .byte.b	#%00010111
   2262  fc03		       17		      .byte.b	#%00010111
   2263  fc04		       17		      .byte.b	#%00010111
   2264  fc05		       10		      .byte.b	#%00010000
   2265  fc06		       1f		      .byte.b	#%00011111
   2266  fc07		       00		      .byte.b	#%00000000
   2267  fc08		       17		      .byte.b	#%00010111
   2268  fc09		       10		      .byte.b	#%00010000
   2269  fc0a		       1d		      .byte.b	#%00011101
   2270  fc0b		       16		      .byte.b	#%00010110
   2271  fc0c		       03		      .byte.b	#%00000011
   2272  fc0d		       19		      .byte.b	#%00011001
   2273  fc0e		       13		      .byte.b	#%00010011
   2274  fc0f		       1c		      .byte.b	#%00011100
   2275  fc10		       0b		      .byte.b	#%00001011
   2276  fc11		       00		      .byte.b	#%00000000
   2277  fc12		       1f		      .byte.b	#%00011111
   2278  fc13		       10		      .byte.b	#%00010000
   2279  fc14		       17		      .byte.b	#%00010111
   2280  fc15		       17		      .byte.b	#%00010111
   2281  fc16		       17		      .byte.b	#%00010111
   2282  fc17		       10		      .byte.b	#%00010000
   2283  fc18		       1f		      .byte.b	#%00011111
   2284  fc19
   2285  fc19				   QrCode2
   2286  fc19		       c3		      .byte.b	#%11000011
   2287  fc1a		       9a		      .byte.b	#%10011010
   2288  fc1b		       82		      .byte.b	#%10000010
   2289  fc1c		       da		      .byte.b	#%11011010
   2290  fc1d		       aa		      .byte.b	#%10101010
   2291  fc1e		       ca		      .byte.b	#%11001010
   2292  fc1f		       f3		      .byte.b	#%11110011
   2293  fc20		       78		      .byte.b	#%01111000
   2294  fc21		       df		      .byte.b	#%11011111
   2295  fc22		       fc		      .byte.b	#%11111100
   2296  fc23		       c7		      .byte.b	#%11000111
   2297  fc24		       98		      .byte.b	#%10011000
   2298  fc25		       23		      .byte.b	#%00100011
   2299  fc26		       b9		      .byte.b	#%10111001
   2300  fc27		       d2		      .byte.b	#%11010010
   2301  fc28		       30		      .byte.b	#%00110000
   2302  fc29		       eb		      .byte.b	#%11101011
   2303  fc2a		       28		      .byte.b	#%00101000
   2304  fc2b		       ab		      .byte.b	#%10101011
   2305  fc2c		       72		      .byte.b	#%01110010
   2306  fc2d		       fa		      .byte.b	#%11111010
   2307  fc2e		       7a		      .byte.b	#%01111010
   2308  fc2f		       32		      .byte.b	#%00110010
   2309  fc30		       3a		      .byte.b	#%00111010
   2310  fc31		       63		      .byte.b	#%01100011
   2311  fc32
   2312  fc32				   QrCode3
   2313  fc32		       98		      .byte.b	#%10011000
   2314  fc33		       c3		      .byte.b	#%11000011
   2315  fc34		       39		      .byte.b	#%00111001
   2316  fc35		       34		      .byte.b	#%00110100
   2317  fc36		       ff		      .byte.b	#%11111111
   2318  fc37		       71		      .byte.b	#%01110001
   2319  fc38		       d5		      .byte.b	#%11010101
   2320  fc39		       d1		      .byte.b	#%11010001
   2321  fc3a		       5f		      .byte.b	#%01011111
   2322  fc3b		       26		      .byte.b	#%00100110
   2323  fc3c		       2d		      .byte.b	#%00101101
   2324  fc3d		       e9		      .byte.b	#%11101001
   2325  fc3e		       d6		      .byte.b	#%11010110
   2326  fc3f		       26		      .byte.b	#%00100110
   2327  fc40		       ba		      .byte.b	#%10111010
   2328  fc41		       03		      .byte.b	#%00000011
   2329  fc42		       dd		      .byte.b	#%11011101
   2330  fc43		       e0		      .byte.b	#%11100000
   2331  fc44		       57		      .byte.b	#%01010111
   2332  fc45		       14		      .byte.b	#%00010100
   2333  fc46		       35		      .byte.b	#%00110101
   2334  fc47		       e5		      .byte.b	#%11100101
   2335  fc48		       b5		      .byte.b	#%10110101
   2336  fc49		       d4		      .byte.b	#%11010100
   2337  fc4a		       97		      .byte.b	#%10010111
   2338  fc4b
   2339  fc4b				   QrCode4
   2340  fc4b		       09		      .byte.b	#%00001001
   2341  fc4c		       0e		      .byte.b	#%00001110
   2342  fc4d		       0f		      .byte.b	#%00001111
   2343  fc4e		       0c		      .byte.b	#%00001100
   2344  fc4f		       0c		      .byte.b	#%00001100
   2345  fc50		       08		      .byte.b	#%00001000
   2346  fc51		       08		      .byte.b	#%00001000
   2347  fc52		       06		      .byte.b	#%00000110
   2348  fc53		       06		      .byte.b	#%00000110
   2349  fc54		       0b		      .byte.b	#%00001011
   2350  fc55		       0f		      .byte.b	#%00001111
   2351  fc56		       04		      .byte.b	#%00000100
   2352  fc57		       08		      .byte.b	#%00001000
   2353  fc58		       0f		      .byte.b	#%00001111
   2354  fc59		       09		      .byte.b	#%00001001
   2355  fc5a		       07		      .byte.b	#%00000111
   2356  fc5b		       05		      .byte.b	#%00000101
   2357  fc5c		       00		      .byte.b	#%00000000
   2358  fc5d		       0f		      .byte.b	#%00001111
   2359  fc5e		       08		      .byte.b	#%00001000
   2360  fc5f		       0b		      .byte.b	#%00001011
   2361  fc60		       0b		      .byte.b	#%00001011
   2362  fc61		       0b		      .byte.b	#%00001011
   2363  fc62		       08		      .byte.b	#%00001000
   2364  fc63		       0f		      .byte.b	#%00001111
   2365  fc64
   2366  fc64				   PlayerToUpMask
   2367  fc64		       10		      .byte.b	#%00010000	;
   2368  fc65		       01		      .byte.b	#%00000001	;
   2369  fc66
   2370  fc66				   PlayerToDownMask
   2371  fc66		       20		      .byte.b	#%00100000	;
   2372  fc67		       02		      .byte.b	#%00000010	;
   2373  fc68
   2374  fc68				   PlayerToLeftMask
   2375  fc68		       40		      .byte.b	#%01000000	;
   2376  fc69		       04		      .byte.b	#%00000100	;
   2377  fc6a
   2378  fc6a				   PlayerToRightMask
   2379  fc6a		       80		      .byte.b	#%10000000	;
   2380  fc6b		       08		      .byte.b	#%00001000	;
   2381  fc6c
   2382  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2383  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2384  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2385  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2386  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2387  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2388  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2389  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2390  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2391  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2392  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2393  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2394  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2395  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2396  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2397  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2398  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2399  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2400  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2401  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2402  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2403  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2404  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2405  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2406  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2407  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2408  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2409  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2410  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2411  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2412  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2413  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2414  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2415  fc8c
   2416  fc8c
   2417  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2418  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2419  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2420  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2421  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2422  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2423  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2424  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2425  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2426  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2427  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2428  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2429  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2430  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2431  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2432  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2433  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2434  fc9c
   2435  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2436  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2437  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2438  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2439  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2440  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2441  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2442  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2443  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2444  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2445  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2446  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2447  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2448  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2449  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2450  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2451  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2452  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2453  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2454  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2455  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2456  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2457  fcb1
   2458  fcb1				   PlayerToDefaultColor
   2459  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2460  fcb2		       98		      .byte.b	#PLAYER1_COLOR
   2461  fcb3
   2462  fcb3				   PlayerToScoreGoodColor
   2463  fcb3		       37		      .byte.b	#SCORE_FONT_COLOR_GOOD
   2464  fcb4		       d8		      .byte.b	#OP_SCORE_FONT_COLOR_GOOD
   2465  fcb5
   2466  fcb5				   PlayerToScoreStartColor
   2467  fcb5		       38		      .byte.b	#SCORE_FONT_COLOR_START
   2468  fcb6		       c8		      .byte.b	#OP_SCORE_FONT_COLOR_START
   2469  fcb7
   2470  fcb7				   PlayerToScoreOverColor
   2471  fcb7		       0c		      .byte.b	#SCORE_FONT_COLOR_OVER
   2472  fcb8		       ab		      .byte.b	#OP_SCORE_FONT_COLOR_OVER
   2473  fcb9
   2474  fcb9				   PlayerToScoreBadColor
   2475  fcb9		       44		      .byte.b	#SCORE_FONT_COLOR_BAD
   2476  fcba		       56		      .byte.b	#OP_SCORE_FONT_COLOR_BAD
   2477  fcbb
   2478  fd00					      org	$FD00
   2479  fd00				   Font
   2480  fd00				   C0
   2481  fd00		       e7		      .byte.b	#%11100111	;
   2482  fd01		       a5		      .byte.b	#%10100101	; 
   2483  fd02		       a5		      .byte.b	#%10100101	; 
   2484  fd03		       a5		      .byte.b	#%10100101	; 
   2485  fd04		       e7		      .byte.b	#%11100111	;	
   2486  fd05				   C1
   2487  fd05		       e7		      .byte.b	#%11100111	;
   2488  fd06		       42		      .byte.b	#%01000010	; 
   2489  fd07		       42		      .byte.b	#%01000010	; 
   2490  fd08		       42		      .byte.b	#%01000010	; 
   2491  fd09		       66		      .byte.b	#%01100110	;
   2492  fd0a				   C2
   2493  fd0a		       e7		      .byte.b	#%11100111	;
   2494  fd0b		       24		      .byte.b	#%00100100	; 
   2495  fd0c		       e7		      .byte.b	#%11100111	; 
   2496  fd0d		       81		      .byte.b	#%10000001	; 
   2497  fd0e		       e7		      .byte.b	#%11100111	;
   2498  fd0f				   C3
   2499  fd0f		       e7		      .byte.b	#%11100111	;
   2500  fd10		       81		      .byte.b	#%10000001	; 
   2501  fd11		       e7		      .byte.b	#%11100111	; 
   2502  fd12		       81		      .byte.b	#%10000001	; 
   2503  fd13		       e7		      .byte.b	#%11100111	;
   2504  fd14				   C4
   2505  fd14		       81		      .byte.b	#%10000001	;
   2506  fd15		       81		      .byte.b	#%10000001	; 
   2507  fd16		       e7		      .byte.b	#%11100111	; 
   2508  fd17		       a5		      .byte.b	#%10100101	; 
   2509  fd18		       a5		      .byte.b	#%10100101	;
   2510  fd19				   C5
   2511  fd19		       e7		      .byte.b	#%11100111	;
   2512  fd1a		       81		      .byte.b	#%10000001	; 
   2513  fd1b		       e7		      .byte.b	#%11100111	; 
   2514  fd1c		       24		      .byte.b	#%00100100	; 
   2515  fd1d		       e7		      .byte.b	#%11100111	;
   2516  fd1e				   C6
   2517  fd1e		       e7		      .byte.b	#%11100111	;
   2518  fd1f		       a5		      .byte.b	#%10100101	; 
   2519  fd20		       e7		      .byte.b	#%11100111	; 
   2520  fd21		       24		      .byte.b	#%00100100	; 
   2521  fd22		       e7		      .byte.b	#%11100111	;
   2522  fd23				   C7
   2523  fd23		       81		      .byte.b	#%10000001	;
   2524  fd24		       81		      .byte.b	#%10000001	; 
   2525  fd25		       81		      .byte.b	#%10000001	; 
   2526  fd26		       81		      .byte.b	#%10000001	; 
   2527  fd27		       e7		      .byte.b	#%11100111	;
   2528  fd28				   C8
   2529  fd28		       e7		      .byte.b	#%11100111	;
   2530  fd29		       a5		      .byte.b	#%10100101	; 
   2531  fd2a		       e7		      .byte.b	#%11100111	; 
   2532  fd2b		       a5		      .byte.b	#%10100101	; 
   2533  fd2c		       e7		      .byte.b	#%11100111	;
   2534  fd2d				   C9
   2535  fd2d		       e7		      .byte.b	#%11100111	;
   2536  fd2e		       81		      .byte.b	#%10000001	; 
   2537  fd2f		       e7		      .byte.b	#%11100111	; 
   2538  fd30		       a5		      .byte.b	#%10100101	; 
   2539  fd31		       e7		      .byte.b	#%11100111	;
   2540  fd32				   CA
   2541  fd32		       a5		      .byte.b	#%10100101	;
   2542  fd33		       a5		      .byte.b	#%10100101	; 
   2543  fd34		       e7		      .byte.b	#%11100111	; 
   2544  fd35		       a5		      .byte.b	#%10100101	; 
   2545  fd36		       e7		      .byte.b	#%11100111	;
   2546  fd37				   CB
   2547  fd37		       66		      .byte.b	#%01100110	;
   2548  fd38		       a5		      .byte.b	#%10100101	; 
   2549  fd39		       66		      .byte.b	#%01100110	; 
   2550  fd3a		       a5		      .byte.b	#%10100101	;
   2551  fd3b		       66		      .byte.b	#%01100110	;
   2552  fd3c				   CC
   2553  fd3c		       e7		      .byte.b	#%11100111	;
   2554  fd3d		       24		      .byte.b	#%00100100	; 
   2555  fd3e		       24		      .byte.b	#%00100100	; 
   2556  fd3f		       24		      .byte.b	#%00100100	;
   2557  fd40		       e7		      .byte.b	#%11100111	;
   2558  fd41
   2559  fd41				   CD
   2560  fd41		       66		      .byte.b	#%01100110	;
   2561  fd42		       a5		      .byte.b	#%10100101	; 
   2562  fd43		       a5		      .byte.b	#%10100101	; 
   2563  fd44		       a5		      .byte.b	#%10100101	;
   2564  fd45		       66		      .byte.b	#%01100110	;
   2565  fd46
   2566  fd46				   CE
   2567  fd46		       e7		      .byte.b	#%11100111	;
   2568  fd47		       24		      .byte.b	#%00100100	; 
   2569  fd48		       e7		      .byte.b	#%11100111	; 
   2570  fd49		       24		      .byte.b	#%00100100	; 
   2571  fd4a		       e7		      .byte.b	#%11100111	;
   2572  fd4b
   2573  fd4b				   CF
   2574  fd4b		       24		      .byte.b	#%00100100	;
   2575  fd4c		       24		      .byte.b	#%00100100	; 
   2576  fd4d		       e7		      .byte.b	#%11100111	; 
   2577  fd4e		       24		      .byte.b	#%00100100	; 
   2578  fd4f		       e7		      .byte.b	#%11100111	;
   2579  fd50
   2580  fd50				   CG
   2581  fd50		       c3		      .byte.b	#%11000011	;
   2582  fd51		       a5		      .byte.b	#%10100101	; 
   2583  fd52		       a5		      .byte.b	#%10100101	; 
   2584  fd53		       24		      .byte.b	#%00100100	; 
   2585  fd54		       c3		      .byte.b	#%11000011	;	
   2586  fd55
   2587  fd55				   CH
   2588  fd55		       a5		      .byte.b	#%10100101	;
   2589  fd56		       a5		      .byte.b	#%10100101	; 
   2590  fd57		       e7		      .byte.b	#%11100111	; 
   2591  fd58		       a5		      .byte.b	#%10100101	; 
   2592  fd59		       a5		      .byte.b	#%10100101	;
   2593  fd5a
   2594  fd5a				   CI
   2595  fd5a		       e7		      .byte.b	#%11100111	;
   2596  fd5b		       42		      .byte.b	#%01000010	; 
   2597  fd5c		       42		      .byte.b	#%01000010	; 
   2598  fd5d		       42		      .byte.b	#%01000010	; 
   2599  fd5e		       e7		      .byte.b	#%11100111	;
   2600  fd5f
   2601  fd5f				   CJ
   2602  fd5f		       e7		      .byte.b	#%11100111	;
   2603  fd60		       a5		      .byte.b	#%10100101	; 
   2604  fd61		       81		      .byte.b	#%10000001	; 
   2605  fd62		       81		      .byte.b	#%10000001	; 
   2606  fd63		       81		      .byte.b	#%10000001	;	
   2607  fd64
   2608  fd64				   CK
   2609  fd64		       a5		      .byte.b	#%10100101	;
   2610  fd65		       a5		      .byte.b	#%10100101	; 
   2611  fd66		       66		      .byte.b	#%01100110	; 
   2612  fd67		       a5		      .byte.b	#%10100101	; 
   2613  fd68		       a5		      .byte.b	#%10100101	;
   2614  fd69
   2615  fd69				   CL
   2616  fd69		       e7		      .byte.b	#%11100111	;
   2617  fd6a		       24		      .byte.b	#%00100100	; 
   2618  fd6b		       24		      .byte.b	#%00100100	; 
   2619  fd6c		       24		      .byte.b	#%00100100	; 
   2620  fd6d		       24		      .byte.b	#%00100100	;
   2621  fd6e
   2622  fd6e				   CM
   2623  fd6e		       a5		      .byte.b	#%10100101	;
   2624  fd6f		       a5		      .byte.b	#%10100101	; 
   2625  fd70		       a5		      .byte.b	#%10100101	; 
   2626  fd71		       e7		      .byte.b	#%11100111	; 
   2627  fd72		       a5		      .byte.b	#%10100101	;
   2628  fd73
   2629  fd73				   CN
   2630  fd73		       a5		      .byte.b	#%10100101	;
   2631  fd74		       a5		      .byte.b	#%10100101	; 
   2632  fd75		       a5		      .byte.b	#%10100101	; 
   2633  fd76		       a5		      .byte.b	#%10100101	; 
   2634  fd77		       66		      .byte.b	#%01100110	;	
   2635  fd78
   2636  fd78
   2637  fd78				   CO
   2638  fd78		       42		      .byte.b	#%01000010	;
   2639  fd79		       a5		      .byte.b	#%10100101	; 
   2640  fd7a		       a5		      .byte.b	#%10100101	; 
   2641  fd7b		       a5		      .byte.b	#%10100101	; 
   2642  fd7c		       42		      .byte.b	#%01000010	;	
   2643  fd7d
   2644  fd7d				   CP
   2645  fd7d		       24		      .byte.b	#%00100100	;
   2646  fd7e		       24		      .byte.b	#%00100100	; 
   2647  fd7f		       e7		      .byte.b	#%11100111	; 
   2648  fd80		       a5		      .byte.b	#%10100101	; 
   2649  fd81		       e7		      .byte.b	#%11100111	;
   2650  fd82
   2651  fd82				   CQ
   2652  fd82		       81		      .byte.b	#%10000001	;
   2653  fd83		       e5		      .byte.b	#%11100101	; 
   2654  fd84		       a5		      .byte.b	#%10100101	; 
   2655  fd85		       a5		      .byte.b	#%10100101	; 
   2656  fd86		       e7		      .byte.b	#%11100111	;	
   2657  fd87
   2658  fd87				   CR
   2659  fd87		       a5		      .byte.b	#%10100101	;
   2660  fd88		       a5		      .byte.b	#%10100101	; 
   2661  fd89		       66		      .byte.b	#%01100110	; 
   2662  fd8a		       a5		      .byte.b	#%10100101	; 
   2663  fd8b		       66		      .byte.b	#%01100110	;
   2664  fd8c
   2665  fd8c				   CS
   2666  fd8c		       66		      .byte.b	#%01100110	;
   2667  fd8d		       81		      .byte.b	#%10000001	; 
   2668  fd8e		       42		      .byte.b	#%01000010	; 
   2669  fd8f		       24		      .byte.b	#%00100100	; 
   2670  fd90		       c3		      .byte.b	#%11000011	;
   2671  fd91
   2672  fd91				   CT
   2673  fd91		       42		      .byte.b	#%01000010	;
   2674  fd92		       42		      .byte.b	#%01000010	; 
   2675  fd93		       42		      .byte.b	#%01000010	; 
   2676  fd94		       42		      .byte.b	#%01000010	; 
   2677  fd95		       e7		      .byte.b	#%11100111	;
   2678  fd96
   2679  fd96				   CU
   2680  fd96		       e7		      .byte.b	#%11100111	;
   2681  fd97		       a5		      .byte.b	#%10100101	; 
   2682  fd98		       a5		      .byte.b	#%10100101	; 
   2683  fd99		       a5		      .byte.b	#%10100101	; 
   2684  fd9a		       a5		      .byte.b	#%10100101	;	
   2685  fd9b
   2686  fd9b				   CW
   2687  fd9b		       a5		      .byte.b	#%10100101	;
   2688  fd9c		       e7		      .byte.b	#%11100111	; 
   2689  fd9d		       a5		      .byte.b	#%10100101	; 
   2690  fd9e		       a5		      .byte.b	#%10100101	; 
   2691  fd9f		       a5		      .byte.b	#%10100101	;
   2692  fda0
   2693  fda0				   CY
   2694  fda0		       42		      .byte.b	#%01000010	;
   2695  fda1		       42		      .byte.b	#%01000010	; 
   2696  fda2		       42		      .byte.b	#%01000010	; 
   2697  fda3		       a5		      .byte.b	#%10100101	; 
   2698  fda4		       a5		      .byte.b	#%10100101	;
   2699  fda5
   2700  fda5				   Exclamation
   2701  fda5		       42		      .byte.b	#%01000010	;
   2702  fda6		       00		      .byte.b	#%00000000	; 
   2703  fda7		       42		      .byte.b	#%01000010	; 
   2704  fda8		       42		      .byte.b	#%01000010	; 
   2705  fda9		       42		      .byte.b	#%01000010	;
   2706  fdaa
   2707  fdaa				   Pipe
   2708  fdaa				   Colon
   2709  fdaa		       42		      .byte.b	#%01000010	;
   2710  fdab		       42		      .byte.b	#%01000010	; 
   2711  fdac		       00		      .byte.b	#%00000000	; 
   2712  fdad		       42		      .byte.b	#%01000010	; 
   2713  fdae		       42		      .byte.b	#%01000010	;
   2714  fdaf
   2715  fdaf				   Space
   2716  fdaf				   C0B
   2717  fdaf		       00		      .byte.b	#%00000000	;
   2718  fdb0		       00		      .byte.b	#%00000000	; 
   2719  fdb1		       00		      .byte.b	#%00000000	; 
   2720  fdb2		       00		      .byte.b	#%00000000	; 
   2721  fdb3		       00		      .byte.b	#%00000000	;	
   2722  fdb4				   C1B
   2723  fdb4		       24		      .byte.b	#%00100100	;
   2724  fdb5		       00		      .byte.b	#%00000000	; 
   2725  fdb6		       00		      .byte.b	#%00000000	; 
   2726  fdb7		       00		      .byte.b	#%00000000	; 
   2727  fdb8		       00		      .byte.b	#%00000000	;
   2728  fdb9				   C2B
   2729  fdb9		       66		      .byte.b	#%01100110	;
   2730  fdba		       00		      .byte.b	#%00000000	; 
   2731  fdbb		       00		      .byte.b	#%00000000	; 
   2732  fdbc		       00		      .byte.b	#%00000000	; 
   2733  fdbd		       00		      .byte.b	#%00000000	;
   2734  fdbe				   C3B
   2735  fdbe		       e7		      .byte.b	#%11100111	;
   2736  fdbf		       00		      .byte.b	#%00000000	; 
   2737  fdc0		       00		      .byte.b	#%00000000	; 
   2738  fdc1		       00		      .byte.b	#%00000000	; 
   2739  fdc2		       00		      .byte.b	#%00000000	;
   2740  fdc3				   C4B
   2741  fdc3		       e7		      .byte.b	#%11100111	;
   2742  fdc4		       24		      .byte.b	#%00100100	; 
   2743  fdc5		       00		      .byte.b	#%00000000	; 
   2744  fdc6		       00		      .byte.b	#%00000000	; 
   2745  fdc7		       00		      .byte.b	#%00000000	;
   2746  fdc8				   C5B
   2747  fdc8		       e7		      .byte.b	#%11100111	;
   2748  fdc9		       66		      .byte.b	#%01100110	; 
   2749  fdca		       00		      .byte.b	#%00000000	; 
   2750  fdcb		       00		      .byte.b	#%00000000	; 
   2751  fdcc		       00		      .byte.b	#%00000000	;
   2752  fdcd				   C6B
   2753  fdcd		       e7		      .byte.b	#%11100111	;
   2754  fdce		       e7		      .byte.b	#%11100111	; 
   2755  fdcf		       00		      .byte.b	#%00000000	; 
   2756  fdd0		       00		      .byte.b	#%00000000	; 
   2757  fdd1		       00		      .byte.b	#%00000000	;
   2758  fdd2				   C7B
   2759  fdd2		       e7		      .byte.b	#%11100111	;
   2760  fdd3		       e7		      .byte.b	#%11100111	; 
   2761  fdd4		       24		      .byte.b	#%00100100	; 
   2762  fdd5		       00		      .byte.b	#%00000000	; 
   2763  fdd6		       00		      .byte.b	#%00000000	;
   2764  fdd7				   C8B
   2765  fdd7		       e7		      .byte.b	#%11100111	;
   2766  fdd8		       e7		      .byte.b	#%11100111	; 
   2767  fdd9		       66		      .byte.b	#%01100110	; 
   2768  fdda		       00		      .byte.b	#%00000000	; 
   2769  fddb		       00		      .byte.b	#%00000000	;
   2770  fddc				   C9B
   2771  fddc		       e7		      .byte.b	#%11100111	;
   2772  fddd		       e7		      .byte.b	#%11100111	; 
   2773  fdde		       e7		      .byte.b	#%11100111	; 
   2774  fddf		       00		      .byte.b	#%00000000	; 
   2775  fde0		       00		      .byte.b	#%00000000	;
   2776  fde1				   CAB
   2777  fde1		       e7		      .byte.b	#%11100111	;
   2778  fde2		       e7		      .byte.b	#%11100111	; 
   2779  fde3		       e7		      .byte.b	#%11100111	; 
   2780  fde4		       24		      .byte.b	#%00100100	; 
   2781  fde5		       00		      .byte.b	#%00000000	;
   2782  fde6				   CBB
   2783  fde6		       e7		      .byte.b	#%11100111	;
   2784  fde7		       e7		      .byte.b	#%11100111	; 
   2785  fde8		       e7		      .byte.b	#%11100111	; 
   2786  fde9		       66		      .byte.b	#%01100110	; 
   2787  fdea		       00		      .byte.b	#%00000000	;
   2788  fdeb				   CCB
   2789  fdeb		       e7		      .byte.b	#%11100111	;
   2790  fdec		       e7		      .byte.b	#%11100111	; 
   2791  fded		       e7		      .byte.b	#%11100111	; 
   2792  fdee		       e7		      .byte.b	#%11100111	; 
   2793  fdef		       00		      .byte.b	#%00000000	;
   2794  fdf0
   2795  fdf0				   CDB
   2796  fdf0		       e7		      .byte.b	#%11100111	;
   2797  fdf1		       e7		      .byte.b	#%11100111	; 
   2798  fdf2		       e7		      .byte.b	#%11100111	; 
   2799  fdf3		       e7		      .byte.b	#%11100111	; 
   2800  fdf4		       24		      .byte.b	#%00100100	;
   2801  fdf5
   2802  fdf5				   CEB
   2803  fdf5		       e7		      .byte.b	#%11100111	;
   2804  fdf6		       e7		      .byte.b	#%11100111	; 
   2805  fdf7		       e7		      .byte.b	#%11100111	; 
   2806  fdf8		       e7		      .byte.b	#%11100111	; 
   2807  fdf9		       66		      .byte.b	#%01100110	;
   2808  fdfa
   2809  fdfa				   CFB
   2810  fdfa		       e7		      .byte.b	#%11100111	;
   2811  fdfb		       e7		      .byte.b	#%11100111	; 
   2812  fdfc		       e7		      .byte.b	#%11100111	; 
   2813  fdfd		       e7		      .byte.b	#%11100111	; 
   2814  fdfe		       e7		      .byte.b	#%11100111	;
   2815  fdff
   2816  fe00					      org	$FE00
   2817  fe00				   AesTable
   2818  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2819  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2820  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2821  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2822  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2823  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2824  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2825  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2826  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2827  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2828  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2829  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2830  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2831  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2832  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2833  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2834  ff00
   2835  ff00					      org	$FF00
   2836  ff00				   StaticText		; All static text must be on the same MSB block. 
   2837  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2838  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2839  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2840  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2841  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2842  ff04
   2843  ff04				   HellwayLeftText
   2844  ff04		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2845  ff05		       59		      .byte.b	#<CH + #FONT_OFFSET
   2846  ff06		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2847  ff07		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2848  ff08
   2849  ff08				   HellwayRightText
   2850  ff08		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2851  ff09		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2852  ff0a		       81		      .byte.b	#<CP + #FONT_OFFSET
   2853  ff0b		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2854  ff0c		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2855  ff0d
   2856  ff0d				   OpbText
   2857  ff0d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2858  ff0e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2859  ff0f		       81		      .byte.b	#<CP + #FONT_OFFSET
   2860  ff10		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2861  ff11
   2862  ff11				   YearText
   2863  ff11		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2864  ff12		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2865  ff13		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2866  ff14		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2867  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2868  ff16
   2869  ff16				   GoText
   2870  ff16		       54		      .byte.b	#<CG + #FONT_OFFSET
   2871  ff17		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2872  ff18		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2873  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2874  ff1a
   2875  ff1a				   WinText
   2876  ff1a		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2877  ff1b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2878  ff1c		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2879  ff1d
   2880  ff1d				   LoseText
   2881  ff1d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2882  ff1e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2883  ff1f		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2884  ff20
   2885  ff20				   BuildNumberText
   2886  ff20		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2887  ff21		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2888  ff22		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2889  ff23		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2890  ff24		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2891  ff25
   2892  ff25				   ReadyText
   2893  ff25		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2894  ff26		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2895  ff27		       36		      .byte.b	#<CA + #FONT_OFFSET
   2896  ff28		       45		      .byte.b	#<CD + #FONT_OFFSET
   2897  ff29		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2898  ff2a
   2899  ff2a				   EndStaticText
   2900  ff2a
   2901  ff2a				   EngineSoundType
   2902  ff2a		       02		      .byte.b	#2
   2903  ff2b		       02		      .byte.b	#2
   2904  ff2c		       0e		      .byte.b	#14
   2905  ff2d		       06		      .byte.b	#6
   2906  ff2e		       06		      .byte.b	#6
   2907  ff2f		       0e		      .byte.b	#14
   2908  ff30
   2909  ff30				   EngineBaseFrequence
   2910  ff30		       1f		      .byte.b	#31
   2911  ff31		       15		      .byte.b	#21
   2912  ff32		       14		      .byte.b	#20
   2913  ff33		       1f		      .byte.b	#31
   2914  ff34		       16		      .byte.b	#22
   2915  ff35		       03		      .byte.b	#3
   2916  ff36
   2917  ff36				   CarSprite0		; Upside down, Original Car
   2918  ff36		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2919  ff3e				   CarSprite0NoPadding
   2920  ff3e		       7e		      .byte.b	#%01111110
   2921  ff3f		       24		      .byte.b	#%00100100
   2922  ff40		       bd		      .byte.b	#%10111101
   2923  ff41		       3c		      .byte.b	#%00111100
   2924  ff42		       bd		      .byte.b	#%10111101
   2925  ff43		       3c		      .byte.b	#%00111100
   2926  ff44
   2927  ff44				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2928  ff44		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2929  ff4c				   CarSprite1NoPadding
   2930  ff4c		       bd		      .byte.b	#%10111101
   2931  ff4d		       7e		      .byte.b	#%01111110
   2932  ff4e		       5a		      .byte.b	#%01011010
   2933  ff4f		       66		      .byte.b	#%01100110
   2934  ff50		       bd		      .byte.b	#%10111101
   2935  ff51		       3c		      .byte.b	#%00111100
   2936  ff52
   2937  ff52				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2938  ff52		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2939  ff5a				   CarSprite2NoPadding
   2940  ff5a		       7e		      .byte.b	#%01111110
   2941  ff5b		       a5		      .byte.b	#%10100101
   2942  ff5c		       42		      .byte.b	#%01000010
   2943  ff5d		       42		      .byte.b	#%01000010
   2944  ff5e		       bd		      .byte.b	#%10111101
   2945  ff5f		       7e		      .byte.b	#%01111110
   2946  ff60
   2947  ff60				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2948  ff60		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2949  ff68				   CarSprite3NoPadding
   2950  ff68		       3c		      .byte.b	#%00111100
   2951  ff69		       db		      .byte.b	#%11011011
   2952  ff6a		       db		      .byte.b	#%11011011
   2953  ff6b		       3c		      .byte.b	#%00111100
   2954  ff6c		       5a		      .byte.b	#%01011010
   2955  ff6d		       3c		      .byte.b	#%00111100
   2956  ff6e
   2957  ff6e		       00		      ds	1	; Car start line is wrong, I would have to change all constants, for the others the existing padding solves. Waste 1 byte, save sanity!
   2958  ff6f
   2959  ff6f				   ArrowUpSprite
   2960  ff6f		       18		      .byte.b	#%00011000
   2961  ff70		       18		      .byte.b	#%00011000
   2962  ff71		       7e		      .byte.b	#%01111110
   2963  ff72		       3c		      .byte.b	#%00111100
   2964  ff73		       18		      .byte.b	#%00011000
   2965  ff74
   2966  ff74				   ArrowDownSprite
   2967  ff74		       00 00		      ds	2
   2968  ff76		       18		      .byte.b	#%00011000
   2969  ff77		       3c		      .byte.b	#%00111100
   2970  ff78		       7e		      .byte.b	#%01111110
   2971  ff79		       18		      .byte.b	#%00011000
   2972  ff7a		       18		      .byte.b	#%00011000
   2973  ff7b
   2974  ff7b
   2975  ff7b				   TrafficSpeeds
   2976  ff7b		       00		      .byte.b	#$00	;  Trafic0 L
   2977  ff7c		       00		      .byte.b	#$00	;  Trafic0 H
   2978  ff7d		       0a		      .byte.b	#$0A	;  Trafic1 L
   2979  ff7e		       01		      .byte.b	#$01	;  Trafic1 H
   2980  ff7f		       e6		      .byte.b	#$E6	;  Trafic2 L
   2981  ff80		       00		      .byte.b	#$00	;  Trafic2 H
   2982  ff81		       c2		      .byte.b	#$C2	;  Trafic3 L
   2983  ff82		       00		      .byte.b	#$00	;  Trafic3 H
   2984  ff83		       9e		      .byte.b	#$9E	;  Trafic4 L
   2985  ff84		       00		      .byte.b	#$00	;  Trafic4 H
   2986  ff85				   TrafficSpeedsHighDelta
   2987  ff85		       00		      .byte.b	#$00	;  Trafic0 L
   2988  ff86		       00		      .byte.b	#$00	;  Trafic0 H
   2989  ff87		       0a		      .byte.b	#$0A	;  Trafic1 L
   2990  ff88		       01		      .byte.b	#$01	;  Trafic1 H
   2991  ff89		       c8		      .byte.b	#$C8	;  Trafic2 L
   2992  ff8a		       00		      .byte.b	#$00	;  Trafic2 H
   2993  ff8b		       86		      .byte.b	#$86	;  Trafic3 L
   2994  ff8c		       00		      .byte.b	#$00	;  Trafic3 H
   2995  ff8d		       44		      .byte.b	#$44	;  Trafic4 L
   2996  ff8e		       00		      .byte.b	#$00	;  Trafic4 H
   2997  ff8f
   2998  ff8f				   CarIdToSpriteAddressL
   2999  ff8f		       36		      .byte.b	#<CarSprite0
   3000  ff90		       44		      .byte.b	#<CarSprite1
   3001  ff91		       52		      .byte.b	#<CarSprite2
   3002  ff92		       60		      .byte.b	#<CarSprite3
   3003  ff93
   3004  ff93				   CarIdToSpriteAddressH
   3005  ff93		       ff		      .byte.b	#>CarSprite0
   3006  ff94		       ff		      .byte.b	#>CarSprite1
   3007  ff95		       ff		      .byte.b	#>CarSprite2
   3008  ff96		       ff		      .byte.b	#>CarSprite3
   3009  ff97
   3010  ff97				   EnemyCarIdToSpriteAddressL
   3011  ff97		       3e		      .byte.b	#<CarSprite0NoPadding
   3012  ff98		       4c		      .byte.b	#<CarSprite1NoPadding
   3013  ff99		       5a		      .byte.b	#<CarSprite2NoPadding
   3014  ff9a		       68		      .byte.b	#<CarSprite3NoPadding
   3015  ff9b
   3016  ff9b				   EnemyCarIdToSpriteAddressH
   3017  ff9b		       ff		      .byte.b	#>CarSprite0NoPadding
   3018  ff9c		       ff		      .byte.b	#>CarSprite1NoPadding
   3019  ff9d		       ff		      .byte.b	#>CarSprite2NoPadding
   3020  ff9e		       ff		      .byte.b	#>CarSprite3NoPadding
   3021  ff9f
   3022  ff9f				   CarIdToAccelerateSpeed
   3023  ff9f		       80		      .byte.b	#128
   3024  ffa0		       c0		      .byte.b	#192
   3025  ffa1		       60		      .byte.b	#96
   3026  ffa2		       c0		      .byte.b	#192
   3027  ffa3
   3028  ffa3				   CarIdToTimeoverBreakInterval 		; Glide
   3029  ffa3		       03		      .byte.b	#%00000011	;Every 4 frames
   3030  ffa4		       03		      .byte.b	#%00000011	;Every 4 frames
   3031  ffa5		       0f		      .byte.b	#%00001111	;Every 16 frames
   3032  ffa6		       03		      .byte.b	#%00000011	;Every 4 frames
   3033  ffa7
   3034  ffa7				   CarIdToMaxSpeedL
   3035  ffa7		       80		      .byte.b	#$80
   3036  ffa8		       00		      .byte.b	#$00	; One less gear
   3037  ffa9		       80		      .byte.b	#$80
   3038  ffaa		       80		      .byte.b	#$80
   3039  ffab
   3040  ffab				   CarIdToMaxGear
   3041  ffab		       05		      .byte.b	#5
   3042  ffac		       04		      .byte.b	#4	; One less gear
   3043  ffad		       05		      .byte.b	#5
   3044  ffae		       05		      .byte.b	#5
   3045  ffaf
   3046  ffaf				   GearToBreakSpeedTable
   3047  ffaf		       09		      .byte.b	#(BREAK_SPEED - 1)
   3048  ffb0		       09		      .byte.b	#(BREAK_SPEED - 1)
   3049  ffb1		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3050  ffb2		       0b		      .byte.b	#(BREAK_SPEED + 1)
   3051  ffb3		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3052  ffb4		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3053  ffb5
   3054  ffb5				   TrafficColorTable
   3055  ffb5		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3056  ffb6		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3057  ffb7		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3058  ffb8		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3059  ffb9
   3060  ffb9				   TrafficChanceTable
   3061  ffb9		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3062  ffba		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3063  ffbb		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3064  ffbc		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3065  ffbd
   3066  ffbd				   TrafficTimeTable
   3067  ffbd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3068  ffbe		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3069  ffbf		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3070  ffc0		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3071  ffc1		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3072  ffc2
   3073  ffc2
   3074  fffc					      org	$FFFC
   3075  fffc		       00 f0		      .word.w	BeforeStart
   3076  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
