------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 37	   SCORE_FONT_COLOR_GOOD =	$37
     58  f000		       00 d8	   OP_SCORE_FONT_COLOR_GOOD =	$D8
     59  f000
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 56	   OP_SCORE_FONT_COLOR_BAD =	$56
     62  f000
     63  f000		       00 38	   SCORE_FONT_COLOR_START =	$38	;Cannot be the same as good, font colors = game state
     64  f000		       00 c8	   OP_SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     65  f000
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000		       00 ab	   OP_SCORE_FONT_COLOR_OVER =	$AB
     68  f000
     69  f000		       00 f9	   PLAYER0_COLOR =	$F9
     70  f000		       00 98	   PLAYER1_COLOR =	$98
     71  f000
     72  f000		       00 20	   PLAYER_0_X_START =	32	;
     73  f000		       00 29	   PLAYER_1_X_START =	41	;
     74  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     75  f000
     76  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     77  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     78  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     79  f000
     80  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     81  f000
     82  f000		       00 00	   BLACK      =	$00	;
     83  f000
     84  f000		       00 10	   MAX_GAME_MODE =	16
     85  f000
     86  f000		       00 08	   PARALLAX_SIZE =	8
     87  f000
     88  f000		       00 05	   HALF_TEXT_SIZE =	5
     89  f000
     90  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     91  f000
     92  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     93  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     94  f000		       00 00	   QR_CODE_COLOR =	$00
     95  f000		       00 19	   QR_CODE_SIZE =	25
     96  f000
     97  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     98  f000
     99  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    100  f000		       00 29	   VBLANK_TIMER =	41
    101  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    102  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    103  f000
    104  f000		       00 08	   ENGINE_VOLUME =	8
    105  f000
    106  f000		       00 08	   CAR_SIZE   =	8
    107  f000
    108  f000		       00 80	   GRP0Cache  =	$80
    109  f000		       00 81	   PF0Cache   =	$81
    110  f000		       00 82	   PF1Cache   =	$82
    111  f000		       00 83	   PF2Cache   =	$83
    112  f000		       00 84	   GRP1Cache  =	$84
    113  f000		       00 85	   ENABLCache =	$85
    114  f000		       00 86	   ENAM0Cache =	$86
    115  f000		       00 87	   ENAM1Cache =	$87
    116  f000
    117  f000		       00 8c	   FrameCount0 =	$8C	;
    118  f000		       00 8d	   FrameCount1 =	$8D	;
    119  f000
    120  f000		       00 8e	   CollisionCounter =	$8E
    121  f000		       00 8f	   OpCollisionCounter =	$8F
    122  f000
    123  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    124  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    125  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    126  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    127  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    128  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    129  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    130  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    131  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000		       00 b4	   Tmp4       =	$B4
    139  f000		       00 b5	   Tmp5       =	$B5
    140  f000
    141  f000		       00 b6	   Player0X   =	$B6
    142  f000		       00 b7	   Player1X   =	$B7
    143  f000		       00 b8	   CountdownTimer =	$B8
    144  f000		       00 b9	   OpCountdownTimer =	$B9
    145  f000		       00 ba	   Traffic0Msb =	$BA
    146  f000		       00 bb	   OpTraffic0Msb =	$BB
    147  f000		       00 bc	   SwitchDebounceCounter =	$BC
    148  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    149  f000		       00 be	   TrafficChance =	$BE
    150  f000		       00 bf	   OpTrafficChance =	$BF
    151  f000
    152  f000		       00 c0	   CheckpointTime =	$C0
    153  f000		       00 c1	   OpCheckpointTime =	$C1
    154  f000		       00 c2	   TrafficColor =	$C2
    155  f000		       00 c3	   OpTrafficColor =	$C3
    156  f000		       00 c4	   CurrentDifficulty =	$C4
    157  f000		       00 c5	   OpCurrentDifficulty =	$C5
    158  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    159  f000
    160  f000		       00 c7	   CurrentCarId =	$C7
    161  f000		       00 c8	   OpCurrentCarId =	$C8
    162  f000
    163  f000		       00 c9	   ScoreFontColor =	$C9
    164  f000		       00 ca	   OpScoreFontColor =	$CA
    165  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    166  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    167  f000		       00 cd	   NextCheckpoint =	$CD
    168  f000		       00 ce	   OpNextCheckpoint =	$CE
    169  f000		       00 cf	   OpponentLine =	$CF
    170  f000
    171  f000		       00 d0	   ScoreD0    =	$D0
    172  f000		       00 d1	   ScoreD1    =	$D1
    173  f000		       00 d2	   ScoreD2    =	$D2
    174  f000		       00 d3	   ScoreD3    =	$D3
    175  f000		       00 d4	   ScoreD4    =	$D4
    176  f000
    177  f000		       00 d5	   Gear       =	$D5
    178  f000		       00 d6	   OpGear     =	$D6
    179  f000
    180  f000		       00 d7	   CarSpritePointerL =	$D7
    181  f000		       00 d8	   CarSpritePointerH =	$D8
    182  f000
    183  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    184  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    185  f000
    186  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    187  f000
    188  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    189  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    190  f000
    191  f000		       00 de	   Player0SpeedL =	$DE
    192  f000		       00 df	   Player1SpeedL =	$DF
    193  f000		       00 f0	   Player0SpeedH =	$F0
    194  f000		       00 f1	   Player1SpeedH =	$F1
    195  f000
    196  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 35 f7 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 71 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 de		      STA	Player0SpeedL
    257  f059		       85 df		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   StoreCurrentDifficulty
    274  f071		       86 c4		      STX	CurrentDifficulty
    275  f073		       86 c5		      STX	OpCurrentDifficulty
    276  f075		       a2 00		      LDX	#0
    277  f077		       20 ed f6 	      JSR	ConfigureDifficulty
    278  f07a		       e8		      INX
    279  f07b		       20 ed f6 	      JSR	ConfigureDifficulty
    280  f07e
    281  f07e				   SetGameNotRunning
    282  f07e		       a9 00		      LDA	#0
    283  f080		       85 bd		      STA	GameStatus
    284  f082
    285  f082				   ConfigureTimer
    286  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    287  f084		       85 b8		      STA	CountdownTimer	;3
    288  f086		       85 b9		      STA	OpCountdownTimer	;3
    289  f088
    290  f088				   ConfigurePlayer1XPosition
    291  f088		       a9 29		      LDA	#PLAYER_1_X_START	;2
    292  f08a		       85 b7		      STA	Player1X	;3
    293  f08c
    294  f08c				   ConfigureOpNextCheckpoint
    295  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    296  f08e		       85 ce		      STA	OpNextCheckpoint
    297  f090
    298  f090				   HPositioning 		; Avoid sleep doing needed stuff
    299  f090		       85 02		      STA	WSYNC
    300  f092
    301  f092				   ConfigurePlayer0XPosition
    302  f092		       a9 20		      LDA	#PLAYER_0_X_START	;2
    303  f094		       85 b6		      STA	Player0X	;3
    304  f096
    305  f096				   ConfigureMissileSize
    306  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    307  f098		       85 04		      STA	NUSIZ0	;3
    308  f09a		       85 05		      STA	NUSIZ1	;3
    309  f09c
    310  f09c				   ConfigureNextCheckpoint
    311  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    312  f09e		       85 cd		      STA	NextCheckpoint
    313  f0a0
    314  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    315  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	5	;
      1  f0a2				   .CYCLES    SET	5
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    317  f0a5		       85 12		      STA	RESM0
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    319  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    321  f0ab		       85 13		      STA	RESM1
      0  f0ad					      SLEEP	3
      1  f0ad				   .CYCLES    SET	3
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad					      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad					      ELSE
     12  f0ad		       24 00		      bit	VSYNC
     13  f0af					      ENDIF
     14  f0af				   .CYCLES    SET	.CYCLES - 3
     15  f0af					      ENDIF
     16  f0af
     17  f0af				  -	      REPEAT	.CYCLES / 2
     18  f0af				  -	      nop
     19  f0af					      REPEND
    323  f0af
    324  f0af		       a9 d0		      LDA	#$D0
    325  f0b1		       85 24		      STA	HMBL
    326  f0b3		       85 22		      STA	HMM0
    327  f0b5		       85 23		      STA	HMM1
    328  f0b7		       85 02		      STA	WSYNC
    329  f0b9		       85 2a		      STA	HMOVE
    330  f0bb		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    331  f0bd		       85 2b		      STA	HMCLR
      0  f0bf					      SLEEP	31
      1  f0bf				   .CYCLES    SET	31
      2  f0bf
      3  f0bf				  -	      IF	.CYCLES < 2
      4  f0bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bf				  -	      ERR
      6  f0bf					      ENDIF
      7  f0bf
      8  f0bf					      IF	.CYCLES & 1
      9  f0bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bf				  -	      nop	0
     11  f0bf					      ELSE
     12  f0bf		       24 00		      bit	VSYNC
     13  f0c1					      ENDIF
     14  f0c1				   .CYCLES    SET	.CYCLES - 3
     15  f0c1					      ENDIF
     16  f0c1
     17  f0c1					      REPEAT	.CYCLES / 2
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     19  f0cf					      REPEND
    333  f0cf		       85 10		      STA	RESP0
    334  f0d1		       85 11		      STA	RESP1
    335  f0d3
    336  f0d3				   WaitResetToEnd
    337  f0d3		       ad 84 02 	      LDA	INTIM
    338  f0d6		       d0 fb		      BNE	WaitResetToEnd
    339  f0d8
    340  f0d8				   MainLoop
    341  f0d8		       a9 02		      LDA	#2
    342  f0da		       85 00		      STA	VSYNC
    343  f0dc		       85 02		      STA	WSYNC
    344  f0de		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    345  f0e0							;Some free cycles here!
    346  f0e0				   PrepareMaxHMove
    347  f0e0		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    348  f0e2		       85 09		      STA	COLUBK
      0  f0e4					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e4				   .CYCLES    SET	24 - 11
      2  f0e4
      3  f0e4				  -	      IF	.CYCLES < 2
      4  f0e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e4				  -	      ERR
      6  f0e4					      ENDIF
      7  f0e4
      8  f0e4					      IF	.CYCLES & 1
      9  f0e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e4				  -	      nop	0
     11  f0e4					      ELSE
     12  f0e4		       24 00		      bit	VSYNC
     13  f0e6					      ENDIF
     14  f0e6				   .CYCLES    SET	.CYCLES - 3
     15  f0e6					      ENDIF
     16  f0e6
     17  f0e6					      REPEAT	.CYCLES / 2
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    350  f0eb		       a9 80		      LDA	#$80
    351  f0ed		       85 24		      STA	HMBL
    352  f0ef		       85 22		      STA	HMM0
    353  f0f1		       85 23		      STA	HMM1
    354  f0f3		       85 20		      STA	HMP0
    355  f0f5		       85 21		      STA	HMP1
    356  f0f7		       85 02		      STA	WSYNC
    357  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    358  f0fb
    359  f0fb				   ConfigVBlankTimer
    360  f0fb		       a5 c6		      LDA	GameMode
    361  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    362  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    363  f101		       a9 29		      LDA	#VBLANK_TIMER
    364  f103		       4c 08 f1 	      JMP	SetVblankTimer
    365  f106				   SetVblankTimerQrCode
    366  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    367  f108
    368  f108				   SetVblankTimer
    369  f108		       85 02		      STA	WSYNC	;3
    370  f10a		       8d 96 02 	      STA	TIM64T	;3	
    371  f10d		       a9 00		      LDA	#0	;2
    372  f10f		       85 00		      STA	VSYNC	;3	
    373  f111
    374  f111				   RandomizeGame
    375  f111		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f113		       d0 2d		      BNE	EndRandomizeGame
    377  f115		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f117		       29 02		      AND	#%00000010
    379  f119		       f0 24		      BEQ	DeterministicGame
    380  f11b		       a6 96		      LDX	TrafficOffset1 + 2
    381  f11d		       bd 00 fe 	      LDA	AesTable,X
    382  f120		       45 8c		      EOR	FrameCount0
    383  f122		       85 96		      STA	TrafficOffset1 + 2
    384  f124		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f126		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f128		       bd 00 fe 	      LDA	AesTable,X
    387  f12b		       45 8c		      EOR	FrameCount0
    388  f12d		       85 9a		      STA	TrafficOffset2 + 2
    389  f12f		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f131		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f133		       bd 00 fe 	      LDA	AesTable,X
    392  f136		       45 8c		      EOR	FrameCount0
    393  f138		       85 9e		      STA	TrafficOffset3 + 2
    394  f13a		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13c		       4c 42 f1 	      JMP	EndRandomizeGame
    396  f13f
    397  f13f				   DeterministicGame
    398  f13f		       20 35 f7 	      JSR	DefaultOffsets
    399  f142
    400  f142				   EndRandomizeGame
    401  f142
    402  f142				   CountFrame
    403  f142		       e6 8c		      INC	FrameCount0	; 5
    404  f144		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    405  f146		       e6 8d		      INC	FrameCount1	; 5 
    406  f148				   SkipIncFC1
    407  f148
    408  f148				   CallDrawQrCode
    409  f148		       a5 c6		      LDA	GameMode
    410  f14a		       c9 10		      CMP	#MAX_GAME_MODE
    411  f14c		       d0 03		      BNE	TestIsGameRunning
    412  f14e		       4c a6 fa 	      JMP	DrawQrCode
    413  f151
    414  f151							;Does not update the game if not running
    415  f151				   TestIsGameRunning
    416  f151		       a5 bd		      LDA	GameStatus	;3
    417  f153		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    418  f155				   SelectCarWithDpadCall		; Only do it when game is stoped
    419  f155		       a2 00		      LDX	#0	; Player 0
    420  f157		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    421  f159		       85 b0		      STA	Tmp0
    422  f15b		       20 39 f8 	      JSR	SelectCarWithDpad
    423  f15e		       e8		      INX		; Player 1
    424  f15f		       20 39 f8 	      JSR	SelectCarWithDpad
    425  f162
    426  f162							; Needs to draw the opponent in the correct line even when game stoped  
    427  f162							; Draeing is a destructive operation
    428  f162		       20 4b f8 	      JSR	ProcessOpponentLine
    429  f165
    430  f165				   CallConfigureCarSprites
    431  f165		       20 f3 f7 	      JSR	ConfigureCarSprites
    432  f168				   SkipUpdateLogicJump
    433  f168		       4c a0 f1 	      JMP	SkipUpdateLogic
    434  f16b				   ContinueWithGameLogic
    435  f16b
    436  f16b				   CallEverySecond		; Timer for now
    437  f16b		       a2 00		      LDX	#0
    438  f16d		       20 71 fa 	      JSR	EverySecond
    439  f170		       e8		      INX
    440  f171		       20 71 fa 	      JSR	EverySecond
    441  f174
    442  f174				   CallProcessSpeed
    443  f174		       a2 00		      LDX	#0
    444  f176		       20 85 f9 	      JSR	ProcessSpeed
    445  f179
    446  f179		       e8		      INX		; Player 1
    447  f17a		       20 85 f9 	      JSR	ProcessSpeed
    448  f17d
    449  f17d				   CallUpdateOffsets
    450  f17d		       a2 00		      LDX	#0	; Player 0
    451  f17f		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    452  f181		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    453  f183		       a5 de		      LDA	Player0SpeedL
    454  f185		       85 b4		      STA	Tmp4
    455  f187		       a5 f0		      LDA	Player0SpeedH
    456  f189		       85 b5		      STA	Tmp5
    457  f18b		       20 32 f9 	      JSR	UpdateOffsets
    458  f18e
    459  f18e							;LDX Exits the call with correct value.
    460  f18e		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    461  f190		       85 b3		      STA	Tmp3
    462  f192		       a5 df		      LDA	Player1SpeedL
    463  f194		       85 b4		      STA	Tmp4
    464  f196		       a5 f1		      LDA	Player1SpeedH
    465  f198		       85 b5		      STA	Tmp5
    466  f19a		       20 32 f9 	      JSR	UpdateOffsets
    467  f19d
    468  f19d				   CallProcessOpponentLine
    469  f19d		       20 4b f8 	      JSR	ProcessOpponentLine
    470  f1a0
    471  f1a0				   SkipUpdateLogic		; Continue here if not paused
    472  f1a0
    473  f1a0				   CallStatusUpdateSbr
    474  f1a0		       a2 00		      LDX	#0
    475  f1a2		       20 7e fa 	      JSR	CalculateGear
    476  f1a5		       20 8b fa 	      JSR	ProcessScoreFontColor
    477  f1a8		       e8		      INX
    478  f1a9		       20 7e fa 	      JSR	CalculateGear
    479  f1ac		       20 8b fa 	      JSR	ProcessScoreFontColor
    480  f1af
    481  f1af				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    482  f1af		       a5 8c		      LDA	FrameCount0
    483  f1b1		       29 01		      AND	#%00000001
    484  f1b3		       d0 0c		      BNE	CallProcessPlayer1Status
    485  f1b5				   CallProcessPlayer0Status
    486  f1b5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    487  f1b7		       85 b0		      STA	Tmp0
    488  f1b9		       a2 00		      LDX	#0
    489  f1bb		       20 28 fa 	      JSR	ProcessPlayerStatus
    490  f1be		       4c ca f1 	      JMP	EndCallProcessPlayerStatus
    491  f1c1				   CallProcessPlayer1Status
    492  f1c1		       a5 a2		      LDA	OpTrafficOffset0 + 2
    493  f1c3		       85 b0		      STA	Tmp0
    494  f1c5		       a2 01		      LDX	#1
    495  f1c7		       20 28 fa 	      JSR	ProcessPlayerStatus
    496  f1ca				   EndCallProcessPlayerStatus
    497  f1ca
    498  f1ca				   CallProcessPlayerSprites
    499  f1ca		       20 f3 f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    500  f1cd
    501  f1cd				   CallProcessSound		; We might save cycles by updating one channel per frame.
    502  f1cd		       a2 00		      LDX	#0
    503  f1cf		       a5 92		      LDA	TrafficOffset0 + 2
    504  f1d1		       85 b1		      STA	Tmp1
    505  f1d3		       20 02 f6 	      JSR	ProcessSound
    506  f1d6		       e8		      INX		; Player 1
    507  f1d7		       a5 a2		      LDA	OpTrafficOffset0 + 2
    508  f1d9		       85 b1		      STA	Tmp1
    509  f1db		       20 02 f6 	      JSR	ProcessSound
    510  f1de
    511  f1de				   ChooseTextSide		; 
    512  f1de		       a5 8c		      LDA	FrameCount0	;3
    513  f1e0		       29 01		      AND	#%00000001
    514  f1e2		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    515  f1e4		       4c a7 f2 	      JMP	RightScoreWrite
    516  f1e7
    517  f1e7				   LeftScoreWrite
    518  f1e7		       a5 bd		      LDA	GameStatus
    519  f1e9		       f0 11		      BEQ	PrintHellwayLeft
    520  f1eb		       a5 c9		      LDA	ScoreFontColor
    521  f1ed		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    522  f1ef		       f0 42		      BEQ	PrintPlayer0Checkpoint
    523  f1f1		       c9 38		      CMP	#SCORE_FONT_COLOR_START
    524  f1f3		       f0 46		      BEQ	PrintPlayer0StartGame
    525  f1f5		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    526  f1f7		       f0 29		      BEQ	ProcessPlayer0OverText
    527  f1f9				   ContinueP0Score
    528  f1f9		       4c 4a f2 	      JMP	Digit0Timer
    529  f1fc
    530  f1fc				   PrintHellwayLeft
    531  f1fc		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    532  f1fe		       30 08		      BMI	ContinueWithDefaultLeftText
    533  f200				   Player0IsReady
    534  f200		       a2 20		      LDX	#<ReadyText
    535  f202		       20 4a f7 	      JSR	PrintStaticText
    536  f205		       4c 5a f3 	      JMP	RightScoreWriteEnd	;3
    537  f208				   ContinueWithDefaultLeftText
    538  f208		       a5 8d		      LDA	FrameCount1
    539  f20a		       29 01		      AND	#1
    540  f20c		       d0 05		      BNE	PrintCreditsLeft
    541  f20e		       a2 03		      LDX	#<HellwayLeftText - 1	; Padding
    542  f210		       4c 15 f2 	      JMP	PrintGameMode
    543  f213				   PrintCreditsLeft
    544  f213		       a2 0c		      LDX	#<OpbText - 1	; Padding
    545  f215
    546  f215				   PrintGameMode
    547  f215		       20 4a f7 	      JSR	PrintStaticText
    548  f218		       a6 c6		      LDX	GameMode
    549  f21a		       bd 6c fc 	      LDA	FontLookup,X	;4 
    550  f21d		       85 d0		      STA	ScoreD0	;3
    551  f21f		       4c 5a f3 	      JMP	RightScoreWriteEnd	;3
    552  f222
    553  f222				   ProcessPlayer0OverText
    554  f222		       a5 f2		      LDA	IsOpponentInFront
    555  f224		       30 05		      BMI	PrintPlayer0Lose
    556  f226				   PrintPlayer0Win
    557  f226		       a2 1a		      LDX	#<WinText
    558  f228		       4c 2d f2 	      JMP	PrintPlayer0Status
    559  f22b				   PrintPlayer0Lose
    560  f22b		       a2 1d		      LDX	#<LoseText
    561  f22d				   PrintPlayer0Status
    562  f22d		       20 4a f7 	      JSR	PrintStaticText
    563  f230		       4c 80 f2 	      JMP	DistanceCheckpointCount	;3
    564  f233
    565  f233				   PrintPlayer0Checkpoint
    566  f233		       a2 00		      LDX	#<CheckpointText
    567  f235		       20 4a f7 	      JSR	PrintStaticText
    568  f238		       4c 40 f2 	      JMP	PrintPlayer0ScoreHoldChange	;3
    569  f23b
    570  f23b				   PrintPlayer0StartGame
    571  f23b		       a2 16		      LDX	#<GoText
    572  f23d		       20 4a f7 	      JSR	PrintStaticText
    573  f240
    574  f240				   PrintPlayer0ScoreHoldChange
    575  f240		       a2 00		      LDX	#0
    576  f242		       20 9b fa 	      JSR	PrintScoreHoldChange
    577  f245		       85 d4		      STA	ScoreD4
    578  f247		       4c 5a f3 	      JMP	RightScoreWriteEnd	;3
    579  f24a
    580  f24a				   Digit0Timer
    581  f24a		       a5 b8		      LDA	CountdownTimer	;3
    582  f24c		       85 b0		      STA	Tmp0
    583  f24e		       20 25 f8 	      JSR	BINBCD8
    584  f251							; LDA Tmp1 Also returned in A
    585  f251		       29 0f		      AND	#%00001111	;2
    586  f253		       aa		      TAX		; 2
    587  f254		       bd 6c fc 	      LDA	FontLookup,X	;4 
    588  f257		       85 d1		      STA	ScoreD1	;3
    589  f259
    590  f259				   Digit1Timer
    591  f259		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    592  f25b		       4a		      LSR		; 2
    593  f25c		       4a		      LSR		; 2
    594  f25d		       4a		      LSR		; 2
    595  f25e		       4a		      LSR		; 2
    596  f25f		       aa		      TAX		; 2
    597  f260		       bd 6c fc 	      LDA	FontLookup,X	;4
    598  f263		       85 d0		      STA	ScoreD0	;3
    599  f265
    600  f265				   SpeedBar
    601  f265		       a5 de		      LDA	Player0SpeedL
    602  f267		       29 e0		      AND	#%11100000	;2 Discard the last bits
    603  f269		       18		      CLC
    604  f26a		       2a		      ROL		;First goes into carry
    605  f26b		       2a		      ROL
    606  f26c		       2a		      ROL
    607  f26d		       2a		      ROL
    608  f26e		       85 b0		      STA	Tmp0
    609  f270		       a5 f0		      LDA	Player0SpeedH
    610  f272		       0a		      ASL
    611  f273		       0a		      ASL
    612  f274		       0a		      ASL
    613  f275		       05 b0		      ORA	Tmp0
    614  f277		       aa		      TAX		; 2
    615  f278		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    616  f27b		       85 d2		      STA	ScoreD2	;3
    617  f27d		       4c 80 f2 	      JMP	DistanceCheckpointCount
    618  f280
    619  f280							;Hack to hav it into branchable region
    620  f280
    621  f280							;End Hack
    622  f280
    623  f280				   DistanceCheckpointCount		; Will run all letters in the future
    624  f280		       a5 ba		      LDA	Traffic0Msb
    625  f282		       29 01		      AND	#%00000001
    626  f284		       0a		      ASL
    627  f285		       0a		      ASL
    628  f286		       0a		      ASL
    629  f287		       0a		      ASL
    630  f288		       85 b0		      STA	Tmp0
    631  f28a		       a5 92		      LDA	TrafficOffset0 + 2	;3
    632  f28c		       29 f0		      AND	#%11110000	;2
    633  f28e		       4a		      LSR
    634  f28f		       4a		      LSR
    635  f290		       4a		      LSR
    636  f291		       4a		      LSR
    637  f292		       05 b0		      ORA	Tmp0
    638  f294		       aa		      TAX		; 2
    639  f295		       bd 6c fc 	      LDA	FontLookup,X	;4 
    640  f298		       85 d3		      STA	ScoreD3	;3
    641  f29a
    642  f29a				   DistanceBar		; 16 subdivisions per checkpoint
    643  f29a		       a5 92		      LDA	TrafficOffset0 + 2	;3
    644  f29c		       29 0f		      AND	#%00001111	;2
    645  f29e		       aa		      TAX		; 2
    646  f29f		       bd 8c fc 	      LDA	BarLookup,X	;4 
    647  f2a2		       85 d4		      STA	ScoreD4	;3
    648  f2a4
    649  f2a4				   EndDrawDistance
    650  f2a4		       4c 5a f3 	      JMP	RightScoreWriteEnd	;3
    651  f2a7
    652  f2a7				   RightScoreWrite
    653  f2a7		       a5 bd		      LDA	GameStatus
    654  f2a9		       f0 11		      BEQ	PrintHellwayRight
    655  f2ab		       a5 ca		      LDA	OpScoreFontColor
    656  f2ad		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    657  f2af		       f0 3b		      BEQ	PrintPlayer1Checkpoint
    658  f2b1		       c9 c8		      CMP	#OP_SCORE_FONT_COLOR_START
    659  f2b3		       f0 3f		      BEQ	PrintPlayer1StartGame
    660  f2b5		       c9 ab		      CMP	#OP_SCORE_FONT_COLOR_OVER
    661  f2b7		       f0 22		      BEQ	ProcessPlayer1OverText
    662  f2b9				   ContinueP1Score
    663  f2b9		       4c 12 f3 	      JMP	OpDigit1Timer
    664  f2bc
    665  f2bc				   PrintHellwayRight
    666  f2bc		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    667  f2be		       30 08		      BMI	ContinueWithDefaultRightText
    668  f2c0				   Player1IsReady
    669  f2c0		       a2 20		      LDX	#<ReadyText
    670  f2c2		       20 4a f7 	      JSR	PrintStaticText
    671  f2c5		       4c 5a f3 	      JMP	RightScoreWriteEnd	;3
    672  f2c8				   ContinueWithDefaultRightText
    673  f2c8		       a5 8d		      LDA	FrameCount1
    674  f2ca		       29 01		      AND	#1
    675  f2cc		       d0 05		      BNE	PrintCreditsRight
    676  f2ce		       a2 08		      LDX	#<HellwayRightText
    677  f2d0		       4c d5 f2 	      JMP	PrintRightIntro
    678  f2d3				   PrintCreditsRight
    679  f2d3		       a2 11		      LDX	#<YearText
    680  f2d5				   PrintRightIntro
    681  f2d5		       20 4a f7 	      JSR	PrintStaticText
    682  f2d8		       4c 5a f3 	      JMP	RightScoreWriteEnd
    683  f2db
    684  f2db				   ProcessPlayer1OverText
    685  f2db		       a5 f2		      LDA	IsOpponentInFront
    686  f2dd		       30 05		      BMI	PrintPlayer1Lose
    687  f2df				   PrintPlayer1Win
    688  f2df		       a2 18		      LDX	#<WinText - 2
    689  f2e1		       4c e6 f2 	      JMP	PrintPlayer1Status
    690  f2e4				   PrintPlayer1Lose
    691  f2e4		       a2 1b		      LDX	#<LoseText - 2
    692  f2e6				   PrintPlayer1Status
    693  f2e6		       20 4a f7 	      JSR	PrintStaticText
    694  f2e9		       4c 36 f3 	      JMP	OpDistanceCheckpointCount
    695  f2ec
    696  f2ec				   PrintPlayer1Checkpoint
    697  f2ec		       a2 ff		      LDX	#<CheckpointText - 1
    698  f2ee		       20 4a f7 	      JSR	PrintStaticText
    699  f2f1		       4c f9 f2 	      JMP	PrintPlayer1ScoreHoldChange	;3
    700  f2f4
    701  f2f4				   PrintPlayer1StartGame
    702  f2f4		       a2 15		      LDX	#<GoText - 1
    703  f2f6		       20 4a f7 	      JSR	PrintStaticText
    704  f2f9
    705  f2f9				   PrintPlayer1ScoreHoldChange
    706  f2f9		       a2 01		      LDX	#1
    707  f2fb		       20 9b fa 	      JSR	PrintScoreHoldChange
    708  f2fe		       85 d0		      STA	ScoreD0
    709  f300		       4c 5a f3 	      JMP	RightScoreWriteEnd	;3
    710  f303
    711  f303				   OpDigit0Timer
    712  f303		       a5 b9		      LDA	OpCountdownTimer	;3
    713  f305		       85 b0		      STA	Tmp0
    714  f307		       20 25 f8 	      JSR	BINBCD8
    715  f30a							; LDA Tmp1 Also returned in A
    716  f30a		       29 0f		      AND	#%00001111	;2
    717  f30c		       aa		      TAX		; 2
    718  f30d		       bd 6c fc 	      LDA	FontLookup,X	;4 
    719  f310		       85 d4		      STA	ScoreD4	;3
    720  f312
    721  f312				   OpDigit1Timer
    722  f312		       a5 b1		      LDA	Tmp1	;3
    723  f314		       4a		      LSR		; 2
    724  f315		       4a		      LSR		; 2
    725  f316		       4a		      LSR		; 2
    726  f317		       4a		      LSR		; 2
    727  f318		       aa		      TAX		; 2
    728  f319		       bd 6c fc 	      LDA	FontLookup,X	;4
    729  f31c		       85 d3		      STA	ScoreD3	;3
    730  f31e
    731  f31e				   OpSpeedBar
    732  f31e		       a5 df		      LDA	Player1SpeedL
    733  f320		       29 e0		      AND	#%11100000	;2 Discard the last bits
    734  f322		       18		      CLC
    735  f323		       2a		      ROL		;First goes into carry
    736  f324		       2a		      ROL
    737  f325		       2a		      ROL
    738  f326		       2a		      ROL
    739  f327		       85 b0		      STA	Tmp0
    740  f329		       a5 f1		      LDA	Player1SpeedH
    741  f32b		       0a		      ASL
    742  f32c		       0a		      ASL
    743  f32d		       0a		      ASL
    744  f32e		       05 b0		      ORA	Tmp0
    745  f330		       aa		      TAX		; 2
    746  f331		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    747  f334		       85 d2		      STA	ScoreD2	;3
    748  f336
    749  f336				   OpDistanceCheckpointCount
    750  f336		       a5 bb		      LDA	OpTraffic0Msb
    751  f338		       29 01		      AND	#%00000001
    752  f33a		       0a		      ASL
    753  f33b		       0a		      ASL
    754  f33c		       0a		      ASL
    755  f33d		       0a		      ASL
    756  f33e		       85 b0		      STA	Tmp0
    757  f340		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    758  f342		       29 f0		      AND	#%11110000	;2
    759  f344		       4a		      LSR
    760  f345		       4a		      LSR
    761  f346		       4a		      LSR
    762  f347		       4a		      LSR
    763  f348		       05 b0		      ORA	Tmp0
    764  f34a		       aa		      TAX		; 2
    765  f34b		       bd 6c fc 	      LDA	FontLookup,X	;4 
    766  f34e		       85 d1		      STA	ScoreD1	;3
    767  f350
    768  f350				   OpDistanceBar		; 16 subdivisions per checkpoint
    769  f350		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    770  f352		       29 0f		      AND	#%00001111	;2
    771  f354		       aa		      TAX		; 2
    772  f355		       bd 8c fc 	      LDA	BarLookup,X	;4 
    773  f358		       85 d0		      STA	ScoreD0	;3
    774  f35a
    775  f35a				   ScoreWriteEnd
    776  f35a				   RightScoreWriteEnd
    777  f35a
    778  f35a
    779  f35a				   ConfigurePFForScore
    780  f35a		       20 9c f6 	      JSR	ClearAll
    781  f35d		       a9 02		      LDA	#%00000010	; Score mode
    782  f35f		       85 0a		      STA	CTRLPF
    783  f361		       a5 8c		      LDA	FrameCount0	;3
    784  f363		       29 01		      AND	#%00000001
    785  f365		       f0 0b		      BEQ	LeftScoreOn	; Half of the screen with the correct colors.
    786  f367				   RightScoreOn
    787  f367		       a5 ca		      LDA	OpScoreFontColor
    788  f369		       85 07		      STA	COLUP1
    789  f36b		       a9 00		      LDA	#BACKGROUND_COLOR
    790  f36d		       85 06		      STA	COLUP0
    791  f36f		       4c 7a f3 	      JMP	CallWaitForVblankEnd
    792  f372				   LeftScoreOn
    793  f372		       a5 c9		      LDA	ScoreFontColor
    794  f374		       85 06		      STA	COLUP0
    795  f376		       a9 00		      LDA	#BACKGROUND_COLOR
    796  f378		       85 07		      STA	COLUP1
    797  f37a
    798  f37a							; After here we are going to update the screen, No more heavy code
    799  f37a				   CallWaitForVblankEnd
    800  f37a		       20 c4 f7 	      JSR	WaitForVblankEnd
    801  f37d
    802  f37d				   DrawScoreHud
    803  f37d		       20 68 f7 	      JSR	PrintScore
    804  f380
    805  f380							; 4 lines to go crazy
    806  f380		       85 02		      STA	WSYNC
    807  f382							;STA HMOVE
    808  f382
    809  f382		       85 02		      STA	WSYNC
    810  f384		       85 2a		      STA	HMOVE
    811  f386
    812  f386				   PrepareForTraffic
    813  f386		       20 b2 f6 	      JSR	ClearPF	; 32
    814  f389
    815  f389		       85 02		      STA	WSYNC
    816  f38b		       85 2a		      STA	HMOVE
    817  f38d		       85 02		      STA	WSYNC
    818  f38f		       85 2a		      STA	HMOVE
    819  f391
    820  f391		       a9 30		      LDA	#%00110000	; 2 Score mode
    821  f393		       85 0a		      STA	CTRLPF	;3
    822  f395
    823  f395		       a5 8c		      LDA	FrameCount0	;3
    824  f397		       29 01		      AND	#%00000001	;2
    825  f399		       aa		      TAX		;2
    826  f39a		       b5 c2		      LDA	TrafficColor,X	;4
    827  f39c		       85 08		      STA	COLUPF	;3
    828  f39e
    829  f39e		       a9 98		      LDA	#PLAYER1_COLOR	;2
    830  f3a0		       85 07		      STA	COLUP1	;3
    831  f3a2
    832  f3a2		       a5 c9		      LDA	ScoreFontColor	;3
    833  f3a4		       85 06		      STA	COLUP0	;3
    834  f3a6
    835  f3a6		       a5 ca		      LDA	OpScoreFontColor	;3
    836  f3a8		       85 07		      STA	COLUP1	;3
    837  f3aa
    838  f3aa		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    839  f3ac
    840  f3ac		       a5 8c		      LDA	FrameCount0	;Brach flag
    841  f3ae		       29 01		      AND	#%00000001
    842  f3b0
    843  f3b0		       d0 03		      BNE	OpScanLoop	;2
    844  f3b2		       4c 6f f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    845  f3b5							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    846  f3b5
    847  f3b5							;main scanline loop...
    848  f3b5				   OpScanLoop
    849  f3b5		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    850  f3b7
    851  f3b7		       a5 80		      LDA	GRP0Cache	;3
    852  f3b9		       85 1b		      STA	GRP0	;3
    853  f3bb
    854  f3bb		       a5 84		      LDA	GRP1Cache	;3
    855  f3bd		       85 1c		      STA	GRP1	;3
    856  f3bf
    857  f3bf		       a5 85		      LDA	ENABLCache	;3
    858  f3c1		       85 1f		      STA	ENABL	;3
    859  f3c3
    860  f3c3		       a5 86		      LDA	ENAM0Cache	;3
    861  f3c5		       85 1d		      STA	ENAM0	;3
    862  f3c7
    863  f3c7		       a5 87		      LDA	ENAM1Cache	;3
    864  f3c9		       85 1e		      STA	ENAM1	;3
    865  f3cb
    866  f3cb		       a5 81		      LDA	PF0Cache	;3
    867  f3cd		       85 0d		      STA	PF0	;3
    868  f3cf
    869  f3cf		       a9 00		      LDA	#0	;2
    870  f3d1							;STA PF0	     ;3
    871  f3d1		       85 80		      STA	GRP0Cache	;3
    872  f3d3		       85 86		      STA	ENAM0Cache	;3
    873  f3d5		       85 85		      STA	ENABLCache	;3
    874  f3d7		       85 87		      STA	ENAM1Cache	; 3
    875  f3d9							;STA GRP1Cache ;3
    876  f3d9		       85 0d		      STA	PF0	;3
    877  f3db							;STA PF2	     ;3
    878  f3db
    879  f3db		       a5 83		      LDA	PF2Cache	;3
    880  f3dd		       85 0f		      STA	PF2	;3
    881  f3df
    882  f3df				   OpDrawCar0
    883  f3df		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    884  f3e1		       b0 04		      BCS	OpSkipDrawCar	;2
    885  f3e3		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    886  f3e5		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    887  f3e7				   OpSkipDrawCar
    888  f3e7
    889  f3e7							;BEQ DrawTraffic3
    890  f3e7				   OpDrawTraffic1		; 33
    891  f3e7		       98		      TYA		; 2
    892  f3e8		       18		      CLC		; 2 
    893  f3e9		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    894  f3eb		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    895  f3ed		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    896  f3ef		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    897  f3f1		       4c f6 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    898  f3f4				   OpEorOffsetWithCarry
    899  f3f4		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    900  f3f6				   OpAfterEorOffsetWithCarry		;17
    901  f3f6		       aa		      TAX		;2
    902  f3f7		       bd 00 fe 	      LDA	AesTable,X	; 4
    903  f3fa		       c5 bf		      CMP	OpTrafficChance	;3
    904  f3fc		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    905  f3fe		       a9 ff		      LDA	#$FF	;2
    906  f400		       85 86		      STA	ENAM0Cache	;3
    907  f402				   OpFinishDrawTraffic1
    908  f402
    909  f402				   OpErasePF2
    910  f402		       a9 00		      LDA	#0
    911  f404		       85 0f		      STA	PF2
    912  f406
    913  f406				   OpDrawTraffic2		; 33
    914  f406		       98		      TYA		; 2
    915  f407		       18		      CLC		; 2 
    916  f408		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    917  f40a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    918  f40c		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    919  f40e		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    920  f410		       4c 15 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    921  f413				   OpEorOffsetWithCarry2
    922  f413		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    923  f415				   OpAfterEorOffsetWithCarry2		;17
    924  f415		       aa		      TAX		;2
    925  f416		       bd 00 fe 	      LDA	AesTable,X	; 4
    926  f419		       c5 bf		      CMP	OpTrafficChance	;3
    927  f41b		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    928  f41d		       a9 02		      LDA	#%00000010	;2
    929  f41f		       85 85		      STA	ENABLCache	;3
    930  f421				   OpFinishDrawTraffic2
    931  f421
    932  f421							;STA WSYNC ;65 / 137
    933  f421
    934  f421							; LDA Tmp0 ; Flicker this line if drawing car
    935  f421							; BEQ FinishDrawTraffic4
    936  f421				   OpDrawTraffic3		; 33
    937  f421		       98		      TYA		; 2
    938  f422		       18		      CLC		; 2 
    939  f423		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    940  f425		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    941  f427		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    942  f429		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    943  f42b		       4c 30 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    944  f42e				   OpEorOffsetWithCarry3
    945  f42e		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    946  f430				   OpAfterEorOffsetWithCarry3		;17
    947  f430		       aa		      TAX		;2
    948  f431		       bd 00 fe 	      LDA	AesTable,X	; 4
    949  f434		       c5 bf		      CMP	OpTrafficChance	;3
    950  f436		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    951  f438		       a9 02		      LDA	#%00000010	;2
    952  f43a		       85 87		      STA	ENAM1Cache
    953  f43c				   OpFinishDrawTraffic3
    954  f43c
    955  f43c				   OpDrawOponent		;26
    956  f43c		       84 b0		      STY	Tmp0	;3
    957  f43e		       a4 cf		      LDY	OpponentLine	;3
    958  f440		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    959  f442		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    960  f444				   OpDrawOpponent
    961  f444		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    962  f446		       85 80		      STA	GRP0Cache	;3
    963  f448		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    964  f44a		       a4 b0		      LDY	Tmp0	;3
    965  f44c		       4c 60 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    966  f44f				   OpSkipDrawOpponent
    967  f44f		       c6 cf		      DEC	OpponentLine	;5
    968  f451		       a4 b0		      LDY	Tmp0	;3
    969  f453
    970  f453
    971  f453				   OpDrawTraffic0		; 21 2pe
    972  f453		       98		      TYA		; 2
    973  f454		       18		      CLC		; 2 
    974  f455		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    975  f457		       29 08		      AND	#%00001000	;2
    976  f459		       f0 05		      BEQ	OpHasNoBorderP0	;3
    977  f45b				   OpHasBorderP0
    978  f45b		       a9 e0		      LDA	#%11100000	; 2
    979  f45d		       4c 62 f4 	      JMP	OpStoreBorderP0	; 3
    980  f460				   OpHasNoBorderP0
    981  f460		       a9 00		      LDA	#0	; 2
    982  f462				   OpStoreBorderP0
    983  f462		       85 81		      STA	PF0Cache	; 3
    984  f464		       85 83		      STA	PF2Cache	; 3
    985  f466
    986  f466				   OpSkipDrawTraffic0
    987  f466
    988  f466				   OpWhileScanLoop
    989  f466		       88		      DEY		;2
    990  f467		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    991  f469		       4c b5 f3 	      JMP	OpScanLoop	;3
    992  f46c				   OpFinishScanLoop		; 7 209 of 222
    993  f46c		       4c 24 f5 	      JMP	FinishScanLoop
    994  f46f
    995  f46f							;main scanline loop...
    996  f46f				   ScanLoop
    997  f46f		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    998  f471
    999  f471		       a5 81		      LDA	PF0Cache	;3
   1000  f473		       85 0d		      STA	PF0	;3
   1001  f475
   1002  f475		       a5 80		      LDA	GRP0Cache	;3
   1003  f477		       85 1b		      STA	GRP0	;3
   1004  f479
   1005  f479		       a5 84		      LDA	GRP1Cache	;3
   1006  f47b		       85 1c		      STA	GRP1	;3
   1007  f47d
   1008  f47d		       a5 86		      LDA	ENAM0Cache	;3
   1009  f47f		       85 1d		      STA	ENAM0	;3
   1010  f481
   1011  f481		       a5 85		      LDA	ENABLCache	;3
   1012  f483		       85 1f		      STA	ENABL	;3
   1013  f485
   1014  f485		       a5 87		      LDA	ENAM1Cache	;3
   1015  f487		       85 1e		      STA	ENAM1	;3
   1016  f489
   1017  f489		       a5 83		      LDA	PF2Cache	;3
   1018  f48b		       85 0f		      STA	PF2	;3
   1019  f48d
   1020  f48d		       a9 00		      LDA	#0	;2
   1021  f48f		       85 0d		      STA	PF0	;3
   1022  f491		       85 84		      STA	GRP1Cache	;3
   1023  f493		       85 85		      STA	ENABLCache	;3
   1024  f495		       85 86		      STA	ENAM0Cache	;3
   1025  f497		       85 87		      STA	ENAM1Cache	; 3
   1026  f499							;STA GRP0Cache
   1027  f499		       85 0f		      STA	PF2	;3
   1028  f49b
   1029  f49b				   DrawCar0
   1030  f49b		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1031  f49d		       b0 04		      BCS	SkipDrawCar	;2
   1032  f49f		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1033  f4a1		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1034  f4a3				   SkipDrawCar
   1035  f4a3
   1036  f4a3							;BEQ DrawTraffic3
   1037  f4a3				   DrawTraffic1 		; 33
   1038  f4a3		       98		      TYA		; 2
   1039  f4a4		       18		      CLC		; 2 
   1040  f4a5		       65 95		      ADC	TrafficOffset1 + 1	;3
   1041  f4a7		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1042  f4a9		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1043  f4ab		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1044  f4ad		       4c b2 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1045  f4b0				   EorOffsetWithCarry
   1046  f4b0		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1047  f4b2				   AfterEorOffsetWithCarry		;17
   1048  f4b2		       aa		      TAX		;2
   1049  f4b3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1050  f4b6		       c5 be		      CMP	TrafficChance	;3
   1051  f4b8		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1052  f4ba		       a9 ff		      LDA	#$FF	;2
   1053  f4bc		       85 86		      STA	ENAM0Cache	;3
   1054  f4be				   FinishDrawTraffic1
   1055  f4be
   1056  f4be				   DrawTraffic2 		; 33
   1057  f4be		       98		      TYA		; 2
   1058  f4bf		       18		      CLC		; 2 
   1059  f4c0		       65 99		      ADC	TrafficOffset2 + 1	;3
   1060  f4c2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1061  f4c4		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1062  f4c6		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1063  f4c8		       4c cd f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1064  f4cb				   EorOffsetWithCarry2
   1065  f4cb		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1066  f4cd				   AfterEorOffsetWithCarry2		;17
   1067  f4cd		       aa		      TAX		;2
   1068  f4ce		       bd 00 fe 	      LDA	AesTable,X	; 4
   1069  f4d1		       c5 be		      CMP	TrafficChance	;3
   1070  f4d3		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1071  f4d5		       a9 02		      LDA	#%00000010	;2
   1072  f4d7		       85 85		      STA	ENABLCache	;3
   1073  f4d9				   FinishDrawTraffic2
   1074  f4d9
   1075  f4d9							;STA WSYNC ;65 / 137
   1076  f4d9
   1077  f4d9							; LDA Tmp0 ; Flicker this line if drawing car
   1078  f4d9							; BEQ FinishDrawTraffic4
   1079  f4d9				   DrawTraffic3 		; 33
   1080  f4d9		       98		      TYA		; 2
   1081  f4da		       18		      CLC		; 2 
   1082  f4db		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1083  f4dd		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1084  f4df		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1085  f4e1		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1086  f4e3		       4c e8 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1087  f4e6				   EorOffsetWithCarry3
   1088  f4e6		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1089  f4e8				   AfterEorOffsetWithCarry3		;17
   1090  f4e8		       aa		      TAX		;2
   1091  f4e9		       bd 00 fe 	      LDA	AesTable,X	; 4
   1092  f4ec		       c5 be		      CMP	TrafficChance	;3
   1093  f4ee		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1094  f4f0		       a9 02		      LDA	#%00000010	;2
   1095  f4f2		       85 87		      STA	ENAM1Cache
   1096  f4f4				   FinishDrawTraffic3
   1097  f4f4
   1098  f4f4
   1099  f4f4				   DrawOponent		;26
   1100  f4f4		       84 b0		      STY	Tmp0	;3
   1101  f4f6		       a4 cf		      LDY	OpponentLine	;3
   1102  f4f8		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1103  f4fa		       b0 0b		      BCS	SkipDrawOpponent	;2
   1104  f4fc				   DrawOpponent
   1105  f4fc		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1106  f4fe		       85 84		      STA	GRP1Cache	;3
   1107  f500		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1108  f502		       a4 b0		      LDY	Tmp0	;3
   1109  f504		       4c 18 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1110  f507				   SkipDrawOpponent
   1111  f507		       c6 cf		      DEC	OpponentLine	;5
   1112  f509		       a4 b0		      LDY	Tmp0	;3
   1113  f50b
   1114  f50b				   DrawTraffic0 		; 21 2pe
   1115  f50b		       98		      TYA		; 2
   1116  f50c		       18		      CLC		; 2 
   1117  f50d		       65 91		      ADC	TrafficOffset0 + 1	;3
   1118  f50f		       29 08		      AND	#%00001000	;2
   1119  f511		       f0 05		      BEQ	HasNoBorderP0	;3
   1120  f513				   HasBorderP0
   1121  f513		       a9 e0		      LDA	#%11100000	; 2
   1122  f515		       4c 1a f5 	      JMP	StoreBorderP0	; 3
   1123  f518				   HasNoBorderP0
   1124  f518		       a9 00		      LDA	#0	; 2
   1125  f51a				   StoreBorderP0
   1126  f51a		       85 81		      STA	PF0Cache	; 3
   1127  f51c		       85 83		      STA	PF2Cache	; 3
   1128  f51e
   1129  f51e				   SkipDrawTraffic0
   1130  f51e
   1131  f51e				   WhileScanLoop
   1132  f51e		       88		      DEY		;2
   1133  f51f		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1134  f521		       4c 6f f4 	      JMP	ScanLoop	;3
   1135  f524				   FinishScanLoop		; 7 209 of 222
   1136  f524
   1137  f524		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1138  f526		       20 c1 f6 	      JSR	LoadAll
   1139  f529		       85 02		      STA	WSYNC	; do stuff!
   1140  f52b		       85 02		      STA	WSYNC
   1141  f52d		       85 02		      STA	WSYNC
   1142  f52f
   1143  f52f				   PrepareOverscan
   1144  f52f		       a9 02		      LDA	#2
   1145  f531		       85 02		      STA	WSYNC
   1146  f533							;STA HMOVE	; HMOVE 10
   1147  f533		       85 01		      STA	VBLANK
   1148  f535
   1149  f535		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1150  f537		       8d 96 02 	      STA	TIM64T
   1151  f53a
   1152  f53a		       85 2b		      STA	HMCLR	; Before we process car movement
   1153  f53c							;Read Fire Button before, will make it start the game for now.
   1154  f53c				   StartGame
   1155  f53c		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1156  f53e		       25 0d		      AND	INPT5	;3 player 1
   1157  f540		       30 3c		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1158  f542		       a5 8c		      LDA	FrameCount0
   1159  f544		       29 01		      AND	#%00000001
   1160  f546		       d0 36		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1161  f548		       a5 bd		      LDA	GameStatus	;3
   1162  f54a		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1163  f54c		       d0 30		      BNE	SkipGameStart
   1164  f54e		       a5 c6		      LDA	GameMode
   1165  f550		       c9 10		      CMP	#MAX_GAME_MODE
   1166  f552		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1167  f554		       a9 00		      LDA	#0
   1168  f556		       85 c6		      STA	GameMode
   1169  f558		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1170  f55a		       85 bc		      STA	SwitchDebounceCounter
   1171  f55c		       4c 7e f5 	      JMP	SkipGameStart
   1172  f55f				   SetGameRunningIfBothPressing
   1173  f55f		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1174  f561		       05 0d		      ORA	INPT5	;3 player 1
   1175  f563		       30 19		      BMI	SkipGameStart
   1176  f565				   SetGameRunning
   1177  f565		       e6 bd		      INC	GameStatus
   1178  f567		       a9 00		      LDA	#0	;
   1179  f569		       85 8c		      STA	FrameCount0
   1180  f56b		       85 8d		      STA	FrameCount1
   1181  f56d		       a9 38		      LDA	#SCORE_FONT_COLOR_START
   1182  f56f		       85 c9		      STA	ScoreFontColor
   1183  f571		       a9 c8		      LDA	#OP_SCORE_FONT_COLOR_START
   1184  f573		       85 ca		      STA	OpScoreFontColor
   1185  f575		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1186  f577		       85 cb		      STA	ScoreFontColorHoldChange
   1187  f579		       85 cc		      STA	OpScoreFontColorHoldChange
   1188  f57b		       4c f2 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1189  f57e				   SkipGameStart
   1190  f57e
   1191  f57e				   ReadSwitches
   1192  f57e		       a6 bc		      LDX	SwitchDebounceCounter
   1193  f580		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1194  f582		       a9 01		      LDA	#%00000001
   1195  f584		       2c 82 02 	      BIT	SWCHB
   1196  f587		       d0 07		      BNE	SkipReset
   1197  f589		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1198  f58b		       85 bc		      STA	SwitchDebounceCounter
   1199  f58d		       4c fa f5 	      JMP	OverScanWaitBeforeReset
   1200  f590				   SkipReset
   1201  f590
   1202  f590				   GameModeSelect
   1203  f590		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1204  f592		       d0 22		      BNE	SkipGameSelect
   1205  f594		       a2 00		      LDX	#0
   1206  f596		       20 ed f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1207  f599		       e8		      INX
   1208  f59a		       20 ed f6 	      JSR	ConfigureDifficulty
   1209  f59d				   ContinueGameSelect
   1210  f59d		       a9 02		      LDA	#%00000010
   1211  f59f		       2c 82 02 	      BIT	SWCHB
   1212  f5a2		       d0 12		      BNE	SkipGameSelect
   1213  f5a4		       a6 c6		      LDX	GameMode
   1214  f5a6		       e0 10		      CPX	#MAX_GAME_MODE
   1215  f5a8		       f0 04		      BEQ	ResetGameMode
   1216  f5aa		       e8		      INX
   1217  f5ab		       4c b0 f5 	      JMP	StoreGameMode
   1218  f5ae				   ResetGameMode
   1219  f5ae		       a2 00		      LDX	#0
   1220  f5b0				   StoreGameMode
   1221  f5b0		       86 c6		      STX	GameMode
   1222  f5b2		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1223  f5b4		       85 bc		      STA	SwitchDebounceCounter
   1224  f5b6				   SkipGameSelect
   1225  f5b6		       4c bb f5 	      JMP	EndReadSwitches
   1226  f5b9				   DecrementSwitchDebounceCounter
   1227  f5b9		       c6 bc		      DEC	SwitchDebounceCounter
   1228  f5bb				   EndReadSwitches
   1229  f5bb
   1230  f5bb				   DoNotTurnBeforeStart
   1231  f5bb							;STA HMCLR
   1232  f5bb		       a5 bd		      LDA	GameStatus
   1233  f5bd		       f0 33		      BEQ	OverScanWait
   1234  f5bf
   1235  f5bf							; Last thing, will overrride hmove
   1236  f5bf				   CallTestColisionAndMove
   1237  f5bf		       a2 00		      LDX	#0	; Player 0
   1238  f5c1							; Colision with traffic, each player check different flags,
   1239  f5c1		       a5 8c		      LDA	FrameCount0
   1240  f5c3		       29 01		      AND	#%00000001
   1241  f5c5		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1242  f5c7		       20 9c f8 	      JSR	IsOpponentColliding
   1243  f5ca		       05 01		      ORA	CXM1P
   1244  f5cc		       4a		      LSR
   1245  f5cd		       05 00		      ORA	CXM0P
   1246  f5cf		       05 02		      ORA	CXP0FB
   1247  f5d1							; ORA CXPPMM ; Collision between players will have its own rules
   1248  f5d1				   SkipColisionPlayer0		; Should not colide on opponent side.
   1249  f5d1		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1250  f5d3		       85 b2		      STA	Tmp2
   1251  f5d5		       20 b0 f8 	      JSR	TestCollisionAndMove
   1252  f5d8
   1253  f5d8		       e8		      INX		; player 1
   1254  f5d9		       a5 8c		      LDA	FrameCount0
   1255  f5db		       29 01		      AND	#%00000001
   1256  f5dd		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1257  f5df		       20 9c f8 	      JSR	IsOpponentColliding
   1258  f5e2		       05 00		      ORA	CXM0P
   1259  f5e4		       4a		      LSR
   1260  f5e5		       05 01		      ORA	CXM1P
   1261  f5e7		       05 03		      ORA	CXP1FB
   1262  f5e9				   SkipColisionPlayer1
   1263  f5e9		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1264  f5eb		       85 b2		      STA	Tmp2
   1265  f5ed		       20 b0 f8 	      JSR	TestCollisionAndMove
   1266  f5f0
   1267  f5f0				   ClearCollision
   1268  f5f0		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1269  f5f2
   1270  f5f2				   OverScanWait
   1271  f5f2		       ad 84 02 	      LDA	INTIM
   1272  f5f5		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1273  f5f7		       4c d8 f0 	      JMP	MainLoop
   1274  f5fa
   1275  f5fa				   OverScanWaitBeforeReset
   1276  f5fa		       ad 84 02 	      LDA	INTIM
   1277  f5fd		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1278  f5ff		       4c 14 f0 	      JMP	Start
   1279  f602
   1280  f602				   Subroutines
   1281  f602
   1282  f602							;X Player
   1283  f602							;Tmp1 TrafficOffset 2
   1284  f602				   ProcessSound
   1285  f602				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1286  f602		       b5 c9		      LDA	ScoreFontColor,X	;3
   1287  f604		       dd b7 fc 	      CMP	PlayerToScoreOverColor,X	;2
   1288  f607		       f0 6b		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1289  f609		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X	;2
   1290  f60c		       f0 29		      BEQ	PlayCheckpoint	;2
   1291  f60e		       b5 8e		      LDA	CollisionCounter,X	;3
   1292  f610		       c9 e0		      CMP	#$E0	;2
   1293  f612		       b0 14		      BCS	PlayColision	;2
   1294  f614		       b5 cd		      LDA	NextCheckpoint,X	;3
   1295  f616		       38		      SEC		;2
   1296  f617		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1297  f619		       c9 02		      CMP	#$02	;2
   1298  f61b		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1299  f61d		       b5 b8		      LDA	CountdownTimer,X	; 3
   1300  f61f		       f0 53		      BEQ	EngineSound	;2
   1301  f621		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1302  f623		       90 37		      BCC	PlayWarnTimeEnding	;4
   1303  f625		       4c 74 f6 	      JMP	EngineSound	;3
   1304  f628				   PlayColision
   1305  f628		       a9 1f		      LDA	#31
   1306  f62a		       95 17		      STA	AUDF0,X
   1307  f62c		       a9 08		      LDA	#8
   1308  f62e		       95 15		      STA	AUDC0,X
   1309  f630		       a9 08		      LDA	#8
   1310  f632		       95 19		      STA	AUDV0,X
   1311  f634		       4c 9b f6 	      JMP	EndSound
   1312  f637
   1313  f637				   PlayCheckpoint
   1314  f637		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1315  f639		       4a		      LSR		;2
   1316  f63a		       4a		      LSR		;2
   1317  f63b		       4a		      LSR		;2
   1318  f63c		       95 17		      STA	AUDF0,X	;3
   1319  f63e		       a9 0c		      LDA	#12	;2
   1320  f640		       95 15		      STA	AUDC0,X	;3
   1321  f642		       a9 06		      LDA	#6	;2
   1322  f644		       95 19		      STA	AUDV0,X	;3
   1323  f646		       4c 9b f6 	      JMP	EndSound	;3
   1324  f649
   1325  f649				   PlayBeforeCheckpoint
   1326  f649		       a5 8c		      LDA	FrameCount0	;3
   1327  f64b		       29 1c		      AND	#%00011100	;2
   1328  f64d		       09 03		      ORA	#%00000011	;2
   1329  f64f		       95 17		      STA	AUDF0,X	;3
   1330  f651		       a9 0c		      LDA	#12	;2
   1331  f653		       95 15		      STA	AUDC0,X	;3
   1332  f655		       a9 03		      LDA	#3	;2
   1333  f657		       95 19		      STA	AUDV0,X	;3
   1334  f659		       4c 9b f6 	      JMP	EndSound	;3
   1335  f65c
   1336  f65c				   PlayWarnTimeEnding
   1337  f65c		       a5 8c		      LDA	FrameCount0	;3
   1338  f65e		       29 04		      AND	#%00000100	;2
   1339  f660		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1340  f662		       18		      CLC		;2
   1341  f663		       a9 0a		      LDA	#10	;2
   1342  f665		       75 b8		      ADC	CountdownTimer,X	;2
   1343  f667		       95 17		      STA	AUDF0,X	;3
   1344  f669		       a9 0c		      LDA	#12	;2
   1345  f66b		       95 15		      STA	AUDC0,X	;3
   1346  f66d		       a9 03		      LDA	#3	;2
   1347  f66f		       95 19		      STA	AUDV0,X	;3
   1348  f671		       4c 9b f6 	      JMP	EndSound	;3
   1349  f674
   1350  f674				   EngineSound		;41
   1351  f674		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1352  f676		       95 19		      STA	AUDV0,X
   1353  f678		       b5 b8		      LDA	CountdownTimer,X	;3
   1354  f67a		       f0 1b		      BEQ	EngineOff	;2
   1355  f67c		       b4 d5		      LDY	Gear,X
   1356  f67e		       b5 de		      LDA	Player0SpeedL,X	;3
   1357  f680		       4a		      LSR		;2
   1358  f681		       4a		      LSR		;2
   1359  f682		       4a		      LSR		;2
   1360  f683		       29 0f		      AND	#%00001111	;2
   1361  f685		       85 b0		      STA	Tmp0	;3
   1362  f687		       b9 2b ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1363  f68a		       38		      SEC		;2
   1364  f68b		       e5 b0		      SBC	Tmp0	;3
   1365  f68d		       95 17		      STA	AUDF0,X	;3
   1366  f68f		       b9 25 ff 	      LDA	EngineSoundType,Y	;4
   1367  f692		       95 15		      STA	AUDC0,X	;3
   1368  f694		       4c 9b f6 	      JMP	EndEngineSound	;3
   1369  f697				   EngineOff
   1370  f697				   MuteSound
   1371  f697		       a9 00		      LDA	#0
   1372  f699		       95 15		      STA	AUDC0,X
   1373  f69b				   EndEngineSound
   1374  f69b				   EndSound
   1375  f69b		       60		      RTS
   1376  f69c
   1377  f69c				   ClearAll		; 58
   1378  f69c		       a9 00		      LDA	#0	;2
   1379  f69e		       85 1b		      STA	GRP0	;3
   1380  f6a0		       85 1c		      STA	GRP1	;3
   1381  f6a2		       85 1f		      STA	ENABL	;3
   1382  f6a4		       85 1d		      STA	ENAM0	;3
   1383  f6a6		       85 1e		      STA	ENAM1	;3
   1384  f6a8		       85 80		      STA	GRP0Cache	;3
   1385  f6aa		       85 84		      STA	GRP1Cache	;3
   1386  f6ac		       85 85		      STA	ENABLCache	;3
   1387  f6ae		       85 86		      STA	ENAM0Cache	;3
   1388  f6b0		       85 87		      STA	ENAM1Cache	;3
   1389  f6b2
   1390  f6b2				   ClearPF		; 26
   1391  f6b2		       a9 00		      LDA	#0	;2
   1392  f6b4				   ClearPFSkipLDA0
   1393  f6b4		       85 0d		      STA	PF0	;3
   1394  f6b6		       85 0e		      STA	PF1	;3
   1395  f6b8		       85 0f		      STA	PF2	;3	
   1396  f6ba		       85 81		      STA	PF0Cache	;3
   1397  f6bc		       85 82		      STA	PF1Cache	;3
   1398  f6be		       85 83		      STA	PF2Cache	;3 
   1399  f6c0		       60		      RTS		;6
   1400  f6c1				   EndClearAll
   1401  f6c1
   1402  f6c1				   LoadAll		; 48
   1403  f6c1		       a5 81		      LDA	PF0Cache	;3
   1404  f6c3		       85 0d		      STA	PF0	;3
   1405  f6c5
   1406  f6c5		       a5 82		      LDA	PF1Cache	;3
   1407  f6c7		       85 0e		      STA	PF1	;3
   1408  f6c9
   1409  f6c9		       a5 83		      LDA	PF2Cache	;3
   1410  f6cb		       85 0f		      STA	PF2	;3
   1411  f6cd
   1412  f6cd		       a5 84		      LDA	GRP1Cache	;3
   1413  f6cf		       85 1c		      STA	GRP1	;3
   1414  f6d1
   1415  f6d1		       a5 85		      LDA	ENABLCache	;3
   1416  f6d3		       85 1f		      STA	ENABL	;3
   1417  f6d5
   1418  f6d5		       a5 86		      LDA	ENAM0Cache	;3
   1419  f6d7		       85 1d		      STA	ENAM0	;3
   1420  f6d9
   1421  f6d9		       a5 87		      LDA	ENAM1Cache	;3
   1422  f6db		       85 1e		      STA	ENAM1	;3
   1423  f6dd
   1424  f6dd		       60		      RTS		;6
   1425  f6de				   EndLoadAll
   1426  f6de
   1427  f6de				   NextDifficulty		;Is a SBR
   1428  f6de		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1429  f6e0		       29 01		      AND	#%00000001
   1430  f6e2		       d0 24		      BNE	CheckRandomDifficulty
   1431  f6e4
   1432  f6e4		       b5 c4		      LDA	CurrentDifficulty,X
   1433  f6e6		       18		      CLC
   1434  f6e7		       69 01		      ADC	#1
   1435  f6e9		       29 03		      AND	#%00000011	; 0 to 3
   1436  f6eb		       95 c4		      STA	CurrentDifficulty,X
   1437  f6ed
   1438  f6ed				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1439  f6ed		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1440  f6ef		       b9 a7 ff 	      LDA	TrafficChanceTable,Y
   1441  f6f2		       95 be		      STA	TrafficChance,X
   1442  f6f4		       b9 a3 ff 	      LDA	TrafficColorTable,Y
   1443  f6f7		       95 c2		      STA	TrafficColor,X
   1444  f6f9
   1445  f6f9		       a5 c6		      LDA	GameMode	;
   1446  f6fb		       29 01		      AND	#%00000001
   1447  f6fd		       f0 03		      BEQ	UseNextDifficultyTime
   1448  f6ff		       4c 03 f7 	      JMP	StoreDifficultyTime
   1449  f702				   UseNextDifficultyTime
   1450  f702		       c8		      INY
   1451  f703				   StoreDifficultyTime
   1452  f703		       b9 ab ff 	      LDA	TrafficTimeTable,Y
   1453  f706		       95 c0		      STA	CheckpointTime,X
   1454  f708
   1455  f708				   CheckRandomDifficulty
   1456  f708		       a5 c6		      LDA	GameMode
   1457  f70a		       29 08		      AND	#%00001000	; Random difficulties
   1458  f70c		       f0 26		      BEQ	ReturnFromNextDifficulty
   1459  f70e				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1460  f70e		       a5 f2		      LDA	IsOpponentInFront
   1461  f710		       30 12		      BMI	UseOpponentChance
   1462  f712		       a5 cf		      LDA	OpponentLine	; Same line
   1463  f714		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1464  f716		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1465  f718		       a4 8c		      LDY	FrameCount0
   1466  f71a		       b9 00 fe 	      LDA	AesTable,Y
   1467  f71d							;EOR TrafficChance, no need, lets make life simple
   1468  f71d		       29 3f		      AND	#%00111111
   1469  f71f		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1470  f721		       4c 34 f7 	      JMP	ReturnFromNextDifficulty
   1471  f724				   UseOpponentChance
   1472  f724		       8a		      TXA
   1473  f725		       49 01		      EOR	#%00000001	; Reverts the player
   1474  f727		       aa		      TAX
   1475  f728		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1476  f72a		       85 b3		      STA	Tmp3
   1477  f72c		       8a		      TXA
   1478  f72d		       49 01		      EOR	#%00000001	; Restors the player
   1479  f72f		       aa		      TAX
   1480  f730		       a5 b3		      LDA	Tmp3
   1481  f732		       95 be		      STA	TrafficChance,X
   1482  f734
   1483  f734				   ReturnFromNextDifficulty
   1484  f734		       60		      RTS
   1485  f735
   1486  f735				   DefaultOffsets
   1487  f735		       a9 20		      LDA	#$20
   1488  f737		       85 96		      STA	TrafficOffset1 + 2
   1489  f739		       85 a6		      STA	OpTrafficOffset1 + 2
   1490  f73b		       a9 40		      LDA	#$40
   1491  f73d		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1492  f73f		       85 aa		      STA	OpTrafficOffset2 + 2
   1493  f741		       a9 60		      LDA	#$60
   1494  f743		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1495  f745		       85 ae		      STA	OpTrafficOffset3 + 2
   1496  f747		       a9 80		      LDA	#$80
   1497  f749		       60		      RTS
   1498  f74a
   1499  f74a				   PrintStaticText		; Preload X with the offset referent to StaticText
   1500  f74a		       bd 00 ff 	      LDA	StaticText,X
   1501  f74d		       85 d0		      STA	ScoreD0
   1502  f74f		       e8		      INX
   1503  f750		       bd 00 ff 	      LDA	StaticText,X
   1504  f753		       85 d1		      STA	ScoreD1
   1505  f755		       e8		      INX
   1506  f756		       bd 00 ff 	      LDA	StaticText,X
   1507  f759		       85 d2		      STA	ScoreD2
   1508  f75b		       e8		      INX
   1509  f75c		       bd 00 ff 	      LDA	StaticText,X
   1510  f75f		       85 d3		      STA	ScoreD3
   1511  f761		       e8		      INX
   1512  f762		       bd 00 ff 	      LDA	StaticText,X
   1513  f765		       85 d4		      STA	ScoreD4
   1514  f767		       60		      RTS
   1515  f768
   1516  f768				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1517  f768		       a2 00		      LDX	#0
   1518  f76a		       a0 04		      LDY	#FONT_OFFSET
   1519  f76c
   1520  f76c				   ScoreLoop		; 20 
   1521  f76c		       85 02		      STA	WSYNC	;2
   1522  f76e		       85 2a		      STA	HMOVE
   1523  f770
   1524  f770		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1525  f772		       85 0d		      STA	PF0	;3
   1526  f774
   1527  f774		       a5 82		      LDA	PF1Cache	;3
   1528  f776		       85 0e		      STA	PF1	;3
   1529  f778
   1530  f778		       a5 83		      LDA	PF2Cache	;3
   1531  f77a		       85 0f		      STA	PF2	;3
   1532  f77c
   1533  f77c				   DrawScoreD0		; 15
   1534  f77c		       a6 d0		      LDX	ScoreD0	; 3
   1535  f77e		       bd 00 fd 	      LDA	Font,X	;4
   1536  f781		       85 81		      STA	PF0Cache	;3
   1537  f783		       c6 d0		      DEC	ScoreD0	;5
   1538  f785
   1539  f785				   DrawScoreD1		; 23	
   1540  f785		       a6 d1		      LDX	ScoreD1	; 3
   1541  f787		       bd 00 fd 	      LDA	Font,X	;4
   1542  f78a		       0a		      ASL		;2
   1543  f78b		       0a		      ASL		;2
   1544  f78c		       0a		      ASL		;2
   1545  f78d		       0a		      ASL		;2
   1546  f78e		       85 82		      STA	PF1Cache	;3
   1547  f790		       c6 d1		      DEC	ScoreD1	;5
   1548  f792
   1549  f792				   DrawScoreD2		; 20
   1550  f792		       a6 d2		      LDX	ScoreD2	; 3
   1551  f794		       bd 00 fd 	      LDA	Font,X	;4
   1552  f797		       29 0f		      AND	#%00001111	;2
   1553  f799		       05 82		      ORA	PF1Cache	;3
   1554  f79b		       85 82		      STA	PF1Cache	;3
   1555  f79d		       c6 d2		      DEC	ScoreD2	;5
   1556  f79f
   1557  f79f				   DrawScoreD3		; 23
   1558  f79f		       a6 d3		      LDX	ScoreD3	; 3
   1559  f7a1		       bd 00 fd 	      LDA	Font,X	;4
   1560  f7a4		       4a		      LSR		;2
   1561  f7a5		       4a		      LSR		;2
   1562  f7a6		       4a		      LSR		;2
   1563  f7a7		       4a		      LSR		;2
   1564  f7a8		       85 83		      STA	PF2Cache	;3
   1565  f7aa		       c6 d3		      DEC	ScoreD3	;5
   1566  f7ac
   1567  f7ac				   DrawScoreD4		; 20
   1568  f7ac		       a6 d4		      LDX	ScoreD4	; 3
   1569  f7ae		       bd 00 fd 	      LDA	Font,X	;4
   1570  f7b1		       29 f0		      AND	#%11110000	;2
   1571  f7b3		       05 83		      ORA	PF2Cache	;3
   1572  f7b5		       85 83		      STA	PF2Cache	;3
   1573  f7b7		       c6 d4		      DEC	ScoreD4	;5
   1574  f7b9
   1575  f7b9
   1576  f7b9		       88		      DEY		;2
   1577  f7ba		       10 b0		      BPL	ScoreLoop	;4
   1578  f7bc
   1579  f7bc		       85 02		      STA	WSYNC
   1580  f7be		       85 2a		      STA	HMOVE
   1581  f7c0		       20 c1 f6 	      JSR	LoadAll
   1582  f7c3		       60		      RTS		; 6
   1583  f7c4
   1584  f7c4				   WaitForVblankEnd
   1585  f7c4		       ad 84 02 	      LDA	INTIM
   1586  f7c7		       d0 fb		      BNE	WaitForVblankEnd
   1587  f7c9		       85 02		      STA	WSYNC
   1588  f7cb		       85 01		      STA	VBLANK
   1589  f7cd		       60		      RTS
   1590  f7ce
   1591  f7ce				   Sleep4Lines
   1592  f7ce		       85 02		      STA	WSYNC
   1593  f7d0		       85 02		      STA	WSYNC
   1594  f7d2		       85 02		      STA	WSYNC
   1595  f7d4		       85 02		      STA	WSYNC
   1596  f7d6		       60		      RTS
   1597  f7d7
   1598  f7d7				   Sleep8Lines
   1599  f7d7		       20 ce f7 	      JSR	Sleep4Lines
   1600  f7da		       20 ce f7 	      JSR	Sleep4Lines
   1601  f7dd		       60		      RTS
   1602  f7de
   1603  f7de				   Sleep32Lines
   1604  f7de		       20 d7 f7 	      JSR	Sleep8Lines
   1605  f7e1		       20 d7 f7 	      JSR	Sleep8Lines
   1606  f7e4		       20 d7 f7 	      JSR	Sleep8Lines
   1607  f7e7		       20 d7 f7 	      JSR	Sleep8Lines
   1608  f7ea		       60		      RTS
   1609  f7eb
   1610  f7eb							;X = number of WSYNC HMOVE to run
   1611  f7eb				   HMoveXTimes
   1612  f7eb		       85 02		      STA	WSYNC	;3
   1613  f7ed		       85 2a		      STA	HMOVE	; 3/10 
   1614  f7ef		       ca		      DEX
   1615  f7f0		       d0 f9		      BNE	HMoveXTimes
   1616  f7f2		       60		      RTS
   1617  f7f3
   1618  f7f3				   ConfigureCarSprites
   1619  f7f3		       a5 8c		      LDA	FrameCount0
   1620  f7f5		       29 01		      AND	#%00000001
   1621  f7f7		       d0 0b		      BNE	LoadForRightScreenSprites
   1622  f7f9				   LoadForLeftScreenSprites
   1623  f7f9		       a5 c7		      LDA	CurrentCarId
   1624  f7fb		       85 b0		      STA	Tmp0
   1625  f7fd		       a5 c8		      LDA	OpCurrentCarId
   1626  f7ff		       85 b1		      STA	Tmp1
   1627  f801		       4c 0c f8 	      JMP	LoadCarSpritesFromIds
   1628  f804				   LoadForRightScreenSprites
   1629  f804		       a5 c7		      LDA	CurrentCarId
   1630  f806		       85 b1		      STA	Tmp1
   1631  f808		       a5 c8		      LDA	OpCurrentCarId
   1632  f80a		       85 b0		      STA	Tmp0
   1633  f80c
   1634  f80c				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1635  f80c		       a4 b0		      LDY	Tmp0
   1636  f80e		       b9 7d ff 	      LDA	CarIdToSpriteAddressL,Y
   1637  f811		       85 d7		      STA	CarSpritePointerL
   1638  f813		       b9 81 ff 	      LDA	CarIdToSpriteAddressH,Y
   1639  f816		       85 d8		      STA	CarSpritePointerH
   1640  f818				   ConfigureOpponentCarSprite
   1641  f818		       a4 b1		      LDY	Tmp1
   1642  f81a		       b9 85 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1643  f81d		       85 d9		      STA	EnemyCarSpritePointerL
   1644  f81f		       b9 89 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1645  f822		       85 da		      STA	EnemyCarSpritePointerH
   1646  f824		       60		      RTS
   1647  f825
   1648  f825							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1649  f825							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1650  f825							; Tmp0 Binary Number
   1651  f825							; Result Returned in Tmp 1 and A
   1652  f825				   BINBCD8
   1653  f825		       f8		      SED		; Switch to decimal mode
   1654  f826		       a9 00		      LDA	#0	; Ensure the result is clear
   1655  f828		       85 b1		      STA	Tmp1+0
   1656  f82a							;STA Tmp1+1
   1657  f82a		       a2 08		      LDX	#8	; The number of source bits
   1658  f82c
   1659  f82c				   CNVBIT
   1660  f82c		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1661  f82e		       a5 b1		      LDA	Tmp1+0	; And add into result
   1662  f830		       65 b1		      ADC	Tmp1+0
   1663  f832		       85 b1		      STA	Tmp1+0
   1664  f834							;Not needed now, 0 to 99 is enought for timer!
   1665  f834							; LDA Tmp1+1	; propagating any carry
   1666  f834							; ADC Tmp1+1
   1667  f834							; STA Tmp1+1
   1668  f834		       ca		      DEX		; And repeat for next bit
   1669  f835		       d0 f5		      BNE	CNVBIT
   1670  f837		       d8		      CLD		; Back to binary
   1671  f838
   1672  f838		       60		      RTS		; All Done.
   1673  f839
   1674  f839							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1675  f839							;X player 0 or 1
   1676  f839				   SelectCarWithDpad
   1677  f839		       a0 03		      LDY	#3
   1678  f83b				   SelectCarWithDpadLoop
   1679  f83b		       ad 80 02 	      LDA	SWCHA
   1680  f83e		       25 b0		      AND	Tmp0
   1681  f840		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1682  f842		       98		      TYA
   1683  f843		       95 c7		      STA	CurrentCarId,X
   1684  f845				   ContinueSelectCarWithDpadLoop
   1685  f845		       46 b0		      LSR	Tmp0
   1686  f847		       88		      DEY
   1687  f848		       10 f1		      BPL	SelectCarWithDpadLoop
   1688  f84a		       60		      RTS
   1689  f84b
   1690  f84b				   ProcessOpponentLine
   1691  f84b		       a5 8c		      LDA	FrameCount0
   1692  f84d		       29 01		      AND	#%00000001
   1693  f84f		       38		      SEC
   1694  f850		       d0 15		      BNE	Player0IsOpponent
   1695  f852				   Player1IsOpponent		; Code could be reused?
   1696  f852		       a5 91		      LDA	TrafficOffset0 + 1
   1697  f854		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1698  f856		       85 b0		      STA	Tmp0
   1699  f858		       a5 92		      LDA	TrafficOffset0 + 2
   1700  f85a		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1701  f85c		       85 b1		      STA	Tmp1
   1702  f85e		       a5 ba		      LDA	Traffic0Msb
   1703  f860		       e5 bb		      SBC	OpTraffic0Msb
   1704  f862		       85 b2		      STA	Tmp2
   1705  f864		       4c 79 f8 	      JMP	StoreInFrontPlayer
   1706  f867				   Player0IsOpponent
   1707  f867		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1708  f869		       e5 91		      SBC	TrafficOffset0 + 1
   1709  f86b		       85 b0		      STA	Tmp0
   1710  f86d		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1711  f86f		       e5 92		      SBC	TrafficOffset0 + 2
   1712  f871		       85 b1		      STA	Tmp1
   1713  f873		       a5 bb		      LDA	OpTraffic0Msb
   1714  f875		       e5 ba		      SBC	Traffic0Msb
   1715  f877		       85 b2		      STA	Tmp2
   1716  f879
   1717  f879				   StoreInFrontPlayer
   1718  f879		       85 f2		      STA	IsOpponentInFront
   1719  f87b
   1720  f87b				   AddOffsetToOpponentLine
   1721  f87b		       18		      CLC
   1722  f87c		       a5 b0		      LDA	Tmp0
   1723  f87e		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1724  f880		       85 b0		      STA	Tmp0
   1725  f882		       a5 b1		      LDA	Tmp1
   1726  f884		       69 00		      ADC	#0
   1727  f886		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1728  f888		       a5 b2		      LDA	Tmp2
   1729  f88a		       69 00		      ADC	#0
   1730  f88c		       05 b1		      ORA	Tmp1
   1731  f88e		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1732  f890				   OpponentNotVisible
   1733  f890		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1734  f892		       85 cf		      STA	OpponentLine
   1735  f894		       4c 9b f8 	      JMP	ReturnFromProcessOpponentLine
   1736  f897				   OpponentVisible
   1737  f897		       a5 b0		      LDA	Tmp0
   1738  f899		       85 cf		      STA	OpponentLine
   1739  f89b				   ReturnFromProcessOpponentLine
   1740  f89b		       60		      RTS
   1741  f89c
   1742  f89c							; Value stored in A
   1743  f89c				   IsOpponentColliding
   1744  f89c							;Any non default state, opponent do not colide
   1745  f89c		       a5 8e		      LDA	CollisionCounter
   1746  f89e		       05 8f		      ORA	OpCollisionCounter
   1747  f8a0		       05 cb		      ORA	ScoreFontColorHoldChange
   1748  f8a2		       05 cc		      ORA	OpScoreFontColorHoldChange
   1749  f8a4		       d0 07		      BNE	OpponentNotColliding
   1750  f8a6		       a5 f2		      LDA	IsOpponentInFront
   1751  f8a8		       25 07		      AND	CXPPMM
   1752  f8aa		       4c af f8 	      JMP	ReturnIsOpponentColliding
   1753  f8ad				   OpponentNotColliding
   1754  f8ad		       a9 00		      LDA	#0
   1755  f8af				   ReturnIsOpponentColliding
   1756  f8af		       60		      RTS
   1757  f8b0
   1758  f8b0
   1759  f8b0							; Movement and colision are binded because the car must be moved after duplicate size.
   1760  f8b0							; Use X for the player
   1761  f8b0							; Tmp2 Traffic colision result
   1762  f8b0				   TestCollisionAndMove
   1763  f8b0							; Until store the movemnt, Y contains the value to be stored.
   1764  f8b0							; see if player0 colides with the rest
   1765  f8b0		       a5 b2		      LDA	Tmp2
   1766  f8b2		       f0 2b		      BEQ	NoCollision	;skip if not hitting...
   1767  f8b4		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1768  f8b6		       d0 27		      BNE	NoCollision
   1769  f8b8		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1770  f8ba		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X
   1771  f8bd		       f0 20		      BEQ	NoCollision
   1772  f8bf		       dd b5 fc 	      CMP	PlayerToScoreStartColor,X
   1773  f8c2		       f0 1b		      BEQ	NoCollision
   1774  f8c4		       a9 ff		      LDA	#COLLISION_FRAMES
   1775  f8c6		       95 8e		      STA	CollisionCounter,X
   1776  f8c8		       b5 f0		      LDA	Player0SpeedH,X
   1777  f8ca		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1778  f8cc		       a9 10		      LDA	#COLLISION_SPEED_L
   1779  f8ce		       d5 de		      CMP	Player0SpeedL,X
   1780  f8d0		       b0 04		      BCS	SkipSetColisionSpeedL
   1781  f8d2				   SetColisionSpeedL
   1782  f8d2		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1783  f8d4		       95 de		      STA	Player0SpeedL,X
   1784  f8d6				   SkipSetColisionSpeedL
   1785  f8d6		       a9 00		      LDA	#0
   1786  f8d8		       95 f0		      STA	Player0SpeedH,X
   1787  f8da		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1788  f8dc		       4c 2f f9 	      JMP	StoreHMove	; We keep position consistent
   1789  f8df				   NoCollision
   1790  f8df
   1791  f8df				   DecrementCollision
   1792  f8df		       b5 8e		      LDA	CollisionCounter,X
   1793  f8e1		       f0 06		      BEQ	FinishDecrementCollision
   1794  f8e3		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1795  f8e5		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1796  f8e7		       d6 8e		      DEC	CollisionCounter,X
   1797  f8e9				   FinishDecrementCollision
   1798  f8e9
   1799  f8e9				   ResetPlayerSize
   1800  f8e9		       d0 04		      BNE	FinishResetPlayerSize
   1801  f8eb		       a9 30		      LDA	#%00110000
   1802  f8ed		       95 04		      STA	NUSIZ0,X	;
   1803  f8ef				   FinishResetPlayerSize
   1804  f8ef
   1805  f8ef				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1806  f8ef		       b5 8e		      LDA	CollisionCounter,X
   1807  f8f1		       c9 01		      CMP	#1	; Last frame before reset
   1808  f8f3		       d0 05		      BNE	SkipResetPlayerPosition
   1809  f8f5		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1810  f8f7		       4c 2f f9 	      JMP	StoreHMove
   1811  f8fa				   SkipResetPlayerPosition
   1812  f8fa
   1813  f8fa				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1814  f8fa		       b5 c7		      LDA	CurrentCarId,X
   1815  f8fc		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1816  f8fe		       d0 08		      BNE	PrepareReadXAxis
   1817  f900		       a0 00		      LDY	#0
   1818  f902		       a5 8c		      LDA	FrameCount0
   1819  f904		       29 01		      AND	#DRAGSTER_TURN_MASK
   1820  f906		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1821  f908
   1822  f908				   PrepareReadXAxis
   1823  f908		       a0 00		      LDY	#0
   1824  f90a		       b5 b6		      LDA	Player0X,X
   1825  f90c				   BeginReadLeft
   1826  f90c		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1827  f90e		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1828  f911		       2c 80 02 	      BIT	SWCHA
   1829  f914		       d0 07		      BNE	SkipMoveLeft
   1830  f916		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1831  f918		       d6 b6		      DEC	Player0X,X
   1832  f91a		       4c 2f f9 	      JMP	StoreHMove	; Cannot move left and right...
   1833  f91d				   SkipMoveLeft
   1834  f91d				   BeginReadRight
   1835  f91d		       b5 b6		      LDA	Player0X,X
   1836  f91f		       c9 2c		      CMP	#PLAYER_MAX_X
   1837  f921		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1838  f923		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1839  f926		       2c 80 02 	      BIT	SWCHA
   1840  f929		       d0 04		      BNE	SkipMoveRight
   1841  f92b		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1842  f92d		       f6 b6		      INC	Player0X,X
   1843  f92f				   SkipMoveRight
   1844  f92f				   StoreHMove
   1845  f92f		       94 20		      STY	HMP0,X	;set the move for player 0
   1846  f931
   1847  f931		       60		      RTS
   1848  f932
   1849  f932							; X Traffic offset 4 bits each lane, 4 lanes per player
   1850  f932							; Tmp3 Max X offset
   1851  f932							; Tmp4 Max Player Speed L
   1852  f932							; Tmp5 Max Player Speed H
   1853  f932				   UpdateOffsets
   1854  f932		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1855  f934		       a5 c6		      LDA	GameMode
   1856  f936		       29 04		      AND	#%00000100	; GameModes with high delta
   1857  f938		       f0 02		      BEQ	UpdateOffsetsLoop
   1858  f93a		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1859  f93c
   1860  f93c				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1861  f93c		       38		      SEC
   1862  f93d		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1863  f93f		       f9 69 ff 	      SBC	TrafficSpeeds,Y
   1864  f942		       85 b0		      STA	Tmp0
   1865  f944		       c8		      INY
   1866  f945		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1867  f947		       f9 69 ff 	      SBC	TrafficSpeeds,Y
   1868  f94a		       85 b1		      STA	Tmp1
   1869  f94c		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1870  f94e		       e9 00		      SBC	#0
   1871  f950		       85 b2		      STA	Tmp2
   1872  f952
   1873  f952				   AddsTheResult
   1874  f952		       18		      CLC
   1875  f953		       a5 b0		      LDA	Tmp0
   1876  f955		       75 90		      ADC	TrafficOffset0,X
   1877  f957		       95 90		      STA	TrafficOffset0,X
   1878  f959		       e8		      INX
   1879  f95a		       a5 b1		      LDA	Tmp1
   1880  f95c		       75 90		      ADC	TrafficOffset0,X
   1881  f95e		       95 90		      STA	TrafficOffset0,X
   1882  f960		       e8		      INX
   1883  f961		       a5 b2		      LDA	Tmp2	; Carry
   1884  f963		       75 90		      ADC	TrafficOffset0,X
   1885  f965		       95 90		      STA	TrafficOffset0,X
   1886  f967		       90 0f		      BCC	CalculateOffsetCache
   1887  f969				   CalculatePlayer0Msb
   1888  f969		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1889  f96b		       d0 05		      BNE	CalculatePlayer1Msb
   1890  f96d		       e6 ba		      INC	Traffic0Msb
   1891  f96f		       4c 78 f9 	      JMP	CalculateOffsetCache
   1892  f972				   CalculatePlayer1Msb
   1893  f972		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1894  f974		       d0 02		      BNE	CalculateOffsetCache
   1895  f976		       e6 bb		      INC	OpTraffic0Msb
   1896  f978
   1897  f978				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1898  f978		       e8		      INX
   1899  f979		       38		      SEC
   1900  f97a		       69 00		      ADC	#0	;Increment by one
   1901  f97c		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1902  f97e
   1903  f97e				   PrepareNextUpdateLoop
   1904  f97e		       c8		      INY
   1905  f97f		       e8		      INX
   1906  f980		       e4 b3		      CPX	Tmp3	; Max X offset
   1907  f982		       d0 b8		      BNE	UpdateOffsetsLoop
   1908  f984		       60		      RTS
   1909  f985
   1910  f985							; X Player 0 or 1
   1911  f985				   ProcessSpeed
   1912  f985				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1913  f985		       a9 00		      LDA	#0
   1914  f987		       85 b0		      STA	Tmp0	; Break speed
   1915  f989		       b5 b8		      LDA	CountdownTimer,X
   1916  f98b		       d0 0d		      BNE	Break
   1917  f98d		       b4 c7		      LDY	CurrentCarId,X
   1918  f98f		       a5 8c		      LDA	FrameCount0
   1919  f991		       39 91 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1920  f994		       d0 04		      BNE	Break
   1921  f996		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1922  f998		       85 b0		      STA	Tmp0
   1923  f99a
   1924  f99a				   Break
   1925  f99a		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1926  f99d		       2c 80 02 	      BIT	SWCHA
   1927  f9a0		       d0 12		      BNE	BreakNonZero
   1928  f9a2		       b5 0c		      LDA	INPT4,X	;3
   1929  f9a4		       10 0a		      BPL	BreakWhileAccelerating
   1930  f9a6		       b4 d5		      LDY	Gear,X
   1931  f9a8		       b9 9d ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1932  f9ab		       85 b0		      STA	Tmp0
   1933  f9ad		       4c b4 f9 	      JMP	BreakNonZero
   1934  f9b0				   BreakWhileAccelerating		; Allow better control while breaking.
   1935  f9b0		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1936  f9b2		       85 b0		      STA	Tmp0
   1937  f9b4
   1938  f9b4				   BreakNonZero
   1939  f9b4		       a5 b0		      LDA	Tmp0
   1940  f9b6		       f0 29		      BEQ	SkipBreak
   1941  f9b8
   1942  f9b8				   DecreaseSpeed
   1943  f9b8		       38		      SEC
   1944  f9b9		       b5 de		      LDA	Player0SpeedL,X
   1945  f9bb		       e5 b0		      SBC	Tmp0
   1946  f9bd		       95 de		      STA	Player0SpeedL,X
   1947  f9bf		       b5 f0		      LDA	Player0SpeedH,X
   1948  f9c1		       e9 00		      SBC	#0
   1949  f9c3		       95 f0		      STA	Player0SpeedH,X
   1950  f9c5
   1951  f9c5				   CheckMinSpeed
   1952  f9c5		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1953  f9c7		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1954  f9c9		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1955  f9cb		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1956  f9cd
   1957  f9cd				   CompareLBreakSpeed
   1958  f9cd		       b5 de		      LDA	Player0SpeedL,X
   1959  f9cf		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1960  f9d1		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1961  f9d3		       4c de f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1962  f9d6
   1963  f9d6				   ResetMinSpeed
   1964  f9d6		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1965  f9d8		       95 f0		      STA	Player0SpeedH,X
   1966  f9da		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1967  f9dc		       95 de		      STA	Player0SpeedL,X
   1968  f9de
   1969  f9de				   SkipAccelerateIfBreaking
   1970  f9de		       4c 27 fa 	      JMP	SkipAccelerate
   1971  f9e1				   SkipBreak
   1972  f9e1
   1973  f9e1				   Acelerates
   1974  f9e1		       b5 b8		      LDA	CountdownTimer,X
   1975  f9e3		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1976  f9e5
   1977  f9e5				   ContinueAccelerateTest
   1978  f9e5		       b5 0c		      LDA	INPT4,X	;3
   1979  f9e7		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1980  f9e9		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1981  f9ec		       2c 80 02 	      BIT	SWCHA
   1982  f9ef		       d0 36		      BNE	SkipAccelerate
   1983  f9f1
   1984  f9f1				   IncreaseCarSpeed
   1985  f9f1		       a9 02		      LDA	#2
   1986  f9f3		       85 b0		      STA	Tmp0	; Loop control
   1987  f9f5		       b4 c7		      LDY	CurrentCarId,X
   1988  f9f7				   IncreaseCarSpeedLoop
   1989  f9f7							;Adds speed
   1990  f9f7		       18		      CLC
   1991  f9f8		       b5 dc		      LDA	AccelerateBuffer,X
   1992  f9fa		       79 8d ff 	      ADC	CarIdToAccelerateSpeed,Y
   1993  f9fd		       95 dc		      STA	AccelerateBuffer,X
   1994  f9ff		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1995  fa01		       f6 de		      INC	Player0SpeedL,X
   1996  fa03		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1997  fa05		       f6 f0		      INC	Player0SpeedH,X
   1998  fa07				   ContinueIncreaseSpeedLoop
   1999  fa07		       c6 b0		      DEC	Tmp0
   2000  fa09		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2001  fa0b				   SkipIncreaseCarSpeed
   2002  fa0b
   2003  fa0b				   CheckIfAlreadyMaxSpeed
   2004  fa0b		       b5 f0		      LDA	Player0SpeedH,X
   2005  fa0d		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2006  fa0f		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2007  fa11		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2008  fa13							;High bit is max, compare the low
   2009  fa13		       b4 c7		      LDY	CurrentCarId,X
   2010  fa15		       b5 de		      LDA	Player0SpeedL,X
   2011  fa17		       d9 95 ff 	      CMP	CarIdToMaxSpeedL,Y
   2012  fa1a		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2013  fa1c							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2014  fa1c
   2015  fa1c				   ResetToMaxSpeed		; Speed is more, or is already max
   2016  fa1c		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2017  fa1e		       95 f0		      STA	Player0SpeedH,X
   2018  fa20		       b4 c7		      LDY	CurrentCarId,X
   2019  fa22		       b9 95 ff 	      LDA	CarIdToMaxSpeedL,Y
   2020  fa25		       95 de		      STA	Player0SpeedL,X
   2021  fa27				   SkipAccelerate
   2022  fa27		       60		      RTS
   2023  fa28
   2024  fa28							;Tmp0 Traffic Offset to compare with next checkpoint
   2025  fa28				   ProcessPlayerStatus
   2026  fa28				   IsGameOver
   2027  fa28		       b5 b8		      LDA	CountdownTimer,X
   2028  fa2a		       15 de		      ORA	Player0SpeedL,X
   2029  fa2c		       15 f0		      ORA	Player0SpeedH,X
   2030  fa2e		       d0 0c		      BNE	IsCheckpoint
   2031  fa30		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2032  fa32		       95 cb		      STA	ScoreFontColorHoldChange,X
   2033  fa34		       bd b7 fc 	      LDA	PlayerToScoreOverColor,X
   2034  fa37		       95 c9		      STA	ScoreFontColor,X
   2035  fa39		       4c 70 fa 	      JMP	SkipIsTimeOver
   2036  fa3c
   2037  fa3c				   IsCheckpoint
   2038  fa3c		       b5 cd		      LDA	NextCheckpoint,X
   2039  fa3e		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2040  fa40		       d0 21		      BNE	SkipIsCheckpoint
   2041  fa42		       18		      CLC
   2042  fa43		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2043  fa45		       95 cd		      STA	NextCheckpoint,X
   2044  fa47		       bd b3 fc 	      LDA	PlayerToScoreGoodColor,X
   2045  fa4a		       95 c9		      STA	ScoreFontColor,X
   2046  fa4c		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2047  fa4e		       95 cb		      STA	ScoreFontColorHoldChange,X
   2048  fa50		       b5 b8		      LDA	CountdownTimer,X
   2049  fa52		       18		      CLC
   2050  fa53		       75 c0		      ADC	CheckpointTime,X
   2051  fa55		       95 b8		      STA	CountdownTimer,X
   2052  fa57		       90 04		      BCC	JumpSkipTimeOver
   2053  fa59		       a9 ff		      LDA	#$FF
   2054  fa5b		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2055  fa5d				   JumpSkipTimeOver
   2056  fa5d		       20 de f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2057  fa60		       4c 70 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2058  fa63				   SkipIsCheckpoint
   2059  fa63
   2060  fa63				   IsTimeOver
   2061  fa63		       b5 b8		      LDA	CountdownTimer,X
   2062  fa65		       d0 09		      BNE	SkipIsTimeOver
   2063  fa67		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2064  fa69		       95 cb		      STA	ScoreFontColorHoldChange,X
   2065  fa6b		       bd b9 fc 	      LDA	PlayerToScoreBadColor,X
   2066  fa6e		       95 c9		      STA	ScoreFontColor,X
   2067  fa70				   SkipIsTimeOver
   2068  fa70		       60		      RTS
   2069  fa71
   2070  fa71
   2071  fa71				   EverySecond		; 64 frames to be more precise
   2072  fa71		       a9 3f		      LDA	#%00111111
   2073  fa73		       25 8c		      AND	FrameCount0
   2074  fa75		       d0 06		      BNE	SkipEverySecondAction
   2075  fa77		       d5 b8		      CMP	CountdownTimer,X
   2076  fa79		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2077  fa7b		       d6 b8		      DEC	CountdownTimer,X
   2078  fa7d				   SkipEverySecondAction
   2079  fa7d		       60		      RTS
   2080  fa7e
   2081  fa7e				   CalculateGear
   2082  fa7e		       b5 de		      LDA	Player0SpeedL,X	;3
   2083  fa80		       29 80		      AND	#%10000000	;2
   2084  fa82		       15 f0		      ORA	Player0SpeedH,X	;3
   2085  fa84		       18		      CLC		;2
   2086  fa85		       2a		      ROL		;2
   2087  fa86		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2088  fa88		       95 d5		      STA	Gear,X
   2089  fa8a		       60		      RTS
   2090  fa8b
   2091  fa8b				   ProcessScoreFontColor
   2092  fa8b		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2093  fa8d		       f0 06		      BEQ	ResetScoreFontColor
   2094  fa8f		       88		      DEY
   2095  fa90		       94 cb		      STY	ScoreFontColorHoldChange,X
   2096  fa92		       4c 9a fa 	      JMP	SkipScoreFontColor
   2097  fa95				   ResetScoreFontColor
   2098  fa95		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2099  fa98		       95 c9		      STA	ScoreFontColor,X
   2100  fa9a				   SkipScoreFontColor
   2101  fa9a		       60		      RTS
   2102  fa9b
   2103  fa9b							; X = Player
   2104  fa9b							; A Returns result to be sotored in the proper digit
   2105  fa9b				   PrintScoreHoldChange
   2106  fa9b		       b5 cb		      LDA	ScoreFontColorHoldChange,X
   2107  fa9d		       4a		      LSR
   2108  fa9e		       4a		      LSR
   2109  fa9f		       4a		      LSR
   2110  faa0		       4a		      LSR
   2111  faa1		       a8		      TAY
   2112  faa2		       b9 8c fc 	      LDA	BarLookup,Y
   2113  faa5		       60		      RTS
   2114  faa6
   2115  faa6							; Moved here because of rom space.
   2116  faa6							; The only SBR in constants space
   2117  faa6				   DrawQrCode
   2118  faa6		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2119  faa8		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2120  faaa		       a9 01		      LDA	#%00000001	; Mirror playfield
   2121  faac		       85 0a		      STA	CTRLPF
   2122  faae		       20 9c f6 	      JSR	ClearAll	; To be 100 sure!
   2123  fab1		       ad 82 02 	      LDA	SWCHB
   2124  fab4		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2125  fab6		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2126  fab8		       f0 07		      BEQ	StoreReversedQrCode
   2127  faba		       86 09		      STX	COLUBK
   2128  fabc		       84 08		      STY	COLUPF
   2129  fabe		       4c c5 fa 	      JMP	ContinueQrCode
   2130  fac1				   StoreReversedQrCode
   2131  fac1		       86 08		      STX	COLUPF
   2132  fac3		       84 09		      STY	COLUBK
   2133  fac5
   2134  fac5				   ContinueQrCode
   2135  fac5		       a2 09		      LDX	#9
   2136  fac7		       20 eb f7 	      JSR	HMoveXTimes
   2137  faca		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2138  facc		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2139  face		       20 c4 f7 	      JSR	WaitForVblankEnd
   2140  fad1		       20 d7 f7 	      JSR	Sleep8Lines
   2141  fad4		       20 d7 f7 	      JSR	Sleep8Lines
   2142  fad7		       20 d7 f7 	      JSR	Sleep8Lines
   2143  fada
   2144  fada				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2145  fada		       85 02		      STA	WSYNC
   2146  fadc		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2147  fadf		       85 0e		      STA	PF1	;3
   2148  fae1		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2149  fae4		       85 0f		      STA	PF2	;3
      0  fae6					      SLEEP	27	; 
      1  fae6				   .CYCLES    SET	27
      2  fae6
      3  fae6				  -	      IF	.CYCLES < 2
      4  fae6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fae6				  -	      ERR
      6  fae6					      ENDIF
      7  fae6
      8  fae6					      IF	.CYCLES & 1
      9  fae6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fae6				  -	      nop	0
     11  fae6					      ELSE
     12  fae6		       24 00		      bit	VSYNC
     13  fae8					      ENDIF
     14  fae8				   .CYCLES    SET	.CYCLES - 3
     15  fae8					      ENDIF
     16  fae8
     17  fae8					      REPEAT	.CYCLES / 2
     18  fae8		       ea		      nop
     17  fae8					      REPEND
     18  fae9		       ea		      nop
     17  fae9					      REPEND
     18  faea		       ea		      nop
     17  faea					      REPEND
     18  faeb		       ea		      nop
     17  faeb					      REPEND
     18  faec		       ea		      nop
     17  faec					      REPEND
     18  faed		       ea		      nop
     17  faed					      REPEND
     18  faee		       ea		      nop
     17  faee					      REPEND
     18  faef		       ea		      nop
     17  faef					      REPEND
     18  faf0		       ea		      nop
     17  faf0					      REPEND
     18  faf1		       ea		      nop
     17  faf1					      REPEND
     18  faf2		       ea		      nop
     17  faf2					      REPEND
     18  faf3		       ea		      nop
     19  faf4					      REPEND
   2151  faf4		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2152  faf7		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2153  faf9		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2154  fafc		       85 0e		      STA	PF1	;3
   2155  fafe
   2156  fafe		       ca		      DEX		;2
   2157  faff		       d0 d9		      BNE	QrCodeLoop	;2
   2158  fb01		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2159  fb03		       88		      DEY		;2
   2160  fb04		       10 d4		      BPL	QrCodeLoop	;4
   2161  fb06
   2162  fb06				   EndQrCodeLoop
   2163  fb06		       85 02		      STA	WSYNC	;
   2164  fb08		       a9 00		      LDA	#0
   2165  fb0a		       85 0e		      STA	PF1	;3
   2166  fb0c		       85 0f		      STA	PF2	;3
   2167  fb0e
   2168  fb0e		       20 de f7 	      JSR	Sleep32Lines
   2169  fb11		       4c 2f f5 	      JMP	PrepareOverscan
   2170  fb14
   2171  fb14							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2172  fc00					      org	$FC00
   2173  fc00				   QrCode1
   2174  fc00		       1f		      .byte.b	#%00011111
   2175  fc01		       10		      .byte.b	#%00010000
   2176  fc02		       17		      .byte.b	#%00010111
   2177  fc03		       17		      .byte.b	#%00010111
   2178  fc04		       17		      .byte.b	#%00010111
   2179  fc05		       10		      .byte.b	#%00010000
   2180  fc06		       1f		      .byte.b	#%00011111
   2181  fc07		       00		      .byte.b	#%00000000
   2182  fc08		       17		      .byte.b	#%00010111
   2183  fc09		       10		      .byte.b	#%00010000
   2184  fc0a		       1d		      .byte.b	#%00011101
   2185  fc0b		       16		      .byte.b	#%00010110
   2186  fc0c		       03		      .byte.b	#%00000011
   2187  fc0d		       19		      .byte.b	#%00011001
   2188  fc0e		       13		      .byte.b	#%00010011
   2189  fc0f		       1c		      .byte.b	#%00011100
   2190  fc10		       0b		      .byte.b	#%00001011
   2191  fc11		       00		      .byte.b	#%00000000
   2192  fc12		       1f		      .byte.b	#%00011111
   2193  fc13		       10		      .byte.b	#%00010000
   2194  fc14		       17		      .byte.b	#%00010111
   2195  fc15		       17		      .byte.b	#%00010111
   2196  fc16		       17		      .byte.b	#%00010111
   2197  fc17		       10		      .byte.b	#%00010000
   2198  fc18		       1f		      .byte.b	#%00011111
   2199  fc19
   2200  fc19				   QrCode2
   2201  fc19		       c3		      .byte.b	#%11000011
   2202  fc1a		       9a		      .byte.b	#%10011010
   2203  fc1b		       82		      .byte.b	#%10000010
   2204  fc1c		       da		      .byte.b	#%11011010
   2205  fc1d		       aa		      .byte.b	#%10101010
   2206  fc1e		       ca		      .byte.b	#%11001010
   2207  fc1f		       f3		      .byte.b	#%11110011
   2208  fc20		       78		      .byte.b	#%01111000
   2209  fc21		       df		      .byte.b	#%11011111
   2210  fc22		       fc		      .byte.b	#%11111100
   2211  fc23		       c7		      .byte.b	#%11000111
   2212  fc24		       98		      .byte.b	#%10011000
   2213  fc25		       23		      .byte.b	#%00100011
   2214  fc26		       b9		      .byte.b	#%10111001
   2215  fc27		       d2		      .byte.b	#%11010010
   2216  fc28		       30		      .byte.b	#%00110000
   2217  fc29		       eb		      .byte.b	#%11101011
   2218  fc2a		       28		      .byte.b	#%00101000
   2219  fc2b		       ab		      .byte.b	#%10101011
   2220  fc2c		       72		      .byte.b	#%01110010
   2221  fc2d		       fa		      .byte.b	#%11111010
   2222  fc2e		       7a		      .byte.b	#%01111010
   2223  fc2f		       32		      .byte.b	#%00110010
   2224  fc30		       3a		      .byte.b	#%00111010
   2225  fc31		       63		      .byte.b	#%01100011
   2226  fc32
   2227  fc32				   QrCode3
   2228  fc32		       98		      .byte.b	#%10011000
   2229  fc33		       c3		      .byte.b	#%11000011
   2230  fc34		       39		      .byte.b	#%00111001
   2231  fc35		       34		      .byte.b	#%00110100
   2232  fc36		       ff		      .byte.b	#%11111111
   2233  fc37		       71		      .byte.b	#%01110001
   2234  fc38		       d5		      .byte.b	#%11010101
   2235  fc39		       d1		      .byte.b	#%11010001
   2236  fc3a		       5f		      .byte.b	#%01011111
   2237  fc3b		       26		      .byte.b	#%00100110
   2238  fc3c		       2d		      .byte.b	#%00101101
   2239  fc3d		       e9		      .byte.b	#%11101001
   2240  fc3e		       d6		      .byte.b	#%11010110
   2241  fc3f		       26		      .byte.b	#%00100110
   2242  fc40		       ba		      .byte.b	#%10111010
   2243  fc41		       03		      .byte.b	#%00000011
   2244  fc42		       dd		      .byte.b	#%11011101
   2245  fc43		       e0		      .byte.b	#%11100000
   2246  fc44		       57		      .byte.b	#%01010111
   2247  fc45		       14		      .byte.b	#%00010100
   2248  fc46		       35		      .byte.b	#%00110101
   2249  fc47		       e5		      .byte.b	#%11100101
   2250  fc48		       b5		      .byte.b	#%10110101
   2251  fc49		       d4		      .byte.b	#%11010100
   2252  fc4a		       97		      .byte.b	#%10010111
   2253  fc4b
   2254  fc4b				   QrCode4
   2255  fc4b		       09		      .byte.b	#%00001001
   2256  fc4c		       0e		      .byte.b	#%00001110
   2257  fc4d		       0f		      .byte.b	#%00001111
   2258  fc4e		       0c		      .byte.b	#%00001100
   2259  fc4f		       0c		      .byte.b	#%00001100
   2260  fc50		       08		      .byte.b	#%00001000
   2261  fc51		       08		      .byte.b	#%00001000
   2262  fc52		       06		      .byte.b	#%00000110
   2263  fc53		       06		      .byte.b	#%00000110
   2264  fc54		       0b		      .byte.b	#%00001011
   2265  fc55		       0f		      .byte.b	#%00001111
   2266  fc56		       04		      .byte.b	#%00000100
   2267  fc57		       08		      .byte.b	#%00001000
   2268  fc58		       0f		      .byte.b	#%00001111
   2269  fc59		       09		      .byte.b	#%00001001
   2270  fc5a		       07		      .byte.b	#%00000111
   2271  fc5b		       05		      .byte.b	#%00000101
   2272  fc5c		       00		      .byte.b	#%00000000
   2273  fc5d		       0f		      .byte.b	#%00001111
   2274  fc5e		       08		      .byte.b	#%00001000
   2275  fc5f		       0b		      .byte.b	#%00001011
   2276  fc60		       0b		      .byte.b	#%00001011
   2277  fc61		       0b		      .byte.b	#%00001011
   2278  fc62		       08		      .byte.b	#%00001000
   2279  fc63		       0f		      .byte.b	#%00001111
   2280  fc64
   2281  fc64				   PlayerToUpMask
   2282  fc64		       10		      .byte.b	#%00010000	;
   2283  fc65		       01		      .byte.b	#%00000001	;
   2284  fc66
   2285  fc66				   PlayerToDownMask
   2286  fc66		       20		      .byte.b	#%00100000	;
   2287  fc67		       02		      .byte.b	#%00000010	;
   2288  fc68
   2289  fc68				   PlayerToLeftMask
   2290  fc68		       40		      .byte.b	#%01000000	;
   2291  fc69		       04		      .byte.b	#%00000100	;
   2292  fc6a
   2293  fc6a				   PlayerToRightMask
   2294  fc6a		       80		      .byte.b	#%10000000	;
   2295  fc6b		       08		      .byte.b	#%00001000	;
   2296  fc6c
   2297  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2298  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2299  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2300  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2301  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2302  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2303  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2304  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2305  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2306  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2307  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2308  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2309  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2310  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2311  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2312  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2313  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2314  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2315  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2316  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2317  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2318  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2319  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2320  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2321  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2322  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2323  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2324  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2325  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2326  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2327  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2328  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2329  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2330  fc8c
   2331  fc8c
   2332  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2333  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2334  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2335  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2336  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2337  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2338  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2339  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2340  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2341  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2342  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2343  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2344  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2345  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2346  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2347  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2348  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2349  fc9c
   2350  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2351  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2352  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2353  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2354  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2355  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2356  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2357  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2358  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2359  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2360  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2361  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2362  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2363  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2364  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2365  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2366  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2367  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2368  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2369  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2370  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2371  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2372  fcb1
   2373  fcb1				   PlayerToDefaultColor
   2374  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2375  fcb2		       98		      .byte.b	#PLAYER1_COLOR
   2376  fcb3
   2377  fcb3				   PlayerToScoreGoodColor
   2378  fcb3		       37		      .byte.b	#SCORE_FONT_COLOR_GOOD
   2379  fcb4		       d8		      .byte.b	#OP_SCORE_FONT_COLOR_GOOD
   2380  fcb5
   2381  fcb5				   PlayerToScoreStartColor
   2382  fcb5		       38		      .byte.b	#SCORE_FONT_COLOR_START
   2383  fcb6		       c8		      .byte.b	#OP_SCORE_FONT_COLOR_START
   2384  fcb7
   2385  fcb7				   PlayerToScoreOverColor
   2386  fcb7		       0c		      .byte.b	#SCORE_FONT_COLOR_OVER
   2387  fcb8		       ab		      .byte.b	#OP_SCORE_FONT_COLOR_OVER
   2388  fcb9
   2389  fcb9				   PlayerToScoreBadColor
   2390  fcb9		       44		      .byte.b	#SCORE_FONT_COLOR_BAD
   2391  fcba		       56		      .byte.b	#OP_SCORE_FONT_COLOR_BAD
   2392  fcbb
   2393  fd00					      org	$FD00
   2394  fd00				   Font
   2395  fd00				   C0
   2396  fd00		       e7		      .byte.b	#%11100111	;
   2397  fd01		       a5		      .byte.b	#%10100101	; 
   2398  fd02		       a5		      .byte.b	#%10100101	; 
   2399  fd03		       a5		      .byte.b	#%10100101	; 
   2400  fd04		       e7		      .byte.b	#%11100111	;	
   2401  fd05				   C1
   2402  fd05		       e7		      .byte.b	#%11100111	;
   2403  fd06		       42		      .byte.b	#%01000010	; 
   2404  fd07		       42		      .byte.b	#%01000010	; 
   2405  fd08		       42		      .byte.b	#%01000010	; 
   2406  fd09		       66		      .byte.b	#%01100110	;
   2407  fd0a				   C2
   2408  fd0a		       e7		      .byte.b	#%11100111	;
   2409  fd0b		       24		      .byte.b	#%00100100	; 
   2410  fd0c		       e7		      .byte.b	#%11100111	; 
   2411  fd0d		       81		      .byte.b	#%10000001	; 
   2412  fd0e		       e7		      .byte.b	#%11100111	;
   2413  fd0f				   C3
   2414  fd0f		       e7		      .byte.b	#%11100111	;
   2415  fd10		       81		      .byte.b	#%10000001	; 
   2416  fd11		       e7		      .byte.b	#%11100111	; 
   2417  fd12		       81		      .byte.b	#%10000001	; 
   2418  fd13		       e7		      .byte.b	#%11100111	;
   2419  fd14				   C4
   2420  fd14		       81		      .byte.b	#%10000001	;
   2421  fd15		       81		      .byte.b	#%10000001	; 
   2422  fd16		       e7		      .byte.b	#%11100111	; 
   2423  fd17		       a5		      .byte.b	#%10100101	; 
   2424  fd18		       a5		      .byte.b	#%10100101	;
   2425  fd19				   C5
   2426  fd19		       e7		      .byte.b	#%11100111	;
   2427  fd1a		       81		      .byte.b	#%10000001	; 
   2428  fd1b		       e7		      .byte.b	#%11100111	; 
   2429  fd1c		       24		      .byte.b	#%00100100	; 
   2430  fd1d		       e7		      .byte.b	#%11100111	;
   2431  fd1e				   C6
   2432  fd1e		       e7		      .byte.b	#%11100111	;
   2433  fd1f		       a5		      .byte.b	#%10100101	; 
   2434  fd20		       e7		      .byte.b	#%11100111	; 
   2435  fd21		       24		      .byte.b	#%00100100	; 
   2436  fd22		       e7		      .byte.b	#%11100111	;
   2437  fd23				   C7
   2438  fd23		       81		      .byte.b	#%10000001	;
   2439  fd24		       81		      .byte.b	#%10000001	; 
   2440  fd25		       81		      .byte.b	#%10000001	; 
   2441  fd26		       81		      .byte.b	#%10000001	; 
   2442  fd27		       e7		      .byte.b	#%11100111	;
   2443  fd28				   C8
   2444  fd28		       e7		      .byte.b	#%11100111	;
   2445  fd29		       a5		      .byte.b	#%10100101	; 
   2446  fd2a		       e7		      .byte.b	#%11100111	; 
   2447  fd2b		       a5		      .byte.b	#%10100101	; 
   2448  fd2c		       e7		      .byte.b	#%11100111	;
   2449  fd2d				   C9
   2450  fd2d		       e7		      .byte.b	#%11100111	;
   2451  fd2e		       81		      .byte.b	#%10000001	; 
   2452  fd2f		       e7		      .byte.b	#%11100111	; 
   2453  fd30		       a5		      .byte.b	#%10100101	; 
   2454  fd31		       e7		      .byte.b	#%11100111	;
   2455  fd32				   CA
   2456  fd32		       a5		      .byte.b	#%10100101	;
   2457  fd33		       a5		      .byte.b	#%10100101	; 
   2458  fd34		       e7		      .byte.b	#%11100111	; 
   2459  fd35		       a5		      .byte.b	#%10100101	; 
   2460  fd36		       e7		      .byte.b	#%11100111	;
   2461  fd37				   CB
   2462  fd37		       66		      .byte.b	#%01100110	;
   2463  fd38		       a5		      .byte.b	#%10100101	; 
   2464  fd39		       66		      .byte.b	#%01100110	; 
   2465  fd3a		       a5		      .byte.b	#%10100101	;
   2466  fd3b		       66		      .byte.b	#%01100110	;
   2467  fd3c				   CC
   2468  fd3c		       e7		      .byte.b	#%11100111	;
   2469  fd3d		       24		      .byte.b	#%00100100	; 
   2470  fd3e		       24		      .byte.b	#%00100100	; 
   2471  fd3f		       24		      .byte.b	#%00100100	;
   2472  fd40		       e7		      .byte.b	#%11100111	;
   2473  fd41
   2474  fd41				   CD
   2475  fd41		       66		      .byte.b	#%01100110	;
   2476  fd42		       a5		      .byte.b	#%10100101	; 
   2477  fd43		       a5		      .byte.b	#%10100101	; 
   2478  fd44		       a5		      .byte.b	#%10100101	;
   2479  fd45		       66		      .byte.b	#%01100110	;
   2480  fd46
   2481  fd46				   CE
   2482  fd46		       e7		      .byte.b	#%11100111	;
   2483  fd47		       24		      .byte.b	#%00100100	; 
   2484  fd48		       e7		      .byte.b	#%11100111	; 
   2485  fd49		       24		      .byte.b	#%00100100	; 
   2486  fd4a		       e7		      .byte.b	#%11100111	;
   2487  fd4b
   2488  fd4b				   CF
   2489  fd4b		       24		      .byte.b	#%00100100	;
   2490  fd4c		       24		      .byte.b	#%00100100	; 
   2491  fd4d		       e7		      .byte.b	#%11100111	; 
   2492  fd4e		       24		      .byte.b	#%00100100	; 
   2493  fd4f		       e7		      .byte.b	#%11100111	;
   2494  fd50
   2495  fd50				   CG
   2496  fd50		       c3		      .byte.b	#%11000011	;
   2497  fd51		       a5		      .byte.b	#%10100101	; 
   2498  fd52		       a5		      .byte.b	#%10100101	; 
   2499  fd53		       24		      .byte.b	#%00100100	; 
   2500  fd54		       c3		      .byte.b	#%11000011	;	
   2501  fd55
   2502  fd55				   CH
   2503  fd55		       a5		      .byte.b	#%10100101	;
   2504  fd56		       a5		      .byte.b	#%10100101	; 
   2505  fd57		       e7		      .byte.b	#%11100111	; 
   2506  fd58		       a5		      .byte.b	#%10100101	; 
   2507  fd59		       a5		      .byte.b	#%10100101	;
   2508  fd5a
   2509  fd5a				   CI
   2510  fd5a		       e7		      .byte.b	#%11100111	;
   2511  fd5b		       42		      .byte.b	#%01000010	; 
   2512  fd5c		       42		      .byte.b	#%01000010	; 
   2513  fd5d		       42		      .byte.b	#%01000010	; 
   2514  fd5e		       e7		      .byte.b	#%11100111	;
   2515  fd5f
   2516  fd5f				   CJ
   2517  fd5f		       e7		      .byte.b	#%11100111	;
   2518  fd60		       a5		      .byte.b	#%10100101	; 
   2519  fd61		       81		      .byte.b	#%10000001	; 
   2520  fd62		       81		      .byte.b	#%10000001	; 
   2521  fd63		       81		      .byte.b	#%10000001	;	
   2522  fd64
   2523  fd64				   CK
   2524  fd64		       a5		      .byte.b	#%10100101	;
   2525  fd65		       a5		      .byte.b	#%10100101	; 
   2526  fd66		       66		      .byte.b	#%01100110	; 
   2527  fd67		       a5		      .byte.b	#%10100101	; 
   2528  fd68		       a5		      .byte.b	#%10100101	;
   2529  fd69
   2530  fd69				   CL
   2531  fd69		       e7		      .byte.b	#%11100111	;
   2532  fd6a		       24		      .byte.b	#%00100100	; 
   2533  fd6b		       24		      .byte.b	#%00100100	; 
   2534  fd6c		       24		      .byte.b	#%00100100	; 
   2535  fd6d		       24		      .byte.b	#%00100100	;
   2536  fd6e
   2537  fd6e				   CM
   2538  fd6e		       a5		      .byte.b	#%10100101	;
   2539  fd6f		       a5		      .byte.b	#%10100101	; 
   2540  fd70		       a5		      .byte.b	#%10100101	; 
   2541  fd71		       e7		      .byte.b	#%11100111	; 
   2542  fd72		       a5		      .byte.b	#%10100101	;
   2543  fd73
   2544  fd73				   CN
   2545  fd73		       a5		      .byte.b	#%10100101	;
   2546  fd74		       a5		      .byte.b	#%10100101	; 
   2547  fd75		       a5		      .byte.b	#%10100101	; 
   2548  fd76		       a5		      .byte.b	#%10100101	; 
   2549  fd77		       66		      .byte.b	#%01100110	;	
   2550  fd78
   2551  fd78
   2552  fd78				   CO
   2553  fd78		       42		      .byte.b	#%01000010	;
   2554  fd79		       a5		      .byte.b	#%10100101	; 
   2555  fd7a		       a5		      .byte.b	#%10100101	; 
   2556  fd7b		       a5		      .byte.b	#%10100101	; 
   2557  fd7c		       42		      .byte.b	#%01000010	;	
   2558  fd7d
   2559  fd7d				   CP
   2560  fd7d		       24		      .byte.b	#%00100100	;
   2561  fd7e		       24		      .byte.b	#%00100100	; 
   2562  fd7f		       e7		      .byte.b	#%11100111	; 
   2563  fd80		       a5		      .byte.b	#%10100101	; 
   2564  fd81		       e7		      .byte.b	#%11100111	;
   2565  fd82
   2566  fd82				   CQ
   2567  fd82		       81		      .byte.b	#%10000001	;
   2568  fd83		       e5		      .byte.b	#%11100101	; 
   2569  fd84		       a5		      .byte.b	#%10100101	; 
   2570  fd85		       a5		      .byte.b	#%10100101	; 
   2571  fd86		       e7		      .byte.b	#%11100111	;	
   2572  fd87
   2573  fd87				   CR
   2574  fd87		       a5		      .byte.b	#%10100101	;
   2575  fd88		       a5		      .byte.b	#%10100101	; 
   2576  fd89		       66		      .byte.b	#%01100110	; 
   2577  fd8a		       a5		      .byte.b	#%10100101	; 
   2578  fd8b		       66		      .byte.b	#%01100110	;
   2579  fd8c
   2580  fd8c				   CS
   2581  fd8c		       66		      .byte.b	#%01100110	;
   2582  fd8d		       81		      .byte.b	#%10000001	; 
   2583  fd8e		       42		      .byte.b	#%01000010	; 
   2584  fd8f		       24		      .byte.b	#%00100100	; 
   2585  fd90		       c3		      .byte.b	#%11000011	;
   2586  fd91
   2587  fd91				   CT
   2588  fd91		       42		      .byte.b	#%01000010	;
   2589  fd92		       42		      .byte.b	#%01000010	; 
   2590  fd93		       42		      .byte.b	#%01000010	; 
   2591  fd94		       42		      .byte.b	#%01000010	; 
   2592  fd95		       e7		      .byte.b	#%11100111	;
   2593  fd96
   2594  fd96				   CU
   2595  fd96		       e7		      .byte.b	#%11100111	;
   2596  fd97		       a5		      .byte.b	#%10100101	; 
   2597  fd98		       a5		      .byte.b	#%10100101	; 
   2598  fd99		       a5		      .byte.b	#%10100101	; 
   2599  fd9a		       a5		      .byte.b	#%10100101	;	
   2600  fd9b
   2601  fd9b				   CW
   2602  fd9b		       a5		      .byte.b	#%10100101	;
   2603  fd9c		       e7		      .byte.b	#%11100111	; 
   2604  fd9d		       a5		      .byte.b	#%10100101	; 
   2605  fd9e		       a5		      .byte.b	#%10100101	; 
   2606  fd9f		       a5		      .byte.b	#%10100101	;
   2607  fda0
   2608  fda0				   CY
   2609  fda0		       42		      .byte.b	#%01000010	;
   2610  fda1		       42		      .byte.b	#%01000010	; 
   2611  fda2		       42		      .byte.b	#%01000010	; 
   2612  fda3		       a5		      .byte.b	#%10100101	; 
   2613  fda4		       a5		      .byte.b	#%10100101	;
   2614  fda5
   2615  fda5				   Exclamation
   2616  fda5		       42		      .byte.b	#%01000010	;
   2617  fda6		       00		      .byte.b	#%00000000	; 
   2618  fda7		       42		      .byte.b	#%01000010	; 
   2619  fda8		       42		      .byte.b	#%01000010	; 
   2620  fda9		       42		      .byte.b	#%01000010	;
   2621  fdaa
   2622  fdaa				   Pipe
   2623  fdaa				   Colon
   2624  fdaa		       42		      .byte.b	#%01000010	;
   2625  fdab		       42		      .byte.b	#%01000010	; 
   2626  fdac		       00		      .byte.b	#%00000000	; 
   2627  fdad		       42		      .byte.b	#%01000010	; 
   2628  fdae		       42		      .byte.b	#%01000010	;
   2629  fdaf
   2630  fdaf				   Space
   2631  fdaf				   C0B
   2632  fdaf		       00		      .byte.b	#%00000000	;
   2633  fdb0		       00		      .byte.b	#%00000000	; 
   2634  fdb1		       00		      .byte.b	#%00000000	; 
   2635  fdb2		       00		      .byte.b	#%00000000	; 
   2636  fdb3		       00		      .byte.b	#%00000000	;	
   2637  fdb4				   C1B
   2638  fdb4		       24		      .byte.b	#%00100100	;
   2639  fdb5		       00		      .byte.b	#%00000000	; 
   2640  fdb6		       00		      .byte.b	#%00000000	; 
   2641  fdb7		       00		      .byte.b	#%00000000	; 
   2642  fdb8		       00		      .byte.b	#%00000000	;
   2643  fdb9				   C2B
   2644  fdb9		       66		      .byte.b	#%01100110	;
   2645  fdba		       00		      .byte.b	#%00000000	; 
   2646  fdbb		       00		      .byte.b	#%00000000	; 
   2647  fdbc		       00		      .byte.b	#%00000000	; 
   2648  fdbd		       00		      .byte.b	#%00000000	;
   2649  fdbe				   C3B
   2650  fdbe		       e7		      .byte.b	#%11100111	;
   2651  fdbf		       00		      .byte.b	#%00000000	; 
   2652  fdc0		       00		      .byte.b	#%00000000	; 
   2653  fdc1		       00		      .byte.b	#%00000000	; 
   2654  fdc2		       00		      .byte.b	#%00000000	;
   2655  fdc3				   C4B
   2656  fdc3		       e7		      .byte.b	#%11100111	;
   2657  fdc4		       24		      .byte.b	#%00100100	; 
   2658  fdc5		       00		      .byte.b	#%00000000	; 
   2659  fdc6		       00		      .byte.b	#%00000000	; 
   2660  fdc7		       00		      .byte.b	#%00000000	;
   2661  fdc8				   C5B
   2662  fdc8		       e7		      .byte.b	#%11100111	;
   2663  fdc9		       66		      .byte.b	#%01100110	; 
   2664  fdca		       00		      .byte.b	#%00000000	; 
   2665  fdcb		       00		      .byte.b	#%00000000	; 
   2666  fdcc		       00		      .byte.b	#%00000000	;
   2667  fdcd				   C6B
   2668  fdcd		       e7		      .byte.b	#%11100111	;
   2669  fdce		       e7		      .byte.b	#%11100111	; 
   2670  fdcf		       00		      .byte.b	#%00000000	; 
   2671  fdd0		       00		      .byte.b	#%00000000	; 
   2672  fdd1		       00		      .byte.b	#%00000000	;
   2673  fdd2				   C7B
   2674  fdd2		       e7		      .byte.b	#%11100111	;
   2675  fdd3		       e7		      .byte.b	#%11100111	; 
   2676  fdd4		       24		      .byte.b	#%00100100	; 
   2677  fdd5		       00		      .byte.b	#%00000000	; 
   2678  fdd6		       00		      .byte.b	#%00000000	;
   2679  fdd7				   C8B
   2680  fdd7		       e7		      .byte.b	#%11100111	;
   2681  fdd8		       e7		      .byte.b	#%11100111	; 
   2682  fdd9		       66		      .byte.b	#%01100110	; 
   2683  fdda		       00		      .byte.b	#%00000000	; 
   2684  fddb		       00		      .byte.b	#%00000000	;
   2685  fddc				   C9B
   2686  fddc		       e7		      .byte.b	#%11100111	;
   2687  fddd		       e7		      .byte.b	#%11100111	; 
   2688  fdde		       e7		      .byte.b	#%11100111	; 
   2689  fddf		       00		      .byte.b	#%00000000	; 
   2690  fde0		       00		      .byte.b	#%00000000	;
   2691  fde1				   CAB
   2692  fde1		       e7		      .byte.b	#%11100111	;
   2693  fde2		       e7		      .byte.b	#%11100111	; 
   2694  fde3		       e7		      .byte.b	#%11100111	; 
   2695  fde4		       24		      .byte.b	#%00100100	; 
   2696  fde5		       00		      .byte.b	#%00000000	;
   2697  fde6				   CBB
   2698  fde6		       e7		      .byte.b	#%11100111	;
   2699  fde7		       e7		      .byte.b	#%11100111	; 
   2700  fde8		       e7		      .byte.b	#%11100111	; 
   2701  fde9		       66		      .byte.b	#%01100110	; 
   2702  fdea		       00		      .byte.b	#%00000000	;
   2703  fdeb				   CCB
   2704  fdeb		       e7		      .byte.b	#%11100111	;
   2705  fdec		       e7		      .byte.b	#%11100111	; 
   2706  fded		       e7		      .byte.b	#%11100111	; 
   2707  fdee		       e7		      .byte.b	#%11100111	; 
   2708  fdef		       00		      .byte.b	#%00000000	;
   2709  fdf0
   2710  fdf0				   CDB
   2711  fdf0		       e7		      .byte.b	#%11100111	;
   2712  fdf1		       e7		      .byte.b	#%11100111	; 
   2713  fdf2		       e7		      .byte.b	#%11100111	; 
   2714  fdf3		       e7		      .byte.b	#%11100111	; 
   2715  fdf4		       24		      .byte.b	#%00100100	;
   2716  fdf5
   2717  fdf5				   CEB
   2718  fdf5		       e7		      .byte.b	#%11100111	;
   2719  fdf6		       e7		      .byte.b	#%11100111	; 
   2720  fdf7		       e7		      .byte.b	#%11100111	; 
   2721  fdf8		       e7		      .byte.b	#%11100111	; 
   2722  fdf9		       66		      .byte.b	#%01100110	;
   2723  fdfa
   2724  fdfa				   CFB
   2725  fdfa		       e7		      .byte.b	#%11100111	;
   2726  fdfb		       e7		      .byte.b	#%11100111	; 
   2727  fdfc		       e7		      .byte.b	#%11100111	; 
   2728  fdfd		       e7		      .byte.b	#%11100111	; 
   2729  fdfe		       e7		      .byte.b	#%11100111	;
   2730  fdff
   2731  fe00					      org	$FE00
   2732  fe00				   AesTable
   2733  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2734  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2735  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2736  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2737  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2738  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2739  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2740  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2741  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2742  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2743  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2744  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2745  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2746  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2747  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2748  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2749  ff00
   2750  ff00					      org	$FF00
   2751  ff00				   StaticText		; All static text must be on the same MSB block. 
   2752  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2753  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2754  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2755  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2756  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2757  ff04
   2758  ff04				   HellwayLeftText
   2759  ff04		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2760  ff05		       59		      .byte.b	#<CH + #FONT_OFFSET
   2761  ff06		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2762  ff07		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2763  ff08
   2764  ff08				   HellwayRightText
   2765  ff08		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2766  ff09		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2767  ff0a		       81		      .byte.b	#<CP + #FONT_OFFSET
   2768  ff0b		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2769  ff0c		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2770  ff0d
   2771  ff0d				   OpbText
   2772  ff0d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2773  ff0e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2774  ff0f		       81		      .byte.b	#<CP + #FONT_OFFSET
   2775  ff10		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2776  ff11
   2777  ff11				   YearText
   2778  ff11		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2779  ff12		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2780  ff13		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2781  ff14		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2782  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2783  ff16
   2784  ff16				   GoText
   2785  ff16		       54		      .byte.b	#<CG + #FONT_OFFSET
   2786  ff17		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2787  ff18		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2788  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2789  ff1a
   2790  ff1a				   WinText
   2791  ff1a		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2792  ff1b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2793  ff1c		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2794  ff1d
   2795  ff1d				   LoseText
   2796  ff1d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2797  ff1e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2798  ff1f		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2799  ff20
   2800  ff20				   ReadyText
   2801  ff20		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2802  ff21		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2803  ff22		       36		      .byte.b	#<CA + #FONT_OFFSET
   2804  ff23		       45		      .byte.b	#<CD + #FONT_OFFSET
   2805  ff24		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2806  ff25
   2807  ff25				   EndStaticText
   2808  ff25
   2809  ff25				   EngineSoundType
   2810  ff25		       02		      .byte.b	#2
   2811  ff26		       02		      .byte.b	#2
   2812  ff27		       0e		      .byte.b	#14
   2813  ff28		       06		      .byte.b	#6
   2814  ff29		       06		      .byte.b	#6
   2815  ff2a		       0e		      .byte.b	#14
   2816  ff2b
   2817  ff2b				   EngineBaseFrequence
   2818  ff2b		       1f		      .byte.b	#31
   2819  ff2c		       15		      .byte.b	#21
   2820  ff2d		       14		      .byte.b	#20
   2821  ff2e		       1f		      .byte.b	#31
   2822  ff2f		       16		      .byte.b	#22
   2823  ff30		       03		      .byte.b	#3
   2824  ff31
   2825  ff31				   CarSprite0		; Upside down, Original Car
   2826  ff31		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2827  ff39				   CarSprite0NoPadding
   2828  ff39		       7e		      .byte.b	#%01111110
   2829  ff3a		       24		      .byte.b	#%00100100
   2830  ff3b		       bd		      .byte.b	#%10111101
   2831  ff3c		       3c		      .byte.b	#%00111100
   2832  ff3d		       bd		      .byte.b	#%10111101
   2833  ff3e		       3c		      .byte.b	#%00111100
   2834  ff3f
   2835  ff3f				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2836  ff3f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2837  ff47				   CarSprite1NoPadding
   2838  ff47		       bd		      .byte.b	#%10111101
   2839  ff48		       7e		      .byte.b	#%01111110
   2840  ff49		       5a		      .byte.b	#%01011010
   2841  ff4a		       66		      .byte.b	#%01100110
   2842  ff4b		       bd		      .byte.b	#%10111101
   2843  ff4c		       3c		      .byte.b	#%00111100
   2844  ff4d
   2845  ff4d				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2846  ff4d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2847  ff55				   CarSprite2NoPadding
   2848  ff55		       7e		      .byte.b	#%01111110
   2849  ff56		       a5		      .byte.b	#%10100101
   2850  ff57		       42		      .byte.b	#%01000010
   2851  ff58		       42		      .byte.b	#%01000010
   2852  ff59		       bd		      .byte.b	#%10111101
   2853  ff5a		       7e		      .byte.b	#%01111110
   2854  ff5b
   2855  ff5b				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2856  ff5b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2857  ff63				   CarSprite3NoPadding
   2858  ff63		       3c		      .byte.b	#%00111100
   2859  ff64		       db		      .byte.b	#%11011011
   2860  ff65		       db		      .byte.b	#%11011011
   2861  ff66		       3c		      .byte.b	#%00111100
   2862  ff67		       5a		      .byte.b	#%01011010
   2863  ff68		       3c		      .byte.b	#%00111100
   2864  ff69
   2865  ff69				   TrafficSpeeds
   2866  ff69		       00		      .byte.b	#$00	;  Trafic0 L
   2867  ff6a		       00		      .byte.b	#$00	;  Trafic0 H
   2868  ff6b		       0a		      .byte.b	#$0A	;  Trafic1 L
   2869  ff6c		       01		      .byte.b	#$01	;  Trafic1 H
   2870  ff6d		       e6		      .byte.b	#$E6	;  Trafic2 L
   2871  ff6e		       00		      .byte.b	#$00	;  Trafic2 H
   2872  ff6f		       c2		      .byte.b	#$C2	;  Trafic3 L
   2873  ff70		       00		      .byte.b	#$00	;  Trafic3 H
   2874  ff71		       9e		      .byte.b	#$9E	;  Trafic4 L
   2875  ff72		       00		      .byte.b	#$00	;  Trafic4 H
   2876  ff73				   TrafficSpeedsHighDelta
   2877  ff73		       00		      .byte.b	#$00	;  Trafic0 L
   2878  ff74		       00		      .byte.b	#$00	;  Trafic0 H
   2879  ff75		       0a		      .byte.b	#$0A	;  Trafic1 L
   2880  ff76		       01		      .byte.b	#$01	;  Trafic1 H
   2881  ff77		       c8		      .byte.b	#$C8	;  Trafic2 L
   2882  ff78		       00		      .byte.b	#$00	;  Trafic2 H
   2883  ff79		       86		      .byte.b	#$86	;  Trafic3 L
   2884  ff7a		       00		      .byte.b	#$00	;  Trafic3 H
   2885  ff7b		       44		      .byte.b	#$44	;  Trafic4 L
   2886  ff7c		       00		      .byte.b	#$00	;  Trafic4 H
   2887  ff7d
   2888  ff7d				   CarIdToSpriteAddressL
   2889  ff7d		       31		      .byte.b	#<CarSprite0
   2890  ff7e		       3f		      .byte.b	#<CarSprite1
   2891  ff7f		       4d		      .byte.b	#<CarSprite2
   2892  ff80		       5b		      .byte.b	#<CarSprite3
   2893  ff81
   2894  ff81				   CarIdToSpriteAddressH
   2895  ff81		       ff		      .byte.b	#>CarSprite0
   2896  ff82		       ff		      .byte.b	#>CarSprite1
   2897  ff83		       ff		      .byte.b	#>CarSprite2
   2898  ff84		       ff		      .byte.b	#>CarSprite3
   2899  ff85
   2900  ff85				   EnemyCarIdToSpriteAddressL
   2901  ff85		       39		      .byte.b	#<CarSprite0NoPadding
   2902  ff86		       47		      .byte.b	#<CarSprite1NoPadding
   2903  ff87		       55		      .byte.b	#<CarSprite2NoPadding
   2904  ff88		       63		      .byte.b	#<CarSprite3NoPadding
   2905  ff89
   2906  ff89				   EnemyCarIdToSpriteAddressH
   2907  ff89		       ff		      .byte.b	#>CarSprite0NoPadding
   2908  ff8a		       ff		      .byte.b	#>CarSprite1NoPadding
   2909  ff8b		       ff		      .byte.b	#>CarSprite2NoPadding
   2910  ff8c		       ff		      .byte.b	#>CarSprite3NoPadding
   2911  ff8d
   2912  ff8d				   CarIdToAccelerateSpeed
   2913  ff8d		       80		      .byte.b	#128
   2914  ff8e		       c0		      .byte.b	#192
   2915  ff8f		       60		      .byte.b	#96
   2916  ff90		       c0		      .byte.b	#192
   2917  ff91
   2918  ff91				   CarIdToTimeoverBreakInterval 		; Glide
   2919  ff91		       03		      .byte.b	#%00000011	;Every 4 frames
   2920  ff92		       03		      .byte.b	#%00000011	;Every 4 frames
   2921  ff93		       0f		      .byte.b	#%00001111	;Every 16 frames
   2922  ff94		       03		      .byte.b	#%00000011	;Every 4 frames
   2923  ff95
   2924  ff95				   CarIdToMaxSpeedL
   2925  ff95		       80		      .byte.b	#$80
   2926  ff96		       00		      .byte.b	#$00	; One less gear
   2927  ff97		       80		      .byte.b	#$80
   2928  ff98		       80		      .byte.b	#$80
   2929  ff99
   2930  ff99				   CarIdToMaxGear
   2931  ff99		       05		      .byte.b	#5
   2932  ff9a		       04		      .byte.b	#4	; One less gear
   2933  ff9b		       05		      .byte.b	#5
   2934  ff9c		       05		      .byte.b	#5
   2935  ff9d
   2936  ff9d				   GearToBreakSpeedTable
   2937  ff9d		       09		      .byte.b	#(BREAK_SPEED - 1)
   2938  ff9e		       09		      .byte.b	#(BREAK_SPEED - 1)
   2939  ff9f		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2940  ffa0		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2941  ffa1		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2942  ffa2		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2943  ffa3
   2944  ffa3				   TrafficColorTable
   2945  ffa3		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2946  ffa4		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2947  ffa5		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2948  ffa6		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2949  ffa7
   2950  ffa7				   TrafficChanceTable
   2951  ffa7		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2952  ffa8		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2953  ffa9		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2954  ffaa		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2955  ffab
   2956  ffab				   TrafficTimeTable
   2957  ffab		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2958  ffac		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2959  ffad		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2960  ffae		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2961  ffaf		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2962  ffb0
   2963  ffb0
   2964  fffc					      org	$FFFC
   2965  fffc		       00 f0		      .word.w	BeforeStart
   2966  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
