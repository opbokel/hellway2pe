------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 37	   SCORE_FONT_COLOR_GOOD =	$37
     58  f000		       00 d8	   OP_SCORE_FONT_COLOR_GOOD =	$D8
     59  f000
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 56	   OP_SCORE_FONT_COLOR_BAD =	$56
     62  f000
     63  f000		       00 38	   SCORE_FONT_COLOR_START =	$38	;Cannot be the same as good, font colors = game state
     64  f000		       00 c8	   OP_SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     65  f000
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000		       00 ab	   OP_SCORE_FONT_COLOR_OVER =	$AB
     68  f000
     69  f000		       00 f9	   PLAYER0_COLOR =	$F9
     70  f000		       00 98	   PLAYER1_COLOR =	$98
     71  f000
     72  f000		       00 20	   PLAYER_0_X_START =	32	;
     73  f000		       00 29	   PLAYER_1_X_START =	41	;
     74  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     75  f000
     76  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     77  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     78  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     79  f000
     80  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     81  f000
     82  f000		       00 00	   BLACK      =	$00	;
     83  f000
     84  f000		       00 10	   MAX_GAME_MODE =	16
     85  f000
     86  f000		       00 08	   PARALLAX_SIZE =	8
     87  f000
     88  f000		       00 05	   HALF_TEXT_SIZE =	5
     89  f000
     90  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     91  f000
     92  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     93  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     94  f000		       00 00	   QR_CODE_COLOR =	$00
     95  f000		       00 19	   QR_CODE_SIZE =	25
     96  f000
     97  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     98  f000
     99  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    100  f000		       00 29	   VBLANK_TIMER =	41
    101  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    102  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    103  f000
    104  f000		       00 08	   ENGINE_VOLUME =	8
    105  f000
    106  f000		       00 08	   CAR_SIZE   =	8
    107  f000
    108  f000		       00 80	   GRP0Cache  =	$80
    109  f000		       00 81	   PF0Cache   =	$81
    110  f000		       00 82	   PF1Cache   =	$82
    111  f000		       00 83	   PF2Cache   =	$83
    112  f000		       00 84	   GRP1Cache  =	$84
    113  f000		       00 85	   ENABLCache =	$85
    114  f000		       00 86	   ENAM0Cache =	$86
    115  f000		       00 87	   ENAM1Cache =	$87
    116  f000
    117  f000		       00 8c	   FrameCount0 =	$8C	;
    118  f000		       00 8d	   FrameCount1 =	$8D	;
    119  f000
    120  f000		       00 8e	   CollisionCounter =	$8E
    121  f000		       00 8f	   OpCollisionCounter =	$8F
    122  f000
    123  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    124  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    125  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    126  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    127  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    128  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    129  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    130  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    131  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000		       00 b4	   Tmp4       =	$B4
    139  f000		       00 b5	   Tmp5       =	$B5
    140  f000
    141  f000		       00 b6	   Player0X   =	$B6
    142  f000		       00 b7	   Player1X   =	$B7
    143  f000		       00 b8	   CountdownTimer =	$B8
    144  f000		       00 b9	   OpCountdownTimer =	$B9
    145  f000		       00 ba	   Traffic0Msb =	$BA
    146  f000		       00 bb	   OpTraffic0Msb =	$BB
    147  f000		       00 bc	   SwitchDebounceCounter =	$BC
    148  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    149  f000		       00 be	   TrafficChance =	$BE
    150  f000		       00 bf	   OpTrafficChance =	$BF
    151  f000
    152  f000		       00 c0	   CheckpointTime =	$C0
    153  f000		       00 c1	   OpCheckpointTime =	$C1
    154  f000		       00 c2	   TrafficColor =	$C2
    155  f000		       00 c3	   OpTrafficColor =	$C3
    156  f000		       00 c4	   CurrentDifficulty =	$C4
    157  f000		       00 c5	   OpCurrentDifficulty =	$C5
    158  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    159  f000
    160  f000		       00 c7	   CurrentCarId =	$C7
    161  f000		       00 c8	   OpCurrentCarId =	$C8
    162  f000
    163  f000		       00 c9	   ScoreFontColor =	$C9
    164  f000		       00 ca	   OpScoreFontColor =	$CA
    165  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    166  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    167  f000		       00 cd	   NextCheckpoint =	$CD
    168  f000		       00 ce	   OpNextCheckpoint =	$CE
    169  f000		       00 cf	   OpponentLine =	$CF
    170  f000
    171  f000		       00 d0	   ScoreD0    =	$D0
    172  f000		       00 d1	   ScoreD1    =	$D1
    173  f000		       00 d2	   ScoreD2    =	$D2
    174  f000		       00 d3	   ScoreD3    =	$D3
    175  f000		       00 d4	   ScoreD4    =	$D4
    176  f000
    177  f000		       00 d5	   Gear       =	$D5
    178  f000		       00 d6	   OpGear     =	$D6
    179  f000
    180  f000		       00 d7	   CarSpritePointerL =	$D7
    181  f000		       00 d8	   CarSpritePointerH =	$D8
    182  f000
    183  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    184  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    185  f000
    186  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    187  f000
    188  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    189  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    190  f000
    191  f000		       00 de	   Player0SpeedL =	$DE
    192  f000		       00 df	   Player1SpeedL =	$DF
    193  f000		       00 f0	   Player0SpeedH =	$F0
    194  f000		       00 f1	   Player1SpeedH =	$F1
    195  f000
    196  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 0c f7 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 71 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 de		      STA	Player0SpeedL
    257  f059		       85 df		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   StoreCurrentDifficulty
    274  f071		       86 c4		      STX	CurrentDifficulty
    275  f073		       86 c5		      STX	OpCurrentDifficulty
    276  f075		       a2 00		      LDX	#0
    277  f077		       20 c4 f6 	      JSR	ConfigureDifficulty
    278  f07a		       e8		      INX
    279  f07b		       20 c4 f6 	      JSR	ConfigureDifficulty
    280  f07e
    281  f07e				   SetGameNotRunning
    282  f07e		       a9 00		      LDA	#0
    283  f080		       85 bd		      STA	GameStatus
    284  f082
    285  f082				   ConfigureTimer
    286  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    287  f084		       85 b8		      STA	CountdownTimer	;3
    288  f086		       85 b9		      STA	OpCountdownTimer	;3
    289  f088
    290  f088				   ConfigurePlayer1XPosition
    291  f088		       a9 29		      LDA	#PLAYER_1_X_START	;2
    292  f08a		       85 b7		      STA	Player1X	;3
    293  f08c
    294  f08c				   ConfigureOpNextCheckpoint
    295  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    296  f08e		       85 ce		      STA	OpNextCheckpoint
    297  f090
    298  f090				   HPositioning 		; Avoid sleep doing needed stuff
    299  f090		       85 02		      STA	WSYNC
    300  f092
    301  f092				   ConfigurePlayer0XPosition
    302  f092		       a9 20		      LDA	#PLAYER_0_X_START	;2
    303  f094		       85 b6		      STA	Player0X	;3
    304  f096
    305  f096				   ConfigureMissileSize
    306  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    307  f098		       85 04		      STA	NUSIZ0	;3
    308  f09a		       85 05		      STA	NUSIZ1	;3
    309  f09c
    310  f09c				   ConfigureNextCheckpoint
    311  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    312  f09e		       85 cd		      STA	NextCheckpoint
    313  f0a0
    314  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    315  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	5	;
      1  f0a2				   .CYCLES    SET	5
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    317  f0a5		       85 12		      STA	RESM0
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    319  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    321  f0ab		       85 13		      STA	RESM1
      0  f0ad					      SLEEP	3
      1  f0ad				   .CYCLES    SET	3
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad					      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad					      ELSE
     12  f0ad		       24 00		      bit	VSYNC
     13  f0af					      ENDIF
     14  f0af				   .CYCLES    SET	.CYCLES - 3
     15  f0af					      ENDIF
     16  f0af
     17  f0af				  -	      REPEAT	.CYCLES / 2
     18  f0af				  -	      nop
     19  f0af					      REPEND
    323  f0af
    324  f0af		       a9 d0		      LDA	#$D0
    325  f0b1		       85 24		      STA	HMBL
    326  f0b3		       85 22		      STA	HMM0
    327  f0b5		       85 23		      STA	HMM1
    328  f0b7		       85 02		      STA	WSYNC
    329  f0b9		       85 2a		      STA	HMOVE
    330  f0bb		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    331  f0bd		       85 2b		      STA	HMCLR
      0  f0bf					      SLEEP	31
      1  f0bf				   .CYCLES    SET	31
      2  f0bf
      3  f0bf				  -	      IF	.CYCLES < 2
      4  f0bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bf				  -	      ERR
      6  f0bf					      ENDIF
      7  f0bf
      8  f0bf					      IF	.CYCLES & 1
      9  f0bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bf				  -	      nop	0
     11  f0bf					      ELSE
     12  f0bf		       24 00		      bit	VSYNC
     13  f0c1					      ENDIF
     14  f0c1				   .CYCLES    SET	.CYCLES - 3
     15  f0c1					      ENDIF
     16  f0c1
     17  f0c1					      REPEAT	.CYCLES / 2
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     19  f0cf					      REPEND
    333  f0cf		       85 10		      STA	RESP0
    334  f0d1		       85 11		      STA	RESP1
    335  f0d3
    336  f0d3				   WaitResetToEnd
    337  f0d3		       ad 84 02 	      LDA	INTIM
    338  f0d6		       d0 fb		      BNE	WaitResetToEnd
    339  f0d8
    340  f0d8				   MainLoop
    341  f0d8		       a9 02		      LDA	#2
    342  f0da		       85 00		      STA	VSYNC
    343  f0dc		       85 02		      STA	WSYNC
    344  f0de		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    345  f0e0							;Some free cycles here!
    346  f0e0				   PrepareMaxHMove
    347  f0e0		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    348  f0e2		       85 09		      STA	COLUBK
      0  f0e4					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e4				   .CYCLES    SET	24 - 11
      2  f0e4
      3  f0e4				  -	      IF	.CYCLES < 2
      4  f0e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e4				  -	      ERR
      6  f0e4					      ENDIF
      7  f0e4
      8  f0e4					      IF	.CYCLES & 1
      9  f0e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e4				  -	      nop	0
     11  f0e4					      ELSE
     12  f0e4		       24 00		      bit	VSYNC
     13  f0e6					      ENDIF
     14  f0e6				   .CYCLES    SET	.CYCLES - 3
     15  f0e6					      ENDIF
     16  f0e6
     17  f0e6					      REPEAT	.CYCLES / 2
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    350  f0eb		       a9 80		      LDA	#$80
    351  f0ed		       85 24		      STA	HMBL
    352  f0ef		       85 22		      STA	HMM0
    353  f0f1		       85 23		      STA	HMM1
    354  f0f3		       85 20		      STA	HMP0
    355  f0f5		       85 21		      STA	HMP1
    356  f0f7		       85 02		      STA	WSYNC
    357  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    358  f0fb
    359  f0fb				   ConfigVBlankTimer
    360  f0fb		       a5 c6		      LDA	GameMode
    361  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    362  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    363  f101		       a9 29		      LDA	#VBLANK_TIMER
    364  f103		       4c 08 f1 	      JMP	SetVblankTimer
    365  f106				   SetVblankTimerQrCode
    366  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    367  f108
    368  f108				   SetVblankTimer
    369  f108		       85 02		      STA	WSYNC	;3
    370  f10a		       8d 96 02 	      STA	TIM64T	;3	
    371  f10d		       a9 00		      LDA	#0	;2
    372  f10f		       85 00		      STA	VSYNC	;3	
    373  f111
    374  f111				   RandomizeGame
    375  f111		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f113		       d0 2d		      BNE	EndRandomizeGame
    377  f115		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f117		       29 02		      AND	#%00000010
    379  f119		       f0 24		      BEQ	DeterministicGame
    380  f11b		       a6 96		      LDX	TrafficOffset1 + 2
    381  f11d		       bd 00 fe 	      LDA	AesTable,X
    382  f120		       45 8c		      EOR	FrameCount0
    383  f122		       85 96		      STA	TrafficOffset1 + 2
    384  f124		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f126		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f128		       bd 00 fe 	      LDA	AesTable,X
    387  f12b		       45 8c		      EOR	FrameCount0
    388  f12d		       85 9a		      STA	TrafficOffset2 + 2
    389  f12f		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f131		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f133		       bd 00 fe 	      LDA	AesTable,X
    392  f136		       45 8c		      EOR	FrameCount0
    393  f138		       85 9e		      STA	TrafficOffset3 + 2
    394  f13a		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13c		       4c 42 f1 	      JMP	EndRandomizeGame
    396  f13f
    397  f13f				   DeterministicGame
    398  f13f		       20 0c f7 	      JSR	DefaultOffsets
    399  f142
    400  f142				   EndRandomizeGame
    401  f142
    402  f142				   CountFrame
    403  f142		       e6 8c		      INC	FrameCount0	; 5
    404  f144		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    405  f146		       e6 8d		      INC	FrameCount1	; 5 
    406  f148				   SkipIncFC1
    407  f148
    408  f148				   CallDrawQrCode
    409  f148		       a5 c6		      LDA	GameMode
    410  f14a		       c9 10		      CMP	#MAX_GAME_MODE
    411  f14c		       d0 03		      BNE	TestIsGameRunning
    412  f14e		       4c 96 fa 	      JMP	DrawQrCode
    413  f151
    414  f151							;Does not update the game if not running
    415  f151				   TestIsGameRunning
    416  f151		       a5 bd		      LDA	GameStatus	;3
    417  f153		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    418  f155				   SelectCarWithDpadCall		; Only do it when game is stoped
    419  f155		       a2 00		      LDX	#0	; Player 0
    420  f157		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    421  f159		       85 b0		      STA	Tmp0
    422  f15b		       20 10 f8 	      JSR	SelectCarWithDpad
    423  f15e		       e8		      INX		; Player 1
    424  f15f		       20 10 f8 	      JSR	SelectCarWithDpad
    425  f162
    426  f162							; Needs to draw the opponent in the correct line even when game stoped  
    427  f162							; Draeing is a destructive operation
    428  f162		       20 22 f8 	      JSR	ProcessOpponentLine
    429  f165
    430  f165				   CallConfigureCarSprites
    431  f165		       20 ca f7 	      JSR	ConfigureCarSprites
    432  f168				   SkipUpdateLogicJump
    433  f168		       4c a0 f1 	      JMP	SkipUpdateLogic
    434  f16b				   ContinueWithGameLogic
    435  f16b
    436  f16b				   CallEverySecond		; Timer for now
    437  f16b		       a2 00		      LDX	#0
    438  f16d		       20 48 fa 	      JSR	EverySecond
    439  f170		       e8		      INX
    440  f171		       20 48 fa 	      JSR	EverySecond
    441  f174
    442  f174				   CallProcessSpeed
    443  f174		       a2 00		      LDX	#0
    444  f176		       20 5c f9 	      JSR	ProcessSpeed
    445  f179
    446  f179		       e8		      INX		; Player 1
    447  f17a		       20 5c f9 	      JSR	ProcessSpeed
    448  f17d
    449  f17d				   CallUpdateOffsets
    450  f17d		       a2 00		      LDX	#0	; Player 0
    451  f17f		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    452  f181		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    453  f183		       a5 de		      LDA	Player0SpeedL
    454  f185		       85 b4		      STA	Tmp4
    455  f187		       a5 f0		      LDA	Player0SpeedH
    456  f189		       85 b5		      STA	Tmp5
    457  f18b		       20 09 f9 	      JSR	UpdateOffsets
    458  f18e
    459  f18e							;LDX Exits the call with correct value.
    460  f18e		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    461  f190		       85 b3		      STA	Tmp3
    462  f192		       a5 df		      LDA	Player1SpeedL
    463  f194		       85 b4		      STA	Tmp4
    464  f196		       a5 f1		      LDA	Player1SpeedH
    465  f198		       85 b5		      STA	Tmp5
    466  f19a		       20 09 f9 	      JSR	UpdateOffsets
    467  f19d
    468  f19d				   CallProcessOpponentLine
    469  f19d		       20 22 f8 	      JSR	ProcessOpponentLine
    470  f1a0
    471  f1a0				   SkipUpdateLogic		; Continue here if not paused
    472  f1a0
    473  f1a0				   CallStatusUpdateSbr
    474  f1a0		       a2 00		      LDX	#0
    475  f1a2		       20 55 fa 	      JSR	CalculateGear
    476  f1a5		       20 62 fa 	      JSR	ProcessScoreFontColor
    477  f1a8		       e8		      INX
    478  f1a9		       20 55 fa 	      JSR	CalculateGear
    479  f1ac		       20 62 fa 	      JSR	ProcessScoreFontColor
    480  f1af
    481  f1af				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    482  f1af		       a5 8c		      LDA	FrameCount0
    483  f1b1		       29 01		      AND	#%00000001
    484  f1b3		       d0 0c		      BNE	CallProcessPlayer1Status
    485  f1b5				   CallProcessPlayer0Status
    486  f1b5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    487  f1b7		       85 b0		      STA	Tmp0
    488  f1b9		       a2 00		      LDX	#0
    489  f1bb		       20 ff f9 	      JSR	ProcessPlayerStatus
    490  f1be		       4c ca f1 	      JMP	EndCallProcessPlayerStatus
    491  f1c1				   CallProcessPlayer1Status
    492  f1c1		       a5 a2		      LDA	OpTrafficOffset0 + 2
    493  f1c3		       85 b0		      STA	Tmp0
    494  f1c5		       a2 01		      LDX	#1
    495  f1c7		       20 ff f9 	      JSR	ProcessPlayerStatus
    496  f1ca				   EndCallProcessPlayerStatus
    497  f1ca
    498  f1ca				   CallProcessPlayerSprites
    499  f1ca		       20 ca f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    500  f1cd
    501  f1cd				   CallProcessSound		; We might save cycles by updating one channel per frame.
    502  f1cd		       a2 00		      LDX	#0
    503  f1cf		       a5 92		      LDA	TrafficOffset0 + 2
    504  f1d1		       85 b1		      STA	Tmp1
    505  f1d3		       20 d9 f5 	      JSR	ProcessSound
    506  f1d6		       e8		      INX		; Player 1
    507  f1d7		       a5 a2		      LDA	OpTrafficOffset0 + 2
    508  f1d9		       85 b1		      STA	Tmp1
    509  f1db		       20 d9 f5 	      JSR	ProcessSound
    510  f1de
    511  f1de				   ChooseTextSide		; 
    512  f1de		       a5 8c		      LDA	FrameCount0	;3
    513  f1e0		       29 01		      AND	#%00000001
    514  f1e2		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    515  f1e4		       4c 91 f2 	      JMP	RightScoreWrite
    516  f1e7
    517  f1e7				   LeftScoreWrite
    518  f1e7		       a5 bd		      LDA	GameStatus
    519  f1e9		       f0 11		      BEQ	PrintHellwayLeft
    520  f1eb		       a5 c9		      LDA	ScoreFontColor
    521  f1ed		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    522  f1ef		       f0 42		      BEQ	PrintPlayer0Checkpoint
    523  f1f1		       c9 38		      CMP	#SCORE_FONT_COLOR_START
    524  f1f3		       f0 46		      BEQ	PrintPlayer0StartGame
    525  f1f5		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    526  f1f7		       f0 29		      BEQ	ProcessPlayer0OverText
    527  f1f9				   ContinueP0Score
    528  f1f9		       4c 4a f2 	      JMP	Digit0Timer
    529  f1fc
    530  f1fc				   PrintHellwayLeft
    531  f1fc		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    532  f1fe		       30 08		      BMI	ContinueWithDefaultLeftText
    533  f200				   Player0IsReady
    534  f200		       a2 20		      LDX	#<ReadyText
    535  f202		       20 21 f7 	      JSR	PrintStaticText
    536  f205		       4c 31 f3 	      JMP	RightScoreWriteEnd	;3
    537  f208				   ContinueWithDefaultLeftText
    538  f208		       a5 8d		      LDA	FrameCount1
    539  f20a		       29 01		      AND	#1
    540  f20c		       d0 05		      BNE	PrintCreditsLeft
    541  f20e		       a2 03		      LDX	#<HellwayLeftText - 1	; Padding
    542  f210		       4c 15 f2 	      JMP	PrintGameMode
    543  f213				   PrintCreditsLeft
    544  f213		       a2 0c		      LDX	#<OpbText - 1	; Padding
    545  f215
    546  f215				   PrintGameMode
    547  f215		       20 21 f7 	      JSR	PrintStaticText
    548  f218		       a6 c6		      LDX	GameMode
    549  f21a		       bd 6c fc 	      LDA	FontLookup,X	;4 
    550  f21d		       85 d0		      STA	ScoreD0	;3
    551  f21f		       4c 31 f3 	      JMP	RightScoreWriteEnd	;3
    552  f222
    553  f222				   ProcessPlayer0OverText
    554  f222		       a5 f2		      LDA	IsOpponentInFront
    555  f224		       30 05		      BMI	PrintPlayer0Lose
    556  f226				   PrintPlayer0Win
    557  f226		       a2 1a		      LDX	#<WinText
    558  f228		       4c 2d f2 	      JMP	PrintPlayer0Status
    559  f22b				   PrintPlayer0Lose
    560  f22b		       a2 1d		      LDX	#<LoseText
    561  f22d				   PrintPlayer0Status
    562  f22d		       20 21 f7 	      JSR	PrintStaticText
    563  f230		       4c 6a f2 	      JMP	DistanceCheckpointCount	;3
    564  f233
    565  f233				   PrintPlayer0Checkpoint
    566  f233		       a2 00		      LDX	#<CheckpointText
    567  f235		       20 21 f7 	      JSR	PrintStaticText
    568  f238		       4c 40 f2 	      JMP	PrintPlayer0ScoreHoldChange	;3
    569  f23b
    570  f23b				   PrintPlayer0StartGame
    571  f23b		       a2 16		      LDX	#<GoText
    572  f23d		       20 21 f7 	      JSR	PrintStaticText
    573  f240
    574  f240				   PrintPlayer0ScoreHoldChange
    575  f240		       a2 00		      LDX	#0
    576  f242		       20 72 fa 	      JSR	PrintScoreHoldChange
    577  f245		       85 d4		      STA	ScoreD4
    578  f247		       4c 31 f3 	      JMP	RightScoreWriteEnd	;3
    579  f24a
    580  f24a				   Digit0Timer
    581  f24a		       a5 b8		      LDA	CountdownTimer	;3
    582  f24c		       85 b0		      STA	Tmp0
    583  f24e		       20 fc f7 	      JSR	BINBCD8
    584  f251							; LDA Tmp1 Also returned in A
    585  f251		       29 0f		      AND	#%00001111	;2
    586  f253		       aa		      TAX		; 2
    587  f254		       bd 6c fc 	      LDA	FontLookup,X	;4 
    588  f257		       85 d1		      STA	ScoreD1	;3
    589  f259
    590  f259				   Digit1Timer
    591  f259		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    592  f25b		       4a		      LSR		; 2
    593  f25c		       4a		      LSR		; 2
    594  f25d		       4a		      LSR		; 2
    595  f25e		       4a		      LSR		; 2
    596  f25f		       aa		      TAX		; 2
    597  f260		       bd 6c fc 	      LDA	FontLookup,X	;4
    598  f263		       85 d0		      STA	ScoreD0	;3
    599  f265
    600  f265				   SpeedBar
    601  f265		       a2 00		      LDX	#0
    602  f267		       20 7d fa 	      JSR	PrintSpeedBar
    603  f26a
    604  f26a				   DistanceCheckpointCount		; Will run all letters in the future
    605  f26a		       a5 ba		      LDA	Traffic0Msb
    606  f26c		       29 01		      AND	#%00000001
    607  f26e		       0a		      ASL
    608  f26f		       0a		      ASL
    609  f270		       0a		      ASL
    610  f271		       0a		      ASL
    611  f272		       85 b0		      STA	Tmp0
    612  f274		       a5 92		      LDA	TrafficOffset0 + 2	;3
    613  f276		       29 f0		      AND	#%11110000	;2
    614  f278		       4a		      LSR
    615  f279		       4a		      LSR
    616  f27a		       4a		      LSR
    617  f27b		       4a		      LSR
    618  f27c		       05 b0		      ORA	Tmp0
    619  f27e		       aa		      TAX		; 2
    620  f27f		       bd 6c fc 	      LDA	FontLookup,X	;4 
    621  f282		       85 d3		      STA	ScoreD3	;3
    622  f284
    623  f284				   DistanceBar		; 16 subdivisions per checkpoint
    624  f284		       a5 92		      LDA	TrafficOffset0 + 2	;3
    625  f286		       29 0f		      AND	#%00001111	;2
    626  f288		       aa		      TAX		; 2
    627  f289		       bd 8c fc 	      LDA	BarLookup,X	;4 
    628  f28c		       85 d4		      STA	ScoreD4	;3
    629  f28e
    630  f28e				   EndDrawDistance
    631  f28e		       4c 31 f3 	      JMP	RightScoreWriteEnd	;3
    632  f291
    633  f291				   RightScoreWrite
    634  f291		       a5 bd		      LDA	GameStatus
    635  f293		       f0 11		      BEQ	PrintHellwayRight
    636  f295		       a5 ca		      LDA	OpScoreFontColor
    637  f297		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    638  f299		       f0 3b		      BEQ	PrintPlayer1Checkpoint
    639  f29b		       c9 c8		      CMP	#OP_SCORE_FONT_COLOR_START
    640  f29d		       f0 3f		      BEQ	PrintPlayer1StartGame
    641  f29f		       c9 ab		      CMP	#OP_SCORE_FONT_COLOR_OVER
    642  f2a1		       f0 22		      BEQ	ProcessPlayer1OverText
    643  f2a3				   ContinueP1Score
    644  f2a3		       4c fc f2 	      JMP	OpDigit1Timer
    645  f2a6
    646  f2a6				   PrintHellwayRight
    647  f2a6		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    648  f2a8		       30 08		      BMI	ContinueWithDefaultRightText
    649  f2aa				   Player1IsReady
    650  f2aa		       a2 20		      LDX	#<ReadyText
    651  f2ac		       20 21 f7 	      JSR	PrintStaticText
    652  f2af		       4c 31 f3 	      JMP	RightScoreWriteEnd	;3
    653  f2b2				   ContinueWithDefaultRightText
    654  f2b2		       a5 8d		      LDA	FrameCount1
    655  f2b4		       29 01		      AND	#1
    656  f2b6		       d0 05		      BNE	PrintCreditsRight
    657  f2b8		       a2 08		      LDX	#<HellwayRightText
    658  f2ba		       4c bf f2 	      JMP	PrintRightIntro
    659  f2bd				   PrintCreditsRight
    660  f2bd		       a2 11		      LDX	#<YearText
    661  f2bf				   PrintRightIntro
    662  f2bf		       20 21 f7 	      JSR	PrintStaticText
    663  f2c2		       4c 31 f3 	      JMP	RightScoreWriteEnd
    664  f2c5
    665  f2c5				   ProcessPlayer1OverText
    666  f2c5		       a5 f2		      LDA	IsOpponentInFront
    667  f2c7		       30 05		      BMI	PrintPlayer1Lose
    668  f2c9				   PrintPlayer1Win
    669  f2c9		       a2 18		      LDX	#<WinText - 2
    670  f2cb		       4c d0 f2 	      JMP	PrintPlayer1Status
    671  f2ce				   PrintPlayer1Lose
    672  f2ce		       a2 1b		      LDX	#<LoseText - 2
    673  f2d0				   PrintPlayer1Status
    674  f2d0		       20 21 f7 	      JSR	PrintStaticText
    675  f2d3		       4c 0d f3 	      JMP	OpDistanceCheckpointCount
    676  f2d6
    677  f2d6				   PrintPlayer1Checkpoint
    678  f2d6		       a2 ff		      LDX	#<CheckpointText - 1
    679  f2d8		       20 21 f7 	      JSR	PrintStaticText
    680  f2db		       4c e3 f2 	      JMP	PrintPlayer1ScoreHoldChange	;3
    681  f2de
    682  f2de				   PrintPlayer1StartGame
    683  f2de		       a2 15		      LDX	#<GoText - 1
    684  f2e0		       20 21 f7 	      JSR	PrintStaticText
    685  f2e3
    686  f2e3				   PrintPlayer1ScoreHoldChange
    687  f2e3		       a2 01		      LDX	#1
    688  f2e5		       20 72 fa 	      JSR	PrintScoreHoldChange
    689  f2e8		       85 d0		      STA	ScoreD0
    690  f2ea		       4c 31 f3 	      JMP	RightScoreWriteEnd	;3
    691  f2ed
    692  f2ed				   OpDigit0Timer
    693  f2ed		       a5 b9		      LDA	OpCountdownTimer	;3
    694  f2ef		       85 b0		      STA	Tmp0
    695  f2f1		       20 fc f7 	      JSR	BINBCD8
    696  f2f4							; LDA Tmp1 Also returned in A
    697  f2f4		       29 0f		      AND	#%00001111	;2
    698  f2f6		       aa		      TAX		; 2
    699  f2f7		       bd 6c fc 	      LDA	FontLookup,X	;4 
    700  f2fa		       85 d4		      STA	ScoreD4	;3
    701  f2fc
    702  f2fc				   OpDigit1Timer
    703  f2fc		       a5 b1		      LDA	Tmp1	;3
    704  f2fe		       4a		      LSR		; 2
    705  f2ff		       4a		      LSR		; 2
    706  f300		       4a		      LSR		; 2
    707  f301		       4a		      LSR		; 2
    708  f302		       aa		      TAX		; 2
    709  f303		       bd 6c fc 	      LDA	FontLookup,X	;4
    710  f306		       85 d3		      STA	ScoreD3	;3
    711  f308
    712  f308				   OpSpeedBar
    713  f308		       a2 01		      LDX	#1
    714  f30a		       20 7d fa 	      JSR	PrintSpeedBar
    715  f30d
    716  f30d				   OpDistanceCheckpointCount
    717  f30d		       a5 bb		      LDA	OpTraffic0Msb
    718  f30f		       29 01		      AND	#%00000001
    719  f311		       0a		      ASL
    720  f312		       0a		      ASL
    721  f313		       0a		      ASL
    722  f314		       0a		      ASL
    723  f315		       85 b0		      STA	Tmp0
    724  f317		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    725  f319		       29 f0		      AND	#%11110000	;2
    726  f31b		       4a		      LSR
    727  f31c		       4a		      LSR
    728  f31d		       4a		      LSR
    729  f31e		       4a		      LSR
    730  f31f		       05 b0		      ORA	Tmp0
    731  f321		       aa		      TAX		; 2
    732  f322		       bd 6c fc 	      LDA	FontLookup,X	;4 
    733  f325		       85 d1		      STA	ScoreD1	;3
    734  f327
    735  f327				   OpDistanceBar		; 16 subdivisions per checkpoint
    736  f327		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    737  f329		       29 0f		      AND	#%00001111	;2
    738  f32b		       aa		      TAX		; 2
    739  f32c		       bd 8c fc 	      LDA	BarLookup,X	;4 
    740  f32f		       85 d0		      STA	ScoreD0	;3
    741  f331
    742  f331				   ScoreWriteEnd
    743  f331				   RightScoreWriteEnd
    744  f331
    745  f331				   ConfigurePFForScore
    746  f331		       20 73 f6 	      JSR	ClearAll
    747  f334		       a9 02		      LDA	#%00000010	; Score mode
    748  f336		       85 0a		      STA	CTRLPF
    749  f338		       a5 8c		      LDA	FrameCount0	;3
    750  f33a		       29 01		      AND	#%00000001
    751  f33c		       f0 0b		      BEQ	LeftScoreOn	; Half of the screen with the correct colors.
    752  f33e				   RightScoreOn
    753  f33e		       a5 ca		      LDA	OpScoreFontColor
    754  f340		       85 07		      STA	COLUP1
    755  f342		       a9 00		      LDA	#BACKGROUND_COLOR
    756  f344		       85 06		      STA	COLUP0
    757  f346		       4c 51 f3 	      JMP	CallWaitForVblankEnd
    758  f349				   LeftScoreOn
    759  f349		       a5 c9		      LDA	ScoreFontColor
    760  f34b		       85 06		      STA	COLUP0
    761  f34d		       a9 00		      LDA	#BACKGROUND_COLOR
    762  f34f		       85 07		      STA	COLUP1
    763  f351
    764  f351							; After here we are going to update the screen, No more heavy code
    765  f351				   CallWaitForVblankEnd
    766  f351		       20 9b f7 	      JSR	WaitForVblankEnd
    767  f354
    768  f354				   DrawScoreHud
    769  f354		       20 3f f7 	      JSR	PrintScore
    770  f357
    771  f357							; 4 lines to go crazy
    772  f357		       85 02		      STA	WSYNC
    773  f359							;STA HMOVE
    774  f359
    775  f359		       85 02		      STA	WSYNC
    776  f35b		       85 2a		      STA	HMOVE
    777  f35d
    778  f35d				   PrepareForTraffic
    779  f35d		       20 89 f6 	      JSR	ClearPF	; 32
    780  f360
    781  f360		       85 02		      STA	WSYNC
    782  f362		       85 2a		      STA	HMOVE
    783  f364		       85 02		      STA	WSYNC
    784  f366		       85 2a		      STA	HMOVE
    785  f368
    786  f368		       a9 30		      LDA	#%00110000	; 2 Score mode
    787  f36a		       85 0a		      STA	CTRLPF	;3
    788  f36c
    789  f36c		       a5 8c		      LDA	FrameCount0	;3
    790  f36e		       29 01		      AND	#%00000001	;2
    791  f370		       aa		      TAX		;2
    792  f371		       b5 c2		      LDA	TrafficColor,X	;4
    793  f373		       85 08		      STA	COLUPF	;3
    794  f375
    795  f375		       a9 98		      LDA	#PLAYER1_COLOR	;2
    796  f377		       85 07		      STA	COLUP1	;3
    797  f379
    798  f379		       a5 c9		      LDA	ScoreFontColor	;3
    799  f37b		       85 06		      STA	COLUP0	;3
    800  f37d
    801  f37d		       a5 ca		      LDA	OpScoreFontColor	;3
    802  f37f		       85 07		      STA	COLUP1	;3
    803  f381
    804  f381		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    805  f383
    806  f383		       a5 8c		      LDA	FrameCount0	;Brach flag
    807  f385		       29 01		      AND	#%00000001
    808  f387
    809  f387		       d0 03		      BNE	OpScanLoop	;2
    810  f389		       4c 46 f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    811  f38c							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    812  f38c
    813  f38c							;main scanline loop...
    814  f38c				   OpScanLoop
    815  f38c		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    816  f38e
    817  f38e		       a5 80		      LDA	GRP0Cache	;3
    818  f390		       85 1b		      STA	GRP0	;3
    819  f392
    820  f392		       a5 84		      LDA	GRP1Cache	;3
    821  f394		       85 1c		      STA	GRP1	;3
    822  f396
    823  f396		       a5 85		      LDA	ENABLCache	;3
    824  f398		       85 1f		      STA	ENABL	;3
    825  f39a
    826  f39a		       a5 86		      LDA	ENAM0Cache	;3
    827  f39c		       85 1d		      STA	ENAM0	;3
    828  f39e
    829  f39e		       a5 87		      LDA	ENAM1Cache	;3
    830  f3a0		       85 1e		      STA	ENAM1	;3
    831  f3a2
    832  f3a2		       a5 81		      LDA	PF0Cache	;3
    833  f3a4		       85 0d		      STA	PF0	;3
    834  f3a6
    835  f3a6		       a9 00		      LDA	#0	;2
    836  f3a8							;STA PF0	     ;3
    837  f3a8		       85 80		      STA	GRP0Cache	;3
    838  f3aa		       85 86		      STA	ENAM0Cache	;3
    839  f3ac		       85 85		      STA	ENABLCache	;3
    840  f3ae		       85 87		      STA	ENAM1Cache	; 3
    841  f3b0							;STA GRP1Cache ;3
    842  f3b0		       85 0d		      STA	PF0	;3
    843  f3b2							;STA PF2	     ;3
    844  f3b2
    845  f3b2		       a5 83		      LDA	PF2Cache	;3
    846  f3b4		       85 0f		      STA	PF2	;3
    847  f3b6
    848  f3b6				   OpDrawCar0
    849  f3b6		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    850  f3b8		       b0 04		      BCS	OpSkipDrawCar	;2
    851  f3ba		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    852  f3bc		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    853  f3be				   OpSkipDrawCar
    854  f3be
    855  f3be							;BEQ DrawTraffic3
    856  f3be				   OpDrawTraffic1		; 33
    857  f3be		       98		      TYA		; 2
    858  f3bf		       18		      CLC		; 2 
    859  f3c0		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    860  f3c2		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    861  f3c4		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    862  f3c6		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    863  f3c8		       4c cd f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    864  f3cb				   OpEorOffsetWithCarry
    865  f3cb		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    866  f3cd				   OpAfterEorOffsetWithCarry		;17
    867  f3cd		       aa		      TAX		;2
    868  f3ce		       bd 00 fe 	      LDA	AesTable,X	; 4
    869  f3d1		       c5 bf		      CMP	OpTrafficChance	;3
    870  f3d3		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    871  f3d5		       a9 ff		      LDA	#$FF	;2
    872  f3d7		       85 86		      STA	ENAM0Cache	;3
    873  f3d9				   OpFinishDrawTraffic1
    874  f3d9
    875  f3d9				   OpErasePF2
    876  f3d9		       a9 00		      LDA	#0
    877  f3db		       85 0f		      STA	PF2
    878  f3dd
    879  f3dd				   OpDrawTraffic2		; 33
    880  f3dd		       98		      TYA		; 2
    881  f3de		       18		      CLC		; 2 
    882  f3df		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    883  f3e1		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    884  f3e3		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    885  f3e5		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    886  f3e7		       4c ec f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    887  f3ea				   OpEorOffsetWithCarry2
    888  f3ea		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    889  f3ec				   OpAfterEorOffsetWithCarry2		;17
    890  f3ec		       aa		      TAX		;2
    891  f3ed		       bd 00 fe 	      LDA	AesTable,X	; 4
    892  f3f0		       c5 bf		      CMP	OpTrafficChance	;3
    893  f3f2		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    894  f3f4		       a9 02		      LDA	#%00000010	;2
    895  f3f6		       85 85		      STA	ENABLCache	;3
    896  f3f8				   OpFinishDrawTraffic2
    897  f3f8
    898  f3f8							;STA WSYNC ;65 / 137
    899  f3f8
    900  f3f8							; LDA Tmp0 ; Flicker this line if drawing car
    901  f3f8							; BEQ FinishDrawTraffic4
    902  f3f8				   OpDrawTraffic3		; 33
    903  f3f8		       98		      TYA		; 2
    904  f3f9		       18		      CLC		; 2 
    905  f3fa		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    906  f3fc		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    907  f3fe		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    908  f400		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    909  f402		       4c 07 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    910  f405				   OpEorOffsetWithCarry3
    911  f405		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    912  f407				   OpAfterEorOffsetWithCarry3		;17
    913  f407		       aa		      TAX		;2
    914  f408		       bd 00 fe 	      LDA	AesTable,X	; 4
    915  f40b		       c5 bf		      CMP	OpTrafficChance	;3
    916  f40d		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    917  f40f		       a9 02		      LDA	#%00000010	;2
    918  f411		       85 87		      STA	ENAM1Cache
    919  f413				   OpFinishDrawTraffic3
    920  f413
    921  f413				   OpDrawOponent		;26
    922  f413		       84 b0		      STY	Tmp0	;3
    923  f415		       a4 cf		      LDY	OpponentLine	;3
    924  f417		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    925  f419		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    926  f41b				   OpDrawOpponent
    927  f41b		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    928  f41d		       85 80		      STA	GRP0Cache	;3
    929  f41f		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    930  f421		       a4 b0		      LDY	Tmp0	;3
    931  f423		       4c 37 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    932  f426				   OpSkipDrawOpponent
    933  f426		       c6 cf		      DEC	OpponentLine	;5
    934  f428		       a4 b0		      LDY	Tmp0	;3
    935  f42a
    936  f42a
    937  f42a				   OpDrawTraffic0		; 21 2pe
    938  f42a		       98		      TYA		; 2
    939  f42b		       18		      CLC		; 2 
    940  f42c		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    941  f42e		       29 08		      AND	#%00001000	;2
    942  f430		       f0 05		      BEQ	OpHasNoBorderP0	;3
    943  f432				   OpHasBorderP0
    944  f432		       a9 e0		      LDA	#%11100000	; 2
    945  f434		       4c 39 f4 	      JMP	OpStoreBorderP0	; 3
    946  f437				   OpHasNoBorderP0
    947  f437		       a9 00		      LDA	#0	; 2
    948  f439				   OpStoreBorderP0
    949  f439		       85 81		      STA	PF0Cache	; 3
    950  f43b		       85 83		      STA	PF2Cache	; 3
    951  f43d
    952  f43d				   OpSkipDrawTraffic0
    953  f43d
    954  f43d				   OpWhileScanLoop
    955  f43d		       88		      DEY		;2
    956  f43e		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    957  f440		       4c 8c f3 	      JMP	OpScanLoop	;3
    958  f443				   OpFinishScanLoop		; 7 209 of 222
    959  f443		       4c fb f4 	      JMP	FinishScanLoop
    960  f446
    961  f446							;main scanline loop...
    962  f446				   ScanLoop
    963  f446		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    964  f448
    965  f448		       a5 81		      LDA	PF0Cache	;3
    966  f44a		       85 0d		      STA	PF0	;3
    967  f44c
    968  f44c		       a5 80		      LDA	GRP0Cache	;3
    969  f44e		       85 1b		      STA	GRP0	;3
    970  f450
    971  f450		       a5 84		      LDA	GRP1Cache	;3
    972  f452		       85 1c		      STA	GRP1	;3
    973  f454
    974  f454		       a5 86		      LDA	ENAM0Cache	;3
    975  f456		       85 1d		      STA	ENAM0	;3
    976  f458
    977  f458		       a5 85		      LDA	ENABLCache	;3
    978  f45a		       85 1f		      STA	ENABL	;3
    979  f45c
    980  f45c		       a5 87		      LDA	ENAM1Cache	;3
    981  f45e		       85 1e		      STA	ENAM1	;3
    982  f460
    983  f460		       a5 83		      LDA	PF2Cache	;3
    984  f462		       85 0f		      STA	PF2	;3
    985  f464
    986  f464		       a9 00		      LDA	#0	;2
    987  f466		       85 0d		      STA	PF0	;3
    988  f468		       85 84		      STA	GRP1Cache	;3
    989  f46a		       85 85		      STA	ENABLCache	;3
    990  f46c		       85 86		      STA	ENAM0Cache	;3
    991  f46e		       85 87		      STA	ENAM1Cache	; 3
    992  f470							;STA GRP0Cache
    993  f470		       85 0f		      STA	PF2	;3
    994  f472
    995  f472				   DrawCar0
    996  f472		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    997  f474		       b0 04		      BCS	SkipDrawCar	;2
    998  f476		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    999  f478		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1000  f47a				   SkipDrawCar
   1001  f47a
   1002  f47a							;BEQ DrawTraffic3
   1003  f47a				   DrawTraffic1 		; 33
   1004  f47a		       98		      TYA		; 2
   1005  f47b		       18		      CLC		; 2 
   1006  f47c		       65 95		      ADC	TrafficOffset1 + 1	;3
   1007  f47e		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1008  f480		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1009  f482		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1010  f484		       4c 89 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1011  f487				   EorOffsetWithCarry
   1012  f487		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1013  f489				   AfterEorOffsetWithCarry		;17
   1014  f489		       aa		      TAX		;2
   1015  f48a		       bd 00 fe 	      LDA	AesTable,X	; 4
   1016  f48d		       c5 be		      CMP	TrafficChance	;3
   1017  f48f		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1018  f491		       a9 ff		      LDA	#$FF	;2
   1019  f493		       85 86		      STA	ENAM0Cache	;3
   1020  f495				   FinishDrawTraffic1
   1021  f495
   1022  f495				   DrawTraffic2 		; 33
   1023  f495		       98		      TYA		; 2
   1024  f496		       18		      CLC		; 2 
   1025  f497		       65 99		      ADC	TrafficOffset2 + 1	;3
   1026  f499		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1027  f49b		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1028  f49d		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1029  f49f		       4c a4 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1030  f4a2				   EorOffsetWithCarry2
   1031  f4a2		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1032  f4a4				   AfterEorOffsetWithCarry2		;17
   1033  f4a4		       aa		      TAX		;2
   1034  f4a5		       bd 00 fe 	      LDA	AesTable,X	; 4
   1035  f4a8		       c5 be		      CMP	TrafficChance	;3
   1036  f4aa		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1037  f4ac		       a9 02		      LDA	#%00000010	;2
   1038  f4ae		       85 85		      STA	ENABLCache	;3
   1039  f4b0				   FinishDrawTraffic2
   1040  f4b0
   1041  f4b0							;STA WSYNC ;65 / 137
   1042  f4b0
   1043  f4b0							; LDA Tmp0 ; Flicker this line if drawing car
   1044  f4b0							; BEQ FinishDrawTraffic4
   1045  f4b0				   DrawTraffic3 		; 33
   1046  f4b0		       98		      TYA		; 2
   1047  f4b1		       18		      CLC		; 2 
   1048  f4b2		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1049  f4b4		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1050  f4b6		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1051  f4b8		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1052  f4ba		       4c bf f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1053  f4bd				   EorOffsetWithCarry3
   1054  f4bd		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1055  f4bf				   AfterEorOffsetWithCarry3		;17
   1056  f4bf		       aa		      TAX		;2
   1057  f4c0		       bd 00 fe 	      LDA	AesTable,X	; 4
   1058  f4c3		       c5 be		      CMP	TrafficChance	;3
   1059  f4c5		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1060  f4c7		       a9 02		      LDA	#%00000010	;2
   1061  f4c9		       85 87		      STA	ENAM1Cache
   1062  f4cb				   FinishDrawTraffic3
   1063  f4cb
   1064  f4cb
   1065  f4cb				   DrawOponent		;26
   1066  f4cb		       84 b0		      STY	Tmp0	;3
   1067  f4cd		       a4 cf		      LDY	OpponentLine	;3
   1068  f4cf		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1069  f4d1		       b0 0b		      BCS	SkipDrawOpponent	;2
   1070  f4d3				   DrawOpponent
   1071  f4d3		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1072  f4d5		       85 84		      STA	GRP1Cache	;3
   1073  f4d7		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1074  f4d9		       a4 b0		      LDY	Tmp0	;3
   1075  f4db		       4c ef f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1076  f4de				   SkipDrawOpponent
   1077  f4de		       c6 cf		      DEC	OpponentLine	;5
   1078  f4e0		       a4 b0		      LDY	Tmp0	;3
   1079  f4e2
   1080  f4e2				   DrawTraffic0 		; 21 2pe
   1081  f4e2		       98		      TYA		; 2
   1082  f4e3		       18		      CLC		; 2 
   1083  f4e4		       65 91		      ADC	TrafficOffset0 + 1	;3
   1084  f4e6		       29 08		      AND	#%00001000	;2
   1085  f4e8		       f0 05		      BEQ	HasNoBorderP0	;3
   1086  f4ea				   HasBorderP0
   1087  f4ea		       a9 e0		      LDA	#%11100000	; 2
   1088  f4ec		       4c f1 f4 	      JMP	StoreBorderP0	; 3
   1089  f4ef				   HasNoBorderP0
   1090  f4ef		       a9 00		      LDA	#0	; 2
   1091  f4f1				   StoreBorderP0
   1092  f4f1		       85 81		      STA	PF0Cache	; 3
   1093  f4f3		       85 83		      STA	PF2Cache	; 3
   1094  f4f5
   1095  f4f5				   SkipDrawTraffic0
   1096  f4f5
   1097  f4f5				   WhileScanLoop
   1098  f4f5		       88		      DEY		;2
   1099  f4f6		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1100  f4f8		       4c 46 f4 	      JMP	ScanLoop	;3
   1101  f4fb				   FinishScanLoop		; 7 209 of 222
   1102  f4fb
   1103  f4fb		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1104  f4fd		       20 98 f6 	      JSR	LoadAll
   1105  f500		       85 02		      STA	WSYNC	; do stuff!
   1106  f502		       85 02		      STA	WSYNC
   1107  f504		       85 02		      STA	WSYNC
   1108  f506
   1109  f506				   PrepareOverscan
   1110  f506		       a9 02		      LDA	#2
   1111  f508		       85 02		      STA	WSYNC
   1112  f50a							;STA HMOVE	; HMOVE 10
   1113  f50a		       85 01		      STA	VBLANK
   1114  f50c
   1115  f50c		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1116  f50e		       8d 96 02 	      STA	TIM64T
   1117  f511
   1118  f511		       85 2b		      STA	HMCLR	; Before we process car movement
   1119  f513							;Read Fire Button before, will make it start the game for now.
   1120  f513				   StartGame
   1121  f513		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1122  f515		       25 0d		      AND	INPT5	;3 player 1
   1123  f517		       30 3c		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1124  f519		       a5 8c		      LDA	FrameCount0
   1125  f51b		       29 01		      AND	#%00000001
   1126  f51d		       d0 36		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1127  f51f		       a5 bd		      LDA	GameStatus	;3
   1128  f521		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1129  f523		       d0 30		      BNE	SkipGameStart
   1130  f525		       a5 c6		      LDA	GameMode
   1131  f527		       c9 10		      CMP	#MAX_GAME_MODE
   1132  f529		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1133  f52b		       a9 00		      LDA	#0
   1134  f52d		       85 c6		      STA	GameMode
   1135  f52f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1136  f531		       85 bc		      STA	SwitchDebounceCounter
   1137  f533		       4c 55 f5 	      JMP	SkipGameStart
   1138  f536				   SetGameRunningIfBothPressing
   1139  f536		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1140  f538		       05 0d		      ORA	INPT5	;3 player 1
   1141  f53a		       30 19		      BMI	SkipGameStart
   1142  f53c				   SetGameRunning
   1143  f53c		       e6 bd		      INC	GameStatus
   1144  f53e		       a9 00		      LDA	#0	;
   1145  f540		       85 8c		      STA	FrameCount0
   1146  f542		       85 8d		      STA	FrameCount1
   1147  f544		       a9 38		      LDA	#SCORE_FONT_COLOR_START
   1148  f546		       85 c9		      STA	ScoreFontColor
   1149  f548		       a9 c8		      LDA	#OP_SCORE_FONT_COLOR_START
   1150  f54a		       85 ca		      STA	OpScoreFontColor
   1151  f54c		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1152  f54e		       85 cb		      STA	ScoreFontColorHoldChange
   1153  f550		       85 cc		      STA	OpScoreFontColorHoldChange
   1154  f552		       4c c9 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1155  f555				   SkipGameStart
   1156  f555
   1157  f555				   ReadSwitches
   1158  f555		       a6 bc		      LDX	SwitchDebounceCounter
   1159  f557		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1160  f559		       a9 01		      LDA	#%00000001
   1161  f55b		       2c 82 02 	      BIT	SWCHB
   1162  f55e		       d0 07		      BNE	SkipReset
   1163  f560		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1164  f562		       85 bc		      STA	SwitchDebounceCounter
   1165  f564		       4c d1 f5 	      JMP	OverScanWaitBeforeReset
   1166  f567				   SkipReset
   1167  f567
   1168  f567				   GameModeSelect
   1169  f567		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1170  f569		       d0 22		      BNE	SkipGameSelect
   1171  f56b		       a2 00		      LDX	#0
   1172  f56d		       20 c4 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1173  f570		       e8		      INX
   1174  f571		       20 c4 f6 	      JSR	ConfigureDifficulty
   1175  f574				   ContinueGameSelect
   1176  f574		       a9 02		      LDA	#%00000010
   1177  f576		       2c 82 02 	      BIT	SWCHB
   1178  f579		       d0 12		      BNE	SkipGameSelect
   1179  f57b		       a6 c6		      LDX	GameMode
   1180  f57d		       e0 10		      CPX	#MAX_GAME_MODE
   1181  f57f		       f0 04		      BEQ	ResetGameMode
   1182  f581		       e8		      INX
   1183  f582		       4c 87 f5 	      JMP	StoreGameMode
   1184  f585				   ResetGameMode
   1185  f585		       a2 00		      LDX	#0
   1186  f587				   StoreGameMode
   1187  f587		       86 c6		      STX	GameMode
   1188  f589		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1189  f58b		       85 bc		      STA	SwitchDebounceCounter
   1190  f58d				   SkipGameSelect
   1191  f58d		       4c 92 f5 	      JMP	EndReadSwitches
   1192  f590				   DecrementSwitchDebounceCounter
   1193  f590		       c6 bc		      DEC	SwitchDebounceCounter
   1194  f592				   EndReadSwitches
   1195  f592
   1196  f592				   DoNotTurnBeforeStart
   1197  f592							;STA HMCLR
   1198  f592		       a5 bd		      LDA	GameStatus
   1199  f594		       f0 33		      BEQ	OverScanWait
   1200  f596
   1201  f596							; Last thing, will overrride hmove
   1202  f596				   CallTestColisionAndMove
   1203  f596		       a2 00		      LDX	#0	; Player 0
   1204  f598							; Colision with traffic, each player check different flags,
   1205  f598		       a5 8c		      LDA	FrameCount0
   1206  f59a		       29 01		      AND	#%00000001
   1207  f59c		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1208  f59e		       20 73 f8 	      JSR	IsOpponentColliding
   1209  f5a1		       05 01		      ORA	CXM1P
   1210  f5a3		       4a		      LSR
   1211  f5a4		       05 00		      ORA	CXM0P
   1212  f5a6		       05 02		      ORA	CXP0FB
   1213  f5a8							; ORA CXPPMM ; Collision between players will have its own rules
   1214  f5a8				   SkipColisionPlayer0		; Should not colide on opponent side.
   1215  f5a8		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1216  f5aa		       85 b2		      STA	Tmp2
   1217  f5ac		       20 87 f8 	      JSR	TestCollisionAndMove
   1218  f5af
   1219  f5af		       e8		      INX		; player 1
   1220  f5b0		       a5 8c		      LDA	FrameCount0
   1221  f5b2		       29 01		      AND	#%00000001
   1222  f5b4		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1223  f5b6		       20 73 f8 	      JSR	IsOpponentColliding
   1224  f5b9		       05 00		      ORA	CXM0P
   1225  f5bb		       4a		      LSR
   1226  f5bc		       05 01		      ORA	CXM1P
   1227  f5be		       05 03		      ORA	CXP1FB
   1228  f5c0				   SkipColisionPlayer1
   1229  f5c0		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1230  f5c2		       85 b2		      STA	Tmp2
   1231  f5c4		       20 87 f8 	      JSR	TestCollisionAndMove
   1232  f5c7
   1233  f5c7				   ClearCollision
   1234  f5c7		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1235  f5c9
   1236  f5c9				   OverScanWait
   1237  f5c9		       ad 84 02 	      LDA	INTIM
   1238  f5cc		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1239  f5ce		       4c d8 f0 	      JMP	MainLoop
   1240  f5d1
   1241  f5d1				   OverScanWaitBeforeReset
   1242  f5d1		       ad 84 02 	      LDA	INTIM
   1243  f5d4		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1244  f5d6		       4c 14 f0 	      JMP	Start
   1245  f5d9
   1246  f5d9				   Subroutines
   1247  f5d9
   1248  f5d9							;X Player
   1249  f5d9							;Tmp1 TrafficOffset 2
   1250  f5d9				   ProcessSound
   1251  f5d9				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1252  f5d9		       b5 c9		      LDA	ScoreFontColor,X	;3
   1253  f5db		       dd b7 fc 	      CMP	PlayerToScoreOverColor,X	;2
   1254  f5de		       f0 6b		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1255  f5e0		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X	;2
   1256  f5e3		       f0 29		      BEQ	PlayCheckpoint	;2
   1257  f5e5		       b5 8e		      LDA	CollisionCounter,X	;3
   1258  f5e7		       c9 e0		      CMP	#$E0	;2
   1259  f5e9		       b0 14		      BCS	PlayColision	;2
   1260  f5eb		       b5 cd		      LDA	NextCheckpoint,X	;3
   1261  f5ed		       38		      SEC		;2
   1262  f5ee		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1263  f5f0		       c9 02		      CMP	#$02	;2
   1264  f5f2		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1265  f5f4		       b5 b8		      LDA	CountdownTimer,X	; 3
   1266  f5f6		       f0 53		      BEQ	EngineSound	;2
   1267  f5f8		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1268  f5fa		       90 37		      BCC	PlayWarnTimeEnding	;4
   1269  f5fc		       4c 4b f6 	      JMP	EngineSound	;3
   1270  f5ff				   PlayColision
   1271  f5ff		       a9 1f		      LDA	#31
   1272  f601		       95 17		      STA	AUDF0,X
   1273  f603		       a9 08		      LDA	#8
   1274  f605		       95 15		      STA	AUDC0,X
   1275  f607		       a9 08		      LDA	#8
   1276  f609		       95 19		      STA	AUDV0,X
   1277  f60b		       4c 72 f6 	      JMP	EndSound
   1278  f60e
   1279  f60e				   PlayCheckpoint
   1280  f60e		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1281  f610		       4a		      LSR		;2
   1282  f611		       4a		      LSR		;2
   1283  f612		       4a		      LSR		;2
   1284  f613		       95 17		      STA	AUDF0,X	;3
   1285  f615		       a9 0c		      LDA	#12	;2
   1286  f617		       95 15		      STA	AUDC0,X	;3
   1287  f619		       a9 06		      LDA	#6	;2
   1288  f61b		       95 19		      STA	AUDV0,X	;3
   1289  f61d		       4c 72 f6 	      JMP	EndSound	;3
   1290  f620
   1291  f620				   PlayBeforeCheckpoint
   1292  f620		       a5 8c		      LDA	FrameCount0	;3
   1293  f622		       29 1c		      AND	#%00011100	;2
   1294  f624		       09 03		      ORA	#%00000011	;2
   1295  f626		       95 17		      STA	AUDF0,X	;3
   1296  f628		       a9 0c		      LDA	#12	;2
   1297  f62a		       95 15		      STA	AUDC0,X	;3
   1298  f62c		       a9 03		      LDA	#3	;2
   1299  f62e		       95 19		      STA	AUDV0,X	;3
   1300  f630		       4c 72 f6 	      JMP	EndSound	;3
   1301  f633
   1302  f633				   PlayWarnTimeEnding
   1303  f633		       a5 8c		      LDA	FrameCount0	;3
   1304  f635		       29 04		      AND	#%00000100	;2
   1305  f637		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1306  f639		       18		      CLC		;2
   1307  f63a		       a9 0a		      LDA	#10	;2
   1308  f63c		       75 b8		      ADC	CountdownTimer,X	;2
   1309  f63e		       95 17		      STA	AUDF0,X	;3
   1310  f640		       a9 0c		      LDA	#12	;2
   1311  f642		       95 15		      STA	AUDC0,X	;3
   1312  f644		       a9 03		      LDA	#3	;2
   1313  f646		       95 19		      STA	AUDV0,X	;3
   1314  f648		       4c 72 f6 	      JMP	EndSound	;3
   1315  f64b
   1316  f64b				   EngineSound		;41
   1317  f64b		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1318  f64d		       95 19		      STA	AUDV0,X
   1319  f64f		       b5 b8		      LDA	CountdownTimer,X	;3
   1320  f651		       f0 1b		      BEQ	EngineOff	;2
   1321  f653		       b4 d5		      LDY	Gear,X
   1322  f655		       b5 de		      LDA	Player0SpeedL,X	;3
   1323  f657		       4a		      LSR		;2
   1324  f658		       4a		      LSR		;2
   1325  f659		       4a		      LSR		;2
   1326  f65a		       29 0f		      AND	#%00001111	;2
   1327  f65c		       85 b0		      STA	Tmp0	;3
   1328  f65e		       b9 2b ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1329  f661		       38		      SEC		;2
   1330  f662		       e5 b0		      SBC	Tmp0	;3
   1331  f664		       95 17		      STA	AUDF0,X	;3
   1332  f666		       b9 25 ff 	      LDA	EngineSoundType,Y	;4
   1333  f669		       95 15		      STA	AUDC0,X	;3
   1334  f66b		       4c 72 f6 	      JMP	EndEngineSound	;3
   1335  f66e				   EngineOff
   1336  f66e				   MuteSound
   1337  f66e		       a9 00		      LDA	#0
   1338  f670		       95 15		      STA	AUDC0,X
   1339  f672				   EndEngineSound
   1340  f672				   EndSound
   1341  f672		       60		      RTS
   1342  f673
   1343  f673				   ClearAll		; 58
   1344  f673		       a9 00		      LDA	#0	;2
   1345  f675		       85 1b		      STA	GRP0	;3
   1346  f677		       85 1c		      STA	GRP1	;3
   1347  f679		       85 1f		      STA	ENABL	;3
   1348  f67b		       85 1d		      STA	ENAM0	;3
   1349  f67d		       85 1e		      STA	ENAM1	;3
   1350  f67f		       85 80		      STA	GRP0Cache	;3
   1351  f681		       85 84		      STA	GRP1Cache	;3
   1352  f683		       85 85		      STA	ENABLCache	;3
   1353  f685		       85 86		      STA	ENAM0Cache	;3
   1354  f687		       85 87		      STA	ENAM1Cache	;3
   1355  f689
   1356  f689				   ClearPF		; 26
   1357  f689		       a9 00		      LDA	#0	;2
   1358  f68b				   ClearPFSkipLDA0
   1359  f68b		       85 0d		      STA	PF0	;3
   1360  f68d		       85 0e		      STA	PF1	;3
   1361  f68f		       85 0f		      STA	PF2	;3	
   1362  f691		       85 81		      STA	PF0Cache	;3
   1363  f693		       85 82		      STA	PF1Cache	;3
   1364  f695		       85 83		      STA	PF2Cache	;3 
   1365  f697		       60		      RTS		;6
   1366  f698				   EndClearAll
   1367  f698
   1368  f698				   LoadAll		; 48
   1369  f698		       a5 81		      LDA	PF0Cache	;3
   1370  f69a		       85 0d		      STA	PF0	;3
   1371  f69c
   1372  f69c		       a5 82		      LDA	PF1Cache	;3
   1373  f69e		       85 0e		      STA	PF1	;3
   1374  f6a0
   1375  f6a0		       a5 83		      LDA	PF2Cache	;3
   1376  f6a2		       85 0f		      STA	PF2	;3
   1377  f6a4
   1378  f6a4		       a5 84		      LDA	GRP1Cache	;3
   1379  f6a6		       85 1c		      STA	GRP1	;3
   1380  f6a8
   1381  f6a8		       a5 85		      LDA	ENABLCache	;3
   1382  f6aa		       85 1f		      STA	ENABL	;3
   1383  f6ac
   1384  f6ac		       a5 86		      LDA	ENAM0Cache	;3
   1385  f6ae		       85 1d		      STA	ENAM0	;3
   1386  f6b0
   1387  f6b0		       a5 87		      LDA	ENAM1Cache	;3
   1388  f6b2		       85 1e		      STA	ENAM1	;3
   1389  f6b4
   1390  f6b4		       60		      RTS		;6
   1391  f6b5				   EndLoadAll
   1392  f6b5
   1393  f6b5				   NextDifficulty		;Is a SBR
   1394  f6b5		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1395  f6b7		       29 01		      AND	#%00000001
   1396  f6b9		       d0 24		      BNE	CheckRandomDifficulty
   1397  f6bb
   1398  f6bb		       b5 c4		      LDA	CurrentDifficulty,X
   1399  f6bd		       18		      CLC
   1400  f6be		       69 01		      ADC	#1
   1401  f6c0		       29 03		      AND	#%00000011	; 0 to 3
   1402  f6c2		       95 c4		      STA	CurrentDifficulty,X
   1403  f6c4
   1404  f6c4				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1405  f6c4		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1406  f6c6		       b9 a7 ff 	      LDA	TrafficChanceTable,Y
   1407  f6c9		       95 be		      STA	TrafficChance,X
   1408  f6cb		       b9 a3 ff 	      LDA	TrafficColorTable,Y
   1409  f6ce		       95 c2		      STA	TrafficColor,X
   1410  f6d0
   1411  f6d0		       a5 c6		      LDA	GameMode	;
   1412  f6d2		       29 01		      AND	#%00000001
   1413  f6d4		       f0 03		      BEQ	UseNextDifficultyTime
   1414  f6d6		       4c da f6 	      JMP	StoreDifficultyTime
   1415  f6d9				   UseNextDifficultyTime
   1416  f6d9		       c8		      INY
   1417  f6da				   StoreDifficultyTime
   1418  f6da		       b9 ab ff 	      LDA	TrafficTimeTable,Y
   1419  f6dd		       95 c0		      STA	CheckpointTime,X
   1420  f6df
   1421  f6df				   CheckRandomDifficulty
   1422  f6df		       a5 c6		      LDA	GameMode
   1423  f6e1		       29 08		      AND	#%00001000	; Random difficulties
   1424  f6e3		       f0 26		      BEQ	ReturnFromNextDifficulty
   1425  f6e5				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1426  f6e5		       a5 f2		      LDA	IsOpponentInFront
   1427  f6e7		       30 12		      BMI	UseOpponentChance
   1428  f6e9		       a5 cf		      LDA	OpponentLine	; Same line
   1429  f6eb		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1430  f6ed		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1431  f6ef		       a4 8c		      LDY	FrameCount0
   1432  f6f1		       b9 00 fe 	      LDA	AesTable,Y
   1433  f6f4							;EOR TrafficChance, no need, lets make life simple
   1434  f6f4		       29 3f		      AND	#%00111111
   1435  f6f6		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1436  f6f8		       4c 0b f7 	      JMP	ReturnFromNextDifficulty
   1437  f6fb				   UseOpponentChance
   1438  f6fb		       8a		      TXA
   1439  f6fc		       49 01		      EOR	#%00000001	; Reverts the player
   1440  f6fe		       aa		      TAX
   1441  f6ff		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1442  f701		       85 b3		      STA	Tmp3
   1443  f703		       8a		      TXA
   1444  f704		       49 01		      EOR	#%00000001	; Restors the player
   1445  f706		       aa		      TAX
   1446  f707		       a5 b3		      LDA	Tmp3
   1447  f709		       95 be		      STA	TrafficChance,X
   1448  f70b
   1449  f70b				   ReturnFromNextDifficulty
   1450  f70b		       60		      RTS
   1451  f70c
   1452  f70c				   DefaultOffsets
   1453  f70c		       a9 20		      LDA	#$20
   1454  f70e		       85 96		      STA	TrafficOffset1 + 2
   1455  f710		       85 a6		      STA	OpTrafficOffset1 + 2
   1456  f712		       a9 40		      LDA	#$40
   1457  f714		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1458  f716		       85 aa		      STA	OpTrafficOffset2 + 2
   1459  f718		       a9 60		      LDA	#$60
   1460  f71a		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1461  f71c		       85 ae		      STA	OpTrafficOffset3 + 2
   1462  f71e		       a9 80		      LDA	#$80
   1463  f720		       60		      RTS
   1464  f721
   1465  f721				   PrintStaticText		; Preload X with the offset referent to StaticText
   1466  f721		       bd 00 ff 	      LDA	StaticText,X
   1467  f724		       85 d0		      STA	ScoreD0
   1468  f726		       e8		      INX
   1469  f727		       bd 00 ff 	      LDA	StaticText,X
   1470  f72a		       85 d1		      STA	ScoreD1
   1471  f72c		       e8		      INX
   1472  f72d		       bd 00 ff 	      LDA	StaticText,X
   1473  f730		       85 d2		      STA	ScoreD2
   1474  f732		       e8		      INX
   1475  f733		       bd 00 ff 	      LDA	StaticText,X
   1476  f736		       85 d3		      STA	ScoreD3
   1477  f738		       e8		      INX
   1478  f739		       bd 00 ff 	      LDA	StaticText,X
   1479  f73c		       85 d4		      STA	ScoreD4
   1480  f73e		       60		      RTS
   1481  f73f
   1482  f73f				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1483  f73f		       a2 00		      LDX	#0
   1484  f741		       a0 04		      LDY	#FONT_OFFSET
   1485  f743
   1486  f743				   ScoreLoop		; 20 
   1487  f743		       85 02		      STA	WSYNC	;2
   1488  f745		       85 2a		      STA	HMOVE
   1489  f747
   1490  f747		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1491  f749		       85 0d		      STA	PF0	;3
   1492  f74b
   1493  f74b		       a5 82		      LDA	PF1Cache	;3
   1494  f74d		       85 0e		      STA	PF1	;3
   1495  f74f
   1496  f74f		       a5 83		      LDA	PF2Cache	;3
   1497  f751		       85 0f		      STA	PF2	;3
   1498  f753
   1499  f753				   DrawScoreD0		; 15
   1500  f753		       a6 d0		      LDX	ScoreD0	; 3
   1501  f755		       bd 00 fd 	      LDA	Font,X	;4
   1502  f758		       85 81		      STA	PF0Cache	;3
   1503  f75a		       c6 d0		      DEC	ScoreD0	;5
   1504  f75c
   1505  f75c				   DrawScoreD1		; 23	
   1506  f75c		       a6 d1		      LDX	ScoreD1	; 3
   1507  f75e		       bd 00 fd 	      LDA	Font,X	;4
   1508  f761		       0a		      ASL		;2
   1509  f762		       0a		      ASL		;2
   1510  f763		       0a		      ASL		;2
   1511  f764		       0a		      ASL		;2
   1512  f765		       85 82		      STA	PF1Cache	;3
   1513  f767		       c6 d1		      DEC	ScoreD1	;5
   1514  f769
   1515  f769				   DrawScoreD2		; 20
   1516  f769		       a6 d2		      LDX	ScoreD2	; 3
   1517  f76b		       bd 00 fd 	      LDA	Font,X	;4
   1518  f76e		       29 0f		      AND	#%00001111	;2
   1519  f770		       05 82		      ORA	PF1Cache	;3
   1520  f772		       85 82		      STA	PF1Cache	;3
   1521  f774		       c6 d2		      DEC	ScoreD2	;5
   1522  f776
   1523  f776				   DrawScoreD3		; 23
   1524  f776		       a6 d3		      LDX	ScoreD3	; 3
   1525  f778		       bd 00 fd 	      LDA	Font,X	;4
   1526  f77b		       4a		      LSR		;2
   1527  f77c		       4a		      LSR		;2
   1528  f77d		       4a		      LSR		;2
   1529  f77e		       4a		      LSR		;2
   1530  f77f		       85 83		      STA	PF2Cache	;3
   1531  f781		       c6 d3		      DEC	ScoreD3	;5
   1532  f783
   1533  f783				   DrawScoreD4		; 20
   1534  f783		       a6 d4		      LDX	ScoreD4	; 3
   1535  f785		       bd 00 fd 	      LDA	Font,X	;4
   1536  f788		       29 f0		      AND	#%11110000	;2
   1537  f78a		       05 83		      ORA	PF2Cache	;3
   1538  f78c		       85 83		      STA	PF2Cache	;3
   1539  f78e		       c6 d4		      DEC	ScoreD4	;5
   1540  f790
   1541  f790
   1542  f790		       88		      DEY		;2
   1543  f791		       10 b0		      BPL	ScoreLoop	;4
   1544  f793
   1545  f793		       85 02		      STA	WSYNC
   1546  f795		       85 2a		      STA	HMOVE
   1547  f797		       20 98 f6 	      JSR	LoadAll
   1548  f79a		       60		      RTS		; 6
   1549  f79b
   1550  f79b				   WaitForVblankEnd
   1551  f79b		       ad 84 02 	      LDA	INTIM
   1552  f79e		       d0 fb		      BNE	WaitForVblankEnd
   1553  f7a0		       85 02		      STA	WSYNC
   1554  f7a2		       85 01		      STA	VBLANK
   1555  f7a4		       60		      RTS
   1556  f7a5
   1557  f7a5				   Sleep4Lines
   1558  f7a5		       85 02		      STA	WSYNC
   1559  f7a7		       85 02		      STA	WSYNC
   1560  f7a9		       85 02		      STA	WSYNC
   1561  f7ab		       85 02		      STA	WSYNC
   1562  f7ad		       60		      RTS
   1563  f7ae
   1564  f7ae				   Sleep8Lines
   1565  f7ae		       20 a5 f7 	      JSR	Sleep4Lines
   1566  f7b1		       20 a5 f7 	      JSR	Sleep4Lines
   1567  f7b4		       60		      RTS
   1568  f7b5
   1569  f7b5				   Sleep32Lines
   1570  f7b5		       20 ae f7 	      JSR	Sleep8Lines
   1571  f7b8		       20 ae f7 	      JSR	Sleep8Lines
   1572  f7bb		       20 ae f7 	      JSR	Sleep8Lines
   1573  f7be		       20 ae f7 	      JSR	Sleep8Lines
   1574  f7c1		       60		      RTS
   1575  f7c2
   1576  f7c2							;X = number of WSYNC HMOVE to run
   1577  f7c2				   HMoveXTimes
   1578  f7c2		       85 02		      STA	WSYNC	;3
   1579  f7c4		       85 2a		      STA	HMOVE	; 3/10 
   1580  f7c6		       ca		      DEX
   1581  f7c7		       d0 f9		      BNE	HMoveXTimes
   1582  f7c9		       60		      RTS
   1583  f7ca
   1584  f7ca				   ConfigureCarSprites
   1585  f7ca		       a5 8c		      LDA	FrameCount0
   1586  f7cc		       29 01		      AND	#%00000001
   1587  f7ce		       d0 0b		      BNE	LoadForRightScreenSprites
   1588  f7d0				   LoadForLeftScreenSprites
   1589  f7d0		       a5 c7		      LDA	CurrentCarId
   1590  f7d2		       85 b0		      STA	Tmp0
   1591  f7d4		       a5 c8		      LDA	OpCurrentCarId
   1592  f7d6		       85 b1		      STA	Tmp1
   1593  f7d8		       4c e3 f7 	      JMP	LoadCarSpritesFromIds
   1594  f7db				   LoadForRightScreenSprites
   1595  f7db		       a5 c7		      LDA	CurrentCarId
   1596  f7dd		       85 b1		      STA	Tmp1
   1597  f7df		       a5 c8		      LDA	OpCurrentCarId
   1598  f7e1		       85 b0		      STA	Tmp0
   1599  f7e3
   1600  f7e3				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1601  f7e3		       a4 b0		      LDY	Tmp0
   1602  f7e5		       b9 7d ff 	      LDA	CarIdToSpriteAddressL,Y
   1603  f7e8		       85 d7		      STA	CarSpritePointerL
   1604  f7ea		       b9 81 ff 	      LDA	CarIdToSpriteAddressH,Y
   1605  f7ed		       85 d8		      STA	CarSpritePointerH
   1606  f7ef				   ConfigureOpponentCarSprite
   1607  f7ef		       a4 b1		      LDY	Tmp1
   1608  f7f1		       b9 85 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1609  f7f4		       85 d9		      STA	EnemyCarSpritePointerL
   1610  f7f6		       b9 89 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1611  f7f9		       85 da		      STA	EnemyCarSpritePointerH
   1612  f7fb		       60		      RTS
   1613  f7fc
   1614  f7fc							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1615  f7fc							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1616  f7fc							; Tmp0 Binary Number
   1617  f7fc							; Result Returned in Tmp 1 and A
   1618  f7fc				   BINBCD8
   1619  f7fc		       f8		      SED		; Switch to decimal mode
   1620  f7fd		       a9 00		      LDA	#0	; Ensure the result is clear
   1621  f7ff		       85 b1		      STA	Tmp1+0
   1622  f801							;STA Tmp1+1
   1623  f801		       a2 08		      LDX	#8	; The number of source bits
   1624  f803
   1625  f803				   CNVBIT
   1626  f803		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1627  f805		       a5 b1		      LDA	Tmp1+0	; And add into result
   1628  f807		       65 b1		      ADC	Tmp1+0
   1629  f809		       85 b1		      STA	Tmp1+0
   1630  f80b							;Not needed now, 0 to 99 is enought for timer!
   1631  f80b							; LDA Tmp1+1	; propagating any carry
   1632  f80b							; ADC Tmp1+1
   1633  f80b							; STA Tmp1+1
   1634  f80b		       ca		      DEX		; And repeat for next bit
   1635  f80c		       d0 f5		      BNE	CNVBIT
   1636  f80e		       d8		      CLD		; Back to binary
   1637  f80f
   1638  f80f		       60		      RTS		; All Done.
   1639  f810
   1640  f810							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1641  f810							;X player 0 or 1
   1642  f810				   SelectCarWithDpad
   1643  f810		       a0 03		      LDY	#3
   1644  f812				   SelectCarWithDpadLoop
   1645  f812		       ad 80 02 	      LDA	SWCHA
   1646  f815		       25 b0		      AND	Tmp0
   1647  f817		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1648  f819		       98		      TYA
   1649  f81a		       95 c7		      STA	CurrentCarId,X
   1650  f81c				   ContinueSelectCarWithDpadLoop
   1651  f81c		       46 b0		      LSR	Tmp0
   1652  f81e		       88		      DEY
   1653  f81f		       10 f1		      BPL	SelectCarWithDpadLoop
   1654  f821		       60		      RTS
   1655  f822
   1656  f822				   ProcessOpponentLine
   1657  f822		       a5 8c		      LDA	FrameCount0
   1658  f824		       29 01		      AND	#%00000001
   1659  f826		       38		      SEC
   1660  f827		       d0 15		      BNE	Player0IsOpponent
   1661  f829				   Player1IsOpponent		; Code could be reused?
   1662  f829		       a5 91		      LDA	TrafficOffset0 + 1
   1663  f82b		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1664  f82d		       85 b0		      STA	Tmp0
   1665  f82f		       a5 92		      LDA	TrafficOffset0 + 2
   1666  f831		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1667  f833		       85 b1		      STA	Tmp1
   1668  f835		       a5 ba		      LDA	Traffic0Msb
   1669  f837		       e5 bb		      SBC	OpTraffic0Msb
   1670  f839		       85 b2		      STA	Tmp2
   1671  f83b		       4c 50 f8 	      JMP	StoreInFrontPlayer
   1672  f83e				   Player0IsOpponent
   1673  f83e		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1674  f840		       e5 91		      SBC	TrafficOffset0 + 1
   1675  f842		       85 b0		      STA	Tmp0
   1676  f844		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1677  f846		       e5 92		      SBC	TrafficOffset0 + 2
   1678  f848		       85 b1		      STA	Tmp1
   1679  f84a		       a5 bb		      LDA	OpTraffic0Msb
   1680  f84c		       e5 ba		      SBC	Traffic0Msb
   1681  f84e		       85 b2		      STA	Tmp2
   1682  f850
   1683  f850				   StoreInFrontPlayer
   1684  f850		       85 f2		      STA	IsOpponentInFront
   1685  f852
   1686  f852				   AddOffsetToOpponentLine
   1687  f852		       18		      CLC
   1688  f853		       a5 b0		      LDA	Tmp0
   1689  f855		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1690  f857		       85 b0		      STA	Tmp0
   1691  f859		       a5 b1		      LDA	Tmp1
   1692  f85b		       69 00		      ADC	#0
   1693  f85d		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1694  f85f		       a5 b2		      LDA	Tmp2
   1695  f861		       69 00		      ADC	#0
   1696  f863		       05 b1		      ORA	Tmp1
   1697  f865		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1698  f867				   OpponentNotVisible
   1699  f867		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1700  f869		       85 cf		      STA	OpponentLine
   1701  f86b		       4c 72 f8 	      JMP	ReturnFromProcessOpponentLine
   1702  f86e				   OpponentVisible
   1703  f86e		       a5 b0		      LDA	Tmp0
   1704  f870		       85 cf		      STA	OpponentLine
   1705  f872				   ReturnFromProcessOpponentLine
   1706  f872		       60		      RTS
   1707  f873
   1708  f873							; Value stored in A
   1709  f873				   IsOpponentColliding
   1710  f873							;Any non default state, opponent do not colide
   1711  f873		       a5 8e		      LDA	CollisionCounter
   1712  f875		       05 8f		      ORA	OpCollisionCounter
   1713  f877		       05 cb		      ORA	ScoreFontColorHoldChange
   1714  f879		       05 cc		      ORA	OpScoreFontColorHoldChange
   1715  f87b		       d0 07		      BNE	OpponentNotColliding
   1716  f87d		       a5 f2		      LDA	IsOpponentInFront
   1717  f87f		       25 07		      AND	CXPPMM
   1718  f881		       4c 86 f8 	      JMP	ReturnIsOpponentColliding
   1719  f884				   OpponentNotColliding
   1720  f884		       a9 00		      LDA	#0
   1721  f886				   ReturnIsOpponentColliding
   1722  f886		       60		      RTS
   1723  f887
   1724  f887
   1725  f887							; Movement and colision are binded because the car must be moved after duplicate size.
   1726  f887							; Use X for the player
   1727  f887							; Tmp2 Traffic colision result
   1728  f887				   TestCollisionAndMove
   1729  f887							; Until store the movemnt, Y contains the value to be stored.
   1730  f887							; see if player0 colides with the rest
   1731  f887		       a5 b2		      LDA	Tmp2
   1732  f889		       f0 2b		      BEQ	NoCollision	;skip if not hitting...
   1733  f88b		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1734  f88d		       d0 27		      BNE	NoCollision
   1735  f88f		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1736  f891		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X
   1737  f894		       f0 20		      BEQ	NoCollision
   1738  f896		       dd b5 fc 	      CMP	PlayerToScoreStartColor,X
   1739  f899		       f0 1b		      BEQ	NoCollision
   1740  f89b		       a9 ff		      LDA	#COLLISION_FRAMES
   1741  f89d		       95 8e		      STA	CollisionCounter,X
   1742  f89f		       b5 f0		      LDA	Player0SpeedH,X
   1743  f8a1		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1744  f8a3		       a9 10		      LDA	#COLLISION_SPEED_L
   1745  f8a5		       d5 de		      CMP	Player0SpeedL,X
   1746  f8a7		       b0 04		      BCS	SkipSetColisionSpeedL
   1747  f8a9				   SetColisionSpeedL
   1748  f8a9		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1749  f8ab		       95 de		      STA	Player0SpeedL,X
   1750  f8ad				   SkipSetColisionSpeedL
   1751  f8ad		       a9 00		      LDA	#0
   1752  f8af		       95 f0		      STA	Player0SpeedH,X
   1753  f8b1		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1754  f8b3		       4c 06 f9 	      JMP	StoreHMove	; We keep position consistent
   1755  f8b6				   NoCollision
   1756  f8b6
   1757  f8b6				   DecrementCollision
   1758  f8b6		       b5 8e		      LDA	CollisionCounter,X
   1759  f8b8		       f0 06		      BEQ	FinishDecrementCollision
   1760  f8ba		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1761  f8bc		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1762  f8be		       d6 8e		      DEC	CollisionCounter,X
   1763  f8c0				   FinishDecrementCollision
   1764  f8c0
   1765  f8c0				   ResetPlayerSize
   1766  f8c0		       d0 04		      BNE	FinishResetPlayerSize
   1767  f8c2		       a9 30		      LDA	#%00110000
   1768  f8c4		       95 04		      STA	NUSIZ0,X	;
   1769  f8c6				   FinishResetPlayerSize
   1770  f8c6
   1771  f8c6				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1772  f8c6		       b5 8e		      LDA	CollisionCounter,X
   1773  f8c8		       c9 01		      CMP	#1	; Last frame before reset
   1774  f8ca		       d0 05		      BNE	SkipResetPlayerPosition
   1775  f8cc		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1776  f8ce		       4c 06 f9 	      JMP	StoreHMove
   1777  f8d1				   SkipResetPlayerPosition
   1778  f8d1
   1779  f8d1				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1780  f8d1		       b5 c7		      LDA	CurrentCarId,X
   1781  f8d3		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1782  f8d5		       d0 08		      BNE	PrepareReadXAxis
   1783  f8d7		       a0 00		      LDY	#0
   1784  f8d9		       a5 8c		      LDA	FrameCount0
   1785  f8db		       29 01		      AND	#DRAGSTER_TURN_MASK
   1786  f8dd		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1787  f8df
   1788  f8df				   PrepareReadXAxis
   1789  f8df		       a0 00		      LDY	#0
   1790  f8e1		       b5 b6		      LDA	Player0X,X
   1791  f8e3				   BeginReadLeft
   1792  f8e3		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1793  f8e5		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1794  f8e8		       2c 80 02 	      BIT	SWCHA
   1795  f8eb		       d0 07		      BNE	SkipMoveLeft
   1796  f8ed		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1797  f8ef		       d6 b6		      DEC	Player0X,X
   1798  f8f1		       4c 06 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1799  f8f4				   SkipMoveLeft
   1800  f8f4				   BeginReadRight
   1801  f8f4		       b5 b6		      LDA	Player0X,X
   1802  f8f6		       c9 2c		      CMP	#PLAYER_MAX_X
   1803  f8f8		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1804  f8fa		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1805  f8fd		       2c 80 02 	      BIT	SWCHA
   1806  f900		       d0 04		      BNE	SkipMoveRight
   1807  f902		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1808  f904		       f6 b6		      INC	Player0X,X
   1809  f906				   SkipMoveRight
   1810  f906				   StoreHMove
   1811  f906		       94 20		      STY	HMP0,X	;set the move for player 0
   1812  f908
   1813  f908		       60		      RTS
   1814  f909
   1815  f909							; X Traffic offset 4 bits each lane, 4 lanes per player
   1816  f909							; Tmp3 Max X offset
   1817  f909							; Tmp4 Max Player Speed L
   1818  f909							; Tmp5 Max Player Speed H
   1819  f909				   UpdateOffsets
   1820  f909		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1821  f90b		       a5 c6		      LDA	GameMode
   1822  f90d		       29 04		      AND	#%00000100	; GameModes with high delta
   1823  f90f		       f0 02		      BEQ	UpdateOffsetsLoop
   1824  f911		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1825  f913
   1826  f913				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1827  f913		       38		      SEC
   1828  f914		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1829  f916		       f9 69 ff 	      SBC	TrafficSpeeds,Y
   1830  f919		       85 b0		      STA	Tmp0
   1831  f91b		       c8		      INY
   1832  f91c		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1833  f91e		       f9 69 ff 	      SBC	TrafficSpeeds,Y
   1834  f921		       85 b1		      STA	Tmp1
   1835  f923		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1836  f925		       e9 00		      SBC	#0
   1837  f927		       85 b2		      STA	Tmp2
   1838  f929
   1839  f929				   AddsTheResult
   1840  f929		       18		      CLC
   1841  f92a		       a5 b0		      LDA	Tmp0
   1842  f92c		       75 90		      ADC	TrafficOffset0,X
   1843  f92e		       95 90		      STA	TrafficOffset0,X
   1844  f930		       e8		      INX
   1845  f931		       a5 b1		      LDA	Tmp1
   1846  f933		       75 90		      ADC	TrafficOffset0,X
   1847  f935		       95 90		      STA	TrafficOffset0,X
   1848  f937		       e8		      INX
   1849  f938		       a5 b2		      LDA	Tmp2	; Carry
   1850  f93a		       75 90		      ADC	TrafficOffset0,X
   1851  f93c		       95 90		      STA	TrafficOffset0,X
   1852  f93e		       90 0f		      BCC	CalculateOffsetCache
   1853  f940				   CalculatePlayer0Msb
   1854  f940		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1855  f942		       d0 05		      BNE	CalculatePlayer1Msb
   1856  f944		       e6 ba		      INC	Traffic0Msb
   1857  f946		       4c 4f f9 	      JMP	CalculateOffsetCache
   1858  f949				   CalculatePlayer1Msb
   1859  f949		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1860  f94b		       d0 02		      BNE	CalculateOffsetCache
   1861  f94d		       e6 bb		      INC	OpTraffic0Msb
   1862  f94f
   1863  f94f				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1864  f94f		       e8		      INX
   1865  f950		       38		      SEC
   1866  f951		       69 00		      ADC	#0	;Increment by one
   1867  f953		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1868  f955
   1869  f955				   PrepareNextUpdateLoop
   1870  f955		       c8		      INY
   1871  f956		       e8		      INX
   1872  f957		       e4 b3		      CPX	Tmp3	; Max X offset
   1873  f959		       d0 b8		      BNE	UpdateOffsetsLoop
   1874  f95b		       60		      RTS
   1875  f95c
   1876  f95c							; X Player 0 or 1
   1877  f95c				   ProcessSpeed
   1878  f95c				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1879  f95c		       a9 00		      LDA	#0
   1880  f95e		       85 b0		      STA	Tmp0	; Break speed
   1881  f960		       b5 b8		      LDA	CountdownTimer,X
   1882  f962		       d0 0d		      BNE	Break
   1883  f964		       b4 c7		      LDY	CurrentCarId,X
   1884  f966		       a5 8c		      LDA	FrameCount0
   1885  f968		       39 91 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1886  f96b		       d0 04		      BNE	Break
   1887  f96d		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1888  f96f		       85 b0		      STA	Tmp0
   1889  f971
   1890  f971				   Break
   1891  f971		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1892  f974		       2c 80 02 	      BIT	SWCHA
   1893  f977		       d0 12		      BNE	BreakNonZero
   1894  f979		       b5 0c		      LDA	INPT4,X	;3
   1895  f97b		       10 0a		      BPL	BreakWhileAccelerating
   1896  f97d		       b4 d5		      LDY	Gear,X
   1897  f97f		       b9 9d ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1898  f982		       85 b0		      STA	Tmp0
   1899  f984		       4c 8b f9 	      JMP	BreakNonZero
   1900  f987				   BreakWhileAccelerating		; Allow better control while breaking.
   1901  f987		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1902  f989		       85 b0		      STA	Tmp0
   1903  f98b
   1904  f98b				   BreakNonZero
   1905  f98b		       a5 b0		      LDA	Tmp0
   1906  f98d		       f0 29		      BEQ	SkipBreak
   1907  f98f
   1908  f98f				   DecreaseSpeed
   1909  f98f		       38		      SEC
   1910  f990		       b5 de		      LDA	Player0SpeedL,X
   1911  f992		       e5 b0		      SBC	Tmp0
   1912  f994		       95 de		      STA	Player0SpeedL,X
   1913  f996		       b5 f0		      LDA	Player0SpeedH,X
   1914  f998		       e9 00		      SBC	#0
   1915  f99a		       95 f0		      STA	Player0SpeedH,X
   1916  f99c
   1917  f99c				   CheckMinSpeed
   1918  f99c		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1919  f99e		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1920  f9a0		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1921  f9a2		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1922  f9a4
   1923  f9a4				   CompareLBreakSpeed
   1924  f9a4		       b5 de		      LDA	Player0SpeedL,X
   1925  f9a6		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1926  f9a8		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1927  f9aa		       4c b5 f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1928  f9ad
   1929  f9ad				   ResetMinSpeed
   1930  f9ad		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1931  f9af		       95 f0		      STA	Player0SpeedH,X
   1932  f9b1		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1933  f9b3		       95 de		      STA	Player0SpeedL,X
   1934  f9b5
   1935  f9b5				   SkipAccelerateIfBreaking
   1936  f9b5		       4c fe f9 	      JMP	SkipAccelerate
   1937  f9b8				   SkipBreak
   1938  f9b8
   1939  f9b8				   Acelerates
   1940  f9b8		       b5 b8		      LDA	CountdownTimer,X
   1941  f9ba		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1942  f9bc
   1943  f9bc				   ContinueAccelerateTest
   1944  f9bc		       b5 0c		      LDA	INPT4,X	;3
   1945  f9be		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1946  f9c0		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1947  f9c3		       2c 80 02 	      BIT	SWCHA
   1948  f9c6		       d0 36		      BNE	SkipAccelerate
   1949  f9c8
   1950  f9c8				   IncreaseCarSpeed
   1951  f9c8		       a9 02		      LDA	#2
   1952  f9ca		       85 b0		      STA	Tmp0	; Loop control
   1953  f9cc		       b4 c7		      LDY	CurrentCarId,X
   1954  f9ce				   IncreaseCarSpeedLoop
   1955  f9ce							;Adds speed
   1956  f9ce		       18		      CLC
   1957  f9cf		       b5 dc		      LDA	AccelerateBuffer,X
   1958  f9d1		       79 8d ff 	      ADC	CarIdToAccelerateSpeed,Y
   1959  f9d4		       95 dc		      STA	AccelerateBuffer,X
   1960  f9d6		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1961  f9d8		       f6 de		      INC	Player0SpeedL,X
   1962  f9da		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1963  f9dc		       f6 f0		      INC	Player0SpeedH,X
   1964  f9de				   ContinueIncreaseSpeedLoop
   1965  f9de		       c6 b0		      DEC	Tmp0
   1966  f9e0		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1967  f9e2				   SkipIncreaseCarSpeed
   1968  f9e2
   1969  f9e2				   CheckIfAlreadyMaxSpeed
   1970  f9e2		       b5 f0		      LDA	Player0SpeedH,X
   1971  f9e4		       c9 02		      CMP	#CAR_MAX_SPEED_H
   1972  f9e6		       90 16		      BCC	SkipAccelerate	; less than my max speed
   1973  f9e8		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   1974  f9ea							;High bit is max, compare the low
   1975  f9ea		       b4 c7		      LDY	CurrentCarId,X
   1976  f9ec		       b5 de		      LDA	Player0SpeedL,X
   1977  f9ee		       d9 95 ff 	      CMP	CarIdToMaxSpeedL,Y
   1978  f9f1		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   1979  f9f3							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   1980  f9f3
   1981  f9f3				   ResetToMaxSpeed		; Speed is more, or is already max
   1982  f9f3		       a9 02		      LDA	#CAR_MAX_SPEED_H
   1983  f9f5		       95 f0		      STA	Player0SpeedH,X
   1984  f9f7		       b4 c7		      LDY	CurrentCarId,X
   1985  f9f9		       b9 95 ff 	      LDA	CarIdToMaxSpeedL,Y
   1986  f9fc		       95 de		      STA	Player0SpeedL,X
   1987  f9fe				   SkipAccelerate
   1988  f9fe		       60		      RTS
   1989  f9ff
   1990  f9ff							;Tmp0 Traffic Offset to compare with next checkpoint
   1991  f9ff				   ProcessPlayerStatus
   1992  f9ff				   IsGameOver
   1993  f9ff		       b5 b8		      LDA	CountdownTimer,X
   1994  fa01		       15 de		      ORA	Player0SpeedL,X
   1995  fa03		       15 f0		      ORA	Player0SpeedH,X
   1996  fa05		       d0 0c		      BNE	IsCheckpoint
   1997  fa07		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   1998  fa09		       95 cb		      STA	ScoreFontColorHoldChange,X
   1999  fa0b		       bd b7 fc 	      LDA	PlayerToScoreOverColor,X
   2000  fa0e		       95 c9		      STA	ScoreFontColor,X
   2001  fa10		       4c 47 fa 	      JMP	SkipIsTimeOver
   2002  fa13
   2003  fa13				   IsCheckpoint
   2004  fa13		       b5 cd		      LDA	NextCheckpoint,X
   2005  fa15		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2006  fa17		       d0 21		      BNE	SkipIsCheckpoint
   2007  fa19		       18		      CLC
   2008  fa1a		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2009  fa1c		       95 cd		      STA	NextCheckpoint,X
   2010  fa1e		       bd b3 fc 	      LDA	PlayerToScoreGoodColor,X
   2011  fa21		       95 c9		      STA	ScoreFontColor,X
   2012  fa23		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2013  fa25		       95 cb		      STA	ScoreFontColorHoldChange,X
   2014  fa27		       b5 b8		      LDA	CountdownTimer,X
   2015  fa29		       18		      CLC
   2016  fa2a		       75 c0		      ADC	CheckpointTime,X
   2017  fa2c		       95 b8		      STA	CountdownTimer,X
   2018  fa2e		       90 04		      BCC	JumpSkipTimeOver
   2019  fa30		       a9 ff		      LDA	#$FF
   2020  fa32		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2021  fa34				   JumpSkipTimeOver
   2022  fa34		       20 b5 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2023  fa37		       4c 47 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2024  fa3a				   SkipIsCheckpoint
   2025  fa3a
   2026  fa3a				   IsTimeOver
   2027  fa3a		       b5 b8		      LDA	CountdownTimer,X
   2028  fa3c		       d0 09		      BNE	SkipIsTimeOver
   2029  fa3e		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2030  fa40		       95 cb		      STA	ScoreFontColorHoldChange,X
   2031  fa42		       bd b9 fc 	      LDA	PlayerToScoreBadColor,X
   2032  fa45		       95 c9		      STA	ScoreFontColor,X
   2033  fa47				   SkipIsTimeOver
   2034  fa47		       60		      RTS
   2035  fa48
   2036  fa48
   2037  fa48				   EverySecond		; 64 frames to be more precise
   2038  fa48		       a9 3f		      LDA	#%00111111
   2039  fa4a		       25 8c		      AND	FrameCount0
   2040  fa4c		       d0 06		      BNE	SkipEverySecondAction
   2041  fa4e		       d5 b8		      CMP	CountdownTimer,X
   2042  fa50		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2043  fa52		       d6 b8		      DEC	CountdownTimer,X
   2044  fa54				   SkipEverySecondAction
   2045  fa54		       60		      RTS
   2046  fa55
   2047  fa55				   CalculateGear
   2048  fa55		       b5 de		      LDA	Player0SpeedL,X	;3
   2049  fa57		       29 80		      AND	#%10000000	;2
   2050  fa59		       15 f0		      ORA	Player0SpeedH,X	;3
   2051  fa5b		       18		      CLC		;2
   2052  fa5c		       2a		      ROL		;2
   2053  fa5d		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2054  fa5f		       95 d5		      STA	Gear,X
   2055  fa61		       60		      RTS
   2056  fa62
   2057  fa62				   ProcessScoreFontColor
   2058  fa62		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2059  fa64		       f0 06		      BEQ	ResetScoreFontColor
   2060  fa66		       88		      DEY
   2061  fa67		       94 cb		      STY	ScoreFontColorHoldChange,X
   2062  fa69		       4c 71 fa 	      JMP	SkipScoreFontColor
   2063  fa6c				   ResetScoreFontColor
   2064  fa6c		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2065  fa6f		       95 c9		      STA	ScoreFontColor,X
   2066  fa71				   SkipScoreFontColor
   2067  fa71		       60		      RTS
   2068  fa72
   2069  fa72							; X = Player
   2070  fa72							; A Returns result to be sotored in the proper digit
   2071  fa72				   PrintScoreHoldChange
   2072  fa72		       b5 cb		      LDA	ScoreFontColorHoldChange,X
   2073  fa74		       4a		      LSR
   2074  fa75		       4a		      LSR
   2075  fa76		       4a		      LSR
   2076  fa77		       4a		      LSR
   2077  fa78		       a8		      TAY
   2078  fa79		       b9 8c fc 	      LDA	BarLookup,Y
   2079  fa7c		       60		      RTS
   2080  fa7d
   2081  fa7d				   PrintSpeedBar
   2082  fa7d		       b5 de		      LDA	Player0SpeedL,X
   2083  fa7f		       29 e0		      AND	#%11100000	;2 Discard the last bits
   2084  fa81		       18		      CLC
   2085  fa82		       2a		      ROL		;First goes into carry
   2086  fa83		       2a		      ROL
   2087  fa84		       2a		      ROL
   2088  fa85		       2a		      ROL
   2089  fa86		       85 b0		      STA	Tmp0
   2090  fa88		       b5 f0		      LDA	Player0SpeedH,X
   2091  fa8a		       0a		      ASL
   2092  fa8b		       0a		      ASL
   2093  fa8c		       0a		      ASL
   2094  fa8d		       05 b0		      ORA	Tmp0
   2095  fa8f		       a8		      TAY		; 2
   2096  fa90		       b9 9c fc 	      LDA	SpeedToBarLookup,Y	;4
   2097  fa93		       85 d2		      STA	ScoreD2	;3
   2098  fa95		       60		      RTS
   2099  fa96
   2100  fa96							; Moved here because of rom space.
   2101  fa96							; The only SBR in constants space
   2102  fa96				   DrawQrCode
   2103  fa96		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2104  fa98		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2105  fa9a		       a9 01		      LDA	#%00000001	; Mirror playfield
   2106  fa9c		       85 0a		      STA	CTRLPF
   2107  fa9e		       20 73 f6 	      JSR	ClearAll	; To be 100 sure!
   2108  faa1		       ad 82 02 	      LDA	SWCHB
   2109  faa4		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2110  faa6		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2111  faa8		       f0 07		      BEQ	StoreReversedQrCode
   2112  faaa		       86 09		      STX	COLUBK
   2113  faac		       84 08		      STY	COLUPF
   2114  faae		       4c b5 fa 	      JMP	ContinueQrCode
   2115  fab1				   StoreReversedQrCode
   2116  fab1		       86 08		      STX	COLUPF
   2117  fab3		       84 09		      STY	COLUBK
   2118  fab5
   2119  fab5				   ContinueQrCode
   2120  fab5		       a2 09		      LDX	#9
   2121  fab7		       20 c2 f7 	      JSR	HMoveXTimes
   2122  faba		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2123  fabc		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2124  fabe		       20 9b f7 	      JSR	WaitForVblankEnd
   2125  fac1		       20 ae f7 	      JSR	Sleep8Lines
   2126  fac4		       20 ae f7 	      JSR	Sleep8Lines
   2127  fac7		       20 ae f7 	      JSR	Sleep8Lines
   2128  faca
   2129  faca				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2130  faca		       85 02		      STA	WSYNC
   2131  facc		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2132  facf		       85 0e		      STA	PF1	;3
   2133  fad1		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2134  fad4		       85 0f		      STA	PF2	;3
      0  fad6					      SLEEP	27	; 
      1  fad6				   .CYCLES    SET	27
      2  fad6
      3  fad6				  -	      IF	.CYCLES < 2
      4  fad6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fad6				  -	      ERR
      6  fad6					      ENDIF
      7  fad6
      8  fad6					      IF	.CYCLES & 1
      9  fad6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fad6				  -	      nop	0
     11  fad6					      ELSE
     12  fad6		       24 00		      bit	VSYNC
     13  fad8					      ENDIF
     14  fad8				   .CYCLES    SET	.CYCLES - 3
     15  fad8					      ENDIF
     16  fad8
     17  fad8					      REPEAT	.CYCLES / 2
     18  fad8		       ea		      nop
     17  fad8					      REPEND
     18  fad9		       ea		      nop
     17  fad9					      REPEND
     18  fada		       ea		      nop
     17  fada					      REPEND
     18  fadb		       ea		      nop
     17  fadb					      REPEND
     18  fadc		       ea		      nop
     17  fadc					      REPEND
     18  fadd		       ea		      nop
     17  fadd					      REPEND
     18  fade		       ea		      nop
     17  fade					      REPEND
     18  fadf		       ea		      nop
     17  fadf					      REPEND
     18  fae0		       ea		      nop
     17  fae0					      REPEND
     18  fae1		       ea		      nop
     17  fae1					      REPEND
     18  fae2		       ea		      nop
     17  fae2					      REPEND
     18  fae3		       ea		      nop
     19  fae4					      REPEND
   2136  fae4		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2137  fae7		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2138  fae9		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2139  faec		       85 0e		      STA	PF1	;3
   2140  faee
   2141  faee		       ca		      DEX		;2
   2142  faef		       d0 d9		      BNE	QrCodeLoop	;2
   2143  faf1		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2144  faf3		       88		      DEY		;2
   2145  faf4		       10 d4		      BPL	QrCodeLoop	;4
   2146  faf6
   2147  faf6				   EndQrCodeLoop
   2148  faf6		       85 02		      STA	WSYNC	;
   2149  faf8		       a9 00		      LDA	#0
   2150  fafa		       85 0e		      STA	PF1	;3
   2151  fafc		       85 0f		      STA	PF2	;3
   2152  fafe
   2153  fafe		       20 b5 f7 	      JSR	Sleep32Lines
   2154  fb01		       4c 06 f5 	      JMP	PrepareOverscan
   2155  fb04
   2156  fb04							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2157  fc00					      org	$FC00
   2158  fc00				   QrCode1
   2159  fc00		       1f		      .byte.b	#%00011111
   2160  fc01		       10		      .byte.b	#%00010000
   2161  fc02		       17		      .byte.b	#%00010111
   2162  fc03		       17		      .byte.b	#%00010111
   2163  fc04		       17		      .byte.b	#%00010111
   2164  fc05		       10		      .byte.b	#%00010000
   2165  fc06		       1f		      .byte.b	#%00011111
   2166  fc07		       00		      .byte.b	#%00000000
   2167  fc08		       17		      .byte.b	#%00010111
   2168  fc09		       10		      .byte.b	#%00010000
   2169  fc0a		       1d		      .byte.b	#%00011101
   2170  fc0b		       16		      .byte.b	#%00010110
   2171  fc0c		       03		      .byte.b	#%00000011
   2172  fc0d		       19		      .byte.b	#%00011001
   2173  fc0e		       13		      .byte.b	#%00010011
   2174  fc0f		       1c		      .byte.b	#%00011100
   2175  fc10		       0b		      .byte.b	#%00001011
   2176  fc11		       00		      .byte.b	#%00000000
   2177  fc12		       1f		      .byte.b	#%00011111
   2178  fc13		       10		      .byte.b	#%00010000
   2179  fc14		       17		      .byte.b	#%00010111
   2180  fc15		       17		      .byte.b	#%00010111
   2181  fc16		       17		      .byte.b	#%00010111
   2182  fc17		       10		      .byte.b	#%00010000
   2183  fc18		       1f		      .byte.b	#%00011111
   2184  fc19
   2185  fc19				   QrCode2
   2186  fc19		       c3		      .byte.b	#%11000011
   2187  fc1a		       9a		      .byte.b	#%10011010
   2188  fc1b		       82		      .byte.b	#%10000010
   2189  fc1c		       da		      .byte.b	#%11011010
   2190  fc1d		       aa		      .byte.b	#%10101010
   2191  fc1e		       ca		      .byte.b	#%11001010
   2192  fc1f		       f3		      .byte.b	#%11110011
   2193  fc20		       78		      .byte.b	#%01111000
   2194  fc21		       df		      .byte.b	#%11011111
   2195  fc22		       fc		      .byte.b	#%11111100
   2196  fc23		       c7		      .byte.b	#%11000111
   2197  fc24		       98		      .byte.b	#%10011000
   2198  fc25		       23		      .byte.b	#%00100011
   2199  fc26		       b9		      .byte.b	#%10111001
   2200  fc27		       d2		      .byte.b	#%11010010
   2201  fc28		       30		      .byte.b	#%00110000
   2202  fc29		       eb		      .byte.b	#%11101011
   2203  fc2a		       28		      .byte.b	#%00101000
   2204  fc2b		       ab		      .byte.b	#%10101011
   2205  fc2c		       72		      .byte.b	#%01110010
   2206  fc2d		       fa		      .byte.b	#%11111010
   2207  fc2e		       7a		      .byte.b	#%01111010
   2208  fc2f		       32		      .byte.b	#%00110010
   2209  fc30		       3a		      .byte.b	#%00111010
   2210  fc31		       63		      .byte.b	#%01100011
   2211  fc32
   2212  fc32				   QrCode3
   2213  fc32		       98		      .byte.b	#%10011000
   2214  fc33		       c3		      .byte.b	#%11000011
   2215  fc34		       39		      .byte.b	#%00111001
   2216  fc35		       34		      .byte.b	#%00110100
   2217  fc36		       ff		      .byte.b	#%11111111
   2218  fc37		       71		      .byte.b	#%01110001
   2219  fc38		       d5		      .byte.b	#%11010101
   2220  fc39		       d1		      .byte.b	#%11010001
   2221  fc3a		       5f		      .byte.b	#%01011111
   2222  fc3b		       26		      .byte.b	#%00100110
   2223  fc3c		       2d		      .byte.b	#%00101101
   2224  fc3d		       e9		      .byte.b	#%11101001
   2225  fc3e		       d6		      .byte.b	#%11010110
   2226  fc3f		       26		      .byte.b	#%00100110
   2227  fc40		       ba		      .byte.b	#%10111010
   2228  fc41		       03		      .byte.b	#%00000011
   2229  fc42		       dd		      .byte.b	#%11011101
   2230  fc43		       e0		      .byte.b	#%11100000
   2231  fc44		       57		      .byte.b	#%01010111
   2232  fc45		       14		      .byte.b	#%00010100
   2233  fc46		       35		      .byte.b	#%00110101
   2234  fc47		       e5		      .byte.b	#%11100101
   2235  fc48		       b5		      .byte.b	#%10110101
   2236  fc49		       d4		      .byte.b	#%11010100
   2237  fc4a		       97		      .byte.b	#%10010111
   2238  fc4b
   2239  fc4b				   QrCode4
   2240  fc4b		       09		      .byte.b	#%00001001
   2241  fc4c		       0e		      .byte.b	#%00001110
   2242  fc4d		       0f		      .byte.b	#%00001111
   2243  fc4e		       0c		      .byte.b	#%00001100
   2244  fc4f		       0c		      .byte.b	#%00001100
   2245  fc50		       08		      .byte.b	#%00001000
   2246  fc51		       08		      .byte.b	#%00001000
   2247  fc52		       06		      .byte.b	#%00000110
   2248  fc53		       06		      .byte.b	#%00000110
   2249  fc54		       0b		      .byte.b	#%00001011
   2250  fc55		       0f		      .byte.b	#%00001111
   2251  fc56		       04		      .byte.b	#%00000100
   2252  fc57		       08		      .byte.b	#%00001000
   2253  fc58		       0f		      .byte.b	#%00001111
   2254  fc59		       09		      .byte.b	#%00001001
   2255  fc5a		       07		      .byte.b	#%00000111
   2256  fc5b		       05		      .byte.b	#%00000101
   2257  fc5c		       00		      .byte.b	#%00000000
   2258  fc5d		       0f		      .byte.b	#%00001111
   2259  fc5e		       08		      .byte.b	#%00001000
   2260  fc5f		       0b		      .byte.b	#%00001011
   2261  fc60		       0b		      .byte.b	#%00001011
   2262  fc61		       0b		      .byte.b	#%00001011
   2263  fc62		       08		      .byte.b	#%00001000
   2264  fc63		       0f		      .byte.b	#%00001111
   2265  fc64
   2266  fc64				   PlayerToUpMask
   2267  fc64		       10		      .byte.b	#%00010000	;
   2268  fc65		       01		      .byte.b	#%00000001	;
   2269  fc66
   2270  fc66				   PlayerToDownMask
   2271  fc66		       20		      .byte.b	#%00100000	;
   2272  fc67		       02		      .byte.b	#%00000010	;
   2273  fc68
   2274  fc68				   PlayerToLeftMask
   2275  fc68		       40		      .byte.b	#%01000000	;
   2276  fc69		       04		      .byte.b	#%00000100	;
   2277  fc6a
   2278  fc6a				   PlayerToRightMask
   2279  fc6a		       80		      .byte.b	#%10000000	;
   2280  fc6b		       08		      .byte.b	#%00001000	;
   2281  fc6c
   2282  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2283  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2284  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2285  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2286  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2287  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2288  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2289  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2290  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2291  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2292  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2293  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2294  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2295  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2296  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2297  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2298  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2299  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2300  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2301  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2302  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2303  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2304  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2305  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2306  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2307  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2308  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2309  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2310  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2311  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2312  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2313  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2314  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2315  fc8c
   2316  fc8c
   2317  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2318  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2319  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2320  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2321  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2322  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2323  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2324  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2325  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2326  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2327  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2328  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2329  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2330  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2331  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2332  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2333  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2334  fc9c
   2335  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2336  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2337  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2338  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2339  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2340  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2341  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2342  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2343  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2344  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2345  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2346  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2347  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2348  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2349  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2350  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2351  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2352  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2353  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2354  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2355  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2356  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2357  fcb1
   2358  fcb1				   PlayerToDefaultColor
   2359  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2360  fcb2		       98		      .byte.b	#PLAYER1_COLOR
   2361  fcb3
   2362  fcb3				   PlayerToScoreGoodColor
   2363  fcb3		       37		      .byte.b	#SCORE_FONT_COLOR_GOOD
   2364  fcb4		       d8		      .byte.b	#OP_SCORE_FONT_COLOR_GOOD
   2365  fcb5
   2366  fcb5				   PlayerToScoreStartColor
   2367  fcb5		       38		      .byte.b	#SCORE_FONT_COLOR_START
   2368  fcb6		       c8		      .byte.b	#OP_SCORE_FONT_COLOR_START
   2369  fcb7
   2370  fcb7				   PlayerToScoreOverColor
   2371  fcb7		       0c		      .byte.b	#SCORE_FONT_COLOR_OVER
   2372  fcb8		       ab		      .byte.b	#OP_SCORE_FONT_COLOR_OVER
   2373  fcb9
   2374  fcb9				   PlayerToScoreBadColor
   2375  fcb9		       44		      .byte.b	#SCORE_FONT_COLOR_BAD
   2376  fcba		       56		      .byte.b	#OP_SCORE_FONT_COLOR_BAD
   2377  fcbb
   2378  fd00					      org	$FD00
   2379  fd00				   Font
   2380  fd00				   C0
   2381  fd00		       e7		      .byte.b	#%11100111	;
   2382  fd01		       a5		      .byte.b	#%10100101	; 
   2383  fd02		       a5		      .byte.b	#%10100101	; 
   2384  fd03		       a5		      .byte.b	#%10100101	; 
   2385  fd04		       e7		      .byte.b	#%11100111	;	
   2386  fd05				   C1
   2387  fd05		       e7		      .byte.b	#%11100111	;
   2388  fd06		       42		      .byte.b	#%01000010	; 
   2389  fd07		       42		      .byte.b	#%01000010	; 
   2390  fd08		       42		      .byte.b	#%01000010	; 
   2391  fd09		       66		      .byte.b	#%01100110	;
   2392  fd0a				   C2
   2393  fd0a		       e7		      .byte.b	#%11100111	;
   2394  fd0b		       24		      .byte.b	#%00100100	; 
   2395  fd0c		       e7		      .byte.b	#%11100111	; 
   2396  fd0d		       81		      .byte.b	#%10000001	; 
   2397  fd0e		       e7		      .byte.b	#%11100111	;
   2398  fd0f				   C3
   2399  fd0f		       e7		      .byte.b	#%11100111	;
   2400  fd10		       81		      .byte.b	#%10000001	; 
   2401  fd11		       e7		      .byte.b	#%11100111	; 
   2402  fd12		       81		      .byte.b	#%10000001	; 
   2403  fd13		       e7		      .byte.b	#%11100111	;
   2404  fd14				   C4
   2405  fd14		       81		      .byte.b	#%10000001	;
   2406  fd15		       81		      .byte.b	#%10000001	; 
   2407  fd16		       e7		      .byte.b	#%11100111	; 
   2408  fd17		       a5		      .byte.b	#%10100101	; 
   2409  fd18		       a5		      .byte.b	#%10100101	;
   2410  fd19				   C5
   2411  fd19		       e7		      .byte.b	#%11100111	;
   2412  fd1a		       81		      .byte.b	#%10000001	; 
   2413  fd1b		       e7		      .byte.b	#%11100111	; 
   2414  fd1c		       24		      .byte.b	#%00100100	; 
   2415  fd1d		       e7		      .byte.b	#%11100111	;
   2416  fd1e				   C6
   2417  fd1e		       e7		      .byte.b	#%11100111	;
   2418  fd1f		       a5		      .byte.b	#%10100101	; 
   2419  fd20		       e7		      .byte.b	#%11100111	; 
   2420  fd21		       24		      .byte.b	#%00100100	; 
   2421  fd22		       e7		      .byte.b	#%11100111	;
   2422  fd23				   C7
   2423  fd23		       81		      .byte.b	#%10000001	;
   2424  fd24		       81		      .byte.b	#%10000001	; 
   2425  fd25		       81		      .byte.b	#%10000001	; 
   2426  fd26		       81		      .byte.b	#%10000001	; 
   2427  fd27		       e7		      .byte.b	#%11100111	;
   2428  fd28				   C8
   2429  fd28		       e7		      .byte.b	#%11100111	;
   2430  fd29		       a5		      .byte.b	#%10100101	; 
   2431  fd2a		       e7		      .byte.b	#%11100111	; 
   2432  fd2b		       a5		      .byte.b	#%10100101	; 
   2433  fd2c		       e7		      .byte.b	#%11100111	;
   2434  fd2d				   C9
   2435  fd2d		       e7		      .byte.b	#%11100111	;
   2436  fd2e		       81		      .byte.b	#%10000001	; 
   2437  fd2f		       e7		      .byte.b	#%11100111	; 
   2438  fd30		       a5		      .byte.b	#%10100101	; 
   2439  fd31		       e7		      .byte.b	#%11100111	;
   2440  fd32				   CA
   2441  fd32		       a5		      .byte.b	#%10100101	;
   2442  fd33		       a5		      .byte.b	#%10100101	; 
   2443  fd34		       e7		      .byte.b	#%11100111	; 
   2444  fd35		       a5		      .byte.b	#%10100101	; 
   2445  fd36		       e7		      .byte.b	#%11100111	;
   2446  fd37				   CB
   2447  fd37		       66		      .byte.b	#%01100110	;
   2448  fd38		       a5		      .byte.b	#%10100101	; 
   2449  fd39		       66		      .byte.b	#%01100110	; 
   2450  fd3a		       a5		      .byte.b	#%10100101	;
   2451  fd3b		       66		      .byte.b	#%01100110	;
   2452  fd3c				   CC
   2453  fd3c		       e7		      .byte.b	#%11100111	;
   2454  fd3d		       24		      .byte.b	#%00100100	; 
   2455  fd3e		       24		      .byte.b	#%00100100	; 
   2456  fd3f		       24		      .byte.b	#%00100100	;
   2457  fd40		       e7		      .byte.b	#%11100111	;
   2458  fd41
   2459  fd41				   CD
   2460  fd41		       66		      .byte.b	#%01100110	;
   2461  fd42		       a5		      .byte.b	#%10100101	; 
   2462  fd43		       a5		      .byte.b	#%10100101	; 
   2463  fd44		       a5		      .byte.b	#%10100101	;
   2464  fd45		       66		      .byte.b	#%01100110	;
   2465  fd46
   2466  fd46				   CE
   2467  fd46		       e7		      .byte.b	#%11100111	;
   2468  fd47		       24		      .byte.b	#%00100100	; 
   2469  fd48		       e7		      .byte.b	#%11100111	; 
   2470  fd49		       24		      .byte.b	#%00100100	; 
   2471  fd4a		       e7		      .byte.b	#%11100111	;
   2472  fd4b
   2473  fd4b				   CF
   2474  fd4b		       24		      .byte.b	#%00100100	;
   2475  fd4c		       24		      .byte.b	#%00100100	; 
   2476  fd4d		       e7		      .byte.b	#%11100111	; 
   2477  fd4e		       24		      .byte.b	#%00100100	; 
   2478  fd4f		       e7		      .byte.b	#%11100111	;
   2479  fd50
   2480  fd50				   CG
   2481  fd50		       c3		      .byte.b	#%11000011	;
   2482  fd51		       a5		      .byte.b	#%10100101	; 
   2483  fd52		       a5		      .byte.b	#%10100101	; 
   2484  fd53		       24		      .byte.b	#%00100100	; 
   2485  fd54		       c3		      .byte.b	#%11000011	;	
   2486  fd55
   2487  fd55				   CH
   2488  fd55		       a5		      .byte.b	#%10100101	;
   2489  fd56		       a5		      .byte.b	#%10100101	; 
   2490  fd57		       e7		      .byte.b	#%11100111	; 
   2491  fd58		       a5		      .byte.b	#%10100101	; 
   2492  fd59		       a5		      .byte.b	#%10100101	;
   2493  fd5a
   2494  fd5a				   CI
   2495  fd5a		       e7		      .byte.b	#%11100111	;
   2496  fd5b		       42		      .byte.b	#%01000010	; 
   2497  fd5c		       42		      .byte.b	#%01000010	; 
   2498  fd5d		       42		      .byte.b	#%01000010	; 
   2499  fd5e		       e7		      .byte.b	#%11100111	;
   2500  fd5f
   2501  fd5f				   CJ
   2502  fd5f		       e7		      .byte.b	#%11100111	;
   2503  fd60		       a5		      .byte.b	#%10100101	; 
   2504  fd61		       81		      .byte.b	#%10000001	; 
   2505  fd62		       81		      .byte.b	#%10000001	; 
   2506  fd63		       81		      .byte.b	#%10000001	;	
   2507  fd64
   2508  fd64				   CK
   2509  fd64		       a5		      .byte.b	#%10100101	;
   2510  fd65		       a5		      .byte.b	#%10100101	; 
   2511  fd66		       66		      .byte.b	#%01100110	; 
   2512  fd67		       a5		      .byte.b	#%10100101	; 
   2513  fd68		       a5		      .byte.b	#%10100101	;
   2514  fd69
   2515  fd69				   CL
   2516  fd69		       e7		      .byte.b	#%11100111	;
   2517  fd6a		       24		      .byte.b	#%00100100	; 
   2518  fd6b		       24		      .byte.b	#%00100100	; 
   2519  fd6c		       24		      .byte.b	#%00100100	; 
   2520  fd6d		       24		      .byte.b	#%00100100	;
   2521  fd6e
   2522  fd6e				   CM
   2523  fd6e		       a5		      .byte.b	#%10100101	;
   2524  fd6f		       a5		      .byte.b	#%10100101	; 
   2525  fd70		       a5		      .byte.b	#%10100101	; 
   2526  fd71		       e7		      .byte.b	#%11100111	; 
   2527  fd72		       a5		      .byte.b	#%10100101	;
   2528  fd73
   2529  fd73				   CN
   2530  fd73		       a5		      .byte.b	#%10100101	;
   2531  fd74		       a5		      .byte.b	#%10100101	; 
   2532  fd75		       a5		      .byte.b	#%10100101	; 
   2533  fd76		       a5		      .byte.b	#%10100101	; 
   2534  fd77		       66		      .byte.b	#%01100110	;	
   2535  fd78
   2536  fd78
   2537  fd78				   CO
   2538  fd78		       42		      .byte.b	#%01000010	;
   2539  fd79		       a5		      .byte.b	#%10100101	; 
   2540  fd7a		       a5		      .byte.b	#%10100101	; 
   2541  fd7b		       a5		      .byte.b	#%10100101	; 
   2542  fd7c		       42		      .byte.b	#%01000010	;	
   2543  fd7d
   2544  fd7d				   CP
   2545  fd7d		       24		      .byte.b	#%00100100	;
   2546  fd7e		       24		      .byte.b	#%00100100	; 
   2547  fd7f		       e7		      .byte.b	#%11100111	; 
   2548  fd80		       a5		      .byte.b	#%10100101	; 
   2549  fd81		       e7		      .byte.b	#%11100111	;
   2550  fd82
   2551  fd82				   CQ
   2552  fd82		       81		      .byte.b	#%10000001	;
   2553  fd83		       e5		      .byte.b	#%11100101	; 
   2554  fd84		       a5		      .byte.b	#%10100101	; 
   2555  fd85		       a5		      .byte.b	#%10100101	; 
   2556  fd86		       e7		      .byte.b	#%11100111	;	
   2557  fd87
   2558  fd87				   CR
   2559  fd87		       a5		      .byte.b	#%10100101	;
   2560  fd88		       a5		      .byte.b	#%10100101	; 
   2561  fd89		       66		      .byte.b	#%01100110	; 
   2562  fd8a		       a5		      .byte.b	#%10100101	; 
   2563  fd8b		       66		      .byte.b	#%01100110	;
   2564  fd8c
   2565  fd8c				   CS
   2566  fd8c		       66		      .byte.b	#%01100110	;
   2567  fd8d		       81		      .byte.b	#%10000001	; 
   2568  fd8e		       42		      .byte.b	#%01000010	; 
   2569  fd8f		       24		      .byte.b	#%00100100	; 
   2570  fd90		       c3		      .byte.b	#%11000011	;
   2571  fd91
   2572  fd91				   CT
   2573  fd91		       42		      .byte.b	#%01000010	;
   2574  fd92		       42		      .byte.b	#%01000010	; 
   2575  fd93		       42		      .byte.b	#%01000010	; 
   2576  fd94		       42		      .byte.b	#%01000010	; 
   2577  fd95		       e7		      .byte.b	#%11100111	;
   2578  fd96
   2579  fd96				   CU
   2580  fd96		       e7		      .byte.b	#%11100111	;
   2581  fd97		       a5		      .byte.b	#%10100101	; 
   2582  fd98		       a5		      .byte.b	#%10100101	; 
   2583  fd99		       a5		      .byte.b	#%10100101	; 
   2584  fd9a		       a5		      .byte.b	#%10100101	;	
   2585  fd9b
   2586  fd9b				   CW
   2587  fd9b		       a5		      .byte.b	#%10100101	;
   2588  fd9c		       e7		      .byte.b	#%11100111	; 
   2589  fd9d		       a5		      .byte.b	#%10100101	; 
   2590  fd9e		       a5		      .byte.b	#%10100101	; 
   2591  fd9f		       a5		      .byte.b	#%10100101	;
   2592  fda0
   2593  fda0				   CY
   2594  fda0		       42		      .byte.b	#%01000010	;
   2595  fda1		       42		      .byte.b	#%01000010	; 
   2596  fda2		       42		      .byte.b	#%01000010	; 
   2597  fda3		       a5		      .byte.b	#%10100101	; 
   2598  fda4		       a5		      .byte.b	#%10100101	;
   2599  fda5
   2600  fda5				   Exclamation
   2601  fda5		       42		      .byte.b	#%01000010	;
   2602  fda6		       00		      .byte.b	#%00000000	; 
   2603  fda7		       42		      .byte.b	#%01000010	; 
   2604  fda8		       42		      .byte.b	#%01000010	; 
   2605  fda9		       42		      .byte.b	#%01000010	;
   2606  fdaa
   2607  fdaa				   Pipe
   2608  fdaa				   Colon
   2609  fdaa		       42		      .byte.b	#%01000010	;
   2610  fdab		       42		      .byte.b	#%01000010	; 
   2611  fdac		       00		      .byte.b	#%00000000	; 
   2612  fdad		       42		      .byte.b	#%01000010	; 
   2613  fdae		       42		      .byte.b	#%01000010	;
   2614  fdaf
   2615  fdaf				   Space
   2616  fdaf				   C0B
   2617  fdaf		       00		      .byte.b	#%00000000	;
   2618  fdb0		       00		      .byte.b	#%00000000	; 
   2619  fdb1		       00		      .byte.b	#%00000000	; 
   2620  fdb2		       00		      .byte.b	#%00000000	; 
   2621  fdb3		       00		      .byte.b	#%00000000	;	
   2622  fdb4				   C1B
   2623  fdb4		       24		      .byte.b	#%00100100	;
   2624  fdb5		       00		      .byte.b	#%00000000	; 
   2625  fdb6		       00		      .byte.b	#%00000000	; 
   2626  fdb7		       00		      .byte.b	#%00000000	; 
   2627  fdb8		       00		      .byte.b	#%00000000	;
   2628  fdb9				   C2B
   2629  fdb9		       66		      .byte.b	#%01100110	;
   2630  fdba		       00		      .byte.b	#%00000000	; 
   2631  fdbb		       00		      .byte.b	#%00000000	; 
   2632  fdbc		       00		      .byte.b	#%00000000	; 
   2633  fdbd		       00		      .byte.b	#%00000000	;
   2634  fdbe				   C3B
   2635  fdbe		       e7		      .byte.b	#%11100111	;
   2636  fdbf		       00		      .byte.b	#%00000000	; 
   2637  fdc0		       00		      .byte.b	#%00000000	; 
   2638  fdc1		       00		      .byte.b	#%00000000	; 
   2639  fdc2		       00		      .byte.b	#%00000000	;
   2640  fdc3				   C4B
   2641  fdc3		       e7		      .byte.b	#%11100111	;
   2642  fdc4		       24		      .byte.b	#%00100100	; 
   2643  fdc5		       00		      .byte.b	#%00000000	; 
   2644  fdc6		       00		      .byte.b	#%00000000	; 
   2645  fdc7		       00		      .byte.b	#%00000000	;
   2646  fdc8				   C5B
   2647  fdc8		       e7		      .byte.b	#%11100111	;
   2648  fdc9		       66		      .byte.b	#%01100110	; 
   2649  fdca		       00		      .byte.b	#%00000000	; 
   2650  fdcb		       00		      .byte.b	#%00000000	; 
   2651  fdcc		       00		      .byte.b	#%00000000	;
   2652  fdcd				   C6B
   2653  fdcd		       e7		      .byte.b	#%11100111	;
   2654  fdce		       e7		      .byte.b	#%11100111	; 
   2655  fdcf		       00		      .byte.b	#%00000000	; 
   2656  fdd0		       00		      .byte.b	#%00000000	; 
   2657  fdd1		       00		      .byte.b	#%00000000	;
   2658  fdd2				   C7B
   2659  fdd2		       e7		      .byte.b	#%11100111	;
   2660  fdd3		       e7		      .byte.b	#%11100111	; 
   2661  fdd4		       24		      .byte.b	#%00100100	; 
   2662  fdd5		       00		      .byte.b	#%00000000	; 
   2663  fdd6		       00		      .byte.b	#%00000000	;
   2664  fdd7				   C8B
   2665  fdd7		       e7		      .byte.b	#%11100111	;
   2666  fdd8		       e7		      .byte.b	#%11100111	; 
   2667  fdd9		       66		      .byte.b	#%01100110	; 
   2668  fdda		       00		      .byte.b	#%00000000	; 
   2669  fddb		       00		      .byte.b	#%00000000	;
   2670  fddc				   C9B
   2671  fddc		       e7		      .byte.b	#%11100111	;
   2672  fddd		       e7		      .byte.b	#%11100111	; 
   2673  fdde		       e7		      .byte.b	#%11100111	; 
   2674  fddf		       00		      .byte.b	#%00000000	; 
   2675  fde0		       00		      .byte.b	#%00000000	;
   2676  fde1				   CAB
   2677  fde1		       e7		      .byte.b	#%11100111	;
   2678  fde2		       e7		      .byte.b	#%11100111	; 
   2679  fde3		       e7		      .byte.b	#%11100111	; 
   2680  fde4		       24		      .byte.b	#%00100100	; 
   2681  fde5		       00		      .byte.b	#%00000000	;
   2682  fde6				   CBB
   2683  fde6		       e7		      .byte.b	#%11100111	;
   2684  fde7		       e7		      .byte.b	#%11100111	; 
   2685  fde8		       e7		      .byte.b	#%11100111	; 
   2686  fde9		       66		      .byte.b	#%01100110	; 
   2687  fdea		       00		      .byte.b	#%00000000	;
   2688  fdeb				   CCB
   2689  fdeb		       e7		      .byte.b	#%11100111	;
   2690  fdec		       e7		      .byte.b	#%11100111	; 
   2691  fded		       e7		      .byte.b	#%11100111	; 
   2692  fdee		       e7		      .byte.b	#%11100111	; 
   2693  fdef		       00		      .byte.b	#%00000000	;
   2694  fdf0
   2695  fdf0				   CDB
   2696  fdf0		       e7		      .byte.b	#%11100111	;
   2697  fdf1		       e7		      .byte.b	#%11100111	; 
   2698  fdf2		       e7		      .byte.b	#%11100111	; 
   2699  fdf3		       e7		      .byte.b	#%11100111	; 
   2700  fdf4		       24		      .byte.b	#%00100100	;
   2701  fdf5
   2702  fdf5				   CEB
   2703  fdf5		       e7		      .byte.b	#%11100111	;
   2704  fdf6		       e7		      .byte.b	#%11100111	; 
   2705  fdf7		       e7		      .byte.b	#%11100111	; 
   2706  fdf8		       e7		      .byte.b	#%11100111	; 
   2707  fdf9		       66		      .byte.b	#%01100110	;
   2708  fdfa
   2709  fdfa				   CFB
   2710  fdfa		       e7		      .byte.b	#%11100111	;
   2711  fdfb		       e7		      .byte.b	#%11100111	; 
   2712  fdfc		       e7		      .byte.b	#%11100111	; 
   2713  fdfd		       e7		      .byte.b	#%11100111	; 
   2714  fdfe		       e7		      .byte.b	#%11100111	;
   2715  fdff
   2716  fe00					      org	$FE00
   2717  fe00				   AesTable
   2718  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2719  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2720  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2721  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2722  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2723  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2724  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2725  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2726  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2727  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2728  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2729  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2730  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2731  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2732  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2733  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2734  ff00
   2735  ff00					      org	$FF00
   2736  ff00				   StaticText		; All static text must be on the same MSB block. 
   2737  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2738  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2739  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2740  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2741  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2742  ff04
   2743  ff04				   HellwayLeftText
   2744  ff04		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2745  ff05		       59		      .byte.b	#<CH + #FONT_OFFSET
   2746  ff06		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2747  ff07		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2748  ff08
   2749  ff08				   HellwayRightText
   2750  ff08		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2751  ff09		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2752  ff0a		       81		      .byte.b	#<CP + #FONT_OFFSET
   2753  ff0b		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2754  ff0c		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2755  ff0d
   2756  ff0d				   OpbText
   2757  ff0d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2758  ff0e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2759  ff0f		       81		      .byte.b	#<CP + #FONT_OFFSET
   2760  ff10		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2761  ff11
   2762  ff11				   YearText
   2763  ff11		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2764  ff12		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2765  ff13		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2766  ff14		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2767  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2768  ff16
   2769  ff16				   GoText
   2770  ff16		       54		      .byte.b	#<CG + #FONT_OFFSET
   2771  ff17		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2772  ff18		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2773  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2774  ff1a
   2775  ff1a				   WinText
   2776  ff1a		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2777  ff1b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2778  ff1c		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2779  ff1d
   2780  ff1d				   LoseText
   2781  ff1d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2782  ff1e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2783  ff1f		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2784  ff20
   2785  ff20				   ReadyText
   2786  ff20		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2787  ff21		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2788  ff22		       36		      .byte.b	#<CA + #FONT_OFFSET
   2789  ff23		       45		      .byte.b	#<CD + #FONT_OFFSET
   2790  ff24		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2791  ff25
   2792  ff25				   EndStaticText
   2793  ff25
   2794  ff25				   EngineSoundType
   2795  ff25		       02		      .byte.b	#2
   2796  ff26		       02		      .byte.b	#2
   2797  ff27		       0e		      .byte.b	#14
   2798  ff28		       06		      .byte.b	#6
   2799  ff29		       06		      .byte.b	#6
   2800  ff2a		       0e		      .byte.b	#14
   2801  ff2b
   2802  ff2b				   EngineBaseFrequence
   2803  ff2b		       1f		      .byte.b	#31
   2804  ff2c		       15		      .byte.b	#21
   2805  ff2d		       14		      .byte.b	#20
   2806  ff2e		       1f		      .byte.b	#31
   2807  ff2f		       16		      .byte.b	#22
   2808  ff30		       03		      .byte.b	#3
   2809  ff31
   2810  ff31				   CarSprite0		; Upside down, Original Car
   2811  ff31		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2812  ff39				   CarSprite0NoPadding
   2813  ff39		       7e		      .byte.b	#%01111110
   2814  ff3a		       24		      .byte.b	#%00100100
   2815  ff3b		       bd		      .byte.b	#%10111101
   2816  ff3c		       3c		      .byte.b	#%00111100
   2817  ff3d		       bd		      .byte.b	#%10111101
   2818  ff3e		       3c		      .byte.b	#%00111100
   2819  ff3f
   2820  ff3f				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2821  ff3f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2822  ff47				   CarSprite1NoPadding
   2823  ff47		       bd		      .byte.b	#%10111101
   2824  ff48		       7e		      .byte.b	#%01111110
   2825  ff49		       5a		      .byte.b	#%01011010
   2826  ff4a		       66		      .byte.b	#%01100110
   2827  ff4b		       bd		      .byte.b	#%10111101
   2828  ff4c		       3c		      .byte.b	#%00111100
   2829  ff4d
   2830  ff4d				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2831  ff4d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2832  ff55				   CarSprite2NoPadding
   2833  ff55		       7e		      .byte.b	#%01111110
   2834  ff56		       a5		      .byte.b	#%10100101
   2835  ff57		       42		      .byte.b	#%01000010
   2836  ff58		       42		      .byte.b	#%01000010
   2837  ff59		       bd		      .byte.b	#%10111101
   2838  ff5a		       7e		      .byte.b	#%01111110
   2839  ff5b
   2840  ff5b				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2841  ff5b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2842  ff63				   CarSprite3NoPadding
   2843  ff63		       3c		      .byte.b	#%00111100
   2844  ff64		       db		      .byte.b	#%11011011
   2845  ff65		       db		      .byte.b	#%11011011
   2846  ff66		       3c		      .byte.b	#%00111100
   2847  ff67		       5a		      .byte.b	#%01011010
   2848  ff68		       3c		      .byte.b	#%00111100
   2849  ff69
   2850  ff69				   TrafficSpeeds
   2851  ff69		       00		      .byte.b	#$00	;  Trafic0 L
   2852  ff6a		       00		      .byte.b	#$00	;  Trafic0 H
   2853  ff6b		       0a		      .byte.b	#$0A	;  Trafic1 L
   2854  ff6c		       01		      .byte.b	#$01	;  Trafic1 H
   2855  ff6d		       e6		      .byte.b	#$E6	;  Trafic2 L
   2856  ff6e		       00		      .byte.b	#$00	;  Trafic2 H
   2857  ff6f		       c2		      .byte.b	#$C2	;  Trafic3 L
   2858  ff70		       00		      .byte.b	#$00	;  Trafic3 H
   2859  ff71		       9e		      .byte.b	#$9E	;  Trafic4 L
   2860  ff72		       00		      .byte.b	#$00	;  Trafic4 H
   2861  ff73				   TrafficSpeedsHighDelta
   2862  ff73		       00		      .byte.b	#$00	;  Trafic0 L
   2863  ff74		       00		      .byte.b	#$00	;  Trafic0 H
   2864  ff75		       0a		      .byte.b	#$0A	;  Trafic1 L
   2865  ff76		       01		      .byte.b	#$01	;  Trafic1 H
   2866  ff77		       c8		      .byte.b	#$C8	;  Trafic2 L
   2867  ff78		       00		      .byte.b	#$00	;  Trafic2 H
   2868  ff79		       86		      .byte.b	#$86	;  Trafic3 L
   2869  ff7a		       00		      .byte.b	#$00	;  Trafic3 H
   2870  ff7b		       44		      .byte.b	#$44	;  Trafic4 L
   2871  ff7c		       00		      .byte.b	#$00	;  Trafic4 H
   2872  ff7d
   2873  ff7d				   CarIdToSpriteAddressL
   2874  ff7d		       31		      .byte.b	#<CarSprite0
   2875  ff7e		       3f		      .byte.b	#<CarSprite1
   2876  ff7f		       4d		      .byte.b	#<CarSprite2
   2877  ff80		       5b		      .byte.b	#<CarSprite3
   2878  ff81
   2879  ff81				   CarIdToSpriteAddressH
   2880  ff81		       ff		      .byte.b	#>CarSprite0
   2881  ff82		       ff		      .byte.b	#>CarSprite1
   2882  ff83		       ff		      .byte.b	#>CarSprite2
   2883  ff84		       ff		      .byte.b	#>CarSprite3
   2884  ff85
   2885  ff85				   EnemyCarIdToSpriteAddressL
   2886  ff85		       39		      .byte.b	#<CarSprite0NoPadding
   2887  ff86		       47		      .byte.b	#<CarSprite1NoPadding
   2888  ff87		       55		      .byte.b	#<CarSprite2NoPadding
   2889  ff88		       63		      .byte.b	#<CarSprite3NoPadding
   2890  ff89
   2891  ff89				   EnemyCarIdToSpriteAddressH
   2892  ff89		       ff		      .byte.b	#>CarSprite0NoPadding
   2893  ff8a		       ff		      .byte.b	#>CarSprite1NoPadding
   2894  ff8b		       ff		      .byte.b	#>CarSprite2NoPadding
   2895  ff8c		       ff		      .byte.b	#>CarSprite3NoPadding
   2896  ff8d
   2897  ff8d				   CarIdToAccelerateSpeed
   2898  ff8d		       80		      .byte.b	#128
   2899  ff8e		       c0		      .byte.b	#192
   2900  ff8f		       60		      .byte.b	#96
   2901  ff90		       c0		      .byte.b	#192
   2902  ff91
   2903  ff91				   CarIdToTimeoverBreakInterval 		; Glide
   2904  ff91		       03		      .byte.b	#%00000011	;Every 4 frames
   2905  ff92		       03		      .byte.b	#%00000011	;Every 4 frames
   2906  ff93		       0f		      .byte.b	#%00001111	;Every 16 frames
   2907  ff94		       03		      .byte.b	#%00000011	;Every 4 frames
   2908  ff95
   2909  ff95				   CarIdToMaxSpeedL
   2910  ff95		       80		      .byte.b	#$80
   2911  ff96		       00		      .byte.b	#$00	; One less gear
   2912  ff97		       80		      .byte.b	#$80
   2913  ff98		       80		      .byte.b	#$80
   2914  ff99
   2915  ff99				   CarIdToMaxGear
   2916  ff99		       05		      .byte.b	#5
   2917  ff9a		       04		      .byte.b	#4	; One less gear
   2918  ff9b		       05		      .byte.b	#5
   2919  ff9c		       05		      .byte.b	#5
   2920  ff9d
   2921  ff9d				   GearToBreakSpeedTable
   2922  ff9d		       09		      .byte.b	#(BREAK_SPEED - 1)
   2923  ff9e		       09		      .byte.b	#(BREAK_SPEED - 1)
   2924  ff9f		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2925  ffa0		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2926  ffa1		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2927  ffa2		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2928  ffa3
   2929  ffa3				   TrafficColorTable
   2930  ffa3		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2931  ffa4		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2932  ffa5		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2933  ffa6		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2934  ffa7
   2935  ffa7				   TrafficChanceTable
   2936  ffa7		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2937  ffa8		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2938  ffa9		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2939  ffaa		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2940  ffab
   2941  ffab				   TrafficTimeTable
   2942  ffab		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2943  ffac		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2944  ffad		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2945  ffae		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2946  ffaf		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2947  ffb0
   2948  ffb0
   2949  fffc					      org	$FFFC
   2950  fffc		       00 f0		      .word.w	BeforeStart
   2951  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
