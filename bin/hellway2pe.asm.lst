------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 83 f7 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 58 f7 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080
    283  f080				   ConfigurePlayer1XPosition
    284  f080		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    285  f082		       85 b7		      STA	Player1X	;3
    286  f084
    287  f084				   HPositioning 		; Avoid sleep doing needed stuff
    288  f084		       85 02		      STA	WSYNC
    289  f086
    290  f086				   ConfigurePlayer0XPosition
    291  f086		       a9 21		      LDA	#PLAYER_0_X_START	;2
    292  f088		       85 b6		      STA	Player0X	;3
    293  f08a
    294  f08a				   ConfigureMissileSize
    295  f08a		       a9 30		      LDA	#%00110000	;2 Missile Size
    296  f08c		       85 04		      STA	NUSIZ0	;3
    297  f08e		       85 05		      STA	NUSIZ1	;3
    298  f090
    299  f090				   ConfigureNextCheckpoint
    300  f090		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    301  f092		       85 cd		      STA	NextCheckpoint
    302  f094
    303  f094		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f096					      SLEEP	4	;
      1  f096				   .CYCLES    SET	4
      2  f096
      3  f096				  -	      IF	.CYCLES < 2
      4  f096				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f096				  -	      ERR
      6  f096					      ENDIF
      7  f096
      8  f096				  -	      IF	.CYCLES & 1
      9  f096				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f096				  -	      nop	0
     11  f096				  -	      ELSE
     12  f096				  -	      bit	VSYNC
     13  f096				  -	      ENDIF
     14  f096				  -.CYCLES    SET	.CYCLES - 3
     15  f096					      ENDIF
     16  f096
     17  f096					      REPEAT	.CYCLES / 2
     18  f096		       ea		      nop
     17  f096					      REPEND
     18  f097		       ea		      nop
     19  f098					      REPEND
    305  f098		       85 12		      STA	RESM0
      0  f09a					      SLEEP	2	;
      1  f09a				   .CYCLES    SET	2
      2  f09a
      3  f09a				  -	      IF	.CYCLES < 2
      4  f09a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09a				  -	      ERR
      6  f09a					      ENDIF
      7  f09a
      8  f09a				  -	      IF	.CYCLES & 1
      9  f09a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09a				  -	      nop	0
     11  f09a				  -	      ELSE
     12  f09a				  -	      bit	VSYNC
     13  f09a				  -	      ENDIF
     14  f09a				  -.CYCLES    SET	.CYCLES - 3
     15  f09a					      ENDIF
     16  f09a
     17  f09a					      REPEAT	.CYCLES / 2
     18  f09a		       ea		      nop
     19  f09b					      REPEND
    307  f09b		       85 14		      STA	RESBL
      0  f09d					      SLEEP	2
      1  f09d				   .CYCLES    SET	2
      2  f09d
      3  f09d				  -	      IF	.CYCLES < 2
      4  f09d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09d				  -	      ERR
      6  f09d					      ENDIF
      7  f09d
      8  f09d				  -	      IF	.CYCLES & 1
      9  f09d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09d				  -	      nop	0
     11  f09d				  -	      ELSE
     12  f09d				  -	      bit	VSYNC
     13  f09d				  -	      ENDIF
     14  f09d				  -.CYCLES    SET	.CYCLES - 3
     15  f09d					      ENDIF
     16  f09d
     17  f09d					      REPEAT	.CYCLES / 2
     18  f09d		       ea		      nop
     19  f09e					      REPEND
    309  f09e		       85 13		      STA	RESM1
      0  f0a0					      SLEEP	3
      1  f0a0				   .CYCLES    SET	3
      2  f0a0
      3  f0a0				  -	      IF	.CYCLES < 2
      4  f0a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a0				  -	      ERR
      6  f0a0					      ENDIF
      7  f0a0
      8  f0a0					      IF	.CYCLES & 1
      9  f0a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a0				  -	      nop	0
     11  f0a0					      ELSE
     12  f0a0		       24 00		      bit	VSYNC
     13  f0a2					      ENDIF
     14  f0a2				   .CYCLES    SET	.CYCLES - 3
     15  f0a2					      ENDIF
     16  f0a2
     17  f0a2				  -	      REPEAT	.CYCLES / 2
     18  f0a2				  -	      nop
     19  f0a2					      REPEND
    311  f0a2
    312  f0a2		       a9 e0		      LDA	#$E0
    313  f0a4		       85 24		      STA	HMBL
    314  f0a6		       85 22		      STA	HMM0
    315  f0a8		       85 23		      STA	HMM1
    316  f0aa		       85 02		      STA	WSYNC
    317  f0ac		       85 2a		      STA	HMOVE
    318  f0ae		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    319  f0b0		       85 2b		      STA	HMCLR
      0  f0b2					      SLEEP	30
      1  f0b2				   .CYCLES    SET	30
      2  f0b2
      3  f0b2				  -	      IF	.CYCLES < 2
      4  f0b2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b2				  -	      ERR
      6  f0b2					      ENDIF
      7  f0b2
      8  f0b2				  -	      IF	.CYCLES & 1
      9  f0b2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b2				  -	      nop	0
     11  f0b2				  -	      ELSE
     12  f0b2				  -	      bit	VSYNC
     13  f0b2				  -	      ENDIF
     14  f0b2				  -.CYCLES    SET	.CYCLES - 3
     15  f0b2					      ENDIF
     16  f0b2
     17  f0b2					      REPEAT	.CYCLES / 2
     18  f0b2		       ea		      nop
     17  f0b2					      REPEND
     18  f0b3		       ea		      nop
     17  f0b3					      REPEND
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     19  f0c1					      REPEND
    321  f0c1		       85 10		      STA	RESP0
    322  f0c3							;SLEEP 5 ; Temporarily move player 1 away.
    323  f0c3		       85 11		      STA	RESP1
    324  f0c5
    325  f0c5				   WaitResetToEnd
    326  f0c5		       ad 84 02 	      LDA	INTIM
    327  f0c8		       d0 fb		      BNE	WaitResetToEnd
    328  f0ca
    329  f0ca				   MainLoop
    330  f0ca		       a9 02		      LDA	#2
    331  f0cc		       85 00		      STA	VSYNC
    332  f0ce		       85 02		      STA	WSYNC
    333  f0d0		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    334  f0d2				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    335  f0d2		       a9 01		      LDA	#%00000001	;3
    336  f0d4		       24 df		      BIT	TextFlickerMode	;2
    337  f0d6		       f0 05		      BEQ	TextSideFrameZero	;2
    338  f0d8		       25 8d		      AND	FrameCount1	;2
    339  f0da		       4c df f0 	      JMP	StoreTextSize	;3
    340  f0dd				   TextSideFrameZero
    341  f0dd		       25 8c		      AND	FrameCount0	;2
    342  f0df				   StoreTextSize
    343  f0df		       85 de		      STA	TextSide	;3
    344  f0e1
    345  f0e1				   PrepareMaxHMove
      0  f0e1					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e1				   .CYCLES    SET	18
      2  f0e1
      3  f0e1				  -	      IF	.CYCLES < 2
      4  f0e1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e1				  -	      ERR
      6  f0e1					      ENDIF
      7  f0e1
      8  f0e1				  -	      IF	.CYCLES & 1
      9  f0e1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e1				  -	      nop	0
     11  f0e1				  -	      ELSE
     12  f0e1				  -	      bit	VSYNC
     13  f0e1				  -	      ENDIF
     14  f0e1				  -.CYCLES    SET	.CYCLES - 3
     15  f0e1					      ENDIF
     16  f0e1
     17  f0e1					      REPEAT	.CYCLES / 2
     18  f0e1		       ea		      nop
     17  f0e1					      REPEND
     18  f0e2		       ea		      nop
     17  f0e2					      REPEND
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     19  f0ea					      REPEND
    347  f0ea		       a9 80		      LDA	#$80
    348  f0ec		       85 24		      STA	HMBL
    349  f0ee		       85 22		      STA	HMM0
    350  f0f0		       85 23		      STA	HMM1
    351  f0f2		       85 20		      STA	HMP0
    352  f0f4		       85 21		      STA	HMP1
    353  f0f6		       85 02		      STA	WSYNC
    354  f0f8		       85 2a		      STA	HMOVE	; 1/10			
    355  f0fa
    356  f0fa				   ConfigVBlankTimer
    357  f0fa		       a5 c6		      LDA	GameMode
    358  f0fc		       c9 10		      CMP	#MAX_GAME_MODE
    359  f0fe		       f0 05		      BEQ	SetVblankTimerQrCode
    360  f100		       a9 29		      LDA	#VBLANK_TIMER
    361  f102		       4c 07 f1 	      JMP	SetVblankTimer
    362  f105				   SetVblankTimerQrCode
    363  f105		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    364  f107
    365  f107				   SetVblankTimer
    366  f107		       85 02		      STA	WSYNC	;3
    367  f109		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    368  f10b		       8d 96 02 	      STA	TIM64T	;3	
    369  f10e		       a9 00		      LDA	#0	;2
    370  f110		       85 00		      STA	VSYNC	;3	
    371  f112
    372  f112				   RandomizeGame
    373  f112		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    374  f114		       d0 2d		      BNE	EndRandomizeGame
    375  f116		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    376  f118		       29 02		      AND	#%00000010
    377  f11a		       f0 24		      BEQ	DeterministicGame
    378  f11c		       a6 96		      LDX	TrafficOffset1 + 2
    379  f11e		       bd 00 fe 	      LDA	AesTable,X
    380  f121		       45 8c		      EOR	FrameCount0
    381  f123		       85 96		      STA	TrafficOffset1 + 2
    382  f125		       85 a6		      STA	OpTrafficOffset1 + 2
    383  f127		       a6 9a		      LDX	TrafficOffset2 + 2
    384  f129		       bd 00 fe 	      LDA	AesTable,X
    385  f12c		       45 8c		      EOR	FrameCount0
    386  f12e		       85 9a		      STA	TrafficOffset2 + 2
    387  f130		       85 aa		      STA	OpTrafficOffset2 + 2
    388  f132		       a6 9e		      LDX	TrafficOffset3 + 2
    389  f134		       bd 00 fe 	      LDA	AesTable,X
    390  f137		       45 8c		      EOR	FrameCount0
    391  f139		       85 9e		      STA	TrafficOffset3 + 2
    392  f13b		       85 ae		      STA	OpTrafficOffset3 + 2
    393  f13d		       4c 43 f1 	      JMP	EndRandomizeGame
    394  f140
    395  f140				   DeterministicGame
    396  f140		       20 83 f7 	      JSR	DefaultOffsets
    397  f143
    398  f143				   EndRandomizeGame
    399  f143
    400  f143
    401  f143							; Move this in the code and save cycles, for some reason spliting is breaking...
    402  f143		       a2 08		      LDX	#8
    403  f145				   BurnAllHMove
    404  f145		       85 02		      STA	WSYNC	;3
    405  f147		       85 2a		      STA	HMOVE	; 3/10 
    406  f149		       ca		      DEX
    407  f14a		       d0 f9		      BNE	BurnAllHMove
    408  f14c		       85 02		      STA	WSYNC	;3
    409  f14e		       85 2b		      STA	HMCLR	; 
    410  f150
    411  f150				   CountFrame
    412  f150		       e6 8c		      INC	FrameCount0	; 5
    413  f152		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    414  f154		       e6 8d		      INC	FrameCount1	; 5 
    415  f156				   SkipIncFC1
    416  f156
    417  f156				   CallDrawQrCode
    418  f156		       a5 c6		      LDA	GameMode
    419  f158		       c9 10		      CMP	#MAX_GAME_MODE
    420  f15a		       d0 03		      BNE	TestIsGameRunning
    421  f15c		       4c 64 fc 	      JMP	DrawQrCode
    422  f15f
    423  f15f							;Does not update the game if not running
    424  f15f				   TestIsGameRunning
    425  f15f		       a5 bd		      LDA	GameStatus	;3
    426  f161		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    427  f163				   SelectCarWithDpadCall		; Only do it when game is stoped
    428  f163		       a2 00		      LDX	#0	; Player 0
    429  f165		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    430  f167		       85 b0		      STA	Tmp0
    431  f169		       20 f2 f9 	      JSR	SelectCarWithDpad
    432  f16c		       e8		      INX		; Player 1
    433  f16d		       20 f2 f9 	      JSR	SelectCarWithDpad
    434  f170
    435  f170				   CallConfigureCarSprites
    436  f170		       20 c0 f9 	      JSR	ConfigureCarSprites
    437  f173				   SkipUpdateLogicJump
    438  f173		       4c 89 f2 	      JMP	SkipUpdateLogic
    439  f176				   ContinueWithGameLogic
    440  f176
    441  f176				   EverySecond		; 64 frames to be more precise
    442  f176		       a9 3f		      LDA	#%00111111
    443  f178		       25 8c		      AND	FrameCount0
    444  f17a		       d0 06		      BNE	SkipEverySecondAction
    445  f17c		       c5 b8		      CMP	CountdownTimer
    446  f17e		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    447  f180		       c6 b8		      DEC	CountdownTimer
    448  f182				   SkipEverySecondAction
    449  f182
    450  f182				   ChangeTextFlickerMode
    451  f182		       a5 bc		      LDA	SwitchDebounceCounter
    452  f184		       d0 0d		      BNE	EndChangeTextFlickerMode
    453  f186		       ad 82 02 	      LDA	SWCHB
    454  f189		       29 02		      AND	#%00000010	;Game select
    455  f18b		       d0 06		      BNE	EndChangeTextFlickerMode
    456  f18d		       e6 df		      INC	TextFlickerMode
    457  f18f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    458  f191		       85 bc		      STA	SwitchDebounceCounter
    459  f193				   EndChangeTextFlickerMode
    460  f193
    461  f193				   BreakOnTimeOver		; Uses LDX as the breaking speed
    462  f193		       a2 00		      LDX	#0
    463  f195		       a5 b8		      LDA	CountdownTimer
    464  f197		       d0 0b		      BNE	Break
    465  f199		       a4 c7		      LDY	CurrentCarId
    466  f19b		       a5 8c		      LDA	FrameCount0
    467  f19d		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    468  f1a0		       d0 02		      BNE	Break
    469  f1a2		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    470  f1a4
    471  f1a4				   Break
    472  f1a4		       a9 20		      LDA	#%00100000	;Down in controller
    473  f1a6		       2c 80 02 	      BIT	SWCHA
    474  f1a9		       d0 0e		      BNE	BreakNonZero
    475  f1ab		       a5 0c		      LDA	INPT4	;3
    476  f1ad		       10 08		      BPL	BreakWhileAccelerating
    477  f1af		       a4 d5		      LDY	Gear
    478  f1b1		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    479  f1b4		       4c b9 f1 	      JMP	BreakNonZero
    480  f1b7				   BreakWhileAccelerating		; Allow better control while breaking.
    481  f1b7		       a2 05		      LDX	(#BREAK_SPEED / 2)
    482  f1b9
    483  f1b9				   BreakNonZero
    484  f1b9		       e0 00		      CPX	#0
    485  f1bb		       f0 2b		      BEQ	SkipBreak
    486  f1bd		       86 b0		      STX	Tmp0
    487  f1bf
    488  f1bf				   DecreaseSpeed
    489  f1bf		       38		      SEC
    490  f1c0		       a5 f0		      LDA	Player0SpeedL
    491  f1c2		       e5 b0		      SBC	Tmp0
    492  f1c4		       85 f0		      STA	Player0SpeedL
    493  f1c6		       a5 f2		      LDA	Player0SpeedH
    494  f1c8		       e9 00		      SBC	#0
    495  f1ca		       85 f2		      STA	Player0SpeedH
    496  f1cc
    497  f1cc				   CheckMinSpeed
    498  f1cc		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    499  f1ce		       c9 00		      CMP	#CAR_MIN_SPEED_H
    500  f1d0		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    501  f1d2		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    502  f1d4
    503  f1d4				   CompareLBreakSpeed
    504  f1d4		       a5 f0		      LDA	Player0SpeedL
    505  f1d6		       c9 00		      CMP	#CAR_MIN_SPEED_L
    506  f1d8		       90 03		      BCC	ResetMinSpeed	; Less than memory
    507  f1da		       4c e5 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    508  f1dd
    509  f1dd				   ResetMinSpeed
    510  f1dd		       a9 00		      LDA	#CAR_MIN_SPEED_H
    511  f1df		       85 f2		      STA	Player0SpeedH
    512  f1e1		       a9 00		      LDA	#CAR_MIN_SPEED_L
    513  f1e3		       85 f0		      STA	Player0SpeedL
    514  f1e5
    515  f1e5				   SkipAccelerateIfBreaking
    516  f1e5		       4c 2a f2 	      JMP	SkipAccelerate
    517  f1e8				   SkipBreak
    518  f1e8
    519  f1e8				   Acelerates
    520  f1e8		       a5 b8		      LDA	CountdownTimer
    521  f1ea		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    522  f1ec
    523  f1ec				   ContinueAccelerateTest
    524  f1ec		       a5 0c		      LDA	INPT4	;3
    525  f1ee		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    526  f1f0		       a9 10		      LDA	#%00010000	;UP in controller
    527  f1f2		       2c 80 02 	      BIT	SWCHA
    528  f1f5		       d0 33		      BNE	SkipAccelerate
    529  f1f7
    530  f1f7				   IncreaseCarSpeed
    531  f1f7		       a2 02		      LDX	#2
    532  f1f9		       a4 c7		      LDY	CurrentCarId
    533  f1fb				   IncreaseCarSpeedLoop
    534  f1fb							;Adds speed
    535  f1fb		       18		      CLC
    536  f1fc		       a5 dc		      LDA	AccelerateBuffer
    537  f1fe		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    538  f201		       85 dc		      STA	AccelerateBuffer
    539  f203		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    540  f205		       e6 f0		      INC	Player0SpeedL
    541  f207		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    542  f209		       e6 f2		      INC	Player0SpeedH
    543  f20b				   ContinueIncreaseSpeedLoop
    544  f20b		       ca		      DEX
    545  f20c		       d0 ed		      BNE	IncreaseCarSpeedLoop
    546  f20e				   SkipIncreaseCarSpeed
    547  f20e
    548  f20e				   CheckIfAlreadyMaxSpeed
    549  f20e		       a5 f2		      LDA	Player0SpeedH
    550  f210		       c9 02		      CMP	#CAR_MAX_SPEED_H
    551  f212		       90 16		      BCC	SkipAccelerate	; less than my max speed
    552  f214		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    553  f216							;High bit is max, compare the low
    554  f216		       a4 c7		      LDY	CurrentCarId
    555  f218		       a5 f0		      LDA	Player0SpeedL
    556  f21a		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    557  f21d		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    558  f21f							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    559  f21f
    560  f21f				   ResetToMaxSpeed		; Speed is more, or is already max
    561  f21f		       a9 02		      LDA	#CAR_MAX_SPEED_H
    562  f221		       85 f2		      STA	Player0SpeedH
    563  f223		       a4 c7		      LDY	CurrentCarId
    564  f225		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    565  f228		       85 f0		      STA	Player0SpeedL
    566  f22a				   SkipAccelerate
    567  f22a
    568  f22a				   CallUpdateOffsets
    569  f22a		       a2 00		      LDX	#0	; Player 0
    570  f22c		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    571  f22e		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    572  f230		       a5 f0		      LDA	Player0SpeedL
    573  f232		       85 b4		      STA	Tmp4
    574  f234		       a5 f2		      LDA	Player0SpeedH
    575  f236		       85 b5		      STA	Tmp5
    576  f238		       20 84 fa 	      JSR	UpdateOffsets
    577  f23b
    578  f23b							;LDX Exits the call with correct value.
    579  f23b		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    580  f23d		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    581  f23f		       a5 f1		      LDA	Player1SpeedL
    582  f241		       85 b4		      STA	Tmp4
    583  f243		       a5 f3		      LDA	Player1SpeedH
    584  f245		       85 b5		      STA	Tmp5
    585  f247		       20 84 fa 	      JSR	UpdateOffsets
    586  f24a
    587  f24a				   ConfigureOpponentLine		; Temporary
    588  f24a		       a9 14		      LDA	#20	; Extract to constant
    589  f24c		       85 cf		      STA	OpponentLine
    590  f24e
    591  f24e				   CallTestColisionAndMove
    592  f24e		       a2 00		      LDX	#0	; Player 0
    593  f250		       a9 40		      LDA	#%01000000	; Left player 0
    594  f252		       85 b0		      STA	Tmp0
    595  f254		       a9 80		      LDA	#%10000000	; right player 0
    596  f256		       85 b1		      STA	Tmp1
    597  f258							; Colision with traffic, each player check different flags,
    598  f258		       a5 8c		      LDA	FrameCount0
    599  f25a		       29 01		      AND	#%00000001
    600  f25c		       f0 07		      BEQ	SkipColisionPlayer0	; Test colision after draw frame
    601  f25e		       a5 01		      LDA	CXM1P
    602  f260		       4a		      LSR
    603  f261		       05 00		      ORA	CXM0P
    604  f263		       05 02		      ORA	CXP0FB
    605  f265							; ORA CXPPMM ; Collision between players will have its own rules
    606  f265				   SkipColisionPlayer0		; Should not colide on opponent side.
    607  f265		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    608  f267		       85 b2		      STA	Tmp2
    609  f269		       20 04 fa 	      JSR	TestCollisionAndMove
    610  f26c
    611  f26c		       e8		      INX		; player 1
    612  f26d		       a9 04		      LDA	#%00000100	; Left player 1
    613  f26f		       85 b0		      STA	Tmp0
    614  f271		       a9 08		      LDA	#%00001000	; right player 1
    615  f273		       85 b1		      STA	Tmp1
    616  f275		       a5 8c		      LDA	FrameCount0
    617  f277		       29 01		      AND	#%00000001
    618  f279		       d0 07		      BNE	SkipColisionPlayer1	; Test colision after draw frame
    619  f27b		       a5 00		      LDA	CXM0P
    620  f27d		       4a		      LSR
    621  f27e		       05 01		      ORA	CXM1P
    622  f280		       05 03		      ORA	CXP1FB
    623  f282				   SkipColisionPlayer1
    624  f282		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    625  f284		       85 b2		      STA	Tmp2
    626  f286		       20 04 fa 	      JSR	TestCollisionAndMove
    627  f289
    628  f289				   SkipUpdateLogic		; Continue here if not paused
    629  f289
    630  f289				   CalculateGear
    631  f289		       a5 f0		      LDA	Player0SpeedL	;3
    632  f28b		       29 80		      AND	#%10000000	;2
    633  f28d		       05 f2		      ORA	Player0SpeedH	;3
    634  f28f		       18		      CLC		;2
    635  f290		       2a		      ROL		;2
    636  f291		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    637  f293		       85 d5		      STA	Gear
    638  f295
    639  f295				   EndProcessingBorder
    640  f295
    641  f295				   ProcessScoreFontColor
    642  f295		       a6 cb		      LDX	ScoreFontColorHoldChange
    643  f297		       f0 06		      BEQ	ResetScoreFontColor
    644  f299		       ca		      DEX
    645  f29a		       86 cb		      STX	ScoreFontColorHoldChange
    646  f29c		       4c a3 f2 	      JMP	SkipScoreFontColor
    647  f29f				   ResetScoreFontColor
    648  f29f		       a9 f9		      LDA	#SCORE_FONT_COLOR
    649  f2a1		       85 c9		      STA	ScoreFontColor
    650  f2a3				   SkipScoreFontColor
    651  f2a3
    652  f2a3				   IsGameOver
    653  f2a3		       a5 b8		      LDA	CountdownTimer
    654  f2a5		       05 f0		      ORA	Player0SpeedL
    655  f2a7		       05 f2		      ORA	Player0SpeedH
    656  f2a9		       d0 0b		      BNE	IsCheckpoint
    657  f2ab		       a9 01		      LDA	#1
    658  f2ad		       85 cb		      STA	ScoreFontColorHoldChange
    659  f2af		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    660  f2b1		       85 c9		      STA	ScoreFontColor
    661  f2b3		       4c e8 f2 	      JMP	SkipIsTimeOver
    662  f2b6
    663  f2b6				   IsCheckpoint
    664  f2b6		       a5 cd		      LDA	NextCheckpoint
    665  f2b8		       c5 92		      CMP	TrafficOffset0 + 2
    666  f2ba		       d0 20		      BNE	SkipIsCheckpoint
    667  f2bc		       18		      CLC
    668  f2bd		       69 10		      ADC	#CHECKPOINT_INTERVAL
    669  f2bf		       85 cd		      STA	NextCheckpoint
    670  f2c1		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    671  f2c3		       85 c9		      STA	ScoreFontColor
    672  f2c5		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    673  f2c7		       85 cb		      STA	ScoreFontColorHoldChange
    674  f2c9		       a5 b8		      LDA	CountdownTimer
    675  f2cb		       18		      CLC
    676  f2cc		       65 c0		      ADC	CheckpointTime
    677  f2ce		       85 b8		      STA	CountdownTimer
    678  f2d0		       90 04		      BCC	JumpSkipTimeOver
    679  f2d2		       a9 ff		      LDA	#$FF
    680  f2d4		       85 b8		      STA	CountdownTimer	; Does not overflow!
    681  f2d6				   JumpSkipTimeOver
    682  f2d6		       20 49 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    683  f2d9		       4c e8 f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    684  f2dc				   SkipIsCheckpoint
    685  f2dc
    686  f2dc				   IsTimeOver
    687  f2dc		       a5 b8		      LDA	CountdownTimer
    688  f2de		       d0 08		      BNE	SkipIsTimeOver
    689  f2e0		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    690  f2e2		       85 cb		      STA	ScoreFontColorHoldChange
    691  f2e4		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    692  f2e6		       85 c9		      STA	ScoreFontColor
    693  f2e8				   SkipIsTimeOver
    694  f2e8
    695  f2e8		       20 c0 f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    696  f2eb
    697  f2eb				   PrintEasterEggCondition
    698  f2eb		       a5 8d		      LDA	FrameCount1
    699  f2ed		       29 38		      AND	#%00111000
    700  f2ef		       05 bd		      ORA	GameStatus
    701  f2f1		       c9 38		      CMP	#%00111000
    702  f2f3		       d0 06		      BNE	ChooseTextSide
    703  f2f5		       20 b6 f7 	      JSR	PrintEasterEgg
    704  f2f8		       4c ea f3 	      JMP	RightScoreWriteEnd
    705  f2fb
    706  f2fb							;Could be done during on vblank to save this comparisson time (before draw score), 
    707  f2fb							;but I am saving vblank cycles for now, in case of 2 players.
    708  f2fb				   ChooseTextSide		; 
    709  f2fb		       a5 de		      LDA	TextSide	;3
    710  f2fd		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    711  f2ff		       4c 80 f3 	      JMP	RightScoreWrite
    712  f302
    713  f302				   LeftScoreWrite
    714  f302		       a5 c9		      LDA	ScoreFontColor
    715  f304		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    716  f306		       f0 4e		      BEQ	PrintCheckpoint
    717  f308		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    718  f30a		       f0 52		      BEQ	PrintStartGame
    719  f30c		       a5 bd		      LDA	GameStatus
    720  f30e		       f0 56		      BEQ	PrintHellwayLeft
    721  f310				   WriteDistance		;Not optimized yet, ugly code.
    722  f310				   Digit0Distance
    723  f310		       a5 91		      LDA	TrafficOffset0 + 1	;3
    724  f312		       4a		      LSR		; 2
    725  f313		       4a		      LSR		; 2
    726  f314		       4a		      LSR		; 2
    727  f315		       4a		      LSR		; 2
    728  f316		       aa		      TAX		; 2
    729  f317		       bd be fd 	      LDA	FontLookup,X	;4
    730  f31a		       85 d3		      STA	ScoreD3	;3
    731  f31c
    732  f31c				   Digit1Distance
    733  f31c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    734  f31e		       29 0f		      AND	#%00001111	;2
    735  f320		       aa		      TAX		; 2
    736  f321		       bd be fd 	      LDA	FontLookup,X	;4 
    737  f324		       85 d2		      STA	ScoreD2	;3
    738  f326
    739  f326				   Digit2Distance
    740  f326		       a5 92		      LDA	TrafficOffset0 + 2	;3
    741  f328		       4a		      LSR		; 2
    742  f329		       4a		      LSR		; 2
    743  f32a		       4a		      LSR		; 2
    744  f32b		       4a		      LSR		; 2
    745  f32c		       aa		      TAX		; 2
    746  f32d		       bd be fd 	      LDA	FontLookup,X	;4
    747  f330		       85 d1		      STA	ScoreD1	;3
    748  f332
    749  f332				   Digit3Distance
    750  f332		       a5 ba		      LDA	Traffic0Msb	;3
    751  f334		       29 0f		      AND	#%00001111	;2
    752  f336		       aa		      TAX		; 2
    753  f337		       bd be fd 	      LDA	FontLookup,X	;4 
    754  f33a		       85 d0		      STA	ScoreD0	;3
    755  f33c
    756  f33c				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    757  f33c		       a5 ba		      LDA	Traffic0Msb
    758  f33e		       29 f0		      AND	#%11110000	;2
    759  f340		       d0 07		      BNE	DrawDistanceExtraDigit
    760  f342		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    761  f344		       85 d4		      STA	ScoreD4	;3
    762  f346		       4c 53 f3 	      JMP	EndDrawDistance
    763  f349				   DrawDistanceExtraDigit
    764  f349		       4a		      LSR		; 2
    765  f34a		       4a		      LSR		; 2
    766  f34b		       4a		      LSR		; 2
    767  f34c		       4a		      LSR		; 2
    768  f34d		       aa		      TAX		; 2
    769  f34e		       bd be fd 	      LDA	FontLookup,X	;4
    770  f351		       85 d4		      STA	ScoreD4	;3
    771  f353
    772  f353				   EndDrawDistance
    773  f353		       4c ea f3 	      JMP	RightScoreWriteEnd	;3
    774  f356
    775  f356				   PrintCheckpoint
    776  f356		       a2 00		      LDX	#<CheckpointText
    777  f358		       20 98 f7 	      JSR	PrintStaticText
    778  f35b		       4c ea f3 	      JMP	RightScoreWriteEnd	;3
    779  f35e				   PrintStartGame
    780  f35e		       a2 23		      LDX	#<GoText
    781  f360		       20 98 f7 	      JSR	PrintStaticText
    782  f363		       4c ea f3 	      JMP	RightScoreWriteEnd	;3
    783  f366
    784  f366				   PrintHellwayLeft
    785  f366		       a5 8d		      LDA	FrameCount1
    786  f368		       29 01		      AND	#1
    787  f36a		       d0 05		      BNE	PrintCreditsLeft
    788  f36c		       a2 05		      LDX	#<HellwayLeftText
    789  f36e		       4c 73 f3 	      JMP	PrintGameMode
    790  f371				   PrintCreditsLeft
    791  f371		       a2 0f		      LDX	#<OpbText
    792  f373
    793  f373				   PrintGameMode
    794  f373		       20 98 f7 	      JSR	PrintStaticText
    795  f376		       a6 c6		      LDX	GameMode
    796  f378		       bd be fd 	      LDA	FontLookup,X	;4 
    797  f37b		       85 d0		      STA	ScoreD0	;3
    798  f37d		       4c ea f3 	      JMP	RightScoreWriteEnd	;3
    799  f380
    800  f380				   RightScoreWrite
    801  f380		       a5 bd		      LDA	GameStatus
    802  f382		       f0 45		      BEQ	PrintHellwayRight
    803  f384		       a5 c9		      LDA	ScoreFontColor
    804  f386		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    805  f388		       f0 52		      BEQ	PrintGameOver
    806  f38a				   Digit0Timer
    807  f38a		       a5 b8		      LDA	CountdownTimer	;3
    808  f38c		       29 0f		      AND	#%00001111	;2
    809  f38e		       aa		      TAX		; 2
    810  f38f		       bd be fd 	      LDA	FontLookup,X	;4 
    811  f392		       85 d1		      STA	ScoreD1	;3
    812  f394
    813  f394				   Digit1Timer
    814  f394		       a5 b8		      LDA	CountdownTimer	;3
    815  f396		       4a		      LSR		; 2
    816  f397		       4a		      LSR		; 2
    817  f398		       4a		      LSR		; 2
    818  f399		       4a		      LSR		; 2
    819  f39a		       aa		      TAX		; 2
    820  f39b		       bd be fd 	      LDA	FontLookup,X	;4
    821  f39e		       85 d0		      STA	ScoreD0	;3
    822  f3a0
    823  f3a0		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    824  f3a2		       85 d2		      STA	ScoreD2	;3
    825  f3a4
    826  f3a4				   Digit0Speed
    827  f3a4		       a5 f0		      LDA	Player0SpeedL
    828  f3a6		       29 3c		      AND	#%00111100	;2 Discard the last bits
    829  f3a8		       4a		      LSR		; 2
    830  f3a9		       4a		      LSR		; 2
    831  f3aa		       aa		      TAX		; 2
    832  f3ab		       bd be fd 	      LDA	FontLookup,X	;4
    833  f3ae		       85 d4		      STA	ScoreD4	;3
    834  f3b0
    835  f3b0				   Digit1Speed
    836  f3b0		       a5 f0		      LDA	Player0SpeedL
    837  f3b2		       29 c0		      AND	#%11000000	;2 Discard the last bits
    838  f3b4		       18		      CLC
    839  f3b5		       2a		      ROL		;First goes into carry
    840  f3b6		       2a		      ROL
    841  f3b7		       2a		      ROL
    842  f3b8		       85 b0		      STA	Tmp0
    843  f3ba		       a5 f2		      LDA	Player0SpeedH
    844  f3bc		       0a		      ASL
    845  f3bd		       0a		      ASL
    846  f3be		       05 b0		      ORA	Tmp0
    847  f3c0		       aa		      TAX		; 2
    848  f3c1		       bd be fd 	      LDA	FontLookup,X	;4
    849  f3c4		       85 d3		      STA	ScoreD3	;3
    850  f3c6		       4c ea f3 	      JMP	RightScoreWriteEnd
    851  f3c9
    852  f3c9				   PrintHellwayRight
    853  f3c9		       a5 8d		      LDA	FrameCount1
    854  f3cb		       29 01		      AND	#1
    855  f3cd		       d0 05		      BNE	PrintCreditsRight
    856  f3cf		       a2 0a		      LDX	#<HellwayRightText
    857  f3d1		       4c d6 f3 	      JMP	PrintRightIntro
    858  f3d4				   PrintCreditsRight
    859  f3d4		       a2 14		      LDX	#<YearText
    860  f3d6				   PrintRightIntro
    861  f3d6		       20 98 f7 	      JSR	PrintStaticText
    862  f3d9		       4c ea f3 	      JMP	RightScoreWriteEnd
    863  f3dc				   PrintGameOver
    864  f3dc		       a5 8c		      LDA	FrameCount0
    865  f3de		       30 05		      BMI	PrintOverText
    866  f3e0		       a2 19		      LDX	#<GameText
    867  f3e2		       4c e7 f3 	      JMP	StoreGameOverText
    868  f3e5				   PrintOverText
    869  f3e5		       a2 1e		      LDX	#<OverText
    870  f3e7				   StoreGameOverText
    871  f3e7		       20 98 f7 	      JSR	PrintStaticText
    872  f3ea				   RightScoreWriteEnd
    873  f3ea
    874  f3ea
    875  f3ea				   ScoreBackgroundColor
    876  f3ea		       a2 00		      LDX	#0
    877  f3ec		       ad 82 02 	      LDA	SWCHB
    878  f3ef		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    879  f3f1		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    880  f3f3		       f0 04		      BEQ	BlackAndWhiteScoreBg
    881  f3f5		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    882  f3f7		       a2 03		      LDX	#BACKGROUND_COLOR
    883  f3f9				   BlackAndWhiteScoreBg
    884  f3f9		       85 b2		      STA	Tmp2	; Score Background
    885  f3fb		       86 b3		      STX	Tmp3	; Traffic Background
    886  f3fd
    887  f3fd				   ConfigurePFForScore
    888  f3fd							;LDA #SCORE_BACKGROUND_COLOR; Done above
    889  f3fd		       85 09		      STA	COLUBK
    890  f3ff		       20 0b f7 	      JSR	ClearAll
    891  f402		       a9 02		      LDA	#%00000010	; Score mode
    892  f404		       85 0a		      STA	CTRLPF
    893  f406		       a5 de		      LDA	TextSide	;3
    894  f408		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    895  f40a				   LeftScoreOn
    896  f40a		       a5 c9		      LDA	ScoreFontColor
    897  f40c		       85 07		      STA	COLUP1
    898  f40e		       a5 b2		      LDA	Tmp2
    899  f410		       85 06		      STA	COLUP0
    900  f412		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    901  f414		       85 b1		      STA	Tmp1
    902  f416		       4c 25 f4 	      JMP	CallWaitForVblankEnd
    903  f419				   RightScoreOn
    904  f419		       a5 c9		      LDA	ScoreFontColor
    905  f41b		       85 06		      STA	COLUP0
    906  f41d		       a5 b2		      LDA	Tmp2
    907  f41f		       85 07		      STA	COLUP1
    908  f421		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    909  f423		       85 b1		      STA	Tmp1
    910  f425
    911  f425							; After here we are going to update the screen, No more heavy code
    912  f425				   CallWaitForVblankEnd
    913  f425		       20 99 f9 	      JSR	WaitForVblankEnd
    914  f428
    915  f428				   DrawScoreHud
    916  f428		       20 28 f8 	      JSR	PrintScore
    917  f42b
    918  f42b		       85 02		      STA	WSYNC
    919  f42d
    920  f42d		       a5 0c		      LDA	INPT4	;3
    921  f42f		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    922  f431		       a5 c9		      LDA	ScoreFontColor
    923  f433		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    924  f435		       d0 0a		      BNE	WaitAnotherScoreLine
    925  f437		       a5 de		      LDA	TextSide	;3
    926  f439		       d0 03		      BNE	LeftScoreOnGameOver
    927  f43b		       4c 73 f9 	      JMP	DrawGameOverScreenRight
    928  f43e				   LeftScoreOnGameOver
    929  f43e		       4c e5 f8 	      JMP	DrawGameOverScreenLeft
    930  f441
    931  f441				   WaitAnotherScoreLine
    932  f441		       85 02		      STA	WSYNC
    933  f443
    934  f443				   PrepareForTraffic
    935  f443		       20 1d f7 	      JSR	ClearPF	; 32
    936  f446
    937  f446		       85 02		      STA	WSYNC
    938  f448		       85 02		      STA	WSYNC
    939  f44a
    940  f44a		       a9 30		      LDA	#%00110000	; 2 Score mode
    941  f44c		       85 0a		      STA	CTRLPF	;3
    942  f44e
    943  f44e		       a5 c2		      LDA	TrafficColor	;3
    944  f450		       85 08		      STA	COLUPF	;3
    945  f452
    946  f452		       a9 96		      LDA	#PLAYER1_COLOR	;2
    947  f454		       85 07		      STA	COLUP1	;3
    948  f456
    949  f456		       a5 c9		      LDA	ScoreFontColor	;3
    950  f458		       85 06		      STA	COLUP0	;3
    951  f45a
    952  f45a		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    953  f45c
    954  f45c		       20 1d f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    955  f45f
    956  f45f		       a6 b3		      LDX	Tmp3	; Background color.
    957  f461
      0  f461					      SLEEP	9	; Odd sleep destroys flags
      1  f461				   .CYCLES    SET	9
      2  f461
      3  f461				  -	      IF	.CYCLES < 2
      4  f461				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f461				  -	      ERR
      6  f461					      ENDIF
      7  f461
      8  f461					      IF	.CYCLES & 1
      9  f461				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f461				  -	      nop	0
     11  f461					      ELSE
     12  f461		       24 00		      bit	VSYNC
     13  f463					      ENDIF
     14  f463				   .CYCLES    SET	.CYCLES - 3
     15  f463					      ENDIF
     16  f463
     17  f463					      REPEAT	.CYCLES / 2
     18  f463		       ea		      nop
     17  f463					      REPEND
     18  f464		       ea		      nop
     17  f464					      REPEND
     18  f465		       ea		      nop
     19  f466					      REPEND
    959  f466
    960  f466		       a5 8c		      LDA	FrameCount0	;Brach flag
    961  f468		       29 01		      AND	#%00000001
    962  f46a
    963  f46a		       86 09		      STX	COLUBK	;3
    964  f46c		       d0 05		      BNE	OpDrawCache	;2
    965  f46e		       4c 2d f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    966  f471							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    967  f471
    968  f471							;main scanline loop...
    969  f471				   OpScanLoop
    970  f471		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    971  f473
    972  f473							;Start of next line!			
    973  f473				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    974  f473
    975  f473		       a5 80		      LDA	GRP0Cache	;3
    976  f475		       85 1b		      STA	GRP0	;3
    977  f477
    978  f477		       a5 84		      LDA	GRP1Cache	;3
    979  f479		       85 1c		      STA	GRP1	;3
    980  f47b
    981  f47b		       a5 85		      LDA	ENABLCache	;3
    982  f47d		       85 1f		      STA	ENABL	;3
    983  f47f
    984  f47f		       a5 86		      LDA	ENAM0Cache	;3
    985  f481		       85 1d		      STA	ENAM0	;3
    986  f483
    987  f483		       a5 87		      LDA	ENAM1Cache	;3
    988  f485		       85 1e		      STA	ENAM1	;3
    989  f487
    990  f487		       a5 81		      LDA	PF0Cache	;3
    991  f489		       85 0d		      STA	PF0	;3
    992  f48b
    993  f48b		       a9 00		      LDA	#0	;2
    994  f48d							;STA PF0	     ;3
    995  f48d		       85 80		      STA	GRP0Cache	;3
    996  f48f		       85 86		      STA	ENAM0Cache	;3
    997  f491		       85 85		      STA	ENABLCache	;3
    998  f493		       85 87		      STA	ENAM1Cache	; 3
    999  f495							;STA GRP1Cache ;3
   1000  f495		       85 0d		      STA	PF0	;3
   1001  f497							;STA PF2	     ;3
   1002  f497
   1003  f497		       a5 83		      LDA	PF2Cache	;3
   1004  f499		       85 0f		      STA	PF2	;3
   1005  f49b
   1006  f49b				   OpDrawCar0
   1007  f49b		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1008  f49d		       b0 04		      BCS	OpSkipDrawCar	;2
   1009  f49f		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1010  f4a1		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
   1011  f4a3				   OpSkipDrawCar
   1012  f4a3
   1013  f4a3							;BEQ DrawTraffic3
   1014  f4a3				   OpDrawTraffic1		; 33
   1015  f4a3		       98		      TYA		; 2
   1016  f4a4		       18		      CLC		; 2 
   1017  f4a5		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
   1018  f4a7		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1019  f4a9		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1020  f4ab		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
   1021  f4ad		       4c b2 f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1022  f4b0				   OpEorOffsetWithCarry
   1023  f4b0		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
   1024  f4b2				   OpAfterEorOffsetWithCarry		;17
   1025  f4b2		       aa		      TAX		;2
   1026  f4b3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1027  f4b6		       c5 be		      CMP	TrafficChance	;3
   1028  f4b8		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1029  f4ba		       a9 ff		      LDA	#$FF	;2
   1030  f4bc		       85 86		      STA	ENAM0Cache	;3
   1031  f4be				   OpFinishDrawTraffic1
   1032  f4be
   1033  f4be				   OpErasePF2
   1034  f4be		       a9 00		      LDA	#0
   1035  f4c0		       85 0f		      STA	PF2
   1036  f4c2
   1037  f4c2				   OpDrawTraffic2		; 33
   1038  f4c2		       98		      TYA		; 2
   1039  f4c3		       18		      CLC		; 2 
   1040  f4c4		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
   1041  f4c6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1042  f4c8		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1043  f4ca		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
   1044  f4cc		       4c d1 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1045  f4cf				   OpEorOffsetWithCarry2
   1046  f4cf		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
   1047  f4d1				   OpAfterEorOffsetWithCarry2		;17
   1048  f4d1		       aa		      TAX		;2
   1049  f4d2		       bd 00 fe 	      LDA	AesTable,X	; 4
   1050  f4d5		       c5 be		      CMP	TrafficChance	;3
   1051  f4d7		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1052  f4d9		       a9 02		      LDA	#%00000010	;2
   1053  f4db		       85 85		      STA	ENABLCache	;3
   1054  f4dd				   OpFinishDrawTraffic2
   1055  f4dd
   1056  f4dd							;STA WSYNC ;65 / 137
   1057  f4dd
   1058  f4dd							; LDA Tmp0 ; Flicker this line if drawing car
   1059  f4dd							; BEQ FinishDrawTraffic4
   1060  f4dd				   OpDrawTraffic3		; 33
   1061  f4dd		       98		      TYA		; 2
   1062  f4de		       18		      CLC		; 2 
   1063  f4df		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
   1064  f4e1		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1065  f4e3		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1066  f4e5		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
   1067  f4e7		       4c ec f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
   1068  f4ea				   OpEorOffsetWithCarry3
   1069  f4ea		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
   1070  f4ec				   OpAfterEorOffsetWithCarry3		;17
   1071  f4ec		       aa		      TAX		;2
   1072  f4ed		       bd 00 fe 	      LDA	AesTable,X	; 4
   1073  f4f0		       c5 be		      CMP	TrafficChance	;3
   1074  f4f2		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1075  f4f4		       a9 02		      LDA	#%00000010	;2
   1076  f4f6		       85 87		      STA	ENAM1Cache
   1077  f4f8				   OpFinishDrawTraffic3
   1078  f4f8
   1079  f4f8				   OpDrawOponent		;26
   1080  f4f8		       84 b0		      STY	Tmp0	;3
   1081  f4fa		       a4 cf		      LDY	OpponentLine	;3
   1082  f4fc		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1083  f4fe		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1084  f500				   OpDrawOpponent
   1085  f500		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1086  f502		       85 80		      STA	GRP0Cache	;3
   1087  f504		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1088  f506		       a4 b0		      LDY	Tmp0	;3
   1089  f508		       4c 1c f5 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
   1090  f50b				   OpSkipDrawOpponent
   1091  f50b		       c6 cf		      DEC	OpponentLine	;5
   1092  f50d		       a4 b0		      LDY	Tmp0	;3
   1093  f50f
   1094  f50f
   1095  f50f				   OpDrawTraffic0		; 21 2pe
   1096  f50f		       98		      TYA		; 2
   1097  f510		       18		      CLC		; 2 
   1098  f511		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1099  f513		       29 08		      AND	#%00001000	;2
   1100  f515		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1101  f517				   OpHasBorderP0
   1102  f517		       a9 70		      LDA	#%01110000	; 2
   1103  f519		       4c 1e f5 	      JMP	OpStoreBorderP0	; 3
   1104  f51c				   OpHasNoBorderP0
   1105  f51c		       a9 00		      LDA	#0	; 2
   1106  f51e				   OpStoreBorderP0
   1107  f51e		       85 81		      STA	PF0Cache	; 3
   1108  f520		       85 83		      STA	PF2Cache	; 3
   1109  f522
   1110  f522				   OpSkipDrawTraffic0
   1111  f522
   1112  f522				   OpWhileScanLoop
   1113  f522		       88		      DEY		;2
   1114  f523		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1115  f525		       4c 71 f4 	      JMP	OpScanLoop	;3
   1116  f528				   OpFinishScanLoop		; 7 209 of 222
   1117  f528		       4c e0 f5 	      JMP	FinishScanLoop
   1118  f52b
   1119  f52b							;main scanline loop...
   1120  f52b				   ScanLoop
   1121  f52b		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1122  f52d
   1123  f52d							;Start of next line!			
   1124  f52d				   DrawCache		;63 Is the last line going to the top of the next frame?
   1125  f52d		       a5 81		      LDA	PF0Cache	;3
   1126  f52f		       85 0d		      STA	PF0	;3
   1127  f531
   1128  f531		       a5 80		      LDA	GRP0Cache	;3
   1129  f533		       85 1b		      STA	GRP0	;3
   1130  f535
   1131  f535		       a5 84		      LDA	GRP1Cache	;3
   1132  f537		       85 1c		      STA	GRP1	;3
   1133  f539
   1134  f539		       a5 86		      LDA	ENAM0Cache	;3
   1135  f53b		       85 1d		      STA	ENAM0	;3
   1136  f53d
   1137  f53d		       a5 85		      LDA	ENABLCache	;3
   1138  f53f		       85 1f		      STA	ENABL	;3
   1139  f541
   1140  f541		       a5 87		      LDA	ENAM1Cache	;3
   1141  f543		       85 1e		      STA	ENAM1	;3
   1142  f545
   1143  f545		       a5 83		      LDA	PF2Cache	;3
   1144  f547		       85 0f		      STA	PF2	;3
   1145  f549
   1146  f549		       a9 00		      LDA	#0	;2
   1147  f54b		       85 0d		      STA	PF0	;3
   1148  f54d		       85 84		      STA	GRP1Cache	;3
   1149  f54f		       85 85		      STA	ENABLCache	;3
   1150  f551		       85 86		      STA	ENAM0Cache	;3
   1151  f553		       85 87		      STA	ENAM1Cache	; 3
   1152  f555							;STA GRP0Cache
   1153  f555		       85 0f		      STA	PF2	;3
   1154  f557
   1155  f557				   DrawCar0
   1156  f557		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1157  f559		       b0 04		      BCS	SkipDrawCar	;2
   1158  f55b		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1159  f55d		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1160  f55f				   SkipDrawCar
   1161  f55f
   1162  f55f							;BEQ DrawTraffic3
   1163  f55f				   DrawTraffic1 		; 33
   1164  f55f		       98		      TYA		; 2
   1165  f560		       18		      CLC		; 2 
   1166  f561		       65 95		      ADC	TrafficOffset1 + 1	;3
   1167  f563		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1168  f565		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1169  f567		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1170  f569		       4c 6e f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1171  f56c				   EorOffsetWithCarry
   1172  f56c		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1173  f56e				   AfterEorOffsetWithCarry		;17
   1174  f56e		       aa		      TAX		;2
   1175  f56f		       bd 00 fe 	      LDA	AesTable,X	; 4
   1176  f572		       c5 be		      CMP	TrafficChance	;3
   1177  f574		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1178  f576		       a9 ff		      LDA	#$FF	;2
   1179  f578		       85 86		      STA	ENAM0Cache	;3
   1180  f57a				   FinishDrawTraffic1
   1181  f57a
   1182  f57a				   DrawTraffic2 		; 33
   1183  f57a		       98		      TYA		; 2
   1184  f57b		       18		      CLC		; 2 
   1185  f57c		       65 99		      ADC	TrafficOffset2 + 1	;3
   1186  f57e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1187  f580		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1188  f582		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1189  f584		       4c 89 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1190  f587				   EorOffsetWithCarry2
   1191  f587		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1192  f589				   AfterEorOffsetWithCarry2		;17
   1193  f589		       aa		      TAX		;2
   1194  f58a		       bd 00 fe 	      LDA	AesTable,X	; 4
   1195  f58d		       c5 be		      CMP	TrafficChance	;3
   1196  f58f		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1197  f591		       a9 02		      LDA	#%00000010	;2
   1198  f593		       85 85		      STA	ENABLCache	;3
   1199  f595				   FinishDrawTraffic2
   1200  f595
   1201  f595							;STA WSYNC ;65 / 137
   1202  f595
   1203  f595							; LDA Tmp0 ; Flicker this line if drawing car
   1204  f595							; BEQ FinishDrawTraffic4
   1205  f595				   DrawTraffic3 		; 33
   1206  f595		       98		      TYA		; 2
   1207  f596		       18		      CLC		; 2 
   1208  f597		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1209  f599		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1210  f59b		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1211  f59d		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1212  f59f		       4c a4 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1213  f5a2				   EorOffsetWithCarry3
   1214  f5a2		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1215  f5a4				   AfterEorOffsetWithCarry3		;17
   1216  f5a4		       aa		      TAX		;2
   1217  f5a5		       bd 00 fe 	      LDA	AesTable,X	; 4
   1218  f5a8		       c5 be		      CMP	TrafficChance	;3
   1219  f5aa		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1220  f5ac		       a9 02		      LDA	#%00000010	;2
   1221  f5ae		       85 87		      STA	ENAM1Cache
   1222  f5b0				   FinishDrawTraffic3
   1223  f5b0
   1224  f5b0
   1225  f5b0				   DrawOponent		;26
   1226  f5b0		       84 b0		      STY	Tmp0	;3
   1227  f5b2		       a4 cf		      LDY	OpponentLine	;3
   1228  f5b4		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1229  f5b6		       b0 0b		      BCS	SkipDrawOpponent	;2
   1230  f5b8				   DrawOpponent
   1231  f5b8		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1232  f5ba		       85 84		      STA	GRP1Cache	;3
   1233  f5bc		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1234  f5be		       a4 b0		      LDY	Tmp0	;3
   1235  f5c0		       4c d4 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1236  f5c3				   SkipDrawOpponent
   1237  f5c3		       c6 cf		      DEC	OpponentLine	;5
   1238  f5c5		       a4 b0		      LDY	Tmp0	;3
   1239  f5c7
   1240  f5c7				   DrawTraffic0 		; 21 2pe
   1241  f5c7		       98		      TYA		; 2
   1242  f5c8		       18		      CLC		; 2 
   1243  f5c9		       65 91		      ADC	TrafficOffset0 + 1	;3
   1244  f5cb		       29 08		      AND	#%00001000	;2
   1245  f5cd		       f0 05		      BEQ	HasNoBorderP0	;3
   1246  f5cf				   HasBorderP0
   1247  f5cf		       a9 70		      LDA	#%01110000	; 2
   1248  f5d1		       4c d6 f5 	      JMP	StoreBorderP0	; 3
   1249  f5d4				   HasNoBorderP0
   1250  f5d4		       a9 00		      LDA	#0	; 2
   1251  f5d6				   StoreBorderP0
   1252  f5d6		       85 81		      STA	PF0Cache	; 3
   1253  f5d8		       85 83		      STA	PF2Cache	; 3
   1254  f5da
   1255  f5da				   SkipDrawTraffic0
   1256  f5da
   1257  f5da				   WhileScanLoop
   1258  f5da		       88		      DEY		;2
   1259  f5db		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1260  f5dd		       4c 2b f5 	      JMP	ScanLoop	;3
   1261  f5e0				   FinishScanLoop		; 7 209 of 222
   1262  f5e0
   1263  f5e0		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1264  f5e2		       20 2c f7 	      JSR	LoadAll
   1265  f5e5		       85 02		      STA	WSYNC	; do stuff!
   1266  f5e7		       85 02		      STA	WSYNC
   1267  f5e9		       85 02		      STA	WSYNC
   1268  f5eb							;42 cycles to use here
   1269  f5eb
   1270  f5eb				   PrepareOverscan
   1271  f5eb		       a9 02		      LDA	#2
   1272  f5ed		       85 02		      STA	WSYNC
   1273  f5ef		       85 01		      STA	VBLANK
   1274  f5f1
   1275  f5f1		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1276  f5f3		       8d 96 02 	      STA	TIM64T
   1277  f5f6
   1278  f5f6				   LeftSound		;41
   1279  f5f6		       a5 b8		      LDA	CountdownTimer	;3
   1280  f5f8		       f0 1b		      BEQ	EngineOff	;2
   1281  f5fa		       a6 d5		      LDX	Gear
   1282  f5fc		       a5 f0		      LDA	Player0SpeedL	;3
   1283  f5fe		       4a		      LSR		;2
   1284  f5ff		       4a		      LSR		;2
   1285  f600		       4a		      LSR		;2
   1286  f601		       29 0f		      AND	#%00001111	;2
   1287  f603		       85 b0		      STA	Tmp0	;3
   1288  f605		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1289  f608		       38		      SEC		;2
   1290  f609		       e5 b0		      SBC	Tmp0	;3
   1291  f60b		       85 17		      STA	AUDF0	;3
   1292  f60d		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1293  f610		       85 15		      STA	AUDC0	;3
   1294  f612		       4c 19 f6 	      JMP	EndLeftSound	;3
   1295  f615				   EngineOff
   1296  f615		       a9 00		      LDA	#0
   1297  f617		       85 15		      STA	AUDC0
   1298  f619
   1299  f619				   EndLeftSound
   1300  f619
   1301  f619
   1302  f619				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1303  f619		       a5 c9		      LDA	ScoreFontColor	;3
   1304  f61b		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1305  f61d		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1306  f61f		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1307  f621		       f0 29		      BEQ	PlayCheckpoint	;2
   1308  f623		       a5 8e		      LDA	CollisionCounter	;3
   1309  f625		       c9 e0		      CMP	#$E0	;2
   1310  f627		       b0 14		      BCS	PlayColision	;2
   1311  f629		       a5 cd		      LDA	NextCheckpoint	;3
   1312  f62b		       38		      SEC		;2
   1313  f62c		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1314  f62e		       c9 02		      CMP	#$02	;2
   1315  f630		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1316  f632		       a5 b8		      LDA	CountdownTimer	; 3
   1317  f634		       f0 53		      BEQ	MuteRightSound	;2
   1318  f636		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1319  f638		       90 37		      BCC	PlayWarnTimeEnding	;4
   1320  f63a		       4c 89 f6 	      JMP	MuteRightSound	;3
   1321  f63d				   PlayColision
   1322  f63d		       a9 1f		      LDA	#31
   1323  f63f		       85 18		      STA	AUDF1
   1324  f641		       a9 08		      LDA	#8
   1325  f643		       85 16		      STA	AUDC1
   1326  f645		       a9 08		      LDA	#8
   1327  f647		       85 1a		      STA	AUDV1
   1328  f649		       4c 8d f6 	      JMP	EndRightSound
   1329  f64c
   1330  f64c				   PlayCheckpoint
   1331  f64c		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1332  f64e		       4a		      LSR		;2
   1333  f64f		       4a		      LSR		;2
   1334  f650		       4a		      LSR		;2
   1335  f651		       85 18		      STA	AUDF1	;3
   1336  f653		       a9 0c		      LDA	#12	;2
   1337  f655		       85 16		      STA	AUDC1	;3
   1338  f657		       a9 06		      LDA	#6	;2
   1339  f659		       85 1a		      STA	AUDV1	;3
   1340  f65b		       4c 8d f6 	      JMP	EndRightSound	;3
   1341  f65e
   1342  f65e				   PlayBeforeCheckpoint
   1343  f65e		       a5 8c		      LDA	FrameCount0	;3
   1344  f660		       29 1c		      AND	#%00011100	;2
   1345  f662		       09 03		      ORA	#%00000011	;2
   1346  f664		       85 18		      STA	AUDF1	;3
   1347  f666		       a9 0c		      LDA	#12	;2
   1348  f668		       85 16		      STA	AUDC1	;3
   1349  f66a		       a9 03		      LDA	#3	;2
   1350  f66c		       85 1a		      STA	AUDV1	;3
   1351  f66e		       4c 8d f6 	      JMP	EndRightSound	;3
   1352  f671
   1353  f671				   PlayWarnTimeEnding
   1354  f671		       a5 8c		      LDA	FrameCount0	;3
   1355  f673		       29 04		      AND	#%00000100	;2
   1356  f675		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1357  f677		       18		      CLC		;2
   1358  f678		       a9 0a		      LDA	#10	;2
   1359  f67a		       65 b8		      ADC	CountdownTimer	;2
   1360  f67c		       85 18		      STA	AUDF1	;3
   1361  f67e		       a9 0c		      LDA	#12	;2
   1362  f680		       85 16		      STA	AUDC1	;3
   1363  f682		       a9 03		      LDA	#3	;2
   1364  f684		       85 1a		      STA	AUDV1	;3
   1365  f686		       4c 8d f6 	      JMP	EndRightSound	;3
   1366  f689
   1367  f689				   MuteRightSound
   1368  f689		       a9 00		      LDA	#0
   1369  f68b		       85 1a		      STA	AUDV1
   1370  f68d				   EndRightSound
   1371  f68d
   1372  f68d							;Read Fire Button before, will make it start the game for now.
   1373  f68d				   StartGame
   1374  f68d		       a5 0c		      LDA	INPT4	;3
   1375  f68f		       25 0d		      AND	INPT5	;3 player 
   1376  f691		       30 31		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1377  f693		       a5 8c		      LDA	FrameCount0
   1378  f695		       29 01		      AND	#%00000001
   1379  f697		       d0 2b		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1380  f699		       a5 bd		      LDA	GameStatus	;3
   1381  f69b		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1382  f69d		       d0 25		      BNE	SkipGameStart
   1383  f69f		       a5 c6		      LDA	GameMode
   1384  f6a1		       c9 10		      CMP	#MAX_GAME_MODE
   1385  f6a3		       d0 0b		      BNE	SetGameRunning
   1386  f6a5		       a9 00		      LDA	#0
   1387  f6a7		       85 c6		      STA	GameMode
   1388  f6a9		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1389  f6ab		       85 bc		      STA	SwitchDebounceCounter
   1390  f6ad		       4c c4 f6 	      JMP	SkipGameStart
   1391  f6b0				   SetGameRunning
   1392  f6b0		       e6 bd		      INC	GameStatus
   1393  f6b2		       a9 00		      LDA	#0	;
   1394  f6b4		       85 8c		      STA	FrameCount0
   1395  f6b6		       85 8d		      STA	FrameCount1
   1396  f6b8		       a9 0a		      LDA	#10
   1397  f6ba		       85 19		      STA	AUDV0
   1398  f6bc		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1399  f6be		       85 c9		      STA	ScoreFontColor
   1400  f6c0		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1401  f6c2		       85 cb		      STA	ScoreFontColorHoldChange
   1402  f6c4				   SkipGameStart
   1403  f6c4
   1404  f6c4				   ReadSwitches
   1405  f6c4		       a6 bc		      LDX	SwitchDebounceCounter
   1406  f6c6		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1407  f6c8		       a9 01		      LDA	#%00000001
   1408  f6ca		       2c 82 02 	      BIT	SWCHB
   1409  f6cd		       d0 07		      BNE	SkipReset
   1410  f6cf		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1411  f6d1		       85 bc		      STA	SwitchDebounceCounter
   1412  f6d3		       4c 03 f7 	      JMP	OverScanWaitBeforeReset
   1413  f6d6				   SkipReset
   1414  f6d6
   1415  f6d6				   GameModeSelect
   1416  f6d6		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1417  f6d8		       d0 1c		      BNE	SkipGameSelect
   1418  f6da		       20 58 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1419  f6dd				   ContinueGameSelect
   1420  f6dd		       a9 02		      LDA	#%00000010
   1421  f6df		       2c 82 02 	      BIT	SWCHB
   1422  f6e2		       d0 12		      BNE	SkipGameSelect
   1423  f6e4		       a6 c6		      LDX	GameMode
   1424  f6e6		       e0 10		      CPX	#MAX_GAME_MODE
   1425  f6e8		       f0 04		      BEQ	ResetGameMode
   1426  f6ea		       e8		      INX
   1427  f6eb		       4c f0 f6 	      JMP	StoreGameMode
   1428  f6ee				   ResetGameMode
   1429  f6ee		       a2 00		      LDX	#0
   1430  f6f0				   StoreGameMode
   1431  f6f0		       86 c6		      STX	GameMode
   1432  f6f2		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1433  f6f4		       85 bc		      STA	SwitchDebounceCounter
   1434  f6f6				   SkipGameSelect
   1435  f6f6		       4c fb f6 	      JMP	EndReadSwitches
   1436  f6f9				   DecrementSwitchDebounceCounter
   1437  f6f9		       c6 bc		      DEC	SwitchDebounceCounter
   1438  f6fb				   EndReadSwitches
   1439  f6fb
   1440  f6fb				   OverScanWait
   1441  f6fb		       ad 84 02 	      LDA	INTIM
   1442  f6fe		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1443  f700		       4c ca f0 	      JMP	MainLoop
   1444  f703
   1445  f703				   OverScanWaitBeforeReset
   1446  f703		       ad 84 02 	      LDA	INTIM
   1447  f706		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1448  f708		       4c 12 f0 	      JMP	Start
   1449  f70b
   1450  f70b				   Subroutines
   1451  f70b
   1452  f70b				   ClearAll		; 52
   1453  f70b		       a9 00		      LDA	#0	;2
   1454  f70d		       85 1c		      STA	GRP1	;3
   1455  f70f		       85 1f		      STA	ENABL	;3
   1456  f711		       85 1d		      STA	ENAM0	;3
   1457  f713		       85 1e		      STA	ENAM1	;3
   1458  f715		       85 84		      STA	GRP1Cache	;3
   1459  f717		       85 85		      STA	ENABLCache	;3
   1460  f719		       85 86		      STA	ENAM0Cache	;3
   1461  f71b		       85 87		      STA	ENAM1Cache	;3
   1462  f71d
   1463  f71d				   ClearPF		; 26
   1464  f71d		       a9 00		      LDA	#0	;2
   1465  f71f				   ClearPFSkipLDA0
   1466  f71f		       85 0d		      STA	PF0	;3
   1467  f721		       85 0e		      STA	PF1	;3
   1468  f723		       85 0f		      STA	PF2	;3	
   1469  f725		       85 81		      STA	PF0Cache	;3
   1470  f727		       85 82		      STA	PF1Cache	;3
   1471  f729		       85 83		      STA	PF2Cache	;3 
   1472  f72b		       60		      RTS		;6
   1473  f72c				   EndClearAll
   1474  f72c
   1475  f72c				   LoadAll		; 48
   1476  f72c		       a5 81		      LDA	PF0Cache	;3
   1477  f72e		       85 0d		      STA	PF0	;3
   1478  f730
   1479  f730		       a5 82		      LDA	PF1Cache	;3
   1480  f732		       85 0e		      STA	PF1	;3
   1481  f734
   1482  f734		       a5 83		      LDA	PF2Cache	;3
   1483  f736		       85 0f		      STA	PF2	;3
   1484  f738
   1485  f738		       a5 84		      LDA	GRP1Cache	;3
   1486  f73a		       85 1c		      STA	GRP1	;3
   1487  f73c
   1488  f73c		       a5 85		      LDA	ENABLCache	;3
   1489  f73e		       85 1f		      STA	ENABL	;3
   1490  f740
   1491  f740		       a5 86		      LDA	ENAM0Cache	;3
   1492  f742		       85 1d		      STA	ENAM0	;3
   1493  f744
   1494  f744		       a5 87		      LDA	ENAM1Cache	;3
   1495  f746		       85 1e		      STA	ENAM1	;3
   1496  f748
   1497  f748		       60		      RTS		;6
   1498  f749				   EndLoadAll
   1499  f749
   1500  f749				   NextDifficulty
   1501  f749		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1502  f74b		       29 01		      AND	#%00000001
   1503  f74d		       d0 24		      BNE	CheckRandomDifficulty
   1504  f74f
   1505  f74f		       a5 c4		      LDA	CurrentDifficulty
   1506  f751		       18		      CLC
   1507  f752		       69 01		      ADC	#1
   1508  f754		       29 03		      AND	#%00000011	; 0 to 3
   1509  f756		       85 c4		      STA	CurrentDifficulty
   1510  f758
   1511  f758				   ConfigureDifficulty
   1512  f758		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1513  f75a		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1514  f75d		       85 be		      STA	TrafficChance
   1515  f75f		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1516  f762		       85 c2		      STA	TrafficColor
   1517  f764
   1518  f764		       a5 c6		      LDA	GameMode	;
   1519  f766		       29 01		      AND	#%00000001
   1520  f768		       f0 03		      BEQ	UseNextDifficultyTime
   1521  f76a		       4c 6e f7 	      JMP	StoreDifficultyTime
   1522  f76d				   UseNextDifficultyTime
   1523  f76d		       c8		      INY
   1524  f76e				   StoreDifficultyTime
   1525  f76e		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1526  f771		       85 c0		      STA	CheckpointTime
   1527  f773
   1528  f773				   CheckRandomDifficulty
   1529  f773		       a5 c6		      LDA	GameMode
   1530  f775		       29 08		      AND	#%00001000	; Random difficulties
   1531  f777		       f0 09		      BEQ	ReturnFromNextDifficulty
   1532  f779				   RandomDifficulty
   1533  f779		       a6 8c		      LDX	FrameCount0
   1534  f77b		       bd 00 fe 	      LDA	AesTable,X
   1535  f77e							;EOR TrafficChance, no need, lets make life simple
   1536  f77e		       29 3f		      AND	#%00111111
   1537  f780		       85 be		      STA	TrafficChance
   1538  f782
   1539  f782				   ReturnFromNextDifficulty
   1540  f782		       60		      RTS
   1541  f783				   EndNextDifficulty
   1542  f783
   1543  f783				   DefaultOffsets
   1544  f783		       a9 20		      LDA	#$20
   1545  f785		       85 96		      STA	TrafficOffset1 + 2
   1546  f787		       85 a6		      STA	OpTrafficOffset1 + 2
   1547  f789		       a9 40		      LDA	#$40
   1548  f78b		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1549  f78d		       85 aa		      STA	OpTrafficOffset2 + 2
   1550  f78f		       a9 60		      LDA	#$60
   1551  f791		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1552  f793		       85 ae		      STA	OpTrafficOffset3 + 2
   1553  f795		       a9 80		      LDA	#$80
   1554  f797		       60		      RTS
   1555  f798
   1556  f798				   PrintStaticText		; Preload X with the offset referent to StaticText
   1557  f798		       bd 00 ff 	      LDA	StaticText,X
   1558  f79b		       85 d0		      STA	ScoreD0
   1559  f79d		       e8		      INX
   1560  f79e		       bd 00 ff 	      LDA	StaticText,X
   1561  f7a1		       85 d1		      STA	ScoreD1
   1562  f7a3		       e8		      INX
   1563  f7a4		       bd 00 ff 	      LDA	StaticText,X
   1564  f7a7		       85 d2		      STA	ScoreD2
   1565  f7a9		       e8		      INX
   1566  f7aa		       bd 00 ff 	      LDA	StaticText,X
   1567  f7ad		       85 d3		      STA	ScoreD3
   1568  f7af		       e8		      INX
   1569  f7b0		       bd 00 ff 	      LDA	StaticText,X
   1570  f7b3		       85 d4		      STA	ScoreD4
   1571  f7b5		       60		      RTS
   1572  f7b6
   1573  f7b6				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1574  f7b6		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1575  f7b8		       85 c9		      STA	ScoreFontColor
   1576  f7ba		       a9 01		      LDA	#1
   1577  f7bc		       85 cb		      STA	ScoreFontColorHoldChange
   1578  f7be
   1579  f7be		       a5 8d		      LDA	FrameCount1
   1580  f7c0		       29 07		      AND	#%00000111
   1581  f7c2		       85 b3		      STA	Tmp3
   1582  f7c4							;0 is Zelda Name, (default)
   1583  f7c4		       a9 01		      LDA	#1
   1584  f7c6		       c5 b3		      CMP	Tmp3
   1585  f7c8		       f0 38		      BEQ	PrintZeldaDateLeft
   1586  f7ca
   1587  f7ca		       a9 02		      LDA	#2
   1588  f7cc		       c5 b3		      CMP	Tmp3
   1589  f7ce		       f0 23		      BEQ	PrintPolvinhosLeft
   1590  f7d0
   1591  f7d0		       a9 03		      LDA	#3
   1592  f7d2		       c5 b3		      CMP	Tmp3
   1593  f7d4		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1594  f7d6
   1595  f7d6		       a9 04		      LDA	#4
   1596  f7d8		       c5 b3		      CMP	Tmp3
   1597  f7da		       f0 1c		      BEQ	PrintIvonneLeft
   1598  f7dc
   1599  f7dc		       a9 05		      LDA	#5
   1600  f7de		       c5 b3		      CMP	Tmp3
   1601  f7e0		       f0 2a		      BEQ	PrintIvonneDateLeft
   1602  f7e2
   1603  f7e2		       a9 06		      LDA	#6
   1604  f7e4		       c5 b3		      CMP	Tmp3
   1605  f7e6		       f0 15		      BEQ	PrintArtLeft
   1606  f7e8
   1607  f7e8		       a9 07		      LDA	#7
   1608  f7ea		       c5 b3		      CMP	Tmp3
   1609  f7ec		       f0 23		      BEQ	PrintLeonardoLeft
   1610  f7ee
   1611  f7ee				   PrintZeldaLeft
   1612  f7ee		       a2 28		      LDX	#<ZeldaTextLeft
   1613  f7f0		       4c 16 f8 	      JMP	ProcessPrintEasterEgg
   1614  f7f3				   PrintPolvinhosLeft
   1615  f7f3		       a2 3c		      LDX	#<PolvinhosTextLeft
   1616  f7f5		       4c 16 f8 	      JMP	ProcessPrintEasterEgg
   1617  f7f8				   PrintIvonneLeft
   1618  f7f8		       a2 50		      LDX	#<IvonneTextLeft
   1619  f7fa		       4c 16 f8 	      JMP	ProcessPrintEasterEgg
   1620  f7fd				   PrintArtLeft
   1621  f7fd		       a2 64		      LDX	#<PaperArtTextLeft
   1622  f7ff		       4c 16 f8 	      JMP	ProcessPrintEasterEgg
   1623  f802
   1624  f802				   PrintZeldaDateLeft
   1625  f802		       a2 32		      LDX	#<ZeldaDateLeft
   1626  f804		       4c 16 f8 	      JMP	ProcessPrintEasterEgg
   1627  f807				   PrintPolvinhosDateLeft
   1628  f807		       a2 46		      LDX	#<PolvinhosDateLeft
   1629  f809		       4c 16 f8 	      JMP	ProcessPrintEasterEgg
   1630  f80c				   PrintIvonneDateLeft
   1631  f80c		       a2 5a		      LDX	#<IvonneDateLeft
   1632  f80e		       4c 16 f8 	      JMP	ProcessPrintEasterEgg
   1633  f811				   PrintLeonardoLeft
   1634  f811		       a2 6e		      LDX	#<LeonardoTextLeft
   1635  f813		       4c 16 f8 	      JMP	ProcessPrintEasterEgg
   1636  f816
   1637  f816				   ProcessPrintEasterEgg
   1638  f816		       a5 8c		      LDA	FrameCount0	;3
   1639  f818		       29 01		      AND	#%00000001	;2
   1640  f81a		       d0 03		      BNE	TranformIntoRightText
   1641  f81c		       4c 24 f8 	      JMP	PrintEasterEggText
   1642  f81f				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1643  f81f		       8a		      TXA
   1644  f820		       18		      CLC
   1645  f821		       69 05		      ADC	#HALF_TEXT_SIZE
   1646  f823		       aa		      TAX
   1647  f824
   1648  f824				   PrintEasterEggText
   1649  f824		       20 98 f7 	      JSR	PrintStaticText
   1650  f827		       60		      RTS
   1651  f828
   1652  f828				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1653  f828		       a2 00		      LDX	#0
   1654  f82a		       a0 04		      LDY	#FONT_OFFSET
   1655  f82c
   1656  f82c				   ScoreLoop		; 20 
   1657  f82c		       85 02		      STA	WSYNC	;2
   1658  f82e
   1659  f82e		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1660  f830		       85 0d		      STA	PF0	;3
   1661  f832
   1662  f832		       a5 82		      LDA	PF1Cache	;3
   1663  f834		       85 0e		      STA	PF1	;3
   1664  f836
   1665  f836		       a5 83		      LDA	PF2Cache	;3
   1666  f838		       85 0f		      STA	PF2	;3
   1667  f83a
   1668  f83a				   DrawScoreD0		; 15
   1669  f83a		       a6 d0		      LDX	ScoreD0	; 3
   1670  f83c		       bd 00 fd 	      LDA	Font,X	;4
   1671  f83f		       85 81		      STA	PF0Cache	;3
   1672  f841		       c6 d0		      DEC	ScoreD0	;5
   1673  f843
   1674  f843				   DrawScoreD1		; 23	
   1675  f843		       a6 d1		      LDX	ScoreD1	; 3
   1676  f845		       bd 00 fd 	      LDA	Font,X	;4
   1677  f848		       0a		      ASL		;2
   1678  f849		       0a		      ASL		;2
   1679  f84a		       0a		      ASL		;2
   1680  f84b		       0a		      ASL		;2
   1681  f84c		       85 82		      STA	PF1Cache	;3
   1682  f84e		       c6 d1		      DEC	ScoreD1	;5
   1683  f850
   1684  f850				   DrawScoreD2		; 20
   1685  f850		       a6 d2		      LDX	ScoreD2	; 3
   1686  f852		       bd 00 fd 	      LDA	Font,X	;4
   1687  f855		       29 0f		      AND	#%00001111	;2
   1688  f857		       05 82		      ORA	PF1Cache	;3
   1689  f859		       85 82		      STA	PF1Cache	;3
   1690  f85b		       c6 d2		      DEC	ScoreD2	;5
   1691  f85d
   1692  f85d				   DrawScoreD3		; 23
   1693  f85d		       a6 d3		      LDX	ScoreD3	; 3
   1694  f85f		       bd 00 fd 	      LDA	Font,X	;4
   1695  f862		       4a		      LSR		;2
   1696  f863		       4a		      LSR		;2
   1697  f864		       4a		      LSR		;2
   1698  f865		       4a		      LSR		;2
   1699  f866		       85 83		      STA	PF2Cache	;3
   1700  f868		       c6 d3		      DEC	ScoreD3	;5
   1701  f86a
   1702  f86a				   DrawScoreD4		; 20
   1703  f86a		       a6 d4		      LDX	ScoreD4	; 3
   1704  f86c		       bd 00 fd 	      LDA	Font,X	;4
   1705  f86f		       29 f0		      AND	#%11110000	;2
   1706  f871		       05 83		      ORA	PF2Cache	;3
   1707  f873		       85 83		      STA	PF2Cache	;3
   1708  f875		       c6 d4		      DEC	ScoreD4	;5
   1709  f877
   1710  f877
   1711  f877		       88		      DEY		;2
   1712  f878		       10 b2		      BPL	ScoreLoop	;4
   1713  f87a
   1714  f87a		       85 02		      STA	WSYNC
   1715  f87c		       20 2c f7 	      JSR	LoadAll
   1716  f87f		       60		      RTS		; 6
   1717  f880
   1718  f880				   PrintRightDecimalDigits
   1719  f880		       b9 00 00 	      LDA	0,Y
   1720  f883		       4a		      LSR
   1721  f884		       4a		      LSR
   1722  f885		       4a		      LSR
   1723  f886		       4a		      LSR
   1724  f887		       aa		      TAX
   1725  f888		       bd be fd 	      LDA	FontLookup,X	;4
   1726  f88b		       85 d2		      STA	ScoreD2	;3
   1727  f88d
   1728  f88d		       b9 00 00 	      LDA	0,Y
   1729  f890		       29 0f		      AND	#%00001111
   1730  f892		       aa		      TAX
   1731  f893		       bd be fd 	      LDA	FontLookup,X	;4
   1732  f896		       85 d3		      STA	ScoreD3	;3
   1733  f898
   1734  f898		       c8		      INY
   1735  f899		       b9 00 00 	      LDA	0,Y
   1736  f89c		       4a		      LSR
   1737  f89d		       4a		      LSR
   1738  f89e		       4a		      LSR
   1739  f89f		       4a		      LSR
   1740  f8a0		       aa		      TAX
   1741  f8a1		       bd be fd 	      LDA	FontLookup,X	;4
   1742  f8a4		       85 d0		      STA	ScoreD0	;3
   1743  f8a6
   1744  f8a6		       b9 00 00 	      LDA	0,Y
   1745  f8a9		       29 0f		      AND	#%00001111
   1746  f8ab		       aa		      TAX
   1747  f8ac		       bd be fd 	      LDA	FontLookup,X	;4
   1748  f8af		       85 d1		      STA	ScoreD1	;3
   1749  f8b1
   1750  f8b1		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1751  f8b3		       85 d4		      STA	ScoreD4
   1752  f8b5		       60		      RTS
   1753  f8b6
   1754  f8b6				   PrintLastLeftDecimalDigits
   1755  f8b6		       b9 00 00 	      LDA	0,Y
   1756  f8b9		       4a		      LSR
   1757  f8ba		       4a		      LSR
   1758  f8bb		       4a		      LSR
   1759  f8bc		       4a		      LSR
   1760  f8bd		       aa		      TAX
   1761  f8be		       bd be fd 	      LDA	FontLookup,X	;4
   1762  f8c1		       85 d3		      STA	ScoreD3	;3
   1763  f8c3		       b9 00 00 	      LDA	0,Y
   1764  f8c6		       29 0f		      AND	#%00001111
   1765  f8c8		       aa		      TAX
   1766  f8c9		       bd be fd 	      LDA	FontLookup,X	;4
   1767  f8cc		       85 d4		      STA	ScoreD4	;3
   1768  f8ce		       60		      RTS
   1769  f8cf
   1770  f8cf				   PrintZerosLeft
   1771  f8cf		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1772  f8d1		       85 d2		      STA	ScoreD2
   1773  f8d3		       85 d3		      STA	ScoreD3
   1774  f8d5		       85 d4		      STA	ScoreD4
   1775  f8d7		       60		      RTS
   1776  f8d8
   1777  f8d8				   DrawGameOverScoreLine
   1778  f8d8		       85 02		      STA	WSYNC
   1779  f8da		       20 28 f8 	      JSR	PrintScore
   1780  f8dd		       85 02		      STA	WSYNC
   1781  f8df		       85 02		      STA	WSYNC
   1782  f8e1		       20 1d f7 	      JSR	ClearPF
   1783  f8e4		       60		      RTS
   1784  f8e5
   1785  f8e5				   DrawGameOverScreenLeft
   1786  f8e5		       85 02		      STA	WSYNC
   1787  f8e7		       20 1d f7 	      JSR	ClearPF
   1788  f8ea
   1789  f8ea				   DrawGlideTimerLeft
   1790  f8ea		       20 ac f9 	      JSR	Sleep8Lines
   1791  f8ed		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1792  f8ef		       85 06		      STA	COLUP0
   1793  f8f1		       85 02		      STA	WSYNC
   1794  f8f3		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1795  f8f5		       85 d0		      STA	ScoreD0
   1796  f8f7		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1797  f8f9		       85 d1		      STA	ScoreD1
   1798  f8fb		       20 cf f8 	      JSR	PrintZerosLeft
   1799  f8fe		       20 d8 f8 	      JSR	DrawGameOverScoreLine
   1800  f901
   1801  f901				   DrawHitCountLeft
   1802  f901		       20 ac f9 	      JSR	Sleep8Lines
   1803  f904		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1804  f906		       85 06		      STA	COLUP0
   1805  f908		       85 02		      STA	WSYNC
   1806  f90a		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1807  f90c		       85 d0		      STA	ScoreD0
   1808  f90e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1809  f910		       85 d1		      STA	ScoreD1
   1810  f912		       20 cf f8 	      JSR	PrintZerosLeft
   1811  f915		       20 d8 f8 	      JSR	DrawGameOverScoreLine
   1812  f918
   1813  f918				   DrawCheckpointCountLeft
   1814  f918		       20 ac f9 	      JSR	Sleep8Lines
   1815  f91b		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1816  f91d		       85 06		      STA	COLUP0
   1817  f91f		       85 02		      STA	WSYNC
   1818  f921		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1819  f923		       85 d0		      STA	ScoreD0
   1820  f925		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1821  f927		       85 d1		      STA	ScoreD1
   1822  f929		       20 cf f8 	      JSR	PrintZerosLeft
   1823  f92c		       20 d8 f8 	      JSR	DrawGameOverScoreLine
   1824  f92f
   1825  f92f				   DrawGameVersionLeft
   1826  f92f		       20 ac f9 	      JSR	Sleep8Lines
   1827  f932		       a9 49		      LDA	#VERSION_COLOR
   1828  f934		       85 06		      STA	COLUP0
   1829  f936
   1830  f936		       a5 c6		      LDA	GameMode
   1831  f938		       aa		      TAX
   1832  f939		       bd be fd 	      LDA	FontLookup,X	;4
   1833  f93c		       85 d0		      STA	ScoreD0	;3
   1834  f93e
   1835  f93e		       a5 c7		      LDA	CurrentCarId
   1836  f940		       aa		      TAX
   1837  f941		       bd be fd 	      LDA	FontLookup,X	;4
   1838  f944		       85 d1		      STA	ScoreD1	;3
   1839  f946
   1840  f946		       a5 db		      LDA	StartSWCHB
   1841  f948		       29 40		      AND	#%01000000	; P0 difficulty
   1842  f94a		       49 40		      EOR	#%01000000	; Reverse bytes
   1843  f94c		       2a		      ROL
   1844  f94d		       2a		      ROL
   1845  f94e		       2a		      ROL
   1846  f94f		       18		      CLC
   1847  f950		       69 0a		      ADC	#10
   1848  f952		       aa		      TAX
   1849  f953		       bd be fd 	      LDA	FontLookup,X	;4
   1850  f956		       85 d2		      STA	ScoreD2	;3
   1851  f958
   1852  f958		       a5 db		      LDA	StartSWCHB
   1853  f95a		       29 80		      AND	#%10000000	; P0 difficulty
   1854  f95c		       49 80		      EOR	#%10000000	; Reverse bytes
   1855  f95e		       2a		      ROL
   1856  f95f		       2a		      ROL
   1857  f960		       18		      CLC
   1858  f961		       69 0a		      ADC	#10
   1859  f963		       aa		      TAX
   1860  f964		       bd be fd 	      LDA	FontLookup,X	;4
   1861  f967		       85 d3		      STA	ScoreD3	;3
   1862  f969
   1863  f969		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1864  f96b		       85 d4		      STA	ScoreD4
   1865  f96d
   1866  f96d		       20 d8 f8 	      JSR	DrawGameOverScoreLine
   1867  f970
   1868  f970		       4c 89 f9 	      JMP	FinalizeDrawGameOver
   1869  f973
   1870  f973				   DrawGameOverScreenRight
   1871  f973		       85 02		      STA	WSYNC
   1872  f975		       20 1d f7 	      JSR	ClearPF
   1873  f978
   1874  f978				   DrawVersionRight
   1875  f978		       20 ac f9 	      JSR	Sleep8Lines
   1876  f97b		       a9 49		      LDA	#VERSION_COLOR
   1877  f97d		       85 07		      STA	COLUP1
   1878  f97f		       85 02		      STA	WSYNC
   1879  f981		       a2 78		      LDX	#<VersionText
   1880  f983		       20 98 f7 	      JSR	PrintStaticText
   1881  f986		       20 d8 f8 	      JSR	DrawGameOverScoreLine
   1882  f989
   1883  f989				   FinalizeDrawGameOver
   1884  f989		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1885  f98b		       85 c9		      STA	ScoreFontColor
   1886  f98d		       20 a3 f9 	      JSR	Sleep4Lines
   1887  f990		       20 b3 f9 	      JSR	Sleep32Lines
   1888  f993		       20 b3 f9 	      JSR	Sleep32Lines
   1889  f996		       4c eb f5 	      JMP	PrepareOverscan
   1890  f999
   1891  f999				   WaitForVblankEnd
   1892  f999		       ad 84 02 	      LDA	INTIM
   1893  f99c		       d0 fb		      BNE	WaitForVblankEnd
   1894  f99e		       85 02		      STA	WSYNC
   1895  f9a0		       85 01		      STA	VBLANK
   1896  f9a2		       60		      RTS
   1897  f9a3
   1898  f9a3				   Sleep4Lines
   1899  f9a3		       85 02		      STA	WSYNC
   1900  f9a5		       85 02		      STA	WSYNC
   1901  f9a7		       85 02		      STA	WSYNC
   1902  f9a9		       85 02		      STA	WSYNC
   1903  f9ab		       60		      RTS
   1904  f9ac
   1905  f9ac				   Sleep8Lines
   1906  f9ac		       20 a3 f9 	      JSR	Sleep4Lines
   1907  f9af		       20 a3 f9 	      JSR	Sleep4Lines
   1908  f9b2		       60		      RTS
   1909  f9b3
   1910  f9b3				   Sleep32Lines
   1911  f9b3		       20 ac f9 	      JSR	Sleep8Lines
   1912  f9b6		       20 ac f9 	      JSR	Sleep8Lines
   1913  f9b9		       20 ac f9 	      JSR	Sleep8Lines
   1914  f9bc		       20 ac f9 	      JSR	Sleep8Lines
   1915  f9bf		       60		      RTS
   1916  f9c0
   1917  f9c0				   ConfigureCarSprites
   1918  f9c0		       a5 8c		      LDA	FrameCount0
   1919  f9c2		       29 01		      AND	#%00000001
   1920  f9c4		       d0 0b		      BNE	LoadForRightScreenSprites
   1921  f9c6				   LoadForLeftScreenSprites
   1922  f9c6		       a5 c7		      LDA	CurrentCarId
   1923  f9c8		       85 b0		      STA	Tmp0
   1924  f9ca		       a5 c8		      LDA	OpCurrentCarId
   1925  f9cc		       85 b1		      STA	Tmp1
   1926  f9ce		       4c d9 f9 	      JMP	LoadCarSpritesFromIds
   1927  f9d1				   LoadForRightScreenSprites
   1928  f9d1		       a5 c7		      LDA	CurrentCarId
   1929  f9d3		       85 b1		      STA	Tmp1
   1930  f9d5		       a5 c8		      LDA	OpCurrentCarId
   1931  f9d7		       85 b0		      STA	Tmp0
   1932  f9d9
   1933  f9d9				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1934  f9d9		       a4 b0		      LDY	Tmp0
   1935  f9db		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1936  f9de		       85 d7		      STA	CarSpritePointerL
   1937  f9e0		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1938  f9e3		       85 d8		      STA	CarSpritePointerH
   1939  f9e5				   ConfigureOpponentCarSprite
   1940  f9e5		       a4 b1		      LDY	Tmp1
   1941  f9e7		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1942  f9ea		       85 d9		      STA	EnemyCarSpritePointerL
   1943  f9ec		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1944  f9ef		       85 da		      STA	EnemyCarSpritePointerH
   1945  f9f1		       60		      RTS
   1946  f9f2
   1947  f9f2							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1948  f9f2							;X player 0 or 1
   1949  f9f2				   SelectCarWithDpad
   1950  f9f2		       a0 03		      LDY	#3
   1951  f9f4				   SelectCarWithDpadLoop
   1952  f9f4		       ad 80 02 	      LDA	SWCHA
   1953  f9f7		       25 b0		      AND	Tmp0
   1954  f9f9		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1955  f9fb		       98		      TYA
   1956  f9fc		       95 c7		      STA	CurrentCarId,X
   1957  f9fe				   ContinueSelectCarWithDpadLoop
   1958  f9fe		       46 b0		      LSR	Tmp0
   1959  fa00		       88		      DEY
   1960  fa01		       10 f1		      BPL	SelectCarWithDpadLoop
   1961  fa03		       60		      RTS
   1962  fa04
   1963  fa04							; Movement and colision are binded because the car must be moved after duplicate size.
   1964  fa04							; Use X for the player
   1965  fa04							; Tmp0 SWCHA Turn left Mask
   1966  fa04							; Tmp1 SWCHA Turn right Mask
   1967  fa04							; Tmp2 Traffic colision result
   1968  fa04							; Tmp3 Opponent Colision result (Not implemented)
   1969  fa04				   TestCollisionAndMove
   1970  fa04							; Until store the movemnt, Y contains the value to be stored.
   1971  fa04							; see if player0 colides with the rest
   1972  fa04		       a9 00		      LDA	#0	; Just to test consistense Tmp2
   1973  fa06		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1974  fa08		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1975  fa0a		       d0 25		      BNE	NoCollision
   1976  fa0c		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1977  fa0e		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1978  fa10		       f0 1f		      BEQ	NoCollision
   1979  fa12		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1980  fa14		       f0 1b		      BEQ	NoCollision
   1981  fa16		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1982  fa18		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1983  fa1a		       b5 f2		      LDA	Player0SpeedH,X
   1984  fa1c		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1985  fa1e		       a9 10		      LDA	#COLLISION_SPEED_L
   1986  fa20		       d5 f0		      CMP	Player0SpeedL,X
   1987  fa22		       b0 04		      BCS	SkipSetColisionSpeedL
   1988  fa24				   SetColisionSpeedL
   1989  fa24		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1990  fa26		       95 f0		      STA	Player0SpeedL,X
   1991  fa28				   SkipSetColisionSpeedL
   1992  fa28		       a9 00		      LDA	#0
   1993  fa2a		       95 f2		      STA	Player0SpeedH,X
   1994  fa2c		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1995  fa2e		       4c 7f fa 	      JMP	StoreHMove	; We keep position consistent
   1996  fa31				   NoCollision
   1997  fa31
   1998  fa31				   DecrementCollision
   1999  fa31		       b5 8e		      LDA	CollisionCounter,X
   2000  fa33		       f0 06		      BEQ	FinishDecrementCollision
   2001  fa35		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   2002  fa37		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   2003  fa39		       d6 8e		      DEC	CollisionCounter,X
   2004  fa3b				   FinishDecrementCollision
   2005  fa3b
   2006  fa3b				   ResetPlayerSize
   2007  fa3b		       d0 04		      BNE	FinishResetPlayerSize
   2008  fa3d		       a9 30		      LDA	#%00110000
   2009  fa3f		       95 04		      STA	NUSIZ0,X	;
   2010  fa41				   FinishResetPlayerSize
   2011  fa41
   2012  fa41				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   2013  fa41		       b5 8e		      LDA	CollisionCounter,X
   2014  fa43		       c9 01		      CMP	#1	; Last frame before reset
   2015  fa45		       d0 05		      BNE	SkipResetPlayerPosition
   2016  fa47		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   2017  fa49		       4c 7f fa 	      JMP	StoreHMove
   2018  fa4c				   SkipResetPlayerPosition
   2019  fa4c
   2020  fa4c				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   2021  fa4c		       b5 c7		      LDA	CurrentCarId,X
   2022  fa4e		       c9 03		      CMP	#CAR_ID_DRAGSTER
   2023  fa50		       d0 08		      BNE	PrepareReadXAxis
   2024  fa52		       a0 00		      LDY	#0
   2025  fa54		       a5 8c		      LDA	FrameCount0
   2026  fa56		       29 01		      AND	#DRAGSTER_TURN_MASK
   2027  fa58		       f0 25		      BEQ	StoreHMove	; Ignore movement on some frames
   2028  fa5a
   2029  fa5a				   PrepareReadXAxis
   2030  fa5a		       a0 00		      LDY	#0
   2031  fa5c		       b5 b6		      LDA	Player0X,X
   2032  fa5e				   BeginReadLeft
   2033  fa5e		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
   2034  fa60		       a5 b0		      LDA	Tmp0	;Left mask set before call (player 0 or 1)
   2035  fa62		       2c 80 02 	      BIT	SWCHA
   2036  fa65		       d0 07		      BNE	SkipMoveLeft
   2037  fa67		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   2038  fa69		       d6 b6		      DEC	Player0X,X
   2039  fa6b		       4c 7f fa 	      JMP	StoreHMove	; Cannot move left and right...
   2040  fa6e				   SkipMoveLeft
   2041  fa6e				   BeginReadRight
   2042  fa6e		       b5 b6		      LDA	Player0X,X
   2043  fa70		       c9 2c		      CMP	#PLAYER_MAX_X
   2044  fa72		       f0 0b		      BEQ	SkipMoveRight	; At max already
   2045  fa74		       a5 b1		      LDA	Tmp1	;Right mask set before call (player 0 or 1)
   2046  fa76		       2c 80 02 	      BIT	SWCHA
   2047  fa79		       d0 04		      BNE	SkipMoveRight
   2048  fa7b		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   2049  fa7d		       f6 b6		      INC	Player0X,X
   2050  fa7f				   SkipMoveRight
   2051  fa7f				   StoreHMove
   2052  fa7f		       94 20		      STY	HMP0,X	;set the move for player 0
   2053  fa81
   2054  fa81				   ClearCollision
   2055  fa81		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   2056  fa83		       60		      RTS
   2057  fa84
   2058  fa84							; X Traffic offset 4 bits each lane, 4 lanes per player
   2059  fa84							; Tmp3 Max X offset
   2060  fa84							; Tmp4 Max Player Speed L
   2061  fa84							; Tmp5 Max Player Speed H
   2062  fa84				   UpdateOffsets
   2063  fa84		       a0 00		      LDY	#0	; Line Speeds 16 bits
   2064  fa86		       a5 c6		      LDA	GameMode
   2065  fa88		       29 04		      AND	#%00000100	; GameModes with high delta
   2066  fa8a		       f0 02		      BEQ	UpdateOffsetsLoop
   2067  fa8c		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   2068  fa8e
   2069  fa8e				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   2070  fa8e		       38		      SEC
   2071  fa8f		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   2072  fa91		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   2073  fa94		       85 b0		      STA	Tmp0
   2074  fa96		       c8		      INY
   2075  fa97		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   2076  fa99		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   2077  fa9c		       85 b1		      STA	Tmp1
   2078  fa9e		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   2079  faa0		       e9 00		      SBC	#0
   2080  faa2		       85 b2		      STA	Tmp2
   2081  faa4
   2082  faa4				   AddsTheResult
   2083  faa4		       18		      CLC
   2084  faa5		       a5 b0		      LDA	Tmp0
   2085  faa7		       75 90		      ADC	TrafficOffset0,X
   2086  faa9		       95 90		      STA	TrafficOffset0,X
   2087  faab		       e8		      INX
   2088  faac		       a5 b1		      LDA	Tmp1
   2089  faae		       75 90		      ADC	TrafficOffset0,X
   2090  fab0		       95 90		      STA	TrafficOffset0,X
   2091  fab2		       e8		      INX
   2092  fab3		       a5 b2		      LDA	Tmp2	; Carry
   2093  fab5		       75 90		      ADC	TrafficOffset0,X
   2094  fab7		       95 90		      STA	TrafficOffset0,X
   2095  fab9		       90 0f		      BCC	CalculateOffsetCache
   2096  fabb		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   2097  fabd		       d0 05		      BNE	CalculatePlayer1Msb
   2098  fabf		       e6 ba		      INC	Traffic0Msb
   2099  fac1		       4c ca fa 	      JMP	CalculateOffsetCache
   2100  fac4				   CalculatePlayer1Msb
   2101  fac4		       e0 12		      CPX	#((TRAFFIC_LINE_COUNT * 4) + 2)	;MSB for player 1
   2102  fac6		       d0 02		      BNE	CalculateOffsetCache
   2103  fac8		       e6 bb		      INC	OpTraffic0Msb
   2104  faca
   2105  faca				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   2106  faca		       e8		      INX
   2107  facb		       38		      SEC
   2108  facc		       69 00		      ADC	#0	;Increment by one
   2109  face		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   2110  fad0
   2111  fad0				   PrepareNextUpdateLoop
   2112  fad0		       c8		      INY
   2113  fad1		       e8		      INX
   2114  fad2		       e4 b3		      CPX	Tmp3	; Max X offset
   2115  fad4		       d0 b8		      BNE	UpdateOffsetsLoop
   2116  fad6		       60		      RTS
   2117  fad7
   2118  fad7							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2119  fc00					      org	$FC00
   2120  fc00				   QrCode1
   2121  fc00		       1f		      .byte.b	#%00011111
   2122  fc01		       10		      .byte.b	#%00010000
   2123  fc02		       17		      .byte.b	#%00010111
   2124  fc03		       17		      .byte.b	#%00010111
   2125  fc04		       17		      .byte.b	#%00010111
   2126  fc05		       10		      .byte.b	#%00010000
   2127  fc06		       1f		      .byte.b	#%00011111
   2128  fc07		       00		      .byte.b	#%00000000
   2129  fc08		       17		      .byte.b	#%00010111
   2130  fc09		       10		      .byte.b	#%00010000
   2131  fc0a		       1d		      .byte.b	#%00011101
   2132  fc0b		       16		      .byte.b	#%00010110
   2133  fc0c		       03		      .byte.b	#%00000011
   2134  fc0d		       19		      .byte.b	#%00011001
   2135  fc0e		       13		      .byte.b	#%00010011
   2136  fc0f		       1c		      .byte.b	#%00011100
   2137  fc10		       0b		      .byte.b	#%00001011
   2138  fc11		       00		      .byte.b	#%00000000
   2139  fc12		       1f		      .byte.b	#%00011111
   2140  fc13		       10		      .byte.b	#%00010000
   2141  fc14		       17		      .byte.b	#%00010111
   2142  fc15		       17		      .byte.b	#%00010111
   2143  fc16		       17		      .byte.b	#%00010111
   2144  fc17		       10		      .byte.b	#%00010000
   2145  fc18		       1f		      .byte.b	#%00011111
   2146  fc19
   2147  fc19				   QrCode2
   2148  fc19		       c3		      .byte.b	#%11000011
   2149  fc1a		       9a		      .byte.b	#%10011010
   2150  fc1b		       82		      .byte.b	#%10000010
   2151  fc1c		       da		      .byte.b	#%11011010
   2152  fc1d		       aa		      .byte.b	#%10101010
   2153  fc1e		       ca		      .byte.b	#%11001010
   2154  fc1f		       f3		      .byte.b	#%11110011
   2155  fc20		       78		      .byte.b	#%01111000
   2156  fc21		       df		      .byte.b	#%11011111
   2157  fc22		       fc		      .byte.b	#%11111100
   2158  fc23		       c7		      .byte.b	#%11000111
   2159  fc24		       98		      .byte.b	#%10011000
   2160  fc25		       23		      .byte.b	#%00100011
   2161  fc26		       b9		      .byte.b	#%10111001
   2162  fc27		       d2		      .byte.b	#%11010010
   2163  fc28		       30		      .byte.b	#%00110000
   2164  fc29		       eb		      .byte.b	#%11101011
   2165  fc2a		       28		      .byte.b	#%00101000
   2166  fc2b		       ab		      .byte.b	#%10101011
   2167  fc2c		       72		      .byte.b	#%01110010
   2168  fc2d		       fa		      .byte.b	#%11111010
   2169  fc2e		       7a		      .byte.b	#%01111010
   2170  fc2f		       32		      .byte.b	#%00110010
   2171  fc30		       3a		      .byte.b	#%00111010
   2172  fc31		       63		      .byte.b	#%01100011
   2173  fc32
   2174  fc32				   QrCode3
   2175  fc32		       98		      .byte.b	#%10011000
   2176  fc33		       c3		      .byte.b	#%11000011
   2177  fc34		       39		      .byte.b	#%00111001
   2178  fc35		       34		      .byte.b	#%00110100
   2179  fc36		       ff		      .byte.b	#%11111111
   2180  fc37		       71		      .byte.b	#%01110001
   2181  fc38		       d5		      .byte.b	#%11010101
   2182  fc39		       d1		      .byte.b	#%11010001
   2183  fc3a		       5f		      .byte.b	#%01011111
   2184  fc3b		       26		      .byte.b	#%00100110
   2185  fc3c		       2d		      .byte.b	#%00101101
   2186  fc3d		       e9		      .byte.b	#%11101001
   2187  fc3e		       d6		      .byte.b	#%11010110
   2188  fc3f		       26		      .byte.b	#%00100110
   2189  fc40		       ba		      .byte.b	#%10111010
   2190  fc41		       03		      .byte.b	#%00000011
   2191  fc42		       dd		      .byte.b	#%11011101
   2192  fc43		       e0		      .byte.b	#%11100000
   2193  fc44		       57		      .byte.b	#%01010111
   2194  fc45		       14		      .byte.b	#%00010100
   2195  fc46		       35		      .byte.b	#%00110101
   2196  fc47		       e5		      .byte.b	#%11100101
   2197  fc48		       b5		      .byte.b	#%10110101
   2198  fc49		       d4		      .byte.b	#%11010100
   2199  fc4a		       97		      .byte.b	#%10010111
   2200  fc4b
   2201  fc4b				   QrCode4
   2202  fc4b		       09		      .byte.b	#%00001001
   2203  fc4c		       0e		      .byte.b	#%00001110
   2204  fc4d		       0f		      .byte.b	#%00001111
   2205  fc4e		       0c		      .byte.b	#%00001100
   2206  fc4f		       0c		      .byte.b	#%00001100
   2207  fc50		       08		      .byte.b	#%00001000
   2208  fc51		       08		      .byte.b	#%00001000
   2209  fc52		       06		      .byte.b	#%00000110
   2210  fc53		       06		      .byte.b	#%00000110
   2211  fc54		       0b		      .byte.b	#%00001011
   2212  fc55		       0f		      .byte.b	#%00001111
   2213  fc56		       04		      .byte.b	#%00000100
   2214  fc57		       08		      .byte.b	#%00001000
   2215  fc58		       0f		      .byte.b	#%00001111
   2216  fc59		       09		      .byte.b	#%00001001
   2217  fc5a		       07		      .byte.b	#%00000111
   2218  fc5b		       05		      .byte.b	#%00000101
   2219  fc5c		       00		      .byte.b	#%00000000
   2220  fc5d		       0f		      .byte.b	#%00001111
   2221  fc5e		       08		      .byte.b	#%00001000
   2222  fc5f		       0b		      .byte.b	#%00001011
   2223  fc60		       0b		      .byte.b	#%00001011
   2224  fc61		       0b		      .byte.b	#%00001011
   2225  fc62		       08		      .byte.b	#%00001000
   2226  fc63		       0f		      .byte.b	#%00001111
   2227  fc64
   2228  fc64							; Moved here because of rom space.
   2229  fc64							; The only SBR in constants space
   2230  fc64				   DrawQrCode
   2231  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2232  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2233  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2234  fc6a		       85 0a		      STA	CTRLPF
   2235  fc6c		       20 0b f7 	      JSR	ClearAll	; To be 100 sure!
   2236  fc6f		       ad 82 02 	      LDA	SWCHB
   2237  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2238  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2239  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2240  fc78		       86 09		      STX	COLUBK
   2241  fc7a		       84 08		      STY	COLUPF
   2242  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2243  fc7f				   StoreReversedQrCode
   2244  fc7f		       86 08		      STX	COLUPF
   2245  fc81		       84 09		      STY	COLUBK
   2246  fc83
   2247  fc83				   ContinueQrCode
   2248  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2249  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2250  fc87		       20 99 f9 	      JSR	WaitForVblankEnd
   2251  fc8a		       20 ac f9 	      JSR	Sleep8Lines
   2252  fc8d		       20 ac f9 	      JSR	Sleep8Lines
   2253  fc90		       20 ac f9 	      JSR	Sleep8Lines
   2254  fc93
   2255  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2256  fc93		       85 02		      STA	WSYNC
   2257  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2258  fc98		       85 0e		      STA	PF1	;3
   2259  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2260  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2262  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2263  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2264  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2265  fcb5		       85 0e		      STA	PF1	;3
   2266  fcb7
   2267  fcb7		       ca		      DEX		;2
   2268  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2269  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2270  fcbc		       88		      DEY		;2
   2271  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2272  fcbf
   2273  fcbf				   EndQrCodeLoop
   2274  fcbf		       85 02		      STA	WSYNC	;
   2275  fcc1		       a9 00		      LDA	#0
   2276  fcc3		       85 0e		      STA	PF1	;3
   2277  fcc5		       85 0f		      STA	PF2	;3
   2278  fcc7
   2279  fcc7		       20 b3 f9 	      JSR	Sleep32Lines
   2280  fcca		       4c eb f5 	      JMP	PrepareOverscan
   2281  fccd
   2282  fd00					      org	$FD00
   2283  fd00				   Font
   2284  fd00				   C0
   2285  fd00		       e7		      .byte.b	#%11100111	;
   2286  fd01		       a5		      .byte.b	#%10100101	; 
   2287  fd02		       a5		      .byte.b	#%10100101	; 
   2288  fd03		       a5		      .byte.b	#%10100101	; 
   2289  fd04		       e7		      .byte.b	#%11100111	;	
   2290  fd05				   C1
   2291  fd05		       e7		      .byte.b	#%11100111	;
   2292  fd06		       42		      .byte.b	#%01000010	; 
   2293  fd07		       42		      .byte.b	#%01000010	; 
   2294  fd08		       42		      .byte.b	#%01000010	; 
   2295  fd09		       66		      .byte.b	#%01100110	;
   2296  fd0a				   C2
   2297  fd0a		       e7		      .byte.b	#%11100111	;
   2298  fd0b		       24		      .byte.b	#%00100100	; 
   2299  fd0c		       e7		      .byte.b	#%11100111	; 
   2300  fd0d		       81		      .byte.b	#%10000001	; 
   2301  fd0e		       e7		      .byte.b	#%11100111	;
   2302  fd0f				   C3
   2303  fd0f		       e7		      .byte.b	#%11100111	;
   2304  fd10		       81		      .byte.b	#%10000001	; 
   2305  fd11		       e7		      .byte.b	#%11100111	; 
   2306  fd12		       81		      .byte.b	#%10000001	; 
   2307  fd13		       e7		      .byte.b	#%11100111	;
   2308  fd14				   C4
   2309  fd14		       81		      .byte.b	#%10000001	;
   2310  fd15		       81		      .byte.b	#%10000001	; 
   2311  fd16		       e7		      .byte.b	#%11100111	; 
   2312  fd17		       a5		      .byte.b	#%10100101	; 
   2313  fd18		       a5		      .byte.b	#%10100101	;
   2314  fd19				   C5
   2315  fd19		       e7		      .byte.b	#%11100111	;
   2316  fd1a		       81		      .byte.b	#%10000001	; 
   2317  fd1b		       e7		      .byte.b	#%11100111	; 
   2318  fd1c		       24		      .byte.b	#%00100100	; 
   2319  fd1d		       e7		      .byte.b	#%11100111	;
   2320  fd1e				   C6
   2321  fd1e		       e7		      .byte.b	#%11100111	;
   2322  fd1f		       a5		      .byte.b	#%10100101	; 
   2323  fd20		       e7		      .byte.b	#%11100111	; 
   2324  fd21		       24		      .byte.b	#%00100100	; 
   2325  fd22		       e7		      .byte.b	#%11100111	;
   2326  fd23				   C7
   2327  fd23		       81		      .byte.b	#%10000001	;
   2328  fd24		       81		      .byte.b	#%10000001	; 
   2329  fd25		       81		      .byte.b	#%10000001	; 
   2330  fd26		       81		      .byte.b	#%10000001	; 
   2331  fd27		       e7		      .byte.b	#%11100111	;
   2332  fd28				   C8
   2333  fd28		       e7		      .byte.b	#%11100111	;
   2334  fd29		       a5		      .byte.b	#%10100101	; 
   2335  fd2a		       e7		      .byte.b	#%11100111	; 
   2336  fd2b		       a5		      .byte.b	#%10100101	; 
   2337  fd2c		       e7		      .byte.b	#%11100111	;
   2338  fd2d				   C9
   2339  fd2d		       e7		      .byte.b	#%11100111	;
   2340  fd2e		       81		      .byte.b	#%10000001	; 
   2341  fd2f		       e7		      .byte.b	#%11100111	; 
   2342  fd30		       a5		      .byte.b	#%10100101	; 
   2343  fd31		       e7		      .byte.b	#%11100111	;
   2344  fd32				   CA
   2345  fd32		       a5		      .byte.b	#%10100101	;
   2346  fd33		       a5		      .byte.b	#%10100101	; 
   2347  fd34		       e7		      .byte.b	#%11100111	; 
   2348  fd35		       a5		      .byte.b	#%10100101	; 
   2349  fd36		       e7		      .byte.b	#%11100111	;
   2350  fd37				   CB
   2351  fd37		       66		      .byte.b	#%01100110	;
   2352  fd38		       a5		      .byte.b	#%10100101	; 
   2353  fd39		       66		      .byte.b	#%01100110	; 
   2354  fd3a		       a5		      .byte.b	#%10100101	;
   2355  fd3b		       66		      .byte.b	#%01100110	;
   2356  fd3c				   CC
   2357  fd3c		       e7		      .byte.b	#%11100111	;
   2358  fd3d		       24		      .byte.b	#%00100100	; 
   2359  fd3e		       24		      .byte.b	#%00100100	; 
   2360  fd3f		       24		      .byte.b	#%00100100	;
   2361  fd40		       e7		      .byte.b	#%11100111	;
   2362  fd41
   2363  fd41				   CD
   2364  fd41		       66		      .byte.b	#%01100110	;
   2365  fd42		       a5		      .byte.b	#%10100101	; 
   2366  fd43		       a5		      .byte.b	#%10100101	; 
   2367  fd44		       a5		      .byte.b	#%10100101	;
   2368  fd45		       66		      .byte.b	#%01100110	;
   2369  fd46
   2370  fd46				   CE
   2371  fd46		       e7		      .byte.b	#%11100111	;
   2372  fd47		       24		      .byte.b	#%00100100	; 
   2373  fd48		       e7		      .byte.b	#%11100111	; 
   2374  fd49		       24		      .byte.b	#%00100100	; 
   2375  fd4a		       e7		      .byte.b	#%11100111	;
   2376  fd4b
   2377  fd4b				   CF
   2378  fd4b		       24		      .byte.b	#%00100100	;
   2379  fd4c		       24		      .byte.b	#%00100100	; 
   2380  fd4d		       e7		      .byte.b	#%11100111	; 
   2381  fd4e		       24		      .byte.b	#%00100100	; 
   2382  fd4f		       e7		      .byte.b	#%11100111	;
   2383  fd50
   2384  fd50				   CG
   2385  fd50		       c3		      .byte.b	#%11000011	;
   2386  fd51		       a5		      .byte.b	#%10100101	; 
   2387  fd52		       a5		      .byte.b	#%10100101	; 
   2388  fd53		       24		      .byte.b	#%00100100	; 
   2389  fd54		       c3		      .byte.b	#%11000011	;	
   2390  fd55
   2391  fd55				   CH
   2392  fd55		       a5		      .byte.b	#%10100101	;
   2393  fd56		       a5		      .byte.b	#%10100101	; 
   2394  fd57		       e7		      .byte.b	#%11100111	; 
   2395  fd58		       a5		      .byte.b	#%10100101	; 
   2396  fd59		       a5		      .byte.b	#%10100101	;
   2397  fd5a
   2398  fd5a				   CK
   2399  fd5a		       a5		      .byte.b	#%10100101	;
   2400  fd5b		       a5		      .byte.b	#%10100101	; 
   2401  fd5c		       66		      .byte.b	#%01100110	; 
   2402  fd5d		       a5		      .byte.b	#%10100101	; 
   2403  fd5e		       a5		      .byte.b	#%10100101	;
   2404  fd5f
   2405  fd5f				   CL
   2406  fd5f		       e7		      .byte.b	#%11100111	;
   2407  fd60		       24		      .byte.b	#%00100100	; 
   2408  fd61		       24		      .byte.b	#%00100100	; 
   2409  fd62		       24		      .byte.b	#%00100100	; 
   2410  fd63		       24		      .byte.b	#%00100100	;
   2411  fd64
   2412  fd64				   CI
   2413  fd64		       42		      .byte.b	#%01000010	;
   2414  fd65		       42		      .byte.b	#%01000010	; 
   2415  fd66		       42		      .byte.b	#%01000010	; 
   2416  fd67		       42		      .byte.b	#%01000010	; 
   2417  fd68		       42		      .byte.b	#%01000010	;
   2418  fd69
   2419  fd69				   CM
   2420  fd69		       a5		      .byte.b	#%10100101	;
   2421  fd6a		       a5		      .byte.b	#%10100101	; 
   2422  fd6b		       a5		      .byte.b	#%10100101	; 
   2423  fd6c		       e7		      .byte.b	#%11100111	; 
   2424  fd6d		       a5		      .byte.b	#%10100101	;
   2425  fd6e
   2426  fd6e				   CN
   2427  fd6e		       a5		      .byte.b	#%10100101	;
   2428  fd6f		       a5		      .byte.b	#%10100101	; 
   2429  fd70		       a5		      .byte.b	#%10100101	; 
   2430  fd71		       a5		      .byte.b	#%10100101	; 
   2431  fd72		       66		      .byte.b	#%01100110	;	
   2432  fd73
   2433  fd73
   2434  fd73				   CO
   2435  fd73		       42		      .byte.b	#%01000010	;
   2436  fd74		       a5		      .byte.b	#%10100101	; 
   2437  fd75		       a5		      .byte.b	#%10100101	; 
   2438  fd76		       a5		      .byte.b	#%10100101	; 
   2439  fd77		       42		      .byte.b	#%01000010	;	
   2440  fd78
   2441  fd78				   CP
   2442  fd78		       24		      .byte.b	#%00100100	;
   2443  fd79		       24		      .byte.b	#%00100100	; 
   2444  fd7a		       e7		      .byte.b	#%11100111	; 
   2445  fd7b		       a5		      .byte.b	#%10100101	; 
   2446  fd7c		       e7		      .byte.b	#%11100111	;
   2447  fd7d
   2448  fd7d				   CR
   2449  fd7d		       a5		      .byte.b	#%10100101	;
   2450  fd7e		       a5		      .byte.b	#%10100101	; 
   2451  fd7f		       66		      .byte.b	#%01100110	; 
   2452  fd80		       a5		      .byte.b	#%10100101	; 
   2453  fd81		       66		      .byte.b	#%01100110	;
   2454  fd82
   2455  fd82				   CS
   2456  fd82		       66		      .byte.b	#%01100110	;
   2457  fd83		       81		      .byte.b	#%10000001	; 
   2458  fd84		       42		      .byte.b	#%01000010	; 
   2459  fd85		       24		      .byte.b	#%00100100	; 
   2460  fd86		       c3		      .byte.b	#%11000011	;
   2461  fd87
   2462  fd87				   CT
   2463  fd87		       42		      .byte.b	#%01000010	;
   2464  fd88		       42		      .byte.b	#%01000010	; 
   2465  fd89		       42		      .byte.b	#%01000010	; 
   2466  fd8a		       42		      .byte.b	#%01000010	; 
   2467  fd8b		       e7		      .byte.b	#%11100111	;
   2468  fd8c
   2469  fd8c				   CV
   2470  fd8c		       42		      .byte.b	#%01000010	;
   2471  fd8d		       a5		      .byte.b	#%10100101	; 
   2472  fd8e		       a5		      .byte.b	#%10100101	; 
   2473  fd8f		       a5		      .byte.b	#%10100101	; 
   2474  fd90		       a5		      .byte.b	#%10100101	;	
   2475  fd91
   2476  fd91				   CY
   2477  fd91		       42		      .byte.b	#%01000010	;
   2478  fd92		       42		      .byte.b	#%01000010	; 
   2479  fd93		       42		      .byte.b	#%01000010	; 
   2480  fd94		       a5		      .byte.b	#%10100101	; 
   2481  fd95		       a5		      .byte.b	#%10100101	;
   2482  fd96
   2483  fd96				   CW
   2484  fd96		       a5		      .byte.b	#%10100101	;
   2485  fd97		       e7		      .byte.b	#%11100111	; 
   2486  fd98		       a5		      .byte.b	#%10100101	; 
   2487  fd99		       a5		      .byte.b	#%10100101	; 
   2488  fd9a		       a5		      .byte.b	#%10100101	;
   2489  fd9b
   2490  fd9b				   CZ
   2491  fd9b		       e7		      .byte.b	#%11100111	;
   2492  fd9c		       24		      .byte.b	#%00100100	; 
   2493  fd9d		       42		      .byte.b	#%01000010	; 
   2494  fd9e		       81		      .byte.b	#%10000001	; 
   2495  fd9f		       e7		      .byte.b	#%11100111	;
   2496  fda0
   2497  fda0				   Pipe
   2498  fda0		       42		      .byte.b	#%01000010	;
   2499  fda1		       00		      .byte.b	#%00000000	; 
   2500  fda2		       42		      .byte.b	#%01000010	; 
   2501  fda3		       00		      .byte.b	#%00000000	; 
   2502  fda4		       42		      .byte.b	#%01000010	;
   2503  fda5
   2504  fda5				   Exclamation
   2505  fda5		       42		      .byte.b	#%01000010	;
   2506  fda6		       00		      .byte.b	#%00000000	; 
   2507  fda7		       42		      .byte.b	#%01000010	; 
   2508  fda8		       42		      .byte.b	#%01000010	; 
   2509  fda9		       42		      .byte.b	#%01000010	;
   2510  fdaa
   2511  fdaa				   Dot
   2512  fdaa		       42		      .byte.b	#%01000010	;
   2513  fdab		       42		      .byte.b	#%01000010	; 
   2514  fdac		       00		      .byte.b	#%00000000	; 
   2515  fdad		       00		      .byte.b	#%00000000	; 
   2516  fdae		       00		      .byte.b	#%00000000	;
   2517  fdaf
   2518  fdaf				   Colon
   2519  fdaf		       42		      .byte.b	#%01000010	;
   2520  fdb0		       42		      .byte.b	#%01000010	; 
   2521  fdb1		       00		      .byte.b	#%00000000	; 
   2522  fdb2		       42		      .byte.b	#%01000010	; 
   2523  fdb3		       42		      .byte.b	#%01000010	;
   2524  fdb4
   2525  fdb4				   Triangle
   2526  fdb4		       81		      .byte.b	#%10000001	;
   2527  fdb5		       c3		      .byte.b	#%11000011	; 
   2528  fdb6		       e7		      .byte.b	#%11100111	; 
   2529  fdb7		       c3		      .byte.b	#%11000011	; 
   2530  fdb8		       81		      .byte.b	#%10000001	;
   2531  fdb9
   2532  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2533  fdb9		       00		      .byte.b	#0	;
   2534  fdba		       00		      .byte.b	#0	;
   2535  fdbb		       00		      .byte.b	#0	;
   2536  fdbc		       00		      .byte.b	#0	;
   2537  fdbd		       00		      .byte.b	#0	;
   2538  fdbe
   2539  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2540  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2541  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2542  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2543  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2544  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2545  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2546  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2547  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2548  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2549  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2550  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2551  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2552  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2553  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2554  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2555  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2556  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2557  fdcf
   2558  fdcf				   EngineSoundType
   2559  fdcf		       02		      .byte.b	#2
   2560  fdd0		       02		      .byte.b	#2
   2561  fdd1		       0e		      .byte.b	#14
   2562  fdd2		       06		      .byte.b	#6
   2563  fdd3		       06		      .byte.b	#6
   2564  fdd4		       0e		      .byte.b	#14
   2565  fdd5
   2566  fdd5				   EngineBaseFrequence
   2567  fdd5		       1f		      .byte.b	#31
   2568  fdd6		       15		      .byte.b	#21
   2569  fdd7		       14		      .byte.b	#20
   2570  fdd8		       1f		      .byte.b	#31
   2571  fdd9		       16		      .byte.b	#22
   2572  fdda		       03		      .byte.b	#3
   2573  fddb
   2574  fddb				   TachometerSizeLookup1
   2575  fddb		       1f		      .byte.b	#%00011111
   2576  fddc		       3f		      .byte.b	#%00111111
   2577  fddd		       7f		      .byte.b	#%01111111
   2578  fdde		       ff		      .byte.b	#%11111111
   2579  fddf		       ff		      .byte.b	#%11111111
   2580  fde0		       ff		      .byte.b	#%11111111
   2581  fde1		       ff		      .byte.b	#%11111111
   2582  fde2		       ff		      .byte.b	#%11111111
   2583  fde3
   2584  fde3				   TachometerSizeLookup2
   2585  fde3		       00		      .byte.b	#%00000000
   2586  fde4		       00		      .byte.b	#%00000000
   2587  fde5		       00		      .byte.b	#%00000000
   2588  fde6		       00		      .byte.b	#%00000000
   2589  fde7		       80		      .byte.b	#%10000000
   2590  fde8		       c0		      .byte.b	#%11000000
   2591  fde9		       e0		      .byte.b	#%11100000
   2592  fdea		       f0		      .byte.b	#%11110000
   2593  fdeb
   2594  fdeb				   TachometerGearLookup
   2595  fdeb		       01		      .byte.b	#%00000001
   2596  fdec		       02		      .byte.b	#%00000010
   2597  fded		       04		      .byte.b	#%00000100
   2598  fdee		       08		      .byte.b	#%00001000
   2599  fdef		       10		      .byte.b	#%00010000
   2600  fdf0		       30		      .byte.b	#%00110000
   2601  fdf1
   2602  fe00					      org	$FE00
   2603  fe00				   AesTable
   2604  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2605  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2606  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2607  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2608  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2609  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2610  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2611  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2612  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2613  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2614  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2615  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2616  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2617  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2618  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2619  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2620  ff00
   2621  ff00							; From FF00 to FFFB (122 bytes) to use here
   2622  ff00
   2623  ff00				   StaticText		; All static text must be on the same MSB block. 
   2624  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2625  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2626  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2627  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2628  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2629  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2630  ff05
   2631  ff05				   HellwayLeftText
   2632  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2633  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2634  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2635  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2636  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2637  ff0a
   2638  ff0a				   HellwayRightText
   2639  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2640  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2641  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2642  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2643  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2644  ff0f
   2645  ff0f				   OpbText
   2646  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2647  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2648  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2649  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2650  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2651  ff14
   2652  ff14				   YearText
   2653  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2654  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2655  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2656  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2657  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2658  ff19
   2659  ff19				   GameText
   2660  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2661  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2662  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2663  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2664  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2665  ff1e
   2666  ff1e				   OverText
   2667  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2668  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2669  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2670  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2671  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2672  ff23				   GoText
   2673  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2674  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2675  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2676  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2677  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2678  ff28
   2679  ff28				   ZeldaTextLeft
   2680  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2681  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2682  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2683  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2684  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2685  ff2d
   2686  ff2d				   ZeldaTextRight
   2687  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2688  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2689  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2690  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2691  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2692  ff32
   2693  ff32				   ZeldaDateLeft
   2694  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2695  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2696  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2697  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2698  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2699  ff37
   2700  ff37				   ZeldaDateRight
   2701  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2702  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2703  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2704  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2705  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2706  ff3c
   2707  ff3c				   PolvinhosTextLeft
   2708  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2709  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2710  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2711  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2712  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2713  ff41
   2714  ff41				   PolvinhosTextRight
   2715  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2716  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2717  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2718  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2719  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2720  ff46
   2721  ff46				   PolvinhosDateLeft
   2722  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2723  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2724  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2725  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2726  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2727  ff4b
   2728  ff4b				   PolvinhosDateRight
   2729  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2730  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2731  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2732  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2733  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2734  ff50
   2735  ff50				   IvonneTextLeft
   2736  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2737  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2738  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2739  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2740  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2741  ff55
   2742  ff55				   IvonneTextRight
   2743  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2744  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2745  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2746  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2747  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2748  ff5a
   2749  ff5a				   IvonneDateLeft
   2750  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2751  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2752  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2753  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2754  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2755  ff5f
   2756  ff5f				   IvonneDateRight
   2757  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2758  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2759  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2760  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2761  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2762  ff64
   2763  ff64				   PaperArtTextLeft
   2764  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2765  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2766  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2767  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2768  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2769  ff69
   2770  ff69				   PaperArtTextRight
   2771  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2772  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2773  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2774  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2775  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2776  ff6e
   2777  ff6e				   LeonardoTextLeft
   2778  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2779  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2780  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2781  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2782  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2783  ff73
   2784  ff73				   LeonardoTextRight
   2785  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2786  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2787  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2788  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2789  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2790  ff78
   2791  ff78				   VersionText
   2792  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2793  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2794  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2795  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2796  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2797  ff7d
   2798  ff7d
   2799  ff7d				   EndStaticText
   2800  ff7d
   2801  ff7d				   CarSprite0		; Upside down, Original Car
   2802  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2803  ff85				   CarSprite0NoPadding
   2804  ff85		       7e		      .byte.b	#%01111110
   2805  ff86		       24		      .byte.b	#%00100100
   2806  ff87		       bd		      .byte.b	#%10111101
   2807  ff88		       3c		      .byte.b	#%00111100
   2808  ff89		       bd		      .byte.b	#%10111101
   2809  ff8a		       3c		      .byte.b	#%00111100
   2810  ff8b
   2811  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2812  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2813  ff93				   CarSprite1NoPadding
   2814  ff93		       bd		      .byte.b	#%10111101
   2815  ff94		       7e		      .byte.b	#%01111110
   2816  ff95		       5a		      .byte.b	#%01011010
   2817  ff96		       66		      .byte.b	#%01100110
   2818  ff97		       bd		      .byte.b	#%10111101
   2819  ff98		       3c		      .byte.b	#%00111100
   2820  ff99
   2821  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2822  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2823  ffa1				   CarSprite2NoPadding
   2824  ffa1		       7e		      .byte.b	#%01111110
   2825  ffa2		       a5		      .byte.b	#%10100101
   2826  ffa3		       42		      .byte.b	#%01000010
   2827  ffa4		       42		      .byte.b	#%01000010
   2828  ffa5		       bd		      .byte.b	#%10111101
   2829  ffa6		       7e		      .byte.b	#%01111110
   2830  ffa7
   2831  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2832  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2833  ffaf				   CarSprite3NoPadding
   2834  ffaf		       3c		      .byte.b	#%00111100
   2835  ffb0		       db		      .byte.b	#%11011011
   2836  ffb1		       db		      .byte.b	#%11011011
   2837  ffb2		       3c		      .byte.b	#%00111100
   2838  ffb3		       5a		      .byte.b	#%01011010
   2839  ffb4		       3c		      .byte.b	#%00111100
   2840  ffb5
   2841  ffb5				   TrafficSpeeds
   2842  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2843  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2844  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2845  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2846  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2847  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2848  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2849  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2850  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2851  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2852  ffbf				   TrafficSpeedsHighDelta
   2853  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2854  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2855  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2856  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2857  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2858  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2859  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2860  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2861  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2862  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2863  ffc9
   2864  ffc9				   CarIdToSpriteAddressL
   2865  ffc9		       7d		      .byte.b	#<CarSprite0
   2866  ffca		       8b		      .byte.b	#<CarSprite1
   2867  ffcb		       99		      .byte.b	#<CarSprite2
   2868  ffcc		       a7		      .byte.b	#<CarSprite3
   2869  ffcd
   2870  ffcd				   CarIdToSpriteAddressH
   2871  ffcd		       ff		      .byte.b	#>CarSprite0
   2872  ffce		       ff		      .byte.b	#>CarSprite1
   2873  ffcf		       ff		      .byte.b	#>CarSprite2
   2874  ffd0		       ff		      .byte.b	#>CarSprite3
   2875  ffd1
   2876  ffd1				   EnemyCarIdToSpriteAddressL
   2877  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2878  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2879  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2880  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2881  ffd5
   2882  ffd5				   EnemyCarIdToSpriteAddressH
   2883  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2884  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2885  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2886  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2887  ffd9
   2888  ffd9				   CarIdToAccelerateSpeed
   2889  ffd9		       80		      .byte.b	#128
   2890  ffda		       c0		      .byte.b	#192
   2891  ffdb		       60		      .byte.b	#96
   2892  ffdc		       c0		      .byte.b	#192
   2893  ffdd
   2894  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2895  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2896  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2897  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2898  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2899  ffe1
   2900  ffe1				   CarIdToMaxSpeedL
   2901  ffe1		       80		      .byte.b	#$80
   2902  ffe2		       00		      .byte.b	#$00	; One less gear
   2903  ffe3		       80		      .byte.b	#$80
   2904  ffe4		       80		      .byte.b	#$80
   2905  ffe5
   2906  ffe5				   CarIdToMaxGear
   2907  ffe5		       05		      .byte.b	#5
   2908  ffe6		       04		      .byte.b	#4	; One less gear
   2909  ffe7		       05		      .byte.b	#5
   2910  ffe8		       05		      .byte.b	#5
   2911  ffe9
   2912  ffe9				   GearToBreakSpeedTable
   2913  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2914  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2915  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2916  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2917  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2918  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2919  ffef
   2920  ffef				   TrafficColorTable
   2921  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2922  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2923  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2924  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2925  fff3
   2926  fff3				   TrafficChanceTable
   2927  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2928  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2929  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2930  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2931  fff7
   2932  fff7				   TrafficTimeTable
   2933  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2934  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2935  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2936  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2937  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2938  fffc
   2939  fffc
   2940  fffc					      org	$FFFC
   2941  fffc		       00 f0		      .word.w	BeforeStart
   2942  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
