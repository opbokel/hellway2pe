------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 8c	   FrameCount0 =	$8C	;
    111  f000		       00 8d	   FrameCount1 =	$8D	;
    112  f000
    113  f000		       00 8e	   Player0SpeedL =	$8E
    114  f000		       00 8f	   Player0SpeedH =	$8F
    115  f000
    116  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    117  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    118  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    119  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    120  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    121  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    122  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    123  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    124  f000
    125  f000
    126  f000							;Temporary variables, multiple uses
    127  f000		       00 b0	   Tmp0       =	$B0
    128  f000		       00 b1	   Tmp1       =	$B1
    129  f000		       00 b2	   Tmp2       =	$B2
    130  f000		       00 b3	   Tmp3       =	$B3
    131  f000
    132  f000		       00 b4	   ScoreBcd0  =	$B4
    133  f000		       00 b5	   ScoreBcd1  =	$B5
    134  f000		       00 b6	   ScoreBcd2  =	$B6
    135  f000		       00 b7	   ScoreBcd3  =	$B7
    136  f000
    137  f000		       00 b8	   CollisionCounter =	$B8
    138  f000		       00 b9	   Player0X   =	$B9
    139  f000		       00 ba	   CountdownTimer =	$BA
    140  f000		       00 bb	   Traffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000
    143  f000		       00 bd	   TimeBcd0   =	$BD
    144  f000		       00 be	   TimeBcd1   =	$BE
    145  f000		       00 bf	   TimeBcd2   =	$BF
    146  f000
    147  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    148  f000		       00 c1	   TrafficChance =	$C1
    149  f000		       00 c2	   CheckpointTime =	$C2
    150  f000		       00 c3	   TrafficColor =	$C3
    151  f000		       00 c4	   CurrentDifficulty =	$C4
    152  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000
    156  f000		       00 ca	   BorderType =	$CA
    157  f000
    158  f000		       00 cb	   HitCountBcd0 =	$CB
    159  f000		       00 cc	   HitCountBcd1 =	$CC
    160  f000
    161  f000		       00 cd	   GlideTimeBcd0 =	$CD
    162  f000		       00 ce	   GlideTimeBcd1 =	$CE
    163  f000
    164  f000		       00 cf	   OneSecondConter =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000		       00 d5	   ScoreFontColor =	$D5
    172  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    173  f000		       00 d7	   NextCheckpoint =	$D7
    174  f000
    175  f000		       00 d8	   OpponentLine =	$D8
    176  f000
    177  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    178  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    179  f000
    180  f000		       00 db	   CheckpointBcd0 =	$DB
    181  f000		       00 dc	   CheckpointBcd1 =	$DC
    182  f000		       00 dd	   StartSWCHB =	$DD	; Used for Score, so it cannot be cheated.
    183  f000		       00 de	   CarSpritePointerL =	$DE
    184  f000		       00 df	   CarSpritePointerH =	$DF
    185  f000		       00 f0	   CurrentCarId =	$F0
    186  f000		       00 f1	   AccelerateBuffer =	$F1	; Change speed on buffer overflow.
    187  f000		       00 f2	   TextSide   =	$F2
    188  f000		       00 f3	   TextFlickerMode =	$F3
    189  f000		       00 f4	   Gear       =	$F4
    190  f000
    191  f000
    192  f000							;generic start up stuff, put zero in almost all...
    193  f000				   BeforeStart		;All variables that are kept on game reset or select
    194  f000		       a0 00		      LDY	#0
    195  f002		       84 bc		      STY	SwitchDebounceCounter
    196  f004		       84 c4		      STY	CurrentDifficulty
    197  f006		       84 c0		      STY	GameStatus
    198  f008		       a0 10		      LDY	#16
    199  f00a		       84 c5		      STY	GameMode
    200  f00c		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    201  f00e		       84 f0		      STY	CurrentCarId
    202  f010
    203  f010				   Start
    204  f010		       a9 02		      LDA	#2
    205  f012		       85 00		      STA	VSYNC
    206  f014		       85 02		      STA	WSYNC
    207  f016		       85 02		      STA	WSYNC
    208  f018		       85 02		      STA	WSYNC
    209  f01a		       a9 00		      LDA	#0	;2
    210  f01c		       85 00		      STA	VSYNC	;3
    211  f01e
    212  f01e		       78		      SEI
    213  f01f		       d8		      CLD
    214  f020		       a2 ff		      LDX	#$FF
    215  f022		       9a		      TXS
    216  f023
    217  f023		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    218  f025				   CleanMem
    219  f025		       e0 bc		      CPX	#SwitchDebounceCounter
    220  f027		       f0 12		      BEQ	SkipClean
    221  f029		       e0 c5		      CPX	#GameMode
    222  f02b		       f0 0e		      BEQ	SkipClean
    223  f02d		       e0 f0		      CPX	#CurrentCarId
    224  f02f		       f0 0a		      BEQ	SkipClean
    225  f031		       e0 c4		      CPX	#CurrentDifficulty
    226  f033		       f0 06		      BEQ	SkipClean
    227  f035		       e0 c0		      CPX	#GameStatus
    228  f037		       f0 02		      BEQ	SkipClean
    229  f039		       95 00		      STA	0,X
    230  f03b				   SkipClean
    231  f03b		       e8		      INX
    232  f03c		       d0 e7		      BNE	CleanMem
    233  f03e
    234  f03e		       a9 d5		      LDA	#213
    235  f040		       8d 96 02 	      STA	TIM64T	;3	
    236  f043
    237  f043							;Setting some variables...
    238  f043
    239  f043				   SettingTrafficOffsets		; Time sensitive with player H position
    240  f043		       85 02		      STA	WSYNC	;We will set player position
    241  f045		       20 41 f8 	      JSR	DefaultOffsets
    242  f048
    243  f048		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    244  f04b		       85 8e		      STA	Player0SpeedL
    245  f04d
    246  f04d							;SLEEP 11;18
    247  f04d		       85 10		      STA	RESP0
    248  f04f
    249  f04f		       a2 00		      LDX	#0
    250  f051		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    251  f054		       85 dd		      STA	StartSWCHB	; For game over
    252  f056		       29 c0		      AND	#%11000000
    253  f058		       f0 0b		      BEQ	CallConfigureDifficulty
    254  f05a		       e8		      INX
    255  f05b		       c9 80		      CMP	#%10000000
    256  f05d		       f0 06		      BEQ	CallConfigureDifficulty
    257  f05f		       e8		      INX
    258  f060		       c9 40		      CMP	#%01000000
    259  f062		       f0 01		      BEQ	CallConfigureDifficulty
    260  f064		       e8		      INX
    261  f065
    262  f065				   CallConfigureDifficulty
    263  f065		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    264  f067		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    265  f069		       a5 c0		      LDA	GameStatus
    266  f06b		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    267  f06d				   NextCar
    268  f06d		       a4 f0		      LDY	CurrentCarId
    269  f06f		       c8		      INY
    270  f070		       98		      TYA
    271  f071		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    272  f073		       85 f0		      STA	CurrentCarId
    273  f075				   StoreCurrentDifficulty
    274  f075		       86 c4		      STX	CurrentDifficulty
    275  f077		       20 16 f8 	      JSR	ConfigureDifficulty
    276  f07a
    277  f07a				   ConfigureCarSprite
    278  f07a		       a4 f0		      LDY	CurrentCarId
    279  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
    280  f07f		       85 de		      STA	CarSpritePointerL
    281  f081		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
    282  f084		       85 df		      STA	CarSpritePointerH
    283  f086
    284  f086				   ConfigureEnemyCarSprite
    285  f086		       a4 f0		      LDY	CurrentCarId
    286  f088		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
    287  f08b		       85 d9		      STA	EnemyCarSpritePointerL
    288  f08d		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
    289  f090		       85 da		      STA	EnemyCarSpritePointerH
    290  f092
    291  f092				   SetGameNotRunning
    292  f092		       a9 00		      LDA	#0
    293  f094		       85 c0		      STA	GameStatus
    294  f096
    295  f096				   ConfigureOneSecondTimer
    296  f096		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    297  f098		       85 cf		      STA	OneSecondConter
    298  f09a
    299  f09a				   ConfigureTimer
    300  f09a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    301  f09c		       85 ba		      STA	CountdownTimer	;3
    302  f09e
    303  f09e				   HPositioning 		; Avoid sleep doing needed stuff
    304  f09e		       85 02		      STA	WSYNC
    305  f0a0
    306  f0a0				   ConfigurePlayerXPosition
    307  f0a0		       a9 35		      LDA	#PLAYER_0_X_START	;2
    308  f0a2		       85 b9		      STA	Player0X	;3
    309  f0a4
    310  f0a4				   ConfigureMissileSize
    311  f0a4		       a9 30		      LDA	#%00110000	;2 Missile Size
    312  f0a6		       85 04		      STA	NUSIZ0	;3
    313  f0a8		       85 05		      STA	NUSIZ1	;3
    314  f0aa
    315  f0aa				   ConfigureNextCheckpoint
    316  f0aa		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    317  f0ac		       85 d7		      STA	NextCheckpoint
    318  f0ae
    319  f0ae		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0b0					      SLEEP	5	;
      1  f0b0				   .CYCLES    SET	5
      2  f0b0
      3  f0b0				  -	      IF	.CYCLES < 2
      4  f0b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b0				  -	      ERR
      6  f0b0					      ENDIF
      7  f0b0
      8  f0b0					      IF	.CYCLES & 1
      9  f0b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b0				  -	      nop	0
     11  f0b0					      ELSE
     12  f0b0		       24 00		      bit	VSYNC
     13  f0b2					      ENDIF
     14  f0b2				   .CYCLES    SET	.CYCLES - 3
     15  f0b2					      ENDIF
     16  f0b2
     17  f0b2					      REPEAT	.CYCLES / 2
     18  f0b2		       ea		      nop
     19  f0b3					      REPEND
    321  f0b3		       85 12		      STA	RESM0
      0  f0b5					      SLEEP	2	;
      1  f0b5				   .CYCLES    SET	2
      2  f0b5
      3  f0b5				  -	      IF	.CYCLES < 2
      4  f0b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b5				  -	      ERR
      6  f0b5					      ENDIF
      7  f0b5
      8  f0b5				  -	      IF	.CYCLES & 1
      9  f0b5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b5				  -	      nop	0
     11  f0b5				  -	      ELSE
     12  f0b5				  -	      bit	VSYNC
     13  f0b5				  -	      ENDIF
     14  f0b5				  -.CYCLES    SET	.CYCLES - 3
     15  f0b5					      ENDIF
     16  f0b5
     17  f0b5					      REPEAT	.CYCLES / 2
     18  f0b5		       ea		      nop
     19  f0b6					      REPEND
    323  f0b6		       85 14		      STA	RESBL
      0  f0b8					      SLEEP	2
      1  f0b8				   .CYCLES    SET	2
      2  f0b8
      3  f0b8				  -	      IF	.CYCLES < 2
      4  f0b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b8				  -	      ERR
      6  f0b8					      ENDIF
      7  f0b8
      8  f0b8				  -	      IF	.CYCLES & 1
      9  f0b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b8				  -	      nop	0
     11  f0b8				  -	      ELSE
     12  f0b8				  -	      bit	VSYNC
     13  f0b8				  -	      ENDIF
     14  f0b8				  -.CYCLES    SET	.CYCLES - 3
     15  f0b8					      ENDIF
     16  f0b8
     17  f0b8					      REPEAT	.CYCLES / 2
     18  f0b8		       ea		      nop
     19  f0b9					      REPEND
    325  f0b9		       85 13		      STA	RESM1
    326  f0bb		       85 11		      STA	RESP1
    327  f0bd
    328  f0bd		       a9 f0		      LDA	#$F0
    329  f0bf		       85 24		      STA	HMBL
    330  f0c1		       85 22		      STA	HMM0
    331  f0c3		       85 23		      STA	HMM1
    332  f0c5		       85 02		      STA	WSYNC
    333  f0c7		       85 2a		      STA	HMOVE
    334  f0c9		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    335  f0cb		       85 2b		      STA	HMCLR
    336  f0cd
    337  f0cd				   WaitResetToEnd
    338  f0cd		       ad 84 02 	      LDA	INTIM
    339  f0d0		       d0 fb		      BNE	WaitResetToEnd
    340  f0d2
    341  f0d2				   MainLoop
    342  f0d2		       a9 02		      LDA	#2
    343  f0d4		       85 00		      STA	VSYNC
    344  f0d6		       85 02		      STA	WSYNC
    345  f0d8		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    346  f0da				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    347  f0da		       a9 01		      LDA	#%00000001
    348  f0dc		       24 f3		      BIT	TextFlickerMode
    349  f0de		       f0 05		      BEQ	TextSideFrameZero
    350  f0e0		       25 8d		      AND	FrameCount1
    351  f0e2		       4c e7 f0 	      JMP	StoreTextSize
    352  f0e5				   TextSideFrameZero
    353  f0e5		       25 8c		      AND	FrameCount0
    354  f0e7				   StoreTextSize
    355  f0e7		       85 f2		      STA	TextSide
    356  f0e9		       85 02		      STA	WSYNC
    357  f0eb							;STA HMOVE			
    358  f0eb		       85 2b		      STA	HMCLR
    359  f0ed
    360  f0ed							; SetHMove
    361  f0ed							;     LDA FrameCount0 ;3
    362  f0ed							;	AND #%00000001 ;2
    363  f0ed							;     BEQ MoveAllRight
    364  f0ed							; MoveAllLeft
    365  f0ed							;     LDA #$70
    366  f0ed							;     JMP StoreMoveAllValues
    367  f0ed							; MoveAllRight
    368  f0ed							;     LDA #$90
    369  f0ed
    370  f0ed							; StoreMoveAllValues
    371  f0ed							;     STA HMBL
    372  f0ed							;	STA HMM0
    373  f0ed							;	STA HMM1
    374  f0ed							; STA HMP0
    375  f0ed							; STA HMP1
    376  f0ed
    377  f0ed				   ConfigVBlankTimer
    378  f0ed		       a5 c5		      LDA	GameMode
    379  f0ef		       c9 10		      CMP	#MAX_GAME_MODE
    380  f0f1		       f0 05		      BEQ	SetVblankTimerQrCode
    381  f0f3		       a9 29		      LDA	#VBLANK_TIMER
    382  f0f5		       4c fa f0 	      JMP	SetVblankTimer
    383  f0f8				   SetVblankTimerQrCode
    384  f0f8		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    385  f0fa
    386  f0fa				   SetVblankTimer
    387  f0fa		       85 02		      STA	WSYNC	;3
    388  f0fc		       8d 96 02 	      STA	TIM64T	;3	
    389  f0ff		       a9 00		      LDA	#0	;2
    390  f101		       85 00		      STA	VSYNC	;3	
    391  f103
    392  f103				   RandomizeGame
    393  f103		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    394  f105		       d0 27		      BNE	EndRandomizeGame
    395  f107		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    396  f109		       29 02		      AND	#%00000010
    397  f10b		       f0 1e		      BEQ	DeterministicGame
    398  f10d		       a6 96		      LDX	TrafficOffset1 + 2
    399  f10f		       bd 00 fe 	      LDA	AesTable,X
    400  f112		       45 8c		      EOR	FrameCount0
    401  f114		       85 96		      STA	TrafficOffset1 + 2
    402  f116		       a6 9a		      LDX	TrafficOffset2 + 2
    403  f118		       bd 00 fe 	      LDA	AesTable,X
    404  f11b		       45 8c		      EOR	FrameCount0
    405  f11d		       85 9a		      STA	TrafficOffset2 + 2
    406  f11f		       a6 9e		      LDX	TrafficOffset3 + 2
    407  f121		       bd 00 fe 	      LDA	AesTable,X
    408  f124		       45 8c		      EOR	FrameCount0
    409  f126		       85 9e		      STA	TrafficOffset3 + 2
    410  f128		       4c 2e f1 	      JMP	EndRandomizeGame
    411  f12b
    412  f12b				   DeterministicGame
    413  f12b		       20 41 f8 	      JSR	DefaultOffsets
    414  f12e
    415  f12e				   EndRandomizeGame
    416  f12e
    417  f12e				   CountFrame
    418  f12e		       e6 8c		      INC	FrameCount0	; 5
    419  f130		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    420  f132		       e6 8d		      INC	FrameCount1	; 5 
    421  f134				   SkipIncFC1
    422  f134
    423  f134				   CallDrawQrCode
    424  f134		       a5 c5		      LDA	GameMode
    425  f136		       c9 10		      CMP	#MAX_GAME_MODE
    426  f138		       d0 03		      BNE	TestIsGameRunning
    427  f13a		       4c 64 fc 	      JMP	DrawQrCode
    428  f13d
    429  f13d							;Does not update the game if not running
    430  f13d				   TestIsGameRunning
    431  f13d		       a5 c0		      LDA	GameStatus	;3
    432  f13f		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    433  f141		       4c 09 f3 	      JMP	SkipUpdateLogic
    434  f144				   ContinueWithGameLogic
    435  f144
    436  f144				   EverySecond		; 64 frames to be more precise
    437  f144		       a9 3f		      LDA	#%00111111
    438  f146		       25 8c		      AND	FrameCount0
    439  f148		       d0 06		      BNE	SkipEverySecondAction
    440  f14a		       c5 ba		      CMP	CountdownTimer
    441  f14c		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    442  f14e		       c6 ba		      DEC	CountdownTimer
    443  f150				   SkipEverySecondAction
    444  f150
    445  f150				   ChangeTextFlickerMode
    446  f150		       a5 bc		      LDA	SwitchDebounceCounter
    447  f152		       d0 0d		      BNE	EndChangeTextFlickerMode
    448  f154		       ad 82 02 	      LDA	SWCHB
    449  f157		       29 02		      AND	#%00000010	;Game select
    450  f159		       d0 06		      BNE	EndChangeTextFlickerMode
    451  f15b		       e6 f3		      INC	TextFlickerMode
    452  f15d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    453  f15f		       85 bc		      STA	SwitchDebounceCounter
    454  f161				   EndChangeTextFlickerMode
    455  f161
    456  f161				   BreakOnTimeOver		; Uses LDX as the breaking speed
    457  f161		       a2 00		      LDX	#0
    458  f163		       a5 ba		      LDA	CountdownTimer
    459  f165		       d0 0b		      BNE	Break
    460  f167		       a4 f0		      LDY	CurrentCarId
    461  f169		       a5 8c		      LDA	FrameCount0
    462  f16b		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    463  f16e		       d0 02		      BNE	Break
    464  f170		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    465  f172
    466  f172				   Break
    467  f172		       a9 20		      LDA	#%00100000	;Down in controller
    468  f174		       2c 80 02 	      BIT	SWCHA
    469  f177		       d0 0e		      BNE	BreakNonZero
    470  f179		       a5 0c		      LDA	INPT4	;3
    471  f17b		       10 08		      BPL	BreakWhileAccelerating
    472  f17d		       a4 f4		      LDY	Gear
    473  f17f		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    474  f182		       4c 87 f1 	      JMP	BreakNonZero
    475  f185				   BreakWhileAccelerating		; Allow better control while breaking.
    476  f185		       a2 05		      LDX	(#BREAK_SPEED / 2)
    477  f187
    478  f187				   BreakNonZero
    479  f187		       e0 00		      CPX	#0
    480  f189		       f0 2b		      BEQ	SkipBreak
    481  f18b		       86 b0		      STX	Tmp0
    482  f18d
    483  f18d				   DecreaseSpeed
    484  f18d		       38		      SEC
    485  f18e		       a5 8e		      LDA	Player0SpeedL
    486  f190		       e5 b0		      SBC	Tmp0
    487  f192		       85 8e		      STA	Player0SpeedL
    488  f194		       a5 8f		      LDA	Player0SpeedH
    489  f196		       e9 00		      SBC	#0
    490  f198		       85 8f		      STA	Player0SpeedH
    491  f19a
    492  f19a				   CheckMinSpeed
    493  f19a		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    494  f19c		       c9 00		      CMP	#CAR_MIN_SPEED_H
    495  f19e		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    496  f1a0		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    497  f1a2
    498  f1a2				   CompareLBreakSpeed
    499  f1a2		       a5 8e		      LDA	Player0SpeedL
    500  f1a4		       c9 00		      CMP	#CAR_MIN_SPEED_L
    501  f1a6		       90 03		      BCC	ResetMinSpeed	; Less than memory
    502  f1a8		       4c b3 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    503  f1ab
    504  f1ab				   ResetMinSpeed
    505  f1ab		       a9 00		      LDA	#CAR_MIN_SPEED_H
    506  f1ad		       85 8f		      STA	Player0SpeedH
    507  f1af		       a9 00		      LDA	#CAR_MIN_SPEED_L
    508  f1b1		       85 8e		      STA	Player0SpeedL
    509  f1b3
    510  f1b3				   SkipAccelerateIfBreaking
    511  f1b3		       4c f8 f1 	      JMP	SkipAccelerate
    512  f1b6				   SkipBreak
    513  f1b6
    514  f1b6				   Acelerates
    515  f1b6		       a5 ba		      LDA	CountdownTimer
    516  f1b8		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    517  f1ba
    518  f1ba				   ContinueAccelerateTest
    519  f1ba		       a5 0c		      LDA	INPT4	;3
    520  f1bc		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    521  f1be		       a9 10		      LDA	#%00010000	;UP in controller
    522  f1c0		       2c 80 02 	      BIT	SWCHA
    523  f1c3		       d0 33		      BNE	SkipAccelerate
    524  f1c5
    525  f1c5				   IncreaseCarSpeed
    526  f1c5		       a2 02		      LDX	#2
    527  f1c7		       a4 f0		      LDY	CurrentCarId
    528  f1c9				   IncreaseCarSpeedLoop
    529  f1c9							;Adds speed
    530  f1c9		       18		      CLC
    531  f1ca		       a5 f1		      LDA	AccelerateBuffer
    532  f1cc		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    533  f1cf		       85 f1		      STA	AccelerateBuffer
    534  f1d1		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    535  f1d3		       e6 8e		      INC	Player0SpeedL
    536  f1d5		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    537  f1d7		       e6 8f		      INC	Player0SpeedH
    538  f1d9				   ContinueIncreaseSpeedLoop
    539  f1d9		       ca		      DEX
    540  f1da		       d0 ed		      BNE	IncreaseCarSpeedLoop
    541  f1dc				   SkipIncreaseCarSpeed
    542  f1dc
    543  f1dc				   CheckIfAlreadyMaxSpeed
    544  f1dc		       a5 8f		      LDA	Player0SpeedH
    545  f1de		       c9 02		      CMP	#CAR_MAX_SPEED_H
    546  f1e0		       90 16		      BCC	SkipAccelerate	; less than my max speed
    547  f1e2		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    548  f1e4							;High bit is max, compare the low
    549  f1e4		       a4 f0		      LDY	CurrentCarId
    550  f1e6		       a5 8e		      LDA	Player0SpeedL
    551  f1e8		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    552  f1eb		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    553  f1ed							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    554  f1ed
    555  f1ed				   ResetToMaxSpeed		; Speed is more, or is already max
    556  f1ed		       a9 02		      LDA	#CAR_MAX_SPEED_H
    557  f1ef		       85 8f		      STA	Player0SpeedH
    558  f1f1		       a4 f0		      LDY	CurrentCarId
    559  f1f3		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    560  f1f6		       85 8e		      STA	Player0SpeedL
    561  f1f8				   SkipAccelerate
    562  f1f8
    563  f1f8				   InitUpdateOffsets
    564  f1f8		       a2 00		      LDX	#0	; Memory Offset 24 bit
    565  f1fa		       a0 00		      LDY	#0	; Line Speeds 16 bits
    566  f1fc		       a5 91		      LDA	TrafficOffset0 + 1	;
    567  f1fe		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    568  f200		       a5 c5		      LDA	GameMode
    569  f202		       29 04		      AND	#%00000100	; GameModes with high delta
    570  f204		       f0 02		      BEQ	UpdateOffsets
    571  f206		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    572  f208
    573  f208				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    574  f208		       38		      SEC
    575  f209		       a5 8e		      LDA	Player0SpeedL
    576  f20b		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    577  f20e		       85 b0		      STA	Tmp0
    578  f210		       c8		      INY
    579  f211		       a5 8f		      LDA	Player0SpeedH
    580  f213		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    581  f216		       85 b1		      STA	Tmp1
    582  f218		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    583  f21a		       e9 00		      SBC	#0
    584  f21c		       85 b2		      STA	Tmp2
    585  f21e
    586  f21e				   AddsTheResult
    587  f21e		       18		      CLC
    588  f21f		       a5 b0		      LDA	Tmp0
    589  f221		       75 90		      ADC	TrafficOffset0,X
    590  f223		       95 90		      STA	TrafficOffset0,X
    591  f225		       e8		      INX
    592  f226		       a5 b1		      LDA	Tmp1
    593  f228		       75 90		      ADC	TrafficOffset0,X
    594  f22a		       95 90		      STA	TrafficOffset0,X
    595  f22c		       e8		      INX
    596  f22d		       a5 b2		      LDA	Tmp2	; Carry
    597  f22f		       75 90		      ADC	TrafficOffset0,X
    598  f231		       95 90		      STA	TrafficOffset0,X
    599  f233		       90 06		      BCC	CalculateOffsetCache
    600  f235		       e0 02		      CPX	#2	;MSB offset 0
    601  f237		       d0 02		      BNE	CalculateOffsetCache
    602  f239		       e6 bb		      INC	Traffic0Msb
    603  f23b
    604  f23b				   CalculateOffsetCache
    605  f23b		       e8		      INX
    606  f23c		       38		      SEC
    607  f23d		       69 00		      ADC	#0	;Increment by one
    608  f23f		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    609  f241
    610  f241				   PrepareNextUpdateLoop
    611  f241		       c8		      INY
    612  f242		       e8		      INX
    613  f243		       e0 10		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    614  f245		       d0 c1		      BNE	UpdateOffsets
    615  f247
    616  f247				   ConfigureOpponentLine		; Temporary
    617  f247		       a9 05		      LDA	#5	; Extract to constant
    618  f249		       85 d8		      STA	OpponentLine
    619  f24b
    620  f24b				   BcdScore		; 48
    621  f24b		       a5 91		      LDA	TrafficOffset0 + 1	;3
    622  f24d		       45 b3		      EOR	Tmp3	;3
    623  f24f		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    624  f251		       f0 1b		      BEQ	FinishBcdScore	;2
    625  f253
    626  f253				   ContinueBcdScore
    627  f253		       f8		      SED		;2
    628  f254		       18		      CLC		;2
    629  f255		       a5 b4		      LDA	ScoreBcd0	;3
    630  f257		       69 01		      ADC	#1	;2
    631  f259		       85 b4		      STA	ScoreBcd0	;3
    632  f25b		       a5 b5		      LDA	ScoreBcd1	;3
    633  f25d		       69 00		      ADC	#0	;2
    634  f25f		       85 b5		      STA	ScoreBcd1	;3
    635  f261		       a5 b6		      LDA	ScoreBcd2	;3
    636  f263		       69 00		      ADC	#0	;2
    637  f265		       85 b6		      STA	ScoreBcd2	;3
    638  f267		       a5 b7		      LDA	ScoreBcd3	;3
    639  f269		       69 00		      ADC	#0	;2
    640  f26b		       85 b7		      STA	ScoreBcd3	;3
    641  f26d		       d8		      CLD		;2
    642  f26e				   FinishBcdScore
    643  f26e
    644  f26e							;Until store the movemnt, LDX contains the value to be stored.
    645  f26e				   TestCollision		;
    646  f26e							; see if player0 colides with the rest
    647  f26e		       a5 00		      LDA	CXM0P
    648  f270		       05 01		      ORA	CXM1P
    649  f272		       05 01		      ORA	CXM1P
    650  f274		       05 02		      ORA	CXP0FB
    651  f276		       05 07		      ORA	CXPPMM
    652  f278		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    653  f27a		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    654  f27c		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    655  f27e		       d0 3a		      BNE	NoCollision
    656  f280		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    657  f282		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    658  f284		       f0 34		      BEQ	NoCollision
    659  f286		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    660  f288		       f0 30		      BEQ	NoCollision
    661  f28a		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    662  f28c		       85 b8		      STA	CollisionCounter	;and store as colision.
    663  f28e				   CountBcdColision
    664  f28e		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    665  f290		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    666  f292		       f0 1d		      BEQ	SkipSetColisionSpeedL
    667  f294		       f8		      SED		;2
    668  f295		       18		      CLC		;2
    669  f296		       a5 cb		      LDA	HitCountBcd0	;3
    670  f298		       69 01		      ADC	#1	;3
    671  f29a		       85 cb		      STA	HitCountBcd0	;3
    672  f29c		       a5 cc		      LDA	HitCountBcd1	;3
    673  f29e		       69 00		      ADC	#0	;2
    674  f2a0		       85 cc		      STA	HitCountBcd1	;3
    675  f2a2		       d8		      CLD		;2
    676  f2a3				   EndCountBcdColision
    677  f2a3		       a5 8f		      LDA	Player0SpeedH
    678  f2a5		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    679  f2a7		       a9 10		      LDA	#COLLISION_SPEED_L
    680  f2a9		       c5 8e		      CMP	Player0SpeedL
    681  f2ab		       b0 04		      BCS	SkipSetColisionSpeedL
    682  f2ad				   SetColisionSpeedL
    683  f2ad		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    684  f2af		       85 8e		      STA	Player0SpeedL
    685  f2b1				   SkipSetColisionSpeedL
    686  f2b1		       a9 00		      LDA	#0
    687  f2b3		       85 8f		      STA	Player0SpeedH
    688  f2b5		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    689  f2b7		       4c 05 f3 	      JMP	StoreHMove	; We keep position consistent
    690  f2ba				   NoCollision
    691  f2ba
    692  f2ba				   DecrementCollision
    693  f2ba		       a4 b8		      LDY	CollisionCounter
    694  f2bc		       f0 07		      BEQ	FinishDecrementCollision
    695  f2be		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    696  f2c0		       85 04		      STA	NUSIZ0
    697  f2c2		       88		      DEY
    698  f2c3		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    699  f2c5				   FinishDecrementCollision
    700  f2c5
    701  f2c5				   ResetPlayerSize
    702  f2c5		       d0 04		      BNE	FinishResetPlayerSize
    703  f2c7		       a9 30		      LDA	#%00110000
    704  f2c9		       85 04		      STA	NUSIZ0	;
    705  f2cb				   FinishResetPlayerSize
    706  f2cb
    707  f2cb							;STA HMCLR ; Do not double move car.
    708  f2cb
    709  f2cb				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    710  f2cb		       c0 01		      CPY	#1	; Last frame before reset
    711  f2cd		       d0 05		      BNE	SkipResetPlayerPosition
    712  f2cf		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    713  f2d1		       4c 05 f3 	      JMP	StoreHMove
    714  f2d4				   SkipResetPlayerPosition
    715  f2d4
    716  f2d4				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    717  f2d4		       a5 f0		      LDA	CurrentCarId
    718  f2d6		       c9 03		      CMP	#CAR_ID_DRAGSTER
    719  f2d8		       d0 08		      BNE	PrepareReadXAxis
    720  f2da		       a2 00		      LDX	#0
    721  f2dc		       a5 8c		      LDA	FrameCount0
    722  f2de		       29 01		      AND	#DRAGSTER_TURN_MASK
    723  f2e0		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    724  f2e2
    725  f2e2							; for left and right, we're gonna 
    726  f2e2							; set the horizontal speed, and then do
    727  f2e2							; a single HMOVE.  We'll use X to hold the
    728  f2e2							; horizontal speed, then store it in the 
    729  f2e2							; appropriate register
    730  f2e2				   PrepareReadXAxis
    731  f2e2		       a2 00		      LDX	#0
    732  f2e4		       a4 b9		      LDY	Player0X
    733  f2e6				   BeginReadLeft
    734  f2e6		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    735  f2e8		       a9 40		      LDA	#%01000000	;Left
    736  f2ea		       2c 80 02 	      BIT	SWCHA
    737  f2ed		       d0 07		      BNE	SkipMoveLeft
    738  f2ef		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    739  f2f1		       c6 b9		      DEC	Player0X
    740  f2f3		       4c 05 f3 	      JMP	StoreHMove	; Cannot move left and right...
    741  f2f6				   SkipMoveLeft
    742  f2f6				   BeginReadRight
    743  f2f6		       c0 36		      CPY	#PLAYER_0_MAX_X
    744  f2f8		       f0 0b		      BEQ	SkipMoveRight	; At max already
    745  f2fa		       a9 80		      LDA	#%10000000	;Right
    746  f2fc		       2c 80 02 	      BIT	SWCHA
    747  f2ff		       d0 04		      BNE	SkipMoveRight
    748  f301		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    749  f303		       e6 b9		      INC	Player0X
    750  f305				   SkipMoveRight
    751  f305				   StoreHMove
    752  f305		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    753  f307		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    754  f309
    755  f309				   SkipUpdateLogic		; Continue here if not paused
    756  f309
    757  f309				   CalculateGear
    758  f309		       a5 8e		      LDA	Player0SpeedL	;3
    759  f30b		       29 80		      AND	#%10000000	;2
    760  f30d		       05 8f		      ORA	Player0SpeedH	;3
    761  f30f		       18		      CLC		;2
    762  f310		       2a		      ROL		;2
    763  f311		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    764  f313		       85 f4		      STA	Gear
    765  f315
    766  f315				   EndProcessingBorder
    767  f315
    768  f315				   ProcessScoreFontColor
    769  f315		       a6 d6		      LDX	ScoreFontColorHoldChange
    770  f317		       f0 06		      BEQ	ResetScoreFontColor
    771  f319		       ca		      DEX
    772  f31a		       86 d6		      STX	ScoreFontColorHoldChange
    773  f31c		       4c 23 f3 	      JMP	SkipScoreFontColor
    774  f31f				   ResetScoreFontColor
    775  f31f		       a9 f9		      LDA	#SCORE_FONT_COLOR
    776  f321		       85 d5		      STA	ScoreFontColor
    777  f323				   SkipScoreFontColor
    778  f323
    779  f323				   IsGameOver
    780  f323		       a5 ba		      LDA	CountdownTimer
    781  f325		       05 8e		      ORA	Player0SpeedL
    782  f327		       05 8f		      ORA	Player0SpeedH
    783  f329		       d0 0b		      BNE	IsCheckpoint
    784  f32b		       a9 01		      LDA	#1
    785  f32d		       85 d6		      STA	ScoreFontColorHoldChange
    786  f32f		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    787  f331		       85 d5		      STA	ScoreFontColor
    788  f333		       4c 77 f3 	      JMP	SkipIsTimeOver
    789  f336
    790  f336				   IsCheckpoint
    791  f336		       a5 d7		      LDA	NextCheckpoint
    792  f338		       c5 92		      CMP	TrafficOffset0 + 2
    793  f33a		       d0 2f		      BNE	SkipIsCheckpoint
    794  f33c		       18		      CLC
    795  f33d		       69 10		      ADC	#CHECKPOINT_INTERVAL
    796  f33f		       85 d7		      STA	NextCheckpoint
    797  f341		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    798  f343		       85 d5		      STA	ScoreFontColor
    799  f345		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    800  f347		       85 d6		      STA	ScoreFontColorHoldChange
    801  f349				   AddCheckpointBcd
    802  f349		       f8		      SED		;2
    803  f34a		       18		      CLC		;2
    804  f34b		       a5 db		      LDA	CheckpointBcd0	;3
    805  f34d		       69 01		      ADC	#1	;3
    806  f34f		       85 db		      STA	CheckpointBcd0	;3
    807  f351		       a5 dc		      LDA	CheckpointBcd1	;3
    808  f353		       69 00		      ADC	#0	;2
    809  f355		       85 dc		      STA	CheckpointBcd1	;3
    810  f357		       d8		      CLD		;2
    811  f358				   EndCheckpointBcd
    812  f358		       a5 ba		      LDA	CountdownTimer
    813  f35a		       18		      CLC
    814  f35b		       65 c2		      ADC	CheckpointTime
    815  f35d		       85 ba		      STA	CountdownTimer
    816  f35f		       90 04		      BCC	JumpSkipTimeOver
    817  f361		       a9 ff		      LDA	#$FF
    818  f363		       85 ba		      STA	CountdownTimer	; Does not overflow!
    819  f365				   JumpSkipTimeOver
    820  f365		       20 07 f8 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    821  f368		       4c 77 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    822  f36b				   SkipIsCheckpoint
    823  f36b
    824  f36b				   IsTimeOver
    825  f36b		       a5 ba		      LDA	CountdownTimer
    826  f36d		       d0 08		      BNE	SkipIsTimeOver
    827  f36f		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    828  f371		       85 d6		      STA	ScoreFontColorHoldChange
    829  f373		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    830  f375		       85 d5		      STA	ScoreFontColor
    831  f377				   SkipIsTimeOver
    832  f377
    833  f377				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
    834  f377		       a5 c0		      LDA	GameStatus	;3
    835  f379		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
    836  f37b		       a5 d5		      LDA	ScoreFontColor	;3
    837  f37d		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
    838  f37f		       f0 30		      BEQ	EndExactlyEverySecond	;2
    839  f381		       c6 cf		      DEC	OneSecondConter	;5
    840  f383		       d0 2c		      BNE	EndExactlyEverySecond	;2
    841  f385
    842  f385		       f8		      SED		;2 BCD Operations after this point
    843  f386				   CountGlideTimeBcd
    844  f386		       a5 d5		      LDA	ScoreFontColor	;3
    845  f388		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
    846  f38a		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
    847  f38c		       18		      CLC		;2
    848  f38d		       a5 cd		      LDA	GlideTimeBcd0	;3
    849  f38f		       69 01		      ADC	#1	;3
    850  f391		       85 cd		      STA	GlideTimeBcd0	;3
    851  f393		       a5 ce		      LDA	GlideTimeBcd1	;3
    852  f395		       69 00		      ADC	#0	;2
    853  f397		       85 ce		      STA	GlideTimeBcd1	;3
    854  f399				   EndCountGlideTimeBcd
    855  f399				   IncreaseTotalTimerBcd
    856  f399		       18		      CLC		;2
    857  f39a		       a5 bd		      LDA	TimeBcd0	;3
    858  f39c		       69 01		      ADC	#1	;2
    859  f39e		       85 bd		      STA	TimeBcd0	;3
    860  f3a0		       a5 be		      LDA	TimeBcd1	;3
    861  f3a2		       69 00		      ADC	#0	;2
    862  f3a4		       85 be		      STA	TimeBcd1	;3
    863  f3a6		       a5 bf		      LDA	TimeBcd2	;3
    864  f3a8		       69 00		      ADC	#0	;2
    865  f3aa		       85 bf		      STA	TimeBcd2	;3
    866  f3ac
    867  f3ac				   ResetOneSecondCounter
    868  f3ac		       d8		      CLD		;2
    869  f3ad		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
    870  f3af		       85 cf		      STA	OneSecondConter	;3
    871  f3b1
    872  f3b1				   EndExactlyEverySecond
    873  f3b1
    874  f3b1				   PrintEasterEggCondition
    875  f3b1		       a5 8d		      LDA	FrameCount1
    876  f3b3		       29 38		      AND	#%00111000
    877  f3b5		       05 c0		      ORA	GameStatus
    878  f3b7		       c9 38		      CMP	#%00111000
    879  f3b9		       d0 06		      BNE	ChooseTextSide
    880  f3bb		       20 6e f8 	      JSR	PrintEasterEgg
    881  f3be		       4c b0 f4 	      JMP	RightScoreWriteEnd
    882  f3c1
    883  f3c1							;Could be done during on vblank to save this comparisson time (before draw score), 
    884  f3c1							;but I am saving vblank cycles for now, in case of 2 players.
    885  f3c1				   ChooseTextSide		; 
    886  f3c1		       a5 f2		      LDA	TextSide	;3
    887  f3c3		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    888  f3c5		       4c 46 f4 	      JMP	RightScoreWrite
    889  f3c8
    890  f3c8				   LeftScoreWrite
    891  f3c8		       a5 d5		      LDA	ScoreFontColor
    892  f3ca		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    893  f3cc		       f0 4e		      BEQ	PrintCheckpoint
    894  f3ce		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    895  f3d0		       f0 52		      BEQ	PrintStartGame
    896  f3d2		       a5 c0		      LDA	GameStatus
    897  f3d4		       f0 56		      BEQ	PrintHellwayLeft
    898  f3d6				   WriteDistance		;Not optimized yet, ugly code.
    899  f3d6				   Digit0Distance
    900  f3d6		       a5 91		      LDA	TrafficOffset0 + 1	;3
    901  f3d8		       4a		      LSR		; 2
    902  f3d9		       4a		      LSR		; 2
    903  f3da		       4a		      LSR		; 2
    904  f3db		       4a		      LSR		; 2
    905  f3dc		       aa		      TAX		; 2
    906  f3dd		       bd be fd 	      LDA	FontLookup,X	;4
    907  f3e0		       85 d3		      STA	ScoreD3	;3
    908  f3e2
    909  f3e2				   Digit1Distance
    910  f3e2		       a5 92		      LDA	TrafficOffset0 + 2	;3
    911  f3e4		       29 0f		      AND	#%00001111	;2
    912  f3e6		       aa		      TAX		; 2
    913  f3e7		       bd be fd 	      LDA	FontLookup,X	;4 
    914  f3ea		       85 d2		      STA	ScoreD2	;3
    915  f3ec
    916  f3ec				   Digit2Distance
    917  f3ec		       a5 92		      LDA	TrafficOffset0 + 2	;3
    918  f3ee		       4a		      LSR		; 2
    919  f3ef		       4a		      LSR		; 2
    920  f3f0		       4a		      LSR		; 2
    921  f3f1		       4a		      LSR		; 2
    922  f3f2		       aa		      TAX		; 2
    923  f3f3		       bd be fd 	      LDA	FontLookup,X	;4
    924  f3f6		       85 d1		      STA	ScoreD1	;3
    925  f3f8
    926  f3f8				   Digit3Distance
    927  f3f8		       a5 bb		      LDA	Traffic0Msb	;3
    928  f3fa		       29 0f		      AND	#%00001111	;2
    929  f3fc		       aa		      TAX		; 2
    930  f3fd		       bd be fd 	      LDA	FontLookup,X	;4 
    931  f400		       85 d0		      STA	ScoreD0	;3
    932  f402
    933  f402				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    934  f402		       a5 bb		      LDA	Traffic0Msb
    935  f404		       29 f0		      AND	#%11110000	;2
    936  f406		       d0 07		      BNE	DrawDistanceExtraDigit
    937  f408		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    938  f40a		       85 d4		      STA	ScoreD4	;3
    939  f40c		       4c 19 f4 	      JMP	EndDrawDistance
    940  f40f				   DrawDistanceExtraDigit
    941  f40f		       4a		      LSR		; 2
    942  f410		       4a		      LSR		; 2
    943  f411		       4a		      LSR		; 2
    944  f412		       4a		      LSR		; 2
    945  f413		       aa		      TAX		; 2
    946  f414		       bd be fd 	      LDA	FontLookup,X	;4
    947  f417		       85 d4		      STA	ScoreD4	;3
    948  f419
    949  f419				   EndDrawDistance
    950  f419		       4c b0 f4 	      JMP	RightScoreWriteEnd	;3
    951  f41c
    952  f41c				   PrintCheckpoint
    953  f41c		       a2 00		      LDX	#<CheckpointText
    954  f41e		       20 50 f8 	      JSR	PrintStaticText
    955  f421		       4c b0 f4 	      JMP	RightScoreWriteEnd	;3
    956  f424				   PrintStartGame
    957  f424		       a2 23		      LDX	#<GoText
    958  f426		       20 50 f8 	      JSR	PrintStaticText
    959  f429		       4c b0 f4 	      JMP	RightScoreWriteEnd	;3
    960  f42c
    961  f42c				   PrintHellwayLeft
    962  f42c		       a5 8d		      LDA	FrameCount1
    963  f42e		       29 01		      AND	#1
    964  f430		       d0 05		      BNE	PrintCreditsLeft
    965  f432		       a2 05		      LDX	#<HellwayLeftText
    966  f434		       4c 39 f4 	      JMP	PrintGameMode
    967  f437				   PrintCreditsLeft
    968  f437		       a2 0f		      LDX	#<OpbText
    969  f439
    970  f439				   PrintGameMode
    971  f439		       20 50 f8 	      JSR	PrintStaticText
    972  f43c		       a6 c5		      LDX	GameMode
    973  f43e		       bd be fd 	      LDA	FontLookup,X	;4 
    974  f441		       85 d0		      STA	ScoreD0	;3
    975  f443		       4c b0 f4 	      JMP	RightScoreWriteEnd	;3
    976  f446
    977  f446				   RightScoreWrite
    978  f446		       a5 c0		      LDA	GameStatus
    979  f448		       f0 45		      BEQ	PrintHellwayRight
    980  f44a		       a5 d5		      LDA	ScoreFontColor
    981  f44c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    982  f44e		       f0 52		      BEQ	PrintGameOver
    983  f450				   Digit0Timer
    984  f450		       a5 ba		      LDA	CountdownTimer	;3
    985  f452		       29 0f		      AND	#%00001111	;2
    986  f454		       aa		      TAX		; 2
    987  f455		       bd be fd 	      LDA	FontLookup,X	;4 
    988  f458		       85 d1		      STA	ScoreD1	;3
    989  f45a
    990  f45a				   Digit1Timer
    991  f45a		       a5 ba		      LDA	CountdownTimer	;3
    992  f45c		       4a		      LSR		; 2
    993  f45d		       4a		      LSR		; 2
    994  f45e		       4a		      LSR		; 2
    995  f45f		       4a		      LSR		; 2
    996  f460		       aa		      TAX		; 2
    997  f461		       bd be fd 	      LDA	FontLookup,X	;4
    998  f464		       85 d0		      STA	ScoreD0	;3
    999  f466
   1000  f466		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1001  f468		       85 d2		      STA	ScoreD2	;3
   1002  f46a
   1003  f46a				   Digit0Speed
   1004  f46a		       a5 8e		      LDA	Player0SpeedL
   1005  f46c		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1006  f46e		       4a		      LSR		; 2
   1007  f46f		       4a		      LSR		; 2
   1008  f470		       aa		      TAX		; 2
   1009  f471		       bd be fd 	      LDA	FontLookup,X	;4
   1010  f474		       85 d4		      STA	ScoreD4	;3
   1011  f476
   1012  f476				   Digit1Speed
   1013  f476		       a5 8e		      LDA	Player0SpeedL
   1014  f478		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1015  f47a		       18		      CLC
   1016  f47b		       2a		      ROL		;First goes into carry
   1017  f47c		       2a		      ROL
   1018  f47d		       2a		      ROL
   1019  f47e		       85 b0		      STA	Tmp0
   1020  f480		       a5 8f		      LDA	Player0SpeedH
   1021  f482		       0a		      ASL
   1022  f483		       0a		      ASL
   1023  f484		       05 b0		      ORA	Tmp0
   1024  f486		       aa		      TAX		; 2
   1025  f487		       bd be fd 	      LDA	FontLookup,X	;4
   1026  f48a		       85 d3		      STA	ScoreD3	;3
   1027  f48c		       4c b0 f4 	      JMP	RightScoreWriteEnd
   1028  f48f
   1029  f48f				   PrintHellwayRight
   1030  f48f		       a5 8d		      LDA	FrameCount1
   1031  f491		       29 01		      AND	#1
   1032  f493		       d0 05		      BNE	PrintCreditsRight
   1033  f495		       a2 0a		      LDX	#<HellwayRightText
   1034  f497		       4c 9c f4 	      JMP	PrintRightIntro
   1035  f49a				   PrintCreditsRight
   1036  f49a		       a2 14		      LDX	#<YearText
   1037  f49c				   PrintRightIntro
   1038  f49c		       20 50 f8 	      JSR	PrintStaticText
   1039  f49f		       4c b0 f4 	      JMP	RightScoreWriteEnd
   1040  f4a2				   PrintGameOver
   1041  f4a2		       a5 8c		      LDA	FrameCount0
   1042  f4a4		       30 05		      BMI	PrintOverText
   1043  f4a6		       a2 19		      LDX	#<GameText
   1044  f4a8		       4c ad f4 	      JMP	StoreGameOverText
   1045  f4ab				   PrintOverText
   1046  f4ab		       a2 1e		      LDX	#<OverText
   1047  f4ad				   StoreGameOverText
   1048  f4ad		       20 50 f8 	      JSR	PrintStaticText
   1049  f4b0				   RightScoreWriteEnd
   1050  f4b0
   1051  f4b0
   1052  f4b0				   ScoreBackgroundColor
   1053  f4b0		       a2 00		      LDX	#0
   1054  f4b2		       ad 82 02 	      LDA	SWCHB
   1055  f4b5		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1056  f4b7		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1057  f4b9		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1058  f4bb		       a2 03		      LDX	#BACKGROUND_COLOR
   1059  f4bd				   BlackAndWhiteScoreBg
   1060  f4bd		       85 b2		      STA	Tmp2	; Score Background
   1061  f4bf		       86 b3		      STX	Tmp3	; Traffic Background
   1062  f4c1
   1063  f4c1				   ConfigurePFForScore
   1064  f4c1							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1065  f4c1		       85 09		      STA	COLUBK
   1066  f4c3		       20 c9 f7 	      JSR	ClearAll
   1067  f4c6		       a9 02		      LDA	#%00000010	; Score mode
   1068  f4c8		       85 0a		      STA	CTRLPF
   1069  f4ca		       a5 f2		      LDA	TextSide	;3
   1070  f4cc		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1071  f4ce				   LeftScoreOn
   1072  f4ce		       a5 d5		      LDA	ScoreFontColor
   1073  f4d0		       85 07		      STA	COLUP1
   1074  f4d2		       a5 b2		      LDA	Tmp2
   1075  f4d4		       85 06		      STA	COLUP0
   1076  f4d6		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1077  f4d8		       85 b1		      STA	Tmp1
   1078  f4da		       4c e9 f4 	      JMP	CallWaitForVblankEnd
   1079  f4dd				   RightScoreOn
   1080  f4dd		       a5 d5		      LDA	ScoreFontColor
   1081  f4df		       85 06		      STA	COLUP0
   1082  f4e1		       a5 b2		      LDA	Tmp2
   1083  f4e3		       85 07		      STA	COLUP1
   1084  f4e5		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1085  f4e7		       85 b1		      STA	Tmp1
   1086  f4e9
   1087  f4e9							; After here we are going to update the screen, No more heavy code
   1088  f4e9				   CallWaitForVblankEnd
   1089  f4e9		       20 de fa 	      JSR	WaitForVblankEnd
   1090  f4ec
   1091  f4ec				   DrawScoreHud
   1092  f4ec		       20 e0 f8 	      JSR	PrintScore
   1093  f4ef
   1094  f4ef		       85 02		      STA	WSYNC
   1095  f4f1
   1096  f4f1		       a5 0c		      LDA	INPT4	;3
   1097  f4f3		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1098  f4f5		       a5 d5		      LDA	ScoreFontColor
   1099  f4f7		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1100  f4f9		       d0 0a		      BNE	WaitAnotherScoreLine
   1101  f4fb		       a5 f2		      LDA	TextSide	;3
   1102  f4fd		       d0 03		      BNE	LeftScoreOnGameOver
   1103  f4ff		       4c 6b fa 	      JMP	DrawGameOverScreenRight
   1104  f502				   LeftScoreOnGameOver
   1105  f502		       4c 9d f9 	      JMP	DrawGameOverScreenLeft
   1106  f505
   1107  f505				   WaitAnotherScoreLine
   1108  f505		       85 02		      STA	WSYNC
   1109  f507
   1110  f507				   PrepareForTraffic
   1111  f507		       20 db f7 	      JSR	ClearPF	; 32
   1112  f50a
   1113  f50a		       85 02		      STA	WSYNC
   1114  f50c		       85 02		      STA	WSYNC
   1115  f50e
   1116  f50e		       a9 30		      LDA	#%00110000	; 2 Score mode
   1117  f510		       85 0a		      STA	CTRLPF	;3
   1118  f512
   1119  f512		       a5 c3		      LDA	TrafficColor	;3
   1120  f514		       85 08		      STA	COLUPF	;3
   1121  f516
   1122  f516		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1123  f518		       85 07		      STA	COLUP1	;3
   1124  f51a
   1125  f51a		       a5 d5		      LDA	ScoreFontColor	;3
   1126  f51c		       85 06		      STA	COLUP0	;3
   1127  f51e
   1128  f51e		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1129  f520
   1130  f520		       20 db f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1131  f523
      0  f523					      SLEEP	14
      1  f523				   .CYCLES    SET	14
      2  f523
      3  f523				  -	      IF	.CYCLES < 2
      4  f523				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f523				  -	      ERR
      6  f523					      ENDIF
      7  f523
      8  f523				  -	      IF	.CYCLES & 1
      9  f523				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f523				  -	      nop	0
     11  f523				  -	      ELSE
     12  f523				  -	      bit	VSYNC
     13  f523				  -	      ENDIF
     14  f523				  -.CYCLES    SET	.CYCLES - 3
     15  f523					      ENDIF
     16  f523
     17  f523					      REPEAT	.CYCLES / 2
     18  f523		       ea		      nop
     17  f523					      REPEND
     18  f524		       ea		      nop
     17  f524					      REPEND
     18  f525		       ea		      nop
     17  f525					      REPEND
     18  f526		       ea		      nop
     17  f526					      REPEND
     18  f527		       ea		      nop
     17  f527					      REPEND
     18  f528		       ea		      nop
     17  f528					      REPEND
     18  f529		       ea		      nop
     19  f52a					      REPEND
   1133  f52a
   1134  f52a		       a5 b3		      LDA	Tmp3	;3
   1135  f52c		       85 09		      STA	COLUBK	;3
   1136  f52e		       a5 8c		      LDA	FrameCount0
   1137  f530		       29 01		      AND	#%00000001
   1138  f532		       d0 05		      BNE	OpDrawCache
   1139  f534		       4c f3 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1140  f537							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1141  f537
   1142  f537							;main scanline loop...
   1143  f537				   OpScanLoop
   1144  f537		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1145  f539
   1146  f539							;Start of next line!			
   1147  f539				   OpDrawCache		;63 Is the last line going to the top of the next frame?
   1148  f539
   1149  f539		       a5 80		      LDA	GRP0Cache	;3
   1150  f53b		       85 1b		      STA	GRP0	;3
   1151  f53d
   1152  f53d		       a5 84		      LDA	GRP1Cache	;3
   1153  f53f		       85 1c		      STA	GRP1	;3
   1154  f541
   1155  f541		       a5 85		      LDA	ENABLCache	;3
   1156  f543		       85 1f		      STA	ENABL	;3
   1157  f545
   1158  f545		       a5 86		      LDA	ENAM0Cache	;3
   1159  f547		       85 1d		      STA	ENAM0	;3
   1160  f549
   1161  f549		       a5 87		      LDA	ENAM1Cache	;3
   1162  f54b		       85 1e		      STA	ENAM1	;3
   1163  f54d
   1164  f54d		       a5 81		      LDA	PF0Cache	;3
   1165  f54f		       85 0d		      STA	PF0	;3
   1166  f551
   1167  f551		       a9 00		      LDA	#0	;2
   1168  f553							;STA PF0	     ;3
   1169  f553		       85 84		      STA	GRP1Cache	;3
   1170  f555		       85 86		      STA	ENAM0Cache	;3
   1171  f557		       85 85		      STA	ENABLCache	;3
   1172  f559		       85 87		      STA	ENAM1Cache	; 3
   1173  f55b		       85 0d		      STA	PF0	;3
   1174  f55d							;STA PF2	     ;3
   1175  f55d
   1176  f55d		       a5 83		      LDA	PF2Cache	;3
   1177  f55f		       85 0f		      STA	PF2	;3
   1178  f561
   1179  f561				   OpDrawCar0
   1180  f561		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1181  f563		       b0 04		      BCS	OpSkipDrawCar	;2
   1182  f565		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1183  f567		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1184  f569				   OpSkipDrawCar
   1185  f569
   1186  f569							;BEQ DrawTraffic3
   1187  f569				   OpDrawTraffic1		; 33
   1188  f569		       98		      TYA		; 2
   1189  f56a		       18		      CLC		; 2 
   1190  f56b		       65 95		      ADC	TrafficOffset1 + 1	;3
   1191  f56d		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1192  f56f		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1193  f571		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1194  f573		       4c 78 f5 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1195  f576				   OpEorOffsetWithCarry
   1196  f576		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1197  f578				   OpAfterEorOffsetWithCarry		;17
   1198  f578		       aa		      TAX		;2
   1199  f579		       bd 00 fe 	      LDA	AesTable,X	; 4
   1200  f57c		       c5 c1		      CMP	TrafficChance	;3
   1201  f57e		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1202  f580		       a9 ff		      LDA	#$FF	;2
   1203  f582		       85 86		      STA	ENAM0Cache	;3
   1204  f584				   OpFinishDrawTraffic1
   1205  f584
   1206  f584				   OpErasePF2
   1207  f584		       a9 00		      LDA	#0
   1208  f586		       85 0f		      STA	PF2
   1209  f588
   1210  f588				   OpDrawTraffic2		; 33
   1211  f588		       98		      TYA		; 2
   1212  f589		       18		      CLC		; 2 
   1213  f58a		       65 99		      ADC	TrafficOffset2 + 1	;3
   1214  f58c		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1215  f58e		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1216  f590		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1217  f592		       4c 97 f5 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1218  f595				   OpEorOffsetWithCarry2
   1219  f595		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1220  f597				   OpAfterEorOffsetWithCarry2		;17
   1221  f597		       aa		      TAX		;2
   1222  f598		       bd 00 fe 	      LDA	AesTable,X	; 4
   1223  f59b		       c5 c1		      CMP	TrafficChance	;3
   1224  f59d		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1225  f59f		       a9 02		      LDA	#%00000010	;2
   1226  f5a1		       85 85		      STA	ENABLCache	;3
   1227  f5a3				   OpFinishDrawTraffic2
   1228  f5a3
   1229  f5a3							;STA WSYNC ;65 / 137
   1230  f5a3
   1231  f5a3							; LDA Tmp0 ; Flicker this line if drawing car
   1232  f5a3							; BEQ FinishDrawTraffic4
   1233  f5a3				   OpDrawTraffic3		; 33
   1234  f5a3		       98		      TYA		; 2
   1235  f5a4		       18		      CLC		; 2 
   1236  f5a5		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1237  f5a7		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1238  f5a9		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1239  f5ab		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1240  f5ad		       4c b2 f5 	      JMP	OpAfterEorOffsetWithCarry3	; 3
   1241  f5b0				   OpEorOffsetWithCarry3
   1242  f5b0		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1243  f5b2				   OpAfterEorOffsetWithCarry3		;17
   1244  f5b2		       aa		      TAX		;2
   1245  f5b3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1246  f5b6		       c5 c1		      CMP	TrafficChance	;3
   1247  f5b8		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1248  f5ba		       a9 02		      LDA	#%00000010	;2
   1249  f5bc		       85 87		      STA	ENAM1Cache
   1250  f5be				   OpFinishDrawTraffic3
   1251  f5be
   1252  f5be				   OpDrawOponent		;26
   1253  f5be		       84 b0		      STY	Tmp0	;3
   1254  f5c0		       a4 d8		      LDY	OpponentLine	;3
   1255  f5c2		       c0 08		      CPY	#(CAR_START_LINE - 7)	;2
   1256  f5c4		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1257  f5c6				   OpDrawOpponent
   1258  f5c6		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1259  f5c8		       85 84		      STA	GRP1Cache	;3
   1260  f5ca		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1261  f5cc		       a4 b0		      LDY	Tmp0	;3
   1262  f5ce		       4c e8 f5 	      JMP	OpSkipDrawTraffic0	; Do not draw border to save cycles
   1263  f5d1				   OpSkipDrawOpponent
   1264  f5d1		       c6 d8		      DEC	OpponentLine	;5
   1265  f5d3		       a4 b0		      LDY	Tmp0	;3
   1266  f5d5
   1267  f5d5				   OpDrawTraffic0		; 21 2pe
   1268  f5d5		       98		      TYA		; 2
   1269  f5d6		       18		      CLC		; 2 
   1270  f5d7		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1271  f5d9		       29 08		      AND	#%00001000	;2
   1272  f5db		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1273  f5dd				   OpHasBorderP0
   1274  f5dd		       a9 f0		      LDA	#%11110000	; 2
   1275  f5df		       4c e4 f5 	      JMP	OpStoreBorderP0	; 3
   1276  f5e2				   OpHasNoBorderP0
   1277  f5e2		       a9 00		      LDA	#0	; 2
   1278  f5e4				   OpStoreBorderP0
   1279  f5e4		       85 81		      STA	PF0Cache	; 3
   1280  f5e6		       85 83		      STA	PF2Cache	; 3
   1281  f5e8
   1282  f5e8				   OpSkipDrawTraffic0
   1283  f5e8
   1284  f5e8				   OpWhileScanLoop
   1285  f5e8		       88		      DEY		;2
   1286  f5e9		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1287  f5eb		       4c 37 f5 	      JMP	OpScanLoop	;3
   1288  f5ee				   OpFinishScanLoop		; 7 209 of 222
   1289  f5ee		       4c a6 f6 	      JMP	FinishScanLoop
   1290  f5f1
   1291  f5f1							;main scanline loop...
   1292  f5f1				   ScanLoop
   1293  f5f1		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1294  f5f3
   1295  f5f3							;Start of next line!			
   1296  f5f3				   DrawCache		;63 Is the last line going to the top of the next frame?
   1297  f5f3		       a5 81		      LDA	PF0Cache	;3
   1298  f5f5		       85 0d		      STA	PF0	;3
   1299  f5f7
   1300  f5f7		       a5 80		      LDA	GRP0Cache	;3
   1301  f5f9		       85 1b		      STA	GRP0	;3
   1302  f5fb
   1303  f5fb		       a5 84		      LDA	GRP1Cache	;3
   1304  f5fd		       85 1c		      STA	GRP1	;3
   1305  f5ff
   1306  f5ff		       a5 86		      LDA	ENAM0Cache	;3
   1307  f601		       85 1d		      STA	ENAM0	;3
   1308  f603
   1309  f603		       a5 85		      LDA	ENABLCache	;3
   1310  f605		       85 1f		      STA	ENABL	;3
   1311  f607
   1312  f607		       a5 87		      LDA	ENAM1Cache	;3
   1313  f609		       85 1e		      STA	ENAM1	;3
   1314  f60b
   1315  f60b		       a5 83		      LDA	PF2Cache	;3
   1316  f60d		       85 0f		      STA	PF2	;3
   1317  f60f
   1318  f60f		       a9 00		      LDA	#0	;2
   1319  f611		       85 0d		      STA	PF0	;3
   1320  f613		       85 84		      STA	GRP1Cache	;3
   1321  f615		       85 85		      STA	ENABLCache	;3
   1322  f617		       85 86		      STA	ENAM0Cache	;3
   1323  f619		       85 87		      STA	ENAM1Cache	; 3
   1324  f61b		       85 0f		      STA	PF2	;3
   1325  f61d
   1326  f61d				   DrawCar0
   1327  f61d		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1328  f61f		       b0 04		      BCS	SkipDrawCar	;2
   1329  f621		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1330  f623		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1331  f625				   SkipDrawCar
   1332  f625
   1333  f625							;BEQ DrawTraffic3
   1334  f625				   DrawTraffic1 		; 33
   1335  f625		       98		      TYA		; 2
   1336  f626		       18		      CLC		; 2 
   1337  f627		       65 95		      ADC	TrafficOffset1 + 1	;3
   1338  f629		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1339  f62b		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1340  f62d		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1341  f62f		       4c 34 f6 	      JMP	AfterEorOffsetWithCarry	; 3
   1342  f632				   EorOffsetWithCarry
   1343  f632		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1344  f634				   AfterEorOffsetWithCarry		;17
   1345  f634		       aa		      TAX		;2
   1346  f635		       bd 00 fe 	      LDA	AesTable,X	; 4
   1347  f638		       c5 c1		      CMP	TrafficChance	;3
   1348  f63a		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1349  f63c		       a9 ff		      LDA	#$FF	;2
   1350  f63e		       85 86		      STA	ENAM0Cache	;3
   1351  f640				   FinishDrawTraffic1
   1352  f640
   1353  f640				   DrawTraffic2 		; 33
   1354  f640		       98		      TYA		; 2
   1355  f641		       18		      CLC		; 2 
   1356  f642		       65 99		      ADC	TrafficOffset2 + 1	;3
   1357  f644		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1358  f646		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1359  f648		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1360  f64a		       4c 4f f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1361  f64d				   EorOffsetWithCarry2
   1362  f64d		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1363  f64f				   AfterEorOffsetWithCarry2		;17
   1364  f64f		       aa		      TAX		;2
   1365  f650		       bd 00 fe 	      LDA	AesTable,X	; 4
   1366  f653		       c5 c1		      CMP	TrafficChance	;3
   1367  f655		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1368  f657		       a9 02		      LDA	#%00000010	;2
   1369  f659		       85 85		      STA	ENABLCache	;3
   1370  f65b				   FinishDrawTraffic2
   1371  f65b
   1372  f65b							;STA WSYNC ;65 / 137
   1373  f65b
   1374  f65b							; LDA Tmp0 ; Flicker this line if drawing car
   1375  f65b							; BEQ FinishDrawTraffic4
   1376  f65b				   DrawTraffic3 		; 33
   1377  f65b		       98		      TYA		; 2
   1378  f65c		       18		      CLC		; 2 
   1379  f65d		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1380  f65f		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1381  f661		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1382  f663		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1383  f665		       4c 6a f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1384  f668				   EorOffsetWithCarry3
   1385  f668		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1386  f66a				   AfterEorOffsetWithCarry3		;17
   1387  f66a		       aa		      TAX		;2
   1388  f66b		       bd 00 fe 	      LDA	AesTable,X	; 4
   1389  f66e		       c5 c1		      CMP	TrafficChance	;3
   1390  f670		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1391  f672		       a9 02		      LDA	#%00000010	;2
   1392  f674		       85 87		      STA	ENAM1Cache
   1393  f676				   FinishDrawTraffic3
   1394  f676
   1395  f676
   1396  f676				   DrawOponent		;26
   1397  f676		       84 b0		      STY	Tmp0	;3
   1398  f678		       a4 d8		      LDY	OpponentLine	;3
   1399  f67a		       c0 08		      CPY	#(CAR_START_LINE - 7)	;2
   1400  f67c		       b0 0b		      BCS	SkipDrawOpponent	;2
   1401  f67e				   DrawOpponent
   1402  f67e		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1403  f680		       85 84		      STA	GRP1Cache	;3
   1404  f682		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1405  f684		       a4 b0		      LDY	Tmp0	;3
   1406  f686		       4c a0 f6 	      JMP	SkipDrawTraffic0	; Do not draw border to save cycles
   1407  f689				   SkipDrawOpponent
   1408  f689		       c6 d8		      DEC	OpponentLine	;5
   1409  f68b		       a4 b0		      LDY	Tmp0	;3
   1410  f68d
   1411  f68d				   DrawTraffic0 		; 21 2pe
   1412  f68d		       98		      TYA		; 2
   1413  f68e		       18		      CLC		; 2 
   1414  f68f		       65 91		      ADC	TrafficOffset0 + 1	;3
   1415  f691		       29 08		      AND	#%00001000	;2
   1416  f693		       f0 05		      BEQ	HasNoBorderP0	;3
   1417  f695				   HasBorderP0
   1418  f695		       a9 f0		      LDA	#%11110000	; 2
   1419  f697		       4c 9c f6 	      JMP	StoreBorderP0	; 3
   1420  f69a				   HasNoBorderP0
   1421  f69a		       a9 00		      LDA	#0	; 2
   1422  f69c				   StoreBorderP0
   1423  f69c		       85 81		      STA	PF0Cache	; 3
   1424  f69e		       85 83		      STA	PF2Cache	; 3
   1425  f6a0
   1426  f6a0				   SkipDrawTraffic0
   1427  f6a0
   1428  f6a0				   WhileScanLoop
   1429  f6a0		       88		      DEY		;2
   1430  f6a1		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1431  f6a3		       4c f1 f5 	      JMP	ScanLoop	;3
   1432  f6a6				   FinishScanLoop		; 7 209 of 222
   1433  f6a6
   1434  f6a6		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1435  f6a8		       20 ea f7 	      JSR	LoadAll
   1436  f6ab		       85 02		      STA	WSYNC	; do stuff!
   1437  f6ad		       85 02		      STA	WSYNC
   1438  f6af		       85 02		      STA	WSYNC
   1439  f6b1							;42 cycles to use here
   1440  f6b1
   1441  f6b1				   PrepareOverscan
   1442  f6b1		       a9 02		      LDA	#2
   1443  f6b3		       85 02		      STA	WSYNC
   1444  f6b5		       85 01		      STA	VBLANK
   1445  f6b7
   1446  f6b7		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1447  f6b9		       8d 96 02 	      STA	TIM64T
   1448  f6bc
   1449  f6bc				   LeftSound		;41
   1450  f6bc		       a5 ba		      LDA	CountdownTimer	;3
   1451  f6be		       f0 1b		      BEQ	EngineOff	;2
   1452  f6c0		       a6 f4		      LDX	Gear
   1453  f6c2		       a5 8e		      LDA	Player0SpeedL	;3
   1454  f6c4		       4a		      LSR		;2
   1455  f6c5		       4a		      LSR		;2
   1456  f6c6		       4a		      LSR		;2
   1457  f6c7		       29 0f		      AND	#%00001111	;2
   1458  f6c9		       85 b0		      STA	Tmp0	;3
   1459  f6cb		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1460  f6ce		       38		      SEC		;2
   1461  f6cf		       e5 b0		      SBC	Tmp0	;3
   1462  f6d1		       85 17		      STA	AUDF0	;3
   1463  f6d3		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1464  f6d6		       85 15		      STA	AUDC0	;3
   1465  f6d8		       4c df f6 	      JMP	EndLeftSound	;3
   1466  f6db				   EngineOff
   1467  f6db		       a9 00		      LDA	#0
   1468  f6dd		       85 15		      STA	AUDC0
   1469  f6df
   1470  f6df				   EndLeftSound
   1471  f6df
   1472  f6df
   1473  f6df				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1474  f6df		       a5 d5		      LDA	ScoreFontColor	;3
   1475  f6e1		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1476  f6e3		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1477  f6e5		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1478  f6e7		       f0 29		      BEQ	PlayCheckpoint	;2
   1479  f6e9		       a5 b8		      LDA	CollisionCounter	;3
   1480  f6eb		       c9 e0		      CMP	#$E0	;2
   1481  f6ed		       b0 14		      BCS	PlayColision	;2
   1482  f6ef		       a5 d7		      LDA	NextCheckpoint	;3
   1483  f6f1		       38		      SEC		;2
   1484  f6f2		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1485  f6f4		       c9 02		      CMP	#$02	;2
   1486  f6f6		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1487  f6f8		       a5 ba		      LDA	CountdownTimer	; 3
   1488  f6fa		       f0 53		      BEQ	MuteRightSound	;2
   1489  f6fc		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1490  f6fe		       90 37		      BCC	PlayWarnTimeEnding	;4
   1491  f700		       4c 4f f7 	      JMP	MuteRightSound	;3
   1492  f703				   PlayColision
   1493  f703		       a9 1f		      LDA	#31
   1494  f705		       85 18		      STA	AUDF1
   1495  f707		       a9 08		      LDA	#8
   1496  f709		       85 16		      STA	AUDC1
   1497  f70b		       a9 08		      LDA	#8
   1498  f70d		       85 1a		      STA	AUDV1
   1499  f70f		       4c 53 f7 	      JMP	EndRightSound
   1500  f712
   1501  f712				   PlayCheckpoint
   1502  f712		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1503  f714		       4a		      LSR		;2
   1504  f715		       4a		      LSR		;2
   1505  f716		       4a		      LSR		;2
   1506  f717		       85 18		      STA	AUDF1	;3
   1507  f719		       a9 0c		      LDA	#12	;2
   1508  f71b		       85 16		      STA	AUDC1	;3
   1509  f71d		       a9 06		      LDA	#6	;2
   1510  f71f		       85 1a		      STA	AUDV1	;3
   1511  f721		       4c 53 f7 	      JMP	EndRightSound	;3
   1512  f724
   1513  f724				   PlayBeforeCheckpoint
   1514  f724		       a5 8c		      LDA	FrameCount0	;3
   1515  f726		       29 1c		      AND	#%00011100	;2
   1516  f728		       09 03		      ORA	#%00000011	;2
   1517  f72a		       85 18		      STA	AUDF1	;3
   1518  f72c		       a9 0c		      LDA	#12	;2
   1519  f72e		       85 16		      STA	AUDC1	;3
   1520  f730		       a9 03		      LDA	#3	;2
   1521  f732		       85 1a		      STA	AUDV1	;3
   1522  f734		       4c 53 f7 	      JMP	EndRightSound	;3
   1523  f737
   1524  f737				   PlayWarnTimeEnding
   1525  f737		       a5 8c		      LDA	FrameCount0	;3
   1526  f739		       29 04		      AND	#%00000100	;2
   1527  f73b		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1528  f73d		       18		      CLC		;2
   1529  f73e		       a9 0a		      LDA	#10	;2
   1530  f740		       65 ba		      ADC	CountdownTimer	;2
   1531  f742		       85 18		      STA	AUDF1	;3
   1532  f744		       a9 0c		      LDA	#12	;2
   1533  f746		       85 16		      STA	AUDC1	;3
   1534  f748		       a9 03		      LDA	#3	;2
   1535  f74a		       85 1a		      STA	AUDV1	;3
   1536  f74c		       4c 53 f7 	      JMP	EndRightSound	;3
   1537  f74f
   1538  f74f				   MuteRightSound
   1539  f74f		       a9 00		      LDA	#0
   1540  f751		       85 1a		      STA	AUDV1
   1541  f753				   EndRightSound
   1542  f753
   1543  f753							;Read Fire Button before, will make it start the game for now.
   1544  f753				   StartGame
   1545  f753		       a5 0c		      LDA	INPT4	;3
   1546  f755		       30 2b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1547  f757		       a5 c0		      LDA	GameStatus	;3
   1548  f759		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1549  f75b		       d0 25		      BNE	SkipGameStart
   1550  f75d		       a5 c5		      LDA	GameMode
   1551  f75f		       c9 10		      CMP	#MAX_GAME_MODE
   1552  f761		       d0 0b		      BNE	SetGameRunning
   1553  f763		       a9 00		      LDA	#0
   1554  f765		       85 c5		      STA	GameMode
   1555  f767		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1556  f769		       85 bc		      STA	SwitchDebounceCounter
   1557  f76b		       4c 82 f7 	      JMP	SkipGameStart
   1558  f76e				   SetGameRunning
   1559  f76e		       e6 c0		      INC	GameStatus
   1560  f770		       a9 00		      LDA	#0	;
   1561  f772		       85 8c		      STA	FrameCount0
   1562  f774		       85 8d		      STA	FrameCount1
   1563  f776		       a9 0a		      LDA	#10
   1564  f778		       85 19		      STA	AUDV0
   1565  f77a		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1566  f77c		       85 d5		      STA	ScoreFontColor
   1567  f77e		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1568  f780		       85 d6		      STA	ScoreFontColorHoldChange
   1569  f782				   SkipGameStart
   1570  f782
   1571  f782				   ReadSwitches
   1572  f782		       a6 bc		      LDX	SwitchDebounceCounter
   1573  f784		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1574  f786		       a9 01		      LDA	#%00000001
   1575  f788		       2c 82 02 	      BIT	SWCHB
   1576  f78b		       d0 07		      BNE	SkipReset
   1577  f78d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1578  f78f		       85 bc		      STA	SwitchDebounceCounter
   1579  f791		       4c c1 f7 	      JMP	OverScanWaitBeforeReset
   1580  f794				   SkipReset
   1581  f794
   1582  f794				   GameModeSelect
   1583  f794		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1584  f796		       d0 1c		      BNE	SkipGameSelect
   1585  f798		       20 16 f8 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1586  f79b				   ContinueGameSelect
   1587  f79b		       a9 02		      LDA	#%00000010
   1588  f79d		       2c 82 02 	      BIT	SWCHB
   1589  f7a0		       d0 12		      BNE	SkipGameSelect
   1590  f7a2		       a6 c5		      LDX	GameMode
   1591  f7a4		       e0 10		      CPX	#MAX_GAME_MODE
   1592  f7a6		       f0 04		      BEQ	ResetGameMode
   1593  f7a8		       e8		      INX
   1594  f7a9		       4c ae f7 	      JMP	StoreGameMode
   1595  f7ac				   ResetGameMode
   1596  f7ac		       a2 00		      LDX	#0
   1597  f7ae				   StoreGameMode
   1598  f7ae		       86 c5		      STX	GameMode
   1599  f7b0		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1600  f7b2		       85 bc		      STA	SwitchDebounceCounter
   1601  f7b4				   SkipGameSelect
   1602  f7b4		       4c b9 f7 	      JMP	EndReadSwitches
   1603  f7b7				   DecrementSwitchDebounceCounter
   1604  f7b7		       c6 bc		      DEC	SwitchDebounceCounter
   1605  f7b9				   EndReadSwitches
   1606  f7b9
   1607  f7b9				   OverScanWait
   1608  f7b9		       ad 84 02 	      LDA	INTIM
   1609  f7bc		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1610  f7be		       4c d2 f0 	      JMP	MainLoop
   1611  f7c1
   1612  f7c1				   OverScanWaitBeforeReset
   1613  f7c1		       ad 84 02 	      LDA	INTIM
   1614  f7c4		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1615  f7c6		       4c 10 f0 	      JMP	Start
   1616  f7c9
   1617  f7c9				   Subroutines
   1618  f7c9
   1619  f7c9				   ClearAll		; 52
   1620  f7c9		       a9 00		      LDA	#0	;2
   1621  f7cb		       85 1c		      STA	GRP1	;3
   1622  f7cd		       85 1f		      STA	ENABL	;3
   1623  f7cf		       85 1d		      STA	ENAM0	;3
   1624  f7d1		       85 1e		      STA	ENAM1	;3
   1625  f7d3		       85 84		      STA	GRP1Cache	;3
   1626  f7d5		       85 85		      STA	ENABLCache	;3
   1627  f7d7		       85 86		      STA	ENAM0Cache	;3
   1628  f7d9		       85 87		      STA	ENAM1Cache	;3
   1629  f7db
   1630  f7db				   ClearPF		; 26
   1631  f7db		       a9 00		      LDA	#0	;2
   1632  f7dd				   ClearPFSkipLDA0
   1633  f7dd		       85 0d		      STA	PF0	;3
   1634  f7df		       85 0e		      STA	PF1	;3
   1635  f7e1		       85 0f		      STA	PF2	;3	
   1636  f7e3		       85 81		      STA	PF0Cache	;3
   1637  f7e5		       85 82		      STA	PF1Cache	;3
   1638  f7e7		       85 83		      STA	PF2Cache	;3 
   1639  f7e9		       60		      RTS		;6
   1640  f7ea				   EndClearAll
   1641  f7ea
   1642  f7ea				   LoadAll		; 48
   1643  f7ea		       a5 81		      LDA	PF0Cache	;3
   1644  f7ec		       85 0d		      STA	PF0	;3
   1645  f7ee
   1646  f7ee		       a5 82		      LDA	PF1Cache	;3
   1647  f7f0		       85 0e		      STA	PF1	;3
   1648  f7f2
   1649  f7f2		       a5 83		      LDA	PF2Cache	;3
   1650  f7f4		       85 0f		      STA	PF2	;3
   1651  f7f6
   1652  f7f6		       a5 84		      LDA	GRP1Cache	;3
   1653  f7f8		       85 1c		      STA	GRP1	;3
   1654  f7fa
   1655  f7fa		       a5 85		      LDA	ENABLCache	;3
   1656  f7fc		       85 1f		      STA	ENABL	;3
   1657  f7fe
   1658  f7fe		       a5 86		      LDA	ENAM0Cache	;3
   1659  f800		       85 1d		      STA	ENAM0	;3
   1660  f802
   1661  f802		       a5 87		      LDA	ENAM1Cache	;3
   1662  f804		       85 1e		      STA	ENAM1	;3
   1663  f806
   1664  f806		       60		      RTS		;6
   1665  f807				   EndLoadAll
   1666  f807
   1667  f807				   NextDifficulty
   1668  f807		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1669  f809		       29 01		      AND	#%00000001
   1670  f80b		       d0 24		      BNE	CheckRandomDifficulty
   1671  f80d
   1672  f80d		       a5 c4		      LDA	CurrentDifficulty
   1673  f80f		       18		      CLC
   1674  f810		       69 01		      ADC	#1
   1675  f812		       29 03		      AND	#%00000011	; 0 to 3
   1676  f814		       85 c4		      STA	CurrentDifficulty
   1677  f816
   1678  f816				   ConfigureDifficulty
   1679  f816		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1680  f818		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1681  f81b		       85 c1		      STA	TrafficChance
   1682  f81d		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1683  f820		       85 c3		      STA	TrafficColor
   1684  f822
   1685  f822		       a5 c5		      LDA	GameMode	;
   1686  f824		       29 01		      AND	#%00000001
   1687  f826		       f0 03		      BEQ	UseNextDifficultyTime
   1688  f828		       4c 2c f8 	      JMP	StoreDifficultyTime
   1689  f82b				   UseNextDifficultyTime
   1690  f82b		       c8		      INY
   1691  f82c				   StoreDifficultyTime
   1692  f82c		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1693  f82f		       85 c2		      STA	CheckpointTime
   1694  f831
   1695  f831				   CheckRandomDifficulty
   1696  f831		       a5 c5		      LDA	GameMode
   1697  f833		       29 08		      AND	#%00001000	; Random difficulties
   1698  f835		       f0 09		      BEQ	ReturnFromNextDifficulty
   1699  f837				   RandomDifficulty
   1700  f837		       a6 8c		      LDX	FrameCount0
   1701  f839		       bd 00 fe 	      LDA	AesTable,X
   1702  f83c							;EOR TrafficChance, no need, lets make life simple
   1703  f83c		       29 3f		      AND	#%00111111
   1704  f83e		       85 c1		      STA	TrafficChance
   1705  f840
   1706  f840				   ReturnFromNextDifficulty
   1707  f840		       60		      RTS
   1708  f841				   EndNextDifficulty
   1709  f841
   1710  f841				   DefaultOffsets
   1711  f841		       a9 20		      LDA	#$20
   1712  f843		       85 96		      STA	TrafficOffset1 + 2
   1713  f845		       a9 40		      LDA	#$40
   1714  f847		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1715  f849		       a9 60		      LDA	#$60
   1716  f84b		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1717  f84d		       a9 80		      LDA	#$80
   1718  f84f		       60		      RTS
   1719  f850
   1720  f850				   PrintStaticText		; Preload X with the offset referent to StaticText
   1721  f850		       bd 00 ff 	      LDA	StaticText,X
   1722  f853		       85 d0		      STA	ScoreD0
   1723  f855		       e8		      INX
   1724  f856		       bd 00 ff 	      LDA	StaticText,X
   1725  f859		       85 d1		      STA	ScoreD1
   1726  f85b		       e8		      INX
   1727  f85c		       bd 00 ff 	      LDA	StaticText,X
   1728  f85f		       85 d2		      STA	ScoreD2
   1729  f861		       e8		      INX
   1730  f862		       bd 00 ff 	      LDA	StaticText,X
   1731  f865		       85 d3		      STA	ScoreD3
   1732  f867		       e8		      INX
   1733  f868		       bd 00 ff 	      LDA	StaticText,X
   1734  f86b		       85 d4		      STA	ScoreD4
   1735  f86d		       60		      RTS
   1736  f86e
   1737  f86e				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1738  f86e		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1739  f870		       85 d5		      STA	ScoreFontColor
   1740  f872		       a9 01		      LDA	#1
   1741  f874		       85 d6		      STA	ScoreFontColorHoldChange
   1742  f876
   1743  f876		       a5 8d		      LDA	FrameCount1
   1744  f878		       29 07		      AND	#%00000111
   1745  f87a		       85 b3		      STA	Tmp3
   1746  f87c							;0 is Zelda Name, (default)
   1747  f87c		       a9 01		      LDA	#1
   1748  f87e		       c5 b3		      CMP	Tmp3
   1749  f880		       f0 38		      BEQ	PrintZeldaDateLeft
   1750  f882
   1751  f882		       a9 02		      LDA	#2
   1752  f884		       c5 b3		      CMP	Tmp3
   1753  f886		       f0 23		      BEQ	PrintPolvinhosLeft
   1754  f888
   1755  f888		       a9 03		      LDA	#3
   1756  f88a		       c5 b3		      CMP	Tmp3
   1757  f88c		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1758  f88e
   1759  f88e		       a9 04		      LDA	#4
   1760  f890		       c5 b3		      CMP	Tmp3
   1761  f892		       f0 1c		      BEQ	PrintIvonneLeft
   1762  f894
   1763  f894		       a9 05		      LDA	#5
   1764  f896		       c5 b3		      CMP	Tmp3
   1765  f898		       f0 2a		      BEQ	PrintIvonneDateLeft
   1766  f89a
   1767  f89a		       a9 06		      LDA	#6
   1768  f89c		       c5 b3		      CMP	Tmp3
   1769  f89e		       f0 15		      BEQ	PrintArtLeft
   1770  f8a0
   1771  f8a0		       a9 07		      LDA	#7
   1772  f8a2		       c5 b3		      CMP	Tmp3
   1773  f8a4		       f0 23		      BEQ	PrintLeonardoLeft
   1774  f8a6
   1775  f8a6				   PrintZeldaLeft
   1776  f8a6		       a2 28		      LDX	#<ZeldaTextLeft
   1777  f8a8		       4c ce f8 	      JMP	ProcessPrintEasterEgg
   1778  f8ab				   PrintPolvinhosLeft
   1779  f8ab		       a2 3c		      LDX	#<PolvinhosTextLeft
   1780  f8ad		       4c ce f8 	      JMP	ProcessPrintEasterEgg
   1781  f8b0				   PrintIvonneLeft
   1782  f8b0		       a2 50		      LDX	#<IvonneTextLeft
   1783  f8b2		       4c ce f8 	      JMP	ProcessPrintEasterEgg
   1784  f8b5				   PrintArtLeft
   1785  f8b5		       a2 64		      LDX	#<PaperArtTextLeft
   1786  f8b7		       4c ce f8 	      JMP	ProcessPrintEasterEgg
   1787  f8ba
   1788  f8ba				   PrintZeldaDateLeft
   1789  f8ba		       a2 32		      LDX	#<ZeldaDateLeft
   1790  f8bc		       4c ce f8 	      JMP	ProcessPrintEasterEgg
   1791  f8bf				   PrintPolvinhosDateLeft
   1792  f8bf		       a2 46		      LDX	#<PolvinhosDateLeft
   1793  f8c1		       4c ce f8 	      JMP	ProcessPrintEasterEgg
   1794  f8c4				   PrintIvonneDateLeft
   1795  f8c4		       a2 5a		      LDX	#<IvonneDateLeft
   1796  f8c6		       4c ce f8 	      JMP	ProcessPrintEasterEgg
   1797  f8c9				   PrintLeonardoLeft
   1798  f8c9		       a2 6e		      LDX	#<LeonardoTextLeft
   1799  f8cb		       4c ce f8 	      JMP	ProcessPrintEasterEgg
   1800  f8ce
   1801  f8ce				   ProcessPrintEasterEgg
   1802  f8ce		       a5 8c		      LDA	FrameCount0	;3
   1803  f8d0		       29 01		      AND	#%00000001	;2
   1804  f8d2		       d0 03		      BNE	TranformIntoRightText
   1805  f8d4		       4c dc f8 	      JMP	PrintEasterEggText
   1806  f8d7				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1807  f8d7		       8a		      TXA
   1808  f8d8		       18		      CLC
   1809  f8d9		       69 05		      ADC	#HALF_TEXT_SIZE
   1810  f8db		       aa		      TAX
   1811  f8dc
   1812  f8dc				   PrintEasterEggText
   1813  f8dc		       20 50 f8 	      JSR	PrintStaticText
   1814  f8df		       60		      RTS
   1815  f8e0
   1816  f8e0				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1817  f8e0		       a2 00		      LDX	#0
   1818  f8e2		       a0 04		      LDY	#FONT_OFFSET
   1819  f8e4
   1820  f8e4				   ScoreLoop		; 20 
   1821  f8e4		       85 02		      STA	WSYNC	;2
   1822  f8e6
   1823  f8e6		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1824  f8e8		       85 0d		      STA	PF0	;3
   1825  f8ea
   1826  f8ea		       a5 82		      LDA	PF1Cache	;3
   1827  f8ec		       85 0e		      STA	PF1	;3
   1828  f8ee
   1829  f8ee		       a5 83		      LDA	PF2Cache	;3
   1830  f8f0		       85 0f		      STA	PF2	;3
   1831  f8f2
   1832  f8f2				   DrawScoreD0		; 15
   1833  f8f2		       a6 d0		      LDX	ScoreD0	; 3
   1834  f8f4		       bd 00 fd 	      LDA	Font,X	;4
   1835  f8f7		       85 81		      STA	PF0Cache	;3
   1836  f8f9		       c6 d0		      DEC	ScoreD0	;5
   1837  f8fb
   1838  f8fb				   DrawScoreD1		; 23	
   1839  f8fb		       a6 d1		      LDX	ScoreD1	; 3
   1840  f8fd		       bd 00 fd 	      LDA	Font,X	;4
   1841  f900		       0a		      ASL		;2
   1842  f901		       0a		      ASL		;2
   1843  f902		       0a		      ASL		;2
   1844  f903		       0a		      ASL		;2
   1845  f904		       85 82		      STA	PF1Cache	;3
   1846  f906		       c6 d1		      DEC	ScoreD1	;5
   1847  f908
   1848  f908				   DrawScoreD2		; 20
   1849  f908		       a6 d2		      LDX	ScoreD2	; 3
   1850  f90a		       bd 00 fd 	      LDA	Font,X	;4
   1851  f90d		       29 0f		      AND	#%00001111	;2
   1852  f90f		       05 82		      ORA	PF1Cache	;3
   1853  f911		       85 82		      STA	PF1Cache	;3
   1854  f913		       c6 d2		      DEC	ScoreD2	;5
   1855  f915
   1856  f915				   DrawScoreD3		; 23
   1857  f915		       a6 d3		      LDX	ScoreD3	; 3
   1858  f917		       bd 00 fd 	      LDA	Font,X	;4
   1859  f91a		       4a		      LSR		;2
   1860  f91b		       4a		      LSR		;2
   1861  f91c		       4a		      LSR		;2
   1862  f91d		       4a		      LSR		;2
   1863  f91e		       85 83		      STA	PF2Cache	;3
   1864  f920		       c6 d3		      DEC	ScoreD3	;5
   1865  f922
   1866  f922				   DrawScoreD4		; 20
   1867  f922		       a6 d4		      LDX	ScoreD4	; 3
   1868  f924		       bd 00 fd 	      LDA	Font,X	;4
   1869  f927		       29 f0		      AND	#%11110000	;2
   1870  f929		       05 83		      ORA	PF2Cache	;3
   1871  f92b		       85 83		      STA	PF2Cache	;3
   1872  f92d		       c6 d4		      DEC	ScoreD4	;5
   1873  f92f
   1874  f92f
   1875  f92f		       88		      DEY		;2
   1876  f930		       10 b2		      BPL	ScoreLoop	;4
   1877  f932
   1878  f932		       85 02		      STA	WSYNC
   1879  f934		       20 ea f7 	      JSR	LoadAll
   1880  f937		       60		      RTS		; 6
   1881  f938
   1882  f938				   PrintRightDecimalDigits
   1883  f938		       b9 00 00 	      LDA	0,Y
   1884  f93b		       4a		      LSR
   1885  f93c		       4a		      LSR
   1886  f93d		       4a		      LSR
   1887  f93e		       4a		      LSR
   1888  f93f		       aa		      TAX
   1889  f940		       bd be fd 	      LDA	FontLookup,X	;4
   1890  f943		       85 d2		      STA	ScoreD2	;3
   1891  f945
   1892  f945		       b9 00 00 	      LDA	0,Y
   1893  f948		       29 0f		      AND	#%00001111
   1894  f94a		       aa		      TAX
   1895  f94b		       bd be fd 	      LDA	FontLookup,X	;4
   1896  f94e		       85 d3		      STA	ScoreD3	;3
   1897  f950
   1898  f950		       c8		      INY
   1899  f951		       b9 00 00 	      LDA	0,Y
   1900  f954		       4a		      LSR
   1901  f955		       4a		      LSR
   1902  f956		       4a		      LSR
   1903  f957		       4a		      LSR
   1904  f958		       aa		      TAX
   1905  f959		       bd be fd 	      LDA	FontLookup,X	;4
   1906  f95c		       85 d0		      STA	ScoreD0	;3
   1907  f95e
   1908  f95e		       b9 00 00 	      LDA	0,Y
   1909  f961		       29 0f		      AND	#%00001111
   1910  f963		       aa		      TAX
   1911  f964		       bd be fd 	      LDA	FontLookup,X	;4
   1912  f967		       85 d1		      STA	ScoreD1	;3
   1913  f969
   1914  f969		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1915  f96b		       85 d4		      STA	ScoreD4
   1916  f96d		       60		      RTS
   1917  f96e
   1918  f96e				   PrintLastLeftDecimalDigits
   1919  f96e		       b9 00 00 	      LDA	0,Y
   1920  f971		       4a		      LSR
   1921  f972		       4a		      LSR
   1922  f973		       4a		      LSR
   1923  f974		       4a		      LSR
   1924  f975		       aa		      TAX
   1925  f976		       bd be fd 	      LDA	FontLookup,X	;4
   1926  f979		       85 d3		      STA	ScoreD3	;3
   1927  f97b		       b9 00 00 	      LDA	0,Y
   1928  f97e		       29 0f		      AND	#%00001111
   1929  f980		       aa		      TAX
   1930  f981		       bd be fd 	      LDA	FontLookup,X	;4
   1931  f984		       85 d4		      STA	ScoreD4	;3
   1932  f986		       60		      RTS
   1933  f987
   1934  f987				   PrintZerosLeft
   1935  f987		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1936  f989		       85 d2		      STA	ScoreD2
   1937  f98b		       85 d3		      STA	ScoreD3
   1938  f98d		       85 d4		      STA	ScoreD4
   1939  f98f		       60		      RTS
   1940  f990
   1941  f990				   DrawGameOverScoreLine
   1942  f990		       85 02		      STA	WSYNC
   1943  f992		       20 e0 f8 	      JSR	PrintScore
   1944  f995		       85 02		      STA	WSYNC
   1945  f997		       85 02		      STA	WSYNC
   1946  f999		       20 db f7 	      JSR	ClearPF
   1947  f99c		       60		      RTS
   1948  f99d
   1949  f99d				   DrawGameOverScreenLeft
   1950  f99d		       85 02		      STA	WSYNC
   1951  f99f		       20 db f7 	      JSR	ClearPF
   1952  f9a2
   1953  f9a2				   DrawBcdScoreLeft
   1954  f9a2		       20 f1 fa 	      JSR	Sleep8Lines
   1955  f9a5		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1956  f9a7		       85 06		      STA	COLUP0
   1957  f9a9		       85 02		      STA	WSYNC
   1958  f9ab		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1959  f9ad		       85 d0		      STA	ScoreD0
   1960  f9af
   1961  f9af		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1962  f9b1		       85 d1		      STA	ScoreD1
   1963  f9b3
   1964  f9b3		       a5 b7		      LDA	ScoreBcd3
   1965  f9b5		       29 0f		      AND	#%00001111
   1966  f9b7		       aa		      TAX
   1967  f9b8		       bd be fd 	      LDA	FontLookup,X	;4
   1968  f9bb		       85 d2		      STA	ScoreD2	;3
   1969  f9bd
   1970  f9bd		       a0 b6		      LDY	#ScoreBcd2
   1971  f9bf		       20 6e f9 	      JSR	PrintLastLeftDecimalDigits
   1972  f9c2
   1973  f9c2		       20 90 f9 	      JSR	DrawGameOverScoreLine
   1974  f9c5
   1975  f9c5				   DrawTimerLeft
   1976  f9c5		       20 f1 fa 	      JSR	Sleep8Lines
   1977  f9c8		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1978  f9ca		       85 06		      STA	COLUP0
   1979  f9cc		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1980  f9ce		       85 d0		      STA	ScoreD0
   1981  f9d0		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1982  f9d2		       85 d1		      STA	ScoreD1
   1983  f9d4		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1984  f9d6		       85 d2		      STA	ScoreD2
   1985  f9d8		       a0 bf		      LDY	#TimeBcd2
   1986  f9da		       85 02		      STA	WSYNC
   1987  f9dc		       20 6e f9 	      JSR	PrintLastLeftDecimalDigits
   1988  f9df		       20 90 f9 	      JSR	DrawGameOverScoreLine
   1989  f9e2
   1990  f9e2				   DrawGlideTimerLeft
   1991  f9e2		       20 f1 fa 	      JSR	Sleep8Lines
   1992  f9e5		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1993  f9e7		       85 06		      STA	COLUP0
   1994  f9e9		       85 02		      STA	WSYNC
   1995  f9eb		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1996  f9ed		       85 d0		      STA	ScoreD0
   1997  f9ef		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1998  f9f1		       85 d1		      STA	ScoreD1
   1999  f9f3		       20 87 f9 	      JSR	PrintZerosLeft
   2000  f9f6		       20 90 f9 	      JSR	DrawGameOverScoreLine
   2001  f9f9
   2002  f9f9				   DrawHitCountLeft
   2003  f9f9		       20 f1 fa 	      JSR	Sleep8Lines
   2004  f9fc		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2005  f9fe		       85 06		      STA	COLUP0
   2006  fa00		       85 02		      STA	WSYNC
   2007  fa02		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2008  fa04		       85 d0		      STA	ScoreD0
   2009  fa06		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2010  fa08		       85 d1		      STA	ScoreD1
   2011  fa0a		       20 87 f9 	      JSR	PrintZerosLeft
   2012  fa0d		       20 90 f9 	      JSR	DrawGameOverScoreLine
   2013  fa10
   2014  fa10				   DrawCheckpointCountLeft
   2015  fa10		       20 f1 fa 	      JSR	Sleep8Lines
   2016  fa13		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2017  fa15		       85 06		      STA	COLUP0
   2018  fa17		       85 02		      STA	WSYNC
   2019  fa19		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2020  fa1b		       85 d0		      STA	ScoreD0
   2021  fa1d		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2022  fa1f		       85 d1		      STA	ScoreD1
   2023  fa21		       20 87 f9 	      JSR	PrintZerosLeft
   2024  fa24		       20 90 f9 	      JSR	DrawGameOverScoreLine
   2025  fa27
   2026  fa27				   DrawGameVersionLeft
   2027  fa27		       20 f1 fa 	      JSR	Sleep8Lines
   2028  fa2a		       a9 49		      LDA	#VERSION_COLOR
   2029  fa2c		       85 06		      STA	COLUP0
   2030  fa2e
   2031  fa2e		       a5 c5		      LDA	GameMode
   2032  fa30		       aa		      TAX
   2033  fa31		       bd be fd 	      LDA	FontLookup,X	;4
   2034  fa34		       85 d0		      STA	ScoreD0	;3
   2035  fa36
   2036  fa36		       a5 f0		      LDA	CurrentCarId
   2037  fa38		       aa		      TAX
   2038  fa39		       bd be fd 	      LDA	FontLookup,X	;4
   2039  fa3c		       85 d1		      STA	ScoreD1	;3
   2040  fa3e
   2041  fa3e		       a5 dd		      LDA	StartSWCHB
   2042  fa40		       29 40		      AND	#%01000000	; P0 difficulty
   2043  fa42		       49 40		      EOR	#%01000000	; Reverse bytes
   2044  fa44		       2a		      ROL
   2045  fa45		       2a		      ROL
   2046  fa46		       2a		      ROL
   2047  fa47		       18		      CLC
   2048  fa48		       69 0a		      ADC	#10
   2049  fa4a		       aa		      TAX
   2050  fa4b		       bd be fd 	      LDA	FontLookup,X	;4
   2051  fa4e		       85 d2		      STA	ScoreD2	;3
   2052  fa50
   2053  fa50		       a5 dd		      LDA	StartSWCHB
   2054  fa52		       29 80		      AND	#%10000000	; P0 difficulty
   2055  fa54		       49 80		      EOR	#%10000000	; Reverse bytes
   2056  fa56		       2a		      ROL
   2057  fa57		       2a		      ROL
   2058  fa58		       18		      CLC
   2059  fa59		       69 0a		      ADC	#10
   2060  fa5b		       aa		      TAX
   2061  fa5c		       bd be fd 	      LDA	FontLookup,X	;4
   2062  fa5f		       85 d3		      STA	ScoreD3	;3
   2063  fa61
   2064  fa61		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2065  fa63		       85 d4		      STA	ScoreD4
   2066  fa65
   2067  fa65		       20 90 f9 	      JSR	DrawGameOverScoreLine
   2068  fa68
   2069  fa68		       4c ce fa 	      JMP	FinalizeDrawGameOver
   2070  fa6b
   2071  fa6b				   DrawGameOverScreenRight
   2072  fa6b		       85 02		      STA	WSYNC
   2073  fa6d		       20 db f7 	      JSR	ClearPF
   2074  fa70
   2075  fa70				   DrawBcdScoreRight
   2076  fa70		       20 f1 fa 	      JSR	Sleep8Lines
   2077  fa73		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2078  fa75		       85 07		      STA	COLUP1
   2079  fa77		       85 02		      STA	WSYNC
   2080  fa79		       a0 b4		      LDY	#ScoreBcd0
   2081  fa7b		       20 38 f9 	      JSR	PrintRightDecimalDigits
   2082  fa7e
   2083  fa7e		       20 90 f9 	      JSR	DrawGameOverScoreLine
   2084  fa81
   2085  fa81				   DrawTimerRight
   2086  fa81		       20 f1 fa 	      JSR	Sleep8Lines
   2087  fa84		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2088  fa86		       85 07		      STA	COLUP1
   2089  fa88		       a0 bd		      LDY	#TimeBcd0
   2090  fa8a		       20 38 f9 	      JSR	PrintRightDecimalDigits
   2091  fa8d
   2092  fa8d		       20 90 f9 	      JSR	DrawGameOverScoreLine
   2093  fa90				   DrawGlideTimeRight
   2094  fa90		       20 f1 fa 	      JSR	Sleep8Lines
   2095  fa93		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2096  fa95		       85 07		      STA	COLUP1
   2097  fa97		       a0 cd		      LDY	#GlideTimeBcd0
   2098  fa99		       20 38 f9 	      JSR	PrintRightDecimalDigits
   2099  fa9c		       20 90 f9 	      JSR	DrawGameOverScoreLine
   2100  fa9f
   2101  fa9f				   DrawHitCountRight
   2102  fa9f		       20 f1 fa 	      JSR	Sleep8Lines
   2103  faa2		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2104  faa4		       85 07		      STA	COLUP1
   2105  faa6		       a0 cb		      LDY	#HitCountBcd0
   2106  faa8		       20 38 f9 	      JSR	PrintRightDecimalDigits
   2107  faab		       20 90 f9 	      JSR	DrawGameOverScoreLine
   2108  faae
   2109  faae				   DrawCheckpointCountRight
   2110  faae		       20 f1 fa 	      JSR	Sleep8Lines
   2111  fab1		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2112  fab3		       85 07		      STA	COLUP1
   2113  fab5		       a0 db		      LDY	#CheckpointBcd0
   2114  fab7		       20 38 f9 	      JSR	PrintRightDecimalDigits
   2115  faba		       20 90 f9 	      JSR	DrawGameOverScoreLine
   2116  fabd
   2117  fabd				   DrawVersionRight
   2118  fabd		       20 f1 fa 	      JSR	Sleep8Lines
   2119  fac0		       a9 49		      LDA	#VERSION_COLOR
   2120  fac2		       85 07		      STA	COLUP1
   2121  fac4		       85 02		      STA	WSYNC
   2122  fac6		       a2 78		      LDX	#<VersionText
   2123  fac8		       20 50 f8 	      JSR	PrintStaticText
   2124  facb		       20 90 f9 	      JSR	DrawGameOverScoreLine
   2125  face
   2126  face				   FinalizeDrawGameOver
   2127  face		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2128  fad0		       85 d5		      STA	ScoreFontColor
   2129  fad2		       20 e8 fa 	      JSR	Sleep4Lines
   2130  fad5		       20 f8 fa 	      JSR	Sleep32Lines
   2131  fad8		       20 f8 fa 	      JSR	Sleep32Lines
   2132  fadb		       4c b1 f6 	      JMP	PrepareOverscan
   2133  fade
   2134  fade				   WaitForVblankEnd
   2135  fade		       ad 84 02 	      LDA	INTIM
   2136  fae1		       d0 fb		      BNE	WaitForVblankEnd
   2137  fae3		       85 02		      STA	WSYNC
   2138  fae5		       85 01		      STA	VBLANK
   2139  fae7		       60		      RTS
   2140  fae8
   2141  fae8				   Sleep4Lines
   2142  fae8		       85 02		      STA	WSYNC
   2143  faea		       85 02		      STA	WSYNC
   2144  faec		       85 02		      STA	WSYNC
   2145  faee		       85 02		      STA	WSYNC
   2146  faf0		       60		      RTS
   2147  faf1
   2148  faf1				   Sleep8Lines
   2149  faf1		       20 e8 fa 	      JSR	Sleep4Lines
   2150  faf4		       20 e8 fa 	      JSR	Sleep4Lines
   2151  faf7		       60		      RTS
   2152  faf8
   2153  faf8				   Sleep32Lines
   2154  faf8		       20 f1 fa 	      JSR	Sleep8Lines
   2155  fafb		       20 f1 fa 	      JSR	Sleep8Lines
   2156  fafe		       20 f1 fa 	      JSR	Sleep8Lines
   2157  fb01		       20 f1 fa 	      JSR	Sleep8Lines
   2158  fb04		       60		      RTS
   2159  fb05
   2160  fb05							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2161  fc00					      org	$FC00
   2162  fc00				   QrCode1
   2163  fc00		       1f		      .byte.b	#%00011111
   2164  fc01		       10		      .byte.b	#%00010000
   2165  fc02		       17		      .byte.b	#%00010111
   2166  fc03		       17		      .byte.b	#%00010111
   2167  fc04		       17		      .byte.b	#%00010111
   2168  fc05		       10		      .byte.b	#%00010000
   2169  fc06		       1f		      .byte.b	#%00011111
   2170  fc07		       00		      .byte.b	#%00000000
   2171  fc08		       17		      .byte.b	#%00010111
   2172  fc09		       10		      .byte.b	#%00010000
   2173  fc0a		       1d		      .byte.b	#%00011101
   2174  fc0b		       16		      .byte.b	#%00010110
   2175  fc0c		       03		      .byte.b	#%00000011
   2176  fc0d		       19		      .byte.b	#%00011001
   2177  fc0e		       13		      .byte.b	#%00010011
   2178  fc0f		       1c		      .byte.b	#%00011100
   2179  fc10		       0b		      .byte.b	#%00001011
   2180  fc11		       00		      .byte.b	#%00000000
   2181  fc12		       1f		      .byte.b	#%00011111
   2182  fc13		       10		      .byte.b	#%00010000
   2183  fc14		       17		      .byte.b	#%00010111
   2184  fc15		       17		      .byte.b	#%00010111
   2185  fc16		       17		      .byte.b	#%00010111
   2186  fc17		       10		      .byte.b	#%00010000
   2187  fc18		       1f		      .byte.b	#%00011111
   2188  fc19
   2189  fc19				   QrCode2
   2190  fc19		       c3		      .byte.b	#%11000011
   2191  fc1a		       9a		      .byte.b	#%10011010
   2192  fc1b		       82		      .byte.b	#%10000010
   2193  fc1c		       da		      .byte.b	#%11011010
   2194  fc1d		       aa		      .byte.b	#%10101010
   2195  fc1e		       ca		      .byte.b	#%11001010
   2196  fc1f		       f3		      .byte.b	#%11110011
   2197  fc20		       78		      .byte.b	#%01111000
   2198  fc21		       df		      .byte.b	#%11011111
   2199  fc22		       fc		      .byte.b	#%11111100
   2200  fc23		       c7		      .byte.b	#%11000111
   2201  fc24		       98		      .byte.b	#%10011000
   2202  fc25		       23		      .byte.b	#%00100011
   2203  fc26		       b9		      .byte.b	#%10111001
   2204  fc27		       d2		      .byte.b	#%11010010
   2205  fc28		       30		      .byte.b	#%00110000
   2206  fc29		       eb		      .byte.b	#%11101011
   2207  fc2a		       28		      .byte.b	#%00101000
   2208  fc2b		       ab		      .byte.b	#%10101011
   2209  fc2c		       72		      .byte.b	#%01110010
   2210  fc2d		       fa		      .byte.b	#%11111010
   2211  fc2e		       7a		      .byte.b	#%01111010
   2212  fc2f		       32		      .byte.b	#%00110010
   2213  fc30		       3a		      .byte.b	#%00111010
   2214  fc31		       63		      .byte.b	#%01100011
   2215  fc32
   2216  fc32				   QrCode3
   2217  fc32		       98		      .byte.b	#%10011000
   2218  fc33		       c3		      .byte.b	#%11000011
   2219  fc34		       39		      .byte.b	#%00111001
   2220  fc35		       34		      .byte.b	#%00110100
   2221  fc36		       ff		      .byte.b	#%11111111
   2222  fc37		       71		      .byte.b	#%01110001
   2223  fc38		       d5		      .byte.b	#%11010101
   2224  fc39		       d1		      .byte.b	#%11010001
   2225  fc3a		       5f		      .byte.b	#%01011111
   2226  fc3b		       26		      .byte.b	#%00100110
   2227  fc3c		       2d		      .byte.b	#%00101101
   2228  fc3d		       e9		      .byte.b	#%11101001
   2229  fc3e		       d6		      .byte.b	#%11010110
   2230  fc3f		       26		      .byte.b	#%00100110
   2231  fc40		       ba		      .byte.b	#%10111010
   2232  fc41		       03		      .byte.b	#%00000011
   2233  fc42		       dd		      .byte.b	#%11011101
   2234  fc43		       e0		      .byte.b	#%11100000
   2235  fc44		       57		      .byte.b	#%01010111
   2236  fc45		       14		      .byte.b	#%00010100
   2237  fc46		       35		      .byte.b	#%00110101
   2238  fc47		       e5		      .byte.b	#%11100101
   2239  fc48		       b5		      .byte.b	#%10110101
   2240  fc49		       d4		      .byte.b	#%11010100
   2241  fc4a		       97		      .byte.b	#%10010111
   2242  fc4b
   2243  fc4b				   QrCode4
   2244  fc4b		       09		      .byte.b	#%00001001
   2245  fc4c		       0e		      .byte.b	#%00001110
   2246  fc4d		       0f		      .byte.b	#%00001111
   2247  fc4e		       0c		      .byte.b	#%00001100
   2248  fc4f		       0c		      .byte.b	#%00001100
   2249  fc50		       08		      .byte.b	#%00001000
   2250  fc51		       08		      .byte.b	#%00001000
   2251  fc52		       06		      .byte.b	#%00000110
   2252  fc53		       06		      .byte.b	#%00000110
   2253  fc54		       0b		      .byte.b	#%00001011
   2254  fc55		       0f		      .byte.b	#%00001111
   2255  fc56		       04		      .byte.b	#%00000100
   2256  fc57		       08		      .byte.b	#%00001000
   2257  fc58		       0f		      .byte.b	#%00001111
   2258  fc59		       09		      .byte.b	#%00001001
   2259  fc5a		       07		      .byte.b	#%00000111
   2260  fc5b		       05		      .byte.b	#%00000101
   2261  fc5c		       00		      .byte.b	#%00000000
   2262  fc5d		       0f		      .byte.b	#%00001111
   2263  fc5e		       08		      .byte.b	#%00001000
   2264  fc5f		       0b		      .byte.b	#%00001011
   2265  fc60		       0b		      .byte.b	#%00001011
   2266  fc61		       0b		      .byte.b	#%00001011
   2267  fc62		       08		      .byte.b	#%00001000
   2268  fc63		       0f		      .byte.b	#%00001111
   2269  fc64
   2270  fc64							; Moved here because of rom space.
   2271  fc64							; The only SBR in constants space
   2272  fc64				   DrawQrCode
   2273  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2274  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2275  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2276  fc6a		       85 0a		      STA	CTRLPF
   2277  fc6c		       20 c9 f7 	      JSR	ClearAll	; To be 100 sure!
   2278  fc6f		       ad 82 02 	      LDA	SWCHB
   2279  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2280  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2281  fc76		       86 09		      STX	COLUBK
   2282  fc78		       84 08		      STY	COLUPF
   2283  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2284  fc7d				   StoreReversedQrCode
   2285  fc7d		       86 08		      STX	COLUPF
   2286  fc7f		       84 09		      STY	COLUBK
   2287  fc81
   2288  fc81				   ContinueQrCode
   2289  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2290  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2291  fc85		       20 de fa 	      JSR	WaitForVblankEnd
   2292  fc88		       20 f1 fa 	      JSR	Sleep8Lines
   2293  fc8b		       20 f1 fa 	      JSR	Sleep8Lines
   2294  fc8e		       20 f1 fa 	      JSR	Sleep8Lines
   2295  fc91
   2296  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2297  fc91		       85 02		      STA	WSYNC
   2298  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2299  fc96		       85 0e		      STA	PF1	;3
   2300  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2301  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2303  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2304  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2305  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2306  fcb3		       85 0e		      STA	PF1	;3
   2307  fcb5
   2308  fcb5		       ca		      DEX		;2
   2309  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2310  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2311  fcba		       88		      DEY		;2
   2312  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2313  fcbd
   2314  fcbd				   EndQrCodeLoop
   2315  fcbd		       85 02		      STA	WSYNC	;
   2316  fcbf		       a9 00		      LDA	#0
   2317  fcc1		       85 0e		      STA	PF1	;3
   2318  fcc3		       85 0f		      STA	PF2	;3
   2319  fcc5
   2320  fcc5		       20 f8 fa 	      JSR	Sleep32Lines
   2321  fcc8		       4c b1 f6 	      JMP	PrepareOverscan
   2322  fccb
   2323  fd00					      org	$FD00
   2324  fd00				   Font
   2325  fd00				   C0
   2326  fd00		       e7		      .byte.b	#%11100111	;
   2327  fd01		       a5		      .byte.b	#%10100101	; 
   2328  fd02		       a5		      .byte.b	#%10100101	; 
   2329  fd03		       a5		      .byte.b	#%10100101	; 
   2330  fd04		       e7		      .byte.b	#%11100111	;	
   2331  fd05				   C1
   2332  fd05		       e7		      .byte.b	#%11100111	;
   2333  fd06		       42		      .byte.b	#%01000010	; 
   2334  fd07		       42		      .byte.b	#%01000010	; 
   2335  fd08		       42		      .byte.b	#%01000010	; 
   2336  fd09		       66		      .byte.b	#%01100110	;
   2337  fd0a				   C2
   2338  fd0a		       e7		      .byte.b	#%11100111	;
   2339  fd0b		       24		      .byte.b	#%00100100	; 
   2340  fd0c		       e7		      .byte.b	#%11100111	; 
   2341  fd0d		       81		      .byte.b	#%10000001	; 
   2342  fd0e		       e7		      .byte.b	#%11100111	;
   2343  fd0f				   C3
   2344  fd0f		       e7		      .byte.b	#%11100111	;
   2345  fd10		       81		      .byte.b	#%10000001	; 
   2346  fd11		       e7		      .byte.b	#%11100111	; 
   2347  fd12		       81		      .byte.b	#%10000001	; 
   2348  fd13		       e7		      .byte.b	#%11100111	;
   2349  fd14				   C4
   2350  fd14		       81		      .byte.b	#%10000001	;
   2351  fd15		       81		      .byte.b	#%10000001	; 
   2352  fd16		       e7		      .byte.b	#%11100111	; 
   2353  fd17		       a5		      .byte.b	#%10100101	; 
   2354  fd18		       a5		      .byte.b	#%10100101	;
   2355  fd19				   C5
   2356  fd19		       e7		      .byte.b	#%11100111	;
   2357  fd1a		       81		      .byte.b	#%10000001	; 
   2358  fd1b		       e7		      .byte.b	#%11100111	; 
   2359  fd1c		       24		      .byte.b	#%00100100	; 
   2360  fd1d		       e7		      .byte.b	#%11100111	;
   2361  fd1e				   C6
   2362  fd1e		       e7		      .byte.b	#%11100111	;
   2363  fd1f		       a5		      .byte.b	#%10100101	; 
   2364  fd20		       e7		      .byte.b	#%11100111	; 
   2365  fd21		       24		      .byte.b	#%00100100	; 
   2366  fd22		       e7		      .byte.b	#%11100111	;
   2367  fd23				   C7
   2368  fd23		       81		      .byte.b	#%10000001	;
   2369  fd24		       81		      .byte.b	#%10000001	; 
   2370  fd25		       81		      .byte.b	#%10000001	; 
   2371  fd26		       81		      .byte.b	#%10000001	; 
   2372  fd27		       e7		      .byte.b	#%11100111	;
   2373  fd28				   C8
   2374  fd28		       e7		      .byte.b	#%11100111	;
   2375  fd29		       a5		      .byte.b	#%10100101	; 
   2376  fd2a		       e7		      .byte.b	#%11100111	; 
   2377  fd2b		       a5		      .byte.b	#%10100101	; 
   2378  fd2c		       e7		      .byte.b	#%11100111	;
   2379  fd2d				   C9
   2380  fd2d		       e7		      .byte.b	#%11100111	;
   2381  fd2e		       81		      .byte.b	#%10000001	; 
   2382  fd2f		       e7		      .byte.b	#%11100111	; 
   2383  fd30		       a5		      .byte.b	#%10100101	; 
   2384  fd31		       e7		      .byte.b	#%11100111	;
   2385  fd32				   CA
   2386  fd32		       a5		      .byte.b	#%10100101	;
   2387  fd33		       a5		      .byte.b	#%10100101	; 
   2388  fd34		       e7		      .byte.b	#%11100111	; 
   2389  fd35		       a5		      .byte.b	#%10100101	; 
   2390  fd36		       e7		      .byte.b	#%11100111	;
   2391  fd37				   CB
   2392  fd37		       66		      .byte.b	#%01100110	;
   2393  fd38		       a5		      .byte.b	#%10100101	; 
   2394  fd39		       66		      .byte.b	#%01100110	; 
   2395  fd3a		       a5		      .byte.b	#%10100101	;
   2396  fd3b		       66		      .byte.b	#%01100110	;
   2397  fd3c				   CC
   2398  fd3c		       e7		      .byte.b	#%11100111	;
   2399  fd3d		       24		      .byte.b	#%00100100	; 
   2400  fd3e		       24		      .byte.b	#%00100100	; 
   2401  fd3f		       24		      .byte.b	#%00100100	;
   2402  fd40		       e7		      .byte.b	#%11100111	;
   2403  fd41
   2404  fd41				   CD
   2405  fd41		       66		      .byte.b	#%01100110	;
   2406  fd42		       a5		      .byte.b	#%10100101	; 
   2407  fd43		       a5		      .byte.b	#%10100101	; 
   2408  fd44		       a5		      .byte.b	#%10100101	;
   2409  fd45		       66		      .byte.b	#%01100110	;
   2410  fd46
   2411  fd46				   CE
   2412  fd46		       e7		      .byte.b	#%11100111	;
   2413  fd47		       24		      .byte.b	#%00100100	; 
   2414  fd48		       e7		      .byte.b	#%11100111	; 
   2415  fd49		       24		      .byte.b	#%00100100	; 
   2416  fd4a		       e7		      .byte.b	#%11100111	;
   2417  fd4b
   2418  fd4b				   CF
   2419  fd4b		       24		      .byte.b	#%00100100	;
   2420  fd4c		       24		      .byte.b	#%00100100	; 
   2421  fd4d		       e7		      .byte.b	#%11100111	; 
   2422  fd4e		       24		      .byte.b	#%00100100	; 
   2423  fd4f		       e7		      .byte.b	#%11100111	;
   2424  fd50
   2425  fd50				   CG
   2426  fd50		       c3		      .byte.b	#%11000011	;
   2427  fd51		       a5		      .byte.b	#%10100101	; 
   2428  fd52		       a5		      .byte.b	#%10100101	; 
   2429  fd53		       24		      .byte.b	#%00100100	; 
   2430  fd54		       c3		      .byte.b	#%11000011	;	
   2431  fd55
   2432  fd55				   CH
   2433  fd55		       a5		      .byte.b	#%10100101	;
   2434  fd56		       a5		      .byte.b	#%10100101	; 
   2435  fd57		       e7		      .byte.b	#%11100111	; 
   2436  fd58		       a5		      .byte.b	#%10100101	; 
   2437  fd59		       a5		      .byte.b	#%10100101	;
   2438  fd5a
   2439  fd5a				   CK
   2440  fd5a		       a5		      .byte.b	#%10100101	;
   2441  fd5b		       a5		      .byte.b	#%10100101	; 
   2442  fd5c		       66		      .byte.b	#%01100110	; 
   2443  fd5d		       a5		      .byte.b	#%10100101	; 
   2444  fd5e		       a5		      .byte.b	#%10100101	;
   2445  fd5f
   2446  fd5f				   CL
   2447  fd5f		       e7		      .byte.b	#%11100111	;
   2448  fd60		       24		      .byte.b	#%00100100	; 
   2449  fd61		       24		      .byte.b	#%00100100	; 
   2450  fd62		       24		      .byte.b	#%00100100	; 
   2451  fd63		       24		      .byte.b	#%00100100	;
   2452  fd64
   2453  fd64				   CI
   2454  fd64		       42		      .byte.b	#%01000010	;
   2455  fd65		       42		      .byte.b	#%01000010	; 
   2456  fd66		       42		      .byte.b	#%01000010	; 
   2457  fd67		       42		      .byte.b	#%01000010	; 
   2458  fd68		       42		      .byte.b	#%01000010	;
   2459  fd69
   2460  fd69				   CM
   2461  fd69		       a5		      .byte.b	#%10100101	;
   2462  fd6a		       a5		      .byte.b	#%10100101	; 
   2463  fd6b		       a5		      .byte.b	#%10100101	; 
   2464  fd6c		       e7		      .byte.b	#%11100111	; 
   2465  fd6d		       a5		      .byte.b	#%10100101	;
   2466  fd6e
   2467  fd6e				   CN
   2468  fd6e		       a5		      .byte.b	#%10100101	;
   2469  fd6f		       a5		      .byte.b	#%10100101	; 
   2470  fd70		       a5		      .byte.b	#%10100101	; 
   2471  fd71		       a5		      .byte.b	#%10100101	; 
   2472  fd72		       66		      .byte.b	#%01100110	;	
   2473  fd73
   2474  fd73
   2475  fd73				   CO
   2476  fd73		       42		      .byte.b	#%01000010	;
   2477  fd74		       a5		      .byte.b	#%10100101	; 
   2478  fd75		       a5		      .byte.b	#%10100101	; 
   2479  fd76		       a5		      .byte.b	#%10100101	; 
   2480  fd77		       42		      .byte.b	#%01000010	;	
   2481  fd78
   2482  fd78				   CP
   2483  fd78		       24		      .byte.b	#%00100100	;
   2484  fd79		       24		      .byte.b	#%00100100	; 
   2485  fd7a		       e7		      .byte.b	#%11100111	; 
   2486  fd7b		       a5		      .byte.b	#%10100101	; 
   2487  fd7c		       e7		      .byte.b	#%11100111	;
   2488  fd7d
   2489  fd7d				   CR
   2490  fd7d		       a5		      .byte.b	#%10100101	;
   2491  fd7e		       a5		      .byte.b	#%10100101	; 
   2492  fd7f		       66		      .byte.b	#%01100110	; 
   2493  fd80		       a5		      .byte.b	#%10100101	; 
   2494  fd81		       66		      .byte.b	#%01100110	;
   2495  fd82
   2496  fd82				   CS
   2497  fd82		       66		      .byte.b	#%01100110	;
   2498  fd83		       81		      .byte.b	#%10000001	; 
   2499  fd84		       42		      .byte.b	#%01000010	; 
   2500  fd85		       24		      .byte.b	#%00100100	; 
   2501  fd86		       c3		      .byte.b	#%11000011	;
   2502  fd87
   2503  fd87				   CT
   2504  fd87		       42		      .byte.b	#%01000010	;
   2505  fd88		       42		      .byte.b	#%01000010	; 
   2506  fd89		       42		      .byte.b	#%01000010	; 
   2507  fd8a		       42		      .byte.b	#%01000010	; 
   2508  fd8b		       e7		      .byte.b	#%11100111	;
   2509  fd8c
   2510  fd8c				   CV
   2511  fd8c		       42		      .byte.b	#%01000010	;
   2512  fd8d		       a5		      .byte.b	#%10100101	; 
   2513  fd8e		       a5		      .byte.b	#%10100101	; 
   2514  fd8f		       a5		      .byte.b	#%10100101	; 
   2515  fd90		       a5		      .byte.b	#%10100101	;	
   2516  fd91
   2517  fd91				   CY
   2518  fd91		       42		      .byte.b	#%01000010	;
   2519  fd92		       42		      .byte.b	#%01000010	; 
   2520  fd93		       42		      .byte.b	#%01000010	; 
   2521  fd94		       a5		      .byte.b	#%10100101	; 
   2522  fd95		       a5		      .byte.b	#%10100101	;
   2523  fd96
   2524  fd96				   CW
   2525  fd96		       a5		      .byte.b	#%10100101	;
   2526  fd97		       e7		      .byte.b	#%11100111	; 
   2527  fd98		       a5		      .byte.b	#%10100101	; 
   2528  fd99		       a5		      .byte.b	#%10100101	; 
   2529  fd9a		       a5		      .byte.b	#%10100101	;
   2530  fd9b
   2531  fd9b				   CZ
   2532  fd9b		       e7		      .byte.b	#%11100111	;
   2533  fd9c		       24		      .byte.b	#%00100100	; 
   2534  fd9d		       42		      .byte.b	#%01000010	; 
   2535  fd9e		       81		      .byte.b	#%10000001	; 
   2536  fd9f		       e7		      .byte.b	#%11100111	;
   2537  fda0
   2538  fda0				   Pipe
   2539  fda0		       42		      .byte.b	#%01000010	;
   2540  fda1		       00		      .byte.b	#%00000000	; 
   2541  fda2		       42		      .byte.b	#%01000010	; 
   2542  fda3		       00		      .byte.b	#%00000000	; 
   2543  fda4		       42		      .byte.b	#%01000010	;
   2544  fda5
   2545  fda5				   Exclamation
   2546  fda5		       42		      .byte.b	#%01000010	;
   2547  fda6		       00		      .byte.b	#%00000000	; 
   2548  fda7		       42		      .byte.b	#%01000010	; 
   2549  fda8		       42		      .byte.b	#%01000010	; 
   2550  fda9		       42		      .byte.b	#%01000010	;
   2551  fdaa
   2552  fdaa				   Dot
   2553  fdaa		       42		      .byte.b	#%01000010	;
   2554  fdab		       42		      .byte.b	#%01000010	; 
   2555  fdac		       00		      .byte.b	#%00000000	; 
   2556  fdad		       00		      .byte.b	#%00000000	; 
   2557  fdae		       00		      .byte.b	#%00000000	;
   2558  fdaf
   2559  fdaf				   Colon
   2560  fdaf		       42		      .byte.b	#%01000010	;
   2561  fdb0		       42		      .byte.b	#%01000010	; 
   2562  fdb1		       00		      .byte.b	#%00000000	; 
   2563  fdb2		       42		      .byte.b	#%01000010	; 
   2564  fdb3		       42		      .byte.b	#%01000010	;
   2565  fdb4
   2566  fdb4				   Triangle
   2567  fdb4		       81		      .byte.b	#%10000001	;
   2568  fdb5		       c3		      .byte.b	#%11000011	; 
   2569  fdb6		       e7		      .byte.b	#%11100111	; 
   2570  fdb7		       c3		      .byte.b	#%11000011	; 
   2571  fdb8		       81		      .byte.b	#%10000001	;
   2572  fdb9
   2573  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2574  fdb9		       00		      .byte.b	#0	;
   2575  fdba		       00		      .byte.b	#0	;
   2576  fdbb		       00		      .byte.b	#0	;
   2577  fdbc		       00		      .byte.b	#0	;
   2578  fdbd		       00		      .byte.b	#0	;
   2579  fdbe
   2580  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2581  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2582  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2583  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2584  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2585  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2586  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2587  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2588  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2589  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2590  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2591  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2592  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2593  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2594  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2595  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2596  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2597  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2598  fdcf
   2599  fdcf				   EngineSoundType
   2600  fdcf		       02		      .byte.b	#2
   2601  fdd0		       02		      .byte.b	#2
   2602  fdd1		       0e		      .byte.b	#14
   2603  fdd2		       06		      .byte.b	#6
   2604  fdd3		       06		      .byte.b	#6
   2605  fdd4		       0e		      .byte.b	#14
   2606  fdd5
   2607  fdd5				   EngineBaseFrequence
   2608  fdd5		       1f		      .byte.b	#31
   2609  fdd6		       15		      .byte.b	#21
   2610  fdd7		       14		      .byte.b	#20
   2611  fdd8		       1f		      .byte.b	#31
   2612  fdd9		       16		      .byte.b	#22
   2613  fdda		       03		      .byte.b	#3
   2614  fddb
   2615  fddb				   TachometerSizeLookup1
   2616  fddb		       1f		      .byte.b	#%00011111
   2617  fddc		       3f		      .byte.b	#%00111111
   2618  fddd		       7f		      .byte.b	#%01111111
   2619  fdde		       ff		      .byte.b	#%11111111
   2620  fddf		       ff		      .byte.b	#%11111111
   2621  fde0		       ff		      .byte.b	#%11111111
   2622  fde1		       ff		      .byte.b	#%11111111
   2623  fde2		       ff		      .byte.b	#%11111111
   2624  fde3
   2625  fde3				   TachometerSizeLookup2
   2626  fde3		       00		      .byte.b	#%00000000
   2627  fde4		       00		      .byte.b	#%00000000
   2628  fde5		       00		      .byte.b	#%00000000
   2629  fde6		       00		      .byte.b	#%00000000
   2630  fde7		       80		      .byte.b	#%10000000
   2631  fde8		       c0		      .byte.b	#%11000000
   2632  fde9		       e0		      .byte.b	#%11100000
   2633  fdea		       f0		      .byte.b	#%11110000
   2634  fdeb
   2635  fdeb				   TachometerGearLookup
   2636  fdeb		       01		      .byte.b	#%00000001
   2637  fdec		       02		      .byte.b	#%00000010
   2638  fded		       04		      .byte.b	#%00000100
   2639  fdee		       08		      .byte.b	#%00001000
   2640  fdef		       10		      .byte.b	#%00010000
   2641  fdf0		       30		      .byte.b	#%00110000
   2642  fdf1
   2643  fe00					      org	$FE00
   2644  fe00				   AesTable
   2645  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2646  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2647  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2648  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2649  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2650  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2651  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2652  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2653  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2654  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2655  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2656  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2657  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2658  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2659  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2660  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2661  ff00
   2662  ff00							; From FF00 to FFFB (122 bytes) to use here
   2663  ff00
   2664  ff00				   StaticText		; All static text must be on the same MSB block. 
   2665  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2666  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2667  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2668  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2669  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2670  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2671  ff05
   2672  ff05				   HellwayLeftText
   2673  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2674  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2675  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2676  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2677  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2678  ff0a
   2679  ff0a				   HellwayRightText
   2680  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2681  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2682  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2683  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2684  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2685  ff0f
   2686  ff0f				   OpbText
   2687  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2688  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2689  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2690  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2691  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2692  ff14
   2693  ff14				   YearText
   2694  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2695  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2696  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2697  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2698  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2699  ff19
   2700  ff19				   GameText
   2701  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2702  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2703  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2704  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2705  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2706  ff1e
   2707  ff1e				   OverText
   2708  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2709  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2710  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2711  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2712  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2713  ff23				   GoText
   2714  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2715  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2716  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2717  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2718  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2719  ff28
   2720  ff28				   ZeldaTextLeft
   2721  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2722  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2723  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2724  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2725  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2726  ff2d
   2727  ff2d				   ZeldaTextRight
   2728  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2729  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2730  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2731  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2732  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2733  ff32
   2734  ff32				   ZeldaDateLeft
   2735  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2736  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2737  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2738  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2739  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2740  ff37
   2741  ff37				   ZeldaDateRight
   2742  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2743  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2744  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2745  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2746  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2747  ff3c
   2748  ff3c				   PolvinhosTextLeft
   2749  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2750  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2751  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2752  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2753  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2754  ff41
   2755  ff41				   PolvinhosTextRight
   2756  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2757  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2758  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2759  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2760  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2761  ff46
   2762  ff46				   PolvinhosDateLeft
   2763  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2764  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2765  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2766  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2767  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2768  ff4b
   2769  ff4b				   PolvinhosDateRight
   2770  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2771  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2772  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2773  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2774  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2775  ff50
   2776  ff50				   IvonneTextLeft
   2777  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2778  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2779  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2780  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2781  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2782  ff55
   2783  ff55				   IvonneTextRight
   2784  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2785  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2786  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2787  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2788  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2789  ff5a
   2790  ff5a				   IvonneDateLeft
   2791  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2792  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2793  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2794  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2795  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2796  ff5f
   2797  ff5f				   IvonneDateRight
   2798  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2799  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2800  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2801  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2802  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2803  ff64
   2804  ff64				   PaperArtTextLeft
   2805  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2806  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2807  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2808  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2809  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2810  ff69
   2811  ff69				   PaperArtTextRight
   2812  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2813  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2814  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2815  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2816  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2817  ff6e
   2818  ff6e				   LeonardoTextLeft
   2819  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2820  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2821  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2822  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2823  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2824  ff73
   2825  ff73				   LeonardoTextRight
   2826  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2827  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2828  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2829  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2830  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2831  ff78
   2832  ff78				   VersionText
   2833  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2834  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2835  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2836  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2837  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2838  ff7d
   2839  ff7d
   2840  ff7d				   EndStaticText
   2841  ff7d
   2842  ff7d				   CarSprite0		; Upside down, Original Car
   2843  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2844  ff85				   CarSprite0NoPadding
   2845  ff85		       7e		      .byte.b	#%01111110
   2846  ff86		       24		      .byte.b	#%00100100
   2847  ff87		       bd		      .byte.b	#%10111101
   2848  ff88		       3c		      .byte.b	#%00111100
   2849  ff89		       bd		      .byte.b	#%10111101
   2850  ff8a		       3c		      .byte.b	#%00111100
   2851  ff8b
   2852  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2853  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2854  ff93				   CarSprite1NoPadding
   2855  ff93		       bd		      .byte.b	#%10111101
   2856  ff94		       7e		      .byte.b	#%01111110
   2857  ff95		       5a		      .byte.b	#%01011010
   2858  ff96		       66		      .byte.b	#%01100110
   2859  ff97		       bd		      .byte.b	#%10111101
   2860  ff98		       3c		      .byte.b	#%00111100
   2861  ff99
   2862  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2863  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2864  ffa1				   CarSprite2NoPadding
   2865  ffa1		       7e		      .byte.b	#%01111110
   2866  ffa2		       a5		      .byte.b	#%10100101
   2867  ffa3		       42		      .byte.b	#%01000010
   2868  ffa4		       42		      .byte.b	#%01000010
   2869  ffa5		       bd		      .byte.b	#%10111101
   2870  ffa6		       7e		      .byte.b	#%01111110
   2871  ffa7
   2872  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2873  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2874  ffaf				   CarSprite3NoPadding
   2875  ffaf		       3c		      .byte.b	#%00111100
   2876  ffb0		       db		      .byte.b	#%11011011
   2877  ffb1		       db		      .byte.b	#%11011011
   2878  ffb2		       3c		      .byte.b	#%00111100
   2879  ffb3		       5a		      .byte.b	#%01011010
   2880  ffb4		       3c		      .byte.b	#%00111100
   2881  ffb5
   2882  ffb5				   TrafficSpeeds
   2883  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2884  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2885  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2886  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2887  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2888  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2889  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2890  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2891  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2892  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2893  ffbf				   TrafficSpeedsHighDelta
   2894  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2895  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2896  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2897  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2898  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2899  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2900  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2901  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2902  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2903  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2904  ffc9
   2905  ffc9				   CarIdToSpriteAddressL
   2906  ffc9		       7d		      .byte.b	#<CarSprite0
   2907  ffca		       8b		      .byte.b	#<CarSprite1
   2908  ffcb		       99		      .byte.b	#<CarSprite2
   2909  ffcc		       a7		      .byte.b	#<CarSprite3
   2910  ffcd
   2911  ffcd				   CarIdToSpriteAddressH
   2912  ffcd		       ff		      .byte.b	#>CarSprite0
   2913  ffce		       ff		      .byte.b	#>CarSprite1
   2914  ffcf		       ff		      .byte.b	#>CarSprite2
   2915  ffd0		       ff		      .byte.b	#>CarSprite3
   2916  ffd1
   2917  ffd1				   EnemyCarIdToSpriteAddressL
   2918  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2919  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2920  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2921  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2922  ffd5
   2923  ffd5				   EnemyCarIdToSpriteAddressH
   2924  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2925  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2926  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2927  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2928  ffd9
   2929  ffd9				   CarIdToAccelerateSpeed
   2930  ffd9		       80		      .byte.b	#128
   2931  ffda		       c0		      .byte.b	#192
   2932  ffdb		       60		      .byte.b	#96
   2933  ffdc		       c0		      .byte.b	#192
   2934  ffdd
   2935  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2936  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2937  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2938  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2939  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2940  ffe1
   2941  ffe1				   CarIdToMaxSpeedL
   2942  ffe1		       80		      .byte.b	#$80
   2943  ffe2		       00		      .byte.b	#$00	; One less gear
   2944  ffe3		       80		      .byte.b	#$80
   2945  ffe4		       80		      .byte.b	#$80
   2946  ffe5
   2947  ffe5				   CarIdToMaxGear
   2948  ffe5		       05		      .byte.b	#5
   2949  ffe6		       04		      .byte.b	#4	; One less gear
   2950  ffe7		       05		      .byte.b	#5
   2951  ffe8		       05		      .byte.b	#5
   2952  ffe9
   2953  ffe9				   GearToBreakSpeedTable
   2954  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2955  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2956  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2957  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2958  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2959  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2960  ffef
   2961  ffef				   TrafficColorTable
   2962  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2963  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2964  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2965  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2966  fff3
   2967  fff3				   TrafficChanceTable
   2968  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2969  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2970  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2971  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2972  fff7
   2973  fff7				   TrafficTimeTable
   2974  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2975  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2976  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2977  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2978  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2979  fffc
   2980  fffc
   2981  fffc					      org	$FFFC
   2982  fffc		       00 f0		      .word.w	BeforeStart
   2983  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
