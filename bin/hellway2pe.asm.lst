------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 e1 f6 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 b2 f6 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080		       85 b9		      STA	OpCountdownTimer	;3
    283  f082
    284  f082				   ConfigurePlayer1XPosition
    285  f082		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    286  f084		       85 b7		      STA	Player1X	;3
    287  f086
    288  f086				   HPositioning 		; Avoid sleep doing needed stuff
    289  f086		       85 02		      STA	WSYNC
    290  f088
    291  f088				   ConfigurePlayer0XPosition
    292  f088		       a9 21		      LDA	#PLAYER_0_X_START	;2
    293  f08a		       85 b6		      STA	Player0X	;3
    294  f08c
    295  f08c				   ConfigureMissileSize
    296  f08c		       a9 30		      LDA	#%00110000	;2 Missile Size
    297  f08e		       85 04		      STA	NUSIZ0	;3
    298  f090		       85 05		      STA	NUSIZ1	;3
    299  f092
    300  f092				   ConfigureNextCheckpoint
    301  f092		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    302  f094		       85 cd		      STA	NextCheckpoint
    303  f096
    304  f096		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f098					      SLEEP	4	;
      1  f098				   .CYCLES    SET	4
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     19  f09a					      REPEND
    306  f09a		       85 12		      STA	RESM0
      0  f09c					      SLEEP	2	;
      1  f09c				   .CYCLES    SET	2
      2  f09c
      3  f09c				  -	      IF	.CYCLES < 2
      4  f09c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09c				  -	      ERR
      6  f09c					      ENDIF
      7  f09c
      8  f09c				  -	      IF	.CYCLES & 1
      9  f09c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09c				  -	      nop	0
     11  f09c				  -	      ELSE
     12  f09c				  -	      bit	VSYNC
     13  f09c				  -	      ENDIF
     14  f09c				  -.CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c					      REPEAT	.CYCLES / 2
     18  f09c		       ea		      nop
     19  f09d					      REPEND
    308  f09d		       85 14		      STA	RESBL
      0  f09f					      SLEEP	2
      1  f09f				   .CYCLES    SET	2
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f				  -	      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f				  -	      ELSE
     12  f09f				  -	      bit	VSYNC
     13  f09f				  -	      ENDIF
     14  f09f				  -.CYCLES    SET	.CYCLES - 3
     15  f09f					      ENDIF
     16  f09f
     17  f09f					      REPEAT	.CYCLES / 2
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    310  f0a0		       85 13		      STA	RESM1
      0  f0a2					      SLEEP	3
      1  f0a2				   .CYCLES    SET	3
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4				  -	      REPEAT	.CYCLES / 2
     18  f0a4				  -	      nop
     19  f0a4					      REPEND
    312  f0a4
    313  f0a4		       a9 e0		      LDA	#$E0
    314  f0a6		       85 24		      STA	HMBL
    315  f0a8		       85 22		      STA	HMM0
    316  f0aa		       85 23		      STA	HMM1
    317  f0ac		       85 02		      STA	WSYNC
    318  f0ae		       85 2a		      STA	HMOVE
    319  f0b0		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    320  f0b2		       85 2b		      STA	HMCLR
      0  f0b4					      SLEEP	30
      1  f0b4				   .CYCLES    SET	30
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     19  f0c3					      REPEND
    322  f0c3		       85 10		      STA	RESP0
    323  f0c5							;SLEEP 5 ; Temporarily move player 1 away.
    324  f0c5		       85 11		      STA	RESP1
    325  f0c7
    326  f0c7				   WaitResetToEnd
    327  f0c7		       ad 84 02 	      LDA	INTIM
    328  f0ca		       d0 fb		      BNE	WaitResetToEnd
    329  f0cc
    330  f0cc				   MainLoop
    331  f0cc		       a9 02		      LDA	#2
    332  f0ce		       85 00		      STA	VSYNC
    333  f0d0		       85 02		      STA	WSYNC
    334  f0d2		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    335  f0d4				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    336  f0d4		       a9 01		      LDA	#%00000001	;3
    337  f0d6		       24 df		      BIT	TextFlickerMode	;2
    338  f0d8		       f0 05		      BEQ	TextSideFrameZero	;2
    339  f0da		       25 8d		      AND	FrameCount1	;2
    340  f0dc		       4c e1 f0 	      JMP	StoreTextSize	;3
    341  f0df				   TextSideFrameZero
    342  f0df		       25 8c		      AND	FrameCount0	;2
    343  f0e1				   StoreTextSize
    344  f0e1		       85 de		      STA	TextSide	;3
    345  f0e3
    346  f0e3				   PrepareMaxHMove
      0  f0e3					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e3				   .CYCLES    SET	18
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     19  f0ec					      REPEND
    348  f0ec		       a9 80		      LDA	#$80
    349  f0ee		       85 24		      STA	HMBL
    350  f0f0		       85 22		      STA	HMM0
    351  f0f2		       85 23		      STA	HMM1
    352  f0f4		       85 20		      STA	HMP0
    353  f0f6		       85 21		      STA	HMP1
    354  f0f8		       85 02		      STA	WSYNC
    355  f0fa		       85 2a		      STA	HMOVE	; 1/10			
    356  f0fc
    357  f0fc				   ConfigVBlankTimer
    358  f0fc		       a5 c6		      LDA	GameMode
    359  f0fe		       c9 10		      CMP	#MAX_GAME_MODE
    360  f100		       f0 05		      BEQ	SetVblankTimerQrCode
    361  f102		       a9 29		      LDA	#VBLANK_TIMER
    362  f104		       4c 09 f1 	      JMP	SetVblankTimer
    363  f107				   SetVblankTimerQrCode
    364  f107		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    365  f109
    366  f109				   SetVblankTimer
    367  f109		       85 02		      STA	WSYNC	;3
    368  f10b		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    369  f10d		       8d 96 02 	      STA	TIM64T	;3	
    370  f110		       a9 00		      LDA	#0	;2
    371  f112		       85 00		      STA	VSYNC	;3	
    372  f114
    373  f114				   RandomizeGame
    374  f114		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    375  f116		       d0 2d		      BNE	EndRandomizeGame
    376  f118		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    377  f11a		       29 02		      AND	#%00000010
    378  f11c		       f0 24		      BEQ	DeterministicGame
    379  f11e		       a6 96		      LDX	TrafficOffset1 + 2
    380  f120		       bd 00 fe 	      LDA	AesTable,X
    381  f123		       45 8c		      EOR	FrameCount0
    382  f125		       85 96		      STA	TrafficOffset1 + 2
    383  f127		       85 a6		      STA	OpTrafficOffset1 + 2
    384  f129		       a6 9a		      LDX	TrafficOffset2 + 2
    385  f12b		       bd 00 fe 	      LDA	AesTable,X
    386  f12e		       45 8c		      EOR	FrameCount0
    387  f130		       85 9a		      STA	TrafficOffset2 + 2
    388  f132		       85 aa		      STA	OpTrafficOffset2 + 2
    389  f134		       a6 9e		      LDX	TrafficOffset3 + 2
    390  f136		       bd 00 fe 	      LDA	AesTable,X
    391  f139		       45 8c		      EOR	FrameCount0
    392  f13b		       85 9e		      STA	TrafficOffset3 + 2
    393  f13d		       85 ae		      STA	OpTrafficOffset3 + 2
    394  f13f		       4c 45 f1 	      JMP	EndRandomizeGame
    395  f142
    396  f142				   DeterministicGame
    397  f142		       20 e1 f6 	      JSR	DefaultOffsets
    398  f145
    399  f145				   EndRandomizeGame
    400  f145
    401  f145
    402  f145							; Move this in the code and save cycles, for some reason spliting is breaking...
    403  f145		       a2 08		      LDX	#8
    404  f147				   BurnAllHMove
    405  f147		       85 02		      STA	WSYNC	;3
    406  f149		       85 2a		      STA	HMOVE	; 3/10 
    407  f14b		       ca		      DEX
    408  f14c		       d0 f9		      BNE	BurnAllHMove
    409  f14e		       85 02		      STA	WSYNC	;3
    410  f150		       85 2b		      STA	HMCLR	; 
    411  f152
    412  f152				   CountFrame
    413  f152		       e6 8c		      INC	FrameCount0	; 5
    414  f154		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    415  f156		       e6 8d		      INC	FrameCount1	; 5 
    416  f158				   SkipIncFC1
    417  f158
    418  f158				   CallDrawQrCode
    419  f158		       a5 c6		      LDA	GameMode
    420  f15a		       c9 10		      CMP	#MAX_GAME_MODE
    421  f15c		       d0 03		      BNE	TestIsGameRunning
    422  f15e		       4c 64 fc 	      JMP	DrawQrCode
    423  f161
    424  f161							;Does not update the game if not running
    425  f161				   TestIsGameRunning
    426  f161		       a5 bd		      LDA	GameStatus	;3
    427  f163		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    428  f165				   SelectCarWithDpadCall		; Only do it when game is stoped
    429  f165		       a2 00		      LDX	#0	; Player 0
    430  f167		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    431  f169		       85 b0		      STA	Tmp0
    432  f16b		       20 50 f9 	      JSR	SelectCarWithDpad
    433  f16e		       e8		      INX		; Player 1
    434  f16f		       20 50 f9 	      JSR	SelectCarWithDpad
    435  f172
    436  f172				   CallConfigureCarSprites
    437  f172		       20 1e f9 	      JSR	ConfigureCarSprites
    438  f175				   SkipUpdateLogicJump
    439  f175		       4c ea f1 	      JMP	SkipUpdateLogic
    440  f178				   ContinueWithGameLogic
    441  f178
    442  f178				   CallEverySecond		; Timer for now
    443  f178		       a2 00		      LDX	#0
    444  f17a		       20 da fa 	      JSR	EverySecond
    445  f17d		       e8		      INX
    446  f17e		       20 da fa 	      JSR	EverySecond
    447  f181
    448  f181
    449  f181				   ChangeTextFlickerMode
    450  f181		       a5 bc		      LDA	SwitchDebounceCounter
    451  f183		       d0 0d		      BNE	EndChangeTextFlickerMode
    452  f185		       ad 82 02 	      LDA	SWCHB
    453  f188		       29 02		      AND	#%00000010	;Game select
    454  f18a		       d0 06		      BNE	EndChangeTextFlickerMode
    455  f18c		       e6 df		      INC	TextFlickerMode
    456  f18e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    457  f190		       85 bc		      STA	SwitchDebounceCounter
    458  f192				   EndChangeTextFlickerMode
    459  f192
    460  f192				   CallProcessSpeed
    461  f192		       a2 00		      LDX	#0
    462  f194		       20 37 fa 	      JSR	ProcessSpeed
    463  f197
    464  f197		       e8		      INX		; Player 1
    465  f198		       20 37 fa 	      JSR	ProcessSpeed
    466  f19b
    467  f19b				   CallUpdateOffsets
    468  f19b		       a2 00		      LDX	#0	; Player 0
    469  f19d		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    470  f19f		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    471  f1a1		       a5 f0		      LDA	Player0SpeedL
    472  f1a3		       85 b4		      STA	Tmp4
    473  f1a5		       a5 f2		      LDA	Player0SpeedH
    474  f1a7		       85 b5		      STA	Tmp5
    475  f1a9		       20 e4 f9 	      JSR	UpdateOffsets
    476  f1ac
    477  f1ac							;LDX Exits the call with correct value.
    478  f1ac		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    479  f1ae		       85 b3		      STA	Tmp3
    480  f1b0		       a5 f1		      LDA	Player1SpeedL
    481  f1b2		       85 b4		      STA	Tmp4
    482  f1b4		       a5 f3		      LDA	Player1SpeedH
    483  f1b6		       85 b5		      STA	Tmp5
    484  f1b8		       20 e4 f9 	      JSR	UpdateOffsets
    485  f1bb
    486  f1bb				   ConfigureOpponentLine		; Temporary
    487  f1bb		       a9 14		      LDA	#20	; Extract to constant
    488  f1bd		       85 cf		      STA	OpponentLine
    489  f1bf
    490  f1bf				   CallTestColisionAndMove
    491  f1bf		       a2 00		      LDX	#0	; Player 0
    492  f1c1							; Colision with traffic, each player check different flags,
    493  f1c1		       a5 8c		      LDA	FrameCount0
    494  f1c3		       29 01		      AND	#%00000001
    495  f1c5		       f0 07		      BEQ	SkipColisionPlayer0	; Test colision after draw frame
    496  f1c7		       a5 01		      LDA	CXM1P
    497  f1c9		       4a		      LSR
    498  f1ca		       05 00		      ORA	CXM0P
    499  f1cc		       05 02		      ORA	CXP0FB
    500  f1ce							; ORA CXPPMM ; Collision between players will have its own rules
    501  f1ce				   SkipColisionPlayer0		; Should not colide on opponent side.
    502  f1ce		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    503  f1d0		       85 b2		      STA	Tmp2
    504  f1d2		       20 62 f9 	      JSR	TestCollisionAndMove
    505  f1d5
    506  f1d5		       e8		      INX		; player 1
    507  f1d6		       a5 8c		      LDA	FrameCount0
    508  f1d8		       29 01		      AND	#%00000001
    509  f1da		       d0 07		      BNE	SkipColisionPlayer1	; Test colision after draw frame
    510  f1dc		       a5 00		      LDA	CXM0P
    511  f1de		       4a		      LSR
    512  f1df		       05 01		      ORA	CXM1P
    513  f1e1		       05 03		      ORA	CXP1FB
    514  f1e3				   SkipColisionPlayer1
    515  f1e3		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    516  f1e5		       85 b2		      STA	Tmp2
    517  f1e7		       20 62 f9 	      JSR	TestCollisionAndMove
    518  f1ea
    519  f1ea				   SkipUpdateLogic		; Continue here if not paused
    520  f1ea
    521  f1ea				   CallStatusUpdateSbr
    522  f1ea		       a2 00		      LDX	#0
    523  f1ec		       20 e7 fa 	      JSR	CalculateGear
    524  f1ef		       20 f4 fa 	      JSR	ProcessScoreFontColor
    525  f1f2		       e8		      INX
    526  f1f3		       20 e7 fa 	      JSR	CalculateGear
    527  f1f6		       20 f4 fa 	      JSR	ProcessScoreFontColor
    528  f1f9
    529  f1f9				   IsGameOver
    530  f1f9		       a5 b8		      LDA	CountdownTimer
    531  f1fb		       05 f0		      ORA	Player0SpeedL
    532  f1fd		       05 f2		      ORA	Player0SpeedH
    533  f1ff		       d0 0b		      BNE	IsCheckpoint
    534  f201		       a9 01		      LDA	#1
    535  f203		       85 cb		      STA	ScoreFontColorHoldChange
    536  f205		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    537  f207		       85 c9		      STA	ScoreFontColor
    538  f209		       4c 3e f2 	      JMP	SkipIsTimeOver
    539  f20c
    540  f20c				   IsCheckpoint
    541  f20c		       a5 cd		      LDA	NextCheckpoint
    542  f20e		       c5 92		      CMP	TrafficOffset0 + 2
    543  f210		       d0 20		      BNE	SkipIsCheckpoint
    544  f212		       18		      CLC
    545  f213		       69 10		      ADC	#CHECKPOINT_INTERVAL
    546  f215		       85 cd		      STA	NextCheckpoint
    547  f217		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    548  f219		       85 c9		      STA	ScoreFontColor
    549  f21b		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    550  f21d		       85 cb		      STA	ScoreFontColorHoldChange
    551  f21f		       a5 b8		      LDA	CountdownTimer
    552  f221		       18		      CLC
    553  f222		       65 c0		      ADC	CheckpointTime
    554  f224		       85 b8		      STA	CountdownTimer
    555  f226		       90 04		      BCC	JumpSkipTimeOver
    556  f228		       a9 ff		      LDA	#$FF
    557  f22a		       85 b8		      STA	CountdownTimer	; Does not overflow!
    558  f22c				   JumpSkipTimeOver
    559  f22c		       20 a3 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    560  f22f		       4c 3e f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    561  f232				   SkipIsCheckpoint
    562  f232
    563  f232				   IsTimeOver
    564  f232		       a5 b8		      LDA	CountdownTimer
    565  f234		       d0 08		      BNE	SkipIsTimeOver
    566  f236		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    567  f238		       85 cb		      STA	ScoreFontColorHoldChange
    568  f23a		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    569  f23c		       85 c9		      STA	ScoreFontColor
    570  f23e				   SkipIsTimeOver
    571  f23e
    572  f23e		       20 1e f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    573  f241
    574  f241				   PrintEasterEggCondition
    575  f241		       a5 8d		      LDA	FrameCount1
    576  f243		       29 38		      AND	#%00111000
    577  f245		       05 bd		      ORA	GameStatus
    578  f247		       c9 38		      CMP	#%00111000
    579  f249		       d0 06		      BNE	ChooseTextSide
    580  f24b		       20 14 f7 	      JSR	PrintEasterEgg
    581  f24e		       4c 40 f3 	      JMP	RightScoreWriteEnd
    582  f251
    583  f251							;Could be done during on vblank to save this comparisson time (before draw score), 
    584  f251							;but I am saving vblank cycles for now, in case of 2 players.
    585  f251				   ChooseTextSide		; 
    586  f251		       a5 de		      LDA	TextSide	;3
    587  f253		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    588  f255		       4c d6 f2 	      JMP	RightScoreWrite
    589  f258
    590  f258				   LeftScoreWrite
    591  f258		       a5 c9		      LDA	ScoreFontColor
    592  f25a		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    593  f25c		       f0 4e		      BEQ	PrintCheckpoint
    594  f25e		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    595  f260		       f0 52		      BEQ	PrintStartGame
    596  f262		       a5 bd		      LDA	GameStatus
    597  f264		       f0 56		      BEQ	PrintHellwayLeft
    598  f266				   WriteDistance		;Not optimized yet, ugly code.
    599  f266				   Digit0Distance
    600  f266		       a5 91		      LDA	TrafficOffset0 + 1	;3
    601  f268		       4a		      LSR		; 2
    602  f269		       4a		      LSR		; 2
    603  f26a		       4a		      LSR		; 2
    604  f26b		       4a		      LSR		; 2
    605  f26c		       aa		      TAX		; 2
    606  f26d		       bd be fd 	      LDA	FontLookup,X	;4
    607  f270		       85 d3		      STA	ScoreD3	;3
    608  f272
    609  f272				   Digit1Distance
    610  f272		       a5 92		      LDA	TrafficOffset0 + 2	;3
    611  f274		       29 0f		      AND	#%00001111	;2
    612  f276		       aa		      TAX		; 2
    613  f277		       bd be fd 	      LDA	FontLookup,X	;4 
    614  f27a		       85 d2		      STA	ScoreD2	;3
    615  f27c
    616  f27c				   Digit2Distance
    617  f27c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    618  f27e		       4a		      LSR		; 2
    619  f27f		       4a		      LSR		; 2
    620  f280		       4a		      LSR		; 2
    621  f281		       4a		      LSR		; 2
    622  f282		       aa		      TAX		; 2
    623  f283		       bd be fd 	      LDA	FontLookup,X	;4
    624  f286		       85 d1		      STA	ScoreD1	;3
    625  f288
    626  f288				   Digit3Distance
    627  f288		       a5 ba		      LDA	Traffic0Msb	;3
    628  f28a		       29 0f		      AND	#%00001111	;2
    629  f28c		       aa		      TAX		; 2
    630  f28d		       bd be fd 	      LDA	FontLookup,X	;4 
    631  f290		       85 d0		      STA	ScoreD0	;3
    632  f292
    633  f292				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    634  f292		       a5 ba		      LDA	Traffic0Msb
    635  f294		       29 f0		      AND	#%11110000	;2
    636  f296		       d0 07		      BNE	DrawDistanceExtraDigit
    637  f298		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    638  f29a		       85 d4		      STA	ScoreD4	;3
    639  f29c		       4c a9 f2 	      JMP	EndDrawDistance
    640  f29f				   DrawDistanceExtraDigit
    641  f29f		       4a		      LSR		; 2
    642  f2a0		       4a		      LSR		; 2
    643  f2a1		       4a		      LSR		; 2
    644  f2a2		       4a		      LSR		; 2
    645  f2a3		       aa		      TAX		; 2
    646  f2a4		       bd be fd 	      LDA	FontLookup,X	;4
    647  f2a7		       85 d4		      STA	ScoreD4	;3
    648  f2a9
    649  f2a9				   EndDrawDistance
    650  f2a9		       4c 40 f3 	      JMP	RightScoreWriteEnd	;3
    651  f2ac
    652  f2ac				   PrintCheckpoint
    653  f2ac		       a2 00		      LDX	#<CheckpointText
    654  f2ae		       20 f6 f6 	      JSR	PrintStaticText
    655  f2b1		       4c 40 f3 	      JMP	RightScoreWriteEnd	;3
    656  f2b4				   PrintStartGame
    657  f2b4		       a2 23		      LDX	#<GoText
    658  f2b6		       20 f6 f6 	      JSR	PrintStaticText
    659  f2b9		       4c 40 f3 	      JMP	RightScoreWriteEnd	;3
    660  f2bc
    661  f2bc				   PrintHellwayLeft
    662  f2bc		       a5 8d		      LDA	FrameCount1
    663  f2be		       29 01		      AND	#1
    664  f2c0		       d0 05		      BNE	PrintCreditsLeft
    665  f2c2		       a2 05		      LDX	#<HellwayLeftText
    666  f2c4		       4c c9 f2 	      JMP	PrintGameMode
    667  f2c7				   PrintCreditsLeft
    668  f2c7		       a2 0f		      LDX	#<OpbText
    669  f2c9
    670  f2c9				   PrintGameMode
    671  f2c9		       20 f6 f6 	      JSR	PrintStaticText
    672  f2cc		       a6 c6		      LDX	GameMode
    673  f2ce		       bd be fd 	      LDA	FontLookup,X	;4 
    674  f2d1		       85 d0		      STA	ScoreD0	;3
    675  f2d3		       4c 40 f3 	      JMP	RightScoreWriteEnd	;3
    676  f2d6
    677  f2d6				   RightScoreWrite
    678  f2d6		       a5 bd		      LDA	GameStatus
    679  f2d8		       f0 45		      BEQ	PrintHellwayRight
    680  f2da		       a5 c9		      LDA	ScoreFontColor
    681  f2dc		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    682  f2de		       f0 52		      BEQ	PrintGameOver
    683  f2e0				   Digit0Timer
    684  f2e0		       a5 b8		      LDA	CountdownTimer	;3
    685  f2e2		       29 0f		      AND	#%00001111	;2
    686  f2e4		       aa		      TAX		; 2
    687  f2e5		       bd be fd 	      LDA	FontLookup,X	;4 
    688  f2e8		       85 d1		      STA	ScoreD1	;3
    689  f2ea
    690  f2ea				   Digit1Timer
    691  f2ea		       a5 b8		      LDA	CountdownTimer	;3
    692  f2ec		       4a		      LSR		; 2
    693  f2ed		       4a		      LSR		; 2
    694  f2ee		       4a		      LSR		; 2
    695  f2ef		       4a		      LSR		; 2
    696  f2f0		       aa		      TAX		; 2
    697  f2f1		       bd be fd 	      LDA	FontLookup,X	;4
    698  f2f4		       85 d0		      STA	ScoreD0	;3
    699  f2f6
    700  f2f6		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    701  f2f8		       85 d2		      STA	ScoreD2	;3
    702  f2fa
    703  f2fa				   Digit0Speed
    704  f2fa		       a5 f0		      LDA	Player0SpeedL
    705  f2fc		       29 3c		      AND	#%00111100	;2 Discard the last bits
    706  f2fe		       4a		      LSR		; 2
    707  f2ff		       4a		      LSR		; 2
    708  f300		       aa		      TAX		; 2
    709  f301		       bd be fd 	      LDA	FontLookup,X	;4
    710  f304		       85 d4		      STA	ScoreD4	;3
    711  f306
    712  f306				   Digit1Speed
    713  f306		       a5 f0		      LDA	Player0SpeedL
    714  f308		       29 c0		      AND	#%11000000	;2 Discard the last bits
    715  f30a		       18		      CLC
    716  f30b		       2a		      ROL		;First goes into carry
    717  f30c		       2a		      ROL
    718  f30d		       2a		      ROL
    719  f30e		       85 b0		      STA	Tmp0
    720  f310		       a5 f2		      LDA	Player0SpeedH
    721  f312		       0a		      ASL
    722  f313		       0a		      ASL
    723  f314		       05 b0		      ORA	Tmp0
    724  f316		       aa		      TAX		; 2
    725  f317		       bd be fd 	      LDA	FontLookup,X	;4
    726  f31a		       85 d3		      STA	ScoreD3	;3
    727  f31c		       4c 40 f3 	      JMP	RightScoreWriteEnd
    728  f31f
    729  f31f				   PrintHellwayRight
    730  f31f		       a5 8d		      LDA	FrameCount1
    731  f321		       29 01		      AND	#1
    732  f323		       d0 05		      BNE	PrintCreditsRight
    733  f325		       a2 0a		      LDX	#<HellwayRightText
    734  f327		       4c 2c f3 	      JMP	PrintRightIntro
    735  f32a				   PrintCreditsRight
    736  f32a		       a2 14		      LDX	#<YearText
    737  f32c				   PrintRightIntro
    738  f32c		       20 f6 f6 	      JSR	PrintStaticText
    739  f32f		       4c 40 f3 	      JMP	RightScoreWriteEnd
    740  f332				   PrintGameOver
    741  f332		       a5 8c		      LDA	FrameCount0
    742  f334		       30 05		      BMI	PrintOverText
    743  f336		       a2 19		      LDX	#<GameText
    744  f338		       4c 3d f3 	      JMP	StoreGameOverText
    745  f33b				   PrintOverText
    746  f33b		       a2 1e		      LDX	#<OverText
    747  f33d				   StoreGameOverText
    748  f33d		       20 f6 f6 	      JSR	PrintStaticText
    749  f340				   RightScoreWriteEnd
    750  f340
    751  f340
    752  f340				   ScoreBackgroundColor
    753  f340		       a2 00		      LDX	#0
    754  f342		       ad 82 02 	      LDA	SWCHB
    755  f345		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    756  f347		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    757  f349		       f0 04		      BEQ	BlackAndWhiteScoreBg
    758  f34b		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    759  f34d		       a2 03		      LDX	#BACKGROUND_COLOR
    760  f34f				   BlackAndWhiteScoreBg
    761  f34f		       85 b2		      STA	Tmp2	; Score Background
    762  f351		       86 b3		      STX	Tmp3	; Traffic Background
    763  f353
    764  f353				   ConfigurePFForScore
    765  f353							;LDA #SCORE_BACKGROUND_COLOR; Done above
    766  f353		       85 09		      STA	COLUBK
    767  f355		       20 65 f6 	      JSR	ClearAll
    768  f358		       a9 02		      LDA	#%00000010	; Score mode
    769  f35a		       85 0a		      STA	CTRLPF
    770  f35c		       a5 de		      LDA	TextSide	;3
    771  f35e		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    772  f360				   LeftScoreOn
    773  f360		       a5 c9		      LDA	ScoreFontColor
    774  f362		       85 07		      STA	COLUP1
    775  f364		       a5 b2		      LDA	Tmp2
    776  f366		       85 06		      STA	COLUP0
    777  f368		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    778  f36a		       85 b1		      STA	Tmp1
    779  f36c		       4c 7b f3 	      JMP	CallWaitForVblankEnd
    780  f36f				   RightScoreOn
    781  f36f		       a5 c9		      LDA	ScoreFontColor
    782  f371		       85 06		      STA	COLUP0
    783  f373		       a5 b2		      LDA	Tmp2
    784  f375		       85 07		      STA	COLUP1
    785  f377		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    786  f379		       85 b1		      STA	Tmp1
    787  f37b
    788  f37b							; After here we are going to update the screen, No more heavy code
    789  f37b				   CallWaitForVblankEnd
    790  f37b		       20 f7 f8 	      JSR	WaitForVblankEnd
    791  f37e
    792  f37e				   DrawScoreHud
    793  f37e		       20 86 f7 	      JSR	PrintScore
    794  f381
    795  f381		       85 02		      STA	WSYNC
    796  f383
    797  f383		       a5 0c		      LDA	INPT4	;3
    798  f385		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    799  f387		       a5 c9		      LDA	ScoreFontColor
    800  f389		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    801  f38b		       d0 0a		      BNE	WaitAnotherScoreLine
    802  f38d		       a5 de		      LDA	TextSide	;3
    803  f38f		       d0 03		      BNE	LeftScoreOnGameOver
    804  f391		       4c d1 f8 	      JMP	DrawGameOverScreenRight
    805  f394				   LeftScoreOnGameOver
    806  f394		       4c 43 f8 	      JMP	DrawGameOverScreenLeft
    807  f397
    808  f397				   WaitAnotherScoreLine
    809  f397		       85 02		      STA	WSYNC
    810  f399
    811  f399				   PrepareForTraffic
    812  f399		       20 77 f6 	      JSR	ClearPF	; 32
    813  f39c
    814  f39c		       85 02		      STA	WSYNC
    815  f39e		       85 02		      STA	WSYNC
    816  f3a0
    817  f3a0		       a9 30		      LDA	#%00110000	; 2 Score mode
    818  f3a2		       85 0a		      STA	CTRLPF	;3
    819  f3a4
    820  f3a4		       a5 c2		      LDA	TrafficColor	;3
    821  f3a6		       85 08		      STA	COLUPF	;3
    822  f3a8
    823  f3a8		       a9 96		      LDA	#PLAYER1_COLOR	;2
    824  f3aa		       85 07		      STA	COLUP1	;3
    825  f3ac
    826  f3ac		       a5 c9		      LDA	ScoreFontColor	;3
    827  f3ae		       85 06		      STA	COLUP0	;3
    828  f3b0
    829  f3b0		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    830  f3b2
    831  f3b2		       20 77 f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    832  f3b5
    833  f3b5		       a6 b3		      LDX	Tmp3	; Background color.
    834  f3b7
      0  f3b7					      SLEEP	9	; Odd sleep destroys flags
      1  f3b7				   .CYCLES    SET	9
      2  f3b7
      3  f3b7				  -	      IF	.CYCLES < 2
      4  f3b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3b7				  -	      ERR
      6  f3b7					      ENDIF
      7  f3b7
      8  f3b7					      IF	.CYCLES & 1
      9  f3b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3b7				  -	      nop	0
     11  f3b7					      ELSE
     12  f3b7		       24 00		      bit	VSYNC
     13  f3b9					      ENDIF
     14  f3b9				   .CYCLES    SET	.CYCLES - 3
     15  f3b9					      ENDIF
     16  f3b9
     17  f3b9					      REPEAT	.CYCLES / 2
     18  f3b9		       ea		      nop
     17  f3b9					      REPEND
     18  f3ba		       ea		      nop
     17  f3ba					      REPEND
     18  f3bb		       ea		      nop
     19  f3bc					      REPEND
    836  f3bc
    837  f3bc		       a5 8c		      LDA	FrameCount0	;Brach flag
    838  f3be		       29 01		      AND	#%00000001
    839  f3c0
    840  f3c0		       86 09		      STX	COLUBK	;3
    841  f3c2		       d0 05		      BNE	OpDrawCache	;2
    842  f3c4		       4c 83 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    843  f3c7							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    844  f3c7
    845  f3c7							;main scanline loop...
    846  f3c7				   OpScanLoop
    847  f3c7		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    848  f3c9
    849  f3c9							;Start of next line!			
    850  f3c9				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    851  f3c9
    852  f3c9		       a5 80		      LDA	GRP0Cache	;3
    853  f3cb		       85 1b		      STA	GRP0	;3
    854  f3cd
    855  f3cd		       a5 84		      LDA	GRP1Cache	;3
    856  f3cf		       85 1c		      STA	GRP1	;3
    857  f3d1
    858  f3d1		       a5 85		      LDA	ENABLCache	;3
    859  f3d3		       85 1f		      STA	ENABL	;3
    860  f3d5
    861  f3d5		       a5 86		      LDA	ENAM0Cache	;3
    862  f3d7		       85 1d		      STA	ENAM0	;3
    863  f3d9
    864  f3d9		       a5 87		      LDA	ENAM1Cache	;3
    865  f3db		       85 1e		      STA	ENAM1	;3
    866  f3dd
    867  f3dd		       a5 81		      LDA	PF0Cache	;3
    868  f3df		       85 0d		      STA	PF0	;3
    869  f3e1
    870  f3e1		       a9 00		      LDA	#0	;2
    871  f3e3							;STA PF0	     ;3
    872  f3e3		       85 80		      STA	GRP0Cache	;3
    873  f3e5		       85 86		      STA	ENAM0Cache	;3
    874  f3e7		       85 85		      STA	ENABLCache	;3
    875  f3e9		       85 87		      STA	ENAM1Cache	; 3
    876  f3eb							;STA GRP1Cache ;3
    877  f3eb		       85 0d		      STA	PF0	;3
    878  f3ed							;STA PF2	     ;3
    879  f3ed
    880  f3ed		       a5 83		      LDA	PF2Cache	;3
    881  f3ef		       85 0f		      STA	PF2	;3
    882  f3f1
    883  f3f1				   OpDrawCar0
    884  f3f1		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    885  f3f3		       b0 04		      BCS	OpSkipDrawCar	;2
    886  f3f5		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    887  f3f7		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    888  f3f9				   OpSkipDrawCar
    889  f3f9
    890  f3f9							;BEQ DrawTraffic3
    891  f3f9				   OpDrawTraffic1		; 33
    892  f3f9		       98		      TYA		; 2
    893  f3fa		       18		      CLC		; 2 
    894  f3fb		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    895  f3fd		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    896  f3ff		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    897  f401		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    898  f403		       4c 08 f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
    899  f406				   OpEorOffsetWithCarry
    900  f406		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    901  f408				   OpAfterEorOffsetWithCarry		;17
    902  f408		       aa		      TAX		;2
    903  f409		       bd 00 fe 	      LDA	AesTable,X	; 4
    904  f40c		       c5 be		      CMP	TrafficChance	;3
    905  f40e		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    906  f410		       a9 ff		      LDA	#$FF	;2
    907  f412		       85 86		      STA	ENAM0Cache	;3
    908  f414				   OpFinishDrawTraffic1
    909  f414
    910  f414				   OpErasePF2
    911  f414		       a9 00		      LDA	#0
    912  f416		       85 0f		      STA	PF2
    913  f418
    914  f418				   OpDrawTraffic2		; 33
    915  f418		       98		      TYA		; 2
    916  f419		       18		      CLC		; 2 
    917  f41a		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    918  f41c		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    919  f41e		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    920  f420		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    921  f422		       4c 27 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    922  f425				   OpEorOffsetWithCarry2
    923  f425		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    924  f427				   OpAfterEorOffsetWithCarry2		;17
    925  f427		       aa		      TAX		;2
    926  f428		       bd 00 fe 	      LDA	AesTable,X	; 4
    927  f42b		       c5 be		      CMP	TrafficChance	;3
    928  f42d		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    929  f42f		       a9 02		      LDA	#%00000010	;2
    930  f431		       85 85		      STA	ENABLCache	;3
    931  f433				   OpFinishDrawTraffic2
    932  f433
    933  f433							;STA WSYNC ;65 / 137
    934  f433
    935  f433							; LDA Tmp0 ; Flicker this line if drawing car
    936  f433							; BEQ FinishDrawTraffic4
    937  f433				   OpDrawTraffic3		; 33
    938  f433		       98		      TYA		; 2
    939  f434		       18		      CLC		; 2 
    940  f435		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    941  f437		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    942  f439		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    943  f43b		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    944  f43d		       4c 42 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    945  f440				   OpEorOffsetWithCarry3
    946  f440		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    947  f442				   OpAfterEorOffsetWithCarry3		;17
    948  f442		       aa		      TAX		;2
    949  f443		       bd 00 fe 	      LDA	AesTable,X	; 4
    950  f446		       c5 be		      CMP	TrafficChance	;3
    951  f448		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    952  f44a		       a9 02		      LDA	#%00000010	;2
    953  f44c		       85 87		      STA	ENAM1Cache
    954  f44e				   OpFinishDrawTraffic3
    955  f44e
    956  f44e				   OpDrawOponent		;26
    957  f44e		       84 b0		      STY	Tmp0	;3
    958  f450		       a4 cf		      LDY	OpponentLine	;3
    959  f452		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    960  f454		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    961  f456				   OpDrawOpponent
    962  f456		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    963  f458		       85 80		      STA	GRP0Cache	;3
    964  f45a		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    965  f45c		       a4 b0		      LDY	Tmp0	;3
    966  f45e		       4c 72 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    967  f461				   OpSkipDrawOpponent
    968  f461		       c6 cf		      DEC	OpponentLine	;5
    969  f463		       a4 b0		      LDY	Tmp0	;3
    970  f465
    971  f465
    972  f465				   OpDrawTraffic0		; 21 2pe
    973  f465		       98		      TYA		; 2
    974  f466		       18		      CLC		; 2 
    975  f467		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    976  f469		       29 08		      AND	#%00001000	;2
    977  f46b		       f0 05		      BEQ	OpHasNoBorderP0	;3
    978  f46d				   OpHasBorderP0
    979  f46d		       a9 70		      LDA	#%01110000	; 2
    980  f46f		       4c 74 f4 	      JMP	OpStoreBorderP0	; 3
    981  f472				   OpHasNoBorderP0
    982  f472		       a9 00		      LDA	#0	; 2
    983  f474				   OpStoreBorderP0
    984  f474		       85 81		      STA	PF0Cache	; 3
    985  f476		       85 83		      STA	PF2Cache	; 3
    986  f478
    987  f478				   OpSkipDrawTraffic0
    988  f478
    989  f478				   OpWhileScanLoop
    990  f478		       88		      DEY		;2
    991  f479		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    992  f47b		       4c c7 f3 	      JMP	OpScanLoop	;3
    993  f47e				   OpFinishScanLoop		; 7 209 of 222
    994  f47e		       4c 36 f5 	      JMP	FinishScanLoop
    995  f481
    996  f481							;main scanline loop...
    997  f481				   ScanLoop
    998  f481		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    999  f483
   1000  f483							;Start of next line!			
   1001  f483				   DrawCache		;63 Is the last line going to the top of the next frame?
   1002  f483		       a5 81		      LDA	PF0Cache	;3
   1003  f485		       85 0d		      STA	PF0	;3
   1004  f487
   1005  f487		       a5 80		      LDA	GRP0Cache	;3
   1006  f489		       85 1b		      STA	GRP0	;3
   1007  f48b
   1008  f48b		       a5 84		      LDA	GRP1Cache	;3
   1009  f48d		       85 1c		      STA	GRP1	;3
   1010  f48f
   1011  f48f		       a5 86		      LDA	ENAM0Cache	;3
   1012  f491		       85 1d		      STA	ENAM0	;3
   1013  f493
   1014  f493		       a5 85		      LDA	ENABLCache	;3
   1015  f495		       85 1f		      STA	ENABL	;3
   1016  f497
   1017  f497		       a5 87		      LDA	ENAM1Cache	;3
   1018  f499		       85 1e		      STA	ENAM1	;3
   1019  f49b
   1020  f49b		       a5 83		      LDA	PF2Cache	;3
   1021  f49d		       85 0f		      STA	PF2	;3
   1022  f49f
   1023  f49f		       a9 00		      LDA	#0	;2
   1024  f4a1		       85 0d		      STA	PF0	;3
   1025  f4a3		       85 84		      STA	GRP1Cache	;3
   1026  f4a5		       85 85		      STA	ENABLCache	;3
   1027  f4a7		       85 86		      STA	ENAM0Cache	;3
   1028  f4a9		       85 87		      STA	ENAM1Cache	; 3
   1029  f4ab							;STA GRP0Cache
   1030  f4ab		       85 0f		      STA	PF2	;3
   1031  f4ad
   1032  f4ad				   DrawCar0
   1033  f4ad		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1034  f4af		       b0 04		      BCS	SkipDrawCar	;2
   1035  f4b1		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1036  f4b3		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1037  f4b5				   SkipDrawCar
   1038  f4b5
   1039  f4b5							;BEQ DrawTraffic3
   1040  f4b5				   DrawTraffic1 		; 33
   1041  f4b5		       98		      TYA		; 2
   1042  f4b6		       18		      CLC		; 2 
   1043  f4b7		       65 95		      ADC	TrafficOffset1 + 1	;3
   1044  f4b9		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1045  f4bb		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1046  f4bd		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1047  f4bf		       4c c4 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1048  f4c2				   EorOffsetWithCarry
   1049  f4c2		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1050  f4c4				   AfterEorOffsetWithCarry		;17
   1051  f4c4		       aa		      TAX		;2
   1052  f4c5		       bd 00 fe 	      LDA	AesTable,X	; 4
   1053  f4c8		       c5 be		      CMP	TrafficChance	;3
   1054  f4ca		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1055  f4cc		       a9 ff		      LDA	#$FF	;2
   1056  f4ce		       85 86		      STA	ENAM0Cache	;3
   1057  f4d0				   FinishDrawTraffic1
   1058  f4d0
   1059  f4d0				   DrawTraffic2 		; 33
   1060  f4d0		       98		      TYA		; 2
   1061  f4d1		       18		      CLC		; 2 
   1062  f4d2		       65 99		      ADC	TrafficOffset2 + 1	;3
   1063  f4d4		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1064  f4d6		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1065  f4d8		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1066  f4da		       4c df f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1067  f4dd				   EorOffsetWithCarry2
   1068  f4dd		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1069  f4df				   AfterEorOffsetWithCarry2		;17
   1070  f4df		       aa		      TAX		;2
   1071  f4e0		       bd 00 fe 	      LDA	AesTable,X	; 4
   1072  f4e3		       c5 be		      CMP	TrafficChance	;3
   1073  f4e5		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1074  f4e7		       a9 02		      LDA	#%00000010	;2
   1075  f4e9		       85 85		      STA	ENABLCache	;3
   1076  f4eb				   FinishDrawTraffic2
   1077  f4eb
   1078  f4eb							;STA WSYNC ;65 / 137
   1079  f4eb
   1080  f4eb							; LDA Tmp0 ; Flicker this line if drawing car
   1081  f4eb							; BEQ FinishDrawTraffic4
   1082  f4eb				   DrawTraffic3 		; 33
   1083  f4eb		       98		      TYA		; 2
   1084  f4ec		       18		      CLC		; 2 
   1085  f4ed		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1086  f4ef		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1087  f4f1		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1088  f4f3		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1089  f4f5		       4c fa f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1090  f4f8				   EorOffsetWithCarry3
   1091  f4f8		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1092  f4fa				   AfterEorOffsetWithCarry3		;17
   1093  f4fa		       aa		      TAX		;2
   1094  f4fb		       bd 00 fe 	      LDA	AesTable,X	; 4
   1095  f4fe		       c5 be		      CMP	TrafficChance	;3
   1096  f500		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1097  f502		       a9 02		      LDA	#%00000010	;2
   1098  f504		       85 87		      STA	ENAM1Cache
   1099  f506				   FinishDrawTraffic3
   1100  f506
   1101  f506
   1102  f506				   DrawOponent		;26
   1103  f506		       84 b0		      STY	Tmp0	;3
   1104  f508		       a4 cf		      LDY	OpponentLine	;3
   1105  f50a		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1106  f50c		       b0 0b		      BCS	SkipDrawOpponent	;2
   1107  f50e				   DrawOpponent
   1108  f50e		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1109  f510		       85 84		      STA	GRP1Cache	;3
   1110  f512		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1111  f514		       a4 b0		      LDY	Tmp0	;3
   1112  f516		       4c 2a f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1113  f519				   SkipDrawOpponent
   1114  f519		       c6 cf		      DEC	OpponentLine	;5
   1115  f51b		       a4 b0		      LDY	Tmp0	;3
   1116  f51d
   1117  f51d				   DrawTraffic0 		; 21 2pe
   1118  f51d		       98		      TYA		; 2
   1119  f51e		       18		      CLC		; 2 
   1120  f51f		       65 91		      ADC	TrafficOffset0 + 1	;3
   1121  f521		       29 08		      AND	#%00001000	;2
   1122  f523		       f0 05		      BEQ	HasNoBorderP0	;3
   1123  f525				   HasBorderP0
   1124  f525		       a9 70		      LDA	#%01110000	; 2
   1125  f527		       4c 2c f5 	      JMP	StoreBorderP0	; 3
   1126  f52a				   HasNoBorderP0
   1127  f52a		       a9 00		      LDA	#0	; 2
   1128  f52c				   StoreBorderP0
   1129  f52c		       85 81		      STA	PF0Cache	; 3
   1130  f52e		       85 83		      STA	PF2Cache	; 3
   1131  f530
   1132  f530				   SkipDrawTraffic0
   1133  f530
   1134  f530				   WhileScanLoop
   1135  f530		       88		      DEY		;2
   1136  f531		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1137  f533		       4c 81 f4 	      JMP	ScanLoop	;3
   1138  f536				   FinishScanLoop		; 7 209 of 222
   1139  f536
   1140  f536		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1141  f538		       20 86 f6 	      JSR	LoadAll
   1142  f53b		       85 02		      STA	WSYNC	; do stuff!
   1143  f53d		       85 02		      STA	WSYNC
   1144  f53f		       85 02		      STA	WSYNC
   1145  f541							;42 cycles to use here
   1146  f541
   1147  f541				   PrepareOverscan
   1148  f541		       a9 02		      LDA	#2
   1149  f543		       85 02		      STA	WSYNC
   1150  f545		       85 01		      STA	VBLANK
   1151  f547
   1152  f547		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1153  f549		       8d 96 02 	      STA	TIM64T
   1154  f54c
   1155  f54c				   LeftSound		;41
   1156  f54c		       a5 b8		      LDA	CountdownTimer	;3
   1157  f54e		       f0 1b		      BEQ	EngineOff	;2
   1158  f550		       a6 d5		      LDX	Gear
   1159  f552		       a5 f0		      LDA	Player0SpeedL	;3
   1160  f554		       4a		      LSR		;2
   1161  f555		       4a		      LSR		;2
   1162  f556		       4a		      LSR		;2
   1163  f557		       29 0f		      AND	#%00001111	;2
   1164  f559		       85 b0		      STA	Tmp0	;3
   1165  f55b		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1166  f55e		       38		      SEC		;2
   1167  f55f		       e5 b0		      SBC	Tmp0	;3
   1168  f561		       85 17		      STA	AUDF0	;3
   1169  f563		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1170  f566		       85 15		      STA	AUDC0	;3
   1171  f568		       4c 6f f5 	      JMP	EndLeftSound	;3
   1172  f56b				   EngineOff
   1173  f56b		       a9 00		      LDA	#0
   1174  f56d		       85 15		      STA	AUDC0
   1175  f56f
   1176  f56f				   EndLeftSound
   1177  f56f
   1178  f56f
   1179  f56f				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1180  f56f		       a5 c9		      LDA	ScoreFontColor	;3
   1181  f571		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1182  f573		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1183  f575		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1184  f577		       f0 29		      BEQ	PlayCheckpoint	;2
   1185  f579		       a5 8e		      LDA	CollisionCounter	;3
   1186  f57b		       c9 e0		      CMP	#$E0	;2
   1187  f57d		       b0 14		      BCS	PlayColision	;2
   1188  f57f		       a5 cd		      LDA	NextCheckpoint	;3
   1189  f581		       38		      SEC		;2
   1190  f582		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1191  f584		       c9 02		      CMP	#$02	;2
   1192  f586		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1193  f588		       a5 b8		      LDA	CountdownTimer	; 3
   1194  f58a		       f0 53		      BEQ	MuteRightSound	;2
   1195  f58c		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1196  f58e		       90 37		      BCC	PlayWarnTimeEnding	;4
   1197  f590		       4c df f5 	      JMP	MuteRightSound	;3
   1198  f593				   PlayColision
   1199  f593		       a9 1f		      LDA	#31
   1200  f595		       85 18		      STA	AUDF1
   1201  f597		       a9 08		      LDA	#8
   1202  f599		       85 16		      STA	AUDC1
   1203  f59b		       a9 08		      LDA	#8
   1204  f59d		       85 1a		      STA	AUDV1
   1205  f59f		       4c e3 f5 	      JMP	EndRightSound
   1206  f5a2
   1207  f5a2				   PlayCheckpoint
   1208  f5a2		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1209  f5a4		       4a		      LSR		;2
   1210  f5a5		       4a		      LSR		;2
   1211  f5a6		       4a		      LSR		;2
   1212  f5a7		       85 18		      STA	AUDF1	;3
   1213  f5a9		       a9 0c		      LDA	#12	;2
   1214  f5ab		       85 16		      STA	AUDC1	;3
   1215  f5ad		       a9 06		      LDA	#6	;2
   1216  f5af		       85 1a		      STA	AUDV1	;3
   1217  f5b1		       4c e3 f5 	      JMP	EndRightSound	;3
   1218  f5b4
   1219  f5b4				   PlayBeforeCheckpoint
   1220  f5b4		       a5 8c		      LDA	FrameCount0	;3
   1221  f5b6		       29 1c		      AND	#%00011100	;2
   1222  f5b8		       09 03		      ORA	#%00000011	;2
   1223  f5ba		       85 18		      STA	AUDF1	;3
   1224  f5bc		       a9 0c		      LDA	#12	;2
   1225  f5be		       85 16		      STA	AUDC1	;3
   1226  f5c0		       a9 03		      LDA	#3	;2
   1227  f5c2		       85 1a		      STA	AUDV1	;3
   1228  f5c4		       4c e3 f5 	      JMP	EndRightSound	;3
   1229  f5c7
   1230  f5c7				   PlayWarnTimeEnding
   1231  f5c7		       a5 8c		      LDA	FrameCount0	;3
   1232  f5c9		       29 04		      AND	#%00000100	;2
   1233  f5cb		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1234  f5cd		       18		      CLC		;2
   1235  f5ce		       a9 0a		      LDA	#10	;2
   1236  f5d0		       65 b8		      ADC	CountdownTimer	;2
   1237  f5d2		       85 18		      STA	AUDF1	;3
   1238  f5d4		       a9 0c		      LDA	#12	;2
   1239  f5d6		       85 16		      STA	AUDC1	;3
   1240  f5d8		       a9 03		      LDA	#3	;2
   1241  f5da		       85 1a		      STA	AUDV1	;3
   1242  f5dc		       4c e3 f5 	      JMP	EndRightSound	;3
   1243  f5df
   1244  f5df				   MuteRightSound
   1245  f5df		       a9 00		      LDA	#0
   1246  f5e1		       85 1a		      STA	AUDV1
   1247  f5e3				   EndRightSound
   1248  f5e3
   1249  f5e3							;Read Fire Button before, will make it start the game for now.
   1250  f5e3				   StartGame
   1251  f5e3		       a5 0c		      LDA	INPT4	;3
   1252  f5e5		       25 0d		      AND	INPT5	;3 player 
   1253  f5e7		       30 35		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1254  f5e9		       a5 8c		      LDA	FrameCount0
   1255  f5eb		       29 01		      AND	#%00000001
   1256  f5ed		       d0 2f		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1257  f5ef		       a5 bd		      LDA	GameStatus	;3
   1258  f5f1		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1259  f5f3		       d0 29		      BNE	SkipGameStart
   1260  f5f5		       a5 c6		      LDA	GameMode
   1261  f5f7		       c9 10		      CMP	#MAX_GAME_MODE
   1262  f5f9		       d0 0b		      BNE	SetGameRunning
   1263  f5fb		       a9 00		      LDA	#0
   1264  f5fd		       85 c6		      STA	GameMode
   1265  f5ff		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1266  f601		       85 bc		      STA	SwitchDebounceCounter
   1267  f603		       4c 1e f6 	      JMP	SkipGameStart
   1268  f606				   SetGameRunning
   1269  f606		       e6 bd		      INC	GameStatus
   1270  f608		       a9 00		      LDA	#0	;
   1271  f60a		       85 8c		      STA	FrameCount0
   1272  f60c		       85 8d		      STA	FrameCount1
   1273  f60e		       a9 0a		      LDA	#10
   1274  f610		       85 19		      STA	AUDV0
   1275  f612		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1276  f614		       85 c9		      STA	ScoreFontColor
   1277  f616		       85 ca		      STA	OpScoreFontColor
   1278  f618		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1279  f61a		       85 cb		      STA	ScoreFontColorHoldChange
   1280  f61c		       85 cc		      STA	OpScoreFontColorHoldChange
   1281  f61e				   SkipGameStart
   1282  f61e
   1283  f61e				   ReadSwitches
   1284  f61e		       a6 bc		      LDX	SwitchDebounceCounter
   1285  f620		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1286  f622		       a9 01		      LDA	#%00000001
   1287  f624		       2c 82 02 	      BIT	SWCHB
   1288  f627		       d0 07		      BNE	SkipReset
   1289  f629		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1290  f62b		       85 bc		      STA	SwitchDebounceCounter
   1291  f62d		       4c 5d f6 	      JMP	OverScanWaitBeforeReset
   1292  f630				   SkipReset
   1293  f630
   1294  f630				   GameModeSelect
   1295  f630		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1296  f632		       d0 1c		      BNE	SkipGameSelect
   1297  f634		       20 b2 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1298  f637				   ContinueGameSelect
   1299  f637		       a9 02		      LDA	#%00000010
   1300  f639		       2c 82 02 	      BIT	SWCHB
   1301  f63c		       d0 12		      BNE	SkipGameSelect
   1302  f63e		       a6 c6		      LDX	GameMode
   1303  f640		       e0 10		      CPX	#MAX_GAME_MODE
   1304  f642		       f0 04		      BEQ	ResetGameMode
   1305  f644		       e8		      INX
   1306  f645		       4c 4a f6 	      JMP	StoreGameMode
   1307  f648				   ResetGameMode
   1308  f648		       a2 00		      LDX	#0
   1309  f64a				   StoreGameMode
   1310  f64a		       86 c6		      STX	GameMode
   1311  f64c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1312  f64e		       85 bc		      STA	SwitchDebounceCounter
   1313  f650				   SkipGameSelect
   1314  f650		       4c 55 f6 	      JMP	EndReadSwitches
   1315  f653				   DecrementSwitchDebounceCounter
   1316  f653		       c6 bc		      DEC	SwitchDebounceCounter
   1317  f655				   EndReadSwitches
   1318  f655
   1319  f655				   OverScanWait
   1320  f655		       ad 84 02 	      LDA	INTIM
   1321  f658		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1322  f65a		       4c cc f0 	      JMP	MainLoop
   1323  f65d
   1324  f65d				   OverScanWaitBeforeReset
   1325  f65d		       ad 84 02 	      LDA	INTIM
   1326  f660		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1327  f662		       4c 12 f0 	      JMP	Start
   1328  f665
   1329  f665				   Subroutines
   1330  f665
   1331  f665				   ClearAll		; 52
   1332  f665		       a9 00		      LDA	#0	;2
   1333  f667		       85 1c		      STA	GRP1	;3
   1334  f669		       85 1f		      STA	ENABL	;3
   1335  f66b		       85 1d		      STA	ENAM0	;3
   1336  f66d		       85 1e		      STA	ENAM1	;3
   1337  f66f		       85 84		      STA	GRP1Cache	;3
   1338  f671		       85 85		      STA	ENABLCache	;3
   1339  f673		       85 86		      STA	ENAM0Cache	;3
   1340  f675		       85 87		      STA	ENAM1Cache	;3
   1341  f677
   1342  f677				   ClearPF		; 26
   1343  f677		       a9 00		      LDA	#0	;2
   1344  f679				   ClearPFSkipLDA0
   1345  f679		       85 0d		      STA	PF0	;3
   1346  f67b		       85 0e		      STA	PF1	;3
   1347  f67d		       85 0f		      STA	PF2	;3	
   1348  f67f		       85 81		      STA	PF0Cache	;3
   1349  f681		       85 82		      STA	PF1Cache	;3
   1350  f683		       85 83		      STA	PF2Cache	;3 
   1351  f685		       60		      RTS		;6
   1352  f686				   EndClearAll
   1353  f686
   1354  f686				   LoadAll		; 48
   1355  f686		       a5 81		      LDA	PF0Cache	;3
   1356  f688		       85 0d		      STA	PF0	;3
   1357  f68a
   1358  f68a		       a5 82		      LDA	PF1Cache	;3
   1359  f68c		       85 0e		      STA	PF1	;3
   1360  f68e
   1361  f68e		       a5 83		      LDA	PF2Cache	;3
   1362  f690		       85 0f		      STA	PF2	;3
   1363  f692
   1364  f692		       a5 84		      LDA	GRP1Cache	;3
   1365  f694		       85 1c		      STA	GRP1	;3
   1366  f696
   1367  f696		       a5 85		      LDA	ENABLCache	;3
   1368  f698		       85 1f		      STA	ENABL	;3
   1369  f69a
   1370  f69a		       a5 86		      LDA	ENAM0Cache	;3
   1371  f69c		       85 1d		      STA	ENAM0	;3
   1372  f69e
   1373  f69e		       a5 87		      LDA	ENAM1Cache	;3
   1374  f6a0		       85 1e		      STA	ENAM1	;3
   1375  f6a2
   1376  f6a2		       60		      RTS		;6
   1377  f6a3				   EndLoadAll
   1378  f6a3
   1379  f6a3				   NextDifficulty
   1380  f6a3		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1381  f6a5		       29 01		      AND	#%00000001
   1382  f6a7		       d0 26		      BNE	CheckRandomDifficulty
   1383  f6a9
   1384  f6a9		       a5 c4		      LDA	CurrentDifficulty
   1385  f6ab		       18		      CLC
   1386  f6ac		       69 01		      ADC	#1
   1387  f6ae		       29 03		      AND	#%00000011	; 0 to 3
   1388  f6b0		       85 c4		      STA	CurrentDifficulty
   1389  f6b2
   1390  f6b2				   ConfigureDifficulty
   1391  f6b2		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1392  f6b4		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1393  f6b7		       85 be		      STA	TrafficChance
   1394  f6b9		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1395  f6bc		       85 c2		      STA	TrafficColor
   1396  f6be
   1397  f6be		       a5 c6		      LDA	GameMode	;
   1398  f6c0		       29 01		      AND	#%00000001
   1399  f6c2		       f0 03		      BEQ	UseNextDifficultyTime
   1400  f6c4		       4c c8 f6 	      JMP	StoreDifficultyTime
   1401  f6c7				   UseNextDifficultyTime
   1402  f6c7		       c8		      INY
   1403  f6c8				   StoreDifficultyTime
   1404  f6c8		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1405  f6cb		       85 c0		      STA	CheckpointTime
   1406  f6cd		       85 c1		      STA	OpCheckpointTime
   1407  f6cf
   1408  f6cf				   CheckRandomDifficulty
   1409  f6cf		       a5 c6		      LDA	GameMode
   1410  f6d1		       29 08		      AND	#%00001000	; Random difficulties
   1411  f6d3		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1412  f6d5				   RandomDifficulty
   1413  f6d5		       a6 8c		      LDX	FrameCount0
   1414  f6d7		       bd 00 fe 	      LDA	AesTable,X
   1415  f6da							;EOR TrafficChance, no need, lets make life simple
   1416  f6da		       29 3f		      AND	#%00111111
   1417  f6dc		       85 be		      STA	TrafficChance
   1418  f6de		       85 bf		      STA	OpTrafficChance
   1419  f6e0
   1420  f6e0				   ReturnFromNextDifficulty
   1421  f6e0		       60		      RTS
   1422  f6e1				   EndNextDifficulty
   1423  f6e1
   1424  f6e1				   DefaultOffsets
   1425  f6e1		       a9 20		      LDA	#$20
   1426  f6e3		       85 96		      STA	TrafficOffset1 + 2
   1427  f6e5		       85 a6		      STA	OpTrafficOffset1 + 2
   1428  f6e7		       a9 40		      LDA	#$40
   1429  f6e9		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1430  f6eb		       85 aa		      STA	OpTrafficOffset2 + 2
   1431  f6ed		       a9 60		      LDA	#$60
   1432  f6ef		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1433  f6f1		       85 ae		      STA	OpTrafficOffset3 + 2
   1434  f6f3		       a9 80		      LDA	#$80
   1435  f6f5		       60		      RTS
   1436  f6f6
   1437  f6f6				   PrintStaticText		; Preload X with the offset referent to StaticText
   1438  f6f6		       bd 00 ff 	      LDA	StaticText,X
   1439  f6f9		       85 d0		      STA	ScoreD0
   1440  f6fb		       e8		      INX
   1441  f6fc		       bd 00 ff 	      LDA	StaticText,X
   1442  f6ff		       85 d1		      STA	ScoreD1
   1443  f701		       e8		      INX
   1444  f702		       bd 00 ff 	      LDA	StaticText,X
   1445  f705		       85 d2		      STA	ScoreD2
   1446  f707		       e8		      INX
   1447  f708		       bd 00 ff 	      LDA	StaticText,X
   1448  f70b		       85 d3		      STA	ScoreD3
   1449  f70d		       e8		      INX
   1450  f70e		       bd 00 ff 	      LDA	StaticText,X
   1451  f711		       85 d4		      STA	ScoreD4
   1452  f713		       60		      RTS
   1453  f714
   1454  f714				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1455  f714		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1456  f716		       85 c9		      STA	ScoreFontColor
   1457  f718		       a9 01		      LDA	#1
   1458  f71a		       85 cb		      STA	ScoreFontColorHoldChange
   1459  f71c
   1460  f71c		       a5 8d		      LDA	FrameCount1
   1461  f71e		       29 07		      AND	#%00000111
   1462  f720		       85 b3		      STA	Tmp3
   1463  f722							;0 is Zelda Name, (default)
   1464  f722		       a9 01		      LDA	#1
   1465  f724		       c5 b3		      CMP	Tmp3
   1466  f726		       f0 38		      BEQ	PrintZeldaDateLeft
   1467  f728
   1468  f728		       a9 02		      LDA	#2
   1469  f72a		       c5 b3		      CMP	Tmp3
   1470  f72c		       f0 23		      BEQ	PrintPolvinhosLeft
   1471  f72e
   1472  f72e		       a9 03		      LDA	#3
   1473  f730		       c5 b3		      CMP	Tmp3
   1474  f732		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1475  f734
   1476  f734		       a9 04		      LDA	#4
   1477  f736		       c5 b3		      CMP	Tmp3
   1478  f738		       f0 1c		      BEQ	PrintIvonneLeft
   1479  f73a
   1480  f73a		       a9 05		      LDA	#5
   1481  f73c		       c5 b3		      CMP	Tmp3
   1482  f73e		       f0 2a		      BEQ	PrintIvonneDateLeft
   1483  f740
   1484  f740		       a9 06		      LDA	#6
   1485  f742		       c5 b3		      CMP	Tmp3
   1486  f744		       f0 15		      BEQ	PrintArtLeft
   1487  f746
   1488  f746		       a9 07		      LDA	#7
   1489  f748		       c5 b3		      CMP	Tmp3
   1490  f74a		       f0 23		      BEQ	PrintLeonardoLeft
   1491  f74c
   1492  f74c				   PrintZeldaLeft
   1493  f74c		       a2 28		      LDX	#<ZeldaTextLeft
   1494  f74e		       4c 74 f7 	      JMP	ProcessPrintEasterEgg
   1495  f751				   PrintPolvinhosLeft
   1496  f751		       a2 3c		      LDX	#<PolvinhosTextLeft
   1497  f753		       4c 74 f7 	      JMP	ProcessPrintEasterEgg
   1498  f756				   PrintIvonneLeft
   1499  f756		       a2 50		      LDX	#<IvonneTextLeft
   1500  f758		       4c 74 f7 	      JMP	ProcessPrintEasterEgg
   1501  f75b				   PrintArtLeft
   1502  f75b		       a2 64		      LDX	#<PaperArtTextLeft
   1503  f75d		       4c 74 f7 	      JMP	ProcessPrintEasterEgg
   1504  f760
   1505  f760				   PrintZeldaDateLeft
   1506  f760		       a2 32		      LDX	#<ZeldaDateLeft
   1507  f762		       4c 74 f7 	      JMP	ProcessPrintEasterEgg
   1508  f765				   PrintPolvinhosDateLeft
   1509  f765		       a2 46		      LDX	#<PolvinhosDateLeft
   1510  f767		       4c 74 f7 	      JMP	ProcessPrintEasterEgg
   1511  f76a				   PrintIvonneDateLeft
   1512  f76a		       a2 5a		      LDX	#<IvonneDateLeft
   1513  f76c		       4c 74 f7 	      JMP	ProcessPrintEasterEgg
   1514  f76f				   PrintLeonardoLeft
   1515  f76f		       a2 6e		      LDX	#<LeonardoTextLeft
   1516  f771		       4c 74 f7 	      JMP	ProcessPrintEasterEgg
   1517  f774
   1518  f774				   ProcessPrintEasterEgg
   1519  f774		       a5 8c		      LDA	FrameCount0	;3
   1520  f776		       29 01		      AND	#%00000001	;2
   1521  f778		       d0 03		      BNE	TranformIntoRightText
   1522  f77a		       4c 82 f7 	      JMP	PrintEasterEggText
   1523  f77d				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1524  f77d		       8a		      TXA
   1525  f77e		       18		      CLC
   1526  f77f		       69 05		      ADC	#HALF_TEXT_SIZE
   1527  f781		       aa		      TAX
   1528  f782
   1529  f782				   PrintEasterEggText
   1530  f782		       20 f6 f6 	      JSR	PrintStaticText
   1531  f785		       60		      RTS
   1532  f786
   1533  f786				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1534  f786		       a2 00		      LDX	#0
   1535  f788		       a0 04		      LDY	#FONT_OFFSET
   1536  f78a
   1537  f78a				   ScoreLoop		; 20 
   1538  f78a		       85 02		      STA	WSYNC	;2
   1539  f78c
   1540  f78c		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1541  f78e		       85 0d		      STA	PF0	;3
   1542  f790
   1543  f790		       a5 82		      LDA	PF1Cache	;3
   1544  f792		       85 0e		      STA	PF1	;3
   1545  f794
   1546  f794		       a5 83		      LDA	PF2Cache	;3
   1547  f796		       85 0f		      STA	PF2	;3
   1548  f798
   1549  f798				   DrawScoreD0		; 15
   1550  f798		       a6 d0		      LDX	ScoreD0	; 3
   1551  f79a		       bd 00 fd 	      LDA	Font,X	;4
   1552  f79d		       85 81		      STA	PF0Cache	;3
   1553  f79f		       c6 d0		      DEC	ScoreD0	;5
   1554  f7a1
   1555  f7a1				   DrawScoreD1		; 23	
   1556  f7a1		       a6 d1		      LDX	ScoreD1	; 3
   1557  f7a3		       bd 00 fd 	      LDA	Font,X	;4
   1558  f7a6		       0a		      ASL		;2
   1559  f7a7		       0a		      ASL		;2
   1560  f7a8		       0a		      ASL		;2
   1561  f7a9		       0a		      ASL		;2
   1562  f7aa		       85 82		      STA	PF1Cache	;3
   1563  f7ac		       c6 d1		      DEC	ScoreD1	;5
   1564  f7ae
   1565  f7ae				   DrawScoreD2		; 20
   1566  f7ae		       a6 d2		      LDX	ScoreD2	; 3
   1567  f7b0		       bd 00 fd 	      LDA	Font,X	;4
   1568  f7b3		       29 0f		      AND	#%00001111	;2
   1569  f7b5		       05 82		      ORA	PF1Cache	;3
   1570  f7b7		       85 82		      STA	PF1Cache	;3
   1571  f7b9		       c6 d2		      DEC	ScoreD2	;5
   1572  f7bb
   1573  f7bb				   DrawScoreD3		; 23
   1574  f7bb		       a6 d3		      LDX	ScoreD3	; 3
   1575  f7bd		       bd 00 fd 	      LDA	Font,X	;4
   1576  f7c0		       4a		      LSR		;2
   1577  f7c1		       4a		      LSR		;2
   1578  f7c2		       4a		      LSR		;2
   1579  f7c3		       4a		      LSR		;2
   1580  f7c4		       85 83		      STA	PF2Cache	;3
   1581  f7c6		       c6 d3		      DEC	ScoreD3	;5
   1582  f7c8
   1583  f7c8				   DrawScoreD4		; 20
   1584  f7c8		       a6 d4		      LDX	ScoreD4	; 3
   1585  f7ca		       bd 00 fd 	      LDA	Font,X	;4
   1586  f7cd		       29 f0		      AND	#%11110000	;2
   1587  f7cf		       05 83		      ORA	PF2Cache	;3
   1588  f7d1		       85 83		      STA	PF2Cache	;3
   1589  f7d3		       c6 d4		      DEC	ScoreD4	;5
   1590  f7d5
   1591  f7d5
   1592  f7d5		       88		      DEY		;2
   1593  f7d6		       10 b2		      BPL	ScoreLoop	;4
   1594  f7d8
   1595  f7d8		       85 02		      STA	WSYNC
   1596  f7da		       20 86 f6 	      JSR	LoadAll
   1597  f7dd		       60		      RTS		; 6
   1598  f7de
   1599  f7de				   PrintRightDecimalDigits
   1600  f7de		       b9 00 00 	      LDA	0,Y
   1601  f7e1		       4a		      LSR
   1602  f7e2		       4a		      LSR
   1603  f7e3		       4a		      LSR
   1604  f7e4		       4a		      LSR
   1605  f7e5		       aa		      TAX
   1606  f7e6		       bd be fd 	      LDA	FontLookup,X	;4
   1607  f7e9		       85 d2		      STA	ScoreD2	;3
   1608  f7eb
   1609  f7eb		       b9 00 00 	      LDA	0,Y
   1610  f7ee		       29 0f		      AND	#%00001111
   1611  f7f0		       aa		      TAX
   1612  f7f1		       bd be fd 	      LDA	FontLookup,X	;4
   1613  f7f4		       85 d3		      STA	ScoreD3	;3
   1614  f7f6
   1615  f7f6		       c8		      INY
   1616  f7f7		       b9 00 00 	      LDA	0,Y
   1617  f7fa		       4a		      LSR
   1618  f7fb		       4a		      LSR
   1619  f7fc		       4a		      LSR
   1620  f7fd		       4a		      LSR
   1621  f7fe		       aa		      TAX
   1622  f7ff		       bd be fd 	      LDA	FontLookup,X	;4
   1623  f802		       85 d0		      STA	ScoreD0	;3
   1624  f804
   1625  f804		       b9 00 00 	      LDA	0,Y
   1626  f807		       29 0f		      AND	#%00001111
   1627  f809		       aa		      TAX
   1628  f80a		       bd be fd 	      LDA	FontLookup,X	;4
   1629  f80d		       85 d1		      STA	ScoreD1	;3
   1630  f80f
   1631  f80f		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1632  f811		       85 d4		      STA	ScoreD4
   1633  f813		       60		      RTS
   1634  f814
   1635  f814				   PrintLastLeftDecimalDigits
   1636  f814		       b9 00 00 	      LDA	0,Y
   1637  f817		       4a		      LSR
   1638  f818		       4a		      LSR
   1639  f819		       4a		      LSR
   1640  f81a		       4a		      LSR
   1641  f81b		       aa		      TAX
   1642  f81c		       bd be fd 	      LDA	FontLookup,X	;4
   1643  f81f		       85 d3		      STA	ScoreD3	;3
   1644  f821		       b9 00 00 	      LDA	0,Y
   1645  f824		       29 0f		      AND	#%00001111
   1646  f826		       aa		      TAX
   1647  f827		       bd be fd 	      LDA	FontLookup,X	;4
   1648  f82a		       85 d4		      STA	ScoreD4	;3
   1649  f82c		       60		      RTS
   1650  f82d
   1651  f82d				   PrintZerosLeft
   1652  f82d		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1653  f82f		       85 d2		      STA	ScoreD2
   1654  f831		       85 d3		      STA	ScoreD3
   1655  f833		       85 d4		      STA	ScoreD4
   1656  f835		       60		      RTS
   1657  f836
   1658  f836				   DrawGameOverScoreLine
   1659  f836		       85 02		      STA	WSYNC
   1660  f838		       20 86 f7 	      JSR	PrintScore
   1661  f83b		       85 02		      STA	WSYNC
   1662  f83d		       85 02		      STA	WSYNC
   1663  f83f		       20 77 f6 	      JSR	ClearPF
   1664  f842		       60		      RTS
   1665  f843
   1666  f843				   DrawGameOverScreenLeft
   1667  f843		       85 02		      STA	WSYNC
   1668  f845		       20 77 f6 	      JSR	ClearPF
   1669  f848
   1670  f848				   DrawGlideTimerLeft
   1671  f848		       20 0a f9 	      JSR	Sleep8Lines
   1672  f84b		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1673  f84d		       85 06		      STA	COLUP0
   1674  f84f		       85 02		      STA	WSYNC
   1675  f851		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1676  f853		       85 d0		      STA	ScoreD0
   1677  f855		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1678  f857		       85 d1		      STA	ScoreD1
   1679  f859		       20 2d f8 	      JSR	PrintZerosLeft
   1680  f85c		       20 36 f8 	      JSR	DrawGameOverScoreLine
   1681  f85f
   1682  f85f				   DrawHitCountLeft
   1683  f85f		       20 0a f9 	      JSR	Sleep8Lines
   1684  f862		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1685  f864		       85 06		      STA	COLUP0
   1686  f866		       85 02		      STA	WSYNC
   1687  f868		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1688  f86a		       85 d0		      STA	ScoreD0
   1689  f86c		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1690  f86e		       85 d1		      STA	ScoreD1
   1691  f870		       20 2d f8 	      JSR	PrintZerosLeft
   1692  f873		       20 36 f8 	      JSR	DrawGameOverScoreLine
   1693  f876
   1694  f876				   DrawCheckpointCountLeft
   1695  f876		       20 0a f9 	      JSR	Sleep8Lines
   1696  f879		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1697  f87b		       85 06		      STA	COLUP0
   1698  f87d		       85 02		      STA	WSYNC
   1699  f87f		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1700  f881		       85 d0		      STA	ScoreD0
   1701  f883		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1702  f885		       85 d1		      STA	ScoreD1
   1703  f887		       20 2d f8 	      JSR	PrintZerosLeft
   1704  f88a		       20 36 f8 	      JSR	DrawGameOverScoreLine
   1705  f88d
   1706  f88d				   DrawGameVersionLeft
   1707  f88d		       20 0a f9 	      JSR	Sleep8Lines
   1708  f890		       a9 49		      LDA	#VERSION_COLOR
   1709  f892		       85 06		      STA	COLUP0
   1710  f894
   1711  f894		       a5 c6		      LDA	GameMode
   1712  f896		       aa		      TAX
   1713  f897		       bd be fd 	      LDA	FontLookup,X	;4
   1714  f89a		       85 d0		      STA	ScoreD0	;3
   1715  f89c
   1716  f89c		       a5 c7		      LDA	CurrentCarId
   1717  f89e		       aa		      TAX
   1718  f89f		       bd be fd 	      LDA	FontLookup,X	;4
   1719  f8a2		       85 d1		      STA	ScoreD1	;3
   1720  f8a4
   1721  f8a4		       a5 db		      LDA	StartSWCHB
   1722  f8a6		       29 40		      AND	#%01000000	; P0 difficulty
   1723  f8a8		       49 40		      EOR	#%01000000	; Reverse bytes
   1724  f8aa		       2a		      ROL
   1725  f8ab		       2a		      ROL
   1726  f8ac		       2a		      ROL
   1727  f8ad		       18		      CLC
   1728  f8ae		       69 0a		      ADC	#10
   1729  f8b0		       aa		      TAX
   1730  f8b1		       bd be fd 	      LDA	FontLookup,X	;4
   1731  f8b4		       85 d2		      STA	ScoreD2	;3
   1732  f8b6
   1733  f8b6		       a5 db		      LDA	StartSWCHB
   1734  f8b8		       29 80		      AND	#%10000000	; P0 difficulty
   1735  f8ba		       49 80		      EOR	#%10000000	; Reverse bytes
   1736  f8bc		       2a		      ROL
   1737  f8bd		       2a		      ROL
   1738  f8be		       18		      CLC
   1739  f8bf		       69 0a		      ADC	#10
   1740  f8c1		       aa		      TAX
   1741  f8c2		       bd be fd 	      LDA	FontLookup,X	;4
   1742  f8c5		       85 d3		      STA	ScoreD3	;3
   1743  f8c7
   1744  f8c7		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1745  f8c9		       85 d4		      STA	ScoreD4
   1746  f8cb
   1747  f8cb		       20 36 f8 	      JSR	DrawGameOverScoreLine
   1748  f8ce
   1749  f8ce		       4c e7 f8 	      JMP	FinalizeDrawGameOver
   1750  f8d1
   1751  f8d1				   DrawGameOverScreenRight
   1752  f8d1		       85 02		      STA	WSYNC
   1753  f8d3		       20 77 f6 	      JSR	ClearPF
   1754  f8d6
   1755  f8d6				   DrawVersionRight
   1756  f8d6		       20 0a f9 	      JSR	Sleep8Lines
   1757  f8d9		       a9 49		      LDA	#VERSION_COLOR
   1758  f8db		       85 07		      STA	COLUP1
   1759  f8dd		       85 02		      STA	WSYNC
   1760  f8df		       a2 78		      LDX	#<VersionText
   1761  f8e1		       20 f6 f6 	      JSR	PrintStaticText
   1762  f8e4		       20 36 f8 	      JSR	DrawGameOverScoreLine
   1763  f8e7
   1764  f8e7				   FinalizeDrawGameOver
   1765  f8e7		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1766  f8e9		       85 c9		      STA	ScoreFontColor
   1767  f8eb		       20 01 f9 	      JSR	Sleep4Lines
   1768  f8ee		       20 11 f9 	      JSR	Sleep32Lines
   1769  f8f1		       20 11 f9 	      JSR	Sleep32Lines
   1770  f8f4		       4c 41 f5 	      JMP	PrepareOverscan
   1771  f8f7
   1772  f8f7				   WaitForVblankEnd
   1773  f8f7		       ad 84 02 	      LDA	INTIM
   1774  f8fa		       d0 fb		      BNE	WaitForVblankEnd
   1775  f8fc		       85 02		      STA	WSYNC
   1776  f8fe		       85 01		      STA	VBLANK
   1777  f900		       60		      RTS
   1778  f901
   1779  f901				   Sleep4Lines
   1780  f901		       85 02		      STA	WSYNC
   1781  f903		       85 02		      STA	WSYNC
   1782  f905		       85 02		      STA	WSYNC
   1783  f907		       85 02		      STA	WSYNC
   1784  f909		       60		      RTS
   1785  f90a
   1786  f90a				   Sleep8Lines
   1787  f90a		       20 01 f9 	      JSR	Sleep4Lines
   1788  f90d		       20 01 f9 	      JSR	Sleep4Lines
   1789  f910		       60		      RTS
   1790  f911
   1791  f911				   Sleep32Lines
   1792  f911		       20 0a f9 	      JSR	Sleep8Lines
   1793  f914		       20 0a f9 	      JSR	Sleep8Lines
   1794  f917		       20 0a f9 	      JSR	Sleep8Lines
   1795  f91a		       20 0a f9 	      JSR	Sleep8Lines
   1796  f91d		       60		      RTS
   1797  f91e
   1798  f91e				   ConfigureCarSprites
   1799  f91e		       a5 8c		      LDA	FrameCount0
   1800  f920		       29 01		      AND	#%00000001
   1801  f922		       d0 0b		      BNE	LoadForRightScreenSprites
   1802  f924				   LoadForLeftScreenSprites
   1803  f924		       a5 c7		      LDA	CurrentCarId
   1804  f926		       85 b0		      STA	Tmp0
   1805  f928		       a5 c8		      LDA	OpCurrentCarId
   1806  f92a		       85 b1		      STA	Tmp1
   1807  f92c		       4c 37 f9 	      JMP	LoadCarSpritesFromIds
   1808  f92f				   LoadForRightScreenSprites
   1809  f92f		       a5 c7		      LDA	CurrentCarId
   1810  f931		       85 b1		      STA	Tmp1
   1811  f933		       a5 c8		      LDA	OpCurrentCarId
   1812  f935		       85 b0		      STA	Tmp0
   1813  f937
   1814  f937				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1815  f937		       a4 b0		      LDY	Tmp0
   1816  f939		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1817  f93c		       85 d7		      STA	CarSpritePointerL
   1818  f93e		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1819  f941		       85 d8		      STA	CarSpritePointerH
   1820  f943				   ConfigureOpponentCarSprite
   1821  f943		       a4 b1		      LDY	Tmp1
   1822  f945		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1823  f948		       85 d9		      STA	EnemyCarSpritePointerL
   1824  f94a		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1825  f94d		       85 da		      STA	EnemyCarSpritePointerH
   1826  f94f		       60		      RTS
   1827  f950
   1828  f950							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1829  f950							;X player 0 or 1
   1830  f950				   SelectCarWithDpad
   1831  f950		       a0 03		      LDY	#3
   1832  f952				   SelectCarWithDpadLoop
   1833  f952		       ad 80 02 	      LDA	SWCHA
   1834  f955		       25 b0		      AND	Tmp0
   1835  f957		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1836  f959		       98		      TYA
   1837  f95a		       95 c7		      STA	CurrentCarId,X
   1838  f95c				   ContinueSelectCarWithDpadLoop
   1839  f95c		       46 b0		      LSR	Tmp0
   1840  f95e		       88		      DEY
   1841  f95f		       10 f1		      BPL	SelectCarWithDpadLoop
   1842  f961		       60		      RTS
   1843  f962
   1844  f962							; Movement and colision are binded because the car must be moved after duplicate size.
   1845  f962							; Use X for the player
   1846  f962							; Tmp2 Traffic colision result
   1847  f962							; Tmp3 Opponent Colision result (Not implemented)
   1848  f962				   TestCollisionAndMove
   1849  f962							; Until store the movemnt, Y contains the value to be stored.
   1850  f962							; see if player0 colides with the rest
   1851  f962		       a5 b2		      LDA	Tmp2
   1852  f964		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1853  f966		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1854  f968		       d0 25		      BNE	NoCollision
   1855  f96a		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1856  f96c		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1857  f96e		       f0 1f		      BEQ	NoCollision
   1858  f970		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1859  f972		       f0 1b		      BEQ	NoCollision
   1860  f974		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1861  f976		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1862  f978		       b5 f2		      LDA	Player0SpeedH,X
   1863  f97a		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1864  f97c		       a9 10		      LDA	#COLLISION_SPEED_L
   1865  f97e		       d5 f0		      CMP	Player0SpeedL,X
   1866  f980		       b0 04		      BCS	SkipSetColisionSpeedL
   1867  f982				   SetColisionSpeedL
   1868  f982		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1869  f984		       95 f0		      STA	Player0SpeedL,X
   1870  f986				   SkipSetColisionSpeedL
   1871  f986		       a9 00		      LDA	#0
   1872  f988		       95 f2		      STA	Player0SpeedH,X
   1873  f98a		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1874  f98c		       4c df f9 	      JMP	StoreHMove	; We keep position consistent
   1875  f98f				   NoCollision
   1876  f98f
   1877  f98f				   DecrementCollision
   1878  f98f		       b5 8e		      LDA	CollisionCounter,X
   1879  f991		       f0 06		      BEQ	FinishDecrementCollision
   1880  f993		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1881  f995		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1882  f997		       d6 8e		      DEC	CollisionCounter,X
   1883  f999				   FinishDecrementCollision
   1884  f999
   1885  f999				   ResetPlayerSize
   1886  f999		       d0 04		      BNE	FinishResetPlayerSize
   1887  f99b		       a9 30		      LDA	#%00110000
   1888  f99d		       95 04		      STA	NUSIZ0,X	;
   1889  f99f				   FinishResetPlayerSize
   1890  f99f
   1891  f99f				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1892  f99f		       b5 8e		      LDA	CollisionCounter,X
   1893  f9a1		       c9 01		      CMP	#1	; Last frame before reset
   1894  f9a3		       d0 05		      BNE	SkipResetPlayerPosition
   1895  f9a5		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1896  f9a7		       4c df f9 	      JMP	StoreHMove
   1897  f9aa				   SkipResetPlayerPosition
   1898  f9aa
   1899  f9aa				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1900  f9aa		       b5 c7		      LDA	CurrentCarId,X
   1901  f9ac		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1902  f9ae		       d0 08		      BNE	PrepareReadXAxis
   1903  f9b0		       a0 00		      LDY	#0
   1904  f9b2		       a5 8c		      LDA	FrameCount0
   1905  f9b4		       29 01		      AND	#DRAGSTER_TURN_MASK
   1906  f9b6		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1907  f9b8
   1908  f9b8				   PrepareReadXAxis
   1909  f9b8		       a0 00		      LDY	#0
   1910  f9ba		       b5 b6		      LDA	Player0X,X
   1911  f9bc				   BeginReadLeft
   1912  f9bc		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1913  f9be		       bd d1 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1914  f9c1		       2c 80 02 	      BIT	SWCHA
   1915  f9c4		       d0 07		      BNE	SkipMoveLeft
   1916  f9c6		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1917  f9c8		       d6 b6		      DEC	Player0X,X
   1918  f9ca		       4c df f9 	      JMP	StoreHMove	; Cannot move left and right...
   1919  f9cd				   SkipMoveLeft
   1920  f9cd				   BeginReadRight
   1921  f9cd		       b5 b6		      LDA	Player0X,X
   1922  f9cf		       c9 2c		      CMP	#PLAYER_MAX_X
   1923  f9d1		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1924  f9d3		       bd d3 fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1925  f9d6		       2c 80 02 	      BIT	SWCHA
   1926  f9d9		       d0 04		      BNE	SkipMoveRight
   1927  f9db		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1928  f9dd		       f6 b6		      INC	Player0X,X
   1929  f9df				   SkipMoveRight
   1930  f9df				   StoreHMove
   1931  f9df		       94 20		      STY	HMP0,X	;set the move for player 0
   1932  f9e1
   1933  f9e1				   ClearCollision
   1934  f9e1		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1935  f9e3		       60		      RTS
   1936  f9e4
   1937  f9e4							; X Traffic offset 4 bits each lane, 4 lanes per player
   1938  f9e4							; Tmp3 Max X offset
   1939  f9e4							; Tmp4 Max Player Speed L
   1940  f9e4							; Tmp5 Max Player Speed H
   1941  f9e4				   UpdateOffsets
   1942  f9e4		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1943  f9e6		       a5 c6		      LDA	GameMode
   1944  f9e8		       29 04		      AND	#%00000100	; GameModes with high delta
   1945  f9ea		       f0 02		      BEQ	UpdateOffsetsLoop
   1946  f9ec		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1947  f9ee
   1948  f9ee				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1949  f9ee		       38		      SEC
   1950  f9ef		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1951  f9f1		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1952  f9f4		       85 b0		      STA	Tmp0
   1953  f9f6		       c8		      INY
   1954  f9f7		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1955  f9f9		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1956  f9fc		       85 b1		      STA	Tmp1
   1957  f9fe		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1958  fa00		       e9 00		      SBC	#0
   1959  fa02		       85 b2		      STA	Tmp2
   1960  fa04
   1961  fa04				   AddsTheResult
   1962  fa04		       18		      CLC
   1963  fa05		       a5 b0		      LDA	Tmp0
   1964  fa07		       75 90		      ADC	TrafficOffset0,X
   1965  fa09		       95 90		      STA	TrafficOffset0,X
   1966  fa0b		       e8		      INX
   1967  fa0c		       a5 b1		      LDA	Tmp1
   1968  fa0e		       75 90		      ADC	TrafficOffset0,X
   1969  fa10		       95 90		      STA	TrafficOffset0,X
   1970  fa12		       e8		      INX
   1971  fa13		       a5 b2		      LDA	Tmp2	; Carry
   1972  fa15		       75 90		      ADC	TrafficOffset0,X
   1973  fa17		       95 90		      STA	TrafficOffset0,X
   1974  fa19		       90 0f		      BCC	CalculateOffsetCache
   1975  fa1b				   CalculatePlayer0Msb
   1976  fa1b		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1977  fa1d		       d0 05		      BNE	CalculatePlayer1Msb
   1978  fa1f		       e6 ba		      INC	Traffic0Msb
   1979  fa21		       4c 2a fa 	      JMP	CalculateOffsetCache
   1980  fa24				   CalculatePlayer1Msb
   1981  fa24		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1982  fa26		       d0 02		      BNE	CalculateOffsetCache
   1983  fa28		       e6 bb		      INC	OpTraffic0Msb
   1984  fa2a
   1985  fa2a				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1986  fa2a		       e8		      INX
   1987  fa2b		       38		      SEC
   1988  fa2c		       69 00		      ADC	#0	;Increment by one
   1989  fa2e		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1990  fa30
   1991  fa30				   PrepareNextUpdateLoop
   1992  fa30		       c8		      INY
   1993  fa31		       e8		      INX
   1994  fa32		       e4 b3		      CPX	Tmp3	; Max X offset
   1995  fa34		       d0 b8		      BNE	UpdateOffsetsLoop
   1996  fa36		       60		      RTS
   1997  fa37
   1998  fa37							; X Player 0 or 1
   1999  fa37				   ProcessSpeed
   2000  fa37				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2001  fa37		       a9 00		      LDA	#0
   2002  fa39		       85 b0		      STA	Tmp0	; Break speed
   2003  fa3b		       b5 b8		      LDA	CountdownTimer,X
   2004  fa3d		       d0 0d		      BNE	Break
   2005  fa3f		       b4 c7		      LDY	CurrentCarId,X
   2006  fa41		       a5 8c		      LDA	FrameCount0
   2007  fa43		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2008  fa46		       d0 04		      BNE	Break
   2009  fa48		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2010  fa4a		       85 b0		      STA	Tmp0
   2011  fa4c
   2012  fa4c				   Break
   2013  fa4c		       bd cf fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2014  fa4f		       2c 80 02 	      BIT	SWCHA
   2015  fa52		       d0 12		      BNE	BreakNonZero
   2016  fa54		       b5 0c		      LDA	INPT4,X	;3
   2017  fa56		       10 0a		      BPL	BreakWhileAccelerating
   2018  fa58		       b4 d5		      LDY	Gear,X
   2019  fa5a		       b9 e9 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2020  fa5d		       85 b0		      STA	Tmp0
   2021  fa5f		       4c 66 fa 	      JMP	BreakNonZero
   2022  fa62				   BreakWhileAccelerating		; Allow better control while breaking.
   2023  fa62		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2024  fa64		       85 b0		      STA	Tmp0
   2025  fa66
   2026  fa66				   BreakNonZero
   2027  fa66		       a5 b0		      LDA	Tmp0
   2028  fa68		       f0 29		      BEQ	SkipBreak
   2029  fa6a
   2030  fa6a				   DecreaseSpeed
   2031  fa6a		       38		      SEC
   2032  fa6b		       b5 f0		      LDA	Player0SpeedL,X
   2033  fa6d		       e5 b0		      SBC	Tmp0
   2034  fa6f		       95 f0		      STA	Player0SpeedL,X
   2035  fa71		       b5 f2		      LDA	Player0SpeedH,X
   2036  fa73		       e9 00		      SBC	#0
   2037  fa75		       95 f2		      STA	Player0SpeedH,X
   2038  fa77
   2039  fa77				   CheckMinSpeed
   2040  fa77		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2041  fa79		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2042  fa7b		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2043  fa7d		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2044  fa7f
   2045  fa7f				   CompareLBreakSpeed
   2046  fa7f		       b5 f0		      LDA	Player0SpeedL,X
   2047  fa81		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2048  fa83		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2049  fa85		       4c 90 fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2050  fa88
   2051  fa88				   ResetMinSpeed
   2052  fa88		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2053  fa8a		       95 f2		      STA	Player0SpeedH,X
   2054  fa8c		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2055  fa8e		       95 f0		      STA	Player0SpeedL,X
   2056  fa90
   2057  fa90				   SkipAccelerateIfBreaking
   2058  fa90		       4c d9 fa 	      JMP	SkipAccelerate
   2059  fa93				   SkipBreak
   2060  fa93
   2061  fa93				   Acelerates
   2062  fa93		       b5 b8		      LDA	CountdownTimer,X
   2063  fa95		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2064  fa97
   2065  fa97				   ContinueAccelerateTest
   2066  fa97		       b5 0c		      LDA	INPT4,X	;3
   2067  fa99		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2068  fa9b		       bd cd fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2069  fa9e		       2c 80 02 	      BIT	SWCHA
   2070  faa1		       d0 36		      BNE	SkipAccelerate
   2071  faa3
   2072  faa3				   IncreaseCarSpeed
   2073  faa3		       a9 02		      LDA	#2
   2074  faa5		       85 b0		      STA	Tmp0	; Loop control
   2075  faa7		       b4 c7		      LDY	CurrentCarId,X
   2076  faa9				   IncreaseCarSpeedLoop
   2077  faa9							;Adds speed
   2078  faa9		       18		      CLC
   2079  faaa		       b5 dc		      LDA	AccelerateBuffer,X
   2080  faac		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
   2081  faaf		       95 dc		      STA	AccelerateBuffer,X
   2082  fab1		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2083  fab3		       f6 f0		      INC	Player0SpeedL,X
   2084  fab5		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2085  fab7		       f6 f2		      INC	Player0SpeedH,X
   2086  fab9				   ContinueIncreaseSpeedLoop
   2087  fab9		       c6 b0		      DEC	Tmp0
   2088  fabb		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2089  fabd				   SkipIncreaseCarSpeed
   2090  fabd
   2091  fabd				   CheckIfAlreadyMaxSpeed
   2092  fabd		       b5 f2		      LDA	Player0SpeedH,X
   2093  fabf		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2094  fac1		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2095  fac3		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2096  fac5							;High bit is max, compare the low
   2097  fac5		       b4 c7		      LDY	CurrentCarId,X
   2098  fac7		       b5 f0		      LDA	Player0SpeedL,X
   2099  fac9		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
   2100  facc		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2101  face							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2102  face
   2103  face				   ResetToMaxSpeed		; Speed is more, or is already max
   2104  face		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2105  fad0		       95 f2		      STA	Player0SpeedH,X
   2106  fad2		       b4 c7		      LDY	CurrentCarId,X
   2107  fad4		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
   2108  fad7		       95 f0		      STA	Player0SpeedL,X
   2109  fad9				   SkipAccelerate
   2110  fad9		       60		      RTS
   2111  fada
   2112  fada				   EverySecond		; 64 frames to be more precise
   2113  fada		       a9 3f		      LDA	#%00111111
   2114  fadc		       25 8c		      AND	FrameCount0
   2115  fade		       d0 06		      BNE	SkipEverySecondAction
   2116  fae0		       d5 b8		      CMP	CountdownTimer,X
   2117  fae2		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2118  fae4		       d6 b8		      DEC	CountdownTimer,X
   2119  fae6				   SkipEverySecondAction
   2120  fae6		       60		      RTS
   2121  fae7
   2122  fae7				   CalculateGear
   2123  fae7		       b5 f0		      LDA	Player0SpeedL,X	;3
   2124  fae9		       29 80		      AND	#%10000000	;2
   2125  faeb		       15 f2		      ORA	Player0SpeedH,X	;3
   2126  faed		       18		      CLC		;2
   2127  faee		       2a		      ROL		;2
   2128  faef		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2129  faf1		       95 d5		      STA	Gear,X
   2130  faf3		       60		      RTS
   2131  faf4
   2132  faf4				   ProcessScoreFontColor
   2133  faf4		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2134  faf6		       f0 06		      BEQ	ResetScoreFontColor
   2135  faf8		       88		      DEY
   2136  faf9		       94 cb		      STY	ScoreFontColorHoldChange,X
   2137  fafb		       4c 02 fb 	      JMP	SkipScoreFontColor
   2138  fafe				   ResetScoreFontColor
   2139  fafe		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2140  fb00		       95 c9		      STA	ScoreFontColor,X
   2141  fb02				   SkipScoreFontColor
   2142  fb02		       60		      RTS
   2143  fb03
   2144  fb03							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2145  fc00					      org	$FC00
   2146  fc00				   QrCode1
   2147  fc00		       1f		      .byte.b	#%00011111
   2148  fc01		       10		      .byte.b	#%00010000
   2149  fc02		       17		      .byte.b	#%00010111
   2150  fc03		       17		      .byte.b	#%00010111
   2151  fc04		       17		      .byte.b	#%00010111
   2152  fc05		       10		      .byte.b	#%00010000
   2153  fc06		       1f		      .byte.b	#%00011111
   2154  fc07		       00		      .byte.b	#%00000000
   2155  fc08		       17		      .byte.b	#%00010111
   2156  fc09		       10		      .byte.b	#%00010000
   2157  fc0a		       1d		      .byte.b	#%00011101
   2158  fc0b		       16		      .byte.b	#%00010110
   2159  fc0c		       03		      .byte.b	#%00000011
   2160  fc0d		       19		      .byte.b	#%00011001
   2161  fc0e		       13		      .byte.b	#%00010011
   2162  fc0f		       1c		      .byte.b	#%00011100
   2163  fc10		       0b		      .byte.b	#%00001011
   2164  fc11		       00		      .byte.b	#%00000000
   2165  fc12		       1f		      .byte.b	#%00011111
   2166  fc13		       10		      .byte.b	#%00010000
   2167  fc14		       17		      .byte.b	#%00010111
   2168  fc15		       17		      .byte.b	#%00010111
   2169  fc16		       17		      .byte.b	#%00010111
   2170  fc17		       10		      .byte.b	#%00010000
   2171  fc18		       1f		      .byte.b	#%00011111
   2172  fc19
   2173  fc19				   QrCode2
   2174  fc19		       c3		      .byte.b	#%11000011
   2175  fc1a		       9a		      .byte.b	#%10011010
   2176  fc1b		       82		      .byte.b	#%10000010
   2177  fc1c		       da		      .byte.b	#%11011010
   2178  fc1d		       aa		      .byte.b	#%10101010
   2179  fc1e		       ca		      .byte.b	#%11001010
   2180  fc1f		       f3		      .byte.b	#%11110011
   2181  fc20		       78		      .byte.b	#%01111000
   2182  fc21		       df		      .byte.b	#%11011111
   2183  fc22		       fc		      .byte.b	#%11111100
   2184  fc23		       c7		      .byte.b	#%11000111
   2185  fc24		       98		      .byte.b	#%10011000
   2186  fc25		       23		      .byte.b	#%00100011
   2187  fc26		       b9		      .byte.b	#%10111001
   2188  fc27		       d2		      .byte.b	#%11010010
   2189  fc28		       30		      .byte.b	#%00110000
   2190  fc29		       eb		      .byte.b	#%11101011
   2191  fc2a		       28		      .byte.b	#%00101000
   2192  fc2b		       ab		      .byte.b	#%10101011
   2193  fc2c		       72		      .byte.b	#%01110010
   2194  fc2d		       fa		      .byte.b	#%11111010
   2195  fc2e		       7a		      .byte.b	#%01111010
   2196  fc2f		       32		      .byte.b	#%00110010
   2197  fc30		       3a		      .byte.b	#%00111010
   2198  fc31		       63		      .byte.b	#%01100011
   2199  fc32
   2200  fc32				   QrCode3
   2201  fc32		       98		      .byte.b	#%10011000
   2202  fc33		       c3		      .byte.b	#%11000011
   2203  fc34		       39		      .byte.b	#%00111001
   2204  fc35		       34		      .byte.b	#%00110100
   2205  fc36		       ff		      .byte.b	#%11111111
   2206  fc37		       71		      .byte.b	#%01110001
   2207  fc38		       d5		      .byte.b	#%11010101
   2208  fc39		       d1		      .byte.b	#%11010001
   2209  fc3a		       5f		      .byte.b	#%01011111
   2210  fc3b		       26		      .byte.b	#%00100110
   2211  fc3c		       2d		      .byte.b	#%00101101
   2212  fc3d		       e9		      .byte.b	#%11101001
   2213  fc3e		       d6		      .byte.b	#%11010110
   2214  fc3f		       26		      .byte.b	#%00100110
   2215  fc40		       ba		      .byte.b	#%10111010
   2216  fc41		       03		      .byte.b	#%00000011
   2217  fc42		       dd		      .byte.b	#%11011101
   2218  fc43		       e0		      .byte.b	#%11100000
   2219  fc44		       57		      .byte.b	#%01010111
   2220  fc45		       14		      .byte.b	#%00010100
   2221  fc46		       35		      .byte.b	#%00110101
   2222  fc47		       e5		      .byte.b	#%11100101
   2223  fc48		       b5		      .byte.b	#%10110101
   2224  fc49		       d4		      .byte.b	#%11010100
   2225  fc4a		       97		      .byte.b	#%10010111
   2226  fc4b
   2227  fc4b				   QrCode4
   2228  fc4b		       09		      .byte.b	#%00001001
   2229  fc4c		       0e		      .byte.b	#%00001110
   2230  fc4d		       0f		      .byte.b	#%00001111
   2231  fc4e		       0c		      .byte.b	#%00001100
   2232  fc4f		       0c		      .byte.b	#%00001100
   2233  fc50		       08		      .byte.b	#%00001000
   2234  fc51		       08		      .byte.b	#%00001000
   2235  fc52		       06		      .byte.b	#%00000110
   2236  fc53		       06		      .byte.b	#%00000110
   2237  fc54		       0b		      .byte.b	#%00001011
   2238  fc55		       0f		      .byte.b	#%00001111
   2239  fc56		       04		      .byte.b	#%00000100
   2240  fc57		       08		      .byte.b	#%00001000
   2241  fc58		       0f		      .byte.b	#%00001111
   2242  fc59		       09		      .byte.b	#%00001001
   2243  fc5a		       07		      .byte.b	#%00000111
   2244  fc5b		       05		      .byte.b	#%00000101
   2245  fc5c		       00		      .byte.b	#%00000000
   2246  fc5d		       0f		      .byte.b	#%00001111
   2247  fc5e		       08		      .byte.b	#%00001000
   2248  fc5f		       0b		      .byte.b	#%00001011
   2249  fc60		       0b		      .byte.b	#%00001011
   2250  fc61		       0b		      .byte.b	#%00001011
   2251  fc62		       08		      .byte.b	#%00001000
   2252  fc63		       0f		      .byte.b	#%00001111
   2253  fc64
   2254  fc64							; Moved here because of rom space.
   2255  fc64							; The only SBR in constants space
   2256  fc64				   DrawQrCode
   2257  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2258  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2259  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2260  fc6a		       85 0a		      STA	CTRLPF
   2261  fc6c		       20 65 f6 	      JSR	ClearAll	; To be 100 sure!
   2262  fc6f		       ad 82 02 	      LDA	SWCHB
   2263  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2264  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2265  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2266  fc78		       86 09		      STX	COLUBK
   2267  fc7a		       84 08		      STY	COLUPF
   2268  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2269  fc7f				   StoreReversedQrCode
   2270  fc7f		       86 08		      STX	COLUPF
   2271  fc81		       84 09		      STY	COLUBK
   2272  fc83
   2273  fc83				   ContinueQrCode
   2274  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2275  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2276  fc87		       20 f7 f8 	      JSR	WaitForVblankEnd
   2277  fc8a		       20 0a f9 	      JSR	Sleep8Lines
   2278  fc8d		       20 0a f9 	      JSR	Sleep8Lines
   2279  fc90		       20 0a f9 	      JSR	Sleep8Lines
   2280  fc93
   2281  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2282  fc93		       85 02		      STA	WSYNC
   2283  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2284  fc98		       85 0e		      STA	PF1	;3
   2285  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2286  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2288  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2289  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2290  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2291  fcb5		       85 0e		      STA	PF1	;3
   2292  fcb7
   2293  fcb7		       ca		      DEX		;2
   2294  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2295  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2296  fcbc		       88		      DEY		;2
   2297  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2298  fcbf
   2299  fcbf				   EndQrCodeLoop
   2300  fcbf		       85 02		      STA	WSYNC	;
   2301  fcc1		       a9 00		      LDA	#0
   2302  fcc3		       85 0e		      STA	PF1	;3
   2303  fcc5		       85 0f		      STA	PF2	;3
   2304  fcc7
   2305  fcc7		       20 11 f9 	      JSR	Sleep32Lines
   2306  fcca		       4c 41 f5 	      JMP	PrepareOverscan
   2307  fccd
   2308  fccd				   PlayerToUpMask
   2309  fccd		       10		      .byte.b	#%00010000	;
   2310  fcce		       01		      .byte.b	#%00000001	;
   2311  fccf
   2312  fccf				   PlayerToDownMask
   2313  fccf		       20		      .byte.b	#%00100000	;
   2314  fcd0		       02		      .byte.b	#%00000010	;
   2315  fcd1
   2316  fcd1
   2317  fcd1				   PlayerToLeftMask
   2318  fcd1		       40		      .byte.b	#%01000000	;
   2319  fcd2		       04		      .byte.b	#%00000100	;
   2320  fcd3
   2321  fcd3				   PlayerToRightMask
   2322  fcd3		       80		      .byte.b	#%10000000	;
   2323  fcd4		       08		      .byte.b	#%00001000	;
   2324  fcd5
   2325  fd00					      org	$FD00
   2326  fd00				   Font
   2327  fd00				   C0
   2328  fd00		       e7		      .byte.b	#%11100111	;
   2329  fd01		       a5		      .byte.b	#%10100101	; 
   2330  fd02		       a5		      .byte.b	#%10100101	; 
   2331  fd03		       a5		      .byte.b	#%10100101	; 
   2332  fd04		       e7		      .byte.b	#%11100111	;	
   2333  fd05				   C1
   2334  fd05		       e7		      .byte.b	#%11100111	;
   2335  fd06		       42		      .byte.b	#%01000010	; 
   2336  fd07		       42		      .byte.b	#%01000010	; 
   2337  fd08		       42		      .byte.b	#%01000010	; 
   2338  fd09		       66		      .byte.b	#%01100110	;
   2339  fd0a				   C2
   2340  fd0a		       e7		      .byte.b	#%11100111	;
   2341  fd0b		       24		      .byte.b	#%00100100	; 
   2342  fd0c		       e7		      .byte.b	#%11100111	; 
   2343  fd0d		       81		      .byte.b	#%10000001	; 
   2344  fd0e		       e7		      .byte.b	#%11100111	;
   2345  fd0f				   C3
   2346  fd0f		       e7		      .byte.b	#%11100111	;
   2347  fd10		       81		      .byte.b	#%10000001	; 
   2348  fd11		       e7		      .byte.b	#%11100111	; 
   2349  fd12		       81		      .byte.b	#%10000001	; 
   2350  fd13		       e7		      .byte.b	#%11100111	;
   2351  fd14				   C4
   2352  fd14		       81		      .byte.b	#%10000001	;
   2353  fd15		       81		      .byte.b	#%10000001	; 
   2354  fd16		       e7		      .byte.b	#%11100111	; 
   2355  fd17		       a5		      .byte.b	#%10100101	; 
   2356  fd18		       a5		      .byte.b	#%10100101	;
   2357  fd19				   C5
   2358  fd19		       e7		      .byte.b	#%11100111	;
   2359  fd1a		       81		      .byte.b	#%10000001	; 
   2360  fd1b		       e7		      .byte.b	#%11100111	; 
   2361  fd1c		       24		      .byte.b	#%00100100	; 
   2362  fd1d		       e7		      .byte.b	#%11100111	;
   2363  fd1e				   C6
   2364  fd1e		       e7		      .byte.b	#%11100111	;
   2365  fd1f		       a5		      .byte.b	#%10100101	; 
   2366  fd20		       e7		      .byte.b	#%11100111	; 
   2367  fd21		       24		      .byte.b	#%00100100	; 
   2368  fd22		       e7		      .byte.b	#%11100111	;
   2369  fd23				   C7
   2370  fd23		       81		      .byte.b	#%10000001	;
   2371  fd24		       81		      .byte.b	#%10000001	; 
   2372  fd25		       81		      .byte.b	#%10000001	; 
   2373  fd26		       81		      .byte.b	#%10000001	; 
   2374  fd27		       e7		      .byte.b	#%11100111	;
   2375  fd28				   C8
   2376  fd28		       e7		      .byte.b	#%11100111	;
   2377  fd29		       a5		      .byte.b	#%10100101	; 
   2378  fd2a		       e7		      .byte.b	#%11100111	; 
   2379  fd2b		       a5		      .byte.b	#%10100101	; 
   2380  fd2c		       e7		      .byte.b	#%11100111	;
   2381  fd2d				   C9
   2382  fd2d		       e7		      .byte.b	#%11100111	;
   2383  fd2e		       81		      .byte.b	#%10000001	; 
   2384  fd2f		       e7		      .byte.b	#%11100111	; 
   2385  fd30		       a5		      .byte.b	#%10100101	; 
   2386  fd31		       e7		      .byte.b	#%11100111	;
   2387  fd32				   CA
   2388  fd32		       a5		      .byte.b	#%10100101	;
   2389  fd33		       a5		      .byte.b	#%10100101	; 
   2390  fd34		       e7		      .byte.b	#%11100111	; 
   2391  fd35		       a5		      .byte.b	#%10100101	; 
   2392  fd36		       e7		      .byte.b	#%11100111	;
   2393  fd37				   CB
   2394  fd37		       66		      .byte.b	#%01100110	;
   2395  fd38		       a5		      .byte.b	#%10100101	; 
   2396  fd39		       66		      .byte.b	#%01100110	; 
   2397  fd3a		       a5		      .byte.b	#%10100101	;
   2398  fd3b		       66		      .byte.b	#%01100110	;
   2399  fd3c				   CC
   2400  fd3c		       e7		      .byte.b	#%11100111	;
   2401  fd3d		       24		      .byte.b	#%00100100	; 
   2402  fd3e		       24		      .byte.b	#%00100100	; 
   2403  fd3f		       24		      .byte.b	#%00100100	;
   2404  fd40		       e7		      .byte.b	#%11100111	;
   2405  fd41
   2406  fd41				   CD
   2407  fd41		       66		      .byte.b	#%01100110	;
   2408  fd42		       a5		      .byte.b	#%10100101	; 
   2409  fd43		       a5		      .byte.b	#%10100101	; 
   2410  fd44		       a5		      .byte.b	#%10100101	;
   2411  fd45		       66		      .byte.b	#%01100110	;
   2412  fd46
   2413  fd46				   CE
   2414  fd46		       e7		      .byte.b	#%11100111	;
   2415  fd47		       24		      .byte.b	#%00100100	; 
   2416  fd48		       e7		      .byte.b	#%11100111	; 
   2417  fd49		       24		      .byte.b	#%00100100	; 
   2418  fd4a		       e7		      .byte.b	#%11100111	;
   2419  fd4b
   2420  fd4b				   CF
   2421  fd4b		       24		      .byte.b	#%00100100	;
   2422  fd4c		       24		      .byte.b	#%00100100	; 
   2423  fd4d		       e7		      .byte.b	#%11100111	; 
   2424  fd4e		       24		      .byte.b	#%00100100	; 
   2425  fd4f		       e7		      .byte.b	#%11100111	;
   2426  fd50
   2427  fd50				   CG
   2428  fd50		       c3		      .byte.b	#%11000011	;
   2429  fd51		       a5		      .byte.b	#%10100101	; 
   2430  fd52		       a5		      .byte.b	#%10100101	; 
   2431  fd53		       24		      .byte.b	#%00100100	; 
   2432  fd54		       c3		      .byte.b	#%11000011	;	
   2433  fd55
   2434  fd55				   CH
   2435  fd55		       a5		      .byte.b	#%10100101	;
   2436  fd56		       a5		      .byte.b	#%10100101	; 
   2437  fd57		       e7		      .byte.b	#%11100111	; 
   2438  fd58		       a5		      .byte.b	#%10100101	; 
   2439  fd59		       a5		      .byte.b	#%10100101	;
   2440  fd5a
   2441  fd5a				   CK
   2442  fd5a		       a5		      .byte.b	#%10100101	;
   2443  fd5b		       a5		      .byte.b	#%10100101	; 
   2444  fd5c		       66		      .byte.b	#%01100110	; 
   2445  fd5d		       a5		      .byte.b	#%10100101	; 
   2446  fd5e		       a5		      .byte.b	#%10100101	;
   2447  fd5f
   2448  fd5f				   CL
   2449  fd5f		       e7		      .byte.b	#%11100111	;
   2450  fd60		       24		      .byte.b	#%00100100	; 
   2451  fd61		       24		      .byte.b	#%00100100	; 
   2452  fd62		       24		      .byte.b	#%00100100	; 
   2453  fd63		       24		      .byte.b	#%00100100	;
   2454  fd64
   2455  fd64				   CI
   2456  fd64		       42		      .byte.b	#%01000010	;
   2457  fd65		       42		      .byte.b	#%01000010	; 
   2458  fd66		       42		      .byte.b	#%01000010	; 
   2459  fd67		       42		      .byte.b	#%01000010	; 
   2460  fd68		       42		      .byte.b	#%01000010	;
   2461  fd69
   2462  fd69				   CM
   2463  fd69		       a5		      .byte.b	#%10100101	;
   2464  fd6a		       a5		      .byte.b	#%10100101	; 
   2465  fd6b		       a5		      .byte.b	#%10100101	; 
   2466  fd6c		       e7		      .byte.b	#%11100111	; 
   2467  fd6d		       a5		      .byte.b	#%10100101	;
   2468  fd6e
   2469  fd6e				   CN
   2470  fd6e		       a5		      .byte.b	#%10100101	;
   2471  fd6f		       a5		      .byte.b	#%10100101	; 
   2472  fd70		       a5		      .byte.b	#%10100101	; 
   2473  fd71		       a5		      .byte.b	#%10100101	; 
   2474  fd72		       66		      .byte.b	#%01100110	;	
   2475  fd73
   2476  fd73
   2477  fd73				   CO
   2478  fd73		       42		      .byte.b	#%01000010	;
   2479  fd74		       a5		      .byte.b	#%10100101	; 
   2480  fd75		       a5		      .byte.b	#%10100101	; 
   2481  fd76		       a5		      .byte.b	#%10100101	; 
   2482  fd77		       42		      .byte.b	#%01000010	;	
   2483  fd78
   2484  fd78				   CP
   2485  fd78		       24		      .byte.b	#%00100100	;
   2486  fd79		       24		      .byte.b	#%00100100	; 
   2487  fd7a		       e7		      .byte.b	#%11100111	; 
   2488  fd7b		       a5		      .byte.b	#%10100101	; 
   2489  fd7c		       e7		      .byte.b	#%11100111	;
   2490  fd7d
   2491  fd7d				   CR
   2492  fd7d		       a5		      .byte.b	#%10100101	;
   2493  fd7e		       a5		      .byte.b	#%10100101	; 
   2494  fd7f		       66		      .byte.b	#%01100110	; 
   2495  fd80		       a5		      .byte.b	#%10100101	; 
   2496  fd81		       66		      .byte.b	#%01100110	;
   2497  fd82
   2498  fd82				   CS
   2499  fd82		       66		      .byte.b	#%01100110	;
   2500  fd83		       81		      .byte.b	#%10000001	; 
   2501  fd84		       42		      .byte.b	#%01000010	; 
   2502  fd85		       24		      .byte.b	#%00100100	; 
   2503  fd86		       c3		      .byte.b	#%11000011	;
   2504  fd87
   2505  fd87				   CT
   2506  fd87		       42		      .byte.b	#%01000010	;
   2507  fd88		       42		      .byte.b	#%01000010	; 
   2508  fd89		       42		      .byte.b	#%01000010	; 
   2509  fd8a		       42		      .byte.b	#%01000010	; 
   2510  fd8b		       e7		      .byte.b	#%11100111	;
   2511  fd8c
   2512  fd8c				   CV
   2513  fd8c		       42		      .byte.b	#%01000010	;
   2514  fd8d		       a5		      .byte.b	#%10100101	; 
   2515  fd8e		       a5		      .byte.b	#%10100101	; 
   2516  fd8f		       a5		      .byte.b	#%10100101	; 
   2517  fd90		       a5		      .byte.b	#%10100101	;	
   2518  fd91
   2519  fd91				   CY
   2520  fd91		       42		      .byte.b	#%01000010	;
   2521  fd92		       42		      .byte.b	#%01000010	; 
   2522  fd93		       42		      .byte.b	#%01000010	; 
   2523  fd94		       a5		      .byte.b	#%10100101	; 
   2524  fd95		       a5		      .byte.b	#%10100101	;
   2525  fd96
   2526  fd96				   CW
   2527  fd96		       a5		      .byte.b	#%10100101	;
   2528  fd97		       e7		      .byte.b	#%11100111	; 
   2529  fd98		       a5		      .byte.b	#%10100101	; 
   2530  fd99		       a5		      .byte.b	#%10100101	; 
   2531  fd9a		       a5		      .byte.b	#%10100101	;
   2532  fd9b
   2533  fd9b				   CZ
   2534  fd9b		       e7		      .byte.b	#%11100111	;
   2535  fd9c		       24		      .byte.b	#%00100100	; 
   2536  fd9d		       42		      .byte.b	#%01000010	; 
   2537  fd9e		       81		      .byte.b	#%10000001	; 
   2538  fd9f		       e7		      .byte.b	#%11100111	;
   2539  fda0
   2540  fda0				   Pipe
   2541  fda0		       42		      .byte.b	#%01000010	;
   2542  fda1		       00		      .byte.b	#%00000000	; 
   2543  fda2		       42		      .byte.b	#%01000010	; 
   2544  fda3		       00		      .byte.b	#%00000000	; 
   2545  fda4		       42		      .byte.b	#%01000010	;
   2546  fda5
   2547  fda5				   Exclamation
   2548  fda5		       42		      .byte.b	#%01000010	;
   2549  fda6		       00		      .byte.b	#%00000000	; 
   2550  fda7		       42		      .byte.b	#%01000010	; 
   2551  fda8		       42		      .byte.b	#%01000010	; 
   2552  fda9		       42		      .byte.b	#%01000010	;
   2553  fdaa
   2554  fdaa				   Dot
   2555  fdaa		       42		      .byte.b	#%01000010	;
   2556  fdab		       42		      .byte.b	#%01000010	; 
   2557  fdac		       00		      .byte.b	#%00000000	; 
   2558  fdad		       00		      .byte.b	#%00000000	; 
   2559  fdae		       00		      .byte.b	#%00000000	;
   2560  fdaf
   2561  fdaf				   Colon
   2562  fdaf		       42		      .byte.b	#%01000010	;
   2563  fdb0		       42		      .byte.b	#%01000010	; 
   2564  fdb1		       00		      .byte.b	#%00000000	; 
   2565  fdb2		       42		      .byte.b	#%01000010	; 
   2566  fdb3		       42		      .byte.b	#%01000010	;
   2567  fdb4
   2568  fdb4				   Triangle
   2569  fdb4		       81		      .byte.b	#%10000001	;
   2570  fdb5		       c3		      .byte.b	#%11000011	; 
   2571  fdb6		       e7		      .byte.b	#%11100111	; 
   2572  fdb7		       c3		      .byte.b	#%11000011	; 
   2573  fdb8		       81		      .byte.b	#%10000001	;
   2574  fdb9
   2575  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2576  fdb9		       00		      .byte.b	#0	;
   2577  fdba		       00		      .byte.b	#0	;
   2578  fdbb		       00		      .byte.b	#0	;
   2579  fdbc		       00		      .byte.b	#0	;
   2580  fdbd		       00		      .byte.b	#0	;
   2581  fdbe
   2582  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2583  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2584  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2585  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2586  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2587  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2588  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2589  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2590  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2591  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2592  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2593  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2594  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2595  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2596  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2597  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2598  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2599  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2600  fdcf
   2601  fdcf				   EngineSoundType
   2602  fdcf		       02		      .byte.b	#2
   2603  fdd0		       02		      .byte.b	#2
   2604  fdd1		       0e		      .byte.b	#14
   2605  fdd2		       06		      .byte.b	#6
   2606  fdd3		       06		      .byte.b	#6
   2607  fdd4		       0e		      .byte.b	#14
   2608  fdd5
   2609  fdd5				   EngineBaseFrequence
   2610  fdd5		       1f		      .byte.b	#31
   2611  fdd6		       15		      .byte.b	#21
   2612  fdd7		       14		      .byte.b	#20
   2613  fdd8		       1f		      .byte.b	#31
   2614  fdd9		       16		      .byte.b	#22
   2615  fdda		       03		      .byte.b	#3
   2616  fddb
   2617  fddb				   TachometerSizeLookup1
   2618  fddb		       1f		      .byte.b	#%00011111
   2619  fddc		       3f		      .byte.b	#%00111111
   2620  fddd		       7f		      .byte.b	#%01111111
   2621  fdde		       ff		      .byte.b	#%11111111
   2622  fddf		       ff		      .byte.b	#%11111111
   2623  fde0		       ff		      .byte.b	#%11111111
   2624  fde1		       ff		      .byte.b	#%11111111
   2625  fde2		       ff		      .byte.b	#%11111111
   2626  fde3
   2627  fde3				   TachometerSizeLookup2
   2628  fde3		       00		      .byte.b	#%00000000
   2629  fde4		       00		      .byte.b	#%00000000
   2630  fde5		       00		      .byte.b	#%00000000
   2631  fde6		       00		      .byte.b	#%00000000
   2632  fde7		       80		      .byte.b	#%10000000
   2633  fde8		       c0		      .byte.b	#%11000000
   2634  fde9		       e0		      .byte.b	#%11100000
   2635  fdea		       f0		      .byte.b	#%11110000
   2636  fdeb
   2637  fdeb				   TachometerGearLookup
   2638  fdeb		       01		      .byte.b	#%00000001
   2639  fdec		       02		      .byte.b	#%00000010
   2640  fded		       04		      .byte.b	#%00000100
   2641  fdee		       08		      .byte.b	#%00001000
   2642  fdef		       10		      .byte.b	#%00010000
   2643  fdf0		       30		      .byte.b	#%00110000
   2644  fdf1
   2645  fe00					      org	$FE00
   2646  fe00				   AesTable
   2647  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2648  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2649  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2650  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2651  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2652  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2653  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2654  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2655  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2656  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2657  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2658  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2659  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2660  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2661  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2662  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2663  ff00
   2664  ff00							; From FF00 to FFFB (122 bytes) to use here
   2665  ff00
   2666  ff00				   StaticText		; All static text must be on the same MSB block. 
   2667  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2668  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2669  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2670  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2671  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2672  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2673  ff05
   2674  ff05				   HellwayLeftText
   2675  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2676  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2677  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2678  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2679  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2680  ff0a
   2681  ff0a				   HellwayRightText
   2682  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2683  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2684  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2685  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2686  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2687  ff0f
   2688  ff0f				   OpbText
   2689  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2690  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2691  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2692  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2693  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2694  ff14
   2695  ff14				   YearText
   2696  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2697  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2698  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2699  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2700  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2701  ff19
   2702  ff19				   GameText
   2703  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2704  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2705  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2706  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2707  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2708  ff1e
   2709  ff1e				   OverText
   2710  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2711  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2712  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2713  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2714  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2715  ff23				   GoText
   2716  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2717  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2718  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2719  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2720  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2721  ff28
   2722  ff28				   ZeldaTextLeft
   2723  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2724  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2725  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2726  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2727  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2728  ff2d
   2729  ff2d				   ZeldaTextRight
   2730  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2731  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2732  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2733  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2734  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2735  ff32
   2736  ff32				   ZeldaDateLeft
   2737  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2738  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2739  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2740  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2741  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2742  ff37
   2743  ff37				   ZeldaDateRight
   2744  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2745  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2746  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2747  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2748  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2749  ff3c
   2750  ff3c				   PolvinhosTextLeft
   2751  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2752  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2753  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2754  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2755  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2756  ff41
   2757  ff41				   PolvinhosTextRight
   2758  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2759  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2760  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2761  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2762  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2763  ff46
   2764  ff46				   PolvinhosDateLeft
   2765  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2766  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2767  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2768  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2769  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2770  ff4b
   2771  ff4b				   PolvinhosDateRight
   2772  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2773  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2774  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2775  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2776  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2777  ff50
   2778  ff50				   IvonneTextLeft
   2779  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2780  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2781  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2782  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2783  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2784  ff55
   2785  ff55				   IvonneTextRight
   2786  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2787  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2788  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2789  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2790  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2791  ff5a
   2792  ff5a				   IvonneDateLeft
   2793  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2794  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2795  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2796  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2797  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2798  ff5f
   2799  ff5f				   IvonneDateRight
   2800  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2801  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2802  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2803  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2804  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2805  ff64
   2806  ff64				   PaperArtTextLeft
   2807  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2808  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2809  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2810  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2811  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2812  ff69
   2813  ff69				   PaperArtTextRight
   2814  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2815  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2816  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2817  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2818  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2819  ff6e
   2820  ff6e				   LeonardoTextLeft
   2821  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2822  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2823  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2824  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2825  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2826  ff73
   2827  ff73				   LeonardoTextRight
   2828  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2829  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2830  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2831  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2832  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2833  ff78
   2834  ff78				   VersionText
   2835  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2836  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2837  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2838  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2839  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2840  ff7d
   2841  ff7d
   2842  ff7d				   EndStaticText
   2843  ff7d
   2844  ff7d				   CarSprite0		; Upside down, Original Car
   2845  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2846  ff85				   CarSprite0NoPadding
   2847  ff85		       7e		      .byte.b	#%01111110
   2848  ff86		       24		      .byte.b	#%00100100
   2849  ff87		       bd		      .byte.b	#%10111101
   2850  ff88		       3c		      .byte.b	#%00111100
   2851  ff89		       bd		      .byte.b	#%10111101
   2852  ff8a		       3c		      .byte.b	#%00111100
   2853  ff8b
   2854  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2855  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2856  ff93				   CarSprite1NoPadding
   2857  ff93		       bd		      .byte.b	#%10111101
   2858  ff94		       7e		      .byte.b	#%01111110
   2859  ff95		       5a		      .byte.b	#%01011010
   2860  ff96		       66		      .byte.b	#%01100110
   2861  ff97		       bd		      .byte.b	#%10111101
   2862  ff98		       3c		      .byte.b	#%00111100
   2863  ff99
   2864  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2865  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2866  ffa1				   CarSprite2NoPadding
   2867  ffa1		       7e		      .byte.b	#%01111110
   2868  ffa2		       a5		      .byte.b	#%10100101
   2869  ffa3		       42		      .byte.b	#%01000010
   2870  ffa4		       42		      .byte.b	#%01000010
   2871  ffa5		       bd		      .byte.b	#%10111101
   2872  ffa6		       7e		      .byte.b	#%01111110
   2873  ffa7
   2874  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2875  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2876  ffaf				   CarSprite3NoPadding
   2877  ffaf		       3c		      .byte.b	#%00111100
   2878  ffb0		       db		      .byte.b	#%11011011
   2879  ffb1		       db		      .byte.b	#%11011011
   2880  ffb2		       3c		      .byte.b	#%00111100
   2881  ffb3		       5a		      .byte.b	#%01011010
   2882  ffb4		       3c		      .byte.b	#%00111100
   2883  ffb5
   2884  ffb5				   TrafficSpeeds
   2885  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2886  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2887  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2888  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2889  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2890  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2891  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2892  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2893  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2894  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2895  ffbf				   TrafficSpeedsHighDelta
   2896  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2897  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2898  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2899  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2900  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2901  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2902  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2903  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2904  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2905  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2906  ffc9
   2907  ffc9				   CarIdToSpriteAddressL
   2908  ffc9		       7d		      .byte.b	#<CarSprite0
   2909  ffca		       8b		      .byte.b	#<CarSprite1
   2910  ffcb		       99		      .byte.b	#<CarSprite2
   2911  ffcc		       a7		      .byte.b	#<CarSprite3
   2912  ffcd
   2913  ffcd				   CarIdToSpriteAddressH
   2914  ffcd		       ff		      .byte.b	#>CarSprite0
   2915  ffce		       ff		      .byte.b	#>CarSprite1
   2916  ffcf		       ff		      .byte.b	#>CarSprite2
   2917  ffd0		       ff		      .byte.b	#>CarSprite3
   2918  ffd1
   2919  ffd1				   EnemyCarIdToSpriteAddressL
   2920  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2921  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2922  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2923  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2924  ffd5
   2925  ffd5				   EnemyCarIdToSpriteAddressH
   2926  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2927  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2928  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2929  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2930  ffd9
   2931  ffd9				   CarIdToAccelerateSpeed
   2932  ffd9		       80		      .byte.b	#128
   2933  ffda		       c0		      .byte.b	#192
   2934  ffdb		       60		      .byte.b	#96
   2935  ffdc		       c0		      .byte.b	#192
   2936  ffdd
   2937  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2938  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2939  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2940  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2941  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2942  ffe1
   2943  ffe1				   CarIdToMaxSpeedL
   2944  ffe1		       80		      .byte.b	#$80
   2945  ffe2		       00		      .byte.b	#$00	; One less gear
   2946  ffe3		       80		      .byte.b	#$80
   2947  ffe4		       80		      .byte.b	#$80
   2948  ffe5
   2949  ffe5				   CarIdToMaxGear
   2950  ffe5		       05		      .byte.b	#5
   2951  ffe6		       04		      .byte.b	#4	; One less gear
   2952  ffe7		       05		      .byte.b	#5
   2953  ffe8		       05		      .byte.b	#5
   2954  ffe9
   2955  ffe9				   GearToBreakSpeedTable
   2956  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2957  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2958  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2959  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2960  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2961  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2962  ffef
   2963  ffef				   TrafficColorTable
   2964  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2965  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2966  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2967  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2968  fff3
   2969  fff3				   TrafficChanceTable
   2970  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2971  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2972  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2973  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2974  fff7
   2975  fff7				   TrafficTimeTable
   2976  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2977  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2978  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2979  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2980  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2981  fffc
   2982  fffc
   2983  fffc					      org	$FFFC
   2984  fffc		       00 f0		      .word.w	BeforeStart
   2985  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
