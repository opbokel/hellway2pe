------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 f1 f6 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 be f6 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080		       85 b9		      STA	OpCountdownTimer	;3
    283  f082
    284  f082				   ConfigurePlayer1XPosition
    285  f082		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    286  f084		       85 b7		      STA	Player1X	;3
    287  f086
    288  f086				   HPositioning 		; Avoid sleep doing needed stuff
    289  f086		       85 02		      STA	WSYNC
    290  f088
    291  f088				   ConfigurePlayer0XPosition
    292  f088		       a9 21		      LDA	#PLAYER_0_X_START	;2
    293  f08a		       85 b6		      STA	Player0X	;3
    294  f08c
    295  f08c				   ConfigureMissileSize
    296  f08c		       a9 30		      LDA	#%00110000	;2 Missile Size
    297  f08e		       85 04		      STA	NUSIZ0	;3
    298  f090		       85 05		      STA	NUSIZ1	;3
    299  f092
    300  f092				   ConfigureNextCheckpoint
    301  f092		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    302  f094		       85 cd		      STA	NextCheckpoint
    303  f096
    304  f096		       a9 00		      LDA	#0	; Avoid missile reseting position 
    305  f098							;SLEEP 41
      0  f098					      SLEEP	4	;
      1  f098				   .CYCLES    SET	4
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     19  f09a					      REPEND
    307  f09a		       85 12		      STA	RESM0
      0  f09c					      SLEEP	2	;
      1  f09c				   .CYCLES    SET	2
      2  f09c
      3  f09c				  -	      IF	.CYCLES < 2
      4  f09c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09c				  -	      ERR
      6  f09c					      ENDIF
      7  f09c
      8  f09c				  -	      IF	.CYCLES & 1
      9  f09c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09c				  -	      nop	0
     11  f09c				  -	      ELSE
     12  f09c				  -	      bit	VSYNC
     13  f09c				  -	      ENDIF
     14  f09c				  -.CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c					      REPEAT	.CYCLES / 2
     18  f09c		       ea		      nop
     19  f09d					      REPEND
    309  f09d		       85 14		      STA	RESBL
      0  f09f					      SLEEP	2
      1  f09f				   .CYCLES    SET	2
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f				  -	      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f				  -	      ELSE
     12  f09f				  -	      bit	VSYNC
     13  f09f				  -	      ENDIF
     14  f09f				  -.CYCLES    SET	.CYCLES - 3
     15  f09f					      ENDIF
     16  f09f
     17  f09f					      REPEAT	.CYCLES / 2
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    311  f0a0		       85 13		      STA	RESM1
      0  f0a2					      SLEEP	3
      1  f0a2				   .CYCLES    SET	3
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4				  -	      REPEAT	.CYCLES / 2
     18  f0a4				  -	      nop
     19  f0a4					      REPEND
    313  f0a4
    314  f0a4		       a9 e0		      LDA	#$E0
    315  f0a6		       85 24		      STA	HMBL
    316  f0a8		       85 22		      STA	HMM0
    317  f0aa		       85 23		      STA	HMM1
    318  f0ac		       85 02		      STA	WSYNC
    319  f0ae		       85 2a		      STA	HMOVE
    320  f0b0		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    321  f0b2		       85 2b		      STA	HMCLR
      0  f0b4					      SLEEP	30
      1  f0b4				   .CYCLES    SET	30
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     19  f0c3					      REPEND
    323  f0c3		       85 10		      STA	RESP0
    324  f0c5							;SLEEP 5 ; Temporarily move player 1 away.
    325  f0c5		       85 11		      STA	RESP1
    326  f0c7
    327  f0c7				   WaitResetToEnd
    328  f0c7		       ad 84 02 	      LDA	INTIM
    329  f0ca		       d0 fb		      BNE	WaitResetToEnd
    330  f0cc
    331  f0cc				   MainLoop
    332  f0cc		       a9 02		      LDA	#2
    333  f0ce		       85 00		      STA	VSYNC
    334  f0d0		       85 02		      STA	WSYNC
    335  f0d2		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    336  f0d4				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    337  f0d4		       a9 01		      LDA	#%00000001	;3
    338  f0d6		       24 df		      BIT	TextFlickerMode	;2
    339  f0d8		       f0 05		      BEQ	TextSideFrameZero	;2
    340  f0da		       25 8d		      AND	FrameCount1	;2
    341  f0dc		       4c e1 f0 	      JMP	StoreTextSize	;3
    342  f0df				   TextSideFrameZero
    343  f0df		       25 8c		      AND	FrameCount0	;2
    344  f0e1				   StoreTextSize
    345  f0e1		       85 de		      STA	TextSide	;3
    346  f0e3
    347  f0e3				   PrepareMaxHMove
      0  f0e3					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e3				   .CYCLES    SET	18
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     19  f0ec					      REPEND
    349  f0ec		       a9 80		      LDA	#$80
    350  f0ee		       85 24		      STA	HMBL
    351  f0f0		       85 22		      STA	HMM0
    352  f0f2		       85 23		      STA	HMM1
    353  f0f4		       85 20		      STA	HMP0
    354  f0f6		       85 21		      STA	HMP1
    355  f0f8		       85 02		      STA	WSYNC
    356  f0fa		       85 2a		      STA	HMOVE	; 1/10			
    357  f0fc
    358  f0fc				   ConfigVBlankTimer
    359  f0fc		       a5 c6		      LDA	GameMode
    360  f0fe		       c9 10		      CMP	#MAX_GAME_MODE
    361  f100		       f0 05		      BEQ	SetVblankTimerQrCode
    362  f102		       a9 29		      LDA	#VBLANK_TIMER
    363  f104		       4c 09 f1 	      JMP	SetVblankTimer
    364  f107				   SetVblankTimerQrCode
    365  f107		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    366  f109
    367  f109				   SetVblankTimer
    368  f109		       85 02		      STA	WSYNC	;3
    369  f10b		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    370  f10d		       8d 96 02 	      STA	TIM64T	;3	
    371  f110		       a9 00		      LDA	#0	;2
    372  f112		       85 00		      STA	VSYNC	;3	
    373  f114
    374  f114				   RandomizeGame
    375  f114		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f116		       d0 2d		      BNE	EndRandomizeGame
    377  f118		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f11a		       29 02		      AND	#%00000010
    379  f11c		       f0 24		      BEQ	DeterministicGame
    380  f11e		       a6 96		      LDX	TrafficOffset1 + 2
    381  f120		       bd 00 fe 	      LDA	AesTable,X
    382  f123		       45 8c		      EOR	FrameCount0
    383  f125		       85 96		      STA	TrafficOffset1 + 2
    384  f127		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f129		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f12b		       bd 00 fe 	      LDA	AesTable,X
    387  f12e		       45 8c		      EOR	FrameCount0
    388  f130		       85 9a		      STA	TrafficOffset2 + 2
    389  f132		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f134		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f136		       bd 00 fe 	      LDA	AesTable,X
    392  f139		       45 8c		      EOR	FrameCount0
    393  f13b		       85 9e		      STA	TrafficOffset3 + 2
    394  f13d		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13f		       4c 45 f1 	      JMP	EndRandomizeGame
    396  f142
    397  f142				   DeterministicGame
    398  f142		       20 f1 f6 	      JSR	DefaultOffsets
    399  f145
    400  f145				   EndRandomizeGame
    401  f145
    402  f145
    403  f145							; Move this in the code and save cycles, for some reason spliting is breaking...
    404  f145		       a2 03		      LDX	#3
    405  f147				   BurnAllHMove
    406  f147		       85 02		      STA	WSYNC	;3
    407  f149		       85 2a		      STA	HMOVE	; 3/10 
    408  f14b		       ca		      DEX
    409  f14c		       d0 f9		      BNE	BurnAllHMove
    410  f14e							;STA WSYNC ;3 
    411  f14e
    412  f14e				   CountFrame
    413  f14e		       e6 8c		      INC	FrameCount0	; 5
    414  f150		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    415  f152		       e6 8d		      INC	FrameCount1	; 5 
    416  f154				   SkipIncFC1
    417  f154
    418  f154				   CallDrawQrCode
    419  f154		       a5 c6		      LDA	GameMode
    420  f156		       c9 10		      CMP	#MAX_GAME_MODE
    421  f158		       d0 03		      BNE	TestIsGameRunning
    422  f15a		       4c 64 fc 	      JMP	DrawQrCode
    423  f15d
    424  f15d							;Does not update the game if not running
    425  f15d				   TestIsGameRunning
    426  f15d		       a5 bd		      LDA	GameStatus	;3
    427  f15f		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    428  f161				   SelectCarWithDpadCall		; Only do it when game is stoped
    429  f161		       a2 00		      LDX	#0	; Player 0
    430  f163		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    431  f165		       85 b0		      STA	Tmp0
    432  f167		       20 62 f9 	      JSR	SelectCarWithDpad
    433  f16a		       e8		      INX		; Player 1
    434  f16b		       20 62 f9 	      JSR	SelectCarWithDpad
    435  f16e
    436  f16e							; Needs to draw the opponent in the correct line even when game stoped  
    437  f16e							; Draeing is a destructive operation
    438  f16e		       20 74 f9 	      JSR	ProcessOpponentLine
    439  f171
    440  f171				   CallConfigureCarSprites
    441  f171		       20 30 f9 	      JSR	ConfigureCarSprites
    442  f174				   SkipUpdateLogicJump
    443  f174		       4c be f1 	      JMP	SkipUpdateLogic
    444  f177				   ContinueWithGameLogic
    445  f177
    446  f177				   CallEverySecond		; Timer for now
    447  f177		       a2 00		      LDX	#0
    448  f179		       20 12 fb 	      JSR	EverySecond
    449  f17c		       e8		      INX
    450  f17d		       20 12 fb 	      JSR	EverySecond
    451  f180
    452  f180
    453  f180				   ChangeTextFlickerMode
    454  f180		       a5 bc		      LDA	SwitchDebounceCounter
    455  f182		       d0 0d		      BNE	EndChangeTextFlickerMode
    456  f184		       ad 82 02 	      LDA	SWCHB
    457  f187		       29 02		      AND	#%00000010	;Game select
    458  f189		       d0 06		      BNE	EndChangeTextFlickerMode
    459  f18b		       e6 df		      INC	TextFlickerMode
    460  f18d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    461  f18f		       85 bc		      STA	SwitchDebounceCounter
    462  f191				   EndChangeTextFlickerMode
    463  f191
    464  f191				   CallProcessSpeed
    465  f191		       a2 00		      LDX	#0
    466  f193		       20 6f fa 	      JSR	ProcessSpeed
    467  f196
    468  f196		       e8		      INX		; Player 1
    469  f197		       20 6f fa 	      JSR	ProcessSpeed
    470  f19a
    471  f19a				   CallUpdateOffsets
    472  f19a		       a2 00		      LDX	#0	; Player 0
    473  f19c		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    474  f19e		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    475  f1a0		       a5 f0		      LDA	Player0SpeedL
    476  f1a2		       85 b4		      STA	Tmp4
    477  f1a4		       a5 f2		      LDA	Player0SpeedH
    478  f1a6		       85 b5		      STA	Tmp5
    479  f1a8		       20 1c fa 	      JSR	UpdateOffsets
    480  f1ab
    481  f1ab							;LDX Exits the call with correct value.
    482  f1ab		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    483  f1ad		       85 b3		      STA	Tmp3
    484  f1af		       a5 f1		      LDA	Player1SpeedL
    485  f1b1		       85 b4		      STA	Tmp4
    486  f1b3		       a5 f3		      LDA	Player1SpeedH
    487  f1b5		       85 b5		      STA	Tmp5
    488  f1b7		       20 1c fa 	      JSR	UpdateOffsets
    489  f1ba
    490  f1ba				   CallProcessOpponentLine
    491  f1ba							;JSR ProcessOpponentLine 
    492  f1ba							;SLEEP 90
    493  f1ba		       a9 14		      LDA	#20
    494  f1bc		       85 cf		      STA	OpponentLine
    495  f1be
    496  f1be				   SkipUpdateLogic		; Continue here if not paused
    497  f1be
    498  f1be				   CallStatusUpdateSbr
    499  f1be		       a2 00		      LDX	#0
    500  f1c0		       20 1f fb 	      JSR	CalculateGear
    501  f1c3		       20 2c fb 	      JSR	ProcessScoreFontColor
    502  f1c6		       e8		      INX
    503  f1c7		       20 1f fb 	      JSR	CalculateGear
    504  f1ca		       20 2c fb 	      JSR	ProcessScoreFontColor
    505  f1cd
    506  f1cd				   IsGameOver
    507  f1cd		       a5 b8		      LDA	CountdownTimer
    508  f1cf		       05 f0		      ORA	Player0SpeedL
    509  f1d1		       05 f2		      ORA	Player0SpeedH
    510  f1d3		       d0 0b		      BNE	IsCheckpoint
    511  f1d5		       a9 01		      LDA	#1
    512  f1d7		       85 cb		      STA	ScoreFontColorHoldChange
    513  f1d9		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    514  f1db		       85 c9		      STA	ScoreFontColor
    515  f1dd		       4c 12 f2 	      JMP	SkipIsTimeOver
    516  f1e0
    517  f1e0				   IsCheckpoint
    518  f1e0		       a5 cd		      LDA	NextCheckpoint
    519  f1e2		       c5 92		      CMP	TrafficOffset0 + 2
    520  f1e4		       d0 20		      BNE	SkipIsCheckpoint
    521  f1e6		       18		      CLC
    522  f1e7		       69 10		      ADC	#CHECKPOINT_INTERVAL
    523  f1e9		       85 cd		      STA	NextCheckpoint
    524  f1eb		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    525  f1ed		       85 c9		      STA	ScoreFontColor
    526  f1ef		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    527  f1f1		       85 cb		      STA	ScoreFontColorHoldChange
    528  f1f3		       a5 b8		      LDA	CountdownTimer
    529  f1f5		       18		      CLC
    530  f1f6		       65 c0		      ADC	CheckpointTime
    531  f1f8		       85 b8		      STA	CountdownTimer
    532  f1fa		       90 04		      BCC	JumpSkipTimeOver
    533  f1fc		       a9 ff		      LDA	#$FF
    534  f1fe		       85 b8		      STA	CountdownTimer	; Does not overflow!
    535  f200				   JumpSkipTimeOver
    536  f200		       20 af f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    537  f203		       4c 12 f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    538  f206				   SkipIsCheckpoint
    539  f206
    540  f206				   IsTimeOver
    541  f206		       a5 b8		      LDA	CountdownTimer
    542  f208		       d0 08		      BNE	SkipIsTimeOver
    543  f20a		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    544  f20c		       85 cb		      STA	ScoreFontColorHoldChange
    545  f20e		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    546  f210		       85 c9		      STA	ScoreFontColor
    547  f212				   SkipIsTimeOver
    548  f212
    549  f212		       20 30 f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    550  f215
    551  f215				   CallProcessSound
    552  f215		       20 d9 f5 	      JSR	ProcessSound
    553  f218
    554  f218				   PrintEasterEggCondition
    555  f218		       a5 8d		      LDA	FrameCount1
    556  f21a		       29 38		      AND	#%00111000
    557  f21c		       05 bd		      ORA	GameStatus
    558  f21e		       c9 38		      CMP	#%00111000
    559  f220		       d0 06		      BNE	ChooseTextSide
    560  f222		       20 24 f7 	      JSR	PrintEasterEgg
    561  f225		       4c 17 f3 	      JMP	RightScoreWriteEnd
    562  f228
    563  f228							;Could be done during on vblank to save this comparisson time (before draw score), 
    564  f228							;but I am saving vblank cycles for now, in case of 2 players.
    565  f228				   ChooseTextSide		; 
    566  f228		       a5 de		      LDA	TextSide	;3
    567  f22a		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    568  f22c		       4c ad f2 	      JMP	RightScoreWrite
    569  f22f
    570  f22f				   LeftScoreWrite
    571  f22f		       a5 c9		      LDA	ScoreFontColor
    572  f231		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    573  f233		       f0 4e		      BEQ	PrintCheckpoint
    574  f235		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    575  f237		       f0 52		      BEQ	PrintStartGame
    576  f239		       a5 bd		      LDA	GameStatus
    577  f23b		       f0 56		      BEQ	PrintHellwayLeft
    578  f23d				   WriteDistance		;Not optimized yet, ugly code.
    579  f23d				   Digit0Distance
    580  f23d		       a5 91		      LDA	TrafficOffset0 + 1	;3
    581  f23f		       4a		      LSR		; 2
    582  f240		       4a		      LSR		; 2
    583  f241		       4a		      LSR		; 2
    584  f242		       4a		      LSR		; 2
    585  f243		       aa		      TAX		; 2
    586  f244		       bd be fd 	      LDA	FontLookup,X	;4
    587  f247		       85 d3		      STA	ScoreD3	;3
    588  f249
    589  f249				   Digit1Distance
    590  f249		       a5 92		      LDA	TrafficOffset0 + 2	;3
    591  f24b		       29 0f		      AND	#%00001111	;2
    592  f24d		       aa		      TAX		; 2
    593  f24e		       bd be fd 	      LDA	FontLookup,X	;4 
    594  f251		       85 d2		      STA	ScoreD2	;3
    595  f253
    596  f253				   Digit2Distance
    597  f253		       a5 92		      LDA	TrafficOffset0 + 2	;3
    598  f255		       4a		      LSR		; 2
    599  f256		       4a		      LSR		; 2
    600  f257		       4a		      LSR		; 2
    601  f258		       4a		      LSR		; 2
    602  f259		       aa		      TAX		; 2
    603  f25a		       bd be fd 	      LDA	FontLookup,X	;4
    604  f25d		       85 d1		      STA	ScoreD1	;3
    605  f25f
    606  f25f				   Digit3Distance
    607  f25f		       a5 ba		      LDA	Traffic0Msb	;3
    608  f261		       29 0f		      AND	#%00001111	;2
    609  f263		       aa		      TAX		; 2
    610  f264		       bd be fd 	      LDA	FontLookup,X	;4 
    611  f267		       85 d0		      STA	ScoreD0	;3
    612  f269
    613  f269				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    614  f269		       a5 ba		      LDA	Traffic0Msb
    615  f26b		       29 f0		      AND	#%11110000	;2
    616  f26d		       d0 07		      BNE	DrawDistanceExtraDigit
    617  f26f		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    618  f271		       85 d4		      STA	ScoreD4	;3
    619  f273		       4c 80 f2 	      JMP	EndDrawDistance
    620  f276				   DrawDistanceExtraDigit
    621  f276		       4a		      LSR		; 2
    622  f277		       4a		      LSR		; 2
    623  f278		       4a		      LSR		; 2
    624  f279		       4a		      LSR		; 2
    625  f27a		       aa		      TAX		; 2
    626  f27b		       bd be fd 	      LDA	FontLookup,X	;4
    627  f27e		       85 d4		      STA	ScoreD4	;3
    628  f280
    629  f280				   EndDrawDistance
    630  f280		       4c 17 f3 	      JMP	RightScoreWriteEnd	;3
    631  f283
    632  f283				   PrintCheckpoint
    633  f283		       a2 00		      LDX	#<CheckpointText
    634  f285		       20 06 f7 	      JSR	PrintStaticText
    635  f288		       4c 17 f3 	      JMP	RightScoreWriteEnd	;3
    636  f28b				   PrintStartGame
    637  f28b		       a2 23		      LDX	#<GoText
    638  f28d		       20 06 f7 	      JSR	PrintStaticText
    639  f290		       4c 17 f3 	      JMP	RightScoreWriteEnd	;3
    640  f293
    641  f293				   PrintHellwayLeft
    642  f293		       a5 8d		      LDA	FrameCount1
    643  f295		       29 01		      AND	#1
    644  f297		       d0 05		      BNE	PrintCreditsLeft
    645  f299		       a2 05		      LDX	#<HellwayLeftText
    646  f29b		       4c a0 f2 	      JMP	PrintGameMode
    647  f29e				   PrintCreditsLeft
    648  f29e		       a2 0f		      LDX	#<OpbText
    649  f2a0
    650  f2a0				   PrintGameMode
    651  f2a0		       20 06 f7 	      JSR	PrintStaticText
    652  f2a3		       a6 c6		      LDX	GameMode
    653  f2a5		       bd be fd 	      LDA	FontLookup,X	;4 
    654  f2a8		       85 d0		      STA	ScoreD0	;3
    655  f2aa		       4c 17 f3 	      JMP	RightScoreWriteEnd	;3
    656  f2ad
    657  f2ad				   RightScoreWrite
    658  f2ad		       a5 bd		      LDA	GameStatus
    659  f2af		       f0 45		      BEQ	PrintHellwayRight
    660  f2b1		       a5 c9		      LDA	ScoreFontColor
    661  f2b3		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    662  f2b5		       f0 52		      BEQ	PrintGameOver
    663  f2b7				   Digit0Timer
    664  f2b7		       a5 b8		      LDA	CountdownTimer	;3
    665  f2b9		       29 0f		      AND	#%00001111	;2
    666  f2bb		       aa		      TAX		; 2
    667  f2bc		       bd be fd 	      LDA	FontLookup,X	;4 
    668  f2bf		       85 d1		      STA	ScoreD1	;3
    669  f2c1
    670  f2c1				   Digit1Timer
    671  f2c1		       a5 b8		      LDA	CountdownTimer	;3
    672  f2c3		       4a		      LSR		; 2
    673  f2c4		       4a		      LSR		; 2
    674  f2c5		       4a		      LSR		; 2
    675  f2c6		       4a		      LSR		; 2
    676  f2c7		       aa		      TAX		; 2
    677  f2c8		       bd be fd 	      LDA	FontLookup,X	;4
    678  f2cb		       85 d0		      STA	ScoreD0	;3
    679  f2cd
    680  f2cd		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    681  f2cf		       85 d2		      STA	ScoreD2	;3
    682  f2d1
    683  f2d1				   Digit0Speed
    684  f2d1		       a5 f0		      LDA	Player0SpeedL
    685  f2d3		       29 3c		      AND	#%00111100	;2 Discard the last bits
    686  f2d5		       4a		      LSR		; 2
    687  f2d6		       4a		      LSR		; 2
    688  f2d7		       aa		      TAX		; 2
    689  f2d8		       bd be fd 	      LDA	FontLookup,X	;4
    690  f2db		       85 d4		      STA	ScoreD4	;3
    691  f2dd
    692  f2dd				   Digit1Speed
    693  f2dd		       a5 f0		      LDA	Player0SpeedL
    694  f2df		       29 c0		      AND	#%11000000	;2 Discard the last bits
    695  f2e1		       18		      CLC
    696  f2e2		       2a		      ROL		;First goes into carry
    697  f2e3		       2a		      ROL
    698  f2e4		       2a		      ROL
    699  f2e5		       85 b0		      STA	Tmp0
    700  f2e7		       a5 f2		      LDA	Player0SpeedH
    701  f2e9		       0a		      ASL
    702  f2ea		       0a		      ASL
    703  f2eb		       05 b0		      ORA	Tmp0
    704  f2ed		       aa		      TAX		; 2
    705  f2ee		       bd be fd 	      LDA	FontLookup,X	;4
    706  f2f1		       85 d3		      STA	ScoreD3	;3
    707  f2f3		       4c 17 f3 	      JMP	RightScoreWriteEnd
    708  f2f6
    709  f2f6				   PrintHellwayRight
    710  f2f6		       a5 8d		      LDA	FrameCount1
    711  f2f8		       29 01		      AND	#1
    712  f2fa		       d0 05		      BNE	PrintCreditsRight
    713  f2fc		       a2 0a		      LDX	#<HellwayRightText
    714  f2fe		       4c 03 f3 	      JMP	PrintRightIntro
    715  f301				   PrintCreditsRight
    716  f301		       a2 14		      LDX	#<YearText
    717  f303				   PrintRightIntro
    718  f303		       20 06 f7 	      JSR	PrintStaticText
    719  f306		       4c 17 f3 	      JMP	RightScoreWriteEnd
    720  f309				   PrintGameOver
    721  f309		       a5 8c		      LDA	FrameCount0
    722  f30b		       30 05		      BMI	PrintOverText
    723  f30d		       a2 19		      LDX	#<GameText
    724  f30f		       4c 14 f3 	      JMP	StoreGameOverText
    725  f312				   PrintOverText
    726  f312		       a2 1e		      LDX	#<OverText
    727  f314				   StoreGameOverText
    728  f314		       20 06 f7 	      JSR	PrintStaticText
    729  f317				   RightScoreWriteEnd
    730  f317
    731  f317
    732  f317				   ScoreBackgroundColor
    733  f317		       a2 00		      LDX	#0
    734  f319		       ad 82 02 	      LDA	SWCHB
    735  f31c		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    736  f31e		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    737  f320		       f0 04		      BEQ	BlackAndWhiteScoreBg
    738  f322		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    739  f324		       a2 03		      LDX	#BACKGROUND_COLOR
    740  f326				   BlackAndWhiteScoreBg
    741  f326		       85 b2		      STA	Tmp2	; Score Background
    742  f328		       86 b3		      STX	Tmp3	; Traffic Background
    743  f32a
    744  f32a				   ConfigurePFForScore
    745  f32a							;LDA #SCORE_BACKGROUND_COLOR; Done above
    746  f32a		       85 09		      STA	COLUBK
    747  f32c		       20 71 f6 	      JSR	ClearAll
    748  f32f		       a9 02		      LDA	#%00000010	; Score mode
    749  f331		       85 0a		      STA	CTRLPF
    750  f333		       a5 de		      LDA	TextSide	;3
    751  f335		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    752  f337				   LeftScoreOn
    753  f337		       a5 c9		      LDA	ScoreFontColor
    754  f339		       85 07		      STA	COLUP1
    755  f33b		       a5 b2		      LDA	Tmp2
    756  f33d		       85 06		      STA	COLUP0
    757  f33f		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    758  f341		       85 b1		      STA	Tmp1
    759  f343		       4c 52 f3 	      JMP	CallWaitForVblankEnd
    760  f346				   RightScoreOn
    761  f346		       a5 c9		      LDA	ScoreFontColor
    762  f348		       85 06		      STA	COLUP0
    763  f34a		       a5 b2		      LDA	Tmp2
    764  f34c		       85 07		      STA	COLUP1
    765  f34e		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    766  f350		       85 b1		      STA	Tmp1
    767  f352
    768  f352							; After here we are going to update the screen, No more heavy code
    769  f352				   CallWaitForVblankEnd
    770  f352		       20 09 f9 	      JSR	WaitForVblankEnd
    771  f355
    772  f355				   DrawScoreHud
    773  f355		       20 96 f7 	      JSR	PrintScore
    774  f358
    775  f358		       85 02		      STA	WSYNC
    776  f35a
    777  f35a		       a5 0c		      LDA	INPT4	;3
    778  f35c		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    779  f35e		       a5 c9		      LDA	ScoreFontColor
    780  f360		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    781  f362		       d0 0a		      BNE	WaitAnotherScoreLine
    782  f364		       a5 de		      LDA	TextSide	;3
    783  f366		       d0 03		      BNE	LeftScoreOnGameOver
    784  f368		       4c e3 f8 	      JMP	DrawGameOverScreenRight
    785  f36b				   LeftScoreOnGameOver
    786  f36b		       4c 55 f8 	      JMP	DrawGameOverScreenLeft
    787  f36e
    788  f36e				   WaitAnotherScoreLine
    789  f36e		       85 02		      STA	WSYNC
    790  f370
    791  f370				   PrepareForTraffic
    792  f370		       20 83 f6 	      JSR	ClearPF	; 32
    793  f373
    794  f373		       85 02		      STA	WSYNC
    795  f375		       85 02		      STA	WSYNC
    796  f377
    797  f377		       a9 30		      LDA	#%00110000	; 2 Score mode
    798  f379		       85 0a		      STA	CTRLPF	;3
    799  f37b
    800  f37b		       a5 c2		      LDA	TrafficColor	;3
    801  f37d		       85 08		      STA	COLUPF	;3
    802  f37f
    803  f37f		       a9 96		      LDA	#PLAYER1_COLOR	;2
    804  f381		       85 07		      STA	COLUP1	;3
    805  f383
    806  f383		       a5 c9		      LDA	ScoreFontColor	;3
    807  f385		       85 06		      STA	COLUP0	;3
    808  f387
    809  f387		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    810  f389
    811  f389		       20 83 f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    812  f38c
    813  f38c		       a6 b3		      LDX	Tmp3	; Background color.
    814  f38e
      0  f38e					      SLEEP	9	; Odd sleep destroys flags
      1  f38e				   .CYCLES    SET	9
      2  f38e
      3  f38e				  -	      IF	.CYCLES < 2
      4  f38e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f38e				  -	      ERR
      6  f38e					      ENDIF
      7  f38e
      8  f38e					      IF	.CYCLES & 1
      9  f38e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f38e				  -	      nop	0
     11  f38e					      ELSE
     12  f38e		       24 00		      bit	VSYNC
     13  f390					      ENDIF
     14  f390				   .CYCLES    SET	.CYCLES - 3
     15  f390					      ENDIF
     16  f390
     17  f390					      REPEAT	.CYCLES / 2
     18  f390		       ea		      nop
     17  f390					      REPEND
     18  f391		       ea		      nop
     17  f391					      REPEND
     18  f392		       ea		      nop
     19  f393					      REPEND
    816  f393
    817  f393		       a5 8c		      LDA	FrameCount0	;Brach flag
    818  f395		       29 01		      AND	#%00000001
    819  f397
    820  f397		       86 09		      STX	COLUBK	;3
    821  f399		       d0 05		      BNE	OpDrawCache	;2
    822  f39b		       4c 5a f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    823  f39e							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    824  f39e
    825  f39e							;main scanline loop...
    826  f39e				   OpScanLoop
    827  f39e		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    828  f3a0
    829  f3a0							;Start of next line!			
    830  f3a0				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    831  f3a0
    832  f3a0		       a5 80		      LDA	GRP0Cache	;3
    833  f3a2		       85 1b		      STA	GRP0	;3
    834  f3a4
    835  f3a4		       a5 84		      LDA	GRP1Cache	;3
    836  f3a6		       85 1c		      STA	GRP1	;3
    837  f3a8
    838  f3a8		       a5 85		      LDA	ENABLCache	;3
    839  f3aa		       85 1f		      STA	ENABL	;3
    840  f3ac
    841  f3ac		       a5 86		      LDA	ENAM0Cache	;3
    842  f3ae		       85 1d		      STA	ENAM0	;3
    843  f3b0
    844  f3b0		       a5 87		      LDA	ENAM1Cache	;3
    845  f3b2		       85 1e		      STA	ENAM1	;3
    846  f3b4
    847  f3b4		       a5 81		      LDA	PF0Cache	;3
    848  f3b6		       85 0d		      STA	PF0	;3
    849  f3b8
    850  f3b8		       a9 00		      LDA	#0	;2
    851  f3ba							;STA PF0	     ;3
    852  f3ba		       85 80		      STA	GRP0Cache	;3
    853  f3bc		       85 86		      STA	ENAM0Cache	;3
    854  f3be		       85 85		      STA	ENABLCache	;3
    855  f3c0		       85 87		      STA	ENAM1Cache	; 3
    856  f3c2							;STA GRP1Cache ;3
    857  f3c2		       85 0d		      STA	PF0	;3
    858  f3c4							;STA PF2	     ;3
    859  f3c4
    860  f3c4		       a5 83		      LDA	PF2Cache	;3
    861  f3c6		       85 0f		      STA	PF2	;3
    862  f3c8
    863  f3c8				   OpDrawCar0
    864  f3c8		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    865  f3ca		       b0 04		      BCS	OpSkipDrawCar	;2
    866  f3cc		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    867  f3ce		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    868  f3d0				   OpSkipDrawCar
    869  f3d0
    870  f3d0							;BEQ DrawTraffic3
    871  f3d0				   OpDrawTraffic1		; 33
    872  f3d0		       98		      TYA		; 2
    873  f3d1		       18		      CLC		; 2 
    874  f3d2		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    875  f3d4		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    876  f3d6		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    877  f3d8		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    878  f3da		       4c df f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    879  f3dd				   OpEorOffsetWithCarry
    880  f3dd		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    881  f3df				   OpAfterEorOffsetWithCarry		;17
    882  f3df		       aa		      TAX		;2
    883  f3e0		       bd 00 fe 	      LDA	AesTable,X	; 4
    884  f3e3		       c5 bf		      CMP	OpTrafficChance	;3
    885  f3e5		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    886  f3e7		       a9 ff		      LDA	#$FF	;2
    887  f3e9		       85 86		      STA	ENAM0Cache	;3
    888  f3eb				   OpFinishDrawTraffic1
    889  f3eb
    890  f3eb				   OpErasePF2
    891  f3eb		       a9 00		      LDA	#0
    892  f3ed		       85 0f		      STA	PF2
    893  f3ef
    894  f3ef				   OpDrawTraffic2		; 33
    895  f3ef		       98		      TYA		; 2
    896  f3f0		       18		      CLC		; 2 
    897  f3f1		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    898  f3f3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    899  f3f5		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    900  f3f7		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    901  f3f9		       4c fe f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    902  f3fc				   OpEorOffsetWithCarry2
    903  f3fc		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    904  f3fe				   OpAfterEorOffsetWithCarry2		;17
    905  f3fe		       aa		      TAX		;2
    906  f3ff		       bd 00 fe 	      LDA	AesTable,X	; 4
    907  f402		       c5 bf		      CMP	OpTrafficChance	;3
    908  f404		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    909  f406		       a9 02		      LDA	#%00000010	;2
    910  f408		       85 85		      STA	ENABLCache	;3
    911  f40a				   OpFinishDrawTraffic2
    912  f40a
    913  f40a							;STA WSYNC ;65 / 137
    914  f40a
    915  f40a							; LDA Tmp0 ; Flicker this line if drawing car
    916  f40a							; BEQ FinishDrawTraffic4
    917  f40a				   OpDrawTraffic3		; 33
    918  f40a		       98		      TYA		; 2
    919  f40b		       18		      CLC		; 2 
    920  f40c		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    921  f40e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    922  f410		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    923  f412		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    924  f414		       4c 19 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    925  f417				   OpEorOffsetWithCarry3
    926  f417		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    927  f419				   OpAfterEorOffsetWithCarry3		;17
    928  f419		       aa		      TAX		;2
    929  f41a		       bd 00 fe 	      LDA	AesTable,X	; 4
    930  f41d		       c5 bf		      CMP	OpTrafficChance	;3
    931  f41f		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    932  f421		       a9 02		      LDA	#%00000010	;2
    933  f423		       85 87		      STA	ENAM1Cache
    934  f425				   OpFinishDrawTraffic3
    935  f425
    936  f425				   OpDrawOponent		;26
    937  f425		       84 b0		      STY	Tmp0	;3
    938  f427		       a4 cf		      LDY	OpponentLine	;3
    939  f429		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    940  f42b		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    941  f42d				   OpDrawOpponent
    942  f42d		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    943  f42f		       85 80		      STA	GRP0Cache	;3
    944  f431		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    945  f433		       a4 b0		      LDY	Tmp0	;3
    946  f435		       4c 49 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    947  f438				   OpSkipDrawOpponent
    948  f438		       c6 cf		      DEC	OpponentLine	;5
    949  f43a		       a4 b0		      LDY	Tmp0	;3
    950  f43c
    951  f43c
    952  f43c				   OpDrawTraffic0		; 21 2pe
    953  f43c		       98		      TYA		; 2
    954  f43d		       18		      CLC		; 2 
    955  f43e		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    956  f440		       29 08		      AND	#%00001000	;2
    957  f442		       f0 05		      BEQ	OpHasNoBorderP0	;3
    958  f444				   OpHasBorderP0
    959  f444		       a9 70		      LDA	#%01110000	; 2
    960  f446		       4c 4b f4 	      JMP	OpStoreBorderP0	; 3
    961  f449				   OpHasNoBorderP0
    962  f449		       a9 00		      LDA	#0	; 2
    963  f44b				   OpStoreBorderP0
    964  f44b		       85 81		      STA	PF0Cache	; 3
    965  f44d		       85 83		      STA	PF2Cache	; 3
    966  f44f
    967  f44f				   OpSkipDrawTraffic0
    968  f44f
    969  f44f				   OpWhileScanLoop
    970  f44f		       88		      DEY		;2
    971  f450		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    972  f452		       4c 9e f3 	      JMP	OpScanLoop	;3
    973  f455				   OpFinishScanLoop		; 7 209 of 222
    974  f455		       4c 0d f5 	      JMP	FinishScanLoop
    975  f458
    976  f458							;main scanline loop...
    977  f458				   ScanLoop
    978  f458		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    979  f45a
    980  f45a							;Start of next line!			
    981  f45a				   DrawCache		;63 Is the last line going to the top of the next frame?
    982  f45a		       a5 81		      LDA	PF0Cache	;3
    983  f45c		       85 0d		      STA	PF0	;3
    984  f45e
    985  f45e		       a5 80		      LDA	GRP0Cache	;3
    986  f460		       85 1b		      STA	GRP0	;3
    987  f462
    988  f462		       a5 84		      LDA	GRP1Cache	;3
    989  f464		       85 1c		      STA	GRP1	;3
    990  f466
    991  f466		       a5 86		      LDA	ENAM0Cache	;3
    992  f468		       85 1d		      STA	ENAM0	;3
    993  f46a
    994  f46a		       a5 85		      LDA	ENABLCache	;3
    995  f46c		       85 1f		      STA	ENABL	;3
    996  f46e
    997  f46e		       a5 87		      LDA	ENAM1Cache	;3
    998  f470		       85 1e		      STA	ENAM1	;3
    999  f472
   1000  f472		       a5 83		      LDA	PF2Cache	;3
   1001  f474		       85 0f		      STA	PF2	;3
   1002  f476
   1003  f476		       a9 00		      LDA	#0	;2
   1004  f478		       85 0d		      STA	PF0	;3
   1005  f47a		       85 84		      STA	GRP1Cache	;3
   1006  f47c		       85 85		      STA	ENABLCache	;3
   1007  f47e		       85 86		      STA	ENAM0Cache	;3
   1008  f480		       85 87		      STA	ENAM1Cache	; 3
   1009  f482							;STA GRP0Cache
   1010  f482		       85 0f		      STA	PF2	;3
   1011  f484
   1012  f484				   DrawCar0
   1013  f484		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1014  f486		       b0 04		      BCS	SkipDrawCar	;2
   1015  f488		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1016  f48a		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1017  f48c				   SkipDrawCar
   1018  f48c
   1019  f48c							;BEQ DrawTraffic3
   1020  f48c				   DrawTraffic1 		; 33
   1021  f48c		       98		      TYA		; 2
   1022  f48d		       18		      CLC		; 2 
   1023  f48e		       65 95		      ADC	TrafficOffset1 + 1	;3
   1024  f490		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1025  f492		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1026  f494		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1027  f496		       4c 9b f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1028  f499				   EorOffsetWithCarry
   1029  f499		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1030  f49b				   AfterEorOffsetWithCarry		;17
   1031  f49b		       aa		      TAX		;2
   1032  f49c		       bd 00 fe 	      LDA	AesTable,X	; 4
   1033  f49f		       c5 be		      CMP	TrafficChance	;3
   1034  f4a1		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1035  f4a3		       a9 ff		      LDA	#$FF	;2
   1036  f4a5		       85 86		      STA	ENAM0Cache	;3
   1037  f4a7				   FinishDrawTraffic1
   1038  f4a7
   1039  f4a7				   DrawTraffic2 		; 33
   1040  f4a7		       98		      TYA		; 2
   1041  f4a8		       18		      CLC		; 2 
   1042  f4a9		       65 99		      ADC	TrafficOffset2 + 1	;3
   1043  f4ab		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1044  f4ad		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1045  f4af		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1046  f4b1		       4c b6 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1047  f4b4				   EorOffsetWithCarry2
   1048  f4b4		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1049  f4b6				   AfterEorOffsetWithCarry2		;17
   1050  f4b6		       aa		      TAX		;2
   1051  f4b7		       bd 00 fe 	      LDA	AesTable,X	; 4
   1052  f4ba		       c5 be		      CMP	TrafficChance	;3
   1053  f4bc		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1054  f4be		       a9 02		      LDA	#%00000010	;2
   1055  f4c0		       85 85		      STA	ENABLCache	;3
   1056  f4c2				   FinishDrawTraffic2
   1057  f4c2
   1058  f4c2							;STA WSYNC ;65 / 137
   1059  f4c2
   1060  f4c2							; LDA Tmp0 ; Flicker this line if drawing car
   1061  f4c2							; BEQ FinishDrawTraffic4
   1062  f4c2				   DrawTraffic3 		; 33
   1063  f4c2		       98		      TYA		; 2
   1064  f4c3		       18		      CLC		; 2 
   1065  f4c4		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1066  f4c6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1067  f4c8		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1068  f4ca		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1069  f4cc		       4c d1 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1070  f4cf				   EorOffsetWithCarry3
   1071  f4cf		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1072  f4d1				   AfterEorOffsetWithCarry3		;17
   1073  f4d1		       aa		      TAX		;2
   1074  f4d2		       bd 00 fe 	      LDA	AesTable,X	; 4
   1075  f4d5		       c5 be		      CMP	TrafficChance	;3
   1076  f4d7		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1077  f4d9		       a9 02		      LDA	#%00000010	;2
   1078  f4db		       85 87		      STA	ENAM1Cache
   1079  f4dd				   FinishDrawTraffic3
   1080  f4dd
   1081  f4dd
   1082  f4dd				   DrawOponent		;26
   1083  f4dd		       84 b0		      STY	Tmp0	;3
   1084  f4df		       a4 cf		      LDY	OpponentLine	;3
   1085  f4e1		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1086  f4e3		       b0 0b		      BCS	SkipDrawOpponent	;2
   1087  f4e5				   DrawOpponent
   1088  f4e5		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1089  f4e7		       85 84		      STA	GRP1Cache	;3
   1090  f4e9		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1091  f4eb		       a4 b0		      LDY	Tmp0	;3
   1092  f4ed		       4c 01 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1093  f4f0				   SkipDrawOpponent
   1094  f4f0		       c6 cf		      DEC	OpponentLine	;5
   1095  f4f2		       a4 b0		      LDY	Tmp0	;3
   1096  f4f4
   1097  f4f4				   DrawTraffic0 		; 21 2pe
   1098  f4f4		       98		      TYA		; 2
   1099  f4f5		       18		      CLC		; 2 
   1100  f4f6		       65 91		      ADC	TrafficOffset0 + 1	;3
   1101  f4f8		       29 08		      AND	#%00001000	;2
   1102  f4fa		       f0 05		      BEQ	HasNoBorderP0	;3
   1103  f4fc				   HasBorderP0
   1104  f4fc		       a9 70		      LDA	#%01110000	; 2
   1105  f4fe		       4c 03 f5 	      JMP	StoreBorderP0	; 3
   1106  f501				   HasNoBorderP0
   1107  f501		       a9 00		      LDA	#0	; 2
   1108  f503				   StoreBorderP0
   1109  f503		       85 81		      STA	PF0Cache	; 3
   1110  f505		       85 83		      STA	PF2Cache	; 3
   1111  f507
   1112  f507				   SkipDrawTraffic0
   1113  f507
   1114  f507				   WhileScanLoop
   1115  f507		       88		      DEY		;2
   1116  f508		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1117  f50a		       4c 58 f4 	      JMP	ScanLoop	;3
   1118  f50d				   FinishScanLoop		; 7 209 of 222
   1119  f50d
   1120  f50d		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1121  f50f		       20 92 f6 	      JSR	LoadAll
   1122  f512		       85 02		      STA	WSYNC	; do stuff!
   1123  f514		       85 02		      STA	WSYNC
   1124  f516		       85 02		      STA	WSYNC
   1125  f518
   1126  f518				   PrepareOverscan
   1127  f518		       a9 02		      LDA	#2
   1128  f51a		       85 02		      STA	WSYNC
   1129  f51c							;STA HMOVE	; HMOVE 10
   1130  f51c		       85 01		      STA	VBLANK
   1131  f51e
   1132  f51e		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1133  f520		       8d 96 02 	      STA	TIM64T
   1134  f523
   1135  f523		       85 2b		      STA	HMCLR	; Before we process car movement
   1136  f525							;Read Fire Button before, will make it start the game for now.
   1137  f525				   StartGame
   1138  f525		       a5 0c		      LDA	INPT4	;3
   1139  f527		       25 0d		      AND	INPT5	;3 player 
   1140  f529		       30 38		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1141  f52b		       a5 8c		      LDA	FrameCount0
   1142  f52d		       29 01		      AND	#%00000001
   1143  f52f		       d0 32		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1144  f531		       a5 bd		      LDA	GameStatus	;3
   1145  f533		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1146  f535		       d0 2c		      BNE	SkipGameStart
   1147  f537		       a5 c6		      LDA	GameMode
   1148  f539		       c9 10		      CMP	#MAX_GAME_MODE
   1149  f53b		       d0 0b		      BNE	SetGameRunning
   1150  f53d		       a9 00		      LDA	#0
   1151  f53f		       85 c6		      STA	GameMode
   1152  f541		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1153  f543		       85 bc		      STA	SwitchDebounceCounter
   1154  f545		       4c 63 f5 	      JMP	SkipGameStart
   1155  f548				   SetGameRunning
   1156  f548		       e6 bd		      INC	GameStatus
   1157  f54a		       a9 00		      LDA	#0	;
   1158  f54c		       85 8c		      STA	FrameCount0
   1159  f54e		       85 8d		      STA	FrameCount1
   1160  f550		       a9 0a		      LDA	#10
   1161  f552		       85 19		      STA	AUDV0
   1162  f554		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1163  f556		       85 c9		      STA	ScoreFontColor
   1164  f558		       85 ca		      STA	OpScoreFontColor
   1165  f55a		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1166  f55c		       85 cb		      STA	ScoreFontColorHoldChange
   1167  f55e		       85 cc		      STA	OpScoreFontColorHoldChange
   1168  f560		       4c c9 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1169  f563				   SkipGameStart
   1170  f563
   1171  f563				   ReadSwitches
   1172  f563		       a6 bc		      LDX	SwitchDebounceCounter
   1173  f565		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1174  f567		       a9 01		      LDA	#%00000001
   1175  f569		       2c 82 02 	      BIT	SWCHB
   1176  f56c		       d0 07		      BNE	SkipReset
   1177  f56e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1178  f570		       85 bc		      STA	SwitchDebounceCounter
   1179  f572		       4c d1 f5 	      JMP	OverScanWaitBeforeReset
   1180  f575				   SkipReset
   1181  f575
   1182  f575				   GameModeSelect
   1183  f575		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1184  f577		       d0 1c		      BNE	SkipGameSelect
   1185  f579		       20 be f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1186  f57c				   ContinueGameSelect
   1187  f57c		       a9 02		      LDA	#%00000010
   1188  f57e		       2c 82 02 	      BIT	SWCHB
   1189  f581		       d0 12		      BNE	SkipGameSelect
   1190  f583		       a6 c6		      LDX	GameMode
   1191  f585		       e0 10		      CPX	#MAX_GAME_MODE
   1192  f587		       f0 04		      BEQ	ResetGameMode
   1193  f589		       e8		      INX
   1194  f58a		       4c 8f f5 	      JMP	StoreGameMode
   1195  f58d				   ResetGameMode
   1196  f58d		       a2 00		      LDX	#0
   1197  f58f				   StoreGameMode
   1198  f58f		       86 c6		      STX	GameMode
   1199  f591		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1200  f593		       85 bc		      STA	SwitchDebounceCounter
   1201  f595				   SkipGameSelect
   1202  f595		       4c 9a f5 	      JMP	EndReadSwitches
   1203  f598				   DecrementSwitchDebounceCounter
   1204  f598		       c6 bc		      DEC	SwitchDebounceCounter
   1205  f59a				   EndReadSwitches
   1206  f59a
   1207  f59a				   DoNotTurnBeforeStart
   1208  f59a							;STA HMCLR
   1209  f59a		       a5 bd		      LDA	GameStatus
   1210  f59c		       f0 2b		      BEQ	OverScanWait
   1211  f59e
   1212  f59e							; Last thing, will overrride hmove
   1213  f59e				   CallTestColisionAndMove
   1214  f59e		       a2 00		      LDX	#0	; Player 0
   1215  f5a0							; Colision with traffic, each player check different flags,
   1216  f5a0		       a5 8c		      LDA	FrameCount0
   1217  f5a2		       29 01		      AND	#%00000001
   1218  f5a4		       d0 07		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1219  f5a6		       a5 01		      LDA	CXM1P
   1220  f5a8		       4a		      LSR
   1221  f5a9		       05 00		      ORA	CXM0P
   1222  f5ab		       05 02		      ORA	CXP0FB
   1223  f5ad							; ORA CXPPMM ; Collision between players will have its own rules
   1224  f5ad				   SkipColisionPlayer0		; Should not colide on opponent side.
   1225  f5ad		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1226  f5af		       85 b2		      STA	Tmp2
   1227  f5b1		       20 9a f9 	      JSR	TestCollisionAndMove
   1228  f5b4
   1229  f5b4		       e8		      INX		; player 1
   1230  f5b5		       a5 8c		      LDA	FrameCount0
   1231  f5b7		       29 01		      AND	#%00000001
   1232  f5b9		       f0 07		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1233  f5bb		       a5 00		      LDA	CXM0P
   1234  f5bd		       4a		      LSR
   1235  f5be		       05 01		      ORA	CXM1P
   1236  f5c0		       05 03		      ORA	CXP1FB
   1237  f5c2				   SkipColisionPlayer1
   1238  f5c2		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1239  f5c4		       85 b2		      STA	Tmp2
   1240  f5c6		       20 9a f9 	      JSR	TestCollisionAndMove
   1241  f5c9
   1242  f5c9				   OverScanWait
   1243  f5c9		       ad 84 02 	      LDA	INTIM
   1244  f5cc		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1245  f5ce		       4c cc f0 	      JMP	MainLoop
   1246  f5d1
   1247  f5d1				   OverScanWaitBeforeReset
   1248  f5d1		       ad 84 02 	      LDA	INTIM
   1249  f5d4		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1250  f5d6		       4c 12 f0 	      JMP	Start
   1251  f5d9
   1252  f5d9				   Subroutines
   1253  f5d9
   1254  f5d9				   ProcessSound
   1255  f5d9				   LeftSound		;41
   1256  f5d9		       a5 b8		      LDA	CountdownTimer	;3
   1257  f5db		       f0 1b		      BEQ	EngineOff	;2
   1258  f5dd		       a6 d5		      LDX	Gear
   1259  f5df		       a5 f0		      LDA	Player0SpeedL	;3
   1260  f5e1		       4a		      LSR		;2
   1261  f5e2		       4a		      LSR		;2
   1262  f5e3		       4a		      LSR		;2
   1263  f5e4		       29 0f		      AND	#%00001111	;2
   1264  f5e6		       85 b0		      STA	Tmp0	;3
   1265  f5e8		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1266  f5eb		       38		      SEC		;2
   1267  f5ec		       e5 b0		      SBC	Tmp0	;3
   1268  f5ee		       85 17		      STA	AUDF0	;3
   1269  f5f0		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1270  f5f3		       85 15		      STA	AUDC0	;3
   1271  f5f5		       4c fc f5 	      JMP	EndLeftSound	;3
   1272  f5f8				   EngineOff
   1273  f5f8		       a9 00		      LDA	#0
   1274  f5fa		       85 15		      STA	AUDC0
   1275  f5fc
   1276  f5fc				   EndLeftSound
   1277  f5fc
   1278  f5fc
   1279  f5fc				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1280  f5fc		       a5 c9		      LDA	ScoreFontColor	;3
   1281  f5fe		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1282  f600		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1283  f602		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1284  f604		       f0 29		      BEQ	PlayCheckpoint	;2
   1285  f606		       a5 8e		      LDA	CollisionCounter	;3
   1286  f608		       c9 e0		      CMP	#$E0	;2
   1287  f60a		       b0 14		      BCS	PlayColision	;2
   1288  f60c		       a5 cd		      LDA	NextCheckpoint	;3
   1289  f60e		       38		      SEC		;2
   1290  f60f		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1291  f611		       c9 02		      CMP	#$02	;2
   1292  f613		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1293  f615		       a5 b8		      LDA	CountdownTimer	; 3
   1294  f617		       f0 53		      BEQ	MuteRightSound	;2
   1295  f619		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1296  f61b		       90 37		      BCC	PlayWarnTimeEnding	;4
   1297  f61d		       4c 6c f6 	      JMP	MuteRightSound	;3
   1298  f620				   PlayColision
   1299  f620		       a9 1f		      LDA	#31
   1300  f622		       85 18		      STA	AUDF1
   1301  f624		       a9 08		      LDA	#8
   1302  f626		       85 16		      STA	AUDC1
   1303  f628		       a9 08		      LDA	#8
   1304  f62a		       85 1a		      STA	AUDV1
   1305  f62c		       4c 70 f6 	      JMP	EndRightSound
   1306  f62f
   1307  f62f				   PlayCheckpoint
   1308  f62f		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1309  f631		       4a		      LSR		;2
   1310  f632		       4a		      LSR		;2
   1311  f633		       4a		      LSR		;2
   1312  f634		       85 18		      STA	AUDF1	;3
   1313  f636		       a9 0c		      LDA	#12	;2
   1314  f638		       85 16		      STA	AUDC1	;3
   1315  f63a		       a9 06		      LDA	#6	;2
   1316  f63c		       85 1a		      STA	AUDV1	;3
   1317  f63e		       4c 70 f6 	      JMP	EndRightSound	;3
   1318  f641
   1319  f641				   PlayBeforeCheckpoint
   1320  f641		       a5 8c		      LDA	FrameCount0	;3
   1321  f643		       29 1c		      AND	#%00011100	;2
   1322  f645		       09 03		      ORA	#%00000011	;2
   1323  f647		       85 18		      STA	AUDF1	;3
   1324  f649		       a9 0c		      LDA	#12	;2
   1325  f64b		       85 16		      STA	AUDC1	;3
   1326  f64d		       a9 03		      LDA	#3	;2
   1327  f64f		       85 1a		      STA	AUDV1	;3
   1328  f651		       4c 70 f6 	      JMP	EndRightSound	;3
   1329  f654
   1330  f654				   PlayWarnTimeEnding
   1331  f654		       a5 8c		      LDA	FrameCount0	;3
   1332  f656		       29 04		      AND	#%00000100	;2
   1333  f658		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1334  f65a		       18		      CLC		;2
   1335  f65b		       a9 0a		      LDA	#10	;2
   1336  f65d		       65 b8		      ADC	CountdownTimer	;2
   1337  f65f		       85 18		      STA	AUDF1	;3
   1338  f661		       a9 0c		      LDA	#12	;2
   1339  f663		       85 16		      STA	AUDC1	;3
   1340  f665		       a9 03		      LDA	#3	;2
   1341  f667		       85 1a		      STA	AUDV1	;3
   1342  f669		       4c 70 f6 	      JMP	EndRightSound	;3
   1343  f66c
   1344  f66c				   MuteRightSound
   1345  f66c		       a9 00		      LDA	#0
   1346  f66e		       85 1a		      STA	AUDV1
   1347  f670				   EndRightSound
   1348  f670		       60		      RTS
   1349  f671
   1350  f671				   ClearAll		; 52
   1351  f671		       a9 00		      LDA	#0	;2
   1352  f673		       85 1c		      STA	GRP1	;3
   1353  f675		       85 1f		      STA	ENABL	;3
   1354  f677		       85 1d		      STA	ENAM0	;3
   1355  f679		       85 1e		      STA	ENAM1	;3
   1356  f67b		       85 84		      STA	GRP1Cache	;3
   1357  f67d		       85 85		      STA	ENABLCache	;3
   1358  f67f		       85 86		      STA	ENAM0Cache	;3
   1359  f681		       85 87		      STA	ENAM1Cache	;3
   1360  f683
   1361  f683				   ClearPF		; 26
   1362  f683		       a9 00		      LDA	#0	;2
   1363  f685				   ClearPFSkipLDA0
   1364  f685		       85 0d		      STA	PF0	;3
   1365  f687		       85 0e		      STA	PF1	;3
   1366  f689		       85 0f		      STA	PF2	;3	
   1367  f68b		       85 81		      STA	PF0Cache	;3
   1368  f68d		       85 82		      STA	PF1Cache	;3
   1369  f68f		       85 83		      STA	PF2Cache	;3 
   1370  f691		       60		      RTS		;6
   1371  f692				   EndClearAll
   1372  f692
   1373  f692				   LoadAll		; 48
   1374  f692		       a5 81		      LDA	PF0Cache	;3
   1375  f694		       85 0d		      STA	PF0	;3
   1376  f696
   1377  f696		       a5 82		      LDA	PF1Cache	;3
   1378  f698		       85 0e		      STA	PF1	;3
   1379  f69a
   1380  f69a		       a5 83		      LDA	PF2Cache	;3
   1381  f69c		       85 0f		      STA	PF2	;3
   1382  f69e
   1383  f69e		       a5 84		      LDA	GRP1Cache	;3
   1384  f6a0		       85 1c		      STA	GRP1	;3
   1385  f6a2
   1386  f6a2		       a5 85		      LDA	ENABLCache	;3
   1387  f6a4		       85 1f		      STA	ENABL	;3
   1388  f6a6
   1389  f6a6		       a5 86		      LDA	ENAM0Cache	;3
   1390  f6a8		       85 1d		      STA	ENAM0	;3
   1391  f6aa
   1392  f6aa		       a5 87		      LDA	ENAM1Cache	;3
   1393  f6ac		       85 1e		      STA	ENAM1	;3
   1394  f6ae
   1395  f6ae		       60		      RTS		;6
   1396  f6af				   EndLoadAll
   1397  f6af
   1398  f6af				   NextDifficulty
   1399  f6af		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1400  f6b1		       29 01		      AND	#%00000001
   1401  f6b3		       d0 2a		      BNE	CheckRandomDifficulty
   1402  f6b5
   1403  f6b5		       a5 c4		      LDA	CurrentDifficulty
   1404  f6b7		       18		      CLC
   1405  f6b8		       69 01		      ADC	#1
   1406  f6ba		       29 03		      AND	#%00000011	; 0 to 3
   1407  f6bc		       85 c4		      STA	CurrentDifficulty
   1408  f6be
   1409  f6be				   ConfigureDifficulty
   1410  f6be		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1411  f6c0		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1412  f6c3		       85 be		      STA	TrafficChance
   1413  f6c5		       85 bf		      STA	OpTrafficChance	; Needs FIX
   1414  f6c7		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1415  f6ca		       85 c2		      STA	TrafficColor
   1416  f6cc		       85 c3		      STA	OpTrafficColor	; Needs FIX
   1417  f6ce
   1418  f6ce		       a5 c6		      LDA	GameMode	;
   1419  f6d0		       29 01		      AND	#%00000001
   1420  f6d2		       f0 03		      BEQ	UseNextDifficultyTime
   1421  f6d4		       4c d8 f6 	      JMP	StoreDifficultyTime
   1422  f6d7				   UseNextDifficultyTime
   1423  f6d7		       c8		      INY
   1424  f6d8				   StoreDifficultyTime
   1425  f6d8		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1426  f6db		       85 c0		      STA	CheckpointTime
   1427  f6dd		       85 c1		      STA	OpCheckpointTime
   1428  f6df
   1429  f6df				   CheckRandomDifficulty
   1430  f6df		       a5 c6		      LDA	GameMode
   1431  f6e1		       29 08		      AND	#%00001000	; Random difficulties
   1432  f6e3		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1433  f6e5				   RandomDifficulty		; need work to make 2 players compatible
   1434  f6e5		       a6 8c		      LDX	FrameCount0
   1435  f6e7		       bd 00 fe 	      LDA	AesTable,X
   1436  f6ea							;EOR TrafficChance, no need, lets make life simple
   1437  f6ea		       29 3f		      AND	#%00111111
   1438  f6ec		       85 be		      STA	TrafficChance
   1439  f6ee		       85 bf		      STA	OpTrafficChance	; While not fix
   1440  f6f0
   1441  f6f0				   ReturnFromNextDifficulty
   1442  f6f0		       60		      RTS
   1443  f6f1
   1444  f6f1				   DefaultOffsets
   1445  f6f1		       a9 20		      LDA	#$20
   1446  f6f3		       85 96		      STA	TrafficOffset1 + 2
   1447  f6f5		       85 a6		      STA	OpTrafficOffset1 + 2
   1448  f6f7		       a9 40		      LDA	#$40
   1449  f6f9		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1450  f6fb		       85 aa		      STA	OpTrafficOffset2 + 2
   1451  f6fd		       a9 60		      LDA	#$60
   1452  f6ff		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1453  f701		       85 ae		      STA	OpTrafficOffset3 + 2
   1454  f703		       a9 80		      LDA	#$80
   1455  f705		       60		      RTS
   1456  f706
   1457  f706				   PrintStaticText		; Preload X with the offset referent to StaticText
   1458  f706		       bd 00 ff 	      LDA	StaticText,X
   1459  f709		       85 d0		      STA	ScoreD0
   1460  f70b		       e8		      INX
   1461  f70c		       bd 00 ff 	      LDA	StaticText,X
   1462  f70f		       85 d1		      STA	ScoreD1
   1463  f711		       e8		      INX
   1464  f712		       bd 00 ff 	      LDA	StaticText,X
   1465  f715		       85 d2		      STA	ScoreD2
   1466  f717		       e8		      INX
   1467  f718		       bd 00 ff 	      LDA	StaticText,X
   1468  f71b		       85 d3		      STA	ScoreD3
   1469  f71d		       e8		      INX
   1470  f71e		       bd 00 ff 	      LDA	StaticText,X
   1471  f721		       85 d4		      STA	ScoreD4
   1472  f723		       60		      RTS
   1473  f724
   1474  f724				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1475  f724		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1476  f726		       85 c9		      STA	ScoreFontColor
   1477  f728		       a9 01		      LDA	#1
   1478  f72a		       85 cb		      STA	ScoreFontColorHoldChange
   1479  f72c
   1480  f72c		       a5 8d		      LDA	FrameCount1
   1481  f72e		       29 07		      AND	#%00000111
   1482  f730		       85 b3		      STA	Tmp3
   1483  f732							;0 is Zelda Name, (default)
   1484  f732		       a9 01		      LDA	#1
   1485  f734		       c5 b3		      CMP	Tmp3
   1486  f736		       f0 38		      BEQ	PrintZeldaDateLeft
   1487  f738
   1488  f738		       a9 02		      LDA	#2
   1489  f73a		       c5 b3		      CMP	Tmp3
   1490  f73c		       f0 23		      BEQ	PrintPolvinhosLeft
   1491  f73e
   1492  f73e		       a9 03		      LDA	#3
   1493  f740		       c5 b3		      CMP	Tmp3
   1494  f742		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1495  f744
   1496  f744		       a9 04		      LDA	#4
   1497  f746		       c5 b3		      CMP	Tmp3
   1498  f748		       f0 1c		      BEQ	PrintIvonneLeft
   1499  f74a
   1500  f74a		       a9 05		      LDA	#5
   1501  f74c		       c5 b3		      CMP	Tmp3
   1502  f74e		       f0 2a		      BEQ	PrintIvonneDateLeft
   1503  f750
   1504  f750		       a9 06		      LDA	#6
   1505  f752		       c5 b3		      CMP	Tmp3
   1506  f754		       f0 15		      BEQ	PrintArtLeft
   1507  f756
   1508  f756		       a9 07		      LDA	#7
   1509  f758		       c5 b3		      CMP	Tmp3
   1510  f75a		       f0 23		      BEQ	PrintLeonardoLeft
   1511  f75c
   1512  f75c				   PrintZeldaLeft
   1513  f75c		       a2 28		      LDX	#<ZeldaTextLeft
   1514  f75e		       4c 84 f7 	      JMP	ProcessPrintEasterEgg
   1515  f761				   PrintPolvinhosLeft
   1516  f761		       a2 3c		      LDX	#<PolvinhosTextLeft
   1517  f763		       4c 84 f7 	      JMP	ProcessPrintEasterEgg
   1518  f766				   PrintIvonneLeft
   1519  f766		       a2 50		      LDX	#<IvonneTextLeft
   1520  f768		       4c 84 f7 	      JMP	ProcessPrintEasterEgg
   1521  f76b				   PrintArtLeft
   1522  f76b		       a2 64		      LDX	#<PaperArtTextLeft
   1523  f76d		       4c 84 f7 	      JMP	ProcessPrintEasterEgg
   1524  f770
   1525  f770				   PrintZeldaDateLeft
   1526  f770		       a2 32		      LDX	#<ZeldaDateLeft
   1527  f772		       4c 84 f7 	      JMP	ProcessPrintEasterEgg
   1528  f775				   PrintPolvinhosDateLeft
   1529  f775		       a2 46		      LDX	#<PolvinhosDateLeft
   1530  f777		       4c 84 f7 	      JMP	ProcessPrintEasterEgg
   1531  f77a				   PrintIvonneDateLeft
   1532  f77a		       a2 5a		      LDX	#<IvonneDateLeft
   1533  f77c		       4c 84 f7 	      JMP	ProcessPrintEasterEgg
   1534  f77f				   PrintLeonardoLeft
   1535  f77f		       a2 6e		      LDX	#<LeonardoTextLeft
   1536  f781		       4c 84 f7 	      JMP	ProcessPrintEasterEgg
   1537  f784
   1538  f784				   ProcessPrintEasterEgg
   1539  f784		       a5 8c		      LDA	FrameCount0	;3
   1540  f786		       29 01		      AND	#%00000001	;2
   1541  f788		       d0 03		      BNE	TranformIntoRightText
   1542  f78a		       4c 92 f7 	      JMP	PrintEasterEggText
   1543  f78d				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1544  f78d		       8a		      TXA
   1545  f78e		       18		      CLC
   1546  f78f		       69 05		      ADC	#HALF_TEXT_SIZE
   1547  f791		       aa		      TAX
   1548  f792
   1549  f792				   PrintEasterEggText
   1550  f792		       20 06 f7 	      JSR	PrintStaticText
   1551  f795		       60		      RTS
   1552  f796
   1553  f796				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1554  f796		       a2 00		      LDX	#0
   1555  f798		       a0 04		      LDY	#FONT_OFFSET
   1556  f79a
   1557  f79a				   ScoreLoop		; 20 
   1558  f79a		       85 02		      STA	WSYNC	;2
   1559  f79c		       85 2a		      STA	HMOVE
   1560  f79e
   1561  f79e		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1562  f7a0		       85 0d		      STA	PF0	;3
   1563  f7a2
   1564  f7a2		       a5 82		      LDA	PF1Cache	;3
   1565  f7a4		       85 0e		      STA	PF1	;3
   1566  f7a6
   1567  f7a6		       a5 83		      LDA	PF2Cache	;3
   1568  f7a8		       85 0f		      STA	PF2	;3
   1569  f7aa
   1570  f7aa				   DrawScoreD0		; 15
   1571  f7aa		       a6 d0		      LDX	ScoreD0	; 3
   1572  f7ac		       bd 00 fd 	      LDA	Font,X	;4
   1573  f7af		       85 81		      STA	PF0Cache	;3
   1574  f7b1		       c6 d0		      DEC	ScoreD0	;5
   1575  f7b3
   1576  f7b3				   DrawScoreD1		; 23	
   1577  f7b3		       a6 d1		      LDX	ScoreD1	; 3
   1578  f7b5		       bd 00 fd 	      LDA	Font,X	;4
   1579  f7b8		       0a		      ASL		;2
   1580  f7b9		       0a		      ASL		;2
   1581  f7ba		       0a		      ASL		;2
   1582  f7bb		       0a		      ASL		;2
   1583  f7bc		       85 82		      STA	PF1Cache	;3
   1584  f7be		       c6 d1		      DEC	ScoreD1	;5
   1585  f7c0
   1586  f7c0				   DrawScoreD2		; 20
   1587  f7c0		       a6 d2		      LDX	ScoreD2	; 3
   1588  f7c2		       bd 00 fd 	      LDA	Font,X	;4
   1589  f7c5		       29 0f		      AND	#%00001111	;2
   1590  f7c7		       05 82		      ORA	PF1Cache	;3
   1591  f7c9		       85 82		      STA	PF1Cache	;3
   1592  f7cb		       c6 d2		      DEC	ScoreD2	;5
   1593  f7cd
   1594  f7cd				   DrawScoreD3		; 23
   1595  f7cd		       a6 d3		      LDX	ScoreD3	; 3
   1596  f7cf		       bd 00 fd 	      LDA	Font,X	;4
   1597  f7d2		       4a		      LSR		;2
   1598  f7d3		       4a		      LSR		;2
   1599  f7d4		       4a		      LSR		;2
   1600  f7d5		       4a		      LSR		;2
   1601  f7d6		       85 83		      STA	PF2Cache	;3
   1602  f7d8		       c6 d3		      DEC	ScoreD3	;5
   1603  f7da
   1604  f7da				   DrawScoreD4		; 20
   1605  f7da		       a6 d4		      LDX	ScoreD4	; 3
   1606  f7dc		       bd 00 fd 	      LDA	Font,X	;4
   1607  f7df		       29 f0		      AND	#%11110000	;2
   1608  f7e1		       05 83		      ORA	PF2Cache	;3
   1609  f7e3		       85 83		      STA	PF2Cache	;3
   1610  f7e5		       c6 d4		      DEC	ScoreD4	;5
   1611  f7e7
   1612  f7e7
   1613  f7e7		       88		      DEY		;2
   1614  f7e8		       10 b0		      BPL	ScoreLoop	;4
   1615  f7ea
   1616  f7ea		       85 02		      STA	WSYNC
   1617  f7ec		       20 92 f6 	      JSR	LoadAll
   1618  f7ef		       60		      RTS		; 6
   1619  f7f0
   1620  f7f0				   PrintRightDecimalDigits
   1621  f7f0		       b9 00 00 	      LDA	0,Y
   1622  f7f3		       4a		      LSR
   1623  f7f4		       4a		      LSR
   1624  f7f5		       4a		      LSR
   1625  f7f6		       4a		      LSR
   1626  f7f7		       aa		      TAX
   1627  f7f8		       bd be fd 	      LDA	FontLookup,X	;4
   1628  f7fb		       85 d2		      STA	ScoreD2	;3
   1629  f7fd
   1630  f7fd		       b9 00 00 	      LDA	0,Y
   1631  f800		       29 0f		      AND	#%00001111
   1632  f802		       aa		      TAX
   1633  f803		       bd be fd 	      LDA	FontLookup,X	;4
   1634  f806		       85 d3		      STA	ScoreD3	;3
   1635  f808
   1636  f808		       c8		      INY
   1637  f809		       b9 00 00 	      LDA	0,Y
   1638  f80c		       4a		      LSR
   1639  f80d		       4a		      LSR
   1640  f80e		       4a		      LSR
   1641  f80f		       4a		      LSR
   1642  f810		       aa		      TAX
   1643  f811		       bd be fd 	      LDA	FontLookup,X	;4
   1644  f814		       85 d0		      STA	ScoreD0	;3
   1645  f816
   1646  f816		       b9 00 00 	      LDA	0,Y
   1647  f819		       29 0f		      AND	#%00001111
   1648  f81b		       aa		      TAX
   1649  f81c		       bd be fd 	      LDA	FontLookup,X	;4
   1650  f81f		       85 d1		      STA	ScoreD1	;3
   1651  f821
   1652  f821		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1653  f823		       85 d4		      STA	ScoreD4
   1654  f825		       60		      RTS
   1655  f826
   1656  f826				   PrintLastLeftDecimalDigits
   1657  f826		       b9 00 00 	      LDA	0,Y
   1658  f829		       4a		      LSR
   1659  f82a		       4a		      LSR
   1660  f82b		       4a		      LSR
   1661  f82c		       4a		      LSR
   1662  f82d		       aa		      TAX
   1663  f82e		       bd be fd 	      LDA	FontLookup,X	;4
   1664  f831		       85 d3		      STA	ScoreD3	;3
   1665  f833		       b9 00 00 	      LDA	0,Y
   1666  f836		       29 0f		      AND	#%00001111
   1667  f838		       aa		      TAX
   1668  f839		       bd be fd 	      LDA	FontLookup,X	;4
   1669  f83c		       85 d4		      STA	ScoreD4	;3
   1670  f83e		       60		      RTS
   1671  f83f
   1672  f83f				   PrintZerosLeft
   1673  f83f		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1674  f841		       85 d2		      STA	ScoreD2
   1675  f843		       85 d3		      STA	ScoreD3
   1676  f845		       85 d4		      STA	ScoreD4
   1677  f847		       60		      RTS
   1678  f848
   1679  f848				   DrawGameOverScoreLine
   1680  f848		       85 02		      STA	WSYNC
   1681  f84a		       20 96 f7 	      JSR	PrintScore
   1682  f84d		       85 02		      STA	WSYNC
   1683  f84f		       85 02		      STA	WSYNC
   1684  f851		       20 83 f6 	      JSR	ClearPF
   1685  f854		       60		      RTS
   1686  f855
   1687  f855				   DrawGameOverScreenLeft
   1688  f855		       85 02		      STA	WSYNC
   1689  f857		       20 83 f6 	      JSR	ClearPF
   1690  f85a
   1691  f85a				   DrawGlideTimerLeft
   1692  f85a		       20 1c f9 	      JSR	Sleep8Lines
   1693  f85d		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1694  f85f		       85 06		      STA	COLUP0
   1695  f861		       85 02		      STA	WSYNC
   1696  f863		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1697  f865		       85 d0		      STA	ScoreD0
   1698  f867		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1699  f869		       85 d1		      STA	ScoreD1
   1700  f86b		       20 3f f8 	      JSR	PrintZerosLeft
   1701  f86e		       20 48 f8 	      JSR	DrawGameOverScoreLine
   1702  f871
   1703  f871				   DrawHitCountLeft
   1704  f871		       20 1c f9 	      JSR	Sleep8Lines
   1705  f874		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1706  f876		       85 06		      STA	COLUP0
   1707  f878		       85 02		      STA	WSYNC
   1708  f87a		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1709  f87c		       85 d0		      STA	ScoreD0
   1710  f87e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1711  f880		       85 d1		      STA	ScoreD1
   1712  f882		       20 3f f8 	      JSR	PrintZerosLeft
   1713  f885		       20 48 f8 	      JSR	DrawGameOverScoreLine
   1714  f888
   1715  f888				   DrawCheckpointCountLeft
   1716  f888		       20 1c f9 	      JSR	Sleep8Lines
   1717  f88b		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1718  f88d		       85 06		      STA	COLUP0
   1719  f88f		       85 02		      STA	WSYNC
   1720  f891		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1721  f893		       85 d0		      STA	ScoreD0
   1722  f895		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1723  f897		       85 d1		      STA	ScoreD1
   1724  f899		       20 3f f8 	      JSR	PrintZerosLeft
   1725  f89c		       20 48 f8 	      JSR	DrawGameOverScoreLine
   1726  f89f
   1727  f89f				   DrawGameVersionLeft
   1728  f89f		       20 1c f9 	      JSR	Sleep8Lines
   1729  f8a2		       a9 49		      LDA	#VERSION_COLOR
   1730  f8a4		       85 06		      STA	COLUP0
   1731  f8a6
   1732  f8a6		       a5 c6		      LDA	GameMode
   1733  f8a8		       aa		      TAX
   1734  f8a9		       bd be fd 	      LDA	FontLookup,X	;4
   1735  f8ac		       85 d0		      STA	ScoreD0	;3
   1736  f8ae
   1737  f8ae		       a5 c7		      LDA	CurrentCarId
   1738  f8b0		       aa		      TAX
   1739  f8b1		       bd be fd 	      LDA	FontLookup,X	;4
   1740  f8b4		       85 d1		      STA	ScoreD1	;3
   1741  f8b6
   1742  f8b6		       a5 db		      LDA	StartSWCHB
   1743  f8b8		       29 40		      AND	#%01000000	; P0 difficulty
   1744  f8ba		       49 40		      EOR	#%01000000	; Reverse bytes
   1745  f8bc		       2a		      ROL
   1746  f8bd		       2a		      ROL
   1747  f8be		       2a		      ROL
   1748  f8bf		       18		      CLC
   1749  f8c0		       69 0a		      ADC	#10
   1750  f8c2		       aa		      TAX
   1751  f8c3		       bd be fd 	      LDA	FontLookup,X	;4
   1752  f8c6		       85 d2		      STA	ScoreD2	;3
   1753  f8c8
   1754  f8c8		       a5 db		      LDA	StartSWCHB
   1755  f8ca		       29 80		      AND	#%10000000	; P0 difficulty
   1756  f8cc		       49 80		      EOR	#%10000000	; Reverse bytes
   1757  f8ce		       2a		      ROL
   1758  f8cf		       2a		      ROL
   1759  f8d0		       18		      CLC
   1760  f8d1		       69 0a		      ADC	#10
   1761  f8d3		       aa		      TAX
   1762  f8d4		       bd be fd 	      LDA	FontLookup,X	;4
   1763  f8d7		       85 d3		      STA	ScoreD3	;3
   1764  f8d9
   1765  f8d9		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1766  f8db		       85 d4		      STA	ScoreD4
   1767  f8dd
   1768  f8dd		       20 48 f8 	      JSR	DrawGameOverScoreLine
   1769  f8e0
   1770  f8e0		       4c f9 f8 	      JMP	FinalizeDrawGameOver
   1771  f8e3
   1772  f8e3				   DrawGameOverScreenRight
   1773  f8e3		       85 02		      STA	WSYNC
   1774  f8e5		       20 83 f6 	      JSR	ClearPF
   1775  f8e8
   1776  f8e8				   DrawVersionRight
   1777  f8e8		       20 1c f9 	      JSR	Sleep8Lines
   1778  f8eb		       a9 49		      LDA	#VERSION_COLOR
   1779  f8ed		       85 07		      STA	COLUP1
   1780  f8ef		       85 02		      STA	WSYNC
   1781  f8f1		       a2 78		      LDX	#<VersionText
   1782  f8f3		       20 06 f7 	      JSR	PrintStaticText
   1783  f8f6		       20 48 f8 	      JSR	DrawGameOverScoreLine
   1784  f8f9
   1785  f8f9				   FinalizeDrawGameOver
   1786  f8f9		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1787  f8fb		       85 c9		      STA	ScoreFontColor
   1788  f8fd		       20 13 f9 	      JSR	Sleep4Lines
   1789  f900		       20 23 f9 	      JSR	Sleep32Lines
   1790  f903		       20 23 f9 	      JSR	Sleep32Lines
   1791  f906		       4c 18 f5 	      JMP	PrepareOverscan
   1792  f909
   1793  f909				   WaitForVblankEnd
   1794  f909		       ad 84 02 	      LDA	INTIM
   1795  f90c		       d0 fb		      BNE	WaitForVblankEnd
   1796  f90e		       85 02		      STA	WSYNC
   1797  f910		       85 01		      STA	VBLANK
   1798  f912		       60		      RTS
   1799  f913
   1800  f913				   Sleep4Lines
   1801  f913		       85 02		      STA	WSYNC
   1802  f915		       85 02		      STA	WSYNC
   1803  f917		       85 02		      STA	WSYNC
   1804  f919		       85 02		      STA	WSYNC
   1805  f91b		       60		      RTS
   1806  f91c
   1807  f91c				   Sleep8Lines
   1808  f91c		       20 13 f9 	      JSR	Sleep4Lines
   1809  f91f		       20 13 f9 	      JSR	Sleep4Lines
   1810  f922		       60		      RTS
   1811  f923
   1812  f923				   Sleep32Lines
   1813  f923		       20 1c f9 	      JSR	Sleep8Lines
   1814  f926		       20 1c f9 	      JSR	Sleep8Lines
   1815  f929		       20 1c f9 	      JSR	Sleep8Lines
   1816  f92c		       20 1c f9 	      JSR	Sleep8Lines
   1817  f92f		       60		      RTS
   1818  f930
   1819  f930				   ConfigureCarSprites
   1820  f930		       a5 8c		      LDA	FrameCount0
   1821  f932		       29 01		      AND	#%00000001
   1822  f934		       d0 0b		      BNE	LoadForRightScreenSprites
   1823  f936				   LoadForLeftScreenSprites
   1824  f936		       a5 c7		      LDA	CurrentCarId
   1825  f938		       85 b0		      STA	Tmp0
   1826  f93a		       a5 c8		      LDA	OpCurrentCarId
   1827  f93c		       85 b1		      STA	Tmp1
   1828  f93e		       4c 49 f9 	      JMP	LoadCarSpritesFromIds
   1829  f941				   LoadForRightScreenSprites
   1830  f941		       a5 c7		      LDA	CurrentCarId
   1831  f943		       85 b1		      STA	Tmp1
   1832  f945		       a5 c8		      LDA	OpCurrentCarId
   1833  f947		       85 b0		      STA	Tmp0
   1834  f949
   1835  f949				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1836  f949		       a4 b0		      LDY	Tmp0
   1837  f94b		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1838  f94e		       85 d7		      STA	CarSpritePointerL
   1839  f950		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1840  f953		       85 d8		      STA	CarSpritePointerH
   1841  f955				   ConfigureOpponentCarSprite
   1842  f955		       a4 b1		      LDY	Tmp1
   1843  f957		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1844  f95a		       85 d9		      STA	EnemyCarSpritePointerL
   1845  f95c		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1846  f95f		       85 da		      STA	EnemyCarSpritePointerH
   1847  f961		       60		      RTS
   1848  f962
   1849  f962							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1850  f962							;X player 0 or 1
   1851  f962				   SelectCarWithDpad
   1852  f962		       a0 03		      LDY	#3
   1853  f964				   SelectCarWithDpadLoop
   1854  f964		       ad 80 02 	      LDA	SWCHA
   1855  f967		       25 b0		      AND	Tmp0
   1856  f969		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1857  f96b		       98		      TYA
   1858  f96c		       95 c7		      STA	CurrentCarId,X
   1859  f96e				   ContinueSelectCarWithDpadLoop
   1860  f96e		       46 b0		      LSR	Tmp0
   1861  f970		       88		      DEY
   1862  f971		       10 f1		      BPL	SelectCarWithDpadLoop
   1863  f973		       60		      RTS
   1864  f974
   1865  f974				   ProcessOpponentLine
   1866  f974		       38		      SEC
   1867  f975		       a5 91		      LDA	TrafficOffset0 + 1
   1868  f977		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1869  f979		       85 b0		      STA	Tmp0
   1870  f97b		       a5 92		      LDA	TrafficOffset0 + 2
   1871  f97d		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1872  f97f		       85 b1		      STA	Tmp1
   1873  f981		       18		      CLC
   1874  f982		       a5 b0		      LDA	Tmp0
   1875  f984		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1876  f986		       85 b0		      STA	Tmp0
   1877  f988		       a5 b1		      LDA	Tmp1
   1878  f98a		       69 00		      ADC	#0
   1879  f98c		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1880  f98e				   OpponentNotVisible
   1881  f98e		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1882  f990		       85 cf		      STA	OpponentLine
   1883  f992		       4c 99 f9 	      JMP	ReturnFromProcessOpponentLine
   1884  f995				   OpponentVisible
   1885  f995		       a5 b0		      LDA	Tmp0
   1886  f997		       85 cf		      STA	OpponentLine
   1887  f999				   ReturnFromProcessOpponentLine
   1888  f999		       60		      RTS
   1889  f99a
   1890  f99a							; Movement and colision are binded because the car must be moved after duplicate size.
   1891  f99a							; Use X for the player
   1892  f99a							; Tmp2 Traffic colision result
   1893  f99a							; Tmp3 Opponent Colision result (Not implemented)
   1894  f99a				   TestCollisionAndMove
   1895  f99a							; Until store the movemnt, Y contains the value to be stored.
   1896  f99a							; see if player0 colides with the rest
   1897  f99a		       a5 b2		      LDA	Tmp2
   1898  f99c		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1899  f99e		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1900  f9a0		       d0 25		      BNE	NoCollision
   1901  f9a2		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1902  f9a4		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1903  f9a6		       f0 1f		      BEQ	NoCollision
   1904  f9a8		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1905  f9aa		       f0 1b		      BEQ	NoCollision
   1906  f9ac		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1907  f9ae		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1908  f9b0		       b5 f2		      LDA	Player0SpeedH,X
   1909  f9b2		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1910  f9b4		       a9 10		      LDA	#COLLISION_SPEED_L
   1911  f9b6		       d5 f0		      CMP	Player0SpeedL,X
   1912  f9b8		       b0 04		      BCS	SkipSetColisionSpeedL
   1913  f9ba				   SetColisionSpeedL
   1914  f9ba		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1915  f9bc		       95 f0		      STA	Player0SpeedL,X
   1916  f9be				   SkipSetColisionSpeedL
   1917  f9be		       a9 00		      LDA	#0
   1918  f9c0		       95 f2		      STA	Player0SpeedH,X
   1919  f9c2		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1920  f9c4		       4c 17 fa 	      JMP	StoreHMove	; We keep position consistent
   1921  f9c7				   NoCollision
   1922  f9c7
   1923  f9c7				   DecrementCollision
   1924  f9c7		       b5 8e		      LDA	CollisionCounter,X
   1925  f9c9		       f0 06		      BEQ	FinishDecrementCollision
   1926  f9cb		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1927  f9cd		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1928  f9cf		       d6 8e		      DEC	CollisionCounter,X
   1929  f9d1				   FinishDecrementCollision
   1930  f9d1
   1931  f9d1				   ResetPlayerSize
   1932  f9d1		       d0 04		      BNE	FinishResetPlayerSize
   1933  f9d3		       a9 30		      LDA	#%00110000
   1934  f9d5		       95 04		      STA	NUSIZ0,X	;
   1935  f9d7				   FinishResetPlayerSize
   1936  f9d7
   1937  f9d7				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1938  f9d7		       b5 8e		      LDA	CollisionCounter,X
   1939  f9d9		       c9 01		      CMP	#1	; Last frame before reset
   1940  f9db		       d0 05		      BNE	SkipResetPlayerPosition
   1941  f9dd		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1942  f9df		       4c 17 fa 	      JMP	StoreHMove
   1943  f9e2				   SkipResetPlayerPosition
   1944  f9e2
   1945  f9e2				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1946  f9e2		       b5 c7		      LDA	CurrentCarId,X
   1947  f9e4		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1948  f9e6		       d0 08		      BNE	PrepareReadXAxis
   1949  f9e8		       a0 00		      LDY	#0
   1950  f9ea		       a5 8c		      LDA	FrameCount0
   1951  f9ec		       29 01		      AND	#DRAGSTER_TURN_MASK
   1952  f9ee		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1953  f9f0
   1954  f9f0				   PrepareReadXAxis
   1955  f9f0		       a0 00		      LDY	#0
   1956  f9f2		       b5 b6		      LDA	Player0X,X
   1957  f9f4				   BeginReadLeft
   1958  f9f4		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1959  f9f6		       bd d1 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1960  f9f9		       2c 80 02 	      BIT	SWCHA
   1961  f9fc		       d0 07		      BNE	SkipMoveLeft
   1962  f9fe		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1963  fa00		       d6 b6		      DEC	Player0X,X
   1964  fa02		       4c 17 fa 	      JMP	StoreHMove	; Cannot move left and right...
   1965  fa05				   SkipMoveLeft
   1966  fa05				   BeginReadRight
   1967  fa05		       b5 b6		      LDA	Player0X,X
   1968  fa07		       c9 2c		      CMP	#PLAYER_MAX_X
   1969  fa09		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1970  fa0b		       bd d3 fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1971  fa0e		       2c 80 02 	      BIT	SWCHA
   1972  fa11		       d0 04		      BNE	SkipMoveRight
   1973  fa13		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1974  fa15		       f6 b6		      INC	Player0X,X
   1975  fa17				   SkipMoveRight
   1976  fa17				   StoreHMove
   1977  fa17		       94 20		      STY	HMP0,X	;set the move for player 0
   1978  fa19
   1979  fa19				   ClearCollision
   1980  fa19		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1981  fa1b		       60		      RTS
   1982  fa1c
   1983  fa1c							; X Traffic offset 4 bits each lane, 4 lanes per player
   1984  fa1c							; Tmp3 Max X offset
   1985  fa1c							; Tmp4 Max Player Speed L
   1986  fa1c							; Tmp5 Max Player Speed H
   1987  fa1c				   UpdateOffsets
   1988  fa1c		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1989  fa1e		       a5 c6		      LDA	GameMode
   1990  fa20		       29 04		      AND	#%00000100	; GameModes with high delta
   1991  fa22		       f0 02		      BEQ	UpdateOffsetsLoop
   1992  fa24		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1993  fa26
   1994  fa26				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1995  fa26		       38		      SEC
   1996  fa27		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1997  fa29		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1998  fa2c		       85 b0		      STA	Tmp0
   1999  fa2e		       c8		      INY
   2000  fa2f		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   2001  fa31		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   2002  fa34		       85 b1		      STA	Tmp1
   2003  fa36		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   2004  fa38		       e9 00		      SBC	#0
   2005  fa3a		       85 b2		      STA	Tmp2
   2006  fa3c
   2007  fa3c				   AddsTheResult
   2008  fa3c		       18		      CLC
   2009  fa3d		       a5 b0		      LDA	Tmp0
   2010  fa3f		       75 90		      ADC	TrafficOffset0,X
   2011  fa41		       95 90		      STA	TrafficOffset0,X
   2012  fa43		       e8		      INX
   2013  fa44		       a5 b1		      LDA	Tmp1
   2014  fa46		       75 90		      ADC	TrafficOffset0,X
   2015  fa48		       95 90		      STA	TrafficOffset0,X
   2016  fa4a		       e8		      INX
   2017  fa4b		       a5 b2		      LDA	Tmp2	; Carry
   2018  fa4d		       75 90		      ADC	TrafficOffset0,X
   2019  fa4f		       95 90		      STA	TrafficOffset0,X
   2020  fa51		       90 0f		      BCC	CalculateOffsetCache
   2021  fa53				   CalculatePlayer0Msb
   2022  fa53		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   2023  fa55		       d0 05		      BNE	CalculatePlayer1Msb
   2024  fa57		       e6 ba		      INC	Traffic0Msb
   2025  fa59		       4c 62 fa 	      JMP	CalculateOffsetCache
   2026  fa5c				   CalculatePlayer1Msb
   2027  fa5c		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   2028  fa5e		       d0 02		      BNE	CalculateOffsetCache
   2029  fa60		       e6 bb		      INC	OpTraffic0Msb
   2030  fa62
   2031  fa62				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   2032  fa62		       e8		      INX
   2033  fa63		       38		      SEC
   2034  fa64		       69 00		      ADC	#0	;Increment by one
   2035  fa66		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   2036  fa68
   2037  fa68				   PrepareNextUpdateLoop
   2038  fa68		       c8		      INY
   2039  fa69		       e8		      INX
   2040  fa6a		       e4 b3		      CPX	Tmp3	; Max X offset
   2041  fa6c		       d0 b8		      BNE	UpdateOffsetsLoop
   2042  fa6e		       60		      RTS
   2043  fa6f
   2044  fa6f							; X Player 0 or 1
   2045  fa6f				   ProcessSpeed
   2046  fa6f				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2047  fa6f		       a9 00		      LDA	#0
   2048  fa71		       85 b0		      STA	Tmp0	; Break speed
   2049  fa73		       b5 b8		      LDA	CountdownTimer,X
   2050  fa75		       d0 0d		      BNE	Break
   2051  fa77		       b4 c7		      LDY	CurrentCarId,X
   2052  fa79		       a5 8c		      LDA	FrameCount0
   2053  fa7b		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2054  fa7e		       d0 04		      BNE	Break
   2055  fa80		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2056  fa82		       85 b0		      STA	Tmp0
   2057  fa84
   2058  fa84				   Break
   2059  fa84		       bd cf fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2060  fa87		       2c 80 02 	      BIT	SWCHA
   2061  fa8a		       d0 12		      BNE	BreakNonZero
   2062  fa8c		       b5 0c		      LDA	INPT4,X	;3
   2063  fa8e		       10 0a		      BPL	BreakWhileAccelerating
   2064  fa90		       b4 d5		      LDY	Gear,X
   2065  fa92		       b9 e9 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2066  fa95		       85 b0		      STA	Tmp0
   2067  fa97		       4c 9e fa 	      JMP	BreakNonZero
   2068  fa9a				   BreakWhileAccelerating		; Allow better control while breaking.
   2069  fa9a		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2070  fa9c		       85 b0		      STA	Tmp0
   2071  fa9e
   2072  fa9e				   BreakNonZero
   2073  fa9e		       a5 b0		      LDA	Tmp0
   2074  faa0		       f0 29		      BEQ	SkipBreak
   2075  faa2
   2076  faa2				   DecreaseSpeed
   2077  faa2		       38		      SEC
   2078  faa3		       b5 f0		      LDA	Player0SpeedL,X
   2079  faa5		       e5 b0		      SBC	Tmp0
   2080  faa7		       95 f0		      STA	Player0SpeedL,X
   2081  faa9		       b5 f2		      LDA	Player0SpeedH,X
   2082  faab		       e9 00		      SBC	#0
   2083  faad		       95 f2		      STA	Player0SpeedH,X
   2084  faaf
   2085  faaf				   CheckMinSpeed
   2086  faaf		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2087  fab1		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2088  fab3		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2089  fab5		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2090  fab7
   2091  fab7				   CompareLBreakSpeed
   2092  fab7		       b5 f0		      LDA	Player0SpeedL,X
   2093  fab9		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2094  fabb		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2095  fabd		       4c c8 fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2096  fac0
   2097  fac0				   ResetMinSpeed
   2098  fac0		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2099  fac2		       95 f2		      STA	Player0SpeedH,X
   2100  fac4		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2101  fac6		       95 f0		      STA	Player0SpeedL,X
   2102  fac8
   2103  fac8				   SkipAccelerateIfBreaking
   2104  fac8		       4c 11 fb 	      JMP	SkipAccelerate
   2105  facb				   SkipBreak
   2106  facb
   2107  facb				   Acelerates
   2108  facb		       b5 b8		      LDA	CountdownTimer,X
   2109  facd		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2110  facf
   2111  facf				   ContinueAccelerateTest
   2112  facf		       b5 0c		      LDA	INPT4,X	;3
   2113  fad1		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2114  fad3		       bd cd fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2115  fad6		       2c 80 02 	      BIT	SWCHA
   2116  fad9		       d0 36		      BNE	SkipAccelerate
   2117  fadb
   2118  fadb				   IncreaseCarSpeed
   2119  fadb		       a9 02		      LDA	#2
   2120  fadd		       85 b0		      STA	Tmp0	; Loop control
   2121  fadf		       b4 c7		      LDY	CurrentCarId,X
   2122  fae1				   IncreaseCarSpeedLoop
   2123  fae1							;Adds speed
   2124  fae1		       18		      CLC
   2125  fae2		       b5 dc		      LDA	AccelerateBuffer,X
   2126  fae4		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
   2127  fae7		       95 dc		      STA	AccelerateBuffer,X
   2128  fae9		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2129  faeb		       f6 f0		      INC	Player0SpeedL,X
   2130  faed		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2131  faef		       f6 f2		      INC	Player0SpeedH,X
   2132  faf1				   ContinueIncreaseSpeedLoop
   2133  faf1		       c6 b0		      DEC	Tmp0
   2134  faf3		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2135  faf5				   SkipIncreaseCarSpeed
   2136  faf5
   2137  faf5				   CheckIfAlreadyMaxSpeed
   2138  faf5		       b5 f2		      LDA	Player0SpeedH,X
   2139  faf7		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2140  faf9		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2141  fafb		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2142  fafd							;High bit is max, compare the low
   2143  fafd		       b4 c7		      LDY	CurrentCarId,X
   2144  faff		       b5 f0		      LDA	Player0SpeedL,X
   2145  fb01		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
   2146  fb04		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2147  fb06							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2148  fb06
   2149  fb06				   ResetToMaxSpeed		; Speed is more, or is already max
   2150  fb06		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2151  fb08		       95 f2		      STA	Player0SpeedH,X
   2152  fb0a		       b4 c7		      LDY	CurrentCarId,X
   2153  fb0c		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
   2154  fb0f		       95 f0		      STA	Player0SpeedL,X
   2155  fb11				   SkipAccelerate
   2156  fb11		       60		      RTS
   2157  fb12
   2158  fb12				   EverySecond		; 64 frames to be more precise
   2159  fb12		       a9 3f		      LDA	#%00111111
   2160  fb14		       25 8c		      AND	FrameCount0
   2161  fb16		       d0 06		      BNE	SkipEverySecondAction
   2162  fb18		       d5 b8		      CMP	CountdownTimer,X
   2163  fb1a		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2164  fb1c		       d6 b8		      DEC	CountdownTimer,X
   2165  fb1e				   SkipEverySecondAction
   2166  fb1e		       60		      RTS
   2167  fb1f
   2168  fb1f				   CalculateGear
   2169  fb1f		       b5 f0		      LDA	Player0SpeedL,X	;3
   2170  fb21		       29 80		      AND	#%10000000	;2
   2171  fb23		       15 f2		      ORA	Player0SpeedH,X	;3
   2172  fb25		       18		      CLC		;2
   2173  fb26		       2a		      ROL		;2
   2174  fb27		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2175  fb29		       95 d5		      STA	Gear,X
   2176  fb2b		       60		      RTS
   2177  fb2c
   2178  fb2c				   ProcessScoreFontColor
   2179  fb2c		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2180  fb2e		       f0 06		      BEQ	ResetScoreFontColor
   2181  fb30		       88		      DEY
   2182  fb31		       94 cb		      STY	ScoreFontColorHoldChange,X
   2183  fb33		       4c 3a fb 	      JMP	SkipScoreFontColor
   2184  fb36				   ResetScoreFontColor
   2185  fb36		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2186  fb38		       95 c9		      STA	ScoreFontColor,X
   2187  fb3a				   SkipScoreFontColor
   2188  fb3a		       60		      RTS
   2189  fb3b
   2190  fb3b							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2191  fc00					      org	$FC00
   2192  fc00				   QrCode1
   2193  fc00		       1f		      .byte.b	#%00011111
   2194  fc01		       10		      .byte.b	#%00010000
   2195  fc02		       17		      .byte.b	#%00010111
   2196  fc03		       17		      .byte.b	#%00010111
   2197  fc04		       17		      .byte.b	#%00010111
   2198  fc05		       10		      .byte.b	#%00010000
   2199  fc06		       1f		      .byte.b	#%00011111
   2200  fc07		       00		      .byte.b	#%00000000
   2201  fc08		       17		      .byte.b	#%00010111
   2202  fc09		       10		      .byte.b	#%00010000
   2203  fc0a		       1d		      .byte.b	#%00011101
   2204  fc0b		       16		      .byte.b	#%00010110
   2205  fc0c		       03		      .byte.b	#%00000011
   2206  fc0d		       19		      .byte.b	#%00011001
   2207  fc0e		       13		      .byte.b	#%00010011
   2208  fc0f		       1c		      .byte.b	#%00011100
   2209  fc10		       0b		      .byte.b	#%00001011
   2210  fc11		       00		      .byte.b	#%00000000
   2211  fc12		       1f		      .byte.b	#%00011111
   2212  fc13		       10		      .byte.b	#%00010000
   2213  fc14		       17		      .byte.b	#%00010111
   2214  fc15		       17		      .byte.b	#%00010111
   2215  fc16		       17		      .byte.b	#%00010111
   2216  fc17		       10		      .byte.b	#%00010000
   2217  fc18		       1f		      .byte.b	#%00011111
   2218  fc19
   2219  fc19				   QrCode2
   2220  fc19		       c3		      .byte.b	#%11000011
   2221  fc1a		       9a		      .byte.b	#%10011010
   2222  fc1b		       82		      .byte.b	#%10000010
   2223  fc1c		       da		      .byte.b	#%11011010
   2224  fc1d		       aa		      .byte.b	#%10101010
   2225  fc1e		       ca		      .byte.b	#%11001010
   2226  fc1f		       f3		      .byte.b	#%11110011
   2227  fc20		       78		      .byte.b	#%01111000
   2228  fc21		       df		      .byte.b	#%11011111
   2229  fc22		       fc		      .byte.b	#%11111100
   2230  fc23		       c7		      .byte.b	#%11000111
   2231  fc24		       98		      .byte.b	#%10011000
   2232  fc25		       23		      .byte.b	#%00100011
   2233  fc26		       b9		      .byte.b	#%10111001
   2234  fc27		       d2		      .byte.b	#%11010010
   2235  fc28		       30		      .byte.b	#%00110000
   2236  fc29		       eb		      .byte.b	#%11101011
   2237  fc2a		       28		      .byte.b	#%00101000
   2238  fc2b		       ab		      .byte.b	#%10101011
   2239  fc2c		       72		      .byte.b	#%01110010
   2240  fc2d		       fa		      .byte.b	#%11111010
   2241  fc2e		       7a		      .byte.b	#%01111010
   2242  fc2f		       32		      .byte.b	#%00110010
   2243  fc30		       3a		      .byte.b	#%00111010
   2244  fc31		       63		      .byte.b	#%01100011
   2245  fc32
   2246  fc32				   QrCode3
   2247  fc32		       98		      .byte.b	#%10011000
   2248  fc33		       c3		      .byte.b	#%11000011
   2249  fc34		       39		      .byte.b	#%00111001
   2250  fc35		       34		      .byte.b	#%00110100
   2251  fc36		       ff		      .byte.b	#%11111111
   2252  fc37		       71		      .byte.b	#%01110001
   2253  fc38		       d5		      .byte.b	#%11010101
   2254  fc39		       d1		      .byte.b	#%11010001
   2255  fc3a		       5f		      .byte.b	#%01011111
   2256  fc3b		       26		      .byte.b	#%00100110
   2257  fc3c		       2d		      .byte.b	#%00101101
   2258  fc3d		       e9		      .byte.b	#%11101001
   2259  fc3e		       d6		      .byte.b	#%11010110
   2260  fc3f		       26		      .byte.b	#%00100110
   2261  fc40		       ba		      .byte.b	#%10111010
   2262  fc41		       03		      .byte.b	#%00000011
   2263  fc42		       dd		      .byte.b	#%11011101
   2264  fc43		       e0		      .byte.b	#%11100000
   2265  fc44		       57		      .byte.b	#%01010111
   2266  fc45		       14		      .byte.b	#%00010100
   2267  fc46		       35		      .byte.b	#%00110101
   2268  fc47		       e5		      .byte.b	#%11100101
   2269  fc48		       b5		      .byte.b	#%10110101
   2270  fc49		       d4		      .byte.b	#%11010100
   2271  fc4a		       97		      .byte.b	#%10010111
   2272  fc4b
   2273  fc4b				   QrCode4
   2274  fc4b		       09		      .byte.b	#%00001001
   2275  fc4c		       0e		      .byte.b	#%00001110
   2276  fc4d		       0f		      .byte.b	#%00001111
   2277  fc4e		       0c		      .byte.b	#%00001100
   2278  fc4f		       0c		      .byte.b	#%00001100
   2279  fc50		       08		      .byte.b	#%00001000
   2280  fc51		       08		      .byte.b	#%00001000
   2281  fc52		       06		      .byte.b	#%00000110
   2282  fc53		       06		      .byte.b	#%00000110
   2283  fc54		       0b		      .byte.b	#%00001011
   2284  fc55		       0f		      .byte.b	#%00001111
   2285  fc56		       04		      .byte.b	#%00000100
   2286  fc57		       08		      .byte.b	#%00001000
   2287  fc58		       0f		      .byte.b	#%00001111
   2288  fc59		       09		      .byte.b	#%00001001
   2289  fc5a		       07		      .byte.b	#%00000111
   2290  fc5b		       05		      .byte.b	#%00000101
   2291  fc5c		       00		      .byte.b	#%00000000
   2292  fc5d		       0f		      .byte.b	#%00001111
   2293  fc5e		       08		      .byte.b	#%00001000
   2294  fc5f		       0b		      .byte.b	#%00001011
   2295  fc60		       0b		      .byte.b	#%00001011
   2296  fc61		       0b		      .byte.b	#%00001011
   2297  fc62		       08		      .byte.b	#%00001000
   2298  fc63		       0f		      .byte.b	#%00001111
   2299  fc64
   2300  fc64							; Moved here because of rom space.
   2301  fc64							; The only SBR in constants space
   2302  fc64				   DrawQrCode
   2303  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2304  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2305  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2306  fc6a		       85 0a		      STA	CTRLPF
   2307  fc6c		       20 71 f6 	      JSR	ClearAll	; To be 100 sure!
   2308  fc6f		       ad 82 02 	      LDA	SWCHB
   2309  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2310  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2311  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2312  fc78		       86 09		      STX	COLUBK
   2313  fc7a		       84 08		      STY	COLUPF
   2314  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2315  fc7f				   StoreReversedQrCode
   2316  fc7f		       86 08		      STX	COLUPF
   2317  fc81		       84 09		      STY	COLUBK
   2318  fc83
   2319  fc83				   ContinueQrCode
   2320  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2321  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2322  fc87		       20 09 f9 	      JSR	WaitForVblankEnd
   2323  fc8a		       20 1c f9 	      JSR	Sleep8Lines
   2324  fc8d		       20 1c f9 	      JSR	Sleep8Lines
   2325  fc90		       20 1c f9 	      JSR	Sleep8Lines
   2326  fc93
   2327  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2328  fc93		       85 02		      STA	WSYNC
   2329  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2330  fc98		       85 0e		      STA	PF1	;3
   2331  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2332  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2334  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2335  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2336  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2337  fcb5		       85 0e		      STA	PF1	;3
   2338  fcb7
   2339  fcb7		       ca		      DEX		;2
   2340  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2341  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2342  fcbc		       88		      DEY		;2
   2343  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2344  fcbf
   2345  fcbf				   EndQrCodeLoop
   2346  fcbf		       85 02		      STA	WSYNC	;
   2347  fcc1		       a9 00		      LDA	#0
   2348  fcc3		       85 0e		      STA	PF1	;3
   2349  fcc5		       85 0f		      STA	PF2	;3
   2350  fcc7
   2351  fcc7		       20 23 f9 	      JSR	Sleep32Lines
   2352  fcca		       4c 18 f5 	      JMP	PrepareOverscan
   2353  fccd
   2354  fccd				   PlayerToUpMask
   2355  fccd		       10		      .byte.b	#%00010000	;
   2356  fcce		       01		      .byte.b	#%00000001	;
   2357  fccf
   2358  fccf				   PlayerToDownMask
   2359  fccf		       20		      .byte.b	#%00100000	;
   2360  fcd0		       02		      .byte.b	#%00000010	;
   2361  fcd1
   2362  fcd1
   2363  fcd1				   PlayerToLeftMask
   2364  fcd1		       40		      .byte.b	#%01000000	;
   2365  fcd2		       04		      .byte.b	#%00000100	;
   2366  fcd3
   2367  fcd3				   PlayerToRightMask
   2368  fcd3		       80		      .byte.b	#%10000000	;
   2369  fcd4		       08		      .byte.b	#%00001000	;
   2370  fcd5
   2371  fd00					      org	$FD00
   2372  fd00				   Font
   2373  fd00				   C0
   2374  fd00		       e7		      .byte.b	#%11100111	;
   2375  fd01		       a5		      .byte.b	#%10100101	; 
   2376  fd02		       a5		      .byte.b	#%10100101	; 
   2377  fd03		       a5		      .byte.b	#%10100101	; 
   2378  fd04		       e7		      .byte.b	#%11100111	;	
   2379  fd05				   C1
   2380  fd05		       e7		      .byte.b	#%11100111	;
   2381  fd06		       42		      .byte.b	#%01000010	; 
   2382  fd07		       42		      .byte.b	#%01000010	; 
   2383  fd08		       42		      .byte.b	#%01000010	; 
   2384  fd09		       66		      .byte.b	#%01100110	;
   2385  fd0a				   C2
   2386  fd0a		       e7		      .byte.b	#%11100111	;
   2387  fd0b		       24		      .byte.b	#%00100100	; 
   2388  fd0c		       e7		      .byte.b	#%11100111	; 
   2389  fd0d		       81		      .byte.b	#%10000001	; 
   2390  fd0e		       e7		      .byte.b	#%11100111	;
   2391  fd0f				   C3
   2392  fd0f		       e7		      .byte.b	#%11100111	;
   2393  fd10		       81		      .byte.b	#%10000001	; 
   2394  fd11		       e7		      .byte.b	#%11100111	; 
   2395  fd12		       81		      .byte.b	#%10000001	; 
   2396  fd13		       e7		      .byte.b	#%11100111	;
   2397  fd14				   C4
   2398  fd14		       81		      .byte.b	#%10000001	;
   2399  fd15		       81		      .byte.b	#%10000001	; 
   2400  fd16		       e7		      .byte.b	#%11100111	; 
   2401  fd17		       a5		      .byte.b	#%10100101	; 
   2402  fd18		       a5		      .byte.b	#%10100101	;
   2403  fd19				   C5
   2404  fd19		       e7		      .byte.b	#%11100111	;
   2405  fd1a		       81		      .byte.b	#%10000001	; 
   2406  fd1b		       e7		      .byte.b	#%11100111	; 
   2407  fd1c		       24		      .byte.b	#%00100100	; 
   2408  fd1d		       e7		      .byte.b	#%11100111	;
   2409  fd1e				   C6
   2410  fd1e		       e7		      .byte.b	#%11100111	;
   2411  fd1f		       a5		      .byte.b	#%10100101	; 
   2412  fd20		       e7		      .byte.b	#%11100111	; 
   2413  fd21		       24		      .byte.b	#%00100100	; 
   2414  fd22		       e7		      .byte.b	#%11100111	;
   2415  fd23				   C7
   2416  fd23		       81		      .byte.b	#%10000001	;
   2417  fd24		       81		      .byte.b	#%10000001	; 
   2418  fd25		       81		      .byte.b	#%10000001	; 
   2419  fd26		       81		      .byte.b	#%10000001	; 
   2420  fd27		       e7		      .byte.b	#%11100111	;
   2421  fd28				   C8
   2422  fd28		       e7		      .byte.b	#%11100111	;
   2423  fd29		       a5		      .byte.b	#%10100101	; 
   2424  fd2a		       e7		      .byte.b	#%11100111	; 
   2425  fd2b		       a5		      .byte.b	#%10100101	; 
   2426  fd2c		       e7		      .byte.b	#%11100111	;
   2427  fd2d				   C9
   2428  fd2d		       e7		      .byte.b	#%11100111	;
   2429  fd2e		       81		      .byte.b	#%10000001	; 
   2430  fd2f		       e7		      .byte.b	#%11100111	; 
   2431  fd30		       a5		      .byte.b	#%10100101	; 
   2432  fd31		       e7		      .byte.b	#%11100111	;
   2433  fd32				   CA
   2434  fd32		       a5		      .byte.b	#%10100101	;
   2435  fd33		       a5		      .byte.b	#%10100101	; 
   2436  fd34		       e7		      .byte.b	#%11100111	; 
   2437  fd35		       a5		      .byte.b	#%10100101	; 
   2438  fd36		       e7		      .byte.b	#%11100111	;
   2439  fd37				   CB
   2440  fd37		       66		      .byte.b	#%01100110	;
   2441  fd38		       a5		      .byte.b	#%10100101	; 
   2442  fd39		       66		      .byte.b	#%01100110	; 
   2443  fd3a		       a5		      .byte.b	#%10100101	;
   2444  fd3b		       66		      .byte.b	#%01100110	;
   2445  fd3c				   CC
   2446  fd3c		       e7		      .byte.b	#%11100111	;
   2447  fd3d		       24		      .byte.b	#%00100100	; 
   2448  fd3e		       24		      .byte.b	#%00100100	; 
   2449  fd3f		       24		      .byte.b	#%00100100	;
   2450  fd40		       e7		      .byte.b	#%11100111	;
   2451  fd41
   2452  fd41				   CD
   2453  fd41		       66		      .byte.b	#%01100110	;
   2454  fd42		       a5		      .byte.b	#%10100101	; 
   2455  fd43		       a5		      .byte.b	#%10100101	; 
   2456  fd44		       a5		      .byte.b	#%10100101	;
   2457  fd45		       66		      .byte.b	#%01100110	;
   2458  fd46
   2459  fd46				   CE
   2460  fd46		       e7		      .byte.b	#%11100111	;
   2461  fd47		       24		      .byte.b	#%00100100	; 
   2462  fd48		       e7		      .byte.b	#%11100111	; 
   2463  fd49		       24		      .byte.b	#%00100100	; 
   2464  fd4a		       e7		      .byte.b	#%11100111	;
   2465  fd4b
   2466  fd4b				   CF
   2467  fd4b		       24		      .byte.b	#%00100100	;
   2468  fd4c		       24		      .byte.b	#%00100100	; 
   2469  fd4d		       e7		      .byte.b	#%11100111	; 
   2470  fd4e		       24		      .byte.b	#%00100100	; 
   2471  fd4f		       e7		      .byte.b	#%11100111	;
   2472  fd50
   2473  fd50				   CG
   2474  fd50		       c3		      .byte.b	#%11000011	;
   2475  fd51		       a5		      .byte.b	#%10100101	; 
   2476  fd52		       a5		      .byte.b	#%10100101	; 
   2477  fd53		       24		      .byte.b	#%00100100	; 
   2478  fd54		       c3		      .byte.b	#%11000011	;	
   2479  fd55
   2480  fd55				   CH
   2481  fd55		       a5		      .byte.b	#%10100101	;
   2482  fd56		       a5		      .byte.b	#%10100101	; 
   2483  fd57		       e7		      .byte.b	#%11100111	; 
   2484  fd58		       a5		      .byte.b	#%10100101	; 
   2485  fd59		       a5		      .byte.b	#%10100101	;
   2486  fd5a
   2487  fd5a				   CK
   2488  fd5a		       a5		      .byte.b	#%10100101	;
   2489  fd5b		       a5		      .byte.b	#%10100101	; 
   2490  fd5c		       66		      .byte.b	#%01100110	; 
   2491  fd5d		       a5		      .byte.b	#%10100101	; 
   2492  fd5e		       a5		      .byte.b	#%10100101	;
   2493  fd5f
   2494  fd5f				   CL
   2495  fd5f		       e7		      .byte.b	#%11100111	;
   2496  fd60		       24		      .byte.b	#%00100100	; 
   2497  fd61		       24		      .byte.b	#%00100100	; 
   2498  fd62		       24		      .byte.b	#%00100100	; 
   2499  fd63		       24		      .byte.b	#%00100100	;
   2500  fd64
   2501  fd64				   CI
   2502  fd64		       42		      .byte.b	#%01000010	;
   2503  fd65		       42		      .byte.b	#%01000010	; 
   2504  fd66		       42		      .byte.b	#%01000010	; 
   2505  fd67		       42		      .byte.b	#%01000010	; 
   2506  fd68		       42		      .byte.b	#%01000010	;
   2507  fd69
   2508  fd69				   CM
   2509  fd69		       a5		      .byte.b	#%10100101	;
   2510  fd6a		       a5		      .byte.b	#%10100101	; 
   2511  fd6b		       a5		      .byte.b	#%10100101	; 
   2512  fd6c		       e7		      .byte.b	#%11100111	; 
   2513  fd6d		       a5		      .byte.b	#%10100101	;
   2514  fd6e
   2515  fd6e				   CN
   2516  fd6e		       a5		      .byte.b	#%10100101	;
   2517  fd6f		       a5		      .byte.b	#%10100101	; 
   2518  fd70		       a5		      .byte.b	#%10100101	; 
   2519  fd71		       a5		      .byte.b	#%10100101	; 
   2520  fd72		       66		      .byte.b	#%01100110	;	
   2521  fd73
   2522  fd73
   2523  fd73				   CO
   2524  fd73		       42		      .byte.b	#%01000010	;
   2525  fd74		       a5		      .byte.b	#%10100101	; 
   2526  fd75		       a5		      .byte.b	#%10100101	; 
   2527  fd76		       a5		      .byte.b	#%10100101	; 
   2528  fd77		       42		      .byte.b	#%01000010	;	
   2529  fd78
   2530  fd78				   CP
   2531  fd78		       24		      .byte.b	#%00100100	;
   2532  fd79		       24		      .byte.b	#%00100100	; 
   2533  fd7a		       e7		      .byte.b	#%11100111	; 
   2534  fd7b		       a5		      .byte.b	#%10100101	; 
   2535  fd7c		       e7		      .byte.b	#%11100111	;
   2536  fd7d
   2537  fd7d				   CR
   2538  fd7d		       a5		      .byte.b	#%10100101	;
   2539  fd7e		       a5		      .byte.b	#%10100101	; 
   2540  fd7f		       66		      .byte.b	#%01100110	; 
   2541  fd80		       a5		      .byte.b	#%10100101	; 
   2542  fd81		       66		      .byte.b	#%01100110	;
   2543  fd82
   2544  fd82				   CS
   2545  fd82		       66		      .byte.b	#%01100110	;
   2546  fd83		       81		      .byte.b	#%10000001	; 
   2547  fd84		       42		      .byte.b	#%01000010	; 
   2548  fd85		       24		      .byte.b	#%00100100	; 
   2549  fd86		       c3		      .byte.b	#%11000011	;
   2550  fd87
   2551  fd87				   CT
   2552  fd87		       42		      .byte.b	#%01000010	;
   2553  fd88		       42		      .byte.b	#%01000010	; 
   2554  fd89		       42		      .byte.b	#%01000010	; 
   2555  fd8a		       42		      .byte.b	#%01000010	; 
   2556  fd8b		       e7		      .byte.b	#%11100111	;
   2557  fd8c
   2558  fd8c				   CV
   2559  fd8c		       42		      .byte.b	#%01000010	;
   2560  fd8d		       a5		      .byte.b	#%10100101	; 
   2561  fd8e		       a5		      .byte.b	#%10100101	; 
   2562  fd8f		       a5		      .byte.b	#%10100101	; 
   2563  fd90		       a5		      .byte.b	#%10100101	;	
   2564  fd91
   2565  fd91				   CY
   2566  fd91		       42		      .byte.b	#%01000010	;
   2567  fd92		       42		      .byte.b	#%01000010	; 
   2568  fd93		       42		      .byte.b	#%01000010	; 
   2569  fd94		       a5		      .byte.b	#%10100101	; 
   2570  fd95		       a5		      .byte.b	#%10100101	;
   2571  fd96
   2572  fd96				   CW
   2573  fd96		       a5		      .byte.b	#%10100101	;
   2574  fd97		       e7		      .byte.b	#%11100111	; 
   2575  fd98		       a5		      .byte.b	#%10100101	; 
   2576  fd99		       a5		      .byte.b	#%10100101	; 
   2577  fd9a		       a5		      .byte.b	#%10100101	;
   2578  fd9b
   2579  fd9b				   CZ
   2580  fd9b		       e7		      .byte.b	#%11100111	;
   2581  fd9c		       24		      .byte.b	#%00100100	; 
   2582  fd9d		       42		      .byte.b	#%01000010	; 
   2583  fd9e		       81		      .byte.b	#%10000001	; 
   2584  fd9f		       e7		      .byte.b	#%11100111	;
   2585  fda0
   2586  fda0				   Pipe
   2587  fda0		       42		      .byte.b	#%01000010	;
   2588  fda1		       00		      .byte.b	#%00000000	; 
   2589  fda2		       42		      .byte.b	#%01000010	; 
   2590  fda3		       00		      .byte.b	#%00000000	; 
   2591  fda4		       42		      .byte.b	#%01000010	;
   2592  fda5
   2593  fda5				   Exclamation
   2594  fda5		       42		      .byte.b	#%01000010	;
   2595  fda6		       00		      .byte.b	#%00000000	; 
   2596  fda7		       42		      .byte.b	#%01000010	; 
   2597  fda8		       42		      .byte.b	#%01000010	; 
   2598  fda9		       42		      .byte.b	#%01000010	;
   2599  fdaa
   2600  fdaa				   Dot
   2601  fdaa		       42		      .byte.b	#%01000010	;
   2602  fdab		       42		      .byte.b	#%01000010	; 
   2603  fdac		       00		      .byte.b	#%00000000	; 
   2604  fdad		       00		      .byte.b	#%00000000	; 
   2605  fdae		       00		      .byte.b	#%00000000	;
   2606  fdaf
   2607  fdaf				   Colon
   2608  fdaf		       42		      .byte.b	#%01000010	;
   2609  fdb0		       42		      .byte.b	#%01000010	; 
   2610  fdb1		       00		      .byte.b	#%00000000	; 
   2611  fdb2		       42		      .byte.b	#%01000010	; 
   2612  fdb3		       42		      .byte.b	#%01000010	;
   2613  fdb4
   2614  fdb4				   Triangle
   2615  fdb4		       81		      .byte.b	#%10000001	;
   2616  fdb5		       c3		      .byte.b	#%11000011	; 
   2617  fdb6		       e7		      .byte.b	#%11100111	; 
   2618  fdb7		       c3		      .byte.b	#%11000011	; 
   2619  fdb8		       81		      .byte.b	#%10000001	;
   2620  fdb9
   2621  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2622  fdb9		       00		      .byte.b	#0	;
   2623  fdba		       00		      .byte.b	#0	;
   2624  fdbb		       00		      .byte.b	#0	;
   2625  fdbc		       00		      .byte.b	#0	;
   2626  fdbd		       00		      .byte.b	#0	;
   2627  fdbe
   2628  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2629  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2630  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2631  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2632  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2633  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2634  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2635  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2636  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2637  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2638  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2639  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2640  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2641  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2642  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2643  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2644  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2645  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2646  fdcf
   2647  fdcf				   EngineSoundType
   2648  fdcf		       02		      .byte.b	#2
   2649  fdd0		       02		      .byte.b	#2
   2650  fdd1		       0e		      .byte.b	#14
   2651  fdd2		       06		      .byte.b	#6
   2652  fdd3		       06		      .byte.b	#6
   2653  fdd4		       0e		      .byte.b	#14
   2654  fdd5
   2655  fdd5				   EngineBaseFrequence
   2656  fdd5		       1f		      .byte.b	#31
   2657  fdd6		       15		      .byte.b	#21
   2658  fdd7		       14		      .byte.b	#20
   2659  fdd8		       1f		      .byte.b	#31
   2660  fdd9		       16		      .byte.b	#22
   2661  fdda		       03		      .byte.b	#3
   2662  fddb
   2663  fddb				   TachometerSizeLookup1
   2664  fddb		       1f		      .byte.b	#%00011111
   2665  fddc		       3f		      .byte.b	#%00111111
   2666  fddd		       7f		      .byte.b	#%01111111
   2667  fdde		       ff		      .byte.b	#%11111111
   2668  fddf		       ff		      .byte.b	#%11111111
   2669  fde0		       ff		      .byte.b	#%11111111
   2670  fde1		       ff		      .byte.b	#%11111111
   2671  fde2		       ff		      .byte.b	#%11111111
   2672  fde3
   2673  fde3				   TachometerSizeLookup2
   2674  fde3		       00		      .byte.b	#%00000000
   2675  fde4		       00		      .byte.b	#%00000000
   2676  fde5		       00		      .byte.b	#%00000000
   2677  fde6		       00		      .byte.b	#%00000000
   2678  fde7		       80		      .byte.b	#%10000000
   2679  fde8		       c0		      .byte.b	#%11000000
   2680  fde9		       e0		      .byte.b	#%11100000
   2681  fdea		       f0		      .byte.b	#%11110000
   2682  fdeb
   2683  fdeb				   TachometerGearLookup
   2684  fdeb		       01		      .byte.b	#%00000001
   2685  fdec		       02		      .byte.b	#%00000010
   2686  fded		       04		      .byte.b	#%00000100
   2687  fdee		       08		      .byte.b	#%00001000
   2688  fdef		       10		      .byte.b	#%00010000
   2689  fdf0		       30		      .byte.b	#%00110000
   2690  fdf1
   2691  fe00					      org	$FE00
   2692  fe00				   AesTable
   2693  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2694  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2695  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2696  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2697  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2698  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2699  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2700  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2701  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2702  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2703  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2704  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2705  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2706  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2707  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2708  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2709  ff00
   2710  ff00							; From FF00 to FFFB (122 bytes) to use here
   2711  ff00
   2712  ff00				   StaticText		; All static text must be on the same MSB block. 
   2713  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2714  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2715  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2716  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2717  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2718  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2719  ff05
   2720  ff05				   HellwayLeftText
   2721  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2722  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2723  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2724  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2725  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2726  ff0a
   2727  ff0a				   HellwayRightText
   2728  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2729  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2730  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2731  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2732  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2733  ff0f
   2734  ff0f				   OpbText
   2735  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2736  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2737  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2738  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2739  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2740  ff14
   2741  ff14				   YearText
   2742  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2743  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2744  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2745  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2746  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2747  ff19
   2748  ff19				   GameText
   2749  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2750  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2751  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2752  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2753  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2754  ff1e
   2755  ff1e				   OverText
   2756  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2757  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2758  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2759  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2760  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2761  ff23				   GoText
   2762  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2763  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2764  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2765  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2766  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2767  ff28
   2768  ff28				   ZeldaTextLeft
   2769  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2770  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2771  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2772  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2773  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2774  ff2d
   2775  ff2d				   ZeldaTextRight
   2776  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2777  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2778  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2779  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2780  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2781  ff32
   2782  ff32				   ZeldaDateLeft
   2783  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2784  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2785  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2786  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2787  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2788  ff37
   2789  ff37				   ZeldaDateRight
   2790  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2791  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2792  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2793  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2794  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2795  ff3c
   2796  ff3c				   PolvinhosTextLeft
   2797  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2798  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2799  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2800  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2801  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2802  ff41
   2803  ff41				   PolvinhosTextRight
   2804  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2805  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2806  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2807  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2808  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2809  ff46
   2810  ff46				   PolvinhosDateLeft
   2811  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2812  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2813  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2814  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2815  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2816  ff4b
   2817  ff4b				   PolvinhosDateRight
   2818  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2819  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2820  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2821  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2822  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2823  ff50
   2824  ff50				   IvonneTextLeft
   2825  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2826  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2827  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2828  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2829  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2830  ff55
   2831  ff55				   IvonneTextRight
   2832  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2833  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2834  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2835  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2836  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2837  ff5a
   2838  ff5a				   IvonneDateLeft
   2839  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2840  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2841  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2842  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2843  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2844  ff5f
   2845  ff5f				   IvonneDateRight
   2846  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2847  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2848  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2849  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2850  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2851  ff64
   2852  ff64				   PaperArtTextLeft
   2853  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2854  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2855  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2856  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2857  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2858  ff69
   2859  ff69				   PaperArtTextRight
   2860  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2861  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2862  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2863  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2864  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2865  ff6e
   2866  ff6e				   LeonardoTextLeft
   2867  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2868  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2869  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2870  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2871  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2872  ff73
   2873  ff73				   LeonardoTextRight
   2874  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2875  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2876  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2877  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2878  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2879  ff78
   2880  ff78				   VersionText
   2881  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2882  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2883  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2884  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2885  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2886  ff7d
   2887  ff7d
   2888  ff7d				   EndStaticText
   2889  ff7d
   2890  ff7d				   CarSprite0		; Upside down, Original Car
   2891  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2892  ff85				   CarSprite0NoPadding
   2893  ff85		       7e		      .byte.b	#%01111110
   2894  ff86		       24		      .byte.b	#%00100100
   2895  ff87		       bd		      .byte.b	#%10111101
   2896  ff88		       3c		      .byte.b	#%00111100
   2897  ff89		       bd		      .byte.b	#%10111101
   2898  ff8a		       3c		      .byte.b	#%00111100
   2899  ff8b
   2900  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2901  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2902  ff93				   CarSprite1NoPadding
   2903  ff93		       bd		      .byte.b	#%10111101
   2904  ff94		       7e		      .byte.b	#%01111110
   2905  ff95		       5a		      .byte.b	#%01011010
   2906  ff96		       66		      .byte.b	#%01100110
   2907  ff97		       bd		      .byte.b	#%10111101
   2908  ff98		       3c		      .byte.b	#%00111100
   2909  ff99
   2910  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2911  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2912  ffa1				   CarSprite2NoPadding
   2913  ffa1		       7e		      .byte.b	#%01111110
   2914  ffa2		       a5		      .byte.b	#%10100101
   2915  ffa3		       42		      .byte.b	#%01000010
   2916  ffa4		       42		      .byte.b	#%01000010
   2917  ffa5		       bd		      .byte.b	#%10111101
   2918  ffa6		       7e		      .byte.b	#%01111110
   2919  ffa7
   2920  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2921  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2922  ffaf				   CarSprite3NoPadding
   2923  ffaf		       3c		      .byte.b	#%00111100
   2924  ffb0		       db		      .byte.b	#%11011011
   2925  ffb1		       db		      .byte.b	#%11011011
   2926  ffb2		       3c		      .byte.b	#%00111100
   2927  ffb3		       5a		      .byte.b	#%01011010
   2928  ffb4		       3c		      .byte.b	#%00111100
   2929  ffb5
   2930  ffb5				   TrafficSpeeds
   2931  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2932  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2933  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2934  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2935  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2936  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2937  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2938  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2939  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2940  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2941  ffbf				   TrafficSpeedsHighDelta
   2942  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2943  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2944  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2945  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2946  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2947  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2948  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2949  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2950  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2951  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2952  ffc9
   2953  ffc9				   CarIdToSpriteAddressL
   2954  ffc9		       7d		      .byte.b	#<CarSprite0
   2955  ffca		       8b		      .byte.b	#<CarSprite1
   2956  ffcb		       99		      .byte.b	#<CarSprite2
   2957  ffcc		       a7		      .byte.b	#<CarSprite3
   2958  ffcd
   2959  ffcd				   CarIdToSpriteAddressH
   2960  ffcd		       ff		      .byte.b	#>CarSprite0
   2961  ffce		       ff		      .byte.b	#>CarSprite1
   2962  ffcf		       ff		      .byte.b	#>CarSprite2
   2963  ffd0		       ff		      .byte.b	#>CarSprite3
   2964  ffd1
   2965  ffd1				   EnemyCarIdToSpriteAddressL
   2966  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2967  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2968  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2969  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2970  ffd5
   2971  ffd5				   EnemyCarIdToSpriteAddressH
   2972  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2973  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2974  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2975  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2976  ffd9
   2977  ffd9				   CarIdToAccelerateSpeed
   2978  ffd9		       80		      .byte.b	#128
   2979  ffda		       c0		      .byte.b	#192
   2980  ffdb		       60		      .byte.b	#96
   2981  ffdc		       c0		      .byte.b	#192
   2982  ffdd
   2983  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2984  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2985  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2986  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2987  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2988  ffe1
   2989  ffe1				   CarIdToMaxSpeedL
   2990  ffe1		       80		      .byte.b	#$80
   2991  ffe2		       00		      .byte.b	#$00	; One less gear
   2992  ffe3		       80		      .byte.b	#$80
   2993  ffe4		       80		      .byte.b	#$80
   2994  ffe5
   2995  ffe5				   CarIdToMaxGear
   2996  ffe5		       05		      .byte.b	#5
   2997  ffe6		       04		      .byte.b	#4	; One less gear
   2998  ffe7		       05		      .byte.b	#5
   2999  ffe8		       05		      .byte.b	#5
   3000  ffe9
   3001  ffe9				   GearToBreakSpeedTable
   3002  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   3003  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   3004  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3005  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   3006  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3007  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3008  ffef
   3009  ffef				   TrafficColorTable
   3010  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3011  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3012  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3013  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3014  fff3
   3015  fff3				   TrafficChanceTable
   3016  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3017  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3018  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3019  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3020  fff7
   3021  fff7				   TrafficTimeTable
   3022  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3023  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3024  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3025  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3026  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3027  fffc
   3028  fffc
   3029  fffc					      org	$FFFC
   3030  fffc		       00 f0		      .word.w	BeforeStart
   3031  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
