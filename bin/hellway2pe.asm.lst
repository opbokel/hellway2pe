------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 8c	   FrameCount0 =	$8C	;
    111  f000		       00 8d	   FrameCount1 =	$8D	;
    112  f000
    113  f000		       00 8e	   Player0SpeedL =	$8E
    114  f000		       00 8f	   Player0SpeedH =	$8F
    115  f000
    116  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    117  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    118  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    119  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    120  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    121  f000
    122  f000		       00 a4	   CheckpointBcd0 =	$A4
    123  f000		       00 a5	   CheckpointBcd1 =	$A5
    124  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    125  f000		       00 a7	   CarSpritePointerL =	$A7
    126  f000		       00 a8	   CarSpritePointerH =	$A8
    127  f000		       00 a9	   CurrentCarId =	$A9
    128  f000		       00 aa	   AccelerateBuffer =	$AA	; Change speed on buffer overflow.
    129  f000		       00 ab	   TextSide   =	$AB
    130  f000		       00 ac	   TextFlickerMode =	$AC
    131  f000		       00 ad	   Gear       =	$AD
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000
    139  f000		       00 b4	   ScoreBcd0  =	$B4
    140  f000		       00 b5	   ScoreBcd1  =	$B5
    141  f000		       00 b6	   ScoreBcd2  =	$B6
    142  f000		       00 b7	   ScoreBcd3  =	$B7
    143  f000
    144  f000		       00 b8	   CollisionCounter =	$B8
    145  f000		       00 b9	   Player0X   =	$B9
    146  f000		       00 ba	   CountdownTimer =	$BA
    147  f000		       00 bb	   Traffic0Msb =	$BB
    148  f000		       00 bc	   SwitchDebounceCounter =	$BC
    149  f000
    150  f000		       00 bd	   TimeBcd0   =	$BD
    151  f000		       00 be	   TimeBcd1   =	$BE
    152  f000		       00 bf	   TimeBcd2   =	$BF
    153  f000
    154  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    155  f000		       00 c1	   TrafficChance =	$C1
    156  f000		       00 c2	   CheckpointTime =	$C2
    157  f000		       00 c3	   TrafficColor =	$C3
    158  f000		       00 c4	   CurrentDifficulty =	$C4
    159  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    160  f000							;Bit 2 speed delta, Bit 3 random traffic 
    161  f000
    162  f000
    163  f000		       00 ca	   BorderType =	$CA
    164  f000
    165  f000		       00 cb	   HitCountBcd0 =	$CB
    166  f000		       00 cc	   HitCountBcd1 =	$CC
    167  f000
    168  f000		       00 cd	   GlideTimeBcd0 =	$CD
    169  f000		       00 ce	   GlideTimeBcd1 =	$CE
    170  f000
    171  f000		       00 cf	   OneSecondConter =	$CF
    172  f000
    173  f000		       00 d0	   ScoreD0    =	$D0
    174  f000		       00 d1	   ScoreD1    =	$D1
    175  f000		       00 d2	   ScoreD2    =	$D2
    176  f000		       00 d3	   ScoreD3    =	$D3
    177  f000		       00 d4	   ScoreD4    =	$D4
    178  f000		       00 d5	   ScoreFontColor =	$D5
    179  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    180  f000		       00 d7	   NextCheckpoint =	$D7
    181  f000
    182  f000		       00 d8	   OpponentLine =	$D8
    183  f000
    184  f000
    185  f000							;generic start up stuff, put zero in almost all...
    186  f000				   BeforeStart		;All variables that are kept on game reset or select
    187  f000		       a0 00		      LDY	#0
    188  f002		       84 bc		      STY	SwitchDebounceCounter
    189  f004		       84 c4		      STY	CurrentDifficulty
    190  f006		       84 c0		      STY	GameStatus
    191  f008		       a0 10		      LDY	#16
    192  f00a		       84 c5		      STY	GameMode
    193  f00c		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    194  f00e		       84 a9		      STY	CurrentCarId
    195  f010
    196  f010				   Start
    197  f010		       a9 02		      LDA	#2
    198  f012		       85 00		      STA	VSYNC
    199  f014		       85 02		      STA	WSYNC
    200  f016		       85 02		      STA	WSYNC
    201  f018		       85 02		      STA	WSYNC
    202  f01a		       a9 00		      LDA	#0	;2
    203  f01c		       85 00		      STA	VSYNC	;3
    204  f01e
    205  f01e		       78		      SEI
    206  f01f		       d8		      CLD
    207  f020		       a2 ff		      LDX	#$FF
    208  f022		       9a		      TXS
    209  f023
    210  f023		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    211  f025				   CleanMem
    212  f025		       e0 bc		      CPX	#SwitchDebounceCounter
    213  f027		       f0 12		      BEQ	SkipClean
    214  f029		       e0 c5		      CPX	#GameMode
    215  f02b		       f0 0e		      BEQ	SkipClean
    216  f02d		       e0 a9		      CPX	#CurrentCarId
    217  f02f		       f0 0a		      BEQ	SkipClean
    218  f031		       e0 c4		      CPX	#CurrentDifficulty
    219  f033		       f0 06		      BEQ	SkipClean
    220  f035		       e0 c0		      CPX	#GameStatus
    221  f037		       f0 02		      BEQ	SkipClean
    222  f039		       95 00		      STA	0,X
    223  f03b				   SkipClean
    224  f03b		       e8		      INX
    225  f03c		       d0 e7		      BNE	CleanMem
    226  f03e
    227  f03e		       a9 d5		      LDA	#213
    228  f040		       8d 96 02 	      STA	TIM64T	;3	
    229  f043
    230  f043							;Setting some variables...
    231  f043
    232  f043				   SettingTrafficOffsets		; Time sensitive with player H position
    233  f043		       85 02		      STA	WSYNC	;We will set player position
    234  f045		       20 77 f7 	      JSR	DefaultOffsets
    235  f048
    236  f048		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    237  f04b		       85 8e		      STA	Player0SpeedL
    238  f04d
    239  f04d							;SLEEP 11;18
    240  f04d		       85 10		      STA	RESP0
    241  f04f
    242  f04f		       a2 00		      LDX	#0
    243  f051		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    244  f054		       85 a6		      STA	StartSWCHB	; For game over
    245  f056		       29 c0		      AND	#%11000000
    246  f058		       f0 0b		      BEQ	CallConfigureDifficulty
    247  f05a		       e8		      INX
    248  f05b		       c9 80		      CMP	#%10000000
    249  f05d		       f0 06		      BEQ	CallConfigureDifficulty
    250  f05f		       e8		      INX
    251  f060		       c9 40		      CMP	#%01000000
    252  f062		       f0 01		      BEQ	CallConfigureDifficulty
    253  f064		       e8		      INX
    254  f065
    255  f065				   CallConfigureDifficulty
    256  f065		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    257  f067		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    258  f069		       a5 c0		      LDA	GameStatus
    259  f06b		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    260  f06d				   NextCar
    261  f06d		       a4 a9		      LDY	CurrentCarId
    262  f06f		       c8		      INY
    263  f070		       98		      TYA
    264  f071		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    265  f073		       85 a9		      STA	CurrentCarId
    266  f075				   StoreCurrentDifficulty
    267  f075		       86 c4		      STX	CurrentDifficulty
    268  f077		       20 4c f7 	      JSR	ConfigureDifficulty
    269  f07a
    270  f07a				   ConfigureCarSprite
    271  f07a		       a4 a9		      LDY	CurrentCarId
    272  f07c		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    273  f07f		       85 a7		      STA	CarSpritePointerL
    274  f081		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    275  f084		       85 a8		      STA	CarSpritePointerH
    276  f086
    277  f086				   SetGameNotRunning
    278  f086		       a9 00		      LDA	#0
    279  f088		       85 c0		      STA	GameStatus
    280  f08a
    281  f08a				   ConfigureOneSecondTimer
    282  f08a		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    283  f08c		       85 cf		      STA	OneSecondConter
    284  f08e
    285  f08e				   ConfigureTimer
    286  f08e		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    287  f090		       85 ba		      STA	CountdownTimer	;3
    288  f092
    289  f092				   ConfigurePlayerXPosition
    290  f092		       a9 35		      LDA	#PLAYER_0_X_START	;2
    291  f094		       85 b9		      STA	Player0X	;3
    292  f096
    293  f096				   ConfigureMissileSize
    294  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    295  f098		       85 04		      STA	NUSIZ0	;3
    296  f09a		       85 05		      STA	NUSIZ1	;3
    297  f09c
    298  f09c				   ConfigureNextCheckpoint
    299  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    300  f09e		       85 d7		      STA	NextCheckpoint
    301  f0a0
    302  f0a0				   HPositioning
    303  f0a0		       85 02		      STA	WSYNC
    304  f0a2
      0  f0a2					      Sleep	20
      1  f0a2				   .CYCLES    SET	20
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2				  -	      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2				  -	      ELSE
     12  f0a2				  -	      bit	VSYNC
     13  f0a2				  -	      ENDIF
     14  f0a2				  -.CYCLES    SET	.CYCLES - 3
     15  f0a2					      ENDIF
     16  f0a2
     17  f0a2					      REPEAT	.CYCLES / 2
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     17  f0a3					      REPEND
     18  f0a4		       ea		      nop
     17  f0a4					      REPEND
     18  f0a5		       ea		      nop
     17  f0a5					      REPEND
     18  f0a6		       ea		      nop
     17  f0a6					      REPEND
     18  f0a7		       ea		      nop
     17  f0a7					      REPEND
     18  f0a8		       ea		      nop
     17  f0a8					      REPEND
     18  f0a9		       ea		      nop
     17  f0a9					      REPEND
     18  f0aa		       ea		      nop
     17  f0aa					      REPEND
     18  f0ab		       ea		      nop
     19  f0ac					      REPEND
    306  f0ac		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0ae					      SLEEP	5	;
      1  f0ae				   .CYCLES    SET	5
      2  f0ae
      3  f0ae				  -	      IF	.CYCLES < 2
      4  f0ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ae				  -	      ERR
      6  f0ae					      ENDIF
      7  f0ae
      8  f0ae					      IF	.CYCLES & 1
      9  f0ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ae				  -	      nop	0
     11  f0ae					      ELSE
     12  f0ae		       24 00		      bit	VSYNC
     13  f0b0					      ENDIF
     14  f0b0				   .CYCLES    SET	.CYCLES - 3
     15  f0b0					      ENDIF
     16  f0b0
     17  f0b0					      REPEAT	.CYCLES / 2
     18  f0b0		       ea		      nop
     19  f0b1					      REPEND
    308  f0b1		       85 14		      STA	RESBL
      0  f0b3					      SLEEP	2	;
      1  f0b3				   .CYCLES    SET	2
      2  f0b3
      3  f0b3				  -	      IF	.CYCLES < 2
      4  f0b3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b3				  -	      ERR
      6  f0b3					      ENDIF
      7  f0b3
      8  f0b3				  -	      IF	.CYCLES & 1
      9  f0b3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b3				  -	      nop	0
     11  f0b3				  -	      ELSE
     12  f0b3				  -	      bit	VSYNC
     13  f0b3				  -	      ENDIF
     14  f0b3				  -.CYCLES    SET	.CYCLES - 3
     15  f0b3					      ENDIF
     16  f0b3
     17  f0b3					      REPEAT	.CYCLES / 2
     18  f0b3		       ea		      nop
     19  f0b4					      REPEND
    310  f0b4		       85 12		      STA	RESM0
      0  f0b6					      SLEEP	2
      1  f0b6				   .CYCLES    SET	2
      2  f0b6
      3  f0b6				  -	      IF	.CYCLES < 2
      4  f0b6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b6				  -	      ERR
      6  f0b6					      ENDIF
      7  f0b6
      8  f0b6				  -	      IF	.CYCLES & 1
      9  f0b6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b6				  -	      nop	0
     11  f0b6				  -	      ELSE
     12  f0b6				  -	      bit	VSYNC
     13  f0b6				  -	      ENDIF
     14  f0b6				  -.CYCLES    SET	.CYCLES - 3
     15  f0b6					      ENDIF
     16  f0b6
     17  f0b6					      REPEAT	.CYCLES / 2
     18  f0b6		       ea		      nop
     19  f0b7					      REPEND
    312  f0b7		       85 13		      STA	RESM1
    313  f0b9		       85 11		      STA	RESP1
    314  f0bb
    315  f0bb		       a9 f0		      LDA	#$F0
    316  f0bd		       85 24		      STA	HMBL
    317  f0bf		       85 22		      STA	HMM0
    318  f0c1		       85 23		      STA	HMM1
    319  f0c3		       85 02		      STA	WSYNC
    320  f0c5		       85 2a		      STA	HMOVE
    321  f0c7		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    322  f0c9		       85 2b		      STA	HMCLR
    323  f0cb
    324  f0cb				   WaitResetToEnd
    325  f0cb		       ad 84 02 	      LDA	INTIM
    326  f0ce		       d0 fb		      BNE	WaitResetToEnd
    327  f0d0
    328  f0d0				   MainLoop
    329  f0d0		       a9 02		      LDA	#2
    330  f0d2		       85 00		      STA	VSYNC
    331  f0d4		       85 02		      STA	WSYNC
    332  f0d6
    333  f0d6				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    334  f0d6		       a9 01		      LDA	#%00000001
    335  f0d8		       24 ac		      BIT	TextFlickerMode
    336  f0da		       f0 05		      BEQ	TextSideFrameZero
    337  f0dc		       25 8d		      AND	FrameCount1
    338  f0de		       4c e3 f0 	      JMP	StoreTextSize
    339  f0e1				   TextSideFrameZero
    340  f0e1		       25 8c		      AND	FrameCount0
    341  f0e3				   StoreTextSize
    342  f0e3		       85 ab		      STA	TextSide
    343  f0e5
    344  f0e5		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    345  f0e7		       85 2a		      STA	HMOVE	;2
    346  f0e9				   ConfigVBlankTimer
    347  f0e9		       a5 c5		      LDA	GameMode
    348  f0eb		       c9 10		      CMP	#MAX_GAME_MODE
    349  f0ed		       f0 05		      BEQ	SetVblankTimerQrCode
    350  f0ef		       a9 29		      LDA	#VBLANK_TIMER
    351  f0f1		       4c f6 f0 	      JMP	SetVblankTimer
    352  f0f4				   SetVblankTimerQrCode
    353  f0f4		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    354  f0f6				   SetVblankTimer
    355  f0f6		       85 02		      STA	WSYNC	;3
    356  f0f8		       8d 96 02 	      STA	TIM64T	;3	
    357  f0fb		       a9 00		      LDA	#0	;2
    358  f0fd		       85 00		      STA	VSYNC	;3	
    359  f0ff
    360  f0ff				   RandomizeGame
    361  f0ff		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    362  f101		       d0 30		      BNE	EndRandomizeGame
    363  f103		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    364  f105		       29 02		      AND	#%00000010
    365  f107		       f0 27		      BEQ	DeterministicGame
    366  f109		       a6 96		      LDX	TrafficOffset1 + 2
    367  f10b		       bd 00 fe 	      LDA	AesTable,X
    368  f10e		       45 8c		      EOR	FrameCount0
    369  f110		       85 96		      STA	TrafficOffset1 + 2
    370  f112		       a6 9a		      LDX	TrafficOffset2 + 2
    371  f114		       bd 00 fe 	      LDA	AesTable,X
    372  f117		       45 8c		      EOR	FrameCount0
    373  f119		       85 9a		      STA	TrafficOffset2 + 2
    374  f11b		       a6 9e		      LDX	TrafficOffset3 + 2
    375  f11d		       bd 00 fe 	      LDA	AesTable,X
    376  f120		       45 8c		      EOR	FrameCount0
    377  f122		       85 9e		      STA	TrafficOffset3 + 2
    378  f124		       a6 a2		      LDX	TrafficOffset4 + 2
    379  f126		       bd 00 fe 	      LDA	AesTable,X
    380  f129		       45 8c		      EOR	FrameCount0
    381  f12b		       85 a2		      STA	TrafficOffset4 + 2
    382  f12d		       4c 33 f1 	      JMP	EndRandomizeGame
    383  f130
    384  f130				   DeterministicGame
    385  f130		       20 77 f7 	      JSR	DefaultOffsets
    386  f133
    387  f133				   EndRandomizeGame
    388  f133
    389  f133				   CountFrame
    390  f133		       e6 8c		      INC	FrameCount0	; 5
    391  f135		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    392  f137		       e6 8d		      INC	FrameCount1	; 5 
    393  f139				   SkipIncFC1
    394  f139
    395  f139				   CallDrawQrCode
    396  f139		       a5 c5		      LDA	GameMode
    397  f13b		       c9 10		      CMP	#MAX_GAME_MODE
    398  f13d		       d0 03		      BNE	TestIsGameRunning
    399  f13f		       4c 64 fc 	      JMP	DrawQrCode
    400  f142
    401  f142							;Does not update the game if not running
    402  f142				   TestIsGameRunning
    403  f142		       a5 c0		      LDA	GameStatus	;3
    404  f144		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    405  f146		       4c 0e f3 	      JMP	SkipUpdateLogic
    406  f149				   ContinueWithGameLogic
    407  f149
    408  f149				   EverySecond		; 64 frames to be more precise
    409  f149		       a9 3f		      LDA	#%00111111
    410  f14b		       25 8c		      AND	FrameCount0
    411  f14d		       d0 06		      BNE	SkipEverySecondAction
    412  f14f		       c5 ba		      CMP	CountdownTimer
    413  f151		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    414  f153		       c6 ba		      DEC	CountdownTimer
    415  f155				   SkipEverySecondAction
    416  f155
    417  f155				   ChangeTextFlickerMode
    418  f155		       a5 bc		      LDA	SwitchDebounceCounter
    419  f157		       d0 0d		      BNE	EndChangeTextFlickerMode
    420  f159		       ad 82 02 	      LDA	SWCHB
    421  f15c		       29 02		      AND	#%00000010	;Game select
    422  f15e		       d0 06		      BNE	EndChangeTextFlickerMode
    423  f160		       e6 ac		      INC	TextFlickerMode
    424  f162		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    425  f164		       85 bc		      STA	SwitchDebounceCounter
    426  f166				   EndChangeTextFlickerMode
    427  f166
    428  f166				   BreakOnTimeOver		; Uses LDX as the breaking speed
    429  f166		       a2 00		      LDX	#0
    430  f168		       a5 ba		      LDA	CountdownTimer
    431  f16a		       d0 0b		      BNE	Break
    432  f16c		       a4 a9		      LDY	CurrentCarId
    433  f16e		       a5 8c		      LDA	FrameCount0
    434  f170		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    435  f173		       d0 02		      BNE	Break
    436  f175		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    437  f177
    438  f177				   Break
    439  f177		       a9 20		      LDA	#%00100000	;Down in controller
    440  f179		       2c 80 02 	      BIT	SWCHA
    441  f17c		       d0 0e		      BNE	BreakNonZero
    442  f17e		       a5 0c		      LDA	INPT4	;3
    443  f180		       10 08		      BPL	BreakWhileAccelerating
    444  f182		       a4 ad		      LDY	Gear
    445  f184		       be dd ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    446  f187		       4c 8c f1 	      JMP	BreakNonZero
    447  f18a				   BreakWhileAccelerating		; Allow better control while breaking.
    448  f18a		       a2 05		      LDX	(#BREAK_SPEED / 2)
    449  f18c
    450  f18c				   BreakNonZero
    451  f18c		       e0 00		      CPX	#0
    452  f18e		       f0 2b		      BEQ	SkipBreak
    453  f190		       86 b0		      STX	Tmp0
    454  f192
    455  f192				   DecreaseSpeed
    456  f192		       38		      SEC
    457  f193		       a5 8e		      LDA	Player0SpeedL
    458  f195		       e5 b0		      SBC	Tmp0
    459  f197		       85 8e		      STA	Player0SpeedL
    460  f199		       a5 8f		      LDA	Player0SpeedH
    461  f19b		       e9 00		      SBC	#0
    462  f19d		       85 8f		      STA	Player0SpeedH
    463  f19f
    464  f19f				   CheckMinSpeed
    465  f19f		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    466  f1a1		       c9 00		      CMP	#CAR_MIN_SPEED_H
    467  f1a3		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    468  f1a5		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    469  f1a7
    470  f1a7				   CompareLBreakSpeed
    471  f1a7		       a5 8e		      LDA	Player0SpeedL
    472  f1a9		       c9 00		      CMP	#CAR_MIN_SPEED_L
    473  f1ab		       90 03		      BCC	ResetMinSpeed	; Less than memory
    474  f1ad		       4c b8 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    475  f1b0
    476  f1b0				   ResetMinSpeed
    477  f1b0		       a9 00		      LDA	#CAR_MIN_SPEED_H
    478  f1b2		       85 8f		      STA	Player0SpeedH
    479  f1b4		       a9 00		      LDA	#CAR_MIN_SPEED_L
    480  f1b6		       85 8e		      STA	Player0SpeedL
    481  f1b8
    482  f1b8				   SkipAccelerateIfBreaking
    483  f1b8		       4c fd f1 	      JMP	SkipAccelerate
    484  f1bb				   SkipBreak
    485  f1bb
    486  f1bb				   Acelerates
    487  f1bb		       a5 ba		      LDA	CountdownTimer
    488  f1bd		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    489  f1bf
    490  f1bf				   ContinueAccelerateTest
    491  f1bf		       a5 0c		      LDA	INPT4	;3
    492  f1c1		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    493  f1c3		       a9 10		      LDA	#%00010000	;UP in controller
    494  f1c5		       2c 80 02 	      BIT	SWCHA
    495  f1c8		       d0 33		      BNE	SkipAccelerate
    496  f1ca
    497  f1ca				   IncreaseCarSpeed
    498  f1ca		       a2 02		      LDX	#2
    499  f1cc		       a4 a9		      LDY	CurrentCarId
    500  f1ce				   IncreaseCarSpeedLoop
    501  f1ce							;Adds speed
    502  f1ce		       18		      CLC
    503  f1cf		       a5 aa		      LDA	AccelerateBuffer
    504  f1d1		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    505  f1d4		       85 aa		      STA	AccelerateBuffer
    506  f1d6		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    507  f1d8		       e6 8e		      INC	Player0SpeedL
    508  f1da		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    509  f1dc		       e6 8f		      INC	Player0SpeedH
    510  f1de				   ContinueIncreaseSpeedLoop
    511  f1de		       ca		      DEX
    512  f1df		       d0 ed		      BNE	IncreaseCarSpeedLoop
    513  f1e1				   SkipIncreaseCarSpeed
    514  f1e1
    515  f1e1				   CheckIfAlreadyMaxSpeed
    516  f1e1		       a5 8f		      LDA	Player0SpeedH
    517  f1e3		       c9 02		      CMP	#CAR_MAX_SPEED_H
    518  f1e5		       90 16		      BCC	SkipAccelerate	; less than my max speed
    519  f1e7		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    520  f1e9							;High bit is max, compare the low
    521  f1e9		       a4 a9		      LDY	CurrentCarId
    522  f1eb		       a5 8e		      LDA	Player0SpeedL
    523  f1ed		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    524  f1f0		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    525  f1f2							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    526  f1f2
    527  f1f2				   ResetToMaxSpeed		; Speed is more, or is already max
    528  f1f2		       a9 02		      LDA	#CAR_MAX_SPEED_H
    529  f1f4		       85 8f		      STA	Player0SpeedH
    530  f1f6		       a4 a9		      LDY	CurrentCarId
    531  f1f8		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    532  f1fb		       85 8e		      STA	Player0SpeedL
    533  f1fd				   SkipAccelerate
    534  f1fd
    535  f1fd				   InitUpdateOffsets
    536  f1fd		       a2 00		      LDX	#0	; Memory Offset 24 bit
    537  f1ff		       a0 00		      LDY	#0	; Line Speeds 16 bits
    538  f201		       a5 91		      LDA	TrafficOffset0 + 1	;
    539  f203		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    540  f205		       a5 c5		      LDA	GameMode
    541  f207		       29 04		      AND	#%00000100	; GameModes with high delta
    542  f209		       f0 02		      BEQ	UpdateOffsets
    543  f20b		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    544  f20d
    545  f20d				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    546  f20d		       38		      SEC
    547  f20e		       a5 8e		      LDA	Player0SpeedL
    548  f210		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    549  f213		       85 b0		      STA	Tmp0
    550  f215		       c8		      INY
    551  f216		       a5 8f		      LDA	Player0SpeedH
    552  f218		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    553  f21b		       85 b1		      STA	Tmp1
    554  f21d		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    555  f21f		       e9 00		      SBC	#0
    556  f221		       85 b2		      STA	Tmp2
    557  f223
    558  f223				   AddsTheResult
    559  f223		       18		      CLC
    560  f224		       a5 b0		      LDA	Tmp0
    561  f226		       75 90		      ADC	TrafficOffset0,X
    562  f228		       95 90		      STA	TrafficOffset0,X
    563  f22a		       e8		      INX
    564  f22b		       a5 b1		      LDA	Tmp1
    565  f22d		       75 90		      ADC	TrafficOffset0,X
    566  f22f		       95 90		      STA	TrafficOffset0,X
    567  f231		       e8		      INX
    568  f232		       a5 b2		      LDA	Tmp2	; Carry
    569  f234		       75 90		      ADC	TrafficOffset0,X
    570  f236		       95 90		      STA	TrafficOffset0,X
    571  f238		       90 06		      BCC	CalculateOffsetCache
    572  f23a		       e0 02		      CPX	#2	;MSB offset 0
    573  f23c		       d0 02		      BNE	CalculateOffsetCache
    574  f23e		       e6 bb		      INC	Traffic0Msb
    575  f240
    576  f240				   CalculateOffsetCache
    577  f240		       e8		      INX
    578  f241		       38		      SEC
    579  f242		       69 00		      ADC	#0	;Increment by one
    580  f244		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    581  f246
    582  f246				   ConfigureOpponentLine		; Temporary
    583  f246		       a9 1e		      LDA	#30	; Extract to constant
    584  f248		       85 d8		      STA	OpponentLine
    585  f24a
    586  f24a				   PrepareNextUpdateLoop
    587  f24a		       c8		      INY
    588  f24b		       e8		      INX
    589  f24c		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    590  f24e		       d0 bd		      BNE	UpdateOffsets
    591  f250
    592  f250				   BcdScore		; 48
    593  f250		       a5 91		      LDA	TrafficOffset0 + 1	;3
    594  f252		       45 b3		      EOR	Tmp3	;3
    595  f254		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    596  f256		       f0 1b		      BEQ	FinishBcdScore	;2
    597  f258
    598  f258				   ContinueBcdScore
    599  f258		       f8		      SED		;2
    600  f259		       18		      CLC		;2
    601  f25a		       a5 b4		      LDA	ScoreBcd0	;3
    602  f25c		       69 01		      ADC	#1	;2
    603  f25e		       85 b4		      STA	ScoreBcd0	;3
    604  f260		       a5 b5		      LDA	ScoreBcd1	;3
    605  f262		       69 00		      ADC	#0	;2
    606  f264		       85 b5		      STA	ScoreBcd1	;3
    607  f266		       a5 b6		      LDA	ScoreBcd2	;3
    608  f268		       69 00		      ADC	#0	;2
    609  f26a		       85 b6		      STA	ScoreBcd2	;3
    610  f26c		       a5 b7		      LDA	ScoreBcd3	;3
    611  f26e		       69 00		      ADC	#0	;2
    612  f270		       85 b7		      STA	ScoreBcd3	;3
    613  f272		       d8		      CLD		;2
    614  f273				   FinishBcdScore
    615  f273
    616  f273							;Until store the movemnt, LDX contains the value to be stored.
    617  f273				   TestCollision		;
    618  f273							; see if player0 colides with the rest
    619  f273		       a5 00		      LDA	CXM0P
    620  f275		       05 01		      ORA	CXM1P
    621  f277		       05 01		      ORA	CXM1P
    622  f279		       05 02		      ORA	CXP0FB
    623  f27b		       05 07		      ORA	CXPPMM
    624  f27d		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    625  f27f		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    626  f281		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    627  f283		       d0 3a		      BNE	NoCollision
    628  f285		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    629  f287		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    630  f289		       f0 34		      BEQ	NoCollision
    631  f28b		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    632  f28d		       f0 30		      BEQ	NoCollision
    633  f28f		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    634  f291		       85 b8		      STA	CollisionCounter	;and store as colision.
    635  f293				   CountBcdColision
    636  f293		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    637  f295		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    638  f297		       f0 1d		      BEQ	SkipSetColisionSpeedL
    639  f299		       f8		      SED		;2
    640  f29a		       18		      CLC		;2
    641  f29b		       a5 cb		      LDA	HitCountBcd0	;3
    642  f29d		       69 01		      ADC	#1	;3
    643  f29f		       85 cb		      STA	HitCountBcd0	;3
    644  f2a1		       a5 cc		      LDA	HitCountBcd1	;3
    645  f2a3		       69 00		      ADC	#0	;2
    646  f2a5		       85 cc		      STA	HitCountBcd1	;3
    647  f2a7		       d8		      CLD		;2
    648  f2a8				   EndCountBcdColision
    649  f2a8		       a5 8f		      LDA	Player0SpeedH
    650  f2aa		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    651  f2ac		       a9 10		      LDA	#COLLISION_SPEED_L
    652  f2ae		       c5 8e		      CMP	Player0SpeedL
    653  f2b0		       b0 04		      BCS	SkipSetColisionSpeedL
    654  f2b2				   SetColisionSpeedL
    655  f2b2		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    656  f2b4		       85 8e		      STA	Player0SpeedL
    657  f2b6				   SkipSetColisionSpeedL
    658  f2b6		       a9 00		      LDA	#0
    659  f2b8		       85 8f		      STA	Player0SpeedH
    660  f2ba		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    661  f2bc		       4c 0a f3 	      JMP	StoreHMove	; We keep position consistent
    662  f2bf				   NoCollision
    663  f2bf
    664  f2bf				   DecrementCollision
    665  f2bf		       a4 b8		      LDY	CollisionCounter
    666  f2c1		       f0 07		      BEQ	FinishDecrementCollision
    667  f2c3		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    668  f2c5		       85 04		      STA	NUSIZ0
    669  f2c7		       88		      DEY
    670  f2c8		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    671  f2ca				   FinishDecrementCollision
    672  f2ca
    673  f2ca				   ResetPlayerSize
    674  f2ca		       d0 04		      BNE	FinishResetPlayerSize
    675  f2cc		       a9 30		      LDA	#%00110000
    676  f2ce		       85 04		      STA	NUSIZ0	;
    677  f2d0				   FinishResetPlayerSize
    678  f2d0
    679  f2d0				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    680  f2d0		       c0 01		      CPY	#1	; Last frame before reset
    681  f2d2		       d0 05		      BNE	SkipResetPlayerPosition
    682  f2d4		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    683  f2d6		       4c 0a f3 	      JMP	StoreHMove
    684  f2d9				   SkipResetPlayerPosition
    685  f2d9
    686  f2d9				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    687  f2d9		       a5 a9		      LDA	CurrentCarId
    688  f2db		       c9 03		      CMP	#CAR_ID_DRAGSTER
    689  f2dd		       d0 08		      BNE	PrepareReadXAxis
    690  f2df		       a2 00		      LDX	#0
    691  f2e1		       a5 8c		      LDA	FrameCount0
    692  f2e3		       29 01		      AND	#DRAGSTER_TURN_MASK
    693  f2e5		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    694  f2e7
    695  f2e7							; for left and right, we're gonna 
    696  f2e7							; set the horizontal speed, and then do
    697  f2e7							; a single HMOVE.  We'll use X to hold the
    698  f2e7							; horizontal speed, then store it in the 
    699  f2e7							; appropriate register
    700  f2e7				   PrepareReadXAxis
    701  f2e7		       a2 00		      LDX	#0
    702  f2e9		       a4 b9		      LDY	Player0X
    703  f2eb				   BeginReadLeft
    704  f2eb		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    705  f2ed		       a9 40		      LDA	#%01000000	;Left
    706  f2ef		       2c 80 02 	      BIT	SWCHA
    707  f2f2		       d0 07		      BNE	SkipMoveLeft
    708  f2f4		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    709  f2f6		       c6 b9		      DEC	Player0X
    710  f2f8		       4c 0a f3 	      JMP	StoreHMove	; Cannot move left and right...
    711  f2fb				   SkipMoveLeft
    712  f2fb				   BeginReadRight
    713  f2fb		       c0 36		      CPY	#PLAYER_0_MAX_X
    714  f2fd		       f0 0b		      BEQ	SkipMoveRight	; At max already
    715  f2ff		       a9 80		      LDA	#%10000000	;Right
    716  f301		       2c 80 02 	      BIT	SWCHA
    717  f304		       d0 04		      BNE	SkipMoveRight
    718  f306		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    719  f308		       e6 b9		      INC	Player0X
    720  f30a				   SkipMoveRight
    721  f30a				   StoreHMove
    722  f30a		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    723  f30c		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    724  f30e
    725  f30e				   SkipUpdateLogic		; Continue here if not paused
    726  f30e
    727  f30e				   CalculateGear
    728  f30e		       a5 8e		      LDA	Player0SpeedL	;3
    729  f310		       29 80		      AND	#%10000000	;2
    730  f312		       05 8f		      ORA	Player0SpeedH	;3
    731  f314		       18		      CLC		;2
    732  f315		       2a		      ROL		;2
    733  f316		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    734  f318		       85 ad		      STA	Gear
    735  f31a
    736  f31a				   EndProcessingBorder
    737  f31a
    738  f31a				   ProcessScoreFontColor
    739  f31a		       a6 d6		      LDX	ScoreFontColorHoldChange
    740  f31c		       f0 06		      BEQ	ResetScoreFontColor
    741  f31e		       ca		      DEX
    742  f31f		       86 d6		      STX	ScoreFontColorHoldChange
    743  f321		       4c 28 f3 	      JMP	SkipScoreFontColor
    744  f324				   ResetScoreFontColor
    745  f324		       a9 f9		      LDA	#SCORE_FONT_COLOR
    746  f326		       85 d5		      STA	ScoreFontColor
    747  f328				   SkipScoreFontColor
    748  f328
    749  f328				   IsGameOver
    750  f328		       a5 ba		      LDA	CountdownTimer
    751  f32a		       05 8e		      ORA	Player0SpeedL
    752  f32c		       05 8f		      ORA	Player0SpeedH
    753  f32e		       d0 0b		      BNE	IsCheckpoint
    754  f330		       a9 01		      LDA	#1
    755  f332		       85 d6		      STA	ScoreFontColorHoldChange
    756  f334		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    757  f336		       85 d5		      STA	ScoreFontColor
    758  f338		       4c 7c f3 	      JMP	SkipIsTimeOver
    759  f33b
    760  f33b				   IsCheckpoint
    761  f33b		       a5 d7		      LDA	NextCheckpoint
    762  f33d		       c5 92		      CMP	TrafficOffset0 + 2
    763  f33f		       d0 2f		      BNE	SkipIsCheckpoint
    764  f341		       18		      CLC
    765  f342		       69 10		      ADC	#CHECKPOINT_INTERVAL
    766  f344		       85 d7		      STA	NextCheckpoint
    767  f346		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    768  f348		       85 d5		      STA	ScoreFontColor
    769  f34a		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    770  f34c		       85 d6		      STA	ScoreFontColorHoldChange
    771  f34e				   AddCheckpointBcd
    772  f34e		       f8		      SED		;2
    773  f34f		       18		      CLC		;2
    774  f350		       a5 a4		      LDA	CheckpointBcd0	;3
    775  f352		       69 01		      ADC	#1	;3
    776  f354		       85 a4		      STA	CheckpointBcd0	;3
    777  f356		       a5 a5		      LDA	CheckpointBcd1	;3
    778  f358		       69 00		      ADC	#0	;2
    779  f35a		       85 a5		      STA	CheckpointBcd1	;3
    780  f35c		       d8		      CLD		;2
    781  f35d				   EndCheckpointBcd
    782  f35d		       a5 ba		      LDA	CountdownTimer
    783  f35f		       18		      CLC
    784  f360		       65 c2		      ADC	CheckpointTime
    785  f362		       85 ba		      STA	CountdownTimer
    786  f364		       90 04		      BCC	JumpSkipTimeOver
    787  f366		       a9 ff		      LDA	#$FF
    788  f368		       85 ba		      STA	CountdownTimer	; Does not overflow!
    789  f36a				   JumpSkipTimeOver
    790  f36a		       20 3d f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    791  f36d		       4c 7c f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    792  f370				   SkipIsCheckpoint
    793  f370
    794  f370				   IsTimeOver
    795  f370		       a5 ba		      LDA	CountdownTimer
    796  f372		       d0 08		      BNE	SkipIsTimeOver
    797  f374		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    798  f376		       85 d6		      STA	ScoreFontColorHoldChange
    799  f378		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    800  f37a		       85 d5		      STA	ScoreFontColor
    801  f37c				   SkipIsTimeOver
    802  f37c
    803  f37c				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
    804  f37c		       a5 c0		      LDA	GameStatus	;3
    805  f37e		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
    806  f380		       a5 d5		      LDA	ScoreFontColor	;3
    807  f382		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
    808  f384		       f0 30		      BEQ	EndExactlyEverySecond	;2
    809  f386		       c6 cf		      DEC	OneSecondConter	;5
    810  f388		       d0 2c		      BNE	EndExactlyEverySecond	;2
    811  f38a
    812  f38a		       f8		      SED		;2 BCD Operations after this point
    813  f38b				   CountGlideTimeBcd
    814  f38b		       a5 d5		      LDA	ScoreFontColor	;3
    815  f38d		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
    816  f38f		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
    817  f391		       18		      CLC		;2
    818  f392		       a5 cd		      LDA	GlideTimeBcd0	;3
    819  f394		       69 01		      ADC	#1	;3
    820  f396		       85 cd		      STA	GlideTimeBcd0	;3
    821  f398		       a5 ce		      LDA	GlideTimeBcd1	;3
    822  f39a		       69 00		      ADC	#0	;2
    823  f39c		       85 ce		      STA	GlideTimeBcd1	;3
    824  f39e				   EndCountGlideTimeBcd
    825  f39e				   IncreaseTotalTimerBcd
    826  f39e		       18		      CLC		;2
    827  f39f		       a5 bd		      LDA	TimeBcd0	;3
    828  f3a1		       69 01		      ADC	#1	;2
    829  f3a3		       85 bd		      STA	TimeBcd0	;3
    830  f3a5		       a5 be		      LDA	TimeBcd1	;3
    831  f3a7		       69 00		      ADC	#0	;2
    832  f3a9		       85 be		      STA	TimeBcd1	;3
    833  f3ab		       a5 bf		      LDA	TimeBcd2	;3
    834  f3ad		       69 00		      ADC	#0	;2
    835  f3af		       85 bf		      STA	TimeBcd2	;3
    836  f3b1
    837  f3b1				   ResetOneSecondCounter
    838  f3b1		       d8		      CLD		;2
    839  f3b2		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
    840  f3b4		       85 cf		      STA	OneSecondConter	;3
    841  f3b6
    842  f3b6				   EndExactlyEverySecond
    843  f3b6
    844  f3b6				   PrintEasterEggCondition
    845  f3b6		       a5 8d		      LDA	FrameCount1
    846  f3b8		       29 38		      AND	#%00111000
    847  f3ba		       05 c0		      ORA	GameStatus
    848  f3bc		       c9 38		      CMP	#%00111000
    849  f3be		       d0 06		      BNE	ChooseTextSide
    850  f3c0		       20 a8 f7 	      JSR	PrintEasterEgg
    851  f3c3		       4c b5 f4 	      JMP	RightScoreWriteEnd
    852  f3c6
    853  f3c6							;Could be done during on vblank to save this comparisson time (before draw score), 
    854  f3c6							;but I am saving vblank cycles for now, in case of 2 players.
    855  f3c6				   ChooseTextSide		; 
    856  f3c6		       a5 ab		      LDA	TextSide	;3
    857  f3c8		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    858  f3ca		       4c 4b f4 	      JMP	RightScoreWrite
    859  f3cd
    860  f3cd				   LeftScoreWrite
    861  f3cd		       a5 d5		      LDA	ScoreFontColor
    862  f3cf		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    863  f3d1		       f0 4e		      BEQ	PrintCheckpoint
    864  f3d3		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    865  f3d5		       f0 52		      BEQ	PrintStartGame
    866  f3d7		       a5 c0		      LDA	GameStatus
    867  f3d9		       f0 56		      BEQ	PrintHellwayLeft
    868  f3db				   WriteDistance		;Not optimized yet, ugly code.
    869  f3db				   Digit0Distance
    870  f3db		       a5 91		      LDA	TrafficOffset0 + 1	;3
    871  f3dd		       4a		      LSR		; 2
    872  f3de		       4a		      LSR		; 2
    873  f3df		       4a		      LSR		; 2
    874  f3e0		       4a		      LSR		; 2
    875  f3e1		       aa		      TAX		; 2
    876  f3e2		       bd be fd 	      LDA	FontLookup,X	;4
    877  f3e5		       85 d3		      STA	ScoreD3	;3
    878  f3e7
    879  f3e7				   Digit1Distance
    880  f3e7		       a5 92		      LDA	TrafficOffset0 + 2	;3
    881  f3e9		       29 0f		      AND	#%00001111	;2
    882  f3eb		       aa		      TAX		; 2
    883  f3ec		       bd be fd 	      LDA	FontLookup,X	;4 
    884  f3ef		       85 d2		      STA	ScoreD2	;3
    885  f3f1
    886  f3f1				   Digit2Distance
    887  f3f1		       a5 92		      LDA	TrafficOffset0 + 2	;3
    888  f3f3		       4a		      LSR		; 2
    889  f3f4		       4a		      LSR		; 2
    890  f3f5		       4a		      LSR		; 2
    891  f3f6		       4a		      LSR		; 2
    892  f3f7		       aa		      TAX		; 2
    893  f3f8		       bd be fd 	      LDA	FontLookup,X	;4
    894  f3fb		       85 d1		      STA	ScoreD1	;3
    895  f3fd
    896  f3fd				   Digit3Distance
    897  f3fd		       a5 bb		      LDA	Traffic0Msb	;3
    898  f3ff		       29 0f		      AND	#%00001111	;2
    899  f401		       aa		      TAX		; 2
    900  f402		       bd be fd 	      LDA	FontLookup,X	;4 
    901  f405		       85 d0		      STA	ScoreD0	;3
    902  f407
    903  f407				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    904  f407		       a5 bb		      LDA	Traffic0Msb
    905  f409		       29 f0		      AND	#%11110000	;2
    906  f40b		       d0 07		      BNE	DrawDistanceExtraDigit
    907  f40d		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    908  f40f		       85 d4		      STA	ScoreD4	;3
    909  f411		       4c 1e f4 	      JMP	EndDrawDistance
    910  f414				   DrawDistanceExtraDigit
    911  f414		       4a		      LSR		; 2
    912  f415		       4a		      LSR		; 2
    913  f416		       4a		      LSR		; 2
    914  f417		       4a		      LSR		; 2
    915  f418		       aa		      TAX		; 2
    916  f419		       bd be fd 	      LDA	FontLookup,X	;4
    917  f41c		       85 d4		      STA	ScoreD4	;3
    918  f41e
    919  f41e				   EndDrawDistance
    920  f41e		       4c b5 f4 	      JMP	RightScoreWriteEnd	;3
    921  f421
    922  f421				   PrintCheckpoint
    923  f421		       a2 00		      LDX	#<CheckpointText
    924  f423		       20 8a f7 	      JSR	PrintStaticText
    925  f426		       4c b5 f4 	      JMP	RightScoreWriteEnd	;3
    926  f429				   PrintStartGame
    927  f429		       a2 23		      LDX	#<GoText
    928  f42b		       20 8a f7 	      JSR	PrintStaticText
    929  f42e		       4c b5 f4 	      JMP	RightScoreWriteEnd	;3
    930  f431
    931  f431				   PrintHellwayLeft
    932  f431		       a5 8d		      LDA	FrameCount1
    933  f433		       29 01		      AND	#1
    934  f435		       d0 05		      BNE	PrintCreditsLeft
    935  f437		       a2 05		      LDX	#<HellwayLeftText
    936  f439		       4c 3e f4 	      JMP	PrintGameMode
    937  f43c				   PrintCreditsLeft
    938  f43c		       a2 0f		      LDX	#<OpbText
    939  f43e
    940  f43e				   PrintGameMode
    941  f43e		       20 8a f7 	      JSR	PrintStaticText
    942  f441		       a6 c5		      LDX	GameMode
    943  f443		       bd be fd 	      LDA	FontLookup,X	;4 
    944  f446		       85 d0		      STA	ScoreD0	;3
    945  f448		       4c b5 f4 	      JMP	RightScoreWriteEnd	;3
    946  f44b
    947  f44b				   RightScoreWrite
    948  f44b		       a5 c0		      LDA	GameStatus
    949  f44d		       f0 45		      BEQ	PrintHellwayRight
    950  f44f		       a5 d5		      LDA	ScoreFontColor
    951  f451		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    952  f453		       f0 52		      BEQ	PrintGameOver
    953  f455				   Digit0Timer
    954  f455		       a5 ba		      LDA	CountdownTimer	;3
    955  f457		       29 0f		      AND	#%00001111	;2
    956  f459		       aa		      TAX		; 2
    957  f45a		       bd be fd 	      LDA	FontLookup,X	;4 
    958  f45d		       85 d1		      STA	ScoreD1	;3
    959  f45f
    960  f45f				   Digit1Timer
    961  f45f		       a5 ba		      LDA	CountdownTimer	;3
    962  f461		       4a		      LSR		; 2
    963  f462		       4a		      LSR		; 2
    964  f463		       4a		      LSR		; 2
    965  f464		       4a		      LSR		; 2
    966  f465		       aa		      TAX		; 2
    967  f466		       bd be fd 	      LDA	FontLookup,X	;4
    968  f469		       85 d0		      STA	ScoreD0	;3
    969  f46b
    970  f46b		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    971  f46d		       85 d2		      STA	ScoreD2	;3
    972  f46f
    973  f46f				   Digit0Speed
    974  f46f		       a5 8e		      LDA	Player0SpeedL
    975  f471		       29 3c		      AND	#%00111100	;2 Discard the last bits
    976  f473		       4a		      LSR		; 2
    977  f474		       4a		      LSR		; 2
    978  f475		       aa		      TAX		; 2
    979  f476		       bd be fd 	      LDA	FontLookup,X	;4
    980  f479		       85 d4		      STA	ScoreD4	;3
    981  f47b
    982  f47b				   Digit1Speed
    983  f47b		       a5 8e		      LDA	Player0SpeedL
    984  f47d		       29 c0		      AND	#%11000000	;2 Discard the last bits
    985  f47f		       18		      CLC
    986  f480		       2a		      ROL		;First goes into carry
    987  f481		       2a		      ROL
    988  f482		       2a		      ROL
    989  f483		       85 b0		      STA	Tmp0
    990  f485		       a5 8f		      LDA	Player0SpeedH
    991  f487		       0a		      ASL
    992  f488		       0a		      ASL
    993  f489		       05 b0		      ORA	Tmp0
    994  f48b		       aa		      TAX		; 2
    995  f48c		       bd be fd 	      LDA	FontLookup,X	;4
    996  f48f		       85 d3		      STA	ScoreD3	;3
    997  f491		       4c b5 f4 	      JMP	RightScoreWriteEnd
    998  f494
    999  f494				   PrintHellwayRight
   1000  f494		       a5 8d		      LDA	FrameCount1
   1001  f496		       29 01		      AND	#1
   1002  f498		       d0 05		      BNE	PrintCreditsRight
   1003  f49a		       a2 0a		      LDX	#<HellwayRightText
   1004  f49c		       4c a1 f4 	      JMP	PrintRightIntro
   1005  f49f				   PrintCreditsRight
   1006  f49f		       a2 14		      LDX	#<YearText
   1007  f4a1				   PrintRightIntro
   1008  f4a1		       20 8a f7 	      JSR	PrintStaticText
   1009  f4a4		       4c b5 f4 	      JMP	RightScoreWriteEnd
   1010  f4a7				   PrintGameOver
   1011  f4a7		       a5 8c		      LDA	FrameCount0
   1012  f4a9		       30 05		      BMI	PrintOverText
   1013  f4ab		       a2 19		      LDX	#<GameText
   1014  f4ad		       4c b2 f4 	      JMP	StoreGameOverText
   1015  f4b0				   PrintOverText
   1016  f4b0		       a2 1e		      LDX	#<OverText
   1017  f4b2				   StoreGameOverText
   1018  f4b2		       20 8a f7 	      JSR	PrintStaticText
   1019  f4b5				   RightScoreWriteEnd
   1020  f4b5
   1021  f4b5
   1022  f4b5				   ScoreBackgroundColor
   1023  f4b5		       a2 00		      LDX	#0
   1024  f4b7		       ad 82 02 	      LDA	SWCHB
   1025  f4ba		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1026  f4bc		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1027  f4be		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1028  f4c0		       a2 03		      LDX	#BACKGROUND_COLOR
   1029  f4c2				   BlackAndWhiteScoreBg
   1030  f4c2		       85 b2		      STA	Tmp2	; Score Background
   1031  f4c4		       86 b3		      STX	Tmp3	; Traffic Background
   1032  f4c6
   1033  f4c6				   ConfigurePFForScore
   1034  f4c6							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1035  f4c6		       85 09		      STA	COLUBK
   1036  f4c8		       20 ff f6 	      JSR	ClearAll
   1037  f4cb		       a9 02		      LDA	#%00000010	; Score mode
   1038  f4cd		       85 0a		      STA	CTRLPF
   1039  f4cf		       a5 ab		      LDA	TextSide	;3
   1040  f4d1		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1041  f4d3				   LeftScoreOn
   1042  f4d3		       a5 d5		      LDA	ScoreFontColor
   1043  f4d5		       85 07		      STA	COLUP1
   1044  f4d7		       a5 b2		      LDA	Tmp2
   1045  f4d9		       85 06		      STA	COLUP0
   1046  f4db		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1047  f4dd		       85 b1		      STA	Tmp1
   1048  f4df		       4c ee f4 	      JMP	CallWaitForVblankEnd
   1049  f4e2				   RightScoreOn
   1050  f4e2		       a5 d5		      LDA	ScoreFontColor
   1051  f4e4		       85 06		      STA	COLUP0
   1052  f4e6		       a5 b2		      LDA	Tmp2
   1053  f4e8		       85 07		      STA	COLUP1
   1054  f4ea		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1055  f4ec		       85 b1		      STA	Tmp1
   1056  f4ee
   1057  f4ee							; After here we are going to update the screen, No more heavy code
   1058  f4ee				   CallWaitForVblankEnd
   1059  f4ee		       20 18 fa 	      JSR	WaitForVblankEnd
   1060  f4f1
   1061  f4f1				   DrawScoreHud
   1062  f4f1		       20 1a f8 	      JSR	PrintScore
   1063  f4f4
   1064  f4f4		       85 02		      STA	WSYNC
   1065  f4f6
   1066  f4f6		       a5 0c		      LDA	INPT4	;3
   1067  f4f8		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1068  f4fa		       a5 d5		      LDA	ScoreFontColor
   1069  f4fc		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1070  f4fe		       d0 0a		      BNE	WaitAnotherScoreLine
   1071  f500		       a5 ab		      LDA	TextSide	;3
   1072  f502		       d0 03		      BNE	LeftScoreOnGameOver
   1073  f504		       4c a5 f9 	      JMP	DrawGameOverScreenRight
   1074  f507				   LeftScoreOnGameOver
   1075  f507		       4c d7 f8 	      JMP	DrawGameOverScreenLeft
   1076  f50a
   1077  f50a				   WaitAnotherScoreLine
   1078  f50a		       85 02		      STA	WSYNC
   1079  f50c
   1080  f50c				   PrepareForTraffic
   1081  f50c		       20 11 f7 	      JSR	ClearPF	; 32
   1082  f50f
   1083  f50f		       85 02		      STA	WSYNC
   1084  f511		       85 02		      STA	WSYNC
   1085  f513
   1086  f513		       a9 31		      LDA	#%00110001	; 2 Score mode
   1087  f515		       85 0a		      STA	CTRLPF	;3
   1088  f517
   1089  f517		       a5 c3		      LDA	TrafficColor	;3
   1090  f519		       85 08		      STA	COLUPF	;3
   1091  f51b
   1092  f51b		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1093  f51d		       85 07		      STA	COLUP1	;3
   1094  f51f
   1095  f51f		       a5 d5		      LDA	ScoreFontColor	;3
   1096  f521		       85 06		      STA	COLUP0	;3
   1097  f523
   1098  f523		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1099  f525
   1100  f525		       20 11 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1101  f528
      0  f528					      SLEEP	14
      1  f528				   .CYCLES    SET	14
      2  f528
      3  f528				  -	      IF	.CYCLES < 2
      4  f528				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f528				  -	      ERR
      6  f528					      ENDIF
      7  f528
      8  f528				  -	      IF	.CYCLES & 1
      9  f528				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f528				  -	      nop	0
     11  f528				  -	      ELSE
     12  f528				  -	      bit	VSYNC
     13  f528				  -	      ENDIF
     14  f528				  -.CYCLES    SET	.CYCLES - 3
     15  f528					      ENDIF
     16  f528
     17  f528					      REPEAT	.CYCLES / 2
     18  f528		       ea		      nop
     17  f528					      REPEND
     18  f529		       ea		      nop
     17  f529					      REPEND
     18  f52a		       ea		      nop
     17  f52a					      REPEND
     18  f52b		       ea		      nop
     17  f52b					      REPEND
     18  f52c		       ea		      nop
     17  f52c					      REPEND
     18  f52d		       ea		      nop
     17  f52d					      REPEND
     18  f52e		       ea		      nop
     19  f52f					      REPEND
   1103  f52f
   1104  f52f		       a5 b3		      LDA	Tmp3	;3
   1105  f531		       85 09		      STA	COLUBK	;3
   1106  f533		       4c 38 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1107  f536							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1108  f536
   1109  f536							;main scanline loop...
   1110  f536				   ScanLoop
   1111  f536		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1112  f538
   1113  f538							;Start of next line!			
   1114  f538				   DrawCache		;63 Is the last line going to the top of the next frame?
   1115  f538		       a5 81		      LDA	PF0Cache	;3
   1116  f53a		       85 0d		      STA	PF0	;3
   1117  f53c
   1118  f53c		       a5 83		      LDA	PF2Cache	;3
   1119  f53e		       85 0f		      STA	PF2	;3
   1120  f540
   1121  f540		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1122  f542		       b0 04		      BCS	SkipDrawCar	;2
   1123  f544		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1124  f546		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1125  f548				   SkipDrawCar
   1126  f548
   1127  f548		       a5 84		      LDA	GRP1Cache	;3
   1128  f54a		       85 1c		      STA	GRP1	;3
   1129  f54c
   1130  f54c		       a5 85		      LDA	ENABLCache	;3
   1131  f54e		       85 1f		      STA	ENABL	;3
   1132  f550
   1133  f550		       a5 86		      LDA	ENAM0Cache	;3
   1134  f552		       85 1d		      STA	ENAM0	;3
   1135  f554
   1136  f554		       a5 87		      LDA	ENAM1Cache	;3
   1137  f556		       85 1e		      STA	ENAM1	;3
   1138  f558
   1139  f558		       a9 00		      LDA	#0	;2
   1140  f55a							;STA PF1Cache ;3
   1141  f55a		       85 84		      STA	GRP1Cache	;3
   1142  f55c		       85 85		      STA	ENABLCache	;3
   1143  f55e		       85 86		      STA	ENAM0Cache	;3
   1144  f560		       85 87		      STA	ENAM1Cache	; 3
   1145  f562
   1146  f562				   DrawOponent		;26
   1147  f562		       84 b0		      STY	Tmp0	;3
   1148  f564		       a4 d8		      LDY	OpponentLine	;3
   1149  f566		       c0 0e		      CPY	#CAR_START_LINE	;2
   1150  f568		       b0 04		      BCS	SkipDrawOpponent	;2
   1151  f56a				   DrawOpponent
   1152  f56a		       b1 a7		      LDA	(CarSpritePointerL),Y	;5
   1153  f56c		       85 84		      STA	GRP1Cache	;3
   1154  f56e				   SkipDrawOpponent
   1155  f56e		       c6 d8		      DEC	OpponentLine	;5
   1156  f570		       a4 b0		      LDY	Tmp0	;3
   1157  f572
   1158  f572							;BEQ DrawTraffic3
   1159  f572				   DrawTraffic1 		; 33
   1160  f572		       98		      TYA		; 2
   1161  f573		       18		      CLC		; 2 
   1162  f574		       65 95		      ADC	TrafficOffset1 + 1	;3
   1163  f576		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1164  f578		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1165  f57a		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1166  f57c		       4c 81 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1167  f57f				   EorOffsetWithCarry
   1168  f57f		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1169  f581				   AfterEorOffsetWithCarry		;17
   1170  f581		       aa		      TAX		;2
   1171  f582		       bd 00 fe 	      LDA	AesTable,X	; 4
   1172  f585		       c5 c1		      CMP	TrafficChance	;3
   1173  f587		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1174  f589		       a9 ff		      LDA	#$FF	;2
   1175  f58b		       85 85		      STA	ENABLCache	;3
   1176  f58d				   FinishDrawTraffic1
   1177  f58d
   1178  f58d				   DrawTraffic2 		; 33
   1179  f58d		       98		      TYA		; 2
   1180  f58e		       18		      CLC		; 2 
   1181  f58f		       65 99		      ADC	TrafficOffset2 + 1	;3
   1182  f591		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1183  f593		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1184  f595		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1185  f597		       4c 9c f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1186  f59a				   EorOffsetWithCarry2
   1187  f59a		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1188  f59c				   AfterEorOffsetWithCarry2		;17
   1189  f59c		       aa		      TAX		;2
   1190  f59d		       bd 00 fe 	      LDA	AesTable,X	; 4
   1191  f5a0		       c5 c1		      CMP	TrafficChance	;3
   1192  f5a2		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1193  f5a4		       a9 02		      LDA	#%00000010	;2
   1194  f5a6		       85 86		      STA	ENAM0Cache	;3
   1195  f5a8				   FinishDrawTraffic2
   1196  f5a8
   1197  f5a8							;STA WSYNC ;65 / 137
   1198  f5a8
   1199  f5a8							; LDA Tmp0 ; Flicker this line if drawing car
   1200  f5a8							; BEQ FinishDrawTraffic4
   1201  f5a8				   DrawTraffic3 		; 33
   1202  f5a8		       98		      TYA		; 2
   1203  f5a9		       18		      CLC		; 2 
   1204  f5aa		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1205  f5ac		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1206  f5ae		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1207  f5b0		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1208  f5b2		       4c b7 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1209  f5b5				   EorOffsetWithCarry3
   1210  f5b5		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1211  f5b7				   AfterEorOffsetWithCarry3		;17
   1212  f5b7		       aa		      TAX		;2
   1213  f5b8		       bd 00 fe 	      LDA	AesTable,X	; 4
   1214  f5bb		       c5 c1		      CMP	TrafficChance	;3
   1215  f5bd		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1216  f5bf		       a9 02		      LDA	#%00000010	;2
   1217  f5c1		       85 87		      STA	ENAM1Cache
   1218  f5c3				   FinishDrawTraffic3
   1219  f5c3
   1220  f5c3							; DrawTraffic4; 33
   1221  f5c3							;	TYA; 2
   1222  f5c3							;	CLC; 2 
   1223  f5c3							;	ADC TrafficOffset4 + 1;3
   1224  f5c3							;	AND #TRAFFIC_1_MASK ;2
   1225  f5c3							;	BCS EorOffsetWithCarry4; 4 max if branch max, 2 otherwise
   1226  f5c3							;	EOR TrafficOffset4 + 2 ; 3
   1227  f5c3							;	JMP AfterEorOffsetWithCarry4 ; 3
   1228  f5c3							; EorOffsetWithCarry4
   1229  f5c3							;	EOR TrafficOffset4 + 3 ; 3
   1230  f5c3							; AfterEorOffsetWithCarry4 ;17
   1231  f5c3							;	TAX ;2
   1232  f5c3							;	LDA AesTable,X ; 4
   1233  f5c3							;	CMP TrafficChance;3
   1234  f5c3							;	BCS FinishDrawTraffic4 ; 2
   1235  f5c3							;	LDA #%00000010 ;2
   1236  f5c3							;	STA ENAM1Cache	;3
   1237  f5c3							; FinishDrawTraffic4
   1238  f5c3
   1239  f5c3				   DrawTraffic0 		; 21 2pe
   1240  f5c3		       98		      TYA		; 2
   1241  f5c4		       18		      CLC		; 2 
   1242  f5c5		       65 91		      ADC	TrafficOffset0 + 1	;3
   1243  f5c7		       29 04		      AND	#%00000100	;2
   1244  f5c9		       f0 05		      BEQ	HasNoBorderP0	;3
   1245  f5cb				   HasBorderP0
   1246  f5cb		       a9 f0		      LDA	#$F0	; 2
   1247  f5cd		       4c d2 f5 	      JMP	StoreBorderP0	; 3
   1248  f5d0				   HasNoBorderP0
   1249  f5d0		       a9 00		      LDA	#0	; 2
   1250  f5d2				   StoreBorderP0
   1251  f5d2		       85 81		      STA	PF0Cache	; 3
   1252  f5d4		       85 83		      STA	PF2Cache	; 3
   1253  f5d6
   1254  f5d6
   1255  f5d6				   SkipDrawTraffic0
   1256  f5d6
   1257  f5d6				   WhileScanLoop
   1258  f5d6		       88		      DEY		;2
   1259  f5d7		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1260  f5d9		       4c 36 f5 	      JMP	ScanLoop	;3
   1261  f5dc				   FinishScanLoop		; 7 209 of 222
   1262  f5dc
   1263  f5dc		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1264  f5de		       20 20 f7 	      JSR	LoadAll
   1265  f5e1		       85 02		      STA	WSYNC	; do stuff!
   1266  f5e3		       85 02		      STA	WSYNC
   1267  f5e5		       85 02		      STA	WSYNC
   1268  f5e7							;42 cycles to use here
   1269  f5e7
   1270  f5e7				   PrepareOverscan
   1271  f5e7		       a9 02		      LDA	#2
   1272  f5e9		       85 02		      STA	WSYNC
   1273  f5eb		       85 01		      STA	VBLANK
   1274  f5ed
   1275  f5ed		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1276  f5ef		       8d 96 02 	      STA	TIM64T
   1277  f5f2
   1278  f5f2				   LeftSound		;41
   1279  f5f2		       a5 ba		      LDA	CountdownTimer	;3
   1280  f5f4		       f0 1b		      BEQ	EngineOff	;2
   1281  f5f6		       a6 ad		      LDX	Gear
   1282  f5f8		       a5 8e		      LDA	Player0SpeedL	;3
   1283  f5fa		       4a		      LSR		;2
   1284  f5fb		       4a		      LSR		;2
   1285  f5fc		       4a		      LSR		;2
   1286  f5fd		       29 0f		      AND	#%00001111	;2
   1287  f5ff		       85 b0		      STA	Tmp0	;3
   1288  f601		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1289  f604		       38		      SEC		;2
   1290  f605		       e5 b0		      SBC	Tmp0	;3
   1291  f607		       85 17		      STA	AUDF0	;3
   1292  f609		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1293  f60c		       85 15		      STA	AUDC0	;3
   1294  f60e		       4c 15 f6 	      JMP	EndLeftSound	;3
   1295  f611				   EngineOff
   1296  f611		       a9 00		      LDA	#0
   1297  f613		       85 15		      STA	AUDC0
   1298  f615
   1299  f615				   EndLeftSound
   1300  f615
   1301  f615
   1302  f615				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1303  f615		       a5 d5		      LDA	ScoreFontColor	;3
   1304  f617		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1305  f619		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1306  f61b		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1307  f61d		       f0 29		      BEQ	PlayCheckpoint	;2
   1308  f61f		       a5 b8		      LDA	CollisionCounter	;3
   1309  f621		       c9 e0		      CMP	#$E0	;2
   1310  f623		       b0 14		      BCS	PlayColision	;2
   1311  f625		       a5 d7		      LDA	NextCheckpoint	;3
   1312  f627		       38		      SEC		;2
   1313  f628		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1314  f62a		       c9 02		      CMP	#$02	;2
   1315  f62c		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1316  f62e		       a5 ba		      LDA	CountdownTimer	; 3
   1317  f630		       f0 53		      BEQ	MuteRightSound	;2
   1318  f632		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1319  f634		       90 37		      BCC	PlayWarnTimeEnding	;4
   1320  f636		       4c 85 f6 	      JMP	MuteRightSound	;3
   1321  f639				   PlayColision
   1322  f639		       a9 1f		      LDA	#31
   1323  f63b		       85 18		      STA	AUDF1
   1324  f63d		       a9 08		      LDA	#8
   1325  f63f		       85 16		      STA	AUDC1
   1326  f641		       a9 08		      LDA	#8
   1327  f643		       85 1a		      STA	AUDV1
   1328  f645		       4c 89 f6 	      JMP	EndRightSound
   1329  f648
   1330  f648				   PlayCheckpoint
   1331  f648		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1332  f64a		       4a		      LSR		;2
   1333  f64b		       4a		      LSR		;2
   1334  f64c		       4a		      LSR		;2
   1335  f64d		       85 18		      STA	AUDF1	;3
   1336  f64f		       a9 0c		      LDA	#12	;2
   1337  f651		       85 16		      STA	AUDC1	;3
   1338  f653		       a9 06		      LDA	#6	;2
   1339  f655		       85 1a		      STA	AUDV1	;3
   1340  f657		       4c 89 f6 	      JMP	EndRightSound	;3
   1341  f65a
   1342  f65a				   PlayBeforeCheckpoint
   1343  f65a		       a5 8c		      LDA	FrameCount0	;3
   1344  f65c		       29 1c		      AND	#%00011100	;2
   1345  f65e		       09 03		      ORA	#%00000011	;2
   1346  f660		       85 18		      STA	AUDF1	;3
   1347  f662		       a9 0c		      LDA	#12	;2
   1348  f664		       85 16		      STA	AUDC1	;3
   1349  f666		       a9 03		      LDA	#3	;2
   1350  f668		       85 1a		      STA	AUDV1	;3
   1351  f66a		       4c 89 f6 	      JMP	EndRightSound	;3
   1352  f66d
   1353  f66d				   PlayWarnTimeEnding
   1354  f66d		       a5 8c		      LDA	FrameCount0	;3
   1355  f66f		       29 04		      AND	#%00000100	;2
   1356  f671		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1357  f673		       18		      CLC		;2
   1358  f674		       a9 0a		      LDA	#10	;2
   1359  f676		       65 ba		      ADC	CountdownTimer	;2
   1360  f678		       85 18		      STA	AUDF1	;3
   1361  f67a		       a9 0c		      LDA	#12	;2
   1362  f67c		       85 16		      STA	AUDC1	;3
   1363  f67e		       a9 03		      LDA	#3	;2
   1364  f680		       85 1a		      STA	AUDV1	;3
   1365  f682		       4c 89 f6 	      JMP	EndRightSound	;3
   1366  f685
   1367  f685				   MuteRightSound
   1368  f685		       a9 00		      LDA	#0
   1369  f687		       85 1a		      STA	AUDV1
   1370  f689				   EndRightSound
   1371  f689
   1372  f689							;Read Fire Button before, will make it start the game for now.
   1373  f689				   StartGame
   1374  f689		       a5 0c		      LDA	INPT4	;3
   1375  f68b		       30 2b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1376  f68d		       a5 c0		      LDA	GameStatus	;3
   1377  f68f		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1378  f691		       d0 25		      BNE	SkipGameStart
   1379  f693		       a5 c5		      LDA	GameMode
   1380  f695		       c9 10		      CMP	#MAX_GAME_MODE
   1381  f697		       d0 0b		      BNE	SetGameRunning
   1382  f699		       a9 00		      LDA	#0
   1383  f69b		       85 c5		      STA	GameMode
   1384  f69d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1385  f69f		       85 bc		      STA	SwitchDebounceCounter
   1386  f6a1		       4c b8 f6 	      JMP	SkipGameStart
   1387  f6a4				   SetGameRunning
   1388  f6a4		       e6 c0		      INC	GameStatus
   1389  f6a6		       a9 00		      LDA	#0	;
   1390  f6a8		       85 8c		      STA	FrameCount0
   1391  f6aa		       85 8d		      STA	FrameCount1
   1392  f6ac		       a9 0a		      LDA	#10
   1393  f6ae		       85 19		      STA	AUDV0
   1394  f6b0		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1395  f6b2		       85 d5		      STA	ScoreFontColor
   1396  f6b4		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1397  f6b6		       85 d6		      STA	ScoreFontColorHoldChange
   1398  f6b8				   SkipGameStart
   1399  f6b8
   1400  f6b8				   ReadSwitches
   1401  f6b8		       a6 bc		      LDX	SwitchDebounceCounter
   1402  f6ba		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1403  f6bc		       a9 01		      LDA	#%00000001
   1404  f6be		       2c 82 02 	      BIT	SWCHB
   1405  f6c1		       d0 07		      BNE	SkipReset
   1406  f6c3		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1407  f6c5		       85 bc		      STA	SwitchDebounceCounter
   1408  f6c7		       4c f7 f6 	      JMP	OverScanWaitBeforeReset
   1409  f6ca				   SkipReset
   1410  f6ca
   1411  f6ca				   GameModeSelect
   1412  f6ca		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1413  f6cc		       d0 1c		      BNE	SkipGameSelect
   1414  f6ce		       20 4c f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1415  f6d1				   ContinueGameSelect
   1416  f6d1		       a9 02		      LDA	#%00000010
   1417  f6d3		       2c 82 02 	      BIT	SWCHB
   1418  f6d6		       d0 12		      BNE	SkipGameSelect
   1419  f6d8		       a6 c5		      LDX	GameMode
   1420  f6da		       e0 10		      CPX	#MAX_GAME_MODE
   1421  f6dc		       f0 04		      BEQ	ResetGameMode
   1422  f6de		       e8		      INX
   1423  f6df		       4c e4 f6 	      JMP	StoreGameMode
   1424  f6e2				   ResetGameMode
   1425  f6e2		       a2 00		      LDX	#0
   1426  f6e4				   StoreGameMode
   1427  f6e4		       86 c5		      STX	GameMode
   1428  f6e6		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1429  f6e8		       85 bc		      STA	SwitchDebounceCounter
   1430  f6ea				   SkipGameSelect
   1431  f6ea		       4c ef f6 	      JMP	EndReadSwitches
   1432  f6ed				   DecrementSwitchDebounceCounter
   1433  f6ed		       c6 bc		      DEC	SwitchDebounceCounter
   1434  f6ef				   EndReadSwitches
   1435  f6ef
   1436  f6ef				   OverScanWait
   1437  f6ef		       ad 84 02 	      LDA	INTIM
   1438  f6f2		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1439  f6f4		       4c d0 f0 	      JMP	MainLoop
   1440  f6f7
   1441  f6f7				   OverScanWaitBeforeReset
   1442  f6f7		       ad 84 02 	      LDA	INTIM
   1443  f6fa		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1444  f6fc		       4c 10 f0 	      JMP	Start
   1445  f6ff
   1446  f6ff				   Subroutines
   1447  f6ff
   1448  f6ff				   ClearAll		; 52
   1449  f6ff		       a9 00		      LDA	#0	;2
   1450  f701		       85 1c		      STA	GRP1	;3
   1451  f703		       85 1f		      STA	ENABL	;3
   1452  f705		       85 1d		      STA	ENAM0	;3
   1453  f707		       85 1e		      STA	ENAM1	;3
   1454  f709		       85 84		      STA	GRP1Cache	;3
   1455  f70b		       85 85		      STA	ENABLCache	;3
   1456  f70d		       85 86		      STA	ENAM0Cache	;3
   1457  f70f		       85 87		      STA	ENAM1Cache	;3
   1458  f711
   1459  f711				   ClearPF		; 26
   1460  f711		       a9 00		      LDA	#0	;2
   1461  f713				   ClearPFSkipLDA0
   1462  f713		       85 0d		      STA	PF0	;3
   1463  f715		       85 0e		      STA	PF1	;3
   1464  f717		       85 0f		      STA	PF2	;3	
   1465  f719		       85 81		      STA	PF0Cache	;3
   1466  f71b		       85 82		      STA	PF1Cache	;3
   1467  f71d		       85 83		      STA	PF2Cache	;3 
   1468  f71f		       60		      RTS		;6
   1469  f720				   EndClearAll
   1470  f720
   1471  f720				   LoadAll		; 48
   1472  f720		       a5 81		      LDA	PF0Cache	;3
   1473  f722		       85 0d		      STA	PF0	;3
   1474  f724
   1475  f724		       a5 82		      LDA	PF1Cache	;3
   1476  f726		       85 0e		      STA	PF1	;3
   1477  f728
   1478  f728		       a5 83		      LDA	PF2Cache	;3
   1479  f72a		       85 0f		      STA	PF2	;3
   1480  f72c
   1481  f72c		       a5 84		      LDA	GRP1Cache	;3
   1482  f72e		       85 1c		      STA	GRP1	;3
   1483  f730
   1484  f730		       a5 85		      LDA	ENABLCache	;3
   1485  f732		       85 1f		      STA	ENABL	;3
   1486  f734
   1487  f734		       a5 86		      LDA	ENAM0Cache	;3
   1488  f736		       85 1d		      STA	ENAM0	;3
   1489  f738
   1490  f738		       a5 87		      LDA	ENAM1Cache	;3
   1491  f73a		       85 1e		      STA	ENAM1	;3
   1492  f73c
   1493  f73c		       60		      RTS		;6
   1494  f73d				   EndLoadAll
   1495  f73d
   1496  f73d				   NextDifficulty
   1497  f73d		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1498  f73f		       29 01		      AND	#%00000001
   1499  f741		       d0 24		      BNE	CheckRandomDifficulty
   1500  f743
   1501  f743		       a5 c4		      LDA	CurrentDifficulty
   1502  f745		       18		      CLC
   1503  f746		       69 01		      ADC	#1
   1504  f748		       29 03		      AND	#%00000011	; 0 to 3
   1505  f74a		       85 c4		      STA	CurrentDifficulty
   1506  f74c
   1507  f74c				   ConfigureDifficulty
   1508  f74c		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1509  f74e		       b9 e7 ff 	      LDA	TrafficChanceTable,Y
   1510  f751		       85 c1		      STA	TrafficChance
   1511  f753		       b9 e3 ff 	      LDA	TrafficColorTable,Y
   1512  f756		       85 c3		      STA	TrafficColor
   1513  f758
   1514  f758		       a5 c5		      LDA	GameMode	;
   1515  f75a		       29 01		      AND	#%00000001
   1516  f75c		       f0 03		      BEQ	UseNextDifficultyTime
   1517  f75e		       4c 62 f7 	      JMP	StoreDifficultyTime
   1518  f761				   UseNextDifficultyTime
   1519  f761		       c8		      INY
   1520  f762				   StoreDifficultyTime
   1521  f762		       b9 eb ff 	      LDA	TrafficTimeTable,Y
   1522  f765		       85 c2		      STA	CheckpointTime
   1523  f767
   1524  f767				   CheckRandomDifficulty
   1525  f767		       a5 c5		      LDA	GameMode
   1526  f769		       29 08		      AND	#%00001000	; Random difficulties
   1527  f76b		       f0 09		      BEQ	ReturnFromNextDifficulty
   1528  f76d				   RandomDifficulty
   1529  f76d		       a6 8c		      LDX	FrameCount0
   1530  f76f		       bd 00 fe 	      LDA	AesTable,X
   1531  f772							;EOR TrafficChance, no need, lets make life simple
   1532  f772		       29 3f		      AND	#%00111111
   1533  f774		       85 c1		      STA	TrafficChance
   1534  f776
   1535  f776				   ReturnFromNextDifficulty
   1536  f776		       60		      RTS
   1537  f777				   EndNextDifficulty
   1538  f777
   1539  f777				   DefaultOffsets
   1540  f777		       a9 20		      LDA	#$20
   1541  f779		       85 96		      STA	TrafficOffset1 + 2
   1542  f77b		       a9 40		      LDA	#$40
   1543  f77d		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1544  f77f		       a9 60		      LDA	#$60
   1545  f781		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1546  f783		       a9 80		      LDA	#$80
   1547  f785		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1548  f787		       a9 a0		      LDA	#$A0
   1549  f789		       60		      RTS
   1550  f78a
   1551  f78a				   PrintStaticText		; Preload X with the offset referent to StaticText
   1552  f78a		       bd 00 ff 	      LDA	StaticText,X
   1553  f78d		       85 d0		      STA	ScoreD0
   1554  f78f		       e8		      INX
   1555  f790		       bd 00 ff 	      LDA	StaticText,X
   1556  f793		       85 d1		      STA	ScoreD1
   1557  f795		       e8		      INX
   1558  f796		       bd 00 ff 	      LDA	StaticText,X
   1559  f799		       85 d2		      STA	ScoreD2
   1560  f79b		       e8		      INX
   1561  f79c		       bd 00 ff 	      LDA	StaticText,X
   1562  f79f		       85 d3		      STA	ScoreD3
   1563  f7a1		       e8		      INX
   1564  f7a2		       bd 00 ff 	      LDA	StaticText,X
   1565  f7a5		       85 d4		      STA	ScoreD4
   1566  f7a7		       60		      RTS
   1567  f7a8
   1568  f7a8				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1569  f7a8		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1570  f7aa		       85 d5		      STA	ScoreFontColor
   1571  f7ac		       a9 01		      LDA	#1
   1572  f7ae		       85 d6		      STA	ScoreFontColorHoldChange
   1573  f7b0
   1574  f7b0		       a5 8d		      LDA	FrameCount1
   1575  f7b2		       29 07		      AND	#%00000111
   1576  f7b4		       85 b3		      STA	Tmp3
   1577  f7b6							;0 is Zelda Name, (default)
   1578  f7b6		       a9 01		      LDA	#1
   1579  f7b8		       c5 b3		      CMP	Tmp3
   1580  f7ba		       f0 38		      BEQ	PrintZeldaDateLeft
   1581  f7bc
   1582  f7bc		       a9 02		      LDA	#2
   1583  f7be		       c5 b3		      CMP	Tmp3
   1584  f7c0		       f0 23		      BEQ	PrintPolvinhosLeft
   1585  f7c2
   1586  f7c2		       a9 03		      LDA	#3
   1587  f7c4		       c5 b3		      CMP	Tmp3
   1588  f7c6		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1589  f7c8
   1590  f7c8		       a9 04		      LDA	#4
   1591  f7ca		       c5 b3		      CMP	Tmp3
   1592  f7cc		       f0 1c		      BEQ	PrintIvonneLeft
   1593  f7ce
   1594  f7ce		       a9 05		      LDA	#5
   1595  f7d0		       c5 b3		      CMP	Tmp3
   1596  f7d2		       f0 2a		      BEQ	PrintIvonneDateLeft
   1597  f7d4
   1598  f7d4		       a9 06		      LDA	#6
   1599  f7d6		       c5 b3		      CMP	Tmp3
   1600  f7d8		       f0 15		      BEQ	PrintArtLeft
   1601  f7da
   1602  f7da		       a9 07		      LDA	#7
   1603  f7dc		       c5 b3		      CMP	Tmp3
   1604  f7de		       f0 23		      BEQ	PrintLeonardoLeft
   1605  f7e0
   1606  f7e0				   PrintZeldaLeft
   1607  f7e0		       a2 28		      LDX	#<ZeldaTextLeft
   1608  f7e2		       4c 08 f8 	      JMP	ProcessPrintEasterEgg
   1609  f7e5				   PrintPolvinhosLeft
   1610  f7e5		       a2 3c		      LDX	#<PolvinhosTextLeft
   1611  f7e7		       4c 08 f8 	      JMP	ProcessPrintEasterEgg
   1612  f7ea				   PrintIvonneLeft
   1613  f7ea		       a2 50		      LDX	#<IvonneTextLeft
   1614  f7ec		       4c 08 f8 	      JMP	ProcessPrintEasterEgg
   1615  f7ef				   PrintArtLeft
   1616  f7ef		       a2 64		      LDX	#<PaperArtTextLeft
   1617  f7f1		       4c 08 f8 	      JMP	ProcessPrintEasterEgg
   1618  f7f4
   1619  f7f4				   PrintZeldaDateLeft
   1620  f7f4		       a2 32		      LDX	#<ZeldaDateLeft
   1621  f7f6		       4c 08 f8 	      JMP	ProcessPrintEasterEgg
   1622  f7f9				   PrintPolvinhosDateLeft
   1623  f7f9		       a2 46		      LDX	#<PolvinhosDateLeft
   1624  f7fb		       4c 08 f8 	      JMP	ProcessPrintEasterEgg
   1625  f7fe				   PrintIvonneDateLeft
   1626  f7fe		       a2 5a		      LDX	#<IvonneDateLeft
   1627  f800		       4c 08 f8 	      JMP	ProcessPrintEasterEgg
   1628  f803				   PrintLeonardoLeft
   1629  f803		       a2 6e		      LDX	#<LeonardoTextLeft
   1630  f805		       4c 08 f8 	      JMP	ProcessPrintEasterEgg
   1631  f808
   1632  f808				   ProcessPrintEasterEgg
   1633  f808		       a5 8c		      LDA	FrameCount0	;3
   1634  f80a		       29 01		      AND	#%00000001	;2
   1635  f80c		       d0 03		      BNE	TranformIntoRightText
   1636  f80e		       4c 16 f8 	      JMP	PrintEasterEggText
   1637  f811				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1638  f811		       8a		      TXA
   1639  f812		       18		      CLC
   1640  f813		       69 05		      ADC	#HALF_TEXT_SIZE
   1641  f815		       aa		      TAX
   1642  f816
   1643  f816				   PrintEasterEggText
   1644  f816		       20 8a f7 	      JSR	PrintStaticText
   1645  f819		       60		      RTS
   1646  f81a
   1647  f81a				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1648  f81a		       a2 00		      LDX	#0
   1649  f81c		       a0 04		      LDY	#FONT_OFFSET
   1650  f81e
   1651  f81e				   ScoreLoop		; 20 
   1652  f81e		       85 02		      STA	WSYNC	;2
   1653  f820
   1654  f820		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1655  f822		       85 0d		      STA	PF0	;3
   1656  f824
   1657  f824		       a5 82		      LDA	PF1Cache	;3
   1658  f826		       85 0e		      STA	PF1	;3
   1659  f828
   1660  f828		       a5 83		      LDA	PF2Cache	;3
   1661  f82a		       85 0f		      STA	PF2	;3
   1662  f82c
   1663  f82c				   DrawScoreD0		; 15
   1664  f82c		       a6 d0		      LDX	ScoreD0	; 3
   1665  f82e		       bd 00 fd 	      LDA	Font,X	;4
   1666  f831		       85 81		      STA	PF0Cache	;3
   1667  f833		       c6 d0		      DEC	ScoreD0	;5
   1668  f835
   1669  f835				   DrawScoreD1		; 23	
   1670  f835		       a6 d1		      LDX	ScoreD1	; 3
   1671  f837		       bd 00 fd 	      LDA	Font,X	;4
   1672  f83a		       0a		      ASL		;2
   1673  f83b		       0a		      ASL		;2
   1674  f83c		       0a		      ASL		;2
   1675  f83d		       0a		      ASL		;2
   1676  f83e		       85 82		      STA	PF1Cache	;3
   1677  f840		       c6 d1		      DEC	ScoreD1	;5
   1678  f842
   1679  f842				   DrawScoreD2		; 20
   1680  f842		       a6 d2		      LDX	ScoreD2	; 3
   1681  f844		       bd 00 fd 	      LDA	Font,X	;4
   1682  f847		       29 0f		      AND	#%00001111	;2
   1683  f849		       05 82		      ORA	PF1Cache	;3
   1684  f84b		       85 82		      STA	PF1Cache	;3
   1685  f84d		       c6 d2		      DEC	ScoreD2	;5
   1686  f84f
   1687  f84f				   DrawScoreD3		; 23
   1688  f84f		       a6 d3		      LDX	ScoreD3	; 3
   1689  f851		       bd 00 fd 	      LDA	Font,X	;4
   1690  f854		       4a		      LSR		;2
   1691  f855		       4a		      LSR		;2
   1692  f856		       4a		      LSR		;2
   1693  f857		       4a		      LSR		;2
   1694  f858		       85 83		      STA	PF2Cache	;3
   1695  f85a		       c6 d3		      DEC	ScoreD3	;5
   1696  f85c
   1697  f85c				   DrawScoreD4		; 20
   1698  f85c		       a6 d4		      LDX	ScoreD4	; 3
   1699  f85e		       bd 00 fd 	      LDA	Font,X	;4
   1700  f861		       29 f0		      AND	#%11110000	;2
   1701  f863		       05 83		      ORA	PF2Cache	;3
   1702  f865		       85 83		      STA	PF2Cache	;3
   1703  f867		       c6 d4		      DEC	ScoreD4	;5
   1704  f869
   1705  f869
   1706  f869		       88		      DEY		;2
   1707  f86a		       10 b2		      BPL	ScoreLoop	;4
   1708  f86c
   1709  f86c		       85 02		      STA	WSYNC
   1710  f86e		       20 20 f7 	      JSR	LoadAll
   1711  f871		       60		      RTS		; 6
   1712  f872
   1713  f872				   PrintRightDecimalDigits
   1714  f872		       b9 00 00 	      LDA	0,Y
   1715  f875		       4a		      LSR
   1716  f876		       4a		      LSR
   1717  f877		       4a		      LSR
   1718  f878		       4a		      LSR
   1719  f879		       aa		      TAX
   1720  f87a		       bd be fd 	      LDA	FontLookup,X	;4
   1721  f87d		       85 d2		      STA	ScoreD2	;3
   1722  f87f
   1723  f87f		       b9 00 00 	      LDA	0,Y
   1724  f882		       29 0f		      AND	#%00001111
   1725  f884		       aa		      TAX
   1726  f885		       bd be fd 	      LDA	FontLookup,X	;4
   1727  f888		       85 d3		      STA	ScoreD3	;3
   1728  f88a
   1729  f88a		       c8		      INY
   1730  f88b		       b9 00 00 	      LDA	0,Y
   1731  f88e		       4a		      LSR
   1732  f88f		       4a		      LSR
   1733  f890		       4a		      LSR
   1734  f891		       4a		      LSR
   1735  f892		       aa		      TAX
   1736  f893		       bd be fd 	      LDA	FontLookup,X	;4
   1737  f896		       85 d0		      STA	ScoreD0	;3
   1738  f898
   1739  f898		       b9 00 00 	      LDA	0,Y
   1740  f89b		       29 0f		      AND	#%00001111
   1741  f89d		       aa		      TAX
   1742  f89e		       bd be fd 	      LDA	FontLookup,X	;4
   1743  f8a1		       85 d1		      STA	ScoreD1	;3
   1744  f8a3
   1745  f8a3		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1746  f8a5		       85 d4		      STA	ScoreD4
   1747  f8a7		       60		      RTS
   1748  f8a8
   1749  f8a8				   PrintLastLeftDecimalDigits
   1750  f8a8		       b9 00 00 	      LDA	0,Y
   1751  f8ab		       4a		      LSR
   1752  f8ac		       4a		      LSR
   1753  f8ad		       4a		      LSR
   1754  f8ae		       4a		      LSR
   1755  f8af		       aa		      TAX
   1756  f8b0		       bd be fd 	      LDA	FontLookup,X	;4
   1757  f8b3		       85 d3		      STA	ScoreD3	;3
   1758  f8b5		       b9 00 00 	      LDA	0,Y
   1759  f8b8		       29 0f		      AND	#%00001111
   1760  f8ba		       aa		      TAX
   1761  f8bb		       bd be fd 	      LDA	FontLookup,X	;4
   1762  f8be		       85 d4		      STA	ScoreD4	;3
   1763  f8c0		       60		      RTS
   1764  f8c1
   1765  f8c1				   PrintZerosLeft
   1766  f8c1		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1767  f8c3		       85 d2		      STA	ScoreD2
   1768  f8c5		       85 d3		      STA	ScoreD3
   1769  f8c7		       85 d4		      STA	ScoreD4
   1770  f8c9		       60		      RTS
   1771  f8ca
   1772  f8ca				   DrawGameOverScoreLine
   1773  f8ca		       85 02		      STA	WSYNC
   1774  f8cc		       20 1a f8 	      JSR	PrintScore
   1775  f8cf		       85 02		      STA	WSYNC
   1776  f8d1		       85 02		      STA	WSYNC
   1777  f8d3		       20 11 f7 	      JSR	ClearPF
   1778  f8d6		       60		      RTS
   1779  f8d7
   1780  f8d7				   DrawGameOverScreenLeft
   1781  f8d7		       85 02		      STA	WSYNC
   1782  f8d9		       20 11 f7 	      JSR	ClearPF
   1783  f8dc
   1784  f8dc				   DrawBcdScoreLeft
   1785  f8dc		       20 2b fa 	      JSR	Sleep8Lines
   1786  f8df		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1787  f8e1		       85 06		      STA	COLUP0
   1788  f8e3		       85 02		      STA	WSYNC
   1789  f8e5		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1790  f8e7		       85 d0		      STA	ScoreD0
   1791  f8e9
   1792  f8e9		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1793  f8eb		       85 d1		      STA	ScoreD1
   1794  f8ed
   1795  f8ed		       a5 b7		      LDA	ScoreBcd3
   1796  f8ef		       29 0f		      AND	#%00001111
   1797  f8f1		       aa		      TAX
   1798  f8f2		       bd be fd 	      LDA	FontLookup,X	;4
   1799  f8f5		       85 d2		      STA	ScoreD2	;3
   1800  f8f7
   1801  f8f7		       a0 b6		      LDY	#ScoreBcd2
   1802  f8f9		       20 a8 f8 	      JSR	PrintLastLeftDecimalDigits
   1803  f8fc
   1804  f8fc		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1805  f8ff
   1806  f8ff				   DrawTimerLeft
   1807  f8ff		       20 2b fa 	      JSR	Sleep8Lines
   1808  f902		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1809  f904		       85 06		      STA	COLUP0
   1810  f906		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1811  f908		       85 d0		      STA	ScoreD0
   1812  f90a		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1813  f90c		       85 d1		      STA	ScoreD1
   1814  f90e		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1815  f910		       85 d2		      STA	ScoreD2
   1816  f912		       a0 bf		      LDY	#TimeBcd2
   1817  f914		       85 02		      STA	WSYNC
   1818  f916		       20 a8 f8 	      JSR	PrintLastLeftDecimalDigits
   1819  f919		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1820  f91c
   1821  f91c				   DrawGlideTimerLeft
   1822  f91c		       20 2b fa 	      JSR	Sleep8Lines
   1823  f91f		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1824  f921		       85 06		      STA	COLUP0
   1825  f923		       85 02		      STA	WSYNC
   1826  f925		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1827  f927		       85 d0		      STA	ScoreD0
   1828  f929		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1829  f92b		       85 d1		      STA	ScoreD1
   1830  f92d		       20 c1 f8 	      JSR	PrintZerosLeft
   1831  f930		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1832  f933
   1833  f933				   DrawHitCountLeft
   1834  f933		       20 2b fa 	      JSR	Sleep8Lines
   1835  f936		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1836  f938		       85 06		      STA	COLUP0
   1837  f93a		       85 02		      STA	WSYNC
   1838  f93c		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1839  f93e		       85 d0		      STA	ScoreD0
   1840  f940		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1841  f942		       85 d1		      STA	ScoreD1
   1842  f944		       20 c1 f8 	      JSR	PrintZerosLeft
   1843  f947		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1844  f94a
   1845  f94a				   DrawCheckpointCountLeft
   1846  f94a		       20 2b fa 	      JSR	Sleep8Lines
   1847  f94d		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1848  f94f		       85 06		      STA	COLUP0
   1849  f951		       85 02		      STA	WSYNC
   1850  f953		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1851  f955		       85 d0		      STA	ScoreD0
   1852  f957		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1853  f959		       85 d1		      STA	ScoreD1
   1854  f95b		       20 c1 f8 	      JSR	PrintZerosLeft
   1855  f95e		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1856  f961
   1857  f961				   DrawGameVersionLeft
   1858  f961		       20 2b fa 	      JSR	Sleep8Lines
   1859  f964		       a9 49		      LDA	#VERSION_COLOR
   1860  f966		       85 06		      STA	COLUP0
   1861  f968
   1862  f968		       a5 c5		      LDA	GameMode
   1863  f96a		       aa		      TAX
   1864  f96b		       bd be fd 	      LDA	FontLookup,X	;4
   1865  f96e		       85 d0		      STA	ScoreD0	;3
   1866  f970
   1867  f970		       a5 a9		      LDA	CurrentCarId
   1868  f972		       aa		      TAX
   1869  f973		       bd be fd 	      LDA	FontLookup,X	;4
   1870  f976		       85 d1		      STA	ScoreD1	;3
   1871  f978
   1872  f978		       a5 a6		      LDA	StartSWCHB
   1873  f97a		       29 40		      AND	#%01000000	; P0 difficulty
   1874  f97c		       49 40		      EOR	#%01000000	; Reverse bytes
   1875  f97e		       2a		      ROL
   1876  f97f		       2a		      ROL
   1877  f980		       2a		      ROL
   1878  f981		       18		      CLC
   1879  f982		       69 0a		      ADC	#10
   1880  f984		       aa		      TAX
   1881  f985		       bd be fd 	      LDA	FontLookup,X	;4
   1882  f988		       85 d2		      STA	ScoreD2	;3
   1883  f98a
   1884  f98a		       a5 a6		      LDA	StartSWCHB
   1885  f98c		       29 80		      AND	#%10000000	; P0 difficulty
   1886  f98e		       49 80		      EOR	#%10000000	; Reverse bytes
   1887  f990		       2a		      ROL
   1888  f991		       2a		      ROL
   1889  f992		       18		      CLC
   1890  f993		       69 0a		      ADC	#10
   1891  f995		       aa		      TAX
   1892  f996		       bd be fd 	      LDA	FontLookup,X	;4
   1893  f999		       85 d3		      STA	ScoreD3	;3
   1894  f99b
   1895  f99b		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1896  f99d		       85 d4		      STA	ScoreD4
   1897  f99f
   1898  f99f		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1899  f9a2
   1900  f9a2		       4c 08 fa 	      JMP	FinalizeDrawGameOver
   1901  f9a5
   1902  f9a5				   DrawGameOverScreenRight
   1903  f9a5		       85 02		      STA	WSYNC
   1904  f9a7		       20 11 f7 	      JSR	ClearPF
   1905  f9aa
   1906  f9aa				   DrawBcdScoreRight
   1907  f9aa		       20 2b fa 	      JSR	Sleep8Lines
   1908  f9ad		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1909  f9af		       85 07		      STA	COLUP1
   1910  f9b1		       85 02		      STA	WSYNC
   1911  f9b3		       a0 b4		      LDY	#ScoreBcd0
   1912  f9b5		       20 72 f8 	      JSR	PrintRightDecimalDigits
   1913  f9b8
   1914  f9b8		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1915  f9bb
   1916  f9bb				   DrawTimerRight
   1917  f9bb		       20 2b fa 	      JSR	Sleep8Lines
   1918  f9be		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1919  f9c0		       85 07		      STA	COLUP1
   1920  f9c2		       a0 bd		      LDY	#TimeBcd0
   1921  f9c4		       20 72 f8 	      JSR	PrintRightDecimalDigits
   1922  f9c7
   1923  f9c7		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1924  f9ca				   DrawGlideTimeRight
   1925  f9ca		       20 2b fa 	      JSR	Sleep8Lines
   1926  f9cd		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1927  f9cf		       85 07		      STA	COLUP1
   1928  f9d1		       a0 cd		      LDY	#GlideTimeBcd0
   1929  f9d3		       20 72 f8 	      JSR	PrintRightDecimalDigits
   1930  f9d6		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1931  f9d9
   1932  f9d9				   DrawHitCountRight
   1933  f9d9		       20 2b fa 	      JSR	Sleep8Lines
   1934  f9dc		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1935  f9de		       85 07		      STA	COLUP1
   1936  f9e0		       a0 cb		      LDY	#HitCountBcd0
   1937  f9e2		       20 72 f8 	      JSR	PrintRightDecimalDigits
   1938  f9e5		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1939  f9e8
   1940  f9e8				   DrawCheckpointCountRight
   1941  f9e8		       20 2b fa 	      JSR	Sleep8Lines
   1942  f9eb		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1943  f9ed		       85 07		      STA	COLUP1
   1944  f9ef		       a0 a4		      LDY	#CheckpointBcd0
   1945  f9f1		       20 72 f8 	      JSR	PrintRightDecimalDigits
   1946  f9f4		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1947  f9f7
   1948  f9f7				   DrawVersionRight
   1949  f9f7		       20 2b fa 	      JSR	Sleep8Lines
   1950  f9fa		       a9 49		      LDA	#VERSION_COLOR
   1951  f9fc		       85 07		      STA	COLUP1
   1952  f9fe		       85 02		      STA	WSYNC
   1953  fa00		       a2 78		      LDX	#<VersionText
   1954  fa02		       20 8a f7 	      JSR	PrintStaticText
   1955  fa05		       20 ca f8 	      JSR	DrawGameOverScoreLine
   1956  fa08
   1957  fa08				   FinalizeDrawGameOver
   1958  fa08		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1959  fa0a		       85 d5		      STA	ScoreFontColor
   1960  fa0c		       20 22 fa 	      JSR	Sleep4Lines
   1961  fa0f		       20 32 fa 	      JSR	Sleep32Lines
   1962  fa12		       20 32 fa 	      JSR	Sleep32Lines
   1963  fa15		       4c e7 f5 	      JMP	PrepareOverscan
   1964  fa18
   1965  fa18				   WaitForVblankEnd
   1966  fa18		       ad 84 02 	      LDA	INTIM
   1967  fa1b		       d0 fb		      BNE	WaitForVblankEnd
   1968  fa1d		       85 02		      STA	WSYNC
   1969  fa1f		       85 01		      STA	VBLANK
   1970  fa21		       60		      RTS
   1971  fa22
   1972  fa22				   Sleep4Lines
   1973  fa22		       85 02		      STA	WSYNC
   1974  fa24		       85 02		      STA	WSYNC
   1975  fa26		       85 02		      STA	WSYNC
   1976  fa28		       85 02		      STA	WSYNC
   1977  fa2a		       60		      RTS
   1978  fa2b
   1979  fa2b				   Sleep8Lines
   1980  fa2b		       20 22 fa 	      JSR	Sleep4Lines
   1981  fa2e		       20 22 fa 	      JSR	Sleep4Lines
   1982  fa31		       60		      RTS
   1983  fa32
   1984  fa32				   Sleep32Lines
   1985  fa32		       20 2b fa 	      JSR	Sleep8Lines
   1986  fa35		       20 2b fa 	      JSR	Sleep8Lines
   1987  fa38		       20 2b fa 	      JSR	Sleep8Lines
   1988  fa3b		       20 2b fa 	      JSR	Sleep8Lines
   1989  fa3e		       60		      RTS
   1990  fa3f
   1991  fa3f							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   1992  fc00					      org	$FC00
   1993  fc00				   QrCode1
   1994  fc00		       1f		      .byte.b	#%00011111
   1995  fc01		       10		      .byte.b	#%00010000
   1996  fc02		       17		      .byte.b	#%00010111
   1997  fc03		       17		      .byte.b	#%00010111
   1998  fc04		       17		      .byte.b	#%00010111
   1999  fc05		       10		      .byte.b	#%00010000
   2000  fc06		       1f		      .byte.b	#%00011111
   2001  fc07		       00		      .byte.b	#%00000000
   2002  fc08		       17		      .byte.b	#%00010111
   2003  fc09		       10		      .byte.b	#%00010000
   2004  fc0a		       1d		      .byte.b	#%00011101
   2005  fc0b		       16		      .byte.b	#%00010110
   2006  fc0c		       03		      .byte.b	#%00000011
   2007  fc0d		       19		      .byte.b	#%00011001
   2008  fc0e		       13		      .byte.b	#%00010011
   2009  fc0f		       1c		      .byte.b	#%00011100
   2010  fc10		       0b		      .byte.b	#%00001011
   2011  fc11		       00		      .byte.b	#%00000000
   2012  fc12		       1f		      .byte.b	#%00011111
   2013  fc13		       10		      .byte.b	#%00010000
   2014  fc14		       17		      .byte.b	#%00010111
   2015  fc15		       17		      .byte.b	#%00010111
   2016  fc16		       17		      .byte.b	#%00010111
   2017  fc17		       10		      .byte.b	#%00010000
   2018  fc18		       1f		      .byte.b	#%00011111
   2019  fc19
   2020  fc19				   QrCode2
   2021  fc19		       c3		      .byte.b	#%11000011
   2022  fc1a		       9a		      .byte.b	#%10011010
   2023  fc1b		       82		      .byte.b	#%10000010
   2024  fc1c		       da		      .byte.b	#%11011010
   2025  fc1d		       aa		      .byte.b	#%10101010
   2026  fc1e		       ca		      .byte.b	#%11001010
   2027  fc1f		       f3		      .byte.b	#%11110011
   2028  fc20		       78		      .byte.b	#%01111000
   2029  fc21		       df		      .byte.b	#%11011111
   2030  fc22		       fc		      .byte.b	#%11111100
   2031  fc23		       c7		      .byte.b	#%11000111
   2032  fc24		       98		      .byte.b	#%10011000
   2033  fc25		       23		      .byte.b	#%00100011
   2034  fc26		       b9		      .byte.b	#%10111001
   2035  fc27		       d2		      .byte.b	#%11010010
   2036  fc28		       30		      .byte.b	#%00110000
   2037  fc29		       eb		      .byte.b	#%11101011
   2038  fc2a		       28		      .byte.b	#%00101000
   2039  fc2b		       ab		      .byte.b	#%10101011
   2040  fc2c		       72		      .byte.b	#%01110010
   2041  fc2d		       fa		      .byte.b	#%11111010
   2042  fc2e		       7a		      .byte.b	#%01111010
   2043  fc2f		       32		      .byte.b	#%00110010
   2044  fc30		       3a		      .byte.b	#%00111010
   2045  fc31		       63		      .byte.b	#%01100011
   2046  fc32
   2047  fc32				   QrCode3
   2048  fc32		       98		      .byte.b	#%10011000
   2049  fc33		       c3		      .byte.b	#%11000011
   2050  fc34		       39		      .byte.b	#%00111001
   2051  fc35		       34		      .byte.b	#%00110100
   2052  fc36		       ff		      .byte.b	#%11111111
   2053  fc37		       71		      .byte.b	#%01110001
   2054  fc38		       d5		      .byte.b	#%11010101
   2055  fc39		       d1		      .byte.b	#%11010001
   2056  fc3a		       5f		      .byte.b	#%01011111
   2057  fc3b		       26		      .byte.b	#%00100110
   2058  fc3c		       2d		      .byte.b	#%00101101
   2059  fc3d		       e9		      .byte.b	#%11101001
   2060  fc3e		       d6		      .byte.b	#%11010110
   2061  fc3f		       26		      .byte.b	#%00100110
   2062  fc40		       ba		      .byte.b	#%10111010
   2063  fc41		       03		      .byte.b	#%00000011
   2064  fc42		       dd		      .byte.b	#%11011101
   2065  fc43		       e0		      .byte.b	#%11100000
   2066  fc44		       57		      .byte.b	#%01010111
   2067  fc45		       14		      .byte.b	#%00010100
   2068  fc46		       35		      .byte.b	#%00110101
   2069  fc47		       e5		      .byte.b	#%11100101
   2070  fc48		       b5		      .byte.b	#%10110101
   2071  fc49		       d4		      .byte.b	#%11010100
   2072  fc4a		       97		      .byte.b	#%10010111
   2073  fc4b
   2074  fc4b				   QrCode4
   2075  fc4b		       09		      .byte.b	#%00001001
   2076  fc4c		       0e		      .byte.b	#%00001110
   2077  fc4d		       0f		      .byte.b	#%00001111
   2078  fc4e		       0c		      .byte.b	#%00001100
   2079  fc4f		       0c		      .byte.b	#%00001100
   2080  fc50		       08		      .byte.b	#%00001000
   2081  fc51		       08		      .byte.b	#%00001000
   2082  fc52		       06		      .byte.b	#%00000110
   2083  fc53		       06		      .byte.b	#%00000110
   2084  fc54		       0b		      .byte.b	#%00001011
   2085  fc55		       0f		      .byte.b	#%00001111
   2086  fc56		       04		      .byte.b	#%00000100
   2087  fc57		       08		      .byte.b	#%00001000
   2088  fc58		       0f		      .byte.b	#%00001111
   2089  fc59		       09		      .byte.b	#%00001001
   2090  fc5a		       07		      .byte.b	#%00000111
   2091  fc5b		       05		      .byte.b	#%00000101
   2092  fc5c		       00		      .byte.b	#%00000000
   2093  fc5d		       0f		      .byte.b	#%00001111
   2094  fc5e		       08		      .byte.b	#%00001000
   2095  fc5f		       0b		      .byte.b	#%00001011
   2096  fc60		       0b		      .byte.b	#%00001011
   2097  fc61		       0b		      .byte.b	#%00001011
   2098  fc62		       08		      .byte.b	#%00001000
   2099  fc63		       0f		      .byte.b	#%00001111
   2100  fc64
   2101  fc64							; Moved here because of rom space.
   2102  fc64							; The only SBR in constants space
   2103  fc64				   DrawQrCode
   2104  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2105  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2106  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2107  fc6a		       85 0a		      STA	CTRLPF
   2108  fc6c		       20 ff f6 	      JSR	ClearAll	; To be 100 sure!
   2109  fc6f		       ad 82 02 	      LDA	SWCHB
   2110  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2111  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2112  fc76		       86 09		      STX	COLUBK
   2113  fc78		       84 08		      STY	COLUPF
   2114  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2115  fc7d				   StoreReversedQrCode
   2116  fc7d		       86 08		      STX	COLUPF
   2117  fc7f		       84 09		      STY	COLUBK
   2118  fc81
   2119  fc81				   ContinueQrCode
   2120  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2121  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2122  fc85		       20 18 fa 	      JSR	WaitForVblankEnd
   2123  fc88		       20 2b fa 	      JSR	Sleep8Lines
   2124  fc8b		       20 2b fa 	      JSR	Sleep8Lines
   2125  fc8e		       20 2b fa 	      JSR	Sleep8Lines
   2126  fc91
   2127  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2128  fc91		       85 02		      STA	WSYNC
   2129  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2130  fc96		       85 0e		      STA	PF1	;3
   2131  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2132  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2134  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2135  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2136  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2137  fcb3		       85 0e		      STA	PF1	;3
   2138  fcb5
   2139  fcb5		       ca		      DEX		;2
   2140  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2141  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2142  fcba		       88		      DEY		;2
   2143  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2144  fcbd
   2145  fcbd				   EndQrCodeLoop
   2146  fcbd		       85 02		      STA	WSYNC	;
   2147  fcbf		       a9 00		      LDA	#0
   2148  fcc1		       85 0e		      STA	PF1	;3
   2149  fcc3		       85 0f		      STA	PF2	;3
   2150  fcc5
   2151  fcc5		       20 32 fa 	      JSR	Sleep32Lines
   2152  fcc8		       4c e7 f5 	      JMP	PrepareOverscan
   2153  fccb
   2154  fd00					      org	$FD00
   2155  fd00				   Font
   2156  fd00				   C0
   2157  fd00		       e7		      .byte.b	#%11100111	;
   2158  fd01		       a5		      .byte.b	#%10100101	; 
   2159  fd02		       a5		      .byte.b	#%10100101	; 
   2160  fd03		       a5		      .byte.b	#%10100101	; 
   2161  fd04		       e7		      .byte.b	#%11100111	;	
   2162  fd05				   C1
   2163  fd05		       e7		      .byte.b	#%11100111	;
   2164  fd06		       42		      .byte.b	#%01000010	; 
   2165  fd07		       42		      .byte.b	#%01000010	; 
   2166  fd08		       42		      .byte.b	#%01000010	; 
   2167  fd09		       66		      .byte.b	#%01100110	;
   2168  fd0a				   C2
   2169  fd0a		       e7		      .byte.b	#%11100111	;
   2170  fd0b		       24		      .byte.b	#%00100100	; 
   2171  fd0c		       e7		      .byte.b	#%11100111	; 
   2172  fd0d		       81		      .byte.b	#%10000001	; 
   2173  fd0e		       e7		      .byte.b	#%11100111	;
   2174  fd0f				   C3
   2175  fd0f		       e7		      .byte.b	#%11100111	;
   2176  fd10		       81		      .byte.b	#%10000001	; 
   2177  fd11		       e7		      .byte.b	#%11100111	; 
   2178  fd12		       81		      .byte.b	#%10000001	; 
   2179  fd13		       e7		      .byte.b	#%11100111	;
   2180  fd14				   C4
   2181  fd14		       81		      .byte.b	#%10000001	;
   2182  fd15		       81		      .byte.b	#%10000001	; 
   2183  fd16		       e7		      .byte.b	#%11100111	; 
   2184  fd17		       a5		      .byte.b	#%10100101	; 
   2185  fd18		       a5		      .byte.b	#%10100101	;
   2186  fd19				   C5
   2187  fd19		       e7		      .byte.b	#%11100111	;
   2188  fd1a		       81		      .byte.b	#%10000001	; 
   2189  fd1b		       e7		      .byte.b	#%11100111	; 
   2190  fd1c		       24		      .byte.b	#%00100100	; 
   2191  fd1d		       e7		      .byte.b	#%11100111	;
   2192  fd1e				   C6
   2193  fd1e		       e7		      .byte.b	#%11100111	;
   2194  fd1f		       a5		      .byte.b	#%10100101	; 
   2195  fd20		       e7		      .byte.b	#%11100111	; 
   2196  fd21		       24		      .byte.b	#%00100100	; 
   2197  fd22		       e7		      .byte.b	#%11100111	;
   2198  fd23				   C7
   2199  fd23		       81		      .byte.b	#%10000001	;
   2200  fd24		       81		      .byte.b	#%10000001	; 
   2201  fd25		       81		      .byte.b	#%10000001	; 
   2202  fd26		       81		      .byte.b	#%10000001	; 
   2203  fd27		       e7		      .byte.b	#%11100111	;
   2204  fd28				   C8
   2205  fd28		       e7		      .byte.b	#%11100111	;
   2206  fd29		       a5		      .byte.b	#%10100101	; 
   2207  fd2a		       e7		      .byte.b	#%11100111	; 
   2208  fd2b		       a5		      .byte.b	#%10100101	; 
   2209  fd2c		       e7		      .byte.b	#%11100111	;
   2210  fd2d				   C9
   2211  fd2d		       e7		      .byte.b	#%11100111	;
   2212  fd2e		       81		      .byte.b	#%10000001	; 
   2213  fd2f		       e7		      .byte.b	#%11100111	; 
   2214  fd30		       a5		      .byte.b	#%10100101	; 
   2215  fd31		       e7		      .byte.b	#%11100111	;
   2216  fd32				   CA
   2217  fd32		       a5		      .byte.b	#%10100101	;
   2218  fd33		       a5		      .byte.b	#%10100101	; 
   2219  fd34		       e7		      .byte.b	#%11100111	; 
   2220  fd35		       a5		      .byte.b	#%10100101	; 
   2221  fd36		       e7		      .byte.b	#%11100111	;
   2222  fd37				   CB
   2223  fd37		       66		      .byte.b	#%01100110	;
   2224  fd38		       a5		      .byte.b	#%10100101	; 
   2225  fd39		       66		      .byte.b	#%01100110	; 
   2226  fd3a		       a5		      .byte.b	#%10100101	;
   2227  fd3b		       66		      .byte.b	#%01100110	;
   2228  fd3c				   CC
   2229  fd3c		       e7		      .byte.b	#%11100111	;
   2230  fd3d		       24		      .byte.b	#%00100100	; 
   2231  fd3e		       24		      .byte.b	#%00100100	; 
   2232  fd3f		       24		      .byte.b	#%00100100	;
   2233  fd40		       e7		      .byte.b	#%11100111	;
   2234  fd41
   2235  fd41				   CD
   2236  fd41		       66		      .byte.b	#%01100110	;
   2237  fd42		       a5		      .byte.b	#%10100101	; 
   2238  fd43		       a5		      .byte.b	#%10100101	; 
   2239  fd44		       a5		      .byte.b	#%10100101	;
   2240  fd45		       66		      .byte.b	#%01100110	;
   2241  fd46
   2242  fd46				   CE
   2243  fd46		       e7		      .byte.b	#%11100111	;
   2244  fd47		       24		      .byte.b	#%00100100	; 
   2245  fd48		       e7		      .byte.b	#%11100111	; 
   2246  fd49		       24		      .byte.b	#%00100100	; 
   2247  fd4a		       e7		      .byte.b	#%11100111	;
   2248  fd4b
   2249  fd4b				   CF
   2250  fd4b		       24		      .byte.b	#%00100100	;
   2251  fd4c		       24		      .byte.b	#%00100100	; 
   2252  fd4d		       e7		      .byte.b	#%11100111	; 
   2253  fd4e		       24		      .byte.b	#%00100100	; 
   2254  fd4f		       e7		      .byte.b	#%11100111	;
   2255  fd50
   2256  fd50				   CG
   2257  fd50		       c3		      .byte.b	#%11000011	;
   2258  fd51		       a5		      .byte.b	#%10100101	; 
   2259  fd52		       a5		      .byte.b	#%10100101	; 
   2260  fd53		       24		      .byte.b	#%00100100	; 
   2261  fd54		       c3		      .byte.b	#%11000011	;	
   2262  fd55
   2263  fd55				   CH
   2264  fd55		       a5		      .byte.b	#%10100101	;
   2265  fd56		       a5		      .byte.b	#%10100101	; 
   2266  fd57		       e7		      .byte.b	#%11100111	; 
   2267  fd58		       a5		      .byte.b	#%10100101	; 
   2268  fd59		       a5		      .byte.b	#%10100101	;
   2269  fd5a
   2270  fd5a				   CK
   2271  fd5a		       a5		      .byte.b	#%10100101	;
   2272  fd5b		       a5		      .byte.b	#%10100101	; 
   2273  fd5c		       66		      .byte.b	#%01100110	; 
   2274  fd5d		       a5		      .byte.b	#%10100101	; 
   2275  fd5e		       a5		      .byte.b	#%10100101	;
   2276  fd5f
   2277  fd5f				   CL
   2278  fd5f		       e7		      .byte.b	#%11100111	;
   2279  fd60		       24		      .byte.b	#%00100100	; 
   2280  fd61		       24		      .byte.b	#%00100100	; 
   2281  fd62		       24		      .byte.b	#%00100100	; 
   2282  fd63		       24		      .byte.b	#%00100100	;
   2283  fd64
   2284  fd64				   CI
   2285  fd64		       42		      .byte.b	#%01000010	;
   2286  fd65		       42		      .byte.b	#%01000010	; 
   2287  fd66		       42		      .byte.b	#%01000010	; 
   2288  fd67		       42		      .byte.b	#%01000010	; 
   2289  fd68		       42		      .byte.b	#%01000010	;
   2290  fd69
   2291  fd69				   CM
   2292  fd69		       a5		      .byte.b	#%10100101	;
   2293  fd6a		       a5		      .byte.b	#%10100101	; 
   2294  fd6b		       a5		      .byte.b	#%10100101	; 
   2295  fd6c		       e7		      .byte.b	#%11100111	; 
   2296  fd6d		       a5		      .byte.b	#%10100101	;
   2297  fd6e
   2298  fd6e				   CN
   2299  fd6e		       a5		      .byte.b	#%10100101	;
   2300  fd6f		       a5		      .byte.b	#%10100101	; 
   2301  fd70		       a5		      .byte.b	#%10100101	; 
   2302  fd71		       a5		      .byte.b	#%10100101	; 
   2303  fd72		       66		      .byte.b	#%01100110	;	
   2304  fd73
   2305  fd73
   2306  fd73				   CO
   2307  fd73		       42		      .byte.b	#%01000010	;
   2308  fd74		       a5		      .byte.b	#%10100101	; 
   2309  fd75		       a5		      .byte.b	#%10100101	; 
   2310  fd76		       a5		      .byte.b	#%10100101	; 
   2311  fd77		       42		      .byte.b	#%01000010	;	
   2312  fd78
   2313  fd78				   CP
   2314  fd78		       24		      .byte.b	#%00100100	;
   2315  fd79		       24		      .byte.b	#%00100100	; 
   2316  fd7a		       e7		      .byte.b	#%11100111	; 
   2317  fd7b		       a5		      .byte.b	#%10100101	; 
   2318  fd7c		       e7		      .byte.b	#%11100111	;
   2319  fd7d
   2320  fd7d				   CR
   2321  fd7d		       a5		      .byte.b	#%10100101	;
   2322  fd7e		       a5		      .byte.b	#%10100101	; 
   2323  fd7f		       66		      .byte.b	#%01100110	; 
   2324  fd80		       a5		      .byte.b	#%10100101	; 
   2325  fd81		       66		      .byte.b	#%01100110	;
   2326  fd82
   2327  fd82				   CS
   2328  fd82		       66		      .byte.b	#%01100110	;
   2329  fd83		       81		      .byte.b	#%10000001	; 
   2330  fd84		       42		      .byte.b	#%01000010	; 
   2331  fd85		       24		      .byte.b	#%00100100	; 
   2332  fd86		       c3		      .byte.b	#%11000011	;
   2333  fd87
   2334  fd87				   CT
   2335  fd87		       42		      .byte.b	#%01000010	;
   2336  fd88		       42		      .byte.b	#%01000010	; 
   2337  fd89		       42		      .byte.b	#%01000010	; 
   2338  fd8a		       42		      .byte.b	#%01000010	; 
   2339  fd8b		       e7		      .byte.b	#%11100111	;
   2340  fd8c
   2341  fd8c				   CV
   2342  fd8c		       42		      .byte.b	#%01000010	;
   2343  fd8d		       a5		      .byte.b	#%10100101	; 
   2344  fd8e		       a5		      .byte.b	#%10100101	; 
   2345  fd8f		       a5		      .byte.b	#%10100101	; 
   2346  fd90		       a5		      .byte.b	#%10100101	;	
   2347  fd91
   2348  fd91				   CY
   2349  fd91		       42		      .byte.b	#%01000010	;
   2350  fd92		       42		      .byte.b	#%01000010	; 
   2351  fd93		       42		      .byte.b	#%01000010	; 
   2352  fd94		       a5		      .byte.b	#%10100101	; 
   2353  fd95		       a5		      .byte.b	#%10100101	;
   2354  fd96
   2355  fd96				   CW
   2356  fd96		       a5		      .byte.b	#%10100101	;
   2357  fd97		       e7		      .byte.b	#%11100111	; 
   2358  fd98		       a5		      .byte.b	#%10100101	; 
   2359  fd99		       a5		      .byte.b	#%10100101	; 
   2360  fd9a		       a5		      .byte.b	#%10100101	;
   2361  fd9b
   2362  fd9b				   CZ
   2363  fd9b		       e7		      .byte.b	#%11100111	;
   2364  fd9c		       24		      .byte.b	#%00100100	; 
   2365  fd9d		       42		      .byte.b	#%01000010	; 
   2366  fd9e		       81		      .byte.b	#%10000001	; 
   2367  fd9f		       e7		      .byte.b	#%11100111	;
   2368  fda0
   2369  fda0				   Pipe
   2370  fda0		       42		      .byte.b	#%01000010	;
   2371  fda1		       00		      .byte.b	#%00000000	; 
   2372  fda2		       42		      .byte.b	#%01000010	; 
   2373  fda3		       00		      .byte.b	#%00000000	; 
   2374  fda4		       42		      .byte.b	#%01000010	;
   2375  fda5
   2376  fda5				   Exclamation
   2377  fda5		       42		      .byte.b	#%01000010	;
   2378  fda6		       00		      .byte.b	#%00000000	; 
   2379  fda7		       42		      .byte.b	#%01000010	; 
   2380  fda8		       42		      .byte.b	#%01000010	; 
   2381  fda9		       42		      .byte.b	#%01000010	;
   2382  fdaa
   2383  fdaa				   Dot
   2384  fdaa		       42		      .byte.b	#%01000010	;
   2385  fdab		       42		      .byte.b	#%01000010	; 
   2386  fdac		       00		      .byte.b	#%00000000	; 
   2387  fdad		       00		      .byte.b	#%00000000	; 
   2388  fdae		       00		      .byte.b	#%00000000	;
   2389  fdaf
   2390  fdaf				   Colon
   2391  fdaf		       42		      .byte.b	#%01000010	;
   2392  fdb0		       42		      .byte.b	#%01000010	; 
   2393  fdb1		       00		      .byte.b	#%00000000	; 
   2394  fdb2		       42		      .byte.b	#%01000010	; 
   2395  fdb3		       42		      .byte.b	#%01000010	;
   2396  fdb4
   2397  fdb4				   Triangle
   2398  fdb4		       81		      .byte.b	#%10000001	;
   2399  fdb5		       c3		      .byte.b	#%11000011	; 
   2400  fdb6		       e7		      .byte.b	#%11100111	; 
   2401  fdb7		       c3		      .byte.b	#%11000011	; 
   2402  fdb8		       81		      .byte.b	#%10000001	;
   2403  fdb9
   2404  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2405  fdb9		       00		      .byte.b	#0	;
   2406  fdba		       00		      .byte.b	#0	;
   2407  fdbb		       00		      .byte.b	#0	;
   2408  fdbc		       00		      .byte.b	#0	;
   2409  fdbd		       00		      .byte.b	#0	;
   2410  fdbe
   2411  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2412  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2413  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2414  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2415  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2416  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2417  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2418  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2419  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2420  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2421  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2422  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2423  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2424  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2425  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2426  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2427  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2428  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2429  fdcf
   2430  fdcf				   EngineSoundType
   2431  fdcf		       02		      .byte.b	#2
   2432  fdd0		       02		      .byte.b	#2
   2433  fdd1		       0e		      .byte.b	#14
   2434  fdd2		       06		      .byte.b	#6
   2435  fdd3		       06		      .byte.b	#6
   2436  fdd4		       0e		      .byte.b	#14
   2437  fdd5
   2438  fdd5				   EngineBaseFrequence
   2439  fdd5		       1f		      .byte.b	#31
   2440  fdd6		       15		      .byte.b	#21
   2441  fdd7		       14		      .byte.b	#20
   2442  fdd8		       1f		      .byte.b	#31
   2443  fdd9		       16		      .byte.b	#22
   2444  fdda		       03		      .byte.b	#3
   2445  fddb
   2446  fddb				   TachometerSizeLookup1
   2447  fddb		       1f		      .byte.b	#%00011111
   2448  fddc		       3f		      .byte.b	#%00111111
   2449  fddd		       7f		      .byte.b	#%01111111
   2450  fdde		       ff		      .byte.b	#%11111111
   2451  fddf		       ff		      .byte.b	#%11111111
   2452  fde0		       ff		      .byte.b	#%11111111
   2453  fde1		       ff		      .byte.b	#%11111111
   2454  fde2		       ff		      .byte.b	#%11111111
   2455  fde3
   2456  fde3				   TachometerSizeLookup2
   2457  fde3		       00		      .byte.b	#%00000000
   2458  fde4		       00		      .byte.b	#%00000000
   2459  fde5		       00		      .byte.b	#%00000000
   2460  fde6		       00		      .byte.b	#%00000000
   2461  fde7		       80		      .byte.b	#%10000000
   2462  fde8		       c0		      .byte.b	#%11000000
   2463  fde9		       e0		      .byte.b	#%11100000
   2464  fdea		       f0		      .byte.b	#%11110000
   2465  fdeb
   2466  fdeb				   TachometerGearLookup
   2467  fdeb		       01		      .byte.b	#%00000001
   2468  fdec		       02		      .byte.b	#%00000010
   2469  fded		       04		      .byte.b	#%00000100
   2470  fdee		       08		      .byte.b	#%00001000
   2471  fdef		       10		      .byte.b	#%00010000
   2472  fdf0		       30		      .byte.b	#%00110000
   2473  fdf1
   2474  fe00					      org	$FE00
   2475  fe00				   AesTable
   2476  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2477  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2478  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2479  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2480  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2481  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2482  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2483  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2484  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2485  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2486  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2487  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2488  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2489  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2490  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2491  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2492  ff00
   2493  ff00							; From FF00 to FFFB (122 bytes) to use here
   2494  ff00
   2495  ff00				   StaticText		; All static text must be on the same MSB block. 
   2496  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2497  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2498  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2499  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2500  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2501  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2502  ff05
   2503  ff05				   HellwayLeftText
   2504  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2505  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2506  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2507  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2508  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2509  ff0a
   2510  ff0a				   HellwayRightText
   2511  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2512  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2513  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2514  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2515  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2516  ff0f
   2517  ff0f				   OpbText
   2518  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2519  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2520  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2521  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2522  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2523  ff14
   2524  ff14				   YearText
   2525  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2526  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2527  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2528  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2529  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2530  ff19
   2531  ff19				   GameText
   2532  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2533  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2534  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2535  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2536  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2537  ff1e
   2538  ff1e				   OverText
   2539  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2540  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2541  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2542  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2543  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2544  ff23				   GoText
   2545  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2546  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2547  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2548  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2549  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2550  ff28
   2551  ff28				   ZeldaTextLeft
   2552  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2553  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2554  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2555  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2556  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2557  ff2d
   2558  ff2d				   ZeldaTextRight
   2559  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2560  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2561  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2562  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2563  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2564  ff32
   2565  ff32				   ZeldaDateLeft
   2566  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2567  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2568  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2569  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2570  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2571  ff37
   2572  ff37				   ZeldaDateRight
   2573  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2574  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2575  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2576  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2577  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2578  ff3c
   2579  ff3c				   PolvinhosTextLeft
   2580  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2581  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2582  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2583  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2584  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2585  ff41
   2586  ff41				   PolvinhosTextRight
   2587  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2588  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2589  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2590  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2591  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2592  ff46
   2593  ff46				   PolvinhosDateLeft
   2594  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2595  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2596  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2597  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2598  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2599  ff4b
   2600  ff4b				   PolvinhosDateRight
   2601  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2602  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2603  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2604  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2605  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2606  ff50
   2607  ff50				   IvonneTextLeft
   2608  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2609  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2610  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2611  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2612  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2613  ff55
   2614  ff55				   IvonneTextRight
   2615  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2616  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2617  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2618  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2619  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2620  ff5a
   2621  ff5a				   IvonneDateLeft
   2622  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2623  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2624  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2625  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2626  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2627  ff5f
   2628  ff5f				   IvonneDateRight
   2629  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2630  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2631  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2632  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2633  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2634  ff64
   2635  ff64				   PaperArtTextLeft
   2636  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2637  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2638  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2639  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2640  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2641  ff69
   2642  ff69				   PaperArtTextRight
   2643  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2644  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2645  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2646  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2647  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2648  ff6e
   2649  ff6e				   LeonardoTextLeft
   2650  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2651  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2652  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2653  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2654  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2655  ff73
   2656  ff73				   LeonardoTextRight
   2657  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2658  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2659  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2660  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2661  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2662  ff78
   2663  ff78				   VersionText
   2664  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2665  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2666  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2667  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2668  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2669  ff7d
   2670  ff7d
   2671  ff7d				   EndStaticText
   2672  ff7d
   2673  ff7d				   CarSprite0		; Upside down, Original Car
   2674  ff7d		       00 00 00 00*	      ds	7
   2675  ff84		       7e		      .byte.b	#%01111110
   2676  ff85		       24		      .byte.b	#%00100100
   2677  ff86		       bd		      .byte.b	#%10111101
   2678  ff87		       3c		      .byte.b	#%00111100
   2679  ff88		       bd		      .byte.b	#%10111101
   2680  ff89		       3c		      .byte.b	#%00111100
   2681  ff8a
   2682  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2683  ff8a		       00 00 00 00*	      ds	7
   2684  ff91		       bd		      .byte.b	#%10111101
   2685  ff92		       7e		      .byte.b	#%01111110
   2686  ff93		       5a		      .byte.b	#%01011010
   2687  ff94		       66		      .byte.b	#%01100110
   2688  ff95		       bd		      .byte.b	#%10111101
   2689  ff96		       3c		      .byte.b	#%00111100
   2690  ff97
   2691  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2692  ff97		       00 00 00 00*	      ds	7
   2693  ff9e		       7e		      .byte.b	#%01111110
   2694  ff9f		       a5		      .byte.b	#%10100101
   2695  ffa0		       42		      .byte.b	#%01000010
   2696  ffa1		       42		      .byte.b	#%01000010
   2697  ffa2		       bd		      .byte.b	#%10111101
   2698  ffa3		       7e		      .byte.b	#%01111110
   2699  ffa4
   2700  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2701  ffa4		       00 00 00 00*	      ds	7
   2702  ffab		       3c		      .byte.b	#%00111100
   2703  ffac		       db		      .byte.b	#%11011011
   2704  ffad		       db		      .byte.b	#%11011011
   2705  ffae		       3c		      .byte.b	#%00111100
   2706  ffaf		       5a		      .byte.b	#%01011010
   2707  ffb0		       3c		      .byte.b	#%00111100
   2708  ffb1
   2709  ffb1				   TrafficSpeeds
   2710  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2711  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2712  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2713  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2714  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2715  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2716  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2717  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2718  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2719  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2720  ffbb				   TrafficSpeedsHighDelta
   2721  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2722  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2723  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2724  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2725  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2726  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2727  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2728  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2729  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2730  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2731  ffc5
   2732  ffc5				   CarIdToSpriteAddressL
   2733  ffc5		       7d		      .byte.b	#<CarSprite0
   2734  ffc6		       8a		      .byte.b	#<CarSprite1
   2735  ffc7		       97		      .byte.b	#<CarSprite2
   2736  ffc8		       a4		      .byte.b	#<CarSprite3
   2737  ffc9
   2738  ffc9				   CarIdToSpriteAddressH
   2739  ffc9		       ff		      .byte.b	#>CarSprite0
   2740  ffca		       ff		      .byte.b	#>CarSprite1
   2741  ffcb		       ff		      .byte.b	#>CarSprite2
   2742  ffcc		       ff		      .byte.b	#>CarSprite3
   2743  ffcd
   2744  ffcd				   CarIdToAccelerateSpeed
   2745  ffcd		       80		      .byte.b	#128
   2746  ffce		       c0		      .byte.b	#192
   2747  ffcf		       60		      .byte.b	#96
   2748  ffd0		       c0		      .byte.b	#192
   2749  ffd1
   2750  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2751  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   2752  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   2753  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   2754  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   2755  ffd5
   2756  ffd5				   CarIdToMaxSpeedL
   2757  ffd5		       80		      .byte.b	#$80
   2758  ffd6		       00		      .byte.b	#$00	; One less gear
   2759  ffd7		       80		      .byte.b	#$80
   2760  ffd8		       80		      .byte.b	#$80
   2761  ffd9
   2762  ffd9				   CarIdToMaxGear
   2763  ffd9		       05		      .byte.b	#5
   2764  ffda		       04		      .byte.b	#4	; One less gear
   2765  ffdb		       05		      .byte.b	#5
   2766  ffdc		       05		      .byte.b	#5
   2767  ffdd
   2768  ffdd				   GearToBreakSpeedTable
   2769  ffdd		       09		      .byte.b	#(BREAK_SPEED - 1)
   2770  ffde		       09		      .byte.b	#(BREAK_SPEED - 1)
   2771  ffdf		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2772  ffe0		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2773  ffe1		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2774  ffe2		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2775  ffe3
   2776  ffe3				   TrafficColorTable
   2777  ffe3		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2778  ffe4		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2779  ffe5		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2780  ffe6		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2781  ffe7
   2782  ffe7				   TrafficChanceTable
   2783  ffe7		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2784  ffe8		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2785  ffe9		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2786  ffea		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2787  ffeb
   2788  ffeb				   TrafficTimeTable
   2789  ffeb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2790  ffec		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2791  ffed		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2792  ffee		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2793  ffef		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2794  fff0
   2795  fff0
   2796  fffc					      org	$FFFC
   2797  fffc		       00 f0		      .word.w	BeforeStart
   2798  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
