------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000							; 8E and 8F are free!!!!
    115  f000
    116  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    117  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    118  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    119  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    120  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    121  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    122  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    123  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    124  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    125  f000
    126  f000							;Temporary variables, multiple uses
    127  f000		       00 b0	   Tmp0       =	$B0
    128  f000		       00 b1	   Tmp1       =	$B1
    129  f000		       00 b2	   Tmp2       =	$B2
    130  f000		       00 b3	   Tmp3       =	$B3
    131  f000
    132  f000		       00 b4	   CollisionCounter =	$B4
    133  f000		       00 b5	   OpCollisionCounter =	$B5
    134  f000		       00 b6	   Player0X   =	$B6
    135  f000		       00 b7	   Player1X   =	$B7
    136  f000		       00 b8	   CountdownTimer =	$B8
    137  f000		       00 b9	   OpCountdownTimer =	$B9
    138  f000		       00 ba	   Traffic0Msb =	$BA
    139  f000		       00 bb	   OpTraffic0Msb =	$BB
    140  f000		       00 bc	   SwitchDebounceCounter =	$BC
    141  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    142  f000		       00 be	   TrafficChance =	$BE
    143  f000		       00 bf	   OpTrafficChance =	$BF
    144  f000
    145  f000		       00 c0	   CheckpointTime =	$C0
    146  f000		       00 c1	   OpCheckpointTime =	$C1
    147  f000		       00 c2	   TrafficColor =	$C2
    148  f000		       00 c3	   OpTrafficColor =	$C3
    149  f000		       00 c4	   CurrentDifficulty =	$C4
    150  f000		       00 c5	   OpCurrentDifficulty =	$C5
    151  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    152  f000							;Bit 2 speed delta, Bit 3 random traffic 
    153  f000
    154  f000		       00 c7	   CurrentCarId =	$C7
    155  f000		       00 c8	   OpCurrentCarId =	$C8
    156  f000
    157  f000		       00 c9	   ScoreFontColor =	$C9
    158  f000		       00 ca	   OpScoreFontColor =	$CA
    159  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    160  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    161  f000		       00 cd	   NextCheckpoint =	$CD
    162  f000		       00 ce	   OpNextCheckpoint =	$CE
    163  f000		       00 cf	   OpponentLine =	$CF
    164  f000
    165  f000		       00 d0	   ScoreD0    =	$D0
    166  f000		       00 d1	   ScoreD1    =	$D1
    167  f000		       00 d2	   ScoreD2    =	$D2
    168  f000		       00 d3	   ScoreD3    =	$D3
    169  f000		       00 d4	   ScoreD4    =	$D4
    170  f000
    171  f000		       00 d5	   Gear       =	$D5
    172  f000		       00 d6	   OpGear     =	$D6
    173  f000
    174  f000		       00 d7	   CarSpritePointerL =	$D7
    175  f000		       00 d8	   CarSpritePointerH =	$D8
    176  f000
    177  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    178  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    179  f000
    180  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    181  f000
    182  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    183  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    184  f000
    185  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    186  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    187  f000
    188  f000		       00 f0	   Player0SpeedL =	$F0
    189  f000		       00 f1	   Player1SpeedL =	$F1
    190  f000		       00 f2	   Player0SpeedH =	$F2
    191  f000		       00 f3	   Player1SpeedH =	$F3
    192  f000
    193  f000							;generic start up stuff, put zero in almost all...
    194  f000				   BeforeStart		;All variables that are kept on game reset or select
    195  f000		       a0 00		      LDY	#0
    196  f002		       84 bc		      STY	SwitchDebounceCounter
    197  f004		       84 c4		      STY	CurrentDifficulty
    198  f006		       84 bd		      STY	GameStatus
    199  f008		       84 c7		      STY	CurrentCarId
    200  f00a		       84 c8		      STY	OpCurrentCarId
    201  f00c		       a0 10		      LDY	#16
    202  f00e		       84 c6		      STY	GameMode
    203  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    204  f012
    205  f012				   Start
    206  f012		       a9 02		      LDA	#2
    207  f014		       85 00		      STA	VSYNC
    208  f016		       85 02		      STA	WSYNC
    209  f018		       85 02		      STA	WSYNC
    210  f01a		       85 02		      STA	WSYNC
    211  f01c		       a9 00		      LDA	#0	;2
    212  f01e		       85 00		      STA	VSYNC	;3
    213  f020
    214  f020		       78		      SEI
    215  f021		       d8		      CLD
    216  f022		       a2 ff		      LDX	#$FF
    217  f024		       9a		      TXS
    218  f025
    219  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    220  f027				   CleanMem
    221  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    222  f029		       f0 16		      BEQ	SkipClean
    223  f02b		       e0 c6		      CPX	#GameMode
    224  f02d		       f0 12		      BEQ	SkipClean
    225  f02f		       e0 c7		      CPX	#CurrentCarId
    226  f031		       f0 0e		      BEQ	SkipClean
    227  f033		       e0 c8		      CPX	#OpCurrentCarId
    228  f035		       f0 0a		      BEQ	SkipClean
    229  f037		       e0 c4		      CPX	#CurrentDifficulty
    230  f039		       f0 06		      BEQ	SkipClean
    231  f03b		       e0 bd		      CPX	#GameStatus
    232  f03d		       f0 02		      BEQ	SkipClean
    233  f03f		       95 00		      STA	0,X
    234  f041				   SkipClean
    235  f041		       e8		      INX
    236  f042		       d0 e3		      BNE	CleanMem
    237  f044
    238  f044		       a9 d5		      LDA	#213
    239  f046		       8d 96 02 	      STA	TIM64T	;3	
    240  f049
    241  f049							;Setting some variables...
    242  f049
    243  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    244  f049		       85 02		      STA	WSYNC	;We will set player position
    245  f04b		       20 b0 f7 	      JSR	DefaultOffsets
    246  f04e
    247  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    248  f051		       85 f0		      STA	Player0SpeedL
    249  f053
    250  f053							;SLEEP 11;18
    251  f053		       a2 00		      LDX	#0
    252  f055		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    253  f058		       85 db		      STA	StartSWCHB	; For game over
    254  f05a		       29 c0		      AND	#%11000000
    255  f05c		       f0 0b		      BEQ	CallConfigureDifficulty
    256  f05e		       e8		      INX
    257  f05f		       c9 80		      CMP	#%10000000
    258  f061		       f0 06		      BEQ	CallConfigureDifficulty
    259  f063		       e8		      INX
    260  f064		       c9 40		      CMP	#%01000000
    261  f066		       f0 01		      BEQ	CallConfigureDifficulty
    262  f068		       e8		      INX
    263  f069
    264  f069				   CallConfigureDifficulty
    265  f069		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    266  f06b		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    267  f06d		       a5 bd		      LDA	GameStatus
    268  f06f		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    269  f071				   StoreCurrentDifficulty
    270  f071		       86 c4		      STX	CurrentDifficulty
    271  f073		       20 85 f7 	      JSR	ConfigureDifficulty
    272  f076
    273  f076				   SetGameNotRunning
    274  f076		       a9 00		      LDA	#0
    275  f078		       85 bd		      STA	GameStatus
    276  f07a
    277  f07a				   ConfigureTimer
    278  f07a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    279  f07c		       85 b8		      STA	CountdownTimer	;3
    280  f07e
    281  f07e				   ConfigurePlayer1XPosition
    282  f07e		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    283  f080		       85 b7		      STA	Player1X	;3
    284  f082
    285  f082				   HPositioning 		; Avoid sleep doing needed stuff
    286  f082		       85 02		      STA	WSYNC
    287  f084
    288  f084				   ConfigurePlayer0XPosition
    289  f084		       a9 21		      LDA	#PLAYER_0_X_START	;2
    290  f086		       85 b6		      STA	Player0X	;3
    291  f088
    292  f088				   ConfigureMissileSize
    293  f088		       a9 30		      LDA	#%00110000	;2 Missile Size
    294  f08a		       85 04		      STA	NUSIZ0	;3
    295  f08c		       85 05		      STA	NUSIZ1	;3
    296  f08e
    297  f08e				   ConfigureNextCheckpoint
    298  f08e		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    299  f090		       85 cd		      STA	NextCheckpoint
    300  f092
    301  f092		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f094					      SLEEP	4	;
      1  f094				   .CYCLES    SET	4
      2  f094
      3  f094				  -	      IF	.CYCLES < 2
      4  f094				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f094				  -	      ERR
      6  f094					      ENDIF
      7  f094
      8  f094				  -	      IF	.CYCLES & 1
      9  f094				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f094				  -	      nop	0
     11  f094				  -	      ELSE
     12  f094				  -	      bit	VSYNC
     13  f094				  -	      ENDIF
     14  f094				  -.CYCLES    SET	.CYCLES - 3
     15  f094					      ENDIF
     16  f094
     17  f094					      REPEAT	.CYCLES / 2
     18  f094		       ea		      nop
     17  f094					      REPEND
     18  f095		       ea		      nop
     19  f096					      REPEND
    303  f096		       85 12		      STA	RESM0
      0  f098					      SLEEP	2	;
      1  f098				   .CYCLES    SET	2
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     19  f099					      REPEND
    305  f099		       85 14		      STA	RESBL
      0  f09b					      SLEEP	2
      1  f09b				   .CYCLES    SET	2
      2  f09b
      3  f09b				  -	      IF	.CYCLES < 2
      4  f09b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09b				  -	      ERR
      6  f09b					      ENDIF
      7  f09b
      8  f09b				  -	      IF	.CYCLES & 1
      9  f09b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09b				  -	      nop	0
     11  f09b				  -	      ELSE
     12  f09b				  -	      bit	VSYNC
     13  f09b				  -	      ENDIF
     14  f09b				  -.CYCLES    SET	.CYCLES - 3
     15  f09b					      ENDIF
     16  f09b
     17  f09b					      REPEAT	.CYCLES / 2
     18  f09b		       ea		      nop
     19  f09c					      REPEND
    307  f09c		       85 13		      STA	RESM1
      0  f09e					      SLEEP	3
      1  f09e				   .CYCLES    SET	3
      2  f09e
      3  f09e				  -	      IF	.CYCLES < 2
      4  f09e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09e				  -	      ERR
      6  f09e					      ENDIF
      7  f09e
      8  f09e					      IF	.CYCLES & 1
      9  f09e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09e				  -	      nop	0
     11  f09e					      ELSE
     12  f09e		       24 00		      bit	VSYNC
     13  f0a0					      ENDIF
     14  f0a0				   .CYCLES    SET	.CYCLES - 3
     15  f0a0					      ENDIF
     16  f0a0
     17  f0a0				  -	      REPEAT	.CYCLES / 2
     18  f0a0				  -	      nop
     19  f0a0					      REPEND
    309  f0a0
    310  f0a0		       a9 e0		      LDA	#$E0
    311  f0a2		       85 24		      STA	HMBL
    312  f0a4		       85 22		      STA	HMM0
    313  f0a6		       85 23		      STA	HMM1
    314  f0a8		       85 02		      STA	WSYNC
    315  f0aa		       85 2a		      STA	HMOVE
    316  f0ac		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    317  f0ae		       85 2b		      STA	HMCLR
      0  f0b0					      SLEEP	30
      1  f0b0				   .CYCLES    SET	30
      2  f0b0
      3  f0b0				  -	      IF	.CYCLES < 2
      4  f0b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b0				  -	      ERR
      6  f0b0					      ENDIF
      7  f0b0
      8  f0b0				  -	      IF	.CYCLES & 1
      9  f0b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b0				  -	      nop	0
     11  f0b0				  -	      ELSE
     12  f0b0				  -	      bit	VSYNC
     13  f0b0				  -	      ENDIF
     14  f0b0				  -.CYCLES    SET	.CYCLES - 3
     15  f0b0					      ENDIF
     16  f0b0
     17  f0b0					      REPEAT	.CYCLES / 2
     18  f0b0		       ea		      nop
     17  f0b0					      REPEND
     18  f0b1		       ea		      nop
     17  f0b1					      REPEND
     18  f0b2		       ea		      nop
     17  f0b2					      REPEND
     18  f0b3		       ea		      nop
     17  f0b3					      REPEND
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     19  f0bf					      REPEND
    319  f0bf		       85 10		      STA	RESP0
    320  f0c1							;SLEEP 5 ; Temporarily move player 1 away.
    321  f0c1		       85 11		      STA	RESP1
    322  f0c3
    323  f0c3				   WaitResetToEnd
    324  f0c3		       ad 84 02 	      LDA	INTIM
    325  f0c6		       d0 fb		      BNE	WaitResetToEnd
    326  f0c8
    327  f0c8				   MainLoop
    328  f0c8		       a9 02		      LDA	#2
    329  f0ca		       85 00		      STA	VSYNC
    330  f0cc		       85 02		      STA	WSYNC
    331  f0ce		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    332  f0d0				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    333  f0d0		       a9 01		      LDA	#%00000001	;3
    334  f0d2		       24 df		      BIT	TextFlickerMode	;2
    335  f0d4		       f0 05		      BEQ	TextSideFrameZero	;2
    336  f0d6		       25 8d		      AND	FrameCount1	;2
    337  f0d8		       4c dd f0 	      JMP	StoreTextSize	;3
    338  f0db				   TextSideFrameZero
    339  f0db		       25 8c		      AND	FrameCount0	;2
    340  f0dd				   StoreTextSize
    341  f0dd		       85 de		      STA	TextSide	;3
    342  f0df
    343  f0df				   PrepareMaxHMove
      0  f0df					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0df				   .CYCLES    SET	18
      2  f0df
      3  f0df				  -	      IF	.CYCLES < 2
      4  f0df				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0df				  -	      ERR
      6  f0df					      ENDIF
      7  f0df
      8  f0df				  -	      IF	.CYCLES & 1
      9  f0df				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0df				  -	      nop	0
     11  f0df				  -	      ELSE
     12  f0df				  -	      bit	VSYNC
     13  f0df				  -	      ENDIF
     14  f0df				  -.CYCLES    SET	.CYCLES - 3
     15  f0df					      ENDIF
     16  f0df
     17  f0df					      REPEAT	.CYCLES / 2
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     17  f0e1					      REPEND
     18  f0e2		       ea		      nop
     17  f0e2					      REPEND
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     19  f0e8					      REPEND
    345  f0e8		       a9 80		      LDA	#$80
    346  f0ea		       85 24		      STA	HMBL
    347  f0ec		       85 22		      STA	HMM0
    348  f0ee		       85 23		      STA	HMM1
    349  f0f0		       85 20		      STA	HMP0
    350  f0f2		       85 21		      STA	HMP1
    351  f0f4		       85 02		      STA	WSYNC
    352  f0f6		       85 2a		      STA	HMOVE	; 1/10			
    353  f0f8
    354  f0f8				   ConfigVBlankTimer
    355  f0f8		       a5 c6		      LDA	GameMode
    356  f0fa		       c9 10		      CMP	#MAX_GAME_MODE
    357  f0fc		       f0 05		      BEQ	SetVblankTimerQrCode
    358  f0fe		       a9 29		      LDA	#VBLANK_TIMER
    359  f100		       4c 05 f1 	      JMP	SetVblankTimer
    360  f103				   SetVblankTimerQrCode
    361  f103		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    362  f105
    363  f105				   SetVblankTimer
    364  f105		       85 02		      STA	WSYNC	;3
    365  f107		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    366  f109		       8d 96 02 	      STA	TIM64T	;3	
    367  f10c		       a9 00		      LDA	#0	;2
    368  f10e		       85 00		      STA	VSYNC	;3	
    369  f110
    370  f110				   RandomizeGame
    371  f110		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    372  f112		       d0 2d		      BNE	EndRandomizeGame
    373  f114		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    374  f116		       29 02		      AND	#%00000010
    375  f118		       f0 24		      BEQ	DeterministicGame
    376  f11a		       a6 96		      LDX	TrafficOffset1 + 2
    377  f11c		       bd 00 fe 	      LDA	AesTable,X
    378  f11f		       45 8c		      EOR	FrameCount0
    379  f121		       85 96		      STA	TrafficOffset1 + 2
    380  f123		       85 a6		      STA	OpTrafficOffset1 + 2
    381  f125		       a6 9a		      LDX	TrafficOffset2 + 2
    382  f127		       bd 00 fe 	      LDA	AesTable,X
    383  f12a		       45 8c		      EOR	FrameCount0
    384  f12c		       85 9a		      STA	TrafficOffset2 + 2
    385  f12e		       85 aa		      STA	OpTrafficOffset2 + 2
    386  f130		       a6 9e		      LDX	TrafficOffset3 + 2
    387  f132		       bd 00 fe 	      LDA	AesTable,X
    388  f135		       45 8c		      EOR	FrameCount0
    389  f137		       85 9e		      STA	TrafficOffset3 + 2
    390  f139		       85 ae		      STA	OpTrafficOffset3 + 2
    391  f13b		       4c 41 f1 	      JMP	EndRandomizeGame
    392  f13e
    393  f13e				   DeterministicGame
    394  f13e		       20 b0 f7 	      JSR	DefaultOffsets
    395  f141
    396  f141				   EndRandomizeGame
    397  f141
    398  f141
    399  f141							; Move this in the code and save cycles, for some reason spliting is breaking...
    400  f141		       a2 08		      LDX	#8
    401  f143				   BurnAllHMove
    402  f143		       85 02		      STA	WSYNC	;3
    403  f145		       85 2a		      STA	HMOVE	; 3/10 
    404  f147		       ca		      DEX
    405  f148		       d0 f9		      BNE	BurnAllHMove
    406  f14a		       85 02		      STA	WSYNC	;3
    407  f14c		       85 2b		      STA	HMCLR	; 
    408  f14e
    409  f14e				   CountFrame
    410  f14e		       e6 8c		      INC	FrameCount0	; 5
    411  f150		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    412  f152		       e6 8d		      INC	FrameCount1	; 5 
    413  f154				   SkipIncFC1
    414  f154
    415  f154				   CallDrawQrCode
    416  f154		       a5 c6		      LDA	GameMode
    417  f156		       c9 10		      CMP	#MAX_GAME_MODE
    418  f158		       d0 03		      BNE	TestIsGameRunning
    419  f15a		       4c 64 fc 	      JMP	DrawQrCode
    420  f15d
    421  f15d							;Does not update the game if not running
    422  f15d				   TestIsGameRunning
    423  f15d		       a5 bd		      LDA	GameStatus	;3
    424  f15f		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    425  f161				   SelectCarWithDpadCall		; Only do it when game is stoped
    426  f161		       a2 00		      LDX	#0	; Player 0
    427  f163		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    428  f165		       85 b0		      STA	Tmp0
    429  f167		       20 1f fa 	      JSR	SelectCarWithDpad
    430  f16a		       e8		      INX		; Player 1
    431  f16b		       20 1f fa 	      JSR	SelectCarWithDpad
    432  f16e
    433  f16e				   CallConfigureCarSprites
    434  f16e		       20 ed f9 	      JSR	ConfigureCarSprites
    435  f171				   SkipUpdateLogicJump
    436  f171		       4c b6 f2 	      JMP	SkipUpdateLogic
    437  f174				   ContinueWithGameLogic
    438  f174
    439  f174				   EverySecond		; 64 frames to be more precise
    440  f174		       a9 3f		      LDA	#%00111111
    441  f176		       25 8c		      AND	FrameCount0
    442  f178		       d0 06		      BNE	SkipEverySecondAction
    443  f17a		       c5 b8		      CMP	CountdownTimer
    444  f17c		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    445  f17e		       c6 b8		      DEC	CountdownTimer
    446  f180				   SkipEverySecondAction
    447  f180
    448  f180				   ChangeTextFlickerMode
    449  f180		       a5 bc		      LDA	SwitchDebounceCounter
    450  f182		       d0 0d		      BNE	EndChangeTextFlickerMode
    451  f184		       ad 82 02 	      LDA	SWCHB
    452  f187		       29 02		      AND	#%00000010	;Game select
    453  f189		       d0 06		      BNE	EndChangeTextFlickerMode
    454  f18b		       e6 df		      INC	TextFlickerMode
    455  f18d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    456  f18f		       85 bc		      STA	SwitchDebounceCounter
    457  f191				   EndChangeTextFlickerMode
    458  f191
    459  f191				   BreakOnTimeOver		; Uses LDX as the breaking speed
    460  f191		       a2 00		      LDX	#0
    461  f193		       a5 b8		      LDA	CountdownTimer
    462  f195		       d0 0b		      BNE	Break
    463  f197		       a4 c7		      LDY	CurrentCarId
    464  f199		       a5 8c		      LDA	FrameCount0
    465  f19b		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    466  f19e		       d0 02		      BNE	Break
    467  f1a0		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    468  f1a2
    469  f1a2				   Break
    470  f1a2		       a9 20		      LDA	#%00100000	;Down in controller
    471  f1a4		       2c 80 02 	      BIT	SWCHA
    472  f1a7		       d0 0e		      BNE	BreakNonZero
    473  f1a9		       a5 0c		      LDA	INPT4	;3
    474  f1ab		       10 08		      BPL	BreakWhileAccelerating
    475  f1ad		       a4 d5		      LDY	Gear
    476  f1af		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    477  f1b2		       4c b7 f1 	      JMP	BreakNonZero
    478  f1b5				   BreakWhileAccelerating		; Allow better control while breaking.
    479  f1b5		       a2 05		      LDX	(#BREAK_SPEED / 2)
    480  f1b7
    481  f1b7				   BreakNonZero
    482  f1b7		       e0 00		      CPX	#0
    483  f1b9		       f0 2b		      BEQ	SkipBreak
    484  f1bb		       86 b0		      STX	Tmp0
    485  f1bd
    486  f1bd				   DecreaseSpeed
    487  f1bd		       38		      SEC
    488  f1be		       a5 f0		      LDA	Player0SpeedL
    489  f1c0		       e5 b0		      SBC	Tmp0
    490  f1c2		       85 f0		      STA	Player0SpeedL
    491  f1c4		       a5 f2		      LDA	Player0SpeedH
    492  f1c6		       e9 00		      SBC	#0
    493  f1c8		       85 f2		      STA	Player0SpeedH
    494  f1ca
    495  f1ca				   CheckMinSpeed
    496  f1ca		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    497  f1cc		       c9 00		      CMP	#CAR_MIN_SPEED_H
    498  f1ce		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    499  f1d0		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    500  f1d2
    501  f1d2				   CompareLBreakSpeed
    502  f1d2		       a5 f0		      LDA	Player0SpeedL
    503  f1d4		       c9 00		      CMP	#CAR_MIN_SPEED_L
    504  f1d6		       90 03		      BCC	ResetMinSpeed	; Less than memory
    505  f1d8		       4c e3 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    506  f1db
    507  f1db				   ResetMinSpeed
    508  f1db		       a9 00		      LDA	#CAR_MIN_SPEED_H
    509  f1dd		       85 f2		      STA	Player0SpeedH
    510  f1df		       a9 00		      LDA	#CAR_MIN_SPEED_L
    511  f1e1		       85 f0		      STA	Player0SpeedL
    512  f1e3
    513  f1e3				   SkipAccelerateIfBreaking
    514  f1e3		       4c 28 f2 	      JMP	SkipAccelerate
    515  f1e6				   SkipBreak
    516  f1e6
    517  f1e6				   Acelerates
    518  f1e6		       a5 b8		      LDA	CountdownTimer
    519  f1e8		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    520  f1ea
    521  f1ea				   ContinueAccelerateTest
    522  f1ea		       a5 0c		      LDA	INPT4	;3
    523  f1ec		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    524  f1ee		       a9 10		      LDA	#%00010000	;UP in controller
    525  f1f0		       2c 80 02 	      BIT	SWCHA
    526  f1f3		       d0 33		      BNE	SkipAccelerate
    527  f1f5
    528  f1f5				   IncreaseCarSpeed
    529  f1f5		       a2 02		      LDX	#2
    530  f1f7		       a4 c7		      LDY	CurrentCarId
    531  f1f9				   IncreaseCarSpeedLoop
    532  f1f9							;Adds speed
    533  f1f9		       18		      CLC
    534  f1fa		       a5 dc		      LDA	AccelerateBuffer
    535  f1fc		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    536  f1ff		       85 dc		      STA	AccelerateBuffer
    537  f201		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    538  f203		       e6 f0		      INC	Player0SpeedL
    539  f205		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    540  f207		       e6 f2		      INC	Player0SpeedH
    541  f209				   ContinueIncreaseSpeedLoop
    542  f209		       ca		      DEX
    543  f20a		       d0 ed		      BNE	IncreaseCarSpeedLoop
    544  f20c				   SkipIncreaseCarSpeed
    545  f20c
    546  f20c				   CheckIfAlreadyMaxSpeed
    547  f20c		       a5 f2		      LDA	Player0SpeedH
    548  f20e		       c9 02		      CMP	#CAR_MAX_SPEED_H
    549  f210		       90 16		      BCC	SkipAccelerate	; less than my max speed
    550  f212		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    551  f214							;High bit is max, compare the low
    552  f214		       a4 c7		      LDY	CurrentCarId
    553  f216		       a5 f0		      LDA	Player0SpeedL
    554  f218		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    555  f21b		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    556  f21d							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    557  f21d
    558  f21d				   ResetToMaxSpeed		; Speed is more, or is already max
    559  f21d		       a9 02		      LDA	#CAR_MAX_SPEED_H
    560  f21f		       85 f2		      STA	Player0SpeedH
    561  f221		       a4 c7		      LDY	CurrentCarId
    562  f223		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    563  f226		       85 f0		      STA	Player0SpeedL
    564  f228				   SkipAccelerate
    565  f228
    566  f228				   InitUpdateOffsets
    567  f228		       a2 00		      LDX	#0	; Memory Offset 24 bit
    568  f22a		       a0 00		      LDY	#0	; Line Speeds 16 bits
    569  f22c		       a5 91		      LDA	TrafficOffset0 + 1	;
    570  f22e		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    571  f230		       a5 c6		      LDA	GameMode
    572  f232		       29 04		      AND	#%00000100	; GameModes with high delta
    573  f234		       f0 02		      BEQ	UpdateOffsets
    574  f236		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    575  f238
    576  f238				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    577  f238		       38		      SEC
    578  f239		       a5 f0		      LDA	Player0SpeedL
    579  f23b		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    580  f23e		       85 b0		      STA	Tmp0
    581  f240		       c8		      INY
    582  f241		       a5 f2		      LDA	Player0SpeedH
    583  f243		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    584  f246		       85 b1		      STA	Tmp1
    585  f248		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    586  f24a		       e9 00		      SBC	#0
    587  f24c		       85 b2		      STA	Tmp2
    588  f24e
    589  f24e				   AddsTheResult
    590  f24e		       18		      CLC
    591  f24f		       a5 b0		      LDA	Tmp0
    592  f251		       75 90		      ADC	TrafficOffset0,X
    593  f253		       95 90		      STA	TrafficOffset0,X
    594  f255		       e8		      INX
    595  f256		       a5 b1		      LDA	Tmp1
    596  f258		       75 90		      ADC	TrafficOffset0,X
    597  f25a		       95 90		      STA	TrafficOffset0,X
    598  f25c		       e8		      INX
    599  f25d		       a5 b2		      LDA	Tmp2	; Carry
    600  f25f		       75 90		      ADC	TrafficOffset0,X
    601  f261		       95 90		      STA	TrafficOffset0,X
    602  f263		       90 06		      BCC	CalculateOffsetCache
    603  f265		       e0 02		      CPX	#2	;MSB offset 0
    604  f267		       d0 02		      BNE	CalculateOffsetCache
    605  f269		       e6 ba		      INC	Traffic0Msb
    606  f26b
    607  f26b				   CalculateOffsetCache
    608  f26b		       e8		      INX
    609  f26c		       38		      SEC
    610  f26d		       69 00		      ADC	#0	;Increment by one
    611  f26f		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    612  f271
    613  f271				   PrepareNextUpdateLoop
    614  f271		       c8		      INY
    615  f272		       e8		      INX
    616  f273		       e0 10		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    617  f275		       d0 c1		      BNE	UpdateOffsets
    618  f277
    619  f277				   ConfigureOpponentLine		; Temporary
    620  f277		       a9 14		      LDA	#20	; Extract to constant
    621  f279		       85 cf		      STA	OpponentLine
    622  f27b
    623  f27b				   CallTestColisionAndMove
    624  f27b		       a2 00		      LDX	#0	; Player 0
    625  f27d		       a9 40		      LDA	#%01000000	; Left player 0
    626  f27f		       85 b0		      STA	Tmp0
    627  f281		       a9 80		      LDA	#%10000000	; right player 0
    628  f283		       85 b1		      STA	Tmp1
    629  f285							; Colision with traffic, each player check different flags,
    630  f285		       a5 8c		      LDA	FrameCount0
    631  f287		       29 01		      AND	#%00000001
    632  f289		       f0 07		      BEQ	SkipColisionPlayer0	; Test colision after draw frame
    633  f28b		       a5 01		      LDA	CXM1P
    634  f28d		       4a		      LSR
    635  f28e		       05 00		      ORA	CXM0P
    636  f290		       05 02		      ORA	CXP0FB
    637  f292							; ORA CXPPMM ; Collision between players will have its own rules
    638  f292				   SkipColisionPlayer0		; Should not colide on opponent side.
    639  f292		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    640  f294		       85 b2		      STA	Tmp2
    641  f296		       20 31 fa 	      JSR	TestCollisionAndMove
    642  f299
    643  f299		       e8		      INX		; player 1
    644  f29a		       a9 04		      LDA	#%00000100	; Left player 1
    645  f29c		       85 b0		      STA	Tmp0
    646  f29e		       a9 08		      LDA	#%00001000	; right player 1
    647  f2a0		       85 b1		      STA	Tmp1
    648  f2a2		       a5 8c		      LDA	FrameCount0
    649  f2a4		       29 01		      AND	#%00000001
    650  f2a6		       d0 07		      BNE	SkipColisionPlayer1	; Test colision after draw frame
    651  f2a8		       a5 00		      LDA	CXM0P
    652  f2aa		       4a		      LSR
    653  f2ab		       05 01		      ORA	CXM1P
    654  f2ad		       05 03		      ORA	CXP1FB
    655  f2af				   SkipColisionPlayer1
    656  f2af		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    657  f2b1		       85 b2		      STA	Tmp2
    658  f2b3		       20 31 fa 	      JSR	TestCollisionAndMove
    659  f2b6
    660  f2b6				   SkipUpdateLogic		; Continue here if not paused
    661  f2b6
    662  f2b6				   CalculateGear
    663  f2b6		       a5 f0		      LDA	Player0SpeedL	;3
    664  f2b8		       29 80		      AND	#%10000000	;2
    665  f2ba		       05 f2		      ORA	Player0SpeedH	;3
    666  f2bc		       18		      CLC		;2
    667  f2bd		       2a		      ROL		;2
    668  f2be		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    669  f2c0		       85 d5		      STA	Gear
    670  f2c2
    671  f2c2				   EndProcessingBorder
    672  f2c2
    673  f2c2				   ProcessScoreFontColor
    674  f2c2		       a6 cb		      LDX	ScoreFontColorHoldChange
    675  f2c4		       f0 06		      BEQ	ResetScoreFontColor
    676  f2c6		       ca		      DEX
    677  f2c7		       86 cb		      STX	ScoreFontColorHoldChange
    678  f2c9		       4c d0 f2 	      JMP	SkipScoreFontColor
    679  f2cc				   ResetScoreFontColor
    680  f2cc		       a9 f9		      LDA	#SCORE_FONT_COLOR
    681  f2ce		       85 c9		      STA	ScoreFontColor
    682  f2d0				   SkipScoreFontColor
    683  f2d0
    684  f2d0				   IsGameOver
    685  f2d0		       a5 b8		      LDA	CountdownTimer
    686  f2d2		       05 f0		      ORA	Player0SpeedL
    687  f2d4		       05 f2		      ORA	Player0SpeedH
    688  f2d6		       d0 0b		      BNE	IsCheckpoint
    689  f2d8		       a9 01		      LDA	#1
    690  f2da		       85 cb		      STA	ScoreFontColorHoldChange
    691  f2dc		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    692  f2de		       85 c9		      STA	ScoreFontColor
    693  f2e0		       4c 15 f3 	      JMP	SkipIsTimeOver
    694  f2e3
    695  f2e3				   IsCheckpoint
    696  f2e3		       a5 cd		      LDA	NextCheckpoint
    697  f2e5		       c5 92		      CMP	TrafficOffset0 + 2
    698  f2e7		       d0 20		      BNE	SkipIsCheckpoint
    699  f2e9		       18		      CLC
    700  f2ea		       69 10		      ADC	#CHECKPOINT_INTERVAL
    701  f2ec		       85 cd		      STA	NextCheckpoint
    702  f2ee		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    703  f2f0		       85 c9		      STA	ScoreFontColor
    704  f2f2		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    705  f2f4		       85 cb		      STA	ScoreFontColorHoldChange
    706  f2f6		       a5 b8		      LDA	CountdownTimer
    707  f2f8		       18		      CLC
    708  f2f9		       65 c0		      ADC	CheckpointTime
    709  f2fb		       85 b8		      STA	CountdownTimer
    710  f2fd		       90 04		      BCC	JumpSkipTimeOver
    711  f2ff		       a9 ff		      LDA	#$FF
    712  f301		       85 b8		      STA	CountdownTimer	; Does not overflow!
    713  f303				   JumpSkipTimeOver
    714  f303		       20 76 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    715  f306		       4c 15 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    716  f309				   SkipIsCheckpoint
    717  f309
    718  f309				   IsTimeOver
    719  f309		       a5 b8		      LDA	CountdownTimer
    720  f30b		       d0 08		      BNE	SkipIsTimeOver
    721  f30d		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    722  f30f		       85 cb		      STA	ScoreFontColorHoldChange
    723  f311		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    724  f313		       85 c9		      STA	ScoreFontColor
    725  f315				   SkipIsTimeOver
    726  f315
    727  f315		       20 ed f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    728  f318
    729  f318				   PrintEasterEggCondition
    730  f318		       a5 8d		      LDA	FrameCount1
    731  f31a		       29 38		      AND	#%00111000
    732  f31c		       05 bd		      ORA	GameStatus
    733  f31e		       c9 38		      CMP	#%00111000
    734  f320		       d0 06		      BNE	ChooseTextSide
    735  f322		       20 e3 f7 	      JSR	PrintEasterEgg
    736  f325		       4c 17 f4 	      JMP	RightScoreWriteEnd
    737  f328
    738  f328							;Could be done during on vblank to save this comparisson time (before draw score), 
    739  f328							;but I am saving vblank cycles for now, in case of 2 players.
    740  f328				   ChooseTextSide		; 
    741  f328		       a5 de		      LDA	TextSide	;3
    742  f32a		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    743  f32c		       4c ad f3 	      JMP	RightScoreWrite
    744  f32f
    745  f32f				   LeftScoreWrite
    746  f32f		       a5 c9		      LDA	ScoreFontColor
    747  f331		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    748  f333		       f0 4e		      BEQ	PrintCheckpoint
    749  f335		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    750  f337		       f0 52		      BEQ	PrintStartGame
    751  f339		       a5 bd		      LDA	GameStatus
    752  f33b		       f0 56		      BEQ	PrintHellwayLeft
    753  f33d				   WriteDistance		;Not optimized yet, ugly code.
    754  f33d				   Digit0Distance
    755  f33d		       a5 91		      LDA	TrafficOffset0 + 1	;3
    756  f33f		       4a		      LSR		; 2
    757  f340		       4a		      LSR		; 2
    758  f341		       4a		      LSR		; 2
    759  f342		       4a		      LSR		; 2
    760  f343		       aa		      TAX		; 2
    761  f344		       bd be fd 	      LDA	FontLookup,X	;4
    762  f347		       85 d3		      STA	ScoreD3	;3
    763  f349
    764  f349				   Digit1Distance
    765  f349		       a5 92		      LDA	TrafficOffset0 + 2	;3
    766  f34b		       29 0f		      AND	#%00001111	;2
    767  f34d		       aa		      TAX		; 2
    768  f34e		       bd be fd 	      LDA	FontLookup,X	;4 
    769  f351		       85 d2		      STA	ScoreD2	;3
    770  f353
    771  f353				   Digit2Distance
    772  f353		       a5 92		      LDA	TrafficOffset0 + 2	;3
    773  f355		       4a		      LSR		; 2
    774  f356		       4a		      LSR		; 2
    775  f357		       4a		      LSR		; 2
    776  f358		       4a		      LSR		; 2
    777  f359		       aa		      TAX		; 2
    778  f35a		       bd be fd 	      LDA	FontLookup,X	;4
    779  f35d		       85 d1		      STA	ScoreD1	;3
    780  f35f
    781  f35f				   Digit3Distance
    782  f35f		       a5 ba		      LDA	Traffic0Msb	;3
    783  f361		       29 0f		      AND	#%00001111	;2
    784  f363		       aa		      TAX		; 2
    785  f364		       bd be fd 	      LDA	FontLookup,X	;4 
    786  f367		       85 d0		      STA	ScoreD0	;3
    787  f369
    788  f369				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    789  f369		       a5 ba		      LDA	Traffic0Msb
    790  f36b		       29 f0		      AND	#%11110000	;2
    791  f36d		       d0 07		      BNE	DrawDistanceExtraDigit
    792  f36f		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    793  f371		       85 d4		      STA	ScoreD4	;3
    794  f373		       4c 80 f3 	      JMP	EndDrawDistance
    795  f376				   DrawDistanceExtraDigit
    796  f376		       4a		      LSR		; 2
    797  f377		       4a		      LSR		; 2
    798  f378		       4a		      LSR		; 2
    799  f379		       4a		      LSR		; 2
    800  f37a		       aa		      TAX		; 2
    801  f37b		       bd be fd 	      LDA	FontLookup,X	;4
    802  f37e		       85 d4		      STA	ScoreD4	;3
    803  f380
    804  f380				   EndDrawDistance
    805  f380		       4c 17 f4 	      JMP	RightScoreWriteEnd	;3
    806  f383
    807  f383				   PrintCheckpoint
    808  f383		       a2 00		      LDX	#<CheckpointText
    809  f385		       20 c5 f7 	      JSR	PrintStaticText
    810  f388		       4c 17 f4 	      JMP	RightScoreWriteEnd	;3
    811  f38b				   PrintStartGame
    812  f38b		       a2 23		      LDX	#<GoText
    813  f38d		       20 c5 f7 	      JSR	PrintStaticText
    814  f390		       4c 17 f4 	      JMP	RightScoreWriteEnd	;3
    815  f393
    816  f393				   PrintHellwayLeft
    817  f393		       a5 8d		      LDA	FrameCount1
    818  f395		       29 01		      AND	#1
    819  f397		       d0 05		      BNE	PrintCreditsLeft
    820  f399		       a2 05		      LDX	#<HellwayLeftText
    821  f39b		       4c a0 f3 	      JMP	PrintGameMode
    822  f39e				   PrintCreditsLeft
    823  f39e		       a2 0f		      LDX	#<OpbText
    824  f3a0
    825  f3a0				   PrintGameMode
    826  f3a0		       20 c5 f7 	      JSR	PrintStaticText
    827  f3a3		       a6 c6		      LDX	GameMode
    828  f3a5		       bd be fd 	      LDA	FontLookup,X	;4 
    829  f3a8		       85 d0		      STA	ScoreD0	;3
    830  f3aa		       4c 17 f4 	      JMP	RightScoreWriteEnd	;3
    831  f3ad
    832  f3ad				   RightScoreWrite
    833  f3ad		       a5 bd		      LDA	GameStatus
    834  f3af		       f0 45		      BEQ	PrintHellwayRight
    835  f3b1		       a5 c9		      LDA	ScoreFontColor
    836  f3b3		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    837  f3b5		       f0 52		      BEQ	PrintGameOver
    838  f3b7				   Digit0Timer
    839  f3b7		       a5 b8		      LDA	CountdownTimer	;3
    840  f3b9		       29 0f		      AND	#%00001111	;2
    841  f3bb		       aa		      TAX		; 2
    842  f3bc		       bd be fd 	      LDA	FontLookup,X	;4 
    843  f3bf		       85 d1		      STA	ScoreD1	;3
    844  f3c1
    845  f3c1				   Digit1Timer
    846  f3c1		       a5 b8		      LDA	CountdownTimer	;3
    847  f3c3		       4a		      LSR		; 2
    848  f3c4		       4a		      LSR		; 2
    849  f3c5		       4a		      LSR		; 2
    850  f3c6		       4a		      LSR		; 2
    851  f3c7		       aa		      TAX		; 2
    852  f3c8		       bd be fd 	      LDA	FontLookup,X	;4
    853  f3cb		       85 d0		      STA	ScoreD0	;3
    854  f3cd
    855  f3cd		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    856  f3cf		       85 d2		      STA	ScoreD2	;3
    857  f3d1
    858  f3d1				   Digit0Speed
    859  f3d1		       a5 f0		      LDA	Player0SpeedL
    860  f3d3		       29 3c		      AND	#%00111100	;2 Discard the last bits
    861  f3d5		       4a		      LSR		; 2
    862  f3d6		       4a		      LSR		; 2
    863  f3d7		       aa		      TAX		; 2
    864  f3d8		       bd be fd 	      LDA	FontLookup,X	;4
    865  f3db		       85 d4		      STA	ScoreD4	;3
    866  f3dd
    867  f3dd				   Digit1Speed
    868  f3dd		       a5 f0		      LDA	Player0SpeedL
    869  f3df		       29 c0		      AND	#%11000000	;2 Discard the last bits
    870  f3e1		       18		      CLC
    871  f3e2		       2a		      ROL		;First goes into carry
    872  f3e3		       2a		      ROL
    873  f3e4		       2a		      ROL
    874  f3e5		       85 b0		      STA	Tmp0
    875  f3e7		       a5 f2		      LDA	Player0SpeedH
    876  f3e9		       0a		      ASL
    877  f3ea		       0a		      ASL
    878  f3eb		       05 b0		      ORA	Tmp0
    879  f3ed		       aa		      TAX		; 2
    880  f3ee		       bd be fd 	      LDA	FontLookup,X	;4
    881  f3f1		       85 d3		      STA	ScoreD3	;3
    882  f3f3		       4c 17 f4 	      JMP	RightScoreWriteEnd
    883  f3f6
    884  f3f6				   PrintHellwayRight
    885  f3f6		       a5 8d		      LDA	FrameCount1
    886  f3f8		       29 01		      AND	#1
    887  f3fa		       d0 05		      BNE	PrintCreditsRight
    888  f3fc		       a2 0a		      LDX	#<HellwayRightText
    889  f3fe		       4c 03 f4 	      JMP	PrintRightIntro
    890  f401				   PrintCreditsRight
    891  f401		       a2 14		      LDX	#<YearText
    892  f403				   PrintRightIntro
    893  f403		       20 c5 f7 	      JSR	PrintStaticText
    894  f406		       4c 17 f4 	      JMP	RightScoreWriteEnd
    895  f409				   PrintGameOver
    896  f409		       a5 8c		      LDA	FrameCount0
    897  f40b		       30 05		      BMI	PrintOverText
    898  f40d		       a2 19		      LDX	#<GameText
    899  f40f		       4c 14 f4 	      JMP	StoreGameOverText
    900  f412				   PrintOverText
    901  f412		       a2 1e		      LDX	#<OverText
    902  f414				   StoreGameOverText
    903  f414		       20 c5 f7 	      JSR	PrintStaticText
    904  f417				   RightScoreWriteEnd
    905  f417
    906  f417
    907  f417				   ScoreBackgroundColor
    908  f417		       a2 00		      LDX	#0
    909  f419		       ad 82 02 	      LDA	SWCHB
    910  f41c		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    911  f41e		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    912  f420		       f0 04		      BEQ	BlackAndWhiteScoreBg
    913  f422		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    914  f424		       a2 03		      LDX	#BACKGROUND_COLOR
    915  f426				   BlackAndWhiteScoreBg
    916  f426		       85 b2		      STA	Tmp2	; Score Background
    917  f428		       86 b3		      STX	Tmp3	; Traffic Background
    918  f42a
    919  f42a				   ConfigurePFForScore
    920  f42a							;LDA #SCORE_BACKGROUND_COLOR; Done above
    921  f42a		       85 09		      STA	COLUBK
    922  f42c		       20 38 f7 	      JSR	ClearAll
    923  f42f		       a9 02		      LDA	#%00000010	; Score mode
    924  f431		       85 0a		      STA	CTRLPF
    925  f433		       a5 de		      LDA	TextSide	;3
    926  f435		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    927  f437				   LeftScoreOn
    928  f437		       a5 c9		      LDA	ScoreFontColor
    929  f439		       85 07		      STA	COLUP1
    930  f43b		       a5 b2		      LDA	Tmp2
    931  f43d		       85 06		      STA	COLUP0
    932  f43f		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    933  f441		       85 b1		      STA	Tmp1
    934  f443		       4c 52 f4 	      JMP	CallWaitForVblankEnd
    935  f446				   RightScoreOn
    936  f446		       a5 c9		      LDA	ScoreFontColor
    937  f448		       85 06		      STA	COLUP0
    938  f44a		       a5 b2		      LDA	Tmp2
    939  f44c		       85 07		      STA	COLUP1
    940  f44e		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    941  f450		       85 b1		      STA	Tmp1
    942  f452
    943  f452							; After here we are going to update the screen, No more heavy code
    944  f452				   CallWaitForVblankEnd
    945  f452		       20 c6 f9 	      JSR	WaitForVblankEnd
    946  f455
    947  f455				   DrawScoreHud
    948  f455		       20 55 f8 	      JSR	PrintScore
    949  f458
    950  f458		       85 02		      STA	WSYNC
    951  f45a
    952  f45a		       a5 0c		      LDA	INPT4	;3
    953  f45c		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    954  f45e		       a5 c9		      LDA	ScoreFontColor
    955  f460		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    956  f462		       d0 0a		      BNE	WaitAnotherScoreLine
    957  f464		       a5 de		      LDA	TextSide	;3
    958  f466		       d0 03		      BNE	LeftScoreOnGameOver
    959  f468		       4c a0 f9 	      JMP	DrawGameOverScreenRight
    960  f46b				   LeftScoreOnGameOver
    961  f46b		       4c 12 f9 	      JMP	DrawGameOverScreenLeft
    962  f46e
    963  f46e				   WaitAnotherScoreLine
    964  f46e		       85 02		      STA	WSYNC
    965  f470
    966  f470				   PrepareForTraffic
    967  f470		       20 4a f7 	      JSR	ClearPF	; 32
    968  f473
    969  f473		       85 02		      STA	WSYNC
    970  f475		       85 02		      STA	WSYNC
    971  f477
    972  f477		       a9 30		      LDA	#%00110000	; 2 Score mode
    973  f479		       85 0a		      STA	CTRLPF	;3
    974  f47b
    975  f47b		       a5 c2		      LDA	TrafficColor	;3
    976  f47d		       85 08		      STA	COLUPF	;3
    977  f47f
    978  f47f		       a9 96		      LDA	#PLAYER1_COLOR	;2
    979  f481		       85 07		      STA	COLUP1	;3
    980  f483
    981  f483		       a5 c9		      LDA	ScoreFontColor	;3
    982  f485		       85 06		      STA	COLUP0	;3
    983  f487
    984  f487		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    985  f489
    986  f489		       20 4a f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    987  f48c
    988  f48c		       a6 b3		      LDX	Tmp3	; Background color.
    989  f48e
      0  f48e					      SLEEP	9	; Odd sleep destroys flags
      1  f48e				   .CYCLES    SET	9
      2  f48e
      3  f48e				  -	      IF	.CYCLES < 2
      4  f48e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f48e				  -	      ERR
      6  f48e					      ENDIF
      7  f48e
      8  f48e					      IF	.CYCLES & 1
      9  f48e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f48e				  -	      nop	0
     11  f48e					      ELSE
     12  f48e		       24 00		      bit	VSYNC
     13  f490					      ENDIF
     14  f490				   .CYCLES    SET	.CYCLES - 3
     15  f490					      ENDIF
     16  f490
     17  f490					      REPEAT	.CYCLES / 2
     18  f490		       ea		      nop
     17  f490					      REPEND
     18  f491		       ea		      nop
     17  f491					      REPEND
     18  f492		       ea		      nop
     19  f493					      REPEND
    991  f493
    992  f493		       a5 8c		      LDA	FrameCount0	;Brach flag
    993  f495		       29 01		      AND	#%00000001
    994  f497
    995  f497		       86 09		      STX	COLUBK	;3
    996  f499		       d0 05		      BNE	OpDrawCache	;2
    997  f49b		       4c 5a f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    998  f49e							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    999  f49e
   1000  f49e							;main scanline loop...
   1001  f49e				   OpScanLoop
   1002  f49e		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1003  f4a0
   1004  f4a0							;Start of next line!			
   1005  f4a0				   OpDrawCache		;63 Is the last line going to the top of the next frame?
   1006  f4a0
   1007  f4a0		       a5 80		      LDA	GRP0Cache	;3
   1008  f4a2		       85 1b		      STA	GRP0	;3
   1009  f4a4
   1010  f4a4		       a5 84		      LDA	GRP1Cache	;3
   1011  f4a6		       85 1c		      STA	GRP1	;3
   1012  f4a8
   1013  f4a8		       a5 85		      LDA	ENABLCache	;3
   1014  f4aa		       85 1f		      STA	ENABL	;3
   1015  f4ac
   1016  f4ac		       a5 86		      LDA	ENAM0Cache	;3
   1017  f4ae		       85 1d		      STA	ENAM0	;3
   1018  f4b0
   1019  f4b0		       a5 87		      LDA	ENAM1Cache	;3
   1020  f4b2		       85 1e		      STA	ENAM1	;3
   1021  f4b4
   1022  f4b4		       a5 81		      LDA	PF0Cache	;3
   1023  f4b6		       85 0d		      STA	PF0	;3
   1024  f4b8
   1025  f4b8		       a9 00		      LDA	#0	;2
   1026  f4ba							;STA PF0	     ;3
   1027  f4ba		       85 80		      STA	GRP0Cache	;3
   1028  f4bc		       85 86		      STA	ENAM0Cache	;3
   1029  f4be		       85 85		      STA	ENABLCache	;3
   1030  f4c0		       85 87		      STA	ENAM1Cache	; 3
   1031  f4c2							;STA GRP1Cache ;3
   1032  f4c2		       85 0d		      STA	PF0	;3
   1033  f4c4							;STA PF2	     ;3
   1034  f4c4
   1035  f4c4		       a5 83		      LDA	PF2Cache	;3
   1036  f4c6		       85 0f		      STA	PF2	;3
   1037  f4c8
   1038  f4c8				   OpDrawCar0
   1039  f4c8		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1040  f4ca		       b0 04		      BCS	OpSkipDrawCar	;2
   1041  f4cc		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1042  f4ce		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
   1043  f4d0				   OpSkipDrawCar
   1044  f4d0
   1045  f4d0							;BEQ DrawTraffic3
   1046  f4d0				   OpDrawTraffic1		; 33
   1047  f4d0		       98		      TYA		; 2
   1048  f4d1		       18		      CLC		; 2 
   1049  f4d2		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
   1050  f4d4		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1051  f4d6		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1052  f4d8		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
   1053  f4da		       4c df f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1054  f4dd				   OpEorOffsetWithCarry
   1055  f4dd		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1056  f4df				   OpAfterEorOffsetWithCarry		;17
   1057  f4df		       aa		      TAX		;2
   1058  f4e0		       bd 00 fe 	      LDA	AesTable,X	; 4
   1059  f4e3		       c5 be		      CMP	TrafficChance	;3
   1060  f4e5		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1061  f4e7		       a9 ff		      LDA	#$FF	;2
   1062  f4e9		       85 86		      STA	ENAM0Cache	;3
   1063  f4eb				   OpFinishDrawTraffic1
   1064  f4eb
   1065  f4eb				   OpErasePF2
   1066  f4eb		       a9 00		      LDA	#0
   1067  f4ed		       85 0f		      STA	PF2
   1068  f4ef
   1069  f4ef				   OpDrawTraffic2		; 33
   1070  f4ef		       98		      TYA		; 2
   1071  f4f0		       18		      CLC		; 2 
   1072  f4f1		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
   1073  f4f3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1074  f4f5		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1075  f4f7		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
   1076  f4f9		       4c fe f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1077  f4fc				   OpEorOffsetWithCarry2
   1078  f4fc		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1079  f4fe				   OpAfterEorOffsetWithCarry2		;17
   1080  f4fe		       aa		      TAX		;2
   1081  f4ff		       bd 00 fe 	      LDA	AesTable,X	; 4
   1082  f502		       c5 be		      CMP	TrafficChance	;3
   1083  f504		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1084  f506		       a9 02		      LDA	#%00000010	;2
   1085  f508		       85 85		      STA	ENABLCache	;3
   1086  f50a				   OpFinishDrawTraffic2
   1087  f50a
   1088  f50a							;STA WSYNC ;65 / 137
   1089  f50a
   1090  f50a							; LDA Tmp0 ; Flicker this line if drawing car
   1091  f50a							; BEQ FinishDrawTraffic4
   1092  f50a				   OpDrawTraffic3		; 33
   1093  f50a		       98		      TYA		; 2
   1094  f50b		       18		      CLC		; 2 
   1095  f50c		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
   1096  f50e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1097  f510		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1098  f512		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
   1099  f514		       4c 19 f5 	      JMP	OpAfterEorOffsetWithCarry3	; 3
   1100  f517				   OpEorOffsetWithCarry3
   1101  f517		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1102  f519				   OpAfterEorOffsetWithCarry3		;17
   1103  f519		       aa		      TAX		;2
   1104  f51a		       bd 00 fe 	      LDA	AesTable,X	; 4
   1105  f51d		       c5 be		      CMP	TrafficChance	;3
   1106  f51f		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1107  f521		       a9 02		      LDA	#%00000010	;2
   1108  f523		       85 87		      STA	ENAM1Cache
   1109  f525				   OpFinishDrawTraffic3
   1110  f525
   1111  f525				   OpDrawOponent		;26
   1112  f525		       84 b0		      STY	Tmp0	;3
   1113  f527		       a4 cf		      LDY	OpponentLine	;3
   1114  f529		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1115  f52b		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1116  f52d				   OpDrawOpponent
   1117  f52d		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1118  f52f		       85 80		      STA	GRP0Cache	;3
   1119  f531		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1120  f533		       a4 b0		      LDY	Tmp0	;3
   1121  f535		       4c 49 f5 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
   1122  f538				   OpSkipDrawOpponent
   1123  f538		       c6 cf		      DEC	OpponentLine	;5
   1124  f53a		       a4 b0		      LDY	Tmp0	;3
   1125  f53c
   1126  f53c
   1127  f53c				   OpDrawTraffic0		; 21 2pe
   1128  f53c		       98		      TYA		; 2
   1129  f53d		       18		      CLC		; 2 
   1130  f53e		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1131  f540		       29 08		      AND	#%00001000	;2
   1132  f542		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1133  f544				   OpHasBorderP0
   1134  f544		       a9 70		      LDA	#%01110000	; 2
   1135  f546		       4c 4b f5 	      JMP	OpStoreBorderP0	; 3
   1136  f549				   OpHasNoBorderP0
   1137  f549		       a9 00		      LDA	#0	; 2
   1138  f54b				   OpStoreBorderP0
   1139  f54b		       85 81		      STA	PF0Cache	; 3
   1140  f54d		       85 83		      STA	PF2Cache	; 3
   1141  f54f
   1142  f54f				   OpSkipDrawTraffic0
   1143  f54f
   1144  f54f				   OpWhileScanLoop
   1145  f54f		       88		      DEY		;2
   1146  f550		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1147  f552		       4c 9e f4 	      JMP	OpScanLoop	;3
   1148  f555				   OpFinishScanLoop		; 7 209 of 222
   1149  f555		       4c 0d f6 	      JMP	FinishScanLoop
   1150  f558
   1151  f558							;main scanline loop...
   1152  f558				   ScanLoop
   1153  f558		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1154  f55a
   1155  f55a							;Start of next line!			
   1156  f55a				   DrawCache		;63 Is the last line going to the top of the next frame?
   1157  f55a		       a5 81		      LDA	PF0Cache	;3
   1158  f55c		       85 0d		      STA	PF0	;3
   1159  f55e
   1160  f55e		       a5 80		      LDA	GRP0Cache	;3
   1161  f560		       85 1b		      STA	GRP0	;3
   1162  f562
   1163  f562		       a5 84		      LDA	GRP1Cache	;3
   1164  f564		       85 1c		      STA	GRP1	;3
   1165  f566
   1166  f566		       a5 86		      LDA	ENAM0Cache	;3
   1167  f568		       85 1d		      STA	ENAM0	;3
   1168  f56a
   1169  f56a		       a5 85		      LDA	ENABLCache	;3
   1170  f56c		       85 1f		      STA	ENABL	;3
   1171  f56e
   1172  f56e		       a5 87		      LDA	ENAM1Cache	;3
   1173  f570		       85 1e		      STA	ENAM1	;3
   1174  f572
   1175  f572		       a5 83		      LDA	PF2Cache	;3
   1176  f574		       85 0f		      STA	PF2	;3
   1177  f576
   1178  f576		       a9 00		      LDA	#0	;2
   1179  f578		       85 0d		      STA	PF0	;3
   1180  f57a		       85 84		      STA	GRP1Cache	;3
   1181  f57c		       85 85		      STA	ENABLCache	;3
   1182  f57e		       85 86		      STA	ENAM0Cache	;3
   1183  f580		       85 87		      STA	ENAM1Cache	; 3
   1184  f582							;STA GRP0Cache
   1185  f582		       85 0f		      STA	PF2	;3
   1186  f584
   1187  f584				   DrawCar0
   1188  f584		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1189  f586		       b0 04		      BCS	SkipDrawCar	;2
   1190  f588		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1191  f58a		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1192  f58c				   SkipDrawCar
   1193  f58c
   1194  f58c							;BEQ DrawTraffic3
   1195  f58c				   DrawTraffic1 		; 33
   1196  f58c		       98		      TYA		; 2
   1197  f58d		       18		      CLC		; 2 
   1198  f58e		       65 95		      ADC	TrafficOffset1 + 1	;3
   1199  f590		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1200  f592		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1201  f594		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1202  f596		       4c 9b f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1203  f599				   EorOffsetWithCarry
   1204  f599		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1205  f59b				   AfterEorOffsetWithCarry		;17
   1206  f59b		       aa		      TAX		;2
   1207  f59c		       bd 00 fe 	      LDA	AesTable,X	; 4
   1208  f59f		       c5 be		      CMP	TrafficChance	;3
   1209  f5a1		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1210  f5a3		       a9 ff		      LDA	#$FF	;2
   1211  f5a5		       85 86		      STA	ENAM0Cache	;3
   1212  f5a7				   FinishDrawTraffic1
   1213  f5a7
   1214  f5a7				   DrawTraffic2 		; 33
   1215  f5a7		       98		      TYA		; 2
   1216  f5a8		       18		      CLC		; 2 
   1217  f5a9		       65 99		      ADC	TrafficOffset2 + 1	;3
   1218  f5ab		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1219  f5ad		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1220  f5af		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1221  f5b1		       4c b6 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1222  f5b4				   EorOffsetWithCarry2
   1223  f5b4		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1224  f5b6				   AfterEorOffsetWithCarry2		;17
   1225  f5b6		       aa		      TAX		;2
   1226  f5b7		       bd 00 fe 	      LDA	AesTable,X	; 4
   1227  f5ba		       c5 be		      CMP	TrafficChance	;3
   1228  f5bc		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1229  f5be		       a9 02		      LDA	#%00000010	;2
   1230  f5c0		       85 85		      STA	ENABLCache	;3
   1231  f5c2				   FinishDrawTraffic2
   1232  f5c2
   1233  f5c2							;STA WSYNC ;65 / 137
   1234  f5c2
   1235  f5c2							; LDA Tmp0 ; Flicker this line if drawing car
   1236  f5c2							; BEQ FinishDrawTraffic4
   1237  f5c2				   DrawTraffic3 		; 33
   1238  f5c2		       98		      TYA		; 2
   1239  f5c3		       18		      CLC		; 2 
   1240  f5c4		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1241  f5c6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1242  f5c8		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1243  f5ca		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1244  f5cc		       4c d1 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1245  f5cf				   EorOffsetWithCarry3
   1246  f5cf		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1247  f5d1				   AfterEorOffsetWithCarry3		;17
   1248  f5d1		       aa		      TAX		;2
   1249  f5d2		       bd 00 fe 	      LDA	AesTable,X	; 4
   1250  f5d5		       c5 be		      CMP	TrafficChance	;3
   1251  f5d7		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1252  f5d9		       a9 02		      LDA	#%00000010	;2
   1253  f5db		       85 87		      STA	ENAM1Cache
   1254  f5dd				   FinishDrawTraffic3
   1255  f5dd
   1256  f5dd
   1257  f5dd				   DrawOponent		;26
   1258  f5dd		       84 b0		      STY	Tmp0	;3
   1259  f5df		       a4 cf		      LDY	OpponentLine	;3
   1260  f5e1		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1261  f5e3		       b0 0b		      BCS	SkipDrawOpponent	;2
   1262  f5e5				   DrawOpponent
   1263  f5e5		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1264  f5e7		       85 84		      STA	GRP1Cache	;3
   1265  f5e9		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1266  f5eb		       a4 b0		      LDY	Tmp0	;3
   1267  f5ed		       4c 01 f6 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1268  f5f0				   SkipDrawOpponent
   1269  f5f0		       c6 cf		      DEC	OpponentLine	;5
   1270  f5f2		       a4 b0		      LDY	Tmp0	;3
   1271  f5f4
   1272  f5f4				   DrawTraffic0 		; 21 2pe
   1273  f5f4		       98		      TYA		; 2
   1274  f5f5		       18		      CLC		; 2 
   1275  f5f6		       65 91		      ADC	TrafficOffset0 + 1	;3
   1276  f5f8		       29 08		      AND	#%00001000	;2
   1277  f5fa		       f0 05		      BEQ	HasNoBorderP0	;3
   1278  f5fc				   HasBorderP0
   1279  f5fc		       a9 70		      LDA	#%01110000	; 2
   1280  f5fe		       4c 03 f6 	      JMP	StoreBorderP0	; 3
   1281  f601				   HasNoBorderP0
   1282  f601		       a9 00		      LDA	#0	; 2
   1283  f603				   StoreBorderP0
   1284  f603		       85 81		      STA	PF0Cache	; 3
   1285  f605		       85 83		      STA	PF2Cache	; 3
   1286  f607
   1287  f607				   SkipDrawTraffic0
   1288  f607
   1289  f607				   WhileScanLoop
   1290  f607		       88		      DEY		;2
   1291  f608		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1292  f60a		       4c 58 f5 	      JMP	ScanLoop	;3
   1293  f60d				   FinishScanLoop		; 7 209 of 222
   1294  f60d
   1295  f60d		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1296  f60f		       20 59 f7 	      JSR	LoadAll
   1297  f612		       85 02		      STA	WSYNC	; do stuff!
   1298  f614		       85 02		      STA	WSYNC
   1299  f616		       85 02		      STA	WSYNC
   1300  f618							;42 cycles to use here
   1301  f618
   1302  f618				   PrepareOverscan
   1303  f618		       a9 02		      LDA	#2
   1304  f61a		       85 02		      STA	WSYNC
   1305  f61c		       85 01		      STA	VBLANK
   1306  f61e
   1307  f61e		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1308  f620		       8d 96 02 	      STA	TIM64T
   1309  f623
   1310  f623				   LeftSound		;41
   1311  f623		       a5 b8		      LDA	CountdownTimer	;3
   1312  f625		       f0 1b		      BEQ	EngineOff	;2
   1313  f627		       a6 d5		      LDX	Gear
   1314  f629		       a5 f0		      LDA	Player0SpeedL	;3
   1315  f62b		       4a		      LSR		;2
   1316  f62c		       4a		      LSR		;2
   1317  f62d		       4a		      LSR		;2
   1318  f62e		       29 0f		      AND	#%00001111	;2
   1319  f630		       85 b0		      STA	Tmp0	;3
   1320  f632		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1321  f635		       38		      SEC		;2
   1322  f636		       e5 b0		      SBC	Tmp0	;3
   1323  f638		       85 17		      STA	AUDF0	;3
   1324  f63a		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1325  f63d		       85 15		      STA	AUDC0	;3
   1326  f63f		       4c 46 f6 	      JMP	EndLeftSound	;3
   1327  f642				   EngineOff
   1328  f642		       a9 00		      LDA	#0
   1329  f644		       85 15		      STA	AUDC0
   1330  f646
   1331  f646				   EndLeftSound
   1332  f646
   1333  f646
   1334  f646				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1335  f646		       a5 c9		      LDA	ScoreFontColor	;3
   1336  f648		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1337  f64a		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1338  f64c		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1339  f64e		       f0 29		      BEQ	PlayCheckpoint	;2
   1340  f650		       a5 b4		      LDA	CollisionCounter	;3
   1341  f652		       c9 e0		      CMP	#$E0	;2
   1342  f654		       b0 14		      BCS	PlayColision	;2
   1343  f656		       a5 cd		      LDA	NextCheckpoint	;3
   1344  f658		       38		      SEC		;2
   1345  f659		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1346  f65b		       c9 02		      CMP	#$02	;2
   1347  f65d		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1348  f65f		       a5 b8		      LDA	CountdownTimer	; 3
   1349  f661		       f0 53		      BEQ	MuteRightSound	;2
   1350  f663		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1351  f665		       90 37		      BCC	PlayWarnTimeEnding	;4
   1352  f667		       4c b6 f6 	      JMP	MuteRightSound	;3
   1353  f66a				   PlayColision
   1354  f66a		       a9 1f		      LDA	#31
   1355  f66c		       85 18		      STA	AUDF1
   1356  f66e		       a9 08		      LDA	#8
   1357  f670		       85 16		      STA	AUDC1
   1358  f672		       a9 08		      LDA	#8
   1359  f674		       85 1a		      STA	AUDV1
   1360  f676		       4c ba f6 	      JMP	EndRightSound
   1361  f679
   1362  f679				   PlayCheckpoint
   1363  f679		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1364  f67b		       4a		      LSR		;2
   1365  f67c		       4a		      LSR		;2
   1366  f67d		       4a		      LSR		;2
   1367  f67e		       85 18		      STA	AUDF1	;3
   1368  f680		       a9 0c		      LDA	#12	;2
   1369  f682		       85 16		      STA	AUDC1	;3
   1370  f684		       a9 06		      LDA	#6	;2
   1371  f686		       85 1a		      STA	AUDV1	;3
   1372  f688		       4c ba f6 	      JMP	EndRightSound	;3
   1373  f68b
   1374  f68b				   PlayBeforeCheckpoint
   1375  f68b		       a5 8c		      LDA	FrameCount0	;3
   1376  f68d		       29 1c		      AND	#%00011100	;2
   1377  f68f		       09 03		      ORA	#%00000011	;2
   1378  f691		       85 18		      STA	AUDF1	;3
   1379  f693		       a9 0c		      LDA	#12	;2
   1380  f695		       85 16		      STA	AUDC1	;3
   1381  f697		       a9 03		      LDA	#3	;2
   1382  f699		       85 1a		      STA	AUDV1	;3
   1383  f69b		       4c ba f6 	      JMP	EndRightSound	;3
   1384  f69e
   1385  f69e				   PlayWarnTimeEnding
   1386  f69e		       a5 8c		      LDA	FrameCount0	;3
   1387  f6a0		       29 04		      AND	#%00000100	;2
   1388  f6a2		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1389  f6a4		       18		      CLC		;2
   1390  f6a5		       a9 0a		      LDA	#10	;2
   1391  f6a7		       65 b8		      ADC	CountdownTimer	;2
   1392  f6a9		       85 18		      STA	AUDF1	;3
   1393  f6ab		       a9 0c		      LDA	#12	;2
   1394  f6ad		       85 16		      STA	AUDC1	;3
   1395  f6af		       a9 03		      LDA	#3	;2
   1396  f6b1		       85 1a		      STA	AUDV1	;3
   1397  f6b3		       4c ba f6 	      JMP	EndRightSound	;3
   1398  f6b6
   1399  f6b6				   MuteRightSound
   1400  f6b6		       a9 00		      LDA	#0
   1401  f6b8		       85 1a		      STA	AUDV1
   1402  f6ba				   EndRightSound
   1403  f6ba
   1404  f6ba							;Read Fire Button before, will make it start the game for now.
   1405  f6ba				   StartGame
   1406  f6ba		       a5 0c		      LDA	INPT4	;3
   1407  f6bc		       25 0d		      AND	INPT5	;3 player 
   1408  f6be		       30 31		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1409  f6c0		       a5 8c		      LDA	FrameCount0
   1410  f6c2		       29 01		      AND	#%00000001
   1411  f6c4		       d0 2b		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1412  f6c6		       a5 bd		      LDA	GameStatus	;3
   1413  f6c8		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1414  f6ca		       d0 25		      BNE	SkipGameStart
   1415  f6cc		       a5 c6		      LDA	GameMode
   1416  f6ce		       c9 10		      CMP	#MAX_GAME_MODE
   1417  f6d0		       d0 0b		      BNE	SetGameRunning
   1418  f6d2		       a9 00		      LDA	#0
   1419  f6d4		       85 c6		      STA	GameMode
   1420  f6d6		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1421  f6d8		       85 bc		      STA	SwitchDebounceCounter
   1422  f6da		       4c f1 f6 	      JMP	SkipGameStart
   1423  f6dd				   SetGameRunning
   1424  f6dd		       e6 bd		      INC	GameStatus
   1425  f6df		       a9 00		      LDA	#0	;
   1426  f6e1		       85 8c		      STA	FrameCount0
   1427  f6e3		       85 8d		      STA	FrameCount1
   1428  f6e5		       a9 0a		      LDA	#10
   1429  f6e7		       85 19		      STA	AUDV0
   1430  f6e9		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1431  f6eb		       85 c9		      STA	ScoreFontColor
   1432  f6ed		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1433  f6ef		       85 cb		      STA	ScoreFontColorHoldChange
   1434  f6f1				   SkipGameStart
   1435  f6f1
   1436  f6f1				   ReadSwitches
   1437  f6f1		       a6 bc		      LDX	SwitchDebounceCounter
   1438  f6f3		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1439  f6f5		       a9 01		      LDA	#%00000001
   1440  f6f7		       2c 82 02 	      BIT	SWCHB
   1441  f6fa		       d0 07		      BNE	SkipReset
   1442  f6fc		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1443  f6fe		       85 bc		      STA	SwitchDebounceCounter
   1444  f700		       4c 30 f7 	      JMP	OverScanWaitBeforeReset
   1445  f703				   SkipReset
   1446  f703
   1447  f703				   GameModeSelect
   1448  f703		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1449  f705		       d0 1c		      BNE	SkipGameSelect
   1450  f707		       20 85 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1451  f70a				   ContinueGameSelect
   1452  f70a		       a9 02		      LDA	#%00000010
   1453  f70c		       2c 82 02 	      BIT	SWCHB
   1454  f70f		       d0 12		      BNE	SkipGameSelect
   1455  f711		       a6 c6		      LDX	GameMode
   1456  f713		       e0 10		      CPX	#MAX_GAME_MODE
   1457  f715		       f0 04		      BEQ	ResetGameMode
   1458  f717		       e8		      INX
   1459  f718		       4c 1d f7 	      JMP	StoreGameMode
   1460  f71b				   ResetGameMode
   1461  f71b		       a2 00		      LDX	#0
   1462  f71d				   StoreGameMode
   1463  f71d		       86 c6		      STX	GameMode
   1464  f71f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1465  f721		       85 bc		      STA	SwitchDebounceCounter
   1466  f723				   SkipGameSelect
   1467  f723		       4c 28 f7 	      JMP	EndReadSwitches
   1468  f726				   DecrementSwitchDebounceCounter
   1469  f726		       c6 bc		      DEC	SwitchDebounceCounter
   1470  f728				   EndReadSwitches
   1471  f728
   1472  f728				   OverScanWait
   1473  f728		       ad 84 02 	      LDA	INTIM
   1474  f72b		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1475  f72d		       4c c8 f0 	      JMP	MainLoop
   1476  f730
   1477  f730				   OverScanWaitBeforeReset
   1478  f730		       ad 84 02 	      LDA	INTIM
   1479  f733		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1480  f735		       4c 12 f0 	      JMP	Start
   1481  f738
   1482  f738				   Subroutines
   1483  f738
   1484  f738				   ClearAll		; 52
   1485  f738		       a9 00		      LDA	#0	;2
   1486  f73a		       85 1c		      STA	GRP1	;3
   1487  f73c		       85 1f		      STA	ENABL	;3
   1488  f73e		       85 1d		      STA	ENAM0	;3
   1489  f740		       85 1e		      STA	ENAM1	;3
   1490  f742		       85 84		      STA	GRP1Cache	;3
   1491  f744		       85 85		      STA	ENABLCache	;3
   1492  f746		       85 86		      STA	ENAM0Cache	;3
   1493  f748		       85 87		      STA	ENAM1Cache	;3
   1494  f74a
   1495  f74a				   ClearPF		; 26
   1496  f74a		       a9 00		      LDA	#0	;2
   1497  f74c				   ClearPFSkipLDA0
   1498  f74c		       85 0d		      STA	PF0	;3
   1499  f74e		       85 0e		      STA	PF1	;3
   1500  f750		       85 0f		      STA	PF2	;3	
   1501  f752		       85 81		      STA	PF0Cache	;3
   1502  f754		       85 82		      STA	PF1Cache	;3
   1503  f756		       85 83		      STA	PF2Cache	;3 
   1504  f758		       60		      RTS		;6
   1505  f759				   EndClearAll
   1506  f759
   1507  f759				   LoadAll		; 48
   1508  f759		       a5 81		      LDA	PF0Cache	;3
   1509  f75b		       85 0d		      STA	PF0	;3
   1510  f75d
   1511  f75d		       a5 82		      LDA	PF1Cache	;3
   1512  f75f		       85 0e		      STA	PF1	;3
   1513  f761
   1514  f761		       a5 83		      LDA	PF2Cache	;3
   1515  f763		       85 0f		      STA	PF2	;3
   1516  f765
   1517  f765		       a5 84		      LDA	GRP1Cache	;3
   1518  f767		       85 1c		      STA	GRP1	;3
   1519  f769
   1520  f769		       a5 85		      LDA	ENABLCache	;3
   1521  f76b		       85 1f		      STA	ENABL	;3
   1522  f76d
   1523  f76d		       a5 86		      LDA	ENAM0Cache	;3
   1524  f76f		       85 1d		      STA	ENAM0	;3
   1525  f771
   1526  f771		       a5 87		      LDA	ENAM1Cache	;3
   1527  f773		       85 1e		      STA	ENAM1	;3
   1528  f775
   1529  f775		       60		      RTS		;6
   1530  f776				   EndLoadAll
   1531  f776
   1532  f776				   NextDifficulty
   1533  f776		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1534  f778		       29 01		      AND	#%00000001
   1535  f77a		       d0 24		      BNE	CheckRandomDifficulty
   1536  f77c
   1537  f77c		       a5 c4		      LDA	CurrentDifficulty
   1538  f77e		       18		      CLC
   1539  f77f		       69 01		      ADC	#1
   1540  f781		       29 03		      AND	#%00000011	; 0 to 3
   1541  f783		       85 c4		      STA	CurrentDifficulty
   1542  f785
   1543  f785				   ConfigureDifficulty
   1544  f785		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1545  f787		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1546  f78a		       85 be		      STA	TrafficChance
   1547  f78c		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1548  f78f		       85 c2		      STA	TrafficColor
   1549  f791
   1550  f791		       a5 c6		      LDA	GameMode	;
   1551  f793		       29 01		      AND	#%00000001
   1552  f795		       f0 03		      BEQ	UseNextDifficultyTime
   1553  f797		       4c 9b f7 	      JMP	StoreDifficultyTime
   1554  f79a				   UseNextDifficultyTime
   1555  f79a		       c8		      INY
   1556  f79b				   StoreDifficultyTime
   1557  f79b		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1558  f79e		       85 c0		      STA	CheckpointTime
   1559  f7a0
   1560  f7a0				   CheckRandomDifficulty
   1561  f7a0		       a5 c6		      LDA	GameMode
   1562  f7a2		       29 08		      AND	#%00001000	; Random difficulties
   1563  f7a4		       f0 09		      BEQ	ReturnFromNextDifficulty
   1564  f7a6				   RandomDifficulty
   1565  f7a6		       a6 8c		      LDX	FrameCount0
   1566  f7a8		       bd 00 fe 	      LDA	AesTable,X
   1567  f7ab							;EOR TrafficChance, no need, lets make life simple
   1568  f7ab		       29 3f		      AND	#%00111111
   1569  f7ad		       85 be		      STA	TrafficChance
   1570  f7af
   1571  f7af				   ReturnFromNextDifficulty
   1572  f7af		       60		      RTS
   1573  f7b0				   EndNextDifficulty
   1574  f7b0
   1575  f7b0				   DefaultOffsets
   1576  f7b0		       a9 20		      LDA	#$20
   1577  f7b2		       85 96		      STA	TrafficOffset1 + 2
   1578  f7b4		       85 a6		      STA	OpTrafficOffset1 + 2
   1579  f7b6		       a9 40		      LDA	#$40
   1580  f7b8		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1581  f7ba		       85 aa		      STA	OpTrafficOffset2 + 2
   1582  f7bc		       a9 60		      LDA	#$60
   1583  f7be		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1584  f7c0		       85 ae		      STA	OpTrafficOffset3 + 2
   1585  f7c2		       a9 80		      LDA	#$80
   1586  f7c4		       60		      RTS
   1587  f7c5
   1588  f7c5				   PrintStaticText		; Preload X with the offset referent to StaticText
   1589  f7c5		       bd 00 ff 	      LDA	StaticText,X
   1590  f7c8		       85 d0		      STA	ScoreD0
   1591  f7ca		       e8		      INX
   1592  f7cb		       bd 00 ff 	      LDA	StaticText,X
   1593  f7ce		       85 d1		      STA	ScoreD1
   1594  f7d0		       e8		      INX
   1595  f7d1		       bd 00 ff 	      LDA	StaticText,X
   1596  f7d4		       85 d2		      STA	ScoreD2
   1597  f7d6		       e8		      INX
   1598  f7d7		       bd 00 ff 	      LDA	StaticText,X
   1599  f7da		       85 d3		      STA	ScoreD3
   1600  f7dc		       e8		      INX
   1601  f7dd		       bd 00 ff 	      LDA	StaticText,X
   1602  f7e0		       85 d4		      STA	ScoreD4
   1603  f7e2		       60		      RTS
   1604  f7e3
   1605  f7e3				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1606  f7e3		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1607  f7e5		       85 c9		      STA	ScoreFontColor
   1608  f7e7		       a9 01		      LDA	#1
   1609  f7e9		       85 cb		      STA	ScoreFontColorHoldChange
   1610  f7eb
   1611  f7eb		       a5 8d		      LDA	FrameCount1
   1612  f7ed		       29 07		      AND	#%00000111
   1613  f7ef		       85 b3		      STA	Tmp3
   1614  f7f1							;0 is Zelda Name, (default)
   1615  f7f1		       a9 01		      LDA	#1
   1616  f7f3		       c5 b3		      CMP	Tmp3
   1617  f7f5		       f0 38		      BEQ	PrintZeldaDateLeft
   1618  f7f7
   1619  f7f7		       a9 02		      LDA	#2
   1620  f7f9		       c5 b3		      CMP	Tmp3
   1621  f7fb		       f0 23		      BEQ	PrintPolvinhosLeft
   1622  f7fd
   1623  f7fd		       a9 03		      LDA	#3
   1624  f7ff		       c5 b3		      CMP	Tmp3
   1625  f801		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1626  f803
   1627  f803		       a9 04		      LDA	#4
   1628  f805		       c5 b3		      CMP	Tmp3
   1629  f807		       f0 1c		      BEQ	PrintIvonneLeft
   1630  f809
   1631  f809		       a9 05		      LDA	#5
   1632  f80b		       c5 b3		      CMP	Tmp3
   1633  f80d		       f0 2a		      BEQ	PrintIvonneDateLeft
   1634  f80f
   1635  f80f		       a9 06		      LDA	#6
   1636  f811		       c5 b3		      CMP	Tmp3
   1637  f813		       f0 15		      BEQ	PrintArtLeft
   1638  f815
   1639  f815		       a9 07		      LDA	#7
   1640  f817		       c5 b3		      CMP	Tmp3
   1641  f819		       f0 23		      BEQ	PrintLeonardoLeft
   1642  f81b
   1643  f81b				   PrintZeldaLeft
   1644  f81b		       a2 28		      LDX	#<ZeldaTextLeft
   1645  f81d		       4c 43 f8 	      JMP	ProcessPrintEasterEgg
   1646  f820				   PrintPolvinhosLeft
   1647  f820		       a2 3c		      LDX	#<PolvinhosTextLeft
   1648  f822		       4c 43 f8 	      JMP	ProcessPrintEasterEgg
   1649  f825				   PrintIvonneLeft
   1650  f825		       a2 50		      LDX	#<IvonneTextLeft
   1651  f827		       4c 43 f8 	      JMP	ProcessPrintEasterEgg
   1652  f82a				   PrintArtLeft
   1653  f82a		       a2 64		      LDX	#<PaperArtTextLeft
   1654  f82c		       4c 43 f8 	      JMP	ProcessPrintEasterEgg
   1655  f82f
   1656  f82f				   PrintZeldaDateLeft
   1657  f82f		       a2 32		      LDX	#<ZeldaDateLeft
   1658  f831		       4c 43 f8 	      JMP	ProcessPrintEasterEgg
   1659  f834				   PrintPolvinhosDateLeft
   1660  f834		       a2 46		      LDX	#<PolvinhosDateLeft
   1661  f836		       4c 43 f8 	      JMP	ProcessPrintEasterEgg
   1662  f839				   PrintIvonneDateLeft
   1663  f839		       a2 5a		      LDX	#<IvonneDateLeft
   1664  f83b		       4c 43 f8 	      JMP	ProcessPrintEasterEgg
   1665  f83e				   PrintLeonardoLeft
   1666  f83e		       a2 6e		      LDX	#<LeonardoTextLeft
   1667  f840		       4c 43 f8 	      JMP	ProcessPrintEasterEgg
   1668  f843
   1669  f843				   ProcessPrintEasterEgg
   1670  f843		       a5 8c		      LDA	FrameCount0	;3
   1671  f845		       29 01		      AND	#%00000001	;2
   1672  f847		       d0 03		      BNE	TranformIntoRightText
   1673  f849		       4c 51 f8 	      JMP	PrintEasterEggText
   1674  f84c				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1675  f84c		       8a		      TXA
   1676  f84d		       18		      CLC
   1677  f84e		       69 05		      ADC	#HALF_TEXT_SIZE
   1678  f850		       aa		      TAX
   1679  f851
   1680  f851				   PrintEasterEggText
   1681  f851		       20 c5 f7 	      JSR	PrintStaticText
   1682  f854		       60		      RTS
   1683  f855
   1684  f855				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1685  f855		       a2 00		      LDX	#0
   1686  f857		       a0 04		      LDY	#FONT_OFFSET
   1687  f859
   1688  f859				   ScoreLoop		; 20 
   1689  f859		       85 02		      STA	WSYNC	;2
   1690  f85b
   1691  f85b		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1692  f85d		       85 0d		      STA	PF0	;3
   1693  f85f
   1694  f85f		       a5 82		      LDA	PF1Cache	;3
   1695  f861		       85 0e		      STA	PF1	;3
   1696  f863
   1697  f863		       a5 83		      LDA	PF2Cache	;3
   1698  f865		       85 0f		      STA	PF2	;3
   1699  f867
   1700  f867				   DrawScoreD0		; 15
   1701  f867		       a6 d0		      LDX	ScoreD0	; 3
   1702  f869		       bd 00 fd 	      LDA	Font,X	;4
   1703  f86c		       85 81		      STA	PF0Cache	;3
   1704  f86e		       c6 d0		      DEC	ScoreD0	;5
   1705  f870
   1706  f870				   DrawScoreD1		; 23	
   1707  f870		       a6 d1		      LDX	ScoreD1	; 3
   1708  f872		       bd 00 fd 	      LDA	Font,X	;4
   1709  f875		       0a		      ASL		;2
   1710  f876		       0a		      ASL		;2
   1711  f877		       0a		      ASL		;2
   1712  f878		       0a		      ASL		;2
   1713  f879		       85 82		      STA	PF1Cache	;3
   1714  f87b		       c6 d1		      DEC	ScoreD1	;5
   1715  f87d
   1716  f87d				   DrawScoreD2		; 20
   1717  f87d		       a6 d2		      LDX	ScoreD2	; 3
   1718  f87f		       bd 00 fd 	      LDA	Font,X	;4
   1719  f882		       29 0f		      AND	#%00001111	;2
   1720  f884		       05 82		      ORA	PF1Cache	;3
   1721  f886		       85 82		      STA	PF1Cache	;3
   1722  f888		       c6 d2		      DEC	ScoreD2	;5
   1723  f88a
   1724  f88a				   DrawScoreD3		; 23
   1725  f88a		       a6 d3		      LDX	ScoreD3	; 3
   1726  f88c		       bd 00 fd 	      LDA	Font,X	;4
   1727  f88f		       4a		      LSR		;2
   1728  f890		       4a		      LSR		;2
   1729  f891		       4a		      LSR		;2
   1730  f892		       4a		      LSR		;2
   1731  f893		       85 83		      STA	PF2Cache	;3
   1732  f895		       c6 d3		      DEC	ScoreD3	;5
   1733  f897
   1734  f897				   DrawScoreD4		; 20
   1735  f897		       a6 d4		      LDX	ScoreD4	; 3
   1736  f899		       bd 00 fd 	      LDA	Font,X	;4
   1737  f89c		       29 f0		      AND	#%11110000	;2
   1738  f89e		       05 83		      ORA	PF2Cache	;3
   1739  f8a0		       85 83		      STA	PF2Cache	;3
   1740  f8a2		       c6 d4		      DEC	ScoreD4	;5
   1741  f8a4
   1742  f8a4
   1743  f8a4		       88		      DEY		;2
   1744  f8a5		       10 b2		      BPL	ScoreLoop	;4
   1745  f8a7
   1746  f8a7		       85 02		      STA	WSYNC
   1747  f8a9		       20 59 f7 	      JSR	LoadAll
   1748  f8ac		       60		      RTS		; 6
   1749  f8ad
   1750  f8ad				   PrintRightDecimalDigits
   1751  f8ad		       b9 00 00 	      LDA	0,Y
   1752  f8b0		       4a		      LSR
   1753  f8b1		       4a		      LSR
   1754  f8b2		       4a		      LSR
   1755  f8b3		       4a		      LSR
   1756  f8b4		       aa		      TAX
   1757  f8b5		       bd be fd 	      LDA	FontLookup,X	;4
   1758  f8b8		       85 d2		      STA	ScoreD2	;3
   1759  f8ba
   1760  f8ba		       b9 00 00 	      LDA	0,Y
   1761  f8bd		       29 0f		      AND	#%00001111
   1762  f8bf		       aa		      TAX
   1763  f8c0		       bd be fd 	      LDA	FontLookup,X	;4
   1764  f8c3		       85 d3		      STA	ScoreD3	;3
   1765  f8c5
   1766  f8c5		       c8		      INY
   1767  f8c6		       b9 00 00 	      LDA	0,Y
   1768  f8c9		       4a		      LSR
   1769  f8ca		       4a		      LSR
   1770  f8cb		       4a		      LSR
   1771  f8cc		       4a		      LSR
   1772  f8cd		       aa		      TAX
   1773  f8ce		       bd be fd 	      LDA	FontLookup,X	;4
   1774  f8d1		       85 d0		      STA	ScoreD0	;3
   1775  f8d3
   1776  f8d3		       b9 00 00 	      LDA	0,Y
   1777  f8d6		       29 0f		      AND	#%00001111
   1778  f8d8		       aa		      TAX
   1779  f8d9		       bd be fd 	      LDA	FontLookup,X	;4
   1780  f8dc		       85 d1		      STA	ScoreD1	;3
   1781  f8de
   1782  f8de		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1783  f8e0		       85 d4		      STA	ScoreD4
   1784  f8e2		       60		      RTS
   1785  f8e3
   1786  f8e3				   PrintLastLeftDecimalDigits
   1787  f8e3		       b9 00 00 	      LDA	0,Y
   1788  f8e6		       4a		      LSR
   1789  f8e7		       4a		      LSR
   1790  f8e8		       4a		      LSR
   1791  f8e9		       4a		      LSR
   1792  f8ea		       aa		      TAX
   1793  f8eb		       bd be fd 	      LDA	FontLookup,X	;4
   1794  f8ee		       85 d3		      STA	ScoreD3	;3
   1795  f8f0		       b9 00 00 	      LDA	0,Y
   1796  f8f3		       29 0f		      AND	#%00001111
   1797  f8f5		       aa		      TAX
   1798  f8f6		       bd be fd 	      LDA	FontLookup,X	;4
   1799  f8f9		       85 d4		      STA	ScoreD4	;3
   1800  f8fb		       60		      RTS
   1801  f8fc
   1802  f8fc				   PrintZerosLeft
   1803  f8fc		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1804  f8fe		       85 d2		      STA	ScoreD2
   1805  f900		       85 d3		      STA	ScoreD3
   1806  f902		       85 d4		      STA	ScoreD4
   1807  f904		       60		      RTS
   1808  f905
   1809  f905				   DrawGameOverScoreLine
   1810  f905		       85 02		      STA	WSYNC
   1811  f907		       20 55 f8 	      JSR	PrintScore
   1812  f90a		       85 02		      STA	WSYNC
   1813  f90c		       85 02		      STA	WSYNC
   1814  f90e		       20 4a f7 	      JSR	ClearPF
   1815  f911		       60		      RTS
   1816  f912
   1817  f912				   DrawGameOverScreenLeft
   1818  f912		       85 02		      STA	WSYNC
   1819  f914		       20 4a f7 	      JSR	ClearPF
   1820  f917
   1821  f917				   DrawGlideTimerLeft
   1822  f917		       20 d9 f9 	      JSR	Sleep8Lines
   1823  f91a		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1824  f91c		       85 06		      STA	COLUP0
   1825  f91e		       85 02		      STA	WSYNC
   1826  f920		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1827  f922		       85 d0		      STA	ScoreD0
   1828  f924		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1829  f926		       85 d1		      STA	ScoreD1
   1830  f928		       20 fc f8 	      JSR	PrintZerosLeft
   1831  f92b		       20 05 f9 	      JSR	DrawGameOverScoreLine
   1832  f92e
   1833  f92e				   DrawHitCountLeft
   1834  f92e		       20 d9 f9 	      JSR	Sleep8Lines
   1835  f931		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1836  f933		       85 06		      STA	COLUP0
   1837  f935		       85 02		      STA	WSYNC
   1838  f937		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1839  f939		       85 d0		      STA	ScoreD0
   1840  f93b		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1841  f93d		       85 d1		      STA	ScoreD1
   1842  f93f		       20 fc f8 	      JSR	PrintZerosLeft
   1843  f942		       20 05 f9 	      JSR	DrawGameOverScoreLine
   1844  f945
   1845  f945				   DrawCheckpointCountLeft
   1846  f945		       20 d9 f9 	      JSR	Sleep8Lines
   1847  f948		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1848  f94a		       85 06		      STA	COLUP0
   1849  f94c		       85 02		      STA	WSYNC
   1850  f94e		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1851  f950		       85 d0		      STA	ScoreD0
   1852  f952		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1853  f954		       85 d1		      STA	ScoreD1
   1854  f956		       20 fc f8 	      JSR	PrintZerosLeft
   1855  f959		       20 05 f9 	      JSR	DrawGameOverScoreLine
   1856  f95c
   1857  f95c				   DrawGameVersionLeft
   1858  f95c		       20 d9 f9 	      JSR	Sleep8Lines
   1859  f95f		       a9 49		      LDA	#VERSION_COLOR
   1860  f961		       85 06		      STA	COLUP0
   1861  f963
   1862  f963		       a5 c6		      LDA	GameMode
   1863  f965		       aa		      TAX
   1864  f966		       bd be fd 	      LDA	FontLookup,X	;4
   1865  f969		       85 d0		      STA	ScoreD0	;3
   1866  f96b
   1867  f96b		       a5 c7		      LDA	CurrentCarId
   1868  f96d		       aa		      TAX
   1869  f96e		       bd be fd 	      LDA	FontLookup,X	;4
   1870  f971		       85 d1		      STA	ScoreD1	;3
   1871  f973
   1872  f973		       a5 db		      LDA	StartSWCHB
   1873  f975		       29 40		      AND	#%01000000	; P0 difficulty
   1874  f977		       49 40		      EOR	#%01000000	; Reverse bytes
   1875  f979		       2a		      ROL
   1876  f97a		       2a		      ROL
   1877  f97b		       2a		      ROL
   1878  f97c		       18		      CLC
   1879  f97d		       69 0a		      ADC	#10
   1880  f97f		       aa		      TAX
   1881  f980		       bd be fd 	      LDA	FontLookup,X	;4
   1882  f983		       85 d2		      STA	ScoreD2	;3
   1883  f985
   1884  f985		       a5 db		      LDA	StartSWCHB
   1885  f987		       29 80		      AND	#%10000000	; P0 difficulty
   1886  f989		       49 80		      EOR	#%10000000	; Reverse bytes
   1887  f98b		       2a		      ROL
   1888  f98c		       2a		      ROL
   1889  f98d		       18		      CLC
   1890  f98e		       69 0a		      ADC	#10
   1891  f990		       aa		      TAX
   1892  f991		       bd be fd 	      LDA	FontLookup,X	;4
   1893  f994		       85 d3		      STA	ScoreD3	;3
   1894  f996
   1895  f996		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1896  f998		       85 d4		      STA	ScoreD4
   1897  f99a
   1898  f99a		       20 05 f9 	      JSR	DrawGameOverScoreLine
   1899  f99d
   1900  f99d		       4c b6 f9 	      JMP	FinalizeDrawGameOver
   1901  f9a0
   1902  f9a0				   DrawGameOverScreenRight
   1903  f9a0		       85 02		      STA	WSYNC
   1904  f9a2		       20 4a f7 	      JSR	ClearPF
   1905  f9a5
   1906  f9a5				   DrawVersionRight
   1907  f9a5		       20 d9 f9 	      JSR	Sleep8Lines
   1908  f9a8		       a9 49		      LDA	#VERSION_COLOR
   1909  f9aa		       85 07		      STA	COLUP1
   1910  f9ac		       85 02		      STA	WSYNC
   1911  f9ae		       a2 78		      LDX	#<VersionText
   1912  f9b0		       20 c5 f7 	      JSR	PrintStaticText
   1913  f9b3		       20 05 f9 	      JSR	DrawGameOverScoreLine
   1914  f9b6
   1915  f9b6				   FinalizeDrawGameOver
   1916  f9b6		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1917  f9b8		       85 c9		      STA	ScoreFontColor
   1918  f9ba		       20 d0 f9 	      JSR	Sleep4Lines
   1919  f9bd		       20 e0 f9 	      JSR	Sleep32Lines
   1920  f9c0		       20 e0 f9 	      JSR	Sleep32Lines
   1921  f9c3		       4c 18 f6 	      JMP	PrepareOverscan
   1922  f9c6
   1923  f9c6				   WaitForVblankEnd
   1924  f9c6		       ad 84 02 	      LDA	INTIM
   1925  f9c9		       d0 fb		      BNE	WaitForVblankEnd
   1926  f9cb		       85 02		      STA	WSYNC
   1927  f9cd		       85 01		      STA	VBLANK
   1928  f9cf		       60		      RTS
   1929  f9d0
   1930  f9d0				   Sleep4Lines
   1931  f9d0		       85 02		      STA	WSYNC
   1932  f9d2		       85 02		      STA	WSYNC
   1933  f9d4		       85 02		      STA	WSYNC
   1934  f9d6		       85 02		      STA	WSYNC
   1935  f9d8		       60		      RTS
   1936  f9d9
   1937  f9d9				   Sleep8Lines
   1938  f9d9		       20 d0 f9 	      JSR	Sleep4Lines
   1939  f9dc		       20 d0 f9 	      JSR	Sleep4Lines
   1940  f9df		       60		      RTS
   1941  f9e0
   1942  f9e0				   Sleep32Lines
   1943  f9e0		       20 d9 f9 	      JSR	Sleep8Lines
   1944  f9e3		       20 d9 f9 	      JSR	Sleep8Lines
   1945  f9e6		       20 d9 f9 	      JSR	Sleep8Lines
   1946  f9e9		       20 d9 f9 	      JSR	Sleep8Lines
   1947  f9ec		       60		      RTS
   1948  f9ed
   1949  f9ed				   ConfigureCarSprites
   1950  f9ed		       a5 8c		      LDA	FrameCount0
   1951  f9ef		       29 01		      AND	#%00000001
   1952  f9f1		       d0 0b		      BNE	LoadForRightScreenSprites
   1953  f9f3				   LoadForLeftScreenSprites
   1954  f9f3		       a5 c7		      LDA	CurrentCarId
   1955  f9f5		       85 b0		      STA	Tmp0
   1956  f9f7		       a5 c8		      LDA	OpCurrentCarId
   1957  f9f9		       85 b1		      STA	Tmp1
   1958  f9fb		       4c 06 fa 	      JMP	LoadCarSpritesFromIds
   1959  f9fe				   LoadForRightScreenSprites
   1960  f9fe		       a5 c7		      LDA	CurrentCarId
   1961  fa00		       85 b1		      STA	Tmp1
   1962  fa02		       a5 c8		      LDA	OpCurrentCarId
   1963  fa04		       85 b0		      STA	Tmp0
   1964  fa06
   1965  fa06				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1966  fa06		       a4 b0		      LDY	Tmp0
   1967  fa08		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1968  fa0b		       85 d7		      STA	CarSpritePointerL
   1969  fa0d		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1970  fa10		       85 d8		      STA	CarSpritePointerH
   1971  fa12				   ConfigureOpponentCarSprite
   1972  fa12		       a4 b1		      LDY	Tmp1
   1973  fa14		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1974  fa17		       85 d9		      STA	EnemyCarSpritePointerL
   1975  fa19		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1976  fa1c		       85 da		      STA	EnemyCarSpritePointerH
   1977  fa1e		       60		      RTS
   1978  fa1f
   1979  fa1f							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1980  fa1f							;X player 0 or 1
   1981  fa1f				   SelectCarWithDpad
   1982  fa1f		       a0 03		      LDY	#3
   1983  fa21				   SelectCarWithDpadLoop
   1984  fa21		       ad 80 02 	      LDA	SWCHA
   1985  fa24		       25 b0		      AND	Tmp0
   1986  fa26		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1987  fa28		       98		      TYA
   1988  fa29		       95 c7		      STA	CurrentCarId,X
   1989  fa2b				   ContinueSelectCarWithDpadLoop
   1990  fa2b		       46 b0		      LSR	Tmp0
   1991  fa2d		       88		      DEY
   1992  fa2e		       10 f1		      BPL	SelectCarWithDpadLoop
   1993  fa30		       60		      RTS
   1994  fa31
   1995  fa31							; Movement and colision are binded because the car must be moved after duplicate size.
   1996  fa31							; Use X for the player
   1997  fa31							; Tmp0 SWCHA Turn left Mask
   1998  fa31							; Tmp1 SWCHA Turn right Mask
   1999  fa31							; Tmp2 Traffic colision result
   2000  fa31							; Tmp3 Opponent Colision result (Not implemented)
   2001  fa31				   TestCollisionAndMove
   2002  fa31							; Until store the movemnt, Y contains the value to be stored.
   2003  fa31							; see if player0 colides with the rest
   2004  fa31		       a5 b2		      LDA	Tmp2
   2005  fa33		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   2006  fa35		       b5 b4		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   2007  fa37		       d0 25		      BNE	NoCollision
   2008  fa39		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   2009  fa3b		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   2010  fa3d		       f0 1f		      BEQ	NoCollision
   2011  fa3f		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   2012  fa41		       f0 1b		      BEQ	NoCollision
   2013  fa43		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   2014  fa45		       95 b4		      STA	CollisionCounter,X	;and store as colision.
   2015  fa47		       b5 f2		      LDA	Player0SpeedH,X
   2016  fa49		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   2017  fa4b		       a9 10		      LDA	#COLLISION_SPEED_L
   2018  fa4d		       d5 f0		      CMP	Player0SpeedL,X
   2019  fa4f		       b0 04		      BCS	SkipSetColisionSpeedL
   2020  fa51				   SetColisionSpeedL
   2021  fa51		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   2022  fa53		       95 f0		      STA	Player0SpeedL,X
   2023  fa55				   SkipSetColisionSpeedL
   2024  fa55		       a9 00		      LDA	#0
   2025  fa57		       95 f2		      STA	Player0SpeedH,X
   2026  fa59		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   2027  fa5b		       4c ac fa 	      JMP	StoreHMove	; We keep position consistent
   2028  fa5e				   NoCollision
   2029  fa5e
   2030  fa5e				   DecrementCollision
   2031  fa5e		       b5 b4		      LDA	CollisionCounter,X
   2032  fa60		       f0 06		      BEQ	FinishDecrementCollision
   2033  fa62		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   2034  fa64		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   2035  fa66		       d6 b4		      DEC	CollisionCounter,X
   2036  fa68				   FinishDecrementCollision
   2037  fa68
   2038  fa68				   ResetPlayerSize
   2039  fa68		       d0 04		      BNE	FinishResetPlayerSize
   2040  fa6a		       a9 30		      LDA	#%00110000
   2041  fa6c		       95 04		      STA	NUSIZ0,X	;
   2042  fa6e				   FinishResetPlayerSize
   2043  fa6e
   2044  fa6e				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   2045  fa6e		       b5 b4		      LDA	CollisionCounter,X
   2046  fa70		       c9 01		      CMP	#1	; Last frame before reset
   2047  fa72		       d0 05		      BNE	SkipResetPlayerPosition
   2048  fa74		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   2049  fa76		       4c ac fa 	      JMP	StoreHMove
   2050  fa79				   SkipResetPlayerPosition
   2051  fa79
   2052  fa79				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   2053  fa79		       b5 c7		      LDA	CurrentCarId,X
   2054  fa7b		       c9 03		      CMP	#CAR_ID_DRAGSTER
   2055  fa7d		       d0 08		      BNE	PrepareReadXAxis
   2056  fa7f		       a0 00		      LDY	#0
   2057  fa81		       a5 8c		      LDA	FrameCount0
   2058  fa83		       29 01		      AND	#DRAGSTER_TURN_MASK
   2059  fa85		       f0 25		      BEQ	StoreHMove	; Ignore movement on some frames
   2060  fa87
   2061  fa87				   PrepareReadXAxis
   2062  fa87		       a0 00		      LDY	#0
   2063  fa89		       b5 b6		      LDA	Player0X,X
   2064  fa8b				   BeginReadLeft
   2065  fa8b		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
   2066  fa8d		       a5 b0		      LDA	Tmp0	;Left mask set before call (player 0 or 1)
   2067  fa8f		       2c 80 02 	      BIT	SWCHA
   2068  fa92		       d0 07		      BNE	SkipMoveLeft
   2069  fa94		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   2070  fa96		       d6 b6		      DEC	Player0X,X
   2071  fa98		       4c ac fa 	      JMP	StoreHMove	; Cannot move left and right...
   2072  fa9b				   SkipMoveLeft
   2073  fa9b				   BeginReadRight
   2074  fa9b		       b5 b6		      LDA	Player0X,X
   2075  fa9d		       c9 2c		      CMP	#PLAYER_MAX_X
   2076  fa9f		       f0 0b		      BEQ	SkipMoveRight	; At max already
   2077  faa1		       a5 b1		      LDA	Tmp1	;Right mask set before call (player 0 or 1)
   2078  faa3		       2c 80 02 	      BIT	SWCHA
   2079  faa6		       d0 04		      BNE	SkipMoveRight
   2080  faa8		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   2081  faaa		       f6 b6		      INC	Player0X,X
   2082  faac				   SkipMoveRight
   2083  faac				   StoreHMove
   2084  faac		       94 20		      STY	HMP0,X	;set the move for player 0
   2085  faae
   2086  faae				   ClearCollision
   2087  faae		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   2088  fab0		       60		      RTS
   2089  fab1
   2090  fab1							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2091  fc00					      org	$FC00
   2092  fc00				   QrCode1
   2093  fc00		       1f		      .byte.b	#%00011111
   2094  fc01		       10		      .byte.b	#%00010000
   2095  fc02		       17		      .byte.b	#%00010111
   2096  fc03		       17		      .byte.b	#%00010111
   2097  fc04		       17		      .byte.b	#%00010111
   2098  fc05		       10		      .byte.b	#%00010000
   2099  fc06		       1f		      .byte.b	#%00011111
   2100  fc07		       00		      .byte.b	#%00000000
   2101  fc08		       17		      .byte.b	#%00010111
   2102  fc09		       10		      .byte.b	#%00010000
   2103  fc0a		       1d		      .byte.b	#%00011101
   2104  fc0b		       16		      .byte.b	#%00010110
   2105  fc0c		       03		      .byte.b	#%00000011
   2106  fc0d		       19		      .byte.b	#%00011001
   2107  fc0e		       13		      .byte.b	#%00010011
   2108  fc0f		       1c		      .byte.b	#%00011100
   2109  fc10		       0b		      .byte.b	#%00001011
   2110  fc11		       00		      .byte.b	#%00000000
   2111  fc12		       1f		      .byte.b	#%00011111
   2112  fc13		       10		      .byte.b	#%00010000
   2113  fc14		       17		      .byte.b	#%00010111
   2114  fc15		       17		      .byte.b	#%00010111
   2115  fc16		       17		      .byte.b	#%00010111
   2116  fc17		       10		      .byte.b	#%00010000
   2117  fc18		       1f		      .byte.b	#%00011111
   2118  fc19
   2119  fc19				   QrCode2
   2120  fc19		       c3		      .byte.b	#%11000011
   2121  fc1a		       9a		      .byte.b	#%10011010
   2122  fc1b		       82		      .byte.b	#%10000010
   2123  fc1c		       da		      .byte.b	#%11011010
   2124  fc1d		       aa		      .byte.b	#%10101010
   2125  fc1e		       ca		      .byte.b	#%11001010
   2126  fc1f		       f3		      .byte.b	#%11110011
   2127  fc20		       78		      .byte.b	#%01111000
   2128  fc21		       df		      .byte.b	#%11011111
   2129  fc22		       fc		      .byte.b	#%11111100
   2130  fc23		       c7		      .byte.b	#%11000111
   2131  fc24		       98		      .byte.b	#%10011000
   2132  fc25		       23		      .byte.b	#%00100011
   2133  fc26		       b9		      .byte.b	#%10111001
   2134  fc27		       d2		      .byte.b	#%11010010
   2135  fc28		       30		      .byte.b	#%00110000
   2136  fc29		       eb		      .byte.b	#%11101011
   2137  fc2a		       28		      .byte.b	#%00101000
   2138  fc2b		       ab		      .byte.b	#%10101011
   2139  fc2c		       72		      .byte.b	#%01110010
   2140  fc2d		       fa		      .byte.b	#%11111010
   2141  fc2e		       7a		      .byte.b	#%01111010
   2142  fc2f		       32		      .byte.b	#%00110010
   2143  fc30		       3a		      .byte.b	#%00111010
   2144  fc31		       63		      .byte.b	#%01100011
   2145  fc32
   2146  fc32				   QrCode3
   2147  fc32		       98		      .byte.b	#%10011000
   2148  fc33		       c3		      .byte.b	#%11000011
   2149  fc34		       39		      .byte.b	#%00111001
   2150  fc35		       34		      .byte.b	#%00110100
   2151  fc36		       ff		      .byte.b	#%11111111
   2152  fc37		       71		      .byte.b	#%01110001
   2153  fc38		       d5		      .byte.b	#%11010101
   2154  fc39		       d1		      .byte.b	#%11010001
   2155  fc3a		       5f		      .byte.b	#%01011111
   2156  fc3b		       26		      .byte.b	#%00100110
   2157  fc3c		       2d		      .byte.b	#%00101101
   2158  fc3d		       e9		      .byte.b	#%11101001
   2159  fc3e		       d6		      .byte.b	#%11010110
   2160  fc3f		       26		      .byte.b	#%00100110
   2161  fc40		       ba		      .byte.b	#%10111010
   2162  fc41		       03		      .byte.b	#%00000011
   2163  fc42		       dd		      .byte.b	#%11011101
   2164  fc43		       e0		      .byte.b	#%11100000
   2165  fc44		       57		      .byte.b	#%01010111
   2166  fc45		       14		      .byte.b	#%00010100
   2167  fc46		       35		      .byte.b	#%00110101
   2168  fc47		       e5		      .byte.b	#%11100101
   2169  fc48		       b5		      .byte.b	#%10110101
   2170  fc49		       d4		      .byte.b	#%11010100
   2171  fc4a		       97		      .byte.b	#%10010111
   2172  fc4b
   2173  fc4b				   QrCode4
   2174  fc4b		       09		      .byte.b	#%00001001
   2175  fc4c		       0e		      .byte.b	#%00001110
   2176  fc4d		       0f		      .byte.b	#%00001111
   2177  fc4e		       0c		      .byte.b	#%00001100
   2178  fc4f		       0c		      .byte.b	#%00001100
   2179  fc50		       08		      .byte.b	#%00001000
   2180  fc51		       08		      .byte.b	#%00001000
   2181  fc52		       06		      .byte.b	#%00000110
   2182  fc53		       06		      .byte.b	#%00000110
   2183  fc54		       0b		      .byte.b	#%00001011
   2184  fc55		       0f		      .byte.b	#%00001111
   2185  fc56		       04		      .byte.b	#%00000100
   2186  fc57		       08		      .byte.b	#%00001000
   2187  fc58		       0f		      .byte.b	#%00001111
   2188  fc59		       09		      .byte.b	#%00001001
   2189  fc5a		       07		      .byte.b	#%00000111
   2190  fc5b		       05		      .byte.b	#%00000101
   2191  fc5c		       00		      .byte.b	#%00000000
   2192  fc5d		       0f		      .byte.b	#%00001111
   2193  fc5e		       08		      .byte.b	#%00001000
   2194  fc5f		       0b		      .byte.b	#%00001011
   2195  fc60		       0b		      .byte.b	#%00001011
   2196  fc61		       0b		      .byte.b	#%00001011
   2197  fc62		       08		      .byte.b	#%00001000
   2198  fc63		       0f		      .byte.b	#%00001111
   2199  fc64
   2200  fc64							; Moved here because of rom space.
   2201  fc64							; The only SBR in constants space
   2202  fc64				   DrawQrCode
   2203  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2204  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2205  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2206  fc6a		       85 0a		      STA	CTRLPF
   2207  fc6c		       20 38 f7 	      JSR	ClearAll	; To be 100 sure!
   2208  fc6f		       ad 82 02 	      LDA	SWCHB
   2209  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2210  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2211  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2212  fc78		       86 09		      STX	COLUBK
   2213  fc7a		       84 08		      STY	COLUPF
   2214  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2215  fc7f				   StoreReversedQrCode
   2216  fc7f		       86 08		      STX	COLUPF
   2217  fc81		       84 09		      STY	COLUBK
   2218  fc83
   2219  fc83				   ContinueQrCode
   2220  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2221  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2222  fc87		       20 c6 f9 	      JSR	WaitForVblankEnd
   2223  fc8a		       20 d9 f9 	      JSR	Sleep8Lines
   2224  fc8d		       20 d9 f9 	      JSR	Sleep8Lines
   2225  fc90		       20 d9 f9 	      JSR	Sleep8Lines
   2226  fc93
   2227  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2228  fc93		       85 02		      STA	WSYNC
   2229  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2230  fc98		       85 0e		      STA	PF1	;3
   2231  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2232  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2234  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2235  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2236  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2237  fcb5		       85 0e		      STA	PF1	;3
   2238  fcb7
   2239  fcb7		       ca		      DEX		;2
   2240  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2241  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2242  fcbc		       88		      DEY		;2
   2243  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2244  fcbf
   2245  fcbf				   EndQrCodeLoop
   2246  fcbf		       85 02		      STA	WSYNC	;
   2247  fcc1		       a9 00		      LDA	#0
   2248  fcc3		       85 0e		      STA	PF1	;3
   2249  fcc5		       85 0f		      STA	PF2	;3
   2250  fcc7
   2251  fcc7		       20 e0 f9 	      JSR	Sleep32Lines
   2252  fcca		       4c 18 f6 	      JMP	PrepareOverscan
   2253  fccd
   2254  fd00					      org	$FD00
   2255  fd00				   Font
   2256  fd00				   C0
   2257  fd00		       e7		      .byte.b	#%11100111	;
   2258  fd01		       a5		      .byte.b	#%10100101	; 
   2259  fd02		       a5		      .byte.b	#%10100101	; 
   2260  fd03		       a5		      .byte.b	#%10100101	; 
   2261  fd04		       e7		      .byte.b	#%11100111	;	
   2262  fd05				   C1
   2263  fd05		       e7		      .byte.b	#%11100111	;
   2264  fd06		       42		      .byte.b	#%01000010	; 
   2265  fd07		       42		      .byte.b	#%01000010	; 
   2266  fd08		       42		      .byte.b	#%01000010	; 
   2267  fd09		       66		      .byte.b	#%01100110	;
   2268  fd0a				   C2
   2269  fd0a		       e7		      .byte.b	#%11100111	;
   2270  fd0b		       24		      .byte.b	#%00100100	; 
   2271  fd0c		       e7		      .byte.b	#%11100111	; 
   2272  fd0d		       81		      .byte.b	#%10000001	; 
   2273  fd0e		       e7		      .byte.b	#%11100111	;
   2274  fd0f				   C3
   2275  fd0f		       e7		      .byte.b	#%11100111	;
   2276  fd10		       81		      .byte.b	#%10000001	; 
   2277  fd11		       e7		      .byte.b	#%11100111	; 
   2278  fd12		       81		      .byte.b	#%10000001	; 
   2279  fd13		       e7		      .byte.b	#%11100111	;
   2280  fd14				   C4
   2281  fd14		       81		      .byte.b	#%10000001	;
   2282  fd15		       81		      .byte.b	#%10000001	; 
   2283  fd16		       e7		      .byte.b	#%11100111	; 
   2284  fd17		       a5		      .byte.b	#%10100101	; 
   2285  fd18		       a5		      .byte.b	#%10100101	;
   2286  fd19				   C5
   2287  fd19		       e7		      .byte.b	#%11100111	;
   2288  fd1a		       81		      .byte.b	#%10000001	; 
   2289  fd1b		       e7		      .byte.b	#%11100111	; 
   2290  fd1c		       24		      .byte.b	#%00100100	; 
   2291  fd1d		       e7		      .byte.b	#%11100111	;
   2292  fd1e				   C6
   2293  fd1e		       e7		      .byte.b	#%11100111	;
   2294  fd1f		       a5		      .byte.b	#%10100101	; 
   2295  fd20		       e7		      .byte.b	#%11100111	; 
   2296  fd21		       24		      .byte.b	#%00100100	; 
   2297  fd22		       e7		      .byte.b	#%11100111	;
   2298  fd23				   C7
   2299  fd23		       81		      .byte.b	#%10000001	;
   2300  fd24		       81		      .byte.b	#%10000001	; 
   2301  fd25		       81		      .byte.b	#%10000001	; 
   2302  fd26		       81		      .byte.b	#%10000001	; 
   2303  fd27		       e7		      .byte.b	#%11100111	;
   2304  fd28				   C8
   2305  fd28		       e7		      .byte.b	#%11100111	;
   2306  fd29		       a5		      .byte.b	#%10100101	; 
   2307  fd2a		       e7		      .byte.b	#%11100111	; 
   2308  fd2b		       a5		      .byte.b	#%10100101	; 
   2309  fd2c		       e7		      .byte.b	#%11100111	;
   2310  fd2d				   C9
   2311  fd2d		       e7		      .byte.b	#%11100111	;
   2312  fd2e		       81		      .byte.b	#%10000001	; 
   2313  fd2f		       e7		      .byte.b	#%11100111	; 
   2314  fd30		       a5		      .byte.b	#%10100101	; 
   2315  fd31		       e7		      .byte.b	#%11100111	;
   2316  fd32				   CA
   2317  fd32		       a5		      .byte.b	#%10100101	;
   2318  fd33		       a5		      .byte.b	#%10100101	; 
   2319  fd34		       e7		      .byte.b	#%11100111	; 
   2320  fd35		       a5		      .byte.b	#%10100101	; 
   2321  fd36		       e7		      .byte.b	#%11100111	;
   2322  fd37				   CB
   2323  fd37		       66		      .byte.b	#%01100110	;
   2324  fd38		       a5		      .byte.b	#%10100101	; 
   2325  fd39		       66		      .byte.b	#%01100110	; 
   2326  fd3a		       a5		      .byte.b	#%10100101	;
   2327  fd3b		       66		      .byte.b	#%01100110	;
   2328  fd3c				   CC
   2329  fd3c		       e7		      .byte.b	#%11100111	;
   2330  fd3d		       24		      .byte.b	#%00100100	; 
   2331  fd3e		       24		      .byte.b	#%00100100	; 
   2332  fd3f		       24		      .byte.b	#%00100100	;
   2333  fd40		       e7		      .byte.b	#%11100111	;
   2334  fd41
   2335  fd41				   CD
   2336  fd41		       66		      .byte.b	#%01100110	;
   2337  fd42		       a5		      .byte.b	#%10100101	; 
   2338  fd43		       a5		      .byte.b	#%10100101	; 
   2339  fd44		       a5		      .byte.b	#%10100101	;
   2340  fd45		       66		      .byte.b	#%01100110	;
   2341  fd46
   2342  fd46				   CE
   2343  fd46		       e7		      .byte.b	#%11100111	;
   2344  fd47		       24		      .byte.b	#%00100100	; 
   2345  fd48		       e7		      .byte.b	#%11100111	; 
   2346  fd49		       24		      .byte.b	#%00100100	; 
   2347  fd4a		       e7		      .byte.b	#%11100111	;
   2348  fd4b
   2349  fd4b				   CF
   2350  fd4b		       24		      .byte.b	#%00100100	;
   2351  fd4c		       24		      .byte.b	#%00100100	; 
   2352  fd4d		       e7		      .byte.b	#%11100111	; 
   2353  fd4e		       24		      .byte.b	#%00100100	; 
   2354  fd4f		       e7		      .byte.b	#%11100111	;
   2355  fd50
   2356  fd50				   CG
   2357  fd50		       c3		      .byte.b	#%11000011	;
   2358  fd51		       a5		      .byte.b	#%10100101	; 
   2359  fd52		       a5		      .byte.b	#%10100101	; 
   2360  fd53		       24		      .byte.b	#%00100100	; 
   2361  fd54		       c3		      .byte.b	#%11000011	;	
   2362  fd55
   2363  fd55				   CH
   2364  fd55		       a5		      .byte.b	#%10100101	;
   2365  fd56		       a5		      .byte.b	#%10100101	; 
   2366  fd57		       e7		      .byte.b	#%11100111	; 
   2367  fd58		       a5		      .byte.b	#%10100101	; 
   2368  fd59		       a5		      .byte.b	#%10100101	;
   2369  fd5a
   2370  fd5a				   CK
   2371  fd5a		       a5		      .byte.b	#%10100101	;
   2372  fd5b		       a5		      .byte.b	#%10100101	; 
   2373  fd5c		       66		      .byte.b	#%01100110	; 
   2374  fd5d		       a5		      .byte.b	#%10100101	; 
   2375  fd5e		       a5		      .byte.b	#%10100101	;
   2376  fd5f
   2377  fd5f				   CL
   2378  fd5f		       e7		      .byte.b	#%11100111	;
   2379  fd60		       24		      .byte.b	#%00100100	; 
   2380  fd61		       24		      .byte.b	#%00100100	; 
   2381  fd62		       24		      .byte.b	#%00100100	; 
   2382  fd63		       24		      .byte.b	#%00100100	;
   2383  fd64
   2384  fd64				   CI
   2385  fd64		       42		      .byte.b	#%01000010	;
   2386  fd65		       42		      .byte.b	#%01000010	; 
   2387  fd66		       42		      .byte.b	#%01000010	; 
   2388  fd67		       42		      .byte.b	#%01000010	; 
   2389  fd68		       42		      .byte.b	#%01000010	;
   2390  fd69
   2391  fd69				   CM
   2392  fd69		       a5		      .byte.b	#%10100101	;
   2393  fd6a		       a5		      .byte.b	#%10100101	; 
   2394  fd6b		       a5		      .byte.b	#%10100101	; 
   2395  fd6c		       e7		      .byte.b	#%11100111	; 
   2396  fd6d		       a5		      .byte.b	#%10100101	;
   2397  fd6e
   2398  fd6e				   CN
   2399  fd6e		       a5		      .byte.b	#%10100101	;
   2400  fd6f		       a5		      .byte.b	#%10100101	; 
   2401  fd70		       a5		      .byte.b	#%10100101	; 
   2402  fd71		       a5		      .byte.b	#%10100101	; 
   2403  fd72		       66		      .byte.b	#%01100110	;	
   2404  fd73
   2405  fd73
   2406  fd73				   CO
   2407  fd73		       42		      .byte.b	#%01000010	;
   2408  fd74		       a5		      .byte.b	#%10100101	; 
   2409  fd75		       a5		      .byte.b	#%10100101	; 
   2410  fd76		       a5		      .byte.b	#%10100101	; 
   2411  fd77		       42		      .byte.b	#%01000010	;	
   2412  fd78
   2413  fd78				   CP
   2414  fd78		       24		      .byte.b	#%00100100	;
   2415  fd79		       24		      .byte.b	#%00100100	; 
   2416  fd7a		       e7		      .byte.b	#%11100111	; 
   2417  fd7b		       a5		      .byte.b	#%10100101	; 
   2418  fd7c		       e7		      .byte.b	#%11100111	;
   2419  fd7d
   2420  fd7d				   CR
   2421  fd7d		       a5		      .byte.b	#%10100101	;
   2422  fd7e		       a5		      .byte.b	#%10100101	; 
   2423  fd7f		       66		      .byte.b	#%01100110	; 
   2424  fd80		       a5		      .byte.b	#%10100101	; 
   2425  fd81		       66		      .byte.b	#%01100110	;
   2426  fd82
   2427  fd82				   CS
   2428  fd82		       66		      .byte.b	#%01100110	;
   2429  fd83		       81		      .byte.b	#%10000001	; 
   2430  fd84		       42		      .byte.b	#%01000010	; 
   2431  fd85		       24		      .byte.b	#%00100100	; 
   2432  fd86		       c3		      .byte.b	#%11000011	;
   2433  fd87
   2434  fd87				   CT
   2435  fd87		       42		      .byte.b	#%01000010	;
   2436  fd88		       42		      .byte.b	#%01000010	; 
   2437  fd89		       42		      .byte.b	#%01000010	; 
   2438  fd8a		       42		      .byte.b	#%01000010	; 
   2439  fd8b		       e7		      .byte.b	#%11100111	;
   2440  fd8c
   2441  fd8c				   CV
   2442  fd8c		       42		      .byte.b	#%01000010	;
   2443  fd8d		       a5		      .byte.b	#%10100101	; 
   2444  fd8e		       a5		      .byte.b	#%10100101	; 
   2445  fd8f		       a5		      .byte.b	#%10100101	; 
   2446  fd90		       a5		      .byte.b	#%10100101	;	
   2447  fd91
   2448  fd91				   CY
   2449  fd91		       42		      .byte.b	#%01000010	;
   2450  fd92		       42		      .byte.b	#%01000010	; 
   2451  fd93		       42		      .byte.b	#%01000010	; 
   2452  fd94		       a5		      .byte.b	#%10100101	; 
   2453  fd95		       a5		      .byte.b	#%10100101	;
   2454  fd96
   2455  fd96				   CW
   2456  fd96		       a5		      .byte.b	#%10100101	;
   2457  fd97		       e7		      .byte.b	#%11100111	; 
   2458  fd98		       a5		      .byte.b	#%10100101	; 
   2459  fd99		       a5		      .byte.b	#%10100101	; 
   2460  fd9a		       a5		      .byte.b	#%10100101	;
   2461  fd9b
   2462  fd9b				   CZ
   2463  fd9b		       e7		      .byte.b	#%11100111	;
   2464  fd9c		       24		      .byte.b	#%00100100	; 
   2465  fd9d		       42		      .byte.b	#%01000010	; 
   2466  fd9e		       81		      .byte.b	#%10000001	; 
   2467  fd9f		       e7		      .byte.b	#%11100111	;
   2468  fda0
   2469  fda0				   Pipe
   2470  fda0		       42		      .byte.b	#%01000010	;
   2471  fda1		       00		      .byte.b	#%00000000	; 
   2472  fda2		       42		      .byte.b	#%01000010	; 
   2473  fda3		       00		      .byte.b	#%00000000	; 
   2474  fda4		       42		      .byte.b	#%01000010	;
   2475  fda5
   2476  fda5				   Exclamation
   2477  fda5		       42		      .byte.b	#%01000010	;
   2478  fda6		       00		      .byte.b	#%00000000	; 
   2479  fda7		       42		      .byte.b	#%01000010	; 
   2480  fda8		       42		      .byte.b	#%01000010	; 
   2481  fda9		       42		      .byte.b	#%01000010	;
   2482  fdaa
   2483  fdaa				   Dot
   2484  fdaa		       42		      .byte.b	#%01000010	;
   2485  fdab		       42		      .byte.b	#%01000010	; 
   2486  fdac		       00		      .byte.b	#%00000000	; 
   2487  fdad		       00		      .byte.b	#%00000000	; 
   2488  fdae		       00		      .byte.b	#%00000000	;
   2489  fdaf
   2490  fdaf				   Colon
   2491  fdaf		       42		      .byte.b	#%01000010	;
   2492  fdb0		       42		      .byte.b	#%01000010	; 
   2493  fdb1		       00		      .byte.b	#%00000000	; 
   2494  fdb2		       42		      .byte.b	#%01000010	; 
   2495  fdb3		       42		      .byte.b	#%01000010	;
   2496  fdb4
   2497  fdb4				   Triangle
   2498  fdb4		       81		      .byte.b	#%10000001	;
   2499  fdb5		       c3		      .byte.b	#%11000011	; 
   2500  fdb6		       e7		      .byte.b	#%11100111	; 
   2501  fdb7		       c3		      .byte.b	#%11000011	; 
   2502  fdb8		       81		      .byte.b	#%10000001	;
   2503  fdb9
   2504  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2505  fdb9		       00		      .byte.b	#0	;
   2506  fdba		       00		      .byte.b	#0	;
   2507  fdbb		       00		      .byte.b	#0	;
   2508  fdbc		       00		      .byte.b	#0	;
   2509  fdbd		       00		      .byte.b	#0	;
   2510  fdbe
   2511  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2512  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2513  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2514  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2515  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2516  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2517  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2518  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2519  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2520  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2521  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2522  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2523  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2524  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2525  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2526  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2527  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2528  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2529  fdcf
   2530  fdcf				   EngineSoundType
   2531  fdcf		       02		      .byte.b	#2
   2532  fdd0		       02		      .byte.b	#2
   2533  fdd1		       0e		      .byte.b	#14
   2534  fdd2		       06		      .byte.b	#6
   2535  fdd3		       06		      .byte.b	#6
   2536  fdd4		       0e		      .byte.b	#14
   2537  fdd5
   2538  fdd5				   EngineBaseFrequence
   2539  fdd5		       1f		      .byte.b	#31
   2540  fdd6		       15		      .byte.b	#21
   2541  fdd7		       14		      .byte.b	#20
   2542  fdd8		       1f		      .byte.b	#31
   2543  fdd9		       16		      .byte.b	#22
   2544  fdda		       03		      .byte.b	#3
   2545  fddb
   2546  fddb				   TachometerSizeLookup1
   2547  fddb		       1f		      .byte.b	#%00011111
   2548  fddc		       3f		      .byte.b	#%00111111
   2549  fddd		       7f		      .byte.b	#%01111111
   2550  fdde		       ff		      .byte.b	#%11111111
   2551  fddf		       ff		      .byte.b	#%11111111
   2552  fde0		       ff		      .byte.b	#%11111111
   2553  fde1		       ff		      .byte.b	#%11111111
   2554  fde2		       ff		      .byte.b	#%11111111
   2555  fde3
   2556  fde3				   TachometerSizeLookup2
   2557  fde3		       00		      .byte.b	#%00000000
   2558  fde4		       00		      .byte.b	#%00000000
   2559  fde5		       00		      .byte.b	#%00000000
   2560  fde6		       00		      .byte.b	#%00000000
   2561  fde7		       80		      .byte.b	#%10000000
   2562  fde8		       c0		      .byte.b	#%11000000
   2563  fde9		       e0		      .byte.b	#%11100000
   2564  fdea		       f0		      .byte.b	#%11110000
   2565  fdeb
   2566  fdeb				   TachometerGearLookup
   2567  fdeb		       01		      .byte.b	#%00000001
   2568  fdec		       02		      .byte.b	#%00000010
   2569  fded		       04		      .byte.b	#%00000100
   2570  fdee		       08		      .byte.b	#%00001000
   2571  fdef		       10		      .byte.b	#%00010000
   2572  fdf0		       30		      .byte.b	#%00110000
   2573  fdf1
   2574  fe00					      org	$FE00
   2575  fe00				   AesTable
   2576  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2577  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2578  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2579  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2580  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2581  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2582  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2583  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2584  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2585  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2586  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2587  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2588  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2589  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2590  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2591  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2592  ff00
   2593  ff00							; From FF00 to FFFB (122 bytes) to use here
   2594  ff00
   2595  ff00				   StaticText		; All static text must be on the same MSB block. 
   2596  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2597  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2598  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2599  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2600  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2601  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2602  ff05
   2603  ff05				   HellwayLeftText
   2604  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2605  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2606  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2607  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2608  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2609  ff0a
   2610  ff0a				   HellwayRightText
   2611  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2612  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2613  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2614  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2615  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2616  ff0f
   2617  ff0f				   OpbText
   2618  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2619  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2620  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2621  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2622  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2623  ff14
   2624  ff14				   YearText
   2625  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2626  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2627  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2628  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2629  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2630  ff19
   2631  ff19				   GameText
   2632  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2633  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2634  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2635  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2636  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2637  ff1e
   2638  ff1e				   OverText
   2639  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2640  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2641  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2642  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2643  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2644  ff23				   GoText
   2645  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2646  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2647  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2648  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2649  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2650  ff28
   2651  ff28				   ZeldaTextLeft
   2652  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2653  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2654  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2655  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2656  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2657  ff2d
   2658  ff2d				   ZeldaTextRight
   2659  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2660  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2661  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2662  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2663  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2664  ff32
   2665  ff32				   ZeldaDateLeft
   2666  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2667  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2668  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2669  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2670  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2671  ff37
   2672  ff37				   ZeldaDateRight
   2673  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2674  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2675  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2676  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2677  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2678  ff3c
   2679  ff3c				   PolvinhosTextLeft
   2680  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2681  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2682  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2683  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2684  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2685  ff41
   2686  ff41				   PolvinhosTextRight
   2687  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2688  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2689  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2690  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2691  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2692  ff46
   2693  ff46				   PolvinhosDateLeft
   2694  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2695  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2696  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2697  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2698  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2699  ff4b
   2700  ff4b				   PolvinhosDateRight
   2701  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2702  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2703  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2704  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2705  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2706  ff50
   2707  ff50				   IvonneTextLeft
   2708  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2709  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2710  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2711  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2712  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2713  ff55
   2714  ff55				   IvonneTextRight
   2715  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2716  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2717  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2718  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2719  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2720  ff5a
   2721  ff5a				   IvonneDateLeft
   2722  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2723  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2724  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2725  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2726  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2727  ff5f
   2728  ff5f				   IvonneDateRight
   2729  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2730  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2731  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2732  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2733  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2734  ff64
   2735  ff64				   PaperArtTextLeft
   2736  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2737  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2738  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2739  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2740  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2741  ff69
   2742  ff69				   PaperArtTextRight
   2743  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2744  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2745  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2746  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2747  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2748  ff6e
   2749  ff6e				   LeonardoTextLeft
   2750  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2751  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2752  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2753  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2754  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2755  ff73
   2756  ff73				   LeonardoTextRight
   2757  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2758  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2759  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2760  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2761  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2762  ff78
   2763  ff78				   VersionText
   2764  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2765  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2766  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2767  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2768  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2769  ff7d
   2770  ff7d
   2771  ff7d				   EndStaticText
   2772  ff7d
   2773  ff7d				   CarSprite0		; Upside down, Original Car
   2774  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2775  ff85				   CarSprite0NoPadding
   2776  ff85		       7e		      .byte.b	#%01111110
   2777  ff86		       24		      .byte.b	#%00100100
   2778  ff87		       bd		      .byte.b	#%10111101
   2779  ff88		       3c		      .byte.b	#%00111100
   2780  ff89		       bd		      .byte.b	#%10111101
   2781  ff8a		       3c		      .byte.b	#%00111100
   2782  ff8b
   2783  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2784  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2785  ff93				   CarSprite1NoPadding
   2786  ff93		       bd		      .byte.b	#%10111101
   2787  ff94		       7e		      .byte.b	#%01111110
   2788  ff95		       5a		      .byte.b	#%01011010
   2789  ff96		       66		      .byte.b	#%01100110
   2790  ff97		       bd		      .byte.b	#%10111101
   2791  ff98		       3c		      .byte.b	#%00111100
   2792  ff99
   2793  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2794  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2795  ffa1				   CarSprite2NoPadding
   2796  ffa1		       7e		      .byte.b	#%01111110
   2797  ffa2		       a5		      .byte.b	#%10100101
   2798  ffa3		       42		      .byte.b	#%01000010
   2799  ffa4		       42		      .byte.b	#%01000010
   2800  ffa5		       bd		      .byte.b	#%10111101
   2801  ffa6		       7e		      .byte.b	#%01111110
   2802  ffa7
   2803  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2804  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2805  ffaf				   CarSprite3NoPadding
   2806  ffaf		       3c		      .byte.b	#%00111100
   2807  ffb0		       db		      .byte.b	#%11011011
   2808  ffb1		       db		      .byte.b	#%11011011
   2809  ffb2		       3c		      .byte.b	#%00111100
   2810  ffb3		       5a		      .byte.b	#%01011010
   2811  ffb4		       3c		      .byte.b	#%00111100
   2812  ffb5
   2813  ffb5				   TrafficSpeeds
   2814  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2815  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2816  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2817  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2818  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2819  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2820  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2821  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2822  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2823  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2824  ffbf				   TrafficSpeedsHighDelta
   2825  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2826  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2827  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2828  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2829  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2830  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2831  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2832  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2833  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2834  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2835  ffc9
   2836  ffc9				   CarIdToSpriteAddressL
   2837  ffc9		       7d		      .byte.b	#<CarSprite0
   2838  ffca		       8b		      .byte.b	#<CarSprite1
   2839  ffcb		       99		      .byte.b	#<CarSprite2
   2840  ffcc		       a7		      .byte.b	#<CarSprite3
   2841  ffcd
   2842  ffcd				   CarIdToSpriteAddressH
   2843  ffcd		       ff		      .byte.b	#>CarSprite0
   2844  ffce		       ff		      .byte.b	#>CarSprite1
   2845  ffcf		       ff		      .byte.b	#>CarSprite2
   2846  ffd0		       ff		      .byte.b	#>CarSprite3
   2847  ffd1
   2848  ffd1				   EnemyCarIdToSpriteAddressL
   2849  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2850  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2851  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2852  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2853  ffd5
   2854  ffd5				   EnemyCarIdToSpriteAddressH
   2855  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2856  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2857  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2858  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2859  ffd9
   2860  ffd9				   CarIdToAccelerateSpeed
   2861  ffd9		       80		      .byte.b	#128
   2862  ffda		       c0		      .byte.b	#192
   2863  ffdb		       60		      .byte.b	#96
   2864  ffdc		       c0		      .byte.b	#192
   2865  ffdd
   2866  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2867  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2868  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2869  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2870  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2871  ffe1
   2872  ffe1				   CarIdToMaxSpeedL
   2873  ffe1		       80		      .byte.b	#$80
   2874  ffe2		       00		      .byte.b	#$00	; One less gear
   2875  ffe3		       80		      .byte.b	#$80
   2876  ffe4		       80		      .byte.b	#$80
   2877  ffe5
   2878  ffe5				   CarIdToMaxGear
   2879  ffe5		       05		      .byte.b	#5
   2880  ffe6		       04		      .byte.b	#4	; One less gear
   2881  ffe7		       05		      .byte.b	#5
   2882  ffe8		       05		      .byte.b	#5
   2883  ffe9
   2884  ffe9				   GearToBreakSpeedTable
   2885  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2886  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2887  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2888  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2889  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2890  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2891  ffef
   2892  ffef				   TrafficColorTable
   2893  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2894  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2895  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2896  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2897  fff3
   2898  fff3				   TrafficChanceTable
   2899  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2900  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2901  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2902  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2903  fff7
   2904  fff7				   TrafficTimeTable
   2905  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2906  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2907  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2908  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2909  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2910  fffc
   2911  fffc
   2912  fffc					      org	$FFFC
   2913  fffc		       00 f0		      .word.w	BeforeStart
   2914  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
