------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 80	   GRP0Cache  =	$80
    104  f000		       00 81	   PF0Cache   =	$81
    105  f000		       00 82	   PF1Cache   =	$82
    106  f000		       00 83	   PF2Cache   =	$83
    107  f000		       00 84	   GRP1Cache  =	$84
    108  f000		       00 85	   ENABLCache =	$85
    109  f000		       00 86	   ENAM0Cache =	$86
    110  f000		       00 87	   ENAM1Cache =	$87
    111  f000
    112  f000		       00 8c	   FrameCount0 =	$8C	;
    113  f000		       00 8d	   FrameCount1 =	$8D	;
    114  f000
    115  f000		       00 8e	   CollisionCounter =	$8E
    116  f000		       00 8f	   OpCollisionCounter =	$8F
    117  f000
    118  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    119  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    120  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    121  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    122  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    123  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    124  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    125  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    126  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    127  f000
    128  f000							;Temporary variables, multiple uses
    129  f000		       00 b0	   Tmp0       =	$B0
    130  f000		       00 b1	   Tmp1       =	$B1
    131  f000		       00 b2	   Tmp2       =	$B2
    132  f000		       00 b3	   Tmp3       =	$B3
    133  f000		       00 b4	   Tmp4       =	$B4
    134  f000		       00 b5	   Tmp5       =	$B5
    135  f000
    136  f000		       00 b6	   Player0X   =	$B6
    137  f000		       00 b7	   Player1X   =	$B7
    138  f000		       00 b8	   CountdownTimer =	$B8
    139  f000		       00 b9	   OpCountdownTimer =	$B9
    140  f000		       00 ba	   Traffic0Msb =	$BA
    141  f000		       00 bb	   OpTraffic0Msb =	$BB
    142  f000		       00 bc	   SwitchDebounceCounter =	$BC
    143  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    144  f000		       00 be	   TrafficChance =	$BE
    145  f000		       00 bf	   OpTrafficChance =	$BF
    146  f000
    147  f000		       00 c0	   CheckpointTime =	$C0
    148  f000		       00 c1	   OpCheckpointTime =	$C1
    149  f000		       00 c2	   TrafficColor =	$C2
    150  f000		       00 c3	   OpTrafficColor =	$C3
    151  f000		       00 c4	   CurrentDifficulty =	$C4
    152  f000		       00 c5	   OpCurrentDifficulty =	$C5
    153  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 c5		      STY	OpCurrentDifficulty
    200  f008		       84 bd		      STY	GameStatus
    201  f00a		       84 c7		      STY	CurrentCarId
    202  f00c		       84 c8		      STY	OpCurrentCarId
    203  f00e		       a0 10		      LDY	#16
    204  f010		       84 c6		      STY	GameMode
    205  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    206  f014
    207  f014				   Start
    208  f014		       a9 02		      LDA	#2
    209  f016		       85 00		      STA	VSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       85 02		      STA	WSYNC
    213  f01e		       a9 00		      LDA	#0	;2
    214  f020		       85 00		      STA	VSYNC	;3
    215  f022
    216  f022		       78		      SEI
    217  f023		       d8		      CLD
    218  f024		       a2 ff		      LDX	#$FF
    219  f026		       9a		      TXS
    220  f027
    221  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    222  f029				   CleanMem
    223  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    224  f02b		       f0 1a		      BEQ	SkipClean
    225  f02d		       e0 c6		      CPX	#GameMode
    226  f02f		       f0 16		      BEQ	SkipClean
    227  f031		       e0 c7		      CPX	#CurrentCarId
    228  f033		       f0 12		      BEQ	SkipClean
    229  f035		       e0 c8		      CPX	#OpCurrentCarId
    230  f037		       f0 0e		      BEQ	SkipClean
    231  f039		       e0 c4		      CPX	#CurrentDifficulty
    232  f03b		       f0 0a		      BEQ	SkipClean
    233  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    234  f03f		       f0 06		      BEQ	SkipClean
    235  f041		       e0 bd		      CPX	#GameStatus
    236  f043		       f0 02		      BEQ	SkipClean
    237  f045		       95 00		      STA	0,X
    238  f047				   SkipClean
    239  f047		       e8		      INX
    240  f048		       d0 df		      BNE	CleanMem
    241  f04a
    242  f04a		       a9 d5		      LDA	#213
    243  f04c		       8d 96 02 	      STA	TIM64T	;3	
    244  f04f
    245  f04f							;Setting some variables...
    246  f04f
    247  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    248  f04f		       85 02		      STA	WSYNC	;We will set player position
    249  f051		       20 ce f6 	      JSR	DefaultOffsets
    250  f054
    251  f054		       ad 8f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    252  f057		       85 f0		      STA	Player0SpeedL
    253  f059		       85 f1		      STA	Player1SpeedL
    254  f05b
    255  f05b							;SLEEP 11;18
    256  f05b		       a2 00		      LDX	#0
    257  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    258  f060		       85 db		      STA	StartSWCHB	; For game over
    259  f062		       29 c0		      AND	#%11000000
    260  f064		       f0 0b		      BEQ	CallConfigureDifficulty
    261  f066		       e8		      INX
    262  f067		       c9 80		      CMP	#%10000000
    263  f069		       f0 06		      BEQ	CallConfigureDifficulty
    264  f06b		       e8		      INX
    265  f06c		       c9 40		      CMP	#%01000000
    266  f06e		       f0 01		      BEQ	CallConfigureDifficulty
    267  f070		       e8		      INX
    268  f071
    269  f071				   CallConfigureDifficulty
    270  f071		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    271  f073		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    272  f075		       a5 bd		      LDA	GameStatus
    273  f077		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    274  f079				   StoreCurrentDifficulty
    275  f079		       86 c4		      STX	CurrentDifficulty
    276  f07b		       86 c5		      STX	OpCurrentDifficulty
    277  f07d		       a2 00		      LDX	#0
    278  f07f		       20 a3 f6 	      JSR	ConfigureDifficulty
    279  f082		       e8		      INX
    280  f083		       20 a3 f6 	      JSR	ConfigureDifficulty
    281  f086
    282  f086				   SetGameNotRunning
    283  f086		       a9 00		      LDA	#0
    284  f088		       85 bd		      STA	GameStatus
    285  f08a
    286  f08a				   ConfigureTimer
    287  f08a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    288  f08c		       85 b8		      STA	CountdownTimer	;3
    289  f08e		       85 b9		      STA	OpCountdownTimer	;3
    290  f090
    291  f090				   ConfigurePlayer1XPosition
    292  f090		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    293  f092		       85 b7		      STA	Player1X	;3
    294  f094
    295  f094				   ConfigureOpNextCheckpoint
    296  f094		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    297  f096		       85 ce		      STA	OpNextCheckpoint
    298  f098
    299  f098				   HPositioning 		; Avoid sleep doing needed stuff
    300  f098		       85 02		      STA	WSYNC
    301  f09a
    302  f09a				   ConfigurePlayer0XPosition
    303  f09a		       a9 21		      LDA	#PLAYER_0_X_START	;2
    304  f09c		       85 b6		      STA	Player0X	;3
    305  f09e
    306  f09e				   ConfigureMissileSize
    307  f09e		       a9 30		      LDA	#%00110000	;2 Missile Size
    308  f0a0		       85 04		      STA	NUSIZ0	;3
    309  f0a2		       85 05		      STA	NUSIZ1	;3
    310  f0a4
    311  f0a4				   ConfigureNextCheckpoint
    312  f0a4		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    313  f0a6		       85 cd		      STA	NextCheckpoint
    314  f0a8
    315  f0a8		       a9 00		      LDA	#0	; Avoid missile reseting position 
    316  f0aa							;SLEEP 41
      0  f0aa					      SLEEP	4	;
      1  f0aa				   .CYCLES    SET	4
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     17  f0aa					      REPEND
     18  f0ab		       ea		      nop
     19  f0ac					      REPEND
    318  f0ac		       85 12		      STA	RESM0
      0  f0ae					      SLEEP	2	;
      1  f0ae				   .CYCLES    SET	2
      2  f0ae
      3  f0ae				  -	      IF	.CYCLES < 2
      4  f0ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ae				  -	      ERR
      6  f0ae					      ENDIF
      7  f0ae
      8  f0ae				  -	      IF	.CYCLES & 1
      9  f0ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ae				  -	      nop	0
     11  f0ae				  -	      ELSE
     12  f0ae				  -	      bit	VSYNC
     13  f0ae				  -	      ENDIF
     14  f0ae				  -.CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae					      REPEAT	.CYCLES / 2
     18  f0ae		       ea		      nop
     19  f0af					      REPEND
    320  f0af		       85 14		      STA	RESBL
      0  f0b1					      SLEEP	2
      1  f0b1				   .CYCLES    SET	2
      2  f0b1
      3  f0b1				  -	      IF	.CYCLES < 2
      4  f0b1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b1				  -	      ERR
      6  f0b1					      ENDIF
      7  f0b1
      8  f0b1				  -	      IF	.CYCLES & 1
      9  f0b1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b1				  -	      nop	0
     11  f0b1				  -	      ELSE
     12  f0b1				  -	      bit	VSYNC
     13  f0b1				  -	      ENDIF
     14  f0b1				  -.CYCLES    SET	.CYCLES - 3
     15  f0b1					      ENDIF
     16  f0b1
     17  f0b1					      REPEAT	.CYCLES / 2
     18  f0b1		       ea		      nop
     19  f0b2					      REPEND
    322  f0b2		       85 13		      STA	RESM1
      0  f0b4					      SLEEP	3
      1  f0b4				   .CYCLES    SET	3
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4					      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4					      ELSE
     12  f0b4		       24 00		      bit	VSYNC
     13  f0b6					      ENDIF
     14  f0b6				   .CYCLES    SET	.CYCLES - 3
     15  f0b6					      ENDIF
     16  f0b6
     17  f0b6				  -	      REPEAT	.CYCLES / 2
     18  f0b6				  -	      nop
     19  f0b6					      REPEND
    324  f0b6
    325  f0b6		       a9 e0		      LDA	#$E0
    326  f0b8		       85 24		      STA	HMBL
    327  f0ba		       85 22		      STA	HMM0
    328  f0bc		       85 23		      STA	HMM1
    329  f0be		       85 02		      STA	WSYNC
    330  f0c0		       85 2a		      STA	HMOVE
    331  f0c2		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    332  f0c4		       85 2b		      STA	HMCLR
      0  f0c6					      SLEEP	30
      1  f0c6				   .CYCLES    SET	30
      2  f0c6
      3  f0c6				  -	      IF	.CYCLES < 2
      4  f0c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c6				  -	      ERR
      6  f0c6					      ENDIF
      7  f0c6
      8  f0c6				  -	      IF	.CYCLES & 1
      9  f0c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c6				  -	      nop	0
     11  f0c6				  -	      ELSE
     12  f0c6				  -	      bit	VSYNC
     13  f0c6				  -	      ENDIF
     14  f0c6				  -.CYCLES    SET	.CYCLES - 3
     15  f0c6					      ENDIF
     16  f0c6
     17  f0c6					      REPEAT	.CYCLES / 2
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     17  f0ce					      REPEND
     18  f0cf		       ea		      nop
     17  f0cf					      REPEND
     18  f0d0		       ea		      nop
     17  f0d0					      REPEND
     18  f0d1		       ea		      nop
     17  f0d1					      REPEND
     18  f0d2		       ea		      nop
     17  f0d2					      REPEND
     18  f0d3		       ea		      nop
     17  f0d3					      REPEND
     18  f0d4		       ea		      nop
     19  f0d5					      REPEND
    334  f0d5		       85 10		      STA	RESP0
    335  f0d7							;SLEEP 5 ; Temporarily move player 1 away.
    336  f0d7		       85 11		      STA	RESP1
    337  f0d9
    338  f0d9				   WaitResetToEnd
    339  f0d9		       ad 84 02 	      LDA	INTIM
    340  f0dc		       d0 fb		      BNE	WaitResetToEnd
    341  f0de
    342  f0de				   MainLoop
    343  f0de		       a9 02		      LDA	#2
    344  f0e0		       85 00		      STA	VSYNC
    345  f0e2		       85 02		      STA	WSYNC
    346  f0e4		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    347  f0e6				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    348  f0e6		       a9 01		      LDA	#%00000001	;3
    349  f0e8		       24 df		      BIT	TextFlickerMode	;2
    350  f0ea		       f0 05		      BEQ	TextSideFrameZero	;2
    351  f0ec		       25 8d		      AND	FrameCount1	;2
    352  f0ee		       4c f3 f0 	      JMP	StoreTextSize	;3
    353  f0f1				   TextSideFrameZero
    354  f0f1		       25 8c		      AND	FrameCount0	;2
    355  f0f3				   StoreTextSize
    356  f0f3		       85 de		      STA	TextSide	;3
    357  f0f5
    358  f0f5				   PrepareMaxHMove
      0  f0f5					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0f5				   .CYCLES    SET	18
      2  f0f5
      3  f0f5				  -	      IF	.CYCLES < 2
      4  f0f5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0f5				  -	      ERR
      6  f0f5					      ENDIF
      7  f0f5
      8  f0f5				  -	      IF	.CYCLES & 1
      9  f0f5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0f5				  -	      nop	0
     11  f0f5				  -	      ELSE
     12  f0f5				  -	      bit	VSYNC
     13  f0f5				  -	      ENDIF
     14  f0f5				  -.CYCLES    SET	.CYCLES - 3
     15  f0f5					      ENDIF
     16  f0f5
     17  f0f5					      REPEAT	.CYCLES / 2
     18  f0f5		       ea		      nop
     17  f0f5					      REPEND
     18  f0f6		       ea		      nop
     17  f0f6					      REPEND
     18  f0f7		       ea		      nop
     17  f0f7					      REPEND
     18  f0f8		       ea		      nop
     17  f0f8					      REPEND
     18  f0f9		       ea		      nop
     17  f0f9					      REPEND
     18  f0fa		       ea		      nop
     17  f0fa					      REPEND
     18  f0fb		       ea		      nop
     17  f0fb					      REPEND
     18  f0fc		       ea		      nop
     17  f0fc					      REPEND
     18  f0fd		       ea		      nop
     19  f0fe					      REPEND
    360  f0fe		       a9 80		      LDA	#$80
    361  f100		       85 24		      STA	HMBL
    362  f102		       85 22		      STA	HMM0
    363  f104		       85 23		      STA	HMM1
    364  f106		       85 20		      STA	HMP0
    365  f108		       85 21		      STA	HMP1
    366  f10a		       85 02		      STA	WSYNC
    367  f10c		       85 2a		      STA	HMOVE	; 1/10			
    368  f10e
    369  f10e				   ConfigVBlankTimer
    370  f10e		       a5 c6		      LDA	GameMode
    371  f110		       c9 10		      CMP	#MAX_GAME_MODE
    372  f112		       f0 05		      BEQ	SetVblankTimerQrCode
    373  f114		       a9 29		      LDA	#VBLANK_TIMER
    374  f116		       4c 1b f1 	      JMP	SetVblankTimer
    375  f119				   SetVblankTimerQrCode
    376  f119		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    377  f11b
    378  f11b				   SetVblankTimer
    379  f11b		       85 02		      STA	WSYNC	;3
    380  f11d		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    381  f11f		       8d 96 02 	      STA	TIM64T	;3	
    382  f122		       a9 00		      LDA	#0	;2
    383  f124		       85 00		      STA	VSYNC	;3	
    384  f126
    385  f126				   RandomizeGame
    386  f126		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    387  f128		       d0 2d		      BNE	EndRandomizeGame
    388  f12a		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    389  f12c		       29 02		      AND	#%00000010
    390  f12e		       f0 24		      BEQ	DeterministicGame
    391  f130		       a6 96		      LDX	TrafficOffset1 + 2
    392  f132		       bd 00 fe 	      LDA	AesTable,X
    393  f135		       45 8c		      EOR	FrameCount0
    394  f137		       85 96		      STA	TrafficOffset1 + 2
    395  f139		       85 a6		      STA	OpTrafficOffset1 + 2
    396  f13b		       a6 9a		      LDX	TrafficOffset2 + 2
    397  f13d		       bd 00 fe 	      LDA	AesTable,X
    398  f140		       45 8c		      EOR	FrameCount0
    399  f142		       85 9a		      STA	TrafficOffset2 + 2
    400  f144		       85 aa		      STA	OpTrafficOffset2 + 2
    401  f146		       a6 9e		      LDX	TrafficOffset3 + 2
    402  f148		       bd 00 fe 	      LDA	AesTable,X
    403  f14b		       45 8c		      EOR	FrameCount0
    404  f14d		       85 9e		      STA	TrafficOffset3 + 2
    405  f14f		       85 ae		      STA	OpTrafficOffset3 + 2
    406  f151		       4c 57 f1 	      JMP	EndRandomizeGame
    407  f154
    408  f154				   DeterministicGame
    409  f154		       20 ce f6 	      JSR	DefaultOffsets
    410  f157
    411  f157				   EndRandomizeGame
    412  f157
    413  f157
    414  f157				   CountFrame
    415  f157		       e6 8c		      INC	FrameCount0	; 5
    416  f159		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    417  f15b		       e6 8d		      INC	FrameCount1	; 5 
    418  f15d				   SkipIncFC1
    419  f15d
    420  f15d				   CallDrawQrCode
    421  f15d		       a5 c6		      LDA	GameMode
    422  f15f		       c9 10		      CMP	#MAX_GAME_MODE
    423  f161		       d0 03		      BNE	TestIsGameRunning
    424  f163		       4c 0a fb 	      JMP	DrawQrCode
    425  f166
    426  f166							;Does not update the game if not running
    427  f166				   TestIsGameRunning
    428  f166		       a5 bd		      LDA	GameStatus	;3
    429  f168		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    430  f16a				   SelectCarWithDpadCall		; Only do it when game is stoped
    431  f16a		       a2 00		      LDX	#0	; Player 0
    432  f16c		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    433  f16e		       85 b0		      STA	Tmp0
    434  f170		       20 d7 f8 	      JSR	SelectCarWithDpad
    435  f173		       e8		      INX		; Player 1
    436  f174		       20 d7 f8 	      JSR	SelectCarWithDpad
    437  f177
    438  f177							; Needs to draw the opponent in the correct line even when game stoped  
    439  f177							; Draeing is a destructive operation
    440  f177		       20 e9 f8 	      JSR	ProcessOpponentLine
    441  f17a
    442  f17a				   CallConfigureCarSprites
    443  f17a		       20 a5 f8 	      JSR	ConfigureCarSprites
    444  f17d				   SkipUpdateLogicJump
    445  f17d		       4c c6 f1 	      JMP	SkipUpdateLogic
    446  f180				   ContinueWithGameLogic
    447  f180
    448  f180				   CallEverySecond		; Timer for now
    449  f180		       a2 00		      LDX	#0
    450  f182		       20 e0 fa 	      JSR	EverySecond
    451  f185		       e8		      INX
    452  f186		       20 e0 fa 	      JSR	EverySecond
    453  f189
    454  f189
    455  f189				   ChangeTextFlickerMode
    456  f189		       a5 bc		      LDA	SwitchDebounceCounter
    457  f18b		       d0 0d		      BNE	EndChangeTextFlickerMode
    458  f18d		       ad 82 02 	      LDA	SWCHB
    459  f190		       29 02		      AND	#%00000010	;Game select
    460  f192		       d0 06		      BNE	EndChangeTextFlickerMode
    461  f194		       e6 df		      INC	TextFlickerMode
    462  f196		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    463  f198		       85 bc		      STA	SwitchDebounceCounter
    464  f19a				   EndChangeTextFlickerMode
    465  f19a
    466  f19a				   CallProcessSpeed
    467  f19a		       a2 00		      LDX	#0
    468  f19c		       20 f7 f9 	      JSR	ProcessSpeed
    469  f19f
    470  f19f		       e8		      INX		; Player 1
    471  f1a0		       20 f7 f9 	      JSR	ProcessSpeed
    472  f1a3
    473  f1a3				   CallUpdateOffsets
    474  f1a3		       a2 00		      LDX	#0	; Player 0
    475  f1a5		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    476  f1a7		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    477  f1a9		       a5 f0		      LDA	Player0SpeedL
    478  f1ab		       85 b4		      STA	Tmp4
    479  f1ad		       a5 f2		      LDA	Player0SpeedH
    480  f1af		       85 b5		      STA	Tmp5
    481  f1b1		       20 a4 f9 	      JSR	UpdateOffsets
    482  f1b4
    483  f1b4							;LDX Exits the call with correct value.
    484  f1b4		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    485  f1b6		       85 b3		      STA	Tmp3
    486  f1b8		       a5 f1		      LDA	Player1SpeedL
    487  f1ba		       85 b4		      STA	Tmp4
    488  f1bc		       a5 f3		      LDA	Player1SpeedH
    489  f1be		       85 b5		      STA	Tmp5
    490  f1c0		       20 a4 f9 	      JSR	UpdateOffsets
    491  f1c3
    492  f1c3				   CallProcessOpponentLine
    493  f1c3		       20 e9 f8 	      JSR	ProcessOpponentLine
    494  f1c6
    495  f1c6
    496  f1c6				   SkipUpdateLogic		; Continue here if not paused
    497  f1c6
    498  f1c6				   CallStatusUpdateSbr
    499  f1c6		       a2 00		      LDX	#0
    500  f1c8		       20 ed fa 	      JSR	CalculateGear
    501  f1cb		       20 fa fa 	      JSR	ProcessScoreFontColor
    502  f1ce		       e8		      INX
    503  f1cf		       20 ed fa 	      JSR	CalculateGear
    504  f1d2		       20 fa fa 	      JSR	ProcessScoreFontColor
    505  f1d5
    506  f1d5				   CallProcessPlayerStatus
    507  f1d5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    508  f1d7		       85 b0		      STA	Tmp0
    509  f1d9		       a2 00		      LDX	#0
    510  f1db		       20 9a fa 	      JSR	ProcessPlayerStatus
    511  f1de		       a5 a2		      LDA	OpTrafficOffset0 + 2
    512  f1e0		       85 b0		      STA	Tmp0
    513  f1e2		       e8		      INX
    514  f1e3		       20 9a fa 	      JSR	ProcessPlayerStatus
    515  f1e6
    516  f1e6				   CallProcessPlayerSprites
    517  f1e6		       20 a5 f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    518  f1e9
    519  f1e9				   CallProcessSound
    520  f1e9		       20 ba f5 	      JSR	ProcessSound
    521  f1ec
    522  f1ec							;Could be done during on vblank to save this comparisson time (before draw score), 
    523  f1ec							;but I am saving vblank cycles for now, in case of 2 players.
    524  f1ec				   ChooseTextSide		; 
    525  f1ec		       a5 de		      LDA	TextSide	;3
    526  f1ee		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    527  f1f0		       4c 74 f2 	      JMP	RightScoreWrite
    528  f1f3
    529  f1f3				   LeftScoreWrite
    530  f1f3		       a5 c9		      LDA	ScoreFontColor
    531  f1f5		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    532  f1f7		       f0 51		      BEQ	PrintCheckpoint
    533  f1f9		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    534  f1fb		       f0 55		      BEQ	PrintStartGame
    535  f1fd		       a5 bd		      LDA	GameStatus
    536  f1ff		       f0 59		      BEQ	PrintHellwayLeft
    537  f201				   WriteDistance		;Not optimized yet, ugly code.
    538  f201				   Digit0Timer
    539  f201		       a5 b8		      LDA	CountdownTimer	;3
    540  f203		       29 0f		      AND	#%00001111	;2
    541  f205		       aa		      TAX		; 2
    542  f206		       bd 6c fc 	      LDA	FontLookup,X	;4 
    543  f209		       85 d1		      STA	ScoreD1	;3
    544  f20b
    545  f20b				   Digit1Timer
    546  f20b		       a5 b8		      LDA	CountdownTimer	;3
    547  f20d		       4a		      LSR		; 2
    548  f20e		       4a		      LSR		; 2
    549  f20f		       4a		      LSR		; 2
    550  f210		       4a		      LSR		; 2
    551  f211		       aa		      TAX		; 2
    552  f212		       bd 6c fc 	      LDA	FontLookup,X	;4
    553  f215		       85 d0		      STA	ScoreD0	;3
    554  f217
    555  f217				   SpeedBar
    556  f217		       a5 f0		      LDA	Player0SpeedL
    557  f219		       29 e0		      AND	#%11100000	;2 Discard the last bits
    558  f21b		       18		      CLC
    559  f21c		       2a		      ROL		;First goes into carry
    560  f21d		       2a		      ROL
    561  f21e		       2a		      ROL
    562  f21f		       2a		      ROL
    563  f220		       85 b0		      STA	Tmp0
    564  f222		       a5 f2		      LDA	Player0SpeedH
    565  f224		       0a		      ASL
    566  f225		       0a		      ASL
    567  f226		       0a		      ASL
    568  f227		       05 b0		      ORA	Tmp0
    569  f229		       aa		      TAX		; 2
    570  f22a		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    571  f22d		       85 d2		      STA	ScoreD2	;3
    572  f22f
    573  f22f				   DistanceCheckpointCount		; Will run all letters in the future
    574  f22f		       a5 92		      LDA	TrafficOffset0 + 2	;3
    575  f231		       29 f0		      AND	#%11110000	;2
    576  f233		       4a		      LSR
    577  f234		       4a		      LSR
    578  f235		       4a		      LSR
    579  f236		       4a		      LSR
    580  f237		       aa		      TAX		; 2
    581  f238		       bd 6c fc 	      LDA	FontLookup,X	;4 
    582  f23b		       85 d3		      STA	ScoreD3	;3
    583  f23d
    584  f23d				   DistanceBar		; 16 subdivisions per checkpoint
    585  f23d		       a5 92		      LDA	TrafficOffset0 + 2	;3
    586  f23f		       29 0f		      AND	#%00001111	;2
    587  f241		       aa		      TAX		; 2
    588  f242		       bd 7d fc 	      LDA	BarLookup,X	;4 
    589  f245		       85 d4		      STA	ScoreD4	;3
    590  f247
    591  f247				   EndDrawDistance
    592  f247		       4c ec f2 	      JMP	RightScoreWriteEnd	;3
    593  f24a
    594  f24a				   PrintCheckpoint
    595  f24a		       a2 00		      LDX	#<CheckpointText
    596  f24c		       20 e3 f6 	      JSR	PrintStaticText
    597  f24f		       4c ec f2 	      JMP	RightScoreWriteEnd	;3
    598  f252				   PrintStartGame
    599  f252		       a2 23		      LDX	#<GoText
    600  f254		       20 e3 f6 	      JSR	PrintStaticText
    601  f257		       4c ec f2 	      JMP	RightScoreWriteEnd	;3
    602  f25a
    603  f25a				   PrintHellwayLeft
    604  f25a		       a5 8d		      LDA	FrameCount1
    605  f25c		       29 01		      AND	#1
    606  f25e		       d0 05		      BNE	PrintCreditsLeft
    607  f260		       a2 05		      LDX	#<HellwayLeftText
    608  f262		       4c 67 f2 	      JMP	PrintGameMode
    609  f265				   PrintCreditsLeft
    610  f265		       a2 0f		      LDX	#<OpbText
    611  f267
    612  f267				   PrintGameMode
    613  f267		       20 e3 f6 	      JSR	PrintStaticText
    614  f26a		       a6 c6		      LDX	GameMode
    615  f26c		       bd 6c fc 	      LDA	FontLookup,X	;4 
    616  f26f		       85 d0		      STA	ScoreD0	;3
    617  f271		       4c ec f2 	      JMP	RightScoreWriteEnd	;3
    618  f274
    619  f274				   RightScoreWrite
    620  f274		       a5 bd		      LDA	GameStatus
    621  f276		       f0 53		      BEQ	PrintHellwayRight
    622  f278		       a5 c9		      LDA	ScoreFontColor
    623  f27a		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    624  f27c		       f0 d4		      BEQ	PrintStartGame
    625  f27e		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    626  f280		       f0 5c		      BEQ	PrintGameOver
    627  f282
    628  f282				   OpDigit0Timer
    629  f282		       a5 b9		      LDA	OpCountdownTimer	;3
    630  f284		       29 0f		      AND	#%00001111	;2
    631  f286		       aa		      TAX		; 2
    632  f287		       bd 6c fc 	      LDA	FontLookup,X	;4 
    633  f28a		       85 d4		      STA	ScoreD4	;3
    634  f28c
    635  f28c				   OpDigit1Timer
    636  f28c		       a5 b9		      LDA	OpCountdownTimer	;3
    637  f28e		       4a		      LSR		; 2
    638  f28f		       4a		      LSR		; 2
    639  f290		       4a		      LSR		; 2
    640  f291		       4a		      LSR		; 2
    641  f292		       aa		      TAX		; 2
    642  f293		       bd 6c fc 	      LDA	FontLookup,X	;4
    643  f296		       85 d3		      STA	ScoreD3	;3
    644  f298
    645  f298				   OpSpeedBar
    646  f298		       a5 f1		      LDA	Player1SpeedL
    647  f29a		       29 e0		      AND	#%11100000	;2 Discard the last bits
    648  f29c		       18		      CLC
    649  f29d		       2a		      ROL		;First goes into carry
    650  f29e		       2a		      ROL
    651  f29f		       2a		      ROL
    652  f2a0		       2a		      ROL
    653  f2a1		       85 b0		      STA	Tmp0
    654  f2a3		       a5 f3		      LDA	Player1SpeedH
    655  f2a5		       0a		      ASL
    656  f2a6		       0a		      ASL
    657  f2a7		       0a		      ASL
    658  f2a8		       05 b0		      ORA	Tmp0
    659  f2aa		       aa		      TAX		; 2
    660  f2ab		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    661  f2ae		       85 d2		      STA	ScoreD2	;3
    662  f2b0
    663  f2b0				   OpDistanceCheckpointCount		; Will run all letters in the future
    664  f2b0		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    665  f2b2		       29 f0		      AND	#%11110000	;2
    666  f2b4		       4a		      LSR
    667  f2b5		       4a		      LSR
    668  f2b6		       4a		      LSR
    669  f2b7		       4a		      LSR
    670  f2b8		       aa		      TAX		; 2
    671  f2b9		       bd 6c fc 	      LDA	FontLookup,X	;4 
    672  f2bc		       85 d1		      STA	ScoreD1	;3
    673  f2be
    674  f2be				   OpDistanceBar		; 16 subdivisions per checkpoint
    675  f2be		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    676  f2c0		       29 0f		      AND	#%00001111	;2
    677  f2c2		       aa		      TAX		; 2
    678  f2c3		       bd 7d fc 	      LDA	BarLookup,X	;4 
    679  f2c6		       85 d0		      STA	ScoreD0	;3
    680  f2c8		       4c ec f2 	      JMP	RightScoreWriteEnd
    681  f2cb
    682  f2cb				   PrintHellwayRight
    683  f2cb		       a5 8d		      LDA	FrameCount1
    684  f2cd		       29 01		      AND	#1
    685  f2cf		       d0 05		      BNE	PrintCreditsRight
    686  f2d1		       a2 0a		      LDX	#<HellwayRightText
    687  f2d3		       4c d8 f2 	      JMP	PrintRightIntro
    688  f2d6				   PrintCreditsRight
    689  f2d6		       a2 14		      LDX	#<YearText
    690  f2d8				   PrintRightIntro
    691  f2d8		       20 e3 f6 	      JSR	PrintStaticText
    692  f2db		       4c ec f2 	      JMP	RightScoreWriteEnd
    693  f2de				   PrintGameOver
    694  f2de		       a5 8c		      LDA	FrameCount0
    695  f2e0		       30 05		      BMI	PrintOverText
    696  f2e2		       a2 19		      LDX	#<GameText
    697  f2e4		       4c e9 f2 	      JMP	StoreGameOverText
    698  f2e7				   PrintOverText
    699  f2e7		       a2 1e		      LDX	#<OverText
    700  f2e9				   StoreGameOverText
    701  f2e9		       20 e3 f6 	      JSR	PrintStaticText
    702  f2ec				   RightScoreWriteEnd
    703  f2ec
    704  f2ec
    705  f2ec				   ScoreBackgroundColor
    706  f2ec		       a2 00		      LDX	#0
    707  f2ee		       ad 82 02 	      LDA	SWCHB
    708  f2f1		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    709  f2f3		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    710  f2f5		       f0 04		      BEQ	BlackAndWhiteScoreBg
    711  f2f7		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    712  f2f9		       a2 03		      LDX	#BACKGROUND_COLOR
    713  f2fb				   BlackAndWhiteScoreBg
    714  f2fb		       85 b2		      STA	Tmp2	; Score Background
    715  f2fd		       86 b3		      STX	Tmp3	; Traffic Background
    716  f2ff
    717  f2ff				   ConfigurePFForScore
    718  f2ff							;LDA #SCORE_BACKGROUND_COLOR; Done above
    719  f2ff		       85 09		      STA	COLUBK
    720  f301		       20 52 f6 	      JSR	ClearAll
    721  f304		       a9 02		      LDA	#%00000010	; Score mode
    722  f306		       85 0a		      STA	CTRLPF
    723  f308		       a5 de		      LDA	TextSide	;3
    724  f30a		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    725  f30c				   RightScoreOn
    726  f30c		       a5 ca		      LDA	OpScoreFontColor
    727  f30e		       85 07		      STA	COLUP1
    728  f310		       a5 b2		      LDA	Tmp2
    729  f312		       85 06		      STA	COLUP0
    730  f314		       4c 1f f3 	      JMP	CallWaitForVblankEnd
    731  f317				   LeftScoreOn
    732  f317		       a5 c9		      LDA	ScoreFontColor
    733  f319		       85 06		      STA	COLUP0
    734  f31b		       a5 b2		      LDA	Tmp2
    735  f31d		       85 07		      STA	COLUP1
    736  f31f
    737  f31f							; After here we are going to update the screen, No more heavy code
    738  f31f				   CallWaitForVblankEnd
    739  f31f		       20 76 f8 	      JSR	WaitForVblankEnd
    740  f322
    741  f322				   DrawScoreHud
    742  f322		       20 01 f7 	      JSR	PrintScore
    743  f325
    744  f325		       85 02		      STA	WSYNC
    745  f327
    746  f327		       a5 0c		      LDA	INPT4	;3
    747  f329							;BPL WaitAnotherScoreLine ; Draw traffic while button is pressed.
    748  f329		       4c 3c f3 	      JMP	WaitAnotherScoreLine	; Temporary disabling score, please enable line above!
    749  f32c		       a5 c9		      LDA	ScoreFontColor
    750  f32e		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    751  f330		       d0 0a		      BNE	WaitAnotherScoreLine
    752  f332		       a5 de		      LDA	TextSide	;3
    753  f334		       d0 03		      BNE	LeftScoreOnGameOver
    754  f336		       4c 50 f8 	      JMP	DrawGameOverScreenRight
    755  f339				   LeftScoreOnGameOver
    756  f339		       4c c2 f7 	      JMP	DrawGameOverScreenLeft
    757  f33c
    758  f33c				   WaitAnotherScoreLine
    759  f33c		       85 02		      STA	WSYNC
    760  f33e
    761  f33e				   PrepareForTraffic
    762  f33e		       20 68 f6 	      JSR	ClearPF	; 32
    763  f341
    764  f341		       85 02		      STA	WSYNC
    765  f343		       85 2a		      STA	HMOVE
    766  f345		       85 02		      STA	WSYNC
    767  f347		       85 2a		      STA	HMOVE
    768  f349
    769  f349		       a9 30		      LDA	#%00110000	; 2 Score mode
    770  f34b		       85 0a		      STA	CTRLPF	;3
    771  f34d
    772  f34d		       a5 8c		      LDA	FrameCount0	;3
    773  f34f		       29 01		      AND	#%00000001	;2
    774  f351		       aa		      TAX		;2
    775  f352		       b5 c2		      LDA	TrafficColor,X	;4
    776  f354		       85 08		      STA	COLUPF	;3
    777  f356
    778  f356		       a9 96		      LDA	#PLAYER1_COLOR	;2
    779  f358		       85 07		      STA	COLUP1	;3
    780  f35a
    781  f35a		       a5 c9		      LDA	ScoreFontColor	;3
    782  f35c		       85 06		      STA	COLUP0	;3
    783  f35e
    784  f35e		       a5 ca		      LDA	OpScoreFontColor	;3
    785  f360		       85 07		      STA	COLUP1	;3
    786  f362
    787  f362		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    788  f364
      0  f364					      SLEEP	24	; Keep the backround color more time, only needed if still support non dark mode
      1  f364				   .CYCLES    SET	24
      2  f364
      3  f364				  -	      IF	.CYCLES < 2
      4  f364				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f364				  -	      ERR
      6  f364					      ENDIF
      7  f364
      8  f364				  -	      IF	.CYCLES & 1
      9  f364				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f364				  -	      nop	0
     11  f364				  -	      ELSE
     12  f364				  -	      bit	VSYNC
     13  f364				  -	      ENDIF
     14  f364				  -.CYCLES    SET	.CYCLES - 3
     15  f364					      ENDIF
     16  f364
     17  f364					      REPEAT	.CYCLES / 2
     18  f364		       ea		      nop
     17  f364					      REPEND
     18  f365		       ea		      nop
     17  f365					      REPEND
     18  f366		       ea		      nop
     17  f366					      REPEND
     18  f367		       ea		      nop
     17  f367					      REPEND
     18  f368		       ea		      nop
     17  f368					      REPEND
     18  f369		       ea		      nop
     17  f369					      REPEND
     18  f36a		       ea		      nop
     17  f36a					      REPEND
     18  f36b		       ea		      nop
     17  f36b					      REPEND
     18  f36c		       ea		      nop
     17  f36c					      REPEND
     18  f36d		       ea		      nop
     17  f36d					      REPEND
     18  f36e		       ea		      nop
     17  f36e					      REPEND
     18  f36f		       ea		      nop
     19  f370					      REPEND
    790  f370
    791  f370		       a6 b3		      LDX	Tmp3	; Background color.
    792  f372
    793  f372		       a5 8c		      LDA	FrameCount0	;Brach flag
    794  f374		       29 01		      AND	#%00000001
    795  f376
    796  f376		       86 09		      STX	COLUBK	;3
    797  f378		       d0 05		      BNE	OpDrawCache	;2
    798  f37a		       4c 39 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    799  f37d							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    800  f37d
    801  f37d							;main scanline loop...
    802  f37d				   OpScanLoop
    803  f37d		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    804  f37f
    805  f37f							;Start of next line!			
    806  f37f				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    807  f37f
    808  f37f		       a5 80		      LDA	GRP0Cache	;3
    809  f381		       85 1b		      STA	GRP0	;3
    810  f383
    811  f383		       a5 84		      LDA	GRP1Cache	;3
    812  f385		       85 1c		      STA	GRP1	;3
    813  f387
    814  f387		       a5 85		      LDA	ENABLCache	;3
    815  f389		       85 1f		      STA	ENABL	;3
    816  f38b
    817  f38b		       a5 86		      LDA	ENAM0Cache	;3
    818  f38d		       85 1d		      STA	ENAM0	;3
    819  f38f
    820  f38f		       a5 87		      LDA	ENAM1Cache	;3
    821  f391		       85 1e		      STA	ENAM1	;3
    822  f393
    823  f393		       a5 81		      LDA	PF0Cache	;3
    824  f395		       85 0d		      STA	PF0	;3
    825  f397
    826  f397		       a9 00		      LDA	#0	;2
    827  f399							;STA PF0	     ;3
    828  f399		       85 80		      STA	GRP0Cache	;3
    829  f39b		       85 86		      STA	ENAM0Cache	;3
    830  f39d		       85 85		      STA	ENABLCache	;3
    831  f39f		       85 87		      STA	ENAM1Cache	; 3
    832  f3a1							;STA GRP1Cache ;3
    833  f3a1		       85 0d		      STA	PF0	;3
    834  f3a3							;STA PF2	     ;3
    835  f3a3
    836  f3a3		       a5 83		      LDA	PF2Cache	;3
    837  f3a5		       85 0f		      STA	PF2	;3
    838  f3a7
    839  f3a7				   OpDrawCar0
    840  f3a7		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    841  f3a9		       b0 04		      BCS	OpSkipDrawCar	;2
    842  f3ab		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    843  f3ad		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    844  f3af				   OpSkipDrawCar
    845  f3af
    846  f3af							;BEQ DrawTraffic3
    847  f3af				   OpDrawTraffic1		; 33
    848  f3af		       98		      TYA		; 2
    849  f3b0		       18		      CLC		; 2 
    850  f3b1		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    851  f3b3		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    852  f3b5		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    853  f3b7		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    854  f3b9		       4c be f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    855  f3bc				   OpEorOffsetWithCarry
    856  f3bc		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    857  f3be				   OpAfterEorOffsetWithCarry		;17
    858  f3be		       aa		      TAX		;2
    859  f3bf		       bd 00 fe 	      LDA	AesTable,X	; 4
    860  f3c2		       c5 bf		      CMP	OpTrafficChance	;3
    861  f3c4		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    862  f3c6		       a9 ff		      LDA	#$FF	;2
    863  f3c8		       85 86		      STA	ENAM0Cache	;3
    864  f3ca				   OpFinishDrawTraffic1
    865  f3ca
    866  f3ca				   OpErasePF2
    867  f3ca		       a9 00		      LDA	#0
    868  f3cc		       85 0f		      STA	PF2
    869  f3ce
    870  f3ce				   OpDrawTraffic2		; 33
    871  f3ce		       98		      TYA		; 2
    872  f3cf		       18		      CLC		; 2 
    873  f3d0		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    874  f3d2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    875  f3d4		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    876  f3d6		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    877  f3d8		       4c dd f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    878  f3db				   OpEorOffsetWithCarry2
    879  f3db		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    880  f3dd				   OpAfterEorOffsetWithCarry2		;17
    881  f3dd		       aa		      TAX		;2
    882  f3de		       bd 00 fe 	      LDA	AesTable,X	; 4
    883  f3e1		       c5 bf		      CMP	OpTrafficChance	;3
    884  f3e3		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    885  f3e5		       a9 02		      LDA	#%00000010	;2
    886  f3e7		       85 85		      STA	ENABLCache	;3
    887  f3e9				   OpFinishDrawTraffic2
    888  f3e9
    889  f3e9							;STA WSYNC ;65 / 137
    890  f3e9
    891  f3e9							; LDA Tmp0 ; Flicker this line if drawing car
    892  f3e9							; BEQ FinishDrawTraffic4
    893  f3e9				   OpDrawTraffic3		; 33
    894  f3e9		       98		      TYA		; 2
    895  f3ea		       18		      CLC		; 2 
    896  f3eb		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    897  f3ed		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    898  f3ef		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    899  f3f1		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    900  f3f3		       4c f8 f3 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    901  f3f6				   OpEorOffsetWithCarry3
    902  f3f6		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    903  f3f8				   OpAfterEorOffsetWithCarry3		;17
    904  f3f8		       aa		      TAX		;2
    905  f3f9		       bd 00 fe 	      LDA	AesTable,X	; 4
    906  f3fc		       c5 bf		      CMP	OpTrafficChance	;3
    907  f3fe		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    908  f400		       a9 02		      LDA	#%00000010	;2
    909  f402		       85 87		      STA	ENAM1Cache
    910  f404				   OpFinishDrawTraffic3
    911  f404
    912  f404				   OpDrawOponent		;26
    913  f404		       84 b0		      STY	Tmp0	;3
    914  f406		       a4 cf		      LDY	OpponentLine	;3
    915  f408		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    916  f40a		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    917  f40c				   OpDrawOpponent
    918  f40c		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    919  f40e		       85 80		      STA	GRP0Cache	;3
    920  f410		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    921  f412		       a4 b0		      LDY	Tmp0	;3
    922  f414		       4c 28 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    923  f417				   OpSkipDrawOpponent
    924  f417		       c6 cf		      DEC	OpponentLine	;5
    925  f419		       a4 b0		      LDY	Tmp0	;3
    926  f41b
    927  f41b
    928  f41b				   OpDrawTraffic0		; 21 2pe
    929  f41b		       98		      TYA		; 2
    930  f41c		       18		      CLC		; 2 
    931  f41d		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    932  f41f		       29 08		      AND	#%00001000	;2
    933  f421		       f0 05		      BEQ	OpHasNoBorderP0	;3
    934  f423				   OpHasBorderP0
    935  f423		       a9 70		      LDA	#%01110000	; 2
    936  f425		       4c 2a f4 	      JMP	OpStoreBorderP0	; 3
    937  f428				   OpHasNoBorderP0
    938  f428		       a9 00		      LDA	#0	; 2
    939  f42a				   OpStoreBorderP0
    940  f42a		       85 81		      STA	PF0Cache	; 3
    941  f42c		       85 83		      STA	PF2Cache	; 3
    942  f42e
    943  f42e				   OpSkipDrawTraffic0
    944  f42e
    945  f42e				   OpWhileScanLoop
    946  f42e		       88		      DEY		;2
    947  f42f		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    948  f431		       4c 7d f3 	      JMP	OpScanLoop	;3
    949  f434				   OpFinishScanLoop		; 7 209 of 222
    950  f434		       4c ec f4 	      JMP	FinishScanLoop
    951  f437
    952  f437							;main scanline loop...
    953  f437				   ScanLoop
    954  f437		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    955  f439
    956  f439							;Start of next line!			
    957  f439				   DrawCache		;63 Is the last line going to the top of the next frame?
    958  f439		       a5 81		      LDA	PF0Cache	;3
    959  f43b		       85 0d		      STA	PF0	;3
    960  f43d
    961  f43d		       a5 80		      LDA	GRP0Cache	;3
    962  f43f		       85 1b		      STA	GRP0	;3
    963  f441
    964  f441		       a5 84		      LDA	GRP1Cache	;3
    965  f443		       85 1c		      STA	GRP1	;3
    966  f445
    967  f445		       a5 86		      LDA	ENAM0Cache	;3
    968  f447		       85 1d		      STA	ENAM0	;3
    969  f449
    970  f449		       a5 85		      LDA	ENABLCache	;3
    971  f44b		       85 1f		      STA	ENABL	;3
    972  f44d
    973  f44d		       a5 87		      LDA	ENAM1Cache	;3
    974  f44f		       85 1e		      STA	ENAM1	;3
    975  f451
    976  f451		       a5 83		      LDA	PF2Cache	;3
    977  f453		       85 0f		      STA	PF2	;3
    978  f455
    979  f455		       a9 00		      LDA	#0	;2
    980  f457		       85 0d		      STA	PF0	;3
    981  f459		       85 84		      STA	GRP1Cache	;3
    982  f45b		       85 85		      STA	ENABLCache	;3
    983  f45d		       85 86		      STA	ENAM0Cache	;3
    984  f45f		       85 87		      STA	ENAM1Cache	; 3
    985  f461							;STA GRP0Cache
    986  f461		       85 0f		      STA	PF2	;3
    987  f463
    988  f463				   DrawCar0
    989  f463		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    990  f465		       b0 04		      BCS	SkipDrawCar	;2
    991  f467		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    992  f469		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
    993  f46b				   SkipDrawCar
    994  f46b
    995  f46b							;BEQ DrawTraffic3
    996  f46b				   DrawTraffic1 		; 33
    997  f46b		       98		      TYA		; 2
    998  f46c		       18		      CLC		; 2 
    999  f46d		       65 95		      ADC	TrafficOffset1 + 1	;3
   1000  f46f		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1001  f471		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1002  f473		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1003  f475		       4c 7a f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1004  f478				   EorOffsetWithCarry
   1005  f478		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1006  f47a				   AfterEorOffsetWithCarry		;17
   1007  f47a		       aa		      TAX		;2
   1008  f47b		       bd 00 fe 	      LDA	AesTable,X	; 4
   1009  f47e		       c5 be		      CMP	TrafficChance	;3
   1010  f480		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1011  f482		       a9 ff		      LDA	#$FF	;2
   1012  f484		       85 86		      STA	ENAM0Cache	;3
   1013  f486				   FinishDrawTraffic1
   1014  f486
   1015  f486				   DrawTraffic2 		; 33
   1016  f486		       98		      TYA		; 2
   1017  f487		       18		      CLC		; 2 
   1018  f488		       65 99		      ADC	TrafficOffset2 + 1	;3
   1019  f48a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1020  f48c		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1021  f48e		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1022  f490		       4c 95 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1023  f493				   EorOffsetWithCarry2
   1024  f493		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1025  f495				   AfterEorOffsetWithCarry2		;17
   1026  f495		       aa		      TAX		;2
   1027  f496		       bd 00 fe 	      LDA	AesTable,X	; 4
   1028  f499		       c5 be		      CMP	TrafficChance	;3
   1029  f49b		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1030  f49d		       a9 02		      LDA	#%00000010	;2
   1031  f49f		       85 85		      STA	ENABLCache	;3
   1032  f4a1				   FinishDrawTraffic2
   1033  f4a1
   1034  f4a1							;STA WSYNC ;65 / 137
   1035  f4a1
   1036  f4a1							; LDA Tmp0 ; Flicker this line if drawing car
   1037  f4a1							; BEQ FinishDrawTraffic4
   1038  f4a1				   DrawTraffic3 		; 33
   1039  f4a1		       98		      TYA		; 2
   1040  f4a2		       18		      CLC		; 2 
   1041  f4a3		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1042  f4a5		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1043  f4a7		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1044  f4a9		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1045  f4ab		       4c b0 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1046  f4ae				   EorOffsetWithCarry3
   1047  f4ae		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1048  f4b0				   AfterEorOffsetWithCarry3		;17
   1049  f4b0		       aa		      TAX		;2
   1050  f4b1		       bd 00 fe 	      LDA	AesTable,X	; 4
   1051  f4b4		       c5 be		      CMP	TrafficChance	;3
   1052  f4b6		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1053  f4b8		       a9 02		      LDA	#%00000010	;2
   1054  f4ba		       85 87		      STA	ENAM1Cache
   1055  f4bc				   FinishDrawTraffic3
   1056  f4bc
   1057  f4bc
   1058  f4bc				   DrawOponent		;26
   1059  f4bc		       84 b0		      STY	Tmp0	;3
   1060  f4be		       a4 cf		      LDY	OpponentLine	;3
   1061  f4c0		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1062  f4c2		       b0 0b		      BCS	SkipDrawOpponent	;2
   1063  f4c4				   DrawOpponent
   1064  f4c4		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1065  f4c6		       85 84		      STA	GRP1Cache	;3
   1066  f4c8		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1067  f4ca		       a4 b0		      LDY	Tmp0	;3
   1068  f4cc		       4c e0 f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1069  f4cf				   SkipDrawOpponent
   1070  f4cf		       c6 cf		      DEC	OpponentLine	;5
   1071  f4d1		       a4 b0		      LDY	Tmp0	;3
   1072  f4d3
   1073  f4d3				   DrawTraffic0 		; 21 2pe
   1074  f4d3		       98		      TYA		; 2
   1075  f4d4		       18		      CLC		; 2 
   1076  f4d5		       65 91		      ADC	TrafficOffset0 + 1	;3
   1077  f4d7		       29 08		      AND	#%00001000	;2
   1078  f4d9		       f0 05		      BEQ	HasNoBorderP0	;3
   1079  f4db				   HasBorderP0
   1080  f4db		       a9 70		      LDA	#%01110000	; 2
   1081  f4dd		       4c e2 f4 	      JMP	StoreBorderP0	; 3
   1082  f4e0				   HasNoBorderP0
   1083  f4e0		       a9 00		      LDA	#0	; 2
   1084  f4e2				   StoreBorderP0
   1085  f4e2		       85 81		      STA	PF0Cache	; 3
   1086  f4e4		       85 83		      STA	PF2Cache	; 3
   1087  f4e6
   1088  f4e6				   SkipDrawTraffic0
   1089  f4e6
   1090  f4e6				   WhileScanLoop
   1091  f4e6		       88		      DEY		;2
   1092  f4e7		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1093  f4e9		       4c 37 f4 	      JMP	ScanLoop	;3
   1094  f4ec				   FinishScanLoop		; 7 209 of 222
   1095  f4ec
   1096  f4ec		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1097  f4ee		       20 77 f6 	      JSR	LoadAll
   1098  f4f1		       85 02		      STA	WSYNC	; do stuff!
   1099  f4f3		       85 02		      STA	WSYNC
   1100  f4f5		       85 02		      STA	WSYNC
   1101  f4f7
   1102  f4f7				   PrepareOverscan
   1103  f4f7		       a9 02		      LDA	#2
   1104  f4f9		       85 02		      STA	WSYNC
   1105  f4fb							;STA HMOVE	; HMOVE 10
   1106  f4fb		       85 01		      STA	VBLANK
   1107  f4fd
   1108  f4fd		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1109  f4ff		       8d 96 02 	      STA	TIM64T
   1110  f502
   1111  f502		       85 2b		      STA	HMCLR	; Before we process car movement
   1112  f504							;Read Fire Button before, will make it start the game for now.
   1113  f504				   StartGame
   1114  f504		       a5 0c		      LDA	INPT4	;3
   1115  f506		       25 0d		      AND	INPT5	;3 player 
   1116  f508		       30 38		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1117  f50a		       a5 8c		      LDA	FrameCount0
   1118  f50c		       29 01		      AND	#%00000001
   1119  f50e		       d0 32		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1120  f510		       a5 bd		      LDA	GameStatus	;3
   1121  f512		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1122  f514		       d0 2c		      BNE	SkipGameStart
   1123  f516		       a5 c6		      LDA	GameMode
   1124  f518		       c9 10		      CMP	#MAX_GAME_MODE
   1125  f51a		       d0 0b		      BNE	SetGameRunning
   1126  f51c		       a9 00		      LDA	#0
   1127  f51e		       85 c6		      STA	GameMode
   1128  f520		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1129  f522		       85 bc		      STA	SwitchDebounceCounter
   1130  f524		       4c 42 f5 	      JMP	SkipGameStart
   1131  f527				   SetGameRunning
   1132  f527		       e6 bd		      INC	GameStatus
   1133  f529		       a9 00		      LDA	#0	;
   1134  f52b		       85 8c		      STA	FrameCount0
   1135  f52d		       85 8d		      STA	FrameCount1
   1136  f52f		       a9 0a		      LDA	#10
   1137  f531		       85 19		      STA	AUDV0
   1138  f533		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1139  f535		       85 c9		      STA	ScoreFontColor
   1140  f537		       85 ca		      STA	OpScoreFontColor
   1141  f539		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1142  f53b		       85 cb		      STA	ScoreFontColorHoldChange
   1143  f53d		       85 cc		      STA	OpScoreFontColorHoldChange
   1144  f53f		       4c aa f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1145  f542				   SkipGameStart
   1146  f542
   1147  f542				   ReadSwitches
   1148  f542		       a6 bc		      LDX	SwitchDebounceCounter
   1149  f544		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1150  f546		       a9 01		      LDA	#%00000001
   1151  f548		       2c 82 02 	      BIT	SWCHB
   1152  f54b		       d0 07		      BNE	SkipReset
   1153  f54d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1154  f54f		       85 bc		      STA	SwitchDebounceCounter
   1155  f551		       4c b2 f5 	      JMP	OverScanWaitBeforeReset
   1156  f554				   SkipReset
   1157  f554
   1158  f554				   GameModeSelect
   1159  f554		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1160  f556		       d0 1c		      BNE	SkipGameSelect
   1161  f558		       20 a3 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1162  f55b				   ContinueGameSelect
   1163  f55b		       a9 02		      LDA	#%00000010
   1164  f55d		       2c 82 02 	      BIT	SWCHB
   1165  f560		       d0 12		      BNE	SkipGameSelect
   1166  f562		       a6 c6		      LDX	GameMode
   1167  f564		       e0 10		      CPX	#MAX_GAME_MODE
   1168  f566		       f0 04		      BEQ	ResetGameMode
   1169  f568		       e8		      INX
   1170  f569		       4c 6e f5 	      JMP	StoreGameMode
   1171  f56c				   ResetGameMode
   1172  f56c		       a2 00		      LDX	#0
   1173  f56e				   StoreGameMode
   1174  f56e		       86 c6		      STX	GameMode
   1175  f570		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1176  f572		       85 bc		      STA	SwitchDebounceCounter
   1177  f574				   SkipGameSelect
   1178  f574		       4c 79 f5 	      JMP	EndReadSwitches
   1179  f577				   DecrementSwitchDebounceCounter
   1180  f577		       c6 bc		      DEC	SwitchDebounceCounter
   1181  f579				   EndReadSwitches
   1182  f579
   1183  f579				   DoNotTurnBeforeStart
   1184  f579							;STA HMCLR
   1185  f579		       a5 bd		      LDA	GameStatus
   1186  f57b		       f0 2d		      BEQ	OverScanWait
   1187  f57d
   1188  f57d							; Last thing, will overrride hmove
   1189  f57d				   CallTestColisionAndMove
   1190  f57d		       a2 00		      LDX	#0	; Player 0
   1191  f57f							; Colision with traffic, each player check different flags,
   1192  f57f		       a5 8c		      LDA	FrameCount0
   1193  f581		       29 01		      AND	#%00000001
   1194  f583		       d0 07		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1195  f585		       a5 01		      LDA	CXM1P
   1196  f587		       4a		      LSR
   1197  f588		       05 00		      ORA	CXM0P
   1198  f58a		       05 02		      ORA	CXP0FB
   1199  f58c							; ORA CXPPMM ; Collision between players will have its own rules
   1200  f58c				   SkipColisionPlayer0		; Should not colide on opponent side.
   1201  f58c		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1202  f58e		       85 b2		      STA	Tmp2
   1203  f590		       20 24 f9 	      JSR	TestCollisionAndMove
   1204  f593
   1205  f593		       e8		      INX		; player 1
   1206  f594		       a5 8c		      LDA	FrameCount0
   1207  f596		       29 01		      AND	#%00000001
   1208  f598		       f0 07		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1209  f59a		       a5 00		      LDA	CXM0P
   1210  f59c		       4a		      LSR
   1211  f59d		       05 01		      ORA	CXM1P
   1212  f59f		       05 03		      ORA	CXP1FB
   1213  f5a1				   SkipColisionPlayer1
   1214  f5a1		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1215  f5a3		       85 b2		      STA	Tmp2
   1216  f5a5		       20 24 f9 	      JSR	TestCollisionAndMove
   1217  f5a8
   1218  f5a8				   ClearCollision
   1219  f5a8		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1220  f5aa
   1221  f5aa				   OverScanWait
   1222  f5aa		       ad 84 02 	      LDA	INTIM
   1223  f5ad		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1224  f5af		       4c de f0 	      JMP	MainLoop
   1225  f5b2
   1226  f5b2				   OverScanWaitBeforeReset
   1227  f5b2		       ad 84 02 	      LDA	INTIM
   1228  f5b5		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1229  f5b7		       4c 14 f0 	      JMP	Start
   1230  f5ba
   1231  f5ba				   Subroutines
   1232  f5ba
   1233  f5ba				   ProcessSound
   1234  f5ba				   LeftSound		;41
   1235  f5ba		       a5 b8		      LDA	CountdownTimer	;3
   1236  f5bc		       f0 1b		      BEQ	EngineOff	;2
   1237  f5be		       a6 d5		      LDX	Gear
   1238  f5c0		       a5 f0		      LDA	Player0SpeedL	;3
   1239  f5c2		       4a		      LSR		;2
   1240  f5c3		       4a		      LSR		;2
   1241  f5c4		       4a		      LSR		;2
   1242  f5c5		       29 0f		      AND	#%00001111	;2
   1243  f5c7		       85 b0		      STA	Tmp0	;3
   1244  f5c9		       bd 49 ff 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1245  f5cc		       38		      SEC		;2
   1246  f5cd		       e5 b0		      SBC	Tmp0	;3
   1247  f5cf		       85 17		      STA	AUDF0	;3
   1248  f5d1		       bd 43 ff 	      LDA	EngineSoundType,X	;4
   1249  f5d4		       85 15		      STA	AUDC0	;3
   1250  f5d6		       4c dd f5 	      JMP	EndLeftSound	;3
   1251  f5d9				   EngineOff
   1252  f5d9		       a9 00		      LDA	#0
   1253  f5db		       85 15		      STA	AUDC0
   1254  f5dd
   1255  f5dd				   EndLeftSound
   1256  f5dd
   1257  f5dd
   1258  f5dd				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1259  f5dd		       a5 c9		      LDA	ScoreFontColor	;3
   1260  f5df		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1261  f5e1		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1262  f5e3		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1263  f5e5		       f0 29		      BEQ	PlayCheckpoint	;2
   1264  f5e7		       a5 8e		      LDA	CollisionCounter	;3
   1265  f5e9		       c9 e0		      CMP	#$E0	;2
   1266  f5eb		       b0 14		      BCS	PlayColision	;2
   1267  f5ed		       a5 cd		      LDA	NextCheckpoint	;3
   1268  f5ef		       38		      SEC		;2
   1269  f5f0		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1270  f5f2		       c9 02		      CMP	#$02	;2
   1271  f5f4		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1272  f5f6		       a5 b8		      LDA	CountdownTimer	; 3
   1273  f5f8		       f0 53		      BEQ	MuteRightSound	;2
   1274  f5fa		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1275  f5fc		       90 37		      BCC	PlayWarnTimeEnding	;4
   1276  f5fe		       4c 4d f6 	      JMP	MuteRightSound	;3
   1277  f601				   PlayColision
   1278  f601		       a9 1f		      LDA	#31
   1279  f603		       85 18		      STA	AUDF1
   1280  f605		       a9 08		      LDA	#8
   1281  f607		       85 16		      STA	AUDC1
   1282  f609		       a9 08		      LDA	#8
   1283  f60b		       85 1a		      STA	AUDV1
   1284  f60d		       4c 51 f6 	      JMP	EndRightSound
   1285  f610
   1286  f610				   PlayCheckpoint
   1287  f610		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1288  f612		       4a		      LSR		;2
   1289  f613		       4a		      LSR		;2
   1290  f614		       4a		      LSR		;2
   1291  f615		       85 18		      STA	AUDF1	;3
   1292  f617		       a9 0c		      LDA	#12	;2
   1293  f619		       85 16		      STA	AUDC1	;3
   1294  f61b		       a9 06		      LDA	#6	;2
   1295  f61d		       85 1a		      STA	AUDV1	;3
   1296  f61f		       4c 51 f6 	      JMP	EndRightSound	;3
   1297  f622
   1298  f622				   PlayBeforeCheckpoint
   1299  f622		       a5 8c		      LDA	FrameCount0	;3
   1300  f624		       29 1c		      AND	#%00011100	;2
   1301  f626		       09 03		      ORA	#%00000011	;2
   1302  f628		       85 18		      STA	AUDF1	;3
   1303  f62a		       a9 0c		      LDA	#12	;2
   1304  f62c		       85 16		      STA	AUDC1	;3
   1305  f62e		       a9 03		      LDA	#3	;2
   1306  f630		       85 1a		      STA	AUDV1	;3
   1307  f632		       4c 51 f6 	      JMP	EndRightSound	;3
   1308  f635
   1309  f635				   PlayWarnTimeEnding
   1310  f635		       a5 8c		      LDA	FrameCount0	;3
   1311  f637		       29 04		      AND	#%00000100	;2
   1312  f639		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1313  f63b		       18		      CLC		;2
   1314  f63c		       a9 0a		      LDA	#10	;2
   1315  f63e		       65 b8		      ADC	CountdownTimer	;2
   1316  f640		       85 18		      STA	AUDF1	;3
   1317  f642		       a9 0c		      LDA	#12	;2
   1318  f644		       85 16		      STA	AUDC1	;3
   1319  f646		       a9 03		      LDA	#3	;2
   1320  f648		       85 1a		      STA	AUDV1	;3
   1321  f64a		       4c 51 f6 	      JMP	EndRightSound	;3
   1322  f64d
   1323  f64d				   MuteRightSound
   1324  f64d		       a9 00		      LDA	#0
   1325  f64f		       85 1a		      STA	AUDV1
   1326  f651				   EndRightSound
   1327  f651		       60		      RTS
   1328  f652
   1329  f652				   ClearAll		; 58
   1330  f652		       a9 00		      LDA	#0	;2
   1331  f654		       85 1b		      STA	GRP0	;3
   1332  f656		       85 1c		      STA	GRP1	;3
   1333  f658		       85 1f		      STA	ENABL	;3
   1334  f65a		       85 1d		      STA	ENAM0	;3
   1335  f65c		       85 1e		      STA	ENAM1	;3
   1336  f65e		       85 80		      STA	GRP0Cache	;3
   1337  f660		       85 84		      STA	GRP1Cache	;3
   1338  f662		       85 85		      STA	ENABLCache	;3
   1339  f664		       85 86		      STA	ENAM0Cache	;3
   1340  f666		       85 87		      STA	ENAM1Cache	;3
   1341  f668
   1342  f668				   ClearPF		; 26
   1343  f668		       a9 00		      LDA	#0	;2
   1344  f66a				   ClearPFSkipLDA0
   1345  f66a		       85 0d		      STA	PF0	;3
   1346  f66c		       85 0e		      STA	PF1	;3
   1347  f66e		       85 0f		      STA	PF2	;3	
   1348  f670		       85 81		      STA	PF0Cache	;3
   1349  f672		       85 82		      STA	PF1Cache	;3
   1350  f674		       85 83		      STA	PF2Cache	;3 
   1351  f676		       60		      RTS		;6
   1352  f677				   EndClearAll
   1353  f677
   1354  f677				   LoadAll		; 48
   1355  f677		       a5 81		      LDA	PF0Cache	;3
   1356  f679		       85 0d		      STA	PF0	;3
   1357  f67b
   1358  f67b		       a5 82		      LDA	PF1Cache	;3
   1359  f67d		       85 0e		      STA	PF1	;3
   1360  f67f
   1361  f67f		       a5 83		      LDA	PF2Cache	;3
   1362  f681		       85 0f		      STA	PF2	;3
   1363  f683
   1364  f683		       a5 84		      LDA	GRP1Cache	;3
   1365  f685		       85 1c		      STA	GRP1	;3
   1366  f687
   1367  f687		       a5 85		      LDA	ENABLCache	;3
   1368  f689		       85 1f		      STA	ENABL	;3
   1369  f68b
   1370  f68b		       a5 86		      LDA	ENAM0Cache	;3
   1371  f68d		       85 1d		      STA	ENAM0	;3
   1372  f68f
   1373  f68f		       a5 87		      LDA	ENAM1Cache	;3
   1374  f691		       85 1e		      STA	ENAM1	;3
   1375  f693
   1376  f693		       60		      RTS		;6
   1377  f694				   EndLoadAll
   1378  f694
   1379  f694				   NextDifficulty		;Is a SBR
   1380  f694		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1381  f696		       29 01		      AND	#%00000001
   1382  f698		       d0 24		      BNE	CheckRandomDifficulty
   1383  f69a
   1384  f69a		       b5 c4		      LDA	CurrentDifficulty,X
   1385  f69c		       18		      CLC
   1386  f69d		       69 01		      ADC	#1
   1387  f69f		       29 03		      AND	#%00000011	; 0 to 3
   1388  f6a1		       95 c4		      STA	CurrentDifficulty,X
   1389  f6a3
   1390  f6a3				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1391  f6a3		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1392  f6a5		       b9 c5 ff 	      LDA	TrafficChanceTable,Y
   1393  f6a8		       95 be		      STA	TrafficChance,X
   1394  f6aa		       b9 c1 ff 	      LDA	TrafficColorTable,Y
   1395  f6ad		       95 c2		      STA	TrafficColor,X
   1396  f6af
   1397  f6af		       a5 c6		      LDA	GameMode	;
   1398  f6b1		       29 01		      AND	#%00000001
   1399  f6b3		       f0 03		      BEQ	UseNextDifficultyTime
   1400  f6b5		       4c b9 f6 	      JMP	StoreDifficultyTime
   1401  f6b8				   UseNextDifficultyTime
   1402  f6b8		       c8		      INY
   1403  f6b9				   StoreDifficultyTime
   1404  f6b9		       b9 c9 ff 	      LDA	TrafficTimeTable,Y
   1405  f6bc		       95 c0		      STA	CheckpointTime,X
   1406  f6be
   1407  f6be				   CheckRandomDifficulty
   1408  f6be		       a5 c6		      LDA	GameMode
   1409  f6c0		       29 08		      AND	#%00001000	; Random difficulties
   1410  f6c2		       f0 09		      BEQ	ReturnFromNextDifficulty
   1411  f6c4				   RandomDifficulty		; need work to make 2 players compatible
   1412  f6c4		       a4 8c		      LDY	FrameCount0
   1413  f6c6		       b9 00 fe 	      LDA	AesTable,Y
   1414  f6c9							;EOR TrafficChance, no need, lets make life simple
   1415  f6c9		       29 3f		      AND	#%00111111
   1416  f6cb		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1417  f6cd
   1418  f6cd				   ReturnFromNextDifficulty
   1419  f6cd		       60		      RTS
   1420  f6ce
   1421  f6ce				   DefaultOffsets
   1422  f6ce		       a9 20		      LDA	#$20
   1423  f6d0		       85 96		      STA	TrafficOffset1 + 2
   1424  f6d2		       85 a6		      STA	OpTrafficOffset1 + 2
   1425  f6d4		       a9 40		      LDA	#$40
   1426  f6d6		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1427  f6d8		       85 aa		      STA	OpTrafficOffset2 + 2
   1428  f6da		       a9 60		      LDA	#$60
   1429  f6dc		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1430  f6de		       85 ae		      STA	OpTrafficOffset3 + 2
   1431  f6e0		       a9 80		      LDA	#$80
   1432  f6e2		       60		      RTS
   1433  f6e3
   1434  f6e3				   PrintStaticText		; Preload X with the offset referent to StaticText
   1435  f6e3		       bd 00 ff 	      LDA	StaticText,X
   1436  f6e6		       85 d0		      STA	ScoreD0
   1437  f6e8		       e8		      INX
   1438  f6e9		       bd 00 ff 	      LDA	StaticText,X
   1439  f6ec		       85 d1		      STA	ScoreD1
   1440  f6ee		       e8		      INX
   1441  f6ef		       bd 00 ff 	      LDA	StaticText,X
   1442  f6f2		       85 d2		      STA	ScoreD2
   1443  f6f4		       e8		      INX
   1444  f6f5		       bd 00 ff 	      LDA	StaticText,X
   1445  f6f8		       85 d3		      STA	ScoreD3
   1446  f6fa		       e8		      INX
   1447  f6fb		       bd 00 ff 	      LDA	StaticText,X
   1448  f6fe		       85 d4		      STA	ScoreD4
   1449  f700		       60		      RTS
   1450  f701
   1451  f701				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1452  f701		       a2 00		      LDX	#0
   1453  f703		       a0 04		      LDY	#FONT_OFFSET
   1454  f705
   1455  f705				   ScoreLoop		; 20 
   1456  f705		       85 02		      STA	WSYNC	;2
   1457  f707		       85 2a		      STA	HMOVE
   1458  f709
   1459  f709		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1460  f70b		       85 0d		      STA	PF0	;3
   1461  f70d
   1462  f70d		       a5 82		      LDA	PF1Cache	;3
   1463  f70f		       85 0e		      STA	PF1	;3
   1464  f711
   1465  f711		       a5 83		      LDA	PF2Cache	;3
   1466  f713		       85 0f		      STA	PF2	;3
   1467  f715
   1468  f715				   DrawScoreD0		; 15
   1469  f715		       a6 d0		      LDX	ScoreD0	; 3
   1470  f717		       bd 00 fd 	      LDA	Font,X	;4
   1471  f71a		       85 81		      STA	PF0Cache	;3
   1472  f71c		       c6 d0		      DEC	ScoreD0	;5
   1473  f71e
   1474  f71e				   DrawScoreD1		; 23	
   1475  f71e		       a6 d1		      LDX	ScoreD1	; 3
   1476  f720		       bd 00 fd 	      LDA	Font,X	;4
   1477  f723		       0a		      ASL		;2
   1478  f724		       0a		      ASL		;2
   1479  f725		       0a		      ASL		;2
   1480  f726		       0a		      ASL		;2
   1481  f727		       85 82		      STA	PF1Cache	;3
   1482  f729		       c6 d1		      DEC	ScoreD1	;5
   1483  f72b
   1484  f72b				   DrawScoreD2		; 20
   1485  f72b		       a6 d2		      LDX	ScoreD2	; 3
   1486  f72d		       bd 00 fd 	      LDA	Font,X	;4
   1487  f730		       29 0f		      AND	#%00001111	;2
   1488  f732		       05 82		      ORA	PF1Cache	;3
   1489  f734		       85 82		      STA	PF1Cache	;3
   1490  f736		       c6 d2		      DEC	ScoreD2	;5
   1491  f738
   1492  f738				   DrawScoreD3		; 23
   1493  f738		       a6 d3		      LDX	ScoreD3	; 3
   1494  f73a		       bd 00 fd 	      LDA	Font,X	;4
   1495  f73d		       4a		      LSR		;2
   1496  f73e		       4a		      LSR		;2
   1497  f73f		       4a		      LSR		;2
   1498  f740		       4a		      LSR		;2
   1499  f741		       85 83		      STA	PF2Cache	;3
   1500  f743		       c6 d3		      DEC	ScoreD3	;5
   1501  f745
   1502  f745				   DrawScoreD4		; 20
   1503  f745		       a6 d4		      LDX	ScoreD4	; 3
   1504  f747		       bd 00 fd 	      LDA	Font,X	;4
   1505  f74a		       29 f0		      AND	#%11110000	;2
   1506  f74c		       05 83		      ORA	PF2Cache	;3
   1507  f74e		       85 83		      STA	PF2Cache	;3
   1508  f750		       c6 d4		      DEC	ScoreD4	;5
   1509  f752
   1510  f752
   1511  f752		       88		      DEY		;2
   1512  f753		       10 b0		      BPL	ScoreLoop	;4
   1513  f755
   1514  f755		       85 02		      STA	WSYNC
   1515  f757		       85 2a		      STA	HMOVE
   1516  f759		       20 77 f6 	      JSR	LoadAll
   1517  f75c		       60		      RTS		; 6
   1518  f75d
   1519  f75d				   PrintRightDecimalDigits
   1520  f75d		       b9 00 00 	      LDA	0,Y
   1521  f760		       4a		      LSR
   1522  f761		       4a		      LSR
   1523  f762		       4a		      LSR
   1524  f763		       4a		      LSR
   1525  f764		       aa		      TAX
   1526  f765		       bd 6c fc 	      LDA	FontLookup,X	;4
   1527  f768		       85 d2		      STA	ScoreD2	;3
   1528  f76a
   1529  f76a		       b9 00 00 	      LDA	0,Y
   1530  f76d		       29 0f		      AND	#%00001111
   1531  f76f		       aa		      TAX
   1532  f770		       bd 6c fc 	      LDA	FontLookup,X	;4
   1533  f773		       85 d3		      STA	ScoreD3	;3
   1534  f775
   1535  f775		       c8		      INY
   1536  f776		       b9 00 00 	      LDA	0,Y
   1537  f779		       4a		      LSR
   1538  f77a		       4a		      LSR
   1539  f77b		       4a		      LSR
   1540  f77c		       4a		      LSR
   1541  f77d		       aa		      TAX
   1542  f77e		       bd 6c fc 	      LDA	FontLookup,X	;4
   1543  f781		       85 d0		      STA	ScoreD0	;3
   1544  f783
   1545  f783		       b9 00 00 	      LDA	0,Y
   1546  f786		       29 0f		      AND	#%00001111
   1547  f788		       aa		      TAX
   1548  f789		       bd 6c fc 	      LDA	FontLookup,X	;4
   1549  f78c		       85 d1		      STA	ScoreD1	;3
   1550  f78e
   1551  f78e		       a9 ae		      LDA	#<Triangle + FONT_OFFSET
   1552  f790		       85 d4		      STA	ScoreD4
   1553  f792		       60		      RTS
   1554  f793
   1555  f793				   PrintLastLeftDecimalDigits
   1556  f793		       b9 00 00 	      LDA	0,Y
   1557  f796		       4a		      LSR
   1558  f797		       4a		      LSR
   1559  f798		       4a		      LSR
   1560  f799		       4a		      LSR
   1561  f79a		       aa		      TAX
   1562  f79b		       bd 6c fc 	      LDA	FontLookup,X	;4
   1563  f79e		       85 d3		      STA	ScoreD3	;3
   1564  f7a0		       b9 00 00 	      LDA	0,Y
   1565  f7a3		       29 0f		      AND	#%00001111
   1566  f7a5		       aa		      TAX
   1567  f7a6		       bd 6c fc 	      LDA	FontLookup,X	;4
   1568  f7a9		       85 d4		      STA	ScoreD4	;3
   1569  f7ab		       60		      RTS
   1570  f7ac
   1571  f7ac				   PrintZerosLeft
   1572  f7ac		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1573  f7ae		       85 d2		      STA	ScoreD2
   1574  f7b0		       85 d3		      STA	ScoreD3
   1575  f7b2		       85 d4		      STA	ScoreD4
   1576  f7b4		       60		      RTS
   1577  f7b5
   1578  f7b5				   DrawGameOverScoreLine
   1579  f7b5		       85 02		      STA	WSYNC
   1580  f7b7		       20 01 f7 	      JSR	PrintScore
   1581  f7ba		       85 02		      STA	WSYNC
   1582  f7bc		       85 02		      STA	WSYNC
   1583  f7be		       20 68 f6 	      JSR	ClearPF
   1584  f7c1		       60		      RTS
   1585  f7c2
   1586  f7c2				   DrawGameOverScreenLeft
   1587  f7c2		       85 02		      STA	WSYNC
   1588  f7c4		       20 68 f6 	      JSR	ClearPF
   1589  f7c7
   1590  f7c7				   DrawGlideTimerLeft
   1591  f7c7		       20 89 f8 	      JSR	Sleep8Lines
   1592  f7ca		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1593  f7cc		       85 06		      STA	COLUP0
   1594  f7ce		       85 02		      STA	WSYNC
   1595  f7d0		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1596  f7d2		       85 d0		      STA	ScoreD0
   1597  f7d4		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1598  f7d6		       85 d1		      STA	ScoreD1
   1599  f7d8		       20 ac f7 	      JSR	PrintZerosLeft
   1600  f7db		       20 b5 f7 	      JSR	DrawGameOverScoreLine
   1601  f7de
   1602  f7de				   DrawHitCountLeft
   1603  f7de		       20 89 f8 	      JSR	Sleep8Lines
   1604  f7e1		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1605  f7e3		       85 06		      STA	COLUP0
   1606  f7e5		       85 02		      STA	WSYNC
   1607  f7e7		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1608  f7e9		       85 d0		      STA	ScoreD0
   1609  f7eb		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1610  f7ed		       85 d1		      STA	ScoreD1
   1611  f7ef		       20 ac f7 	      JSR	PrintZerosLeft
   1612  f7f2		       20 b5 f7 	      JSR	DrawGameOverScoreLine
   1613  f7f5
   1614  f7f5				   DrawCheckpointCountLeft
   1615  f7f5		       20 89 f8 	      JSR	Sleep8Lines
   1616  f7f8		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1617  f7fa		       85 06		      STA	COLUP0
   1618  f7fc		       85 02		      STA	WSYNC
   1619  f7fe		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1620  f800		       85 d0		      STA	ScoreD0
   1621  f802		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1622  f804		       85 d1		      STA	ScoreD1
   1623  f806		       20 ac f7 	      JSR	PrintZerosLeft
   1624  f809		       20 b5 f7 	      JSR	DrawGameOverScoreLine
   1625  f80c
   1626  f80c				   DrawGameVersionLeft
   1627  f80c		       20 89 f8 	      JSR	Sleep8Lines
   1628  f80f		       a9 49		      LDA	#VERSION_COLOR
   1629  f811		       85 06		      STA	COLUP0
   1630  f813
   1631  f813		       a5 c6		      LDA	GameMode
   1632  f815		       aa		      TAX
   1633  f816		       bd 6c fc 	      LDA	FontLookup,X	;4
   1634  f819		       85 d0		      STA	ScoreD0	;3
   1635  f81b
   1636  f81b		       a5 c7		      LDA	CurrentCarId
   1637  f81d		       aa		      TAX
   1638  f81e		       bd 6c fc 	      LDA	FontLookup,X	;4
   1639  f821		       85 d1		      STA	ScoreD1	;3
   1640  f823
   1641  f823		       a5 db		      LDA	StartSWCHB
   1642  f825		       29 40		      AND	#%01000000	; P0 difficulty
   1643  f827		       49 40		      EOR	#%01000000	; Reverse bytes
   1644  f829		       2a		      ROL
   1645  f82a		       2a		      ROL
   1646  f82b		       2a		      ROL
   1647  f82c		       18		      CLC
   1648  f82d		       69 0a		      ADC	#10
   1649  f82f		       aa		      TAX
   1650  f830		       bd 6c fc 	      LDA	FontLookup,X	;4
   1651  f833		       85 d2		      STA	ScoreD2	;3
   1652  f835
   1653  f835		       a5 db		      LDA	StartSWCHB
   1654  f837		       29 80		      AND	#%10000000	; P0 difficulty
   1655  f839		       49 80		      EOR	#%10000000	; Reverse bytes
   1656  f83b		       2a		      ROL
   1657  f83c		       2a		      ROL
   1658  f83d		       18		      CLC
   1659  f83e		       69 0a		      ADC	#10
   1660  f840		       aa		      TAX
   1661  f841		       bd 6c fc 	      LDA	FontLookup,X	;4
   1662  f844		       85 d3		      STA	ScoreD3	;3
   1663  f846
   1664  f846		       a9 a9		      LDA	#<Pipe + FONT_OFFSET
   1665  f848		       85 d4		      STA	ScoreD4
   1666  f84a
   1667  f84a		       20 b5 f7 	      JSR	DrawGameOverScoreLine
   1668  f84d
   1669  f84d		       4c 66 f8 	      JMP	FinalizeDrawGameOver
   1670  f850
   1671  f850				   DrawGameOverScreenRight
   1672  f850		       85 02		      STA	WSYNC
   1673  f852		       20 68 f6 	      JSR	ClearPF
   1674  f855
   1675  f855				   DrawVersionRight
   1676  f855		       20 89 f8 	      JSR	Sleep8Lines
   1677  f858		       a9 49		      LDA	#VERSION_COLOR
   1678  f85a		       85 07		      STA	COLUP1
   1679  f85c		       85 02		      STA	WSYNC
   1680  f85e		       a2 28		      LDX	#<VersionText
   1681  f860		       20 e3 f6 	      JSR	PrintStaticText
   1682  f863		       20 b5 f7 	      JSR	DrawGameOverScoreLine
   1683  f866
   1684  f866				   FinalizeDrawGameOver
   1685  f866		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1686  f868		       85 c9		      STA	ScoreFontColor
   1687  f86a		       20 80 f8 	      JSR	Sleep4Lines
   1688  f86d		       20 90 f8 	      JSR	Sleep32Lines
   1689  f870		       20 90 f8 	      JSR	Sleep32Lines
   1690  f873		       4c f7 f4 	      JMP	PrepareOverscan
   1691  f876
   1692  f876				   WaitForVblankEnd
   1693  f876		       ad 84 02 	      LDA	INTIM
   1694  f879		       d0 fb		      BNE	WaitForVblankEnd
   1695  f87b		       85 02		      STA	WSYNC
   1696  f87d		       85 01		      STA	VBLANK
   1697  f87f		       60		      RTS
   1698  f880
   1699  f880				   Sleep4Lines
   1700  f880		       85 02		      STA	WSYNC
   1701  f882		       85 02		      STA	WSYNC
   1702  f884		       85 02		      STA	WSYNC
   1703  f886		       85 02		      STA	WSYNC
   1704  f888		       60		      RTS
   1705  f889
   1706  f889				   Sleep8Lines
   1707  f889		       20 80 f8 	      JSR	Sleep4Lines
   1708  f88c		       20 80 f8 	      JSR	Sleep4Lines
   1709  f88f		       60		      RTS
   1710  f890
   1711  f890				   Sleep32Lines
   1712  f890		       20 89 f8 	      JSR	Sleep8Lines
   1713  f893		       20 89 f8 	      JSR	Sleep8Lines
   1714  f896		       20 89 f8 	      JSR	Sleep8Lines
   1715  f899		       20 89 f8 	      JSR	Sleep8Lines
   1716  f89c		       60		      RTS
   1717  f89d
   1718  f89d							;X = number of WSYNC HMOVE to run
   1719  f89d				   HMoveXTimes
   1720  f89d		       85 02		      STA	WSYNC	;3
   1721  f89f		       85 2a		      STA	HMOVE	; 3/10 
   1722  f8a1		       ca		      DEX
   1723  f8a2		       d0 f9		      BNE	HMoveXTimes
   1724  f8a4		       60		      RTS
   1725  f8a5
   1726  f8a5				   ConfigureCarSprites
   1727  f8a5		       a5 8c		      LDA	FrameCount0
   1728  f8a7		       29 01		      AND	#%00000001
   1729  f8a9		       d0 0b		      BNE	LoadForRightScreenSprites
   1730  f8ab				   LoadForLeftScreenSprites
   1731  f8ab		       a5 c7		      LDA	CurrentCarId
   1732  f8ad		       85 b0		      STA	Tmp0
   1733  f8af		       a5 c8		      LDA	OpCurrentCarId
   1734  f8b1		       85 b1		      STA	Tmp1
   1735  f8b3		       4c be f8 	      JMP	LoadCarSpritesFromIds
   1736  f8b6				   LoadForRightScreenSprites
   1737  f8b6		       a5 c7		      LDA	CurrentCarId
   1738  f8b8		       85 b1		      STA	Tmp1
   1739  f8ba		       a5 c8		      LDA	OpCurrentCarId
   1740  f8bc		       85 b0		      STA	Tmp0
   1741  f8be
   1742  f8be				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1743  f8be		       a4 b0		      LDY	Tmp0
   1744  f8c0		       b9 9b ff 	      LDA	CarIdToSpriteAddressL,Y
   1745  f8c3		       85 d7		      STA	CarSpritePointerL
   1746  f8c5		       b9 9f ff 	      LDA	CarIdToSpriteAddressH,Y
   1747  f8c8		       85 d8		      STA	CarSpritePointerH
   1748  f8ca				   ConfigureOpponentCarSprite
   1749  f8ca		       a4 b1		      LDY	Tmp1
   1750  f8cc		       b9 a3 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1751  f8cf		       85 d9		      STA	EnemyCarSpritePointerL
   1752  f8d1		       b9 a7 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1753  f8d4		       85 da		      STA	EnemyCarSpritePointerH
   1754  f8d6		       60		      RTS
   1755  f8d7
   1756  f8d7							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1757  f8d7							;X player 0 or 1
   1758  f8d7				   SelectCarWithDpad
   1759  f8d7		       a0 03		      LDY	#3
   1760  f8d9				   SelectCarWithDpadLoop
   1761  f8d9		       ad 80 02 	      LDA	SWCHA
   1762  f8dc		       25 b0		      AND	Tmp0
   1763  f8de		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1764  f8e0		       98		      TYA
   1765  f8e1		       95 c7		      STA	CurrentCarId,X
   1766  f8e3				   ContinueSelectCarWithDpadLoop
   1767  f8e3		       46 b0		      LSR	Tmp0
   1768  f8e5		       88		      DEY
   1769  f8e6		       10 f1		      BPL	SelectCarWithDpadLoop
   1770  f8e8		       60		      RTS
   1771  f8e9
   1772  f8e9				   ProcessOpponentLine
   1773  f8e9		       a5 8c		      LDA	FrameCount0
   1774  f8eb		       29 01		      AND	#%00000001
   1775  f8ed		       38		      SEC
   1776  f8ee		       d0 0f		      BNE	Player0IsOpponent
   1777  f8f0				   Player1IsOpponent		; Code could be reused?
   1778  f8f0		       a5 91		      LDA	TrafficOffset0 + 1
   1779  f8f2		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1780  f8f4		       85 b0		      STA	Tmp0
   1781  f8f6		       a5 92		      LDA	TrafficOffset0 + 2
   1782  f8f8		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1783  f8fa		       85 b1		      STA	Tmp1
   1784  f8fc		       4c 0b f9 	      JMP	AddOffsetToOpponentLine
   1785  f8ff				   Player0IsOpponent
   1786  f8ff		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1787  f901		       e5 91		      SBC	TrafficOffset0 + 1
   1788  f903		       85 b0		      STA	Tmp0
   1789  f905		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1790  f907		       e5 92		      SBC	TrafficOffset0 + 2
   1791  f909		       85 b1		      STA	Tmp1
   1792  f90b
   1793  f90b				   AddOffsetToOpponentLine
   1794  f90b		       18		      CLC
   1795  f90c		       a5 b0		      LDA	Tmp0
   1796  f90e		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1797  f910		       85 b0		      STA	Tmp0
   1798  f912		       a5 b1		      LDA	Tmp1
   1799  f914		       69 00		      ADC	#0
   1800  f916		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1801  f918				   OpponentNotVisible
   1802  f918		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1803  f91a		       85 cf		      STA	OpponentLine
   1804  f91c		       4c 23 f9 	      JMP	ReturnFromProcessOpponentLine
   1805  f91f				   OpponentVisible
   1806  f91f		       a5 b0		      LDA	Tmp0
   1807  f921		       85 cf		      STA	OpponentLine
   1808  f923				   ReturnFromProcessOpponentLine
   1809  f923		       60		      RTS
   1810  f924
   1811  f924							; Movement and colision are binded because the car must be moved after duplicate size.
   1812  f924							; Use X for the player
   1813  f924							; Tmp2 Traffic colision result
   1814  f924							; Tmp3 Opponent Colision result (Not implemented)
   1815  f924				   TestCollisionAndMove
   1816  f924							; Until store the movemnt, Y contains the value to be stored.
   1817  f924							; see if player0 colides with the rest
   1818  f924		       a5 b2		      LDA	Tmp2
   1819  f926		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1820  f928		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1821  f92a		       d0 25		      BNE	NoCollision
   1822  f92c		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1823  f92e		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1824  f930		       f0 1f		      BEQ	NoCollision
   1825  f932		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1826  f934		       f0 1b		      BEQ	NoCollision
   1827  f936		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1828  f938		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1829  f93a		       b5 f2		      LDA	Player0SpeedH,X
   1830  f93c		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1831  f93e		       a9 10		      LDA	#COLLISION_SPEED_L
   1832  f940		       d5 f0		      CMP	Player0SpeedL,X
   1833  f942		       b0 04		      BCS	SkipSetColisionSpeedL
   1834  f944				   SetColisionSpeedL
   1835  f944		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1836  f946		       95 f0		      STA	Player0SpeedL,X
   1837  f948				   SkipSetColisionSpeedL
   1838  f948		       a9 00		      LDA	#0
   1839  f94a		       95 f2		      STA	Player0SpeedH,X
   1840  f94c		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1841  f94e		       4c a1 f9 	      JMP	StoreHMove	; We keep position consistent
   1842  f951				   NoCollision
   1843  f951
   1844  f951				   DecrementCollision
   1845  f951		       b5 8e		      LDA	CollisionCounter,X
   1846  f953		       f0 06		      BEQ	FinishDecrementCollision
   1847  f955		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1848  f957		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1849  f959		       d6 8e		      DEC	CollisionCounter,X
   1850  f95b				   FinishDecrementCollision
   1851  f95b
   1852  f95b				   ResetPlayerSize
   1853  f95b		       d0 04		      BNE	FinishResetPlayerSize
   1854  f95d		       a9 30		      LDA	#%00110000
   1855  f95f		       95 04		      STA	NUSIZ0,X	;
   1856  f961				   FinishResetPlayerSize
   1857  f961
   1858  f961				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1859  f961		       b5 8e		      LDA	CollisionCounter,X
   1860  f963		       c9 01		      CMP	#1	; Last frame before reset
   1861  f965		       d0 05		      BNE	SkipResetPlayerPosition
   1862  f967		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1863  f969		       4c a1 f9 	      JMP	StoreHMove
   1864  f96c				   SkipResetPlayerPosition
   1865  f96c
   1866  f96c				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1867  f96c		       b5 c7		      LDA	CurrentCarId,X
   1868  f96e		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1869  f970		       d0 08		      BNE	PrepareReadXAxis
   1870  f972		       a0 00		      LDY	#0
   1871  f974		       a5 8c		      LDA	FrameCount0
   1872  f976		       29 01		      AND	#DRAGSTER_TURN_MASK
   1873  f978		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1874  f97a
   1875  f97a				   PrepareReadXAxis
   1876  f97a		       a0 00		      LDY	#0
   1877  f97c		       b5 b6		      LDA	Player0X,X
   1878  f97e				   BeginReadLeft
   1879  f97e		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1880  f980		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1881  f983		       2c 80 02 	      BIT	SWCHA
   1882  f986		       d0 07		      BNE	SkipMoveLeft
   1883  f988		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1884  f98a		       d6 b6		      DEC	Player0X,X
   1885  f98c		       4c a1 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1886  f98f				   SkipMoveLeft
   1887  f98f				   BeginReadRight
   1888  f98f		       b5 b6		      LDA	Player0X,X
   1889  f991		       c9 2c		      CMP	#PLAYER_MAX_X
   1890  f993		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1891  f995		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1892  f998		       2c 80 02 	      BIT	SWCHA
   1893  f99b		       d0 04		      BNE	SkipMoveRight
   1894  f99d		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1895  f99f		       f6 b6		      INC	Player0X,X
   1896  f9a1				   SkipMoveRight
   1897  f9a1				   StoreHMove
   1898  f9a1		       94 20		      STY	HMP0,X	;set the move for player 0
   1899  f9a3
   1900  f9a3		       60		      RTS
   1901  f9a4
   1902  f9a4							; X Traffic offset 4 bits each lane, 4 lanes per player
   1903  f9a4							; Tmp3 Max X offset
   1904  f9a4							; Tmp4 Max Player Speed L
   1905  f9a4							; Tmp5 Max Player Speed H
   1906  f9a4				   UpdateOffsets
   1907  f9a4		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1908  f9a6		       a5 c6		      LDA	GameMode
   1909  f9a8		       29 04		      AND	#%00000100	; GameModes with high delta
   1910  f9aa		       f0 02		      BEQ	UpdateOffsetsLoop
   1911  f9ac		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1912  f9ae
   1913  f9ae				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1914  f9ae		       38		      SEC
   1915  f9af		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1916  f9b1		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1917  f9b4		       85 b0		      STA	Tmp0
   1918  f9b6		       c8		      INY
   1919  f9b7		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1920  f9b9		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1921  f9bc		       85 b1		      STA	Tmp1
   1922  f9be		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1923  f9c0		       e9 00		      SBC	#0
   1924  f9c2		       85 b2		      STA	Tmp2
   1925  f9c4
   1926  f9c4				   AddsTheResult
   1927  f9c4		       18		      CLC
   1928  f9c5		       a5 b0		      LDA	Tmp0
   1929  f9c7		       75 90		      ADC	TrafficOffset0,X
   1930  f9c9		       95 90		      STA	TrafficOffset0,X
   1931  f9cb		       e8		      INX
   1932  f9cc		       a5 b1		      LDA	Tmp1
   1933  f9ce		       75 90		      ADC	TrafficOffset0,X
   1934  f9d0		       95 90		      STA	TrafficOffset0,X
   1935  f9d2		       e8		      INX
   1936  f9d3		       a5 b2		      LDA	Tmp2	; Carry
   1937  f9d5		       75 90		      ADC	TrafficOffset0,X
   1938  f9d7		       95 90		      STA	TrafficOffset0,X
   1939  f9d9		       90 0f		      BCC	CalculateOffsetCache
   1940  f9db				   CalculatePlayer0Msb
   1941  f9db		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1942  f9dd		       d0 05		      BNE	CalculatePlayer1Msb
   1943  f9df		       e6 ba		      INC	Traffic0Msb
   1944  f9e1		       4c ea f9 	      JMP	CalculateOffsetCache
   1945  f9e4				   CalculatePlayer1Msb
   1946  f9e4		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1947  f9e6		       d0 02		      BNE	CalculateOffsetCache
   1948  f9e8		       e6 bb		      INC	OpTraffic0Msb
   1949  f9ea
   1950  f9ea				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1951  f9ea		       e8		      INX
   1952  f9eb		       38		      SEC
   1953  f9ec		       69 00		      ADC	#0	;Increment by one
   1954  f9ee		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1955  f9f0
   1956  f9f0				   PrepareNextUpdateLoop
   1957  f9f0		       c8		      INY
   1958  f9f1		       e8		      INX
   1959  f9f2		       e4 b3		      CPX	Tmp3	; Max X offset
   1960  f9f4		       d0 b8		      BNE	UpdateOffsetsLoop
   1961  f9f6		       60		      RTS
   1962  f9f7
   1963  f9f7							; X Player 0 or 1
   1964  f9f7				   ProcessSpeed
   1965  f9f7				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1966  f9f7		       a9 00		      LDA	#0
   1967  f9f9		       85 b0		      STA	Tmp0	; Break speed
   1968  f9fb		       b5 b8		      LDA	CountdownTimer,X
   1969  f9fd		       d0 0d		      BNE	Break
   1970  f9ff		       b4 c7		      LDY	CurrentCarId,X
   1971  fa01		       a5 8c		      LDA	FrameCount0
   1972  fa03		       39 af ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1973  fa06		       d0 04		      BNE	Break
   1974  fa08		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1975  fa0a		       85 b0		      STA	Tmp0
   1976  fa0c
   1977  fa0c				   Break
   1978  fa0c		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1979  fa0f		       2c 80 02 	      BIT	SWCHA
   1980  fa12		       d0 12		      BNE	BreakNonZero
   1981  fa14		       b5 0c		      LDA	INPT4,X	;3
   1982  fa16		       10 0a		      BPL	BreakWhileAccelerating
   1983  fa18		       b4 d5		      LDY	Gear,X
   1984  fa1a		       b9 bb ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1985  fa1d		       85 b0		      STA	Tmp0
   1986  fa1f		       4c 26 fa 	      JMP	BreakNonZero
   1987  fa22				   BreakWhileAccelerating		; Allow better control while breaking.
   1988  fa22		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1989  fa24		       85 b0		      STA	Tmp0
   1990  fa26
   1991  fa26				   BreakNonZero
   1992  fa26		       a5 b0		      LDA	Tmp0
   1993  fa28		       f0 29		      BEQ	SkipBreak
   1994  fa2a
   1995  fa2a				   DecreaseSpeed
   1996  fa2a		       38		      SEC
   1997  fa2b		       b5 f0		      LDA	Player0SpeedL,X
   1998  fa2d		       e5 b0		      SBC	Tmp0
   1999  fa2f		       95 f0		      STA	Player0SpeedL,X
   2000  fa31		       b5 f2		      LDA	Player0SpeedH,X
   2001  fa33		       e9 00		      SBC	#0
   2002  fa35		       95 f2		      STA	Player0SpeedH,X
   2003  fa37
   2004  fa37				   CheckMinSpeed
   2005  fa37		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2006  fa39		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2007  fa3b		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2008  fa3d		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2009  fa3f
   2010  fa3f				   CompareLBreakSpeed
   2011  fa3f		       b5 f0		      LDA	Player0SpeedL,X
   2012  fa41		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2013  fa43		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2014  fa45		       4c 50 fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2015  fa48
   2016  fa48				   ResetMinSpeed
   2017  fa48		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2018  fa4a		       95 f2		      STA	Player0SpeedH,X
   2019  fa4c		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2020  fa4e		       95 f0		      STA	Player0SpeedL,X
   2021  fa50
   2022  fa50				   SkipAccelerateIfBreaking
   2023  fa50		       4c 99 fa 	      JMP	SkipAccelerate
   2024  fa53				   SkipBreak
   2025  fa53
   2026  fa53				   Acelerates
   2027  fa53		       b5 b8		      LDA	CountdownTimer,X
   2028  fa55		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2029  fa57
   2030  fa57				   ContinueAccelerateTest
   2031  fa57		       b5 0c		      LDA	INPT4,X	;3
   2032  fa59		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2033  fa5b		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2034  fa5e		       2c 80 02 	      BIT	SWCHA
   2035  fa61		       d0 36		      BNE	SkipAccelerate
   2036  fa63
   2037  fa63				   IncreaseCarSpeed
   2038  fa63		       a9 02		      LDA	#2
   2039  fa65		       85 b0		      STA	Tmp0	; Loop control
   2040  fa67		       b4 c7		      LDY	CurrentCarId,X
   2041  fa69				   IncreaseCarSpeedLoop
   2042  fa69							;Adds speed
   2043  fa69		       18		      CLC
   2044  fa6a		       b5 dc		      LDA	AccelerateBuffer,X
   2045  fa6c		       79 ab ff 	      ADC	CarIdToAccelerateSpeed,Y
   2046  fa6f		       95 dc		      STA	AccelerateBuffer,X
   2047  fa71		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2048  fa73		       f6 f0		      INC	Player0SpeedL,X
   2049  fa75		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2050  fa77		       f6 f2		      INC	Player0SpeedH,X
   2051  fa79				   ContinueIncreaseSpeedLoop
   2052  fa79		       c6 b0		      DEC	Tmp0
   2053  fa7b		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2054  fa7d				   SkipIncreaseCarSpeed
   2055  fa7d
   2056  fa7d				   CheckIfAlreadyMaxSpeed
   2057  fa7d		       b5 f2		      LDA	Player0SpeedH,X
   2058  fa7f		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2059  fa81		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2060  fa83		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2061  fa85							;High bit is max, compare the low
   2062  fa85		       b4 c7		      LDY	CurrentCarId,X
   2063  fa87		       b5 f0		      LDA	Player0SpeedL,X
   2064  fa89		       d9 b3 ff 	      CMP	CarIdToMaxSpeedL,Y
   2065  fa8c		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2066  fa8e							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2067  fa8e
   2068  fa8e				   ResetToMaxSpeed		; Speed is more, or is already max
   2069  fa8e		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2070  fa90		       95 f2		      STA	Player0SpeedH,X
   2071  fa92		       b4 c7		      LDY	CurrentCarId,X
   2072  fa94		       b9 b3 ff 	      LDA	CarIdToMaxSpeedL,Y
   2073  fa97		       95 f0		      STA	Player0SpeedL,X
   2074  fa99				   SkipAccelerate
   2075  fa99		       60		      RTS
   2076  fa9a
   2077  fa9a							;Tmp0 Traffic Offset to compare with next checkpoint
   2078  fa9a				   ProcessPlayerStatus
   2079  fa9a				   IsGameOver
   2080  fa9a		       b5 b8		      LDA	CountdownTimer,X
   2081  fa9c		       15 f0		      ORA	Player0SpeedL,X
   2082  fa9e		       15 f2		      ORA	Player0SpeedH,X
   2083  faa0		       d0 0b		      BNE	IsCheckpoint
   2084  faa2		       a9 01		      LDA	#1
   2085  faa4		       95 cb		      STA	ScoreFontColorHoldChange,X
   2086  faa6		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2087  faa8		       95 c9		      STA	ScoreFontColor,X
   2088  faaa		       4c df fa 	      JMP	SkipIsTimeOver
   2089  faad
   2090  faad				   IsCheckpoint
   2091  faad		       b5 cd		      LDA	NextCheckpoint,X
   2092  faaf		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2093  fab1		       d0 20		      BNE	SkipIsCheckpoint
   2094  fab3		       18		      CLC
   2095  fab4		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2096  fab6		       95 cd		      STA	NextCheckpoint,X
   2097  fab8		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2098  faba		       95 c9		      STA	ScoreFontColor,X
   2099  fabc		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2100  fabe		       95 cb		      STA	ScoreFontColorHoldChange,X
   2101  fac0		       b5 b8		      LDA	CountdownTimer,X
   2102  fac2		       18		      CLC
   2103  fac3		       75 c0		      ADC	CheckpointTime,X
   2104  fac5		       95 b8		      STA	CountdownTimer,X
   2105  fac7		       90 04		      BCC	JumpSkipTimeOver
   2106  fac9		       a9 ff		      LDA	#$FF
   2107  facb		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2108  facd				   JumpSkipTimeOver
   2109  facd		       20 94 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2110  fad0		       4c df fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2111  fad3				   SkipIsCheckpoint
   2112  fad3
   2113  fad3				   IsTimeOver
   2114  fad3		       b5 b8		      LDA	CountdownTimer,X
   2115  fad5		       d0 08		      BNE	SkipIsTimeOver
   2116  fad7		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2117  fad9		       95 cb		      STA	ScoreFontColorHoldChange,X
   2118  fadb		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2119  fadd		       95 c9		      STA	ScoreFontColor,X
   2120  fadf				   SkipIsTimeOver
   2121  fadf		       60		      RTS
   2122  fae0
   2123  fae0
   2124  fae0				   EverySecond		; 64 frames to be more precise
   2125  fae0		       a9 3f		      LDA	#%00111111
   2126  fae2		       25 8c		      AND	FrameCount0
   2127  fae4		       d0 06		      BNE	SkipEverySecondAction
   2128  fae6		       d5 b8		      CMP	CountdownTimer,X
   2129  fae8		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2130  faea		       d6 b8		      DEC	CountdownTimer,X
   2131  faec				   SkipEverySecondAction
   2132  faec		       60		      RTS
   2133  faed
   2134  faed				   CalculateGear
   2135  faed		       b5 f0		      LDA	Player0SpeedL,X	;3
   2136  faef		       29 80		      AND	#%10000000	;2
   2137  faf1		       15 f2		      ORA	Player0SpeedH,X	;3
   2138  faf3		       18		      CLC		;2
   2139  faf4		       2a		      ROL		;2
   2140  faf5		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2141  faf7		       95 d5		      STA	Gear,X
   2142  faf9		       60		      RTS
   2143  fafa
   2144  fafa				   ProcessScoreFontColor
   2145  fafa		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2146  fafc		       f0 06		      BEQ	ResetScoreFontColor
   2147  fafe		       88		      DEY
   2148  faff		       94 cb		      STY	ScoreFontColorHoldChange,X
   2149  fb01		       4c 09 fb 	      JMP	SkipScoreFontColor
   2150  fb04				   ResetScoreFontColor
   2151  fb04		       bd a2 fc 	      LDA	PlayerToDefaultColor,X
   2152  fb07		       95 c9		      STA	ScoreFontColor,X
   2153  fb09				   SkipScoreFontColor
   2154  fb09		       60		      RTS
   2155  fb0a
   2156  fb0a							; Moved here because of rom space.
   2157  fb0a							; The only SBR in constants space
   2158  fb0a				   DrawQrCode
   2159  fb0a		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2160  fb0c		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2161  fb0e		       a9 01		      LDA	#%00000001	; Mirror playfield
   2162  fb10		       85 0a		      STA	CTRLPF
   2163  fb12		       20 52 f6 	      JSR	ClearAll	; To be 100 sure!
   2164  fb15		       ad 82 02 	      LDA	SWCHB
   2165  fb18		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2166  fb1a		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2167  fb1c		       f0 07		      BEQ	StoreReversedQrCode
   2168  fb1e		       86 09		      STX	COLUBK
   2169  fb20		       84 08		      STY	COLUPF
   2170  fb22		       4c 29 fb 	      JMP	ContinueQrCode
   2171  fb25				   StoreReversedQrCode
   2172  fb25		       86 08		      STX	COLUPF
   2173  fb27		       84 09		      STY	COLUBK
   2174  fb29
   2175  fb29				   ContinueQrCode
   2176  fb29		       a2 08		      LDX	#8
   2177  fb2b		       20 9d f8 	      JSR	HMoveXTimes
   2178  fb2e		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2179  fb30		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2180  fb32		       20 76 f8 	      JSR	WaitForVblankEnd
   2181  fb35		       20 89 f8 	      JSR	Sleep8Lines
   2182  fb38		       20 89 f8 	      JSR	Sleep8Lines
   2183  fb3b		       20 89 f8 	      JSR	Sleep8Lines
   2184  fb3e
   2185  fb3e				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2186  fb3e		       85 02		      STA	WSYNC
   2187  fb40		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2188  fb43		       85 0e		      STA	PF1	;3
   2189  fb45		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2190  fb48		       85 0f		      STA	PF2	;3
      0  fb4a					      SLEEP	27	; 
      1  fb4a				   .CYCLES    SET	27
      2  fb4a
      3  fb4a				  -	      IF	.CYCLES < 2
      4  fb4a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb4a				  -	      ERR
      6  fb4a					      ENDIF
      7  fb4a
      8  fb4a					      IF	.CYCLES & 1
      9  fb4a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb4a				  -	      nop	0
     11  fb4a					      ELSE
     12  fb4a		       24 00		      bit	VSYNC
     13  fb4c					      ENDIF
     14  fb4c				   .CYCLES    SET	.CYCLES - 3
     15  fb4c					      ENDIF
     16  fb4c
     17  fb4c					      REPEAT	.CYCLES / 2
     18  fb4c		       ea		      nop
     17  fb4c					      REPEND
     18  fb4d		       ea		      nop
     17  fb4d					      REPEND
     18  fb4e		       ea		      nop
     17  fb4e					      REPEND
     18  fb4f		       ea		      nop
     17  fb4f					      REPEND
     18  fb50		       ea		      nop
     17  fb50					      REPEND
     18  fb51		       ea		      nop
     17  fb51					      REPEND
     18  fb52		       ea		      nop
     17  fb52					      REPEND
     18  fb53		       ea		      nop
     17  fb53					      REPEND
     18  fb54		       ea		      nop
     17  fb54					      REPEND
     18  fb55		       ea		      nop
     17  fb55					      REPEND
     18  fb56		       ea		      nop
     17  fb56					      REPEND
     18  fb57		       ea		      nop
     19  fb58					      REPEND
   2192  fb58		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2193  fb5b		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2194  fb5d		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2195  fb60		       85 0e		      STA	PF1	;3
   2196  fb62
   2197  fb62		       ca		      DEX		;2
   2198  fb63		       d0 d9		      BNE	QrCodeLoop	;2
   2199  fb65		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2200  fb67		       88		      DEY		;2
   2201  fb68		       10 d4		      BPL	QrCodeLoop	;4
   2202  fb6a
   2203  fb6a				   EndQrCodeLoop
   2204  fb6a		       85 02		      STA	WSYNC	;
   2205  fb6c		       a9 00		      LDA	#0
   2206  fb6e		       85 0e		      STA	PF1	;3
   2207  fb70		       85 0f		      STA	PF2	;3
   2208  fb72
   2209  fb72		       20 90 f8 	      JSR	Sleep32Lines
   2210  fb75		       4c f7 f4 	      JMP	PrepareOverscan
   2211  fb78
   2212  fb78							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2213  fc00					      org	$FC00
   2214  fc00				   QrCode1
   2215  fc00		       1f		      .byte.b	#%00011111
   2216  fc01		       10		      .byte.b	#%00010000
   2217  fc02		       17		      .byte.b	#%00010111
   2218  fc03		       17		      .byte.b	#%00010111
   2219  fc04		       17		      .byte.b	#%00010111
   2220  fc05		       10		      .byte.b	#%00010000
   2221  fc06		       1f		      .byte.b	#%00011111
   2222  fc07		       00		      .byte.b	#%00000000
   2223  fc08		       17		      .byte.b	#%00010111
   2224  fc09		       10		      .byte.b	#%00010000
   2225  fc0a		       1d		      .byte.b	#%00011101
   2226  fc0b		       16		      .byte.b	#%00010110
   2227  fc0c		       03		      .byte.b	#%00000011
   2228  fc0d		       19		      .byte.b	#%00011001
   2229  fc0e		       13		      .byte.b	#%00010011
   2230  fc0f		       1c		      .byte.b	#%00011100
   2231  fc10		       0b		      .byte.b	#%00001011
   2232  fc11		       00		      .byte.b	#%00000000
   2233  fc12		       1f		      .byte.b	#%00011111
   2234  fc13		       10		      .byte.b	#%00010000
   2235  fc14		       17		      .byte.b	#%00010111
   2236  fc15		       17		      .byte.b	#%00010111
   2237  fc16		       17		      .byte.b	#%00010111
   2238  fc17		       10		      .byte.b	#%00010000
   2239  fc18		       1f		      .byte.b	#%00011111
   2240  fc19
   2241  fc19				   QrCode2
   2242  fc19		       c3		      .byte.b	#%11000011
   2243  fc1a		       9a		      .byte.b	#%10011010
   2244  fc1b		       82		      .byte.b	#%10000010
   2245  fc1c		       da		      .byte.b	#%11011010
   2246  fc1d		       aa		      .byte.b	#%10101010
   2247  fc1e		       ca		      .byte.b	#%11001010
   2248  fc1f		       f3		      .byte.b	#%11110011
   2249  fc20		       78		      .byte.b	#%01111000
   2250  fc21		       df		      .byte.b	#%11011111
   2251  fc22		       fc		      .byte.b	#%11111100
   2252  fc23		       c7		      .byte.b	#%11000111
   2253  fc24		       98		      .byte.b	#%10011000
   2254  fc25		       23		      .byte.b	#%00100011
   2255  fc26		       b9		      .byte.b	#%10111001
   2256  fc27		       d2		      .byte.b	#%11010010
   2257  fc28		       30		      .byte.b	#%00110000
   2258  fc29		       eb		      .byte.b	#%11101011
   2259  fc2a		       28		      .byte.b	#%00101000
   2260  fc2b		       ab		      .byte.b	#%10101011
   2261  fc2c		       72		      .byte.b	#%01110010
   2262  fc2d		       fa		      .byte.b	#%11111010
   2263  fc2e		       7a		      .byte.b	#%01111010
   2264  fc2f		       32		      .byte.b	#%00110010
   2265  fc30		       3a		      .byte.b	#%00111010
   2266  fc31		       63		      .byte.b	#%01100011
   2267  fc32
   2268  fc32				   QrCode3
   2269  fc32		       98		      .byte.b	#%10011000
   2270  fc33		       c3		      .byte.b	#%11000011
   2271  fc34		       39		      .byte.b	#%00111001
   2272  fc35		       34		      .byte.b	#%00110100
   2273  fc36		       ff		      .byte.b	#%11111111
   2274  fc37		       71		      .byte.b	#%01110001
   2275  fc38		       d5		      .byte.b	#%11010101
   2276  fc39		       d1		      .byte.b	#%11010001
   2277  fc3a		       5f		      .byte.b	#%01011111
   2278  fc3b		       26		      .byte.b	#%00100110
   2279  fc3c		       2d		      .byte.b	#%00101101
   2280  fc3d		       e9		      .byte.b	#%11101001
   2281  fc3e		       d6		      .byte.b	#%11010110
   2282  fc3f		       26		      .byte.b	#%00100110
   2283  fc40		       ba		      .byte.b	#%10111010
   2284  fc41		       03		      .byte.b	#%00000011
   2285  fc42		       dd		      .byte.b	#%11011101
   2286  fc43		       e0		      .byte.b	#%11100000
   2287  fc44		       57		      .byte.b	#%01010111
   2288  fc45		       14		      .byte.b	#%00010100
   2289  fc46		       35		      .byte.b	#%00110101
   2290  fc47		       e5		      .byte.b	#%11100101
   2291  fc48		       b5		      .byte.b	#%10110101
   2292  fc49		       d4		      .byte.b	#%11010100
   2293  fc4a		       97		      .byte.b	#%10010111
   2294  fc4b
   2295  fc4b				   QrCode4
   2296  fc4b		       09		      .byte.b	#%00001001
   2297  fc4c		       0e		      .byte.b	#%00001110
   2298  fc4d		       0f		      .byte.b	#%00001111
   2299  fc4e		       0c		      .byte.b	#%00001100
   2300  fc4f		       0c		      .byte.b	#%00001100
   2301  fc50		       08		      .byte.b	#%00001000
   2302  fc51		       08		      .byte.b	#%00001000
   2303  fc52		       06		      .byte.b	#%00000110
   2304  fc53		       06		      .byte.b	#%00000110
   2305  fc54		       0b		      .byte.b	#%00001011
   2306  fc55		       0f		      .byte.b	#%00001111
   2307  fc56		       04		      .byte.b	#%00000100
   2308  fc57		       08		      .byte.b	#%00001000
   2309  fc58		       0f		      .byte.b	#%00001111
   2310  fc59		       09		      .byte.b	#%00001001
   2311  fc5a		       07		      .byte.b	#%00000111
   2312  fc5b		       05		      .byte.b	#%00000101
   2313  fc5c		       00		      .byte.b	#%00000000
   2314  fc5d		       0f		      .byte.b	#%00001111
   2315  fc5e		       08		      .byte.b	#%00001000
   2316  fc5f		       0b		      .byte.b	#%00001011
   2317  fc60		       0b		      .byte.b	#%00001011
   2318  fc61		       0b		      .byte.b	#%00001011
   2319  fc62		       08		      .byte.b	#%00001000
   2320  fc63		       0f		      .byte.b	#%00001111
   2321  fc64
   2322  fc64				   PlayerToUpMask
   2323  fc64		       10		      .byte.b	#%00010000	;
   2324  fc65		       01		      .byte.b	#%00000001	;
   2325  fc66
   2326  fc66				   PlayerToDownMask
   2327  fc66		       20		      .byte.b	#%00100000	;
   2328  fc67		       02		      .byte.b	#%00000010	;
   2329  fc68
   2330  fc68
   2331  fc68				   PlayerToLeftMask
   2332  fc68		       40		      .byte.b	#%01000000	;
   2333  fc69		       04		      .byte.b	#%00000100	;
   2334  fc6a
   2335  fc6a				   PlayerToRightMask
   2336  fc6a		       80		      .byte.b	#%10000000	;
   2337  fc6b		       08		      .byte.b	#%00001000	;
   2338  fc6c
   2339  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2340  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2341  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2342  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2343  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2344  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2345  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2346  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2347  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2348  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2349  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2350  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2351  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2352  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2353  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2354  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2355  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2356  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2357  fc7d
   2358  fc7d				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2359  fc7d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2360  fc7e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2361  fc7f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2362  fc80		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2363  fc81		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2364  fc82		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2365  fc83		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2366  fc84		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2367  fc85		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2368  fc86		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2369  fc87		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2370  fc88		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2371  fc89		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2372  fc8a		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2373  fc8b		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2374  fc8c		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2375  fc8d
   2376  fc8d				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2377  fc8d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2378  fc8e		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2379  fc8f		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2380  fc90		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2381  fc91		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2382  fc92		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2383  fc93		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2384  fc94		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2385  fc95		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2386  fc96		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2387  fc97		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2388  fc98		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2389  fc99		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2390  fc9a		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2391  fc9b		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2392  fc9c		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2393  fc9d		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2394  fc9e		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2395  fc9f		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2396  fca0		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2397  fca1		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2398  fca2
   2399  fca2				   PlayerToDefaultColor
   2400  fca2		       f9		      .byte.b	#PLAYER0_COLOR
   2401  fca3		       96		      .byte.b	#PLAYER1_COLOR
   2402  fca4
   2403  fd00					      org	$FD00
   2404  fd00				   Font
   2405  fd00				   C0
   2406  fd00		       e7		      .byte.b	#%11100111	;
   2407  fd01		       a5		      .byte.b	#%10100101	; 
   2408  fd02		       a5		      .byte.b	#%10100101	; 
   2409  fd03		       a5		      .byte.b	#%10100101	; 
   2410  fd04		       e7		      .byte.b	#%11100111	;	
   2411  fd05				   C1
   2412  fd05		       e7		      .byte.b	#%11100111	;
   2413  fd06		       42		      .byte.b	#%01000010	; 
   2414  fd07		       42		      .byte.b	#%01000010	; 
   2415  fd08		       42		      .byte.b	#%01000010	; 
   2416  fd09		       66		      .byte.b	#%01100110	;
   2417  fd0a				   C2
   2418  fd0a		       e7		      .byte.b	#%11100111	;
   2419  fd0b		       24		      .byte.b	#%00100100	; 
   2420  fd0c		       e7		      .byte.b	#%11100111	; 
   2421  fd0d		       81		      .byte.b	#%10000001	; 
   2422  fd0e		       e7		      .byte.b	#%11100111	;
   2423  fd0f				   C3
   2424  fd0f		       e7		      .byte.b	#%11100111	;
   2425  fd10		       81		      .byte.b	#%10000001	; 
   2426  fd11		       e7		      .byte.b	#%11100111	; 
   2427  fd12		       81		      .byte.b	#%10000001	; 
   2428  fd13		       e7		      .byte.b	#%11100111	;
   2429  fd14				   C4
   2430  fd14		       81		      .byte.b	#%10000001	;
   2431  fd15		       81		      .byte.b	#%10000001	; 
   2432  fd16		       e7		      .byte.b	#%11100111	; 
   2433  fd17		       a5		      .byte.b	#%10100101	; 
   2434  fd18		       a5		      .byte.b	#%10100101	;
   2435  fd19				   C5
   2436  fd19		       e7		      .byte.b	#%11100111	;
   2437  fd1a		       81		      .byte.b	#%10000001	; 
   2438  fd1b		       e7		      .byte.b	#%11100111	; 
   2439  fd1c		       24		      .byte.b	#%00100100	; 
   2440  fd1d		       e7		      .byte.b	#%11100111	;
   2441  fd1e				   C6
   2442  fd1e		       e7		      .byte.b	#%11100111	;
   2443  fd1f		       a5		      .byte.b	#%10100101	; 
   2444  fd20		       e7		      .byte.b	#%11100111	; 
   2445  fd21		       24		      .byte.b	#%00100100	; 
   2446  fd22		       e7		      .byte.b	#%11100111	;
   2447  fd23				   C7
   2448  fd23		       81		      .byte.b	#%10000001	;
   2449  fd24		       81		      .byte.b	#%10000001	; 
   2450  fd25		       81		      .byte.b	#%10000001	; 
   2451  fd26		       81		      .byte.b	#%10000001	; 
   2452  fd27		       e7		      .byte.b	#%11100111	;
   2453  fd28				   C8
   2454  fd28		       e7		      .byte.b	#%11100111	;
   2455  fd29		       a5		      .byte.b	#%10100101	; 
   2456  fd2a		       e7		      .byte.b	#%11100111	; 
   2457  fd2b		       a5		      .byte.b	#%10100101	; 
   2458  fd2c		       e7		      .byte.b	#%11100111	;
   2459  fd2d				   C9
   2460  fd2d		       e7		      .byte.b	#%11100111	;
   2461  fd2e		       81		      .byte.b	#%10000001	; 
   2462  fd2f		       e7		      .byte.b	#%11100111	; 
   2463  fd30		       a5		      .byte.b	#%10100101	; 
   2464  fd31		       e7		      .byte.b	#%11100111	;
   2465  fd32				   CA
   2466  fd32		       a5		      .byte.b	#%10100101	;
   2467  fd33		       a5		      .byte.b	#%10100101	; 
   2468  fd34		       e7		      .byte.b	#%11100111	; 
   2469  fd35		       a5		      .byte.b	#%10100101	; 
   2470  fd36		       e7		      .byte.b	#%11100111	;
   2471  fd37				   CB
   2472  fd37		       66		      .byte.b	#%01100110	;
   2473  fd38		       a5		      .byte.b	#%10100101	; 
   2474  fd39		       66		      .byte.b	#%01100110	; 
   2475  fd3a		       a5		      .byte.b	#%10100101	;
   2476  fd3b		       66		      .byte.b	#%01100110	;
   2477  fd3c				   CC
   2478  fd3c		       e7		      .byte.b	#%11100111	;
   2479  fd3d		       24		      .byte.b	#%00100100	; 
   2480  fd3e		       24		      .byte.b	#%00100100	; 
   2481  fd3f		       24		      .byte.b	#%00100100	;
   2482  fd40		       e7		      .byte.b	#%11100111	;
   2483  fd41
   2484  fd41				   CD
   2485  fd41		       66		      .byte.b	#%01100110	;
   2486  fd42		       a5		      .byte.b	#%10100101	; 
   2487  fd43		       a5		      .byte.b	#%10100101	; 
   2488  fd44		       a5		      .byte.b	#%10100101	;
   2489  fd45		       66		      .byte.b	#%01100110	;
   2490  fd46
   2491  fd46				   CE
   2492  fd46		       e7		      .byte.b	#%11100111	;
   2493  fd47		       24		      .byte.b	#%00100100	; 
   2494  fd48		       e7		      .byte.b	#%11100111	; 
   2495  fd49		       24		      .byte.b	#%00100100	; 
   2496  fd4a		       e7		      .byte.b	#%11100111	;
   2497  fd4b
   2498  fd4b				   CF
   2499  fd4b		       24		      .byte.b	#%00100100	;
   2500  fd4c		       24		      .byte.b	#%00100100	; 
   2501  fd4d		       e7		      .byte.b	#%11100111	; 
   2502  fd4e		       24		      .byte.b	#%00100100	; 
   2503  fd4f		       e7		      .byte.b	#%11100111	;
   2504  fd50
   2505  fd50				   CG
   2506  fd50		       c3		      .byte.b	#%11000011	;
   2507  fd51		       a5		      .byte.b	#%10100101	; 
   2508  fd52		       a5		      .byte.b	#%10100101	; 
   2509  fd53		       24		      .byte.b	#%00100100	; 
   2510  fd54		       c3		      .byte.b	#%11000011	;	
   2511  fd55
   2512  fd55				   CH
   2513  fd55		       a5		      .byte.b	#%10100101	;
   2514  fd56		       a5		      .byte.b	#%10100101	; 
   2515  fd57		       e7		      .byte.b	#%11100111	; 
   2516  fd58		       a5		      .byte.b	#%10100101	; 
   2517  fd59		       a5		      .byte.b	#%10100101	;
   2518  fd5a
   2519  fd5a				   CK
   2520  fd5a		       a5		      .byte.b	#%10100101	;
   2521  fd5b		       a5		      .byte.b	#%10100101	; 
   2522  fd5c		       66		      .byte.b	#%01100110	; 
   2523  fd5d		       a5		      .byte.b	#%10100101	; 
   2524  fd5e		       a5		      .byte.b	#%10100101	;
   2525  fd5f
   2526  fd5f				   CL
   2527  fd5f		       e7		      .byte.b	#%11100111	;
   2528  fd60		       24		      .byte.b	#%00100100	; 
   2529  fd61		       24		      .byte.b	#%00100100	; 
   2530  fd62		       24		      .byte.b	#%00100100	; 
   2531  fd63		       24		      .byte.b	#%00100100	;
   2532  fd64
   2533  fd64				   CM
   2534  fd64		       a5		      .byte.b	#%10100101	;
   2535  fd65		       a5		      .byte.b	#%10100101	; 
   2536  fd66		       a5		      .byte.b	#%10100101	; 
   2537  fd67		       e7		      .byte.b	#%11100111	; 
   2538  fd68		       a5		      .byte.b	#%10100101	;
   2539  fd69
   2540  fd69				   CN
   2541  fd69		       a5		      .byte.b	#%10100101	;
   2542  fd6a		       a5		      .byte.b	#%10100101	; 
   2543  fd6b		       a5		      .byte.b	#%10100101	; 
   2544  fd6c		       a5		      .byte.b	#%10100101	; 
   2545  fd6d		       66		      .byte.b	#%01100110	;	
   2546  fd6e
   2547  fd6e
   2548  fd6e				   CO
   2549  fd6e		       42		      .byte.b	#%01000010	;
   2550  fd6f		       a5		      .byte.b	#%10100101	; 
   2551  fd70		       a5		      .byte.b	#%10100101	; 
   2552  fd71		       a5		      .byte.b	#%10100101	; 
   2553  fd72		       42		      .byte.b	#%01000010	;	
   2554  fd73
   2555  fd73				   CP
   2556  fd73		       24		      .byte.b	#%00100100	;
   2557  fd74		       24		      .byte.b	#%00100100	; 
   2558  fd75		       e7		      .byte.b	#%11100111	; 
   2559  fd76		       a5		      .byte.b	#%10100101	; 
   2560  fd77		       e7		      .byte.b	#%11100111	;
   2561  fd78
   2562  fd78				   CR
   2563  fd78		       a5		      .byte.b	#%10100101	;
   2564  fd79		       a5		      .byte.b	#%10100101	; 
   2565  fd7a		       66		      .byte.b	#%01100110	; 
   2566  fd7b		       a5		      .byte.b	#%10100101	; 
   2567  fd7c		       66		      .byte.b	#%01100110	;
   2568  fd7d
   2569  fd7d				   CS
   2570  fd7d		       66		      .byte.b	#%01100110	;
   2571  fd7e		       81		      .byte.b	#%10000001	; 
   2572  fd7f		       42		      .byte.b	#%01000010	; 
   2573  fd80		       24		      .byte.b	#%00100100	; 
   2574  fd81		       c3		      .byte.b	#%11000011	;
   2575  fd82
   2576  fd82				   CT
   2577  fd82		       42		      .byte.b	#%01000010	;
   2578  fd83		       42		      .byte.b	#%01000010	; 
   2579  fd84		       42		      .byte.b	#%01000010	; 
   2580  fd85		       42		      .byte.b	#%01000010	; 
   2581  fd86		       e7		      .byte.b	#%11100111	;
   2582  fd87
   2583  fd87				   CV
   2584  fd87		       42		      .byte.b	#%01000010	;
   2585  fd88		       a5		      .byte.b	#%10100101	; 
   2586  fd89		       a5		      .byte.b	#%10100101	; 
   2587  fd8a		       a5		      .byte.b	#%10100101	; 
   2588  fd8b		       a5		      .byte.b	#%10100101	;	
   2589  fd8c
   2590  fd8c				   CY
   2591  fd8c		       42		      .byte.b	#%01000010	;
   2592  fd8d		       42		      .byte.b	#%01000010	; 
   2593  fd8e		       42		      .byte.b	#%01000010	; 
   2594  fd8f		       a5		      .byte.b	#%10100101	; 
   2595  fd90		       a5		      .byte.b	#%10100101	;
   2596  fd91
   2597  fd91				   CW
   2598  fd91		       a5		      .byte.b	#%10100101	;
   2599  fd92		       e7		      .byte.b	#%11100111	; 
   2600  fd93		       a5		      .byte.b	#%10100101	; 
   2601  fd94		       a5		      .byte.b	#%10100101	; 
   2602  fd95		       a5		      .byte.b	#%10100101	;
   2603  fd96
   2604  fd96				   CZ
   2605  fd96		       e7		      .byte.b	#%11100111	;
   2606  fd97		       24		      .byte.b	#%00100100	; 
   2607  fd98		       42		      .byte.b	#%01000010	; 
   2608  fd99		       81		      .byte.b	#%10000001	; 
   2609  fd9a		       e7		      .byte.b	#%11100111	;
   2610  fd9b
   2611  fd9b
   2612  fd9b				   Exclamation
   2613  fd9b		       42		      .byte.b	#%01000010	;
   2614  fd9c		       00		      .byte.b	#%00000000	; 
   2615  fd9d		       42		      .byte.b	#%01000010	; 
   2616  fd9e		       42		      .byte.b	#%01000010	; 
   2617  fd9f		       42		      .byte.b	#%01000010	;
   2618  fda0
   2619  fda0				   Dot
   2620  fda0		       42		      .byte.b	#%01000010	;
   2621  fda1		       42		      .byte.b	#%01000010	; 
   2622  fda2		       00		      .byte.b	#%00000000	; 
   2623  fda3		       00		      .byte.b	#%00000000	; 
   2624  fda4		       00		      .byte.b	#%00000000	;
   2625  fda5
   2626  fda5				   Pipe
   2627  fda5				   Colon
   2628  fda5		       42		      .byte.b	#%01000010	;
   2629  fda6		       42		      .byte.b	#%01000010	; 
   2630  fda7		       00		      .byte.b	#%00000000	; 
   2631  fda8		       42		      .byte.b	#%01000010	; 
   2632  fda9		       42		      .byte.b	#%01000010	;
   2633  fdaa
   2634  fdaa				   Triangle
   2635  fdaa		       81		      .byte.b	#%10000001	;
   2636  fdab		       c3		      .byte.b	#%11000011	; 
   2637  fdac		       e7		      .byte.b	#%11100111	; 
   2638  fdad		       c3		      .byte.b	#%11000011	; 
   2639  fdae		       81		      .byte.b	#%10000001	;
   2640  fdaf
   2641  fdaf				   Space
   2642  fdaf				   C0B
   2643  fdaf		       00		      .byte.b	#%00000000	;
   2644  fdb0		       00		      .byte.b	#%00000000	; 
   2645  fdb1		       00		      .byte.b	#%00000000	; 
   2646  fdb2		       00		      .byte.b	#%00000000	; 
   2647  fdb3		       00		      .byte.b	#%00000000	;	
   2648  fdb4				   C1B
   2649  fdb4		       24		      .byte.b	#%00100100	;
   2650  fdb5		       00		      .byte.b	#%00000000	; 
   2651  fdb6		       00		      .byte.b	#%00000000	; 
   2652  fdb7		       00		      .byte.b	#%00000000	; 
   2653  fdb8		       00		      .byte.b	#%00000000	;
   2654  fdb9				   C2B
   2655  fdb9		       66		      .byte.b	#%01100110	;
   2656  fdba		       00		      .byte.b	#%00000000	; 
   2657  fdbb		       00		      .byte.b	#%00000000	; 
   2658  fdbc		       00		      .byte.b	#%00000000	; 
   2659  fdbd		       00		      .byte.b	#%00000000	;
   2660  fdbe				   C3B
   2661  fdbe		       e7		      .byte.b	#%11100111	;
   2662  fdbf		       00		      .byte.b	#%00000000	; 
   2663  fdc0		       00		      .byte.b	#%00000000	; 
   2664  fdc1		       00		      .byte.b	#%00000000	; 
   2665  fdc2		       00		      .byte.b	#%00000000	;
   2666  fdc3				   C4B
   2667  fdc3		       e7		      .byte.b	#%11100111	;
   2668  fdc4		       24		      .byte.b	#%00100100	; 
   2669  fdc5		       00		      .byte.b	#%00000000	; 
   2670  fdc6		       00		      .byte.b	#%00000000	; 
   2671  fdc7		       00		      .byte.b	#%00000000	;
   2672  fdc8				   C5B
   2673  fdc8		       e7		      .byte.b	#%11100111	;
   2674  fdc9		       66		      .byte.b	#%01100110	; 
   2675  fdca		       00		      .byte.b	#%00000000	; 
   2676  fdcb		       00		      .byte.b	#%00000000	; 
   2677  fdcc		       00		      .byte.b	#%00000000	;
   2678  fdcd				   C6B
   2679  fdcd		       e7		      .byte.b	#%11100111	;
   2680  fdce		       e7		      .byte.b	#%11100111	; 
   2681  fdcf		       00		      .byte.b	#%00000000	; 
   2682  fdd0		       00		      .byte.b	#%00000000	; 
   2683  fdd1		       00		      .byte.b	#%00000000	;
   2684  fdd2				   C7B
   2685  fdd2		       e7		      .byte.b	#%11100111	;
   2686  fdd3		       e7		      .byte.b	#%11100111	; 
   2687  fdd4		       24		      .byte.b	#%00100100	; 
   2688  fdd5		       00		      .byte.b	#%00000000	; 
   2689  fdd6		       00		      .byte.b	#%00000000	;
   2690  fdd7				   C8B
   2691  fdd7		       e7		      .byte.b	#%11100111	;
   2692  fdd8		       e7		      .byte.b	#%11100111	; 
   2693  fdd9		       66		      .byte.b	#%01100110	; 
   2694  fdda		       00		      .byte.b	#%00000000	; 
   2695  fddb		       00		      .byte.b	#%00000000	;
   2696  fddc				   C9B
   2697  fddc		       e7		      .byte.b	#%11100111	;
   2698  fddd		       e7		      .byte.b	#%11100111	; 
   2699  fdde		       e7		      .byte.b	#%11100111	; 
   2700  fddf		       00		      .byte.b	#%00000000	; 
   2701  fde0		       00		      .byte.b	#%00000000	;
   2702  fde1				   CAB
   2703  fde1		       e7		      .byte.b	#%11100111	;
   2704  fde2		       e7		      .byte.b	#%11100111	; 
   2705  fde3		       e7		      .byte.b	#%11100111	; 
   2706  fde4		       24		      .byte.b	#%00100100	; 
   2707  fde5		       00		      .byte.b	#%00000000	;
   2708  fde6				   CBB
   2709  fde6		       e7		      .byte.b	#%11100111	;
   2710  fde7		       e7		      .byte.b	#%11100111	; 
   2711  fde8		       e7		      .byte.b	#%11100111	; 
   2712  fde9		       66		      .byte.b	#%01100110	; 
   2713  fdea		       00		      .byte.b	#%00000000	;
   2714  fdeb				   CCB
   2715  fdeb		       e7		      .byte.b	#%11100111	;
   2716  fdec		       e7		      .byte.b	#%11100111	; 
   2717  fded		       e7		      .byte.b	#%11100111	; 
   2718  fdee		       e7		      .byte.b	#%11100111	; 
   2719  fdef		       00		      .byte.b	#%00000000	;
   2720  fdf0
   2721  fdf0				   CDB
   2722  fdf0		       e7		      .byte.b	#%11100111	;
   2723  fdf1		       e7		      .byte.b	#%11100111	; 
   2724  fdf2		       e7		      .byte.b	#%11100111	; 
   2725  fdf3		       e7		      .byte.b	#%11100111	; 
   2726  fdf4		       24		      .byte.b	#%00100100	;
   2727  fdf5
   2728  fdf5				   CEB
   2729  fdf5		       e7		      .byte.b	#%11100111	;
   2730  fdf6		       e7		      .byte.b	#%11100111	; 
   2731  fdf7		       e7		      .byte.b	#%11100111	; 
   2732  fdf8		       e7		      .byte.b	#%11100111	; 
   2733  fdf9		       66		      .byte.b	#%01100110	;
   2734  fdfa
   2735  fdfa				   CFB
   2736  fdfa		       e7		      .byte.b	#%11100111	;
   2737  fdfb		       e7		      .byte.b	#%11100111	; 
   2738  fdfc		       e7		      .byte.b	#%11100111	; 
   2739  fdfd		       e7		      .byte.b	#%11100111	; 
   2740  fdfe		       e7		      .byte.b	#%11100111	;
   2741  fdff
   2742  fe00					      org	$FE00
   2743  fe00				   AesTable
   2744  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2745  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2746  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2747  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2748  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2749  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2750  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2751  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2752  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2753  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2754  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2755  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2756  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2757  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2758  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2759  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2760  ff00
   2761  ff00							; From FF00 to FFFB (122 bytes) to use here
   2762  ff00
   2763  ff00				   StaticText		; All static text must be on the same MSB block. 
   2764  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2765  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2766  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2767  ff02		       77		      .byte.b	#<CP + #FONT_OFFSET
   2768  ff03		       86		      .byte.b	#<CT + #FONT_OFFSET
   2769  ff04		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2770  ff05
   2771  ff05				   HellwayLeftText
   2772  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2773  ff06		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2774  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2775  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2776  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2777  ff0a
   2778  ff0a				   HellwayRightText
   2779  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2780  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2781  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2782  ff0d		       90		      .byte.b	#<CY + #FONT_OFFSET
   2783  ff0e		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2784  ff0f
   2785  ff0f				   OpbText
   2786  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2787  ff10		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2788  ff11		       72		      .byte.b	#<CO + #FONT_OFFSET
   2789  ff12		       77		      .byte.b	#<CP + #FONT_OFFSET
   2790  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2791  ff14
   2792  ff14				   YearText
   2793  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2794  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2795  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2796  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2797  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2798  ff19
   2799  ff19				   GameText
   2800  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2801  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2802  ff1b		       68		      .byte.b	#<CM + #FONT_OFFSET
   2803  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2804  ff1d		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2805  ff1e
   2806  ff1e				   OverText
   2807  ff1e		       72		      .byte.b	#<CO + #FONT_OFFSET
   2808  ff1f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2809  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2810  ff21		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2811  ff22		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2812  ff23				   GoText
   2813  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2814  ff24		       72		      .byte.b	#<CO + #FONT_OFFSET
   2815  ff25		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2816  ff26		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2817  ff27		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2818  ff28
   2819  ff28				   VersionText
   2820  ff28		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2821  ff29		       a4		      .byte.b	#<Dot + #FONT_OFFSET
   2822  ff2a		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2823  ff2b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2824  ff2c		       ae		      .byte.b	#<Triangle + #FONT_OFFSET
   2825  ff2d				   EndStaticText
   2826  ff2d
   2827  ff2d				   TachometerSizeLookup1
   2828  ff2d		       1f		      .byte.b	#%00011111
   2829  ff2e		       3f		      .byte.b	#%00111111
   2830  ff2f		       7f		      .byte.b	#%01111111
   2831  ff30		       ff		      .byte.b	#%11111111
   2832  ff31		       ff		      .byte.b	#%11111111
   2833  ff32		       ff		      .byte.b	#%11111111
   2834  ff33		       ff		      .byte.b	#%11111111
   2835  ff34		       ff		      .byte.b	#%11111111
   2836  ff35
   2837  ff35				   TachometerSizeLookup2
   2838  ff35		       00		      .byte.b	#%00000000
   2839  ff36		       00		      .byte.b	#%00000000
   2840  ff37		       00		      .byte.b	#%00000000
   2841  ff38		       00		      .byte.b	#%00000000
   2842  ff39		       80		      .byte.b	#%10000000
   2843  ff3a		       c0		      .byte.b	#%11000000
   2844  ff3b		       e0		      .byte.b	#%11100000
   2845  ff3c		       f0		      .byte.b	#%11110000
   2846  ff3d
   2847  ff3d				   TachometerGearLookup
   2848  ff3d		       01		      .byte.b	#%00000001
   2849  ff3e		       02		      .byte.b	#%00000010
   2850  ff3f		       04		      .byte.b	#%00000100
   2851  ff40		       08		      .byte.b	#%00001000
   2852  ff41		       10		      .byte.b	#%00010000
   2853  ff42		       30		      .byte.b	#%00110000
   2854  ff43
   2855  ff43				   EngineSoundType
   2856  ff43		       02		      .byte.b	#2
   2857  ff44		       02		      .byte.b	#2
   2858  ff45		       0e		      .byte.b	#14
   2859  ff46		       06		      .byte.b	#6
   2860  ff47		       06		      .byte.b	#6
   2861  ff48		       0e		      .byte.b	#14
   2862  ff49
   2863  ff49				   EngineBaseFrequence
   2864  ff49		       1f		      .byte.b	#31
   2865  ff4a		       15		      .byte.b	#21
   2866  ff4b		       14		      .byte.b	#20
   2867  ff4c		       1f		      .byte.b	#31
   2868  ff4d		       16		      .byte.b	#22
   2869  ff4e		       03		      .byte.b	#3
   2870  ff4f
   2871  ff4f				   CarSprite0		; Upside down, Original Car
   2872  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2873  ff57				   CarSprite0NoPadding
   2874  ff57		       7e		      .byte.b	#%01111110
   2875  ff58		       24		      .byte.b	#%00100100
   2876  ff59		       bd		      .byte.b	#%10111101
   2877  ff5a		       3c		      .byte.b	#%00111100
   2878  ff5b		       bd		      .byte.b	#%10111101
   2879  ff5c		       3c		      .byte.b	#%00111100
   2880  ff5d
   2881  ff5d				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2882  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2883  ff65				   CarSprite1NoPadding
   2884  ff65		       bd		      .byte.b	#%10111101
   2885  ff66		       7e		      .byte.b	#%01111110
   2886  ff67		       5a		      .byte.b	#%01011010
   2887  ff68		       66		      .byte.b	#%01100110
   2888  ff69		       bd		      .byte.b	#%10111101
   2889  ff6a		       3c		      .byte.b	#%00111100
   2890  ff6b
   2891  ff6b				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2892  ff6b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2893  ff73				   CarSprite2NoPadding
   2894  ff73		       7e		      .byte.b	#%01111110
   2895  ff74		       a5		      .byte.b	#%10100101
   2896  ff75		       42		      .byte.b	#%01000010
   2897  ff76		       42		      .byte.b	#%01000010
   2898  ff77		       bd		      .byte.b	#%10111101
   2899  ff78		       7e		      .byte.b	#%01111110
   2900  ff79
   2901  ff79				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2902  ff79		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2903  ff81				   CarSprite3NoPadding
   2904  ff81		       3c		      .byte.b	#%00111100
   2905  ff82		       db		      .byte.b	#%11011011
   2906  ff83		       db		      .byte.b	#%11011011
   2907  ff84		       3c		      .byte.b	#%00111100
   2908  ff85		       5a		      .byte.b	#%01011010
   2909  ff86		       3c		      .byte.b	#%00111100
   2910  ff87
   2911  ff87				   TrafficSpeeds
   2912  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2913  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2914  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2915  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2916  ff8b		       e6		      .byte.b	#$E6	;  Trafic2 L
   2917  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2918  ff8d		       c2		      .byte.b	#$C2	;  Trafic3 L
   2919  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2920  ff8f		       9e		      .byte.b	#$9E	;  Trafic4 L
   2921  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2922  ff91				   TrafficSpeedsHighDelta
   2923  ff91		       00		      .byte.b	#$00	;  Trafic0 L
   2924  ff92		       00		      .byte.b	#$00	;  Trafic0 H
   2925  ff93		       0a		      .byte.b	#$0A	;  Trafic1 L
   2926  ff94		       01		      .byte.b	#$01	;  Trafic1 H
   2927  ff95		       c8		      .byte.b	#$C8	;  Trafic2 L
   2928  ff96		       00		      .byte.b	#$00	;  Trafic2 H
   2929  ff97		       86		      .byte.b	#$86	;  Trafic3 L
   2930  ff98		       00		      .byte.b	#$00	;  Trafic3 H
   2931  ff99		       44		      .byte.b	#$44	;  Trafic4 L
   2932  ff9a		       00		      .byte.b	#$00	;  Trafic4 H
   2933  ff9b
   2934  ff9b				   CarIdToSpriteAddressL
   2935  ff9b		       4f		      .byte.b	#<CarSprite0
   2936  ff9c		       5d		      .byte.b	#<CarSprite1
   2937  ff9d		       6b		      .byte.b	#<CarSprite2
   2938  ff9e		       79		      .byte.b	#<CarSprite3
   2939  ff9f
   2940  ff9f				   CarIdToSpriteAddressH
   2941  ff9f		       ff		      .byte.b	#>CarSprite0
   2942  ffa0		       ff		      .byte.b	#>CarSprite1
   2943  ffa1		       ff		      .byte.b	#>CarSprite2
   2944  ffa2		       ff		      .byte.b	#>CarSprite3
   2945  ffa3
   2946  ffa3				   EnemyCarIdToSpriteAddressL
   2947  ffa3		       57		      .byte.b	#<CarSprite0NoPadding
   2948  ffa4		       65		      .byte.b	#<CarSprite1NoPadding
   2949  ffa5		       73		      .byte.b	#<CarSprite2NoPadding
   2950  ffa6		       81		      .byte.b	#<CarSprite3NoPadding
   2951  ffa7
   2952  ffa7				   EnemyCarIdToSpriteAddressH
   2953  ffa7		       ff		      .byte.b	#>CarSprite0NoPadding
   2954  ffa8		       ff		      .byte.b	#>CarSprite1NoPadding
   2955  ffa9		       ff		      .byte.b	#>CarSprite2NoPadding
   2956  ffaa		       ff		      .byte.b	#>CarSprite3NoPadding
   2957  ffab
   2958  ffab				   CarIdToAccelerateSpeed
   2959  ffab		       80		      .byte.b	#128
   2960  ffac		       c0		      .byte.b	#192
   2961  ffad		       60		      .byte.b	#96
   2962  ffae		       c0		      .byte.b	#192
   2963  ffaf
   2964  ffaf				   CarIdToTimeoverBreakInterval 		; Glide
   2965  ffaf		       03		      .byte.b	#%00000011	;Every 4 frames
   2966  ffb0		       03		      .byte.b	#%00000011	;Every 4 frames
   2967  ffb1		       0f		      .byte.b	#%00001111	;Every 16 frames
   2968  ffb2		       03		      .byte.b	#%00000011	;Every 4 frames
   2969  ffb3
   2970  ffb3				   CarIdToMaxSpeedL
   2971  ffb3		       80		      .byte.b	#$80
   2972  ffb4		       00		      .byte.b	#$00	; One less gear
   2973  ffb5		       80		      .byte.b	#$80
   2974  ffb6		       80		      .byte.b	#$80
   2975  ffb7
   2976  ffb7				   CarIdToMaxGear
   2977  ffb7		       05		      .byte.b	#5
   2978  ffb8		       04		      .byte.b	#4	; One less gear
   2979  ffb9		       05		      .byte.b	#5
   2980  ffba		       05		      .byte.b	#5
   2981  ffbb
   2982  ffbb				   GearToBreakSpeedTable
   2983  ffbb		       09		      .byte.b	#(BREAK_SPEED - 1)
   2984  ffbc		       09		      .byte.b	#(BREAK_SPEED - 1)
   2985  ffbd		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2986  ffbe		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2987  ffbf		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2988  ffc0		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2989  ffc1
   2990  ffc1				   TrafficColorTable
   2991  ffc1		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2992  ffc2		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2993  ffc3		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2994  ffc4		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2995  ffc5
   2996  ffc5				   TrafficChanceTable
   2997  ffc5		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2998  ffc6		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2999  ffc7		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3000  ffc8		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3001  ffc9
   3002  ffc9				   TrafficTimeTable
   3003  ffc9		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3004  ffca		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3005  ffcb		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3006  ffcc		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3007  ffcd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3008  ffce
   3009  ffce
   3010  fffc					      org	$FFFC
   3011  fffc		       00 f0		      .word.w	BeforeStart
   3012  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
