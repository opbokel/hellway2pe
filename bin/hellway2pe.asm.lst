------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 ec f6 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 bd f6 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080		       85 b9		      STA	OpCountdownTimer	;3
    283  f082
    284  f082				   ConfigurePlayer1XPosition
    285  f082		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    286  f084		       85 b7		      STA	Player1X	;3
    287  f086
    288  f086				   HPositioning 		; Avoid sleep doing needed stuff
    289  f086		       85 02		      STA	WSYNC
    290  f088
    291  f088				   ConfigurePlayer0XPosition
    292  f088		       a9 21		      LDA	#PLAYER_0_X_START	;2
    293  f08a		       85 b6		      STA	Player0X	;3
    294  f08c
    295  f08c				   ConfigureMissileSize
    296  f08c		       a9 30		      LDA	#%00110000	;2 Missile Size
    297  f08e		       85 04		      STA	NUSIZ0	;3
    298  f090		       85 05		      STA	NUSIZ1	;3
    299  f092
    300  f092				   ConfigureNextCheckpoint
    301  f092		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    302  f094		       85 cd		      STA	NextCheckpoint
    303  f096
    304  f096		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f098					      SLEEP	4	;
      1  f098				   .CYCLES    SET	4
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     19  f09a					      REPEND
    306  f09a		       85 12		      STA	RESM0
      0  f09c					      SLEEP	2	;
      1  f09c				   .CYCLES    SET	2
      2  f09c
      3  f09c				  -	      IF	.CYCLES < 2
      4  f09c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09c				  -	      ERR
      6  f09c					      ENDIF
      7  f09c
      8  f09c				  -	      IF	.CYCLES & 1
      9  f09c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09c				  -	      nop	0
     11  f09c				  -	      ELSE
     12  f09c				  -	      bit	VSYNC
     13  f09c				  -	      ENDIF
     14  f09c				  -.CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c					      REPEAT	.CYCLES / 2
     18  f09c		       ea		      nop
     19  f09d					      REPEND
    308  f09d		       85 14		      STA	RESBL
      0  f09f					      SLEEP	2
      1  f09f				   .CYCLES    SET	2
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f				  -	      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f				  -	      ELSE
     12  f09f				  -	      bit	VSYNC
     13  f09f				  -	      ENDIF
     14  f09f				  -.CYCLES    SET	.CYCLES - 3
     15  f09f					      ENDIF
     16  f09f
     17  f09f					      REPEAT	.CYCLES / 2
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    310  f0a0		       85 13		      STA	RESM1
      0  f0a2					      SLEEP	3
      1  f0a2				   .CYCLES    SET	3
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4				  -	      REPEAT	.CYCLES / 2
     18  f0a4				  -	      nop
     19  f0a4					      REPEND
    312  f0a4
    313  f0a4		       a9 e0		      LDA	#$E0
    314  f0a6		       85 24		      STA	HMBL
    315  f0a8		       85 22		      STA	HMM0
    316  f0aa		       85 23		      STA	HMM1
    317  f0ac		       85 02		      STA	WSYNC
    318  f0ae		       85 2a		      STA	HMOVE
    319  f0b0		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    320  f0b2		       85 2b		      STA	HMCLR
      0  f0b4					      SLEEP	30
      1  f0b4				   .CYCLES    SET	30
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     19  f0c3					      REPEND
    322  f0c3		       85 10		      STA	RESP0
    323  f0c5							;SLEEP 5 ; Temporarily move player 1 away.
    324  f0c5		       85 11		      STA	RESP1
    325  f0c7
    326  f0c7				   WaitResetToEnd
    327  f0c7		       ad 84 02 	      LDA	INTIM
    328  f0ca		       d0 fb		      BNE	WaitResetToEnd
    329  f0cc
    330  f0cc				   MainLoop
    331  f0cc		       a9 02		      LDA	#2
    332  f0ce		       85 00		      STA	VSYNC
    333  f0d0		       85 02		      STA	WSYNC
    334  f0d2		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    335  f0d4				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    336  f0d4		       a9 01		      LDA	#%00000001	;3
    337  f0d6		       24 df		      BIT	TextFlickerMode	;2
    338  f0d8		       f0 05		      BEQ	TextSideFrameZero	;2
    339  f0da		       25 8d		      AND	FrameCount1	;2
    340  f0dc		       4c e1 f0 	      JMP	StoreTextSize	;3
    341  f0df				   TextSideFrameZero
    342  f0df		       25 8c		      AND	FrameCount0	;2
    343  f0e1				   StoreTextSize
    344  f0e1		       85 de		      STA	TextSide	;3
    345  f0e3
    346  f0e3				   PrepareMaxHMove
      0  f0e3					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e3				   .CYCLES    SET	18
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     19  f0ec					      REPEND
    348  f0ec		       a9 80		      LDA	#$80
    349  f0ee		       85 24		      STA	HMBL
    350  f0f0		       85 22		      STA	HMM0
    351  f0f2		       85 23		      STA	HMM1
    352  f0f4		       85 20		      STA	HMP0
    353  f0f6		       85 21		      STA	HMP1
    354  f0f8		       85 02		      STA	WSYNC
    355  f0fa		       85 2a		      STA	HMOVE	; 1/10			
    356  f0fc
    357  f0fc				   ConfigVBlankTimer
    358  f0fc		       a5 c6		      LDA	GameMode
    359  f0fe		       c9 10		      CMP	#MAX_GAME_MODE
    360  f100		       f0 05		      BEQ	SetVblankTimerQrCode
    361  f102		       a9 29		      LDA	#VBLANK_TIMER
    362  f104		       4c 09 f1 	      JMP	SetVblankTimer
    363  f107				   SetVblankTimerQrCode
    364  f107		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    365  f109
    366  f109				   SetVblankTimer
    367  f109		       85 02		      STA	WSYNC	;3
    368  f10b		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    369  f10d		       8d 96 02 	      STA	TIM64T	;3	
    370  f110		       a9 00		      LDA	#0	;2
    371  f112		       85 00		      STA	VSYNC	;3	
    372  f114
    373  f114				   RandomizeGame
    374  f114		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    375  f116		       d0 2d		      BNE	EndRandomizeGame
    376  f118		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    377  f11a		       29 02		      AND	#%00000010
    378  f11c		       f0 24		      BEQ	DeterministicGame
    379  f11e		       a6 96		      LDX	TrafficOffset1 + 2
    380  f120		       bd 00 fe 	      LDA	AesTable,X
    381  f123		       45 8c		      EOR	FrameCount0
    382  f125		       85 96		      STA	TrafficOffset1 + 2
    383  f127		       85 a6		      STA	OpTrafficOffset1 + 2
    384  f129		       a6 9a		      LDX	TrafficOffset2 + 2
    385  f12b		       bd 00 fe 	      LDA	AesTable,X
    386  f12e		       45 8c		      EOR	FrameCount0
    387  f130		       85 9a		      STA	TrafficOffset2 + 2
    388  f132		       85 aa		      STA	OpTrafficOffset2 + 2
    389  f134		       a6 9e		      LDX	TrafficOffset3 + 2
    390  f136		       bd 00 fe 	      LDA	AesTable,X
    391  f139		       45 8c		      EOR	FrameCount0
    392  f13b		       85 9e		      STA	TrafficOffset3 + 2
    393  f13d		       85 ae		      STA	OpTrafficOffset3 + 2
    394  f13f		       4c 45 f1 	      JMP	EndRandomizeGame
    395  f142
    396  f142				   DeterministicGame
    397  f142		       20 ec f6 	      JSR	DefaultOffsets
    398  f145
    399  f145				   EndRandomizeGame
    400  f145
    401  f145
    402  f145							; Move this in the code and save cycles, for some reason spliting is breaking...
    403  f145		       a2 08		      LDX	#8
    404  f147				   BurnAllHMove
    405  f147		       85 02		      STA	WSYNC	;3
    406  f149		       85 2a		      STA	HMOVE	; 3/10 
    407  f14b		       ca		      DEX
    408  f14c		       d0 f9		      BNE	BurnAllHMove
    409  f14e		       85 02		      STA	WSYNC	;3
    410  f150		       85 2b		      STA	HMCLR	; 
    411  f152
    412  f152				   CountFrame
    413  f152		       e6 8c		      INC	FrameCount0	; 5
    414  f154		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    415  f156		       e6 8d		      INC	FrameCount1	; 5 
    416  f158				   SkipIncFC1
    417  f158
    418  f158				   CallDrawQrCode
    419  f158		       a5 c6		      LDA	GameMode
    420  f15a		       c9 10		      CMP	#MAX_GAME_MODE
    421  f15c		       d0 03		      BNE	TestIsGameRunning
    422  f15e		       4c 64 fc 	      JMP	DrawQrCode
    423  f161
    424  f161							;Does not update the game if not running
    425  f161				   TestIsGameRunning
    426  f161		       a5 bd		      LDA	GameStatus	;3
    427  f163		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    428  f165				   SelectCarWithDpadCall		; Only do it when game is stoped
    429  f165		       a2 00		      LDX	#0	; Player 0
    430  f167		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    431  f169		       85 b0		      STA	Tmp0
    432  f16b		       20 5b f9 	      JSR	SelectCarWithDpad
    433  f16e		       e8		      INX		; Player 1
    434  f16f		       20 5b f9 	      JSR	SelectCarWithDpad
    435  f172
    436  f172				   CallConfigureCarSprites
    437  f172		       20 29 f9 	      JSR	ConfigureCarSprites
    438  f175				   SkipUpdateLogicJump
    439  f175		       4c ea f1 	      JMP	SkipUpdateLogic
    440  f178				   ContinueWithGameLogic
    441  f178
    442  f178				   CallEverySecond		; Timer for now
    443  f178		       a2 00		      LDX	#0
    444  f17a		       20 e5 fa 	      JSR	EverySecond
    445  f17d		       e8		      INX
    446  f17e		       20 e5 fa 	      JSR	EverySecond
    447  f181
    448  f181
    449  f181				   ChangeTextFlickerMode
    450  f181		       a5 bc		      LDA	SwitchDebounceCounter
    451  f183		       d0 0d		      BNE	EndChangeTextFlickerMode
    452  f185		       ad 82 02 	      LDA	SWCHB
    453  f188		       29 02		      AND	#%00000010	;Game select
    454  f18a		       d0 06		      BNE	EndChangeTextFlickerMode
    455  f18c		       e6 df		      INC	TextFlickerMode
    456  f18e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    457  f190		       85 bc		      STA	SwitchDebounceCounter
    458  f192				   EndChangeTextFlickerMode
    459  f192
    460  f192				   CallProcessSpeed
    461  f192		       a2 00		      LDX	#0
    462  f194		       20 42 fa 	      JSR	ProcessSpeed
    463  f197
    464  f197		       e8		      INX		; Player 1
    465  f198		       20 42 fa 	      JSR	ProcessSpeed
    466  f19b
    467  f19b				   CallUpdateOffsets
    468  f19b		       a2 00		      LDX	#0	; Player 0
    469  f19d		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    470  f19f		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    471  f1a1		       a5 f0		      LDA	Player0SpeedL
    472  f1a3		       85 b4		      STA	Tmp4
    473  f1a5		       a5 f2		      LDA	Player0SpeedH
    474  f1a7		       85 b5		      STA	Tmp5
    475  f1a9		       20 ef f9 	      JSR	UpdateOffsets
    476  f1ac
    477  f1ac							;LDX Exits the call with correct value.
    478  f1ac		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    479  f1ae		       85 b3		      STA	Tmp3
    480  f1b0		       a5 f1		      LDA	Player1SpeedL
    481  f1b2		       85 b4		      STA	Tmp4
    482  f1b4		       a5 f3		      LDA	Player1SpeedH
    483  f1b6		       85 b5		      STA	Tmp5
    484  f1b8		       20 ef f9 	      JSR	UpdateOffsets
    485  f1bb
    486  f1bb				   ConfigureOpponentLine		; Temporary
    487  f1bb		       a9 14		      LDA	#20	; Extract to constant
    488  f1bd		       85 cf		      STA	OpponentLine
    489  f1bf
    490  f1bf				   CallTestColisionAndMove
    491  f1bf		       a2 00		      LDX	#0	; Player 0
    492  f1c1							; Colision with traffic, each player check different flags,
    493  f1c1		       a5 8c		      LDA	FrameCount0
    494  f1c3		       29 01		      AND	#%00000001
    495  f1c5		       f0 07		      BEQ	SkipColisionPlayer0	; Test colision after draw frame
    496  f1c7		       a5 01		      LDA	CXM1P
    497  f1c9		       4a		      LSR
    498  f1ca		       05 00		      ORA	CXM0P
    499  f1cc		       05 02		      ORA	CXP0FB
    500  f1ce							; ORA CXPPMM ; Collision between players will have its own rules
    501  f1ce				   SkipColisionPlayer0		; Should not colide on opponent side.
    502  f1ce		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    503  f1d0		       85 b2		      STA	Tmp2
    504  f1d2		       20 6d f9 	      JSR	TestCollisionAndMove
    505  f1d5
    506  f1d5		       e8		      INX		; player 1
    507  f1d6		       a5 8c		      LDA	FrameCount0
    508  f1d8		       29 01		      AND	#%00000001
    509  f1da		       d0 07		      BNE	SkipColisionPlayer1	; Test colision after draw frame
    510  f1dc		       a5 00		      LDA	CXM0P
    511  f1de		       4a		      LSR
    512  f1df		       05 01		      ORA	CXM1P
    513  f1e1		       05 03		      ORA	CXP1FB
    514  f1e3				   SkipColisionPlayer1
    515  f1e3		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    516  f1e5		       85 b2		      STA	Tmp2
    517  f1e7		       20 6d f9 	      JSR	TestCollisionAndMove
    518  f1ea
    519  f1ea				   SkipUpdateLogic		; Continue here if not paused
    520  f1ea
    521  f1ea				   CalculateGear
    522  f1ea		       a5 f0		      LDA	Player0SpeedL	;3
    523  f1ec		       29 80		      AND	#%10000000	;2
    524  f1ee		       05 f2		      ORA	Player0SpeedH	;3
    525  f1f0		       18		      CLC		;2
    526  f1f1		       2a		      ROL		;2
    527  f1f2		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    528  f1f4		       85 d5		      STA	Gear
    529  f1f6
    530  f1f6				   EndProcessingBorder
    531  f1f6
    532  f1f6				   ProcessScoreFontColor
    533  f1f6		       a6 cb		      LDX	ScoreFontColorHoldChange
    534  f1f8		       f0 06		      BEQ	ResetScoreFontColor
    535  f1fa		       ca		      DEX
    536  f1fb		       86 cb		      STX	ScoreFontColorHoldChange
    537  f1fd		       4c 04 f2 	      JMP	SkipScoreFontColor
    538  f200				   ResetScoreFontColor
    539  f200		       a9 f9		      LDA	#SCORE_FONT_COLOR
    540  f202		       85 c9		      STA	ScoreFontColor
    541  f204				   SkipScoreFontColor
    542  f204
    543  f204				   IsGameOver
    544  f204		       a5 b8		      LDA	CountdownTimer
    545  f206		       05 f0		      ORA	Player0SpeedL
    546  f208		       05 f2		      ORA	Player0SpeedH
    547  f20a		       d0 0b		      BNE	IsCheckpoint
    548  f20c		       a9 01		      LDA	#1
    549  f20e		       85 cb		      STA	ScoreFontColorHoldChange
    550  f210		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    551  f212		       85 c9		      STA	ScoreFontColor
    552  f214		       4c 49 f2 	      JMP	SkipIsTimeOver
    553  f217
    554  f217				   IsCheckpoint
    555  f217		       a5 cd		      LDA	NextCheckpoint
    556  f219		       c5 92		      CMP	TrafficOffset0 + 2
    557  f21b		       d0 20		      BNE	SkipIsCheckpoint
    558  f21d		       18		      CLC
    559  f21e		       69 10		      ADC	#CHECKPOINT_INTERVAL
    560  f220		       85 cd		      STA	NextCheckpoint
    561  f222		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    562  f224		       85 c9		      STA	ScoreFontColor
    563  f226		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    564  f228		       85 cb		      STA	ScoreFontColorHoldChange
    565  f22a		       a5 b8		      LDA	CountdownTimer
    566  f22c		       18		      CLC
    567  f22d		       65 c0		      ADC	CheckpointTime
    568  f22f		       85 b8		      STA	CountdownTimer
    569  f231		       90 04		      BCC	JumpSkipTimeOver
    570  f233		       a9 ff		      LDA	#$FF
    571  f235		       85 b8		      STA	CountdownTimer	; Does not overflow!
    572  f237				   JumpSkipTimeOver
    573  f237		       20 ae f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    574  f23a		       4c 49 f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    575  f23d				   SkipIsCheckpoint
    576  f23d
    577  f23d				   IsTimeOver
    578  f23d		       a5 b8		      LDA	CountdownTimer
    579  f23f		       d0 08		      BNE	SkipIsTimeOver
    580  f241		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    581  f243		       85 cb		      STA	ScoreFontColorHoldChange
    582  f245		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    583  f247		       85 c9		      STA	ScoreFontColor
    584  f249				   SkipIsTimeOver
    585  f249
    586  f249		       20 29 f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    587  f24c
    588  f24c				   PrintEasterEggCondition
    589  f24c		       a5 8d		      LDA	FrameCount1
    590  f24e		       29 38		      AND	#%00111000
    591  f250		       05 bd		      ORA	GameStatus
    592  f252		       c9 38		      CMP	#%00111000
    593  f254		       d0 06		      BNE	ChooseTextSide
    594  f256		       20 1f f7 	      JSR	PrintEasterEgg
    595  f259		       4c 4b f3 	      JMP	RightScoreWriteEnd
    596  f25c
    597  f25c							;Could be done during on vblank to save this comparisson time (before draw score), 
    598  f25c							;but I am saving vblank cycles for now, in case of 2 players.
    599  f25c				   ChooseTextSide		; 
    600  f25c		       a5 de		      LDA	TextSide	;3
    601  f25e		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    602  f260		       4c e1 f2 	      JMP	RightScoreWrite
    603  f263
    604  f263				   LeftScoreWrite
    605  f263		       a5 c9		      LDA	ScoreFontColor
    606  f265		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    607  f267		       f0 4e		      BEQ	PrintCheckpoint
    608  f269		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    609  f26b		       f0 52		      BEQ	PrintStartGame
    610  f26d		       a5 bd		      LDA	GameStatus
    611  f26f		       f0 56		      BEQ	PrintHellwayLeft
    612  f271				   WriteDistance		;Not optimized yet, ugly code.
    613  f271				   Digit0Distance
    614  f271		       a5 91		      LDA	TrafficOffset0 + 1	;3
    615  f273		       4a		      LSR		; 2
    616  f274		       4a		      LSR		; 2
    617  f275		       4a		      LSR		; 2
    618  f276		       4a		      LSR		; 2
    619  f277		       aa		      TAX		; 2
    620  f278		       bd be fd 	      LDA	FontLookup,X	;4
    621  f27b		       85 d3		      STA	ScoreD3	;3
    622  f27d
    623  f27d				   Digit1Distance
    624  f27d		       a5 92		      LDA	TrafficOffset0 + 2	;3
    625  f27f		       29 0f		      AND	#%00001111	;2
    626  f281		       aa		      TAX		; 2
    627  f282		       bd be fd 	      LDA	FontLookup,X	;4 
    628  f285		       85 d2		      STA	ScoreD2	;3
    629  f287
    630  f287				   Digit2Distance
    631  f287		       a5 92		      LDA	TrafficOffset0 + 2	;3
    632  f289		       4a		      LSR		; 2
    633  f28a		       4a		      LSR		; 2
    634  f28b		       4a		      LSR		; 2
    635  f28c		       4a		      LSR		; 2
    636  f28d		       aa		      TAX		; 2
    637  f28e		       bd be fd 	      LDA	FontLookup,X	;4
    638  f291		       85 d1		      STA	ScoreD1	;3
    639  f293
    640  f293				   Digit3Distance
    641  f293		       a5 ba		      LDA	Traffic0Msb	;3
    642  f295		       29 0f		      AND	#%00001111	;2
    643  f297		       aa		      TAX		; 2
    644  f298		       bd be fd 	      LDA	FontLookup,X	;4 
    645  f29b		       85 d0		      STA	ScoreD0	;3
    646  f29d
    647  f29d				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    648  f29d		       a5 ba		      LDA	Traffic0Msb
    649  f29f		       29 f0		      AND	#%11110000	;2
    650  f2a1		       d0 07		      BNE	DrawDistanceExtraDigit
    651  f2a3		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    652  f2a5		       85 d4		      STA	ScoreD4	;3
    653  f2a7		       4c b4 f2 	      JMP	EndDrawDistance
    654  f2aa				   DrawDistanceExtraDigit
    655  f2aa		       4a		      LSR		; 2
    656  f2ab		       4a		      LSR		; 2
    657  f2ac		       4a		      LSR		; 2
    658  f2ad		       4a		      LSR		; 2
    659  f2ae		       aa		      TAX		; 2
    660  f2af		       bd be fd 	      LDA	FontLookup,X	;4
    661  f2b2		       85 d4		      STA	ScoreD4	;3
    662  f2b4
    663  f2b4				   EndDrawDistance
    664  f2b4		       4c 4b f3 	      JMP	RightScoreWriteEnd	;3
    665  f2b7
    666  f2b7				   PrintCheckpoint
    667  f2b7		       a2 00		      LDX	#<CheckpointText
    668  f2b9		       20 01 f7 	      JSR	PrintStaticText
    669  f2bc		       4c 4b f3 	      JMP	RightScoreWriteEnd	;3
    670  f2bf				   PrintStartGame
    671  f2bf		       a2 23		      LDX	#<GoText
    672  f2c1		       20 01 f7 	      JSR	PrintStaticText
    673  f2c4		       4c 4b f3 	      JMP	RightScoreWriteEnd	;3
    674  f2c7
    675  f2c7				   PrintHellwayLeft
    676  f2c7		       a5 8d		      LDA	FrameCount1
    677  f2c9		       29 01		      AND	#1
    678  f2cb		       d0 05		      BNE	PrintCreditsLeft
    679  f2cd		       a2 05		      LDX	#<HellwayLeftText
    680  f2cf		       4c d4 f2 	      JMP	PrintGameMode
    681  f2d2				   PrintCreditsLeft
    682  f2d2		       a2 0f		      LDX	#<OpbText
    683  f2d4
    684  f2d4				   PrintGameMode
    685  f2d4		       20 01 f7 	      JSR	PrintStaticText
    686  f2d7		       a6 c6		      LDX	GameMode
    687  f2d9		       bd be fd 	      LDA	FontLookup,X	;4 
    688  f2dc		       85 d0		      STA	ScoreD0	;3
    689  f2de		       4c 4b f3 	      JMP	RightScoreWriteEnd	;3
    690  f2e1
    691  f2e1				   RightScoreWrite
    692  f2e1		       a5 bd		      LDA	GameStatus
    693  f2e3		       f0 45		      BEQ	PrintHellwayRight
    694  f2e5		       a5 c9		      LDA	ScoreFontColor
    695  f2e7		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    696  f2e9		       f0 52		      BEQ	PrintGameOver
    697  f2eb				   Digit0Timer
    698  f2eb		       a5 b8		      LDA	CountdownTimer	;3
    699  f2ed		       29 0f		      AND	#%00001111	;2
    700  f2ef		       aa		      TAX		; 2
    701  f2f0		       bd be fd 	      LDA	FontLookup,X	;4 
    702  f2f3		       85 d1		      STA	ScoreD1	;3
    703  f2f5
    704  f2f5				   Digit1Timer
    705  f2f5		       a5 b8		      LDA	CountdownTimer	;3
    706  f2f7		       4a		      LSR		; 2
    707  f2f8		       4a		      LSR		; 2
    708  f2f9		       4a		      LSR		; 2
    709  f2fa		       4a		      LSR		; 2
    710  f2fb		       aa		      TAX		; 2
    711  f2fc		       bd be fd 	      LDA	FontLookup,X	;4
    712  f2ff		       85 d0		      STA	ScoreD0	;3
    713  f301
    714  f301		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    715  f303		       85 d2		      STA	ScoreD2	;3
    716  f305
    717  f305				   Digit0Speed
    718  f305		       a5 f0		      LDA	Player0SpeedL
    719  f307		       29 3c		      AND	#%00111100	;2 Discard the last bits
    720  f309		       4a		      LSR		; 2
    721  f30a		       4a		      LSR		; 2
    722  f30b		       aa		      TAX		; 2
    723  f30c		       bd be fd 	      LDA	FontLookup,X	;4
    724  f30f		       85 d4		      STA	ScoreD4	;3
    725  f311
    726  f311				   Digit1Speed
    727  f311		       a5 f0		      LDA	Player0SpeedL
    728  f313		       29 c0		      AND	#%11000000	;2 Discard the last bits
    729  f315		       18		      CLC
    730  f316		       2a		      ROL		;First goes into carry
    731  f317		       2a		      ROL
    732  f318		       2a		      ROL
    733  f319		       85 b0		      STA	Tmp0
    734  f31b		       a5 f2		      LDA	Player0SpeedH
    735  f31d		       0a		      ASL
    736  f31e		       0a		      ASL
    737  f31f		       05 b0		      ORA	Tmp0
    738  f321		       aa		      TAX		; 2
    739  f322		       bd be fd 	      LDA	FontLookup,X	;4
    740  f325		       85 d3		      STA	ScoreD3	;3
    741  f327		       4c 4b f3 	      JMP	RightScoreWriteEnd
    742  f32a
    743  f32a				   PrintHellwayRight
    744  f32a		       a5 8d		      LDA	FrameCount1
    745  f32c		       29 01		      AND	#1
    746  f32e		       d0 05		      BNE	PrintCreditsRight
    747  f330		       a2 0a		      LDX	#<HellwayRightText
    748  f332		       4c 37 f3 	      JMP	PrintRightIntro
    749  f335				   PrintCreditsRight
    750  f335		       a2 14		      LDX	#<YearText
    751  f337				   PrintRightIntro
    752  f337		       20 01 f7 	      JSR	PrintStaticText
    753  f33a		       4c 4b f3 	      JMP	RightScoreWriteEnd
    754  f33d				   PrintGameOver
    755  f33d		       a5 8c		      LDA	FrameCount0
    756  f33f		       30 05		      BMI	PrintOverText
    757  f341		       a2 19		      LDX	#<GameText
    758  f343		       4c 48 f3 	      JMP	StoreGameOverText
    759  f346				   PrintOverText
    760  f346		       a2 1e		      LDX	#<OverText
    761  f348				   StoreGameOverText
    762  f348		       20 01 f7 	      JSR	PrintStaticText
    763  f34b				   RightScoreWriteEnd
    764  f34b
    765  f34b
    766  f34b				   ScoreBackgroundColor
    767  f34b		       a2 00		      LDX	#0
    768  f34d		       ad 82 02 	      LDA	SWCHB
    769  f350		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    770  f352		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    771  f354		       f0 04		      BEQ	BlackAndWhiteScoreBg
    772  f356		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    773  f358		       a2 03		      LDX	#BACKGROUND_COLOR
    774  f35a				   BlackAndWhiteScoreBg
    775  f35a		       85 b2		      STA	Tmp2	; Score Background
    776  f35c		       86 b3		      STX	Tmp3	; Traffic Background
    777  f35e
    778  f35e				   ConfigurePFForScore
    779  f35e							;LDA #SCORE_BACKGROUND_COLOR; Done above
    780  f35e		       85 09		      STA	COLUBK
    781  f360		       20 70 f6 	      JSR	ClearAll
    782  f363		       a9 02		      LDA	#%00000010	; Score mode
    783  f365		       85 0a		      STA	CTRLPF
    784  f367		       a5 de		      LDA	TextSide	;3
    785  f369		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    786  f36b				   LeftScoreOn
    787  f36b		       a5 c9		      LDA	ScoreFontColor
    788  f36d		       85 07		      STA	COLUP1
    789  f36f		       a5 b2		      LDA	Tmp2
    790  f371		       85 06		      STA	COLUP0
    791  f373		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    792  f375		       85 b1		      STA	Tmp1
    793  f377		       4c 86 f3 	      JMP	CallWaitForVblankEnd
    794  f37a				   RightScoreOn
    795  f37a		       a5 c9		      LDA	ScoreFontColor
    796  f37c		       85 06		      STA	COLUP0
    797  f37e		       a5 b2		      LDA	Tmp2
    798  f380		       85 07		      STA	COLUP1
    799  f382		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    800  f384		       85 b1		      STA	Tmp1
    801  f386
    802  f386							; After here we are going to update the screen, No more heavy code
    803  f386				   CallWaitForVblankEnd
    804  f386		       20 02 f9 	      JSR	WaitForVblankEnd
    805  f389
    806  f389				   DrawScoreHud
    807  f389		       20 91 f7 	      JSR	PrintScore
    808  f38c
    809  f38c		       85 02		      STA	WSYNC
    810  f38e
    811  f38e		       a5 0c		      LDA	INPT4	;3
    812  f390		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    813  f392		       a5 c9		      LDA	ScoreFontColor
    814  f394		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    815  f396		       d0 0a		      BNE	WaitAnotherScoreLine
    816  f398		       a5 de		      LDA	TextSide	;3
    817  f39a		       d0 03		      BNE	LeftScoreOnGameOver
    818  f39c		       4c dc f8 	      JMP	DrawGameOverScreenRight
    819  f39f				   LeftScoreOnGameOver
    820  f39f		       4c 4e f8 	      JMP	DrawGameOverScreenLeft
    821  f3a2
    822  f3a2				   WaitAnotherScoreLine
    823  f3a2		       85 02		      STA	WSYNC
    824  f3a4
    825  f3a4				   PrepareForTraffic
    826  f3a4		       20 82 f6 	      JSR	ClearPF	; 32
    827  f3a7
    828  f3a7		       85 02		      STA	WSYNC
    829  f3a9		       85 02		      STA	WSYNC
    830  f3ab
    831  f3ab		       a9 30		      LDA	#%00110000	; 2 Score mode
    832  f3ad		       85 0a		      STA	CTRLPF	;3
    833  f3af
    834  f3af		       a5 c2		      LDA	TrafficColor	;3
    835  f3b1		       85 08		      STA	COLUPF	;3
    836  f3b3
    837  f3b3		       a9 96		      LDA	#PLAYER1_COLOR	;2
    838  f3b5		       85 07		      STA	COLUP1	;3
    839  f3b7
    840  f3b7		       a5 c9		      LDA	ScoreFontColor	;3
    841  f3b9		       85 06		      STA	COLUP0	;3
    842  f3bb
    843  f3bb		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    844  f3bd
    845  f3bd		       20 82 f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    846  f3c0
    847  f3c0		       a6 b3		      LDX	Tmp3	; Background color.
    848  f3c2
      0  f3c2					      SLEEP	9	; Odd sleep destroys flags
      1  f3c2				   .CYCLES    SET	9
      2  f3c2
      3  f3c2				  -	      IF	.CYCLES < 2
      4  f3c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3c2				  -	      ERR
      6  f3c2					      ENDIF
      7  f3c2
      8  f3c2					      IF	.CYCLES & 1
      9  f3c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3c2				  -	      nop	0
     11  f3c2					      ELSE
     12  f3c2		       24 00		      bit	VSYNC
     13  f3c4					      ENDIF
     14  f3c4				   .CYCLES    SET	.CYCLES - 3
     15  f3c4					      ENDIF
     16  f3c4
     17  f3c4					      REPEAT	.CYCLES / 2
     18  f3c4		       ea		      nop
     17  f3c4					      REPEND
     18  f3c5		       ea		      nop
     17  f3c5					      REPEND
     18  f3c6		       ea		      nop
     19  f3c7					      REPEND
    850  f3c7
    851  f3c7		       a5 8c		      LDA	FrameCount0	;Brach flag
    852  f3c9		       29 01		      AND	#%00000001
    853  f3cb
    854  f3cb		       86 09		      STX	COLUBK	;3
    855  f3cd		       d0 05		      BNE	OpDrawCache	;2
    856  f3cf		       4c 8e f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    857  f3d2							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    858  f3d2
    859  f3d2							;main scanline loop...
    860  f3d2				   OpScanLoop
    861  f3d2		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    862  f3d4
    863  f3d4							;Start of next line!			
    864  f3d4				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    865  f3d4
    866  f3d4		       a5 80		      LDA	GRP0Cache	;3
    867  f3d6		       85 1b		      STA	GRP0	;3
    868  f3d8
    869  f3d8		       a5 84		      LDA	GRP1Cache	;3
    870  f3da		       85 1c		      STA	GRP1	;3
    871  f3dc
    872  f3dc		       a5 85		      LDA	ENABLCache	;3
    873  f3de		       85 1f		      STA	ENABL	;3
    874  f3e0
    875  f3e0		       a5 86		      LDA	ENAM0Cache	;3
    876  f3e2		       85 1d		      STA	ENAM0	;3
    877  f3e4
    878  f3e4		       a5 87		      LDA	ENAM1Cache	;3
    879  f3e6		       85 1e		      STA	ENAM1	;3
    880  f3e8
    881  f3e8		       a5 81		      LDA	PF0Cache	;3
    882  f3ea		       85 0d		      STA	PF0	;3
    883  f3ec
    884  f3ec		       a9 00		      LDA	#0	;2
    885  f3ee							;STA PF0	     ;3
    886  f3ee		       85 80		      STA	GRP0Cache	;3
    887  f3f0		       85 86		      STA	ENAM0Cache	;3
    888  f3f2		       85 85		      STA	ENABLCache	;3
    889  f3f4		       85 87		      STA	ENAM1Cache	; 3
    890  f3f6							;STA GRP1Cache ;3
    891  f3f6		       85 0d		      STA	PF0	;3
    892  f3f8							;STA PF2	     ;3
    893  f3f8
    894  f3f8		       a5 83		      LDA	PF2Cache	;3
    895  f3fa		       85 0f		      STA	PF2	;3
    896  f3fc
    897  f3fc				   OpDrawCar0
    898  f3fc		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    899  f3fe		       b0 04		      BCS	OpSkipDrawCar	;2
    900  f400		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    901  f402		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    902  f404				   OpSkipDrawCar
    903  f404
    904  f404							;BEQ DrawTraffic3
    905  f404				   OpDrawTraffic1		; 33
    906  f404		       98		      TYA		; 2
    907  f405		       18		      CLC		; 2 
    908  f406		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    909  f408		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    910  f40a		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    911  f40c		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    912  f40e		       4c 13 f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
    913  f411				   OpEorOffsetWithCarry
    914  f411		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    915  f413				   OpAfterEorOffsetWithCarry		;17
    916  f413		       aa		      TAX		;2
    917  f414		       bd 00 fe 	      LDA	AesTable,X	; 4
    918  f417		       c5 be		      CMP	TrafficChance	;3
    919  f419		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    920  f41b		       a9 ff		      LDA	#$FF	;2
    921  f41d		       85 86		      STA	ENAM0Cache	;3
    922  f41f				   OpFinishDrawTraffic1
    923  f41f
    924  f41f				   OpErasePF2
    925  f41f		       a9 00		      LDA	#0
    926  f421		       85 0f		      STA	PF2
    927  f423
    928  f423				   OpDrawTraffic2		; 33
    929  f423		       98		      TYA		; 2
    930  f424		       18		      CLC		; 2 
    931  f425		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    932  f427		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    933  f429		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    934  f42b		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    935  f42d		       4c 32 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    936  f430				   OpEorOffsetWithCarry2
    937  f430		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    938  f432				   OpAfterEorOffsetWithCarry2		;17
    939  f432		       aa		      TAX		;2
    940  f433		       bd 00 fe 	      LDA	AesTable,X	; 4
    941  f436		       c5 be		      CMP	TrafficChance	;3
    942  f438		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    943  f43a		       a9 02		      LDA	#%00000010	;2
    944  f43c		       85 85		      STA	ENABLCache	;3
    945  f43e				   OpFinishDrawTraffic2
    946  f43e
    947  f43e							;STA WSYNC ;65 / 137
    948  f43e
    949  f43e							; LDA Tmp0 ; Flicker this line if drawing car
    950  f43e							; BEQ FinishDrawTraffic4
    951  f43e				   OpDrawTraffic3		; 33
    952  f43e		       98		      TYA		; 2
    953  f43f		       18		      CLC		; 2 
    954  f440		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    955  f442		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    956  f444		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    957  f446		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    958  f448		       4c 4d f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    959  f44b				   OpEorOffsetWithCarry3
    960  f44b		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    961  f44d				   OpAfterEorOffsetWithCarry3		;17
    962  f44d		       aa		      TAX		;2
    963  f44e		       bd 00 fe 	      LDA	AesTable,X	; 4
    964  f451		       c5 be		      CMP	TrafficChance	;3
    965  f453		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    966  f455		       a9 02		      LDA	#%00000010	;2
    967  f457		       85 87		      STA	ENAM1Cache
    968  f459				   OpFinishDrawTraffic3
    969  f459
    970  f459				   OpDrawOponent		;26
    971  f459		       84 b0		      STY	Tmp0	;3
    972  f45b		       a4 cf		      LDY	OpponentLine	;3
    973  f45d		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    974  f45f		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    975  f461				   OpDrawOpponent
    976  f461		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    977  f463		       85 80		      STA	GRP0Cache	;3
    978  f465		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    979  f467		       a4 b0		      LDY	Tmp0	;3
    980  f469		       4c 7d f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    981  f46c				   OpSkipDrawOpponent
    982  f46c		       c6 cf		      DEC	OpponentLine	;5
    983  f46e		       a4 b0		      LDY	Tmp0	;3
    984  f470
    985  f470
    986  f470				   OpDrawTraffic0		; 21 2pe
    987  f470		       98		      TYA		; 2
    988  f471		       18		      CLC		; 2 
    989  f472		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    990  f474		       29 08		      AND	#%00001000	;2
    991  f476		       f0 05		      BEQ	OpHasNoBorderP0	;3
    992  f478				   OpHasBorderP0
    993  f478		       a9 70		      LDA	#%01110000	; 2
    994  f47a		       4c 7f f4 	      JMP	OpStoreBorderP0	; 3
    995  f47d				   OpHasNoBorderP0
    996  f47d		       a9 00		      LDA	#0	; 2
    997  f47f				   OpStoreBorderP0
    998  f47f		       85 81		      STA	PF0Cache	; 3
    999  f481		       85 83		      STA	PF2Cache	; 3
   1000  f483
   1001  f483				   OpSkipDrawTraffic0
   1002  f483
   1003  f483				   OpWhileScanLoop
   1004  f483		       88		      DEY		;2
   1005  f484		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1006  f486		       4c d2 f3 	      JMP	OpScanLoop	;3
   1007  f489				   OpFinishScanLoop		; 7 209 of 222
   1008  f489		       4c 41 f5 	      JMP	FinishScanLoop
   1009  f48c
   1010  f48c							;main scanline loop...
   1011  f48c				   ScanLoop
   1012  f48c		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1013  f48e
   1014  f48e							;Start of next line!			
   1015  f48e				   DrawCache		;63 Is the last line going to the top of the next frame?
   1016  f48e		       a5 81		      LDA	PF0Cache	;3
   1017  f490		       85 0d		      STA	PF0	;3
   1018  f492
   1019  f492		       a5 80		      LDA	GRP0Cache	;3
   1020  f494		       85 1b		      STA	GRP0	;3
   1021  f496
   1022  f496		       a5 84		      LDA	GRP1Cache	;3
   1023  f498		       85 1c		      STA	GRP1	;3
   1024  f49a
   1025  f49a		       a5 86		      LDA	ENAM0Cache	;3
   1026  f49c		       85 1d		      STA	ENAM0	;3
   1027  f49e
   1028  f49e		       a5 85		      LDA	ENABLCache	;3
   1029  f4a0		       85 1f		      STA	ENABL	;3
   1030  f4a2
   1031  f4a2		       a5 87		      LDA	ENAM1Cache	;3
   1032  f4a4		       85 1e		      STA	ENAM1	;3
   1033  f4a6
   1034  f4a6		       a5 83		      LDA	PF2Cache	;3
   1035  f4a8		       85 0f		      STA	PF2	;3
   1036  f4aa
   1037  f4aa		       a9 00		      LDA	#0	;2
   1038  f4ac		       85 0d		      STA	PF0	;3
   1039  f4ae		       85 84		      STA	GRP1Cache	;3
   1040  f4b0		       85 85		      STA	ENABLCache	;3
   1041  f4b2		       85 86		      STA	ENAM0Cache	;3
   1042  f4b4		       85 87		      STA	ENAM1Cache	; 3
   1043  f4b6							;STA GRP0Cache
   1044  f4b6		       85 0f		      STA	PF2	;3
   1045  f4b8
   1046  f4b8				   DrawCar0
   1047  f4b8		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1048  f4ba		       b0 04		      BCS	SkipDrawCar	;2
   1049  f4bc		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1050  f4be		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1051  f4c0				   SkipDrawCar
   1052  f4c0
   1053  f4c0							;BEQ DrawTraffic3
   1054  f4c0				   DrawTraffic1 		; 33
   1055  f4c0		       98		      TYA		; 2
   1056  f4c1		       18		      CLC		; 2 
   1057  f4c2		       65 95		      ADC	TrafficOffset1 + 1	;3
   1058  f4c4		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1059  f4c6		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1060  f4c8		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1061  f4ca		       4c cf f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1062  f4cd				   EorOffsetWithCarry
   1063  f4cd		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1064  f4cf				   AfterEorOffsetWithCarry		;17
   1065  f4cf		       aa		      TAX		;2
   1066  f4d0		       bd 00 fe 	      LDA	AesTable,X	; 4
   1067  f4d3		       c5 be		      CMP	TrafficChance	;3
   1068  f4d5		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1069  f4d7		       a9 ff		      LDA	#$FF	;2
   1070  f4d9		       85 86		      STA	ENAM0Cache	;3
   1071  f4db				   FinishDrawTraffic1
   1072  f4db
   1073  f4db				   DrawTraffic2 		; 33
   1074  f4db		       98		      TYA		; 2
   1075  f4dc		       18		      CLC		; 2 
   1076  f4dd		       65 99		      ADC	TrafficOffset2 + 1	;3
   1077  f4df		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1078  f4e1		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1079  f4e3		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1080  f4e5		       4c ea f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1081  f4e8				   EorOffsetWithCarry2
   1082  f4e8		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1083  f4ea				   AfterEorOffsetWithCarry2		;17
   1084  f4ea		       aa		      TAX		;2
   1085  f4eb		       bd 00 fe 	      LDA	AesTable,X	; 4
   1086  f4ee		       c5 be		      CMP	TrafficChance	;3
   1087  f4f0		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1088  f4f2		       a9 02		      LDA	#%00000010	;2
   1089  f4f4		       85 85		      STA	ENABLCache	;3
   1090  f4f6				   FinishDrawTraffic2
   1091  f4f6
   1092  f4f6							;STA WSYNC ;65 / 137
   1093  f4f6
   1094  f4f6							; LDA Tmp0 ; Flicker this line if drawing car
   1095  f4f6							; BEQ FinishDrawTraffic4
   1096  f4f6				   DrawTraffic3 		; 33
   1097  f4f6		       98		      TYA		; 2
   1098  f4f7		       18		      CLC		; 2 
   1099  f4f8		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1100  f4fa		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1101  f4fc		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1102  f4fe		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1103  f500		       4c 05 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1104  f503				   EorOffsetWithCarry3
   1105  f503		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1106  f505				   AfterEorOffsetWithCarry3		;17
   1107  f505		       aa		      TAX		;2
   1108  f506		       bd 00 fe 	      LDA	AesTable,X	; 4
   1109  f509		       c5 be		      CMP	TrafficChance	;3
   1110  f50b		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1111  f50d		       a9 02		      LDA	#%00000010	;2
   1112  f50f		       85 87		      STA	ENAM1Cache
   1113  f511				   FinishDrawTraffic3
   1114  f511
   1115  f511
   1116  f511				   DrawOponent		;26
   1117  f511		       84 b0		      STY	Tmp0	;3
   1118  f513		       a4 cf		      LDY	OpponentLine	;3
   1119  f515		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1120  f517		       b0 0b		      BCS	SkipDrawOpponent	;2
   1121  f519				   DrawOpponent
   1122  f519		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1123  f51b		       85 84		      STA	GRP1Cache	;3
   1124  f51d		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1125  f51f		       a4 b0		      LDY	Tmp0	;3
   1126  f521		       4c 35 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1127  f524				   SkipDrawOpponent
   1128  f524		       c6 cf		      DEC	OpponentLine	;5
   1129  f526		       a4 b0		      LDY	Tmp0	;3
   1130  f528
   1131  f528				   DrawTraffic0 		; 21 2pe
   1132  f528		       98		      TYA		; 2
   1133  f529		       18		      CLC		; 2 
   1134  f52a		       65 91		      ADC	TrafficOffset0 + 1	;3
   1135  f52c		       29 08		      AND	#%00001000	;2
   1136  f52e		       f0 05		      BEQ	HasNoBorderP0	;3
   1137  f530				   HasBorderP0
   1138  f530		       a9 70		      LDA	#%01110000	; 2
   1139  f532		       4c 37 f5 	      JMP	StoreBorderP0	; 3
   1140  f535				   HasNoBorderP0
   1141  f535		       a9 00		      LDA	#0	; 2
   1142  f537				   StoreBorderP0
   1143  f537		       85 81		      STA	PF0Cache	; 3
   1144  f539		       85 83		      STA	PF2Cache	; 3
   1145  f53b
   1146  f53b				   SkipDrawTraffic0
   1147  f53b
   1148  f53b				   WhileScanLoop
   1149  f53b		       88		      DEY		;2
   1150  f53c		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1151  f53e		       4c 8c f4 	      JMP	ScanLoop	;3
   1152  f541				   FinishScanLoop		; 7 209 of 222
   1153  f541
   1154  f541		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1155  f543		       20 91 f6 	      JSR	LoadAll
   1156  f546		       85 02		      STA	WSYNC	; do stuff!
   1157  f548		       85 02		      STA	WSYNC
   1158  f54a		       85 02		      STA	WSYNC
   1159  f54c							;42 cycles to use here
   1160  f54c
   1161  f54c				   PrepareOverscan
   1162  f54c		       a9 02		      LDA	#2
   1163  f54e		       85 02		      STA	WSYNC
   1164  f550		       85 01		      STA	VBLANK
   1165  f552
   1166  f552		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1167  f554		       8d 96 02 	      STA	TIM64T
   1168  f557
   1169  f557				   LeftSound		;41
   1170  f557		       a5 b8		      LDA	CountdownTimer	;3
   1171  f559		       f0 1b		      BEQ	EngineOff	;2
   1172  f55b		       a6 d5		      LDX	Gear
   1173  f55d		       a5 f0		      LDA	Player0SpeedL	;3
   1174  f55f		       4a		      LSR		;2
   1175  f560		       4a		      LSR		;2
   1176  f561		       4a		      LSR		;2
   1177  f562		       29 0f		      AND	#%00001111	;2
   1178  f564		       85 b0		      STA	Tmp0	;3
   1179  f566		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1180  f569		       38		      SEC		;2
   1181  f56a		       e5 b0		      SBC	Tmp0	;3
   1182  f56c		       85 17		      STA	AUDF0	;3
   1183  f56e		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1184  f571		       85 15		      STA	AUDC0	;3
   1185  f573		       4c 7a f5 	      JMP	EndLeftSound	;3
   1186  f576				   EngineOff
   1187  f576		       a9 00		      LDA	#0
   1188  f578		       85 15		      STA	AUDC0
   1189  f57a
   1190  f57a				   EndLeftSound
   1191  f57a
   1192  f57a
   1193  f57a				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1194  f57a		       a5 c9		      LDA	ScoreFontColor	;3
   1195  f57c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1196  f57e		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1197  f580		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1198  f582		       f0 29		      BEQ	PlayCheckpoint	;2
   1199  f584		       a5 8e		      LDA	CollisionCounter	;3
   1200  f586		       c9 e0		      CMP	#$E0	;2
   1201  f588		       b0 14		      BCS	PlayColision	;2
   1202  f58a		       a5 cd		      LDA	NextCheckpoint	;3
   1203  f58c		       38		      SEC		;2
   1204  f58d		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1205  f58f		       c9 02		      CMP	#$02	;2
   1206  f591		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1207  f593		       a5 b8		      LDA	CountdownTimer	; 3
   1208  f595		       f0 53		      BEQ	MuteRightSound	;2
   1209  f597		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1210  f599		       90 37		      BCC	PlayWarnTimeEnding	;4
   1211  f59b		       4c ea f5 	      JMP	MuteRightSound	;3
   1212  f59e				   PlayColision
   1213  f59e		       a9 1f		      LDA	#31
   1214  f5a0		       85 18		      STA	AUDF1
   1215  f5a2		       a9 08		      LDA	#8
   1216  f5a4		       85 16		      STA	AUDC1
   1217  f5a6		       a9 08		      LDA	#8
   1218  f5a8		       85 1a		      STA	AUDV1
   1219  f5aa		       4c ee f5 	      JMP	EndRightSound
   1220  f5ad
   1221  f5ad				   PlayCheckpoint
   1222  f5ad		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1223  f5af		       4a		      LSR		;2
   1224  f5b0		       4a		      LSR		;2
   1225  f5b1		       4a		      LSR		;2
   1226  f5b2		       85 18		      STA	AUDF1	;3
   1227  f5b4		       a9 0c		      LDA	#12	;2
   1228  f5b6		       85 16		      STA	AUDC1	;3
   1229  f5b8		       a9 06		      LDA	#6	;2
   1230  f5ba		       85 1a		      STA	AUDV1	;3
   1231  f5bc		       4c ee f5 	      JMP	EndRightSound	;3
   1232  f5bf
   1233  f5bf				   PlayBeforeCheckpoint
   1234  f5bf		       a5 8c		      LDA	FrameCount0	;3
   1235  f5c1		       29 1c		      AND	#%00011100	;2
   1236  f5c3		       09 03		      ORA	#%00000011	;2
   1237  f5c5		       85 18		      STA	AUDF1	;3
   1238  f5c7		       a9 0c		      LDA	#12	;2
   1239  f5c9		       85 16		      STA	AUDC1	;3
   1240  f5cb		       a9 03		      LDA	#3	;2
   1241  f5cd		       85 1a		      STA	AUDV1	;3
   1242  f5cf		       4c ee f5 	      JMP	EndRightSound	;3
   1243  f5d2
   1244  f5d2				   PlayWarnTimeEnding
   1245  f5d2		       a5 8c		      LDA	FrameCount0	;3
   1246  f5d4		       29 04		      AND	#%00000100	;2
   1247  f5d6		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1248  f5d8		       18		      CLC		;2
   1249  f5d9		       a9 0a		      LDA	#10	;2
   1250  f5db		       65 b8		      ADC	CountdownTimer	;2
   1251  f5dd		       85 18		      STA	AUDF1	;3
   1252  f5df		       a9 0c		      LDA	#12	;2
   1253  f5e1		       85 16		      STA	AUDC1	;3
   1254  f5e3		       a9 03		      LDA	#3	;2
   1255  f5e5		       85 1a		      STA	AUDV1	;3
   1256  f5e7		       4c ee f5 	      JMP	EndRightSound	;3
   1257  f5ea
   1258  f5ea				   MuteRightSound
   1259  f5ea		       a9 00		      LDA	#0
   1260  f5ec		       85 1a		      STA	AUDV1
   1261  f5ee				   EndRightSound
   1262  f5ee
   1263  f5ee							;Read Fire Button before, will make it start the game for now.
   1264  f5ee				   StartGame
   1265  f5ee		       a5 0c		      LDA	INPT4	;3
   1266  f5f0		       25 0d		      AND	INPT5	;3 player 
   1267  f5f2		       30 35		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1268  f5f4		       a5 8c		      LDA	FrameCount0
   1269  f5f6		       29 01		      AND	#%00000001
   1270  f5f8		       d0 2f		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1271  f5fa		       a5 bd		      LDA	GameStatus	;3
   1272  f5fc		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1273  f5fe		       d0 29		      BNE	SkipGameStart
   1274  f600		       a5 c6		      LDA	GameMode
   1275  f602		       c9 10		      CMP	#MAX_GAME_MODE
   1276  f604		       d0 0b		      BNE	SetGameRunning
   1277  f606		       a9 00		      LDA	#0
   1278  f608		       85 c6		      STA	GameMode
   1279  f60a		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1280  f60c		       85 bc		      STA	SwitchDebounceCounter
   1281  f60e		       4c 29 f6 	      JMP	SkipGameStart
   1282  f611				   SetGameRunning
   1283  f611		       e6 bd		      INC	GameStatus
   1284  f613		       a9 00		      LDA	#0	;
   1285  f615		       85 8c		      STA	FrameCount0
   1286  f617		       85 8d		      STA	FrameCount1
   1287  f619		       a9 0a		      LDA	#10
   1288  f61b		       85 19		      STA	AUDV0
   1289  f61d		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1290  f61f		       85 c9		      STA	ScoreFontColor
   1291  f621		       85 ca		      STA	OpScoreFontColor
   1292  f623		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1293  f625		       85 cb		      STA	ScoreFontColorHoldChange
   1294  f627		       85 cc		      STA	OpScoreFontColorHoldChange
   1295  f629				   SkipGameStart
   1296  f629
   1297  f629				   ReadSwitches
   1298  f629		       a6 bc		      LDX	SwitchDebounceCounter
   1299  f62b		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1300  f62d		       a9 01		      LDA	#%00000001
   1301  f62f		       2c 82 02 	      BIT	SWCHB
   1302  f632		       d0 07		      BNE	SkipReset
   1303  f634		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1304  f636		       85 bc		      STA	SwitchDebounceCounter
   1305  f638		       4c 68 f6 	      JMP	OverScanWaitBeforeReset
   1306  f63b				   SkipReset
   1307  f63b
   1308  f63b				   GameModeSelect
   1309  f63b		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1310  f63d		       d0 1c		      BNE	SkipGameSelect
   1311  f63f		       20 bd f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1312  f642				   ContinueGameSelect
   1313  f642		       a9 02		      LDA	#%00000010
   1314  f644		       2c 82 02 	      BIT	SWCHB
   1315  f647		       d0 12		      BNE	SkipGameSelect
   1316  f649		       a6 c6		      LDX	GameMode
   1317  f64b		       e0 10		      CPX	#MAX_GAME_MODE
   1318  f64d		       f0 04		      BEQ	ResetGameMode
   1319  f64f		       e8		      INX
   1320  f650		       4c 55 f6 	      JMP	StoreGameMode
   1321  f653				   ResetGameMode
   1322  f653		       a2 00		      LDX	#0
   1323  f655				   StoreGameMode
   1324  f655		       86 c6		      STX	GameMode
   1325  f657		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1326  f659		       85 bc		      STA	SwitchDebounceCounter
   1327  f65b				   SkipGameSelect
   1328  f65b		       4c 60 f6 	      JMP	EndReadSwitches
   1329  f65e				   DecrementSwitchDebounceCounter
   1330  f65e		       c6 bc		      DEC	SwitchDebounceCounter
   1331  f660				   EndReadSwitches
   1332  f660
   1333  f660				   OverScanWait
   1334  f660		       ad 84 02 	      LDA	INTIM
   1335  f663		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1336  f665		       4c cc f0 	      JMP	MainLoop
   1337  f668
   1338  f668				   OverScanWaitBeforeReset
   1339  f668		       ad 84 02 	      LDA	INTIM
   1340  f66b		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1341  f66d		       4c 12 f0 	      JMP	Start
   1342  f670
   1343  f670				   Subroutines
   1344  f670
   1345  f670				   ClearAll		; 52
   1346  f670		       a9 00		      LDA	#0	;2
   1347  f672		       85 1c		      STA	GRP1	;3
   1348  f674		       85 1f		      STA	ENABL	;3
   1349  f676		       85 1d		      STA	ENAM0	;3
   1350  f678		       85 1e		      STA	ENAM1	;3
   1351  f67a		       85 84		      STA	GRP1Cache	;3
   1352  f67c		       85 85		      STA	ENABLCache	;3
   1353  f67e		       85 86		      STA	ENAM0Cache	;3
   1354  f680		       85 87		      STA	ENAM1Cache	;3
   1355  f682
   1356  f682				   ClearPF		; 26
   1357  f682		       a9 00		      LDA	#0	;2
   1358  f684				   ClearPFSkipLDA0
   1359  f684		       85 0d		      STA	PF0	;3
   1360  f686		       85 0e		      STA	PF1	;3
   1361  f688		       85 0f		      STA	PF2	;3	
   1362  f68a		       85 81		      STA	PF0Cache	;3
   1363  f68c		       85 82		      STA	PF1Cache	;3
   1364  f68e		       85 83		      STA	PF2Cache	;3 
   1365  f690		       60		      RTS		;6
   1366  f691				   EndClearAll
   1367  f691
   1368  f691				   LoadAll		; 48
   1369  f691		       a5 81		      LDA	PF0Cache	;3
   1370  f693		       85 0d		      STA	PF0	;3
   1371  f695
   1372  f695		       a5 82		      LDA	PF1Cache	;3
   1373  f697		       85 0e		      STA	PF1	;3
   1374  f699
   1375  f699		       a5 83		      LDA	PF2Cache	;3
   1376  f69b		       85 0f		      STA	PF2	;3
   1377  f69d
   1378  f69d		       a5 84		      LDA	GRP1Cache	;3
   1379  f69f		       85 1c		      STA	GRP1	;3
   1380  f6a1
   1381  f6a1		       a5 85		      LDA	ENABLCache	;3
   1382  f6a3		       85 1f		      STA	ENABL	;3
   1383  f6a5
   1384  f6a5		       a5 86		      LDA	ENAM0Cache	;3
   1385  f6a7		       85 1d		      STA	ENAM0	;3
   1386  f6a9
   1387  f6a9		       a5 87		      LDA	ENAM1Cache	;3
   1388  f6ab		       85 1e		      STA	ENAM1	;3
   1389  f6ad
   1390  f6ad		       60		      RTS		;6
   1391  f6ae				   EndLoadAll
   1392  f6ae
   1393  f6ae				   NextDifficulty
   1394  f6ae		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1395  f6b0		       29 01		      AND	#%00000001
   1396  f6b2		       d0 26		      BNE	CheckRandomDifficulty
   1397  f6b4
   1398  f6b4		       a5 c4		      LDA	CurrentDifficulty
   1399  f6b6		       18		      CLC
   1400  f6b7		       69 01		      ADC	#1
   1401  f6b9		       29 03		      AND	#%00000011	; 0 to 3
   1402  f6bb		       85 c4		      STA	CurrentDifficulty
   1403  f6bd
   1404  f6bd				   ConfigureDifficulty
   1405  f6bd		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1406  f6bf		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1407  f6c2		       85 be		      STA	TrafficChance
   1408  f6c4		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1409  f6c7		       85 c2		      STA	TrafficColor
   1410  f6c9
   1411  f6c9		       a5 c6		      LDA	GameMode	;
   1412  f6cb		       29 01		      AND	#%00000001
   1413  f6cd		       f0 03		      BEQ	UseNextDifficultyTime
   1414  f6cf		       4c d3 f6 	      JMP	StoreDifficultyTime
   1415  f6d2				   UseNextDifficultyTime
   1416  f6d2		       c8		      INY
   1417  f6d3				   StoreDifficultyTime
   1418  f6d3		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1419  f6d6		       85 c0		      STA	CheckpointTime
   1420  f6d8		       85 c1		      STA	OpCheckpointTime
   1421  f6da
   1422  f6da				   CheckRandomDifficulty
   1423  f6da		       a5 c6		      LDA	GameMode
   1424  f6dc		       29 08		      AND	#%00001000	; Random difficulties
   1425  f6de		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1426  f6e0				   RandomDifficulty
   1427  f6e0		       a6 8c		      LDX	FrameCount0
   1428  f6e2		       bd 00 fe 	      LDA	AesTable,X
   1429  f6e5							;EOR TrafficChance, no need, lets make life simple
   1430  f6e5		       29 3f		      AND	#%00111111
   1431  f6e7		       85 be		      STA	TrafficChance
   1432  f6e9		       85 bf		      STA	OpTrafficChance
   1433  f6eb
   1434  f6eb				   ReturnFromNextDifficulty
   1435  f6eb		       60		      RTS
   1436  f6ec				   EndNextDifficulty
   1437  f6ec
   1438  f6ec				   DefaultOffsets
   1439  f6ec		       a9 20		      LDA	#$20
   1440  f6ee		       85 96		      STA	TrafficOffset1 + 2
   1441  f6f0		       85 a6		      STA	OpTrafficOffset1 + 2
   1442  f6f2		       a9 40		      LDA	#$40
   1443  f6f4		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1444  f6f6		       85 aa		      STA	OpTrafficOffset2 + 2
   1445  f6f8		       a9 60		      LDA	#$60
   1446  f6fa		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1447  f6fc		       85 ae		      STA	OpTrafficOffset3 + 2
   1448  f6fe		       a9 80		      LDA	#$80
   1449  f700		       60		      RTS
   1450  f701
   1451  f701				   PrintStaticText		; Preload X with the offset referent to StaticText
   1452  f701		       bd 00 ff 	      LDA	StaticText,X
   1453  f704		       85 d0		      STA	ScoreD0
   1454  f706		       e8		      INX
   1455  f707		       bd 00 ff 	      LDA	StaticText,X
   1456  f70a		       85 d1		      STA	ScoreD1
   1457  f70c		       e8		      INX
   1458  f70d		       bd 00 ff 	      LDA	StaticText,X
   1459  f710		       85 d2		      STA	ScoreD2
   1460  f712		       e8		      INX
   1461  f713		       bd 00 ff 	      LDA	StaticText,X
   1462  f716		       85 d3		      STA	ScoreD3
   1463  f718		       e8		      INX
   1464  f719		       bd 00 ff 	      LDA	StaticText,X
   1465  f71c		       85 d4		      STA	ScoreD4
   1466  f71e		       60		      RTS
   1467  f71f
   1468  f71f				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1469  f71f		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1470  f721		       85 c9		      STA	ScoreFontColor
   1471  f723		       a9 01		      LDA	#1
   1472  f725		       85 cb		      STA	ScoreFontColorHoldChange
   1473  f727
   1474  f727		       a5 8d		      LDA	FrameCount1
   1475  f729		       29 07		      AND	#%00000111
   1476  f72b		       85 b3		      STA	Tmp3
   1477  f72d							;0 is Zelda Name, (default)
   1478  f72d		       a9 01		      LDA	#1
   1479  f72f		       c5 b3		      CMP	Tmp3
   1480  f731		       f0 38		      BEQ	PrintZeldaDateLeft
   1481  f733
   1482  f733		       a9 02		      LDA	#2
   1483  f735		       c5 b3		      CMP	Tmp3
   1484  f737		       f0 23		      BEQ	PrintPolvinhosLeft
   1485  f739
   1486  f739		       a9 03		      LDA	#3
   1487  f73b		       c5 b3		      CMP	Tmp3
   1488  f73d		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1489  f73f
   1490  f73f		       a9 04		      LDA	#4
   1491  f741		       c5 b3		      CMP	Tmp3
   1492  f743		       f0 1c		      BEQ	PrintIvonneLeft
   1493  f745
   1494  f745		       a9 05		      LDA	#5
   1495  f747		       c5 b3		      CMP	Tmp3
   1496  f749		       f0 2a		      BEQ	PrintIvonneDateLeft
   1497  f74b
   1498  f74b		       a9 06		      LDA	#6
   1499  f74d		       c5 b3		      CMP	Tmp3
   1500  f74f		       f0 15		      BEQ	PrintArtLeft
   1501  f751
   1502  f751		       a9 07		      LDA	#7
   1503  f753		       c5 b3		      CMP	Tmp3
   1504  f755		       f0 23		      BEQ	PrintLeonardoLeft
   1505  f757
   1506  f757				   PrintZeldaLeft
   1507  f757		       a2 28		      LDX	#<ZeldaTextLeft
   1508  f759		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1509  f75c				   PrintPolvinhosLeft
   1510  f75c		       a2 3c		      LDX	#<PolvinhosTextLeft
   1511  f75e		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1512  f761				   PrintIvonneLeft
   1513  f761		       a2 50		      LDX	#<IvonneTextLeft
   1514  f763		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1515  f766				   PrintArtLeft
   1516  f766		       a2 64		      LDX	#<PaperArtTextLeft
   1517  f768		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1518  f76b
   1519  f76b				   PrintZeldaDateLeft
   1520  f76b		       a2 32		      LDX	#<ZeldaDateLeft
   1521  f76d		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1522  f770				   PrintPolvinhosDateLeft
   1523  f770		       a2 46		      LDX	#<PolvinhosDateLeft
   1524  f772		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1525  f775				   PrintIvonneDateLeft
   1526  f775		       a2 5a		      LDX	#<IvonneDateLeft
   1527  f777		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1528  f77a				   PrintLeonardoLeft
   1529  f77a		       a2 6e		      LDX	#<LeonardoTextLeft
   1530  f77c		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1531  f77f
   1532  f77f				   ProcessPrintEasterEgg
   1533  f77f		       a5 8c		      LDA	FrameCount0	;3
   1534  f781		       29 01		      AND	#%00000001	;2
   1535  f783		       d0 03		      BNE	TranformIntoRightText
   1536  f785		       4c 8d f7 	      JMP	PrintEasterEggText
   1537  f788				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1538  f788		       8a		      TXA
   1539  f789		       18		      CLC
   1540  f78a		       69 05		      ADC	#HALF_TEXT_SIZE
   1541  f78c		       aa		      TAX
   1542  f78d
   1543  f78d				   PrintEasterEggText
   1544  f78d		       20 01 f7 	      JSR	PrintStaticText
   1545  f790		       60		      RTS
   1546  f791
   1547  f791				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1548  f791		       a2 00		      LDX	#0
   1549  f793		       a0 04		      LDY	#FONT_OFFSET
   1550  f795
   1551  f795				   ScoreLoop		; 20 
   1552  f795		       85 02		      STA	WSYNC	;2
   1553  f797
   1554  f797		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1555  f799		       85 0d		      STA	PF0	;3
   1556  f79b
   1557  f79b		       a5 82		      LDA	PF1Cache	;3
   1558  f79d		       85 0e		      STA	PF1	;3
   1559  f79f
   1560  f79f		       a5 83		      LDA	PF2Cache	;3
   1561  f7a1		       85 0f		      STA	PF2	;3
   1562  f7a3
   1563  f7a3				   DrawScoreD0		; 15
   1564  f7a3		       a6 d0		      LDX	ScoreD0	; 3
   1565  f7a5		       bd 00 fd 	      LDA	Font,X	;4
   1566  f7a8		       85 81		      STA	PF0Cache	;3
   1567  f7aa		       c6 d0		      DEC	ScoreD0	;5
   1568  f7ac
   1569  f7ac				   DrawScoreD1		; 23	
   1570  f7ac		       a6 d1		      LDX	ScoreD1	; 3
   1571  f7ae		       bd 00 fd 	      LDA	Font,X	;4
   1572  f7b1		       0a		      ASL		;2
   1573  f7b2		       0a		      ASL		;2
   1574  f7b3		       0a		      ASL		;2
   1575  f7b4		       0a		      ASL		;2
   1576  f7b5		       85 82		      STA	PF1Cache	;3
   1577  f7b7		       c6 d1		      DEC	ScoreD1	;5
   1578  f7b9
   1579  f7b9				   DrawScoreD2		; 20
   1580  f7b9		       a6 d2		      LDX	ScoreD2	; 3
   1581  f7bb		       bd 00 fd 	      LDA	Font,X	;4
   1582  f7be		       29 0f		      AND	#%00001111	;2
   1583  f7c0		       05 82		      ORA	PF1Cache	;3
   1584  f7c2		       85 82		      STA	PF1Cache	;3
   1585  f7c4		       c6 d2		      DEC	ScoreD2	;5
   1586  f7c6
   1587  f7c6				   DrawScoreD3		; 23
   1588  f7c6		       a6 d3		      LDX	ScoreD3	; 3
   1589  f7c8		       bd 00 fd 	      LDA	Font,X	;4
   1590  f7cb		       4a		      LSR		;2
   1591  f7cc		       4a		      LSR		;2
   1592  f7cd		       4a		      LSR		;2
   1593  f7ce		       4a		      LSR		;2
   1594  f7cf		       85 83		      STA	PF2Cache	;3
   1595  f7d1		       c6 d3		      DEC	ScoreD3	;5
   1596  f7d3
   1597  f7d3				   DrawScoreD4		; 20
   1598  f7d3		       a6 d4		      LDX	ScoreD4	; 3
   1599  f7d5		       bd 00 fd 	      LDA	Font,X	;4
   1600  f7d8		       29 f0		      AND	#%11110000	;2
   1601  f7da		       05 83		      ORA	PF2Cache	;3
   1602  f7dc		       85 83		      STA	PF2Cache	;3
   1603  f7de		       c6 d4		      DEC	ScoreD4	;5
   1604  f7e0
   1605  f7e0
   1606  f7e0		       88		      DEY		;2
   1607  f7e1		       10 b2		      BPL	ScoreLoop	;4
   1608  f7e3
   1609  f7e3		       85 02		      STA	WSYNC
   1610  f7e5		       20 91 f6 	      JSR	LoadAll
   1611  f7e8		       60		      RTS		; 6
   1612  f7e9
   1613  f7e9				   PrintRightDecimalDigits
   1614  f7e9		       b9 00 00 	      LDA	0,Y
   1615  f7ec		       4a		      LSR
   1616  f7ed		       4a		      LSR
   1617  f7ee		       4a		      LSR
   1618  f7ef		       4a		      LSR
   1619  f7f0		       aa		      TAX
   1620  f7f1		       bd be fd 	      LDA	FontLookup,X	;4
   1621  f7f4		       85 d2		      STA	ScoreD2	;3
   1622  f7f6
   1623  f7f6		       b9 00 00 	      LDA	0,Y
   1624  f7f9		       29 0f		      AND	#%00001111
   1625  f7fb		       aa		      TAX
   1626  f7fc		       bd be fd 	      LDA	FontLookup,X	;4
   1627  f7ff		       85 d3		      STA	ScoreD3	;3
   1628  f801
   1629  f801		       c8		      INY
   1630  f802		       b9 00 00 	      LDA	0,Y
   1631  f805		       4a		      LSR
   1632  f806		       4a		      LSR
   1633  f807		       4a		      LSR
   1634  f808		       4a		      LSR
   1635  f809		       aa		      TAX
   1636  f80a		       bd be fd 	      LDA	FontLookup,X	;4
   1637  f80d		       85 d0		      STA	ScoreD0	;3
   1638  f80f
   1639  f80f		       b9 00 00 	      LDA	0,Y
   1640  f812		       29 0f		      AND	#%00001111
   1641  f814		       aa		      TAX
   1642  f815		       bd be fd 	      LDA	FontLookup,X	;4
   1643  f818		       85 d1		      STA	ScoreD1	;3
   1644  f81a
   1645  f81a		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1646  f81c		       85 d4		      STA	ScoreD4
   1647  f81e		       60		      RTS
   1648  f81f
   1649  f81f				   PrintLastLeftDecimalDigits
   1650  f81f		       b9 00 00 	      LDA	0,Y
   1651  f822		       4a		      LSR
   1652  f823		       4a		      LSR
   1653  f824		       4a		      LSR
   1654  f825		       4a		      LSR
   1655  f826		       aa		      TAX
   1656  f827		       bd be fd 	      LDA	FontLookup,X	;4
   1657  f82a		       85 d3		      STA	ScoreD3	;3
   1658  f82c		       b9 00 00 	      LDA	0,Y
   1659  f82f		       29 0f		      AND	#%00001111
   1660  f831		       aa		      TAX
   1661  f832		       bd be fd 	      LDA	FontLookup,X	;4
   1662  f835		       85 d4		      STA	ScoreD4	;3
   1663  f837		       60		      RTS
   1664  f838
   1665  f838				   PrintZerosLeft
   1666  f838		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1667  f83a		       85 d2		      STA	ScoreD2
   1668  f83c		       85 d3		      STA	ScoreD3
   1669  f83e		       85 d4		      STA	ScoreD4
   1670  f840		       60		      RTS
   1671  f841
   1672  f841				   DrawGameOverScoreLine
   1673  f841		       85 02		      STA	WSYNC
   1674  f843		       20 91 f7 	      JSR	PrintScore
   1675  f846		       85 02		      STA	WSYNC
   1676  f848		       85 02		      STA	WSYNC
   1677  f84a		       20 82 f6 	      JSR	ClearPF
   1678  f84d		       60		      RTS
   1679  f84e
   1680  f84e				   DrawGameOverScreenLeft
   1681  f84e		       85 02		      STA	WSYNC
   1682  f850		       20 82 f6 	      JSR	ClearPF
   1683  f853
   1684  f853				   DrawGlideTimerLeft
   1685  f853		       20 15 f9 	      JSR	Sleep8Lines
   1686  f856		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1687  f858		       85 06		      STA	COLUP0
   1688  f85a		       85 02		      STA	WSYNC
   1689  f85c		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1690  f85e		       85 d0		      STA	ScoreD0
   1691  f860		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1692  f862		       85 d1		      STA	ScoreD1
   1693  f864		       20 38 f8 	      JSR	PrintZerosLeft
   1694  f867		       20 41 f8 	      JSR	DrawGameOverScoreLine
   1695  f86a
   1696  f86a				   DrawHitCountLeft
   1697  f86a		       20 15 f9 	      JSR	Sleep8Lines
   1698  f86d		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1699  f86f		       85 06		      STA	COLUP0
   1700  f871		       85 02		      STA	WSYNC
   1701  f873		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1702  f875		       85 d0		      STA	ScoreD0
   1703  f877		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1704  f879		       85 d1		      STA	ScoreD1
   1705  f87b		       20 38 f8 	      JSR	PrintZerosLeft
   1706  f87e		       20 41 f8 	      JSR	DrawGameOverScoreLine
   1707  f881
   1708  f881				   DrawCheckpointCountLeft
   1709  f881		       20 15 f9 	      JSR	Sleep8Lines
   1710  f884		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1711  f886		       85 06		      STA	COLUP0
   1712  f888		       85 02		      STA	WSYNC
   1713  f88a		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1714  f88c		       85 d0		      STA	ScoreD0
   1715  f88e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1716  f890		       85 d1		      STA	ScoreD1
   1717  f892		       20 38 f8 	      JSR	PrintZerosLeft
   1718  f895		       20 41 f8 	      JSR	DrawGameOverScoreLine
   1719  f898
   1720  f898				   DrawGameVersionLeft
   1721  f898		       20 15 f9 	      JSR	Sleep8Lines
   1722  f89b		       a9 49		      LDA	#VERSION_COLOR
   1723  f89d		       85 06		      STA	COLUP0
   1724  f89f
   1725  f89f		       a5 c6		      LDA	GameMode
   1726  f8a1		       aa		      TAX
   1727  f8a2		       bd be fd 	      LDA	FontLookup,X	;4
   1728  f8a5		       85 d0		      STA	ScoreD0	;3
   1729  f8a7
   1730  f8a7		       a5 c7		      LDA	CurrentCarId
   1731  f8a9		       aa		      TAX
   1732  f8aa		       bd be fd 	      LDA	FontLookup,X	;4
   1733  f8ad		       85 d1		      STA	ScoreD1	;3
   1734  f8af
   1735  f8af		       a5 db		      LDA	StartSWCHB
   1736  f8b1		       29 40		      AND	#%01000000	; P0 difficulty
   1737  f8b3		       49 40		      EOR	#%01000000	; Reverse bytes
   1738  f8b5		       2a		      ROL
   1739  f8b6		       2a		      ROL
   1740  f8b7		       2a		      ROL
   1741  f8b8		       18		      CLC
   1742  f8b9		       69 0a		      ADC	#10
   1743  f8bb		       aa		      TAX
   1744  f8bc		       bd be fd 	      LDA	FontLookup,X	;4
   1745  f8bf		       85 d2		      STA	ScoreD2	;3
   1746  f8c1
   1747  f8c1		       a5 db		      LDA	StartSWCHB
   1748  f8c3		       29 80		      AND	#%10000000	; P0 difficulty
   1749  f8c5		       49 80		      EOR	#%10000000	; Reverse bytes
   1750  f8c7		       2a		      ROL
   1751  f8c8		       2a		      ROL
   1752  f8c9		       18		      CLC
   1753  f8ca		       69 0a		      ADC	#10
   1754  f8cc		       aa		      TAX
   1755  f8cd		       bd be fd 	      LDA	FontLookup,X	;4
   1756  f8d0		       85 d3		      STA	ScoreD3	;3
   1757  f8d2
   1758  f8d2		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1759  f8d4		       85 d4		      STA	ScoreD4
   1760  f8d6
   1761  f8d6		       20 41 f8 	      JSR	DrawGameOverScoreLine
   1762  f8d9
   1763  f8d9		       4c f2 f8 	      JMP	FinalizeDrawGameOver
   1764  f8dc
   1765  f8dc				   DrawGameOverScreenRight
   1766  f8dc		       85 02		      STA	WSYNC
   1767  f8de		       20 82 f6 	      JSR	ClearPF
   1768  f8e1
   1769  f8e1				   DrawVersionRight
   1770  f8e1		       20 15 f9 	      JSR	Sleep8Lines
   1771  f8e4		       a9 49		      LDA	#VERSION_COLOR
   1772  f8e6		       85 07		      STA	COLUP1
   1773  f8e8		       85 02		      STA	WSYNC
   1774  f8ea		       a2 78		      LDX	#<VersionText
   1775  f8ec		       20 01 f7 	      JSR	PrintStaticText
   1776  f8ef		       20 41 f8 	      JSR	DrawGameOverScoreLine
   1777  f8f2
   1778  f8f2				   FinalizeDrawGameOver
   1779  f8f2		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1780  f8f4		       85 c9		      STA	ScoreFontColor
   1781  f8f6		       20 0c f9 	      JSR	Sleep4Lines
   1782  f8f9		       20 1c f9 	      JSR	Sleep32Lines
   1783  f8fc		       20 1c f9 	      JSR	Sleep32Lines
   1784  f8ff		       4c 4c f5 	      JMP	PrepareOverscan
   1785  f902
   1786  f902				   WaitForVblankEnd
   1787  f902		       ad 84 02 	      LDA	INTIM
   1788  f905		       d0 fb		      BNE	WaitForVblankEnd
   1789  f907		       85 02		      STA	WSYNC
   1790  f909		       85 01		      STA	VBLANK
   1791  f90b		       60		      RTS
   1792  f90c
   1793  f90c				   Sleep4Lines
   1794  f90c		       85 02		      STA	WSYNC
   1795  f90e		       85 02		      STA	WSYNC
   1796  f910		       85 02		      STA	WSYNC
   1797  f912		       85 02		      STA	WSYNC
   1798  f914		       60		      RTS
   1799  f915
   1800  f915				   Sleep8Lines
   1801  f915		       20 0c f9 	      JSR	Sleep4Lines
   1802  f918		       20 0c f9 	      JSR	Sleep4Lines
   1803  f91b		       60		      RTS
   1804  f91c
   1805  f91c				   Sleep32Lines
   1806  f91c		       20 15 f9 	      JSR	Sleep8Lines
   1807  f91f		       20 15 f9 	      JSR	Sleep8Lines
   1808  f922		       20 15 f9 	      JSR	Sleep8Lines
   1809  f925		       20 15 f9 	      JSR	Sleep8Lines
   1810  f928		       60		      RTS
   1811  f929
   1812  f929				   ConfigureCarSprites
   1813  f929		       a5 8c		      LDA	FrameCount0
   1814  f92b		       29 01		      AND	#%00000001
   1815  f92d		       d0 0b		      BNE	LoadForRightScreenSprites
   1816  f92f				   LoadForLeftScreenSprites
   1817  f92f		       a5 c7		      LDA	CurrentCarId
   1818  f931		       85 b0		      STA	Tmp0
   1819  f933		       a5 c8		      LDA	OpCurrentCarId
   1820  f935		       85 b1		      STA	Tmp1
   1821  f937		       4c 42 f9 	      JMP	LoadCarSpritesFromIds
   1822  f93a				   LoadForRightScreenSprites
   1823  f93a		       a5 c7		      LDA	CurrentCarId
   1824  f93c		       85 b1		      STA	Tmp1
   1825  f93e		       a5 c8		      LDA	OpCurrentCarId
   1826  f940		       85 b0		      STA	Tmp0
   1827  f942
   1828  f942				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1829  f942		       a4 b0		      LDY	Tmp0
   1830  f944		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1831  f947		       85 d7		      STA	CarSpritePointerL
   1832  f949		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1833  f94c		       85 d8		      STA	CarSpritePointerH
   1834  f94e				   ConfigureOpponentCarSprite
   1835  f94e		       a4 b1		      LDY	Tmp1
   1836  f950		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1837  f953		       85 d9		      STA	EnemyCarSpritePointerL
   1838  f955		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1839  f958		       85 da		      STA	EnemyCarSpritePointerH
   1840  f95a		       60		      RTS
   1841  f95b
   1842  f95b							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1843  f95b							;X player 0 or 1
   1844  f95b				   SelectCarWithDpad
   1845  f95b		       a0 03		      LDY	#3
   1846  f95d				   SelectCarWithDpadLoop
   1847  f95d		       ad 80 02 	      LDA	SWCHA
   1848  f960		       25 b0		      AND	Tmp0
   1849  f962		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1850  f964		       98		      TYA
   1851  f965		       95 c7		      STA	CurrentCarId,X
   1852  f967				   ContinueSelectCarWithDpadLoop
   1853  f967		       46 b0		      LSR	Tmp0
   1854  f969		       88		      DEY
   1855  f96a		       10 f1		      BPL	SelectCarWithDpadLoop
   1856  f96c		       60		      RTS
   1857  f96d
   1858  f96d							; Movement and colision are binded because the car must be moved after duplicate size.
   1859  f96d							; Use X for the player
   1860  f96d							; Tmp2 Traffic colision result
   1861  f96d							; Tmp3 Opponent Colision result (Not implemented)
   1862  f96d				   TestCollisionAndMove
   1863  f96d							; Until store the movemnt, Y contains the value to be stored.
   1864  f96d							; see if player0 colides with the rest
   1865  f96d		       a5 b2		      LDA	Tmp2
   1866  f96f		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1867  f971		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1868  f973		       d0 25		      BNE	NoCollision
   1869  f975		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1870  f977		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1871  f979		       f0 1f		      BEQ	NoCollision
   1872  f97b		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1873  f97d		       f0 1b		      BEQ	NoCollision
   1874  f97f		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1875  f981		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1876  f983		       b5 f2		      LDA	Player0SpeedH,X
   1877  f985		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1878  f987		       a9 10		      LDA	#COLLISION_SPEED_L
   1879  f989		       d5 f0		      CMP	Player0SpeedL,X
   1880  f98b		       b0 04		      BCS	SkipSetColisionSpeedL
   1881  f98d				   SetColisionSpeedL
   1882  f98d		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1883  f98f		       95 f0		      STA	Player0SpeedL,X
   1884  f991				   SkipSetColisionSpeedL
   1885  f991		       a9 00		      LDA	#0
   1886  f993		       95 f2		      STA	Player0SpeedH,X
   1887  f995		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1888  f997		       4c ea f9 	      JMP	StoreHMove	; We keep position consistent
   1889  f99a				   NoCollision
   1890  f99a
   1891  f99a				   DecrementCollision
   1892  f99a		       b5 8e		      LDA	CollisionCounter,X
   1893  f99c		       f0 06		      BEQ	FinishDecrementCollision
   1894  f99e		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1895  f9a0		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1896  f9a2		       d6 8e		      DEC	CollisionCounter,X
   1897  f9a4				   FinishDecrementCollision
   1898  f9a4
   1899  f9a4				   ResetPlayerSize
   1900  f9a4		       d0 04		      BNE	FinishResetPlayerSize
   1901  f9a6		       a9 30		      LDA	#%00110000
   1902  f9a8		       95 04		      STA	NUSIZ0,X	;
   1903  f9aa				   FinishResetPlayerSize
   1904  f9aa
   1905  f9aa				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1906  f9aa		       b5 8e		      LDA	CollisionCounter,X
   1907  f9ac		       c9 01		      CMP	#1	; Last frame before reset
   1908  f9ae		       d0 05		      BNE	SkipResetPlayerPosition
   1909  f9b0		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1910  f9b2		       4c ea f9 	      JMP	StoreHMove
   1911  f9b5				   SkipResetPlayerPosition
   1912  f9b5
   1913  f9b5				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1914  f9b5		       b5 c7		      LDA	CurrentCarId,X
   1915  f9b7		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1916  f9b9		       d0 08		      BNE	PrepareReadXAxis
   1917  f9bb		       a0 00		      LDY	#0
   1918  f9bd		       a5 8c		      LDA	FrameCount0
   1919  f9bf		       29 01		      AND	#DRAGSTER_TURN_MASK
   1920  f9c1		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1921  f9c3
   1922  f9c3				   PrepareReadXAxis
   1923  f9c3		       a0 00		      LDY	#0
   1924  f9c5		       b5 b6		      LDA	Player0X,X
   1925  f9c7				   BeginReadLeft
   1926  f9c7		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1927  f9c9		       bd d1 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1928  f9cc		       2c 80 02 	      BIT	SWCHA
   1929  f9cf		       d0 07		      BNE	SkipMoveLeft
   1930  f9d1		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1931  f9d3		       d6 b6		      DEC	Player0X,X
   1932  f9d5		       4c ea f9 	      JMP	StoreHMove	; Cannot move left and right...
   1933  f9d8				   SkipMoveLeft
   1934  f9d8				   BeginReadRight
   1935  f9d8		       b5 b6		      LDA	Player0X,X
   1936  f9da		       c9 2c		      CMP	#PLAYER_MAX_X
   1937  f9dc		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1938  f9de		       bd d3 fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1939  f9e1		       2c 80 02 	      BIT	SWCHA
   1940  f9e4		       d0 04		      BNE	SkipMoveRight
   1941  f9e6		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1942  f9e8		       f6 b6		      INC	Player0X,X
   1943  f9ea				   SkipMoveRight
   1944  f9ea				   StoreHMove
   1945  f9ea		       94 20		      STY	HMP0,X	;set the move for player 0
   1946  f9ec
   1947  f9ec				   ClearCollision
   1948  f9ec		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1949  f9ee		       60		      RTS
   1950  f9ef
   1951  f9ef							; X Traffic offset 4 bits each lane, 4 lanes per player
   1952  f9ef							; Tmp3 Max X offset
   1953  f9ef							; Tmp4 Max Player Speed L
   1954  f9ef							; Tmp5 Max Player Speed H
   1955  f9ef				   UpdateOffsets
   1956  f9ef		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1957  f9f1		       a5 c6		      LDA	GameMode
   1958  f9f3		       29 04		      AND	#%00000100	; GameModes with high delta
   1959  f9f5		       f0 02		      BEQ	UpdateOffsetsLoop
   1960  f9f7		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1961  f9f9
   1962  f9f9				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1963  f9f9		       38		      SEC
   1964  f9fa		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1965  f9fc		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1966  f9ff		       85 b0		      STA	Tmp0
   1967  fa01		       c8		      INY
   1968  fa02		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1969  fa04		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1970  fa07		       85 b1		      STA	Tmp1
   1971  fa09		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1972  fa0b		       e9 00		      SBC	#0
   1973  fa0d		       85 b2		      STA	Tmp2
   1974  fa0f
   1975  fa0f				   AddsTheResult
   1976  fa0f		       18		      CLC
   1977  fa10		       a5 b0		      LDA	Tmp0
   1978  fa12		       75 90		      ADC	TrafficOffset0,X
   1979  fa14		       95 90		      STA	TrafficOffset0,X
   1980  fa16		       e8		      INX
   1981  fa17		       a5 b1		      LDA	Tmp1
   1982  fa19		       75 90		      ADC	TrafficOffset0,X
   1983  fa1b		       95 90		      STA	TrafficOffset0,X
   1984  fa1d		       e8		      INX
   1985  fa1e		       a5 b2		      LDA	Tmp2	; Carry
   1986  fa20		       75 90		      ADC	TrafficOffset0,X
   1987  fa22		       95 90		      STA	TrafficOffset0,X
   1988  fa24		       90 0f		      BCC	CalculateOffsetCache
   1989  fa26				   CalculatePlayer0Msb
   1990  fa26		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1991  fa28		       d0 05		      BNE	CalculatePlayer1Msb
   1992  fa2a		       e6 ba		      INC	Traffic0Msb
   1993  fa2c		       4c 35 fa 	      JMP	CalculateOffsetCache
   1994  fa2f				   CalculatePlayer1Msb
   1995  fa2f		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1996  fa31		       d0 02		      BNE	CalculateOffsetCache
   1997  fa33		       e6 bb		      INC	OpTraffic0Msb
   1998  fa35
   1999  fa35				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   2000  fa35		       e8		      INX
   2001  fa36		       38		      SEC
   2002  fa37		       69 00		      ADC	#0	;Increment by one
   2003  fa39		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   2004  fa3b
   2005  fa3b				   PrepareNextUpdateLoop
   2006  fa3b		       c8		      INY
   2007  fa3c		       e8		      INX
   2008  fa3d		       e4 b3		      CPX	Tmp3	; Max X offset
   2009  fa3f		       d0 b8		      BNE	UpdateOffsetsLoop
   2010  fa41		       60		      RTS
   2011  fa42
   2012  fa42							; X Player 0 or 1
   2013  fa42				   ProcessSpeed
   2014  fa42				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2015  fa42		       a9 00		      LDA	#0
   2016  fa44		       85 b0		      STA	Tmp0	; Break speed
   2017  fa46		       b5 b8		      LDA	CountdownTimer,X
   2018  fa48		       d0 0d		      BNE	Break
   2019  fa4a		       b4 c7		      LDY	CurrentCarId,X
   2020  fa4c		       a5 8c		      LDA	FrameCount0
   2021  fa4e		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2022  fa51		       d0 04		      BNE	Break
   2023  fa53		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2024  fa55		       85 b0		      STA	Tmp0
   2025  fa57
   2026  fa57				   Break
   2027  fa57		       bd cf fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2028  fa5a		       2c 80 02 	      BIT	SWCHA
   2029  fa5d		       d0 12		      BNE	BreakNonZero
   2030  fa5f		       b5 0c		      LDA	INPT4,X	;3
   2031  fa61		       10 0a		      BPL	BreakWhileAccelerating
   2032  fa63		       b4 d5		      LDY	Gear,X
   2033  fa65		       b9 e9 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2034  fa68		       85 b0		      STA	Tmp0
   2035  fa6a		       4c 71 fa 	      JMP	BreakNonZero
   2036  fa6d				   BreakWhileAccelerating		; Allow better control while breaking.
   2037  fa6d		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2038  fa6f		       85 b0		      STA	Tmp0
   2039  fa71
   2040  fa71				   BreakNonZero
   2041  fa71		       a5 b0		      LDA	Tmp0
   2042  fa73		       f0 29		      BEQ	SkipBreak
   2043  fa75
   2044  fa75				   DecreaseSpeed
   2045  fa75		       38		      SEC
   2046  fa76		       b5 f0		      LDA	Player0SpeedL,X
   2047  fa78		       e5 b0		      SBC	Tmp0
   2048  fa7a		       95 f0		      STA	Player0SpeedL,X
   2049  fa7c		       b5 f2		      LDA	Player0SpeedH,X
   2050  fa7e		       e9 00		      SBC	#0
   2051  fa80		       95 f2		      STA	Player0SpeedH,X
   2052  fa82
   2053  fa82				   CheckMinSpeed
   2054  fa82		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2055  fa84		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2056  fa86		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2057  fa88		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2058  fa8a
   2059  fa8a				   CompareLBreakSpeed
   2060  fa8a		       b5 f0		      LDA	Player0SpeedL,X
   2061  fa8c		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2062  fa8e		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2063  fa90		       4c 9b fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2064  fa93
   2065  fa93				   ResetMinSpeed
   2066  fa93		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2067  fa95		       95 f2		      STA	Player0SpeedH,X
   2068  fa97		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2069  fa99		       95 f0		      STA	Player0SpeedL,X
   2070  fa9b
   2071  fa9b				   SkipAccelerateIfBreaking
   2072  fa9b		       4c e4 fa 	      JMP	SkipAccelerate
   2073  fa9e				   SkipBreak
   2074  fa9e
   2075  fa9e				   Acelerates
   2076  fa9e		       b5 b8		      LDA	CountdownTimer,X
   2077  faa0		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2078  faa2
   2079  faa2				   ContinueAccelerateTest
   2080  faa2		       b5 0c		      LDA	INPT4,X	;3
   2081  faa4		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2082  faa6		       bd cd fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2083  faa9		       2c 80 02 	      BIT	SWCHA
   2084  faac		       d0 36		      BNE	SkipAccelerate
   2085  faae
   2086  faae				   IncreaseCarSpeed
   2087  faae		       a9 02		      LDA	#2
   2088  fab0		       85 b0		      STA	Tmp0	; Loop control
   2089  fab2		       b4 c7		      LDY	CurrentCarId,X
   2090  fab4				   IncreaseCarSpeedLoop
   2091  fab4							;Adds speed
   2092  fab4		       18		      CLC
   2093  fab5		       b5 dc		      LDA	AccelerateBuffer,X
   2094  fab7		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
   2095  faba		       95 dc		      STA	AccelerateBuffer,X
   2096  fabc		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2097  fabe		       f6 f0		      INC	Player0SpeedL,X
   2098  fac0		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2099  fac2		       f6 f2		      INC	Player0SpeedH,X
   2100  fac4				   ContinueIncreaseSpeedLoop
   2101  fac4		       c6 b0		      DEC	Tmp0
   2102  fac6		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2103  fac8				   SkipIncreaseCarSpeed
   2104  fac8
   2105  fac8				   CheckIfAlreadyMaxSpeed
   2106  fac8		       b5 f2		      LDA	Player0SpeedH,X
   2107  faca		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2108  facc		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2109  face		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2110  fad0							;High bit is max, compare the low
   2111  fad0		       b4 c7		      LDY	CurrentCarId,X
   2112  fad2		       b5 f0		      LDA	Player0SpeedL,X
   2113  fad4		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
   2114  fad7		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2115  fad9							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2116  fad9
   2117  fad9				   ResetToMaxSpeed		; Speed is more, or is already max
   2118  fad9		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2119  fadb		       95 f2		      STA	Player0SpeedH,X
   2120  fadd		       b4 c7		      LDY	CurrentCarId,X
   2121  fadf		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
   2122  fae2		       95 f0		      STA	Player0SpeedL,X
   2123  fae4				   SkipAccelerate
   2124  fae4		       60		      RTS
   2125  fae5
   2126  fae5				   EverySecond		; 64 frames to be more precise
   2127  fae5		       a9 3f		      LDA	#%00111111
   2128  fae7		       25 8c		      AND	FrameCount0
   2129  fae9		       d0 06		      BNE	SkipEverySecondAction
   2130  faeb		       d5 b8		      CMP	CountdownTimer,X
   2131  faed		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2132  faef		       d6 b8		      DEC	CountdownTimer,X
   2133  faf1				   SkipEverySecondAction
   2134  faf1		       60		      RTS
   2135  faf2
   2136  faf2							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2137  fc00					      org	$FC00
   2138  fc00				   QrCode1
   2139  fc00		       1f		      .byte.b	#%00011111
   2140  fc01		       10		      .byte.b	#%00010000
   2141  fc02		       17		      .byte.b	#%00010111
   2142  fc03		       17		      .byte.b	#%00010111
   2143  fc04		       17		      .byte.b	#%00010111
   2144  fc05		       10		      .byte.b	#%00010000
   2145  fc06		       1f		      .byte.b	#%00011111
   2146  fc07		       00		      .byte.b	#%00000000
   2147  fc08		       17		      .byte.b	#%00010111
   2148  fc09		       10		      .byte.b	#%00010000
   2149  fc0a		       1d		      .byte.b	#%00011101
   2150  fc0b		       16		      .byte.b	#%00010110
   2151  fc0c		       03		      .byte.b	#%00000011
   2152  fc0d		       19		      .byte.b	#%00011001
   2153  fc0e		       13		      .byte.b	#%00010011
   2154  fc0f		       1c		      .byte.b	#%00011100
   2155  fc10		       0b		      .byte.b	#%00001011
   2156  fc11		       00		      .byte.b	#%00000000
   2157  fc12		       1f		      .byte.b	#%00011111
   2158  fc13		       10		      .byte.b	#%00010000
   2159  fc14		       17		      .byte.b	#%00010111
   2160  fc15		       17		      .byte.b	#%00010111
   2161  fc16		       17		      .byte.b	#%00010111
   2162  fc17		       10		      .byte.b	#%00010000
   2163  fc18		       1f		      .byte.b	#%00011111
   2164  fc19
   2165  fc19				   QrCode2
   2166  fc19		       c3		      .byte.b	#%11000011
   2167  fc1a		       9a		      .byte.b	#%10011010
   2168  fc1b		       82		      .byte.b	#%10000010
   2169  fc1c		       da		      .byte.b	#%11011010
   2170  fc1d		       aa		      .byte.b	#%10101010
   2171  fc1e		       ca		      .byte.b	#%11001010
   2172  fc1f		       f3		      .byte.b	#%11110011
   2173  fc20		       78		      .byte.b	#%01111000
   2174  fc21		       df		      .byte.b	#%11011111
   2175  fc22		       fc		      .byte.b	#%11111100
   2176  fc23		       c7		      .byte.b	#%11000111
   2177  fc24		       98		      .byte.b	#%10011000
   2178  fc25		       23		      .byte.b	#%00100011
   2179  fc26		       b9		      .byte.b	#%10111001
   2180  fc27		       d2		      .byte.b	#%11010010
   2181  fc28		       30		      .byte.b	#%00110000
   2182  fc29		       eb		      .byte.b	#%11101011
   2183  fc2a		       28		      .byte.b	#%00101000
   2184  fc2b		       ab		      .byte.b	#%10101011
   2185  fc2c		       72		      .byte.b	#%01110010
   2186  fc2d		       fa		      .byte.b	#%11111010
   2187  fc2e		       7a		      .byte.b	#%01111010
   2188  fc2f		       32		      .byte.b	#%00110010
   2189  fc30		       3a		      .byte.b	#%00111010
   2190  fc31		       63		      .byte.b	#%01100011
   2191  fc32
   2192  fc32				   QrCode3
   2193  fc32		       98		      .byte.b	#%10011000
   2194  fc33		       c3		      .byte.b	#%11000011
   2195  fc34		       39		      .byte.b	#%00111001
   2196  fc35		       34		      .byte.b	#%00110100
   2197  fc36		       ff		      .byte.b	#%11111111
   2198  fc37		       71		      .byte.b	#%01110001
   2199  fc38		       d5		      .byte.b	#%11010101
   2200  fc39		       d1		      .byte.b	#%11010001
   2201  fc3a		       5f		      .byte.b	#%01011111
   2202  fc3b		       26		      .byte.b	#%00100110
   2203  fc3c		       2d		      .byte.b	#%00101101
   2204  fc3d		       e9		      .byte.b	#%11101001
   2205  fc3e		       d6		      .byte.b	#%11010110
   2206  fc3f		       26		      .byte.b	#%00100110
   2207  fc40		       ba		      .byte.b	#%10111010
   2208  fc41		       03		      .byte.b	#%00000011
   2209  fc42		       dd		      .byte.b	#%11011101
   2210  fc43		       e0		      .byte.b	#%11100000
   2211  fc44		       57		      .byte.b	#%01010111
   2212  fc45		       14		      .byte.b	#%00010100
   2213  fc46		       35		      .byte.b	#%00110101
   2214  fc47		       e5		      .byte.b	#%11100101
   2215  fc48		       b5		      .byte.b	#%10110101
   2216  fc49		       d4		      .byte.b	#%11010100
   2217  fc4a		       97		      .byte.b	#%10010111
   2218  fc4b
   2219  fc4b				   QrCode4
   2220  fc4b		       09		      .byte.b	#%00001001
   2221  fc4c		       0e		      .byte.b	#%00001110
   2222  fc4d		       0f		      .byte.b	#%00001111
   2223  fc4e		       0c		      .byte.b	#%00001100
   2224  fc4f		       0c		      .byte.b	#%00001100
   2225  fc50		       08		      .byte.b	#%00001000
   2226  fc51		       08		      .byte.b	#%00001000
   2227  fc52		       06		      .byte.b	#%00000110
   2228  fc53		       06		      .byte.b	#%00000110
   2229  fc54		       0b		      .byte.b	#%00001011
   2230  fc55		       0f		      .byte.b	#%00001111
   2231  fc56		       04		      .byte.b	#%00000100
   2232  fc57		       08		      .byte.b	#%00001000
   2233  fc58		       0f		      .byte.b	#%00001111
   2234  fc59		       09		      .byte.b	#%00001001
   2235  fc5a		       07		      .byte.b	#%00000111
   2236  fc5b		       05		      .byte.b	#%00000101
   2237  fc5c		       00		      .byte.b	#%00000000
   2238  fc5d		       0f		      .byte.b	#%00001111
   2239  fc5e		       08		      .byte.b	#%00001000
   2240  fc5f		       0b		      .byte.b	#%00001011
   2241  fc60		       0b		      .byte.b	#%00001011
   2242  fc61		       0b		      .byte.b	#%00001011
   2243  fc62		       08		      .byte.b	#%00001000
   2244  fc63		       0f		      .byte.b	#%00001111
   2245  fc64
   2246  fc64							; Moved here because of rom space.
   2247  fc64							; The only SBR in constants space
   2248  fc64				   DrawQrCode
   2249  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2250  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2251  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2252  fc6a		       85 0a		      STA	CTRLPF
   2253  fc6c		       20 70 f6 	      JSR	ClearAll	; To be 100 sure!
   2254  fc6f		       ad 82 02 	      LDA	SWCHB
   2255  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2256  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2257  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2258  fc78		       86 09		      STX	COLUBK
   2259  fc7a		       84 08		      STY	COLUPF
   2260  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2261  fc7f				   StoreReversedQrCode
   2262  fc7f		       86 08		      STX	COLUPF
   2263  fc81		       84 09		      STY	COLUBK
   2264  fc83
   2265  fc83				   ContinueQrCode
   2266  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2267  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2268  fc87		       20 02 f9 	      JSR	WaitForVblankEnd
   2269  fc8a		       20 15 f9 	      JSR	Sleep8Lines
   2270  fc8d		       20 15 f9 	      JSR	Sleep8Lines
   2271  fc90		       20 15 f9 	      JSR	Sleep8Lines
   2272  fc93
   2273  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2274  fc93		       85 02		      STA	WSYNC
   2275  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2276  fc98		       85 0e		      STA	PF1	;3
   2277  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2278  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2280  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2281  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2282  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2283  fcb5		       85 0e		      STA	PF1	;3
   2284  fcb7
   2285  fcb7		       ca		      DEX		;2
   2286  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2287  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2288  fcbc		       88		      DEY		;2
   2289  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2290  fcbf
   2291  fcbf				   EndQrCodeLoop
   2292  fcbf		       85 02		      STA	WSYNC	;
   2293  fcc1		       a9 00		      LDA	#0
   2294  fcc3		       85 0e		      STA	PF1	;3
   2295  fcc5		       85 0f		      STA	PF2	;3
   2296  fcc7
   2297  fcc7		       20 1c f9 	      JSR	Sleep32Lines
   2298  fcca		       4c 4c f5 	      JMP	PrepareOverscan
   2299  fccd
   2300  fccd				   PlayerToUpMask
   2301  fccd		       10		      .byte.b	#%00010000	;
   2302  fcce		       01		      .byte.b	#%00000001	;
   2303  fccf
   2304  fccf				   PlayerToDownMask
   2305  fccf		       20		      .byte.b	#%00100000	;
   2306  fcd0		       02		      .byte.b	#%00000010	;
   2307  fcd1
   2308  fcd1
   2309  fcd1				   PlayerToLeftMask
   2310  fcd1		       40		      .byte.b	#%01000000	;
   2311  fcd2		       04		      .byte.b	#%00000100	;
   2312  fcd3
   2313  fcd3				   PlayerToRightMask
   2314  fcd3		       80		      .byte.b	#%10000000	;
   2315  fcd4		       08		      .byte.b	#%00001000	;
   2316  fcd5
   2317  fd00					      org	$FD00
   2318  fd00				   Font
   2319  fd00				   C0
   2320  fd00		       e7		      .byte.b	#%11100111	;
   2321  fd01		       a5		      .byte.b	#%10100101	; 
   2322  fd02		       a5		      .byte.b	#%10100101	; 
   2323  fd03		       a5		      .byte.b	#%10100101	; 
   2324  fd04		       e7		      .byte.b	#%11100111	;	
   2325  fd05				   C1
   2326  fd05		       e7		      .byte.b	#%11100111	;
   2327  fd06		       42		      .byte.b	#%01000010	; 
   2328  fd07		       42		      .byte.b	#%01000010	; 
   2329  fd08		       42		      .byte.b	#%01000010	; 
   2330  fd09		       66		      .byte.b	#%01100110	;
   2331  fd0a				   C2
   2332  fd0a		       e7		      .byte.b	#%11100111	;
   2333  fd0b		       24		      .byte.b	#%00100100	; 
   2334  fd0c		       e7		      .byte.b	#%11100111	; 
   2335  fd0d		       81		      .byte.b	#%10000001	; 
   2336  fd0e		       e7		      .byte.b	#%11100111	;
   2337  fd0f				   C3
   2338  fd0f		       e7		      .byte.b	#%11100111	;
   2339  fd10		       81		      .byte.b	#%10000001	; 
   2340  fd11		       e7		      .byte.b	#%11100111	; 
   2341  fd12		       81		      .byte.b	#%10000001	; 
   2342  fd13		       e7		      .byte.b	#%11100111	;
   2343  fd14				   C4
   2344  fd14		       81		      .byte.b	#%10000001	;
   2345  fd15		       81		      .byte.b	#%10000001	; 
   2346  fd16		       e7		      .byte.b	#%11100111	; 
   2347  fd17		       a5		      .byte.b	#%10100101	; 
   2348  fd18		       a5		      .byte.b	#%10100101	;
   2349  fd19				   C5
   2350  fd19		       e7		      .byte.b	#%11100111	;
   2351  fd1a		       81		      .byte.b	#%10000001	; 
   2352  fd1b		       e7		      .byte.b	#%11100111	; 
   2353  fd1c		       24		      .byte.b	#%00100100	; 
   2354  fd1d		       e7		      .byte.b	#%11100111	;
   2355  fd1e				   C6
   2356  fd1e		       e7		      .byte.b	#%11100111	;
   2357  fd1f		       a5		      .byte.b	#%10100101	; 
   2358  fd20		       e7		      .byte.b	#%11100111	; 
   2359  fd21		       24		      .byte.b	#%00100100	; 
   2360  fd22		       e7		      .byte.b	#%11100111	;
   2361  fd23				   C7
   2362  fd23		       81		      .byte.b	#%10000001	;
   2363  fd24		       81		      .byte.b	#%10000001	; 
   2364  fd25		       81		      .byte.b	#%10000001	; 
   2365  fd26		       81		      .byte.b	#%10000001	; 
   2366  fd27		       e7		      .byte.b	#%11100111	;
   2367  fd28				   C8
   2368  fd28		       e7		      .byte.b	#%11100111	;
   2369  fd29		       a5		      .byte.b	#%10100101	; 
   2370  fd2a		       e7		      .byte.b	#%11100111	; 
   2371  fd2b		       a5		      .byte.b	#%10100101	; 
   2372  fd2c		       e7		      .byte.b	#%11100111	;
   2373  fd2d				   C9
   2374  fd2d		       e7		      .byte.b	#%11100111	;
   2375  fd2e		       81		      .byte.b	#%10000001	; 
   2376  fd2f		       e7		      .byte.b	#%11100111	; 
   2377  fd30		       a5		      .byte.b	#%10100101	; 
   2378  fd31		       e7		      .byte.b	#%11100111	;
   2379  fd32				   CA
   2380  fd32		       a5		      .byte.b	#%10100101	;
   2381  fd33		       a5		      .byte.b	#%10100101	; 
   2382  fd34		       e7		      .byte.b	#%11100111	; 
   2383  fd35		       a5		      .byte.b	#%10100101	; 
   2384  fd36		       e7		      .byte.b	#%11100111	;
   2385  fd37				   CB
   2386  fd37		       66		      .byte.b	#%01100110	;
   2387  fd38		       a5		      .byte.b	#%10100101	; 
   2388  fd39		       66		      .byte.b	#%01100110	; 
   2389  fd3a		       a5		      .byte.b	#%10100101	;
   2390  fd3b		       66		      .byte.b	#%01100110	;
   2391  fd3c				   CC
   2392  fd3c		       e7		      .byte.b	#%11100111	;
   2393  fd3d		       24		      .byte.b	#%00100100	; 
   2394  fd3e		       24		      .byte.b	#%00100100	; 
   2395  fd3f		       24		      .byte.b	#%00100100	;
   2396  fd40		       e7		      .byte.b	#%11100111	;
   2397  fd41
   2398  fd41				   CD
   2399  fd41		       66		      .byte.b	#%01100110	;
   2400  fd42		       a5		      .byte.b	#%10100101	; 
   2401  fd43		       a5		      .byte.b	#%10100101	; 
   2402  fd44		       a5		      .byte.b	#%10100101	;
   2403  fd45		       66		      .byte.b	#%01100110	;
   2404  fd46
   2405  fd46				   CE
   2406  fd46		       e7		      .byte.b	#%11100111	;
   2407  fd47		       24		      .byte.b	#%00100100	; 
   2408  fd48		       e7		      .byte.b	#%11100111	; 
   2409  fd49		       24		      .byte.b	#%00100100	; 
   2410  fd4a		       e7		      .byte.b	#%11100111	;
   2411  fd4b
   2412  fd4b				   CF
   2413  fd4b		       24		      .byte.b	#%00100100	;
   2414  fd4c		       24		      .byte.b	#%00100100	; 
   2415  fd4d		       e7		      .byte.b	#%11100111	; 
   2416  fd4e		       24		      .byte.b	#%00100100	; 
   2417  fd4f		       e7		      .byte.b	#%11100111	;
   2418  fd50
   2419  fd50				   CG
   2420  fd50		       c3		      .byte.b	#%11000011	;
   2421  fd51		       a5		      .byte.b	#%10100101	; 
   2422  fd52		       a5		      .byte.b	#%10100101	; 
   2423  fd53		       24		      .byte.b	#%00100100	; 
   2424  fd54		       c3		      .byte.b	#%11000011	;	
   2425  fd55
   2426  fd55				   CH
   2427  fd55		       a5		      .byte.b	#%10100101	;
   2428  fd56		       a5		      .byte.b	#%10100101	; 
   2429  fd57		       e7		      .byte.b	#%11100111	; 
   2430  fd58		       a5		      .byte.b	#%10100101	; 
   2431  fd59		       a5		      .byte.b	#%10100101	;
   2432  fd5a
   2433  fd5a				   CK
   2434  fd5a		       a5		      .byte.b	#%10100101	;
   2435  fd5b		       a5		      .byte.b	#%10100101	; 
   2436  fd5c		       66		      .byte.b	#%01100110	; 
   2437  fd5d		       a5		      .byte.b	#%10100101	; 
   2438  fd5e		       a5		      .byte.b	#%10100101	;
   2439  fd5f
   2440  fd5f				   CL
   2441  fd5f		       e7		      .byte.b	#%11100111	;
   2442  fd60		       24		      .byte.b	#%00100100	; 
   2443  fd61		       24		      .byte.b	#%00100100	; 
   2444  fd62		       24		      .byte.b	#%00100100	; 
   2445  fd63		       24		      .byte.b	#%00100100	;
   2446  fd64
   2447  fd64				   CI
   2448  fd64		       42		      .byte.b	#%01000010	;
   2449  fd65		       42		      .byte.b	#%01000010	; 
   2450  fd66		       42		      .byte.b	#%01000010	; 
   2451  fd67		       42		      .byte.b	#%01000010	; 
   2452  fd68		       42		      .byte.b	#%01000010	;
   2453  fd69
   2454  fd69				   CM
   2455  fd69		       a5		      .byte.b	#%10100101	;
   2456  fd6a		       a5		      .byte.b	#%10100101	; 
   2457  fd6b		       a5		      .byte.b	#%10100101	; 
   2458  fd6c		       e7		      .byte.b	#%11100111	; 
   2459  fd6d		       a5		      .byte.b	#%10100101	;
   2460  fd6e
   2461  fd6e				   CN
   2462  fd6e		       a5		      .byte.b	#%10100101	;
   2463  fd6f		       a5		      .byte.b	#%10100101	; 
   2464  fd70		       a5		      .byte.b	#%10100101	; 
   2465  fd71		       a5		      .byte.b	#%10100101	; 
   2466  fd72		       66		      .byte.b	#%01100110	;	
   2467  fd73
   2468  fd73
   2469  fd73				   CO
   2470  fd73		       42		      .byte.b	#%01000010	;
   2471  fd74		       a5		      .byte.b	#%10100101	; 
   2472  fd75		       a5		      .byte.b	#%10100101	; 
   2473  fd76		       a5		      .byte.b	#%10100101	; 
   2474  fd77		       42		      .byte.b	#%01000010	;	
   2475  fd78
   2476  fd78				   CP
   2477  fd78		       24		      .byte.b	#%00100100	;
   2478  fd79		       24		      .byte.b	#%00100100	; 
   2479  fd7a		       e7		      .byte.b	#%11100111	; 
   2480  fd7b		       a5		      .byte.b	#%10100101	; 
   2481  fd7c		       e7		      .byte.b	#%11100111	;
   2482  fd7d
   2483  fd7d				   CR
   2484  fd7d		       a5		      .byte.b	#%10100101	;
   2485  fd7e		       a5		      .byte.b	#%10100101	; 
   2486  fd7f		       66		      .byte.b	#%01100110	; 
   2487  fd80		       a5		      .byte.b	#%10100101	; 
   2488  fd81		       66		      .byte.b	#%01100110	;
   2489  fd82
   2490  fd82				   CS
   2491  fd82		       66		      .byte.b	#%01100110	;
   2492  fd83		       81		      .byte.b	#%10000001	; 
   2493  fd84		       42		      .byte.b	#%01000010	; 
   2494  fd85		       24		      .byte.b	#%00100100	; 
   2495  fd86		       c3		      .byte.b	#%11000011	;
   2496  fd87
   2497  fd87				   CT
   2498  fd87		       42		      .byte.b	#%01000010	;
   2499  fd88		       42		      .byte.b	#%01000010	; 
   2500  fd89		       42		      .byte.b	#%01000010	; 
   2501  fd8a		       42		      .byte.b	#%01000010	; 
   2502  fd8b		       e7		      .byte.b	#%11100111	;
   2503  fd8c
   2504  fd8c				   CV
   2505  fd8c		       42		      .byte.b	#%01000010	;
   2506  fd8d		       a5		      .byte.b	#%10100101	; 
   2507  fd8e		       a5		      .byte.b	#%10100101	; 
   2508  fd8f		       a5		      .byte.b	#%10100101	; 
   2509  fd90		       a5		      .byte.b	#%10100101	;	
   2510  fd91
   2511  fd91				   CY
   2512  fd91		       42		      .byte.b	#%01000010	;
   2513  fd92		       42		      .byte.b	#%01000010	; 
   2514  fd93		       42		      .byte.b	#%01000010	; 
   2515  fd94		       a5		      .byte.b	#%10100101	; 
   2516  fd95		       a5		      .byte.b	#%10100101	;
   2517  fd96
   2518  fd96				   CW
   2519  fd96		       a5		      .byte.b	#%10100101	;
   2520  fd97		       e7		      .byte.b	#%11100111	; 
   2521  fd98		       a5		      .byte.b	#%10100101	; 
   2522  fd99		       a5		      .byte.b	#%10100101	; 
   2523  fd9a		       a5		      .byte.b	#%10100101	;
   2524  fd9b
   2525  fd9b				   CZ
   2526  fd9b		       e7		      .byte.b	#%11100111	;
   2527  fd9c		       24		      .byte.b	#%00100100	; 
   2528  fd9d		       42		      .byte.b	#%01000010	; 
   2529  fd9e		       81		      .byte.b	#%10000001	; 
   2530  fd9f		       e7		      .byte.b	#%11100111	;
   2531  fda0
   2532  fda0				   Pipe
   2533  fda0		       42		      .byte.b	#%01000010	;
   2534  fda1		       00		      .byte.b	#%00000000	; 
   2535  fda2		       42		      .byte.b	#%01000010	; 
   2536  fda3		       00		      .byte.b	#%00000000	; 
   2537  fda4		       42		      .byte.b	#%01000010	;
   2538  fda5
   2539  fda5				   Exclamation
   2540  fda5		       42		      .byte.b	#%01000010	;
   2541  fda6		       00		      .byte.b	#%00000000	; 
   2542  fda7		       42		      .byte.b	#%01000010	; 
   2543  fda8		       42		      .byte.b	#%01000010	; 
   2544  fda9		       42		      .byte.b	#%01000010	;
   2545  fdaa
   2546  fdaa				   Dot
   2547  fdaa		       42		      .byte.b	#%01000010	;
   2548  fdab		       42		      .byte.b	#%01000010	; 
   2549  fdac		       00		      .byte.b	#%00000000	; 
   2550  fdad		       00		      .byte.b	#%00000000	; 
   2551  fdae		       00		      .byte.b	#%00000000	;
   2552  fdaf
   2553  fdaf				   Colon
   2554  fdaf		       42		      .byte.b	#%01000010	;
   2555  fdb0		       42		      .byte.b	#%01000010	; 
   2556  fdb1		       00		      .byte.b	#%00000000	; 
   2557  fdb2		       42		      .byte.b	#%01000010	; 
   2558  fdb3		       42		      .byte.b	#%01000010	;
   2559  fdb4
   2560  fdb4				   Triangle
   2561  fdb4		       81		      .byte.b	#%10000001	;
   2562  fdb5		       c3		      .byte.b	#%11000011	; 
   2563  fdb6		       e7		      .byte.b	#%11100111	; 
   2564  fdb7		       c3		      .byte.b	#%11000011	; 
   2565  fdb8		       81		      .byte.b	#%10000001	;
   2566  fdb9
   2567  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2568  fdb9		       00		      .byte.b	#0	;
   2569  fdba		       00		      .byte.b	#0	;
   2570  fdbb		       00		      .byte.b	#0	;
   2571  fdbc		       00		      .byte.b	#0	;
   2572  fdbd		       00		      .byte.b	#0	;
   2573  fdbe
   2574  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2575  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2576  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2577  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2578  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2579  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2580  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2581  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2582  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2583  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2584  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2585  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2586  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2587  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2588  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2589  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2590  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2591  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2592  fdcf
   2593  fdcf				   EngineSoundType
   2594  fdcf		       02		      .byte.b	#2
   2595  fdd0		       02		      .byte.b	#2
   2596  fdd1		       0e		      .byte.b	#14
   2597  fdd2		       06		      .byte.b	#6
   2598  fdd3		       06		      .byte.b	#6
   2599  fdd4		       0e		      .byte.b	#14
   2600  fdd5
   2601  fdd5				   EngineBaseFrequence
   2602  fdd5		       1f		      .byte.b	#31
   2603  fdd6		       15		      .byte.b	#21
   2604  fdd7		       14		      .byte.b	#20
   2605  fdd8		       1f		      .byte.b	#31
   2606  fdd9		       16		      .byte.b	#22
   2607  fdda		       03		      .byte.b	#3
   2608  fddb
   2609  fddb				   TachometerSizeLookup1
   2610  fddb		       1f		      .byte.b	#%00011111
   2611  fddc		       3f		      .byte.b	#%00111111
   2612  fddd		       7f		      .byte.b	#%01111111
   2613  fdde		       ff		      .byte.b	#%11111111
   2614  fddf		       ff		      .byte.b	#%11111111
   2615  fde0		       ff		      .byte.b	#%11111111
   2616  fde1		       ff		      .byte.b	#%11111111
   2617  fde2		       ff		      .byte.b	#%11111111
   2618  fde3
   2619  fde3				   TachometerSizeLookup2
   2620  fde3		       00		      .byte.b	#%00000000
   2621  fde4		       00		      .byte.b	#%00000000
   2622  fde5		       00		      .byte.b	#%00000000
   2623  fde6		       00		      .byte.b	#%00000000
   2624  fde7		       80		      .byte.b	#%10000000
   2625  fde8		       c0		      .byte.b	#%11000000
   2626  fde9		       e0		      .byte.b	#%11100000
   2627  fdea		       f0		      .byte.b	#%11110000
   2628  fdeb
   2629  fdeb				   TachometerGearLookup
   2630  fdeb		       01		      .byte.b	#%00000001
   2631  fdec		       02		      .byte.b	#%00000010
   2632  fded		       04		      .byte.b	#%00000100
   2633  fdee		       08		      .byte.b	#%00001000
   2634  fdef		       10		      .byte.b	#%00010000
   2635  fdf0		       30		      .byte.b	#%00110000
   2636  fdf1
   2637  fe00					      org	$FE00
   2638  fe00				   AesTable
   2639  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2640  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2641  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2642  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2643  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2644  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2645  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2646  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2647  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2648  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2649  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2650  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2651  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2652  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2653  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2654  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2655  ff00
   2656  ff00							; From FF00 to FFFB (122 bytes) to use here
   2657  ff00
   2658  ff00				   StaticText		; All static text must be on the same MSB block. 
   2659  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2660  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2661  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2662  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2663  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2664  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2665  ff05
   2666  ff05				   HellwayLeftText
   2667  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2668  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2669  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2670  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2671  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2672  ff0a
   2673  ff0a				   HellwayRightText
   2674  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2675  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2676  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2677  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2678  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2679  ff0f
   2680  ff0f				   OpbText
   2681  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2682  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2683  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2684  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2685  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2686  ff14
   2687  ff14				   YearText
   2688  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2689  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2690  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2691  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2692  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2693  ff19
   2694  ff19				   GameText
   2695  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2696  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2697  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2698  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2699  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2700  ff1e
   2701  ff1e				   OverText
   2702  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2703  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2704  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2705  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2706  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2707  ff23				   GoText
   2708  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2709  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2710  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2711  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2712  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2713  ff28
   2714  ff28				   ZeldaTextLeft
   2715  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2716  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2717  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2718  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2719  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2720  ff2d
   2721  ff2d				   ZeldaTextRight
   2722  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2723  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2724  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2725  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2726  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2727  ff32
   2728  ff32				   ZeldaDateLeft
   2729  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2730  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2731  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2732  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2733  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2734  ff37
   2735  ff37				   ZeldaDateRight
   2736  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2737  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2738  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2739  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2740  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2741  ff3c
   2742  ff3c				   PolvinhosTextLeft
   2743  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2744  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2745  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2746  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2747  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2748  ff41
   2749  ff41				   PolvinhosTextRight
   2750  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2751  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2752  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2753  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2754  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2755  ff46
   2756  ff46				   PolvinhosDateLeft
   2757  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2758  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2759  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2760  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2761  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2762  ff4b
   2763  ff4b				   PolvinhosDateRight
   2764  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2765  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2766  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2767  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2768  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2769  ff50
   2770  ff50				   IvonneTextLeft
   2771  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2772  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2773  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2774  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2775  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2776  ff55
   2777  ff55				   IvonneTextRight
   2778  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2779  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2780  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2781  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2782  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2783  ff5a
   2784  ff5a				   IvonneDateLeft
   2785  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2786  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2787  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2788  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2789  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2790  ff5f
   2791  ff5f				   IvonneDateRight
   2792  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2793  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2794  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2795  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2796  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2797  ff64
   2798  ff64				   PaperArtTextLeft
   2799  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2800  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2801  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2802  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2803  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2804  ff69
   2805  ff69				   PaperArtTextRight
   2806  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2807  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2808  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2809  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2810  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2811  ff6e
   2812  ff6e				   LeonardoTextLeft
   2813  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2814  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2815  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2816  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2817  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2818  ff73
   2819  ff73				   LeonardoTextRight
   2820  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2821  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2822  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2823  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2824  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2825  ff78
   2826  ff78				   VersionText
   2827  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2828  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2829  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2830  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2831  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2832  ff7d
   2833  ff7d
   2834  ff7d				   EndStaticText
   2835  ff7d
   2836  ff7d				   CarSprite0		; Upside down, Original Car
   2837  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2838  ff85				   CarSprite0NoPadding
   2839  ff85		       7e		      .byte.b	#%01111110
   2840  ff86		       24		      .byte.b	#%00100100
   2841  ff87		       bd		      .byte.b	#%10111101
   2842  ff88		       3c		      .byte.b	#%00111100
   2843  ff89		       bd		      .byte.b	#%10111101
   2844  ff8a		       3c		      .byte.b	#%00111100
   2845  ff8b
   2846  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2847  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2848  ff93				   CarSprite1NoPadding
   2849  ff93		       bd		      .byte.b	#%10111101
   2850  ff94		       7e		      .byte.b	#%01111110
   2851  ff95		       5a		      .byte.b	#%01011010
   2852  ff96		       66		      .byte.b	#%01100110
   2853  ff97		       bd		      .byte.b	#%10111101
   2854  ff98		       3c		      .byte.b	#%00111100
   2855  ff99
   2856  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2857  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2858  ffa1				   CarSprite2NoPadding
   2859  ffa1		       7e		      .byte.b	#%01111110
   2860  ffa2		       a5		      .byte.b	#%10100101
   2861  ffa3		       42		      .byte.b	#%01000010
   2862  ffa4		       42		      .byte.b	#%01000010
   2863  ffa5		       bd		      .byte.b	#%10111101
   2864  ffa6		       7e		      .byte.b	#%01111110
   2865  ffa7
   2866  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2867  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2868  ffaf				   CarSprite3NoPadding
   2869  ffaf		       3c		      .byte.b	#%00111100
   2870  ffb0		       db		      .byte.b	#%11011011
   2871  ffb1		       db		      .byte.b	#%11011011
   2872  ffb2		       3c		      .byte.b	#%00111100
   2873  ffb3		       5a		      .byte.b	#%01011010
   2874  ffb4		       3c		      .byte.b	#%00111100
   2875  ffb5
   2876  ffb5				   TrafficSpeeds
   2877  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2878  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2879  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2880  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2881  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2882  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2883  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2884  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2885  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2886  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2887  ffbf				   TrafficSpeedsHighDelta
   2888  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2889  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2890  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2891  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2892  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2893  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2894  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2895  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2896  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2897  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2898  ffc9
   2899  ffc9				   CarIdToSpriteAddressL
   2900  ffc9		       7d		      .byte.b	#<CarSprite0
   2901  ffca		       8b		      .byte.b	#<CarSprite1
   2902  ffcb		       99		      .byte.b	#<CarSprite2
   2903  ffcc		       a7		      .byte.b	#<CarSprite3
   2904  ffcd
   2905  ffcd				   CarIdToSpriteAddressH
   2906  ffcd		       ff		      .byte.b	#>CarSprite0
   2907  ffce		       ff		      .byte.b	#>CarSprite1
   2908  ffcf		       ff		      .byte.b	#>CarSprite2
   2909  ffd0		       ff		      .byte.b	#>CarSprite3
   2910  ffd1
   2911  ffd1				   EnemyCarIdToSpriteAddressL
   2912  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2913  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2914  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2915  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2916  ffd5
   2917  ffd5				   EnemyCarIdToSpriteAddressH
   2918  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2919  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2920  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2921  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2922  ffd9
   2923  ffd9				   CarIdToAccelerateSpeed
   2924  ffd9		       80		      .byte.b	#128
   2925  ffda		       c0		      .byte.b	#192
   2926  ffdb		       60		      .byte.b	#96
   2927  ffdc		       c0		      .byte.b	#192
   2928  ffdd
   2929  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2930  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2931  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2932  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2933  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2934  ffe1
   2935  ffe1				   CarIdToMaxSpeedL
   2936  ffe1		       80		      .byte.b	#$80
   2937  ffe2		       00		      .byte.b	#$00	; One less gear
   2938  ffe3		       80		      .byte.b	#$80
   2939  ffe4		       80		      .byte.b	#$80
   2940  ffe5
   2941  ffe5				   CarIdToMaxGear
   2942  ffe5		       05		      .byte.b	#5
   2943  ffe6		       04		      .byte.b	#4	; One less gear
   2944  ffe7		       05		      .byte.b	#5
   2945  ffe8		       05		      .byte.b	#5
   2946  ffe9
   2947  ffe9				   GearToBreakSpeedTable
   2948  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2949  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2950  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2951  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2952  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2953  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2954  ffef
   2955  ffef				   TrafficColorTable
   2956  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2957  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2958  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2959  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2960  fff3
   2961  fff3				   TrafficChanceTable
   2962  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2963  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2964  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2965  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2966  fff7
   2967  fff7				   TrafficTimeTable
   2968  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2969  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2970  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2971  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2972  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2973  fffc
   2974  fffc
   2975  fffc					      org	$FFFC
   2976  fffc		       00 f0		      .word.w	BeforeStart
   2977  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
