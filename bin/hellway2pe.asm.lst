------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 88	   ParallaxMode =	$88
    111  f000
    112  f000		       00 8c	   FrameCount0 =	$8C	;
    113  f000		       00 8d	   FrameCount1 =	$8D	;
    114  f000
    115  f000		       00 8e	   Player0SpeedL =	$8E
    116  f000		       00 8f	   Player0SpeedH =	$8F
    117  f000
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    123  f000
    124  f000		       00 a4	   CheckpointBcd0 =	$A4
    125  f000		       00 a5	   CheckpointBcd1 =	$A5
    126  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    127  f000		       00 a7	   CarSpritePointerL =	$A7
    128  f000		       00 a8	   CarSpritePointerH =	$A8
    129  f000		       00 a9	   CurrentCarId =	$A9
    130  f000		       00 aa	   AccelerateBuffer =	$AA	; Change speed on buffer overflow.
    131  f000		       00 ab	   TextSide   =	$AB
    132  f000		       00 ac	   TextFlickerMode =	$AC
    133  f000		       00 ad	   Gear       =	$AD
    134  f000
    135  f000							;Temporary variables, multiple uses
    136  f000		       00 b0	   Tmp0       =	$B0
    137  f000		       00 b1	   Tmp1       =	$B1
    138  f000		       00 b2	   Tmp2       =	$B2
    139  f000		       00 b3	   Tmp3       =	$B3
    140  f000
    141  f000		       00 b4	   ScoreBcd0  =	$B4
    142  f000		       00 b5	   ScoreBcd1  =	$B5
    143  f000		       00 b6	   ScoreBcd2  =	$B6
    144  f000		       00 b7	   ScoreBcd3  =	$B7
    145  f000
    146  f000		       00 b8	   CollisionCounter =	$B8
    147  f000		       00 b9	   Player0X   =	$B9
    148  f000		       00 ba	   CountdownTimer =	$BA
    149  f000		       00 bb	   Traffic0Msb =	$BB
    150  f000		       00 bc	   SwitchDebounceCounter =	$BC
    151  f000
    152  f000		       00 bd	   TimeBcd0   =	$BD
    153  f000		       00 be	   TimeBcd1   =	$BE
    154  f000		       00 bf	   TimeBcd2   =	$BF
    155  f000
    156  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    157  f000		       00 c1	   TrafficChance =	$C1
    158  f000		       00 c2	   CheckpointTime =	$C2
    159  f000		       00 c3	   TrafficColor =	$C3
    160  f000		       00 c4	   CurrentDifficulty =	$C4
    161  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    162  f000							;Bit 2 speed delta, Bit 3 random traffic 
    163  f000
    164  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    165  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    166  f000
    167  f000		       00 ca	   BorderType =	$CA
    168  f000
    169  f000		       00 cb	   HitCountBcd0 =	$CB
    170  f000		       00 cc	   HitCountBcd1 =	$CC
    171  f000
    172  f000		       00 cd	   GlideTimeBcd0 =	$CD
    173  f000		       00 ce	   GlideTimeBcd1 =	$CE
    174  f000
    175  f000		       00 cf	   OneSecondConter =	$CF
    176  f000
    177  f000		       00 d0	   ScoreD0    =	$D0
    178  f000		       00 d1	   ScoreD1    =	$D1
    179  f000		       00 d2	   ScoreD2    =	$D2
    180  f000		       00 d3	   ScoreD3    =	$D3
    181  f000		       00 d4	   ScoreD4    =	$D4
    182  f000		       00 d5	   ScoreFontColor =	$D5
    183  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    184  f000		       00 d7	   NextCheckpoint =	$D7
    185  f000
    186  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    187  f000		       00 f0	   ParallaxCache2 =	$F0	; to F7
    188  f000
    189  f000
    190  f000							;generic start up stuff, put zero in almost all...
    191  f000				   BeforeStart		;All variables that are kept on game reset or select
    192  f000		       a0 00		      LDY	#0
    193  f002		       84 bc		      STY	SwitchDebounceCounter
    194  f004		       84 c4		      STY	CurrentDifficulty
    195  f006		       84 c0		      STY	GameStatus
    196  f008		       a0 10		      LDY	#16
    197  f00a		       84 c5		      STY	GameMode
    198  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    199  f00e		       84 88		      STY	ParallaxMode
    200  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    201  f012		       84 a9		      STY	CurrentCarId
    202  f014
    203  f014				   Start
    204  f014		       a9 02		      LDA	#2
    205  f016		       85 00		      STA	VSYNC
    206  f018		       85 02		      STA	WSYNC
    207  f01a		       85 02		      STA	WSYNC
    208  f01c		       85 02		      STA	WSYNC
    209  f01e		       a9 00		      LDA	#0	;2
    210  f020		       85 00		      STA	VSYNC	;3
    211  f022
    212  f022		       78		      SEI
    213  f023		       d8		      CLD
    214  f024		       a2 ff		      LDX	#$FF
    215  f026		       9a		      TXS
    216  f027
    217  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    218  f029				   CleanMem
    219  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    220  f02b		       f0 16		      BEQ	SkipClean
    221  f02d		       e0 c5		      CPX	#GameMode
    222  f02f		       f0 12		      BEQ	SkipClean
    223  f031		       e0 88		      CPX	#ParallaxMode
    224  f033		       f0 0e		      BEQ	SkipClean
    225  f035		       e0 a9		      CPX	#CurrentCarId
    226  f037		       f0 0a		      BEQ	SkipClean
    227  f039		       e0 c4		      CPX	#CurrentDifficulty
    228  f03b		       f0 06		      BEQ	SkipClean
    229  f03d		       e0 c0		      CPX	#GameStatus
    230  f03f		       f0 02		      BEQ	SkipClean
    231  f041		       95 00		      STA	0,X
    232  f043				   SkipClean
    233  f043		       e8		      INX
    234  f044		       d0 e3		      BNE	CleanMem
    235  f046
    236  f046		       a9 d5		      LDA	#213
    237  f048		       8d 96 02 	      STA	TIM64T	;3	
    238  f04b
    239  f04b							;Setting some variables...
    240  f04b
    241  f04b				   SettingTrafficOffsets		; Time sensitive with player H position
    242  f04b		       85 02		      STA	WSYNC	;We will set player position
    243  f04d		       20 f7 f7 	      JSR	DefaultOffsets
    244  f050
    245  f050		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    246  f053		       85 8e		      STA	Player0SpeedL
    247  f055
      0  f055					      SLEEP	11	;18
      1  f055				   .CYCLES    SET	11
      2  f055
      3  f055				  -	      IF	.CYCLES < 2
      4  f055				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f055				  -	      ERR
      6  f055					      ENDIF
      7  f055
      8  f055					      IF	.CYCLES & 1
      9  f055				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f055				  -	      nop	0
     11  f055					      ELSE
     12  f055		       24 00		      bit	VSYNC
     13  f057					      ENDIF
     14  f057				   .CYCLES    SET	.CYCLES - 3
     15  f057					      ENDIF
     16  f057
     17  f057					      REPEAT	.CYCLES / 2
     18  f057		       ea		      nop
     17  f057					      REPEND
     18  f058		       ea		      nop
     17  f058					      REPEND
     18  f059		       ea		      nop
     17  f059					      REPEND
     18  f05a		       ea		      nop
     19  f05b					      REPEND
    249  f05b		       85 10		      STA	RESP0
    250  f05d
    251  f05d		       a2 00		      LDX	#0
    252  f05f		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    253  f062		       85 a6		      STA	StartSWCHB	; For game over
    254  f064		       29 c0		      AND	#%11000000
    255  f066		       f0 0b		      BEQ	CallConfigureDifficulty
    256  f068		       e8		      INX
    257  f069		       c9 80		      CMP	#%10000000
    258  f06b		       f0 06		      BEQ	CallConfigureDifficulty
    259  f06d		       e8		      INX
    260  f06e		       c9 40		      CMP	#%01000000
    261  f070		       f0 01		      BEQ	CallConfigureDifficulty
    262  f072		       e8		      INX
    263  f073
    264  f073				   CallConfigureDifficulty
    265  f073		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    266  f075		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    267  f077		       a5 c0		      LDA	GameStatus
    268  f079		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    269  f07b				   NextCar
    270  f07b		       a4 a9		      LDY	CurrentCarId
    271  f07d		       c8		      INY
    272  f07e		       98		      TYA
    273  f07f		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    274  f081		       85 a9		      STA	CurrentCarId
    275  f083				   StoreCurrentDifficulty
    276  f083		       86 c4		      STX	CurrentDifficulty
    277  f085		       20 cc f7 	      JSR	ConfigureDifficulty
    278  f088
    279  f088				   ConfigureCarSprite
    280  f088		       a4 a9		      LDY	CurrentCarId
    281  f08a		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    282  f08d		       85 a7		      STA	CarSpritePointerL
    283  f08f		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    284  f092		       85 a8		      STA	CarSpritePointerH
    285  f094
    286  f094				   SetGameNotRunning
    287  f094		       a9 00		      LDA	#0
    288  f096		       85 c0		      STA	GameStatus
    289  f098
    290  f098				   ConfigureOneSecondTimer
    291  f098		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    292  f09a		       85 cf		      STA	OneSecondConter
    293  f09c
    294  f09c				   HPositioning
    295  f09c		       85 02		      STA	WSYNC
    296  f09e
    297  f09e		       a9 30		      LDA	#%00110000	;2 Missile Size
    298  f0a0		       85 04		      STA	NUSIZ0	;3
    299  f0a2		       85 05		      STA	NUSIZ1	;3
    300  f0a4
    301  f0a4		       a9 35		      LDA	#PLAYER_0_X_START	;2
    302  f0a6		       85 b9		      STA	Player0X	;3
    303  f0a8
    304  f0a8		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    305  f0aa		       85 ba		      STA	CountdownTimer	;3
    306  f0ac
    307  f0ac		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    308  f0ae		       85 d7		      STA	NextCheckpoint
    309  f0b0
    310  f0b0		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0b2					      SLEEP	11	;
      1  f0b2				   .CYCLES    SET	11
      2  f0b2
      3  f0b2				  -	      IF	.CYCLES < 2
      4  f0b2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b2				  -	      ERR
      6  f0b2					      ENDIF
      7  f0b2
      8  f0b2					      IF	.CYCLES & 1
      9  f0b2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b2				  -	      nop	0
     11  f0b2					      ELSE
     12  f0b2		       24 00		      bit	VSYNC
     13  f0b4					      ENDIF
     14  f0b4				   .CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     19  f0b8					      REPEND
    312  f0b8		       85 11		      STA	RESP1
      0  f0ba					      SLEEP	2	;
      1  f0ba				   .CYCLES    SET	2
      2  f0ba
      3  f0ba				  -	      IF	.CYCLES < 2
      4  f0ba				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ba				  -	      ERR
      6  f0ba					      ENDIF
      7  f0ba
      8  f0ba				  -	      IF	.CYCLES & 1
      9  f0ba				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ba				  -	      nop	0
     11  f0ba				  -	      ELSE
     12  f0ba				  -	      bit	VSYNC
     13  f0ba				  -	      ENDIF
     14  f0ba				  -.CYCLES    SET	.CYCLES - 3
     15  f0ba					      ENDIF
     16  f0ba
     17  f0ba					      REPEAT	.CYCLES / 2
     18  f0ba		       ea		      nop
     19  f0bb					      REPEND
    314  f0bb		       85 14		      STA	RESBL
      0  f0bd					      SLEEP	2	;
      1  f0bd				   .CYCLES    SET	2
      2  f0bd
      3  f0bd				  -	      IF	.CYCLES < 2
      4  f0bd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bd				  -	      ERR
      6  f0bd					      ENDIF
      7  f0bd
      8  f0bd				  -	      IF	.CYCLES & 1
      9  f0bd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bd				  -	      nop	0
     11  f0bd				  -	      ELSE
     12  f0bd				  -	      bit	VSYNC
     13  f0bd				  -	      ENDIF
     14  f0bd				  -.CYCLES    SET	.CYCLES - 3
     15  f0bd					      ENDIF
     16  f0bd
     17  f0bd					      REPEAT	.CYCLES / 2
     18  f0bd		       ea		      nop
     19  f0be					      REPEND
    316  f0be		       85 12		      STA	RESM0
      0  f0c0					      SLEEP	2
      1  f0c0				   .CYCLES    SET	2
      2  f0c0
      3  f0c0				  -	      IF	.CYCLES < 2
      4  f0c0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c0				  -	      ERR
      6  f0c0					      ENDIF
      7  f0c0
      8  f0c0				  -	      IF	.CYCLES & 1
      9  f0c0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c0				  -	      nop	0
     11  f0c0				  -	      ELSE
     12  f0c0				  -	      bit	VSYNC
     13  f0c0				  -	      ENDIF
     14  f0c0				  -.CYCLES    SET	.CYCLES - 3
     15  f0c0					      ENDIF
     16  f0c0
     17  f0c0					      REPEAT	.CYCLES / 2
     18  f0c0		       ea		      nop
     19  f0c1					      REPEND
    318  f0c1		       85 13		      STA	RESM1
    319  f0c3
    320  f0c3		       a9 f0		      LDA	#$F0
    321  f0c5		       85 24		      STA	HMBL
    322  f0c7		       85 22		      STA	HMM0
    323  f0c9		       85 23		      STA	HMM1
    324  f0cb		       85 02		      STA	WSYNC
    325  f0cd		       85 2a		      STA	HMOVE
    326  f0cf		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    327  f0d1		       85 2b		      STA	HMCLR
    328  f0d3
    329  f0d3				   WaitResetToEnd
    330  f0d3		       ad 84 02 	      LDA	INTIM
    331  f0d6		       d0 fb		      BNE	WaitResetToEnd
    332  f0d8
    333  f0d8				   MainLoop
    334  f0d8		       a9 02		      LDA	#2
    335  f0da		       85 00		      STA	VSYNC
    336  f0dc		       85 02		      STA	WSYNC
    337  f0de
    338  f0de				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    339  f0de		       a9 01		      LDA	#%00000001
    340  f0e0		       24 ac		      BIT	TextFlickerMode
    341  f0e2		       f0 05		      BEQ	TextSideFrameZero
    342  f0e4		       25 8d		      AND	FrameCount1
    343  f0e6		       4c eb f0 	      JMP	StoreTextSize
    344  f0e9				   TextSideFrameZero
    345  f0e9		       25 8c		      AND	FrameCount0
    346  f0eb				   StoreTextSize
    347  f0eb		       85 ab		      STA	TextSide
    348  f0ed
    349  f0ed		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    350  f0ef		       85 2a		      STA	HMOVE	;2
    351  f0f1				   ConfigVBlankTimer
    352  f0f1		       a5 c5		      LDA	GameMode
    353  f0f3		       c9 10		      CMP	#MAX_GAME_MODE
    354  f0f5		       f0 05		      BEQ	SetVblankTimerQrCode
    355  f0f7		       a9 29		      LDA	#VBLANK_TIMER
    356  f0f9		       4c fe f0 	      JMP	SetVblankTimer
    357  f0fc				   SetVblankTimerQrCode
    358  f0fc		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    359  f0fe				   SetVblankTimer
    360  f0fe		       85 02		      STA	WSYNC	;3
    361  f100		       8d 96 02 	      STA	TIM64T	;3	
    362  f103		       a9 00		      LDA	#0	;2
    363  f105		       85 00		      STA	VSYNC	;3	
    364  f107
    365  f107				   RandomizeGame
    366  f107		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    367  f109		       d0 30		      BNE	EndRandomizeGame
    368  f10b		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    369  f10d		       29 02		      AND	#%00000010
    370  f10f		       f0 27		      BEQ	DeterministicGame
    371  f111		       a6 96		      LDX	TrafficOffset1 + 2
    372  f113		       bd 00 fe 	      LDA	AesTable,X
    373  f116		       45 8c		      EOR	FrameCount0
    374  f118		       85 96		      STA	TrafficOffset1 + 2
    375  f11a		       a6 9a		      LDX	TrafficOffset2 + 2
    376  f11c		       bd 00 fe 	      LDA	AesTable,X
    377  f11f		       45 8c		      EOR	FrameCount0
    378  f121		       85 9a		      STA	TrafficOffset2 + 2
    379  f123		       a6 9e		      LDX	TrafficOffset3 + 2
    380  f125		       bd 00 fe 	      LDA	AesTable,X
    381  f128		       45 8c		      EOR	FrameCount0
    382  f12a		       85 9e		      STA	TrafficOffset3 + 2
    383  f12c		       a6 a2		      LDX	TrafficOffset4 + 2
    384  f12e		       bd 00 fe 	      LDA	AesTable,X
    385  f131		       45 8c		      EOR	FrameCount0
    386  f133		       85 a2		      STA	TrafficOffset4 + 2
    387  f135		       4c 3b f1 	      JMP	EndRandomizeGame
    388  f138
    389  f138				   DeterministicGame
    390  f138		       20 f7 f7 	      JSR	DefaultOffsets
    391  f13b
    392  f13b				   EndRandomizeGame
    393  f13b
    394  f13b				   CountFrame
    395  f13b		       e6 8c		      INC	FrameCount0	; 5
    396  f13d		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    397  f13f		       e6 8d		      INC	FrameCount1	; 5 
    398  f141				   SkipIncFC1
    399  f141
    400  f141				   CallDrawQrCode
    401  f141		       a5 c5		      LDA	GameMode
    402  f143		       c9 10		      CMP	#MAX_GAME_MODE
    403  f145		       d0 03		      BNE	TestIsGameRunning
    404  f147		       4c 64 fc 	      JMP	DrawQrCode
    405  f14a
    406  f14a							;Does not update the game if not running
    407  f14a				   TestIsGameRunning
    408  f14a		       a5 c0		      LDA	GameStatus	;3
    409  f14c		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    410  f14e		       4c 5a f3 	      JMP	SkipUpdateLogic
    411  f151				   ContinueWithGameLogic
    412  f151
    413  f151				   EverySecond		; 64 frames to be more precise
    414  f151		       a9 3f		      LDA	#%00111111
    415  f153		       25 8c		      AND	FrameCount0
    416  f155		       d0 06		      BNE	SkipEverySecondAction
    417  f157		       c5 ba		      CMP	CountdownTimer
    418  f159		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    419  f15b		       c6 ba		      DEC	CountdownTimer
    420  f15d				   SkipEverySecondAction
    421  f15d
    422  f15d				   ChangeTextFlickerMode
    423  f15d		       a5 bc		      LDA	SwitchDebounceCounter
    424  f15f		       d0 0d		      BNE	EndChangeTextFlickerMode
    425  f161		       ad 82 02 	      LDA	SWCHB
    426  f164		       29 02		      AND	#%00000010	;Game select
    427  f166		       d0 06		      BNE	EndChangeTextFlickerMode
    428  f168		       e6 ac		      INC	TextFlickerMode
    429  f16a		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    430  f16c		       85 bc		      STA	SwitchDebounceCounter
    431  f16e				   EndChangeTextFlickerMode
    432  f16e
    433  f16e				   BreakOnTimeOver		; Uses LDX as the breaking speed
    434  f16e		       a2 00		      LDX	#0
    435  f170		       a5 ba		      LDA	CountdownTimer
    436  f172		       d0 0b		      BNE	Break
    437  f174		       a4 a9		      LDY	CurrentCarId
    438  f176		       a5 8c		      LDA	FrameCount0
    439  f178		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    440  f17b		       d0 02		      BNE	Break
    441  f17d		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    442  f17f
    443  f17f				   Break
    444  f17f		       a9 20		      LDA	#%00100000	;Down in controller
    445  f181		       2c 80 02 	      BIT	SWCHA
    446  f184		       d0 0e		      BNE	BreakNonZero
    447  f186		       a5 0c		      LDA	INPT4	;3
    448  f188		       10 08		      BPL	BreakWhileAccelerating
    449  f18a		       a4 ad		      LDY	Gear
    450  f18c		       be dd ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    451  f18f		       4c 94 f1 	      JMP	BreakNonZero
    452  f192				   BreakWhileAccelerating		; Allow better control while breaking.
    453  f192		       a2 05		      LDX	(#BREAK_SPEED / 2)
    454  f194
    455  f194				   BreakNonZero
    456  f194		       e0 00		      CPX	#0
    457  f196		       f0 2b		      BEQ	SkipBreak
    458  f198		       86 b0		      STX	Tmp0
    459  f19a
    460  f19a				   DecreaseSpeed
    461  f19a		       38		      SEC
    462  f19b		       a5 8e		      LDA	Player0SpeedL
    463  f19d		       e5 b0		      SBC	Tmp0
    464  f19f		       85 8e		      STA	Player0SpeedL
    465  f1a1		       a5 8f		      LDA	Player0SpeedH
    466  f1a3		       e9 00		      SBC	#0
    467  f1a5		       85 8f		      STA	Player0SpeedH
    468  f1a7
    469  f1a7				   CheckMinSpeed
    470  f1a7		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    471  f1a9		       c9 00		      CMP	#CAR_MIN_SPEED_H
    472  f1ab		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    473  f1ad		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    474  f1af
    475  f1af				   CompareLBreakSpeed
    476  f1af		       a5 8e		      LDA	Player0SpeedL
    477  f1b1		       c9 00		      CMP	#CAR_MIN_SPEED_L
    478  f1b3		       90 03		      BCC	ResetMinSpeed	; Less than memory
    479  f1b5		       4c c0 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    480  f1b8
    481  f1b8				   ResetMinSpeed
    482  f1b8		       a9 00		      LDA	#CAR_MIN_SPEED_H
    483  f1ba		       85 8f		      STA	Player0SpeedH
    484  f1bc		       a9 00		      LDA	#CAR_MIN_SPEED_L
    485  f1be		       85 8e		      STA	Player0SpeedL
    486  f1c0
    487  f1c0				   SkipAccelerateIfBreaking
    488  f1c0		       4c 05 f2 	      JMP	SkipAccelerate
    489  f1c3				   SkipBreak
    490  f1c3
    491  f1c3				   Acelerates
    492  f1c3		       a5 ba		      LDA	CountdownTimer
    493  f1c5		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    494  f1c7
    495  f1c7				   ContinueAccelerateTest
    496  f1c7		       a5 0c		      LDA	INPT4	;3
    497  f1c9		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    498  f1cb		       a9 10		      LDA	#%00010000	;UP in controller
    499  f1cd		       2c 80 02 	      BIT	SWCHA
    500  f1d0		       d0 33		      BNE	SkipAccelerate
    501  f1d2
    502  f1d2				   IncreaseCarSpeed
    503  f1d2		       a2 02		      LDX	#2
    504  f1d4		       a4 a9		      LDY	CurrentCarId
    505  f1d6				   IncreaseCarSpeedLoop
    506  f1d6							;Adds speed
    507  f1d6		       18		      CLC
    508  f1d7		       a5 aa		      LDA	AccelerateBuffer
    509  f1d9		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    510  f1dc		       85 aa		      STA	AccelerateBuffer
    511  f1de		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    512  f1e0		       e6 8e		      INC	Player0SpeedL
    513  f1e2		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    514  f1e4		       e6 8f		      INC	Player0SpeedH
    515  f1e6				   ContinueIncreaseSpeedLoop
    516  f1e6		       ca		      DEX
    517  f1e7		       d0 ed		      BNE	IncreaseCarSpeedLoop
    518  f1e9				   SkipIncreaseCarSpeed
    519  f1e9
    520  f1e9				   CheckIfAlreadyMaxSpeed
    521  f1e9		       a5 8f		      LDA	Player0SpeedH
    522  f1eb		       c9 02		      CMP	#CAR_MAX_SPEED_H
    523  f1ed		       90 16		      BCC	SkipAccelerate	; less than my max speed
    524  f1ef		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    525  f1f1							;High bit is max, compare the low
    526  f1f1		       a4 a9		      LDY	CurrentCarId
    527  f1f3		       a5 8e		      LDA	Player0SpeedL
    528  f1f5		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    529  f1f8		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    530  f1fa							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    531  f1fa
    532  f1fa				   ResetToMaxSpeed		; Speed is more, or is already max
    533  f1fa		       a9 02		      LDA	#CAR_MAX_SPEED_H
    534  f1fc		       85 8f		      STA	Player0SpeedH
    535  f1fe		       a4 a9		      LDY	CurrentCarId
    536  f200		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    537  f203		       85 8e		      STA	Player0SpeedL
    538  f205				   SkipAccelerate
    539  f205
    540  f205				   InitUpdateOffsets
    541  f205		       a2 00		      LDX	#0	; Memory Offset 24 bit
    542  f207		       a0 00		      LDY	#0	; Line Speeds 16 bits
    543  f209		       a5 91		      LDA	TrafficOffset0 + 1	;
    544  f20b		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    545  f20d		       a5 c5		      LDA	GameMode
    546  f20f		       29 04		      AND	#%00000100	; GameModes with high delta
    547  f211		       f0 02		      BEQ	UpdateOffsets
    548  f213		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    549  f215
    550  f215				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    551  f215		       38		      SEC
    552  f216		       a5 8e		      LDA	Player0SpeedL
    553  f218		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    554  f21b		       85 b0		      STA	Tmp0
    555  f21d		       c8		      INY
    556  f21e		       a5 8f		      LDA	Player0SpeedH
    557  f220		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    558  f223		       85 b1		      STA	Tmp1
    559  f225		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    560  f227		       e9 00		      SBC	#0
    561  f229		       85 b2		      STA	Tmp2
    562  f22b
    563  f22b				   AddsTheResult
    564  f22b		       18		      CLC
    565  f22c		       a5 b0		      LDA	Tmp0
    566  f22e		       75 90		      ADC	TrafficOffset0,X
    567  f230		       95 90		      STA	TrafficOffset0,X
    568  f232		       e8		      INX
    569  f233		       a5 b1		      LDA	Tmp1
    570  f235		       75 90		      ADC	TrafficOffset0,X
    571  f237		       95 90		      STA	TrafficOffset0,X
    572  f239		       e8		      INX
    573  f23a		       a5 b2		      LDA	Tmp2	; Carry
    574  f23c		       75 90		      ADC	TrafficOffset0,X
    575  f23e		       95 90		      STA	TrafficOffset0,X
    576  f240		       90 06		      BCC	CalculateOffsetCache
    577  f242		       e0 02		      CPX	#2	;MSB offset 0
    578  f244		       d0 02		      BNE	CalculateOffsetCache
    579  f246		       e6 bb		      INC	Traffic0Msb
    580  f248
    581  f248				   CalculateOffsetCache
    582  f248		       e8		      INX
    583  f249		       38		      SEC
    584  f24a		       69 00		      ADC	#0	;Increment by one
    585  f24c		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    586  f24e
    587  f24e				   PrepareNextUpdateLoop
    588  f24e		       c8		      INY
    589  f24f		       e8		      INX
    590  f250		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    591  f252		       d0 c1		      BNE	UpdateOffsets
    592  f254
    593  f254				   BcdScore		; 48
    594  f254		       a5 91		      LDA	TrafficOffset0 + 1	;3
    595  f256		       45 b3		      EOR	Tmp3	;3
    596  f258		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    597  f25a		       f0 1b		      BEQ	FinishBcdScore	;2
    598  f25c
    599  f25c				   ContinueBcdScore
    600  f25c		       f8		      SED		;2
    601  f25d		       18		      CLC		;2
    602  f25e		       a5 b4		      LDA	ScoreBcd0	;3
    603  f260		       69 01		      ADC	#1	;2
    604  f262		       85 b4		      STA	ScoreBcd0	;3
    605  f264		       a5 b5		      LDA	ScoreBcd1	;3
    606  f266		       69 00		      ADC	#0	;2
    607  f268		       85 b5		      STA	ScoreBcd1	;3
    608  f26a		       a5 b6		      LDA	ScoreBcd2	;3
    609  f26c		       69 00		      ADC	#0	;2
    610  f26e		       85 b6		      STA	ScoreBcd2	;3
    611  f270		       a5 b7		      LDA	ScoreBcd3	;3
    612  f272		       69 00		      ADC	#0	;2
    613  f274		       85 b7		      STA	ScoreBcd3	;3
    614  f276		       d8		      CLD		;2
    615  f277				   FinishBcdScore
    616  f277
    617  f277							;Until store the movemnt, LDX contains the value to be stored.
    618  f277				   TestCollision		;
    619  f277							; see if player0 colides with the rest
    620  f277		       a5 00		      LDA	CXM0P
    621  f279		       05 01		      ORA	CXM1P
    622  f27b		       05 01		      ORA	CXM1P
    623  f27d		       05 02		      ORA	CXP0FB
    624  f27f		       05 07		      ORA	CXPPMM
    625  f281		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    626  f283		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    627  f285		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    628  f287		       d0 3a		      BNE	NoCollision
    629  f289		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    630  f28b		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    631  f28d		       f0 34		      BEQ	NoCollision
    632  f28f		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    633  f291		       f0 30		      BEQ	NoCollision
    634  f293		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    635  f295		       85 b8		      STA	CollisionCounter	;and store as colision.
    636  f297				   CountBcdColision
    637  f297		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    638  f299		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    639  f29b		       f0 1d		      BEQ	SkipSetColisionSpeedL
    640  f29d		       f8		      SED		;2
    641  f29e		       18		      CLC		;2
    642  f29f		       a5 cb		      LDA	HitCountBcd0	;3
    643  f2a1		       69 01		      ADC	#1	;3
    644  f2a3		       85 cb		      STA	HitCountBcd0	;3
    645  f2a5		       a5 cc		      LDA	HitCountBcd1	;3
    646  f2a7		       69 00		      ADC	#0	;2
    647  f2a9		       85 cc		      STA	HitCountBcd1	;3
    648  f2ab		       d8		      CLD		;2
    649  f2ac				   EndCountBcdColision
    650  f2ac		       a5 8f		      LDA	Player0SpeedH
    651  f2ae		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    652  f2b0		       a9 10		      LDA	#COLLISION_SPEED_L
    653  f2b2		       c5 8e		      CMP	Player0SpeedL
    654  f2b4		       b0 04		      BCS	SkipSetColisionSpeedL
    655  f2b6				   SetColisionSpeedL
    656  f2b6		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    657  f2b8		       85 8e		      STA	Player0SpeedL
    658  f2ba				   SkipSetColisionSpeedL
    659  f2ba		       a9 00		      LDA	#0
    660  f2bc		       85 8f		      STA	Player0SpeedH
    661  f2be		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    662  f2c0		       4c 0e f3 	      JMP	StoreHMove	; We keep position consistent
    663  f2c3				   NoCollision
    664  f2c3
    665  f2c3				   DecrementCollision
    666  f2c3		       a4 b8		      LDY	CollisionCounter
    667  f2c5		       f0 07		      BEQ	FinishDecrementCollision
    668  f2c7		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    669  f2c9		       85 04		      STA	NUSIZ0
    670  f2cb		       88		      DEY
    671  f2cc		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    672  f2ce				   FinishDecrementCollision
    673  f2ce
    674  f2ce				   ResetPlayerSize
    675  f2ce		       d0 04		      BNE	FinishResetPlayerSize
    676  f2d0		       a9 30		      LDA	#%00110000
    677  f2d2		       85 04		      STA	NUSIZ0	;
    678  f2d4				   FinishResetPlayerSize
    679  f2d4
    680  f2d4				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    681  f2d4		       c0 01		      CPY	#1	; Last frame before reset
    682  f2d6		       d0 05		      BNE	SkipResetPlayerPosition
    683  f2d8		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    684  f2da		       4c 0e f3 	      JMP	StoreHMove
    685  f2dd				   SkipResetPlayerPosition
    686  f2dd
    687  f2dd				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    688  f2dd		       a5 a9		      LDA	CurrentCarId
    689  f2df		       c9 03		      CMP	#CAR_ID_DRAGSTER
    690  f2e1		       d0 08		      BNE	PrepareReadXAxis
    691  f2e3		       a2 00		      LDX	#0
    692  f2e5		       a5 8c		      LDA	FrameCount0
    693  f2e7		       29 01		      AND	#DRAGSTER_TURN_MASK
    694  f2e9		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    695  f2eb
    696  f2eb							; for left and right, we're gonna 
    697  f2eb							; set the horizontal speed, and then do
    698  f2eb							; a single HMOVE.  We'll use X to hold the
    699  f2eb							; horizontal speed, then store it in the 
    700  f2eb							; appropriate register
    701  f2eb				   PrepareReadXAxis
    702  f2eb		       a2 00		      LDX	#0
    703  f2ed		       a4 b9		      LDY	Player0X
    704  f2ef				   BeginReadLeft
    705  f2ef		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    706  f2f1		       a9 40		      LDA	#%01000000	;Left
    707  f2f3		       2c 80 02 	      BIT	SWCHA
    708  f2f6		       d0 07		      BNE	SkipMoveLeft
    709  f2f8		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    710  f2fa		       c6 b9		      DEC	Player0X
    711  f2fc		       4c 0e f3 	      JMP	StoreHMove	; Cannot move left and right...
    712  f2ff				   SkipMoveLeft
    713  f2ff				   BeginReadRight
    714  f2ff		       c0 36		      CPY	#PLAYER_0_MAX_X
    715  f301		       f0 0b		      BEQ	SkipMoveRight	; At max already
    716  f303		       a9 80		      LDA	#%10000000	;Right
    717  f305		       2c 80 02 	      BIT	SWCHA
    718  f308		       d0 04		      BNE	SkipMoveRight
    719  f30a		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    720  f30c		       e6 b9		      INC	Player0X
    721  f30e				   SkipMoveRight
    722  f30e				   StoreHMove
    723  f30e		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    724  f310		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    725  f312
    726  f312				   DividePlayerSpeedBy4
    727  f312		       a5 8f		      LDA	Player0SpeedH
    728  f314		       0a		      ASL
    729  f315		       0a		      ASL
    730  f316		       0a		      ASL
    731  f317		       0a		      ASL
    732  f318		       0a		      ASL
    733  f319		       0a		      ASL
    734  f31a		       85 b1		      STA	Tmp1
    735  f31c		       a5 8e		      LDA	Player0SpeedL
    736  f31e		       4a		      LSR
    737  f31f		       4a		      LSR
    738  f320		       29 3f		      AND	#%00111111
    739  f322		       05 b1		      ORA	Tmp1
    740  f324		       85 b0		      STA	Tmp0	; Division Result
    741  f326
    742  f326				   CalculateParallax1Offset		; 3/4 speed
    743  f326		       38		      SEC
    744  f327		       a5 8e		      LDA	Player0SpeedL
    745  f329		       e5 b0		      SBC	Tmp0
    746  f32b		       85 b2		      STA	Tmp2
    747  f32d		       a5 8f		      LDA	Player0SpeedH
    748  f32f		       e9 00		      SBC	#0
    749  f331		       85 b3		      STA	Tmp3
    750  f333
    751  f333		       18		      CLC
    752  f334		       a5 c6		      LDA	ParallaxOffset1
    753  f336		       65 b2		      ADC	Tmp2
    754  f338		       85 c6		      STA	ParallaxOffset1
    755  f33a		       a5 c7		      LDA	ParallaxOffset1 + 1
    756  f33c		       65 b3		      ADC	Tmp3
    757  f33e		       85 c7		      STA	ParallaxOffset1 + 1
    758  f340
    759  f340				   CalculateParallax2Offset		; 2/4 speed
    760  f340		       38		      SEC
    761  f341		       a5 b2		      LDA	Tmp2
    762  f343		       e5 b0		      SBC	Tmp0
    763  f345		       85 b2		      STA	Tmp2
    764  f347		       a5 b3		      LDA	Tmp3
    765  f349		       e9 00		      SBC	#0
    766  f34b		       85 b3		      STA	Tmp3
    767  f34d
    768  f34d		       18		      CLC
    769  f34e		       a5 c8		      LDA	ParallaxOffset2
    770  f350		       65 b2		      ADC	Tmp2
    771  f352		       85 c8		      STA	ParallaxOffset2
    772  f354		       a5 c9		      LDA	ParallaxOffset2 + 1
    773  f356		       65 b3		      ADC	Tmp3
    774  f358		       85 c9		      STA	ParallaxOffset2 + 1
    775  f35a
    776  f35a				   SkipUpdateLogic		; Continue here if not paused
    777  f35a
    778  f35a				   CalculateGear
    779  f35a		       a5 8e		      LDA	Player0SpeedL	;3
    780  f35c		       29 80		      AND	#%10000000	;2
    781  f35e		       05 8f		      ORA	Player0SpeedH	;3
    782  f360		       18		      CLC		;2
    783  f361		       2a		      ROL		;2
    784  f362		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    785  f364		       85 ad		      STA	Gear
    786  f366
    787  f366				   ProcessBorder		;Can be optimized (probably)
    788  f366		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    789  f368		       a5 88		      LDA	ParallaxMode
    790  f36a		       c9 70		      CMP	#%01110000
    791  f36c		       f0 1a		      BEQ	HorizontalParallaxMode
    792  f36e		       c9 d0		      CMP	#%11010000
    793  f370		       f0 0a		      BEQ	VerticalParallaxMode
    794  f372		       c9 b0		      CMP	#%10110000
    795  f374		       f0 0c		      BEQ	TachometerMode
    796  f376
    797  f376				   DefaultBorderMode
    798  f376		       20 76 f8 	      JSR	DefaultBorderLoop
    799  f379		       4c 8b f3 	      JMP	EndProcessingBorder
    800  f37c				   VerticalParallaxMode
    801  f37c		       20 e0 f8 	      JSR	VerticalParallaxLoop
    802  f37f		       4c 8b f3 	      JMP	EndProcessingBorder
    803  f382				   TachometerMode
    804  f382		       20 91 f8 	      JSR	PrepareTachometerBorderLoop
    805  f385		       4c 8b f3 	      JMP	EndProcessingBorder
    806  f388				   HorizontalParallaxMode
    807  f388		       20 28 f8 	      JSR	HorizontalParallaxLoop
    808  f38b
    809  f38b				   EndProcessingBorder
    810  f38b
    811  f38b				   ProcessScoreFontColor
    812  f38b		       a6 d6		      LDX	ScoreFontColorHoldChange
    813  f38d		       f0 06		      BEQ	ResetScoreFontColor
    814  f38f		       ca		      DEX
    815  f390		       86 d6		      STX	ScoreFontColorHoldChange
    816  f392		       4c 99 f3 	      JMP	SkipScoreFontColor
    817  f395				   ResetScoreFontColor
    818  f395		       a9 f9		      LDA	#SCORE_FONT_COLOR
    819  f397		       85 d5		      STA	ScoreFontColor
    820  f399				   SkipScoreFontColor
    821  f399
    822  f399				   IsGameOver
    823  f399		       a5 ba		      LDA	CountdownTimer
    824  f39b		       05 8e		      ORA	Player0SpeedL
    825  f39d		       05 8f		      ORA	Player0SpeedH
    826  f39f		       d0 0b		      BNE	IsCheckpoint
    827  f3a1		       a9 01		      LDA	#1
    828  f3a3		       85 d6		      STA	ScoreFontColorHoldChange
    829  f3a5		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    830  f3a7		       85 d5		      STA	ScoreFontColor
    831  f3a9		       4c ed f3 	      JMP	SkipIsTimeOver
    832  f3ac
    833  f3ac				   IsCheckpoint
    834  f3ac		       a5 d7		      LDA	NextCheckpoint
    835  f3ae		       c5 92		      CMP	TrafficOffset0 + 2
    836  f3b0		       d0 2f		      BNE	SkipIsCheckpoint
    837  f3b2		       18		      CLC
    838  f3b3		       69 10		      ADC	#CHECKPOINT_INTERVAL
    839  f3b5		       85 d7		      STA	NextCheckpoint
    840  f3b7		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    841  f3b9		       85 d5		      STA	ScoreFontColor
    842  f3bb		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    843  f3bd		       85 d6		      STA	ScoreFontColorHoldChange
    844  f3bf				   AddCheckpointBcd
    845  f3bf		       f8		      SED		;2
    846  f3c0		       18		      CLC		;2
    847  f3c1		       a5 a4		      LDA	CheckpointBcd0	;3
    848  f3c3		       69 01		      ADC	#1	;3
    849  f3c5		       85 a4		      STA	CheckpointBcd0	;3
    850  f3c7		       a5 a5		      LDA	CheckpointBcd1	;3
    851  f3c9		       69 00		      ADC	#0	;2
    852  f3cb		       85 a5		      STA	CheckpointBcd1	;3
    853  f3cd		       d8		      CLD		;2
    854  f3ce				   EndCheckpointBcd
    855  f3ce		       a5 ba		      LDA	CountdownTimer
    856  f3d0		       18		      CLC
    857  f3d1		       65 c2		      ADC	CheckpointTime
    858  f3d3		       85 ba		      STA	CountdownTimer
    859  f3d5		       90 04		      BCC	JumpSkipTimeOver
    860  f3d7		       a9 ff		      LDA	#$FF
    861  f3d9		       85 ba		      STA	CountdownTimer	; Does not overflow!
    862  f3db				   JumpSkipTimeOver
    863  f3db		       20 bd f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    864  f3de		       4c ed f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    865  f3e1				   SkipIsCheckpoint
    866  f3e1
    867  f3e1				   IsTimeOver
    868  f3e1		       a5 ba		      LDA	CountdownTimer
    869  f3e3		       d0 08		      BNE	SkipIsTimeOver
    870  f3e5		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    871  f3e7		       85 d6		      STA	ScoreFontColorHoldChange
    872  f3e9		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    873  f3eb		       85 d5		      STA	ScoreFontColor
    874  f3ed				   SkipIsTimeOver
    875  f3ed
    876  f3ed				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
    877  f3ed		       a5 c0		      LDA	GameStatus	;3
    878  f3ef		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
    879  f3f1		       a5 d5		      LDA	ScoreFontColor	;3
    880  f3f3		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
    881  f3f5		       f0 30		      BEQ	EndExactlyEverySecond	;2
    882  f3f7		       c6 cf		      DEC	OneSecondConter	;5
    883  f3f9		       d0 2c		      BNE	EndExactlyEverySecond	;2
    884  f3fb
    885  f3fb		       f8		      SED		;2 BCD Operations after this point
    886  f3fc				   CountGlideTimeBcd
    887  f3fc		       a5 d5		      LDA	ScoreFontColor	;3
    888  f3fe		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
    889  f400		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
    890  f402		       18		      CLC		;2
    891  f403		       a5 cd		      LDA	GlideTimeBcd0	;3
    892  f405		       69 01		      ADC	#1	;3
    893  f407		       85 cd		      STA	GlideTimeBcd0	;3
    894  f409		       a5 ce		      LDA	GlideTimeBcd1	;3
    895  f40b		       69 00		      ADC	#0	;2
    896  f40d		       85 ce		      STA	GlideTimeBcd1	;3
    897  f40f				   EndCountGlideTimeBcd
    898  f40f				   IncreaseTotalTimerBcd
    899  f40f		       18		      CLC		;2
    900  f410		       a5 bd		      LDA	TimeBcd0	;3
    901  f412		       69 01		      ADC	#1	;2
    902  f414		       85 bd		      STA	TimeBcd0	;3
    903  f416		       a5 be		      LDA	TimeBcd1	;3
    904  f418		       69 00		      ADC	#0	;2
    905  f41a		       85 be		      STA	TimeBcd1	;3
    906  f41c		       a5 bf		      LDA	TimeBcd2	;3
    907  f41e		       69 00		      ADC	#0	;2
    908  f420		       85 bf		      STA	TimeBcd2	;3
    909  f422
    910  f422				   ResetOneSecondCounter
    911  f422		       d8		      CLD		;2
    912  f423		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
    913  f425		       85 cf		      STA	OneSecondConter	;3
    914  f427
    915  f427				   EndExactlyEverySecond
    916  f427
    917  f427				   PrintEasterEggCondition
    918  f427		       a5 8d		      LDA	FrameCount1
    919  f429		       29 38		      AND	#%00111000
    920  f42b		       05 c0		      ORA	GameStatus
    921  f42d		       c9 38		      CMP	#%00111000
    922  f42f		       d0 06		      BNE	ChooseTextSide
    923  f431		       20 34 f9 	      JSR	PrintEasterEgg
    924  f434		       4c 26 f5 	      JMP	RightScoreWriteEnd
    925  f437
    926  f437							;Could be done during on vblank to save this comparisson time (before draw score), 
    927  f437							;but I am saving vblank cycles for now, in case of 2 players.
    928  f437				   ChooseTextSide		; 
    929  f437		       a5 ab		      LDA	TextSide	;3
    930  f439		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    931  f43b		       4c bc f4 	      JMP	RightScoreWrite
    932  f43e
    933  f43e				   LeftScoreWrite
    934  f43e		       a5 d5		      LDA	ScoreFontColor
    935  f440		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    936  f442		       f0 4e		      BEQ	PrintCheckpoint
    937  f444		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    938  f446		       f0 52		      BEQ	PrintStartGame
    939  f448		       a5 c0		      LDA	GameStatus
    940  f44a		       f0 56		      BEQ	PrintHellwayLeft
    941  f44c				   WriteDistance		;Not optimized yet, ugly code.
    942  f44c				   Digit0Distance
    943  f44c		       a5 91		      LDA	TrafficOffset0 + 1	;3
    944  f44e		       4a		      LSR		; 2
    945  f44f		       4a		      LSR		; 2
    946  f450		       4a		      LSR		; 2
    947  f451		       4a		      LSR		; 2
    948  f452		       aa		      TAX		; 2
    949  f453		       bd be fd 	      LDA	FontLookup,X	;4
    950  f456		       85 d3		      STA	ScoreD3	;3
    951  f458
    952  f458				   Digit1Distance
    953  f458		       a5 92		      LDA	TrafficOffset0 + 2	;3
    954  f45a		       29 0f		      AND	#%00001111	;2
    955  f45c		       aa		      TAX		; 2
    956  f45d		       bd be fd 	      LDA	FontLookup,X	;4 
    957  f460		       85 d2		      STA	ScoreD2	;3
    958  f462
    959  f462				   Digit2Distance
    960  f462		       a5 92		      LDA	TrafficOffset0 + 2	;3
    961  f464		       4a		      LSR		; 2
    962  f465		       4a		      LSR		; 2
    963  f466		       4a		      LSR		; 2
    964  f467		       4a		      LSR		; 2
    965  f468		       aa		      TAX		; 2
    966  f469		       bd be fd 	      LDA	FontLookup,X	;4
    967  f46c		       85 d1		      STA	ScoreD1	;3
    968  f46e
    969  f46e				   Digit3Distance
    970  f46e		       a5 bb		      LDA	Traffic0Msb	;3
    971  f470		       29 0f		      AND	#%00001111	;2
    972  f472		       aa		      TAX		; 2
    973  f473		       bd be fd 	      LDA	FontLookup,X	;4 
    974  f476		       85 d0		      STA	ScoreD0	;3
    975  f478
    976  f478				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    977  f478		       a5 bb		      LDA	Traffic0Msb
    978  f47a		       29 f0		      AND	#%11110000	;2
    979  f47c		       d0 07		      BNE	DrawDistanceExtraDigit
    980  f47e		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    981  f480		       85 d4		      STA	ScoreD4	;3
    982  f482		       4c 8f f4 	      JMP	EndDrawDistance
    983  f485				   DrawDistanceExtraDigit
    984  f485		       4a		      LSR		; 2
    985  f486		       4a		      LSR		; 2
    986  f487		       4a		      LSR		; 2
    987  f488		       4a		      LSR		; 2
    988  f489		       aa		      TAX		; 2
    989  f48a		       bd be fd 	      LDA	FontLookup,X	;4
    990  f48d		       85 d4		      STA	ScoreD4	;3
    991  f48f
    992  f48f				   EndDrawDistance
    993  f48f		       4c 26 f5 	      JMP	RightScoreWriteEnd	;3
    994  f492
    995  f492				   PrintCheckpoint
    996  f492		       a2 00		      LDX	#<CheckpointText
    997  f494		       20 0a f8 	      JSR	PrintStaticText
    998  f497		       4c 26 f5 	      JMP	RightScoreWriteEnd	;3
    999  f49a				   PrintStartGame
   1000  f49a		       a2 23		      LDX	#<GoText
   1001  f49c		       20 0a f8 	      JSR	PrintStaticText
   1002  f49f		       4c 26 f5 	      JMP	RightScoreWriteEnd	;3
   1003  f4a2
   1004  f4a2				   PrintHellwayLeft
   1005  f4a2		       a5 8d		      LDA	FrameCount1
   1006  f4a4		       29 01		      AND	#1
   1007  f4a6		       d0 05		      BNE	PrintCreditsLeft
   1008  f4a8		       a2 05		      LDX	#<HellwayLeftText
   1009  f4aa		       4c af f4 	      JMP	PrintGameMode
   1010  f4ad				   PrintCreditsLeft
   1011  f4ad		       a2 0f		      LDX	#<OpbText
   1012  f4af
   1013  f4af				   PrintGameMode
   1014  f4af		       20 0a f8 	      JSR	PrintStaticText
   1015  f4b2		       a6 c5		      LDX	GameMode
   1016  f4b4		       bd be fd 	      LDA	FontLookup,X	;4 
   1017  f4b7		       85 d0		      STA	ScoreD0	;3
   1018  f4b9		       4c 26 f5 	      JMP	RightScoreWriteEnd	;3
   1019  f4bc
   1020  f4bc				   RightScoreWrite
   1021  f4bc		       a5 c0		      LDA	GameStatus
   1022  f4be		       f0 45		      BEQ	PrintHellwayRight
   1023  f4c0		       a5 d5		      LDA	ScoreFontColor
   1024  f4c2		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1025  f4c4		       f0 52		      BEQ	PrintGameOver
   1026  f4c6				   Digit0Timer
   1027  f4c6		       a5 ba		      LDA	CountdownTimer	;3
   1028  f4c8		       29 0f		      AND	#%00001111	;2
   1029  f4ca		       aa		      TAX		; 2
   1030  f4cb		       bd be fd 	      LDA	FontLookup,X	;4 
   1031  f4ce		       85 d1		      STA	ScoreD1	;3
   1032  f4d0
   1033  f4d0				   Digit1Timer
   1034  f4d0		       a5 ba		      LDA	CountdownTimer	;3
   1035  f4d2		       4a		      LSR		; 2
   1036  f4d3		       4a		      LSR		; 2
   1037  f4d4		       4a		      LSR		; 2
   1038  f4d5		       4a		      LSR		; 2
   1039  f4d6		       aa		      TAX		; 2
   1040  f4d7		       bd be fd 	      LDA	FontLookup,X	;4
   1041  f4da		       85 d0		      STA	ScoreD0	;3
   1042  f4dc
   1043  f4dc		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1044  f4de		       85 d2		      STA	ScoreD2	;3
   1045  f4e0
   1046  f4e0				   Digit0Speed
   1047  f4e0		       a5 8e		      LDA	Player0SpeedL
   1048  f4e2		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1049  f4e4		       4a		      LSR		; 2
   1050  f4e5		       4a		      LSR		; 2
   1051  f4e6		       aa		      TAX		; 2
   1052  f4e7		       bd be fd 	      LDA	FontLookup,X	;4
   1053  f4ea		       85 d4		      STA	ScoreD4	;3
   1054  f4ec
   1055  f4ec				   Digit1Speed
   1056  f4ec		       a5 8e		      LDA	Player0SpeedL
   1057  f4ee		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1058  f4f0		       18		      CLC
   1059  f4f1		       2a		      ROL		;First goes into carry
   1060  f4f2		       2a		      ROL
   1061  f4f3		       2a		      ROL
   1062  f4f4		       85 b0		      STA	Tmp0
   1063  f4f6		       a5 8f		      LDA	Player0SpeedH
   1064  f4f8		       0a		      ASL
   1065  f4f9		       0a		      ASL
   1066  f4fa		       05 b0		      ORA	Tmp0
   1067  f4fc		       aa		      TAX		; 2
   1068  f4fd		       bd be fd 	      LDA	FontLookup,X	;4
   1069  f500		       85 d3		      STA	ScoreD3	;3
   1070  f502		       4c 26 f5 	      JMP	RightScoreWriteEnd
   1071  f505
   1072  f505				   PrintHellwayRight
   1073  f505		       a5 8d		      LDA	FrameCount1
   1074  f507		       29 01		      AND	#1
   1075  f509		       d0 05		      BNE	PrintCreditsRight
   1076  f50b		       a2 0a		      LDX	#<HellwayRightText
   1077  f50d		       4c 12 f5 	      JMP	PrintRightIntro
   1078  f510				   PrintCreditsRight
   1079  f510		       a2 14		      LDX	#<YearText
   1080  f512				   PrintRightIntro
   1081  f512		       20 0a f8 	      JSR	PrintStaticText
   1082  f515		       4c 26 f5 	      JMP	RightScoreWriteEnd
   1083  f518				   PrintGameOver
   1084  f518		       a5 8c		      LDA	FrameCount0
   1085  f51a		       30 05		      BMI	PrintOverText
   1086  f51c		       a2 19		      LDX	#<GameText
   1087  f51e		       4c 23 f5 	      JMP	StoreGameOverText
   1088  f521				   PrintOverText
   1089  f521		       a2 1e		      LDX	#<OverText
   1090  f523				   StoreGameOverText
   1091  f523		       20 0a f8 	      JSR	PrintStaticText
   1092  f526				   RightScoreWriteEnd
   1093  f526
   1094  f526
   1095  f526				   ScoreBackgroundColor
   1096  f526		       a2 00		      LDX	#0
   1097  f528		       ad 82 02 	      LDA	SWCHB
   1098  f52b		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1099  f52d		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1100  f52f		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1101  f531		       a2 03		      LDX	#BACKGROUND_COLOR
   1102  f533				   BlackAndWhiteScoreBg
   1103  f533		       85 b2		      STA	Tmp2	; Score Background
   1104  f535		       86 b3		      STX	Tmp3	; Traffic Background
   1105  f537
   1106  f537				   ConfigurePFForScore
   1107  f537							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1108  f537		       85 09		      STA	COLUBK
   1109  f539		       20 7f f7 	      JSR	ClearAll
   1110  f53c		       a9 02		      LDA	#%00000010	; Score mode
   1111  f53e		       85 0a		      STA	CTRLPF
   1112  f540		       a5 ab		      LDA	TextSide	;3
   1113  f542		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1114  f544				   LeftScoreOn
   1115  f544		       a5 d5		      LDA	ScoreFontColor
   1116  f546		       85 07		      STA	COLUP1
   1117  f548		       a5 b2		      LDA	Tmp2
   1118  f54a		       85 06		      STA	COLUP0
   1119  f54c		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1120  f54e		       85 b1		      STA	Tmp1
   1121  f550		       4c 5f f5 	      JMP	CallWaitForVblankEnd
   1122  f553				   RightScoreOn
   1123  f553		       a5 d5		      LDA	ScoreFontColor
   1124  f555		       85 06		      STA	COLUP0
   1125  f557		       a5 b2		      LDA	Tmp2
   1126  f559		       85 07		      STA	COLUP1
   1127  f55b		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1128  f55d		       85 b1		      STA	Tmp1
   1129  f55f
   1130  f55f							; After here we are going to update the screen, No more heavy code
   1131  f55f				   CallWaitForVblankEnd
   1132  f55f		       20 a4 fb 	      JSR	WaitForVblankEnd
   1133  f562
   1134  f562				   DrawScoreHud
   1135  f562		       20 a6 f9 	      JSR	PrintScore
   1136  f565
   1137  f565		       85 02		      STA	WSYNC
   1138  f567
   1139  f567		       a5 0c		      LDA	INPT4	;3
   1140  f569		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1141  f56b		       a5 d5		      LDA	ScoreFontColor
   1142  f56d		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1143  f56f		       d0 0a		      BNE	WaitAnotherScoreLine
   1144  f571		       a5 ab		      LDA	TextSide	;3
   1145  f573		       d0 03		      BNE	LeftScoreOnGameOver
   1146  f575		       4c 31 fb 	      JMP	DrawGameOverScreenRight
   1147  f578				   LeftScoreOnGameOver
   1148  f578		       4c 63 fa 	      JMP	DrawGameOverScreenLeft
   1149  f57b
   1150  f57b				   WaitAnotherScoreLine
   1151  f57b		       85 02		      STA	WSYNC
   1152  f57d
   1153  f57d				   PrepareForTraffic
   1154  f57d		       20 91 f7 	      JSR	ClearPF	; 32
   1155  f580
   1156  f580		       85 02		      STA	WSYNC
   1157  f582		       85 02		      STA	WSYNC
   1158  f584
   1159  f584		       a9 31		      LDA	#%00110001	; 2 Score mode
   1160  f586		       85 0a		      STA	CTRLPF	;3
   1161  f588
   1162  f588		       a5 c3		      LDA	TrafficColor	;3
   1163  f58a		       85 08		      STA	COLUPF	;3
   1164  f58c
   1165  f58c		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1166  f58e		       85 07		      STA	COLUP1	;3
   1167  f590
   1168  f590		       a5 d5		      LDA	ScoreFontColor	;3
   1169  f592		       85 06		      STA	COLUP0	;3
   1170  f594
   1171  f594		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1172  f596
   1173  f596		       20 91 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1174  f599
      0  f599					      SLEEP	14
      1  f599				   .CYCLES    SET	14
      2  f599
      3  f599				  -	      IF	.CYCLES < 2
      4  f599				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f599				  -	      ERR
      6  f599					      ENDIF
      7  f599
      8  f599				  -	      IF	.CYCLES & 1
      9  f599				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f599				  -	      nop	0
     11  f599				  -	      ELSE
     12  f599				  -	      bit	VSYNC
     13  f599				  -	      ENDIF
     14  f599				  -.CYCLES    SET	.CYCLES - 3
     15  f599					      ENDIF
     16  f599
     17  f599					      REPEAT	.CYCLES / 2
     18  f599		       ea		      nop
     17  f599					      REPEND
     18  f59a		       ea		      nop
     17  f59a					      REPEND
     18  f59b		       ea		      nop
     17  f59b					      REPEND
     18  f59c		       ea		      nop
     17  f59c					      REPEND
     18  f59d		       ea		      nop
     17  f59d					      REPEND
     18  f59e		       ea		      nop
     17  f59e					      REPEND
     18  f59f		       ea		      nop
     19  f5a0					      REPEND
   1176  f5a0
   1177  f5a0		       a5 b3		      LDA	Tmp3	;3
   1178  f5a2		       85 09		      STA	COLUBK	;3
   1179  f5a4		       4c a9 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1180  f5a7							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1181  f5a7
   1182  f5a7							;main scanline loop...
   1183  f5a7				   ScanLoop
   1184  f5a7		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1185  f5a9
   1186  f5a9							;Start of next line!			
   1187  f5a9				   DrawCache		;63 Is the last line going to the top of the next frame?
   1188  f5a9		       a5 81		      LDA	PF0Cache	;3
   1189  f5ab		       85 0d		      STA	PF0	;3
   1190  f5ad
   1191  f5ad		       a5 82		      LDA	PF1Cache	;3
   1192  f5af		       85 0e		      STA	PF1	;3
   1193  f5b1
   1194  f5b1		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1195  f5b3		       b0 04		      BCS	SkipDrawCar	;2
   1196  f5b5		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1197  f5b7		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1198  f5b9				   SkipDrawCar
   1199  f5b9
   1200  f5b9		       a5 84		      LDA	GRP1Cache	;3
   1201  f5bb		       85 1c		      STA	GRP1	;3
   1202  f5bd
   1203  f5bd		       a5 85		      LDA	ENABLCache	;3
   1204  f5bf		       85 1f		      STA	ENABL	;3
   1205  f5c1
   1206  f5c1		       a5 86		      LDA	ENAM0Cache	;3
   1207  f5c3		       85 1d		      STA	ENAM0	;3
   1208  f5c5
   1209  f5c5		       a5 87		      LDA	ENAM1Cache	;3
   1210  f5c7		       85 1e		      STA	ENAM1	;3
   1211  f5c9
   1212  f5c9		       a9 00		      LDA	#0	;2
   1213  f5cb							;STA PF1Cache ;3
   1214  f5cb		       85 84		      STA	GRP1Cache	;3
   1215  f5cd		       85 85		      STA	ENABLCache	;3
   1216  f5cf		       85 86		      STA	ENAM0Cache	;3
   1217  f5d1		       85 87		      STA	ENAM1Cache	; 3
   1218  f5d3
   1219  f5d3							;BEQ DrawTraffic3
   1220  f5d3				   DrawTraffic1 		; 33
   1221  f5d3		       98		      TYA		; 2
   1222  f5d4		       18		      CLC		; 2 
   1223  f5d5		       65 95		      ADC	TrafficOffset1 + 1	;3
   1224  f5d7		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1225  f5d9		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1226  f5db		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1227  f5dd		       4c e2 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1228  f5e0				   EorOffsetWithCarry
   1229  f5e0		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1230  f5e2				   AfterEorOffsetWithCarry		;17
   1231  f5e2		       aa		      TAX		;2
   1232  f5e3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1233  f5e6		       c5 c1		      CMP	TrafficChance	;3
   1234  f5e8		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1235  f5ea		       a9 ff		      LDA	#$FF	;2
   1236  f5ec		       85 84		      STA	GRP1Cache	;3
   1237  f5ee				   FinishDrawTraffic1
   1238  f5ee
   1239  f5ee				   DrawTraffic2 		; 33
   1240  f5ee		       98		      TYA		; 2
   1241  f5ef		       18		      CLC		; 2 
   1242  f5f0		       65 99		      ADC	TrafficOffset2 + 1	;3
   1243  f5f2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1244  f5f4		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1245  f5f6		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1246  f5f8		       4c fd f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1247  f5fb				   EorOffsetWithCarry2
   1248  f5fb		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1249  f5fd				   AfterEorOffsetWithCarry2		;17
   1250  f5fd		       aa		      TAX		;2
   1251  f5fe		       bd 00 fe 	      LDA	AesTable,X	; 4
   1252  f601		       c5 c1		      CMP	TrafficChance	;3
   1253  f603		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1254  f605		       a9 02		      LDA	#%00000010	;2
   1255  f607		       85 85		      STA	ENABLCache	;3
   1256  f609				   FinishDrawTraffic2
   1257  f609
   1258  f609							;STA WSYNC ;65 / 137
   1259  f609
   1260  f609							; LDA Tmp0 ; Flicker this line if drawing car
   1261  f609							; BEQ FinishDrawTraffic4
   1262  f609				   DrawTraffic3 		; 33
   1263  f609		       98		      TYA		; 2
   1264  f60a		       18		      CLC		; 2 
   1265  f60b		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1266  f60d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1267  f60f		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1268  f611		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1269  f613		       4c 18 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1270  f616				   EorOffsetWithCarry3
   1271  f616		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1272  f618				   AfterEorOffsetWithCarry3		;17
   1273  f618		       aa		      TAX		;2
   1274  f619		       bd 00 fe 	      LDA	AesTable,X	; 4
   1275  f61c		       c5 c1		      CMP	TrafficChance	;3
   1276  f61e		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1277  f620		       a9 02		      LDA	#%00000010	;2
   1278  f622		       85 86		      STA	ENAM0Cache
   1279  f624				   FinishDrawTraffic3
   1280  f624
   1281  f624				   DrawTraffic4 		; 33
   1282  f624		       98		      TYA		; 2
   1283  f625		       18		      CLC		; 2 
   1284  f626		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1285  f628		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1286  f62a		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1287  f62c		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1288  f62e		       4c 33 f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1289  f631				   EorOffsetWithCarry4
   1290  f631		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1291  f633				   AfterEorOffsetWithCarry4		;17
   1292  f633		       aa		      TAX		;2
   1293  f634		       bd 00 fe 	      LDA	AesTable,X	; 4
   1294  f637		       c5 c1		      CMP	TrafficChance	;3
   1295  f639		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1296  f63b		       a9 02		      LDA	#%00000010	;2
   1297  f63d		       85 87		      STA	ENAM1Cache	;3
   1298  f63f				   FinishDrawTraffic4
   1299  f63f
   1300  f63f				   DrawTraffic0 		; 20
   1301  f63f		       98		      TYA		;2
   1302  f640		       29 07		      AND	#%00000111	;2
   1303  f642		       aa		      TAX		;2
   1304  f643		       b5 d8		      LDA	ParallaxCache,X	;4
   1305  f645		       85 82		      STA	PF1Cache	;3
   1306  f647		       b5 f0		      LDA	ParallaxCache2,X	;4
   1307  f649		       85 81		      STA	PF0Cache	;3
   1308  f64b
   1309  f64b				   SkipDrawTraffic0
   1310  f64b
   1311  f64b				   WhileScanLoop
   1312  f64b		       88		      DEY		;2
   1313  f64c		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1314  f64e		       4c a7 f5 	      JMP	ScanLoop	;3
   1315  f651				   FinishScanLoop		; 7 209 of 222
   1316  f651
   1317  f651		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1318  f653		       20 a0 f7 	      JSR	LoadAll
   1319  f656		       85 02		      STA	WSYNC	; do stuff!
   1320  f658		       85 02		      STA	WSYNC
   1321  f65a		       85 02		      STA	WSYNC
   1322  f65c							;42 cycles to use here
   1323  f65c
   1324  f65c				   PrepareOverscan
   1325  f65c		       a9 02		      LDA	#2
   1326  f65e		       85 02		      STA	WSYNC
   1327  f660		       85 01		      STA	VBLANK
   1328  f662
   1329  f662		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1330  f664		       8d 96 02 	      STA	TIM64T
   1331  f667
   1332  f667				   LeftSound		;41
   1333  f667		       a5 ba		      LDA	CountdownTimer	;3
   1334  f669		       f0 1b		      BEQ	EngineOff	;2
   1335  f66b		       a6 ad		      LDX	Gear
   1336  f66d		       a5 8e		      LDA	Player0SpeedL	;3
   1337  f66f		       4a		      LSR		;2
   1338  f670		       4a		      LSR		;2
   1339  f671		       4a		      LSR		;2
   1340  f672		       29 0f		      AND	#%00001111	;2
   1341  f674		       85 b0		      STA	Tmp0	;3
   1342  f676		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1343  f679		       38		      SEC		;2
   1344  f67a		       e5 b0		      SBC	Tmp0	;3
   1345  f67c		       85 17		      STA	AUDF0	;3
   1346  f67e		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1347  f681		       85 15		      STA	AUDC0	;3
   1348  f683		       4c 8a f6 	      JMP	EndLeftSound	;3
   1349  f686				   EngineOff
   1350  f686		       a9 00		      LDA	#0
   1351  f688		       85 15		      STA	AUDC0
   1352  f68a
   1353  f68a				   EndLeftSound
   1354  f68a
   1355  f68a
   1356  f68a				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1357  f68a		       a5 d5		      LDA	ScoreFontColor	;3
   1358  f68c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1359  f68e		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1360  f690		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1361  f692		       f0 29		      BEQ	PlayCheckpoint	;2
   1362  f694		       a5 b8		      LDA	CollisionCounter	;3
   1363  f696		       c9 e0		      CMP	#$E0	;2
   1364  f698		       b0 14		      BCS	PlayColision	;2
   1365  f69a		       a5 d7		      LDA	NextCheckpoint	;3
   1366  f69c		       38		      SEC		;2
   1367  f69d		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1368  f69f		       c9 02		      CMP	#$02	;2
   1369  f6a1		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1370  f6a3		       a5 ba		      LDA	CountdownTimer	; 3
   1371  f6a5		       f0 53		      BEQ	MuteRightSound	;2
   1372  f6a7		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1373  f6a9		       90 37		      BCC	PlayWarnTimeEnding	;4
   1374  f6ab		       4c fa f6 	      JMP	MuteRightSound	;3
   1375  f6ae				   PlayColision
   1376  f6ae		       a9 1f		      LDA	#31
   1377  f6b0		       85 18		      STA	AUDF1
   1378  f6b2		       a9 08		      LDA	#8
   1379  f6b4		       85 16		      STA	AUDC1
   1380  f6b6		       a9 08		      LDA	#8
   1381  f6b8		       85 1a		      STA	AUDV1
   1382  f6ba		       4c fe f6 	      JMP	EndRightSound
   1383  f6bd
   1384  f6bd				   PlayCheckpoint
   1385  f6bd		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1386  f6bf		       4a		      LSR		;2
   1387  f6c0		       4a		      LSR		;2
   1388  f6c1		       4a		      LSR		;2
   1389  f6c2		       85 18		      STA	AUDF1	;3
   1390  f6c4		       a9 0c		      LDA	#12	;2
   1391  f6c6		       85 16		      STA	AUDC1	;3
   1392  f6c8		       a9 06		      LDA	#6	;2
   1393  f6ca		       85 1a		      STA	AUDV1	;3
   1394  f6cc		       4c fe f6 	      JMP	EndRightSound	;3
   1395  f6cf
   1396  f6cf				   PlayBeforeCheckpoint
   1397  f6cf		       a5 8c		      LDA	FrameCount0	;3
   1398  f6d1		       29 1c		      AND	#%00011100	;2
   1399  f6d3		       09 03		      ORA	#%00000011	;2
   1400  f6d5		       85 18		      STA	AUDF1	;3
   1401  f6d7		       a9 0c		      LDA	#12	;2
   1402  f6d9		       85 16		      STA	AUDC1	;3
   1403  f6db		       a9 03		      LDA	#3	;2
   1404  f6dd		       85 1a		      STA	AUDV1	;3
   1405  f6df		       4c fe f6 	      JMP	EndRightSound	;3
   1406  f6e2
   1407  f6e2				   PlayWarnTimeEnding
   1408  f6e2		       a5 8c		      LDA	FrameCount0	;3
   1409  f6e4		       29 04		      AND	#%00000100	;2
   1410  f6e6		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1411  f6e8		       18		      CLC		;2
   1412  f6e9		       a9 0a		      LDA	#10	;2
   1413  f6eb		       65 ba		      ADC	CountdownTimer	;2
   1414  f6ed		       85 18		      STA	AUDF1	;3
   1415  f6ef		       a9 0c		      LDA	#12	;2
   1416  f6f1		       85 16		      STA	AUDC1	;3
   1417  f6f3		       a9 03		      LDA	#3	;2
   1418  f6f5		       85 1a		      STA	AUDV1	;3
   1419  f6f7		       4c fe f6 	      JMP	EndRightSound	;3
   1420  f6fa
   1421  f6fa				   MuteRightSound
   1422  f6fa		       a9 00		      LDA	#0
   1423  f6fc		       85 1a		      STA	AUDV1
   1424  f6fe				   EndRightSound
   1425  f6fe
   1426  f6fe							;Read Fire Button before, will make it start the game for now.
   1427  f6fe				   StartGame
   1428  f6fe		       a5 0c		      LDA	INPT4	;3
   1429  f700		       30 2b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1430  f702		       a5 c0		      LDA	GameStatus	;3
   1431  f704		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1432  f706		       d0 25		      BNE	SkipGameStart
   1433  f708		       a5 c5		      LDA	GameMode
   1434  f70a		       c9 10		      CMP	#MAX_GAME_MODE
   1435  f70c		       d0 0b		      BNE	SetGameRunning
   1436  f70e		       a9 00		      LDA	#0
   1437  f710		       85 c5		      STA	GameMode
   1438  f712		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1439  f714		       85 bc		      STA	SwitchDebounceCounter
   1440  f716		       4c 2d f7 	      JMP	SkipGameStart
   1441  f719				   SetGameRunning
   1442  f719		       e6 c0		      INC	GameStatus
   1443  f71b		       a9 00		      LDA	#0	;
   1444  f71d		       85 8c		      STA	FrameCount0
   1445  f71f		       85 8d		      STA	FrameCount1
   1446  f721		       a9 0a		      LDA	#10
   1447  f723		       85 19		      STA	AUDV0
   1448  f725		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1449  f727		       85 d5		      STA	ScoreFontColor
   1450  f729		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1451  f72b		       85 d6		      STA	ScoreFontColorHoldChange
   1452  f72d				   SkipGameStart
   1453  f72d
   1454  f72d				   ReadSwitches
   1455  f72d		       a6 bc		      LDX	SwitchDebounceCounter
   1456  f72f		       d0 3c		      BNE	DecrementSwitchDebounceCounter
   1457  f731		       a9 01		      LDA	#%00000001
   1458  f733		       2c 82 02 	      BIT	SWCHB
   1459  f736		       d0 07		      BNE	SkipReset
   1460  f738		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1461  f73a		       85 bc		      STA	SwitchDebounceCounter
   1462  f73c		       4c 77 f7 	      JMP	OverScanWaitBeforeReset
   1463  f73f				   SkipReset
   1464  f73f
   1465  f73f				   GameModeSelect
   1466  f73f		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1467  f741		       d0 27		      BNE	SkipGameSelect
   1468  f743		       20 cc f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1469  f746				   ReadDpadParallax
   1470  f746		       ad 80 02 	      LDA	SWCHA
   1471  f749		       29 f0		      AND	#%11110000
   1472  f74b		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
   1473  f74d		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
   1474  f74f		       85 88		      STA	ParallaxMode
   1475  f751				   ContinueGameSelect
   1476  f751		       a9 02		      LDA	#%00000010
   1477  f753		       2c 82 02 	      BIT	SWCHB
   1478  f756		       d0 12		      BNE	SkipGameSelect
   1479  f758		       a6 c5		      LDX	GameMode
   1480  f75a		       e0 10		      CPX	#MAX_GAME_MODE
   1481  f75c		       f0 04		      BEQ	ResetGameMode
   1482  f75e		       e8		      INX
   1483  f75f		       4c 64 f7 	      JMP	StoreGameMode
   1484  f762				   ResetGameMode
   1485  f762		       a2 00		      LDX	#0
   1486  f764				   StoreGameMode
   1487  f764		       86 c5		      STX	GameMode
   1488  f766		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1489  f768		       85 bc		      STA	SwitchDebounceCounter
   1490  f76a				   SkipGameSelect
   1491  f76a		       4c 6f f7 	      JMP	EndReadSwitches
   1492  f76d				   DecrementSwitchDebounceCounter
   1493  f76d		       c6 bc		      DEC	SwitchDebounceCounter
   1494  f76f				   EndReadSwitches
   1495  f76f
   1496  f76f				   OverScanWait
   1497  f76f		       ad 84 02 	      LDA	INTIM
   1498  f772		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1499  f774		       4c d8 f0 	      JMP	MainLoop
   1500  f777
   1501  f777				   OverScanWaitBeforeReset
   1502  f777		       ad 84 02 	      LDA	INTIM
   1503  f77a		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1504  f77c		       4c 14 f0 	      JMP	Start
   1505  f77f
   1506  f77f				   Subroutines
   1507  f77f
   1508  f77f				   ClearAll		; 52
   1509  f77f		       a9 00		      LDA	#0	;2
   1510  f781		       85 1c		      STA	GRP1	;3
   1511  f783		       85 1f		      STA	ENABL	;3
   1512  f785		       85 1d		      STA	ENAM0	;3
   1513  f787		       85 1e		      STA	ENAM1	;3
   1514  f789		       85 84		      STA	GRP1Cache	;3
   1515  f78b		       85 85		      STA	ENABLCache	;3
   1516  f78d		       85 86		      STA	ENAM0Cache	;3
   1517  f78f		       85 87		      STA	ENAM1Cache	;3
   1518  f791
   1519  f791				   ClearPF		; 26
   1520  f791		       a9 00		      LDA	#0	;2
   1521  f793				   ClearPFSkipLDA0
   1522  f793		       85 0d		      STA	PF0	;3
   1523  f795		       85 0e		      STA	PF1	;3
   1524  f797		       85 0f		      STA	PF2	;3	
   1525  f799		       85 81		      STA	PF0Cache	;3
   1526  f79b		       85 82		      STA	PF1Cache	;3
   1527  f79d		       85 83		      STA	PF2Cache	;3 
   1528  f79f		       60		      RTS		;6
   1529  f7a0				   EndClearAll
   1530  f7a0
   1531  f7a0				   LoadAll		; 48
   1532  f7a0		       a5 81		      LDA	PF0Cache	;3
   1533  f7a2		       85 0d		      STA	PF0	;3
   1534  f7a4
   1535  f7a4		       a5 82		      LDA	PF1Cache	;3
   1536  f7a6		       85 0e		      STA	PF1	;3
   1537  f7a8
   1538  f7a8		       a5 83		      LDA	PF2Cache	;3
   1539  f7aa		       85 0f		      STA	PF2	;3
   1540  f7ac
   1541  f7ac		       a5 84		      LDA	GRP1Cache	;3
   1542  f7ae		       85 1c		      STA	GRP1	;3
   1543  f7b0
   1544  f7b0		       a5 85		      LDA	ENABLCache	;3
   1545  f7b2		       85 1f		      STA	ENABL	;3
   1546  f7b4
   1547  f7b4		       a5 86		      LDA	ENAM0Cache	;3
   1548  f7b6		       85 1d		      STA	ENAM0	;3
   1549  f7b8
   1550  f7b8		       a5 87		      LDA	ENAM1Cache	;3
   1551  f7ba		       85 1e		      STA	ENAM1	;3
   1552  f7bc
   1553  f7bc		       60		      RTS		;6
   1554  f7bd				   EndLoadAll
   1555  f7bd
   1556  f7bd				   NextDifficulty
   1557  f7bd		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1558  f7bf		       29 01		      AND	#%00000001
   1559  f7c1		       d0 24		      BNE	CheckRandomDifficulty
   1560  f7c3
   1561  f7c3		       a5 c4		      LDA	CurrentDifficulty
   1562  f7c5		       18		      CLC
   1563  f7c6		       69 01		      ADC	#1
   1564  f7c8		       29 03		      AND	#%00000011	; 0 to 3
   1565  f7ca		       85 c4		      STA	CurrentDifficulty
   1566  f7cc
   1567  f7cc				   ConfigureDifficulty
   1568  f7cc		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1569  f7ce		       b9 e7 ff 	      LDA	TrafficChanceTable,Y
   1570  f7d1		       85 c1		      STA	TrafficChance
   1571  f7d3		       b9 e3 ff 	      LDA	TrafficColorTable,Y
   1572  f7d6		       85 c3		      STA	TrafficColor
   1573  f7d8
   1574  f7d8		       a5 c5		      LDA	GameMode	;
   1575  f7da		       29 01		      AND	#%00000001
   1576  f7dc		       f0 03		      BEQ	UseNextDifficultyTime
   1577  f7de		       4c e2 f7 	      JMP	StoreDifficultyTime
   1578  f7e1				   UseNextDifficultyTime
   1579  f7e1		       c8		      INY
   1580  f7e2				   StoreDifficultyTime
   1581  f7e2		       b9 eb ff 	      LDA	TrafficTimeTable,Y
   1582  f7e5		       85 c2		      STA	CheckpointTime
   1583  f7e7
   1584  f7e7				   CheckRandomDifficulty
   1585  f7e7		       a5 c5		      LDA	GameMode
   1586  f7e9		       29 08		      AND	#%00001000	; Random difficulties
   1587  f7eb		       f0 09		      BEQ	ReturnFromNextDifficulty
   1588  f7ed				   RandomDifficulty
   1589  f7ed		       a6 8c		      LDX	FrameCount0
   1590  f7ef		       bd 00 fe 	      LDA	AesTable,X
   1591  f7f2							;EOR TrafficChance, no need, lets make life simple
   1592  f7f2		       29 3f		      AND	#%00111111
   1593  f7f4		       85 c1		      STA	TrafficChance
   1594  f7f6
   1595  f7f6				   ReturnFromNextDifficulty
   1596  f7f6		       60		      RTS
   1597  f7f7				   EndNextDifficulty
   1598  f7f7
   1599  f7f7				   DefaultOffsets
   1600  f7f7		       a9 20		      LDA	#$20
   1601  f7f9		       85 96		      STA	TrafficOffset1 + 2
   1602  f7fb		       a9 40		      LDA	#$40
   1603  f7fd		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1604  f7ff		       a9 60		      LDA	#$60
   1605  f801		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1606  f803		       a9 80		      LDA	#$80
   1607  f805		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1608  f807		       a9 a0		      LDA	#$A0
   1609  f809		       60		      RTS
   1610  f80a
   1611  f80a				   PrintStaticText		; Preload X with the offset referent to StaticText
   1612  f80a		       bd 00 ff 	      LDA	StaticText,X
   1613  f80d		       85 d0		      STA	ScoreD0
   1614  f80f		       e8		      INX
   1615  f810		       bd 00 ff 	      LDA	StaticText,X
   1616  f813		       85 d1		      STA	ScoreD1
   1617  f815		       e8		      INX
   1618  f816		       bd 00 ff 	      LDA	StaticText,X
   1619  f819		       85 d2		      STA	ScoreD2
   1620  f81b		       e8		      INX
   1621  f81c		       bd 00 ff 	      LDA	StaticText,X
   1622  f81f		       85 d3		      STA	ScoreD3
   1623  f821		       e8		      INX
   1624  f822		       bd 00 ff 	      LDA	StaticText,X
   1625  f825		       85 d4		      STA	ScoreD4
   1626  f827		       60		      RTS
   1627  f828
   1628  f828				   HorizontalParallaxLoop
   1629  f828		       a9 ef		      LDA	#%11101111	; Clear the house
   1630  f82a		       39 d8 00 	      AND	ParallaxCache,Y
   1631  f82d		       99 d8 00 	      STA	ParallaxCache,Y
   1632  f830				   CalculateParallax0
   1633  f830		       98		      TYA
   1634  f831		       18		      CLC
   1635  f832		       65 91		      ADC	TrafficOffset0 + 1
   1636  f834		       29 04		      AND	#%00000100
   1637  f836		       f0 08		      BEQ	HasEmptySpace0
   1638  f838				   HasBorder0
   1639  f838		       b9 d8 00 	      LDA	ParallaxCache,Y
   1640  f83b		       09 0f		      ORA	#%00001111
   1641  f83d		       4c 45 f8 	      JMP	StoreParallax0
   1642  f840				   HasEmptySpace0
   1643  f840		       b9 d8 00 	      LDA	ParallaxCache,Y
   1644  f843		       29 f0		      AND	#%11110000
   1645  f845
   1646  f845				   StoreParallax0
   1647  f845		       99 d8 00 	      STA	ParallaxCache,Y
   1648  f848
   1649  f848				   CalculateParallax1
   1650  f848		       98		      TYA
   1651  f849		       18		      CLC
   1652  f84a		       65 c7		      ADC	ParallaxOffset1 + 1
   1653  f84c		       29 04		      AND	#%00000100
   1654  f84e		       f0 08		      BEQ	HasEmptySpace1
   1655  f850				   HasBorder1
   1656  f850		       b9 d8 00 	      LDA	ParallaxCache,Y
   1657  f853		       09 e0		      ORA	#%11100000
   1658  f855		       4c 5d f8 	      JMP	StoreParallax1
   1659  f858				   HasEmptySpace1
   1660  f858		       b9 d8 00 	      LDA	ParallaxCache,Y
   1661  f85b		       29 1f		      AND	#%00011111
   1662  f85d
   1663  f85d				   StoreParallax1
   1664  f85d		       99 d8 00 	      STA	ParallaxCache,Y
   1665  f860
   1666  f860				   CalculateParallax2
   1667  f860		       98		      TYA
   1668  f861		       18		      CLC
   1669  f862		       65 c9		      ADC	ParallaxOffset2 + 1
   1670  f864		       29 04		      AND	#%00000100
   1671  f866		       f0 05		      BEQ	HasEmptySpace2
   1672  f868				   HasBorder2
   1673  f868		       a9 60		      LDA	#%01100000
   1674  f86a		       4c 6f f8 	      JMP	StoreParallax2
   1675  f86d				   HasEmptySpace2
   1676  f86d		       a9 00		      LDA	#0
   1677  f86f
   1678  f86f				   StoreParallax2
   1679  f86f		       99 f0 00 	      STA	ParallaxCache2,Y
   1680  f872
   1681  f872				   ContinueHorizontalParallaxLoop
   1682  f872		       88		      DEY
   1683  f873		       10 b3		      BPL	HorizontalParallaxLoop
   1684  f875		       60		      RTS
   1685  f876
   1686  f876				   DefaultBorderLoop
   1687  f876				   CalculateDefaultBorder
   1688  f876		       98		      TYA
   1689  f877		       18		      CLC
   1690  f878		       65 91		      ADC	TrafficOffset0 + 1
   1691  f87a		       29 04		      AND	#%00000100
   1692  f87c		       f0 05		      BEQ	HasEmptySpace
   1693  f87e				   HasBorder
   1694  f87e		       a9 ff		      LDA	#$FF
   1695  f880		       4c 85 f8 	      JMP	StoreBorder
   1696  f883				   HasEmptySpace
   1697  f883		       a9 00		      LDA	#0
   1698  f885
   1699  f885				   StoreBorder
   1700  f885		       99 d8 00 	      STA	ParallaxCache,Y
   1701  f888		       a9 00		      LDA	#0
   1702  f88a		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1703  f88d
   1704  f88d				   ContinueDefaultBorderLoop
   1705  f88d		       88		      DEY
   1706  f88e		       10 e6		      BPL	DefaultBorderLoop
   1707  f890		       60		      RTS
   1708  f891
   1709  f891				   PrepareTachometerBorderLoop
   1710  f891		       a5 8e		      LDA	Player0SpeedL
   1711  f893		       4a		      LSR
   1712  f894		       4a		      LSR
   1713  f895		       4a		      LSR
   1714  f896		       4a		      LSR
   1715  f897		       29 07		      AND	#%00000111
   1716  f899		       85 b1		      STA	Tmp1	; RPM
   1717  f89b		       a6 a9		      LDX	CurrentCarId	; Y cannot be destroyed here
   1718  f89d		       bd d9 ff 	      LDA	CarIdToMaxGear,X
   1719  f8a0		       85 b2		      STA	Tmp2	; Max Gear
   1720  f8a2
   1721  f8a2				   TachometerBorderLoop
   1722  f8a2		       98		      TYA
   1723  f8a3		       18		      CLC
   1724  f8a4		       65 91		      ADC	TrafficOffset0 + 1
   1725  f8a6		       29 04		      AND	#%00000100
   1726  f8a8		       f0 10		      BEQ	HasBorderTac
   1727  f8aa		       a6 ad		      LDX	Gear
   1728  f8ac		       bd eb fd 	      LDA	TachometerGearLookup,X
   1729  f8af		       99 d8 00 	      STA	ParallaxCache,Y
   1730  f8b2		       a9 00		      LDA	#0
   1731  f8b4		       99 f0 00 	      STA	ParallaxCache2,Y
   1732  f8b7		       4c dc f8 	      JMP	ContinueBorderTac
   1733  f8ba				   HasBorderTac
   1734  f8ba		       a5 b2		      LDA	Tmp2	; Max Gear
   1735  f8bc		       c5 ad		      CMP	Gear	; Only on max speed
   1736  f8be		       f0 11		      BEQ	FullBorderTac
   1737  f8c0		       a6 b1		      LDX	Tmp1
   1738  f8c2		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1739  f8c5		       99 d8 00 	      STA	ParallaxCache,Y
   1740  f8c8		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1741  f8cb		       99 f0 00 	      STA	ParallaxCache2,Y
   1742  f8ce		       4c dc f8 	      JMP	ContinueBorderTac
   1743  f8d1
   1744  f8d1				   FullBorderTac
   1745  f8d1		       a9 ff		      LDA	#$FF
   1746  f8d3		       99 d8 00 	      STA	ParallaxCache,Y
   1747  f8d6		       99 f0 00 	      STA	ParallaxCache2,Y
   1748  f8d9		       4c dc f8 	      JMP	ContinueBorderTac
   1749  f8dc
   1750  f8dc				   ContinueBorderTac
   1751  f8dc		       88		      DEY
   1752  f8dd		       10 c3		      BPL	TachometerBorderLoop
   1753  f8df		       60		      RTS
   1754  f8e0
   1755  f8e0				   VerticalParallaxLoop
   1756  f8e0				   CalculateVerticalParallax0
   1757  f8e0		       98		      TYA
   1758  f8e1		       18		      CLC
   1759  f8e2		       65 91		      ADC	TrafficOffset0 + 1
   1760  f8e4		       29 06		      AND	#%00000110
   1761  f8e6		       d0 0b		      BNE	HasNoVerticalLine0
   1762  f8e8				   HasVerticalLine0
   1763  f8e8		       a9 ff		      LDA	#$FF
   1764  f8ea		       99 d8 00 	      STA	ParallaxCache,Y
   1765  f8ed		       99 f0 00 	      STA	ParallaxCache2,Y
   1766  f8f0		       4c 30 f9 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1767  f8f3				   HasNoVerticalLine0
   1768  f8f3		       a9 00		      LDA	#0
   1769  f8f5		       99 d8 00 	      STA	ParallaxCache,Y
   1770  f8f8		       99 f0 00 	      STA	ParallaxCache2,Y
   1771  f8fb
   1772  f8fb				   CalculateVerticalParallax1
   1773  f8fb		       98		      TYA
   1774  f8fc		       18		      CLC
   1775  f8fd		       65 c7		      ADC	ParallaxOffset1 + 1
   1776  f8ff		       29 07		      AND	#%00000111
   1777  f901		       d0 0d		      BNE	HasNoVerticalLine1
   1778  f903
   1779  f903				   HasVerticalLine1
   1780  f903		       a9 fc		      LDA	#%11111100
   1781  f905		       99 d8 00 	      STA	ParallaxCache,Y
   1782  f908		       a9 c0		      LDA	#%11000000
   1783  f90a		       99 f0 00 	      STA	ParallaxCache2,Y
   1784  f90d		       4c 30 f9 	      JMP	ContinueVerticalParallaxLoop
   1785  f910				   HasNoVerticalLine1
   1786  f910		       a9 00		      LDA	#0
   1787  f912		       99 d8 00 	      STA	ParallaxCache,Y
   1788  f915		       99 f0 00 	      STA	ParallaxCache2,Y
   1789  f918
   1790  f918				   CalculateVerticalParallax2
   1791  f918		       98		      TYA
   1792  f919		       18		      CLC
   1793  f91a		       65 c9		      ADC	ParallaxOffset2 + 1
   1794  f91c		       29 07		      AND	#%00000111
   1795  f91e		       d0 08		      BNE	HasNoVerticalLine2
   1796  f920
   1797  f920				   HasVerticalLine2
   1798  f920		       a9 f0		      LDA	#%11110000
   1799  f922		       99 d8 00 	      STA	ParallaxCache,Y
   1800  f925		       4c 30 f9 	      JMP	ContinueVerticalParallaxLoop
   1801  f928				   HasNoVerticalLine2
   1802  f928		       a9 00		      LDA	#0
   1803  f92a		       99 d8 00 	      STA	ParallaxCache,Y
   1804  f92d		       99 f0 00 	      STA	ParallaxCache2,Y
   1805  f930
   1806  f930				   ContinueVerticalParallaxLoop
   1807  f930		       88		      DEY
   1808  f931		       10 ad		      BPL	VerticalParallaxLoop
   1809  f933		       60		      RTS
   1810  f934
   1811  f934				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1812  f934		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1813  f936		       85 d5		      STA	ScoreFontColor
   1814  f938		       a9 01		      LDA	#1
   1815  f93a		       85 d6		      STA	ScoreFontColorHoldChange
   1816  f93c
   1817  f93c		       a5 8d		      LDA	FrameCount1
   1818  f93e		       29 07		      AND	#%00000111
   1819  f940		       85 b3		      STA	Tmp3
   1820  f942							;0 is Zelda Name, (default)
   1821  f942		       a9 01		      LDA	#1
   1822  f944		       c5 b3		      CMP	Tmp3
   1823  f946		       f0 38		      BEQ	PrintZeldaDateLeft
   1824  f948
   1825  f948		       a9 02		      LDA	#2
   1826  f94a		       c5 b3		      CMP	Tmp3
   1827  f94c		       f0 23		      BEQ	PrintPolvinhosLeft
   1828  f94e
   1829  f94e		       a9 03		      LDA	#3
   1830  f950		       c5 b3		      CMP	Tmp3
   1831  f952		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1832  f954
   1833  f954		       a9 04		      LDA	#4
   1834  f956		       c5 b3		      CMP	Tmp3
   1835  f958		       f0 1c		      BEQ	PrintIvonneLeft
   1836  f95a
   1837  f95a		       a9 05		      LDA	#5
   1838  f95c		       c5 b3		      CMP	Tmp3
   1839  f95e		       f0 2a		      BEQ	PrintIvonneDateLeft
   1840  f960
   1841  f960		       a9 06		      LDA	#6
   1842  f962		       c5 b3		      CMP	Tmp3
   1843  f964		       f0 15		      BEQ	PrintArtLeft
   1844  f966
   1845  f966		       a9 07		      LDA	#7
   1846  f968		       c5 b3		      CMP	Tmp3
   1847  f96a		       f0 23		      BEQ	PrintLeonardoLeft
   1848  f96c
   1849  f96c				   PrintZeldaLeft
   1850  f96c		       a2 28		      LDX	#<ZeldaTextLeft
   1851  f96e		       4c 94 f9 	      JMP	ProcessPrintEasterEgg
   1852  f971				   PrintPolvinhosLeft
   1853  f971		       a2 3c		      LDX	#<PolvinhosTextLeft
   1854  f973		       4c 94 f9 	      JMP	ProcessPrintEasterEgg
   1855  f976				   PrintIvonneLeft
   1856  f976		       a2 50		      LDX	#<IvonneTextLeft
   1857  f978		       4c 94 f9 	      JMP	ProcessPrintEasterEgg
   1858  f97b				   PrintArtLeft
   1859  f97b		       a2 64		      LDX	#<PaperArtTextLeft
   1860  f97d		       4c 94 f9 	      JMP	ProcessPrintEasterEgg
   1861  f980
   1862  f980				   PrintZeldaDateLeft
   1863  f980		       a2 32		      LDX	#<ZeldaDateLeft
   1864  f982		       4c 94 f9 	      JMP	ProcessPrintEasterEgg
   1865  f985				   PrintPolvinhosDateLeft
   1866  f985		       a2 46		      LDX	#<PolvinhosDateLeft
   1867  f987		       4c 94 f9 	      JMP	ProcessPrintEasterEgg
   1868  f98a				   PrintIvonneDateLeft
   1869  f98a		       a2 5a		      LDX	#<IvonneDateLeft
   1870  f98c		       4c 94 f9 	      JMP	ProcessPrintEasterEgg
   1871  f98f				   PrintLeonardoLeft
   1872  f98f		       a2 6e		      LDX	#<LeonardoTextLeft
   1873  f991		       4c 94 f9 	      JMP	ProcessPrintEasterEgg
   1874  f994
   1875  f994				   ProcessPrintEasterEgg
   1876  f994		       a5 8c		      LDA	FrameCount0	;3
   1877  f996		       29 01		      AND	#%00000001	;2
   1878  f998		       d0 03		      BNE	TranformIntoRightText
   1879  f99a		       4c a2 f9 	      JMP	PrintEasterEggText
   1880  f99d				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1881  f99d		       8a		      TXA
   1882  f99e		       18		      CLC
   1883  f99f		       69 05		      ADC	#HALF_TEXT_SIZE
   1884  f9a1		       aa		      TAX
   1885  f9a2
   1886  f9a2				   PrintEasterEggText
   1887  f9a2		       20 0a f8 	      JSR	PrintStaticText
   1888  f9a5		       60		      RTS
   1889  f9a6
   1890  f9a6				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1891  f9a6		       a2 00		      LDX	#0
   1892  f9a8		       a0 04		      LDY	#FONT_OFFSET
   1893  f9aa
   1894  f9aa				   ScoreLoop		; 20 
   1895  f9aa		       85 02		      STA	WSYNC	;2
   1896  f9ac
   1897  f9ac		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1898  f9ae		       85 0d		      STA	PF0	;3
   1899  f9b0
   1900  f9b0		       a5 82		      LDA	PF1Cache	;3
   1901  f9b2		       85 0e		      STA	PF1	;3
   1902  f9b4
   1903  f9b4		       a5 83		      LDA	PF2Cache	;3
   1904  f9b6		       85 0f		      STA	PF2	;3
   1905  f9b8
   1906  f9b8				   DrawScoreD0		; 15
   1907  f9b8		       a6 d0		      LDX	ScoreD0	; 3
   1908  f9ba		       bd 00 fd 	      LDA	Font,X	;4
   1909  f9bd		       85 81		      STA	PF0Cache	;3
   1910  f9bf		       c6 d0		      DEC	ScoreD0	;5
   1911  f9c1
   1912  f9c1				   DrawScoreD1		; 23	
   1913  f9c1		       a6 d1		      LDX	ScoreD1	; 3
   1914  f9c3		       bd 00 fd 	      LDA	Font,X	;4
   1915  f9c6		       0a		      ASL		;2
   1916  f9c7		       0a		      ASL		;2
   1917  f9c8		       0a		      ASL		;2
   1918  f9c9		       0a		      ASL		;2
   1919  f9ca		       85 82		      STA	PF1Cache	;3
   1920  f9cc		       c6 d1		      DEC	ScoreD1	;5
   1921  f9ce
   1922  f9ce				   DrawScoreD2		; 20
   1923  f9ce		       a6 d2		      LDX	ScoreD2	; 3
   1924  f9d0		       bd 00 fd 	      LDA	Font,X	;4
   1925  f9d3		       29 0f		      AND	#%00001111	;2
   1926  f9d5		       05 82		      ORA	PF1Cache	;3
   1927  f9d7		       85 82		      STA	PF1Cache	;3
   1928  f9d9		       c6 d2		      DEC	ScoreD2	;5
   1929  f9db
   1930  f9db				   DrawScoreD3		; 23
   1931  f9db		       a6 d3		      LDX	ScoreD3	; 3
   1932  f9dd		       bd 00 fd 	      LDA	Font,X	;4
   1933  f9e0		       4a		      LSR		;2
   1934  f9e1		       4a		      LSR		;2
   1935  f9e2		       4a		      LSR		;2
   1936  f9e3		       4a		      LSR		;2
   1937  f9e4		       85 83		      STA	PF2Cache	;3
   1938  f9e6		       c6 d3		      DEC	ScoreD3	;5
   1939  f9e8
   1940  f9e8				   DrawScoreD4		; 20
   1941  f9e8		       a6 d4		      LDX	ScoreD4	; 3
   1942  f9ea		       bd 00 fd 	      LDA	Font,X	;4
   1943  f9ed		       29 f0		      AND	#%11110000	;2
   1944  f9ef		       05 83		      ORA	PF2Cache	;3
   1945  f9f1		       85 83		      STA	PF2Cache	;3
   1946  f9f3		       c6 d4		      DEC	ScoreD4	;5
   1947  f9f5
   1948  f9f5
   1949  f9f5		       88		      DEY		;2
   1950  f9f6		       10 b2		      BPL	ScoreLoop	;4
   1951  f9f8
   1952  f9f8		       85 02		      STA	WSYNC
   1953  f9fa		       20 a0 f7 	      JSR	LoadAll
   1954  f9fd		       60		      RTS		; 6
   1955  f9fe
   1956  f9fe				   PrintRightDecimalDigits
   1957  f9fe		       b9 00 00 	      LDA	0,Y
   1958  fa01		       4a		      LSR
   1959  fa02		       4a		      LSR
   1960  fa03		       4a		      LSR
   1961  fa04		       4a		      LSR
   1962  fa05		       aa		      TAX
   1963  fa06		       bd be fd 	      LDA	FontLookup,X	;4
   1964  fa09		       85 d2		      STA	ScoreD2	;3
   1965  fa0b
   1966  fa0b		       b9 00 00 	      LDA	0,Y
   1967  fa0e		       29 0f		      AND	#%00001111
   1968  fa10		       aa		      TAX
   1969  fa11		       bd be fd 	      LDA	FontLookup,X	;4
   1970  fa14		       85 d3		      STA	ScoreD3	;3
   1971  fa16
   1972  fa16		       c8		      INY
   1973  fa17		       b9 00 00 	      LDA	0,Y
   1974  fa1a		       4a		      LSR
   1975  fa1b		       4a		      LSR
   1976  fa1c		       4a		      LSR
   1977  fa1d		       4a		      LSR
   1978  fa1e		       aa		      TAX
   1979  fa1f		       bd be fd 	      LDA	FontLookup,X	;4
   1980  fa22		       85 d0		      STA	ScoreD0	;3
   1981  fa24
   1982  fa24		       b9 00 00 	      LDA	0,Y
   1983  fa27		       29 0f		      AND	#%00001111
   1984  fa29		       aa		      TAX
   1985  fa2a		       bd be fd 	      LDA	FontLookup,X	;4
   1986  fa2d		       85 d1		      STA	ScoreD1	;3
   1987  fa2f
   1988  fa2f		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1989  fa31		       85 d4		      STA	ScoreD4
   1990  fa33		       60		      RTS
   1991  fa34
   1992  fa34				   PrintLastLeftDecimalDigits
   1993  fa34		       b9 00 00 	      LDA	0,Y
   1994  fa37		       4a		      LSR
   1995  fa38		       4a		      LSR
   1996  fa39		       4a		      LSR
   1997  fa3a		       4a		      LSR
   1998  fa3b		       aa		      TAX
   1999  fa3c		       bd be fd 	      LDA	FontLookup,X	;4
   2000  fa3f		       85 d3		      STA	ScoreD3	;3
   2001  fa41		       b9 00 00 	      LDA	0,Y
   2002  fa44		       29 0f		      AND	#%00001111
   2003  fa46		       aa		      TAX
   2004  fa47		       bd be fd 	      LDA	FontLookup,X	;4
   2005  fa4a		       85 d4		      STA	ScoreD4	;3
   2006  fa4c		       60		      RTS
   2007  fa4d
   2008  fa4d				   PrintZerosLeft
   2009  fa4d		       a9 04		      LDA	#<C0 + FONT_OFFSET
   2010  fa4f		       85 d2		      STA	ScoreD2
   2011  fa51		       85 d3		      STA	ScoreD3
   2012  fa53		       85 d4		      STA	ScoreD4
   2013  fa55		       60		      RTS
   2014  fa56
   2015  fa56				   DrawGameOverScoreLine
   2016  fa56		       85 02		      STA	WSYNC
   2017  fa58		       20 a6 f9 	      JSR	PrintScore
   2018  fa5b		       85 02		      STA	WSYNC
   2019  fa5d		       85 02		      STA	WSYNC
   2020  fa5f		       20 91 f7 	      JSR	ClearPF
   2021  fa62		       60		      RTS
   2022  fa63
   2023  fa63				   DrawGameOverScreenLeft
   2024  fa63		       85 02		      STA	WSYNC
   2025  fa65		       20 91 f7 	      JSR	ClearPF
   2026  fa68
   2027  fa68				   DrawBcdScoreLeft
   2028  fa68		       20 b7 fb 	      JSR	Sleep8Lines
   2029  fa6b		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2030  fa6d		       85 06		      STA	COLUP0
   2031  fa6f		       85 02		      STA	WSYNC
   2032  fa71		       a9 86		      LDA	#<CS + #FONT_OFFSET
   2033  fa73		       85 d0		      STA	ScoreD0
   2034  fa75
   2035  fa75		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2036  fa77		       85 d1		      STA	ScoreD1
   2037  fa79
   2038  fa79		       a5 b7		      LDA	ScoreBcd3
   2039  fa7b		       29 0f		      AND	#%00001111
   2040  fa7d		       aa		      TAX
   2041  fa7e		       bd be fd 	      LDA	FontLookup,X	;4
   2042  fa81		       85 d2		      STA	ScoreD2	;3
   2043  fa83
   2044  fa83		       a0 b6		      LDY	#ScoreBcd2
   2045  fa85		       20 34 fa 	      JSR	PrintLastLeftDecimalDigits
   2046  fa88
   2047  fa88		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2048  fa8b
   2049  fa8b				   DrawTimerLeft
   2050  fa8b		       20 b7 fb 	      JSR	Sleep8Lines
   2051  fa8e		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2052  fa90		       85 06		      STA	COLUP0
   2053  fa92		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   2054  fa94		       85 d0		      STA	ScoreD0
   2055  fa96		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2056  fa98		       85 d1		      STA	ScoreD1
   2057  fa9a		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   2058  fa9c		       85 d2		      STA	ScoreD2
   2059  fa9e		       a0 bf		      LDY	#TimeBcd2
   2060  faa0		       85 02		      STA	WSYNC
   2061  faa2		       20 34 fa 	      JSR	PrintLastLeftDecimalDigits
   2062  faa5		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2063  faa8
   2064  faa8				   DrawGlideTimerLeft
   2065  faa8		       20 b7 fb 	      JSR	Sleep8Lines
   2066  faab		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2067  faad		       85 06		      STA	COLUP0
   2068  faaf		       85 02		      STA	WSYNC
   2069  fab1		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2070  fab3		       85 d0		      STA	ScoreD0
   2071  fab5		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2072  fab7		       85 d1		      STA	ScoreD1
   2073  fab9		       20 4d fa 	      JSR	PrintZerosLeft
   2074  fabc		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2075  fabf
   2076  fabf				   DrawHitCountLeft
   2077  fabf		       20 b7 fb 	      JSR	Sleep8Lines
   2078  fac2		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2079  fac4		       85 06		      STA	COLUP0
   2080  fac6		       85 02		      STA	WSYNC
   2081  fac8		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2082  faca		       85 d0		      STA	ScoreD0
   2083  facc		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2084  face		       85 d1		      STA	ScoreD1
   2085  fad0		       20 4d fa 	      JSR	PrintZerosLeft
   2086  fad3		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2087  fad6
   2088  fad6				   DrawCheckpointCountLeft
   2089  fad6		       20 b7 fb 	      JSR	Sleep8Lines
   2090  fad9		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2091  fadb		       85 06		      STA	COLUP0
   2092  fadd		       85 02		      STA	WSYNC
   2093  fadf		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2094  fae1		       85 d0		      STA	ScoreD0
   2095  fae3		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2096  fae5		       85 d1		      STA	ScoreD1
   2097  fae7		       20 4d fa 	      JSR	PrintZerosLeft
   2098  faea		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2099  faed
   2100  faed				   DrawGameVersionLeft
   2101  faed		       20 b7 fb 	      JSR	Sleep8Lines
   2102  faf0		       a9 49		      LDA	#VERSION_COLOR
   2103  faf2		       85 06		      STA	COLUP0
   2104  faf4
   2105  faf4		       a5 c5		      LDA	GameMode
   2106  faf6		       aa		      TAX
   2107  faf7		       bd be fd 	      LDA	FontLookup,X	;4
   2108  fafa		       85 d0		      STA	ScoreD0	;3
   2109  fafc
   2110  fafc		       a5 a9		      LDA	CurrentCarId
   2111  fafe		       aa		      TAX
   2112  faff		       bd be fd 	      LDA	FontLookup,X	;4
   2113  fb02		       85 d1		      STA	ScoreD1	;3
   2114  fb04
   2115  fb04		       a5 a6		      LDA	StartSWCHB
   2116  fb06		       29 40		      AND	#%01000000	; P0 difficulty
   2117  fb08		       49 40		      EOR	#%01000000	; Reverse bytes
   2118  fb0a		       2a		      ROL
   2119  fb0b		       2a		      ROL
   2120  fb0c		       2a		      ROL
   2121  fb0d		       18		      CLC
   2122  fb0e		       69 0a		      ADC	#10
   2123  fb10		       aa		      TAX
   2124  fb11		       bd be fd 	      LDA	FontLookup,X	;4
   2125  fb14		       85 d2		      STA	ScoreD2	;3
   2126  fb16
   2127  fb16		       a5 a6		      LDA	StartSWCHB
   2128  fb18		       29 80		      AND	#%10000000	; P0 difficulty
   2129  fb1a		       49 80		      EOR	#%10000000	; Reverse bytes
   2130  fb1c		       2a		      ROL
   2131  fb1d		       2a		      ROL
   2132  fb1e		       18		      CLC
   2133  fb1f		       69 0a		      ADC	#10
   2134  fb21		       aa		      TAX
   2135  fb22		       bd be fd 	      LDA	FontLookup,X	;4
   2136  fb25		       85 d3		      STA	ScoreD3	;3
   2137  fb27
   2138  fb27		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2139  fb29		       85 d4		      STA	ScoreD4
   2140  fb2b
   2141  fb2b		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2142  fb2e
   2143  fb2e		       4c 94 fb 	      JMP	FinalizeDrawGameOver
   2144  fb31
   2145  fb31				   DrawGameOverScreenRight
   2146  fb31		       85 02		      STA	WSYNC
   2147  fb33		       20 91 f7 	      JSR	ClearPF
   2148  fb36
   2149  fb36				   DrawBcdScoreRight
   2150  fb36		       20 b7 fb 	      JSR	Sleep8Lines
   2151  fb39		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2152  fb3b		       85 07		      STA	COLUP1
   2153  fb3d		       85 02		      STA	WSYNC
   2154  fb3f		       a0 b4		      LDY	#ScoreBcd0
   2155  fb41		       20 fe f9 	      JSR	PrintRightDecimalDigits
   2156  fb44
   2157  fb44		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2158  fb47
   2159  fb47				   DrawTimerRight
   2160  fb47		       20 b7 fb 	      JSR	Sleep8Lines
   2161  fb4a		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2162  fb4c		       85 07		      STA	COLUP1
   2163  fb4e		       a0 bd		      LDY	#TimeBcd0
   2164  fb50		       20 fe f9 	      JSR	PrintRightDecimalDigits
   2165  fb53
   2166  fb53		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2167  fb56				   DrawGlideTimeRight
   2168  fb56		       20 b7 fb 	      JSR	Sleep8Lines
   2169  fb59		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2170  fb5b		       85 07		      STA	COLUP1
   2171  fb5d		       a0 cd		      LDY	#GlideTimeBcd0
   2172  fb5f		       20 fe f9 	      JSR	PrintRightDecimalDigits
   2173  fb62		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2174  fb65
   2175  fb65				   DrawHitCountRight
   2176  fb65		       20 b7 fb 	      JSR	Sleep8Lines
   2177  fb68		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2178  fb6a		       85 07		      STA	COLUP1
   2179  fb6c		       a0 cb		      LDY	#HitCountBcd0
   2180  fb6e		       20 fe f9 	      JSR	PrintRightDecimalDigits
   2181  fb71		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2182  fb74
   2183  fb74				   DrawCheckpointCountRight
   2184  fb74		       20 b7 fb 	      JSR	Sleep8Lines
   2185  fb77		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2186  fb79		       85 07		      STA	COLUP1
   2187  fb7b		       a0 a4		      LDY	#CheckpointBcd0
   2188  fb7d		       20 fe f9 	      JSR	PrintRightDecimalDigits
   2189  fb80		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2190  fb83
   2191  fb83				   DrawVersionRight
   2192  fb83		       20 b7 fb 	      JSR	Sleep8Lines
   2193  fb86		       a9 49		      LDA	#VERSION_COLOR
   2194  fb88		       85 07		      STA	COLUP1
   2195  fb8a		       85 02		      STA	WSYNC
   2196  fb8c		       a2 78		      LDX	#<VersionText
   2197  fb8e		       20 0a f8 	      JSR	PrintStaticText
   2198  fb91		       20 56 fa 	      JSR	DrawGameOverScoreLine
   2199  fb94
   2200  fb94				   FinalizeDrawGameOver
   2201  fb94		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2202  fb96		       85 d5		      STA	ScoreFontColor
   2203  fb98		       20 ae fb 	      JSR	Sleep4Lines
   2204  fb9b		       20 be fb 	      JSR	Sleep32Lines
   2205  fb9e		       20 be fb 	      JSR	Sleep32Lines
   2206  fba1		       4c 5c f6 	      JMP	PrepareOverscan
   2207  fba4
   2208  fba4				   WaitForVblankEnd
   2209  fba4		       ad 84 02 	      LDA	INTIM
   2210  fba7		       d0 fb		      BNE	WaitForVblankEnd
   2211  fba9		       85 02		      STA	WSYNC
   2212  fbab		       85 01		      STA	VBLANK
   2213  fbad		       60		      RTS
   2214  fbae
   2215  fbae				   Sleep4Lines
   2216  fbae		       85 02		      STA	WSYNC
   2217  fbb0		       85 02		      STA	WSYNC
   2218  fbb2		       85 02		      STA	WSYNC
   2219  fbb4		       85 02		      STA	WSYNC
   2220  fbb6		       60		      RTS
   2221  fbb7
   2222  fbb7				   Sleep8Lines
   2223  fbb7		       20 ae fb 	      JSR	Sleep4Lines
   2224  fbba		       20 ae fb 	      JSR	Sleep4Lines
   2225  fbbd		       60		      RTS
   2226  fbbe
   2227  fbbe				   Sleep32Lines
   2228  fbbe		       20 b7 fb 	      JSR	Sleep8Lines
   2229  fbc1		       20 b7 fb 	      JSR	Sleep8Lines
   2230  fbc4		       20 b7 fb 	      JSR	Sleep8Lines
   2231  fbc7		       20 b7 fb 	      JSR	Sleep8Lines
   2232  fbca		       60		      RTS
   2233  fbcb
   2234  fbcb							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2235  fc00					      org	$FC00
   2236  fc00				   QrCode1
   2237  fc00		       1f		      .byte.b	#%00011111
   2238  fc01		       10		      .byte.b	#%00010000
   2239  fc02		       17		      .byte.b	#%00010111
   2240  fc03		       17		      .byte.b	#%00010111
   2241  fc04		       17		      .byte.b	#%00010111
   2242  fc05		       10		      .byte.b	#%00010000
   2243  fc06		       1f		      .byte.b	#%00011111
   2244  fc07		       00		      .byte.b	#%00000000
   2245  fc08		       17		      .byte.b	#%00010111
   2246  fc09		       10		      .byte.b	#%00010000
   2247  fc0a		       1d		      .byte.b	#%00011101
   2248  fc0b		       16		      .byte.b	#%00010110
   2249  fc0c		       03		      .byte.b	#%00000011
   2250  fc0d		       19		      .byte.b	#%00011001
   2251  fc0e		       13		      .byte.b	#%00010011
   2252  fc0f		       1c		      .byte.b	#%00011100
   2253  fc10		       0b		      .byte.b	#%00001011
   2254  fc11		       00		      .byte.b	#%00000000
   2255  fc12		       1f		      .byte.b	#%00011111
   2256  fc13		       10		      .byte.b	#%00010000
   2257  fc14		       17		      .byte.b	#%00010111
   2258  fc15		       17		      .byte.b	#%00010111
   2259  fc16		       17		      .byte.b	#%00010111
   2260  fc17		       10		      .byte.b	#%00010000
   2261  fc18		       1f		      .byte.b	#%00011111
   2262  fc19
   2263  fc19				   QrCode2
   2264  fc19		       c3		      .byte.b	#%11000011
   2265  fc1a		       9a		      .byte.b	#%10011010
   2266  fc1b		       82		      .byte.b	#%10000010
   2267  fc1c		       da		      .byte.b	#%11011010
   2268  fc1d		       aa		      .byte.b	#%10101010
   2269  fc1e		       ca		      .byte.b	#%11001010
   2270  fc1f		       f3		      .byte.b	#%11110011
   2271  fc20		       78		      .byte.b	#%01111000
   2272  fc21		       df		      .byte.b	#%11011111
   2273  fc22		       fc		      .byte.b	#%11111100
   2274  fc23		       c7		      .byte.b	#%11000111
   2275  fc24		       98		      .byte.b	#%10011000
   2276  fc25		       23		      .byte.b	#%00100011
   2277  fc26		       b9		      .byte.b	#%10111001
   2278  fc27		       d2		      .byte.b	#%11010010
   2279  fc28		       30		      .byte.b	#%00110000
   2280  fc29		       eb		      .byte.b	#%11101011
   2281  fc2a		       28		      .byte.b	#%00101000
   2282  fc2b		       ab		      .byte.b	#%10101011
   2283  fc2c		       72		      .byte.b	#%01110010
   2284  fc2d		       fa		      .byte.b	#%11111010
   2285  fc2e		       7a		      .byte.b	#%01111010
   2286  fc2f		       32		      .byte.b	#%00110010
   2287  fc30		       3a		      .byte.b	#%00111010
   2288  fc31		       63		      .byte.b	#%01100011
   2289  fc32
   2290  fc32				   QrCode3
   2291  fc32		       98		      .byte.b	#%10011000
   2292  fc33		       c3		      .byte.b	#%11000011
   2293  fc34		       39		      .byte.b	#%00111001
   2294  fc35		       34		      .byte.b	#%00110100
   2295  fc36		       ff		      .byte.b	#%11111111
   2296  fc37		       71		      .byte.b	#%01110001
   2297  fc38		       d5		      .byte.b	#%11010101
   2298  fc39		       d1		      .byte.b	#%11010001
   2299  fc3a		       5f		      .byte.b	#%01011111
   2300  fc3b		       26		      .byte.b	#%00100110
   2301  fc3c		       2d		      .byte.b	#%00101101
   2302  fc3d		       e9		      .byte.b	#%11101001
   2303  fc3e		       d6		      .byte.b	#%11010110
   2304  fc3f		       26		      .byte.b	#%00100110
   2305  fc40		       ba		      .byte.b	#%10111010
   2306  fc41		       03		      .byte.b	#%00000011
   2307  fc42		       dd		      .byte.b	#%11011101
   2308  fc43		       e0		      .byte.b	#%11100000
   2309  fc44		       57		      .byte.b	#%01010111
   2310  fc45		       14		      .byte.b	#%00010100
   2311  fc46		       35		      .byte.b	#%00110101
   2312  fc47		       e5		      .byte.b	#%11100101
   2313  fc48		       b5		      .byte.b	#%10110101
   2314  fc49		       d4		      .byte.b	#%11010100
   2315  fc4a		       97		      .byte.b	#%10010111
   2316  fc4b
   2317  fc4b				   QrCode4
   2318  fc4b		       09		      .byte.b	#%00001001
   2319  fc4c		       0e		      .byte.b	#%00001110
   2320  fc4d		       0f		      .byte.b	#%00001111
   2321  fc4e		       0c		      .byte.b	#%00001100
   2322  fc4f		       0c		      .byte.b	#%00001100
   2323  fc50		       08		      .byte.b	#%00001000
   2324  fc51		       08		      .byte.b	#%00001000
   2325  fc52		       06		      .byte.b	#%00000110
   2326  fc53		       06		      .byte.b	#%00000110
   2327  fc54		       0b		      .byte.b	#%00001011
   2328  fc55		       0f		      .byte.b	#%00001111
   2329  fc56		       04		      .byte.b	#%00000100
   2330  fc57		       08		      .byte.b	#%00001000
   2331  fc58		       0f		      .byte.b	#%00001111
   2332  fc59		       09		      .byte.b	#%00001001
   2333  fc5a		       07		      .byte.b	#%00000111
   2334  fc5b		       05		      .byte.b	#%00000101
   2335  fc5c		       00		      .byte.b	#%00000000
   2336  fc5d		       0f		      .byte.b	#%00001111
   2337  fc5e		       08		      .byte.b	#%00001000
   2338  fc5f		       0b		      .byte.b	#%00001011
   2339  fc60		       0b		      .byte.b	#%00001011
   2340  fc61		       0b		      .byte.b	#%00001011
   2341  fc62		       08		      .byte.b	#%00001000
   2342  fc63		       0f		      .byte.b	#%00001111
   2343  fc64
   2344  fc64							; Moved here because of rom space.
   2345  fc64							; The only SBR in constants space
   2346  fc64				   DrawQrCode
   2347  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2348  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2349  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2350  fc6a		       85 0a		      STA	CTRLPF
   2351  fc6c		       20 7f f7 	      JSR	ClearAll	; To be 100 sure!
   2352  fc6f		       ad 82 02 	      LDA	SWCHB
   2353  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2354  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2355  fc76		       86 09		      STX	COLUBK
   2356  fc78		       84 08		      STY	COLUPF
   2357  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2358  fc7d				   StoreReversedQrCode
   2359  fc7d		       86 08		      STX	COLUPF
   2360  fc7f		       84 09		      STY	COLUBK
   2361  fc81
   2362  fc81				   ContinueQrCode
   2363  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2364  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2365  fc85		       20 a4 fb 	      JSR	WaitForVblankEnd
   2366  fc88		       20 b7 fb 	      JSR	Sleep8Lines
   2367  fc8b		       20 b7 fb 	      JSR	Sleep8Lines
   2368  fc8e		       20 b7 fb 	      JSR	Sleep8Lines
   2369  fc91
   2370  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2371  fc91		       85 02		      STA	WSYNC
   2372  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2373  fc96		       85 0e		      STA	PF1	;3
   2374  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2375  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2377  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2378  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2379  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2380  fcb3		       85 0e		      STA	PF1	;3
   2381  fcb5
   2382  fcb5		       ca		      DEX		;2
   2383  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2384  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2385  fcba		       88		      DEY		;2
   2386  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2387  fcbd
   2388  fcbd				   EndQrCodeLoop
   2389  fcbd		       85 02		      STA	WSYNC	;
   2390  fcbf		       a9 00		      LDA	#0
   2391  fcc1		       85 0e		      STA	PF1	;3
   2392  fcc3		       85 0f		      STA	PF2	;3
   2393  fcc5
   2394  fcc5		       20 be fb 	      JSR	Sleep32Lines
   2395  fcc8		       4c 5c f6 	      JMP	PrepareOverscan
   2396  fccb
   2397  fd00					      org	$FD00
   2398  fd00				   Font
   2399  fd00				   C0
   2400  fd00		       e7		      .byte.b	#%11100111	;
   2401  fd01		       a5		      .byte.b	#%10100101	; 
   2402  fd02		       a5		      .byte.b	#%10100101	; 
   2403  fd03		       a5		      .byte.b	#%10100101	; 
   2404  fd04		       e7		      .byte.b	#%11100111	;	
   2405  fd05				   C1
   2406  fd05		       e7		      .byte.b	#%11100111	;
   2407  fd06		       42		      .byte.b	#%01000010	; 
   2408  fd07		       42		      .byte.b	#%01000010	; 
   2409  fd08		       42		      .byte.b	#%01000010	; 
   2410  fd09		       66		      .byte.b	#%01100110	;
   2411  fd0a				   C2
   2412  fd0a		       e7		      .byte.b	#%11100111	;
   2413  fd0b		       24		      .byte.b	#%00100100	; 
   2414  fd0c		       e7		      .byte.b	#%11100111	; 
   2415  fd0d		       81		      .byte.b	#%10000001	; 
   2416  fd0e		       e7		      .byte.b	#%11100111	;
   2417  fd0f				   C3
   2418  fd0f		       e7		      .byte.b	#%11100111	;
   2419  fd10		       81		      .byte.b	#%10000001	; 
   2420  fd11		       e7		      .byte.b	#%11100111	; 
   2421  fd12		       81		      .byte.b	#%10000001	; 
   2422  fd13		       e7		      .byte.b	#%11100111	;
   2423  fd14				   C4
   2424  fd14		       81		      .byte.b	#%10000001	;
   2425  fd15		       81		      .byte.b	#%10000001	; 
   2426  fd16		       e7		      .byte.b	#%11100111	; 
   2427  fd17		       a5		      .byte.b	#%10100101	; 
   2428  fd18		       a5		      .byte.b	#%10100101	;
   2429  fd19				   C5
   2430  fd19		       e7		      .byte.b	#%11100111	;
   2431  fd1a		       81		      .byte.b	#%10000001	; 
   2432  fd1b		       e7		      .byte.b	#%11100111	; 
   2433  fd1c		       24		      .byte.b	#%00100100	; 
   2434  fd1d		       e7		      .byte.b	#%11100111	;
   2435  fd1e				   C6
   2436  fd1e		       e7		      .byte.b	#%11100111	;
   2437  fd1f		       a5		      .byte.b	#%10100101	; 
   2438  fd20		       e7		      .byte.b	#%11100111	; 
   2439  fd21		       24		      .byte.b	#%00100100	; 
   2440  fd22		       e7		      .byte.b	#%11100111	;
   2441  fd23				   C7
   2442  fd23		       81		      .byte.b	#%10000001	;
   2443  fd24		       81		      .byte.b	#%10000001	; 
   2444  fd25		       81		      .byte.b	#%10000001	; 
   2445  fd26		       81		      .byte.b	#%10000001	; 
   2446  fd27		       e7		      .byte.b	#%11100111	;
   2447  fd28				   C8
   2448  fd28		       e7		      .byte.b	#%11100111	;
   2449  fd29		       a5		      .byte.b	#%10100101	; 
   2450  fd2a		       e7		      .byte.b	#%11100111	; 
   2451  fd2b		       a5		      .byte.b	#%10100101	; 
   2452  fd2c		       e7		      .byte.b	#%11100111	;
   2453  fd2d				   C9
   2454  fd2d		       e7		      .byte.b	#%11100111	;
   2455  fd2e		       81		      .byte.b	#%10000001	; 
   2456  fd2f		       e7		      .byte.b	#%11100111	; 
   2457  fd30		       a5		      .byte.b	#%10100101	; 
   2458  fd31		       e7		      .byte.b	#%11100111	;
   2459  fd32				   CA
   2460  fd32		       a5		      .byte.b	#%10100101	;
   2461  fd33		       a5		      .byte.b	#%10100101	; 
   2462  fd34		       e7		      .byte.b	#%11100111	; 
   2463  fd35		       a5		      .byte.b	#%10100101	; 
   2464  fd36		       e7		      .byte.b	#%11100111	;
   2465  fd37				   CB
   2466  fd37		       66		      .byte.b	#%01100110	;
   2467  fd38		       a5		      .byte.b	#%10100101	; 
   2468  fd39		       66		      .byte.b	#%01100110	; 
   2469  fd3a		       a5		      .byte.b	#%10100101	;
   2470  fd3b		       66		      .byte.b	#%01100110	;
   2471  fd3c				   CC
   2472  fd3c		       e7		      .byte.b	#%11100111	;
   2473  fd3d		       24		      .byte.b	#%00100100	; 
   2474  fd3e		       24		      .byte.b	#%00100100	; 
   2475  fd3f		       24		      .byte.b	#%00100100	;
   2476  fd40		       e7		      .byte.b	#%11100111	;
   2477  fd41
   2478  fd41				   CD
   2479  fd41		       66		      .byte.b	#%01100110	;
   2480  fd42		       a5		      .byte.b	#%10100101	; 
   2481  fd43		       a5		      .byte.b	#%10100101	; 
   2482  fd44		       a5		      .byte.b	#%10100101	;
   2483  fd45		       66		      .byte.b	#%01100110	;
   2484  fd46
   2485  fd46				   CE
   2486  fd46		       e7		      .byte.b	#%11100111	;
   2487  fd47		       24		      .byte.b	#%00100100	; 
   2488  fd48		       e7		      .byte.b	#%11100111	; 
   2489  fd49		       24		      .byte.b	#%00100100	; 
   2490  fd4a		       e7		      .byte.b	#%11100111	;
   2491  fd4b
   2492  fd4b				   CF
   2493  fd4b		       24		      .byte.b	#%00100100	;
   2494  fd4c		       24		      .byte.b	#%00100100	; 
   2495  fd4d		       e7		      .byte.b	#%11100111	; 
   2496  fd4e		       24		      .byte.b	#%00100100	; 
   2497  fd4f		       e7		      .byte.b	#%11100111	;
   2498  fd50
   2499  fd50				   CG
   2500  fd50		       c3		      .byte.b	#%11000011	;
   2501  fd51		       a5		      .byte.b	#%10100101	; 
   2502  fd52		       a5		      .byte.b	#%10100101	; 
   2503  fd53		       24		      .byte.b	#%00100100	; 
   2504  fd54		       c3		      .byte.b	#%11000011	;	
   2505  fd55
   2506  fd55				   CH
   2507  fd55		       a5		      .byte.b	#%10100101	;
   2508  fd56		       a5		      .byte.b	#%10100101	; 
   2509  fd57		       e7		      .byte.b	#%11100111	; 
   2510  fd58		       a5		      .byte.b	#%10100101	; 
   2511  fd59		       a5		      .byte.b	#%10100101	;
   2512  fd5a
   2513  fd5a				   CK
   2514  fd5a		       a5		      .byte.b	#%10100101	;
   2515  fd5b		       a5		      .byte.b	#%10100101	; 
   2516  fd5c		       66		      .byte.b	#%01100110	; 
   2517  fd5d		       a5		      .byte.b	#%10100101	; 
   2518  fd5e		       a5		      .byte.b	#%10100101	;
   2519  fd5f
   2520  fd5f				   CL
   2521  fd5f		       e7		      .byte.b	#%11100111	;
   2522  fd60		       24		      .byte.b	#%00100100	; 
   2523  fd61		       24		      .byte.b	#%00100100	; 
   2524  fd62		       24		      .byte.b	#%00100100	; 
   2525  fd63		       24		      .byte.b	#%00100100	;
   2526  fd64
   2527  fd64				   CI
   2528  fd64		       42		      .byte.b	#%01000010	;
   2529  fd65		       42		      .byte.b	#%01000010	; 
   2530  fd66		       42		      .byte.b	#%01000010	; 
   2531  fd67		       42		      .byte.b	#%01000010	; 
   2532  fd68		       42		      .byte.b	#%01000010	;
   2533  fd69
   2534  fd69				   CM
   2535  fd69		       a5		      .byte.b	#%10100101	;
   2536  fd6a		       a5		      .byte.b	#%10100101	; 
   2537  fd6b		       a5		      .byte.b	#%10100101	; 
   2538  fd6c		       e7		      .byte.b	#%11100111	; 
   2539  fd6d		       a5		      .byte.b	#%10100101	;
   2540  fd6e
   2541  fd6e				   CN
   2542  fd6e		       a5		      .byte.b	#%10100101	;
   2543  fd6f		       a5		      .byte.b	#%10100101	; 
   2544  fd70		       a5		      .byte.b	#%10100101	; 
   2545  fd71		       a5		      .byte.b	#%10100101	; 
   2546  fd72		       66		      .byte.b	#%01100110	;	
   2547  fd73
   2548  fd73
   2549  fd73				   CO
   2550  fd73		       42		      .byte.b	#%01000010	;
   2551  fd74		       a5		      .byte.b	#%10100101	; 
   2552  fd75		       a5		      .byte.b	#%10100101	; 
   2553  fd76		       a5		      .byte.b	#%10100101	; 
   2554  fd77		       42		      .byte.b	#%01000010	;	
   2555  fd78
   2556  fd78				   CP
   2557  fd78		       24		      .byte.b	#%00100100	;
   2558  fd79		       24		      .byte.b	#%00100100	; 
   2559  fd7a		       e7		      .byte.b	#%11100111	; 
   2560  fd7b		       a5		      .byte.b	#%10100101	; 
   2561  fd7c		       e7		      .byte.b	#%11100111	;
   2562  fd7d
   2563  fd7d				   CR
   2564  fd7d		       a5		      .byte.b	#%10100101	;
   2565  fd7e		       a5		      .byte.b	#%10100101	; 
   2566  fd7f		       66		      .byte.b	#%01100110	; 
   2567  fd80		       a5		      .byte.b	#%10100101	; 
   2568  fd81		       66		      .byte.b	#%01100110	;
   2569  fd82
   2570  fd82				   CS
   2571  fd82		       66		      .byte.b	#%01100110	;
   2572  fd83		       81		      .byte.b	#%10000001	; 
   2573  fd84		       42		      .byte.b	#%01000010	; 
   2574  fd85		       24		      .byte.b	#%00100100	; 
   2575  fd86		       c3		      .byte.b	#%11000011	;
   2576  fd87
   2577  fd87				   CT
   2578  fd87		       42		      .byte.b	#%01000010	;
   2579  fd88		       42		      .byte.b	#%01000010	; 
   2580  fd89		       42		      .byte.b	#%01000010	; 
   2581  fd8a		       42		      .byte.b	#%01000010	; 
   2582  fd8b		       e7		      .byte.b	#%11100111	;
   2583  fd8c
   2584  fd8c				   CV
   2585  fd8c		       42		      .byte.b	#%01000010	;
   2586  fd8d		       a5		      .byte.b	#%10100101	; 
   2587  fd8e		       a5		      .byte.b	#%10100101	; 
   2588  fd8f		       a5		      .byte.b	#%10100101	; 
   2589  fd90		       a5		      .byte.b	#%10100101	;	
   2590  fd91
   2591  fd91				   CY
   2592  fd91		       42		      .byte.b	#%01000010	;
   2593  fd92		       42		      .byte.b	#%01000010	; 
   2594  fd93		       42		      .byte.b	#%01000010	; 
   2595  fd94		       a5		      .byte.b	#%10100101	; 
   2596  fd95		       a5		      .byte.b	#%10100101	;
   2597  fd96
   2598  fd96				   CW
   2599  fd96		       a5		      .byte.b	#%10100101	;
   2600  fd97		       e7		      .byte.b	#%11100111	; 
   2601  fd98		       a5		      .byte.b	#%10100101	; 
   2602  fd99		       a5		      .byte.b	#%10100101	; 
   2603  fd9a		       a5		      .byte.b	#%10100101	;
   2604  fd9b
   2605  fd9b				   CZ
   2606  fd9b		       e7		      .byte.b	#%11100111	;
   2607  fd9c		       24		      .byte.b	#%00100100	; 
   2608  fd9d		       42		      .byte.b	#%01000010	; 
   2609  fd9e		       81		      .byte.b	#%10000001	; 
   2610  fd9f		       e7		      .byte.b	#%11100111	;
   2611  fda0
   2612  fda0				   Pipe
   2613  fda0		       42		      .byte.b	#%01000010	;
   2614  fda1		       00		      .byte.b	#%00000000	; 
   2615  fda2		       42		      .byte.b	#%01000010	; 
   2616  fda3		       00		      .byte.b	#%00000000	; 
   2617  fda4		       42		      .byte.b	#%01000010	;
   2618  fda5
   2619  fda5				   Exclamation
   2620  fda5		       42		      .byte.b	#%01000010	;
   2621  fda6		       00		      .byte.b	#%00000000	; 
   2622  fda7		       42		      .byte.b	#%01000010	; 
   2623  fda8		       42		      .byte.b	#%01000010	; 
   2624  fda9		       42		      .byte.b	#%01000010	;
   2625  fdaa
   2626  fdaa				   Dot
   2627  fdaa		       42		      .byte.b	#%01000010	;
   2628  fdab		       42		      .byte.b	#%01000010	; 
   2629  fdac		       00		      .byte.b	#%00000000	; 
   2630  fdad		       00		      .byte.b	#%00000000	; 
   2631  fdae		       00		      .byte.b	#%00000000	;
   2632  fdaf
   2633  fdaf				   Colon
   2634  fdaf		       42		      .byte.b	#%01000010	;
   2635  fdb0		       42		      .byte.b	#%01000010	; 
   2636  fdb1		       00		      .byte.b	#%00000000	; 
   2637  fdb2		       42		      .byte.b	#%01000010	; 
   2638  fdb3		       42		      .byte.b	#%01000010	;
   2639  fdb4
   2640  fdb4				   Triangle
   2641  fdb4		       81		      .byte.b	#%10000001	;
   2642  fdb5		       c3		      .byte.b	#%11000011	; 
   2643  fdb6		       e7		      .byte.b	#%11100111	; 
   2644  fdb7		       c3		      .byte.b	#%11000011	; 
   2645  fdb8		       81		      .byte.b	#%10000001	;
   2646  fdb9
   2647  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2648  fdb9		       00		      .byte.b	#0	;
   2649  fdba		       00		      .byte.b	#0	;
   2650  fdbb		       00		      .byte.b	#0	;
   2651  fdbc		       00		      .byte.b	#0	;
   2652  fdbd		       00		      .byte.b	#0	;
   2653  fdbe
   2654  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2655  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2656  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2657  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2658  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2659  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2660  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2661  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2662  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2663  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2664  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2665  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2666  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2667  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2668  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2669  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2670  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2671  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2672  fdcf
   2673  fdcf				   EngineSoundType
   2674  fdcf		       02		      .byte.b	#2
   2675  fdd0		       02		      .byte.b	#2
   2676  fdd1		       0e		      .byte.b	#14
   2677  fdd2		       06		      .byte.b	#6
   2678  fdd3		       06		      .byte.b	#6
   2679  fdd4		       0e		      .byte.b	#14
   2680  fdd5
   2681  fdd5				   EngineBaseFrequence
   2682  fdd5		       1f		      .byte.b	#31
   2683  fdd6		       15		      .byte.b	#21
   2684  fdd7		       14		      .byte.b	#20
   2685  fdd8		       1f		      .byte.b	#31
   2686  fdd9		       16		      .byte.b	#22
   2687  fdda		       03		      .byte.b	#3
   2688  fddb
   2689  fddb				   TachometerSizeLookup1
   2690  fddb		       1f		      .byte.b	#%00011111
   2691  fddc		       3f		      .byte.b	#%00111111
   2692  fddd		       7f		      .byte.b	#%01111111
   2693  fdde		       ff		      .byte.b	#%11111111
   2694  fddf		       ff		      .byte.b	#%11111111
   2695  fde0		       ff		      .byte.b	#%11111111
   2696  fde1		       ff		      .byte.b	#%11111111
   2697  fde2		       ff		      .byte.b	#%11111111
   2698  fde3
   2699  fde3				   TachometerSizeLookup2
   2700  fde3		       00		      .byte.b	#%00000000
   2701  fde4		       00		      .byte.b	#%00000000
   2702  fde5		       00		      .byte.b	#%00000000
   2703  fde6		       00		      .byte.b	#%00000000
   2704  fde7		       80		      .byte.b	#%10000000
   2705  fde8		       c0		      .byte.b	#%11000000
   2706  fde9		       e0		      .byte.b	#%11100000
   2707  fdea		       f0		      .byte.b	#%11110000
   2708  fdeb
   2709  fdeb				   TachometerGearLookup
   2710  fdeb		       01		      .byte.b	#%00000001
   2711  fdec		       02		      .byte.b	#%00000010
   2712  fded		       04		      .byte.b	#%00000100
   2713  fdee		       08		      .byte.b	#%00001000
   2714  fdef		       10		      .byte.b	#%00010000
   2715  fdf0		       30		      .byte.b	#%00110000
   2716  fdf1
   2717  fe00					      org	$FE00
   2718  fe00				   AesTable
   2719  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2720  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2721  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2722  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2723  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2724  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2725  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2726  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2727  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2728  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2729  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2730  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2731  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2732  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2733  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2734  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2735  ff00
   2736  ff00							; From FF00 to FFFB (122 bytes) to use here
   2737  ff00
   2738  ff00				   StaticText		; All static text must be on the same MSB block. 
   2739  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2740  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2741  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2742  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2743  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2744  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2745  ff05
   2746  ff05				   HellwayLeftText
   2747  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2748  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2749  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2750  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2751  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2752  ff0a
   2753  ff0a				   HellwayRightText
   2754  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2755  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2756  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2757  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2758  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2759  ff0f
   2760  ff0f				   OpbText
   2761  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2762  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2763  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2764  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2765  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2766  ff14
   2767  ff14				   YearText
   2768  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2769  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2770  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2771  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2772  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2773  ff19
   2774  ff19				   GameText
   2775  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2776  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2777  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2778  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2779  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2780  ff1e
   2781  ff1e				   OverText
   2782  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2783  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2784  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2785  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2786  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2787  ff23				   GoText
   2788  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2789  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2790  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2791  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2792  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2793  ff28
   2794  ff28				   ZeldaTextLeft
   2795  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2796  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2797  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2798  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2799  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2800  ff2d
   2801  ff2d				   ZeldaTextRight
   2802  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2803  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2804  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2805  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2806  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2807  ff32
   2808  ff32				   ZeldaDateLeft
   2809  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2810  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2811  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2812  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2813  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2814  ff37
   2815  ff37				   ZeldaDateRight
   2816  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2817  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2818  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2819  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2820  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2821  ff3c
   2822  ff3c				   PolvinhosTextLeft
   2823  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2824  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2825  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2826  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2827  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2828  ff41
   2829  ff41				   PolvinhosTextRight
   2830  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2831  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2832  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2833  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2834  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2835  ff46
   2836  ff46				   PolvinhosDateLeft
   2837  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2838  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2839  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2840  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2841  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2842  ff4b
   2843  ff4b				   PolvinhosDateRight
   2844  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2845  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2846  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2847  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2848  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2849  ff50
   2850  ff50				   IvonneTextLeft
   2851  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2852  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2853  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2854  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2855  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2856  ff55
   2857  ff55				   IvonneTextRight
   2858  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2859  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2860  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2861  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2862  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2863  ff5a
   2864  ff5a				   IvonneDateLeft
   2865  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2866  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2867  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2868  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2869  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2870  ff5f
   2871  ff5f				   IvonneDateRight
   2872  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2873  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2874  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2875  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2876  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2877  ff64
   2878  ff64				   PaperArtTextLeft
   2879  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2880  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2881  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2882  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2883  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2884  ff69
   2885  ff69				   PaperArtTextRight
   2886  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2887  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2888  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2889  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2890  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2891  ff6e
   2892  ff6e				   LeonardoTextLeft
   2893  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2894  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2895  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2896  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2897  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2898  ff73
   2899  ff73				   LeonardoTextRight
   2900  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2901  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2902  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2903  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2904  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2905  ff78
   2906  ff78				   VersionText
   2907  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2908  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2909  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2910  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2911  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2912  ff7d
   2913  ff7d
   2914  ff7d				   EndStaticText
   2915  ff7d
   2916  ff7d				   CarSprite0		; Upside down, Original Car
   2917  ff7d		       00 00 00 00*	      ds	7
   2918  ff84		       7e		      .byte.b	#%01111110
   2919  ff85		       24		      .byte.b	#%00100100
   2920  ff86		       bd		      .byte.b	#%10111101
   2921  ff87		       3c		      .byte.b	#%00111100
   2922  ff88		       bd		      .byte.b	#%10111101
   2923  ff89		       3c		      .byte.b	#%00111100
   2924  ff8a
   2925  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2926  ff8a		       00 00 00 00*	      ds	7
   2927  ff91		       bd		      .byte.b	#%10111101
   2928  ff92		       7e		      .byte.b	#%01111110
   2929  ff93		       5a		      .byte.b	#%01011010
   2930  ff94		       66		      .byte.b	#%01100110
   2931  ff95		       bd		      .byte.b	#%10111101
   2932  ff96		       3c		      .byte.b	#%00111100
   2933  ff97
   2934  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2935  ff97		       00 00 00 00*	      ds	7
   2936  ff9e		       7e		      .byte.b	#%01111110
   2937  ff9f		       a5		      .byte.b	#%10100101
   2938  ffa0		       42		      .byte.b	#%01000010
   2939  ffa1		       42		      .byte.b	#%01000010
   2940  ffa2		       bd		      .byte.b	#%10111101
   2941  ffa3		       7e		      .byte.b	#%01111110
   2942  ffa4
   2943  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2944  ffa4		       00 00 00 00*	      ds	7
   2945  ffab		       3c		      .byte.b	#%00111100
   2946  ffac		       db		      .byte.b	#%11011011
   2947  ffad		       db		      .byte.b	#%11011011
   2948  ffae		       3c		      .byte.b	#%00111100
   2949  ffaf		       5a		      .byte.b	#%01011010
   2950  ffb0		       3c		      .byte.b	#%00111100
   2951  ffb1
   2952  ffb1				   TrafficSpeeds
   2953  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2954  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2955  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2956  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2957  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2958  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2959  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2960  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2961  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2962  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2963  ffbb				   TrafficSpeedsHighDelta
   2964  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2965  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2966  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2967  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2968  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2969  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2970  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2971  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2972  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2973  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2974  ffc5
   2975  ffc5				   CarIdToSpriteAddressL
   2976  ffc5		       7d		      .byte.b	#<CarSprite0
   2977  ffc6		       8a		      .byte.b	#<CarSprite1
   2978  ffc7		       97		      .byte.b	#<CarSprite2
   2979  ffc8		       a4		      .byte.b	#<CarSprite3
   2980  ffc9
   2981  ffc9				   CarIdToSpriteAddressH
   2982  ffc9		       ff		      .byte.b	#>CarSprite0
   2983  ffca		       ff		      .byte.b	#>CarSprite1
   2984  ffcb		       ff		      .byte.b	#>CarSprite2
   2985  ffcc		       ff		      .byte.b	#>CarSprite3
   2986  ffcd
   2987  ffcd				   CarIdToAccelerateSpeed
   2988  ffcd		       80		      .byte.b	#128
   2989  ffce		       c0		      .byte.b	#192
   2990  ffcf		       60		      .byte.b	#96
   2991  ffd0		       c0		      .byte.b	#192
   2992  ffd1
   2993  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2994  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   2995  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   2996  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   2997  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   2998  ffd5
   2999  ffd5				   CarIdToMaxSpeedL
   3000  ffd5		       80		      .byte.b	#$80
   3001  ffd6		       00		      .byte.b	#$00	; One less gear
   3002  ffd7		       80		      .byte.b	#$80
   3003  ffd8		       80		      .byte.b	#$80
   3004  ffd9
   3005  ffd9				   CarIdToMaxGear
   3006  ffd9		       05		      .byte.b	#5
   3007  ffda		       04		      .byte.b	#4	; One less gear
   3008  ffdb		       05		      .byte.b	#5
   3009  ffdc		       05		      .byte.b	#5
   3010  ffdd
   3011  ffdd				   GearToBreakSpeedTable
   3012  ffdd		       09		      .byte.b	#(BREAK_SPEED - 1)
   3013  ffde		       09		      .byte.b	#(BREAK_SPEED - 1)
   3014  ffdf		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3015  ffe0		       0b		      .byte.b	#(BREAK_SPEED + 1)
   3016  ffe1		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3017  ffe2		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3018  ffe3
   3019  ffe3				   TrafficColorTable
   3020  ffe3		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3021  ffe4		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3022  ffe5		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3023  ffe6		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3024  ffe7
   3025  ffe7				   TrafficChanceTable
   3026  ffe7		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3027  ffe8		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3028  ffe9		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3029  ffea		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3030  ffeb
   3031  ffeb				   TrafficTimeTable
   3032  ffeb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3033  ffec		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3034  ffed		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3035  ffee		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3036  ffef		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3037  fff0
   3038  fff0
   3039  fffc					      org	$FFFC
   3040  fffc		       00 f0		      .word.w	BeforeStart
   3041  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
