------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 ed f6 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 ba f6 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080		       85 b9		      STA	OpCountdownTimer	;3
    283  f082
    284  f082				   ConfigurePlayer1XPosition
    285  f082		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    286  f084		       85 b7		      STA	Player1X	;3
    287  f086
    288  f086				   HPositioning 		; Avoid sleep doing needed stuff
    289  f086		       85 02		      STA	WSYNC
    290  f088
    291  f088				   ConfigurePlayer0XPosition
    292  f088		       a9 21		      LDA	#PLAYER_0_X_START	;2
    293  f08a		       85 b6		      STA	Player0X	;3
    294  f08c
    295  f08c				   ConfigureMissileSize
    296  f08c		       a9 30		      LDA	#%00110000	;2 Missile Size
    297  f08e		       85 04		      STA	NUSIZ0	;3
    298  f090		       85 05		      STA	NUSIZ1	;3
    299  f092
    300  f092				   ConfigureNextCheckpoint
    301  f092		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    302  f094		       85 cd		      STA	NextCheckpoint
    303  f096
    304  f096		       a9 00		      LDA	#0	; Avoid missile reseting position 
    305  f098							;SLEEP 41
      0  f098					      SLEEP	4	;
      1  f098				   .CYCLES    SET	4
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     19  f09a					      REPEND
    307  f09a		       85 12		      STA	RESM0
      0  f09c					      SLEEP	2	;
      1  f09c				   .CYCLES    SET	2
      2  f09c
      3  f09c				  -	      IF	.CYCLES < 2
      4  f09c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09c				  -	      ERR
      6  f09c					      ENDIF
      7  f09c
      8  f09c				  -	      IF	.CYCLES & 1
      9  f09c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09c				  -	      nop	0
     11  f09c				  -	      ELSE
     12  f09c				  -	      bit	VSYNC
     13  f09c				  -	      ENDIF
     14  f09c				  -.CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c					      REPEAT	.CYCLES / 2
     18  f09c		       ea		      nop
     19  f09d					      REPEND
    309  f09d		       85 14		      STA	RESBL
      0  f09f					      SLEEP	2
      1  f09f				   .CYCLES    SET	2
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f				  -	      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f				  -	      ELSE
     12  f09f				  -	      bit	VSYNC
     13  f09f				  -	      ENDIF
     14  f09f				  -.CYCLES    SET	.CYCLES - 3
     15  f09f					      ENDIF
     16  f09f
     17  f09f					      REPEAT	.CYCLES / 2
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    311  f0a0		       85 13		      STA	RESM1
      0  f0a2					      SLEEP	3
      1  f0a2				   .CYCLES    SET	3
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4				  -	      REPEAT	.CYCLES / 2
     18  f0a4				  -	      nop
     19  f0a4					      REPEND
    313  f0a4
    314  f0a4		       a9 e0		      LDA	#$E0
    315  f0a6		       85 24		      STA	HMBL
    316  f0a8		       85 22		      STA	HMM0
    317  f0aa		       85 23		      STA	HMM1
    318  f0ac		       85 02		      STA	WSYNC
    319  f0ae		       85 2a		      STA	HMOVE
    320  f0b0		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    321  f0b2		       85 2b		      STA	HMCLR
      0  f0b4					      SLEEP	30
      1  f0b4				   .CYCLES    SET	30
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     19  f0c3					      REPEND
    323  f0c3		       85 10		      STA	RESP0
    324  f0c5							;SLEEP 5 ; Temporarily move player 1 away.
    325  f0c5		       85 11		      STA	RESP1
    326  f0c7
    327  f0c7				   WaitResetToEnd
    328  f0c7		       ad 84 02 	      LDA	INTIM
    329  f0ca		       d0 fb		      BNE	WaitResetToEnd
    330  f0cc
    331  f0cc				   MainLoop
    332  f0cc		       a9 02		      LDA	#2
    333  f0ce		       85 00		      STA	VSYNC
    334  f0d0		       85 02		      STA	WSYNC
    335  f0d2		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    336  f0d4				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    337  f0d4		       a9 01		      LDA	#%00000001	;3
    338  f0d6		       24 df		      BIT	TextFlickerMode	;2
    339  f0d8		       f0 05		      BEQ	TextSideFrameZero	;2
    340  f0da		       25 8d		      AND	FrameCount1	;2
    341  f0dc		       4c e1 f0 	      JMP	StoreTextSize	;3
    342  f0df				   TextSideFrameZero
    343  f0df		       25 8c		      AND	FrameCount0	;2
    344  f0e1				   StoreTextSize
    345  f0e1		       85 de		      STA	TextSide	;3
    346  f0e3
    347  f0e3				   PrepareMaxHMove
      0  f0e3					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e3				   .CYCLES    SET	18
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     19  f0ec					      REPEND
    349  f0ec		       a9 80		      LDA	#$80
    350  f0ee		       85 24		      STA	HMBL
    351  f0f0		       85 22		      STA	HMM0
    352  f0f2		       85 23		      STA	HMM1
    353  f0f4		       85 20		      STA	HMP0
    354  f0f6		       85 21		      STA	HMP1
    355  f0f8		       85 02		      STA	WSYNC
    356  f0fa		       85 2a		      STA	HMOVE	; 1/10			
    357  f0fc
    358  f0fc				   ConfigVBlankTimer
    359  f0fc		       a5 c6		      LDA	GameMode
    360  f0fe		       c9 10		      CMP	#MAX_GAME_MODE
    361  f100		       f0 05		      BEQ	SetVblankTimerQrCode
    362  f102		       a9 29		      LDA	#VBLANK_TIMER
    363  f104		       4c 09 f1 	      JMP	SetVblankTimer
    364  f107				   SetVblankTimerQrCode
    365  f107		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    366  f109
    367  f109				   SetVblankTimer
    368  f109		       85 02		      STA	WSYNC	;3
    369  f10b		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    370  f10d		       8d 96 02 	      STA	TIM64T	;3	
    371  f110		       a9 00		      LDA	#0	;2
    372  f112		       85 00		      STA	VSYNC	;3	
    373  f114
    374  f114				   RandomizeGame
    375  f114		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f116		       d0 2d		      BNE	EndRandomizeGame
    377  f118		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f11a		       29 02		      AND	#%00000010
    379  f11c		       f0 24		      BEQ	DeterministicGame
    380  f11e		       a6 96		      LDX	TrafficOffset1 + 2
    381  f120		       bd 00 fe 	      LDA	AesTable,X
    382  f123		       45 8c		      EOR	FrameCount0
    383  f125		       85 96		      STA	TrafficOffset1 + 2
    384  f127		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f129		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f12b		       bd 00 fe 	      LDA	AesTable,X
    387  f12e		       45 8c		      EOR	FrameCount0
    388  f130		       85 9a		      STA	TrafficOffset2 + 2
    389  f132		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f134		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f136		       bd 00 fe 	      LDA	AesTable,X
    392  f139		       45 8c		      EOR	FrameCount0
    393  f13b		       85 9e		      STA	TrafficOffset3 + 2
    394  f13d		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13f		       4c 45 f1 	      JMP	EndRandomizeGame
    396  f142
    397  f142				   DeterministicGame
    398  f142		       20 ed f6 	      JSR	DefaultOffsets
    399  f145
    400  f145				   EndRandomizeGame
    401  f145
    402  f145
    403  f145				   CountFrame
    404  f145		       e6 8c		      INC	FrameCount0	; 5
    405  f147		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    406  f149		       e6 8d		      INC	FrameCount1	; 5 
    407  f14b				   SkipIncFC1
    408  f14b
    409  f14b				   CallDrawQrCode
    410  f14b		       a5 c6		      LDA	GameMode
    411  f14d		       c9 10		      CMP	#MAX_GAME_MODE
    412  f14f		       d0 03		      BNE	TestIsGameRunning
    413  f151		       4c 64 fc 	      JMP	DrawQrCode
    414  f154
    415  f154							;Does not update the game if not running
    416  f154				   TestIsGameRunning
    417  f154		       a5 bd		      LDA	GameStatus	;3
    418  f156		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    419  f158				   SelectCarWithDpadCall		; Only do it when game is stoped
    420  f158		       a2 00		      LDX	#0	; Player 0
    421  f15a		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    422  f15c		       85 b0		      STA	Tmp0
    423  f15e		       20 68 f9 	      JSR	SelectCarWithDpad
    424  f161		       e8		      INX		; Player 1
    425  f162		       20 68 f9 	      JSR	SelectCarWithDpad
    426  f165
    427  f165							; Needs to draw the opponent in the correct line even when game stoped  
    428  f165							; Draeing is a destructive operation
    429  f165		       20 7a f9 	      JSR	ProcessOpponentLine
    430  f168
    431  f168				   CallConfigureCarSprites
    432  f168		       20 36 f9 	      JSR	ConfigureCarSprites
    433  f16b				   SkipUpdateLogicJump
    434  f16b		       4c b4 f1 	      JMP	SkipUpdateLogic
    435  f16e				   ContinueWithGameLogic
    436  f16e
    437  f16e				   CallEverySecond		; Timer for now
    438  f16e		       a2 00		      LDX	#0
    439  f170		       20 2d fb 	      JSR	EverySecond
    440  f173		       e8		      INX
    441  f174		       20 2d fb 	      JSR	EverySecond
    442  f177
    443  f177
    444  f177				   ChangeTextFlickerMode
    445  f177		       a5 bc		      LDA	SwitchDebounceCounter
    446  f179		       d0 0d		      BNE	EndChangeTextFlickerMode
    447  f17b		       ad 82 02 	      LDA	SWCHB
    448  f17e		       29 02		      AND	#%00000010	;Game select
    449  f180		       d0 06		      BNE	EndChangeTextFlickerMode
    450  f182		       e6 df		      INC	TextFlickerMode
    451  f184		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    452  f186		       85 bc		      STA	SwitchDebounceCounter
    453  f188				   EndChangeTextFlickerMode
    454  f188
    455  f188				   CallProcessSpeed
    456  f188		       a2 00		      LDX	#0
    457  f18a		       20 8a fa 	      JSR	ProcessSpeed
    458  f18d
    459  f18d		       e8		      INX		; Player 1
    460  f18e		       20 8a fa 	      JSR	ProcessSpeed
    461  f191
    462  f191				   CallUpdateOffsets
    463  f191		       a2 00		      LDX	#0	; Player 0
    464  f193		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    465  f195		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    466  f197		       a5 f0		      LDA	Player0SpeedL
    467  f199		       85 b4		      STA	Tmp4
    468  f19b		       a5 f2		      LDA	Player0SpeedH
    469  f19d		       85 b5		      STA	Tmp5
    470  f19f		       20 37 fa 	      JSR	UpdateOffsets
    471  f1a2
    472  f1a2							;LDX Exits the call with correct value.
    473  f1a2		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    474  f1a4		       85 b3		      STA	Tmp3
    475  f1a6		       a5 f1		      LDA	Player1SpeedL
    476  f1a8		       85 b4		      STA	Tmp4
    477  f1aa		       a5 f3		      LDA	Player1SpeedH
    478  f1ac		       85 b5		      STA	Tmp5
    479  f1ae		       20 37 fa 	      JSR	UpdateOffsets
    480  f1b1
    481  f1b1				   CallProcessOpponentLine
    482  f1b1		       20 7a f9 	      JSR	ProcessOpponentLine
    483  f1b4
    484  f1b4
    485  f1b4				   SkipUpdateLogic		; Continue here if not paused
    486  f1b4
    487  f1b4				   CallStatusUpdateSbr
    488  f1b4		       a2 00		      LDX	#0
    489  f1b6		       20 3a fb 	      JSR	CalculateGear
    490  f1b9		       20 47 fb 	      JSR	ProcessScoreFontColor
    491  f1bc		       e8		      INX
    492  f1bd		       20 3a fb 	      JSR	CalculateGear
    493  f1c0		       20 47 fb 	      JSR	ProcessScoreFontColor
    494  f1c3
    495  f1c3				   IsGameOver
    496  f1c3		       a5 b8		      LDA	CountdownTimer
    497  f1c5		       05 f0		      ORA	Player0SpeedL
    498  f1c7		       05 f2		      ORA	Player0SpeedH
    499  f1c9		       d0 0b		      BNE	IsCheckpoint
    500  f1cb		       a9 01		      LDA	#1
    501  f1cd		       85 cb		      STA	ScoreFontColorHoldChange
    502  f1cf		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    503  f1d1		       85 c9		      STA	ScoreFontColor
    504  f1d3		       4c 08 f2 	      JMP	SkipIsTimeOver
    505  f1d6
    506  f1d6				   IsCheckpoint
    507  f1d6		       a5 cd		      LDA	NextCheckpoint
    508  f1d8		       c5 92		      CMP	TrafficOffset0 + 2
    509  f1da		       d0 20		      BNE	SkipIsCheckpoint
    510  f1dc		       18		      CLC
    511  f1dd		       69 10		      ADC	#CHECKPOINT_INTERVAL
    512  f1df		       85 cd		      STA	NextCheckpoint
    513  f1e1		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    514  f1e3		       85 c9		      STA	ScoreFontColor
    515  f1e5		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    516  f1e7		       85 cb		      STA	ScoreFontColorHoldChange
    517  f1e9		       a5 b8		      LDA	CountdownTimer
    518  f1eb		       18		      CLC
    519  f1ec		       65 c0		      ADC	CheckpointTime
    520  f1ee		       85 b8		      STA	CountdownTimer
    521  f1f0		       90 04		      BCC	JumpSkipTimeOver
    522  f1f2		       a9 ff		      LDA	#$FF
    523  f1f4		       85 b8		      STA	CountdownTimer	; Does not overflow!
    524  f1f6				   JumpSkipTimeOver
    525  f1f6		       20 ab f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    526  f1f9		       4c 08 f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    527  f1fc				   SkipIsCheckpoint
    528  f1fc
    529  f1fc				   IsTimeOver
    530  f1fc		       a5 b8		      LDA	CountdownTimer
    531  f1fe		       d0 08		      BNE	SkipIsTimeOver
    532  f200		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    533  f202		       85 cb		      STA	ScoreFontColorHoldChange
    534  f204		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    535  f206		       85 c9		      STA	ScoreFontColor
    536  f208				   SkipIsTimeOver
    537  f208
    538  f208		       20 36 f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    539  f20b
    540  f20b				   CallProcessSound
    541  f20b		       20 d1 f5 	      JSR	ProcessSound
    542  f20e
    543  f20e				   PrintEasterEggCondition
    544  f20e		       a5 8d		      LDA	FrameCount1
    545  f210		       29 38		      AND	#%00111000
    546  f212		       05 bd		      ORA	GameStatus
    547  f214		       c9 38		      CMP	#%00111000
    548  f216		       d0 06		      BNE	ChooseTextSide
    549  f218		       20 20 f7 	      JSR	PrintEasterEgg
    550  f21b		       4c 0d f3 	      JMP	RightScoreWriteEnd
    551  f21e
    552  f21e							;Could be done during on vblank to save this comparisson time (before draw score), 
    553  f21e							;but I am saving vblank cycles for now, in case of 2 players.
    554  f21e				   ChooseTextSide		; 
    555  f21e		       a5 de		      LDA	TextSide	;3
    556  f220		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    557  f222		       4c a3 f2 	      JMP	RightScoreWrite
    558  f225
    559  f225				   LeftScoreWrite
    560  f225		       a5 c9		      LDA	ScoreFontColor
    561  f227		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    562  f229		       f0 4e		      BEQ	PrintCheckpoint
    563  f22b		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    564  f22d		       f0 52		      BEQ	PrintStartGame
    565  f22f		       a5 bd		      LDA	GameStatus
    566  f231		       f0 56		      BEQ	PrintHellwayLeft
    567  f233				   WriteDistance		;Not optimized yet, ugly code.
    568  f233				   Digit0Distance
    569  f233		       a5 91		      LDA	TrafficOffset0 + 1	;3
    570  f235		       4a		      LSR		; 2
    571  f236		       4a		      LSR		; 2
    572  f237		       4a		      LSR		; 2
    573  f238		       4a		      LSR		; 2
    574  f239		       aa		      TAX		; 2
    575  f23a		       bd be fd 	      LDA	FontLookup,X	;4
    576  f23d		       85 d3		      STA	ScoreD3	;3
    577  f23f
    578  f23f				   Digit1Distance
    579  f23f		       a5 92		      LDA	TrafficOffset0 + 2	;3
    580  f241		       29 0f		      AND	#%00001111	;2
    581  f243		       aa		      TAX		; 2
    582  f244		       bd be fd 	      LDA	FontLookup,X	;4 
    583  f247		       85 d2		      STA	ScoreD2	;3
    584  f249
    585  f249				   Digit2Distance
    586  f249		       a5 92		      LDA	TrafficOffset0 + 2	;3
    587  f24b		       4a		      LSR		; 2
    588  f24c		       4a		      LSR		; 2
    589  f24d		       4a		      LSR		; 2
    590  f24e		       4a		      LSR		; 2
    591  f24f		       aa		      TAX		; 2
    592  f250		       bd be fd 	      LDA	FontLookup,X	;4
    593  f253		       85 d1		      STA	ScoreD1	;3
    594  f255
    595  f255				   Digit3Distance
    596  f255		       a5 ba		      LDA	Traffic0Msb	;3
    597  f257		       29 0f		      AND	#%00001111	;2
    598  f259		       aa		      TAX		; 2
    599  f25a		       bd be fd 	      LDA	FontLookup,X	;4 
    600  f25d		       85 d0		      STA	ScoreD0	;3
    601  f25f
    602  f25f				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    603  f25f		       a5 ba		      LDA	Traffic0Msb
    604  f261		       29 f0		      AND	#%11110000	;2
    605  f263		       d0 07		      BNE	DrawDistanceExtraDigit
    606  f265		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    607  f267		       85 d4		      STA	ScoreD4	;3
    608  f269		       4c 76 f2 	      JMP	EndDrawDistance
    609  f26c				   DrawDistanceExtraDigit
    610  f26c		       4a		      LSR		; 2
    611  f26d		       4a		      LSR		; 2
    612  f26e		       4a		      LSR		; 2
    613  f26f		       4a		      LSR		; 2
    614  f270		       aa		      TAX		; 2
    615  f271		       bd be fd 	      LDA	FontLookup,X	;4
    616  f274		       85 d4		      STA	ScoreD4	;3
    617  f276
    618  f276				   EndDrawDistance
    619  f276		       4c 0d f3 	      JMP	RightScoreWriteEnd	;3
    620  f279
    621  f279				   PrintCheckpoint
    622  f279		       a2 00		      LDX	#<CheckpointText
    623  f27b		       20 02 f7 	      JSR	PrintStaticText
    624  f27e		       4c 0d f3 	      JMP	RightScoreWriteEnd	;3
    625  f281				   PrintStartGame
    626  f281		       a2 23		      LDX	#<GoText
    627  f283		       20 02 f7 	      JSR	PrintStaticText
    628  f286		       4c 0d f3 	      JMP	RightScoreWriteEnd	;3
    629  f289
    630  f289				   PrintHellwayLeft
    631  f289		       a5 8d		      LDA	FrameCount1
    632  f28b		       29 01		      AND	#1
    633  f28d		       d0 05		      BNE	PrintCreditsLeft
    634  f28f		       a2 05		      LDX	#<HellwayLeftText
    635  f291		       4c 96 f2 	      JMP	PrintGameMode
    636  f294				   PrintCreditsLeft
    637  f294		       a2 0f		      LDX	#<OpbText
    638  f296
    639  f296				   PrintGameMode
    640  f296		       20 02 f7 	      JSR	PrintStaticText
    641  f299		       a6 c6		      LDX	GameMode
    642  f29b		       bd be fd 	      LDA	FontLookup,X	;4 
    643  f29e		       85 d0		      STA	ScoreD0	;3
    644  f2a0		       4c 0d f3 	      JMP	RightScoreWriteEnd	;3
    645  f2a3
    646  f2a3				   RightScoreWrite
    647  f2a3		       a5 bd		      LDA	GameStatus
    648  f2a5		       f0 45		      BEQ	PrintHellwayRight
    649  f2a7		       a5 c9		      LDA	ScoreFontColor
    650  f2a9		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    651  f2ab		       f0 52		      BEQ	PrintGameOver
    652  f2ad				   Digit0Timer
    653  f2ad		       a5 b8		      LDA	CountdownTimer	;3
    654  f2af		       29 0f		      AND	#%00001111	;2
    655  f2b1		       aa		      TAX		; 2
    656  f2b2		       bd be fd 	      LDA	FontLookup,X	;4 
    657  f2b5		       85 d1		      STA	ScoreD1	;3
    658  f2b7
    659  f2b7				   Digit1Timer
    660  f2b7		       a5 b8		      LDA	CountdownTimer	;3
    661  f2b9		       4a		      LSR		; 2
    662  f2ba		       4a		      LSR		; 2
    663  f2bb		       4a		      LSR		; 2
    664  f2bc		       4a		      LSR		; 2
    665  f2bd		       aa		      TAX		; 2
    666  f2be		       bd be fd 	      LDA	FontLookup,X	;4
    667  f2c1		       85 d0		      STA	ScoreD0	;3
    668  f2c3
    669  f2c3		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    670  f2c5		       85 d2		      STA	ScoreD2	;3
    671  f2c7
    672  f2c7				   Digit0Speed
    673  f2c7		       a5 f0		      LDA	Player0SpeedL
    674  f2c9		       29 3c		      AND	#%00111100	;2 Discard the last bits
    675  f2cb		       4a		      LSR		; 2
    676  f2cc		       4a		      LSR		; 2
    677  f2cd		       aa		      TAX		; 2
    678  f2ce		       bd be fd 	      LDA	FontLookup,X	;4
    679  f2d1		       85 d4		      STA	ScoreD4	;3
    680  f2d3
    681  f2d3				   Digit1Speed
    682  f2d3		       a5 f0		      LDA	Player0SpeedL
    683  f2d5		       29 c0		      AND	#%11000000	;2 Discard the last bits
    684  f2d7		       18		      CLC
    685  f2d8		       2a		      ROL		;First goes into carry
    686  f2d9		       2a		      ROL
    687  f2da		       2a		      ROL
    688  f2db		       85 b0		      STA	Tmp0
    689  f2dd		       a5 f2		      LDA	Player0SpeedH
    690  f2df		       0a		      ASL
    691  f2e0		       0a		      ASL
    692  f2e1		       05 b0		      ORA	Tmp0
    693  f2e3		       aa		      TAX		; 2
    694  f2e4		       bd be fd 	      LDA	FontLookup,X	;4
    695  f2e7		       85 d3		      STA	ScoreD3	;3
    696  f2e9		       4c 0d f3 	      JMP	RightScoreWriteEnd
    697  f2ec
    698  f2ec				   PrintHellwayRight
    699  f2ec		       a5 8d		      LDA	FrameCount1
    700  f2ee		       29 01		      AND	#1
    701  f2f0		       d0 05		      BNE	PrintCreditsRight
    702  f2f2		       a2 0a		      LDX	#<HellwayRightText
    703  f2f4		       4c f9 f2 	      JMP	PrintRightIntro
    704  f2f7				   PrintCreditsRight
    705  f2f7		       a2 14		      LDX	#<YearText
    706  f2f9				   PrintRightIntro
    707  f2f9		       20 02 f7 	      JSR	PrintStaticText
    708  f2fc		       4c 0d f3 	      JMP	RightScoreWriteEnd
    709  f2ff				   PrintGameOver
    710  f2ff		       a5 8c		      LDA	FrameCount0
    711  f301		       30 05		      BMI	PrintOverText
    712  f303		       a2 19		      LDX	#<GameText
    713  f305		       4c 0a f3 	      JMP	StoreGameOverText
    714  f308				   PrintOverText
    715  f308		       a2 1e		      LDX	#<OverText
    716  f30a				   StoreGameOverText
    717  f30a		       20 02 f7 	      JSR	PrintStaticText
    718  f30d				   RightScoreWriteEnd
    719  f30d
    720  f30d
    721  f30d				   ScoreBackgroundColor
    722  f30d		       a2 00		      LDX	#0
    723  f30f		       ad 82 02 	      LDA	SWCHB
    724  f312		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    725  f314		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    726  f316		       f0 04		      BEQ	BlackAndWhiteScoreBg
    727  f318		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    728  f31a		       a2 03		      LDX	#BACKGROUND_COLOR
    729  f31c				   BlackAndWhiteScoreBg
    730  f31c		       85 b2		      STA	Tmp2	; Score Background
    731  f31e		       86 b3		      STX	Tmp3	; Traffic Background
    732  f320
    733  f320				   ConfigurePFForScore
    734  f320							;LDA #SCORE_BACKGROUND_COLOR; Done above
    735  f320		       85 09		      STA	COLUBK
    736  f322		       20 69 f6 	      JSR	ClearAll
    737  f325		       a9 02		      LDA	#%00000010	; Score mode
    738  f327		       85 0a		      STA	CTRLPF
    739  f329		       a5 de		      LDA	TextSide	;3
    740  f32b		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    741  f32d				   LeftScoreOn
    742  f32d		       a5 c9		      LDA	ScoreFontColor
    743  f32f		       85 07		      STA	COLUP1
    744  f331		       a5 b2		      LDA	Tmp2
    745  f333		       85 06		      STA	COLUP0
    746  f335		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    747  f337		       85 b1		      STA	Tmp1
    748  f339		       4c 48 f3 	      JMP	CallWaitForVblankEnd
    749  f33c				   RightScoreOn
    750  f33c		       a5 c9		      LDA	ScoreFontColor
    751  f33e		       85 06		      STA	COLUP0
    752  f340		       a5 b2		      LDA	Tmp2
    753  f342		       85 07		      STA	COLUP1
    754  f344		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    755  f346		       85 b1		      STA	Tmp1
    756  f348
    757  f348							; After here we are going to update the screen, No more heavy code
    758  f348				   CallWaitForVblankEnd
    759  f348		       20 07 f9 	      JSR	WaitForVblankEnd
    760  f34b
    761  f34b				   DrawScoreHud
    762  f34b		       20 92 f7 	      JSR	PrintScore
    763  f34e
    764  f34e		       85 02		      STA	WSYNC
    765  f350
    766  f350		       a5 0c		      LDA	INPT4	;3
    767  f352		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    768  f354		       a5 c9		      LDA	ScoreFontColor
    769  f356		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    770  f358		       d0 0a		      BNE	WaitAnotherScoreLine
    771  f35a		       a5 de		      LDA	TextSide	;3
    772  f35c		       d0 03		      BNE	LeftScoreOnGameOver
    773  f35e		       4c e1 f8 	      JMP	DrawGameOverScreenRight
    774  f361				   LeftScoreOnGameOver
    775  f361		       4c 53 f8 	      JMP	DrawGameOverScreenLeft
    776  f364
    777  f364				   WaitAnotherScoreLine
    778  f364		       85 02		      STA	WSYNC
    779  f366
    780  f366				   PrepareForTraffic
    781  f366		       20 7f f6 	      JSR	ClearPF	; 32
    782  f369
    783  f369		       85 02		      STA	WSYNC
    784  f36b		       85 2a		      STA	HMOVE
    785  f36d		       85 02		      STA	WSYNC
    786  f36f		       85 2a		      STA	HMOVE
    787  f371
    788  f371		       a9 30		      LDA	#%00110000	; 2 Score mode
    789  f373		       85 0a		      STA	CTRLPF	;3
    790  f375
    791  f375		       a5 c2		      LDA	TrafficColor	;3
    792  f377		       85 08		      STA	COLUPF	;3
    793  f379
    794  f379		       a9 96		      LDA	#PLAYER1_COLOR	;2
    795  f37b		       85 07		      STA	COLUP1	;3
    796  f37d
    797  f37d		       a5 c9		      LDA	ScoreFontColor	;3
    798  f37f		       85 06		      STA	COLUP0	;3
    799  f381
    800  f381		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    801  f383
    802  f383		       20 7f f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    803  f386
    804  f386		       a6 b3		      LDX	Tmp3	; Background color.
    805  f388
      0  f388					      SLEEP	6	; Odd sleep destroys flags
      1  f388				   .CYCLES    SET	6
      2  f388
      3  f388				  -	      IF	.CYCLES < 2
      4  f388				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f388				  -	      ERR
      6  f388					      ENDIF
      7  f388
      8  f388				  -	      IF	.CYCLES & 1
      9  f388				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f388				  -	      nop	0
     11  f388				  -	      ELSE
     12  f388				  -	      bit	VSYNC
     13  f388				  -	      ENDIF
     14  f388				  -.CYCLES    SET	.CYCLES - 3
     15  f388					      ENDIF
     16  f388
     17  f388					      REPEAT	.CYCLES / 2
     18  f388		       ea		      nop
     17  f388					      REPEND
     18  f389		       ea		      nop
     17  f389					      REPEND
     18  f38a		       ea		      nop
     19  f38b					      REPEND
    807  f38b
    808  f38b		       a5 8c		      LDA	FrameCount0	;Brach flag
    809  f38d		       29 01		      AND	#%00000001
    810  f38f
    811  f38f		       86 09		      STX	COLUBK	;3
    812  f391		       d0 05		      BNE	OpDrawCache	;2
    813  f393		       4c 52 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    814  f396							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    815  f396
    816  f396							;main scanline loop...
    817  f396				   OpScanLoop
    818  f396		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    819  f398
    820  f398							;Start of next line!			
    821  f398				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    822  f398
    823  f398		       a5 80		      LDA	GRP0Cache	;3
    824  f39a		       85 1b		      STA	GRP0	;3
    825  f39c
    826  f39c		       a5 84		      LDA	GRP1Cache	;3
    827  f39e		       85 1c		      STA	GRP1	;3
    828  f3a0
    829  f3a0		       a5 85		      LDA	ENABLCache	;3
    830  f3a2		       85 1f		      STA	ENABL	;3
    831  f3a4
    832  f3a4		       a5 86		      LDA	ENAM0Cache	;3
    833  f3a6		       85 1d		      STA	ENAM0	;3
    834  f3a8
    835  f3a8		       a5 87		      LDA	ENAM1Cache	;3
    836  f3aa		       85 1e		      STA	ENAM1	;3
    837  f3ac
    838  f3ac		       a5 81		      LDA	PF0Cache	;3
    839  f3ae		       85 0d		      STA	PF0	;3
    840  f3b0
    841  f3b0		       a9 00		      LDA	#0	;2
    842  f3b2							;STA PF0	     ;3
    843  f3b2		       85 80		      STA	GRP0Cache	;3
    844  f3b4		       85 86		      STA	ENAM0Cache	;3
    845  f3b6		       85 85		      STA	ENABLCache	;3
    846  f3b8		       85 87		      STA	ENAM1Cache	; 3
    847  f3ba							;STA GRP1Cache ;3
    848  f3ba		       85 0d		      STA	PF0	;3
    849  f3bc							;STA PF2	     ;3
    850  f3bc
    851  f3bc		       a5 83		      LDA	PF2Cache	;3
    852  f3be		       85 0f		      STA	PF2	;3
    853  f3c0
    854  f3c0				   OpDrawCar0
    855  f3c0		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    856  f3c2		       b0 04		      BCS	OpSkipDrawCar	;2
    857  f3c4		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    858  f3c6		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    859  f3c8				   OpSkipDrawCar
    860  f3c8
    861  f3c8							;BEQ DrawTraffic3
    862  f3c8				   OpDrawTraffic1		; 33
    863  f3c8		       98		      TYA		; 2
    864  f3c9		       18		      CLC		; 2 
    865  f3ca		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    866  f3cc		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    867  f3ce		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    868  f3d0		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    869  f3d2		       4c d7 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    870  f3d5				   OpEorOffsetWithCarry
    871  f3d5		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    872  f3d7				   OpAfterEorOffsetWithCarry		;17
    873  f3d7		       aa		      TAX		;2
    874  f3d8		       bd 00 fe 	      LDA	AesTable,X	; 4
    875  f3db		       c5 bf		      CMP	OpTrafficChance	;3
    876  f3dd		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    877  f3df		       a9 ff		      LDA	#$FF	;2
    878  f3e1		       85 86		      STA	ENAM0Cache	;3
    879  f3e3				   OpFinishDrawTraffic1
    880  f3e3
    881  f3e3				   OpErasePF2
    882  f3e3		       a9 00		      LDA	#0
    883  f3e5		       85 0f		      STA	PF2
    884  f3e7
    885  f3e7				   OpDrawTraffic2		; 33
    886  f3e7		       98		      TYA		; 2
    887  f3e8		       18		      CLC		; 2 
    888  f3e9		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    889  f3eb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    890  f3ed		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    891  f3ef		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    892  f3f1		       4c f6 f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    893  f3f4				   OpEorOffsetWithCarry2
    894  f3f4		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    895  f3f6				   OpAfterEorOffsetWithCarry2		;17
    896  f3f6		       aa		      TAX		;2
    897  f3f7		       bd 00 fe 	      LDA	AesTable,X	; 4
    898  f3fa		       c5 bf		      CMP	OpTrafficChance	;3
    899  f3fc		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    900  f3fe		       a9 02		      LDA	#%00000010	;2
    901  f400		       85 85		      STA	ENABLCache	;3
    902  f402				   OpFinishDrawTraffic2
    903  f402
    904  f402							;STA WSYNC ;65 / 137
    905  f402
    906  f402							; LDA Tmp0 ; Flicker this line if drawing car
    907  f402							; BEQ FinishDrawTraffic4
    908  f402				   OpDrawTraffic3		; 33
    909  f402		       98		      TYA		; 2
    910  f403		       18		      CLC		; 2 
    911  f404		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    912  f406		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    913  f408		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    914  f40a		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    915  f40c		       4c 11 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    916  f40f				   OpEorOffsetWithCarry3
    917  f40f		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    918  f411				   OpAfterEorOffsetWithCarry3		;17
    919  f411		       aa		      TAX		;2
    920  f412		       bd 00 fe 	      LDA	AesTable,X	; 4
    921  f415		       c5 bf		      CMP	OpTrafficChance	;3
    922  f417		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    923  f419		       a9 02		      LDA	#%00000010	;2
    924  f41b		       85 87		      STA	ENAM1Cache
    925  f41d				   OpFinishDrawTraffic3
    926  f41d
    927  f41d				   OpDrawOponent		;26
    928  f41d		       84 b0		      STY	Tmp0	;3
    929  f41f		       a4 cf		      LDY	OpponentLine	;3
    930  f421		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    931  f423		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    932  f425				   OpDrawOpponent
    933  f425		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    934  f427		       85 80		      STA	GRP0Cache	;3
    935  f429		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    936  f42b		       a4 b0		      LDY	Tmp0	;3
    937  f42d		       4c 41 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    938  f430				   OpSkipDrawOpponent
    939  f430		       c6 cf		      DEC	OpponentLine	;5
    940  f432		       a4 b0		      LDY	Tmp0	;3
    941  f434
    942  f434
    943  f434				   OpDrawTraffic0		; 21 2pe
    944  f434		       98		      TYA		; 2
    945  f435		       18		      CLC		; 2 
    946  f436		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    947  f438		       29 08		      AND	#%00001000	;2
    948  f43a		       f0 05		      BEQ	OpHasNoBorderP0	;3
    949  f43c				   OpHasBorderP0
    950  f43c		       a9 70		      LDA	#%01110000	; 2
    951  f43e		       4c 43 f4 	      JMP	OpStoreBorderP0	; 3
    952  f441				   OpHasNoBorderP0
    953  f441		       a9 00		      LDA	#0	; 2
    954  f443				   OpStoreBorderP0
    955  f443		       85 81		      STA	PF0Cache	; 3
    956  f445		       85 83		      STA	PF2Cache	; 3
    957  f447
    958  f447				   OpSkipDrawTraffic0
    959  f447
    960  f447				   OpWhileScanLoop
    961  f447		       88		      DEY		;2
    962  f448		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    963  f44a		       4c 96 f3 	      JMP	OpScanLoop	;3
    964  f44d				   OpFinishScanLoop		; 7 209 of 222
    965  f44d		       4c 05 f5 	      JMP	FinishScanLoop
    966  f450
    967  f450							;main scanline loop...
    968  f450				   ScanLoop
    969  f450		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    970  f452
    971  f452							;Start of next line!			
    972  f452				   DrawCache		;63 Is the last line going to the top of the next frame?
    973  f452		       a5 81		      LDA	PF0Cache	;3
    974  f454		       85 0d		      STA	PF0	;3
    975  f456
    976  f456		       a5 80		      LDA	GRP0Cache	;3
    977  f458		       85 1b		      STA	GRP0	;3
    978  f45a
    979  f45a		       a5 84		      LDA	GRP1Cache	;3
    980  f45c		       85 1c		      STA	GRP1	;3
    981  f45e
    982  f45e		       a5 86		      LDA	ENAM0Cache	;3
    983  f460		       85 1d		      STA	ENAM0	;3
    984  f462
    985  f462		       a5 85		      LDA	ENABLCache	;3
    986  f464		       85 1f		      STA	ENABL	;3
    987  f466
    988  f466		       a5 87		      LDA	ENAM1Cache	;3
    989  f468		       85 1e		      STA	ENAM1	;3
    990  f46a
    991  f46a		       a5 83		      LDA	PF2Cache	;3
    992  f46c		       85 0f		      STA	PF2	;3
    993  f46e
    994  f46e		       a9 00		      LDA	#0	;2
    995  f470		       85 0d		      STA	PF0	;3
    996  f472		       85 84		      STA	GRP1Cache	;3
    997  f474		       85 85		      STA	ENABLCache	;3
    998  f476		       85 86		      STA	ENAM0Cache	;3
    999  f478		       85 87		      STA	ENAM1Cache	; 3
   1000  f47a							;STA GRP0Cache
   1001  f47a		       85 0f		      STA	PF2	;3
   1002  f47c
   1003  f47c				   DrawCar0
   1004  f47c		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1005  f47e		       b0 04		      BCS	SkipDrawCar	;2
   1006  f480		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1007  f482		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1008  f484				   SkipDrawCar
   1009  f484
   1010  f484							;BEQ DrawTraffic3
   1011  f484				   DrawTraffic1 		; 33
   1012  f484		       98		      TYA		; 2
   1013  f485		       18		      CLC		; 2 
   1014  f486		       65 95		      ADC	TrafficOffset1 + 1	;3
   1015  f488		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1016  f48a		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1017  f48c		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1018  f48e		       4c 93 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1019  f491				   EorOffsetWithCarry
   1020  f491		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1021  f493				   AfterEorOffsetWithCarry		;17
   1022  f493		       aa		      TAX		;2
   1023  f494		       bd 00 fe 	      LDA	AesTable,X	; 4
   1024  f497		       c5 be		      CMP	TrafficChance	;3
   1025  f499		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1026  f49b		       a9 ff		      LDA	#$FF	;2
   1027  f49d		       85 86		      STA	ENAM0Cache	;3
   1028  f49f				   FinishDrawTraffic1
   1029  f49f
   1030  f49f				   DrawTraffic2 		; 33
   1031  f49f		       98		      TYA		; 2
   1032  f4a0		       18		      CLC		; 2 
   1033  f4a1		       65 99		      ADC	TrafficOffset2 + 1	;3
   1034  f4a3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1035  f4a5		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1036  f4a7		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1037  f4a9		       4c ae f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1038  f4ac				   EorOffsetWithCarry2
   1039  f4ac		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1040  f4ae				   AfterEorOffsetWithCarry2		;17
   1041  f4ae		       aa		      TAX		;2
   1042  f4af		       bd 00 fe 	      LDA	AesTable,X	; 4
   1043  f4b2		       c5 be		      CMP	TrafficChance	;3
   1044  f4b4		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1045  f4b6		       a9 02		      LDA	#%00000010	;2
   1046  f4b8		       85 85		      STA	ENABLCache	;3
   1047  f4ba				   FinishDrawTraffic2
   1048  f4ba
   1049  f4ba							;STA WSYNC ;65 / 137
   1050  f4ba
   1051  f4ba							; LDA Tmp0 ; Flicker this line if drawing car
   1052  f4ba							; BEQ FinishDrawTraffic4
   1053  f4ba				   DrawTraffic3 		; 33
   1054  f4ba		       98		      TYA		; 2
   1055  f4bb		       18		      CLC		; 2 
   1056  f4bc		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1057  f4be		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1058  f4c0		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1059  f4c2		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1060  f4c4		       4c c9 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1061  f4c7				   EorOffsetWithCarry3
   1062  f4c7		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1063  f4c9				   AfterEorOffsetWithCarry3		;17
   1064  f4c9		       aa		      TAX		;2
   1065  f4ca		       bd 00 fe 	      LDA	AesTable,X	; 4
   1066  f4cd		       c5 be		      CMP	TrafficChance	;3
   1067  f4cf		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1068  f4d1		       a9 02		      LDA	#%00000010	;2
   1069  f4d3		       85 87		      STA	ENAM1Cache
   1070  f4d5				   FinishDrawTraffic3
   1071  f4d5
   1072  f4d5
   1073  f4d5				   DrawOponent		;26
   1074  f4d5		       84 b0		      STY	Tmp0	;3
   1075  f4d7		       a4 cf		      LDY	OpponentLine	;3
   1076  f4d9		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1077  f4db		       b0 0b		      BCS	SkipDrawOpponent	;2
   1078  f4dd				   DrawOpponent
   1079  f4dd		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1080  f4df		       85 84		      STA	GRP1Cache	;3
   1081  f4e1		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1082  f4e3		       a4 b0		      LDY	Tmp0	;3
   1083  f4e5		       4c f9 f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1084  f4e8				   SkipDrawOpponent
   1085  f4e8		       c6 cf		      DEC	OpponentLine	;5
   1086  f4ea		       a4 b0		      LDY	Tmp0	;3
   1087  f4ec
   1088  f4ec				   DrawTraffic0 		; 21 2pe
   1089  f4ec		       98		      TYA		; 2
   1090  f4ed		       18		      CLC		; 2 
   1091  f4ee		       65 91		      ADC	TrafficOffset0 + 1	;3
   1092  f4f0		       29 08		      AND	#%00001000	;2
   1093  f4f2		       f0 05		      BEQ	HasNoBorderP0	;3
   1094  f4f4				   HasBorderP0
   1095  f4f4		       a9 70		      LDA	#%01110000	; 2
   1096  f4f6		       4c fb f4 	      JMP	StoreBorderP0	; 3
   1097  f4f9				   HasNoBorderP0
   1098  f4f9		       a9 00		      LDA	#0	; 2
   1099  f4fb				   StoreBorderP0
   1100  f4fb		       85 81		      STA	PF0Cache	; 3
   1101  f4fd		       85 83		      STA	PF2Cache	; 3
   1102  f4ff
   1103  f4ff				   SkipDrawTraffic0
   1104  f4ff
   1105  f4ff				   WhileScanLoop
   1106  f4ff		       88		      DEY		;2
   1107  f500		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1108  f502		       4c 50 f4 	      JMP	ScanLoop	;3
   1109  f505				   FinishScanLoop		; 7 209 of 222
   1110  f505
   1111  f505		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1112  f507		       20 8e f6 	      JSR	LoadAll
   1113  f50a		       85 02		      STA	WSYNC	; do stuff!
   1114  f50c		       85 02		      STA	WSYNC
   1115  f50e		       85 02		      STA	WSYNC
   1116  f510
   1117  f510				   PrepareOverscan
   1118  f510		       a9 02		      LDA	#2
   1119  f512		       85 02		      STA	WSYNC
   1120  f514							;STA HMOVE	; HMOVE 10
   1121  f514		       85 01		      STA	VBLANK
   1122  f516
   1123  f516		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1124  f518		       8d 96 02 	      STA	TIM64T
   1125  f51b
   1126  f51b		       85 2b		      STA	HMCLR	; Before we process car movement
   1127  f51d							;Read Fire Button before, will make it start the game for now.
   1128  f51d				   StartGame
   1129  f51d		       a5 0c		      LDA	INPT4	;3
   1130  f51f		       25 0d		      AND	INPT5	;3 player 
   1131  f521		       30 38		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1132  f523		       a5 8c		      LDA	FrameCount0
   1133  f525		       29 01		      AND	#%00000001
   1134  f527		       d0 32		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1135  f529		       a5 bd		      LDA	GameStatus	;3
   1136  f52b		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1137  f52d		       d0 2c		      BNE	SkipGameStart
   1138  f52f		       a5 c6		      LDA	GameMode
   1139  f531		       c9 10		      CMP	#MAX_GAME_MODE
   1140  f533		       d0 0b		      BNE	SetGameRunning
   1141  f535		       a9 00		      LDA	#0
   1142  f537		       85 c6		      STA	GameMode
   1143  f539		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1144  f53b		       85 bc		      STA	SwitchDebounceCounter
   1145  f53d		       4c 5b f5 	      JMP	SkipGameStart
   1146  f540				   SetGameRunning
   1147  f540		       e6 bd		      INC	GameStatus
   1148  f542		       a9 00		      LDA	#0	;
   1149  f544		       85 8c		      STA	FrameCount0
   1150  f546		       85 8d		      STA	FrameCount1
   1151  f548		       a9 0a		      LDA	#10
   1152  f54a		       85 19		      STA	AUDV0
   1153  f54c		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1154  f54e		       85 c9		      STA	ScoreFontColor
   1155  f550		       85 ca		      STA	OpScoreFontColor
   1156  f552		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1157  f554		       85 cb		      STA	ScoreFontColorHoldChange
   1158  f556		       85 cc		      STA	OpScoreFontColorHoldChange
   1159  f558		       4c c1 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1160  f55b				   SkipGameStart
   1161  f55b
   1162  f55b				   ReadSwitches
   1163  f55b		       a6 bc		      LDX	SwitchDebounceCounter
   1164  f55d		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1165  f55f		       a9 01		      LDA	#%00000001
   1166  f561		       2c 82 02 	      BIT	SWCHB
   1167  f564		       d0 07		      BNE	SkipReset
   1168  f566		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1169  f568		       85 bc		      STA	SwitchDebounceCounter
   1170  f56a		       4c c9 f5 	      JMP	OverScanWaitBeforeReset
   1171  f56d				   SkipReset
   1172  f56d
   1173  f56d				   GameModeSelect
   1174  f56d		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1175  f56f		       d0 1c		      BNE	SkipGameSelect
   1176  f571		       20 ba f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1177  f574				   ContinueGameSelect
   1178  f574		       a9 02		      LDA	#%00000010
   1179  f576		       2c 82 02 	      BIT	SWCHB
   1180  f579		       d0 12		      BNE	SkipGameSelect
   1181  f57b		       a6 c6		      LDX	GameMode
   1182  f57d		       e0 10		      CPX	#MAX_GAME_MODE
   1183  f57f		       f0 04		      BEQ	ResetGameMode
   1184  f581		       e8		      INX
   1185  f582		       4c 87 f5 	      JMP	StoreGameMode
   1186  f585				   ResetGameMode
   1187  f585		       a2 00		      LDX	#0
   1188  f587				   StoreGameMode
   1189  f587		       86 c6		      STX	GameMode
   1190  f589		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1191  f58b		       85 bc		      STA	SwitchDebounceCounter
   1192  f58d				   SkipGameSelect
   1193  f58d		       4c 92 f5 	      JMP	EndReadSwitches
   1194  f590				   DecrementSwitchDebounceCounter
   1195  f590		       c6 bc		      DEC	SwitchDebounceCounter
   1196  f592				   EndReadSwitches
   1197  f592
   1198  f592				   DoNotTurnBeforeStart
   1199  f592							;STA HMCLR
   1200  f592		       a5 bd		      LDA	GameStatus
   1201  f594		       f0 2b		      BEQ	OverScanWait
   1202  f596
   1203  f596							; Last thing, will overrride hmove
   1204  f596				   CallTestColisionAndMove
   1205  f596		       a2 00		      LDX	#0	; Player 0
   1206  f598							; Colision with traffic, each player check different flags,
   1207  f598		       a5 8c		      LDA	FrameCount0
   1208  f59a		       29 01		      AND	#%00000001
   1209  f59c		       d0 07		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1210  f59e		       a5 01		      LDA	CXM1P
   1211  f5a0		       4a		      LSR
   1212  f5a1		       05 00		      ORA	CXM0P
   1213  f5a3		       05 02		      ORA	CXP0FB
   1214  f5a5							; ORA CXPPMM ; Collision between players will have its own rules
   1215  f5a5				   SkipColisionPlayer0		; Should not colide on opponent side.
   1216  f5a5		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1217  f5a7		       85 b2		      STA	Tmp2
   1218  f5a9		       20 b5 f9 	      JSR	TestCollisionAndMove
   1219  f5ac
   1220  f5ac		       e8		      INX		; player 1
   1221  f5ad		       a5 8c		      LDA	FrameCount0
   1222  f5af		       29 01		      AND	#%00000001
   1223  f5b1		       f0 07		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1224  f5b3		       a5 00		      LDA	CXM0P
   1225  f5b5		       4a		      LSR
   1226  f5b6		       05 01		      ORA	CXM1P
   1227  f5b8		       05 03		      ORA	CXP1FB
   1228  f5ba				   SkipColisionPlayer1
   1229  f5ba		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1230  f5bc		       85 b2		      STA	Tmp2
   1231  f5be		       20 b5 f9 	      JSR	TestCollisionAndMove
   1232  f5c1
   1233  f5c1				   OverScanWait
   1234  f5c1		       ad 84 02 	      LDA	INTIM
   1235  f5c4		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1236  f5c6		       4c cc f0 	      JMP	MainLoop
   1237  f5c9
   1238  f5c9				   OverScanWaitBeforeReset
   1239  f5c9		       ad 84 02 	      LDA	INTIM
   1240  f5cc		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1241  f5ce		       4c 12 f0 	      JMP	Start
   1242  f5d1
   1243  f5d1				   Subroutines
   1244  f5d1
   1245  f5d1				   ProcessSound
   1246  f5d1				   LeftSound		;41
   1247  f5d1		       a5 b8		      LDA	CountdownTimer	;3
   1248  f5d3		       f0 1b		      BEQ	EngineOff	;2
   1249  f5d5		       a6 d5		      LDX	Gear
   1250  f5d7		       a5 f0		      LDA	Player0SpeedL	;3
   1251  f5d9		       4a		      LSR		;2
   1252  f5da		       4a		      LSR		;2
   1253  f5db		       4a		      LSR		;2
   1254  f5dc		       29 0f		      AND	#%00001111	;2
   1255  f5de		       85 b0		      STA	Tmp0	;3
   1256  f5e0		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1257  f5e3		       38		      SEC		;2
   1258  f5e4		       e5 b0		      SBC	Tmp0	;3
   1259  f5e6		       85 17		      STA	AUDF0	;3
   1260  f5e8		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1261  f5eb		       85 15		      STA	AUDC0	;3
   1262  f5ed		       4c f4 f5 	      JMP	EndLeftSound	;3
   1263  f5f0				   EngineOff
   1264  f5f0		       a9 00		      LDA	#0
   1265  f5f2		       85 15		      STA	AUDC0
   1266  f5f4
   1267  f5f4				   EndLeftSound
   1268  f5f4
   1269  f5f4
   1270  f5f4				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1271  f5f4		       a5 c9		      LDA	ScoreFontColor	;3
   1272  f5f6		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1273  f5f8		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1274  f5fa		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1275  f5fc		       f0 29		      BEQ	PlayCheckpoint	;2
   1276  f5fe		       a5 8e		      LDA	CollisionCounter	;3
   1277  f600		       c9 e0		      CMP	#$E0	;2
   1278  f602		       b0 14		      BCS	PlayColision	;2
   1279  f604		       a5 cd		      LDA	NextCheckpoint	;3
   1280  f606		       38		      SEC		;2
   1281  f607		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1282  f609		       c9 02		      CMP	#$02	;2
   1283  f60b		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1284  f60d		       a5 b8		      LDA	CountdownTimer	; 3
   1285  f60f		       f0 53		      BEQ	MuteRightSound	;2
   1286  f611		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1287  f613		       90 37		      BCC	PlayWarnTimeEnding	;4
   1288  f615		       4c 64 f6 	      JMP	MuteRightSound	;3
   1289  f618				   PlayColision
   1290  f618		       a9 1f		      LDA	#31
   1291  f61a		       85 18		      STA	AUDF1
   1292  f61c		       a9 08		      LDA	#8
   1293  f61e		       85 16		      STA	AUDC1
   1294  f620		       a9 08		      LDA	#8
   1295  f622		       85 1a		      STA	AUDV1
   1296  f624		       4c 68 f6 	      JMP	EndRightSound
   1297  f627
   1298  f627				   PlayCheckpoint
   1299  f627		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1300  f629		       4a		      LSR		;2
   1301  f62a		       4a		      LSR		;2
   1302  f62b		       4a		      LSR		;2
   1303  f62c		       85 18		      STA	AUDF1	;3
   1304  f62e		       a9 0c		      LDA	#12	;2
   1305  f630		       85 16		      STA	AUDC1	;3
   1306  f632		       a9 06		      LDA	#6	;2
   1307  f634		       85 1a		      STA	AUDV1	;3
   1308  f636		       4c 68 f6 	      JMP	EndRightSound	;3
   1309  f639
   1310  f639				   PlayBeforeCheckpoint
   1311  f639		       a5 8c		      LDA	FrameCount0	;3
   1312  f63b		       29 1c		      AND	#%00011100	;2
   1313  f63d		       09 03		      ORA	#%00000011	;2
   1314  f63f		       85 18		      STA	AUDF1	;3
   1315  f641		       a9 0c		      LDA	#12	;2
   1316  f643		       85 16		      STA	AUDC1	;3
   1317  f645		       a9 03		      LDA	#3	;2
   1318  f647		       85 1a		      STA	AUDV1	;3
   1319  f649		       4c 68 f6 	      JMP	EndRightSound	;3
   1320  f64c
   1321  f64c				   PlayWarnTimeEnding
   1322  f64c		       a5 8c		      LDA	FrameCount0	;3
   1323  f64e		       29 04		      AND	#%00000100	;2
   1324  f650		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1325  f652		       18		      CLC		;2
   1326  f653		       a9 0a		      LDA	#10	;2
   1327  f655		       65 b8		      ADC	CountdownTimer	;2
   1328  f657		       85 18		      STA	AUDF1	;3
   1329  f659		       a9 0c		      LDA	#12	;2
   1330  f65b		       85 16		      STA	AUDC1	;3
   1331  f65d		       a9 03		      LDA	#3	;2
   1332  f65f		       85 1a		      STA	AUDV1	;3
   1333  f661		       4c 68 f6 	      JMP	EndRightSound	;3
   1334  f664
   1335  f664				   MuteRightSound
   1336  f664		       a9 00		      LDA	#0
   1337  f666		       85 1a		      STA	AUDV1
   1338  f668				   EndRightSound
   1339  f668		       60		      RTS
   1340  f669
   1341  f669				   ClearAll		; 58
   1342  f669		       a9 00		      LDA	#0	;2
   1343  f66b		       85 1b		      STA	GRP0	;3
   1344  f66d		       85 1c		      STA	GRP1	;3
   1345  f66f		       85 1f		      STA	ENABL	;3
   1346  f671		       85 1d		      STA	ENAM0	;3
   1347  f673		       85 1e		      STA	ENAM1	;3
   1348  f675		       85 80		      STA	GRP0Cache	;3
   1349  f677		       85 84		      STA	GRP1Cache	;3
   1350  f679		       85 85		      STA	ENABLCache	;3
   1351  f67b		       85 86		      STA	ENAM0Cache	;3
   1352  f67d		       85 87		      STA	ENAM1Cache	;3
   1353  f67f
   1354  f67f				   ClearPF		; 26
   1355  f67f		       a9 00		      LDA	#0	;2
   1356  f681				   ClearPFSkipLDA0
   1357  f681		       85 0d		      STA	PF0	;3
   1358  f683		       85 0e		      STA	PF1	;3
   1359  f685		       85 0f		      STA	PF2	;3	
   1360  f687		       85 81		      STA	PF0Cache	;3
   1361  f689		       85 82		      STA	PF1Cache	;3
   1362  f68b		       85 83		      STA	PF2Cache	;3 
   1363  f68d		       60		      RTS		;6
   1364  f68e				   EndClearAll
   1365  f68e
   1366  f68e				   LoadAll		; 48
   1367  f68e		       a5 81		      LDA	PF0Cache	;3
   1368  f690		       85 0d		      STA	PF0	;3
   1369  f692
   1370  f692		       a5 82		      LDA	PF1Cache	;3
   1371  f694		       85 0e		      STA	PF1	;3
   1372  f696
   1373  f696		       a5 83		      LDA	PF2Cache	;3
   1374  f698		       85 0f		      STA	PF2	;3
   1375  f69a
   1376  f69a		       a5 84		      LDA	GRP1Cache	;3
   1377  f69c		       85 1c		      STA	GRP1	;3
   1378  f69e
   1379  f69e		       a5 85		      LDA	ENABLCache	;3
   1380  f6a0		       85 1f		      STA	ENABL	;3
   1381  f6a2
   1382  f6a2		       a5 86		      LDA	ENAM0Cache	;3
   1383  f6a4		       85 1d		      STA	ENAM0	;3
   1384  f6a6
   1385  f6a6		       a5 87		      LDA	ENAM1Cache	;3
   1386  f6a8		       85 1e		      STA	ENAM1	;3
   1387  f6aa
   1388  f6aa		       60		      RTS		;6
   1389  f6ab				   EndLoadAll
   1390  f6ab
   1391  f6ab				   NextDifficulty
   1392  f6ab		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1393  f6ad		       29 01		      AND	#%00000001
   1394  f6af		       d0 2a		      BNE	CheckRandomDifficulty
   1395  f6b1
   1396  f6b1		       a5 c4		      LDA	CurrentDifficulty
   1397  f6b3		       18		      CLC
   1398  f6b4		       69 01		      ADC	#1
   1399  f6b6		       29 03		      AND	#%00000011	; 0 to 3
   1400  f6b8		       85 c4		      STA	CurrentDifficulty
   1401  f6ba
   1402  f6ba				   ConfigureDifficulty
   1403  f6ba		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1404  f6bc		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1405  f6bf		       85 be		      STA	TrafficChance
   1406  f6c1		       85 bf		      STA	OpTrafficChance	; Needs FIX
   1407  f6c3		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1408  f6c6		       85 c2		      STA	TrafficColor
   1409  f6c8		       85 c3		      STA	OpTrafficColor	; Needs FIX
   1410  f6ca
   1411  f6ca		       a5 c6		      LDA	GameMode	;
   1412  f6cc		       29 01		      AND	#%00000001
   1413  f6ce		       f0 03		      BEQ	UseNextDifficultyTime
   1414  f6d0		       4c d4 f6 	      JMP	StoreDifficultyTime
   1415  f6d3				   UseNextDifficultyTime
   1416  f6d3		       c8		      INY
   1417  f6d4				   StoreDifficultyTime
   1418  f6d4		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1419  f6d7		       85 c0		      STA	CheckpointTime
   1420  f6d9		       85 c1		      STA	OpCheckpointTime
   1421  f6db
   1422  f6db				   CheckRandomDifficulty
   1423  f6db		       a5 c6		      LDA	GameMode
   1424  f6dd		       29 08		      AND	#%00001000	; Random difficulties
   1425  f6df		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1426  f6e1				   RandomDifficulty		; need work to make 2 players compatible
   1427  f6e1		       a6 8c		      LDX	FrameCount0
   1428  f6e3		       bd 00 fe 	      LDA	AesTable,X
   1429  f6e6							;EOR TrafficChance, no need, lets make life simple
   1430  f6e6		       29 3f		      AND	#%00111111
   1431  f6e8		       85 be		      STA	TrafficChance
   1432  f6ea		       85 bf		      STA	OpTrafficChance	; While not fix
   1433  f6ec
   1434  f6ec				   ReturnFromNextDifficulty
   1435  f6ec		       60		      RTS
   1436  f6ed
   1437  f6ed				   DefaultOffsets
   1438  f6ed		       a9 20		      LDA	#$20
   1439  f6ef		       85 96		      STA	TrafficOffset1 + 2
   1440  f6f1		       85 a6		      STA	OpTrafficOffset1 + 2
   1441  f6f3		       a9 40		      LDA	#$40
   1442  f6f5		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1443  f6f7		       85 aa		      STA	OpTrafficOffset2 + 2
   1444  f6f9		       a9 60		      LDA	#$60
   1445  f6fb		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1446  f6fd		       85 ae		      STA	OpTrafficOffset3 + 2
   1447  f6ff		       a9 80		      LDA	#$80
   1448  f701		       60		      RTS
   1449  f702
   1450  f702				   PrintStaticText		; Preload X with the offset referent to StaticText
   1451  f702		       bd 00 ff 	      LDA	StaticText,X
   1452  f705		       85 d0		      STA	ScoreD0
   1453  f707		       e8		      INX
   1454  f708		       bd 00 ff 	      LDA	StaticText,X
   1455  f70b		       85 d1		      STA	ScoreD1
   1456  f70d		       e8		      INX
   1457  f70e		       bd 00 ff 	      LDA	StaticText,X
   1458  f711		       85 d2		      STA	ScoreD2
   1459  f713		       e8		      INX
   1460  f714		       bd 00 ff 	      LDA	StaticText,X
   1461  f717		       85 d3		      STA	ScoreD3
   1462  f719		       e8		      INX
   1463  f71a		       bd 00 ff 	      LDA	StaticText,X
   1464  f71d		       85 d4		      STA	ScoreD4
   1465  f71f		       60		      RTS
   1466  f720
   1467  f720				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1468  f720		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1469  f722		       85 c9		      STA	ScoreFontColor
   1470  f724		       a9 01		      LDA	#1
   1471  f726		       85 cb		      STA	ScoreFontColorHoldChange
   1472  f728
   1473  f728		       a5 8d		      LDA	FrameCount1
   1474  f72a		       29 07		      AND	#%00000111
   1475  f72c		       85 b3		      STA	Tmp3
   1476  f72e							;0 is Zelda Name, (default)
   1477  f72e		       a9 01		      LDA	#1
   1478  f730		       c5 b3		      CMP	Tmp3
   1479  f732		       f0 38		      BEQ	PrintZeldaDateLeft
   1480  f734
   1481  f734		       a9 02		      LDA	#2
   1482  f736		       c5 b3		      CMP	Tmp3
   1483  f738		       f0 23		      BEQ	PrintPolvinhosLeft
   1484  f73a
   1485  f73a		       a9 03		      LDA	#3
   1486  f73c		       c5 b3		      CMP	Tmp3
   1487  f73e		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1488  f740
   1489  f740		       a9 04		      LDA	#4
   1490  f742		       c5 b3		      CMP	Tmp3
   1491  f744		       f0 1c		      BEQ	PrintIvonneLeft
   1492  f746
   1493  f746		       a9 05		      LDA	#5
   1494  f748		       c5 b3		      CMP	Tmp3
   1495  f74a		       f0 2a		      BEQ	PrintIvonneDateLeft
   1496  f74c
   1497  f74c		       a9 06		      LDA	#6
   1498  f74e		       c5 b3		      CMP	Tmp3
   1499  f750		       f0 15		      BEQ	PrintArtLeft
   1500  f752
   1501  f752		       a9 07		      LDA	#7
   1502  f754		       c5 b3		      CMP	Tmp3
   1503  f756		       f0 23		      BEQ	PrintLeonardoLeft
   1504  f758
   1505  f758				   PrintZeldaLeft
   1506  f758		       a2 28		      LDX	#<ZeldaTextLeft
   1507  f75a		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1508  f75d				   PrintPolvinhosLeft
   1509  f75d		       a2 3c		      LDX	#<PolvinhosTextLeft
   1510  f75f		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1511  f762				   PrintIvonneLeft
   1512  f762		       a2 50		      LDX	#<IvonneTextLeft
   1513  f764		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1514  f767				   PrintArtLeft
   1515  f767		       a2 64		      LDX	#<PaperArtTextLeft
   1516  f769		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1517  f76c
   1518  f76c				   PrintZeldaDateLeft
   1519  f76c		       a2 32		      LDX	#<ZeldaDateLeft
   1520  f76e		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1521  f771				   PrintPolvinhosDateLeft
   1522  f771		       a2 46		      LDX	#<PolvinhosDateLeft
   1523  f773		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1524  f776				   PrintIvonneDateLeft
   1525  f776		       a2 5a		      LDX	#<IvonneDateLeft
   1526  f778		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1527  f77b				   PrintLeonardoLeft
   1528  f77b		       a2 6e		      LDX	#<LeonardoTextLeft
   1529  f77d		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1530  f780
   1531  f780				   ProcessPrintEasterEgg
   1532  f780		       a5 8c		      LDA	FrameCount0	;3
   1533  f782		       29 01		      AND	#%00000001	;2
   1534  f784		       d0 03		      BNE	TranformIntoRightText
   1535  f786		       4c 8e f7 	      JMP	PrintEasterEggText
   1536  f789				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1537  f789		       8a		      TXA
   1538  f78a		       18		      CLC
   1539  f78b		       69 05		      ADC	#HALF_TEXT_SIZE
   1540  f78d		       aa		      TAX
   1541  f78e
   1542  f78e				   PrintEasterEggText
   1543  f78e		       20 02 f7 	      JSR	PrintStaticText
   1544  f791		       60		      RTS
   1545  f792
   1546  f792				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1547  f792		       a2 00		      LDX	#0
   1548  f794		       a0 04		      LDY	#FONT_OFFSET
   1549  f796
   1550  f796				   ScoreLoop		; 20 
   1551  f796		       85 02		      STA	WSYNC	;2
   1552  f798		       85 2a		      STA	HMOVE
   1553  f79a
   1554  f79a		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1555  f79c		       85 0d		      STA	PF0	;3
   1556  f79e
   1557  f79e		       a5 82		      LDA	PF1Cache	;3
   1558  f7a0		       85 0e		      STA	PF1	;3
   1559  f7a2
   1560  f7a2		       a5 83		      LDA	PF2Cache	;3
   1561  f7a4		       85 0f		      STA	PF2	;3
   1562  f7a6
   1563  f7a6				   DrawScoreD0		; 15
   1564  f7a6		       a6 d0		      LDX	ScoreD0	; 3
   1565  f7a8		       bd 00 fd 	      LDA	Font,X	;4
   1566  f7ab		       85 81		      STA	PF0Cache	;3
   1567  f7ad		       c6 d0		      DEC	ScoreD0	;5
   1568  f7af
   1569  f7af				   DrawScoreD1		; 23	
   1570  f7af		       a6 d1		      LDX	ScoreD1	; 3
   1571  f7b1		       bd 00 fd 	      LDA	Font,X	;4
   1572  f7b4		       0a		      ASL		;2
   1573  f7b5		       0a		      ASL		;2
   1574  f7b6		       0a		      ASL		;2
   1575  f7b7		       0a		      ASL		;2
   1576  f7b8		       85 82		      STA	PF1Cache	;3
   1577  f7ba		       c6 d1		      DEC	ScoreD1	;5
   1578  f7bc
   1579  f7bc				   DrawScoreD2		; 20
   1580  f7bc		       a6 d2		      LDX	ScoreD2	; 3
   1581  f7be		       bd 00 fd 	      LDA	Font,X	;4
   1582  f7c1		       29 0f		      AND	#%00001111	;2
   1583  f7c3		       05 82		      ORA	PF1Cache	;3
   1584  f7c5		       85 82		      STA	PF1Cache	;3
   1585  f7c7		       c6 d2		      DEC	ScoreD2	;5
   1586  f7c9
   1587  f7c9				   DrawScoreD3		; 23
   1588  f7c9		       a6 d3		      LDX	ScoreD3	; 3
   1589  f7cb		       bd 00 fd 	      LDA	Font,X	;4
   1590  f7ce		       4a		      LSR		;2
   1591  f7cf		       4a		      LSR		;2
   1592  f7d0		       4a		      LSR		;2
   1593  f7d1		       4a		      LSR		;2
   1594  f7d2		       85 83		      STA	PF2Cache	;3
   1595  f7d4		       c6 d3		      DEC	ScoreD3	;5
   1596  f7d6
   1597  f7d6				   DrawScoreD4		; 20
   1598  f7d6		       a6 d4		      LDX	ScoreD4	; 3
   1599  f7d8		       bd 00 fd 	      LDA	Font,X	;4
   1600  f7db		       29 f0		      AND	#%11110000	;2
   1601  f7dd		       05 83		      ORA	PF2Cache	;3
   1602  f7df		       85 83		      STA	PF2Cache	;3
   1603  f7e1		       c6 d4		      DEC	ScoreD4	;5
   1604  f7e3
   1605  f7e3
   1606  f7e3		       88		      DEY		;2
   1607  f7e4		       10 b0		      BPL	ScoreLoop	;4
   1608  f7e6
   1609  f7e6		       85 02		      STA	WSYNC
   1610  f7e8		       85 2a		      STA	HMOVE
   1611  f7ea		       20 8e f6 	      JSR	LoadAll
   1612  f7ed		       60		      RTS		; 6
   1613  f7ee
   1614  f7ee				   PrintRightDecimalDigits
   1615  f7ee		       b9 00 00 	      LDA	0,Y
   1616  f7f1		       4a		      LSR
   1617  f7f2		       4a		      LSR
   1618  f7f3		       4a		      LSR
   1619  f7f4		       4a		      LSR
   1620  f7f5		       aa		      TAX
   1621  f7f6		       bd be fd 	      LDA	FontLookup,X	;4
   1622  f7f9		       85 d2		      STA	ScoreD2	;3
   1623  f7fb
   1624  f7fb		       b9 00 00 	      LDA	0,Y
   1625  f7fe		       29 0f		      AND	#%00001111
   1626  f800		       aa		      TAX
   1627  f801		       bd be fd 	      LDA	FontLookup,X	;4
   1628  f804		       85 d3		      STA	ScoreD3	;3
   1629  f806
   1630  f806		       c8		      INY
   1631  f807		       b9 00 00 	      LDA	0,Y
   1632  f80a		       4a		      LSR
   1633  f80b		       4a		      LSR
   1634  f80c		       4a		      LSR
   1635  f80d		       4a		      LSR
   1636  f80e		       aa		      TAX
   1637  f80f		       bd be fd 	      LDA	FontLookup,X	;4
   1638  f812		       85 d0		      STA	ScoreD0	;3
   1639  f814
   1640  f814		       b9 00 00 	      LDA	0,Y
   1641  f817		       29 0f		      AND	#%00001111
   1642  f819		       aa		      TAX
   1643  f81a		       bd be fd 	      LDA	FontLookup,X	;4
   1644  f81d		       85 d1		      STA	ScoreD1	;3
   1645  f81f
   1646  f81f		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1647  f821		       85 d4		      STA	ScoreD4
   1648  f823		       60		      RTS
   1649  f824
   1650  f824				   PrintLastLeftDecimalDigits
   1651  f824		       b9 00 00 	      LDA	0,Y
   1652  f827		       4a		      LSR
   1653  f828		       4a		      LSR
   1654  f829		       4a		      LSR
   1655  f82a		       4a		      LSR
   1656  f82b		       aa		      TAX
   1657  f82c		       bd be fd 	      LDA	FontLookup,X	;4
   1658  f82f		       85 d3		      STA	ScoreD3	;3
   1659  f831		       b9 00 00 	      LDA	0,Y
   1660  f834		       29 0f		      AND	#%00001111
   1661  f836		       aa		      TAX
   1662  f837		       bd be fd 	      LDA	FontLookup,X	;4
   1663  f83a		       85 d4		      STA	ScoreD4	;3
   1664  f83c		       60		      RTS
   1665  f83d
   1666  f83d				   PrintZerosLeft
   1667  f83d		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1668  f83f		       85 d2		      STA	ScoreD2
   1669  f841		       85 d3		      STA	ScoreD3
   1670  f843		       85 d4		      STA	ScoreD4
   1671  f845		       60		      RTS
   1672  f846
   1673  f846				   DrawGameOverScoreLine
   1674  f846		       85 02		      STA	WSYNC
   1675  f848		       20 92 f7 	      JSR	PrintScore
   1676  f84b		       85 02		      STA	WSYNC
   1677  f84d		       85 02		      STA	WSYNC
   1678  f84f		       20 7f f6 	      JSR	ClearPF
   1679  f852		       60		      RTS
   1680  f853
   1681  f853				   DrawGameOverScreenLeft
   1682  f853		       85 02		      STA	WSYNC
   1683  f855		       20 7f f6 	      JSR	ClearPF
   1684  f858
   1685  f858				   DrawGlideTimerLeft
   1686  f858		       20 1a f9 	      JSR	Sleep8Lines
   1687  f85b		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1688  f85d		       85 06		      STA	COLUP0
   1689  f85f		       85 02		      STA	WSYNC
   1690  f861		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1691  f863		       85 d0		      STA	ScoreD0
   1692  f865		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1693  f867		       85 d1		      STA	ScoreD1
   1694  f869		       20 3d f8 	      JSR	PrintZerosLeft
   1695  f86c		       20 46 f8 	      JSR	DrawGameOverScoreLine
   1696  f86f
   1697  f86f				   DrawHitCountLeft
   1698  f86f		       20 1a f9 	      JSR	Sleep8Lines
   1699  f872		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1700  f874		       85 06		      STA	COLUP0
   1701  f876		       85 02		      STA	WSYNC
   1702  f878		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1703  f87a		       85 d0		      STA	ScoreD0
   1704  f87c		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1705  f87e		       85 d1		      STA	ScoreD1
   1706  f880		       20 3d f8 	      JSR	PrintZerosLeft
   1707  f883		       20 46 f8 	      JSR	DrawGameOverScoreLine
   1708  f886
   1709  f886				   DrawCheckpointCountLeft
   1710  f886		       20 1a f9 	      JSR	Sleep8Lines
   1711  f889		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1712  f88b		       85 06		      STA	COLUP0
   1713  f88d		       85 02		      STA	WSYNC
   1714  f88f		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1715  f891		       85 d0		      STA	ScoreD0
   1716  f893		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1717  f895		       85 d1		      STA	ScoreD1
   1718  f897		       20 3d f8 	      JSR	PrintZerosLeft
   1719  f89a		       20 46 f8 	      JSR	DrawGameOverScoreLine
   1720  f89d
   1721  f89d				   DrawGameVersionLeft
   1722  f89d		       20 1a f9 	      JSR	Sleep8Lines
   1723  f8a0		       a9 49		      LDA	#VERSION_COLOR
   1724  f8a2		       85 06		      STA	COLUP0
   1725  f8a4
   1726  f8a4		       a5 c6		      LDA	GameMode
   1727  f8a6		       aa		      TAX
   1728  f8a7		       bd be fd 	      LDA	FontLookup,X	;4
   1729  f8aa		       85 d0		      STA	ScoreD0	;3
   1730  f8ac
   1731  f8ac		       a5 c7		      LDA	CurrentCarId
   1732  f8ae		       aa		      TAX
   1733  f8af		       bd be fd 	      LDA	FontLookup,X	;4
   1734  f8b2		       85 d1		      STA	ScoreD1	;3
   1735  f8b4
   1736  f8b4		       a5 db		      LDA	StartSWCHB
   1737  f8b6		       29 40		      AND	#%01000000	; P0 difficulty
   1738  f8b8		       49 40		      EOR	#%01000000	; Reverse bytes
   1739  f8ba		       2a		      ROL
   1740  f8bb		       2a		      ROL
   1741  f8bc		       2a		      ROL
   1742  f8bd		       18		      CLC
   1743  f8be		       69 0a		      ADC	#10
   1744  f8c0		       aa		      TAX
   1745  f8c1		       bd be fd 	      LDA	FontLookup,X	;4
   1746  f8c4		       85 d2		      STA	ScoreD2	;3
   1747  f8c6
   1748  f8c6		       a5 db		      LDA	StartSWCHB
   1749  f8c8		       29 80		      AND	#%10000000	; P0 difficulty
   1750  f8ca		       49 80		      EOR	#%10000000	; Reverse bytes
   1751  f8cc		       2a		      ROL
   1752  f8cd		       2a		      ROL
   1753  f8ce		       18		      CLC
   1754  f8cf		       69 0a		      ADC	#10
   1755  f8d1		       aa		      TAX
   1756  f8d2		       bd be fd 	      LDA	FontLookup,X	;4
   1757  f8d5		       85 d3		      STA	ScoreD3	;3
   1758  f8d7
   1759  f8d7		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1760  f8d9		       85 d4		      STA	ScoreD4
   1761  f8db
   1762  f8db		       20 46 f8 	      JSR	DrawGameOverScoreLine
   1763  f8de
   1764  f8de		       4c f7 f8 	      JMP	FinalizeDrawGameOver
   1765  f8e1
   1766  f8e1				   DrawGameOverScreenRight
   1767  f8e1		       85 02		      STA	WSYNC
   1768  f8e3		       20 7f f6 	      JSR	ClearPF
   1769  f8e6
   1770  f8e6				   DrawVersionRight
   1771  f8e6		       20 1a f9 	      JSR	Sleep8Lines
   1772  f8e9		       a9 49		      LDA	#VERSION_COLOR
   1773  f8eb		       85 07		      STA	COLUP1
   1774  f8ed		       85 02		      STA	WSYNC
   1775  f8ef		       a2 78		      LDX	#<VersionText
   1776  f8f1		       20 02 f7 	      JSR	PrintStaticText
   1777  f8f4		       20 46 f8 	      JSR	DrawGameOverScoreLine
   1778  f8f7
   1779  f8f7				   FinalizeDrawGameOver
   1780  f8f7		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1781  f8f9		       85 c9		      STA	ScoreFontColor
   1782  f8fb		       20 11 f9 	      JSR	Sleep4Lines
   1783  f8fe		       20 21 f9 	      JSR	Sleep32Lines
   1784  f901		       20 21 f9 	      JSR	Sleep32Lines
   1785  f904		       4c 10 f5 	      JMP	PrepareOverscan
   1786  f907
   1787  f907				   WaitForVblankEnd
   1788  f907		       ad 84 02 	      LDA	INTIM
   1789  f90a		       d0 fb		      BNE	WaitForVblankEnd
   1790  f90c		       85 02		      STA	WSYNC
   1791  f90e		       85 01		      STA	VBLANK
   1792  f910		       60		      RTS
   1793  f911
   1794  f911				   Sleep4Lines
   1795  f911		       85 02		      STA	WSYNC
   1796  f913		       85 02		      STA	WSYNC
   1797  f915		       85 02		      STA	WSYNC
   1798  f917		       85 02		      STA	WSYNC
   1799  f919		       60		      RTS
   1800  f91a
   1801  f91a				   Sleep8Lines
   1802  f91a		       20 11 f9 	      JSR	Sleep4Lines
   1803  f91d		       20 11 f9 	      JSR	Sleep4Lines
   1804  f920		       60		      RTS
   1805  f921
   1806  f921				   Sleep32Lines
   1807  f921		       20 1a f9 	      JSR	Sleep8Lines
   1808  f924		       20 1a f9 	      JSR	Sleep8Lines
   1809  f927		       20 1a f9 	      JSR	Sleep8Lines
   1810  f92a		       20 1a f9 	      JSR	Sleep8Lines
   1811  f92d		       60		      RTS
   1812  f92e
   1813  f92e							;X = number of WSYNC HMOVE to run
   1814  f92e				   HMoveXTimes
   1815  f92e		       85 02		      STA	WSYNC	;3
   1816  f930		       85 2a		      STA	HMOVE	; 3/10 
   1817  f932		       ca		      DEX
   1818  f933		       d0 f9		      BNE	HMoveXTimes
   1819  f935		       60		      RTS
   1820  f936
   1821  f936				   ConfigureCarSprites
   1822  f936		       a5 8c		      LDA	FrameCount0
   1823  f938		       29 01		      AND	#%00000001
   1824  f93a		       d0 0b		      BNE	LoadForRightScreenSprites
   1825  f93c				   LoadForLeftScreenSprites
   1826  f93c		       a5 c7		      LDA	CurrentCarId
   1827  f93e		       85 b0		      STA	Tmp0
   1828  f940		       a5 c8		      LDA	OpCurrentCarId
   1829  f942		       85 b1		      STA	Tmp1
   1830  f944		       4c 4f f9 	      JMP	LoadCarSpritesFromIds
   1831  f947				   LoadForRightScreenSprites
   1832  f947		       a5 c7		      LDA	CurrentCarId
   1833  f949		       85 b1		      STA	Tmp1
   1834  f94b		       a5 c8		      LDA	OpCurrentCarId
   1835  f94d		       85 b0		      STA	Tmp0
   1836  f94f
   1837  f94f				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1838  f94f		       a4 b0		      LDY	Tmp0
   1839  f951		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1840  f954		       85 d7		      STA	CarSpritePointerL
   1841  f956		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1842  f959		       85 d8		      STA	CarSpritePointerH
   1843  f95b				   ConfigureOpponentCarSprite
   1844  f95b		       a4 b1		      LDY	Tmp1
   1845  f95d		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1846  f960		       85 d9		      STA	EnemyCarSpritePointerL
   1847  f962		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1848  f965		       85 da		      STA	EnemyCarSpritePointerH
   1849  f967		       60		      RTS
   1850  f968
   1851  f968							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1852  f968							;X player 0 or 1
   1853  f968				   SelectCarWithDpad
   1854  f968		       a0 03		      LDY	#3
   1855  f96a				   SelectCarWithDpadLoop
   1856  f96a		       ad 80 02 	      LDA	SWCHA
   1857  f96d		       25 b0		      AND	Tmp0
   1858  f96f		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1859  f971		       98		      TYA
   1860  f972		       95 c7		      STA	CurrentCarId,X
   1861  f974				   ContinueSelectCarWithDpadLoop
   1862  f974		       46 b0		      LSR	Tmp0
   1863  f976		       88		      DEY
   1864  f977		       10 f1		      BPL	SelectCarWithDpadLoop
   1865  f979		       60		      RTS
   1866  f97a
   1867  f97a				   ProcessOpponentLine
   1868  f97a		       a5 8c		      LDA	FrameCount0
   1869  f97c		       29 01		      AND	#%00000001
   1870  f97e		       38		      SEC
   1871  f97f		       d0 0f		      BNE	Player0IsOpponent
   1872  f981				   Player1IsOpponent		; Code could be reused?
   1873  f981		       a5 91		      LDA	TrafficOffset0 + 1
   1874  f983		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1875  f985		       85 b0		      STA	Tmp0
   1876  f987		       a5 92		      LDA	TrafficOffset0 + 2
   1877  f989		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1878  f98b		       85 b1		      STA	Tmp1
   1879  f98d		       4c 9c f9 	      JMP	AddOffsetToOpponentLine
   1880  f990				   Player0IsOpponent
   1881  f990		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1882  f992		       e5 91		      SBC	TrafficOffset0 + 1
   1883  f994		       85 b0		      STA	Tmp0
   1884  f996		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1885  f998		       e5 92		      SBC	TrafficOffset0 + 2
   1886  f99a		       85 b1		      STA	Tmp1
   1887  f99c
   1888  f99c				   AddOffsetToOpponentLine
   1889  f99c		       18		      CLC
   1890  f99d		       a5 b0		      LDA	Tmp0
   1891  f99f		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1892  f9a1		       85 b0		      STA	Tmp0
   1893  f9a3		       a5 b1		      LDA	Tmp1
   1894  f9a5		       69 00		      ADC	#0
   1895  f9a7		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1896  f9a9				   OpponentNotVisible
   1897  f9a9		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1898  f9ab		       85 cf		      STA	OpponentLine
   1899  f9ad		       4c b4 f9 	      JMP	ReturnFromProcessOpponentLine
   1900  f9b0				   OpponentVisible
   1901  f9b0		       a5 b0		      LDA	Tmp0
   1902  f9b2		       85 cf		      STA	OpponentLine
   1903  f9b4				   ReturnFromProcessOpponentLine
   1904  f9b4		       60		      RTS
   1905  f9b5
   1906  f9b5							; Movement and colision are binded because the car must be moved after duplicate size.
   1907  f9b5							; Use X for the player
   1908  f9b5							; Tmp2 Traffic colision result
   1909  f9b5							; Tmp3 Opponent Colision result (Not implemented)
   1910  f9b5				   TestCollisionAndMove
   1911  f9b5							; Until store the movemnt, Y contains the value to be stored.
   1912  f9b5							; see if player0 colides with the rest
   1913  f9b5		       a5 b2		      LDA	Tmp2
   1914  f9b7		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1915  f9b9		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1916  f9bb		       d0 25		      BNE	NoCollision
   1917  f9bd		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1918  f9bf		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1919  f9c1		       f0 1f		      BEQ	NoCollision
   1920  f9c3		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1921  f9c5		       f0 1b		      BEQ	NoCollision
   1922  f9c7		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1923  f9c9		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1924  f9cb		       b5 f2		      LDA	Player0SpeedH,X
   1925  f9cd		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1926  f9cf		       a9 10		      LDA	#COLLISION_SPEED_L
   1927  f9d1		       d5 f0		      CMP	Player0SpeedL,X
   1928  f9d3		       b0 04		      BCS	SkipSetColisionSpeedL
   1929  f9d5				   SetColisionSpeedL
   1930  f9d5		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1931  f9d7		       95 f0		      STA	Player0SpeedL,X
   1932  f9d9				   SkipSetColisionSpeedL
   1933  f9d9		       a9 00		      LDA	#0
   1934  f9db		       95 f2		      STA	Player0SpeedH,X
   1935  f9dd		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1936  f9df		       4c 32 fa 	      JMP	StoreHMove	; We keep position consistent
   1937  f9e2				   NoCollision
   1938  f9e2
   1939  f9e2				   DecrementCollision
   1940  f9e2		       b5 8e		      LDA	CollisionCounter,X
   1941  f9e4		       f0 06		      BEQ	FinishDecrementCollision
   1942  f9e6		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1943  f9e8		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1944  f9ea		       d6 8e		      DEC	CollisionCounter,X
   1945  f9ec				   FinishDecrementCollision
   1946  f9ec
   1947  f9ec				   ResetPlayerSize
   1948  f9ec		       d0 04		      BNE	FinishResetPlayerSize
   1949  f9ee		       a9 30		      LDA	#%00110000
   1950  f9f0		       95 04		      STA	NUSIZ0,X	;
   1951  f9f2				   FinishResetPlayerSize
   1952  f9f2
   1953  f9f2				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1954  f9f2		       b5 8e		      LDA	CollisionCounter,X
   1955  f9f4		       c9 01		      CMP	#1	; Last frame before reset
   1956  f9f6		       d0 05		      BNE	SkipResetPlayerPosition
   1957  f9f8		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1958  f9fa		       4c 32 fa 	      JMP	StoreHMove
   1959  f9fd				   SkipResetPlayerPosition
   1960  f9fd
   1961  f9fd				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1962  f9fd		       b5 c7		      LDA	CurrentCarId,X
   1963  f9ff		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1964  fa01		       d0 08		      BNE	PrepareReadXAxis
   1965  fa03		       a0 00		      LDY	#0
   1966  fa05		       a5 8c		      LDA	FrameCount0
   1967  fa07		       29 01		      AND	#DRAGSTER_TURN_MASK
   1968  fa09		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1969  fa0b
   1970  fa0b				   PrepareReadXAxis
   1971  fa0b		       a0 00		      LDY	#0
   1972  fa0d		       b5 b6		      LDA	Player0X,X
   1973  fa0f				   BeginReadLeft
   1974  fa0f		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1975  fa11		       bd d6 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1976  fa14		       2c 80 02 	      BIT	SWCHA
   1977  fa17		       d0 07		      BNE	SkipMoveLeft
   1978  fa19		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1979  fa1b		       d6 b6		      DEC	Player0X,X
   1980  fa1d		       4c 32 fa 	      JMP	StoreHMove	; Cannot move left and right...
   1981  fa20				   SkipMoveLeft
   1982  fa20				   BeginReadRight
   1983  fa20		       b5 b6		      LDA	Player0X,X
   1984  fa22		       c9 2c		      CMP	#PLAYER_MAX_X
   1985  fa24		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1986  fa26		       bd d8 fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1987  fa29		       2c 80 02 	      BIT	SWCHA
   1988  fa2c		       d0 04		      BNE	SkipMoveRight
   1989  fa2e		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1990  fa30		       f6 b6		      INC	Player0X,X
   1991  fa32				   SkipMoveRight
   1992  fa32				   StoreHMove
   1993  fa32		       94 20		      STY	HMP0,X	;set the move for player 0
   1994  fa34
   1995  fa34				   ClearCollision
   1996  fa34		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1997  fa36		       60		      RTS
   1998  fa37
   1999  fa37							; X Traffic offset 4 bits each lane, 4 lanes per player
   2000  fa37							; Tmp3 Max X offset
   2001  fa37							; Tmp4 Max Player Speed L
   2002  fa37							; Tmp5 Max Player Speed H
   2003  fa37				   UpdateOffsets
   2004  fa37		       a0 00		      LDY	#0	; Line Speeds 16 bits
   2005  fa39		       a5 c6		      LDA	GameMode
   2006  fa3b		       29 04		      AND	#%00000100	; GameModes with high delta
   2007  fa3d		       f0 02		      BEQ	UpdateOffsetsLoop
   2008  fa3f		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   2009  fa41
   2010  fa41				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   2011  fa41		       38		      SEC
   2012  fa42		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   2013  fa44		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   2014  fa47		       85 b0		      STA	Tmp0
   2015  fa49		       c8		      INY
   2016  fa4a		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   2017  fa4c		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   2018  fa4f		       85 b1		      STA	Tmp1
   2019  fa51		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   2020  fa53		       e9 00		      SBC	#0
   2021  fa55		       85 b2		      STA	Tmp2
   2022  fa57
   2023  fa57				   AddsTheResult
   2024  fa57		       18		      CLC
   2025  fa58		       a5 b0		      LDA	Tmp0
   2026  fa5a		       75 90		      ADC	TrafficOffset0,X
   2027  fa5c		       95 90		      STA	TrafficOffset0,X
   2028  fa5e		       e8		      INX
   2029  fa5f		       a5 b1		      LDA	Tmp1
   2030  fa61		       75 90		      ADC	TrafficOffset0,X
   2031  fa63		       95 90		      STA	TrafficOffset0,X
   2032  fa65		       e8		      INX
   2033  fa66		       a5 b2		      LDA	Tmp2	; Carry
   2034  fa68		       75 90		      ADC	TrafficOffset0,X
   2035  fa6a		       95 90		      STA	TrafficOffset0,X
   2036  fa6c		       90 0f		      BCC	CalculateOffsetCache
   2037  fa6e				   CalculatePlayer0Msb
   2038  fa6e		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   2039  fa70		       d0 05		      BNE	CalculatePlayer1Msb
   2040  fa72		       e6 ba		      INC	Traffic0Msb
   2041  fa74		       4c 7d fa 	      JMP	CalculateOffsetCache
   2042  fa77				   CalculatePlayer1Msb
   2043  fa77		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   2044  fa79		       d0 02		      BNE	CalculateOffsetCache
   2045  fa7b		       e6 bb		      INC	OpTraffic0Msb
   2046  fa7d
   2047  fa7d				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   2048  fa7d		       e8		      INX
   2049  fa7e		       38		      SEC
   2050  fa7f		       69 00		      ADC	#0	;Increment by one
   2051  fa81		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   2052  fa83
   2053  fa83				   PrepareNextUpdateLoop
   2054  fa83		       c8		      INY
   2055  fa84		       e8		      INX
   2056  fa85		       e4 b3		      CPX	Tmp3	; Max X offset
   2057  fa87		       d0 b8		      BNE	UpdateOffsetsLoop
   2058  fa89		       60		      RTS
   2059  fa8a
   2060  fa8a							; X Player 0 or 1
   2061  fa8a				   ProcessSpeed
   2062  fa8a				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2063  fa8a		       a9 00		      LDA	#0
   2064  fa8c		       85 b0		      STA	Tmp0	; Break speed
   2065  fa8e		       b5 b8		      LDA	CountdownTimer,X
   2066  fa90		       d0 0d		      BNE	Break
   2067  fa92		       b4 c7		      LDY	CurrentCarId,X
   2068  fa94		       a5 8c		      LDA	FrameCount0
   2069  fa96		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2070  fa99		       d0 04		      BNE	Break
   2071  fa9b		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2072  fa9d		       85 b0		      STA	Tmp0
   2073  fa9f
   2074  fa9f				   Break
   2075  fa9f		       bd d4 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2076  faa2		       2c 80 02 	      BIT	SWCHA
   2077  faa5		       d0 12		      BNE	BreakNonZero
   2078  faa7		       b5 0c		      LDA	INPT4,X	;3
   2079  faa9		       10 0a		      BPL	BreakWhileAccelerating
   2080  faab		       b4 d5		      LDY	Gear,X
   2081  faad		       b9 e9 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2082  fab0		       85 b0		      STA	Tmp0
   2083  fab2		       4c b9 fa 	      JMP	BreakNonZero
   2084  fab5				   BreakWhileAccelerating		; Allow better control while breaking.
   2085  fab5		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2086  fab7		       85 b0		      STA	Tmp0
   2087  fab9
   2088  fab9				   BreakNonZero
   2089  fab9		       a5 b0		      LDA	Tmp0
   2090  fabb		       f0 29		      BEQ	SkipBreak
   2091  fabd
   2092  fabd				   DecreaseSpeed
   2093  fabd		       38		      SEC
   2094  fabe		       b5 f0		      LDA	Player0SpeedL,X
   2095  fac0		       e5 b0		      SBC	Tmp0
   2096  fac2		       95 f0		      STA	Player0SpeedL,X
   2097  fac4		       b5 f2		      LDA	Player0SpeedH,X
   2098  fac6		       e9 00		      SBC	#0
   2099  fac8		       95 f2		      STA	Player0SpeedH,X
   2100  faca
   2101  faca				   CheckMinSpeed
   2102  faca		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2103  facc		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2104  face		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2105  fad0		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2106  fad2
   2107  fad2				   CompareLBreakSpeed
   2108  fad2		       b5 f0		      LDA	Player0SpeedL,X
   2109  fad4		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2110  fad6		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2111  fad8		       4c e3 fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2112  fadb
   2113  fadb				   ResetMinSpeed
   2114  fadb		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2115  fadd		       95 f2		      STA	Player0SpeedH,X
   2116  fadf		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2117  fae1		       95 f0		      STA	Player0SpeedL,X
   2118  fae3
   2119  fae3				   SkipAccelerateIfBreaking
   2120  fae3		       4c 2c fb 	      JMP	SkipAccelerate
   2121  fae6				   SkipBreak
   2122  fae6
   2123  fae6				   Acelerates
   2124  fae6		       b5 b8		      LDA	CountdownTimer,X
   2125  fae8		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2126  faea
   2127  faea				   ContinueAccelerateTest
   2128  faea		       b5 0c		      LDA	INPT4,X	;3
   2129  faec		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2130  faee		       bd d2 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2131  faf1		       2c 80 02 	      BIT	SWCHA
   2132  faf4		       d0 36		      BNE	SkipAccelerate
   2133  faf6
   2134  faf6				   IncreaseCarSpeed
   2135  faf6		       a9 02		      LDA	#2
   2136  faf8		       85 b0		      STA	Tmp0	; Loop control
   2137  fafa		       b4 c7		      LDY	CurrentCarId,X
   2138  fafc				   IncreaseCarSpeedLoop
   2139  fafc							;Adds speed
   2140  fafc		       18		      CLC
   2141  fafd		       b5 dc		      LDA	AccelerateBuffer,X
   2142  faff		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
   2143  fb02		       95 dc		      STA	AccelerateBuffer,X
   2144  fb04		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2145  fb06		       f6 f0		      INC	Player0SpeedL,X
   2146  fb08		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2147  fb0a		       f6 f2		      INC	Player0SpeedH,X
   2148  fb0c				   ContinueIncreaseSpeedLoop
   2149  fb0c		       c6 b0		      DEC	Tmp0
   2150  fb0e		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2151  fb10				   SkipIncreaseCarSpeed
   2152  fb10
   2153  fb10				   CheckIfAlreadyMaxSpeed
   2154  fb10		       b5 f2		      LDA	Player0SpeedH,X
   2155  fb12		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2156  fb14		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2157  fb16		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2158  fb18							;High bit is max, compare the low
   2159  fb18		       b4 c7		      LDY	CurrentCarId,X
   2160  fb1a		       b5 f0		      LDA	Player0SpeedL,X
   2161  fb1c		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
   2162  fb1f		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2163  fb21							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2164  fb21
   2165  fb21				   ResetToMaxSpeed		; Speed is more, or is already max
   2166  fb21		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2167  fb23		       95 f2		      STA	Player0SpeedH,X
   2168  fb25		       b4 c7		      LDY	CurrentCarId,X
   2169  fb27		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
   2170  fb2a		       95 f0		      STA	Player0SpeedL,X
   2171  fb2c				   SkipAccelerate
   2172  fb2c		       60		      RTS
   2173  fb2d
   2174  fb2d				   EverySecond		; 64 frames to be more precise
   2175  fb2d		       a9 3f		      LDA	#%00111111
   2176  fb2f		       25 8c		      AND	FrameCount0
   2177  fb31		       d0 06		      BNE	SkipEverySecondAction
   2178  fb33		       d5 b8		      CMP	CountdownTimer,X
   2179  fb35		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2180  fb37		       d6 b8		      DEC	CountdownTimer,X
   2181  fb39				   SkipEverySecondAction
   2182  fb39		       60		      RTS
   2183  fb3a
   2184  fb3a				   CalculateGear
   2185  fb3a		       b5 f0		      LDA	Player0SpeedL,X	;3
   2186  fb3c		       29 80		      AND	#%10000000	;2
   2187  fb3e		       15 f2		      ORA	Player0SpeedH,X	;3
   2188  fb40		       18		      CLC		;2
   2189  fb41		       2a		      ROL		;2
   2190  fb42		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2191  fb44		       95 d5		      STA	Gear,X
   2192  fb46		       60		      RTS
   2193  fb47
   2194  fb47				   ProcessScoreFontColor
   2195  fb47		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2196  fb49		       f0 06		      BEQ	ResetScoreFontColor
   2197  fb4b		       88		      DEY
   2198  fb4c		       94 cb		      STY	ScoreFontColorHoldChange,X
   2199  fb4e		       4c 55 fb 	      JMP	SkipScoreFontColor
   2200  fb51				   ResetScoreFontColor
   2201  fb51		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2202  fb53		       95 c9		      STA	ScoreFontColor,X
   2203  fb55				   SkipScoreFontColor
   2204  fb55		       60		      RTS
   2205  fb56
   2206  fb56							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2207  fc00					      org	$FC00
   2208  fc00				   QrCode1
   2209  fc00		       1f		      .byte.b	#%00011111
   2210  fc01		       10		      .byte.b	#%00010000
   2211  fc02		       17		      .byte.b	#%00010111
   2212  fc03		       17		      .byte.b	#%00010111
   2213  fc04		       17		      .byte.b	#%00010111
   2214  fc05		       10		      .byte.b	#%00010000
   2215  fc06		       1f		      .byte.b	#%00011111
   2216  fc07		       00		      .byte.b	#%00000000
   2217  fc08		       17		      .byte.b	#%00010111
   2218  fc09		       10		      .byte.b	#%00010000
   2219  fc0a		       1d		      .byte.b	#%00011101
   2220  fc0b		       16		      .byte.b	#%00010110
   2221  fc0c		       03		      .byte.b	#%00000011
   2222  fc0d		       19		      .byte.b	#%00011001
   2223  fc0e		       13		      .byte.b	#%00010011
   2224  fc0f		       1c		      .byte.b	#%00011100
   2225  fc10		       0b		      .byte.b	#%00001011
   2226  fc11		       00		      .byte.b	#%00000000
   2227  fc12		       1f		      .byte.b	#%00011111
   2228  fc13		       10		      .byte.b	#%00010000
   2229  fc14		       17		      .byte.b	#%00010111
   2230  fc15		       17		      .byte.b	#%00010111
   2231  fc16		       17		      .byte.b	#%00010111
   2232  fc17		       10		      .byte.b	#%00010000
   2233  fc18		       1f		      .byte.b	#%00011111
   2234  fc19
   2235  fc19				   QrCode2
   2236  fc19		       c3		      .byte.b	#%11000011
   2237  fc1a		       9a		      .byte.b	#%10011010
   2238  fc1b		       82		      .byte.b	#%10000010
   2239  fc1c		       da		      .byte.b	#%11011010
   2240  fc1d		       aa		      .byte.b	#%10101010
   2241  fc1e		       ca		      .byte.b	#%11001010
   2242  fc1f		       f3		      .byte.b	#%11110011
   2243  fc20		       78		      .byte.b	#%01111000
   2244  fc21		       df		      .byte.b	#%11011111
   2245  fc22		       fc		      .byte.b	#%11111100
   2246  fc23		       c7		      .byte.b	#%11000111
   2247  fc24		       98		      .byte.b	#%10011000
   2248  fc25		       23		      .byte.b	#%00100011
   2249  fc26		       b9		      .byte.b	#%10111001
   2250  fc27		       d2		      .byte.b	#%11010010
   2251  fc28		       30		      .byte.b	#%00110000
   2252  fc29		       eb		      .byte.b	#%11101011
   2253  fc2a		       28		      .byte.b	#%00101000
   2254  fc2b		       ab		      .byte.b	#%10101011
   2255  fc2c		       72		      .byte.b	#%01110010
   2256  fc2d		       fa		      .byte.b	#%11111010
   2257  fc2e		       7a		      .byte.b	#%01111010
   2258  fc2f		       32		      .byte.b	#%00110010
   2259  fc30		       3a		      .byte.b	#%00111010
   2260  fc31		       63		      .byte.b	#%01100011
   2261  fc32
   2262  fc32				   QrCode3
   2263  fc32		       98		      .byte.b	#%10011000
   2264  fc33		       c3		      .byte.b	#%11000011
   2265  fc34		       39		      .byte.b	#%00111001
   2266  fc35		       34		      .byte.b	#%00110100
   2267  fc36		       ff		      .byte.b	#%11111111
   2268  fc37		       71		      .byte.b	#%01110001
   2269  fc38		       d5		      .byte.b	#%11010101
   2270  fc39		       d1		      .byte.b	#%11010001
   2271  fc3a		       5f		      .byte.b	#%01011111
   2272  fc3b		       26		      .byte.b	#%00100110
   2273  fc3c		       2d		      .byte.b	#%00101101
   2274  fc3d		       e9		      .byte.b	#%11101001
   2275  fc3e		       d6		      .byte.b	#%11010110
   2276  fc3f		       26		      .byte.b	#%00100110
   2277  fc40		       ba		      .byte.b	#%10111010
   2278  fc41		       03		      .byte.b	#%00000011
   2279  fc42		       dd		      .byte.b	#%11011101
   2280  fc43		       e0		      .byte.b	#%11100000
   2281  fc44		       57		      .byte.b	#%01010111
   2282  fc45		       14		      .byte.b	#%00010100
   2283  fc46		       35		      .byte.b	#%00110101
   2284  fc47		       e5		      .byte.b	#%11100101
   2285  fc48		       b5		      .byte.b	#%10110101
   2286  fc49		       d4		      .byte.b	#%11010100
   2287  fc4a		       97		      .byte.b	#%10010111
   2288  fc4b
   2289  fc4b				   QrCode4
   2290  fc4b		       09		      .byte.b	#%00001001
   2291  fc4c		       0e		      .byte.b	#%00001110
   2292  fc4d		       0f		      .byte.b	#%00001111
   2293  fc4e		       0c		      .byte.b	#%00001100
   2294  fc4f		       0c		      .byte.b	#%00001100
   2295  fc50		       08		      .byte.b	#%00001000
   2296  fc51		       08		      .byte.b	#%00001000
   2297  fc52		       06		      .byte.b	#%00000110
   2298  fc53		       06		      .byte.b	#%00000110
   2299  fc54		       0b		      .byte.b	#%00001011
   2300  fc55		       0f		      .byte.b	#%00001111
   2301  fc56		       04		      .byte.b	#%00000100
   2302  fc57		       08		      .byte.b	#%00001000
   2303  fc58		       0f		      .byte.b	#%00001111
   2304  fc59		       09		      .byte.b	#%00001001
   2305  fc5a		       07		      .byte.b	#%00000111
   2306  fc5b		       05		      .byte.b	#%00000101
   2307  fc5c		       00		      .byte.b	#%00000000
   2308  fc5d		       0f		      .byte.b	#%00001111
   2309  fc5e		       08		      .byte.b	#%00001000
   2310  fc5f		       0b		      .byte.b	#%00001011
   2311  fc60		       0b		      .byte.b	#%00001011
   2312  fc61		       0b		      .byte.b	#%00001011
   2313  fc62		       08		      .byte.b	#%00001000
   2314  fc63		       0f		      .byte.b	#%00001111
   2315  fc64
   2316  fc64							; Moved here because of rom space.
   2317  fc64							; The only SBR in constants space
   2318  fc64				   DrawQrCode
   2319  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2320  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2321  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2322  fc6a		       85 0a		      STA	CTRLPF
   2323  fc6c		       20 69 f6 	      JSR	ClearAll	; To be 100 sure!
   2324  fc6f		       ad 82 02 	      LDA	SWCHB
   2325  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2326  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2327  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2328  fc78		       86 09		      STX	COLUBK
   2329  fc7a		       84 08		      STY	COLUPF
   2330  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2331  fc7f				   StoreReversedQrCode
   2332  fc7f		       86 08		      STX	COLUPF
   2333  fc81		       84 09		      STY	COLUBK
   2334  fc83
   2335  fc83				   ContinueQrCode
   2336  fc83		       a2 08		      LDX	#8
   2337  fc85		       20 2e f9 	      JSR	HMoveXTimes
   2338  fc88		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2339  fc8a		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2340  fc8c		       20 07 f9 	      JSR	WaitForVblankEnd
   2341  fc8f		       20 1a f9 	      JSR	Sleep8Lines
   2342  fc92		       20 1a f9 	      JSR	Sleep8Lines
   2343  fc95		       20 1a f9 	      JSR	Sleep8Lines
   2344  fc98
   2345  fc98				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2346  fc98		       85 02		      STA	WSYNC
   2347  fc9a		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2348  fc9d		       85 0e		      STA	PF1	;3
   2349  fc9f		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2350  fca2		       85 0f		      STA	PF2	;3
      0  fca4					      SLEEP	27	; 
      1  fca4				   .CYCLES    SET	27
      2  fca4
      3  fca4				  -	      IF	.CYCLES < 2
      4  fca4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fca4				  -	      ERR
      6  fca4					      ENDIF
      7  fca4
      8  fca4					      IF	.CYCLES & 1
      9  fca4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fca4				  -	      nop	0
     11  fca4					      ELSE
     12  fca4		       24 00		      bit	VSYNC
     13  fca6					      ENDIF
     14  fca6				   .CYCLES    SET	.CYCLES - 3
     15  fca6					      ENDIF
     16  fca6
     17  fca6					      REPEAT	.CYCLES / 2
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     17  fcac					      REPEND
     18  fcad		       ea		      nop
     17  fcad					      REPEND
     18  fcae		       ea		      nop
     17  fcae					      REPEND
     18  fcaf		       ea		      nop
     17  fcaf					      REPEND
     18  fcb0		       ea		      nop
     17  fcb0					      REPEND
     18  fcb1		       ea		      nop
     19  fcb2					      REPEND
   2352  fcb2		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2353  fcb5		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2354  fcb7		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2355  fcba		       85 0e		      STA	PF1	;3
   2356  fcbc
   2357  fcbc		       ca		      DEX		;2
   2358  fcbd		       d0 d9		      BNE	QrCodeLoop	;2
   2359  fcbf		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2360  fcc1		       88		      DEY		;2
   2361  fcc2		       10 d4		      BPL	QrCodeLoop	;4
   2362  fcc4
   2363  fcc4				   EndQrCodeLoop
   2364  fcc4		       85 02		      STA	WSYNC	;
   2365  fcc6		       a9 00		      LDA	#0
   2366  fcc8		       85 0e		      STA	PF1	;3
   2367  fcca		       85 0f		      STA	PF2	;3
   2368  fccc
   2369  fccc		       20 21 f9 	      JSR	Sleep32Lines
   2370  fccf		       4c 10 f5 	      JMP	PrepareOverscan
   2371  fcd2
   2372  fcd2				   PlayerToUpMask
   2373  fcd2		       10		      .byte.b	#%00010000	;
   2374  fcd3		       01		      .byte.b	#%00000001	;
   2375  fcd4
   2376  fcd4				   PlayerToDownMask
   2377  fcd4		       20		      .byte.b	#%00100000	;
   2378  fcd5		       02		      .byte.b	#%00000010	;
   2379  fcd6
   2380  fcd6
   2381  fcd6				   PlayerToLeftMask
   2382  fcd6		       40		      .byte.b	#%01000000	;
   2383  fcd7		       04		      .byte.b	#%00000100	;
   2384  fcd8
   2385  fcd8				   PlayerToRightMask
   2386  fcd8		       80		      .byte.b	#%10000000	;
   2387  fcd9		       08		      .byte.b	#%00001000	;
   2388  fcda
   2389  fd00					      org	$FD00
   2390  fd00				   Font
   2391  fd00				   C0
   2392  fd00		       e7		      .byte.b	#%11100111	;
   2393  fd01		       a5		      .byte.b	#%10100101	; 
   2394  fd02		       a5		      .byte.b	#%10100101	; 
   2395  fd03		       a5		      .byte.b	#%10100101	; 
   2396  fd04		       e7		      .byte.b	#%11100111	;	
   2397  fd05				   C1
   2398  fd05		       e7		      .byte.b	#%11100111	;
   2399  fd06		       42		      .byte.b	#%01000010	; 
   2400  fd07		       42		      .byte.b	#%01000010	; 
   2401  fd08		       42		      .byte.b	#%01000010	; 
   2402  fd09		       66		      .byte.b	#%01100110	;
   2403  fd0a				   C2
   2404  fd0a		       e7		      .byte.b	#%11100111	;
   2405  fd0b		       24		      .byte.b	#%00100100	; 
   2406  fd0c		       e7		      .byte.b	#%11100111	; 
   2407  fd0d		       81		      .byte.b	#%10000001	; 
   2408  fd0e		       e7		      .byte.b	#%11100111	;
   2409  fd0f				   C3
   2410  fd0f		       e7		      .byte.b	#%11100111	;
   2411  fd10		       81		      .byte.b	#%10000001	; 
   2412  fd11		       e7		      .byte.b	#%11100111	; 
   2413  fd12		       81		      .byte.b	#%10000001	; 
   2414  fd13		       e7		      .byte.b	#%11100111	;
   2415  fd14				   C4
   2416  fd14		       81		      .byte.b	#%10000001	;
   2417  fd15		       81		      .byte.b	#%10000001	; 
   2418  fd16		       e7		      .byte.b	#%11100111	; 
   2419  fd17		       a5		      .byte.b	#%10100101	; 
   2420  fd18		       a5		      .byte.b	#%10100101	;
   2421  fd19				   C5
   2422  fd19		       e7		      .byte.b	#%11100111	;
   2423  fd1a		       81		      .byte.b	#%10000001	; 
   2424  fd1b		       e7		      .byte.b	#%11100111	; 
   2425  fd1c		       24		      .byte.b	#%00100100	; 
   2426  fd1d		       e7		      .byte.b	#%11100111	;
   2427  fd1e				   C6
   2428  fd1e		       e7		      .byte.b	#%11100111	;
   2429  fd1f		       a5		      .byte.b	#%10100101	; 
   2430  fd20		       e7		      .byte.b	#%11100111	; 
   2431  fd21		       24		      .byte.b	#%00100100	; 
   2432  fd22		       e7		      .byte.b	#%11100111	;
   2433  fd23				   C7
   2434  fd23		       81		      .byte.b	#%10000001	;
   2435  fd24		       81		      .byte.b	#%10000001	; 
   2436  fd25		       81		      .byte.b	#%10000001	; 
   2437  fd26		       81		      .byte.b	#%10000001	; 
   2438  fd27		       e7		      .byte.b	#%11100111	;
   2439  fd28				   C8
   2440  fd28		       e7		      .byte.b	#%11100111	;
   2441  fd29		       a5		      .byte.b	#%10100101	; 
   2442  fd2a		       e7		      .byte.b	#%11100111	; 
   2443  fd2b		       a5		      .byte.b	#%10100101	; 
   2444  fd2c		       e7		      .byte.b	#%11100111	;
   2445  fd2d				   C9
   2446  fd2d		       e7		      .byte.b	#%11100111	;
   2447  fd2e		       81		      .byte.b	#%10000001	; 
   2448  fd2f		       e7		      .byte.b	#%11100111	; 
   2449  fd30		       a5		      .byte.b	#%10100101	; 
   2450  fd31		       e7		      .byte.b	#%11100111	;
   2451  fd32				   CA
   2452  fd32		       a5		      .byte.b	#%10100101	;
   2453  fd33		       a5		      .byte.b	#%10100101	; 
   2454  fd34		       e7		      .byte.b	#%11100111	; 
   2455  fd35		       a5		      .byte.b	#%10100101	; 
   2456  fd36		       e7		      .byte.b	#%11100111	;
   2457  fd37				   CB
   2458  fd37		       66		      .byte.b	#%01100110	;
   2459  fd38		       a5		      .byte.b	#%10100101	; 
   2460  fd39		       66		      .byte.b	#%01100110	; 
   2461  fd3a		       a5		      .byte.b	#%10100101	;
   2462  fd3b		       66		      .byte.b	#%01100110	;
   2463  fd3c				   CC
   2464  fd3c		       e7		      .byte.b	#%11100111	;
   2465  fd3d		       24		      .byte.b	#%00100100	; 
   2466  fd3e		       24		      .byte.b	#%00100100	; 
   2467  fd3f		       24		      .byte.b	#%00100100	;
   2468  fd40		       e7		      .byte.b	#%11100111	;
   2469  fd41
   2470  fd41				   CD
   2471  fd41		       66		      .byte.b	#%01100110	;
   2472  fd42		       a5		      .byte.b	#%10100101	; 
   2473  fd43		       a5		      .byte.b	#%10100101	; 
   2474  fd44		       a5		      .byte.b	#%10100101	;
   2475  fd45		       66		      .byte.b	#%01100110	;
   2476  fd46
   2477  fd46				   CE
   2478  fd46		       e7		      .byte.b	#%11100111	;
   2479  fd47		       24		      .byte.b	#%00100100	; 
   2480  fd48		       e7		      .byte.b	#%11100111	; 
   2481  fd49		       24		      .byte.b	#%00100100	; 
   2482  fd4a		       e7		      .byte.b	#%11100111	;
   2483  fd4b
   2484  fd4b				   CF
   2485  fd4b		       24		      .byte.b	#%00100100	;
   2486  fd4c		       24		      .byte.b	#%00100100	; 
   2487  fd4d		       e7		      .byte.b	#%11100111	; 
   2488  fd4e		       24		      .byte.b	#%00100100	; 
   2489  fd4f		       e7		      .byte.b	#%11100111	;
   2490  fd50
   2491  fd50				   CG
   2492  fd50		       c3		      .byte.b	#%11000011	;
   2493  fd51		       a5		      .byte.b	#%10100101	; 
   2494  fd52		       a5		      .byte.b	#%10100101	; 
   2495  fd53		       24		      .byte.b	#%00100100	; 
   2496  fd54		       c3		      .byte.b	#%11000011	;	
   2497  fd55
   2498  fd55				   CH
   2499  fd55		       a5		      .byte.b	#%10100101	;
   2500  fd56		       a5		      .byte.b	#%10100101	; 
   2501  fd57		       e7		      .byte.b	#%11100111	; 
   2502  fd58		       a5		      .byte.b	#%10100101	; 
   2503  fd59		       a5		      .byte.b	#%10100101	;
   2504  fd5a
   2505  fd5a				   CK
   2506  fd5a		       a5		      .byte.b	#%10100101	;
   2507  fd5b		       a5		      .byte.b	#%10100101	; 
   2508  fd5c		       66		      .byte.b	#%01100110	; 
   2509  fd5d		       a5		      .byte.b	#%10100101	; 
   2510  fd5e		       a5		      .byte.b	#%10100101	;
   2511  fd5f
   2512  fd5f				   CL
   2513  fd5f		       e7		      .byte.b	#%11100111	;
   2514  fd60		       24		      .byte.b	#%00100100	; 
   2515  fd61		       24		      .byte.b	#%00100100	; 
   2516  fd62		       24		      .byte.b	#%00100100	; 
   2517  fd63		       24		      .byte.b	#%00100100	;
   2518  fd64
   2519  fd64				   CI
   2520  fd64		       42		      .byte.b	#%01000010	;
   2521  fd65		       42		      .byte.b	#%01000010	; 
   2522  fd66		       42		      .byte.b	#%01000010	; 
   2523  fd67		       42		      .byte.b	#%01000010	; 
   2524  fd68		       42		      .byte.b	#%01000010	;
   2525  fd69
   2526  fd69				   CM
   2527  fd69		       a5		      .byte.b	#%10100101	;
   2528  fd6a		       a5		      .byte.b	#%10100101	; 
   2529  fd6b		       a5		      .byte.b	#%10100101	; 
   2530  fd6c		       e7		      .byte.b	#%11100111	; 
   2531  fd6d		       a5		      .byte.b	#%10100101	;
   2532  fd6e
   2533  fd6e				   CN
   2534  fd6e		       a5		      .byte.b	#%10100101	;
   2535  fd6f		       a5		      .byte.b	#%10100101	; 
   2536  fd70		       a5		      .byte.b	#%10100101	; 
   2537  fd71		       a5		      .byte.b	#%10100101	; 
   2538  fd72		       66		      .byte.b	#%01100110	;	
   2539  fd73
   2540  fd73
   2541  fd73				   CO
   2542  fd73		       42		      .byte.b	#%01000010	;
   2543  fd74		       a5		      .byte.b	#%10100101	; 
   2544  fd75		       a5		      .byte.b	#%10100101	; 
   2545  fd76		       a5		      .byte.b	#%10100101	; 
   2546  fd77		       42		      .byte.b	#%01000010	;	
   2547  fd78
   2548  fd78				   CP
   2549  fd78		       24		      .byte.b	#%00100100	;
   2550  fd79		       24		      .byte.b	#%00100100	; 
   2551  fd7a		       e7		      .byte.b	#%11100111	; 
   2552  fd7b		       a5		      .byte.b	#%10100101	; 
   2553  fd7c		       e7		      .byte.b	#%11100111	;
   2554  fd7d
   2555  fd7d				   CR
   2556  fd7d		       a5		      .byte.b	#%10100101	;
   2557  fd7e		       a5		      .byte.b	#%10100101	; 
   2558  fd7f		       66		      .byte.b	#%01100110	; 
   2559  fd80		       a5		      .byte.b	#%10100101	; 
   2560  fd81		       66		      .byte.b	#%01100110	;
   2561  fd82
   2562  fd82				   CS
   2563  fd82		       66		      .byte.b	#%01100110	;
   2564  fd83		       81		      .byte.b	#%10000001	; 
   2565  fd84		       42		      .byte.b	#%01000010	; 
   2566  fd85		       24		      .byte.b	#%00100100	; 
   2567  fd86		       c3		      .byte.b	#%11000011	;
   2568  fd87
   2569  fd87				   CT
   2570  fd87		       42		      .byte.b	#%01000010	;
   2571  fd88		       42		      .byte.b	#%01000010	; 
   2572  fd89		       42		      .byte.b	#%01000010	; 
   2573  fd8a		       42		      .byte.b	#%01000010	; 
   2574  fd8b		       e7		      .byte.b	#%11100111	;
   2575  fd8c
   2576  fd8c				   CV
   2577  fd8c		       42		      .byte.b	#%01000010	;
   2578  fd8d		       a5		      .byte.b	#%10100101	; 
   2579  fd8e		       a5		      .byte.b	#%10100101	; 
   2580  fd8f		       a5		      .byte.b	#%10100101	; 
   2581  fd90		       a5		      .byte.b	#%10100101	;	
   2582  fd91
   2583  fd91				   CY
   2584  fd91		       42		      .byte.b	#%01000010	;
   2585  fd92		       42		      .byte.b	#%01000010	; 
   2586  fd93		       42		      .byte.b	#%01000010	; 
   2587  fd94		       a5		      .byte.b	#%10100101	; 
   2588  fd95		       a5		      .byte.b	#%10100101	;
   2589  fd96
   2590  fd96				   CW
   2591  fd96		       a5		      .byte.b	#%10100101	;
   2592  fd97		       e7		      .byte.b	#%11100111	; 
   2593  fd98		       a5		      .byte.b	#%10100101	; 
   2594  fd99		       a5		      .byte.b	#%10100101	; 
   2595  fd9a		       a5		      .byte.b	#%10100101	;
   2596  fd9b
   2597  fd9b				   CZ
   2598  fd9b		       e7		      .byte.b	#%11100111	;
   2599  fd9c		       24		      .byte.b	#%00100100	; 
   2600  fd9d		       42		      .byte.b	#%01000010	; 
   2601  fd9e		       81		      .byte.b	#%10000001	; 
   2602  fd9f		       e7		      .byte.b	#%11100111	;
   2603  fda0
   2604  fda0				   Pipe
   2605  fda0		       42		      .byte.b	#%01000010	;
   2606  fda1		       00		      .byte.b	#%00000000	; 
   2607  fda2		       42		      .byte.b	#%01000010	; 
   2608  fda3		       00		      .byte.b	#%00000000	; 
   2609  fda4		       42		      .byte.b	#%01000010	;
   2610  fda5
   2611  fda5				   Exclamation
   2612  fda5		       42		      .byte.b	#%01000010	;
   2613  fda6		       00		      .byte.b	#%00000000	; 
   2614  fda7		       42		      .byte.b	#%01000010	; 
   2615  fda8		       42		      .byte.b	#%01000010	; 
   2616  fda9		       42		      .byte.b	#%01000010	;
   2617  fdaa
   2618  fdaa				   Dot
   2619  fdaa		       42		      .byte.b	#%01000010	;
   2620  fdab		       42		      .byte.b	#%01000010	; 
   2621  fdac		       00		      .byte.b	#%00000000	; 
   2622  fdad		       00		      .byte.b	#%00000000	; 
   2623  fdae		       00		      .byte.b	#%00000000	;
   2624  fdaf
   2625  fdaf				   Colon
   2626  fdaf		       42		      .byte.b	#%01000010	;
   2627  fdb0		       42		      .byte.b	#%01000010	; 
   2628  fdb1		       00		      .byte.b	#%00000000	; 
   2629  fdb2		       42		      .byte.b	#%01000010	; 
   2630  fdb3		       42		      .byte.b	#%01000010	;
   2631  fdb4
   2632  fdb4				   Triangle
   2633  fdb4		       81		      .byte.b	#%10000001	;
   2634  fdb5		       c3		      .byte.b	#%11000011	; 
   2635  fdb6		       e7		      .byte.b	#%11100111	; 
   2636  fdb7		       c3		      .byte.b	#%11000011	; 
   2637  fdb8		       81		      .byte.b	#%10000001	;
   2638  fdb9
   2639  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2640  fdb9		       00		      .byte.b	#0	;
   2641  fdba		       00		      .byte.b	#0	;
   2642  fdbb		       00		      .byte.b	#0	;
   2643  fdbc		       00		      .byte.b	#0	;
   2644  fdbd		       00		      .byte.b	#0	;
   2645  fdbe
   2646  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2647  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2648  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2649  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2650  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2651  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2652  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2653  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2654  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2655  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2656  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2657  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2658  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2659  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2660  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2661  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2662  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2663  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2664  fdcf
   2665  fdcf				   EngineSoundType
   2666  fdcf		       02		      .byte.b	#2
   2667  fdd0		       02		      .byte.b	#2
   2668  fdd1		       0e		      .byte.b	#14
   2669  fdd2		       06		      .byte.b	#6
   2670  fdd3		       06		      .byte.b	#6
   2671  fdd4		       0e		      .byte.b	#14
   2672  fdd5
   2673  fdd5				   EngineBaseFrequence
   2674  fdd5		       1f		      .byte.b	#31
   2675  fdd6		       15		      .byte.b	#21
   2676  fdd7		       14		      .byte.b	#20
   2677  fdd8		       1f		      .byte.b	#31
   2678  fdd9		       16		      .byte.b	#22
   2679  fdda		       03		      .byte.b	#3
   2680  fddb
   2681  fddb				   TachometerSizeLookup1
   2682  fddb		       1f		      .byte.b	#%00011111
   2683  fddc		       3f		      .byte.b	#%00111111
   2684  fddd		       7f		      .byte.b	#%01111111
   2685  fdde		       ff		      .byte.b	#%11111111
   2686  fddf		       ff		      .byte.b	#%11111111
   2687  fde0		       ff		      .byte.b	#%11111111
   2688  fde1		       ff		      .byte.b	#%11111111
   2689  fde2		       ff		      .byte.b	#%11111111
   2690  fde3
   2691  fde3				   TachometerSizeLookup2
   2692  fde3		       00		      .byte.b	#%00000000
   2693  fde4		       00		      .byte.b	#%00000000
   2694  fde5		       00		      .byte.b	#%00000000
   2695  fde6		       00		      .byte.b	#%00000000
   2696  fde7		       80		      .byte.b	#%10000000
   2697  fde8		       c0		      .byte.b	#%11000000
   2698  fde9		       e0		      .byte.b	#%11100000
   2699  fdea		       f0		      .byte.b	#%11110000
   2700  fdeb
   2701  fdeb				   TachometerGearLookup
   2702  fdeb		       01		      .byte.b	#%00000001
   2703  fdec		       02		      .byte.b	#%00000010
   2704  fded		       04		      .byte.b	#%00000100
   2705  fdee		       08		      .byte.b	#%00001000
   2706  fdef		       10		      .byte.b	#%00010000
   2707  fdf0		       30		      .byte.b	#%00110000
   2708  fdf1
   2709  fe00					      org	$FE00
   2710  fe00				   AesTable
   2711  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2712  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2713  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2714  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2715  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2716  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2717  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2718  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2719  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2720  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2721  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2722  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2723  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2724  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2725  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2726  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2727  ff00
   2728  ff00							; From FF00 to FFFB (122 bytes) to use here
   2729  ff00
   2730  ff00				   StaticText		; All static text must be on the same MSB block. 
   2731  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2732  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2733  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2734  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2735  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2736  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2737  ff05
   2738  ff05				   HellwayLeftText
   2739  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2740  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2741  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2742  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2743  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2744  ff0a
   2745  ff0a				   HellwayRightText
   2746  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2747  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2748  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2749  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2750  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2751  ff0f
   2752  ff0f				   OpbText
   2753  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2754  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2755  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2756  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2757  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2758  ff14
   2759  ff14				   YearText
   2760  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2761  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2762  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2763  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2764  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2765  ff19
   2766  ff19				   GameText
   2767  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2768  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2769  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2770  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2771  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2772  ff1e
   2773  ff1e				   OverText
   2774  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2775  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2776  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2777  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2778  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2779  ff23				   GoText
   2780  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2781  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2782  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2783  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2784  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2785  ff28
   2786  ff28				   ZeldaTextLeft
   2787  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2788  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2789  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2790  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2791  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2792  ff2d
   2793  ff2d				   ZeldaTextRight
   2794  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2795  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2796  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2797  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2798  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2799  ff32
   2800  ff32				   ZeldaDateLeft
   2801  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2802  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2803  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2804  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2805  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2806  ff37
   2807  ff37				   ZeldaDateRight
   2808  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2809  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2810  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2811  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2812  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2813  ff3c
   2814  ff3c				   PolvinhosTextLeft
   2815  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2816  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2817  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2818  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2819  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2820  ff41
   2821  ff41				   PolvinhosTextRight
   2822  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2823  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2824  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2825  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2826  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2827  ff46
   2828  ff46				   PolvinhosDateLeft
   2829  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2830  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2831  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2832  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2833  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2834  ff4b
   2835  ff4b				   PolvinhosDateRight
   2836  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2837  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2838  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2839  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2840  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2841  ff50
   2842  ff50				   IvonneTextLeft
   2843  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2844  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2845  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2846  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2847  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2848  ff55
   2849  ff55				   IvonneTextRight
   2850  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2851  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2852  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2853  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2854  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2855  ff5a
   2856  ff5a				   IvonneDateLeft
   2857  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2858  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2859  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2860  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2861  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2862  ff5f
   2863  ff5f				   IvonneDateRight
   2864  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2865  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2866  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2867  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2868  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2869  ff64
   2870  ff64				   PaperArtTextLeft
   2871  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2872  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2873  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2874  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2875  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2876  ff69
   2877  ff69				   PaperArtTextRight
   2878  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2879  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2880  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2881  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2882  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2883  ff6e
   2884  ff6e				   LeonardoTextLeft
   2885  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2886  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2887  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2888  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2889  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2890  ff73
   2891  ff73				   LeonardoTextRight
   2892  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2893  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2894  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2895  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2896  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2897  ff78
   2898  ff78				   VersionText
   2899  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2900  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2901  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2902  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2903  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2904  ff7d
   2905  ff7d
   2906  ff7d				   EndStaticText
   2907  ff7d
   2908  ff7d				   CarSprite0		; Upside down, Original Car
   2909  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2910  ff85				   CarSprite0NoPadding
   2911  ff85		       7e		      .byte.b	#%01111110
   2912  ff86		       24		      .byte.b	#%00100100
   2913  ff87		       bd		      .byte.b	#%10111101
   2914  ff88		       3c		      .byte.b	#%00111100
   2915  ff89		       bd		      .byte.b	#%10111101
   2916  ff8a		       3c		      .byte.b	#%00111100
   2917  ff8b
   2918  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2919  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2920  ff93				   CarSprite1NoPadding
   2921  ff93		       bd		      .byte.b	#%10111101
   2922  ff94		       7e		      .byte.b	#%01111110
   2923  ff95		       5a		      .byte.b	#%01011010
   2924  ff96		       66		      .byte.b	#%01100110
   2925  ff97		       bd		      .byte.b	#%10111101
   2926  ff98		       3c		      .byte.b	#%00111100
   2927  ff99
   2928  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2929  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2930  ffa1				   CarSprite2NoPadding
   2931  ffa1		       7e		      .byte.b	#%01111110
   2932  ffa2		       a5		      .byte.b	#%10100101
   2933  ffa3		       42		      .byte.b	#%01000010
   2934  ffa4		       42		      .byte.b	#%01000010
   2935  ffa5		       bd		      .byte.b	#%10111101
   2936  ffa6		       7e		      .byte.b	#%01111110
   2937  ffa7
   2938  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2939  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2940  ffaf				   CarSprite3NoPadding
   2941  ffaf		       3c		      .byte.b	#%00111100
   2942  ffb0		       db		      .byte.b	#%11011011
   2943  ffb1		       db		      .byte.b	#%11011011
   2944  ffb2		       3c		      .byte.b	#%00111100
   2945  ffb3		       5a		      .byte.b	#%01011010
   2946  ffb4		       3c		      .byte.b	#%00111100
   2947  ffb5
   2948  ffb5				   TrafficSpeeds
   2949  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2950  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2951  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2952  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2953  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2954  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2955  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2956  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2957  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2958  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2959  ffbf				   TrafficSpeedsHighDelta
   2960  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2961  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2962  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2963  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2964  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2965  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2966  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2967  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2968  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2969  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2970  ffc9
   2971  ffc9				   CarIdToSpriteAddressL
   2972  ffc9		       7d		      .byte.b	#<CarSprite0
   2973  ffca		       8b		      .byte.b	#<CarSprite1
   2974  ffcb		       99		      .byte.b	#<CarSprite2
   2975  ffcc		       a7		      .byte.b	#<CarSprite3
   2976  ffcd
   2977  ffcd				   CarIdToSpriteAddressH
   2978  ffcd		       ff		      .byte.b	#>CarSprite0
   2979  ffce		       ff		      .byte.b	#>CarSprite1
   2980  ffcf		       ff		      .byte.b	#>CarSprite2
   2981  ffd0		       ff		      .byte.b	#>CarSprite3
   2982  ffd1
   2983  ffd1				   EnemyCarIdToSpriteAddressL
   2984  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2985  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2986  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2987  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2988  ffd5
   2989  ffd5				   EnemyCarIdToSpriteAddressH
   2990  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2991  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2992  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2993  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2994  ffd9
   2995  ffd9				   CarIdToAccelerateSpeed
   2996  ffd9		       80		      .byte.b	#128
   2997  ffda		       c0		      .byte.b	#192
   2998  ffdb		       60		      .byte.b	#96
   2999  ffdc		       c0		      .byte.b	#192
   3000  ffdd
   3001  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   3002  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   3003  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   3004  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   3005  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   3006  ffe1
   3007  ffe1				   CarIdToMaxSpeedL
   3008  ffe1		       80		      .byte.b	#$80
   3009  ffe2		       00		      .byte.b	#$00	; One less gear
   3010  ffe3		       80		      .byte.b	#$80
   3011  ffe4		       80		      .byte.b	#$80
   3012  ffe5
   3013  ffe5				   CarIdToMaxGear
   3014  ffe5		       05		      .byte.b	#5
   3015  ffe6		       04		      .byte.b	#4	; One less gear
   3016  ffe7		       05		      .byte.b	#5
   3017  ffe8		       05		      .byte.b	#5
   3018  ffe9
   3019  ffe9				   GearToBreakSpeedTable
   3020  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   3021  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   3022  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3023  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   3024  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3025  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3026  ffef
   3027  ffef				   TrafficColorTable
   3028  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3029  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3030  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3031  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3032  fff3
   3033  fff3				   TrafficChanceTable
   3034  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3035  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3036  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3037  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3038  fff7
   3039  fff7				   TrafficTimeTable
   3040  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3041  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3042  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3043  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3044  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3045  fffc
   3046  fffc
   3047  fffc					      org	$FFFC
   3048  fffc		       00 f0		      .word.w	BeforeStart
   3049  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
