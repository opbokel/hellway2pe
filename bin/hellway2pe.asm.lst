------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 fd f6 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 d2 f6 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080		       85 b9		      STA	OpCountdownTimer	;3
    283  f082
    284  f082				   ConfigurePlayer1XPosition
    285  f082		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    286  f084		       85 b7		      STA	Player1X	;3
    287  f086
    288  f086				   HPositioning 		; Avoid sleep doing needed stuff
    289  f086		       85 02		      STA	WSYNC
    290  f088
    291  f088				   ConfigurePlayer0XPosition
    292  f088		       a9 21		      LDA	#PLAYER_0_X_START	;2
    293  f08a		       85 b6		      STA	Player0X	;3
    294  f08c
    295  f08c				   ConfigureMissileSize
    296  f08c		       a9 30		      LDA	#%00110000	;2 Missile Size
    297  f08e		       85 04		      STA	NUSIZ0	;3
    298  f090		       85 05		      STA	NUSIZ1	;3
    299  f092
    300  f092				   ConfigureNextCheckpoint
    301  f092		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    302  f094		       85 cd		      STA	NextCheckpoint
    303  f096
    304  f096		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f098					      SLEEP	4	;
      1  f098				   .CYCLES    SET	4
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     19  f09a					      REPEND
    306  f09a		       85 12		      STA	RESM0
      0  f09c					      SLEEP	2	;
      1  f09c				   .CYCLES    SET	2
      2  f09c
      3  f09c				  -	      IF	.CYCLES < 2
      4  f09c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09c				  -	      ERR
      6  f09c					      ENDIF
      7  f09c
      8  f09c				  -	      IF	.CYCLES & 1
      9  f09c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09c				  -	      nop	0
     11  f09c				  -	      ELSE
     12  f09c				  -	      bit	VSYNC
     13  f09c				  -	      ENDIF
     14  f09c				  -.CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c					      REPEAT	.CYCLES / 2
     18  f09c		       ea		      nop
     19  f09d					      REPEND
    308  f09d		       85 14		      STA	RESBL
      0  f09f					      SLEEP	2
      1  f09f				   .CYCLES    SET	2
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f				  -	      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f				  -	      ELSE
     12  f09f				  -	      bit	VSYNC
     13  f09f				  -	      ENDIF
     14  f09f				  -.CYCLES    SET	.CYCLES - 3
     15  f09f					      ENDIF
     16  f09f
     17  f09f					      REPEAT	.CYCLES / 2
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    310  f0a0		       85 13		      STA	RESM1
      0  f0a2					      SLEEP	3
      1  f0a2				   .CYCLES    SET	3
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4				  -	      REPEAT	.CYCLES / 2
     18  f0a4				  -	      nop
     19  f0a4					      REPEND
    312  f0a4
    313  f0a4		       a9 e0		      LDA	#$E0
    314  f0a6		       85 24		      STA	HMBL
    315  f0a8		       85 22		      STA	HMM0
    316  f0aa		       85 23		      STA	HMM1
    317  f0ac		       85 02		      STA	WSYNC
    318  f0ae		       85 2a		      STA	HMOVE
    319  f0b0		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    320  f0b2		       85 2b		      STA	HMCLR
      0  f0b4					      SLEEP	30
      1  f0b4				   .CYCLES    SET	30
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     19  f0c3					      REPEND
    322  f0c3		       85 10		      STA	RESP0
    323  f0c5							;SLEEP 5 ; Temporarily move player 1 away.
    324  f0c5		       85 11		      STA	RESP1
    325  f0c7
    326  f0c7				   WaitResetToEnd
    327  f0c7		       ad 84 02 	      LDA	INTIM
    328  f0ca		       d0 fb		      BNE	WaitResetToEnd
    329  f0cc
    330  f0cc				   MainLoop
    331  f0cc		       a9 02		      LDA	#2
    332  f0ce		       85 00		      STA	VSYNC
    333  f0d0		       85 02		      STA	WSYNC
    334  f0d2		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    335  f0d4				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    336  f0d4		       a9 01		      LDA	#%00000001	;3
    337  f0d6		       24 df		      BIT	TextFlickerMode	;2
    338  f0d8		       f0 05		      BEQ	TextSideFrameZero	;2
    339  f0da		       25 8d		      AND	FrameCount1	;2
    340  f0dc		       4c e1 f0 	      JMP	StoreTextSize	;3
    341  f0df				   TextSideFrameZero
    342  f0df		       25 8c		      AND	FrameCount0	;2
    343  f0e1				   StoreTextSize
    344  f0e1		       85 de		      STA	TextSide	;3
    345  f0e3
    346  f0e3				   PrepareMaxHMove
      0  f0e3					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e3				   .CYCLES    SET	18
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     19  f0ec					      REPEND
    348  f0ec		       a9 80		      LDA	#$80
    349  f0ee		       85 24		      STA	HMBL
    350  f0f0		       85 22		      STA	HMM0
    351  f0f2		       85 23		      STA	HMM1
    352  f0f4		       85 20		      STA	HMP0
    353  f0f6		       85 21		      STA	HMP1
    354  f0f8		       85 02		      STA	WSYNC
    355  f0fa		       85 2a		      STA	HMOVE	; 1/10			
    356  f0fc
    357  f0fc				   ConfigVBlankTimer
    358  f0fc		       a5 c6		      LDA	GameMode
    359  f0fe		       c9 10		      CMP	#MAX_GAME_MODE
    360  f100		       f0 05		      BEQ	SetVblankTimerQrCode
    361  f102		       a9 29		      LDA	#VBLANK_TIMER
    362  f104		       4c 09 f1 	      JMP	SetVblankTimer
    363  f107				   SetVblankTimerQrCode
    364  f107		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    365  f109
    366  f109				   SetVblankTimer
    367  f109		       85 02		      STA	WSYNC	;3
    368  f10b		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    369  f10d		       8d 96 02 	      STA	TIM64T	;3	
    370  f110		       a9 00		      LDA	#0	;2
    371  f112		       85 00		      STA	VSYNC	;3	
    372  f114
    373  f114				   RandomizeGame
    374  f114		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    375  f116		       d0 2d		      BNE	EndRandomizeGame
    376  f118		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    377  f11a		       29 02		      AND	#%00000010
    378  f11c		       f0 24		      BEQ	DeterministicGame
    379  f11e		       a6 96		      LDX	TrafficOffset1 + 2
    380  f120		       bd 00 fe 	      LDA	AesTable,X
    381  f123		       45 8c		      EOR	FrameCount0
    382  f125		       85 96		      STA	TrafficOffset1 + 2
    383  f127		       85 a6		      STA	OpTrafficOffset1 + 2
    384  f129		       a6 9a		      LDX	TrafficOffset2 + 2
    385  f12b		       bd 00 fe 	      LDA	AesTable,X
    386  f12e		       45 8c		      EOR	FrameCount0
    387  f130		       85 9a		      STA	TrafficOffset2 + 2
    388  f132		       85 aa		      STA	OpTrafficOffset2 + 2
    389  f134		       a6 9e		      LDX	TrafficOffset3 + 2
    390  f136		       bd 00 fe 	      LDA	AesTable,X
    391  f139		       45 8c		      EOR	FrameCount0
    392  f13b		       85 9e		      STA	TrafficOffset3 + 2
    393  f13d		       85 ae		      STA	OpTrafficOffset3 + 2
    394  f13f		       4c 45 f1 	      JMP	EndRandomizeGame
    395  f142
    396  f142				   DeterministicGame
    397  f142		       20 fd f6 	      JSR	DefaultOffsets
    398  f145
    399  f145				   EndRandomizeGame
    400  f145
    401  f145
    402  f145							; Move this in the code and save cycles, for some reason spliting is breaking...
    403  f145		       a2 08		      LDX	#8
    404  f147				   BurnAllHMove
    405  f147		       85 02		      STA	WSYNC	;3
    406  f149		       85 2a		      STA	HMOVE	; 3/10 
    407  f14b		       ca		      DEX
    408  f14c		       d0 f9		      BNE	BurnAllHMove
    409  f14e		       85 02		      STA	WSYNC	;3
    410  f150		       85 2b		      STA	HMCLR	; 
    411  f152
    412  f152				   CountFrame
    413  f152		       e6 8c		      INC	FrameCount0	; 5
    414  f154		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    415  f156		       e6 8d		      INC	FrameCount1	; 5 
    416  f158				   SkipIncFC1
    417  f158
    418  f158				   CallDrawQrCode
    419  f158		       a5 c6		      LDA	GameMode
    420  f15a		       c9 10		      CMP	#MAX_GAME_MODE
    421  f15c		       d0 03		      BNE	TestIsGameRunning
    422  f15e		       4c 64 fc 	      JMP	DrawQrCode
    423  f161
    424  f161							;Does not update the game if not running
    425  f161				   TestIsGameRunning
    426  f161		       a5 bd		      LDA	GameStatus	;3
    427  f163		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    428  f165				   SelectCarWithDpadCall		; Only do it when game is stoped
    429  f165		       a2 00		      LDX	#0	; Player 0
    430  f167		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    431  f169		       85 b0		      STA	Tmp0
    432  f16b		       20 6c f9 	      JSR	SelectCarWithDpad
    433  f16e		       e8		      INX		; Player 1
    434  f16f		       20 6c f9 	      JSR	SelectCarWithDpad
    435  f172
    436  f172				   CallConfigureCarSprites
    437  f172		       20 3a f9 	      JSR	ConfigureCarSprites
    438  f175				   SkipUpdateLogicJump
    439  f175		       4c ff f1 	      JMP	SkipUpdateLogic
    440  f178				   ContinueWithGameLogic
    441  f178
    442  f178				   EverySecond		; 64 frames to be more precise
    443  f178		       a9 3f		      LDA	#%00111111
    444  f17a		       25 8c		      AND	FrameCount0
    445  f17c		       d0 08		      BNE	SkipEverySecondAction
    446  f17e		       c5 b8		      CMP	CountdownTimer
    447  f180		       f0 04		      BEQ	SkipEverySecondAction	; Stop at Zero
    448  f182		       c6 b8		      DEC	CountdownTimer
    449  f184		       c6 b9		      DEC	OpCountdownTimer
    450  f186				   SkipEverySecondAction
    451  f186
    452  f186				   ChangeTextFlickerMode
    453  f186		       a5 bc		      LDA	SwitchDebounceCounter
    454  f188		       d0 0d		      BNE	EndChangeTextFlickerMode
    455  f18a		       ad 82 02 	      LDA	SWCHB
    456  f18d		       29 02		      AND	#%00000010	;Game select
    457  f18f		       d0 06		      BNE	EndChangeTextFlickerMode
    458  f191		       e6 df		      INC	TextFlickerMode
    459  f193		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    460  f195		       85 bc		      STA	SwitchDebounceCounter
    461  f197				   EndChangeTextFlickerMode
    462  f197
    463  f197				   CallProcessSpeed
    464  f197		       a2 00		      LDX	#0
    465  f199		       20 51 fa 	      JSR	ProcessSpeed
    466  f19c
    467  f19c		       e8		      INX		; Player 1
    468  f19d		       20 51 fa 	      JSR	ProcessSpeed
    469  f1a0
    470  f1a0				   CallUpdateOffsets
    471  f1a0		       a2 00		      LDX	#0	; Player 0
    472  f1a2		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    473  f1a4		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    474  f1a6		       a5 f0		      LDA	Player0SpeedL
    475  f1a8		       85 b4		      STA	Tmp4
    476  f1aa		       a5 f2		      LDA	Player0SpeedH
    477  f1ac		       85 b5		      STA	Tmp5
    478  f1ae		       20 fe f9 	      JSR	UpdateOffsets
    479  f1b1
    480  f1b1							;LDX Exits the call with correct value.
    481  f1b1		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    482  f1b3		       85 b3		      STA	Tmp3
    483  f1b5		       a5 f1		      LDA	Player1SpeedL
    484  f1b7		       85 b4		      STA	Tmp4
    485  f1b9		       a5 f3		      LDA	Player1SpeedH
    486  f1bb		       85 b5		      STA	Tmp5
    487  f1bd		       20 fe f9 	      JSR	UpdateOffsets
    488  f1c0
    489  f1c0				   ConfigureOpponentLine		; Temporary
    490  f1c0		       a9 14		      LDA	#20	; Extract to constant
    491  f1c2		       85 cf		      STA	OpponentLine
    492  f1c4
    493  f1c4				   CallTestColisionAndMove
    494  f1c4		       a2 00		      LDX	#0	; Player 0
    495  f1c6		       a9 40		      LDA	#%01000000	; Left player 0
    496  f1c8		       85 b0		      STA	Tmp0
    497  f1ca		       a9 80		      LDA	#%10000000	; right player 0
    498  f1cc		       85 b1		      STA	Tmp1
    499  f1ce							; Colision with traffic, each player check different flags,
    500  f1ce		       a5 8c		      LDA	FrameCount0
    501  f1d0		       29 01		      AND	#%00000001
    502  f1d2		       f0 07		      BEQ	SkipColisionPlayer0	; Test colision after draw frame
    503  f1d4		       a5 01		      LDA	CXM1P
    504  f1d6		       4a		      LSR
    505  f1d7		       05 00		      ORA	CXM0P
    506  f1d9		       05 02		      ORA	CXP0FB
    507  f1db							; ORA CXPPMM ; Collision between players will have its own rules
    508  f1db				   SkipColisionPlayer0		; Should not colide on opponent side.
    509  f1db		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    510  f1dd		       85 b2		      STA	Tmp2
    511  f1df		       20 7e f9 	      JSR	TestCollisionAndMove
    512  f1e2
    513  f1e2		       e8		      INX		; player 1
    514  f1e3		       a9 04		      LDA	#%00000100	; Left player 1
    515  f1e5		       85 b0		      STA	Tmp0
    516  f1e7		       a9 08		      LDA	#%00001000	; right player 1
    517  f1e9		       85 b1		      STA	Tmp1
    518  f1eb		       a5 8c		      LDA	FrameCount0
    519  f1ed		       29 01		      AND	#%00000001
    520  f1ef		       d0 07		      BNE	SkipColisionPlayer1	; Test colision after draw frame
    521  f1f1		       a5 00		      LDA	CXM0P
    522  f1f3		       4a		      LSR
    523  f1f4		       05 01		      ORA	CXM1P
    524  f1f6		       05 03		      ORA	CXP1FB
    525  f1f8				   SkipColisionPlayer1
    526  f1f8		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    527  f1fa		       85 b2		      STA	Tmp2
    528  f1fc		       20 7e f9 	      JSR	TestCollisionAndMove
    529  f1ff
    530  f1ff				   SkipUpdateLogic		; Continue here if not paused
    531  f1ff
    532  f1ff				   CalculateGear
    533  f1ff		       a5 f0		      LDA	Player0SpeedL	;3
    534  f201		       29 80		      AND	#%10000000	;2
    535  f203		       05 f2		      ORA	Player0SpeedH	;3
    536  f205		       18		      CLC		;2
    537  f206		       2a		      ROL		;2
    538  f207		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    539  f209		       85 d5		      STA	Gear
    540  f20b
    541  f20b				   EndProcessingBorder
    542  f20b
    543  f20b				   ProcessScoreFontColor
    544  f20b		       a6 cb		      LDX	ScoreFontColorHoldChange
    545  f20d		       f0 06		      BEQ	ResetScoreFontColor
    546  f20f		       ca		      DEX
    547  f210		       86 cb		      STX	ScoreFontColorHoldChange
    548  f212		       4c 19 f2 	      JMP	SkipScoreFontColor
    549  f215				   ResetScoreFontColor
    550  f215		       a9 f9		      LDA	#SCORE_FONT_COLOR
    551  f217		       85 c9		      STA	ScoreFontColor
    552  f219				   SkipScoreFontColor
    553  f219
    554  f219				   IsGameOver
    555  f219		       a5 b8		      LDA	CountdownTimer
    556  f21b		       05 f0		      ORA	Player0SpeedL
    557  f21d		       05 f2		      ORA	Player0SpeedH
    558  f21f		       d0 0b		      BNE	IsCheckpoint
    559  f221		       a9 01		      LDA	#1
    560  f223		       85 cb		      STA	ScoreFontColorHoldChange
    561  f225		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    562  f227		       85 c9		      STA	ScoreFontColor
    563  f229		       4c 5e f2 	      JMP	SkipIsTimeOver
    564  f22c
    565  f22c				   IsCheckpoint
    566  f22c		       a5 cd		      LDA	NextCheckpoint
    567  f22e		       c5 92		      CMP	TrafficOffset0 + 2
    568  f230		       d0 20		      BNE	SkipIsCheckpoint
    569  f232		       18		      CLC
    570  f233		       69 10		      ADC	#CHECKPOINT_INTERVAL
    571  f235		       85 cd		      STA	NextCheckpoint
    572  f237		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    573  f239		       85 c9		      STA	ScoreFontColor
    574  f23b		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    575  f23d		       85 cb		      STA	ScoreFontColorHoldChange
    576  f23f		       a5 b8		      LDA	CountdownTimer
    577  f241		       18		      CLC
    578  f242		       65 c0		      ADC	CheckpointTime
    579  f244		       85 b8		      STA	CountdownTimer
    580  f246		       90 04		      BCC	JumpSkipTimeOver
    581  f248		       a9 ff		      LDA	#$FF
    582  f24a		       85 b8		      STA	CountdownTimer	; Does not overflow!
    583  f24c				   JumpSkipTimeOver
    584  f24c		       20 c3 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    585  f24f		       4c 5e f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    586  f252				   SkipIsCheckpoint
    587  f252
    588  f252				   IsTimeOver
    589  f252		       a5 b8		      LDA	CountdownTimer
    590  f254		       d0 08		      BNE	SkipIsTimeOver
    591  f256		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    592  f258		       85 cb		      STA	ScoreFontColorHoldChange
    593  f25a		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    594  f25c		       85 c9		      STA	ScoreFontColor
    595  f25e				   SkipIsTimeOver
    596  f25e
    597  f25e		       20 3a f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    598  f261
    599  f261				   PrintEasterEggCondition
    600  f261		       a5 8d		      LDA	FrameCount1
    601  f263		       29 38		      AND	#%00111000
    602  f265		       05 bd		      ORA	GameStatus
    603  f267		       c9 38		      CMP	#%00111000
    604  f269		       d0 06		      BNE	ChooseTextSide
    605  f26b		       20 30 f7 	      JSR	PrintEasterEgg
    606  f26e		       4c 60 f3 	      JMP	RightScoreWriteEnd
    607  f271
    608  f271							;Could be done during on vblank to save this comparisson time (before draw score), 
    609  f271							;but I am saving vblank cycles for now, in case of 2 players.
    610  f271				   ChooseTextSide		; 
    611  f271		       a5 de		      LDA	TextSide	;3
    612  f273		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    613  f275		       4c f6 f2 	      JMP	RightScoreWrite
    614  f278
    615  f278				   LeftScoreWrite
    616  f278		       a5 c9		      LDA	ScoreFontColor
    617  f27a		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    618  f27c		       f0 4e		      BEQ	PrintCheckpoint
    619  f27e		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    620  f280		       f0 52		      BEQ	PrintStartGame
    621  f282		       a5 bd		      LDA	GameStatus
    622  f284		       f0 56		      BEQ	PrintHellwayLeft
    623  f286				   WriteDistance		;Not optimized yet, ugly code.
    624  f286				   Digit0Distance
    625  f286		       a5 91		      LDA	TrafficOffset0 + 1	;3
    626  f288		       4a		      LSR		; 2
    627  f289		       4a		      LSR		; 2
    628  f28a		       4a		      LSR		; 2
    629  f28b		       4a		      LSR		; 2
    630  f28c		       aa		      TAX		; 2
    631  f28d		       bd be fd 	      LDA	FontLookup,X	;4
    632  f290		       85 d3		      STA	ScoreD3	;3
    633  f292
    634  f292				   Digit1Distance
    635  f292		       a5 92		      LDA	TrafficOffset0 + 2	;3
    636  f294		       29 0f		      AND	#%00001111	;2
    637  f296		       aa		      TAX		; 2
    638  f297		       bd be fd 	      LDA	FontLookup,X	;4 
    639  f29a		       85 d2		      STA	ScoreD2	;3
    640  f29c
    641  f29c				   Digit2Distance
    642  f29c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    643  f29e		       4a		      LSR		; 2
    644  f29f		       4a		      LSR		; 2
    645  f2a0		       4a		      LSR		; 2
    646  f2a1		       4a		      LSR		; 2
    647  f2a2		       aa		      TAX		; 2
    648  f2a3		       bd be fd 	      LDA	FontLookup,X	;4
    649  f2a6		       85 d1		      STA	ScoreD1	;3
    650  f2a8
    651  f2a8				   Digit3Distance
    652  f2a8		       a5 ba		      LDA	Traffic0Msb	;3
    653  f2aa		       29 0f		      AND	#%00001111	;2
    654  f2ac		       aa		      TAX		; 2
    655  f2ad		       bd be fd 	      LDA	FontLookup,X	;4 
    656  f2b0		       85 d0		      STA	ScoreD0	;3
    657  f2b2
    658  f2b2				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    659  f2b2		       a5 ba		      LDA	Traffic0Msb
    660  f2b4		       29 f0		      AND	#%11110000	;2
    661  f2b6		       d0 07		      BNE	DrawDistanceExtraDigit
    662  f2b8		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    663  f2ba		       85 d4		      STA	ScoreD4	;3
    664  f2bc		       4c c9 f2 	      JMP	EndDrawDistance
    665  f2bf				   DrawDistanceExtraDigit
    666  f2bf		       4a		      LSR		; 2
    667  f2c0		       4a		      LSR		; 2
    668  f2c1		       4a		      LSR		; 2
    669  f2c2		       4a		      LSR		; 2
    670  f2c3		       aa		      TAX		; 2
    671  f2c4		       bd be fd 	      LDA	FontLookup,X	;4
    672  f2c7		       85 d4		      STA	ScoreD4	;3
    673  f2c9
    674  f2c9				   EndDrawDistance
    675  f2c9		       4c 60 f3 	      JMP	RightScoreWriteEnd	;3
    676  f2cc
    677  f2cc				   PrintCheckpoint
    678  f2cc		       a2 00		      LDX	#<CheckpointText
    679  f2ce		       20 12 f7 	      JSR	PrintStaticText
    680  f2d1		       4c 60 f3 	      JMP	RightScoreWriteEnd	;3
    681  f2d4				   PrintStartGame
    682  f2d4		       a2 23		      LDX	#<GoText
    683  f2d6		       20 12 f7 	      JSR	PrintStaticText
    684  f2d9		       4c 60 f3 	      JMP	RightScoreWriteEnd	;3
    685  f2dc
    686  f2dc				   PrintHellwayLeft
    687  f2dc		       a5 8d		      LDA	FrameCount1
    688  f2de		       29 01		      AND	#1
    689  f2e0		       d0 05		      BNE	PrintCreditsLeft
    690  f2e2		       a2 05		      LDX	#<HellwayLeftText
    691  f2e4		       4c e9 f2 	      JMP	PrintGameMode
    692  f2e7				   PrintCreditsLeft
    693  f2e7		       a2 0f		      LDX	#<OpbText
    694  f2e9
    695  f2e9				   PrintGameMode
    696  f2e9		       20 12 f7 	      JSR	PrintStaticText
    697  f2ec		       a6 c6		      LDX	GameMode
    698  f2ee		       bd be fd 	      LDA	FontLookup,X	;4 
    699  f2f1		       85 d0		      STA	ScoreD0	;3
    700  f2f3		       4c 60 f3 	      JMP	RightScoreWriteEnd	;3
    701  f2f6
    702  f2f6				   RightScoreWrite
    703  f2f6		       a5 bd		      LDA	GameStatus
    704  f2f8		       f0 45		      BEQ	PrintHellwayRight
    705  f2fa		       a5 c9		      LDA	ScoreFontColor
    706  f2fc		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    707  f2fe		       f0 52		      BEQ	PrintGameOver
    708  f300				   Digit0Timer
    709  f300		       a5 b8		      LDA	CountdownTimer	;3
    710  f302		       29 0f		      AND	#%00001111	;2
    711  f304		       aa		      TAX		; 2
    712  f305		       bd be fd 	      LDA	FontLookup,X	;4 
    713  f308		       85 d1		      STA	ScoreD1	;3
    714  f30a
    715  f30a				   Digit1Timer
    716  f30a		       a5 b8		      LDA	CountdownTimer	;3
    717  f30c		       4a		      LSR		; 2
    718  f30d		       4a		      LSR		; 2
    719  f30e		       4a		      LSR		; 2
    720  f30f		       4a		      LSR		; 2
    721  f310		       aa		      TAX		; 2
    722  f311		       bd be fd 	      LDA	FontLookup,X	;4
    723  f314		       85 d0		      STA	ScoreD0	;3
    724  f316
    725  f316		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    726  f318		       85 d2		      STA	ScoreD2	;3
    727  f31a
    728  f31a				   Digit0Speed
    729  f31a		       a5 f0		      LDA	Player0SpeedL
    730  f31c		       29 3c		      AND	#%00111100	;2 Discard the last bits
    731  f31e		       4a		      LSR		; 2
    732  f31f		       4a		      LSR		; 2
    733  f320		       aa		      TAX		; 2
    734  f321		       bd be fd 	      LDA	FontLookup,X	;4
    735  f324		       85 d4		      STA	ScoreD4	;3
    736  f326
    737  f326				   Digit1Speed
    738  f326		       a5 f0		      LDA	Player0SpeedL
    739  f328		       29 c0		      AND	#%11000000	;2 Discard the last bits
    740  f32a		       18		      CLC
    741  f32b		       2a		      ROL		;First goes into carry
    742  f32c		       2a		      ROL
    743  f32d		       2a		      ROL
    744  f32e		       85 b0		      STA	Tmp0
    745  f330		       a5 f2		      LDA	Player0SpeedH
    746  f332		       0a		      ASL
    747  f333		       0a		      ASL
    748  f334		       05 b0		      ORA	Tmp0
    749  f336		       aa		      TAX		; 2
    750  f337		       bd be fd 	      LDA	FontLookup,X	;4
    751  f33a		       85 d3		      STA	ScoreD3	;3
    752  f33c		       4c 60 f3 	      JMP	RightScoreWriteEnd
    753  f33f
    754  f33f				   PrintHellwayRight
    755  f33f		       a5 8d		      LDA	FrameCount1
    756  f341		       29 01		      AND	#1
    757  f343		       d0 05		      BNE	PrintCreditsRight
    758  f345		       a2 0a		      LDX	#<HellwayRightText
    759  f347		       4c 4c f3 	      JMP	PrintRightIntro
    760  f34a				   PrintCreditsRight
    761  f34a		       a2 14		      LDX	#<YearText
    762  f34c				   PrintRightIntro
    763  f34c		       20 12 f7 	      JSR	PrintStaticText
    764  f34f		       4c 60 f3 	      JMP	RightScoreWriteEnd
    765  f352				   PrintGameOver
    766  f352		       a5 8c		      LDA	FrameCount0
    767  f354		       30 05		      BMI	PrintOverText
    768  f356		       a2 19		      LDX	#<GameText
    769  f358		       4c 5d f3 	      JMP	StoreGameOverText
    770  f35b				   PrintOverText
    771  f35b		       a2 1e		      LDX	#<OverText
    772  f35d				   StoreGameOverText
    773  f35d		       20 12 f7 	      JSR	PrintStaticText
    774  f360				   RightScoreWriteEnd
    775  f360
    776  f360
    777  f360				   ScoreBackgroundColor
    778  f360		       a2 00		      LDX	#0
    779  f362		       ad 82 02 	      LDA	SWCHB
    780  f365		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    781  f367		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    782  f369		       f0 04		      BEQ	BlackAndWhiteScoreBg
    783  f36b		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    784  f36d		       a2 03		      LDX	#BACKGROUND_COLOR
    785  f36f				   BlackAndWhiteScoreBg
    786  f36f		       85 b2		      STA	Tmp2	; Score Background
    787  f371		       86 b3		      STX	Tmp3	; Traffic Background
    788  f373
    789  f373				   ConfigurePFForScore
    790  f373							;LDA #SCORE_BACKGROUND_COLOR; Done above
    791  f373		       85 09		      STA	COLUBK
    792  f375		       20 85 f6 	      JSR	ClearAll
    793  f378		       a9 02		      LDA	#%00000010	; Score mode
    794  f37a		       85 0a		      STA	CTRLPF
    795  f37c		       a5 de		      LDA	TextSide	;3
    796  f37e		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    797  f380				   LeftScoreOn
    798  f380		       a5 c9		      LDA	ScoreFontColor
    799  f382		       85 07		      STA	COLUP1
    800  f384		       a5 b2		      LDA	Tmp2
    801  f386		       85 06		      STA	COLUP0
    802  f388		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    803  f38a		       85 b1		      STA	Tmp1
    804  f38c		       4c 9b f3 	      JMP	CallWaitForVblankEnd
    805  f38f				   RightScoreOn
    806  f38f		       a5 c9		      LDA	ScoreFontColor
    807  f391		       85 06		      STA	COLUP0
    808  f393		       a5 b2		      LDA	Tmp2
    809  f395		       85 07		      STA	COLUP1
    810  f397		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    811  f399		       85 b1		      STA	Tmp1
    812  f39b
    813  f39b							; After here we are going to update the screen, No more heavy code
    814  f39b				   CallWaitForVblankEnd
    815  f39b		       20 13 f9 	      JSR	WaitForVblankEnd
    816  f39e
    817  f39e				   DrawScoreHud
    818  f39e		       20 a2 f7 	      JSR	PrintScore
    819  f3a1
    820  f3a1		       85 02		      STA	WSYNC
    821  f3a3
    822  f3a3		       a5 0c		      LDA	INPT4	;3
    823  f3a5		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    824  f3a7		       a5 c9		      LDA	ScoreFontColor
    825  f3a9		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    826  f3ab		       d0 0a		      BNE	WaitAnotherScoreLine
    827  f3ad		       a5 de		      LDA	TextSide	;3
    828  f3af		       d0 03		      BNE	LeftScoreOnGameOver
    829  f3b1		       4c ed f8 	      JMP	DrawGameOverScreenRight
    830  f3b4				   LeftScoreOnGameOver
    831  f3b4		       4c 5f f8 	      JMP	DrawGameOverScreenLeft
    832  f3b7
    833  f3b7				   WaitAnotherScoreLine
    834  f3b7		       85 02		      STA	WSYNC
    835  f3b9
    836  f3b9				   PrepareForTraffic
    837  f3b9		       20 97 f6 	      JSR	ClearPF	; 32
    838  f3bc
    839  f3bc		       85 02		      STA	WSYNC
    840  f3be		       85 02		      STA	WSYNC
    841  f3c0
    842  f3c0		       a9 30		      LDA	#%00110000	; 2 Score mode
    843  f3c2		       85 0a		      STA	CTRLPF	;3
    844  f3c4
    845  f3c4		       a5 c2		      LDA	TrafficColor	;3
    846  f3c6		       85 08		      STA	COLUPF	;3
    847  f3c8
    848  f3c8		       a9 96		      LDA	#PLAYER1_COLOR	;2
    849  f3ca		       85 07		      STA	COLUP1	;3
    850  f3cc
    851  f3cc		       a5 c9		      LDA	ScoreFontColor	;3
    852  f3ce		       85 06		      STA	COLUP0	;3
    853  f3d0
    854  f3d0		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    855  f3d2
    856  f3d2		       20 97 f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    857  f3d5
    858  f3d5		       a6 b3		      LDX	Tmp3	; Background color.
    859  f3d7
      0  f3d7					      SLEEP	9	; Odd sleep destroys flags
      1  f3d7				   .CYCLES    SET	9
      2  f3d7
      3  f3d7				  -	      IF	.CYCLES < 2
      4  f3d7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3d7				  -	      ERR
      6  f3d7					      ENDIF
      7  f3d7
      8  f3d7					      IF	.CYCLES & 1
      9  f3d7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3d7				  -	      nop	0
     11  f3d7					      ELSE
     12  f3d7		       24 00		      bit	VSYNC
     13  f3d9					      ENDIF
     14  f3d9				   .CYCLES    SET	.CYCLES - 3
     15  f3d9					      ENDIF
     16  f3d9
     17  f3d9					      REPEAT	.CYCLES / 2
     18  f3d9		       ea		      nop
     17  f3d9					      REPEND
     18  f3da		       ea		      nop
     17  f3da					      REPEND
     18  f3db		       ea		      nop
     19  f3dc					      REPEND
    861  f3dc
    862  f3dc		       a5 8c		      LDA	FrameCount0	;Brach flag
    863  f3de		       29 01		      AND	#%00000001
    864  f3e0
    865  f3e0		       86 09		      STX	COLUBK	;3
    866  f3e2		       d0 05		      BNE	OpDrawCache	;2
    867  f3e4		       4c a3 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    868  f3e7							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    869  f3e7
    870  f3e7							;main scanline loop...
    871  f3e7				   OpScanLoop
    872  f3e7		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    873  f3e9
    874  f3e9							;Start of next line!			
    875  f3e9				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    876  f3e9
    877  f3e9		       a5 80		      LDA	GRP0Cache	;3
    878  f3eb		       85 1b		      STA	GRP0	;3
    879  f3ed
    880  f3ed		       a5 84		      LDA	GRP1Cache	;3
    881  f3ef		       85 1c		      STA	GRP1	;3
    882  f3f1
    883  f3f1		       a5 85		      LDA	ENABLCache	;3
    884  f3f3		       85 1f		      STA	ENABL	;3
    885  f3f5
    886  f3f5		       a5 86		      LDA	ENAM0Cache	;3
    887  f3f7		       85 1d		      STA	ENAM0	;3
    888  f3f9
    889  f3f9		       a5 87		      LDA	ENAM1Cache	;3
    890  f3fb		       85 1e		      STA	ENAM1	;3
    891  f3fd
    892  f3fd		       a5 81		      LDA	PF0Cache	;3
    893  f3ff		       85 0d		      STA	PF0	;3
    894  f401
    895  f401		       a9 00		      LDA	#0	;2
    896  f403							;STA PF0	     ;3
    897  f403		       85 80		      STA	GRP0Cache	;3
    898  f405		       85 86		      STA	ENAM0Cache	;3
    899  f407		       85 85		      STA	ENABLCache	;3
    900  f409		       85 87		      STA	ENAM1Cache	; 3
    901  f40b							;STA GRP1Cache ;3
    902  f40b		       85 0d		      STA	PF0	;3
    903  f40d							;STA PF2	     ;3
    904  f40d
    905  f40d		       a5 83		      LDA	PF2Cache	;3
    906  f40f		       85 0f		      STA	PF2	;3
    907  f411
    908  f411				   OpDrawCar0
    909  f411		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    910  f413		       b0 04		      BCS	OpSkipDrawCar	;2
    911  f415		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    912  f417		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    913  f419				   OpSkipDrawCar
    914  f419
    915  f419							;BEQ DrawTraffic3
    916  f419				   OpDrawTraffic1		; 33
    917  f419		       98		      TYA		; 2
    918  f41a		       18		      CLC		; 2 
    919  f41b		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    920  f41d		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    921  f41f		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    922  f421		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    923  f423		       4c 28 f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
    924  f426				   OpEorOffsetWithCarry
    925  f426		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    926  f428				   OpAfterEorOffsetWithCarry		;17
    927  f428		       aa		      TAX		;2
    928  f429		       bd 00 fe 	      LDA	AesTable,X	; 4
    929  f42c		       c5 be		      CMP	TrafficChance	;3
    930  f42e		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    931  f430		       a9 ff		      LDA	#$FF	;2
    932  f432		       85 86		      STA	ENAM0Cache	;3
    933  f434				   OpFinishDrawTraffic1
    934  f434
    935  f434				   OpErasePF2
    936  f434		       a9 00		      LDA	#0
    937  f436		       85 0f		      STA	PF2
    938  f438
    939  f438				   OpDrawTraffic2		; 33
    940  f438		       98		      TYA		; 2
    941  f439		       18		      CLC		; 2 
    942  f43a		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    943  f43c		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    944  f43e		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    945  f440		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    946  f442		       4c 47 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    947  f445				   OpEorOffsetWithCarry2
    948  f445		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    949  f447				   OpAfterEorOffsetWithCarry2		;17
    950  f447		       aa		      TAX		;2
    951  f448		       bd 00 fe 	      LDA	AesTable,X	; 4
    952  f44b		       c5 be		      CMP	TrafficChance	;3
    953  f44d		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    954  f44f		       a9 02		      LDA	#%00000010	;2
    955  f451		       85 85		      STA	ENABLCache	;3
    956  f453				   OpFinishDrawTraffic2
    957  f453
    958  f453							;STA WSYNC ;65 / 137
    959  f453
    960  f453							; LDA Tmp0 ; Flicker this line if drawing car
    961  f453							; BEQ FinishDrawTraffic4
    962  f453				   OpDrawTraffic3		; 33
    963  f453		       98		      TYA		; 2
    964  f454		       18		      CLC		; 2 
    965  f455		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    966  f457		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    967  f459		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    968  f45b		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    969  f45d		       4c 62 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    970  f460				   OpEorOffsetWithCarry3
    971  f460		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    972  f462				   OpAfterEorOffsetWithCarry3		;17
    973  f462		       aa		      TAX		;2
    974  f463		       bd 00 fe 	      LDA	AesTable,X	; 4
    975  f466		       c5 be		      CMP	TrafficChance	;3
    976  f468		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    977  f46a		       a9 02		      LDA	#%00000010	;2
    978  f46c		       85 87		      STA	ENAM1Cache
    979  f46e				   OpFinishDrawTraffic3
    980  f46e
    981  f46e				   OpDrawOponent		;26
    982  f46e		       84 b0		      STY	Tmp0	;3
    983  f470		       a4 cf		      LDY	OpponentLine	;3
    984  f472		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    985  f474		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    986  f476				   OpDrawOpponent
    987  f476		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    988  f478		       85 80		      STA	GRP0Cache	;3
    989  f47a		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    990  f47c		       a4 b0		      LDY	Tmp0	;3
    991  f47e		       4c 92 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    992  f481				   OpSkipDrawOpponent
    993  f481		       c6 cf		      DEC	OpponentLine	;5
    994  f483		       a4 b0		      LDY	Tmp0	;3
    995  f485
    996  f485
    997  f485				   OpDrawTraffic0		; 21 2pe
    998  f485		       98		      TYA		; 2
    999  f486		       18		      CLC		; 2 
   1000  f487		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1001  f489		       29 08		      AND	#%00001000	;2
   1002  f48b		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1003  f48d				   OpHasBorderP0
   1004  f48d		       a9 70		      LDA	#%01110000	; 2
   1005  f48f		       4c 94 f4 	      JMP	OpStoreBorderP0	; 3
   1006  f492				   OpHasNoBorderP0
   1007  f492		       a9 00		      LDA	#0	; 2
   1008  f494				   OpStoreBorderP0
   1009  f494		       85 81		      STA	PF0Cache	; 3
   1010  f496		       85 83		      STA	PF2Cache	; 3
   1011  f498
   1012  f498				   OpSkipDrawTraffic0
   1013  f498
   1014  f498				   OpWhileScanLoop
   1015  f498		       88		      DEY		;2
   1016  f499		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1017  f49b		       4c e7 f3 	      JMP	OpScanLoop	;3
   1018  f49e				   OpFinishScanLoop		; 7 209 of 222
   1019  f49e		       4c 56 f5 	      JMP	FinishScanLoop
   1020  f4a1
   1021  f4a1							;main scanline loop...
   1022  f4a1				   ScanLoop
   1023  f4a1		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1024  f4a3
   1025  f4a3							;Start of next line!			
   1026  f4a3				   DrawCache		;63 Is the last line going to the top of the next frame?
   1027  f4a3		       a5 81		      LDA	PF0Cache	;3
   1028  f4a5		       85 0d		      STA	PF0	;3
   1029  f4a7
   1030  f4a7		       a5 80		      LDA	GRP0Cache	;3
   1031  f4a9		       85 1b		      STA	GRP0	;3
   1032  f4ab
   1033  f4ab		       a5 84		      LDA	GRP1Cache	;3
   1034  f4ad		       85 1c		      STA	GRP1	;3
   1035  f4af
   1036  f4af		       a5 86		      LDA	ENAM0Cache	;3
   1037  f4b1		       85 1d		      STA	ENAM0	;3
   1038  f4b3
   1039  f4b3		       a5 85		      LDA	ENABLCache	;3
   1040  f4b5		       85 1f		      STA	ENABL	;3
   1041  f4b7
   1042  f4b7		       a5 87		      LDA	ENAM1Cache	;3
   1043  f4b9		       85 1e		      STA	ENAM1	;3
   1044  f4bb
   1045  f4bb		       a5 83		      LDA	PF2Cache	;3
   1046  f4bd		       85 0f		      STA	PF2	;3
   1047  f4bf
   1048  f4bf		       a9 00		      LDA	#0	;2
   1049  f4c1		       85 0d		      STA	PF0	;3
   1050  f4c3		       85 84		      STA	GRP1Cache	;3
   1051  f4c5		       85 85		      STA	ENABLCache	;3
   1052  f4c7		       85 86		      STA	ENAM0Cache	;3
   1053  f4c9		       85 87		      STA	ENAM1Cache	; 3
   1054  f4cb							;STA GRP0Cache
   1055  f4cb		       85 0f		      STA	PF2	;3
   1056  f4cd
   1057  f4cd				   DrawCar0
   1058  f4cd		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1059  f4cf		       b0 04		      BCS	SkipDrawCar	;2
   1060  f4d1		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1061  f4d3		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1062  f4d5				   SkipDrawCar
   1063  f4d5
   1064  f4d5							;BEQ DrawTraffic3
   1065  f4d5				   DrawTraffic1 		; 33
   1066  f4d5		       98		      TYA		; 2
   1067  f4d6		       18		      CLC		; 2 
   1068  f4d7		       65 95		      ADC	TrafficOffset1 + 1	;3
   1069  f4d9		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1070  f4db		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1071  f4dd		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1072  f4df		       4c e4 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1073  f4e2				   EorOffsetWithCarry
   1074  f4e2		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1075  f4e4				   AfterEorOffsetWithCarry		;17
   1076  f4e4		       aa		      TAX		;2
   1077  f4e5		       bd 00 fe 	      LDA	AesTable,X	; 4
   1078  f4e8		       c5 be		      CMP	TrafficChance	;3
   1079  f4ea		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1080  f4ec		       a9 ff		      LDA	#$FF	;2
   1081  f4ee		       85 86		      STA	ENAM0Cache	;3
   1082  f4f0				   FinishDrawTraffic1
   1083  f4f0
   1084  f4f0				   DrawTraffic2 		; 33
   1085  f4f0		       98		      TYA		; 2
   1086  f4f1		       18		      CLC		; 2 
   1087  f4f2		       65 99		      ADC	TrafficOffset2 + 1	;3
   1088  f4f4		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1089  f4f6		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1090  f4f8		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1091  f4fa		       4c ff f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1092  f4fd				   EorOffsetWithCarry2
   1093  f4fd		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1094  f4ff				   AfterEorOffsetWithCarry2		;17
   1095  f4ff		       aa		      TAX		;2
   1096  f500		       bd 00 fe 	      LDA	AesTable,X	; 4
   1097  f503		       c5 be		      CMP	TrafficChance	;3
   1098  f505		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1099  f507		       a9 02		      LDA	#%00000010	;2
   1100  f509		       85 85		      STA	ENABLCache	;3
   1101  f50b				   FinishDrawTraffic2
   1102  f50b
   1103  f50b							;STA WSYNC ;65 / 137
   1104  f50b
   1105  f50b							; LDA Tmp0 ; Flicker this line if drawing car
   1106  f50b							; BEQ FinishDrawTraffic4
   1107  f50b				   DrawTraffic3 		; 33
   1108  f50b		       98		      TYA		; 2
   1109  f50c		       18		      CLC		; 2 
   1110  f50d		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1111  f50f		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1112  f511		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1113  f513		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1114  f515		       4c 1a f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1115  f518				   EorOffsetWithCarry3
   1116  f518		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1117  f51a				   AfterEorOffsetWithCarry3		;17
   1118  f51a		       aa		      TAX		;2
   1119  f51b		       bd 00 fe 	      LDA	AesTable,X	; 4
   1120  f51e		       c5 be		      CMP	TrafficChance	;3
   1121  f520		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1122  f522		       a9 02		      LDA	#%00000010	;2
   1123  f524		       85 87		      STA	ENAM1Cache
   1124  f526				   FinishDrawTraffic3
   1125  f526
   1126  f526
   1127  f526				   DrawOponent		;26
   1128  f526		       84 b0		      STY	Tmp0	;3
   1129  f528		       a4 cf		      LDY	OpponentLine	;3
   1130  f52a		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1131  f52c		       b0 0b		      BCS	SkipDrawOpponent	;2
   1132  f52e				   DrawOpponent
   1133  f52e		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1134  f530		       85 84		      STA	GRP1Cache	;3
   1135  f532		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1136  f534		       a4 b0		      LDY	Tmp0	;3
   1137  f536		       4c 4a f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1138  f539				   SkipDrawOpponent
   1139  f539		       c6 cf		      DEC	OpponentLine	;5
   1140  f53b		       a4 b0		      LDY	Tmp0	;3
   1141  f53d
   1142  f53d				   DrawTraffic0 		; 21 2pe
   1143  f53d		       98		      TYA		; 2
   1144  f53e		       18		      CLC		; 2 
   1145  f53f		       65 91		      ADC	TrafficOffset0 + 1	;3
   1146  f541		       29 08		      AND	#%00001000	;2
   1147  f543		       f0 05		      BEQ	HasNoBorderP0	;3
   1148  f545				   HasBorderP0
   1149  f545		       a9 70		      LDA	#%01110000	; 2
   1150  f547		       4c 4c f5 	      JMP	StoreBorderP0	; 3
   1151  f54a				   HasNoBorderP0
   1152  f54a		       a9 00		      LDA	#0	; 2
   1153  f54c				   StoreBorderP0
   1154  f54c		       85 81		      STA	PF0Cache	; 3
   1155  f54e		       85 83		      STA	PF2Cache	; 3
   1156  f550
   1157  f550				   SkipDrawTraffic0
   1158  f550
   1159  f550				   WhileScanLoop
   1160  f550		       88		      DEY		;2
   1161  f551		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1162  f553		       4c a1 f4 	      JMP	ScanLoop	;3
   1163  f556				   FinishScanLoop		; 7 209 of 222
   1164  f556
   1165  f556		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1166  f558		       20 a6 f6 	      JSR	LoadAll
   1167  f55b		       85 02		      STA	WSYNC	; do stuff!
   1168  f55d		       85 02		      STA	WSYNC
   1169  f55f		       85 02		      STA	WSYNC
   1170  f561							;42 cycles to use here
   1171  f561
   1172  f561				   PrepareOverscan
   1173  f561		       a9 02		      LDA	#2
   1174  f563		       85 02		      STA	WSYNC
   1175  f565		       85 01		      STA	VBLANK
   1176  f567
   1177  f567		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1178  f569		       8d 96 02 	      STA	TIM64T
   1179  f56c
   1180  f56c				   LeftSound		;41
   1181  f56c		       a5 b8		      LDA	CountdownTimer	;3
   1182  f56e		       f0 1b		      BEQ	EngineOff	;2
   1183  f570		       a6 d5		      LDX	Gear
   1184  f572		       a5 f0		      LDA	Player0SpeedL	;3
   1185  f574		       4a		      LSR		;2
   1186  f575		       4a		      LSR		;2
   1187  f576		       4a		      LSR		;2
   1188  f577		       29 0f		      AND	#%00001111	;2
   1189  f579		       85 b0		      STA	Tmp0	;3
   1190  f57b		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1191  f57e		       38		      SEC		;2
   1192  f57f		       e5 b0		      SBC	Tmp0	;3
   1193  f581		       85 17		      STA	AUDF0	;3
   1194  f583		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1195  f586		       85 15		      STA	AUDC0	;3
   1196  f588		       4c 8f f5 	      JMP	EndLeftSound	;3
   1197  f58b				   EngineOff
   1198  f58b		       a9 00		      LDA	#0
   1199  f58d		       85 15		      STA	AUDC0
   1200  f58f
   1201  f58f				   EndLeftSound
   1202  f58f
   1203  f58f
   1204  f58f				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1205  f58f		       a5 c9		      LDA	ScoreFontColor	;3
   1206  f591		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1207  f593		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1208  f595		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1209  f597		       f0 29		      BEQ	PlayCheckpoint	;2
   1210  f599		       a5 8e		      LDA	CollisionCounter	;3
   1211  f59b		       c9 e0		      CMP	#$E0	;2
   1212  f59d		       b0 14		      BCS	PlayColision	;2
   1213  f59f		       a5 cd		      LDA	NextCheckpoint	;3
   1214  f5a1		       38		      SEC		;2
   1215  f5a2		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1216  f5a4		       c9 02		      CMP	#$02	;2
   1217  f5a6		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1218  f5a8		       a5 b8		      LDA	CountdownTimer	; 3
   1219  f5aa		       f0 53		      BEQ	MuteRightSound	;2
   1220  f5ac		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1221  f5ae		       90 37		      BCC	PlayWarnTimeEnding	;4
   1222  f5b0		       4c ff f5 	      JMP	MuteRightSound	;3
   1223  f5b3				   PlayColision
   1224  f5b3		       a9 1f		      LDA	#31
   1225  f5b5		       85 18		      STA	AUDF1
   1226  f5b7		       a9 08		      LDA	#8
   1227  f5b9		       85 16		      STA	AUDC1
   1228  f5bb		       a9 08		      LDA	#8
   1229  f5bd		       85 1a		      STA	AUDV1
   1230  f5bf		       4c 03 f6 	      JMP	EndRightSound
   1231  f5c2
   1232  f5c2				   PlayCheckpoint
   1233  f5c2		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1234  f5c4		       4a		      LSR		;2
   1235  f5c5		       4a		      LSR		;2
   1236  f5c6		       4a		      LSR		;2
   1237  f5c7		       85 18		      STA	AUDF1	;3
   1238  f5c9		       a9 0c		      LDA	#12	;2
   1239  f5cb		       85 16		      STA	AUDC1	;3
   1240  f5cd		       a9 06		      LDA	#6	;2
   1241  f5cf		       85 1a		      STA	AUDV1	;3
   1242  f5d1		       4c 03 f6 	      JMP	EndRightSound	;3
   1243  f5d4
   1244  f5d4				   PlayBeforeCheckpoint
   1245  f5d4		       a5 8c		      LDA	FrameCount0	;3
   1246  f5d6		       29 1c		      AND	#%00011100	;2
   1247  f5d8		       09 03		      ORA	#%00000011	;2
   1248  f5da		       85 18		      STA	AUDF1	;3
   1249  f5dc		       a9 0c		      LDA	#12	;2
   1250  f5de		       85 16		      STA	AUDC1	;3
   1251  f5e0		       a9 03		      LDA	#3	;2
   1252  f5e2		       85 1a		      STA	AUDV1	;3
   1253  f5e4		       4c 03 f6 	      JMP	EndRightSound	;3
   1254  f5e7
   1255  f5e7				   PlayWarnTimeEnding
   1256  f5e7		       a5 8c		      LDA	FrameCount0	;3
   1257  f5e9		       29 04		      AND	#%00000100	;2
   1258  f5eb		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1259  f5ed		       18		      CLC		;2
   1260  f5ee		       a9 0a		      LDA	#10	;2
   1261  f5f0		       65 b8		      ADC	CountdownTimer	;2
   1262  f5f2		       85 18		      STA	AUDF1	;3
   1263  f5f4		       a9 0c		      LDA	#12	;2
   1264  f5f6		       85 16		      STA	AUDC1	;3
   1265  f5f8		       a9 03		      LDA	#3	;2
   1266  f5fa		       85 1a		      STA	AUDV1	;3
   1267  f5fc		       4c 03 f6 	      JMP	EndRightSound	;3
   1268  f5ff
   1269  f5ff				   MuteRightSound
   1270  f5ff		       a9 00		      LDA	#0
   1271  f601		       85 1a		      STA	AUDV1
   1272  f603				   EndRightSound
   1273  f603
   1274  f603							;Read Fire Button before, will make it start the game for now.
   1275  f603				   StartGame
   1276  f603		       a5 0c		      LDA	INPT4	;3
   1277  f605		       25 0d		      AND	INPT5	;3 player 
   1278  f607		       30 35		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1279  f609		       a5 8c		      LDA	FrameCount0
   1280  f60b		       29 01		      AND	#%00000001
   1281  f60d		       d0 2f		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1282  f60f		       a5 bd		      LDA	GameStatus	;3
   1283  f611		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1284  f613		       d0 29		      BNE	SkipGameStart
   1285  f615		       a5 c6		      LDA	GameMode
   1286  f617		       c9 10		      CMP	#MAX_GAME_MODE
   1287  f619		       d0 0b		      BNE	SetGameRunning
   1288  f61b		       a9 00		      LDA	#0
   1289  f61d		       85 c6		      STA	GameMode
   1290  f61f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1291  f621		       85 bc		      STA	SwitchDebounceCounter
   1292  f623		       4c 3e f6 	      JMP	SkipGameStart
   1293  f626				   SetGameRunning
   1294  f626		       e6 bd		      INC	GameStatus
   1295  f628		       a9 00		      LDA	#0	;
   1296  f62a		       85 8c		      STA	FrameCount0
   1297  f62c		       85 8d		      STA	FrameCount1
   1298  f62e		       a9 0a		      LDA	#10
   1299  f630		       85 19		      STA	AUDV0
   1300  f632		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1301  f634		       85 c9		      STA	ScoreFontColor
   1302  f636		       85 ca		      STA	OpScoreFontColor
   1303  f638		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1304  f63a		       85 cb		      STA	ScoreFontColorHoldChange
   1305  f63c		       85 cc		      STA	OpScoreFontColorHoldChange
   1306  f63e				   SkipGameStart
   1307  f63e
   1308  f63e				   ReadSwitches
   1309  f63e		       a6 bc		      LDX	SwitchDebounceCounter
   1310  f640		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1311  f642		       a9 01		      LDA	#%00000001
   1312  f644		       2c 82 02 	      BIT	SWCHB
   1313  f647		       d0 07		      BNE	SkipReset
   1314  f649		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1315  f64b		       85 bc		      STA	SwitchDebounceCounter
   1316  f64d		       4c 7d f6 	      JMP	OverScanWaitBeforeReset
   1317  f650				   SkipReset
   1318  f650
   1319  f650				   GameModeSelect
   1320  f650		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1321  f652		       d0 1c		      BNE	SkipGameSelect
   1322  f654		       20 d2 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1323  f657				   ContinueGameSelect
   1324  f657		       a9 02		      LDA	#%00000010
   1325  f659		       2c 82 02 	      BIT	SWCHB
   1326  f65c		       d0 12		      BNE	SkipGameSelect
   1327  f65e		       a6 c6		      LDX	GameMode
   1328  f660		       e0 10		      CPX	#MAX_GAME_MODE
   1329  f662		       f0 04		      BEQ	ResetGameMode
   1330  f664		       e8		      INX
   1331  f665		       4c 6a f6 	      JMP	StoreGameMode
   1332  f668				   ResetGameMode
   1333  f668		       a2 00		      LDX	#0
   1334  f66a				   StoreGameMode
   1335  f66a		       86 c6		      STX	GameMode
   1336  f66c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1337  f66e		       85 bc		      STA	SwitchDebounceCounter
   1338  f670				   SkipGameSelect
   1339  f670		       4c 75 f6 	      JMP	EndReadSwitches
   1340  f673				   DecrementSwitchDebounceCounter
   1341  f673		       c6 bc		      DEC	SwitchDebounceCounter
   1342  f675				   EndReadSwitches
   1343  f675
   1344  f675				   OverScanWait
   1345  f675		       ad 84 02 	      LDA	INTIM
   1346  f678		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1347  f67a		       4c cc f0 	      JMP	MainLoop
   1348  f67d
   1349  f67d				   OverScanWaitBeforeReset
   1350  f67d		       ad 84 02 	      LDA	INTIM
   1351  f680		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1352  f682		       4c 12 f0 	      JMP	Start
   1353  f685
   1354  f685				   Subroutines
   1355  f685
   1356  f685				   ClearAll		; 52
   1357  f685		       a9 00		      LDA	#0	;2
   1358  f687		       85 1c		      STA	GRP1	;3
   1359  f689		       85 1f		      STA	ENABL	;3
   1360  f68b		       85 1d		      STA	ENAM0	;3
   1361  f68d		       85 1e		      STA	ENAM1	;3
   1362  f68f		       85 84		      STA	GRP1Cache	;3
   1363  f691		       85 85		      STA	ENABLCache	;3
   1364  f693		       85 86		      STA	ENAM0Cache	;3
   1365  f695		       85 87		      STA	ENAM1Cache	;3
   1366  f697
   1367  f697				   ClearPF		; 26
   1368  f697		       a9 00		      LDA	#0	;2
   1369  f699				   ClearPFSkipLDA0
   1370  f699		       85 0d		      STA	PF0	;3
   1371  f69b		       85 0e		      STA	PF1	;3
   1372  f69d		       85 0f		      STA	PF2	;3	
   1373  f69f		       85 81		      STA	PF0Cache	;3
   1374  f6a1		       85 82		      STA	PF1Cache	;3
   1375  f6a3		       85 83		      STA	PF2Cache	;3 
   1376  f6a5		       60		      RTS		;6
   1377  f6a6				   EndClearAll
   1378  f6a6
   1379  f6a6				   LoadAll		; 48
   1380  f6a6		       a5 81		      LDA	PF0Cache	;3
   1381  f6a8		       85 0d		      STA	PF0	;3
   1382  f6aa
   1383  f6aa		       a5 82		      LDA	PF1Cache	;3
   1384  f6ac		       85 0e		      STA	PF1	;3
   1385  f6ae
   1386  f6ae		       a5 83		      LDA	PF2Cache	;3
   1387  f6b0		       85 0f		      STA	PF2	;3
   1388  f6b2
   1389  f6b2		       a5 84		      LDA	GRP1Cache	;3
   1390  f6b4		       85 1c		      STA	GRP1	;3
   1391  f6b6
   1392  f6b6		       a5 85		      LDA	ENABLCache	;3
   1393  f6b8		       85 1f		      STA	ENABL	;3
   1394  f6ba
   1395  f6ba		       a5 86		      LDA	ENAM0Cache	;3
   1396  f6bc		       85 1d		      STA	ENAM0	;3
   1397  f6be
   1398  f6be		       a5 87		      LDA	ENAM1Cache	;3
   1399  f6c0		       85 1e		      STA	ENAM1	;3
   1400  f6c2
   1401  f6c2		       60		      RTS		;6
   1402  f6c3				   EndLoadAll
   1403  f6c3
   1404  f6c3				   NextDifficulty
   1405  f6c3		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1406  f6c5		       29 01		      AND	#%00000001
   1407  f6c7		       d0 24		      BNE	CheckRandomDifficulty
   1408  f6c9
   1409  f6c9		       a5 c4		      LDA	CurrentDifficulty
   1410  f6cb		       18		      CLC
   1411  f6cc		       69 01		      ADC	#1
   1412  f6ce		       29 03		      AND	#%00000011	; 0 to 3
   1413  f6d0		       85 c4		      STA	CurrentDifficulty
   1414  f6d2
   1415  f6d2				   ConfigureDifficulty
   1416  f6d2		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1417  f6d4		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1418  f6d7		       85 be		      STA	TrafficChance
   1419  f6d9		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1420  f6dc		       85 c2		      STA	TrafficColor
   1421  f6de
   1422  f6de		       a5 c6		      LDA	GameMode	;
   1423  f6e0		       29 01		      AND	#%00000001
   1424  f6e2		       f0 03		      BEQ	UseNextDifficultyTime
   1425  f6e4		       4c e8 f6 	      JMP	StoreDifficultyTime
   1426  f6e7				   UseNextDifficultyTime
   1427  f6e7		       c8		      INY
   1428  f6e8				   StoreDifficultyTime
   1429  f6e8		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1430  f6eb		       85 c0		      STA	CheckpointTime
   1431  f6ed
   1432  f6ed				   CheckRandomDifficulty
   1433  f6ed		       a5 c6		      LDA	GameMode
   1434  f6ef		       29 08		      AND	#%00001000	; Random difficulties
   1435  f6f1		       f0 09		      BEQ	ReturnFromNextDifficulty
   1436  f6f3				   RandomDifficulty
   1437  f6f3		       a6 8c		      LDX	FrameCount0
   1438  f6f5		       bd 00 fe 	      LDA	AesTable,X
   1439  f6f8							;EOR TrafficChance, no need, lets make life simple
   1440  f6f8		       29 3f		      AND	#%00111111
   1441  f6fa		       85 be		      STA	TrafficChance
   1442  f6fc
   1443  f6fc				   ReturnFromNextDifficulty
   1444  f6fc		       60		      RTS
   1445  f6fd				   EndNextDifficulty
   1446  f6fd
   1447  f6fd				   DefaultOffsets
   1448  f6fd		       a9 20		      LDA	#$20
   1449  f6ff		       85 96		      STA	TrafficOffset1 + 2
   1450  f701		       85 a6		      STA	OpTrafficOffset1 + 2
   1451  f703		       a9 40		      LDA	#$40
   1452  f705		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1453  f707		       85 aa		      STA	OpTrafficOffset2 + 2
   1454  f709		       a9 60		      LDA	#$60
   1455  f70b		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1456  f70d		       85 ae		      STA	OpTrafficOffset3 + 2
   1457  f70f		       a9 80		      LDA	#$80
   1458  f711		       60		      RTS
   1459  f712
   1460  f712				   PrintStaticText		; Preload X with the offset referent to StaticText
   1461  f712		       bd 00 ff 	      LDA	StaticText,X
   1462  f715		       85 d0		      STA	ScoreD0
   1463  f717		       e8		      INX
   1464  f718		       bd 00 ff 	      LDA	StaticText,X
   1465  f71b		       85 d1		      STA	ScoreD1
   1466  f71d		       e8		      INX
   1467  f71e		       bd 00 ff 	      LDA	StaticText,X
   1468  f721		       85 d2		      STA	ScoreD2
   1469  f723		       e8		      INX
   1470  f724		       bd 00 ff 	      LDA	StaticText,X
   1471  f727		       85 d3		      STA	ScoreD3
   1472  f729		       e8		      INX
   1473  f72a		       bd 00 ff 	      LDA	StaticText,X
   1474  f72d		       85 d4		      STA	ScoreD4
   1475  f72f		       60		      RTS
   1476  f730
   1477  f730				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1478  f730		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1479  f732		       85 c9		      STA	ScoreFontColor
   1480  f734		       a9 01		      LDA	#1
   1481  f736		       85 cb		      STA	ScoreFontColorHoldChange
   1482  f738
   1483  f738		       a5 8d		      LDA	FrameCount1
   1484  f73a		       29 07		      AND	#%00000111
   1485  f73c		       85 b3		      STA	Tmp3
   1486  f73e							;0 is Zelda Name, (default)
   1487  f73e		       a9 01		      LDA	#1
   1488  f740		       c5 b3		      CMP	Tmp3
   1489  f742		       f0 38		      BEQ	PrintZeldaDateLeft
   1490  f744
   1491  f744		       a9 02		      LDA	#2
   1492  f746		       c5 b3		      CMP	Tmp3
   1493  f748		       f0 23		      BEQ	PrintPolvinhosLeft
   1494  f74a
   1495  f74a		       a9 03		      LDA	#3
   1496  f74c		       c5 b3		      CMP	Tmp3
   1497  f74e		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1498  f750
   1499  f750		       a9 04		      LDA	#4
   1500  f752		       c5 b3		      CMP	Tmp3
   1501  f754		       f0 1c		      BEQ	PrintIvonneLeft
   1502  f756
   1503  f756		       a9 05		      LDA	#5
   1504  f758		       c5 b3		      CMP	Tmp3
   1505  f75a		       f0 2a		      BEQ	PrintIvonneDateLeft
   1506  f75c
   1507  f75c		       a9 06		      LDA	#6
   1508  f75e		       c5 b3		      CMP	Tmp3
   1509  f760		       f0 15		      BEQ	PrintArtLeft
   1510  f762
   1511  f762		       a9 07		      LDA	#7
   1512  f764		       c5 b3		      CMP	Tmp3
   1513  f766		       f0 23		      BEQ	PrintLeonardoLeft
   1514  f768
   1515  f768				   PrintZeldaLeft
   1516  f768		       a2 28		      LDX	#<ZeldaTextLeft
   1517  f76a		       4c 90 f7 	      JMP	ProcessPrintEasterEgg
   1518  f76d				   PrintPolvinhosLeft
   1519  f76d		       a2 3c		      LDX	#<PolvinhosTextLeft
   1520  f76f		       4c 90 f7 	      JMP	ProcessPrintEasterEgg
   1521  f772				   PrintIvonneLeft
   1522  f772		       a2 50		      LDX	#<IvonneTextLeft
   1523  f774		       4c 90 f7 	      JMP	ProcessPrintEasterEgg
   1524  f777				   PrintArtLeft
   1525  f777		       a2 64		      LDX	#<PaperArtTextLeft
   1526  f779		       4c 90 f7 	      JMP	ProcessPrintEasterEgg
   1527  f77c
   1528  f77c				   PrintZeldaDateLeft
   1529  f77c		       a2 32		      LDX	#<ZeldaDateLeft
   1530  f77e		       4c 90 f7 	      JMP	ProcessPrintEasterEgg
   1531  f781				   PrintPolvinhosDateLeft
   1532  f781		       a2 46		      LDX	#<PolvinhosDateLeft
   1533  f783		       4c 90 f7 	      JMP	ProcessPrintEasterEgg
   1534  f786				   PrintIvonneDateLeft
   1535  f786		       a2 5a		      LDX	#<IvonneDateLeft
   1536  f788		       4c 90 f7 	      JMP	ProcessPrintEasterEgg
   1537  f78b				   PrintLeonardoLeft
   1538  f78b		       a2 6e		      LDX	#<LeonardoTextLeft
   1539  f78d		       4c 90 f7 	      JMP	ProcessPrintEasterEgg
   1540  f790
   1541  f790				   ProcessPrintEasterEgg
   1542  f790		       a5 8c		      LDA	FrameCount0	;3
   1543  f792		       29 01		      AND	#%00000001	;2
   1544  f794		       d0 03		      BNE	TranformIntoRightText
   1545  f796		       4c 9e f7 	      JMP	PrintEasterEggText
   1546  f799				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1547  f799		       8a		      TXA
   1548  f79a		       18		      CLC
   1549  f79b		       69 05		      ADC	#HALF_TEXT_SIZE
   1550  f79d		       aa		      TAX
   1551  f79e
   1552  f79e				   PrintEasterEggText
   1553  f79e		       20 12 f7 	      JSR	PrintStaticText
   1554  f7a1		       60		      RTS
   1555  f7a2
   1556  f7a2				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1557  f7a2		       a2 00		      LDX	#0
   1558  f7a4		       a0 04		      LDY	#FONT_OFFSET
   1559  f7a6
   1560  f7a6				   ScoreLoop		; 20 
   1561  f7a6		       85 02		      STA	WSYNC	;2
   1562  f7a8
   1563  f7a8		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1564  f7aa		       85 0d		      STA	PF0	;3
   1565  f7ac
   1566  f7ac		       a5 82		      LDA	PF1Cache	;3
   1567  f7ae		       85 0e		      STA	PF1	;3
   1568  f7b0
   1569  f7b0		       a5 83		      LDA	PF2Cache	;3
   1570  f7b2		       85 0f		      STA	PF2	;3
   1571  f7b4
   1572  f7b4				   DrawScoreD0		; 15
   1573  f7b4		       a6 d0		      LDX	ScoreD0	; 3
   1574  f7b6		       bd 00 fd 	      LDA	Font,X	;4
   1575  f7b9		       85 81		      STA	PF0Cache	;3
   1576  f7bb		       c6 d0		      DEC	ScoreD0	;5
   1577  f7bd
   1578  f7bd				   DrawScoreD1		; 23	
   1579  f7bd		       a6 d1		      LDX	ScoreD1	; 3
   1580  f7bf		       bd 00 fd 	      LDA	Font,X	;4
   1581  f7c2		       0a		      ASL		;2
   1582  f7c3		       0a		      ASL		;2
   1583  f7c4		       0a		      ASL		;2
   1584  f7c5		       0a		      ASL		;2
   1585  f7c6		       85 82		      STA	PF1Cache	;3
   1586  f7c8		       c6 d1		      DEC	ScoreD1	;5
   1587  f7ca
   1588  f7ca				   DrawScoreD2		; 20
   1589  f7ca		       a6 d2		      LDX	ScoreD2	; 3
   1590  f7cc		       bd 00 fd 	      LDA	Font,X	;4
   1591  f7cf		       29 0f		      AND	#%00001111	;2
   1592  f7d1		       05 82		      ORA	PF1Cache	;3
   1593  f7d3		       85 82		      STA	PF1Cache	;3
   1594  f7d5		       c6 d2		      DEC	ScoreD2	;5
   1595  f7d7
   1596  f7d7				   DrawScoreD3		; 23
   1597  f7d7		       a6 d3		      LDX	ScoreD3	; 3
   1598  f7d9		       bd 00 fd 	      LDA	Font,X	;4
   1599  f7dc		       4a		      LSR		;2
   1600  f7dd		       4a		      LSR		;2
   1601  f7de		       4a		      LSR		;2
   1602  f7df		       4a		      LSR		;2
   1603  f7e0		       85 83		      STA	PF2Cache	;3
   1604  f7e2		       c6 d3		      DEC	ScoreD3	;5
   1605  f7e4
   1606  f7e4				   DrawScoreD4		; 20
   1607  f7e4		       a6 d4		      LDX	ScoreD4	; 3
   1608  f7e6		       bd 00 fd 	      LDA	Font,X	;4
   1609  f7e9		       29 f0		      AND	#%11110000	;2
   1610  f7eb		       05 83		      ORA	PF2Cache	;3
   1611  f7ed		       85 83		      STA	PF2Cache	;3
   1612  f7ef		       c6 d4		      DEC	ScoreD4	;5
   1613  f7f1
   1614  f7f1
   1615  f7f1		       88		      DEY		;2
   1616  f7f2		       10 b2		      BPL	ScoreLoop	;4
   1617  f7f4
   1618  f7f4		       85 02		      STA	WSYNC
   1619  f7f6		       20 a6 f6 	      JSR	LoadAll
   1620  f7f9		       60		      RTS		; 6
   1621  f7fa
   1622  f7fa				   PrintRightDecimalDigits
   1623  f7fa		       b9 00 00 	      LDA	0,Y
   1624  f7fd		       4a		      LSR
   1625  f7fe		       4a		      LSR
   1626  f7ff		       4a		      LSR
   1627  f800		       4a		      LSR
   1628  f801		       aa		      TAX
   1629  f802		       bd be fd 	      LDA	FontLookup,X	;4
   1630  f805		       85 d2		      STA	ScoreD2	;3
   1631  f807
   1632  f807		       b9 00 00 	      LDA	0,Y
   1633  f80a		       29 0f		      AND	#%00001111
   1634  f80c		       aa		      TAX
   1635  f80d		       bd be fd 	      LDA	FontLookup,X	;4
   1636  f810		       85 d3		      STA	ScoreD3	;3
   1637  f812
   1638  f812		       c8		      INY
   1639  f813		       b9 00 00 	      LDA	0,Y
   1640  f816		       4a		      LSR
   1641  f817		       4a		      LSR
   1642  f818		       4a		      LSR
   1643  f819		       4a		      LSR
   1644  f81a		       aa		      TAX
   1645  f81b		       bd be fd 	      LDA	FontLookup,X	;4
   1646  f81e		       85 d0		      STA	ScoreD0	;3
   1647  f820
   1648  f820		       b9 00 00 	      LDA	0,Y
   1649  f823		       29 0f		      AND	#%00001111
   1650  f825		       aa		      TAX
   1651  f826		       bd be fd 	      LDA	FontLookup,X	;4
   1652  f829		       85 d1		      STA	ScoreD1	;3
   1653  f82b
   1654  f82b		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1655  f82d		       85 d4		      STA	ScoreD4
   1656  f82f		       60		      RTS
   1657  f830
   1658  f830				   PrintLastLeftDecimalDigits
   1659  f830		       b9 00 00 	      LDA	0,Y
   1660  f833		       4a		      LSR
   1661  f834		       4a		      LSR
   1662  f835		       4a		      LSR
   1663  f836		       4a		      LSR
   1664  f837		       aa		      TAX
   1665  f838		       bd be fd 	      LDA	FontLookup,X	;4
   1666  f83b		       85 d3		      STA	ScoreD3	;3
   1667  f83d		       b9 00 00 	      LDA	0,Y
   1668  f840		       29 0f		      AND	#%00001111
   1669  f842		       aa		      TAX
   1670  f843		       bd be fd 	      LDA	FontLookup,X	;4
   1671  f846		       85 d4		      STA	ScoreD4	;3
   1672  f848		       60		      RTS
   1673  f849
   1674  f849				   PrintZerosLeft
   1675  f849		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1676  f84b		       85 d2		      STA	ScoreD2
   1677  f84d		       85 d3		      STA	ScoreD3
   1678  f84f		       85 d4		      STA	ScoreD4
   1679  f851		       60		      RTS
   1680  f852
   1681  f852				   DrawGameOverScoreLine
   1682  f852		       85 02		      STA	WSYNC
   1683  f854		       20 a2 f7 	      JSR	PrintScore
   1684  f857		       85 02		      STA	WSYNC
   1685  f859		       85 02		      STA	WSYNC
   1686  f85b		       20 97 f6 	      JSR	ClearPF
   1687  f85e		       60		      RTS
   1688  f85f
   1689  f85f				   DrawGameOverScreenLeft
   1690  f85f		       85 02		      STA	WSYNC
   1691  f861		       20 97 f6 	      JSR	ClearPF
   1692  f864
   1693  f864				   DrawGlideTimerLeft
   1694  f864		       20 26 f9 	      JSR	Sleep8Lines
   1695  f867		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1696  f869		       85 06		      STA	COLUP0
   1697  f86b		       85 02		      STA	WSYNC
   1698  f86d		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1699  f86f		       85 d0		      STA	ScoreD0
   1700  f871		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1701  f873		       85 d1		      STA	ScoreD1
   1702  f875		       20 49 f8 	      JSR	PrintZerosLeft
   1703  f878		       20 52 f8 	      JSR	DrawGameOverScoreLine
   1704  f87b
   1705  f87b				   DrawHitCountLeft
   1706  f87b		       20 26 f9 	      JSR	Sleep8Lines
   1707  f87e		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1708  f880		       85 06		      STA	COLUP0
   1709  f882		       85 02		      STA	WSYNC
   1710  f884		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1711  f886		       85 d0		      STA	ScoreD0
   1712  f888		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1713  f88a		       85 d1		      STA	ScoreD1
   1714  f88c		       20 49 f8 	      JSR	PrintZerosLeft
   1715  f88f		       20 52 f8 	      JSR	DrawGameOverScoreLine
   1716  f892
   1717  f892				   DrawCheckpointCountLeft
   1718  f892		       20 26 f9 	      JSR	Sleep8Lines
   1719  f895		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1720  f897		       85 06		      STA	COLUP0
   1721  f899		       85 02		      STA	WSYNC
   1722  f89b		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1723  f89d		       85 d0		      STA	ScoreD0
   1724  f89f		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1725  f8a1		       85 d1		      STA	ScoreD1
   1726  f8a3		       20 49 f8 	      JSR	PrintZerosLeft
   1727  f8a6		       20 52 f8 	      JSR	DrawGameOverScoreLine
   1728  f8a9
   1729  f8a9				   DrawGameVersionLeft
   1730  f8a9		       20 26 f9 	      JSR	Sleep8Lines
   1731  f8ac		       a9 49		      LDA	#VERSION_COLOR
   1732  f8ae		       85 06		      STA	COLUP0
   1733  f8b0
   1734  f8b0		       a5 c6		      LDA	GameMode
   1735  f8b2		       aa		      TAX
   1736  f8b3		       bd be fd 	      LDA	FontLookup,X	;4
   1737  f8b6		       85 d0		      STA	ScoreD0	;3
   1738  f8b8
   1739  f8b8		       a5 c7		      LDA	CurrentCarId
   1740  f8ba		       aa		      TAX
   1741  f8bb		       bd be fd 	      LDA	FontLookup,X	;4
   1742  f8be		       85 d1		      STA	ScoreD1	;3
   1743  f8c0
   1744  f8c0		       a5 db		      LDA	StartSWCHB
   1745  f8c2		       29 40		      AND	#%01000000	; P0 difficulty
   1746  f8c4		       49 40		      EOR	#%01000000	; Reverse bytes
   1747  f8c6		       2a		      ROL
   1748  f8c7		       2a		      ROL
   1749  f8c8		       2a		      ROL
   1750  f8c9		       18		      CLC
   1751  f8ca		       69 0a		      ADC	#10
   1752  f8cc		       aa		      TAX
   1753  f8cd		       bd be fd 	      LDA	FontLookup,X	;4
   1754  f8d0		       85 d2		      STA	ScoreD2	;3
   1755  f8d2
   1756  f8d2		       a5 db		      LDA	StartSWCHB
   1757  f8d4		       29 80		      AND	#%10000000	; P0 difficulty
   1758  f8d6		       49 80		      EOR	#%10000000	; Reverse bytes
   1759  f8d8		       2a		      ROL
   1760  f8d9		       2a		      ROL
   1761  f8da		       18		      CLC
   1762  f8db		       69 0a		      ADC	#10
   1763  f8dd		       aa		      TAX
   1764  f8de		       bd be fd 	      LDA	FontLookup,X	;4
   1765  f8e1		       85 d3		      STA	ScoreD3	;3
   1766  f8e3
   1767  f8e3		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1768  f8e5		       85 d4		      STA	ScoreD4
   1769  f8e7
   1770  f8e7		       20 52 f8 	      JSR	DrawGameOverScoreLine
   1771  f8ea
   1772  f8ea		       4c 03 f9 	      JMP	FinalizeDrawGameOver
   1773  f8ed
   1774  f8ed				   DrawGameOverScreenRight
   1775  f8ed		       85 02		      STA	WSYNC
   1776  f8ef		       20 97 f6 	      JSR	ClearPF
   1777  f8f2
   1778  f8f2				   DrawVersionRight
   1779  f8f2		       20 26 f9 	      JSR	Sleep8Lines
   1780  f8f5		       a9 49		      LDA	#VERSION_COLOR
   1781  f8f7		       85 07		      STA	COLUP1
   1782  f8f9		       85 02		      STA	WSYNC
   1783  f8fb		       a2 78		      LDX	#<VersionText
   1784  f8fd		       20 12 f7 	      JSR	PrintStaticText
   1785  f900		       20 52 f8 	      JSR	DrawGameOverScoreLine
   1786  f903
   1787  f903				   FinalizeDrawGameOver
   1788  f903		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1789  f905		       85 c9		      STA	ScoreFontColor
   1790  f907		       20 1d f9 	      JSR	Sleep4Lines
   1791  f90a		       20 2d f9 	      JSR	Sleep32Lines
   1792  f90d		       20 2d f9 	      JSR	Sleep32Lines
   1793  f910		       4c 61 f5 	      JMP	PrepareOverscan
   1794  f913
   1795  f913				   WaitForVblankEnd
   1796  f913		       ad 84 02 	      LDA	INTIM
   1797  f916		       d0 fb		      BNE	WaitForVblankEnd
   1798  f918		       85 02		      STA	WSYNC
   1799  f91a		       85 01		      STA	VBLANK
   1800  f91c		       60		      RTS
   1801  f91d
   1802  f91d				   Sleep4Lines
   1803  f91d		       85 02		      STA	WSYNC
   1804  f91f		       85 02		      STA	WSYNC
   1805  f921		       85 02		      STA	WSYNC
   1806  f923		       85 02		      STA	WSYNC
   1807  f925		       60		      RTS
   1808  f926
   1809  f926				   Sleep8Lines
   1810  f926		       20 1d f9 	      JSR	Sleep4Lines
   1811  f929		       20 1d f9 	      JSR	Sleep4Lines
   1812  f92c		       60		      RTS
   1813  f92d
   1814  f92d				   Sleep32Lines
   1815  f92d		       20 26 f9 	      JSR	Sleep8Lines
   1816  f930		       20 26 f9 	      JSR	Sleep8Lines
   1817  f933		       20 26 f9 	      JSR	Sleep8Lines
   1818  f936		       20 26 f9 	      JSR	Sleep8Lines
   1819  f939		       60		      RTS
   1820  f93a
   1821  f93a				   ConfigureCarSprites
   1822  f93a		       a5 8c		      LDA	FrameCount0
   1823  f93c		       29 01		      AND	#%00000001
   1824  f93e		       d0 0b		      BNE	LoadForRightScreenSprites
   1825  f940				   LoadForLeftScreenSprites
   1826  f940		       a5 c7		      LDA	CurrentCarId
   1827  f942		       85 b0		      STA	Tmp0
   1828  f944		       a5 c8		      LDA	OpCurrentCarId
   1829  f946		       85 b1		      STA	Tmp1
   1830  f948		       4c 53 f9 	      JMP	LoadCarSpritesFromIds
   1831  f94b				   LoadForRightScreenSprites
   1832  f94b		       a5 c7		      LDA	CurrentCarId
   1833  f94d		       85 b1		      STA	Tmp1
   1834  f94f		       a5 c8		      LDA	OpCurrentCarId
   1835  f951		       85 b0		      STA	Tmp0
   1836  f953
   1837  f953				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1838  f953		       a4 b0		      LDY	Tmp0
   1839  f955		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1840  f958		       85 d7		      STA	CarSpritePointerL
   1841  f95a		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1842  f95d		       85 d8		      STA	CarSpritePointerH
   1843  f95f				   ConfigureOpponentCarSprite
   1844  f95f		       a4 b1		      LDY	Tmp1
   1845  f961		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1846  f964		       85 d9		      STA	EnemyCarSpritePointerL
   1847  f966		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1848  f969		       85 da		      STA	EnemyCarSpritePointerH
   1849  f96b		       60		      RTS
   1850  f96c
   1851  f96c							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1852  f96c							;X player 0 or 1
   1853  f96c				   SelectCarWithDpad
   1854  f96c		       a0 03		      LDY	#3
   1855  f96e				   SelectCarWithDpadLoop
   1856  f96e		       ad 80 02 	      LDA	SWCHA
   1857  f971		       25 b0		      AND	Tmp0
   1858  f973		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1859  f975		       98		      TYA
   1860  f976		       95 c7		      STA	CurrentCarId,X
   1861  f978				   ContinueSelectCarWithDpadLoop
   1862  f978		       46 b0		      LSR	Tmp0
   1863  f97a		       88		      DEY
   1864  f97b		       10 f1		      BPL	SelectCarWithDpadLoop
   1865  f97d		       60		      RTS
   1866  f97e
   1867  f97e							; Movement and colision are binded because the car must be moved after duplicate size.
   1868  f97e							; Use X for the player
   1869  f97e							; Tmp0 SWCHA Turn left Mask
   1870  f97e							; Tmp1 SWCHA Turn right Mask
   1871  f97e							; Tmp2 Traffic colision result
   1872  f97e							; Tmp3 Opponent Colision result (Not implemented)
   1873  f97e				   TestCollisionAndMove
   1874  f97e							; Until store the movemnt, Y contains the value to be stored.
   1875  f97e							; see if player0 colides with the rest
   1876  f97e		       a5 b2		      LDA	Tmp2
   1877  f980		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1878  f982		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1879  f984		       d0 25		      BNE	NoCollision
   1880  f986		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1881  f988		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1882  f98a		       f0 1f		      BEQ	NoCollision
   1883  f98c		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1884  f98e		       f0 1b		      BEQ	NoCollision
   1885  f990		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1886  f992		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1887  f994		       b5 f2		      LDA	Player0SpeedH,X
   1888  f996		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1889  f998		       a9 10		      LDA	#COLLISION_SPEED_L
   1890  f99a		       d5 f0		      CMP	Player0SpeedL,X
   1891  f99c		       b0 04		      BCS	SkipSetColisionSpeedL
   1892  f99e				   SetColisionSpeedL
   1893  f99e		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1894  f9a0		       95 f0		      STA	Player0SpeedL,X
   1895  f9a2				   SkipSetColisionSpeedL
   1896  f9a2		       a9 00		      LDA	#0
   1897  f9a4		       95 f2		      STA	Player0SpeedH,X
   1898  f9a6		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1899  f9a8		       4c f9 f9 	      JMP	StoreHMove	; We keep position consistent
   1900  f9ab				   NoCollision
   1901  f9ab
   1902  f9ab				   DecrementCollision
   1903  f9ab		       b5 8e		      LDA	CollisionCounter,X
   1904  f9ad		       f0 06		      BEQ	FinishDecrementCollision
   1905  f9af		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1906  f9b1		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1907  f9b3		       d6 8e		      DEC	CollisionCounter,X
   1908  f9b5				   FinishDecrementCollision
   1909  f9b5
   1910  f9b5				   ResetPlayerSize
   1911  f9b5		       d0 04		      BNE	FinishResetPlayerSize
   1912  f9b7		       a9 30		      LDA	#%00110000
   1913  f9b9		       95 04		      STA	NUSIZ0,X	;
   1914  f9bb				   FinishResetPlayerSize
   1915  f9bb
   1916  f9bb				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1917  f9bb		       b5 8e		      LDA	CollisionCounter,X
   1918  f9bd		       c9 01		      CMP	#1	; Last frame before reset
   1919  f9bf		       d0 05		      BNE	SkipResetPlayerPosition
   1920  f9c1		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1921  f9c3		       4c f9 f9 	      JMP	StoreHMove
   1922  f9c6				   SkipResetPlayerPosition
   1923  f9c6
   1924  f9c6				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1925  f9c6		       b5 c7		      LDA	CurrentCarId,X
   1926  f9c8		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1927  f9ca		       d0 08		      BNE	PrepareReadXAxis
   1928  f9cc		       a0 00		      LDY	#0
   1929  f9ce		       a5 8c		      LDA	FrameCount0
   1930  f9d0		       29 01		      AND	#DRAGSTER_TURN_MASK
   1931  f9d2		       f0 25		      BEQ	StoreHMove	; Ignore movement on some frames
   1932  f9d4
   1933  f9d4				   PrepareReadXAxis
   1934  f9d4		       a0 00		      LDY	#0
   1935  f9d6		       b5 b6		      LDA	Player0X,X
   1936  f9d8				   BeginReadLeft
   1937  f9d8		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
   1938  f9da		       a5 b0		      LDA	Tmp0	;Left mask set before call (player 0 or 1)
   1939  f9dc		       2c 80 02 	      BIT	SWCHA
   1940  f9df		       d0 07		      BNE	SkipMoveLeft
   1941  f9e1		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1942  f9e3		       d6 b6		      DEC	Player0X,X
   1943  f9e5		       4c f9 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1944  f9e8				   SkipMoveLeft
   1945  f9e8				   BeginReadRight
   1946  f9e8		       b5 b6		      LDA	Player0X,X
   1947  f9ea		       c9 2c		      CMP	#PLAYER_MAX_X
   1948  f9ec		       f0 0b		      BEQ	SkipMoveRight	; At max already
   1949  f9ee		       a5 b1		      LDA	Tmp1	;Right mask set before call (player 0 or 1)
   1950  f9f0		       2c 80 02 	      BIT	SWCHA
   1951  f9f3		       d0 04		      BNE	SkipMoveRight
   1952  f9f5		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1953  f9f7		       f6 b6		      INC	Player0X,X
   1954  f9f9				   SkipMoveRight
   1955  f9f9				   StoreHMove
   1956  f9f9		       94 20		      STY	HMP0,X	;set the move for player 0
   1957  f9fb
   1958  f9fb				   ClearCollision
   1959  f9fb		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1960  f9fd		       60		      RTS
   1961  f9fe
   1962  f9fe							; X Traffic offset 4 bits each lane, 4 lanes per player
   1963  f9fe							; Tmp3 Max X offset
   1964  f9fe							; Tmp4 Max Player Speed L
   1965  f9fe							; Tmp5 Max Player Speed H
   1966  f9fe				   UpdateOffsets
   1967  f9fe		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1968  fa00		       a5 c6		      LDA	GameMode
   1969  fa02		       29 04		      AND	#%00000100	; GameModes with high delta
   1970  fa04		       f0 02		      BEQ	UpdateOffsetsLoop
   1971  fa06		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1972  fa08
   1973  fa08				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1974  fa08		       38		      SEC
   1975  fa09		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1976  fa0b		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1977  fa0e		       85 b0		      STA	Tmp0
   1978  fa10		       c8		      INY
   1979  fa11		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1980  fa13		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1981  fa16		       85 b1		      STA	Tmp1
   1982  fa18		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1983  fa1a		       e9 00		      SBC	#0
   1984  fa1c		       85 b2		      STA	Tmp2
   1985  fa1e
   1986  fa1e				   AddsTheResult
   1987  fa1e		       18		      CLC
   1988  fa1f		       a5 b0		      LDA	Tmp0
   1989  fa21		       75 90		      ADC	TrafficOffset0,X
   1990  fa23		       95 90		      STA	TrafficOffset0,X
   1991  fa25		       e8		      INX
   1992  fa26		       a5 b1		      LDA	Tmp1
   1993  fa28		       75 90		      ADC	TrafficOffset0,X
   1994  fa2a		       95 90		      STA	TrafficOffset0,X
   1995  fa2c		       e8		      INX
   1996  fa2d		       a5 b2		      LDA	Tmp2	; Carry
   1997  fa2f		       75 90		      ADC	TrafficOffset0,X
   1998  fa31		       95 90		      STA	TrafficOffset0,X
   1999  fa33		       90 0f		      BCC	CalculateOffsetCache
   2000  fa35				   CalculatePlayer0Msb
   2001  fa35		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   2002  fa37		       d0 05		      BNE	CalculatePlayer1Msb
   2003  fa39		       e6 ba		      INC	Traffic0Msb
   2004  fa3b		       4c 44 fa 	      JMP	CalculateOffsetCache
   2005  fa3e				   CalculatePlayer1Msb
   2006  fa3e		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   2007  fa40		       d0 02		      BNE	CalculateOffsetCache
   2008  fa42		       e6 bb		      INC	OpTraffic0Msb
   2009  fa44
   2010  fa44				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   2011  fa44		       e8		      INX
   2012  fa45		       38		      SEC
   2013  fa46		       69 00		      ADC	#0	;Increment by one
   2014  fa48		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   2015  fa4a
   2016  fa4a				   PrepareNextUpdateLoop
   2017  fa4a		       c8		      INY
   2018  fa4b		       e8		      INX
   2019  fa4c		       e4 b3		      CPX	Tmp3	; Max X offset
   2020  fa4e		       d0 b8		      BNE	UpdateOffsetsLoop
   2021  fa50		       60		      RTS
   2022  fa51
   2023  fa51							; X Player 0 or 1
   2024  fa51							; Tmp1 Down SWCHA mask
   2025  fa51							; Tmp2 Up SWCHA mask
   2026  fa51				   ProcessSpeed
   2027  fa51				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2028  fa51		       a9 00		      LDA	#0
   2029  fa53		       85 b0		      STA	Tmp0	; Break speed
   2030  fa55		       b5 b8		      LDA	CountdownTimer,X
   2031  fa57		       d0 0d		      BNE	Break
   2032  fa59		       b4 c7		      LDY	CurrentCarId,X
   2033  fa5b		       a5 8c		      LDA	FrameCount0
   2034  fa5d		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2035  fa60		       d0 04		      BNE	Break
   2036  fa62		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2037  fa64		       85 b0		      STA	Tmp0
   2038  fa66
   2039  fa66				   Break
   2040  fa66		       bd cf fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2041  fa69		       2c 80 02 	      BIT	SWCHA
   2042  fa6c		       d0 12		      BNE	BreakNonZero
   2043  fa6e		       b5 0c		      LDA	INPT4,X	;3
   2044  fa70		       10 0a		      BPL	BreakWhileAccelerating
   2045  fa72		       b4 d5		      LDY	Gear,X
   2046  fa74		       b9 e9 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2047  fa77		       85 b0		      STA	Tmp0
   2048  fa79		       4c 80 fa 	      JMP	BreakNonZero
   2049  fa7c				   BreakWhileAccelerating		; Allow better control while breaking.
   2050  fa7c		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2051  fa7e		       85 b0		      STA	Tmp0
   2052  fa80
   2053  fa80				   BreakNonZero
   2054  fa80		       a5 b0		      LDA	Tmp0
   2055  fa82		       f0 29		      BEQ	SkipBreak
   2056  fa84
   2057  fa84				   DecreaseSpeed
   2058  fa84		       38		      SEC
   2059  fa85		       b5 f0		      LDA	Player0SpeedL,X
   2060  fa87		       e5 b0		      SBC	Tmp0
   2061  fa89		       95 f0		      STA	Player0SpeedL,X
   2062  fa8b		       b5 f2		      LDA	Player0SpeedH,X
   2063  fa8d		       e9 00		      SBC	#0
   2064  fa8f		       95 f2		      STA	Player0SpeedH,X
   2065  fa91
   2066  fa91				   CheckMinSpeed
   2067  fa91		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2068  fa93		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2069  fa95		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2070  fa97		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2071  fa99
   2072  fa99				   CompareLBreakSpeed
   2073  fa99		       b5 f0		      LDA	Player0SpeedL,X
   2074  fa9b		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2075  fa9d		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2076  fa9f		       4c aa fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2077  faa2
   2078  faa2				   ResetMinSpeed
   2079  faa2		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2080  faa4		       95 f2		      STA	Player0SpeedH,X
   2081  faa6		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2082  faa8		       95 f0		      STA	Player0SpeedL,X
   2083  faaa
   2084  faaa				   SkipAccelerateIfBreaking
   2085  faaa		       4c f3 fa 	      JMP	SkipAccelerate
   2086  faad				   SkipBreak
   2087  faad
   2088  faad				   Acelerates
   2089  faad		       b5 b8		      LDA	CountdownTimer,X
   2090  faaf		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2091  fab1
   2092  fab1				   ContinueAccelerateTest
   2093  fab1		       b5 0c		      LDA	INPT4,X	;3
   2094  fab3		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2095  fab5		       bd cd fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2096  fab8		       2c 80 02 	      BIT	SWCHA
   2097  fabb		       d0 36		      BNE	SkipAccelerate
   2098  fabd
   2099  fabd				   IncreaseCarSpeed
   2100  fabd		       a9 02		      LDA	#2
   2101  fabf		       85 b0		      STA	Tmp0	; Loop control
   2102  fac1		       b4 c7		      LDY	CurrentCarId,X
   2103  fac3				   IncreaseCarSpeedLoop
   2104  fac3							;Adds speed
   2105  fac3		       18		      CLC
   2106  fac4		       b5 dc		      LDA	AccelerateBuffer,X
   2107  fac6		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
   2108  fac9		       95 dc		      STA	AccelerateBuffer,X
   2109  facb		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2110  facd		       f6 f0		      INC	Player0SpeedL,X
   2111  facf		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2112  fad1		       f6 f2		      INC	Player0SpeedH,X
   2113  fad3				   ContinueIncreaseSpeedLoop
   2114  fad3		       c6 b0		      DEC	Tmp0
   2115  fad5		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2116  fad7				   SkipIncreaseCarSpeed
   2117  fad7
   2118  fad7				   CheckIfAlreadyMaxSpeed
   2119  fad7		       b5 f2		      LDA	Player0SpeedH,X
   2120  fad9		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2121  fadb		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2122  fadd		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2123  fadf							;High bit is max, compare the low
   2124  fadf		       b4 c7		      LDY	CurrentCarId,X
   2125  fae1		       b5 f0		      LDA	Player0SpeedL,X
   2126  fae3		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
   2127  fae6		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2128  fae8							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2129  fae8
   2130  fae8				   ResetToMaxSpeed		; Speed is more, or is already max
   2131  fae8		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2132  faea		       95 f2		      STA	Player0SpeedH,X
   2133  faec		       b4 c7		      LDY	CurrentCarId,X
   2134  faee		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
   2135  faf1		       95 f0		      STA	Player0SpeedL,X
   2136  faf3				   SkipAccelerate
   2137  faf3		       60		      RTS
   2138  faf4
   2139  faf4							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2140  fc00					      org	$FC00
   2141  fc00				   QrCode1
   2142  fc00		       1f		      .byte.b	#%00011111
   2143  fc01		       10		      .byte.b	#%00010000
   2144  fc02		       17		      .byte.b	#%00010111
   2145  fc03		       17		      .byte.b	#%00010111
   2146  fc04		       17		      .byte.b	#%00010111
   2147  fc05		       10		      .byte.b	#%00010000
   2148  fc06		       1f		      .byte.b	#%00011111
   2149  fc07		       00		      .byte.b	#%00000000
   2150  fc08		       17		      .byte.b	#%00010111
   2151  fc09		       10		      .byte.b	#%00010000
   2152  fc0a		       1d		      .byte.b	#%00011101
   2153  fc0b		       16		      .byte.b	#%00010110
   2154  fc0c		       03		      .byte.b	#%00000011
   2155  fc0d		       19		      .byte.b	#%00011001
   2156  fc0e		       13		      .byte.b	#%00010011
   2157  fc0f		       1c		      .byte.b	#%00011100
   2158  fc10		       0b		      .byte.b	#%00001011
   2159  fc11		       00		      .byte.b	#%00000000
   2160  fc12		       1f		      .byte.b	#%00011111
   2161  fc13		       10		      .byte.b	#%00010000
   2162  fc14		       17		      .byte.b	#%00010111
   2163  fc15		       17		      .byte.b	#%00010111
   2164  fc16		       17		      .byte.b	#%00010111
   2165  fc17		       10		      .byte.b	#%00010000
   2166  fc18		       1f		      .byte.b	#%00011111
   2167  fc19
   2168  fc19				   QrCode2
   2169  fc19		       c3		      .byte.b	#%11000011
   2170  fc1a		       9a		      .byte.b	#%10011010
   2171  fc1b		       82		      .byte.b	#%10000010
   2172  fc1c		       da		      .byte.b	#%11011010
   2173  fc1d		       aa		      .byte.b	#%10101010
   2174  fc1e		       ca		      .byte.b	#%11001010
   2175  fc1f		       f3		      .byte.b	#%11110011
   2176  fc20		       78		      .byte.b	#%01111000
   2177  fc21		       df		      .byte.b	#%11011111
   2178  fc22		       fc		      .byte.b	#%11111100
   2179  fc23		       c7		      .byte.b	#%11000111
   2180  fc24		       98		      .byte.b	#%10011000
   2181  fc25		       23		      .byte.b	#%00100011
   2182  fc26		       b9		      .byte.b	#%10111001
   2183  fc27		       d2		      .byte.b	#%11010010
   2184  fc28		       30		      .byte.b	#%00110000
   2185  fc29		       eb		      .byte.b	#%11101011
   2186  fc2a		       28		      .byte.b	#%00101000
   2187  fc2b		       ab		      .byte.b	#%10101011
   2188  fc2c		       72		      .byte.b	#%01110010
   2189  fc2d		       fa		      .byte.b	#%11111010
   2190  fc2e		       7a		      .byte.b	#%01111010
   2191  fc2f		       32		      .byte.b	#%00110010
   2192  fc30		       3a		      .byte.b	#%00111010
   2193  fc31		       63		      .byte.b	#%01100011
   2194  fc32
   2195  fc32				   QrCode3
   2196  fc32		       98		      .byte.b	#%10011000
   2197  fc33		       c3		      .byte.b	#%11000011
   2198  fc34		       39		      .byte.b	#%00111001
   2199  fc35		       34		      .byte.b	#%00110100
   2200  fc36		       ff		      .byte.b	#%11111111
   2201  fc37		       71		      .byte.b	#%01110001
   2202  fc38		       d5		      .byte.b	#%11010101
   2203  fc39		       d1		      .byte.b	#%11010001
   2204  fc3a		       5f		      .byte.b	#%01011111
   2205  fc3b		       26		      .byte.b	#%00100110
   2206  fc3c		       2d		      .byte.b	#%00101101
   2207  fc3d		       e9		      .byte.b	#%11101001
   2208  fc3e		       d6		      .byte.b	#%11010110
   2209  fc3f		       26		      .byte.b	#%00100110
   2210  fc40		       ba		      .byte.b	#%10111010
   2211  fc41		       03		      .byte.b	#%00000011
   2212  fc42		       dd		      .byte.b	#%11011101
   2213  fc43		       e0		      .byte.b	#%11100000
   2214  fc44		       57		      .byte.b	#%01010111
   2215  fc45		       14		      .byte.b	#%00010100
   2216  fc46		       35		      .byte.b	#%00110101
   2217  fc47		       e5		      .byte.b	#%11100101
   2218  fc48		       b5		      .byte.b	#%10110101
   2219  fc49		       d4		      .byte.b	#%11010100
   2220  fc4a		       97		      .byte.b	#%10010111
   2221  fc4b
   2222  fc4b				   QrCode4
   2223  fc4b		       09		      .byte.b	#%00001001
   2224  fc4c		       0e		      .byte.b	#%00001110
   2225  fc4d		       0f		      .byte.b	#%00001111
   2226  fc4e		       0c		      .byte.b	#%00001100
   2227  fc4f		       0c		      .byte.b	#%00001100
   2228  fc50		       08		      .byte.b	#%00001000
   2229  fc51		       08		      .byte.b	#%00001000
   2230  fc52		       06		      .byte.b	#%00000110
   2231  fc53		       06		      .byte.b	#%00000110
   2232  fc54		       0b		      .byte.b	#%00001011
   2233  fc55		       0f		      .byte.b	#%00001111
   2234  fc56		       04		      .byte.b	#%00000100
   2235  fc57		       08		      .byte.b	#%00001000
   2236  fc58		       0f		      .byte.b	#%00001111
   2237  fc59		       09		      .byte.b	#%00001001
   2238  fc5a		       07		      .byte.b	#%00000111
   2239  fc5b		       05		      .byte.b	#%00000101
   2240  fc5c		       00		      .byte.b	#%00000000
   2241  fc5d		       0f		      .byte.b	#%00001111
   2242  fc5e		       08		      .byte.b	#%00001000
   2243  fc5f		       0b		      .byte.b	#%00001011
   2244  fc60		       0b		      .byte.b	#%00001011
   2245  fc61		       0b		      .byte.b	#%00001011
   2246  fc62		       08		      .byte.b	#%00001000
   2247  fc63		       0f		      .byte.b	#%00001111
   2248  fc64
   2249  fc64							; Moved here because of rom space.
   2250  fc64							; The only SBR in constants space
   2251  fc64				   DrawQrCode
   2252  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2253  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2254  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2255  fc6a		       85 0a		      STA	CTRLPF
   2256  fc6c		       20 85 f6 	      JSR	ClearAll	; To be 100 sure!
   2257  fc6f		       ad 82 02 	      LDA	SWCHB
   2258  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2259  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2260  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2261  fc78		       86 09		      STX	COLUBK
   2262  fc7a		       84 08		      STY	COLUPF
   2263  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2264  fc7f				   StoreReversedQrCode
   2265  fc7f		       86 08		      STX	COLUPF
   2266  fc81		       84 09		      STY	COLUBK
   2267  fc83
   2268  fc83				   ContinueQrCode
   2269  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2270  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2271  fc87		       20 13 f9 	      JSR	WaitForVblankEnd
   2272  fc8a		       20 26 f9 	      JSR	Sleep8Lines
   2273  fc8d		       20 26 f9 	      JSR	Sleep8Lines
   2274  fc90		       20 26 f9 	      JSR	Sleep8Lines
   2275  fc93
   2276  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2277  fc93		       85 02		      STA	WSYNC
   2278  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2279  fc98		       85 0e		      STA	PF1	;3
   2280  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2281  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2283  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2284  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2285  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2286  fcb5		       85 0e		      STA	PF1	;3
   2287  fcb7
   2288  fcb7		       ca		      DEX		;2
   2289  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2290  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2291  fcbc		       88		      DEY		;2
   2292  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2293  fcbf
   2294  fcbf				   EndQrCodeLoop
   2295  fcbf		       85 02		      STA	WSYNC	;
   2296  fcc1		       a9 00		      LDA	#0
   2297  fcc3		       85 0e		      STA	PF1	;3
   2298  fcc5		       85 0f		      STA	PF2	;3
   2299  fcc7
   2300  fcc7		       20 2d f9 	      JSR	Sleep32Lines
   2301  fcca		       4c 61 f5 	      JMP	PrepareOverscan
   2302  fccd
   2303  fccd				   PlayerToUpMask
   2304  fccd		       10		      .byte.b	#%00010000	;
   2305  fcce		       01		      .byte.b	#%00000001	;
   2306  fccf
   2307  fccf				   PlayerToDownMask
   2308  fccf		       20		      .byte.b	#%00100000	;
   2309  fcd0		       02		      .byte.b	#%00000010	;
   2310  fcd1
   2311  fcd1
   2312  fcd1				   PlayerToLeftMask
   2313  fcd1		       40		      .byte.b	#%01000000	;
   2314  fcd2		       04		      .byte.b	#%00000100	;
   2315  fcd3
   2316  fcd3				   PlayerToRightMask
   2317  fcd3		       80		      .byte.b	#%10000000	;
   2318  fcd4		       08		      .byte.b	#%00001000	;
   2319  fcd5
   2320  fd00					      org	$FD00
   2321  fd00				   Font
   2322  fd00				   C0
   2323  fd00		       e7		      .byte.b	#%11100111	;
   2324  fd01		       a5		      .byte.b	#%10100101	; 
   2325  fd02		       a5		      .byte.b	#%10100101	; 
   2326  fd03		       a5		      .byte.b	#%10100101	; 
   2327  fd04		       e7		      .byte.b	#%11100111	;	
   2328  fd05				   C1
   2329  fd05		       e7		      .byte.b	#%11100111	;
   2330  fd06		       42		      .byte.b	#%01000010	; 
   2331  fd07		       42		      .byte.b	#%01000010	; 
   2332  fd08		       42		      .byte.b	#%01000010	; 
   2333  fd09		       66		      .byte.b	#%01100110	;
   2334  fd0a				   C2
   2335  fd0a		       e7		      .byte.b	#%11100111	;
   2336  fd0b		       24		      .byte.b	#%00100100	; 
   2337  fd0c		       e7		      .byte.b	#%11100111	; 
   2338  fd0d		       81		      .byte.b	#%10000001	; 
   2339  fd0e		       e7		      .byte.b	#%11100111	;
   2340  fd0f				   C3
   2341  fd0f		       e7		      .byte.b	#%11100111	;
   2342  fd10		       81		      .byte.b	#%10000001	; 
   2343  fd11		       e7		      .byte.b	#%11100111	; 
   2344  fd12		       81		      .byte.b	#%10000001	; 
   2345  fd13		       e7		      .byte.b	#%11100111	;
   2346  fd14				   C4
   2347  fd14		       81		      .byte.b	#%10000001	;
   2348  fd15		       81		      .byte.b	#%10000001	; 
   2349  fd16		       e7		      .byte.b	#%11100111	; 
   2350  fd17		       a5		      .byte.b	#%10100101	; 
   2351  fd18		       a5		      .byte.b	#%10100101	;
   2352  fd19				   C5
   2353  fd19		       e7		      .byte.b	#%11100111	;
   2354  fd1a		       81		      .byte.b	#%10000001	; 
   2355  fd1b		       e7		      .byte.b	#%11100111	; 
   2356  fd1c		       24		      .byte.b	#%00100100	; 
   2357  fd1d		       e7		      .byte.b	#%11100111	;
   2358  fd1e				   C6
   2359  fd1e		       e7		      .byte.b	#%11100111	;
   2360  fd1f		       a5		      .byte.b	#%10100101	; 
   2361  fd20		       e7		      .byte.b	#%11100111	; 
   2362  fd21		       24		      .byte.b	#%00100100	; 
   2363  fd22		       e7		      .byte.b	#%11100111	;
   2364  fd23				   C7
   2365  fd23		       81		      .byte.b	#%10000001	;
   2366  fd24		       81		      .byte.b	#%10000001	; 
   2367  fd25		       81		      .byte.b	#%10000001	; 
   2368  fd26		       81		      .byte.b	#%10000001	; 
   2369  fd27		       e7		      .byte.b	#%11100111	;
   2370  fd28				   C8
   2371  fd28		       e7		      .byte.b	#%11100111	;
   2372  fd29		       a5		      .byte.b	#%10100101	; 
   2373  fd2a		       e7		      .byte.b	#%11100111	; 
   2374  fd2b		       a5		      .byte.b	#%10100101	; 
   2375  fd2c		       e7		      .byte.b	#%11100111	;
   2376  fd2d				   C9
   2377  fd2d		       e7		      .byte.b	#%11100111	;
   2378  fd2e		       81		      .byte.b	#%10000001	; 
   2379  fd2f		       e7		      .byte.b	#%11100111	; 
   2380  fd30		       a5		      .byte.b	#%10100101	; 
   2381  fd31		       e7		      .byte.b	#%11100111	;
   2382  fd32				   CA
   2383  fd32		       a5		      .byte.b	#%10100101	;
   2384  fd33		       a5		      .byte.b	#%10100101	; 
   2385  fd34		       e7		      .byte.b	#%11100111	; 
   2386  fd35		       a5		      .byte.b	#%10100101	; 
   2387  fd36		       e7		      .byte.b	#%11100111	;
   2388  fd37				   CB
   2389  fd37		       66		      .byte.b	#%01100110	;
   2390  fd38		       a5		      .byte.b	#%10100101	; 
   2391  fd39		       66		      .byte.b	#%01100110	; 
   2392  fd3a		       a5		      .byte.b	#%10100101	;
   2393  fd3b		       66		      .byte.b	#%01100110	;
   2394  fd3c				   CC
   2395  fd3c		       e7		      .byte.b	#%11100111	;
   2396  fd3d		       24		      .byte.b	#%00100100	; 
   2397  fd3e		       24		      .byte.b	#%00100100	; 
   2398  fd3f		       24		      .byte.b	#%00100100	;
   2399  fd40		       e7		      .byte.b	#%11100111	;
   2400  fd41
   2401  fd41				   CD
   2402  fd41		       66		      .byte.b	#%01100110	;
   2403  fd42		       a5		      .byte.b	#%10100101	; 
   2404  fd43		       a5		      .byte.b	#%10100101	; 
   2405  fd44		       a5		      .byte.b	#%10100101	;
   2406  fd45		       66		      .byte.b	#%01100110	;
   2407  fd46
   2408  fd46				   CE
   2409  fd46		       e7		      .byte.b	#%11100111	;
   2410  fd47		       24		      .byte.b	#%00100100	; 
   2411  fd48		       e7		      .byte.b	#%11100111	; 
   2412  fd49		       24		      .byte.b	#%00100100	; 
   2413  fd4a		       e7		      .byte.b	#%11100111	;
   2414  fd4b
   2415  fd4b				   CF
   2416  fd4b		       24		      .byte.b	#%00100100	;
   2417  fd4c		       24		      .byte.b	#%00100100	; 
   2418  fd4d		       e7		      .byte.b	#%11100111	; 
   2419  fd4e		       24		      .byte.b	#%00100100	; 
   2420  fd4f		       e7		      .byte.b	#%11100111	;
   2421  fd50
   2422  fd50				   CG
   2423  fd50		       c3		      .byte.b	#%11000011	;
   2424  fd51		       a5		      .byte.b	#%10100101	; 
   2425  fd52		       a5		      .byte.b	#%10100101	; 
   2426  fd53		       24		      .byte.b	#%00100100	; 
   2427  fd54		       c3		      .byte.b	#%11000011	;	
   2428  fd55
   2429  fd55				   CH
   2430  fd55		       a5		      .byte.b	#%10100101	;
   2431  fd56		       a5		      .byte.b	#%10100101	; 
   2432  fd57		       e7		      .byte.b	#%11100111	; 
   2433  fd58		       a5		      .byte.b	#%10100101	; 
   2434  fd59		       a5		      .byte.b	#%10100101	;
   2435  fd5a
   2436  fd5a				   CK
   2437  fd5a		       a5		      .byte.b	#%10100101	;
   2438  fd5b		       a5		      .byte.b	#%10100101	; 
   2439  fd5c		       66		      .byte.b	#%01100110	; 
   2440  fd5d		       a5		      .byte.b	#%10100101	; 
   2441  fd5e		       a5		      .byte.b	#%10100101	;
   2442  fd5f
   2443  fd5f				   CL
   2444  fd5f		       e7		      .byte.b	#%11100111	;
   2445  fd60		       24		      .byte.b	#%00100100	; 
   2446  fd61		       24		      .byte.b	#%00100100	; 
   2447  fd62		       24		      .byte.b	#%00100100	; 
   2448  fd63		       24		      .byte.b	#%00100100	;
   2449  fd64
   2450  fd64				   CI
   2451  fd64		       42		      .byte.b	#%01000010	;
   2452  fd65		       42		      .byte.b	#%01000010	; 
   2453  fd66		       42		      .byte.b	#%01000010	; 
   2454  fd67		       42		      .byte.b	#%01000010	; 
   2455  fd68		       42		      .byte.b	#%01000010	;
   2456  fd69
   2457  fd69				   CM
   2458  fd69		       a5		      .byte.b	#%10100101	;
   2459  fd6a		       a5		      .byte.b	#%10100101	; 
   2460  fd6b		       a5		      .byte.b	#%10100101	; 
   2461  fd6c		       e7		      .byte.b	#%11100111	; 
   2462  fd6d		       a5		      .byte.b	#%10100101	;
   2463  fd6e
   2464  fd6e				   CN
   2465  fd6e		       a5		      .byte.b	#%10100101	;
   2466  fd6f		       a5		      .byte.b	#%10100101	; 
   2467  fd70		       a5		      .byte.b	#%10100101	; 
   2468  fd71		       a5		      .byte.b	#%10100101	; 
   2469  fd72		       66		      .byte.b	#%01100110	;	
   2470  fd73
   2471  fd73
   2472  fd73				   CO
   2473  fd73		       42		      .byte.b	#%01000010	;
   2474  fd74		       a5		      .byte.b	#%10100101	; 
   2475  fd75		       a5		      .byte.b	#%10100101	; 
   2476  fd76		       a5		      .byte.b	#%10100101	; 
   2477  fd77		       42		      .byte.b	#%01000010	;	
   2478  fd78
   2479  fd78				   CP
   2480  fd78		       24		      .byte.b	#%00100100	;
   2481  fd79		       24		      .byte.b	#%00100100	; 
   2482  fd7a		       e7		      .byte.b	#%11100111	; 
   2483  fd7b		       a5		      .byte.b	#%10100101	; 
   2484  fd7c		       e7		      .byte.b	#%11100111	;
   2485  fd7d
   2486  fd7d				   CR
   2487  fd7d		       a5		      .byte.b	#%10100101	;
   2488  fd7e		       a5		      .byte.b	#%10100101	; 
   2489  fd7f		       66		      .byte.b	#%01100110	; 
   2490  fd80		       a5		      .byte.b	#%10100101	; 
   2491  fd81		       66		      .byte.b	#%01100110	;
   2492  fd82
   2493  fd82				   CS
   2494  fd82		       66		      .byte.b	#%01100110	;
   2495  fd83		       81		      .byte.b	#%10000001	; 
   2496  fd84		       42		      .byte.b	#%01000010	; 
   2497  fd85		       24		      .byte.b	#%00100100	; 
   2498  fd86		       c3		      .byte.b	#%11000011	;
   2499  fd87
   2500  fd87				   CT
   2501  fd87		       42		      .byte.b	#%01000010	;
   2502  fd88		       42		      .byte.b	#%01000010	; 
   2503  fd89		       42		      .byte.b	#%01000010	; 
   2504  fd8a		       42		      .byte.b	#%01000010	; 
   2505  fd8b		       e7		      .byte.b	#%11100111	;
   2506  fd8c
   2507  fd8c				   CV
   2508  fd8c		       42		      .byte.b	#%01000010	;
   2509  fd8d		       a5		      .byte.b	#%10100101	; 
   2510  fd8e		       a5		      .byte.b	#%10100101	; 
   2511  fd8f		       a5		      .byte.b	#%10100101	; 
   2512  fd90		       a5		      .byte.b	#%10100101	;	
   2513  fd91
   2514  fd91				   CY
   2515  fd91		       42		      .byte.b	#%01000010	;
   2516  fd92		       42		      .byte.b	#%01000010	; 
   2517  fd93		       42		      .byte.b	#%01000010	; 
   2518  fd94		       a5		      .byte.b	#%10100101	; 
   2519  fd95		       a5		      .byte.b	#%10100101	;
   2520  fd96
   2521  fd96				   CW
   2522  fd96		       a5		      .byte.b	#%10100101	;
   2523  fd97		       e7		      .byte.b	#%11100111	; 
   2524  fd98		       a5		      .byte.b	#%10100101	; 
   2525  fd99		       a5		      .byte.b	#%10100101	; 
   2526  fd9a		       a5		      .byte.b	#%10100101	;
   2527  fd9b
   2528  fd9b				   CZ
   2529  fd9b		       e7		      .byte.b	#%11100111	;
   2530  fd9c		       24		      .byte.b	#%00100100	; 
   2531  fd9d		       42		      .byte.b	#%01000010	; 
   2532  fd9e		       81		      .byte.b	#%10000001	; 
   2533  fd9f		       e7		      .byte.b	#%11100111	;
   2534  fda0
   2535  fda0				   Pipe
   2536  fda0		       42		      .byte.b	#%01000010	;
   2537  fda1		       00		      .byte.b	#%00000000	; 
   2538  fda2		       42		      .byte.b	#%01000010	; 
   2539  fda3		       00		      .byte.b	#%00000000	; 
   2540  fda4		       42		      .byte.b	#%01000010	;
   2541  fda5
   2542  fda5				   Exclamation
   2543  fda5		       42		      .byte.b	#%01000010	;
   2544  fda6		       00		      .byte.b	#%00000000	; 
   2545  fda7		       42		      .byte.b	#%01000010	; 
   2546  fda8		       42		      .byte.b	#%01000010	; 
   2547  fda9		       42		      .byte.b	#%01000010	;
   2548  fdaa
   2549  fdaa				   Dot
   2550  fdaa		       42		      .byte.b	#%01000010	;
   2551  fdab		       42		      .byte.b	#%01000010	; 
   2552  fdac		       00		      .byte.b	#%00000000	; 
   2553  fdad		       00		      .byte.b	#%00000000	; 
   2554  fdae		       00		      .byte.b	#%00000000	;
   2555  fdaf
   2556  fdaf				   Colon
   2557  fdaf		       42		      .byte.b	#%01000010	;
   2558  fdb0		       42		      .byte.b	#%01000010	; 
   2559  fdb1		       00		      .byte.b	#%00000000	; 
   2560  fdb2		       42		      .byte.b	#%01000010	; 
   2561  fdb3		       42		      .byte.b	#%01000010	;
   2562  fdb4
   2563  fdb4				   Triangle
   2564  fdb4		       81		      .byte.b	#%10000001	;
   2565  fdb5		       c3		      .byte.b	#%11000011	; 
   2566  fdb6		       e7		      .byte.b	#%11100111	; 
   2567  fdb7		       c3		      .byte.b	#%11000011	; 
   2568  fdb8		       81		      .byte.b	#%10000001	;
   2569  fdb9
   2570  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2571  fdb9		       00		      .byte.b	#0	;
   2572  fdba		       00		      .byte.b	#0	;
   2573  fdbb		       00		      .byte.b	#0	;
   2574  fdbc		       00		      .byte.b	#0	;
   2575  fdbd		       00		      .byte.b	#0	;
   2576  fdbe
   2577  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2578  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2579  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2580  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2581  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2582  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2583  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2584  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2585  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2586  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2587  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2588  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2589  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2590  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2591  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2592  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2593  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2594  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2595  fdcf
   2596  fdcf				   EngineSoundType
   2597  fdcf		       02		      .byte.b	#2
   2598  fdd0		       02		      .byte.b	#2
   2599  fdd1		       0e		      .byte.b	#14
   2600  fdd2		       06		      .byte.b	#6
   2601  fdd3		       06		      .byte.b	#6
   2602  fdd4		       0e		      .byte.b	#14
   2603  fdd5
   2604  fdd5				   EngineBaseFrequence
   2605  fdd5		       1f		      .byte.b	#31
   2606  fdd6		       15		      .byte.b	#21
   2607  fdd7		       14		      .byte.b	#20
   2608  fdd8		       1f		      .byte.b	#31
   2609  fdd9		       16		      .byte.b	#22
   2610  fdda		       03		      .byte.b	#3
   2611  fddb
   2612  fddb				   TachometerSizeLookup1
   2613  fddb		       1f		      .byte.b	#%00011111
   2614  fddc		       3f		      .byte.b	#%00111111
   2615  fddd		       7f		      .byte.b	#%01111111
   2616  fdde		       ff		      .byte.b	#%11111111
   2617  fddf		       ff		      .byte.b	#%11111111
   2618  fde0		       ff		      .byte.b	#%11111111
   2619  fde1		       ff		      .byte.b	#%11111111
   2620  fde2		       ff		      .byte.b	#%11111111
   2621  fde3
   2622  fde3				   TachometerSizeLookup2
   2623  fde3		       00		      .byte.b	#%00000000
   2624  fde4		       00		      .byte.b	#%00000000
   2625  fde5		       00		      .byte.b	#%00000000
   2626  fde6		       00		      .byte.b	#%00000000
   2627  fde7		       80		      .byte.b	#%10000000
   2628  fde8		       c0		      .byte.b	#%11000000
   2629  fde9		       e0		      .byte.b	#%11100000
   2630  fdea		       f0		      .byte.b	#%11110000
   2631  fdeb
   2632  fdeb				   TachometerGearLookup
   2633  fdeb		       01		      .byte.b	#%00000001
   2634  fdec		       02		      .byte.b	#%00000010
   2635  fded		       04		      .byte.b	#%00000100
   2636  fdee		       08		      .byte.b	#%00001000
   2637  fdef		       10		      .byte.b	#%00010000
   2638  fdf0		       30		      .byte.b	#%00110000
   2639  fdf1
   2640  fe00					      org	$FE00
   2641  fe00				   AesTable
   2642  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2643  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2644  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2645  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2646  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2647  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2648  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2649  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2650  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2651  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2652  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2653  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2654  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2655  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2656  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2657  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2658  ff00
   2659  ff00							; From FF00 to FFFB (122 bytes) to use here
   2660  ff00
   2661  ff00				   StaticText		; All static text must be on the same MSB block. 
   2662  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2663  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2664  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2665  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2666  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2667  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2668  ff05
   2669  ff05				   HellwayLeftText
   2670  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2671  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2672  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2673  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2674  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2675  ff0a
   2676  ff0a				   HellwayRightText
   2677  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2678  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2679  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2680  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2681  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2682  ff0f
   2683  ff0f				   OpbText
   2684  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2685  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2686  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2687  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2688  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2689  ff14
   2690  ff14				   YearText
   2691  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2692  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2693  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2694  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2695  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2696  ff19
   2697  ff19				   GameText
   2698  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2699  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2700  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2701  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2702  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2703  ff1e
   2704  ff1e				   OverText
   2705  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2706  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2707  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2708  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2709  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2710  ff23				   GoText
   2711  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2712  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2713  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2714  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2715  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2716  ff28
   2717  ff28				   ZeldaTextLeft
   2718  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2719  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2720  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2721  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2722  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2723  ff2d
   2724  ff2d				   ZeldaTextRight
   2725  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2726  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2727  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2728  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2729  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2730  ff32
   2731  ff32				   ZeldaDateLeft
   2732  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2733  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2734  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2735  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2736  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2737  ff37
   2738  ff37				   ZeldaDateRight
   2739  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2740  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2741  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2742  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2743  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2744  ff3c
   2745  ff3c				   PolvinhosTextLeft
   2746  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2747  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2748  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2749  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2750  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2751  ff41
   2752  ff41				   PolvinhosTextRight
   2753  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2754  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2755  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2756  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2757  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2758  ff46
   2759  ff46				   PolvinhosDateLeft
   2760  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2761  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2762  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2763  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2764  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2765  ff4b
   2766  ff4b				   PolvinhosDateRight
   2767  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2768  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2769  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2770  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2771  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2772  ff50
   2773  ff50				   IvonneTextLeft
   2774  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2775  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2776  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2777  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2778  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2779  ff55
   2780  ff55				   IvonneTextRight
   2781  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2782  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2783  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2784  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2785  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2786  ff5a
   2787  ff5a				   IvonneDateLeft
   2788  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2789  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2790  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2791  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2792  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2793  ff5f
   2794  ff5f				   IvonneDateRight
   2795  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2796  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2797  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2798  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2799  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2800  ff64
   2801  ff64				   PaperArtTextLeft
   2802  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2803  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2804  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2805  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2806  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2807  ff69
   2808  ff69				   PaperArtTextRight
   2809  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2810  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2811  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2812  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2813  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2814  ff6e
   2815  ff6e				   LeonardoTextLeft
   2816  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2817  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2818  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2819  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2820  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2821  ff73
   2822  ff73				   LeonardoTextRight
   2823  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2824  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2825  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2826  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2827  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2828  ff78
   2829  ff78				   VersionText
   2830  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2831  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2832  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2833  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2834  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2835  ff7d
   2836  ff7d
   2837  ff7d				   EndStaticText
   2838  ff7d
   2839  ff7d				   CarSprite0		; Upside down, Original Car
   2840  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2841  ff85				   CarSprite0NoPadding
   2842  ff85		       7e		      .byte.b	#%01111110
   2843  ff86		       24		      .byte.b	#%00100100
   2844  ff87		       bd		      .byte.b	#%10111101
   2845  ff88		       3c		      .byte.b	#%00111100
   2846  ff89		       bd		      .byte.b	#%10111101
   2847  ff8a		       3c		      .byte.b	#%00111100
   2848  ff8b
   2849  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2850  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2851  ff93				   CarSprite1NoPadding
   2852  ff93		       bd		      .byte.b	#%10111101
   2853  ff94		       7e		      .byte.b	#%01111110
   2854  ff95		       5a		      .byte.b	#%01011010
   2855  ff96		       66		      .byte.b	#%01100110
   2856  ff97		       bd		      .byte.b	#%10111101
   2857  ff98		       3c		      .byte.b	#%00111100
   2858  ff99
   2859  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2860  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2861  ffa1				   CarSprite2NoPadding
   2862  ffa1		       7e		      .byte.b	#%01111110
   2863  ffa2		       a5		      .byte.b	#%10100101
   2864  ffa3		       42		      .byte.b	#%01000010
   2865  ffa4		       42		      .byte.b	#%01000010
   2866  ffa5		       bd		      .byte.b	#%10111101
   2867  ffa6		       7e		      .byte.b	#%01111110
   2868  ffa7
   2869  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2870  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2871  ffaf				   CarSprite3NoPadding
   2872  ffaf		       3c		      .byte.b	#%00111100
   2873  ffb0		       db		      .byte.b	#%11011011
   2874  ffb1		       db		      .byte.b	#%11011011
   2875  ffb2		       3c		      .byte.b	#%00111100
   2876  ffb3		       5a		      .byte.b	#%01011010
   2877  ffb4		       3c		      .byte.b	#%00111100
   2878  ffb5
   2879  ffb5				   TrafficSpeeds
   2880  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2881  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2882  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2883  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2884  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2885  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2886  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2887  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2888  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2889  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2890  ffbf				   TrafficSpeedsHighDelta
   2891  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2892  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2893  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2894  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2895  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2896  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2897  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2898  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2899  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2900  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2901  ffc9
   2902  ffc9				   CarIdToSpriteAddressL
   2903  ffc9		       7d		      .byte.b	#<CarSprite0
   2904  ffca		       8b		      .byte.b	#<CarSprite1
   2905  ffcb		       99		      .byte.b	#<CarSprite2
   2906  ffcc		       a7		      .byte.b	#<CarSprite3
   2907  ffcd
   2908  ffcd				   CarIdToSpriteAddressH
   2909  ffcd		       ff		      .byte.b	#>CarSprite0
   2910  ffce		       ff		      .byte.b	#>CarSprite1
   2911  ffcf		       ff		      .byte.b	#>CarSprite2
   2912  ffd0		       ff		      .byte.b	#>CarSprite3
   2913  ffd1
   2914  ffd1				   EnemyCarIdToSpriteAddressL
   2915  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2916  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2917  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2918  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2919  ffd5
   2920  ffd5				   EnemyCarIdToSpriteAddressH
   2921  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2922  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2923  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2924  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2925  ffd9
   2926  ffd9				   CarIdToAccelerateSpeed
   2927  ffd9		       80		      .byte.b	#128
   2928  ffda		       c0		      .byte.b	#192
   2929  ffdb		       60		      .byte.b	#96
   2930  ffdc		       c0		      .byte.b	#192
   2931  ffdd
   2932  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2933  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2934  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2935  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2936  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2937  ffe1
   2938  ffe1				   CarIdToMaxSpeedL
   2939  ffe1		       80		      .byte.b	#$80
   2940  ffe2		       00		      .byte.b	#$00	; One less gear
   2941  ffe3		       80		      .byte.b	#$80
   2942  ffe4		       80		      .byte.b	#$80
   2943  ffe5
   2944  ffe5				   CarIdToMaxGear
   2945  ffe5		       05		      .byte.b	#5
   2946  ffe6		       04		      .byte.b	#4	; One less gear
   2947  ffe7		       05		      .byte.b	#5
   2948  ffe8		       05		      .byte.b	#5
   2949  ffe9
   2950  ffe9				   GearToBreakSpeedTable
   2951  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2952  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2953  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2954  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2955  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2956  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2957  ffef
   2958  ffef				   TrafficColorTable
   2959  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2960  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2961  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2962  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2963  fff3
   2964  fff3				   TrafficChanceTable
   2965  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2966  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2967  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2968  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2969  fff7
   2970  fff7				   TrafficTimeTable
   2971  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2972  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2973  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2974  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2975  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2976  fffc
   2977  fffc
   2978  fffc					      org	$FFFC
   2979  fffc		       00 f0		      .word.w	BeforeStart
   2980  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
