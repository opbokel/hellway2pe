------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 27	   PLAYER_1_X_START =	39	;
     70  f000		       00 2c	   PLAYER_0_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   Player0SpeedL =	$8E
    115  f000		       00 8f	   Player0SpeedH =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000
    133  f000		       00 b4	   CollisionCounter =	$B4
    134  f000		       00 b5	   OpCollisionCounter =	$B5
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 d0	   ScoreD0    =	$D0
    159  f000		       00 d1	   ScoreD1    =	$D1
    160  f000		       00 d2	   ScoreD2    =	$D2
    161  f000		       00 d3	   ScoreD3    =	$D3
    162  f000		       00 d4	   ScoreD4    =	$D4
    163  f000		       00 d5	   ScoreFontColor =	$D5
    164  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    165  f000		       00 d7	   NextCheckpoint =	$D7
    166  f000
    167  f000		       00 d8	   OpponentLine =	$D8
    168  f000
    169  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    170  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    171  f000
    172  f000		       00 dd	   StartSWCHB =	$DD	; Used for Score, so it cannot be cheated.
    173  f000		       00 de	   CarSpritePointerL =	$DE
    174  f000		       00 df	   CarSpritePointerH =	$DF
    175  f000
    176  f000		       00 f1	   AccelerateBuffer =	$F1	; Change speed on buffer overflow.
    177  f000		       00 f2	   TextSide   =	$F2
    178  f000		       00 f3	   TextFlickerMode =	$F3
    179  f000		       00 f4	   Gear       =	$F4
    180  f000
    181  f000
    182  f000
    183  f000							;generic start up stuff, put zero in almost all...
    184  f000				   BeforeStart		;All variables that are kept on game reset or select
    185  f000		       a0 00		      LDY	#0
    186  f002		       84 bc		      STY	SwitchDebounceCounter
    187  f004		       84 c4		      STY	CurrentDifficulty
    188  f006		       84 bd		      STY	GameStatus
    189  f008		       84 c7		      STY	CurrentCarId
    190  f00a		       84 c8		      STY	OpCurrentCarId
    191  f00c		       a0 10		      LDY	#16
    192  f00e		       84 c6		      STY	GameMode
    193  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    194  f012
    195  f012				   Start
    196  f012		       a9 02		      LDA	#2
    197  f014		       85 00		      STA	VSYNC
    198  f016		       85 02		      STA	WSYNC
    199  f018		       85 02		      STA	WSYNC
    200  f01a		       85 02		      STA	WSYNC
    201  f01c		       a9 00		      LDA	#0	;2
    202  f01e		       85 00		      STA	VSYNC	;3
    203  f020
    204  f020		       78		      SEI
    205  f021		       d8		      CLD
    206  f022		       a2 ff		      LDX	#$FF
    207  f024		       9a		      TXS
    208  f025
    209  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    210  f027				   CleanMem
    211  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    212  f029		       f0 16		      BEQ	SkipClean
    213  f02b		       e0 c6		      CPX	#GameMode
    214  f02d		       f0 12		      BEQ	SkipClean
    215  f02f		       e0 c7		      CPX	#CurrentCarId
    216  f031		       f0 0e		      BEQ	SkipClean
    217  f033		       e0 c8		      CPX	#OpCurrentCarId
    218  f035		       f0 0a		      BEQ	SkipClean
    219  f037		       e0 c4		      CPX	#CurrentDifficulty
    220  f039		       f0 06		      BEQ	SkipClean
    221  f03b		       e0 bd		      CPX	#GameStatus
    222  f03d		       f0 02		      BEQ	SkipClean
    223  f03f		       95 00		      STA	0,X
    224  f041				   SkipClean
    225  f041		       e8		      INX
    226  f042		       d0 e3		      BNE	CleanMem
    227  f044
    228  f044		       a9 d5		      LDA	#213
    229  f046		       8d 96 02 	      STA	TIM64T	;3	
    230  f049
    231  f049							;Setting some variables...
    232  f049
    233  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    234  f049		       85 02		      STA	WSYNC	;We will set player position
    235  f04b		       20 fc f7 	      JSR	DefaultOffsets
    236  f04e
    237  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    238  f051		       85 8e		      STA	Player0SpeedL
    239  f053
    240  f053							;SLEEP 11;18
    241  f053		       a2 00		      LDX	#0
    242  f055		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    243  f058		       85 dd		      STA	StartSWCHB	; For game over
    244  f05a		       29 c0		      AND	#%11000000
    245  f05c		       f0 0b		      BEQ	CallConfigureDifficulty
    246  f05e		       e8		      INX
    247  f05f		       c9 80		      CMP	#%10000000
    248  f061		       f0 06		      BEQ	CallConfigureDifficulty
    249  f063		       e8		      INX
    250  f064		       c9 40		      CMP	#%01000000
    251  f066		       f0 01		      BEQ	CallConfigureDifficulty
    252  f068		       e8		      INX
    253  f069
    254  f069				   CallConfigureDifficulty
    255  f069		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    256  f06b		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    257  f06d		       a5 bd		      LDA	GameStatus
    258  f06f		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    259  f071				   StoreCurrentDifficulty
    260  f071		       86 c4		      STX	CurrentDifficulty
    261  f073		       20 d1 f7 	      JSR	ConfigureDifficulty
    262  f076
    263  f076				   SetGameNotRunning
    264  f076		       a9 00		      LDA	#0
    265  f078		       85 bd		      STA	GameStatus
    266  f07a
    267  f07a				   ConfigureTimer
    268  f07a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    269  f07c		       85 b8		      STA	CountdownTimer	;3
    270  f07e
    271  f07e				   ConfigurePlayer1XPosition
    272  f07e		       a9 27		      LDA	#PLAYER_1_X_START	;2
    273  f080		       85 b7		      STA	Player1X	;3
    274  f082
    275  f082				   HPositioning 		; Avoid sleep doing needed stuff
    276  f082		       85 02		      STA	WSYNC
    277  f084
    278  f084				   ConfigurePlayer0XPosition
    279  f084		       a9 21		      LDA	#PLAYER_0_X_START	;2
    280  f086		       85 b6		      STA	Player0X	;3
    281  f088
    282  f088				   ConfigureMissileSize
    283  f088		       a9 30		      LDA	#%00110000	;2 Missile Size
    284  f08a		       85 04		      STA	NUSIZ0	;3
    285  f08c		       85 05		      STA	NUSIZ1	;3
    286  f08e
    287  f08e				   ConfigureNextCheckpoint
    288  f08e		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    289  f090		       85 d7		      STA	NextCheckpoint
    290  f092
    291  f092		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f094					      SLEEP	4	;
      1  f094				   .CYCLES    SET	4
      2  f094
      3  f094				  -	      IF	.CYCLES < 2
      4  f094				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f094				  -	      ERR
      6  f094					      ENDIF
      7  f094
      8  f094				  -	      IF	.CYCLES & 1
      9  f094				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f094				  -	      nop	0
     11  f094				  -	      ELSE
     12  f094				  -	      bit	VSYNC
     13  f094				  -	      ENDIF
     14  f094				  -.CYCLES    SET	.CYCLES - 3
     15  f094					      ENDIF
     16  f094
     17  f094					      REPEAT	.CYCLES / 2
     18  f094		       ea		      nop
     17  f094					      REPEND
     18  f095		       ea		      nop
     19  f096					      REPEND
    293  f096		       85 12		      STA	RESM0
      0  f098					      SLEEP	2	;
      1  f098				   .CYCLES    SET	2
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     19  f099					      REPEND
    295  f099		       85 14		      STA	RESBL
      0  f09b					      SLEEP	2
      1  f09b				   .CYCLES    SET	2
      2  f09b
      3  f09b				  -	      IF	.CYCLES < 2
      4  f09b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09b				  -	      ERR
      6  f09b					      ENDIF
      7  f09b
      8  f09b				  -	      IF	.CYCLES & 1
      9  f09b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09b				  -	      nop	0
     11  f09b				  -	      ELSE
     12  f09b				  -	      bit	VSYNC
     13  f09b				  -	      ENDIF
     14  f09b				  -.CYCLES    SET	.CYCLES - 3
     15  f09b					      ENDIF
     16  f09b
     17  f09b					      REPEAT	.CYCLES / 2
     18  f09b		       ea		      nop
     19  f09c					      REPEND
    297  f09c		       85 13		      STA	RESM1
      0  f09e					      SLEEP	3
      1  f09e				   .CYCLES    SET	3
      2  f09e
      3  f09e				  -	      IF	.CYCLES < 2
      4  f09e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09e				  -	      ERR
      6  f09e					      ENDIF
      7  f09e
      8  f09e					      IF	.CYCLES & 1
      9  f09e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09e				  -	      nop	0
     11  f09e					      ELSE
     12  f09e		       24 00		      bit	VSYNC
     13  f0a0					      ENDIF
     14  f0a0				   .CYCLES    SET	.CYCLES - 3
     15  f0a0					      ENDIF
     16  f0a0
     17  f0a0				  -	      REPEAT	.CYCLES / 2
     18  f0a0				  -	      nop
     19  f0a0					      REPEND
    299  f0a0
    300  f0a0		       a9 e0		      LDA	#$E0
    301  f0a2		       85 24		      STA	HMBL
    302  f0a4		       85 22		      STA	HMM0
    303  f0a6		       85 23		      STA	HMM1
    304  f0a8		       85 02		      STA	WSYNC
    305  f0aa		       85 2a		      STA	HMOVE
    306  f0ac		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    307  f0ae		       85 2b		      STA	HMCLR
      0  f0b0					      SLEEP	30
      1  f0b0				   .CYCLES    SET	30
      2  f0b0
      3  f0b0				  -	      IF	.CYCLES < 2
      4  f0b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b0				  -	      ERR
      6  f0b0					      ENDIF
      7  f0b0
      8  f0b0				  -	      IF	.CYCLES & 1
      9  f0b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b0				  -	      nop	0
     11  f0b0				  -	      ELSE
     12  f0b0				  -	      bit	VSYNC
     13  f0b0				  -	      ENDIF
     14  f0b0				  -.CYCLES    SET	.CYCLES - 3
     15  f0b0					      ENDIF
     16  f0b0
     17  f0b0					      REPEAT	.CYCLES / 2
     18  f0b0		       ea		      nop
     17  f0b0					      REPEND
     18  f0b1		       ea		      nop
     17  f0b1					      REPEND
     18  f0b2		       ea		      nop
     17  f0b2					      REPEND
     18  f0b3		       ea		      nop
     17  f0b3					      REPEND
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     19  f0bf					      REPEND
    309  f0bf		       85 10		      STA	RESP0
      0  f0c1					      SLEEP	5	; Temporarily move player 1 away.
      1  f0c1				   .CYCLES    SET	5
      2  f0c1
      3  f0c1				  -	      IF	.CYCLES < 2
      4  f0c1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c1				  -	      ERR
      6  f0c1					      ENDIF
      7  f0c1
      8  f0c1					      IF	.CYCLES & 1
      9  f0c1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c1				  -	      nop	0
     11  f0c1					      ELSE
     12  f0c1		       24 00		      bit	VSYNC
     13  f0c3					      ENDIF
     14  f0c3				   .CYCLES    SET	.CYCLES - 3
     15  f0c3					      ENDIF
     16  f0c3
     17  f0c3					      REPEAT	.CYCLES / 2
     18  f0c3		       ea		      nop
     19  f0c4					      REPEND
    311  f0c4		       85 11		      STA	RESP1
    312  f0c6
    313  f0c6				   WaitResetToEnd
    314  f0c6		       ad 84 02 	      LDA	INTIM
    315  f0c9		       d0 fb		      BNE	WaitResetToEnd
    316  f0cb
    317  f0cb				   MainLoop
    318  f0cb		       a9 02		      LDA	#2
    319  f0cd		       85 00		      STA	VSYNC
    320  f0cf		       85 02		      STA	WSYNC
    321  f0d1		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    322  f0d3				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    323  f0d3		       a9 01		      LDA	#%00000001	;3
    324  f0d5		       24 f3		      BIT	TextFlickerMode	;2
    325  f0d7		       f0 05		      BEQ	TextSideFrameZero	;2
    326  f0d9		       25 8d		      AND	FrameCount1	;2
    327  f0db		       4c e0 f0 	      JMP	StoreTextSize	;3
    328  f0de				   TextSideFrameZero
    329  f0de		       25 8c		      AND	FrameCount0	;2
    330  f0e0				   StoreTextSize
    331  f0e0		       85 f2		      STA	TextSide	;3
    332  f0e2
    333  f0e2				   PrepareMaxHMove
      0  f0e2					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e2				   .CYCLES    SET	18
      2  f0e2
      3  f0e2				  -	      IF	.CYCLES < 2
      4  f0e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e2				  -	      ERR
      6  f0e2					      ENDIF
      7  f0e2
      8  f0e2				  -	      IF	.CYCLES & 1
      9  f0e2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e2				  -	      nop	0
     11  f0e2				  -	      ELSE
     12  f0e2				  -	      bit	VSYNC
     13  f0e2				  -	      ENDIF
     14  f0e2				  -.CYCLES    SET	.CYCLES - 3
     15  f0e2					      ENDIF
     16  f0e2
     17  f0e2					      REPEAT	.CYCLES / 2
     18  f0e2		       ea		      nop
     17  f0e2					      REPEND
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    335  f0eb		       a9 80		      LDA	#$80
    336  f0ed		       85 24		      STA	HMBL
    337  f0ef		       85 22		      STA	HMM0
    338  f0f1		       85 23		      STA	HMM1
    339  f0f3		       85 20		      STA	HMP0
    340  f0f5		       85 21		      STA	HMP1
    341  f0f7		       85 02		      STA	WSYNC
    342  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    343  f0fb
    344  f0fb				   ConfigVBlankTimer
    345  f0fb		       a5 c6		      LDA	GameMode
    346  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    347  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    348  f101		       a9 29		      LDA	#VBLANK_TIMER
    349  f103		       4c 08 f1 	      JMP	SetVblankTimer
    350  f106				   SetVblankTimerQrCode
    351  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    352  f108
    353  f108				   SetVblankTimer
    354  f108		       85 02		      STA	WSYNC	;3
    355  f10a		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    356  f10c		       8d 96 02 	      STA	TIM64T	;3	
    357  f10f		       a9 00		      LDA	#0	;2
    358  f111		       85 00		      STA	VSYNC	;3	
    359  f113
    360  f113				   RandomizeGame
    361  f113		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    362  f115		       d0 2d		      BNE	EndRandomizeGame
    363  f117		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    364  f119		       29 02		      AND	#%00000010
    365  f11b		       f0 24		      BEQ	DeterministicGame
    366  f11d		       a6 96		      LDX	TrafficOffset1 + 2
    367  f11f		       bd 00 fe 	      LDA	AesTable,X
    368  f122		       45 8c		      EOR	FrameCount0
    369  f124		       85 96		      STA	TrafficOffset1 + 2
    370  f126		       85 a6		      STA	OpTrafficOffset1 + 2
    371  f128		       a6 9a		      LDX	TrafficOffset2 + 2
    372  f12a		       bd 00 fe 	      LDA	AesTable,X
    373  f12d		       45 8c		      EOR	FrameCount0
    374  f12f		       85 9a		      STA	TrafficOffset2 + 2
    375  f131		       85 aa		      STA	OpTrafficOffset2 + 2
    376  f133		       a6 9e		      LDX	TrafficOffset3 + 2
    377  f135		       bd 00 fe 	      LDA	AesTable,X
    378  f138		       45 8c		      EOR	FrameCount0
    379  f13a		       85 9e		      STA	TrafficOffset3 + 2
    380  f13c		       85 ae		      STA	OpTrafficOffset3 + 2
    381  f13e		       4c 44 f1 	      JMP	EndRandomizeGame
    382  f141
    383  f141				   DeterministicGame
    384  f141		       20 fc f7 	      JSR	DefaultOffsets
    385  f144
    386  f144				   EndRandomizeGame
    387  f144
    388  f144
    389  f144							; Move this in the code and save cycles, for some reason spliting is breaking...
    390  f144		       a2 08		      LDX	#8
    391  f146				   BurnAllHMove
    392  f146		       85 02		      STA	WSYNC	;3
    393  f148		       85 2a		      STA	HMOVE	; 3/10 
    394  f14a		       ca		      DEX
    395  f14b		       d0 f9		      BNE	BurnAllHMove
    396  f14d		       85 02		      STA	WSYNC	;3
    397  f14f		       85 2b		      STA	HMCLR	; 
    398  f151
    399  f151				   CountFrame
    400  f151		       e6 8c		      INC	FrameCount0	; 5
    401  f153		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    402  f155		       e6 8d		      INC	FrameCount1	; 5 
    403  f157				   SkipIncFC1
    404  f157
    405  f157				   CallDrawQrCode
    406  f157		       a5 c6		      LDA	GameMode
    407  f159		       c9 10		      CMP	#MAX_GAME_MODE
    408  f15b		       d0 03		      BNE	TestIsGameRunning
    409  f15d		       4c 64 fc 	      JMP	DrawQrCode
    410  f160
    411  f160							;Does not update the game if not running
    412  f160				   TestIsGameRunning
    413  f160		       a5 bd		      LDA	GameStatus	;3
    414  f162		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    415  f164				   SelectCarWithDpadCall		; Only do it when game is stoped
    416  f164		       a2 00		      LDX	#0	; Player 0
    417  f166		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    418  f168		       85 b0		      STA	Tmp0
    419  f16a		       20 6b fa 	      JSR	SelectCarWithDpad
    420  f16d		       e8		      INX		; Player 1
    421  f16e		       20 6b fa 	      JSR	SelectCarWithDpad
    422  f171
    423  f171				   CallConfigureCarSprites
    424  f171		       20 39 fa 	      JSR	ConfigureCarSprites
    425  f174				   SkipUpdateLogicJump
    426  f174		       4c 02 f3 	      JMP	SkipUpdateLogic
    427  f177				   ContinueWithGameLogic
    428  f177
    429  f177				   EverySecond		; 64 frames to be more precise
    430  f177		       a9 3f		      LDA	#%00111111
    431  f179		       25 8c		      AND	FrameCount0
    432  f17b		       d0 06		      BNE	SkipEverySecondAction
    433  f17d		       c5 b8		      CMP	CountdownTimer
    434  f17f		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    435  f181		       c6 b8		      DEC	CountdownTimer
    436  f183				   SkipEverySecondAction
    437  f183
    438  f183				   ChangeTextFlickerMode
    439  f183		       a5 bc		      LDA	SwitchDebounceCounter
    440  f185		       d0 0d		      BNE	EndChangeTextFlickerMode
    441  f187		       ad 82 02 	      LDA	SWCHB
    442  f18a		       29 02		      AND	#%00000010	;Game select
    443  f18c		       d0 06		      BNE	EndChangeTextFlickerMode
    444  f18e		       e6 f3		      INC	TextFlickerMode
    445  f190		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    446  f192		       85 bc		      STA	SwitchDebounceCounter
    447  f194				   EndChangeTextFlickerMode
    448  f194
    449  f194				   BreakOnTimeOver		; Uses LDX as the breaking speed
    450  f194		       a2 00		      LDX	#0
    451  f196		       a5 b8		      LDA	CountdownTimer
    452  f198		       d0 0b		      BNE	Break
    453  f19a		       a4 c7		      LDY	CurrentCarId
    454  f19c		       a5 8c		      LDA	FrameCount0
    455  f19e		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    456  f1a1		       d0 02		      BNE	Break
    457  f1a3		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    458  f1a5
    459  f1a5				   Break
    460  f1a5		       a9 20		      LDA	#%00100000	;Down in controller
    461  f1a7		       2c 80 02 	      BIT	SWCHA
    462  f1aa		       d0 0e		      BNE	BreakNonZero
    463  f1ac		       a5 0c		      LDA	INPT4	;3
    464  f1ae		       10 08		      BPL	BreakWhileAccelerating
    465  f1b0		       a4 f4		      LDY	Gear
    466  f1b2		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    467  f1b5		       4c ba f1 	      JMP	BreakNonZero
    468  f1b8				   BreakWhileAccelerating		; Allow better control while breaking.
    469  f1b8		       a2 05		      LDX	(#BREAK_SPEED / 2)
    470  f1ba
    471  f1ba				   BreakNonZero
    472  f1ba		       e0 00		      CPX	#0
    473  f1bc		       f0 2b		      BEQ	SkipBreak
    474  f1be		       86 b0		      STX	Tmp0
    475  f1c0
    476  f1c0				   DecreaseSpeed
    477  f1c0		       38		      SEC
    478  f1c1		       a5 8e		      LDA	Player0SpeedL
    479  f1c3		       e5 b0		      SBC	Tmp0
    480  f1c5		       85 8e		      STA	Player0SpeedL
    481  f1c7		       a5 8f		      LDA	Player0SpeedH
    482  f1c9		       e9 00		      SBC	#0
    483  f1cb		       85 8f		      STA	Player0SpeedH
    484  f1cd
    485  f1cd				   CheckMinSpeed
    486  f1cd		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    487  f1cf		       c9 00		      CMP	#CAR_MIN_SPEED_H
    488  f1d1		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    489  f1d3		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    490  f1d5
    491  f1d5				   CompareLBreakSpeed
    492  f1d5		       a5 8e		      LDA	Player0SpeedL
    493  f1d7		       c9 00		      CMP	#CAR_MIN_SPEED_L
    494  f1d9		       90 03		      BCC	ResetMinSpeed	; Less than memory
    495  f1db		       4c e6 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    496  f1de
    497  f1de				   ResetMinSpeed
    498  f1de		       a9 00		      LDA	#CAR_MIN_SPEED_H
    499  f1e0		       85 8f		      STA	Player0SpeedH
    500  f1e2		       a9 00		      LDA	#CAR_MIN_SPEED_L
    501  f1e4		       85 8e		      STA	Player0SpeedL
    502  f1e6
    503  f1e6				   SkipAccelerateIfBreaking
    504  f1e6		       4c 2b f2 	      JMP	SkipAccelerate
    505  f1e9				   SkipBreak
    506  f1e9
    507  f1e9				   Acelerates
    508  f1e9		       a5 b8		      LDA	CountdownTimer
    509  f1eb		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    510  f1ed
    511  f1ed				   ContinueAccelerateTest
    512  f1ed		       a5 0c		      LDA	INPT4	;3
    513  f1ef		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    514  f1f1		       a9 10		      LDA	#%00010000	;UP in controller
    515  f1f3		       2c 80 02 	      BIT	SWCHA
    516  f1f6		       d0 33		      BNE	SkipAccelerate
    517  f1f8
    518  f1f8				   IncreaseCarSpeed
    519  f1f8		       a2 02		      LDX	#2
    520  f1fa		       a4 c7		      LDY	CurrentCarId
    521  f1fc				   IncreaseCarSpeedLoop
    522  f1fc							;Adds speed
    523  f1fc		       18		      CLC
    524  f1fd		       a5 f1		      LDA	AccelerateBuffer
    525  f1ff		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    526  f202		       85 f1		      STA	AccelerateBuffer
    527  f204		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    528  f206		       e6 8e		      INC	Player0SpeedL
    529  f208		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    530  f20a		       e6 8f		      INC	Player0SpeedH
    531  f20c				   ContinueIncreaseSpeedLoop
    532  f20c		       ca		      DEX
    533  f20d		       d0 ed		      BNE	IncreaseCarSpeedLoop
    534  f20f				   SkipIncreaseCarSpeed
    535  f20f
    536  f20f				   CheckIfAlreadyMaxSpeed
    537  f20f		       a5 8f		      LDA	Player0SpeedH
    538  f211		       c9 02		      CMP	#CAR_MAX_SPEED_H
    539  f213		       90 16		      BCC	SkipAccelerate	; less than my max speed
    540  f215		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    541  f217							;High bit is max, compare the low
    542  f217		       a4 c7		      LDY	CurrentCarId
    543  f219		       a5 8e		      LDA	Player0SpeedL
    544  f21b		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    545  f21e		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    546  f220							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    547  f220
    548  f220				   ResetToMaxSpeed		; Speed is more, or is already max
    549  f220		       a9 02		      LDA	#CAR_MAX_SPEED_H
    550  f222		       85 8f		      STA	Player0SpeedH
    551  f224		       a4 c7		      LDY	CurrentCarId
    552  f226		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    553  f229		       85 8e		      STA	Player0SpeedL
    554  f22b				   SkipAccelerate
    555  f22b
    556  f22b				   InitUpdateOffsets
    557  f22b		       a2 00		      LDX	#0	; Memory Offset 24 bit
    558  f22d		       a0 00		      LDY	#0	; Line Speeds 16 bits
    559  f22f		       a5 91		      LDA	TrafficOffset0 + 1	;
    560  f231		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    561  f233		       a5 c6		      LDA	GameMode
    562  f235		       29 04		      AND	#%00000100	; GameModes with high delta
    563  f237		       f0 02		      BEQ	UpdateOffsets
    564  f239		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    565  f23b
    566  f23b				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    567  f23b		       38		      SEC
    568  f23c		       a5 8e		      LDA	Player0SpeedL
    569  f23e		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    570  f241		       85 b0		      STA	Tmp0
    571  f243		       c8		      INY
    572  f244		       a5 8f		      LDA	Player0SpeedH
    573  f246		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    574  f249		       85 b1		      STA	Tmp1
    575  f24b		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    576  f24d		       e9 00		      SBC	#0
    577  f24f		       85 b2		      STA	Tmp2
    578  f251
    579  f251				   AddsTheResult
    580  f251		       18		      CLC
    581  f252		       a5 b0		      LDA	Tmp0
    582  f254		       75 90		      ADC	TrafficOffset0,X
    583  f256		       95 90		      STA	TrafficOffset0,X
    584  f258		       e8		      INX
    585  f259		       a5 b1		      LDA	Tmp1
    586  f25b		       75 90		      ADC	TrafficOffset0,X
    587  f25d		       95 90		      STA	TrafficOffset0,X
    588  f25f		       e8		      INX
    589  f260		       a5 b2		      LDA	Tmp2	; Carry
    590  f262		       75 90		      ADC	TrafficOffset0,X
    591  f264		       95 90		      STA	TrafficOffset0,X
    592  f266		       90 06		      BCC	CalculateOffsetCache
    593  f268		       e0 02		      CPX	#2	;MSB offset 0
    594  f26a		       d0 02		      BNE	CalculateOffsetCache
    595  f26c		       e6 ba		      INC	Traffic0Msb
    596  f26e
    597  f26e				   CalculateOffsetCache
    598  f26e		       e8		      INX
    599  f26f		       38		      SEC
    600  f270		       69 00		      ADC	#0	;Increment by one
    601  f272		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    602  f274
    603  f274				   PrepareNextUpdateLoop
    604  f274		       c8		      INY
    605  f275		       e8		      INX
    606  f276		       e0 10		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    607  f278		       d0 c1		      BNE	UpdateOffsets
    608  f27a
    609  f27a				   ConfigureOpponentLine		; Temporary
    610  f27a		       a9 14		      LDA	#20	; Extract to constant
    611  f27c		       85 d8		      STA	OpponentLine
    612  f27e
    613  f27e
    614  f27e							;Until store the movemnt, LDX contains the value to be stored.
    615  f27e				   TestCollision		;
    616  f27e							; see if player0 colides with the rest
    617  f27e		       a5 00		      LDA	CXM0P
    618  f280		       05 01		      ORA	CXM1P
    619  f282		       05 02		      ORA	CXP0FB
    620  f284		       05 07		      ORA	CXPPMM
    621  f286		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    622  f288		       f0 29		      BEQ	NoCollision	;skip if not hitting...
    623  f28a		       a5 b4		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    624  f28c		       d0 25		      BNE	NoCollision
    625  f28e		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    626  f290		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    627  f292		       f0 1f		      BEQ	NoCollision
    628  f294		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    629  f296		       f0 1b		      BEQ	NoCollision
    630  f298		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    631  f29a		       85 b4		      STA	CollisionCounter	;and store as colision.
    632  f29c		       a5 8f		      LDA	Player0SpeedH
    633  f29e		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    634  f2a0		       a9 10		      LDA	#COLLISION_SPEED_L
    635  f2a2		       c5 8e		      CMP	Player0SpeedL
    636  f2a4		       b0 04		      BCS	SkipSetColisionSpeedL
    637  f2a6				   SetColisionSpeedL
    638  f2a6		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    639  f2a8		       85 8e		      STA	Player0SpeedL
    640  f2aa				   SkipSetColisionSpeedL
    641  f2aa		       a9 00		      LDA	#0
    642  f2ac		       85 8f		      STA	Player0SpeedH
    643  f2ae		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    644  f2b0		       4c fe f2 	      JMP	StoreHMove	; We keep position consistent
    645  f2b3				   NoCollision
    646  f2b3
    647  f2b3				   DecrementCollision
    648  f2b3		       a4 b4		      LDY	CollisionCounter
    649  f2b5		       f0 07		      BEQ	FinishDecrementCollision
    650  f2b7		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    651  f2b9		       85 04		      STA	NUSIZ0
    652  f2bb		       88		      DEY
    653  f2bc		       84 b4		      STY	CollisionCounter	; We save some cycles in reset size.
    654  f2be				   FinishDecrementCollision
    655  f2be
    656  f2be				   ResetPlayerSize
    657  f2be		       d0 04		      BNE	FinishResetPlayerSize
    658  f2c0		       a9 30		      LDA	#%00110000
    659  f2c2		       85 04		      STA	NUSIZ0	;
    660  f2c4				   FinishResetPlayerSize
    661  f2c4
    662  f2c4							;STA HMCLR ; Do not double move car.
    663  f2c4
    664  f2c4				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    665  f2c4		       c0 01		      CPY	#1	; Last frame before reset
    666  f2c6		       d0 05		      BNE	SkipResetPlayerPosition
    667  f2c8		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    668  f2ca		       4c fe f2 	      JMP	StoreHMove
    669  f2cd				   SkipResetPlayerPosition
    670  f2cd
    671  f2cd				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    672  f2cd		       a5 c7		      LDA	CurrentCarId
    673  f2cf		       c9 03		      CMP	#CAR_ID_DRAGSTER
    674  f2d1		       d0 08		      BNE	PrepareReadXAxis
    675  f2d3		       a2 00		      LDX	#0
    676  f2d5		       a5 8c		      LDA	FrameCount0
    677  f2d7		       29 01		      AND	#DRAGSTER_TURN_MASK
    678  f2d9		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    679  f2db
    680  f2db							; for left and right, we're gonna 
    681  f2db							; set the horizontal speed, and then do
    682  f2db							; a single HMOVE.  We'll use X to hold the
    683  f2db							; horizontal speed, then store it in the 
    684  f2db							; appropriate register
    685  f2db				   PrepareReadXAxis
    686  f2db		       a2 00		      LDX	#0
    687  f2dd		       a4 b6		      LDY	Player0X
    688  f2df				   BeginReadLeft
    689  f2df		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    690  f2e1		       a9 40		      LDA	#%01000000	;Left
    691  f2e3		       2c 80 02 	      BIT	SWCHA
    692  f2e6		       d0 07		      BNE	SkipMoveLeft
    693  f2e8		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    694  f2ea		       c6 b6		      DEC	Player0X
    695  f2ec		       4c fe f2 	      JMP	StoreHMove	; Cannot move left and right...
    696  f2ef				   SkipMoveLeft
    697  f2ef				   BeginReadRight
    698  f2ef		       c0 2c		      CPY	#PLAYER_0_MAX_X
    699  f2f1		       f0 0b		      BEQ	SkipMoveRight	; At max already
    700  f2f3		       a9 80		      LDA	#%10000000	;Right
    701  f2f5		       2c 80 02 	      BIT	SWCHA
    702  f2f8		       d0 04		      BNE	SkipMoveRight
    703  f2fa		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    704  f2fc		       e6 b6		      INC	Player0X
    705  f2fe				   SkipMoveRight
    706  f2fe				   StoreHMove
    707  f2fe		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    708  f300
    709  f300				   ClearCollision
    710  f300		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    711  f302
    712  f302				   SkipUpdateLogic		; Continue here if not paused
    713  f302
    714  f302				   CalculateGear
    715  f302		       a5 8e		      LDA	Player0SpeedL	;3
    716  f304		       29 80		      AND	#%10000000	;2
    717  f306		       05 8f		      ORA	Player0SpeedH	;3
    718  f308		       18		      CLC		;2
    719  f309		       2a		      ROL		;2
    720  f30a		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    721  f30c		       85 f4		      STA	Gear
    722  f30e
    723  f30e				   EndProcessingBorder
    724  f30e
    725  f30e				   ProcessScoreFontColor
    726  f30e		       a6 d6		      LDX	ScoreFontColorHoldChange
    727  f310		       f0 06		      BEQ	ResetScoreFontColor
    728  f312		       ca		      DEX
    729  f313		       86 d6		      STX	ScoreFontColorHoldChange
    730  f315		       4c 1c f3 	      JMP	SkipScoreFontColor
    731  f318				   ResetScoreFontColor
    732  f318		       a9 f9		      LDA	#SCORE_FONT_COLOR
    733  f31a		       85 d5		      STA	ScoreFontColor
    734  f31c				   SkipScoreFontColor
    735  f31c
    736  f31c				   IsGameOver
    737  f31c		       a5 b8		      LDA	CountdownTimer
    738  f31e		       05 8e		      ORA	Player0SpeedL
    739  f320		       05 8f		      ORA	Player0SpeedH
    740  f322		       d0 0b		      BNE	IsCheckpoint
    741  f324		       a9 01		      LDA	#1
    742  f326		       85 d6		      STA	ScoreFontColorHoldChange
    743  f328		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    744  f32a		       85 d5		      STA	ScoreFontColor
    745  f32c		       4c 61 f3 	      JMP	SkipIsTimeOver
    746  f32f
    747  f32f				   IsCheckpoint
    748  f32f		       a5 d7		      LDA	NextCheckpoint
    749  f331		       c5 92		      CMP	TrafficOffset0 + 2
    750  f333		       d0 20		      BNE	SkipIsCheckpoint
    751  f335		       18		      CLC
    752  f336		       69 10		      ADC	#CHECKPOINT_INTERVAL
    753  f338		       85 d7		      STA	NextCheckpoint
    754  f33a		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    755  f33c		       85 d5		      STA	ScoreFontColor
    756  f33e		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    757  f340		       85 d6		      STA	ScoreFontColorHoldChange
    758  f342		       a5 b8		      LDA	CountdownTimer
    759  f344		       18		      CLC
    760  f345		       65 c0		      ADC	CheckpointTime
    761  f347		       85 b8		      STA	CountdownTimer
    762  f349		       90 04		      BCC	JumpSkipTimeOver
    763  f34b		       a9 ff		      LDA	#$FF
    764  f34d		       85 b8		      STA	CountdownTimer	; Does not overflow!
    765  f34f				   JumpSkipTimeOver
    766  f34f		       20 c2 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    767  f352		       4c 61 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    768  f355				   SkipIsCheckpoint
    769  f355
    770  f355				   IsTimeOver
    771  f355		       a5 b8		      LDA	CountdownTimer
    772  f357		       d0 08		      BNE	SkipIsTimeOver
    773  f359		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    774  f35b		       85 d6		      STA	ScoreFontColorHoldChange
    775  f35d		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    776  f35f		       85 d5		      STA	ScoreFontColor
    777  f361				   SkipIsTimeOver
    778  f361
    779  f361		       20 39 fa 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    780  f364
    781  f364				   PrintEasterEggCondition
    782  f364		       a5 8d		      LDA	FrameCount1
    783  f366		       29 38		      AND	#%00111000
    784  f368		       05 bd		      ORA	GameStatus
    785  f36a		       c9 38		      CMP	#%00111000
    786  f36c		       d0 06		      BNE	ChooseTextSide
    787  f36e		       20 2f f8 	      JSR	PrintEasterEgg
    788  f371		       4c 63 f4 	      JMP	RightScoreWriteEnd
    789  f374
    790  f374							;Could be done during on vblank to save this comparisson time (before draw score), 
    791  f374							;but I am saving vblank cycles for now, in case of 2 players.
    792  f374				   ChooseTextSide		; 
    793  f374		       a5 f2		      LDA	TextSide	;3
    794  f376		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    795  f378		       4c f9 f3 	      JMP	RightScoreWrite
    796  f37b
    797  f37b				   LeftScoreWrite
    798  f37b		       a5 d5		      LDA	ScoreFontColor
    799  f37d		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    800  f37f		       f0 4e		      BEQ	PrintCheckpoint
    801  f381		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    802  f383		       f0 52		      BEQ	PrintStartGame
    803  f385		       a5 bd		      LDA	GameStatus
    804  f387		       f0 56		      BEQ	PrintHellwayLeft
    805  f389				   WriteDistance		;Not optimized yet, ugly code.
    806  f389				   Digit0Distance
    807  f389		       a5 91		      LDA	TrafficOffset0 + 1	;3
    808  f38b		       4a		      LSR		; 2
    809  f38c		       4a		      LSR		; 2
    810  f38d		       4a		      LSR		; 2
    811  f38e		       4a		      LSR		; 2
    812  f38f		       aa		      TAX		; 2
    813  f390		       bd be fd 	      LDA	FontLookup,X	;4
    814  f393		       85 d3		      STA	ScoreD3	;3
    815  f395
    816  f395				   Digit1Distance
    817  f395		       a5 92		      LDA	TrafficOffset0 + 2	;3
    818  f397		       29 0f		      AND	#%00001111	;2
    819  f399		       aa		      TAX		; 2
    820  f39a		       bd be fd 	      LDA	FontLookup,X	;4 
    821  f39d		       85 d2		      STA	ScoreD2	;3
    822  f39f
    823  f39f				   Digit2Distance
    824  f39f		       a5 92		      LDA	TrafficOffset0 + 2	;3
    825  f3a1		       4a		      LSR		; 2
    826  f3a2		       4a		      LSR		; 2
    827  f3a3		       4a		      LSR		; 2
    828  f3a4		       4a		      LSR		; 2
    829  f3a5		       aa		      TAX		; 2
    830  f3a6		       bd be fd 	      LDA	FontLookup,X	;4
    831  f3a9		       85 d1		      STA	ScoreD1	;3
    832  f3ab
    833  f3ab				   Digit3Distance
    834  f3ab		       a5 ba		      LDA	Traffic0Msb	;3
    835  f3ad		       29 0f		      AND	#%00001111	;2
    836  f3af		       aa		      TAX		; 2
    837  f3b0		       bd be fd 	      LDA	FontLookup,X	;4 
    838  f3b3		       85 d0		      STA	ScoreD0	;3
    839  f3b5
    840  f3b5				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    841  f3b5		       a5 ba		      LDA	Traffic0Msb
    842  f3b7		       29 f0		      AND	#%11110000	;2
    843  f3b9		       d0 07		      BNE	DrawDistanceExtraDigit
    844  f3bb		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    845  f3bd		       85 d4		      STA	ScoreD4	;3
    846  f3bf		       4c cc f3 	      JMP	EndDrawDistance
    847  f3c2				   DrawDistanceExtraDigit
    848  f3c2		       4a		      LSR		; 2
    849  f3c3		       4a		      LSR		; 2
    850  f3c4		       4a		      LSR		; 2
    851  f3c5		       4a		      LSR		; 2
    852  f3c6		       aa		      TAX		; 2
    853  f3c7		       bd be fd 	      LDA	FontLookup,X	;4
    854  f3ca		       85 d4		      STA	ScoreD4	;3
    855  f3cc
    856  f3cc				   EndDrawDistance
    857  f3cc		       4c 63 f4 	      JMP	RightScoreWriteEnd	;3
    858  f3cf
    859  f3cf				   PrintCheckpoint
    860  f3cf		       a2 00		      LDX	#<CheckpointText
    861  f3d1		       20 11 f8 	      JSR	PrintStaticText
    862  f3d4		       4c 63 f4 	      JMP	RightScoreWriteEnd	;3
    863  f3d7				   PrintStartGame
    864  f3d7		       a2 23		      LDX	#<GoText
    865  f3d9		       20 11 f8 	      JSR	PrintStaticText
    866  f3dc		       4c 63 f4 	      JMP	RightScoreWriteEnd	;3
    867  f3df
    868  f3df				   PrintHellwayLeft
    869  f3df		       a5 8d		      LDA	FrameCount1
    870  f3e1		       29 01		      AND	#1
    871  f3e3		       d0 05		      BNE	PrintCreditsLeft
    872  f3e5		       a2 05		      LDX	#<HellwayLeftText
    873  f3e7		       4c ec f3 	      JMP	PrintGameMode
    874  f3ea				   PrintCreditsLeft
    875  f3ea		       a2 0f		      LDX	#<OpbText
    876  f3ec
    877  f3ec				   PrintGameMode
    878  f3ec		       20 11 f8 	      JSR	PrintStaticText
    879  f3ef		       a6 c6		      LDX	GameMode
    880  f3f1		       bd be fd 	      LDA	FontLookup,X	;4 
    881  f3f4		       85 d0		      STA	ScoreD0	;3
    882  f3f6		       4c 63 f4 	      JMP	RightScoreWriteEnd	;3
    883  f3f9
    884  f3f9				   RightScoreWrite
    885  f3f9		       a5 bd		      LDA	GameStatus
    886  f3fb		       f0 45		      BEQ	PrintHellwayRight
    887  f3fd		       a5 d5		      LDA	ScoreFontColor
    888  f3ff		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    889  f401		       f0 52		      BEQ	PrintGameOver
    890  f403				   Digit0Timer
    891  f403		       a5 b8		      LDA	CountdownTimer	;3
    892  f405		       29 0f		      AND	#%00001111	;2
    893  f407		       aa		      TAX		; 2
    894  f408		       bd be fd 	      LDA	FontLookup,X	;4 
    895  f40b		       85 d1		      STA	ScoreD1	;3
    896  f40d
    897  f40d				   Digit1Timer
    898  f40d		       a5 b8		      LDA	CountdownTimer	;3
    899  f40f		       4a		      LSR		; 2
    900  f410		       4a		      LSR		; 2
    901  f411		       4a		      LSR		; 2
    902  f412		       4a		      LSR		; 2
    903  f413		       aa		      TAX		; 2
    904  f414		       bd be fd 	      LDA	FontLookup,X	;4
    905  f417		       85 d0		      STA	ScoreD0	;3
    906  f419
    907  f419		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    908  f41b		       85 d2		      STA	ScoreD2	;3
    909  f41d
    910  f41d				   Digit0Speed
    911  f41d		       a5 8e		      LDA	Player0SpeedL
    912  f41f		       29 3c		      AND	#%00111100	;2 Discard the last bits
    913  f421		       4a		      LSR		; 2
    914  f422		       4a		      LSR		; 2
    915  f423		       aa		      TAX		; 2
    916  f424		       bd be fd 	      LDA	FontLookup,X	;4
    917  f427		       85 d4		      STA	ScoreD4	;3
    918  f429
    919  f429				   Digit1Speed
    920  f429		       a5 8e		      LDA	Player0SpeedL
    921  f42b		       29 c0		      AND	#%11000000	;2 Discard the last bits
    922  f42d		       18		      CLC
    923  f42e		       2a		      ROL		;First goes into carry
    924  f42f		       2a		      ROL
    925  f430		       2a		      ROL
    926  f431		       85 b0		      STA	Tmp0
    927  f433		       a5 8f		      LDA	Player0SpeedH
    928  f435		       0a		      ASL
    929  f436		       0a		      ASL
    930  f437		       05 b0		      ORA	Tmp0
    931  f439		       aa		      TAX		; 2
    932  f43a		       bd be fd 	      LDA	FontLookup,X	;4
    933  f43d		       85 d3		      STA	ScoreD3	;3
    934  f43f		       4c 63 f4 	      JMP	RightScoreWriteEnd
    935  f442
    936  f442				   PrintHellwayRight
    937  f442		       a5 8d		      LDA	FrameCount1
    938  f444		       29 01		      AND	#1
    939  f446		       d0 05		      BNE	PrintCreditsRight
    940  f448		       a2 0a		      LDX	#<HellwayRightText
    941  f44a		       4c 4f f4 	      JMP	PrintRightIntro
    942  f44d				   PrintCreditsRight
    943  f44d		       a2 14		      LDX	#<YearText
    944  f44f				   PrintRightIntro
    945  f44f		       20 11 f8 	      JSR	PrintStaticText
    946  f452		       4c 63 f4 	      JMP	RightScoreWriteEnd
    947  f455				   PrintGameOver
    948  f455		       a5 8c		      LDA	FrameCount0
    949  f457		       30 05		      BMI	PrintOverText
    950  f459		       a2 19		      LDX	#<GameText
    951  f45b		       4c 60 f4 	      JMP	StoreGameOverText
    952  f45e				   PrintOverText
    953  f45e		       a2 1e		      LDX	#<OverText
    954  f460				   StoreGameOverText
    955  f460		       20 11 f8 	      JSR	PrintStaticText
    956  f463				   RightScoreWriteEnd
    957  f463
    958  f463
    959  f463				   ScoreBackgroundColor
    960  f463		       a2 00		      LDX	#0
    961  f465		       ad 82 02 	      LDA	SWCHB
    962  f468		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    963  f46a		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    964  f46c		       f0 04		      BEQ	BlackAndWhiteScoreBg
    965  f46e		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    966  f470		       a2 03		      LDX	#BACKGROUND_COLOR
    967  f472				   BlackAndWhiteScoreBg
    968  f472		       85 b2		      STA	Tmp2	; Score Background
    969  f474		       86 b3		      STX	Tmp3	; Traffic Background
    970  f476
    971  f476				   ConfigurePFForScore
    972  f476							;LDA #SCORE_BACKGROUND_COLOR; Done above
    973  f476		       85 09		      STA	COLUBK
    974  f478		       20 84 f7 	      JSR	ClearAll
    975  f47b		       a9 02		      LDA	#%00000010	; Score mode
    976  f47d		       85 0a		      STA	CTRLPF
    977  f47f		       a5 f2		      LDA	TextSide	;3
    978  f481		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    979  f483				   LeftScoreOn
    980  f483		       a5 d5		      LDA	ScoreFontColor
    981  f485		       85 07		      STA	COLUP1
    982  f487		       a5 b2		      LDA	Tmp2
    983  f489		       85 06		      STA	COLUP0
    984  f48b		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    985  f48d		       85 b1		      STA	Tmp1
    986  f48f		       4c 9e f4 	      JMP	CallWaitForVblankEnd
    987  f492				   RightScoreOn
    988  f492		       a5 d5		      LDA	ScoreFontColor
    989  f494		       85 06		      STA	COLUP0
    990  f496		       a5 b2		      LDA	Tmp2
    991  f498		       85 07		      STA	COLUP1
    992  f49a		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    993  f49c		       85 b1		      STA	Tmp1
    994  f49e
    995  f49e							; After here we are going to update the screen, No more heavy code
    996  f49e				   CallWaitForVblankEnd
    997  f49e		       20 12 fa 	      JSR	WaitForVblankEnd
    998  f4a1
    999  f4a1				   DrawScoreHud
   1000  f4a1		       20 a1 f8 	      JSR	PrintScore
   1001  f4a4
   1002  f4a4		       85 02		      STA	WSYNC
   1003  f4a6
   1004  f4a6		       a5 0c		      LDA	INPT4	;3
   1005  f4a8		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1006  f4aa		       a5 d5		      LDA	ScoreFontColor
   1007  f4ac		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1008  f4ae		       d0 0a		      BNE	WaitAnotherScoreLine
   1009  f4b0		       a5 f2		      LDA	TextSide	;3
   1010  f4b2		       d0 03		      BNE	LeftScoreOnGameOver
   1011  f4b4		       4c ec f9 	      JMP	DrawGameOverScreenRight
   1012  f4b7				   LeftScoreOnGameOver
   1013  f4b7		       4c 5e f9 	      JMP	DrawGameOverScreenLeft
   1014  f4ba
   1015  f4ba				   WaitAnotherScoreLine
   1016  f4ba		       85 02		      STA	WSYNC
   1017  f4bc
   1018  f4bc				   PrepareForTraffic
   1019  f4bc		       20 96 f7 	      JSR	ClearPF	; 32
   1020  f4bf
   1021  f4bf		       85 02		      STA	WSYNC
   1022  f4c1		       85 02		      STA	WSYNC
   1023  f4c3
   1024  f4c3		       a9 30		      LDA	#%00110000	; 2 Score mode
   1025  f4c5		       85 0a		      STA	CTRLPF	;3
   1026  f4c7
   1027  f4c7		       a5 c2		      LDA	TrafficColor	;3
   1028  f4c9		       85 08		      STA	COLUPF	;3
   1029  f4cb
   1030  f4cb		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1031  f4cd		       85 07		      STA	COLUP1	;3
   1032  f4cf
   1033  f4cf		       a5 d5		      LDA	ScoreFontColor	;3
   1034  f4d1		       85 06		      STA	COLUP0	;3
   1035  f4d3
   1036  f4d3		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1037  f4d5
   1038  f4d5		       20 96 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1039  f4d8
   1040  f4d8		       a6 b3		      LDX	Tmp3	; Background color.
   1041  f4da
      0  f4da					      SLEEP	9	; Odd sleep destroys flags
      1  f4da				   .CYCLES    SET	9
      2  f4da
      3  f4da				  -	      IF	.CYCLES < 2
      4  f4da				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4da				  -	      ERR
      6  f4da					      ENDIF
      7  f4da
      8  f4da					      IF	.CYCLES & 1
      9  f4da				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4da				  -	      nop	0
     11  f4da					      ELSE
     12  f4da		       24 00		      bit	VSYNC
     13  f4dc					      ENDIF
     14  f4dc				   .CYCLES    SET	.CYCLES - 3
     15  f4dc					      ENDIF
     16  f4dc
     17  f4dc					      REPEAT	.CYCLES / 2
     18  f4dc		       ea		      nop
     17  f4dc					      REPEND
     18  f4dd		       ea		      nop
     17  f4dd					      REPEND
     18  f4de		       ea		      nop
     19  f4df					      REPEND
   1043  f4df
   1044  f4df		       a5 8c		      LDA	FrameCount0	;Brach flag
   1045  f4e1		       29 01		      AND	#%00000001
   1046  f4e3
   1047  f4e3		       86 09		      STX	COLUBK	;3
   1048  f4e5		       d0 05		      BNE	OpDrawCache	;2
   1049  f4e7		       4c a6 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1050  f4ea							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1051  f4ea
   1052  f4ea							;main scanline loop...
   1053  f4ea				   OpScanLoop
   1054  f4ea		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1055  f4ec
   1056  f4ec							;Start of next line!			
   1057  f4ec				   OpDrawCache		;63 Is the last line going to the top of the next frame?
   1058  f4ec
   1059  f4ec		       a5 80		      LDA	GRP0Cache	;3
   1060  f4ee		       85 1b		      STA	GRP0	;3
   1061  f4f0
   1062  f4f0		       a5 84		      LDA	GRP1Cache	;3
   1063  f4f2		       85 1c		      STA	GRP1	;3
   1064  f4f4
   1065  f4f4		       a5 85		      LDA	ENABLCache	;3
   1066  f4f6		       85 1f		      STA	ENABL	;3
   1067  f4f8
   1068  f4f8		       a5 86		      LDA	ENAM0Cache	;3
   1069  f4fa		       85 1d		      STA	ENAM0	;3
   1070  f4fc
   1071  f4fc		       a5 87		      LDA	ENAM1Cache	;3
   1072  f4fe		       85 1e		      STA	ENAM1	;3
   1073  f500
   1074  f500		       a5 81		      LDA	PF0Cache	;3
   1075  f502		       85 0d		      STA	PF0	;3
   1076  f504
   1077  f504		       a9 00		      LDA	#0	;2
   1078  f506							;STA PF0	     ;3
   1079  f506		       85 80		      STA	GRP0Cache	;3
   1080  f508		       85 86		      STA	ENAM0Cache	;3
   1081  f50a		       85 85		      STA	ENABLCache	;3
   1082  f50c		       85 87		      STA	ENAM1Cache	; 3
   1083  f50e							;STA GRP1Cache ;3
   1084  f50e		       85 0d		      STA	PF0	;3
   1085  f510							;STA PF2	     ;3
   1086  f510
   1087  f510		       a5 83		      LDA	PF2Cache	;3
   1088  f512		       85 0f		      STA	PF2	;3
   1089  f514
   1090  f514				   OpDrawCar0
   1091  f514		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1092  f516		       b0 04		      BCS	OpSkipDrawCar	;2
   1093  f518		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1094  f51a		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
   1095  f51c				   OpSkipDrawCar
   1096  f51c
   1097  f51c							;BEQ DrawTraffic3
   1098  f51c				   OpDrawTraffic1		; 33
   1099  f51c		       98		      TYA		; 2
   1100  f51d		       18		      CLC		; 2 
   1101  f51e		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
   1102  f520		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1103  f522		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1104  f524		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
   1105  f526		       4c 2b f5 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1106  f529				   OpEorOffsetWithCarry
   1107  f529		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1108  f52b				   OpAfterEorOffsetWithCarry		;17
   1109  f52b		       aa		      TAX		;2
   1110  f52c		       bd 00 fe 	      LDA	AesTable,X	; 4
   1111  f52f		       c5 be		      CMP	TrafficChance	;3
   1112  f531		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1113  f533		       a9 ff		      LDA	#$FF	;2
   1114  f535		       85 86		      STA	ENAM0Cache	;3
   1115  f537				   OpFinishDrawTraffic1
   1116  f537
   1117  f537				   OpErasePF2
   1118  f537		       a9 00		      LDA	#0
   1119  f539		       85 0f		      STA	PF2
   1120  f53b
   1121  f53b				   OpDrawTraffic2		; 33
   1122  f53b		       98		      TYA		; 2
   1123  f53c		       18		      CLC		; 2 
   1124  f53d		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
   1125  f53f		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1126  f541		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1127  f543		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
   1128  f545		       4c 4a f5 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1129  f548				   OpEorOffsetWithCarry2
   1130  f548		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1131  f54a				   OpAfterEorOffsetWithCarry2		;17
   1132  f54a		       aa		      TAX		;2
   1133  f54b		       bd 00 fe 	      LDA	AesTable,X	; 4
   1134  f54e		       c5 be		      CMP	TrafficChance	;3
   1135  f550		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1136  f552		       a9 02		      LDA	#%00000010	;2
   1137  f554		       85 85		      STA	ENABLCache	;3
   1138  f556				   OpFinishDrawTraffic2
   1139  f556
   1140  f556							;STA WSYNC ;65 / 137
   1141  f556
   1142  f556							; LDA Tmp0 ; Flicker this line if drawing car
   1143  f556							; BEQ FinishDrawTraffic4
   1144  f556				   OpDrawTraffic3		; 33
   1145  f556		       98		      TYA		; 2
   1146  f557		       18		      CLC		; 2 
   1147  f558		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
   1148  f55a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1149  f55c		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1150  f55e		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
   1151  f560		       4c 65 f5 	      JMP	OpAfterEorOffsetWithCarry3	; 3
   1152  f563				   OpEorOffsetWithCarry3
   1153  f563		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1154  f565				   OpAfterEorOffsetWithCarry3		;17
   1155  f565		       aa		      TAX		;2
   1156  f566		       bd 00 fe 	      LDA	AesTable,X	; 4
   1157  f569		       c5 be		      CMP	TrafficChance	;3
   1158  f56b		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1159  f56d		       a9 02		      LDA	#%00000010	;2
   1160  f56f		       85 87		      STA	ENAM1Cache
   1161  f571				   OpFinishDrawTraffic3
   1162  f571
   1163  f571				   OpDrawOponent		;26
   1164  f571		       84 b0		      STY	Tmp0	;3
   1165  f573		       a4 d8		      LDY	OpponentLine	;3
   1166  f575		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1167  f577		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1168  f579				   OpDrawOpponent
   1169  f579		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1170  f57b		       85 80		      STA	GRP0Cache	;3
   1171  f57d		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1172  f57f		       a4 b0		      LDY	Tmp0	;3
   1173  f581		       4c 95 f5 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
   1174  f584				   OpSkipDrawOpponent
   1175  f584		       c6 d8		      DEC	OpponentLine	;5
   1176  f586		       a4 b0		      LDY	Tmp0	;3
   1177  f588
   1178  f588
   1179  f588				   OpDrawTraffic0		; 21 2pe
   1180  f588		       98		      TYA		; 2
   1181  f589		       18		      CLC		; 2 
   1182  f58a		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1183  f58c		       29 08		      AND	#%00001000	;2
   1184  f58e		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1185  f590				   OpHasBorderP0
   1186  f590		       a9 70		      LDA	#%01110000	; 2
   1187  f592		       4c 97 f5 	      JMP	OpStoreBorderP0	; 3
   1188  f595				   OpHasNoBorderP0
   1189  f595		       a9 00		      LDA	#0	; 2
   1190  f597				   OpStoreBorderP0
   1191  f597		       85 81		      STA	PF0Cache	; 3
   1192  f599		       85 83		      STA	PF2Cache	; 3
   1193  f59b
   1194  f59b				   OpSkipDrawTraffic0
   1195  f59b
   1196  f59b				   OpWhileScanLoop
   1197  f59b		       88		      DEY		;2
   1198  f59c		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1199  f59e		       4c ea f4 	      JMP	OpScanLoop	;3
   1200  f5a1				   OpFinishScanLoop		; 7 209 of 222
   1201  f5a1		       4c 59 f6 	      JMP	FinishScanLoop
   1202  f5a4
   1203  f5a4							;main scanline loop...
   1204  f5a4				   ScanLoop
   1205  f5a4		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1206  f5a6
   1207  f5a6							;Start of next line!			
   1208  f5a6				   DrawCache		;63 Is the last line going to the top of the next frame?
   1209  f5a6		       a5 81		      LDA	PF0Cache	;3
   1210  f5a8		       85 0d		      STA	PF0	;3
   1211  f5aa
   1212  f5aa		       a5 80		      LDA	GRP0Cache	;3
   1213  f5ac		       85 1b		      STA	GRP0	;3
   1214  f5ae
   1215  f5ae		       a5 84		      LDA	GRP1Cache	;3
   1216  f5b0		       85 1c		      STA	GRP1	;3
   1217  f5b2
   1218  f5b2		       a5 86		      LDA	ENAM0Cache	;3
   1219  f5b4		       85 1d		      STA	ENAM0	;3
   1220  f5b6
   1221  f5b6		       a5 85		      LDA	ENABLCache	;3
   1222  f5b8		       85 1f		      STA	ENABL	;3
   1223  f5ba
   1224  f5ba		       a5 87		      LDA	ENAM1Cache	;3
   1225  f5bc		       85 1e		      STA	ENAM1	;3
   1226  f5be
   1227  f5be		       a5 83		      LDA	PF2Cache	;3
   1228  f5c0		       85 0f		      STA	PF2	;3
   1229  f5c2
   1230  f5c2		       a9 00		      LDA	#0	;2
   1231  f5c4		       85 0d		      STA	PF0	;3
   1232  f5c6		       85 84		      STA	GRP1Cache	;3
   1233  f5c8		       85 85		      STA	ENABLCache	;3
   1234  f5ca		       85 86		      STA	ENAM0Cache	;3
   1235  f5cc		       85 87		      STA	ENAM1Cache	; 3
   1236  f5ce							;STA GRP0Cache
   1237  f5ce		       85 0f		      STA	PF2	;3
   1238  f5d0
   1239  f5d0				   DrawCar0
   1240  f5d0		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1241  f5d2		       b0 04		      BCS	SkipDrawCar	;2
   1242  f5d4		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1243  f5d6		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1244  f5d8				   SkipDrawCar
   1245  f5d8
   1246  f5d8							;BEQ DrawTraffic3
   1247  f5d8				   DrawTraffic1 		; 33
   1248  f5d8		       98		      TYA		; 2
   1249  f5d9		       18		      CLC		; 2 
   1250  f5da		       65 95		      ADC	TrafficOffset1 + 1	;3
   1251  f5dc		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1252  f5de		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1253  f5e0		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1254  f5e2		       4c e7 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1255  f5e5				   EorOffsetWithCarry
   1256  f5e5		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1257  f5e7				   AfterEorOffsetWithCarry		;17
   1258  f5e7		       aa		      TAX		;2
   1259  f5e8		       bd 00 fe 	      LDA	AesTable,X	; 4
   1260  f5eb		       c5 be		      CMP	TrafficChance	;3
   1261  f5ed		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1262  f5ef		       a9 ff		      LDA	#$FF	;2
   1263  f5f1		       85 86		      STA	ENAM0Cache	;3
   1264  f5f3				   FinishDrawTraffic1
   1265  f5f3
   1266  f5f3				   DrawTraffic2 		; 33
   1267  f5f3		       98		      TYA		; 2
   1268  f5f4		       18		      CLC		; 2 
   1269  f5f5		       65 99		      ADC	TrafficOffset2 + 1	;3
   1270  f5f7		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1271  f5f9		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1272  f5fb		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1273  f5fd		       4c 02 f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1274  f600				   EorOffsetWithCarry2
   1275  f600		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1276  f602				   AfterEorOffsetWithCarry2		;17
   1277  f602		       aa		      TAX		;2
   1278  f603		       bd 00 fe 	      LDA	AesTable,X	; 4
   1279  f606		       c5 be		      CMP	TrafficChance	;3
   1280  f608		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1281  f60a		       a9 02		      LDA	#%00000010	;2
   1282  f60c		       85 85		      STA	ENABLCache	;3
   1283  f60e				   FinishDrawTraffic2
   1284  f60e
   1285  f60e							;STA WSYNC ;65 / 137
   1286  f60e
   1287  f60e							; LDA Tmp0 ; Flicker this line if drawing car
   1288  f60e							; BEQ FinishDrawTraffic4
   1289  f60e				   DrawTraffic3 		; 33
   1290  f60e		       98		      TYA		; 2
   1291  f60f		       18		      CLC		; 2 
   1292  f610		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1293  f612		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1294  f614		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1295  f616		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1296  f618		       4c 1d f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1297  f61b				   EorOffsetWithCarry3
   1298  f61b		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1299  f61d				   AfterEorOffsetWithCarry3		;17
   1300  f61d		       aa		      TAX		;2
   1301  f61e		       bd 00 fe 	      LDA	AesTable,X	; 4
   1302  f621		       c5 be		      CMP	TrafficChance	;3
   1303  f623		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1304  f625		       a9 02		      LDA	#%00000010	;2
   1305  f627		       85 87		      STA	ENAM1Cache
   1306  f629				   FinishDrawTraffic3
   1307  f629
   1308  f629
   1309  f629				   DrawOponent		;26
   1310  f629		       84 b0		      STY	Tmp0	;3
   1311  f62b		       a4 d8		      LDY	OpponentLine	;3
   1312  f62d		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1313  f62f		       b0 0b		      BCS	SkipDrawOpponent	;2
   1314  f631				   DrawOpponent
   1315  f631		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1316  f633		       85 84		      STA	GRP1Cache	;3
   1317  f635		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1318  f637		       a4 b0		      LDY	Tmp0	;3
   1319  f639		       4c 4d f6 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1320  f63c				   SkipDrawOpponent
   1321  f63c		       c6 d8		      DEC	OpponentLine	;5
   1322  f63e		       a4 b0		      LDY	Tmp0	;3
   1323  f640
   1324  f640				   DrawTraffic0 		; 21 2pe
   1325  f640		       98		      TYA		; 2
   1326  f641		       18		      CLC		; 2 
   1327  f642		       65 91		      ADC	TrafficOffset0 + 1	;3
   1328  f644		       29 08		      AND	#%00001000	;2
   1329  f646		       f0 05		      BEQ	HasNoBorderP0	;3
   1330  f648				   HasBorderP0
   1331  f648		       a9 70		      LDA	#%01110000	; 2
   1332  f64a		       4c 4f f6 	      JMP	StoreBorderP0	; 3
   1333  f64d				   HasNoBorderP0
   1334  f64d		       a9 00		      LDA	#0	; 2
   1335  f64f				   StoreBorderP0
   1336  f64f		       85 81		      STA	PF0Cache	; 3
   1337  f651		       85 83		      STA	PF2Cache	; 3
   1338  f653
   1339  f653				   SkipDrawTraffic0
   1340  f653
   1341  f653				   WhileScanLoop
   1342  f653		       88		      DEY		;2
   1343  f654		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1344  f656		       4c a4 f5 	      JMP	ScanLoop	;3
   1345  f659				   FinishScanLoop		; 7 209 of 222
   1346  f659
   1347  f659		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1348  f65b		       20 a5 f7 	      JSR	LoadAll
   1349  f65e		       85 02		      STA	WSYNC	; do stuff!
   1350  f660		       85 02		      STA	WSYNC
   1351  f662		       85 02		      STA	WSYNC
   1352  f664							;42 cycles to use here
   1353  f664
   1354  f664				   PrepareOverscan
   1355  f664		       a9 02		      LDA	#2
   1356  f666		       85 02		      STA	WSYNC
   1357  f668		       85 01		      STA	VBLANK
   1358  f66a
   1359  f66a		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1360  f66c		       8d 96 02 	      STA	TIM64T
   1361  f66f
   1362  f66f				   LeftSound		;41
   1363  f66f		       a5 b8		      LDA	CountdownTimer	;3
   1364  f671		       f0 1b		      BEQ	EngineOff	;2
   1365  f673		       a6 f4		      LDX	Gear
   1366  f675		       a5 8e		      LDA	Player0SpeedL	;3
   1367  f677		       4a		      LSR		;2
   1368  f678		       4a		      LSR		;2
   1369  f679		       4a		      LSR		;2
   1370  f67a		       29 0f		      AND	#%00001111	;2
   1371  f67c		       85 b0		      STA	Tmp0	;3
   1372  f67e		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1373  f681		       38		      SEC		;2
   1374  f682		       e5 b0		      SBC	Tmp0	;3
   1375  f684		       85 17		      STA	AUDF0	;3
   1376  f686		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1377  f689		       85 15		      STA	AUDC0	;3
   1378  f68b		       4c 92 f6 	      JMP	EndLeftSound	;3
   1379  f68e				   EngineOff
   1380  f68e		       a9 00		      LDA	#0
   1381  f690		       85 15		      STA	AUDC0
   1382  f692
   1383  f692				   EndLeftSound
   1384  f692
   1385  f692
   1386  f692				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1387  f692		       a5 d5		      LDA	ScoreFontColor	;3
   1388  f694		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1389  f696		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1390  f698		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1391  f69a		       f0 29		      BEQ	PlayCheckpoint	;2
   1392  f69c		       a5 b4		      LDA	CollisionCounter	;3
   1393  f69e		       c9 e0		      CMP	#$E0	;2
   1394  f6a0		       b0 14		      BCS	PlayColision	;2
   1395  f6a2		       a5 d7		      LDA	NextCheckpoint	;3
   1396  f6a4		       38		      SEC		;2
   1397  f6a5		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1398  f6a7		       c9 02		      CMP	#$02	;2
   1399  f6a9		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1400  f6ab		       a5 b8		      LDA	CountdownTimer	; 3
   1401  f6ad		       f0 53		      BEQ	MuteRightSound	;2
   1402  f6af		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1403  f6b1		       90 37		      BCC	PlayWarnTimeEnding	;4
   1404  f6b3		       4c 02 f7 	      JMP	MuteRightSound	;3
   1405  f6b6				   PlayColision
   1406  f6b6		       a9 1f		      LDA	#31
   1407  f6b8		       85 18		      STA	AUDF1
   1408  f6ba		       a9 08		      LDA	#8
   1409  f6bc		       85 16		      STA	AUDC1
   1410  f6be		       a9 08		      LDA	#8
   1411  f6c0		       85 1a		      STA	AUDV1
   1412  f6c2		       4c 06 f7 	      JMP	EndRightSound
   1413  f6c5
   1414  f6c5				   PlayCheckpoint
   1415  f6c5		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1416  f6c7		       4a		      LSR		;2
   1417  f6c8		       4a		      LSR		;2
   1418  f6c9		       4a		      LSR		;2
   1419  f6ca		       85 18		      STA	AUDF1	;3
   1420  f6cc		       a9 0c		      LDA	#12	;2
   1421  f6ce		       85 16		      STA	AUDC1	;3
   1422  f6d0		       a9 06		      LDA	#6	;2
   1423  f6d2		       85 1a		      STA	AUDV1	;3
   1424  f6d4		       4c 06 f7 	      JMP	EndRightSound	;3
   1425  f6d7
   1426  f6d7				   PlayBeforeCheckpoint
   1427  f6d7		       a5 8c		      LDA	FrameCount0	;3
   1428  f6d9		       29 1c		      AND	#%00011100	;2
   1429  f6db		       09 03		      ORA	#%00000011	;2
   1430  f6dd		       85 18		      STA	AUDF1	;3
   1431  f6df		       a9 0c		      LDA	#12	;2
   1432  f6e1		       85 16		      STA	AUDC1	;3
   1433  f6e3		       a9 03		      LDA	#3	;2
   1434  f6e5		       85 1a		      STA	AUDV1	;3
   1435  f6e7		       4c 06 f7 	      JMP	EndRightSound	;3
   1436  f6ea
   1437  f6ea				   PlayWarnTimeEnding
   1438  f6ea		       a5 8c		      LDA	FrameCount0	;3
   1439  f6ec		       29 04		      AND	#%00000100	;2
   1440  f6ee		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1441  f6f0		       18		      CLC		;2
   1442  f6f1		       a9 0a		      LDA	#10	;2
   1443  f6f3		       65 b8		      ADC	CountdownTimer	;2
   1444  f6f5		       85 18		      STA	AUDF1	;3
   1445  f6f7		       a9 0c		      LDA	#12	;2
   1446  f6f9		       85 16		      STA	AUDC1	;3
   1447  f6fb		       a9 03		      LDA	#3	;2
   1448  f6fd		       85 1a		      STA	AUDV1	;3
   1449  f6ff		       4c 06 f7 	      JMP	EndRightSound	;3
   1450  f702
   1451  f702				   MuteRightSound
   1452  f702		       a9 00		      LDA	#0
   1453  f704		       85 1a		      STA	AUDV1
   1454  f706				   EndRightSound
   1455  f706
   1456  f706							;Read Fire Button before, will make it start the game for now.
   1457  f706				   StartGame
   1458  f706		       a5 0c		      LDA	INPT4	;3
   1459  f708		       25 0d		      AND	INPT5	;3 player 
   1460  f70a		       30 31		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1461  f70c		       a5 8c		      LDA	FrameCount0
   1462  f70e		       29 01		      AND	#%00000001
   1463  f710		       d0 2b		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1464  f712		       a5 bd		      LDA	GameStatus	;3
   1465  f714		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1466  f716		       d0 25		      BNE	SkipGameStart
   1467  f718		       a5 c6		      LDA	GameMode
   1468  f71a		       c9 10		      CMP	#MAX_GAME_MODE
   1469  f71c		       d0 0b		      BNE	SetGameRunning
   1470  f71e		       a9 00		      LDA	#0
   1471  f720		       85 c6		      STA	GameMode
   1472  f722		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1473  f724		       85 bc		      STA	SwitchDebounceCounter
   1474  f726		       4c 3d f7 	      JMP	SkipGameStart
   1475  f729				   SetGameRunning
   1476  f729		       e6 bd		      INC	GameStatus
   1477  f72b		       a9 00		      LDA	#0	;
   1478  f72d		       85 8c		      STA	FrameCount0
   1479  f72f		       85 8d		      STA	FrameCount1
   1480  f731		       a9 0a		      LDA	#10
   1481  f733		       85 19		      STA	AUDV0
   1482  f735		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1483  f737		       85 d5		      STA	ScoreFontColor
   1484  f739		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1485  f73b		       85 d6		      STA	ScoreFontColorHoldChange
   1486  f73d				   SkipGameStart
   1487  f73d
   1488  f73d				   ReadSwitches
   1489  f73d		       a6 bc		      LDX	SwitchDebounceCounter
   1490  f73f		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1491  f741		       a9 01		      LDA	#%00000001
   1492  f743		       2c 82 02 	      BIT	SWCHB
   1493  f746		       d0 07		      BNE	SkipReset
   1494  f748		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1495  f74a		       85 bc		      STA	SwitchDebounceCounter
   1496  f74c		       4c 7c f7 	      JMP	OverScanWaitBeforeReset
   1497  f74f				   SkipReset
   1498  f74f
   1499  f74f				   GameModeSelect
   1500  f74f		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1501  f751		       d0 1c		      BNE	SkipGameSelect
   1502  f753		       20 d1 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1503  f756				   ContinueGameSelect
   1504  f756		       a9 02		      LDA	#%00000010
   1505  f758		       2c 82 02 	      BIT	SWCHB
   1506  f75b		       d0 12		      BNE	SkipGameSelect
   1507  f75d		       a6 c6		      LDX	GameMode
   1508  f75f		       e0 10		      CPX	#MAX_GAME_MODE
   1509  f761		       f0 04		      BEQ	ResetGameMode
   1510  f763		       e8		      INX
   1511  f764		       4c 69 f7 	      JMP	StoreGameMode
   1512  f767				   ResetGameMode
   1513  f767		       a2 00		      LDX	#0
   1514  f769				   StoreGameMode
   1515  f769		       86 c6		      STX	GameMode
   1516  f76b		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1517  f76d		       85 bc		      STA	SwitchDebounceCounter
   1518  f76f				   SkipGameSelect
   1519  f76f		       4c 74 f7 	      JMP	EndReadSwitches
   1520  f772				   DecrementSwitchDebounceCounter
   1521  f772		       c6 bc		      DEC	SwitchDebounceCounter
   1522  f774				   EndReadSwitches
   1523  f774
   1524  f774				   OverScanWait
   1525  f774		       ad 84 02 	      LDA	INTIM
   1526  f777		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1527  f779		       4c cb f0 	      JMP	MainLoop
   1528  f77c
   1529  f77c				   OverScanWaitBeforeReset
   1530  f77c		       ad 84 02 	      LDA	INTIM
   1531  f77f		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1532  f781		       4c 12 f0 	      JMP	Start
   1533  f784
   1534  f784				   Subroutines
   1535  f784
   1536  f784				   ClearAll		; 52
   1537  f784		       a9 00		      LDA	#0	;2
   1538  f786		       85 1c		      STA	GRP1	;3
   1539  f788		       85 1f		      STA	ENABL	;3
   1540  f78a		       85 1d		      STA	ENAM0	;3
   1541  f78c		       85 1e		      STA	ENAM1	;3
   1542  f78e		       85 84		      STA	GRP1Cache	;3
   1543  f790		       85 85		      STA	ENABLCache	;3
   1544  f792		       85 86		      STA	ENAM0Cache	;3
   1545  f794		       85 87		      STA	ENAM1Cache	;3
   1546  f796
   1547  f796				   ClearPF		; 26
   1548  f796		       a9 00		      LDA	#0	;2
   1549  f798				   ClearPFSkipLDA0
   1550  f798		       85 0d		      STA	PF0	;3
   1551  f79a		       85 0e		      STA	PF1	;3
   1552  f79c		       85 0f		      STA	PF2	;3	
   1553  f79e		       85 81		      STA	PF0Cache	;3
   1554  f7a0		       85 82		      STA	PF1Cache	;3
   1555  f7a2		       85 83		      STA	PF2Cache	;3 
   1556  f7a4		       60		      RTS		;6
   1557  f7a5				   EndClearAll
   1558  f7a5
   1559  f7a5				   LoadAll		; 48
   1560  f7a5		       a5 81		      LDA	PF0Cache	;3
   1561  f7a7		       85 0d		      STA	PF0	;3
   1562  f7a9
   1563  f7a9		       a5 82		      LDA	PF1Cache	;3
   1564  f7ab		       85 0e		      STA	PF1	;3
   1565  f7ad
   1566  f7ad		       a5 83		      LDA	PF2Cache	;3
   1567  f7af		       85 0f		      STA	PF2	;3
   1568  f7b1
   1569  f7b1		       a5 84		      LDA	GRP1Cache	;3
   1570  f7b3		       85 1c		      STA	GRP1	;3
   1571  f7b5
   1572  f7b5		       a5 85		      LDA	ENABLCache	;3
   1573  f7b7		       85 1f		      STA	ENABL	;3
   1574  f7b9
   1575  f7b9		       a5 86		      LDA	ENAM0Cache	;3
   1576  f7bb		       85 1d		      STA	ENAM0	;3
   1577  f7bd
   1578  f7bd		       a5 87		      LDA	ENAM1Cache	;3
   1579  f7bf		       85 1e		      STA	ENAM1	;3
   1580  f7c1
   1581  f7c1		       60		      RTS		;6
   1582  f7c2				   EndLoadAll
   1583  f7c2
   1584  f7c2				   NextDifficulty
   1585  f7c2		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1586  f7c4		       29 01		      AND	#%00000001
   1587  f7c6		       d0 24		      BNE	CheckRandomDifficulty
   1588  f7c8
   1589  f7c8		       a5 c4		      LDA	CurrentDifficulty
   1590  f7ca		       18		      CLC
   1591  f7cb		       69 01		      ADC	#1
   1592  f7cd		       29 03		      AND	#%00000011	; 0 to 3
   1593  f7cf		       85 c4		      STA	CurrentDifficulty
   1594  f7d1
   1595  f7d1				   ConfigureDifficulty
   1596  f7d1		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1597  f7d3		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1598  f7d6		       85 be		      STA	TrafficChance
   1599  f7d8		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1600  f7db		       85 c2		      STA	TrafficColor
   1601  f7dd
   1602  f7dd		       a5 c6		      LDA	GameMode	;
   1603  f7df		       29 01		      AND	#%00000001
   1604  f7e1		       f0 03		      BEQ	UseNextDifficultyTime
   1605  f7e3		       4c e7 f7 	      JMP	StoreDifficultyTime
   1606  f7e6				   UseNextDifficultyTime
   1607  f7e6		       c8		      INY
   1608  f7e7				   StoreDifficultyTime
   1609  f7e7		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1610  f7ea		       85 c0		      STA	CheckpointTime
   1611  f7ec
   1612  f7ec				   CheckRandomDifficulty
   1613  f7ec		       a5 c6		      LDA	GameMode
   1614  f7ee		       29 08		      AND	#%00001000	; Random difficulties
   1615  f7f0		       f0 09		      BEQ	ReturnFromNextDifficulty
   1616  f7f2				   RandomDifficulty
   1617  f7f2		       a6 8c		      LDX	FrameCount0
   1618  f7f4		       bd 00 fe 	      LDA	AesTable,X
   1619  f7f7							;EOR TrafficChance, no need, lets make life simple
   1620  f7f7		       29 3f		      AND	#%00111111
   1621  f7f9		       85 be		      STA	TrafficChance
   1622  f7fb
   1623  f7fb				   ReturnFromNextDifficulty
   1624  f7fb		       60		      RTS
   1625  f7fc				   EndNextDifficulty
   1626  f7fc
   1627  f7fc				   DefaultOffsets
   1628  f7fc		       a9 20		      LDA	#$20
   1629  f7fe		       85 96		      STA	TrafficOffset1 + 2
   1630  f800		       85 a6		      STA	OpTrafficOffset1 + 2
   1631  f802		       a9 40		      LDA	#$40
   1632  f804		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1633  f806		       85 aa		      STA	OpTrafficOffset2 + 2
   1634  f808		       a9 60		      LDA	#$60
   1635  f80a		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1636  f80c		       85 ae		      STA	OpTrafficOffset3 + 2
   1637  f80e		       a9 80		      LDA	#$80
   1638  f810		       60		      RTS
   1639  f811
   1640  f811				   PrintStaticText		; Preload X with the offset referent to StaticText
   1641  f811		       bd 00 ff 	      LDA	StaticText,X
   1642  f814		       85 d0		      STA	ScoreD0
   1643  f816		       e8		      INX
   1644  f817		       bd 00 ff 	      LDA	StaticText,X
   1645  f81a		       85 d1		      STA	ScoreD1
   1646  f81c		       e8		      INX
   1647  f81d		       bd 00 ff 	      LDA	StaticText,X
   1648  f820		       85 d2		      STA	ScoreD2
   1649  f822		       e8		      INX
   1650  f823		       bd 00 ff 	      LDA	StaticText,X
   1651  f826		       85 d3		      STA	ScoreD3
   1652  f828		       e8		      INX
   1653  f829		       bd 00 ff 	      LDA	StaticText,X
   1654  f82c		       85 d4		      STA	ScoreD4
   1655  f82e		       60		      RTS
   1656  f82f
   1657  f82f				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1658  f82f		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1659  f831		       85 d5		      STA	ScoreFontColor
   1660  f833		       a9 01		      LDA	#1
   1661  f835		       85 d6		      STA	ScoreFontColorHoldChange
   1662  f837
   1663  f837		       a5 8d		      LDA	FrameCount1
   1664  f839		       29 07		      AND	#%00000111
   1665  f83b		       85 b3		      STA	Tmp3
   1666  f83d							;0 is Zelda Name, (default)
   1667  f83d		       a9 01		      LDA	#1
   1668  f83f		       c5 b3		      CMP	Tmp3
   1669  f841		       f0 38		      BEQ	PrintZeldaDateLeft
   1670  f843
   1671  f843		       a9 02		      LDA	#2
   1672  f845		       c5 b3		      CMP	Tmp3
   1673  f847		       f0 23		      BEQ	PrintPolvinhosLeft
   1674  f849
   1675  f849		       a9 03		      LDA	#3
   1676  f84b		       c5 b3		      CMP	Tmp3
   1677  f84d		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1678  f84f
   1679  f84f		       a9 04		      LDA	#4
   1680  f851		       c5 b3		      CMP	Tmp3
   1681  f853		       f0 1c		      BEQ	PrintIvonneLeft
   1682  f855
   1683  f855		       a9 05		      LDA	#5
   1684  f857		       c5 b3		      CMP	Tmp3
   1685  f859		       f0 2a		      BEQ	PrintIvonneDateLeft
   1686  f85b
   1687  f85b		       a9 06		      LDA	#6
   1688  f85d		       c5 b3		      CMP	Tmp3
   1689  f85f		       f0 15		      BEQ	PrintArtLeft
   1690  f861
   1691  f861		       a9 07		      LDA	#7
   1692  f863		       c5 b3		      CMP	Tmp3
   1693  f865		       f0 23		      BEQ	PrintLeonardoLeft
   1694  f867
   1695  f867				   PrintZeldaLeft
   1696  f867		       a2 28		      LDX	#<ZeldaTextLeft
   1697  f869		       4c 8f f8 	      JMP	ProcessPrintEasterEgg
   1698  f86c				   PrintPolvinhosLeft
   1699  f86c		       a2 3c		      LDX	#<PolvinhosTextLeft
   1700  f86e		       4c 8f f8 	      JMP	ProcessPrintEasterEgg
   1701  f871				   PrintIvonneLeft
   1702  f871		       a2 50		      LDX	#<IvonneTextLeft
   1703  f873		       4c 8f f8 	      JMP	ProcessPrintEasterEgg
   1704  f876				   PrintArtLeft
   1705  f876		       a2 64		      LDX	#<PaperArtTextLeft
   1706  f878		       4c 8f f8 	      JMP	ProcessPrintEasterEgg
   1707  f87b
   1708  f87b				   PrintZeldaDateLeft
   1709  f87b		       a2 32		      LDX	#<ZeldaDateLeft
   1710  f87d		       4c 8f f8 	      JMP	ProcessPrintEasterEgg
   1711  f880				   PrintPolvinhosDateLeft
   1712  f880		       a2 46		      LDX	#<PolvinhosDateLeft
   1713  f882		       4c 8f f8 	      JMP	ProcessPrintEasterEgg
   1714  f885				   PrintIvonneDateLeft
   1715  f885		       a2 5a		      LDX	#<IvonneDateLeft
   1716  f887		       4c 8f f8 	      JMP	ProcessPrintEasterEgg
   1717  f88a				   PrintLeonardoLeft
   1718  f88a		       a2 6e		      LDX	#<LeonardoTextLeft
   1719  f88c		       4c 8f f8 	      JMP	ProcessPrintEasterEgg
   1720  f88f
   1721  f88f				   ProcessPrintEasterEgg
   1722  f88f		       a5 8c		      LDA	FrameCount0	;3
   1723  f891		       29 01		      AND	#%00000001	;2
   1724  f893		       d0 03		      BNE	TranformIntoRightText
   1725  f895		       4c 9d f8 	      JMP	PrintEasterEggText
   1726  f898				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1727  f898		       8a		      TXA
   1728  f899		       18		      CLC
   1729  f89a		       69 05		      ADC	#HALF_TEXT_SIZE
   1730  f89c		       aa		      TAX
   1731  f89d
   1732  f89d				   PrintEasterEggText
   1733  f89d		       20 11 f8 	      JSR	PrintStaticText
   1734  f8a0		       60		      RTS
   1735  f8a1
   1736  f8a1				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1737  f8a1		       a2 00		      LDX	#0
   1738  f8a3		       a0 04		      LDY	#FONT_OFFSET
   1739  f8a5
   1740  f8a5				   ScoreLoop		; 20 
   1741  f8a5		       85 02		      STA	WSYNC	;2
   1742  f8a7
   1743  f8a7		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1744  f8a9		       85 0d		      STA	PF0	;3
   1745  f8ab
   1746  f8ab		       a5 82		      LDA	PF1Cache	;3
   1747  f8ad		       85 0e		      STA	PF1	;3
   1748  f8af
   1749  f8af		       a5 83		      LDA	PF2Cache	;3
   1750  f8b1		       85 0f		      STA	PF2	;3
   1751  f8b3
   1752  f8b3				   DrawScoreD0		; 15
   1753  f8b3		       a6 d0		      LDX	ScoreD0	; 3
   1754  f8b5		       bd 00 fd 	      LDA	Font,X	;4
   1755  f8b8		       85 81		      STA	PF0Cache	;3
   1756  f8ba		       c6 d0		      DEC	ScoreD0	;5
   1757  f8bc
   1758  f8bc				   DrawScoreD1		; 23	
   1759  f8bc		       a6 d1		      LDX	ScoreD1	; 3
   1760  f8be		       bd 00 fd 	      LDA	Font,X	;4
   1761  f8c1		       0a		      ASL		;2
   1762  f8c2		       0a		      ASL		;2
   1763  f8c3		       0a		      ASL		;2
   1764  f8c4		       0a		      ASL		;2
   1765  f8c5		       85 82		      STA	PF1Cache	;3
   1766  f8c7		       c6 d1		      DEC	ScoreD1	;5
   1767  f8c9
   1768  f8c9				   DrawScoreD2		; 20
   1769  f8c9		       a6 d2		      LDX	ScoreD2	; 3
   1770  f8cb		       bd 00 fd 	      LDA	Font,X	;4
   1771  f8ce		       29 0f		      AND	#%00001111	;2
   1772  f8d0		       05 82		      ORA	PF1Cache	;3
   1773  f8d2		       85 82		      STA	PF1Cache	;3
   1774  f8d4		       c6 d2		      DEC	ScoreD2	;5
   1775  f8d6
   1776  f8d6				   DrawScoreD3		; 23
   1777  f8d6		       a6 d3		      LDX	ScoreD3	; 3
   1778  f8d8		       bd 00 fd 	      LDA	Font,X	;4
   1779  f8db		       4a		      LSR		;2
   1780  f8dc		       4a		      LSR		;2
   1781  f8dd		       4a		      LSR		;2
   1782  f8de		       4a		      LSR		;2
   1783  f8df		       85 83		      STA	PF2Cache	;3
   1784  f8e1		       c6 d3		      DEC	ScoreD3	;5
   1785  f8e3
   1786  f8e3				   DrawScoreD4		; 20
   1787  f8e3		       a6 d4		      LDX	ScoreD4	; 3
   1788  f8e5		       bd 00 fd 	      LDA	Font,X	;4
   1789  f8e8		       29 f0		      AND	#%11110000	;2
   1790  f8ea		       05 83		      ORA	PF2Cache	;3
   1791  f8ec		       85 83		      STA	PF2Cache	;3
   1792  f8ee		       c6 d4		      DEC	ScoreD4	;5
   1793  f8f0
   1794  f8f0
   1795  f8f0		       88		      DEY		;2
   1796  f8f1		       10 b2		      BPL	ScoreLoop	;4
   1797  f8f3
   1798  f8f3		       85 02		      STA	WSYNC
   1799  f8f5		       20 a5 f7 	      JSR	LoadAll
   1800  f8f8		       60		      RTS		; 6
   1801  f8f9
   1802  f8f9				   PrintRightDecimalDigits
   1803  f8f9		       b9 00 00 	      LDA	0,Y
   1804  f8fc		       4a		      LSR
   1805  f8fd		       4a		      LSR
   1806  f8fe		       4a		      LSR
   1807  f8ff		       4a		      LSR
   1808  f900		       aa		      TAX
   1809  f901		       bd be fd 	      LDA	FontLookup,X	;4
   1810  f904		       85 d2		      STA	ScoreD2	;3
   1811  f906
   1812  f906		       b9 00 00 	      LDA	0,Y
   1813  f909		       29 0f		      AND	#%00001111
   1814  f90b		       aa		      TAX
   1815  f90c		       bd be fd 	      LDA	FontLookup,X	;4
   1816  f90f		       85 d3		      STA	ScoreD3	;3
   1817  f911
   1818  f911		       c8		      INY
   1819  f912		       b9 00 00 	      LDA	0,Y
   1820  f915		       4a		      LSR
   1821  f916		       4a		      LSR
   1822  f917		       4a		      LSR
   1823  f918		       4a		      LSR
   1824  f919		       aa		      TAX
   1825  f91a		       bd be fd 	      LDA	FontLookup,X	;4
   1826  f91d		       85 d0		      STA	ScoreD0	;3
   1827  f91f
   1828  f91f		       b9 00 00 	      LDA	0,Y
   1829  f922		       29 0f		      AND	#%00001111
   1830  f924		       aa		      TAX
   1831  f925		       bd be fd 	      LDA	FontLookup,X	;4
   1832  f928		       85 d1		      STA	ScoreD1	;3
   1833  f92a
   1834  f92a		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1835  f92c		       85 d4		      STA	ScoreD4
   1836  f92e		       60		      RTS
   1837  f92f
   1838  f92f				   PrintLastLeftDecimalDigits
   1839  f92f		       b9 00 00 	      LDA	0,Y
   1840  f932		       4a		      LSR
   1841  f933		       4a		      LSR
   1842  f934		       4a		      LSR
   1843  f935		       4a		      LSR
   1844  f936		       aa		      TAX
   1845  f937		       bd be fd 	      LDA	FontLookup,X	;4
   1846  f93a		       85 d3		      STA	ScoreD3	;3
   1847  f93c		       b9 00 00 	      LDA	0,Y
   1848  f93f		       29 0f		      AND	#%00001111
   1849  f941		       aa		      TAX
   1850  f942		       bd be fd 	      LDA	FontLookup,X	;4
   1851  f945		       85 d4		      STA	ScoreD4	;3
   1852  f947		       60		      RTS
   1853  f948
   1854  f948				   PrintZerosLeft
   1855  f948		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1856  f94a		       85 d2		      STA	ScoreD2
   1857  f94c		       85 d3		      STA	ScoreD3
   1858  f94e		       85 d4		      STA	ScoreD4
   1859  f950		       60		      RTS
   1860  f951
   1861  f951				   DrawGameOverScoreLine
   1862  f951		       85 02		      STA	WSYNC
   1863  f953		       20 a1 f8 	      JSR	PrintScore
   1864  f956		       85 02		      STA	WSYNC
   1865  f958		       85 02		      STA	WSYNC
   1866  f95a		       20 96 f7 	      JSR	ClearPF
   1867  f95d		       60		      RTS
   1868  f95e
   1869  f95e				   DrawGameOverScreenLeft
   1870  f95e		       85 02		      STA	WSYNC
   1871  f960		       20 96 f7 	      JSR	ClearPF
   1872  f963
   1873  f963				   DrawGlideTimerLeft
   1874  f963		       20 25 fa 	      JSR	Sleep8Lines
   1875  f966		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1876  f968		       85 06		      STA	COLUP0
   1877  f96a		       85 02		      STA	WSYNC
   1878  f96c		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1879  f96e		       85 d0		      STA	ScoreD0
   1880  f970		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1881  f972		       85 d1		      STA	ScoreD1
   1882  f974		       20 48 f9 	      JSR	PrintZerosLeft
   1883  f977		       20 51 f9 	      JSR	DrawGameOverScoreLine
   1884  f97a
   1885  f97a				   DrawHitCountLeft
   1886  f97a		       20 25 fa 	      JSR	Sleep8Lines
   1887  f97d		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1888  f97f		       85 06		      STA	COLUP0
   1889  f981		       85 02		      STA	WSYNC
   1890  f983		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1891  f985		       85 d0		      STA	ScoreD0
   1892  f987		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1893  f989		       85 d1		      STA	ScoreD1
   1894  f98b		       20 48 f9 	      JSR	PrintZerosLeft
   1895  f98e		       20 51 f9 	      JSR	DrawGameOverScoreLine
   1896  f991
   1897  f991				   DrawCheckpointCountLeft
   1898  f991		       20 25 fa 	      JSR	Sleep8Lines
   1899  f994		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1900  f996		       85 06		      STA	COLUP0
   1901  f998		       85 02		      STA	WSYNC
   1902  f99a		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1903  f99c		       85 d0		      STA	ScoreD0
   1904  f99e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1905  f9a0		       85 d1		      STA	ScoreD1
   1906  f9a2		       20 48 f9 	      JSR	PrintZerosLeft
   1907  f9a5		       20 51 f9 	      JSR	DrawGameOverScoreLine
   1908  f9a8
   1909  f9a8				   DrawGameVersionLeft
   1910  f9a8		       20 25 fa 	      JSR	Sleep8Lines
   1911  f9ab		       a9 49		      LDA	#VERSION_COLOR
   1912  f9ad		       85 06		      STA	COLUP0
   1913  f9af
   1914  f9af		       a5 c6		      LDA	GameMode
   1915  f9b1		       aa		      TAX
   1916  f9b2		       bd be fd 	      LDA	FontLookup,X	;4
   1917  f9b5		       85 d0		      STA	ScoreD0	;3
   1918  f9b7
   1919  f9b7		       a5 c7		      LDA	CurrentCarId
   1920  f9b9		       aa		      TAX
   1921  f9ba		       bd be fd 	      LDA	FontLookup,X	;4
   1922  f9bd		       85 d1		      STA	ScoreD1	;3
   1923  f9bf
   1924  f9bf		       a5 dd		      LDA	StartSWCHB
   1925  f9c1		       29 40		      AND	#%01000000	; P0 difficulty
   1926  f9c3		       49 40		      EOR	#%01000000	; Reverse bytes
   1927  f9c5		       2a		      ROL
   1928  f9c6		       2a		      ROL
   1929  f9c7		       2a		      ROL
   1930  f9c8		       18		      CLC
   1931  f9c9		       69 0a		      ADC	#10
   1932  f9cb		       aa		      TAX
   1933  f9cc		       bd be fd 	      LDA	FontLookup,X	;4
   1934  f9cf		       85 d2		      STA	ScoreD2	;3
   1935  f9d1
   1936  f9d1		       a5 dd		      LDA	StartSWCHB
   1937  f9d3		       29 80		      AND	#%10000000	; P0 difficulty
   1938  f9d5		       49 80		      EOR	#%10000000	; Reverse bytes
   1939  f9d7		       2a		      ROL
   1940  f9d8		       2a		      ROL
   1941  f9d9		       18		      CLC
   1942  f9da		       69 0a		      ADC	#10
   1943  f9dc		       aa		      TAX
   1944  f9dd		       bd be fd 	      LDA	FontLookup,X	;4
   1945  f9e0		       85 d3		      STA	ScoreD3	;3
   1946  f9e2
   1947  f9e2		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1948  f9e4		       85 d4		      STA	ScoreD4
   1949  f9e6
   1950  f9e6		       20 51 f9 	      JSR	DrawGameOverScoreLine
   1951  f9e9
   1952  f9e9		       4c 02 fa 	      JMP	FinalizeDrawGameOver
   1953  f9ec
   1954  f9ec				   DrawGameOverScreenRight
   1955  f9ec		       85 02		      STA	WSYNC
   1956  f9ee		       20 96 f7 	      JSR	ClearPF
   1957  f9f1
   1958  f9f1				   DrawVersionRight
   1959  f9f1		       20 25 fa 	      JSR	Sleep8Lines
   1960  f9f4		       a9 49		      LDA	#VERSION_COLOR
   1961  f9f6		       85 07		      STA	COLUP1
   1962  f9f8		       85 02		      STA	WSYNC
   1963  f9fa		       a2 78		      LDX	#<VersionText
   1964  f9fc		       20 11 f8 	      JSR	PrintStaticText
   1965  f9ff		       20 51 f9 	      JSR	DrawGameOverScoreLine
   1966  fa02
   1967  fa02				   FinalizeDrawGameOver
   1968  fa02		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1969  fa04		       85 d5		      STA	ScoreFontColor
   1970  fa06		       20 1c fa 	      JSR	Sleep4Lines
   1971  fa09		       20 2c fa 	      JSR	Sleep32Lines
   1972  fa0c		       20 2c fa 	      JSR	Sleep32Lines
   1973  fa0f		       4c 64 f6 	      JMP	PrepareOverscan
   1974  fa12
   1975  fa12				   WaitForVblankEnd
   1976  fa12		       ad 84 02 	      LDA	INTIM
   1977  fa15		       d0 fb		      BNE	WaitForVblankEnd
   1978  fa17		       85 02		      STA	WSYNC
   1979  fa19		       85 01		      STA	VBLANK
   1980  fa1b		       60		      RTS
   1981  fa1c
   1982  fa1c				   Sleep4Lines
   1983  fa1c		       85 02		      STA	WSYNC
   1984  fa1e		       85 02		      STA	WSYNC
   1985  fa20		       85 02		      STA	WSYNC
   1986  fa22		       85 02		      STA	WSYNC
   1987  fa24		       60		      RTS
   1988  fa25
   1989  fa25				   Sleep8Lines
   1990  fa25		       20 1c fa 	      JSR	Sleep4Lines
   1991  fa28		       20 1c fa 	      JSR	Sleep4Lines
   1992  fa2b		       60		      RTS
   1993  fa2c
   1994  fa2c				   Sleep32Lines
   1995  fa2c		       20 25 fa 	      JSR	Sleep8Lines
   1996  fa2f		       20 25 fa 	      JSR	Sleep8Lines
   1997  fa32		       20 25 fa 	      JSR	Sleep8Lines
   1998  fa35		       20 25 fa 	      JSR	Sleep8Lines
   1999  fa38		       60		      RTS
   2000  fa39
   2001  fa39				   ConfigureCarSprites
   2002  fa39		       a5 8c		      LDA	FrameCount0
   2003  fa3b		       29 01		      AND	#%00000001
   2004  fa3d		       d0 0b		      BNE	LoadForRightScreenSprites
   2005  fa3f				   LoadForLeftScreenSprites
   2006  fa3f		       a5 c7		      LDA	CurrentCarId
   2007  fa41		       85 b0		      STA	Tmp0
   2008  fa43		       a5 c8		      LDA	OpCurrentCarId
   2009  fa45		       85 b1		      STA	Tmp1
   2010  fa47		       4c 52 fa 	      JMP	LoadCarSpritesFromIds
   2011  fa4a				   LoadForRightScreenSprites
   2012  fa4a		       a5 c7		      LDA	CurrentCarId
   2013  fa4c		       85 b1		      STA	Tmp1
   2014  fa4e		       a5 c8		      LDA	OpCurrentCarId
   2015  fa50		       85 b0		      STA	Tmp0
   2016  fa52
   2017  fa52				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   2018  fa52		       a4 b0		      LDY	Tmp0
   2019  fa54		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   2020  fa57		       85 de		      STA	CarSpritePointerL
   2021  fa59		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   2022  fa5c		       85 df		      STA	CarSpritePointerH
   2023  fa5e				   ConfigureOpponentCarSprite
   2024  fa5e		       a4 b1		      LDY	Tmp1
   2025  fa60		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   2026  fa63		       85 d9		      STA	EnemyCarSpritePointerL
   2027  fa65		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   2028  fa68		       85 da		      STA	EnemyCarSpritePointerH
   2029  fa6a		       60		      RTS
   2030  fa6b
   2031  fa6b							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   2032  fa6b							;X player 0 or 1
   2033  fa6b				   SelectCarWithDpad
   2034  fa6b		       a0 03		      LDY	#3
   2035  fa6d				   SelectCarWithDpadLoop
   2036  fa6d		       ad 80 02 	      LDA	SWCHA
   2037  fa70		       25 b0		      AND	Tmp0
   2038  fa72		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   2039  fa74		       98		      TYA
   2040  fa75		       95 c7		      STA	CurrentCarId,X
   2041  fa77				   ContinueSelectCarWithDpadLoop
   2042  fa77		       46 b0		      LSR	Tmp0
   2043  fa79		       88		      DEY
   2044  fa7a		       10 f1		      BPL	SelectCarWithDpadLoop
   2045  fa7c		       60		      RTS
   2046  fa7d
   2047  fa7d							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2048  fc00					      org	$FC00
   2049  fc00				   QrCode1
   2050  fc00		       1f		      .byte.b	#%00011111
   2051  fc01		       10		      .byte.b	#%00010000
   2052  fc02		       17		      .byte.b	#%00010111
   2053  fc03		       17		      .byte.b	#%00010111
   2054  fc04		       17		      .byte.b	#%00010111
   2055  fc05		       10		      .byte.b	#%00010000
   2056  fc06		       1f		      .byte.b	#%00011111
   2057  fc07		       00		      .byte.b	#%00000000
   2058  fc08		       17		      .byte.b	#%00010111
   2059  fc09		       10		      .byte.b	#%00010000
   2060  fc0a		       1d		      .byte.b	#%00011101
   2061  fc0b		       16		      .byte.b	#%00010110
   2062  fc0c		       03		      .byte.b	#%00000011
   2063  fc0d		       19		      .byte.b	#%00011001
   2064  fc0e		       13		      .byte.b	#%00010011
   2065  fc0f		       1c		      .byte.b	#%00011100
   2066  fc10		       0b		      .byte.b	#%00001011
   2067  fc11		       00		      .byte.b	#%00000000
   2068  fc12		       1f		      .byte.b	#%00011111
   2069  fc13		       10		      .byte.b	#%00010000
   2070  fc14		       17		      .byte.b	#%00010111
   2071  fc15		       17		      .byte.b	#%00010111
   2072  fc16		       17		      .byte.b	#%00010111
   2073  fc17		       10		      .byte.b	#%00010000
   2074  fc18		       1f		      .byte.b	#%00011111
   2075  fc19
   2076  fc19				   QrCode2
   2077  fc19		       c3		      .byte.b	#%11000011
   2078  fc1a		       9a		      .byte.b	#%10011010
   2079  fc1b		       82		      .byte.b	#%10000010
   2080  fc1c		       da		      .byte.b	#%11011010
   2081  fc1d		       aa		      .byte.b	#%10101010
   2082  fc1e		       ca		      .byte.b	#%11001010
   2083  fc1f		       f3		      .byte.b	#%11110011
   2084  fc20		       78		      .byte.b	#%01111000
   2085  fc21		       df		      .byte.b	#%11011111
   2086  fc22		       fc		      .byte.b	#%11111100
   2087  fc23		       c7		      .byte.b	#%11000111
   2088  fc24		       98		      .byte.b	#%10011000
   2089  fc25		       23		      .byte.b	#%00100011
   2090  fc26		       b9		      .byte.b	#%10111001
   2091  fc27		       d2		      .byte.b	#%11010010
   2092  fc28		       30		      .byte.b	#%00110000
   2093  fc29		       eb		      .byte.b	#%11101011
   2094  fc2a		       28		      .byte.b	#%00101000
   2095  fc2b		       ab		      .byte.b	#%10101011
   2096  fc2c		       72		      .byte.b	#%01110010
   2097  fc2d		       fa		      .byte.b	#%11111010
   2098  fc2e		       7a		      .byte.b	#%01111010
   2099  fc2f		       32		      .byte.b	#%00110010
   2100  fc30		       3a		      .byte.b	#%00111010
   2101  fc31		       63		      .byte.b	#%01100011
   2102  fc32
   2103  fc32				   QrCode3
   2104  fc32		       98		      .byte.b	#%10011000
   2105  fc33		       c3		      .byte.b	#%11000011
   2106  fc34		       39		      .byte.b	#%00111001
   2107  fc35		       34		      .byte.b	#%00110100
   2108  fc36		       ff		      .byte.b	#%11111111
   2109  fc37		       71		      .byte.b	#%01110001
   2110  fc38		       d5		      .byte.b	#%11010101
   2111  fc39		       d1		      .byte.b	#%11010001
   2112  fc3a		       5f		      .byte.b	#%01011111
   2113  fc3b		       26		      .byte.b	#%00100110
   2114  fc3c		       2d		      .byte.b	#%00101101
   2115  fc3d		       e9		      .byte.b	#%11101001
   2116  fc3e		       d6		      .byte.b	#%11010110
   2117  fc3f		       26		      .byte.b	#%00100110
   2118  fc40		       ba		      .byte.b	#%10111010
   2119  fc41		       03		      .byte.b	#%00000011
   2120  fc42		       dd		      .byte.b	#%11011101
   2121  fc43		       e0		      .byte.b	#%11100000
   2122  fc44		       57		      .byte.b	#%01010111
   2123  fc45		       14		      .byte.b	#%00010100
   2124  fc46		       35		      .byte.b	#%00110101
   2125  fc47		       e5		      .byte.b	#%11100101
   2126  fc48		       b5		      .byte.b	#%10110101
   2127  fc49		       d4		      .byte.b	#%11010100
   2128  fc4a		       97		      .byte.b	#%10010111
   2129  fc4b
   2130  fc4b				   QrCode4
   2131  fc4b		       09		      .byte.b	#%00001001
   2132  fc4c		       0e		      .byte.b	#%00001110
   2133  fc4d		       0f		      .byte.b	#%00001111
   2134  fc4e		       0c		      .byte.b	#%00001100
   2135  fc4f		       0c		      .byte.b	#%00001100
   2136  fc50		       08		      .byte.b	#%00001000
   2137  fc51		       08		      .byte.b	#%00001000
   2138  fc52		       06		      .byte.b	#%00000110
   2139  fc53		       06		      .byte.b	#%00000110
   2140  fc54		       0b		      .byte.b	#%00001011
   2141  fc55		       0f		      .byte.b	#%00001111
   2142  fc56		       04		      .byte.b	#%00000100
   2143  fc57		       08		      .byte.b	#%00001000
   2144  fc58		       0f		      .byte.b	#%00001111
   2145  fc59		       09		      .byte.b	#%00001001
   2146  fc5a		       07		      .byte.b	#%00000111
   2147  fc5b		       05		      .byte.b	#%00000101
   2148  fc5c		       00		      .byte.b	#%00000000
   2149  fc5d		       0f		      .byte.b	#%00001111
   2150  fc5e		       08		      .byte.b	#%00001000
   2151  fc5f		       0b		      .byte.b	#%00001011
   2152  fc60		       0b		      .byte.b	#%00001011
   2153  fc61		       0b		      .byte.b	#%00001011
   2154  fc62		       08		      .byte.b	#%00001000
   2155  fc63		       0f		      .byte.b	#%00001111
   2156  fc64
   2157  fc64							; Moved here because of rom space.
   2158  fc64							; The only SBR in constants space
   2159  fc64				   DrawQrCode
   2160  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2161  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2162  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2163  fc6a		       85 0a		      STA	CTRLPF
   2164  fc6c		       20 84 f7 	      JSR	ClearAll	; To be 100 sure!
   2165  fc6f		       ad 82 02 	      LDA	SWCHB
   2166  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2167  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2168  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2169  fc78		       86 09		      STX	COLUBK
   2170  fc7a		       84 08		      STY	COLUPF
   2171  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2172  fc7f				   StoreReversedQrCode
   2173  fc7f		       86 08		      STX	COLUPF
   2174  fc81		       84 09		      STY	COLUBK
   2175  fc83
   2176  fc83				   ContinueQrCode
   2177  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2178  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2179  fc87		       20 12 fa 	      JSR	WaitForVblankEnd
   2180  fc8a		       20 25 fa 	      JSR	Sleep8Lines
   2181  fc8d		       20 25 fa 	      JSR	Sleep8Lines
   2182  fc90		       20 25 fa 	      JSR	Sleep8Lines
   2183  fc93
   2184  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2185  fc93		       85 02		      STA	WSYNC
   2186  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2187  fc98		       85 0e		      STA	PF1	;3
   2188  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2189  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2191  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2192  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2193  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2194  fcb5		       85 0e		      STA	PF1	;3
   2195  fcb7
   2196  fcb7		       ca		      DEX		;2
   2197  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2198  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2199  fcbc		       88		      DEY		;2
   2200  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2201  fcbf
   2202  fcbf				   EndQrCodeLoop
   2203  fcbf		       85 02		      STA	WSYNC	;
   2204  fcc1		       a9 00		      LDA	#0
   2205  fcc3		       85 0e		      STA	PF1	;3
   2206  fcc5		       85 0f		      STA	PF2	;3
   2207  fcc7
   2208  fcc7		       20 2c fa 	      JSR	Sleep32Lines
   2209  fcca		       4c 64 f6 	      JMP	PrepareOverscan
   2210  fccd
   2211  fd00					      org	$FD00
   2212  fd00				   Font
   2213  fd00				   C0
   2214  fd00		       e7		      .byte.b	#%11100111	;
   2215  fd01		       a5		      .byte.b	#%10100101	; 
   2216  fd02		       a5		      .byte.b	#%10100101	; 
   2217  fd03		       a5		      .byte.b	#%10100101	; 
   2218  fd04		       e7		      .byte.b	#%11100111	;	
   2219  fd05				   C1
   2220  fd05		       e7		      .byte.b	#%11100111	;
   2221  fd06		       42		      .byte.b	#%01000010	; 
   2222  fd07		       42		      .byte.b	#%01000010	; 
   2223  fd08		       42		      .byte.b	#%01000010	; 
   2224  fd09		       66		      .byte.b	#%01100110	;
   2225  fd0a				   C2
   2226  fd0a		       e7		      .byte.b	#%11100111	;
   2227  fd0b		       24		      .byte.b	#%00100100	; 
   2228  fd0c		       e7		      .byte.b	#%11100111	; 
   2229  fd0d		       81		      .byte.b	#%10000001	; 
   2230  fd0e		       e7		      .byte.b	#%11100111	;
   2231  fd0f				   C3
   2232  fd0f		       e7		      .byte.b	#%11100111	;
   2233  fd10		       81		      .byte.b	#%10000001	; 
   2234  fd11		       e7		      .byte.b	#%11100111	; 
   2235  fd12		       81		      .byte.b	#%10000001	; 
   2236  fd13		       e7		      .byte.b	#%11100111	;
   2237  fd14				   C4
   2238  fd14		       81		      .byte.b	#%10000001	;
   2239  fd15		       81		      .byte.b	#%10000001	; 
   2240  fd16		       e7		      .byte.b	#%11100111	; 
   2241  fd17		       a5		      .byte.b	#%10100101	; 
   2242  fd18		       a5		      .byte.b	#%10100101	;
   2243  fd19				   C5
   2244  fd19		       e7		      .byte.b	#%11100111	;
   2245  fd1a		       81		      .byte.b	#%10000001	; 
   2246  fd1b		       e7		      .byte.b	#%11100111	; 
   2247  fd1c		       24		      .byte.b	#%00100100	; 
   2248  fd1d		       e7		      .byte.b	#%11100111	;
   2249  fd1e				   C6
   2250  fd1e		       e7		      .byte.b	#%11100111	;
   2251  fd1f		       a5		      .byte.b	#%10100101	; 
   2252  fd20		       e7		      .byte.b	#%11100111	; 
   2253  fd21		       24		      .byte.b	#%00100100	; 
   2254  fd22		       e7		      .byte.b	#%11100111	;
   2255  fd23				   C7
   2256  fd23		       81		      .byte.b	#%10000001	;
   2257  fd24		       81		      .byte.b	#%10000001	; 
   2258  fd25		       81		      .byte.b	#%10000001	; 
   2259  fd26		       81		      .byte.b	#%10000001	; 
   2260  fd27		       e7		      .byte.b	#%11100111	;
   2261  fd28				   C8
   2262  fd28		       e7		      .byte.b	#%11100111	;
   2263  fd29		       a5		      .byte.b	#%10100101	; 
   2264  fd2a		       e7		      .byte.b	#%11100111	; 
   2265  fd2b		       a5		      .byte.b	#%10100101	; 
   2266  fd2c		       e7		      .byte.b	#%11100111	;
   2267  fd2d				   C9
   2268  fd2d		       e7		      .byte.b	#%11100111	;
   2269  fd2e		       81		      .byte.b	#%10000001	; 
   2270  fd2f		       e7		      .byte.b	#%11100111	; 
   2271  fd30		       a5		      .byte.b	#%10100101	; 
   2272  fd31		       e7		      .byte.b	#%11100111	;
   2273  fd32				   CA
   2274  fd32		       a5		      .byte.b	#%10100101	;
   2275  fd33		       a5		      .byte.b	#%10100101	; 
   2276  fd34		       e7		      .byte.b	#%11100111	; 
   2277  fd35		       a5		      .byte.b	#%10100101	; 
   2278  fd36		       e7		      .byte.b	#%11100111	;
   2279  fd37				   CB
   2280  fd37		       66		      .byte.b	#%01100110	;
   2281  fd38		       a5		      .byte.b	#%10100101	; 
   2282  fd39		       66		      .byte.b	#%01100110	; 
   2283  fd3a		       a5		      .byte.b	#%10100101	;
   2284  fd3b		       66		      .byte.b	#%01100110	;
   2285  fd3c				   CC
   2286  fd3c		       e7		      .byte.b	#%11100111	;
   2287  fd3d		       24		      .byte.b	#%00100100	; 
   2288  fd3e		       24		      .byte.b	#%00100100	; 
   2289  fd3f		       24		      .byte.b	#%00100100	;
   2290  fd40		       e7		      .byte.b	#%11100111	;
   2291  fd41
   2292  fd41				   CD
   2293  fd41		       66		      .byte.b	#%01100110	;
   2294  fd42		       a5		      .byte.b	#%10100101	; 
   2295  fd43		       a5		      .byte.b	#%10100101	; 
   2296  fd44		       a5		      .byte.b	#%10100101	;
   2297  fd45		       66		      .byte.b	#%01100110	;
   2298  fd46
   2299  fd46				   CE
   2300  fd46		       e7		      .byte.b	#%11100111	;
   2301  fd47		       24		      .byte.b	#%00100100	; 
   2302  fd48		       e7		      .byte.b	#%11100111	; 
   2303  fd49		       24		      .byte.b	#%00100100	; 
   2304  fd4a		       e7		      .byte.b	#%11100111	;
   2305  fd4b
   2306  fd4b				   CF
   2307  fd4b		       24		      .byte.b	#%00100100	;
   2308  fd4c		       24		      .byte.b	#%00100100	; 
   2309  fd4d		       e7		      .byte.b	#%11100111	; 
   2310  fd4e		       24		      .byte.b	#%00100100	; 
   2311  fd4f		       e7		      .byte.b	#%11100111	;
   2312  fd50
   2313  fd50				   CG
   2314  fd50		       c3		      .byte.b	#%11000011	;
   2315  fd51		       a5		      .byte.b	#%10100101	; 
   2316  fd52		       a5		      .byte.b	#%10100101	; 
   2317  fd53		       24		      .byte.b	#%00100100	; 
   2318  fd54		       c3		      .byte.b	#%11000011	;	
   2319  fd55
   2320  fd55				   CH
   2321  fd55		       a5		      .byte.b	#%10100101	;
   2322  fd56		       a5		      .byte.b	#%10100101	; 
   2323  fd57		       e7		      .byte.b	#%11100111	; 
   2324  fd58		       a5		      .byte.b	#%10100101	; 
   2325  fd59		       a5		      .byte.b	#%10100101	;
   2326  fd5a
   2327  fd5a				   CK
   2328  fd5a		       a5		      .byte.b	#%10100101	;
   2329  fd5b		       a5		      .byte.b	#%10100101	; 
   2330  fd5c		       66		      .byte.b	#%01100110	; 
   2331  fd5d		       a5		      .byte.b	#%10100101	; 
   2332  fd5e		       a5		      .byte.b	#%10100101	;
   2333  fd5f
   2334  fd5f				   CL
   2335  fd5f		       e7		      .byte.b	#%11100111	;
   2336  fd60		       24		      .byte.b	#%00100100	; 
   2337  fd61		       24		      .byte.b	#%00100100	; 
   2338  fd62		       24		      .byte.b	#%00100100	; 
   2339  fd63		       24		      .byte.b	#%00100100	;
   2340  fd64
   2341  fd64				   CI
   2342  fd64		       42		      .byte.b	#%01000010	;
   2343  fd65		       42		      .byte.b	#%01000010	; 
   2344  fd66		       42		      .byte.b	#%01000010	; 
   2345  fd67		       42		      .byte.b	#%01000010	; 
   2346  fd68		       42		      .byte.b	#%01000010	;
   2347  fd69
   2348  fd69				   CM
   2349  fd69		       a5		      .byte.b	#%10100101	;
   2350  fd6a		       a5		      .byte.b	#%10100101	; 
   2351  fd6b		       a5		      .byte.b	#%10100101	; 
   2352  fd6c		       e7		      .byte.b	#%11100111	; 
   2353  fd6d		       a5		      .byte.b	#%10100101	;
   2354  fd6e
   2355  fd6e				   CN
   2356  fd6e		       a5		      .byte.b	#%10100101	;
   2357  fd6f		       a5		      .byte.b	#%10100101	; 
   2358  fd70		       a5		      .byte.b	#%10100101	; 
   2359  fd71		       a5		      .byte.b	#%10100101	; 
   2360  fd72		       66		      .byte.b	#%01100110	;	
   2361  fd73
   2362  fd73
   2363  fd73				   CO
   2364  fd73		       42		      .byte.b	#%01000010	;
   2365  fd74		       a5		      .byte.b	#%10100101	; 
   2366  fd75		       a5		      .byte.b	#%10100101	; 
   2367  fd76		       a5		      .byte.b	#%10100101	; 
   2368  fd77		       42		      .byte.b	#%01000010	;	
   2369  fd78
   2370  fd78				   CP
   2371  fd78		       24		      .byte.b	#%00100100	;
   2372  fd79		       24		      .byte.b	#%00100100	; 
   2373  fd7a		       e7		      .byte.b	#%11100111	; 
   2374  fd7b		       a5		      .byte.b	#%10100101	; 
   2375  fd7c		       e7		      .byte.b	#%11100111	;
   2376  fd7d
   2377  fd7d				   CR
   2378  fd7d		       a5		      .byte.b	#%10100101	;
   2379  fd7e		       a5		      .byte.b	#%10100101	; 
   2380  fd7f		       66		      .byte.b	#%01100110	; 
   2381  fd80		       a5		      .byte.b	#%10100101	; 
   2382  fd81		       66		      .byte.b	#%01100110	;
   2383  fd82
   2384  fd82				   CS
   2385  fd82		       66		      .byte.b	#%01100110	;
   2386  fd83		       81		      .byte.b	#%10000001	; 
   2387  fd84		       42		      .byte.b	#%01000010	; 
   2388  fd85		       24		      .byte.b	#%00100100	; 
   2389  fd86		       c3		      .byte.b	#%11000011	;
   2390  fd87
   2391  fd87				   CT
   2392  fd87		       42		      .byte.b	#%01000010	;
   2393  fd88		       42		      .byte.b	#%01000010	; 
   2394  fd89		       42		      .byte.b	#%01000010	; 
   2395  fd8a		       42		      .byte.b	#%01000010	; 
   2396  fd8b		       e7		      .byte.b	#%11100111	;
   2397  fd8c
   2398  fd8c				   CV
   2399  fd8c		       42		      .byte.b	#%01000010	;
   2400  fd8d		       a5		      .byte.b	#%10100101	; 
   2401  fd8e		       a5		      .byte.b	#%10100101	; 
   2402  fd8f		       a5		      .byte.b	#%10100101	; 
   2403  fd90		       a5		      .byte.b	#%10100101	;	
   2404  fd91
   2405  fd91				   CY
   2406  fd91		       42		      .byte.b	#%01000010	;
   2407  fd92		       42		      .byte.b	#%01000010	; 
   2408  fd93		       42		      .byte.b	#%01000010	; 
   2409  fd94		       a5		      .byte.b	#%10100101	; 
   2410  fd95		       a5		      .byte.b	#%10100101	;
   2411  fd96
   2412  fd96				   CW
   2413  fd96		       a5		      .byte.b	#%10100101	;
   2414  fd97		       e7		      .byte.b	#%11100111	; 
   2415  fd98		       a5		      .byte.b	#%10100101	; 
   2416  fd99		       a5		      .byte.b	#%10100101	; 
   2417  fd9a		       a5		      .byte.b	#%10100101	;
   2418  fd9b
   2419  fd9b				   CZ
   2420  fd9b		       e7		      .byte.b	#%11100111	;
   2421  fd9c		       24		      .byte.b	#%00100100	; 
   2422  fd9d		       42		      .byte.b	#%01000010	; 
   2423  fd9e		       81		      .byte.b	#%10000001	; 
   2424  fd9f		       e7		      .byte.b	#%11100111	;
   2425  fda0
   2426  fda0				   Pipe
   2427  fda0		       42		      .byte.b	#%01000010	;
   2428  fda1		       00		      .byte.b	#%00000000	; 
   2429  fda2		       42		      .byte.b	#%01000010	; 
   2430  fda3		       00		      .byte.b	#%00000000	; 
   2431  fda4		       42		      .byte.b	#%01000010	;
   2432  fda5
   2433  fda5				   Exclamation
   2434  fda5		       42		      .byte.b	#%01000010	;
   2435  fda6		       00		      .byte.b	#%00000000	; 
   2436  fda7		       42		      .byte.b	#%01000010	; 
   2437  fda8		       42		      .byte.b	#%01000010	; 
   2438  fda9		       42		      .byte.b	#%01000010	;
   2439  fdaa
   2440  fdaa				   Dot
   2441  fdaa		       42		      .byte.b	#%01000010	;
   2442  fdab		       42		      .byte.b	#%01000010	; 
   2443  fdac		       00		      .byte.b	#%00000000	; 
   2444  fdad		       00		      .byte.b	#%00000000	; 
   2445  fdae		       00		      .byte.b	#%00000000	;
   2446  fdaf
   2447  fdaf				   Colon
   2448  fdaf		       42		      .byte.b	#%01000010	;
   2449  fdb0		       42		      .byte.b	#%01000010	; 
   2450  fdb1		       00		      .byte.b	#%00000000	; 
   2451  fdb2		       42		      .byte.b	#%01000010	; 
   2452  fdb3		       42		      .byte.b	#%01000010	;
   2453  fdb4
   2454  fdb4				   Triangle
   2455  fdb4		       81		      .byte.b	#%10000001	;
   2456  fdb5		       c3		      .byte.b	#%11000011	; 
   2457  fdb6		       e7		      .byte.b	#%11100111	; 
   2458  fdb7		       c3		      .byte.b	#%11000011	; 
   2459  fdb8		       81		      .byte.b	#%10000001	;
   2460  fdb9
   2461  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2462  fdb9		       00		      .byte.b	#0	;
   2463  fdba		       00		      .byte.b	#0	;
   2464  fdbb		       00		      .byte.b	#0	;
   2465  fdbc		       00		      .byte.b	#0	;
   2466  fdbd		       00		      .byte.b	#0	;
   2467  fdbe
   2468  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2469  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2470  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2471  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2472  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2473  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2474  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2475  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2476  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2477  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2478  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2479  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2480  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2481  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2482  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2483  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2484  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2485  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2486  fdcf
   2487  fdcf				   EngineSoundType
   2488  fdcf		       02		      .byte.b	#2
   2489  fdd0		       02		      .byte.b	#2
   2490  fdd1		       0e		      .byte.b	#14
   2491  fdd2		       06		      .byte.b	#6
   2492  fdd3		       06		      .byte.b	#6
   2493  fdd4		       0e		      .byte.b	#14
   2494  fdd5
   2495  fdd5				   EngineBaseFrequence
   2496  fdd5		       1f		      .byte.b	#31
   2497  fdd6		       15		      .byte.b	#21
   2498  fdd7		       14		      .byte.b	#20
   2499  fdd8		       1f		      .byte.b	#31
   2500  fdd9		       16		      .byte.b	#22
   2501  fdda		       03		      .byte.b	#3
   2502  fddb
   2503  fddb				   TachometerSizeLookup1
   2504  fddb		       1f		      .byte.b	#%00011111
   2505  fddc		       3f		      .byte.b	#%00111111
   2506  fddd		       7f		      .byte.b	#%01111111
   2507  fdde		       ff		      .byte.b	#%11111111
   2508  fddf		       ff		      .byte.b	#%11111111
   2509  fde0		       ff		      .byte.b	#%11111111
   2510  fde1		       ff		      .byte.b	#%11111111
   2511  fde2		       ff		      .byte.b	#%11111111
   2512  fde3
   2513  fde3				   TachometerSizeLookup2
   2514  fde3		       00		      .byte.b	#%00000000
   2515  fde4		       00		      .byte.b	#%00000000
   2516  fde5		       00		      .byte.b	#%00000000
   2517  fde6		       00		      .byte.b	#%00000000
   2518  fde7		       80		      .byte.b	#%10000000
   2519  fde8		       c0		      .byte.b	#%11000000
   2520  fde9		       e0		      .byte.b	#%11100000
   2521  fdea		       f0		      .byte.b	#%11110000
   2522  fdeb
   2523  fdeb				   TachometerGearLookup
   2524  fdeb		       01		      .byte.b	#%00000001
   2525  fdec		       02		      .byte.b	#%00000010
   2526  fded		       04		      .byte.b	#%00000100
   2527  fdee		       08		      .byte.b	#%00001000
   2528  fdef		       10		      .byte.b	#%00010000
   2529  fdf0		       30		      .byte.b	#%00110000
   2530  fdf1
   2531  fe00					      org	$FE00
   2532  fe00				   AesTable
   2533  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2534  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2535  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2536  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2537  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2538  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2539  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2540  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2541  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2542  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2543  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2544  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2545  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2546  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2547  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2548  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2549  ff00
   2550  ff00							; From FF00 to FFFB (122 bytes) to use here
   2551  ff00
   2552  ff00				   StaticText		; All static text must be on the same MSB block. 
   2553  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2554  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2555  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2556  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2557  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2558  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2559  ff05
   2560  ff05				   HellwayLeftText
   2561  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2562  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2563  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2564  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2565  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2566  ff0a
   2567  ff0a				   HellwayRightText
   2568  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2569  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2570  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2571  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2572  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2573  ff0f
   2574  ff0f				   OpbText
   2575  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2576  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2577  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2578  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2579  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2580  ff14
   2581  ff14				   YearText
   2582  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2583  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2584  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2585  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2586  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2587  ff19
   2588  ff19				   GameText
   2589  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2590  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2591  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2592  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2593  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2594  ff1e
   2595  ff1e				   OverText
   2596  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2597  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2598  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2599  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2600  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2601  ff23				   GoText
   2602  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2603  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2604  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2605  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2606  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2607  ff28
   2608  ff28				   ZeldaTextLeft
   2609  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2610  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2611  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2612  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2613  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2614  ff2d
   2615  ff2d				   ZeldaTextRight
   2616  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2617  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2618  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2619  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2620  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2621  ff32
   2622  ff32				   ZeldaDateLeft
   2623  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2624  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2625  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2626  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2627  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2628  ff37
   2629  ff37				   ZeldaDateRight
   2630  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2631  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2632  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2633  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2634  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2635  ff3c
   2636  ff3c				   PolvinhosTextLeft
   2637  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2638  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2639  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2640  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2641  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2642  ff41
   2643  ff41				   PolvinhosTextRight
   2644  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2645  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2646  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2647  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2648  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2649  ff46
   2650  ff46				   PolvinhosDateLeft
   2651  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2652  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2653  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2654  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2655  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2656  ff4b
   2657  ff4b				   PolvinhosDateRight
   2658  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2659  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2660  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2661  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2662  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2663  ff50
   2664  ff50				   IvonneTextLeft
   2665  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2666  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2667  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2668  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2669  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2670  ff55
   2671  ff55				   IvonneTextRight
   2672  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2673  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2674  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2675  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2676  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2677  ff5a
   2678  ff5a				   IvonneDateLeft
   2679  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2680  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2681  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2682  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2683  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2684  ff5f
   2685  ff5f				   IvonneDateRight
   2686  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2687  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2688  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2689  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2690  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2691  ff64
   2692  ff64				   PaperArtTextLeft
   2693  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2694  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2695  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2696  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2697  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2698  ff69
   2699  ff69				   PaperArtTextRight
   2700  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2701  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2702  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2703  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2704  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2705  ff6e
   2706  ff6e				   LeonardoTextLeft
   2707  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2708  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2709  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2710  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2711  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2712  ff73
   2713  ff73				   LeonardoTextRight
   2714  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2715  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2716  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2717  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2718  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2719  ff78
   2720  ff78				   VersionText
   2721  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2722  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2723  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2724  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2725  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2726  ff7d
   2727  ff7d
   2728  ff7d				   EndStaticText
   2729  ff7d
   2730  ff7d				   CarSprite0		; Upside down, Original Car
   2731  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2732  ff85				   CarSprite0NoPadding
   2733  ff85		       7e		      .byte.b	#%01111110
   2734  ff86		       24		      .byte.b	#%00100100
   2735  ff87		       bd		      .byte.b	#%10111101
   2736  ff88		       3c		      .byte.b	#%00111100
   2737  ff89		       bd		      .byte.b	#%10111101
   2738  ff8a		       3c		      .byte.b	#%00111100
   2739  ff8b
   2740  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2741  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2742  ff93				   CarSprite1NoPadding
   2743  ff93		       bd		      .byte.b	#%10111101
   2744  ff94		       7e		      .byte.b	#%01111110
   2745  ff95		       5a		      .byte.b	#%01011010
   2746  ff96		       66		      .byte.b	#%01100110
   2747  ff97		       bd		      .byte.b	#%10111101
   2748  ff98		       3c		      .byte.b	#%00111100
   2749  ff99
   2750  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2751  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2752  ffa1				   CarSprite2NoPadding
   2753  ffa1		       7e		      .byte.b	#%01111110
   2754  ffa2		       a5		      .byte.b	#%10100101
   2755  ffa3		       42		      .byte.b	#%01000010
   2756  ffa4		       42		      .byte.b	#%01000010
   2757  ffa5		       bd		      .byte.b	#%10111101
   2758  ffa6		       7e		      .byte.b	#%01111110
   2759  ffa7
   2760  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2761  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2762  ffaf				   CarSprite3NoPadding
   2763  ffaf		       3c		      .byte.b	#%00111100
   2764  ffb0		       db		      .byte.b	#%11011011
   2765  ffb1		       db		      .byte.b	#%11011011
   2766  ffb2		       3c		      .byte.b	#%00111100
   2767  ffb3		       5a		      .byte.b	#%01011010
   2768  ffb4		       3c		      .byte.b	#%00111100
   2769  ffb5
   2770  ffb5				   TrafficSpeeds
   2771  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2772  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2773  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2774  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2775  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2776  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2777  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2778  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2779  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2780  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2781  ffbf				   TrafficSpeedsHighDelta
   2782  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2783  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2784  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2785  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2786  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2787  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2788  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2789  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2790  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2791  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2792  ffc9
   2793  ffc9				   CarIdToSpriteAddressL
   2794  ffc9		       7d		      .byte.b	#<CarSprite0
   2795  ffca		       8b		      .byte.b	#<CarSprite1
   2796  ffcb		       99		      .byte.b	#<CarSprite2
   2797  ffcc		       a7		      .byte.b	#<CarSprite3
   2798  ffcd
   2799  ffcd				   CarIdToSpriteAddressH
   2800  ffcd		       ff		      .byte.b	#>CarSprite0
   2801  ffce		       ff		      .byte.b	#>CarSprite1
   2802  ffcf		       ff		      .byte.b	#>CarSprite2
   2803  ffd0		       ff		      .byte.b	#>CarSprite3
   2804  ffd1
   2805  ffd1				   EnemyCarIdToSpriteAddressL
   2806  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2807  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2808  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2809  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2810  ffd5
   2811  ffd5				   EnemyCarIdToSpriteAddressH
   2812  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2813  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2814  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2815  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2816  ffd9
   2817  ffd9				   CarIdToAccelerateSpeed
   2818  ffd9		       80		      .byte.b	#128
   2819  ffda		       c0		      .byte.b	#192
   2820  ffdb		       60		      .byte.b	#96
   2821  ffdc		       c0		      .byte.b	#192
   2822  ffdd
   2823  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2824  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2825  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2826  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2827  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2828  ffe1
   2829  ffe1				   CarIdToMaxSpeedL
   2830  ffe1		       80		      .byte.b	#$80
   2831  ffe2		       00		      .byte.b	#$00	; One less gear
   2832  ffe3		       80		      .byte.b	#$80
   2833  ffe4		       80		      .byte.b	#$80
   2834  ffe5
   2835  ffe5				   CarIdToMaxGear
   2836  ffe5		       05		      .byte.b	#5
   2837  ffe6		       04		      .byte.b	#4	; One less gear
   2838  ffe7		       05		      .byte.b	#5
   2839  ffe8		       05		      .byte.b	#5
   2840  ffe9
   2841  ffe9				   GearToBreakSpeedTable
   2842  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2843  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2844  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2845  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2846  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2847  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2848  ffef
   2849  ffef				   TrafficColorTable
   2850  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2851  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2852  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2853  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2854  fff3
   2855  fff3				   TrafficChanceTable
   2856  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2857  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2858  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2859  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2860  fff7
   2861  fff7				   TrafficTimeTable
   2862  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2863  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2864  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2865  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2866  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2867  fffc
   2868  fffc
   2869  fffc					      org	$FFFC
   2870  fffc		       00 f0		      .word.w	BeforeStart
   2871  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
