------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 df f6 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad 8f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 ac f6 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080		       85 b9		      STA	OpCountdownTimer	;3
    283  f082
    284  f082				   ConfigurePlayer1XPosition
    285  f082		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    286  f084		       85 b7		      STA	Player1X	;3
    287  f086
    288  f086				   HPositioning 		; Avoid sleep doing needed stuff
    289  f086		       85 02		      STA	WSYNC
    290  f088
    291  f088				   ConfigurePlayer0XPosition
    292  f088		       a9 21		      LDA	#PLAYER_0_X_START	;2
    293  f08a		       85 b6		      STA	Player0X	;3
    294  f08c
    295  f08c				   ConfigureMissileSize
    296  f08c		       a9 30		      LDA	#%00110000	;2 Missile Size
    297  f08e		       85 04		      STA	NUSIZ0	;3
    298  f090		       85 05		      STA	NUSIZ1	;3
    299  f092
    300  f092				   ConfigureNextCheckpoint
    301  f092		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    302  f094		       85 cd		      STA	NextCheckpoint
    303  f096
    304  f096		       a9 00		      LDA	#0	; Avoid missile reseting position 
    305  f098							;SLEEP 41
      0  f098					      SLEEP	4	;
      1  f098				   .CYCLES    SET	4
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     19  f09a					      REPEND
    307  f09a		       85 12		      STA	RESM0
      0  f09c					      SLEEP	2	;
      1  f09c				   .CYCLES    SET	2
      2  f09c
      3  f09c				  -	      IF	.CYCLES < 2
      4  f09c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09c				  -	      ERR
      6  f09c					      ENDIF
      7  f09c
      8  f09c				  -	      IF	.CYCLES & 1
      9  f09c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09c				  -	      nop	0
     11  f09c				  -	      ELSE
     12  f09c				  -	      bit	VSYNC
     13  f09c				  -	      ENDIF
     14  f09c				  -.CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c					      REPEAT	.CYCLES / 2
     18  f09c		       ea		      nop
     19  f09d					      REPEND
    309  f09d		       85 14		      STA	RESBL
      0  f09f					      SLEEP	2
      1  f09f				   .CYCLES    SET	2
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f				  -	      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f				  -	      ELSE
     12  f09f				  -	      bit	VSYNC
     13  f09f				  -	      ENDIF
     14  f09f				  -.CYCLES    SET	.CYCLES - 3
     15  f09f					      ENDIF
     16  f09f
     17  f09f					      REPEAT	.CYCLES / 2
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    311  f0a0		       85 13		      STA	RESM1
      0  f0a2					      SLEEP	3
      1  f0a2				   .CYCLES    SET	3
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4				  -	      REPEAT	.CYCLES / 2
     18  f0a4				  -	      nop
     19  f0a4					      REPEND
    313  f0a4
    314  f0a4		       a9 e0		      LDA	#$E0
    315  f0a6		       85 24		      STA	HMBL
    316  f0a8		       85 22		      STA	HMM0
    317  f0aa		       85 23		      STA	HMM1
    318  f0ac		       85 02		      STA	WSYNC
    319  f0ae		       85 2a		      STA	HMOVE
    320  f0b0		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    321  f0b2		       85 2b		      STA	HMCLR
      0  f0b4					      SLEEP	30
      1  f0b4				   .CYCLES    SET	30
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     19  f0c3					      REPEND
    323  f0c3		       85 10		      STA	RESP0
    324  f0c5							;SLEEP 5 ; Temporarily move player 1 away.
    325  f0c5		       85 11		      STA	RESP1
    326  f0c7
    327  f0c7				   WaitResetToEnd
    328  f0c7		       ad 84 02 	      LDA	INTIM
    329  f0ca		       d0 fb		      BNE	WaitResetToEnd
    330  f0cc
    331  f0cc				   MainLoop
    332  f0cc		       a9 02		      LDA	#2
    333  f0ce		       85 00		      STA	VSYNC
    334  f0d0		       85 02		      STA	WSYNC
    335  f0d2		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    336  f0d4				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    337  f0d4		       a9 01		      LDA	#%00000001	;3
    338  f0d6		       24 df		      BIT	TextFlickerMode	;2
    339  f0d8		       f0 05		      BEQ	TextSideFrameZero	;2
    340  f0da		       25 8d		      AND	FrameCount1	;2
    341  f0dc		       4c e1 f0 	      JMP	StoreTextSize	;3
    342  f0df				   TextSideFrameZero
    343  f0df		       25 8c		      AND	FrameCount0	;2
    344  f0e1				   StoreTextSize
    345  f0e1		       85 de		      STA	TextSide	;3
    346  f0e3
    347  f0e3				   PrepareMaxHMove
      0  f0e3					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e3				   .CYCLES    SET	18
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     19  f0ec					      REPEND
    349  f0ec		       a9 80		      LDA	#$80
    350  f0ee		       85 24		      STA	HMBL
    351  f0f0		       85 22		      STA	HMM0
    352  f0f2		       85 23		      STA	HMM1
    353  f0f4		       85 20		      STA	HMP0
    354  f0f6		       85 21		      STA	HMP1
    355  f0f8		       85 02		      STA	WSYNC
    356  f0fa		       85 2a		      STA	HMOVE	; 1/10			
    357  f0fc
    358  f0fc				   ConfigVBlankTimer
    359  f0fc		       a5 c6		      LDA	GameMode
    360  f0fe		       c9 10		      CMP	#MAX_GAME_MODE
    361  f100		       f0 05		      BEQ	SetVblankTimerQrCode
    362  f102		       a9 29		      LDA	#VBLANK_TIMER
    363  f104		       4c 09 f1 	      JMP	SetVblankTimer
    364  f107				   SetVblankTimerQrCode
    365  f107		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    366  f109
    367  f109				   SetVblankTimer
    368  f109		       85 02		      STA	WSYNC	;3
    369  f10b		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    370  f10d		       8d 96 02 	      STA	TIM64T	;3	
    371  f110		       a9 00		      LDA	#0	;2
    372  f112		       85 00		      STA	VSYNC	;3	
    373  f114
    374  f114				   RandomizeGame
    375  f114		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f116		       d0 2d		      BNE	EndRandomizeGame
    377  f118		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f11a		       29 02		      AND	#%00000010
    379  f11c		       f0 24		      BEQ	DeterministicGame
    380  f11e		       a6 96		      LDX	TrafficOffset1 + 2
    381  f120		       bd 00 fe 	      LDA	AesTable,X
    382  f123		       45 8c		      EOR	FrameCount0
    383  f125		       85 96		      STA	TrafficOffset1 + 2
    384  f127		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f129		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f12b		       bd 00 fe 	      LDA	AesTable,X
    387  f12e		       45 8c		      EOR	FrameCount0
    388  f130		       85 9a		      STA	TrafficOffset2 + 2
    389  f132		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f134		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f136		       bd 00 fe 	      LDA	AesTable,X
    392  f139		       45 8c		      EOR	FrameCount0
    393  f13b		       85 9e		      STA	TrafficOffset3 + 2
    394  f13d		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13f		       4c 45 f1 	      JMP	EndRandomizeGame
    396  f142
    397  f142				   DeterministicGame
    398  f142		       20 df f6 	      JSR	DefaultOffsets
    399  f145
    400  f145				   EndRandomizeGame
    401  f145
    402  f145
    403  f145				   CountFrame
    404  f145		       e6 8c		      INC	FrameCount0	; 5
    405  f147		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    406  f149		       e6 8d		      INC	FrameCount1	; 5 
    407  f14b				   SkipIncFC1
    408  f14b
    409  f14b				   CallDrawQrCode
    410  f14b		       a5 c6		      LDA	GameMode
    411  f14d		       c9 10		      CMP	#MAX_GAME_MODE
    412  f14f		       d0 03		      BNE	TestIsGameRunning
    413  f151		       4c d4 fa 	      JMP	DrawQrCode
    414  f154
    415  f154							;Does not update the game if not running
    416  f154				   TestIsGameRunning
    417  f154		       a5 bd		      LDA	GameStatus	;3
    418  f156		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    419  f158				   SelectCarWithDpadCall		; Only do it when game is stoped
    420  f158		       a2 00		      LDX	#0	; Player 0
    421  f15a		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    422  f15c		       85 b0		      STA	Tmp0
    423  f15e		       20 e8 f8 	      JSR	SelectCarWithDpad
    424  f161		       e8		      INX		; Player 1
    425  f162		       20 e8 f8 	      JSR	SelectCarWithDpad
    426  f165
    427  f165							; Needs to draw the opponent in the correct line even when game stoped  
    428  f165							; Draeing is a destructive operation
    429  f165		       20 fa f8 	      JSR	ProcessOpponentLine
    430  f168
    431  f168				   CallConfigureCarSprites
    432  f168		       20 b6 f8 	      JSR	ConfigureCarSprites
    433  f16b				   SkipUpdateLogicJump
    434  f16b		       4c b4 f1 	      JMP	SkipUpdateLogic
    435  f16e				   ContinueWithGameLogic
    436  f16e
    437  f16e				   CallEverySecond		; Timer for now
    438  f16e		       a2 00		      LDX	#0
    439  f170		       20 ab fa 	      JSR	EverySecond
    440  f173		       e8		      INX
    441  f174		       20 ab fa 	      JSR	EverySecond
    442  f177
    443  f177
    444  f177				   ChangeTextFlickerMode
    445  f177		       a5 bc		      LDA	SwitchDebounceCounter
    446  f179		       d0 0d		      BNE	EndChangeTextFlickerMode
    447  f17b		       ad 82 02 	      LDA	SWCHB
    448  f17e		       29 02		      AND	#%00000010	;Game select
    449  f180		       d0 06		      BNE	EndChangeTextFlickerMode
    450  f182		       e6 df		      INC	TextFlickerMode
    451  f184		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    452  f186		       85 bc		      STA	SwitchDebounceCounter
    453  f188				   EndChangeTextFlickerMode
    454  f188
    455  f188				   CallProcessSpeed
    456  f188		       a2 00		      LDX	#0
    457  f18a		       20 08 fa 	      JSR	ProcessSpeed
    458  f18d
    459  f18d		       e8		      INX		; Player 1
    460  f18e		       20 08 fa 	      JSR	ProcessSpeed
    461  f191
    462  f191				   CallUpdateOffsets
    463  f191		       a2 00		      LDX	#0	; Player 0
    464  f193		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    465  f195		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    466  f197		       a5 f0		      LDA	Player0SpeedL
    467  f199		       85 b4		      STA	Tmp4
    468  f19b		       a5 f2		      LDA	Player0SpeedH
    469  f19d		       85 b5		      STA	Tmp5
    470  f19f		       20 b5 f9 	      JSR	UpdateOffsets
    471  f1a2
    472  f1a2							;LDX Exits the call with correct value.
    473  f1a2		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    474  f1a4		       85 b3		      STA	Tmp3
    475  f1a6		       a5 f1		      LDA	Player1SpeedL
    476  f1a8		       85 b4		      STA	Tmp4
    477  f1aa		       a5 f3		      LDA	Player1SpeedH
    478  f1ac		       85 b5		      STA	Tmp5
    479  f1ae		       20 b5 f9 	      JSR	UpdateOffsets
    480  f1b1
    481  f1b1				   CallProcessOpponentLine
    482  f1b1		       20 fa f8 	      JSR	ProcessOpponentLine
    483  f1b4
    484  f1b4
    485  f1b4				   SkipUpdateLogic		; Continue here if not paused
    486  f1b4
    487  f1b4				   CallStatusUpdateSbr
    488  f1b4		       a2 00		      LDX	#0
    489  f1b6		       20 b8 fa 	      JSR	CalculateGear
    490  f1b9		       20 c5 fa 	      JSR	ProcessScoreFontColor
    491  f1bc		       e8		      INX
    492  f1bd		       20 b8 fa 	      JSR	CalculateGear
    493  f1c0		       20 c5 fa 	      JSR	ProcessScoreFontColor
    494  f1c3
    495  f1c3				   IsGameOver
    496  f1c3		       a5 b8		      LDA	CountdownTimer
    497  f1c5		       05 f0		      ORA	Player0SpeedL
    498  f1c7		       05 f2		      ORA	Player0SpeedH
    499  f1c9		       d0 0b		      BNE	IsCheckpoint
    500  f1cb		       a9 01		      LDA	#1
    501  f1cd		       85 cb		      STA	ScoreFontColorHoldChange
    502  f1cf		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    503  f1d1		       85 c9		      STA	ScoreFontColor
    504  f1d3		       4c 08 f2 	      JMP	SkipIsTimeOver
    505  f1d6
    506  f1d6				   IsCheckpoint
    507  f1d6		       a5 cd		      LDA	NextCheckpoint
    508  f1d8		       c5 92		      CMP	TrafficOffset0 + 2
    509  f1da		       d0 20		      BNE	SkipIsCheckpoint
    510  f1dc		       18		      CLC
    511  f1dd		       69 10		      ADC	#CHECKPOINT_INTERVAL
    512  f1df		       85 cd		      STA	NextCheckpoint
    513  f1e1		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    514  f1e3		       85 c9		      STA	ScoreFontColor
    515  f1e5		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    516  f1e7		       85 cb		      STA	ScoreFontColorHoldChange
    517  f1e9		       a5 b8		      LDA	CountdownTimer
    518  f1eb		       18		      CLC
    519  f1ec		       65 c0		      ADC	CheckpointTime
    520  f1ee		       85 b8		      STA	CountdownTimer
    521  f1f0		       90 04		      BCC	JumpSkipTimeOver
    522  f1f2		       a9 ff		      LDA	#$FF
    523  f1f4		       85 b8		      STA	CountdownTimer	; Does not overflow!
    524  f1f6				   JumpSkipTimeOver
    525  f1f6		       20 9d f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    526  f1f9		       4c 08 f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    527  f1fc				   SkipIsCheckpoint
    528  f1fc
    529  f1fc				   IsTimeOver
    530  f1fc		       a5 b8		      LDA	CountdownTimer
    531  f1fe		       d0 08		      BNE	SkipIsTimeOver
    532  f200		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    533  f202		       85 cb		      STA	ScoreFontColorHoldChange
    534  f204		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    535  f206		       85 c9		      STA	ScoreFontColor
    536  f208				   SkipIsTimeOver
    537  f208
    538  f208		       20 b6 f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    539  f20b
    540  f20b				   CallProcessSound
    541  f20b		       20 c3 f5 	      JSR	ProcessSound
    542  f20e
    543  f20e							;Could be done during on vblank to save this comparisson time (before draw score), 
    544  f20e							;but I am saving vblank cycles for now, in case of 2 players.
    545  f20e				   ChooseTextSide		; 
    546  f20e		       a5 de		      LDA	TextSide	;3
    547  f210		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    548  f212		       4c 93 f2 	      JMP	RightScoreWrite
    549  f215
    550  f215				   LeftScoreWrite
    551  f215		       a5 c9		      LDA	ScoreFontColor
    552  f217		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    553  f219		       f0 4e		      BEQ	PrintCheckpoint
    554  f21b		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    555  f21d		       f0 52		      BEQ	PrintStartGame
    556  f21f		       a5 bd		      LDA	GameStatus
    557  f221		       f0 56		      BEQ	PrintHellwayLeft
    558  f223				   WriteDistance		;Not optimized yet, ugly code.
    559  f223				   Digit0Distance
    560  f223		       a5 91		      LDA	TrafficOffset0 + 1	;3
    561  f225		       4a		      LSR		; 2
    562  f226		       4a		      LSR		; 2
    563  f227		       4a		      LSR		; 2
    564  f228		       4a		      LSR		; 2
    565  f229		       aa		      TAX		; 2
    566  f22a		       bd 6c fc 	      LDA	FontLookup,X	;4
    567  f22d		       85 d3		      STA	ScoreD3	;3
    568  f22f
    569  f22f				   Digit1Distance
    570  f22f		       a5 92		      LDA	TrafficOffset0 + 2	;3
    571  f231		       29 0f		      AND	#%00001111	;2
    572  f233		       aa		      TAX		; 2
    573  f234		       bd 6c fc 	      LDA	FontLookup,X	;4 
    574  f237		       85 d2		      STA	ScoreD2	;3
    575  f239
    576  f239				   Digit2Distance
    577  f239		       a5 92		      LDA	TrafficOffset0 + 2	;3
    578  f23b		       4a		      LSR		; 2
    579  f23c		       4a		      LSR		; 2
    580  f23d		       4a		      LSR		; 2
    581  f23e		       4a		      LSR		; 2
    582  f23f		       aa		      TAX		; 2
    583  f240		       bd 6c fc 	      LDA	FontLookup,X	;4
    584  f243		       85 d1		      STA	ScoreD1	;3
    585  f245
    586  f245				   Digit3Distance
    587  f245		       a5 ba		      LDA	Traffic0Msb	;3
    588  f247		       29 0f		      AND	#%00001111	;2
    589  f249		       aa		      TAX		; 2
    590  f24a		       bd 6c fc 	      LDA	FontLookup,X	;4 
    591  f24d		       85 d0		      STA	ScoreD0	;3
    592  f24f
    593  f24f				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    594  f24f		       a5 ba		      LDA	Traffic0Msb
    595  f251		       29 f0		      AND	#%11110000	;2
    596  f253		       d0 07		      BNE	DrawDistanceExtraDigit
    597  f255		       a9 a9		      LDA	#<Pipe + #FONT_OFFSET	;3
    598  f257		       85 d4		      STA	ScoreD4	;3
    599  f259		       4c 66 f2 	      JMP	EndDrawDistance
    600  f25c				   DrawDistanceExtraDigit
    601  f25c		       4a		      LSR		; 2
    602  f25d		       4a		      LSR		; 2
    603  f25e		       4a		      LSR		; 2
    604  f25f		       4a		      LSR		; 2
    605  f260		       aa		      TAX		; 2
    606  f261		       bd 6c fc 	      LDA	FontLookup,X	;4
    607  f264		       85 d4		      STA	ScoreD4	;3
    608  f266
    609  f266				   EndDrawDistance
    610  f266		       4c fd f2 	      JMP	RightScoreWriteEnd	;3
    611  f269
    612  f269				   PrintCheckpoint
    613  f269		       a2 00		      LDX	#<CheckpointText
    614  f26b		       20 f4 f6 	      JSR	PrintStaticText
    615  f26e		       4c fd f2 	      JMP	RightScoreWriteEnd	;3
    616  f271				   PrintStartGame
    617  f271		       a2 23		      LDX	#<GoText
    618  f273		       20 f4 f6 	      JSR	PrintStaticText
    619  f276		       4c fd f2 	      JMP	RightScoreWriteEnd	;3
    620  f279
    621  f279				   PrintHellwayLeft
    622  f279		       a5 8d		      LDA	FrameCount1
    623  f27b		       29 01		      AND	#1
    624  f27d		       d0 05		      BNE	PrintCreditsLeft
    625  f27f		       a2 05		      LDX	#<HellwayLeftText
    626  f281		       4c 86 f2 	      JMP	PrintGameMode
    627  f284				   PrintCreditsLeft
    628  f284		       a2 0f		      LDX	#<OpbText
    629  f286
    630  f286				   PrintGameMode
    631  f286		       20 f4 f6 	      JSR	PrintStaticText
    632  f289		       a6 c6		      LDX	GameMode
    633  f28b		       bd 6c fc 	      LDA	FontLookup,X	;4 
    634  f28e		       85 d0		      STA	ScoreD0	;3
    635  f290		       4c fd f2 	      JMP	RightScoreWriteEnd	;3
    636  f293
    637  f293				   RightScoreWrite
    638  f293		       a5 bd		      LDA	GameStatus
    639  f295		       f0 45		      BEQ	PrintHellwayRight
    640  f297		       a5 c9		      LDA	ScoreFontColor
    641  f299		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    642  f29b		       f0 52		      BEQ	PrintGameOver
    643  f29d				   Digit0Timer
    644  f29d		       a5 b8		      LDA	CountdownTimer	;3
    645  f29f		       29 0f		      AND	#%00001111	;2
    646  f2a1		       aa		      TAX		; 2
    647  f2a2		       bd 6c fc 	      LDA	FontLookup,X	;4 
    648  f2a5		       85 d1		      STA	ScoreD1	;3
    649  f2a7
    650  f2a7				   Digit1Timer
    651  f2a7		       a5 b8		      LDA	CountdownTimer	;3
    652  f2a9		       4a		      LSR		; 2
    653  f2aa		       4a		      LSR		; 2
    654  f2ab		       4a		      LSR		; 2
    655  f2ac		       4a		      LSR		; 2
    656  f2ad		       aa		      TAX		; 2
    657  f2ae		       bd 6c fc 	      LDA	FontLookup,X	;4
    658  f2b1		       85 d0		      STA	ScoreD0	;3
    659  f2b3
    660  f2b3		       a9 a9		      LDA	#<Pipe + #FONT_OFFSET	;3
    661  f2b5		       85 d2		      STA	ScoreD2	;3
    662  f2b7
    663  f2b7				   Digit0Speed
    664  f2b7		       a5 f0		      LDA	Player0SpeedL
    665  f2b9		       29 3c		      AND	#%00111100	;2 Discard the last bits
    666  f2bb		       4a		      LSR		; 2
    667  f2bc		       4a		      LSR		; 2
    668  f2bd		       aa		      TAX		; 2
    669  f2be		       bd 6c fc 	      LDA	FontLookup,X	;4
    670  f2c1		       85 d4		      STA	ScoreD4	;3
    671  f2c3
    672  f2c3				   Digit1Speed
    673  f2c3		       a5 f0		      LDA	Player0SpeedL
    674  f2c5		       29 c0		      AND	#%11000000	;2 Discard the last bits
    675  f2c7		       18		      CLC
    676  f2c8		       2a		      ROL		;First goes into carry
    677  f2c9		       2a		      ROL
    678  f2ca		       2a		      ROL
    679  f2cb		       85 b0		      STA	Tmp0
    680  f2cd		       a5 f2		      LDA	Player0SpeedH
    681  f2cf		       0a		      ASL
    682  f2d0		       0a		      ASL
    683  f2d1		       05 b0		      ORA	Tmp0
    684  f2d3		       aa		      TAX		; 2
    685  f2d4		       bd 6c fc 	      LDA	FontLookup,X	;4
    686  f2d7		       85 d3		      STA	ScoreD3	;3
    687  f2d9		       4c fd f2 	      JMP	RightScoreWriteEnd
    688  f2dc
    689  f2dc				   PrintHellwayRight
    690  f2dc		       a5 8d		      LDA	FrameCount1
    691  f2de		       29 01		      AND	#1
    692  f2e0		       d0 05		      BNE	PrintCreditsRight
    693  f2e2		       a2 0a		      LDX	#<HellwayRightText
    694  f2e4		       4c e9 f2 	      JMP	PrintRightIntro
    695  f2e7				   PrintCreditsRight
    696  f2e7		       a2 14		      LDX	#<YearText
    697  f2e9				   PrintRightIntro
    698  f2e9		       20 f4 f6 	      JSR	PrintStaticText
    699  f2ec		       4c fd f2 	      JMP	RightScoreWriteEnd
    700  f2ef				   PrintGameOver
    701  f2ef		       a5 8c		      LDA	FrameCount0
    702  f2f1		       30 05		      BMI	PrintOverText
    703  f2f3		       a2 19		      LDX	#<GameText
    704  f2f5		       4c fa f2 	      JMP	StoreGameOverText
    705  f2f8				   PrintOverText
    706  f2f8		       a2 1e		      LDX	#<OverText
    707  f2fa				   StoreGameOverText
    708  f2fa		       20 f4 f6 	      JSR	PrintStaticText
    709  f2fd				   RightScoreWriteEnd
    710  f2fd
    711  f2fd
    712  f2fd				   ScoreBackgroundColor
    713  f2fd		       a2 00		      LDX	#0
    714  f2ff		       ad 82 02 	      LDA	SWCHB
    715  f302		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    716  f304		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    717  f306		       f0 04		      BEQ	BlackAndWhiteScoreBg
    718  f308		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    719  f30a		       a2 03		      LDX	#BACKGROUND_COLOR
    720  f30c				   BlackAndWhiteScoreBg
    721  f30c		       85 b2		      STA	Tmp2	; Score Background
    722  f30e		       86 b3		      STX	Tmp3	; Traffic Background
    723  f310
    724  f310				   ConfigurePFForScore
    725  f310							;LDA #SCORE_BACKGROUND_COLOR; Done above
    726  f310		       85 09		      STA	COLUBK
    727  f312		       20 5b f6 	      JSR	ClearAll
    728  f315		       a9 02		      LDA	#%00000010	; Score mode
    729  f317		       85 0a		      STA	CTRLPF
    730  f319		       a5 de		      LDA	TextSide	;3
    731  f31b		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    732  f31d				   LeftScoreOn
    733  f31d		       a5 c9		      LDA	ScoreFontColor
    734  f31f		       85 07		      STA	COLUP1
    735  f321		       a5 b2		      LDA	Tmp2
    736  f323		       85 06		      STA	COLUP0
    737  f325		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    738  f327		       85 b1		      STA	Tmp1
    739  f329		       4c 38 f3 	      JMP	CallWaitForVblankEnd
    740  f32c				   RightScoreOn
    741  f32c		       a5 c9		      LDA	ScoreFontColor
    742  f32e		       85 06		      STA	COLUP0
    743  f330		       a5 b2		      LDA	Tmp2
    744  f332		       85 07		      STA	COLUP1
    745  f334		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    746  f336		       85 b1		      STA	Tmp1
    747  f338
    748  f338							; After here we are going to update the screen, No more heavy code
    749  f338				   CallWaitForVblankEnd
    750  f338		       20 87 f8 	      JSR	WaitForVblankEnd
    751  f33b
    752  f33b				   DrawScoreHud
    753  f33b		       20 12 f7 	      JSR	PrintScore
    754  f33e
    755  f33e		       85 02		      STA	WSYNC
    756  f340
    757  f340		       a5 0c		      LDA	INPT4	;3
    758  f342		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    759  f344		       a5 c9		      LDA	ScoreFontColor
    760  f346		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    761  f348		       d0 0a		      BNE	WaitAnotherScoreLine
    762  f34a		       a5 de		      LDA	TextSide	;3
    763  f34c		       d0 03		      BNE	LeftScoreOnGameOver
    764  f34e		       4c 61 f8 	      JMP	DrawGameOverScreenRight
    765  f351				   LeftScoreOnGameOver
    766  f351		       4c d3 f7 	      JMP	DrawGameOverScreenLeft
    767  f354
    768  f354				   WaitAnotherScoreLine
    769  f354		       85 02		      STA	WSYNC
    770  f356
    771  f356				   PrepareForTraffic
    772  f356		       20 71 f6 	      JSR	ClearPF	; 32
    773  f359
    774  f359		       85 02		      STA	WSYNC
    775  f35b		       85 2a		      STA	HMOVE
    776  f35d		       85 02		      STA	WSYNC
    777  f35f		       85 2a		      STA	HMOVE
    778  f361
    779  f361		       a9 30		      LDA	#%00110000	; 2 Score mode
    780  f363		       85 0a		      STA	CTRLPF	;3
    781  f365
    782  f365		       a5 c2		      LDA	TrafficColor	;3
    783  f367		       85 08		      STA	COLUPF	;3
    784  f369
    785  f369		       a9 96		      LDA	#PLAYER1_COLOR	;2
    786  f36b		       85 07		      STA	COLUP1	;3
    787  f36d
    788  f36d		       a5 c9		      LDA	ScoreFontColor	;3
    789  f36f		       85 06		      STA	COLUP0	;3
    790  f371
    791  f371		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    792  f373
    793  f373		       20 71 f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    794  f376
    795  f376		       a6 b3		      LDX	Tmp3	; Background color.
    796  f378
      0  f378					      SLEEP	6	; Odd sleep destroys flags
      1  f378				   .CYCLES    SET	6
      2  f378
      3  f378				  -	      IF	.CYCLES < 2
      4  f378				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f378				  -	      ERR
      6  f378					      ENDIF
      7  f378
      8  f378				  -	      IF	.CYCLES & 1
      9  f378				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f378				  -	      nop	0
     11  f378				  -	      ELSE
     12  f378				  -	      bit	VSYNC
     13  f378				  -	      ENDIF
     14  f378				  -.CYCLES    SET	.CYCLES - 3
     15  f378					      ENDIF
     16  f378
     17  f378					      REPEAT	.CYCLES / 2
     18  f378		       ea		      nop
     17  f378					      REPEND
     18  f379		       ea		      nop
     17  f379					      REPEND
     18  f37a		       ea		      nop
     19  f37b					      REPEND
    798  f37b
    799  f37b		       a5 8c		      LDA	FrameCount0	;Brach flag
    800  f37d		       29 01		      AND	#%00000001
    801  f37f
    802  f37f		       86 09		      STX	COLUBK	;3
    803  f381		       d0 05		      BNE	OpDrawCache	;2
    804  f383		       4c 42 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    805  f386							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    806  f386
    807  f386							;main scanline loop...
    808  f386				   OpScanLoop
    809  f386		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    810  f388
    811  f388							;Start of next line!			
    812  f388				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    813  f388
    814  f388		       a5 80		      LDA	GRP0Cache	;3
    815  f38a		       85 1b		      STA	GRP0	;3
    816  f38c
    817  f38c		       a5 84		      LDA	GRP1Cache	;3
    818  f38e		       85 1c		      STA	GRP1	;3
    819  f390
    820  f390		       a5 85		      LDA	ENABLCache	;3
    821  f392		       85 1f		      STA	ENABL	;3
    822  f394
    823  f394		       a5 86		      LDA	ENAM0Cache	;3
    824  f396		       85 1d		      STA	ENAM0	;3
    825  f398
    826  f398		       a5 87		      LDA	ENAM1Cache	;3
    827  f39a		       85 1e		      STA	ENAM1	;3
    828  f39c
    829  f39c		       a5 81		      LDA	PF0Cache	;3
    830  f39e		       85 0d		      STA	PF0	;3
    831  f3a0
    832  f3a0		       a9 00		      LDA	#0	;2
    833  f3a2							;STA PF0	     ;3
    834  f3a2		       85 80		      STA	GRP0Cache	;3
    835  f3a4		       85 86		      STA	ENAM0Cache	;3
    836  f3a6		       85 85		      STA	ENABLCache	;3
    837  f3a8		       85 87		      STA	ENAM1Cache	; 3
    838  f3aa							;STA GRP1Cache ;3
    839  f3aa		       85 0d		      STA	PF0	;3
    840  f3ac							;STA PF2	     ;3
    841  f3ac
    842  f3ac		       a5 83		      LDA	PF2Cache	;3
    843  f3ae		       85 0f		      STA	PF2	;3
    844  f3b0
    845  f3b0				   OpDrawCar0
    846  f3b0		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    847  f3b2		       b0 04		      BCS	OpSkipDrawCar	;2
    848  f3b4		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    849  f3b6		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    850  f3b8				   OpSkipDrawCar
    851  f3b8
    852  f3b8							;BEQ DrawTraffic3
    853  f3b8				   OpDrawTraffic1		; 33
    854  f3b8		       98		      TYA		; 2
    855  f3b9		       18		      CLC		; 2 
    856  f3ba		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    857  f3bc		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    858  f3be		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    859  f3c0		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    860  f3c2		       4c c7 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    861  f3c5				   OpEorOffsetWithCarry
    862  f3c5		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    863  f3c7				   OpAfterEorOffsetWithCarry		;17
    864  f3c7		       aa		      TAX		;2
    865  f3c8		       bd 00 fe 	      LDA	AesTable,X	; 4
    866  f3cb		       c5 bf		      CMP	OpTrafficChance	;3
    867  f3cd		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    868  f3cf		       a9 ff		      LDA	#$FF	;2
    869  f3d1		       85 86		      STA	ENAM0Cache	;3
    870  f3d3				   OpFinishDrawTraffic1
    871  f3d3
    872  f3d3				   OpErasePF2
    873  f3d3		       a9 00		      LDA	#0
    874  f3d5		       85 0f		      STA	PF2
    875  f3d7
    876  f3d7				   OpDrawTraffic2		; 33
    877  f3d7		       98		      TYA		; 2
    878  f3d8		       18		      CLC		; 2 
    879  f3d9		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    880  f3db		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    881  f3dd		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    882  f3df		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    883  f3e1		       4c e6 f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    884  f3e4				   OpEorOffsetWithCarry2
    885  f3e4		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    886  f3e6				   OpAfterEorOffsetWithCarry2		;17
    887  f3e6		       aa		      TAX		;2
    888  f3e7		       bd 00 fe 	      LDA	AesTable,X	; 4
    889  f3ea		       c5 bf		      CMP	OpTrafficChance	;3
    890  f3ec		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    891  f3ee		       a9 02		      LDA	#%00000010	;2
    892  f3f0		       85 85		      STA	ENABLCache	;3
    893  f3f2				   OpFinishDrawTraffic2
    894  f3f2
    895  f3f2							;STA WSYNC ;65 / 137
    896  f3f2
    897  f3f2							; LDA Tmp0 ; Flicker this line if drawing car
    898  f3f2							; BEQ FinishDrawTraffic4
    899  f3f2				   OpDrawTraffic3		; 33
    900  f3f2		       98		      TYA		; 2
    901  f3f3		       18		      CLC		; 2 
    902  f3f4		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    903  f3f6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    904  f3f8		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    905  f3fa		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    906  f3fc		       4c 01 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    907  f3ff				   OpEorOffsetWithCarry3
    908  f3ff		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    909  f401				   OpAfterEorOffsetWithCarry3		;17
    910  f401		       aa		      TAX		;2
    911  f402		       bd 00 fe 	      LDA	AesTable,X	; 4
    912  f405		       c5 bf		      CMP	OpTrafficChance	;3
    913  f407		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    914  f409		       a9 02		      LDA	#%00000010	;2
    915  f40b		       85 87		      STA	ENAM1Cache
    916  f40d				   OpFinishDrawTraffic3
    917  f40d
    918  f40d				   OpDrawOponent		;26
    919  f40d		       84 b0		      STY	Tmp0	;3
    920  f40f		       a4 cf		      LDY	OpponentLine	;3
    921  f411		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    922  f413		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    923  f415				   OpDrawOpponent
    924  f415		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    925  f417		       85 80		      STA	GRP0Cache	;3
    926  f419		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    927  f41b		       a4 b0		      LDY	Tmp0	;3
    928  f41d		       4c 31 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    929  f420				   OpSkipDrawOpponent
    930  f420		       c6 cf		      DEC	OpponentLine	;5
    931  f422		       a4 b0		      LDY	Tmp0	;3
    932  f424
    933  f424
    934  f424				   OpDrawTraffic0		; 21 2pe
    935  f424		       98		      TYA		; 2
    936  f425		       18		      CLC		; 2 
    937  f426		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    938  f428		       29 08		      AND	#%00001000	;2
    939  f42a		       f0 05		      BEQ	OpHasNoBorderP0	;3
    940  f42c				   OpHasBorderP0
    941  f42c		       a9 70		      LDA	#%01110000	; 2
    942  f42e		       4c 33 f4 	      JMP	OpStoreBorderP0	; 3
    943  f431				   OpHasNoBorderP0
    944  f431		       a9 00		      LDA	#0	; 2
    945  f433				   OpStoreBorderP0
    946  f433		       85 81		      STA	PF0Cache	; 3
    947  f435		       85 83		      STA	PF2Cache	; 3
    948  f437
    949  f437				   OpSkipDrawTraffic0
    950  f437
    951  f437				   OpWhileScanLoop
    952  f437		       88		      DEY		;2
    953  f438		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    954  f43a		       4c 86 f3 	      JMP	OpScanLoop	;3
    955  f43d				   OpFinishScanLoop		; 7 209 of 222
    956  f43d		       4c f5 f4 	      JMP	FinishScanLoop
    957  f440
    958  f440							;main scanline loop...
    959  f440				   ScanLoop
    960  f440		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    961  f442
    962  f442							;Start of next line!			
    963  f442				   DrawCache		;63 Is the last line going to the top of the next frame?
    964  f442		       a5 81		      LDA	PF0Cache	;3
    965  f444		       85 0d		      STA	PF0	;3
    966  f446
    967  f446		       a5 80		      LDA	GRP0Cache	;3
    968  f448		       85 1b		      STA	GRP0	;3
    969  f44a
    970  f44a		       a5 84		      LDA	GRP1Cache	;3
    971  f44c		       85 1c		      STA	GRP1	;3
    972  f44e
    973  f44e		       a5 86		      LDA	ENAM0Cache	;3
    974  f450		       85 1d		      STA	ENAM0	;3
    975  f452
    976  f452		       a5 85		      LDA	ENABLCache	;3
    977  f454		       85 1f		      STA	ENABL	;3
    978  f456
    979  f456		       a5 87		      LDA	ENAM1Cache	;3
    980  f458		       85 1e		      STA	ENAM1	;3
    981  f45a
    982  f45a		       a5 83		      LDA	PF2Cache	;3
    983  f45c		       85 0f		      STA	PF2	;3
    984  f45e
    985  f45e		       a9 00		      LDA	#0	;2
    986  f460		       85 0d		      STA	PF0	;3
    987  f462		       85 84		      STA	GRP1Cache	;3
    988  f464		       85 85		      STA	ENABLCache	;3
    989  f466		       85 86		      STA	ENAM0Cache	;3
    990  f468		       85 87		      STA	ENAM1Cache	; 3
    991  f46a							;STA GRP0Cache
    992  f46a		       85 0f		      STA	PF2	;3
    993  f46c
    994  f46c				   DrawCar0
    995  f46c		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    996  f46e		       b0 04		      BCS	SkipDrawCar	;2
    997  f470		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    998  f472		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
    999  f474				   SkipDrawCar
   1000  f474
   1001  f474							;BEQ DrawTraffic3
   1002  f474				   DrawTraffic1 		; 33
   1003  f474		       98		      TYA		; 2
   1004  f475		       18		      CLC		; 2 
   1005  f476		       65 95		      ADC	TrafficOffset1 + 1	;3
   1006  f478		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1007  f47a		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1008  f47c		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1009  f47e		       4c 83 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1010  f481				   EorOffsetWithCarry
   1011  f481		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1012  f483				   AfterEorOffsetWithCarry		;17
   1013  f483		       aa		      TAX		;2
   1014  f484		       bd 00 fe 	      LDA	AesTable,X	; 4
   1015  f487		       c5 be		      CMP	TrafficChance	;3
   1016  f489		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1017  f48b		       a9 ff		      LDA	#$FF	;2
   1018  f48d		       85 86		      STA	ENAM0Cache	;3
   1019  f48f				   FinishDrawTraffic1
   1020  f48f
   1021  f48f				   DrawTraffic2 		; 33
   1022  f48f		       98		      TYA		; 2
   1023  f490		       18		      CLC		; 2 
   1024  f491		       65 99		      ADC	TrafficOffset2 + 1	;3
   1025  f493		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1026  f495		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1027  f497		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1028  f499		       4c 9e f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1029  f49c				   EorOffsetWithCarry2
   1030  f49c		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1031  f49e				   AfterEorOffsetWithCarry2		;17
   1032  f49e		       aa		      TAX		;2
   1033  f49f		       bd 00 fe 	      LDA	AesTable,X	; 4
   1034  f4a2		       c5 be		      CMP	TrafficChance	;3
   1035  f4a4		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1036  f4a6		       a9 02		      LDA	#%00000010	;2
   1037  f4a8		       85 85		      STA	ENABLCache	;3
   1038  f4aa				   FinishDrawTraffic2
   1039  f4aa
   1040  f4aa							;STA WSYNC ;65 / 137
   1041  f4aa
   1042  f4aa							; LDA Tmp0 ; Flicker this line if drawing car
   1043  f4aa							; BEQ FinishDrawTraffic4
   1044  f4aa				   DrawTraffic3 		; 33
   1045  f4aa		       98		      TYA		; 2
   1046  f4ab		       18		      CLC		; 2 
   1047  f4ac		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1048  f4ae		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1049  f4b0		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1050  f4b2		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1051  f4b4		       4c b9 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1052  f4b7				   EorOffsetWithCarry3
   1053  f4b7		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1054  f4b9				   AfterEorOffsetWithCarry3		;17
   1055  f4b9		       aa		      TAX		;2
   1056  f4ba		       bd 00 fe 	      LDA	AesTable,X	; 4
   1057  f4bd		       c5 be		      CMP	TrafficChance	;3
   1058  f4bf		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1059  f4c1		       a9 02		      LDA	#%00000010	;2
   1060  f4c3		       85 87		      STA	ENAM1Cache
   1061  f4c5				   FinishDrawTraffic3
   1062  f4c5
   1063  f4c5
   1064  f4c5				   DrawOponent		;26
   1065  f4c5		       84 b0		      STY	Tmp0	;3
   1066  f4c7		       a4 cf		      LDY	OpponentLine	;3
   1067  f4c9		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1068  f4cb		       b0 0b		      BCS	SkipDrawOpponent	;2
   1069  f4cd				   DrawOpponent
   1070  f4cd		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1071  f4cf		       85 84		      STA	GRP1Cache	;3
   1072  f4d1		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1073  f4d3		       a4 b0		      LDY	Tmp0	;3
   1074  f4d5		       4c e9 f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1075  f4d8				   SkipDrawOpponent
   1076  f4d8		       c6 cf		      DEC	OpponentLine	;5
   1077  f4da		       a4 b0		      LDY	Tmp0	;3
   1078  f4dc
   1079  f4dc				   DrawTraffic0 		; 21 2pe
   1080  f4dc		       98		      TYA		; 2
   1081  f4dd		       18		      CLC		; 2 
   1082  f4de		       65 91		      ADC	TrafficOffset0 + 1	;3
   1083  f4e0		       29 08		      AND	#%00001000	;2
   1084  f4e2		       f0 05		      BEQ	HasNoBorderP0	;3
   1085  f4e4				   HasBorderP0
   1086  f4e4		       a9 70		      LDA	#%01110000	; 2
   1087  f4e6		       4c eb f4 	      JMP	StoreBorderP0	; 3
   1088  f4e9				   HasNoBorderP0
   1089  f4e9		       a9 00		      LDA	#0	; 2
   1090  f4eb				   StoreBorderP0
   1091  f4eb		       85 81		      STA	PF0Cache	; 3
   1092  f4ed		       85 83		      STA	PF2Cache	; 3
   1093  f4ef
   1094  f4ef				   SkipDrawTraffic0
   1095  f4ef
   1096  f4ef				   WhileScanLoop
   1097  f4ef		       88		      DEY		;2
   1098  f4f0		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1099  f4f2		       4c 40 f4 	      JMP	ScanLoop	;3
   1100  f4f5				   FinishScanLoop		; 7 209 of 222
   1101  f4f5
   1102  f4f5		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1103  f4f7		       20 80 f6 	      JSR	LoadAll
   1104  f4fa		       85 02		      STA	WSYNC	; do stuff!
   1105  f4fc		       85 02		      STA	WSYNC
   1106  f4fe		       85 02		      STA	WSYNC
   1107  f500
   1108  f500				   PrepareOverscan
   1109  f500		       a9 02		      LDA	#2
   1110  f502		       85 02		      STA	WSYNC
   1111  f504							;STA HMOVE	; HMOVE 10
   1112  f504		       85 01		      STA	VBLANK
   1113  f506
   1114  f506		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1115  f508		       8d 96 02 	      STA	TIM64T
   1116  f50b
   1117  f50b		       85 2b		      STA	HMCLR	; Before we process car movement
   1118  f50d							;Read Fire Button before, will make it start the game for now.
   1119  f50d				   StartGame
   1120  f50d		       a5 0c		      LDA	INPT4	;3
   1121  f50f		       25 0d		      AND	INPT5	;3 player 
   1122  f511		       30 38		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1123  f513		       a5 8c		      LDA	FrameCount0
   1124  f515		       29 01		      AND	#%00000001
   1125  f517		       d0 32		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1126  f519		       a5 bd		      LDA	GameStatus	;3
   1127  f51b		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1128  f51d		       d0 2c		      BNE	SkipGameStart
   1129  f51f		       a5 c6		      LDA	GameMode
   1130  f521		       c9 10		      CMP	#MAX_GAME_MODE
   1131  f523		       d0 0b		      BNE	SetGameRunning
   1132  f525		       a9 00		      LDA	#0
   1133  f527		       85 c6		      STA	GameMode
   1134  f529		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1135  f52b		       85 bc		      STA	SwitchDebounceCounter
   1136  f52d		       4c 4b f5 	      JMP	SkipGameStart
   1137  f530				   SetGameRunning
   1138  f530		       e6 bd		      INC	GameStatus
   1139  f532		       a9 00		      LDA	#0	;
   1140  f534		       85 8c		      STA	FrameCount0
   1141  f536		       85 8d		      STA	FrameCount1
   1142  f538		       a9 0a		      LDA	#10
   1143  f53a		       85 19		      STA	AUDV0
   1144  f53c		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1145  f53e		       85 c9		      STA	ScoreFontColor
   1146  f540		       85 ca		      STA	OpScoreFontColor
   1147  f542		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1148  f544		       85 cb		      STA	ScoreFontColorHoldChange
   1149  f546		       85 cc		      STA	OpScoreFontColorHoldChange
   1150  f548		       4c b3 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1151  f54b				   SkipGameStart
   1152  f54b
   1153  f54b				   ReadSwitches
   1154  f54b		       a6 bc		      LDX	SwitchDebounceCounter
   1155  f54d		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1156  f54f		       a9 01		      LDA	#%00000001
   1157  f551		       2c 82 02 	      BIT	SWCHB
   1158  f554		       d0 07		      BNE	SkipReset
   1159  f556		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1160  f558		       85 bc		      STA	SwitchDebounceCounter
   1161  f55a		       4c bb f5 	      JMP	OverScanWaitBeforeReset
   1162  f55d				   SkipReset
   1163  f55d
   1164  f55d				   GameModeSelect
   1165  f55d		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1166  f55f		       d0 1c		      BNE	SkipGameSelect
   1167  f561		       20 ac f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1168  f564				   ContinueGameSelect
   1169  f564		       a9 02		      LDA	#%00000010
   1170  f566		       2c 82 02 	      BIT	SWCHB
   1171  f569		       d0 12		      BNE	SkipGameSelect
   1172  f56b		       a6 c6		      LDX	GameMode
   1173  f56d		       e0 10		      CPX	#MAX_GAME_MODE
   1174  f56f		       f0 04		      BEQ	ResetGameMode
   1175  f571		       e8		      INX
   1176  f572		       4c 77 f5 	      JMP	StoreGameMode
   1177  f575				   ResetGameMode
   1178  f575		       a2 00		      LDX	#0
   1179  f577				   StoreGameMode
   1180  f577		       86 c6		      STX	GameMode
   1181  f579		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1182  f57b		       85 bc		      STA	SwitchDebounceCounter
   1183  f57d				   SkipGameSelect
   1184  f57d		       4c 82 f5 	      JMP	EndReadSwitches
   1185  f580				   DecrementSwitchDebounceCounter
   1186  f580		       c6 bc		      DEC	SwitchDebounceCounter
   1187  f582				   EndReadSwitches
   1188  f582
   1189  f582				   DoNotTurnBeforeStart
   1190  f582							;STA HMCLR
   1191  f582		       a5 bd		      LDA	GameStatus
   1192  f584		       f0 2d		      BEQ	OverScanWait
   1193  f586
   1194  f586							; Last thing, will overrride hmove
   1195  f586				   CallTestColisionAndMove
   1196  f586		       a2 00		      LDX	#0	; Player 0
   1197  f588							; Colision with traffic, each player check different flags,
   1198  f588		       a5 8c		      LDA	FrameCount0
   1199  f58a		       29 01		      AND	#%00000001
   1200  f58c		       d0 07		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1201  f58e		       a5 01		      LDA	CXM1P
   1202  f590		       4a		      LSR
   1203  f591		       05 00		      ORA	CXM0P
   1204  f593		       05 02		      ORA	CXP0FB
   1205  f595							; ORA CXPPMM ; Collision between players will have its own rules
   1206  f595				   SkipColisionPlayer0		; Should not colide on opponent side.
   1207  f595		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1208  f597		       85 b2		      STA	Tmp2
   1209  f599		       20 35 f9 	      JSR	TestCollisionAndMove
   1210  f59c
   1211  f59c		       e8		      INX		; player 1
   1212  f59d		       a5 8c		      LDA	FrameCount0
   1213  f59f		       29 01		      AND	#%00000001
   1214  f5a1		       f0 07		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1215  f5a3		       a5 00		      LDA	CXM0P
   1216  f5a5		       4a		      LSR
   1217  f5a6		       05 01		      ORA	CXM1P
   1218  f5a8		       05 03		      ORA	CXP1FB
   1219  f5aa				   SkipColisionPlayer1
   1220  f5aa		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1221  f5ac		       85 b2		      STA	Tmp2
   1222  f5ae		       20 35 f9 	      JSR	TestCollisionAndMove
   1223  f5b1
   1224  f5b1				   ClearCollision
   1225  f5b1		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1226  f5b3
   1227  f5b3				   OverScanWait
   1228  f5b3		       ad 84 02 	      LDA	INTIM
   1229  f5b6		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1230  f5b8		       4c cc f0 	      JMP	MainLoop
   1231  f5bb
   1232  f5bb				   OverScanWaitBeforeReset
   1233  f5bb		       ad 84 02 	      LDA	INTIM
   1234  f5be		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1235  f5c0		       4c 12 f0 	      JMP	Start
   1236  f5c3
   1237  f5c3				   Subroutines
   1238  f5c3
   1239  f5c3				   ProcessSound
   1240  f5c3				   LeftSound		;41
   1241  f5c3		       a5 b8		      LDA	CountdownTimer	;3
   1242  f5c5		       f0 1b		      BEQ	EngineOff	;2
   1243  f5c7		       a6 d5		      LDX	Gear
   1244  f5c9		       a5 f0		      LDA	Player0SpeedL	;3
   1245  f5cb		       4a		      LSR		;2
   1246  f5cc		       4a		      LSR		;2
   1247  f5cd		       4a		      LSR		;2
   1248  f5ce		       29 0f		      AND	#%00001111	;2
   1249  f5d0		       85 b0		      STA	Tmp0	;3
   1250  f5d2		       bd 49 ff 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1251  f5d5		       38		      SEC		;2
   1252  f5d6		       e5 b0		      SBC	Tmp0	;3
   1253  f5d8		       85 17		      STA	AUDF0	;3
   1254  f5da		       bd 43 ff 	      LDA	EngineSoundType,X	;4
   1255  f5dd		       85 15		      STA	AUDC0	;3
   1256  f5df		       4c e6 f5 	      JMP	EndLeftSound	;3
   1257  f5e2				   EngineOff
   1258  f5e2		       a9 00		      LDA	#0
   1259  f5e4		       85 15		      STA	AUDC0
   1260  f5e6
   1261  f5e6				   EndLeftSound
   1262  f5e6
   1263  f5e6
   1264  f5e6				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1265  f5e6		       a5 c9		      LDA	ScoreFontColor	;3
   1266  f5e8		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1267  f5ea		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1268  f5ec		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1269  f5ee		       f0 29		      BEQ	PlayCheckpoint	;2
   1270  f5f0		       a5 8e		      LDA	CollisionCounter	;3
   1271  f5f2		       c9 e0		      CMP	#$E0	;2
   1272  f5f4		       b0 14		      BCS	PlayColision	;2
   1273  f5f6		       a5 cd		      LDA	NextCheckpoint	;3
   1274  f5f8		       38		      SEC		;2
   1275  f5f9		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1276  f5fb		       c9 02		      CMP	#$02	;2
   1277  f5fd		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1278  f5ff		       a5 b8		      LDA	CountdownTimer	; 3
   1279  f601		       f0 53		      BEQ	MuteRightSound	;2
   1280  f603		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1281  f605		       90 37		      BCC	PlayWarnTimeEnding	;4
   1282  f607		       4c 56 f6 	      JMP	MuteRightSound	;3
   1283  f60a				   PlayColision
   1284  f60a		       a9 1f		      LDA	#31
   1285  f60c		       85 18		      STA	AUDF1
   1286  f60e		       a9 08		      LDA	#8
   1287  f610		       85 16		      STA	AUDC1
   1288  f612		       a9 08		      LDA	#8
   1289  f614		       85 1a		      STA	AUDV1
   1290  f616		       4c 5a f6 	      JMP	EndRightSound
   1291  f619
   1292  f619				   PlayCheckpoint
   1293  f619		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1294  f61b		       4a		      LSR		;2
   1295  f61c		       4a		      LSR		;2
   1296  f61d		       4a		      LSR		;2
   1297  f61e		       85 18		      STA	AUDF1	;3
   1298  f620		       a9 0c		      LDA	#12	;2
   1299  f622		       85 16		      STA	AUDC1	;3
   1300  f624		       a9 06		      LDA	#6	;2
   1301  f626		       85 1a		      STA	AUDV1	;3
   1302  f628		       4c 5a f6 	      JMP	EndRightSound	;3
   1303  f62b
   1304  f62b				   PlayBeforeCheckpoint
   1305  f62b		       a5 8c		      LDA	FrameCount0	;3
   1306  f62d		       29 1c		      AND	#%00011100	;2
   1307  f62f		       09 03		      ORA	#%00000011	;2
   1308  f631		       85 18		      STA	AUDF1	;3
   1309  f633		       a9 0c		      LDA	#12	;2
   1310  f635		       85 16		      STA	AUDC1	;3
   1311  f637		       a9 03		      LDA	#3	;2
   1312  f639		       85 1a		      STA	AUDV1	;3
   1313  f63b		       4c 5a f6 	      JMP	EndRightSound	;3
   1314  f63e
   1315  f63e				   PlayWarnTimeEnding
   1316  f63e		       a5 8c		      LDA	FrameCount0	;3
   1317  f640		       29 04		      AND	#%00000100	;2
   1318  f642		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1319  f644		       18		      CLC		;2
   1320  f645		       a9 0a		      LDA	#10	;2
   1321  f647		       65 b8		      ADC	CountdownTimer	;2
   1322  f649		       85 18		      STA	AUDF1	;3
   1323  f64b		       a9 0c		      LDA	#12	;2
   1324  f64d		       85 16		      STA	AUDC1	;3
   1325  f64f		       a9 03		      LDA	#3	;2
   1326  f651		       85 1a		      STA	AUDV1	;3
   1327  f653		       4c 5a f6 	      JMP	EndRightSound	;3
   1328  f656
   1329  f656				   MuteRightSound
   1330  f656		       a9 00		      LDA	#0
   1331  f658		       85 1a		      STA	AUDV1
   1332  f65a				   EndRightSound
   1333  f65a		       60		      RTS
   1334  f65b
   1335  f65b				   ClearAll		; 58
   1336  f65b		       a9 00		      LDA	#0	;2
   1337  f65d		       85 1b		      STA	GRP0	;3
   1338  f65f		       85 1c		      STA	GRP1	;3
   1339  f661		       85 1f		      STA	ENABL	;3
   1340  f663		       85 1d		      STA	ENAM0	;3
   1341  f665		       85 1e		      STA	ENAM1	;3
   1342  f667		       85 80		      STA	GRP0Cache	;3
   1343  f669		       85 84		      STA	GRP1Cache	;3
   1344  f66b		       85 85		      STA	ENABLCache	;3
   1345  f66d		       85 86		      STA	ENAM0Cache	;3
   1346  f66f		       85 87		      STA	ENAM1Cache	;3
   1347  f671
   1348  f671				   ClearPF		; 26
   1349  f671		       a9 00		      LDA	#0	;2
   1350  f673				   ClearPFSkipLDA0
   1351  f673		       85 0d		      STA	PF0	;3
   1352  f675		       85 0e		      STA	PF1	;3
   1353  f677		       85 0f		      STA	PF2	;3	
   1354  f679		       85 81		      STA	PF0Cache	;3
   1355  f67b		       85 82		      STA	PF1Cache	;3
   1356  f67d		       85 83		      STA	PF2Cache	;3 
   1357  f67f		       60		      RTS		;6
   1358  f680				   EndClearAll
   1359  f680
   1360  f680				   LoadAll		; 48
   1361  f680		       a5 81		      LDA	PF0Cache	;3
   1362  f682		       85 0d		      STA	PF0	;3
   1363  f684
   1364  f684		       a5 82		      LDA	PF1Cache	;3
   1365  f686		       85 0e		      STA	PF1	;3
   1366  f688
   1367  f688		       a5 83		      LDA	PF2Cache	;3
   1368  f68a		       85 0f		      STA	PF2	;3
   1369  f68c
   1370  f68c		       a5 84		      LDA	GRP1Cache	;3
   1371  f68e		       85 1c		      STA	GRP1	;3
   1372  f690
   1373  f690		       a5 85		      LDA	ENABLCache	;3
   1374  f692		       85 1f		      STA	ENABL	;3
   1375  f694
   1376  f694		       a5 86		      LDA	ENAM0Cache	;3
   1377  f696		       85 1d		      STA	ENAM0	;3
   1378  f698
   1379  f698		       a5 87		      LDA	ENAM1Cache	;3
   1380  f69a		       85 1e		      STA	ENAM1	;3
   1381  f69c
   1382  f69c		       60		      RTS		;6
   1383  f69d				   EndLoadAll
   1384  f69d
   1385  f69d				   NextDifficulty
   1386  f69d		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1387  f69f		       29 01		      AND	#%00000001
   1388  f6a1		       d0 2a		      BNE	CheckRandomDifficulty
   1389  f6a3
   1390  f6a3		       a5 c4		      LDA	CurrentDifficulty
   1391  f6a5		       18		      CLC
   1392  f6a6		       69 01		      ADC	#1
   1393  f6a8		       29 03		      AND	#%00000011	; 0 to 3
   1394  f6aa		       85 c4		      STA	CurrentDifficulty
   1395  f6ac
   1396  f6ac				   ConfigureDifficulty
   1397  f6ac		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1398  f6ae		       b9 c5 ff 	      LDA	TrafficChanceTable,Y
   1399  f6b1		       85 be		      STA	TrafficChance
   1400  f6b3		       85 bf		      STA	OpTrafficChance	; Needs FIX
   1401  f6b5		       b9 c1 ff 	      LDA	TrafficColorTable,Y
   1402  f6b8		       85 c2		      STA	TrafficColor
   1403  f6ba		       85 c3		      STA	OpTrafficColor	; Needs FIX
   1404  f6bc
   1405  f6bc		       a5 c6		      LDA	GameMode	;
   1406  f6be		       29 01		      AND	#%00000001
   1407  f6c0		       f0 03		      BEQ	UseNextDifficultyTime
   1408  f6c2		       4c c6 f6 	      JMP	StoreDifficultyTime
   1409  f6c5				   UseNextDifficultyTime
   1410  f6c5		       c8		      INY
   1411  f6c6				   StoreDifficultyTime
   1412  f6c6		       b9 c9 ff 	      LDA	TrafficTimeTable,Y
   1413  f6c9		       85 c0		      STA	CheckpointTime
   1414  f6cb		       85 c1		      STA	OpCheckpointTime
   1415  f6cd
   1416  f6cd				   CheckRandomDifficulty
   1417  f6cd		       a5 c6		      LDA	GameMode
   1418  f6cf		       29 08		      AND	#%00001000	; Random difficulties
   1419  f6d1		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1420  f6d3				   RandomDifficulty		; need work to make 2 players compatible
   1421  f6d3		       a6 8c		      LDX	FrameCount0
   1422  f6d5		       bd 00 fe 	      LDA	AesTable,X
   1423  f6d8							;EOR TrafficChance, no need, lets make life simple
   1424  f6d8		       29 3f		      AND	#%00111111
   1425  f6da		       85 be		      STA	TrafficChance
   1426  f6dc		       85 bf		      STA	OpTrafficChance	; While not fix
   1427  f6de
   1428  f6de				   ReturnFromNextDifficulty
   1429  f6de		       60		      RTS
   1430  f6df
   1431  f6df				   DefaultOffsets
   1432  f6df		       a9 20		      LDA	#$20
   1433  f6e1		       85 96		      STA	TrafficOffset1 + 2
   1434  f6e3		       85 a6		      STA	OpTrafficOffset1 + 2
   1435  f6e5		       a9 40		      LDA	#$40
   1436  f6e7		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1437  f6e9		       85 aa		      STA	OpTrafficOffset2 + 2
   1438  f6eb		       a9 60		      LDA	#$60
   1439  f6ed		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1440  f6ef		       85 ae		      STA	OpTrafficOffset3 + 2
   1441  f6f1		       a9 80		      LDA	#$80
   1442  f6f3		       60		      RTS
   1443  f6f4
   1444  f6f4				   PrintStaticText		; Preload X with the offset referent to StaticText
   1445  f6f4		       bd 00 ff 	      LDA	StaticText,X
   1446  f6f7		       85 d0		      STA	ScoreD0
   1447  f6f9		       e8		      INX
   1448  f6fa		       bd 00 ff 	      LDA	StaticText,X
   1449  f6fd		       85 d1		      STA	ScoreD1
   1450  f6ff		       e8		      INX
   1451  f700		       bd 00 ff 	      LDA	StaticText,X
   1452  f703		       85 d2		      STA	ScoreD2
   1453  f705		       e8		      INX
   1454  f706		       bd 00 ff 	      LDA	StaticText,X
   1455  f709		       85 d3		      STA	ScoreD3
   1456  f70b		       e8		      INX
   1457  f70c		       bd 00 ff 	      LDA	StaticText,X
   1458  f70f		       85 d4		      STA	ScoreD4
   1459  f711		       60		      RTS
   1460  f712
   1461  f712				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1462  f712		       a2 00		      LDX	#0
   1463  f714		       a0 04		      LDY	#FONT_OFFSET
   1464  f716
   1465  f716				   ScoreLoop		; 20 
   1466  f716		       85 02		      STA	WSYNC	;2
   1467  f718		       85 2a		      STA	HMOVE
   1468  f71a
   1469  f71a		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1470  f71c		       85 0d		      STA	PF0	;3
   1471  f71e
   1472  f71e		       a5 82		      LDA	PF1Cache	;3
   1473  f720		       85 0e		      STA	PF1	;3
   1474  f722
   1475  f722		       a5 83		      LDA	PF2Cache	;3
   1476  f724		       85 0f		      STA	PF2	;3
   1477  f726
   1478  f726				   DrawScoreD0		; 15
   1479  f726		       a6 d0		      LDX	ScoreD0	; 3
   1480  f728		       bd 00 fd 	      LDA	Font,X	;4
   1481  f72b		       85 81		      STA	PF0Cache	;3
   1482  f72d		       c6 d0		      DEC	ScoreD0	;5
   1483  f72f
   1484  f72f				   DrawScoreD1		; 23	
   1485  f72f		       a6 d1		      LDX	ScoreD1	; 3
   1486  f731		       bd 00 fd 	      LDA	Font,X	;4
   1487  f734		       0a		      ASL		;2
   1488  f735		       0a		      ASL		;2
   1489  f736		       0a		      ASL		;2
   1490  f737		       0a		      ASL		;2
   1491  f738		       85 82		      STA	PF1Cache	;3
   1492  f73a		       c6 d1		      DEC	ScoreD1	;5
   1493  f73c
   1494  f73c				   DrawScoreD2		; 20
   1495  f73c		       a6 d2		      LDX	ScoreD2	; 3
   1496  f73e		       bd 00 fd 	      LDA	Font,X	;4
   1497  f741		       29 0f		      AND	#%00001111	;2
   1498  f743		       05 82		      ORA	PF1Cache	;3
   1499  f745		       85 82		      STA	PF1Cache	;3
   1500  f747		       c6 d2		      DEC	ScoreD2	;5
   1501  f749
   1502  f749				   DrawScoreD3		; 23
   1503  f749		       a6 d3		      LDX	ScoreD3	; 3
   1504  f74b		       bd 00 fd 	      LDA	Font,X	;4
   1505  f74e		       4a		      LSR		;2
   1506  f74f		       4a		      LSR		;2
   1507  f750		       4a		      LSR		;2
   1508  f751		       4a		      LSR		;2
   1509  f752		       85 83		      STA	PF2Cache	;3
   1510  f754		       c6 d3		      DEC	ScoreD3	;5
   1511  f756
   1512  f756				   DrawScoreD4		; 20
   1513  f756		       a6 d4		      LDX	ScoreD4	; 3
   1514  f758		       bd 00 fd 	      LDA	Font,X	;4
   1515  f75b		       29 f0		      AND	#%11110000	;2
   1516  f75d		       05 83		      ORA	PF2Cache	;3
   1517  f75f		       85 83		      STA	PF2Cache	;3
   1518  f761		       c6 d4		      DEC	ScoreD4	;5
   1519  f763
   1520  f763
   1521  f763		       88		      DEY		;2
   1522  f764		       10 b0		      BPL	ScoreLoop	;4
   1523  f766
   1524  f766		       85 02		      STA	WSYNC
   1525  f768		       85 2a		      STA	HMOVE
   1526  f76a		       20 80 f6 	      JSR	LoadAll
   1527  f76d		       60		      RTS		; 6
   1528  f76e
   1529  f76e				   PrintRightDecimalDigits
   1530  f76e		       b9 00 00 	      LDA	0,Y
   1531  f771		       4a		      LSR
   1532  f772		       4a		      LSR
   1533  f773		       4a		      LSR
   1534  f774		       4a		      LSR
   1535  f775		       aa		      TAX
   1536  f776		       bd 6c fc 	      LDA	FontLookup,X	;4
   1537  f779		       85 d2		      STA	ScoreD2	;3
   1538  f77b
   1539  f77b		       b9 00 00 	      LDA	0,Y
   1540  f77e		       29 0f		      AND	#%00001111
   1541  f780		       aa		      TAX
   1542  f781		       bd 6c fc 	      LDA	FontLookup,X	;4
   1543  f784		       85 d3		      STA	ScoreD3	;3
   1544  f786
   1545  f786		       c8		      INY
   1546  f787		       b9 00 00 	      LDA	0,Y
   1547  f78a		       4a		      LSR
   1548  f78b		       4a		      LSR
   1549  f78c		       4a		      LSR
   1550  f78d		       4a		      LSR
   1551  f78e		       aa		      TAX
   1552  f78f		       bd 6c fc 	      LDA	FontLookup,X	;4
   1553  f792		       85 d0		      STA	ScoreD0	;3
   1554  f794
   1555  f794		       b9 00 00 	      LDA	0,Y
   1556  f797		       29 0f		      AND	#%00001111
   1557  f799		       aa		      TAX
   1558  f79a		       bd 6c fc 	      LDA	FontLookup,X	;4
   1559  f79d		       85 d1		      STA	ScoreD1	;3
   1560  f79f
   1561  f79f		       a9 ae		      LDA	#<Triangle + FONT_OFFSET
   1562  f7a1		       85 d4		      STA	ScoreD4
   1563  f7a3		       60		      RTS
   1564  f7a4
   1565  f7a4				   PrintLastLeftDecimalDigits
   1566  f7a4		       b9 00 00 	      LDA	0,Y
   1567  f7a7		       4a		      LSR
   1568  f7a8		       4a		      LSR
   1569  f7a9		       4a		      LSR
   1570  f7aa		       4a		      LSR
   1571  f7ab		       aa		      TAX
   1572  f7ac		       bd 6c fc 	      LDA	FontLookup,X	;4
   1573  f7af		       85 d3		      STA	ScoreD3	;3
   1574  f7b1		       b9 00 00 	      LDA	0,Y
   1575  f7b4		       29 0f		      AND	#%00001111
   1576  f7b6		       aa		      TAX
   1577  f7b7		       bd 6c fc 	      LDA	FontLookup,X	;4
   1578  f7ba		       85 d4		      STA	ScoreD4	;3
   1579  f7bc		       60		      RTS
   1580  f7bd
   1581  f7bd				   PrintZerosLeft
   1582  f7bd		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1583  f7bf		       85 d2		      STA	ScoreD2
   1584  f7c1		       85 d3		      STA	ScoreD3
   1585  f7c3		       85 d4		      STA	ScoreD4
   1586  f7c5		       60		      RTS
   1587  f7c6
   1588  f7c6				   DrawGameOverScoreLine
   1589  f7c6		       85 02		      STA	WSYNC
   1590  f7c8		       20 12 f7 	      JSR	PrintScore
   1591  f7cb		       85 02		      STA	WSYNC
   1592  f7cd		       85 02		      STA	WSYNC
   1593  f7cf		       20 71 f6 	      JSR	ClearPF
   1594  f7d2		       60		      RTS
   1595  f7d3
   1596  f7d3				   DrawGameOverScreenLeft
   1597  f7d3		       85 02		      STA	WSYNC
   1598  f7d5		       20 71 f6 	      JSR	ClearPF
   1599  f7d8
   1600  f7d8				   DrawGlideTimerLeft
   1601  f7d8		       20 9a f8 	      JSR	Sleep8Lines
   1602  f7db		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1603  f7dd		       85 06		      STA	COLUP0
   1604  f7df		       85 02		      STA	WSYNC
   1605  f7e1		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1606  f7e3		       85 d0		      STA	ScoreD0
   1607  f7e5		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1608  f7e7		       85 d1		      STA	ScoreD1
   1609  f7e9		       20 bd f7 	      JSR	PrintZerosLeft
   1610  f7ec		       20 c6 f7 	      JSR	DrawGameOverScoreLine
   1611  f7ef
   1612  f7ef				   DrawHitCountLeft
   1613  f7ef		       20 9a f8 	      JSR	Sleep8Lines
   1614  f7f2		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1615  f7f4		       85 06		      STA	COLUP0
   1616  f7f6		       85 02		      STA	WSYNC
   1617  f7f8		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1618  f7fa		       85 d0		      STA	ScoreD0
   1619  f7fc		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1620  f7fe		       85 d1		      STA	ScoreD1
   1621  f800		       20 bd f7 	      JSR	PrintZerosLeft
   1622  f803		       20 c6 f7 	      JSR	DrawGameOverScoreLine
   1623  f806
   1624  f806				   DrawCheckpointCountLeft
   1625  f806		       20 9a f8 	      JSR	Sleep8Lines
   1626  f809		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1627  f80b		       85 06		      STA	COLUP0
   1628  f80d		       85 02		      STA	WSYNC
   1629  f80f		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1630  f811		       85 d0		      STA	ScoreD0
   1631  f813		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1632  f815		       85 d1		      STA	ScoreD1
   1633  f817		       20 bd f7 	      JSR	PrintZerosLeft
   1634  f81a		       20 c6 f7 	      JSR	DrawGameOverScoreLine
   1635  f81d
   1636  f81d				   DrawGameVersionLeft
   1637  f81d		       20 9a f8 	      JSR	Sleep8Lines
   1638  f820		       a9 49		      LDA	#VERSION_COLOR
   1639  f822		       85 06		      STA	COLUP0
   1640  f824
   1641  f824		       a5 c6		      LDA	GameMode
   1642  f826		       aa		      TAX
   1643  f827		       bd 6c fc 	      LDA	FontLookup,X	;4
   1644  f82a		       85 d0		      STA	ScoreD0	;3
   1645  f82c
   1646  f82c		       a5 c7		      LDA	CurrentCarId
   1647  f82e		       aa		      TAX
   1648  f82f		       bd 6c fc 	      LDA	FontLookup,X	;4
   1649  f832		       85 d1		      STA	ScoreD1	;3
   1650  f834
   1651  f834		       a5 db		      LDA	StartSWCHB
   1652  f836		       29 40		      AND	#%01000000	; P0 difficulty
   1653  f838		       49 40		      EOR	#%01000000	; Reverse bytes
   1654  f83a		       2a		      ROL
   1655  f83b		       2a		      ROL
   1656  f83c		       2a		      ROL
   1657  f83d		       18		      CLC
   1658  f83e		       69 0a		      ADC	#10
   1659  f840		       aa		      TAX
   1660  f841		       bd 6c fc 	      LDA	FontLookup,X	;4
   1661  f844		       85 d2		      STA	ScoreD2	;3
   1662  f846
   1663  f846		       a5 db		      LDA	StartSWCHB
   1664  f848		       29 80		      AND	#%10000000	; P0 difficulty
   1665  f84a		       49 80		      EOR	#%10000000	; Reverse bytes
   1666  f84c		       2a		      ROL
   1667  f84d		       2a		      ROL
   1668  f84e		       18		      CLC
   1669  f84f		       69 0a		      ADC	#10
   1670  f851		       aa		      TAX
   1671  f852		       bd 6c fc 	      LDA	FontLookup,X	;4
   1672  f855		       85 d3		      STA	ScoreD3	;3
   1673  f857
   1674  f857		       a9 a9		      LDA	#<Pipe + FONT_OFFSET
   1675  f859		       85 d4		      STA	ScoreD4
   1676  f85b
   1677  f85b		       20 c6 f7 	      JSR	DrawGameOverScoreLine
   1678  f85e
   1679  f85e		       4c 77 f8 	      JMP	FinalizeDrawGameOver
   1680  f861
   1681  f861				   DrawGameOverScreenRight
   1682  f861		       85 02		      STA	WSYNC
   1683  f863		       20 71 f6 	      JSR	ClearPF
   1684  f866
   1685  f866				   DrawVersionRight
   1686  f866		       20 9a f8 	      JSR	Sleep8Lines
   1687  f869		       a9 49		      LDA	#VERSION_COLOR
   1688  f86b		       85 07		      STA	COLUP1
   1689  f86d		       85 02		      STA	WSYNC
   1690  f86f		       a2 28		      LDX	#<VersionText
   1691  f871		       20 f4 f6 	      JSR	PrintStaticText
   1692  f874		       20 c6 f7 	      JSR	DrawGameOverScoreLine
   1693  f877
   1694  f877				   FinalizeDrawGameOver
   1695  f877		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1696  f879		       85 c9		      STA	ScoreFontColor
   1697  f87b		       20 91 f8 	      JSR	Sleep4Lines
   1698  f87e		       20 a1 f8 	      JSR	Sleep32Lines
   1699  f881		       20 a1 f8 	      JSR	Sleep32Lines
   1700  f884		       4c 00 f5 	      JMP	PrepareOverscan
   1701  f887
   1702  f887				   WaitForVblankEnd
   1703  f887		       ad 84 02 	      LDA	INTIM
   1704  f88a		       d0 fb		      BNE	WaitForVblankEnd
   1705  f88c		       85 02		      STA	WSYNC
   1706  f88e		       85 01		      STA	VBLANK
   1707  f890		       60		      RTS
   1708  f891
   1709  f891				   Sleep4Lines
   1710  f891		       85 02		      STA	WSYNC
   1711  f893		       85 02		      STA	WSYNC
   1712  f895		       85 02		      STA	WSYNC
   1713  f897		       85 02		      STA	WSYNC
   1714  f899		       60		      RTS
   1715  f89a
   1716  f89a				   Sleep8Lines
   1717  f89a		       20 91 f8 	      JSR	Sleep4Lines
   1718  f89d		       20 91 f8 	      JSR	Sleep4Lines
   1719  f8a0		       60		      RTS
   1720  f8a1
   1721  f8a1				   Sleep32Lines
   1722  f8a1		       20 9a f8 	      JSR	Sleep8Lines
   1723  f8a4		       20 9a f8 	      JSR	Sleep8Lines
   1724  f8a7		       20 9a f8 	      JSR	Sleep8Lines
   1725  f8aa		       20 9a f8 	      JSR	Sleep8Lines
   1726  f8ad		       60		      RTS
   1727  f8ae
   1728  f8ae							;X = number of WSYNC HMOVE to run
   1729  f8ae				   HMoveXTimes
   1730  f8ae		       85 02		      STA	WSYNC	;3
   1731  f8b0		       85 2a		      STA	HMOVE	; 3/10 
   1732  f8b2		       ca		      DEX
   1733  f8b3		       d0 f9		      BNE	HMoveXTimes
   1734  f8b5		       60		      RTS
   1735  f8b6
   1736  f8b6				   ConfigureCarSprites
   1737  f8b6		       a5 8c		      LDA	FrameCount0
   1738  f8b8		       29 01		      AND	#%00000001
   1739  f8ba		       d0 0b		      BNE	LoadForRightScreenSprites
   1740  f8bc				   LoadForLeftScreenSprites
   1741  f8bc		       a5 c7		      LDA	CurrentCarId
   1742  f8be		       85 b0		      STA	Tmp0
   1743  f8c0		       a5 c8		      LDA	OpCurrentCarId
   1744  f8c2		       85 b1		      STA	Tmp1
   1745  f8c4		       4c cf f8 	      JMP	LoadCarSpritesFromIds
   1746  f8c7				   LoadForRightScreenSprites
   1747  f8c7		       a5 c7		      LDA	CurrentCarId
   1748  f8c9		       85 b1		      STA	Tmp1
   1749  f8cb		       a5 c8		      LDA	OpCurrentCarId
   1750  f8cd		       85 b0		      STA	Tmp0
   1751  f8cf
   1752  f8cf				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1753  f8cf		       a4 b0		      LDY	Tmp0
   1754  f8d1		       b9 9b ff 	      LDA	CarIdToSpriteAddressL,Y
   1755  f8d4		       85 d7		      STA	CarSpritePointerL
   1756  f8d6		       b9 9f ff 	      LDA	CarIdToSpriteAddressH,Y
   1757  f8d9		       85 d8		      STA	CarSpritePointerH
   1758  f8db				   ConfigureOpponentCarSprite
   1759  f8db		       a4 b1		      LDY	Tmp1
   1760  f8dd		       b9 a3 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1761  f8e0		       85 d9		      STA	EnemyCarSpritePointerL
   1762  f8e2		       b9 a7 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1763  f8e5		       85 da		      STA	EnemyCarSpritePointerH
   1764  f8e7		       60		      RTS
   1765  f8e8
   1766  f8e8							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1767  f8e8							;X player 0 or 1
   1768  f8e8				   SelectCarWithDpad
   1769  f8e8		       a0 03		      LDY	#3
   1770  f8ea				   SelectCarWithDpadLoop
   1771  f8ea		       ad 80 02 	      LDA	SWCHA
   1772  f8ed		       25 b0		      AND	Tmp0
   1773  f8ef		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1774  f8f1		       98		      TYA
   1775  f8f2		       95 c7		      STA	CurrentCarId,X
   1776  f8f4				   ContinueSelectCarWithDpadLoop
   1777  f8f4		       46 b0		      LSR	Tmp0
   1778  f8f6		       88		      DEY
   1779  f8f7		       10 f1		      BPL	SelectCarWithDpadLoop
   1780  f8f9		       60		      RTS
   1781  f8fa
   1782  f8fa				   ProcessOpponentLine
   1783  f8fa		       a5 8c		      LDA	FrameCount0
   1784  f8fc		       29 01		      AND	#%00000001
   1785  f8fe		       38		      SEC
   1786  f8ff		       d0 0f		      BNE	Player0IsOpponent
   1787  f901				   Player1IsOpponent		; Code could be reused?
   1788  f901		       a5 91		      LDA	TrafficOffset0 + 1
   1789  f903		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1790  f905		       85 b0		      STA	Tmp0
   1791  f907		       a5 92		      LDA	TrafficOffset0 + 2
   1792  f909		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1793  f90b		       85 b1		      STA	Tmp1
   1794  f90d		       4c 1c f9 	      JMP	AddOffsetToOpponentLine
   1795  f910				   Player0IsOpponent
   1796  f910		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1797  f912		       e5 91		      SBC	TrafficOffset0 + 1
   1798  f914		       85 b0		      STA	Tmp0
   1799  f916		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1800  f918		       e5 92		      SBC	TrafficOffset0 + 2
   1801  f91a		       85 b1		      STA	Tmp1
   1802  f91c
   1803  f91c				   AddOffsetToOpponentLine
   1804  f91c		       18		      CLC
   1805  f91d		       a5 b0		      LDA	Tmp0
   1806  f91f		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1807  f921		       85 b0		      STA	Tmp0
   1808  f923		       a5 b1		      LDA	Tmp1
   1809  f925		       69 00		      ADC	#0
   1810  f927		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1811  f929				   OpponentNotVisible
   1812  f929		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1813  f92b		       85 cf		      STA	OpponentLine
   1814  f92d		       4c 34 f9 	      JMP	ReturnFromProcessOpponentLine
   1815  f930				   OpponentVisible
   1816  f930		       a5 b0		      LDA	Tmp0
   1817  f932		       85 cf		      STA	OpponentLine
   1818  f934				   ReturnFromProcessOpponentLine
   1819  f934		       60		      RTS
   1820  f935
   1821  f935							; Movement and colision are binded because the car must be moved after duplicate size.
   1822  f935							; Use X for the player
   1823  f935							; Tmp2 Traffic colision result
   1824  f935							; Tmp3 Opponent Colision result (Not implemented)
   1825  f935				   TestCollisionAndMove
   1826  f935							; Until store the movemnt, Y contains the value to be stored.
   1827  f935							; see if player0 colides with the rest
   1828  f935		       a5 b2		      LDA	Tmp2
   1829  f937		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1830  f939		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1831  f93b		       d0 25		      BNE	NoCollision
   1832  f93d		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1833  f93f		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1834  f941		       f0 1f		      BEQ	NoCollision
   1835  f943		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1836  f945		       f0 1b		      BEQ	NoCollision
   1837  f947		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1838  f949		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1839  f94b		       b5 f2		      LDA	Player0SpeedH,X
   1840  f94d		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1841  f94f		       a9 10		      LDA	#COLLISION_SPEED_L
   1842  f951		       d5 f0		      CMP	Player0SpeedL,X
   1843  f953		       b0 04		      BCS	SkipSetColisionSpeedL
   1844  f955				   SetColisionSpeedL
   1845  f955		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1846  f957		       95 f0		      STA	Player0SpeedL,X
   1847  f959				   SkipSetColisionSpeedL
   1848  f959		       a9 00		      LDA	#0
   1849  f95b		       95 f2		      STA	Player0SpeedH,X
   1850  f95d		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1851  f95f		       4c b2 f9 	      JMP	StoreHMove	; We keep position consistent
   1852  f962				   NoCollision
   1853  f962
   1854  f962				   DecrementCollision
   1855  f962		       b5 8e		      LDA	CollisionCounter,X
   1856  f964		       f0 06		      BEQ	FinishDecrementCollision
   1857  f966		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1858  f968		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1859  f96a		       d6 8e		      DEC	CollisionCounter,X
   1860  f96c				   FinishDecrementCollision
   1861  f96c
   1862  f96c				   ResetPlayerSize
   1863  f96c		       d0 04		      BNE	FinishResetPlayerSize
   1864  f96e		       a9 30		      LDA	#%00110000
   1865  f970		       95 04		      STA	NUSIZ0,X	;
   1866  f972				   FinishResetPlayerSize
   1867  f972
   1868  f972				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1869  f972		       b5 8e		      LDA	CollisionCounter,X
   1870  f974		       c9 01		      CMP	#1	; Last frame before reset
   1871  f976		       d0 05		      BNE	SkipResetPlayerPosition
   1872  f978		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1873  f97a		       4c b2 f9 	      JMP	StoreHMove
   1874  f97d				   SkipResetPlayerPosition
   1875  f97d
   1876  f97d				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1877  f97d		       b5 c7		      LDA	CurrentCarId,X
   1878  f97f		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1879  f981		       d0 08		      BNE	PrepareReadXAxis
   1880  f983		       a0 00		      LDY	#0
   1881  f985		       a5 8c		      LDA	FrameCount0
   1882  f987		       29 01		      AND	#DRAGSTER_TURN_MASK
   1883  f989		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1884  f98b
   1885  f98b				   PrepareReadXAxis
   1886  f98b		       a0 00		      LDY	#0
   1887  f98d		       b5 b6		      LDA	Player0X,X
   1888  f98f				   BeginReadLeft
   1889  f98f		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1890  f991		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1891  f994		       2c 80 02 	      BIT	SWCHA
   1892  f997		       d0 07		      BNE	SkipMoveLeft
   1893  f999		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1894  f99b		       d6 b6		      DEC	Player0X,X
   1895  f99d		       4c b2 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1896  f9a0				   SkipMoveLeft
   1897  f9a0				   BeginReadRight
   1898  f9a0		       b5 b6		      LDA	Player0X,X
   1899  f9a2		       c9 2c		      CMP	#PLAYER_MAX_X
   1900  f9a4		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1901  f9a6		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1902  f9a9		       2c 80 02 	      BIT	SWCHA
   1903  f9ac		       d0 04		      BNE	SkipMoveRight
   1904  f9ae		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1905  f9b0		       f6 b6		      INC	Player0X,X
   1906  f9b2				   SkipMoveRight
   1907  f9b2				   StoreHMove
   1908  f9b2		       94 20		      STY	HMP0,X	;set the move for player 0
   1909  f9b4
   1910  f9b4		       60		      RTS
   1911  f9b5
   1912  f9b5							; X Traffic offset 4 bits each lane, 4 lanes per player
   1913  f9b5							; Tmp3 Max X offset
   1914  f9b5							; Tmp4 Max Player Speed L
   1915  f9b5							; Tmp5 Max Player Speed H
   1916  f9b5				   UpdateOffsets
   1917  f9b5		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1918  f9b7		       a5 c6		      LDA	GameMode
   1919  f9b9		       29 04		      AND	#%00000100	; GameModes with high delta
   1920  f9bb		       f0 02		      BEQ	UpdateOffsetsLoop
   1921  f9bd		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1922  f9bf
   1923  f9bf				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1924  f9bf		       38		      SEC
   1925  f9c0		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1926  f9c2		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1927  f9c5		       85 b0		      STA	Tmp0
   1928  f9c7		       c8		      INY
   1929  f9c8		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1930  f9ca		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1931  f9cd		       85 b1		      STA	Tmp1
   1932  f9cf		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1933  f9d1		       e9 00		      SBC	#0
   1934  f9d3		       85 b2		      STA	Tmp2
   1935  f9d5
   1936  f9d5				   AddsTheResult
   1937  f9d5		       18		      CLC
   1938  f9d6		       a5 b0		      LDA	Tmp0
   1939  f9d8		       75 90		      ADC	TrafficOffset0,X
   1940  f9da		       95 90		      STA	TrafficOffset0,X
   1941  f9dc		       e8		      INX
   1942  f9dd		       a5 b1		      LDA	Tmp1
   1943  f9df		       75 90		      ADC	TrafficOffset0,X
   1944  f9e1		       95 90		      STA	TrafficOffset0,X
   1945  f9e3		       e8		      INX
   1946  f9e4		       a5 b2		      LDA	Tmp2	; Carry
   1947  f9e6		       75 90		      ADC	TrafficOffset0,X
   1948  f9e8		       95 90		      STA	TrafficOffset0,X
   1949  f9ea		       90 0f		      BCC	CalculateOffsetCache
   1950  f9ec				   CalculatePlayer0Msb
   1951  f9ec		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1952  f9ee		       d0 05		      BNE	CalculatePlayer1Msb
   1953  f9f0		       e6 ba		      INC	Traffic0Msb
   1954  f9f2		       4c fb f9 	      JMP	CalculateOffsetCache
   1955  f9f5				   CalculatePlayer1Msb
   1956  f9f5		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1957  f9f7		       d0 02		      BNE	CalculateOffsetCache
   1958  f9f9		       e6 bb		      INC	OpTraffic0Msb
   1959  f9fb
   1960  f9fb				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1961  f9fb		       e8		      INX
   1962  f9fc		       38		      SEC
   1963  f9fd		       69 00		      ADC	#0	;Increment by one
   1964  f9ff		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1965  fa01
   1966  fa01				   PrepareNextUpdateLoop
   1967  fa01		       c8		      INY
   1968  fa02		       e8		      INX
   1969  fa03		       e4 b3		      CPX	Tmp3	; Max X offset
   1970  fa05		       d0 b8		      BNE	UpdateOffsetsLoop
   1971  fa07		       60		      RTS
   1972  fa08
   1973  fa08							; X Player 0 or 1
   1974  fa08				   ProcessSpeed
   1975  fa08				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1976  fa08		       a9 00		      LDA	#0
   1977  fa0a		       85 b0		      STA	Tmp0	; Break speed
   1978  fa0c		       b5 b8		      LDA	CountdownTimer,X
   1979  fa0e		       d0 0d		      BNE	Break
   1980  fa10		       b4 c7		      LDY	CurrentCarId,X
   1981  fa12		       a5 8c		      LDA	FrameCount0
   1982  fa14		       39 af ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1983  fa17		       d0 04		      BNE	Break
   1984  fa19		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1985  fa1b		       85 b0		      STA	Tmp0
   1986  fa1d
   1987  fa1d				   Break
   1988  fa1d		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1989  fa20		       2c 80 02 	      BIT	SWCHA
   1990  fa23		       d0 12		      BNE	BreakNonZero
   1991  fa25		       b5 0c		      LDA	INPT4,X	;3
   1992  fa27		       10 0a		      BPL	BreakWhileAccelerating
   1993  fa29		       b4 d5		      LDY	Gear,X
   1994  fa2b		       b9 bb ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1995  fa2e		       85 b0		      STA	Tmp0
   1996  fa30		       4c 37 fa 	      JMP	BreakNonZero
   1997  fa33				   BreakWhileAccelerating		; Allow better control while breaking.
   1998  fa33		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1999  fa35		       85 b0		      STA	Tmp0
   2000  fa37
   2001  fa37				   BreakNonZero
   2002  fa37		       a5 b0		      LDA	Tmp0
   2003  fa39		       f0 29		      BEQ	SkipBreak
   2004  fa3b
   2005  fa3b				   DecreaseSpeed
   2006  fa3b		       38		      SEC
   2007  fa3c		       b5 f0		      LDA	Player0SpeedL,X
   2008  fa3e		       e5 b0		      SBC	Tmp0
   2009  fa40		       95 f0		      STA	Player0SpeedL,X
   2010  fa42		       b5 f2		      LDA	Player0SpeedH,X
   2011  fa44		       e9 00		      SBC	#0
   2012  fa46		       95 f2		      STA	Player0SpeedH,X
   2013  fa48
   2014  fa48				   CheckMinSpeed
   2015  fa48		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2016  fa4a		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2017  fa4c		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2018  fa4e		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2019  fa50
   2020  fa50				   CompareLBreakSpeed
   2021  fa50		       b5 f0		      LDA	Player0SpeedL,X
   2022  fa52		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2023  fa54		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2024  fa56		       4c 61 fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2025  fa59
   2026  fa59				   ResetMinSpeed
   2027  fa59		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2028  fa5b		       95 f2		      STA	Player0SpeedH,X
   2029  fa5d		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2030  fa5f		       95 f0		      STA	Player0SpeedL,X
   2031  fa61
   2032  fa61				   SkipAccelerateIfBreaking
   2033  fa61		       4c aa fa 	      JMP	SkipAccelerate
   2034  fa64				   SkipBreak
   2035  fa64
   2036  fa64				   Acelerates
   2037  fa64		       b5 b8		      LDA	CountdownTimer,X
   2038  fa66		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2039  fa68
   2040  fa68				   ContinueAccelerateTest
   2041  fa68		       b5 0c		      LDA	INPT4,X	;3
   2042  fa6a		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2043  fa6c		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2044  fa6f		       2c 80 02 	      BIT	SWCHA
   2045  fa72		       d0 36		      BNE	SkipAccelerate
   2046  fa74
   2047  fa74				   IncreaseCarSpeed
   2048  fa74		       a9 02		      LDA	#2
   2049  fa76		       85 b0		      STA	Tmp0	; Loop control
   2050  fa78		       b4 c7		      LDY	CurrentCarId,X
   2051  fa7a				   IncreaseCarSpeedLoop
   2052  fa7a							;Adds speed
   2053  fa7a		       18		      CLC
   2054  fa7b		       b5 dc		      LDA	AccelerateBuffer,X
   2055  fa7d		       79 ab ff 	      ADC	CarIdToAccelerateSpeed,Y
   2056  fa80		       95 dc		      STA	AccelerateBuffer,X
   2057  fa82		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2058  fa84		       f6 f0		      INC	Player0SpeedL,X
   2059  fa86		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2060  fa88		       f6 f2		      INC	Player0SpeedH,X
   2061  fa8a				   ContinueIncreaseSpeedLoop
   2062  fa8a		       c6 b0		      DEC	Tmp0
   2063  fa8c		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2064  fa8e				   SkipIncreaseCarSpeed
   2065  fa8e
   2066  fa8e				   CheckIfAlreadyMaxSpeed
   2067  fa8e		       b5 f2		      LDA	Player0SpeedH,X
   2068  fa90		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2069  fa92		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2070  fa94		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2071  fa96							;High bit is max, compare the low
   2072  fa96		       b4 c7		      LDY	CurrentCarId,X
   2073  fa98		       b5 f0		      LDA	Player0SpeedL,X
   2074  fa9a		       d9 b3 ff 	      CMP	CarIdToMaxSpeedL,Y
   2075  fa9d		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2076  fa9f							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2077  fa9f
   2078  fa9f				   ResetToMaxSpeed		; Speed is more, or is already max
   2079  fa9f		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2080  faa1		       95 f2		      STA	Player0SpeedH,X
   2081  faa3		       b4 c7		      LDY	CurrentCarId,X
   2082  faa5		       b9 b3 ff 	      LDA	CarIdToMaxSpeedL,Y
   2083  faa8		       95 f0		      STA	Player0SpeedL,X
   2084  faaa				   SkipAccelerate
   2085  faaa		       60		      RTS
   2086  faab
   2087  faab				   EverySecond		; 64 frames to be more precise
   2088  faab		       a9 3f		      LDA	#%00111111
   2089  faad		       25 8c		      AND	FrameCount0
   2090  faaf		       d0 06		      BNE	SkipEverySecondAction
   2091  fab1		       d5 b8		      CMP	CountdownTimer,X
   2092  fab3		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2093  fab5		       d6 b8		      DEC	CountdownTimer,X
   2094  fab7				   SkipEverySecondAction
   2095  fab7		       60		      RTS
   2096  fab8
   2097  fab8				   CalculateGear
   2098  fab8		       b5 f0		      LDA	Player0SpeedL,X	;3
   2099  faba		       29 80		      AND	#%10000000	;2
   2100  fabc		       15 f2		      ORA	Player0SpeedH,X	;3
   2101  fabe		       18		      CLC		;2
   2102  fabf		       2a		      ROL		;2
   2103  fac0		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2104  fac2		       95 d5		      STA	Gear,X
   2105  fac4		       60		      RTS
   2106  fac5
   2107  fac5				   ProcessScoreFontColor
   2108  fac5		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2109  fac7		       f0 06		      BEQ	ResetScoreFontColor
   2110  fac9		       88		      DEY
   2111  faca		       94 cb		      STY	ScoreFontColorHoldChange,X
   2112  facc		       4c d3 fa 	      JMP	SkipScoreFontColor
   2113  facf				   ResetScoreFontColor
   2114  facf		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2115  fad1		       95 c9		      STA	ScoreFontColor,X
   2116  fad3				   SkipScoreFontColor
   2117  fad3		       60		      RTS
   2118  fad4
   2119  fad4							; Moved here because of rom space.
   2120  fad4							; The only SBR in constants space
   2121  fad4				   DrawQrCode
   2122  fad4		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2123  fad6		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2124  fad8		       a9 01		      LDA	#%00000001	; Mirror playfield
   2125  fada		       85 0a		      STA	CTRLPF
   2126  fadc		       20 5b f6 	      JSR	ClearAll	; To be 100 sure!
   2127  fadf		       ad 82 02 	      LDA	SWCHB
   2128  fae2		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2129  fae4		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2130  fae6		       f0 07		      BEQ	StoreReversedQrCode
   2131  fae8		       86 09		      STX	COLUBK
   2132  faea		       84 08		      STY	COLUPF
   2133  faec		       4c f3 fa 	      JMP	ContinueQrCode
   2134  faef				   StoreReversedQrCode
   2135  faef		       86 08		      STX	COLUPF
   2136  faf1		       84 09		      STY	COLUBK
   2137  faf3
   2138  faf3				   ContinueQrCode
   2139  faf3		       a2 08		      LDX	#8
   2140  faf5		       20 ae f8 	      JSR	HMoveXTimes
   2141  faf8		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2142  fafa		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2143  fafc		       20 87 f8 	      JSR	WaitForVblankEnd
   2144  faff		       20 9a f8 	      JSR	Sleep8Lines
   2145  fb02		       20 9a f8 	      JSR	Sleep8Lines
   2146  fb05		       20 9a f8 	      JSR	Sleep8Lines
   2147  fb08
   2148  fb08				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2149  fb08		       85 02		      STA	WSYNC
   2150  fb0a		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2151  fb0d		       85 0e		      STA	PF1	;3
   2152  fb0f		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2153  fb12		       85 0f		      STA	PF2	;3
      0  fb14					      SLEEP	27	; 
      1  fb14				   .CYCLES    SET	27
      2  fb14
      3  fb14				  -	      IF	.CYCLES < 2
      4  fb14				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb14				  -	      ERR
      6  fb14					      ENDIF
      7  fb14
      8  fb14					      IF	.CYCLES & 1
      9  fb14				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb14				  -	      nop	0
     11  fb14					      ELSE
     12  fb14		       24 00		      bit	VSYNC
     13  fb16					      ENDIF
     14  fb16				   .CYCLES    SET	.CYCLES - 3
     15  fb16					      ENDIF
     16  fb16
     17  fb16					      REPEAT	.CYCLES / 2
     18  fb16		       ea		      nop
     17  fb16					      REPEND
     18  fb17		       ea		      nop
     17  fb17					      REPEND
     18  fb18		       ea		      nop
     17  fb18					      REPEND
     18  fb19		       ea		      nop
     17  fb19					      REPEND
     18  fb1a		       ea		      nop
     17  fb1a					      REPEND
     18  fb1b		       ea		      nop
     17  fb1b					      REPEND
     18  fb1c		       ea		      nop
     17  fb1c					      REPEND
     18  fb1d		       ea		      nop
     17  fb1d					      REPEND
     18  fb1e		       ea		      nop
     17  fb1e					      REPEND
     18  fb1f		       ea		      nop
     17  fb1f					      REPEND
     18  fb20		       ea		      nop
     17  fb20					      REPEND
     18  fb21		       ea		      nop
     19  fb22					      REPEND
   2155  fb22		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2156  fb25		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2157  fb27		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2158  fb2a		       85 0e		      STA	PF1	;3
   2159  fb2c
   2160  fb2c		       ca		      DEX		;2
   2161  fb2d		       d0 d9		      BNE	QrCodeLoop	;2
   2162  fb2f		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2163  fb31		       88		      DEY		;2
   2164  fb32		       10 d4		      BPL	QrCodeLoop	;4
   2165  fb34
   2166  fb34				   EndQrCodeLoop
   2167  fb34		       85 02		      STA	WSYNC	;
   2168  fb36		       a9 00		      LDA	#0
   2169  fb38		       85 0e		      STA	PF1	;3
   2170  fb3a		       85 0f		      STA	PF2	;3
   2171  fb3c
   2172  fb3c		       20 a1 f8 	      JSR	Sleep32Lines
   2173  fb3f		       4c 00 f5 	      JMP	PrepareOverscan
   2174  fb42
   2175  fb42							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2176  fc00					      org	$FC00
   2177  fc00				   QrCode1
   2178  fc00		       1f		      .byte.b	#%00011111
   2179  fc01		       10		      .byte.b	#%00010000
   2180  fc02		       17		      .byte.b	#%00010111
   2181  fc03		       17		      .byte.b	#%00010111
   2182  fc04		       17		      .byte.b	#%00010111
   2183  fc05		       10		      .byte.b	#%00010000
   2184  fc06		       1f		      .byte.b	#%00011111
   2185  fc07		       00		      .byte.b	#%00000000
   2186  fc08		       17		      .byte.b	#%00010111
   2187  fc09		       10		      .byte.b	#%00010000
   2188  fc0a		       1d		      .byte.b	#%00011101
   2189  fc0b		       16		      .byte.b	#%00010110
   2190  fc0c		       03		      .byte.b	#%00000011
   2191  fc0d		       19		      .byte.b	#%00011001
   2192  fc0e		       13		      .byte.b	#%00010011
   2193  fc0f		       1c		      .byte.b	#%00011100
   2194  fc10		       0b		      .byte.b	#%00001011
   2195  fc11		       00		      .byte.b	#%00000000
   2196  fc12		       1f		      .byte.b	#%00011111
   2197  fc13		       10		      .byte.b	#%00010000
   2198  fc14		       17		      .byte.b	#%00010111
   2199  fc15		       17		      .byte.b	#%00010111
   2200  fc16		       17		      .byte.b	#%00010111
   2201  fc17		       10		      .byte.b	#%00010000
   2202  fc18		       1f		      .byte.b	#%00011111
   2203  fc19
   2204  fc19				   QrCode2
   2205  fc19		       c3		      .byte.b	#%11000011
   2206  fc1a		       9a		      .byte.b	#%10011010
   2207  fc1b		       82		      .byte.b	#%10000010
   2208  fc1c		       da		      .byte.b	#%11011010
   2209  fc1d		       aa		      .byte.b	#%10101010
   2210  fc1e		       ca		      .byte.b	#%11001010
   2211  fc1f		       f3		      .byte.b	#%11110011
   2212  fc20		       78		      .byte.b	#%01111000
   2213  fc21		       df		      .byte.b	#%11011111
   2214  fc22		       fc		      .byte.b	#%11111100
   2215  fc23		       c7		      .byte.b	#%11000111
   2216  fc24		       98		      .byte.b	#%10011000
   2217  fc25		       23		      .byte.b	#%00100011
   2218  fc26		       b9		      .byte.b	#%10111001
   2219  fc27		       d2		      .byte.b	#%11010010
   2220  fc28		       30		      .byte.b	#%00110000
   2221  fc29		       eb		      .byte.b	#%11101011
   2222  fc2a		       28		      .byte.b	#%00101000
   2223  fc2b		       ab		      .byte.b	#%10101011
   2224  fc2c		       72		      .byte.b	#%01110010
   2225  fc2d		       fa		      .byte.b	#%11111010
   2226  fc2e		       7a		      .byte.b	#%01111010
   2227  fc2f		       32		      .byte.b	#%00110010
   2228  fc30		       3a		      .byte.b	#%00111010
   2229  fc31		       63		      .byte.b	#%01100011
   2230  fc32
   2231  fc32				   QrCode3
   2232  fc32		       98		      .byte.b	#%10011000
   2233  fc33		       c3		      .byte.b	#%11000011
   2234  fc34		       39		      .byte.b	#%00111001
   2235  fc35		       34		      .byte.b	#%00110100
   2236  fc36		       ff		      .byte.b	#%11111111
   2237  fc37		       71		      .byte.b	#%01110001
   2238  fc38		       d5		      .byte.b	#%11010101
   2239  fc39		       d1		      .byte.b	#%11010001
   2240  fc3a		       5f		      .byte.b	#%01011111
   2241  fc3b		       26		      .byte.b	#%00100110
   2242  fc3c		       2d		      .byte.b	#%00101101
   2243  fc3d		       e9		      .byte.b	#%11101001
   2244  fc3e		       d6		      .byte.b	#%11010110
   2245  fc3f		       26		      .byte.b	#%00100110
   2246  fc40		       ba		      .byte.b	#%10111010
   2247  fc41		       03		      .byte.b	#%00000011
   2248  fc42		       dd		      .byte.b	#%11011101
   2249  fc43		       e0		      .byte.b	#%11100000
   2250  fc44		       57		      .byte.b	#%01010111
   2251  fc45		       14		      .byte.b	#%00010100
   2252  fc46		       35		      .byte.b	#%00110101
   2253  fc47		       e5		      .byte.b	#%11100101
   2254  fc48		       b5		      .byte.b	#%10110101
   2255  fc49		       d4		      .byte.b	#%11010100
   2256  fc4a		       97		      .byte.b	#%10010111
   2257  fc4b
   2258  fc4b				   QrCode4
   2259  fc4b		       09		      .byte.b	#%00001001
   2260  fc4c		       0e		      .byte.b	#%00001110
   2261  fc4d		       0f		      .byte.b	#%00001111
   2262  fc4e		       0c		      .byte.b	#%00001100
   2263  fc4f		       0c		      .byte.b	#%00001100
   2264  fc50		       08		      .byte.b	#%00001000
   2265  fc51		       08		      .byte.b	#%00001000
   2266  fc52		       06		      .byte.b	#%00000110
   2267  fc53		       06		      .byte.b	#%00000110
   2268  fc54		       0b		      .byte.b	#%00001011
   2269  fc55		       0f		      .byte.b	#%00001111
   2270  fc56		       04		      .byte.b	#%00000100
   2271  fc57		       08		      .byte.b	#%00001000
   2272  fc58		       0f		      .byte.b	#%00001111
   2273  fc59		       09		      .byte.b	#%00001001
   2274  fc5a		       07		      .byte.b	#%00000111
   2275  fc5b		       05		      .byte.b	#%00000101
   2276  fc5c		       00		      .byte.b	#%00000000
   2277  fc5d		       0f		      .byte.b	#%00001111
   2278  fc5e		       08		      .byte.b	#%00001000
   2279  fc5f		       0b		      .byte.b	#%00001011
   2280  fc60		       0b		      .byte.b	#%00001011
   2281  fc61		       0b		      .byte.b	#%00001011
   2282  fc62		       08		      .byte.b	#%00001000
   2283  fc63		       0f		      .byte.b	#%00001111
   2284  fc64
   2285  fc64				   PlayerToUpMask
   2286  fc64		       10		      .byte.b	#%00010000	;
   2287  fc65		       01		      .byte.b	#%00000001	;
   2288  fc66
   2289  fc66				   PlayerToDownMask
   2290  fc66		       20		      .byte.b	#%00100000	;
   2291  fc67		       02		      .byte.b	#%00000010	;
   2292  fc68
   2293  fc68
   2294  fc68				   PlayerToLeftMask
   2295  fc68		       40		      .byte.b	#%01000000	;
   2296  fc69		       04		      .byte.b	#%00000100	;
   2297  fc6a
   2298  fc6a				   PlayerToRightMask
   2299  fc6a		       80		      .byte.b	#%10000000	;
   2300  fc6b		       08		      .byte.b	#%00001000	;
   2301  fc6c
   2302  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2303  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2304  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2305  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2306  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2307  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2308  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2309  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2310  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2311  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2312  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2313  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2314  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2315  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2316  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2317  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2318  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2319  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2320  fc7d
   2321  fd00					      org	$FD00
   2322  fd00				   Font
   2323  fd00				   C0
   2324  fd00		       e7		      .byte.b	#%11100111	;
   2325  fd01		       a5		      .byte.b	#%10100101	; 
   2326  fd02		       a5		      .byte.b	#%10100101	; 
   2327  fd03		       a5		      .byte.b	#%10100101	; 
   2328  fd04		       e7		      .byte.b	#%11100111	;	
   2329  fd05				   C1
   2330  fd05		       e7		      .byte.b	#%11100111	;
   2331  fd06		       42		      .byte.b	#%01000010	; 
   2332  fd07		       42		      .byte.b	#%01000010	; 
   2333  fd08		       42		      .byte.b	#%01000010	; 
   2334  fd09		       66		      .byte.b	#%01100110	;
   2335  fd0a				   C2
   2336  fd0a		       e7		      .byte.b	#%11100111	;
   2337  fd0b		       24		      .byte.b	#%00100100	; 
   2338  fd0c		       e7		      .byte.b	#%11100111	; 
   2339  fd0d		       81		      .byte.b	#%10000001	; 
   2340  fd0e		       e7		      .byte.b	#%11100111	;
   2341  fd0f				   C3
   2342  fd0f		       e7		      .byte.b	#%11100111	;
   2343  fd10		       81		      .byte.b	#%10000001	; 
   2344  fd11		       e7		      .byte.b	#%11100111	; 
   2345  fd12		       81		      .byte.b	#%10000001	; 
   2346  fd13		       e7		      .byte.b	#%11100111	;
   2347  fd14				   C4
   2348  fd14		       81		      .byte.b	#%10000001	;
   2349  fd15		       81		      .byte.b	#%10000001	; 
   2350  fd16		       e7		      .byte.b	#%11100111	; 
   2351  fd17		       a5		      .byte.b	#%10100101	; 
   2352  fd18		       a5		      .byte.b	#%10100101	;
   2353  fd19				   C5
   2354  fd19		       e7		      .byte.b	#%11100111	;
   2355  fd1a		       81		      .byte.b	#%10000001	; 
   2356  fd1b		       e7		      .byte.b	#%11100111	; 
   2357  fd1c		       24		      .byte.b	#%00100100	; 
   2358  fd1d		       e7		      .byte.b	#%11100111	;
   2359  fd1e				   C6
   2360  fd1e		       e7		      .byte.b	#%11100111	;
   2361  fd1f		       a5		      .byte.b	#%10100101	; 
   2362  fd20		       e7		      .byte.b	#%11100111	; 
   2363  fd21		       24		      .byte.b	#%00100100	; 
   2364  fd22		       e7		      .byte.b	#%11100111	;
   2365  fd23				   C7
   2366  fd23		       81		      .byte.b	#%10000001	;
   2367  fd24		       81		      .byte.b	#%10000001	; 
   2368  fd25		       81		      .byte.b	#%10000001	; 
   2369  fd26		       81		      .byte.b	#%10000001	; 
   2370  fd27		       e7		      .byte.b	#%11100111	;
   2371  fd28				   C8
   2372  fd28		       e7		      .byte.b	#%11100111	;
   2373  fd29		       a5		      .byte.b	#%10100101	; 
   2374  fd2a		       e7		      .byte.b	#%11100111	; 
   2375  fd2b		       a5		      .byte.b	#%10100101	; 
   2376  fd2c		       e7		      .byte.b	#%11100111	;
   2377  fd2d				   C9
   2378  fd2d		       e7		      .byte.b	#%11100111	;
   2379  fd2e		       81		      .byte.b	#%10000001	; 
   2380  fd2f		       e7		      .byte.b	#%11100111	; 
   2381  fd30		       a5		      .byte.b	#%10100101	; 
   2382  fd31		       e7		      .byte.b	#%11100111	;
   2383  fd32				   CA
   2384  fd32		       a5		      .byte.b	#%10100101	;
   2385  fd33		       a5		      .byte.b	#%10100101	; 
   2386  fd34		       e7		      .byte.b	#%11100111	; 
   2387  fd35		       a5		      .byte.b	#%10100101	; 
   2388  fd36		       e7		      .byte.b	#%11100111	;
   2389  fd37				   CB
   2390  fd37		       66		      .byte.b	#%01100110	;
   2391  fd38		       a5		      .byte.b	#%10100101	; 
   2392  fd39		       66		      .byte.b	#%01100110	; 
   2393  fd3a		       a5		      .byte.b	#%10100101	;
   2394  fd3b		       66		      .byte.b	#%01100110	;
   2395  fd3c				   CC
   2396  fd3c		       e7		      .byte.b	#%11100111	;
   2397  fd3d		       24		      .byte.b	#%00100100	; 
   2398  fd3e		       24		      .byte.b	#%00100100	; 
   2399  fd3f		       24		      .byte.b	#%00100100	;
   2400  fd40		       e7		      .byte.b	#%11100111	;
   2401  fd41
   2402  fd41				   CD
   2403  fd41		       66		      .byte.b	#%01100110	;
   2404  fd42		       a5		      .byte.b	#%10100101	; 
   2405  fd43		       a5		      .byte.b	#%10100101	; 
   2406  fd44		       a5		      .byte.b	#%10100101	;
   2407  fd45		       66		      .byte.b	#%01100110	;
   2408  fd46
   2409  fd46				   CE
   2410  fd46		       e7		      .byte.b	#%11100111	;
   2411  fd47		       24		      .byte.b	#%00100100	; 
   2412  fd48		       e7		      .byte.b	#%11100111	; 
   2413  fd49		       24		      .byte.b	#%00100100	; 
   2414  fd4a		       e7		      .byte.b	#%11100111	;
   2415  fd4b
   2416  fd4b				   CF
   2417  fd4b		       24		      .byte.b	#%00100100	;
   2418  fd4c		       24		      .byte.b	#%00100100	; 
   2419  fd4d		       e7		      .byte.b	#%11100111	; 
   2420  fd4e		       24		      .byte.b	#%00100100	; 
   2421  fd4f		       e7		      .byte.b	#%11100111	;
   2422  fd50
   2423  fd50				   CG
   2424  fd50		       c3		      .byte.b	#%11000011	;
   2425  fd51		       a5		      .byte.b	#%10100101	; 
   2426  fd52		       a5		      .byte.b	#%10100101	; 
   2427  fd53		       24		      .byte.b	#%00100100	; 
   2428  fd54		       c3		      .byte.b	#%11000011	;	
   2429  fd55
   2430  fd55				   CH
   2431  fd55		       a5		      .byte.b	#%10100101	;
   2432  fd56		       a5		      .byte.b	#%10100101	; 
   2433  fd57		       e7		      .byte.b	#%11100111	; 
   2434  fd58		       a5		      .byte.b	#%10100101	; 
   2435  fd59		       a5		      .byte.b	#%10100101	;
   2436  fd5a
   2437  fd5a				   CK
   2438  fd5a		       a5		      .byte.b	#%10100101	;
   2439  fd5b		       a5		      .byte.b	#%10100101	; 
   2440  fd5c		       66		      .byte.b	#%01100110	; 
   2441  fd5d		       a5		      .byte.b	#%10100101	; 
   2442  fd5e		       a5		      .byte.b	#%10100101	;
   2443  fd5f
   2444  fd5f				   CL
   2445  fd5f		       e7		      .byte.b	#%11100111	;
   2446  fd60		       24		      .byte.b	#%00100100	; 
   2447  fd61		       24		      .byte.b	#%00100100	; 
   2448  fd62		       24		      .byte.b	#%00100100	; 
   2449  fd63		       24		      .byte.b	#%00100100	;
   2450  fd64
   2451  fd64				   CM
   2452  fd64		       a5		      .byte.b	#%10100101	;
   2453  fd65		       a5		      .byte.b	#%10100101	; 
   2454  fd66		       a5		      .byte.b	#%10100101	; 
   2455  fd67		       e7		      .byte.b	#%11100111	; 
   2456  fd68		       a5		      .byte.b	#%10100101	;
   2457  fd69
   2458  fd69				   CN
   2459  fd69		       a5		      .byte.b	#%10100101	;
   2460  fd6a		       a5		      .byte.b	#%10100101	; 
   2461  fd6b		       a5		      .byte.b	#%10100101	; 
   2462  fd6c		       a5		      .byte.b	#%10100101	; 
   2463  fd6d		       66		      .byte.b	#%01100110	;	
   2464  fd6e
   2465  fd6e
   2466  fd6e				   CO
   2467  fd6e		       42		      .byte.b	#%01000010	;
   2468  fd6f		       a5		      .byte.b	#%10100101	; 
   2469  fd70		       a5		      .byte.b	#%10100101	; 
   2470  fd71		       a5		      .byte.b	#%10100101	; 
   2471  fd72		       42		      .byte.b	#%01000010	;	
   2472  fd73
   2473  fd73				   CP
   2474  fd73		       24		      .byte.b	#%00100100	;
   2475  fd74		       24		      .byte.b	#%00100100	; 
   2476  fd75		       e7		      .byte.b	#%11100111	; 
   2477  fd76		       a5		      .byte.b	#%10100101	; 
   2478  fd77		       e7		      .byte.b	#%11100111	;
   2479  fd78
   2480  fd78				   CR
   2481  fd78		       a5		      .byte.b	#%10100101	;
   2482  fd79		       a5		      .byte.b	#%10100101	; 
   2483  fd7a		       66		      .byte.b	#%01100110	; 
   2484  fd7b		       a5		      .byte.b	#%10100101	; 
   2485  fd7c		       66		      .byte.b	#%01100110	;
   2486  fd7d
   2487  fd7d				   CS
   2488  fd7d		       66		      .byte.b	#%01100110	;
   2489  fd7e		       81		      .byte.b	#%10000001	; 
   2490  fd7f		       42		      .byte.b	#%01000010	; 
   2491  fd80		       24		      .byte.b	#%00100100	; 
   2492  fd81		       c3		      .byte.b	#%11000011	;
   2493  fd82
   2494  fd82				   CT
   2495  fd82		       42		      .byte.b	#%01000010	;
   2496  fd83		       42		      .byte.b	#%01000010	; 
   2497  fd84		       42		      .byte.b	#%01000010	; 
   2498  fd85		       42		      .byte.b	#%01000010	; 
   2499  fd86		       e7		      .byte.b	#%11100111	;
   2500  fd87
   2501  fd87				   CV
   2502  fd87		       42		      .byte.b	#%01000010	;
   2503  fd88		       a5		      .byte.b	#%10100101	; 
   2504  fd89		       a5		      .byte.b	#%10100101	; 
   2505  fd8a		       a5		      .byte.b	#%10100101	; 
   2506  fd8b		       a5		      .byte.b	#%10100101	;	
   2507  fd8c
   2508  fd8c				   CY
   2509  fd8c		       42		      .byte.b	#%01000010	;
   2510  fd8d		       42		      .byte.b	#%01000010	; 
   2511  fd8e		       42		      .byte.b	#%01000010	; 
   2512  fd8f		       a5		      .byte.b	#%10100101	; 
   2513  fd90		       a5		      .byte.b	#%10100101	;
   2514  fd91
   2515  fd91				   CW
   2516  fd91		       a5		      .byte.b	#%10100101	;
   2517  fd92		       e7		      .byte.b	#%11100111	; 
   2518  fd93		       a5		      .byte.b	#%10100101	; 
   2519  fd94		       a5		      .byte.b	#%10100101	; 
   2520  fd95		       a5		      .byte.b	#%10100101	;
   2521  fd96
   2522  fd96				   CZ
   2523  fd96		       e7		      .byte.b	#%11100111	;
   2524  fd97		       24		      .byte.b	#%00100100	; 
   2525  fd98		       42		      .byte.b	#%01000010	; 
   2526  fd99		       81		      .byte.b	#%10000001	; 
   2527  fd9a		       e7		      .byte.b	#%11100111	;
   2528  fd9b
   2529  fd9b
   2530  fd9b				   Exclamation
   2531  fd9b		       42		      .byte.b	#%01000010	;
   2532  fd9c		       00		      .byte.b	#%00000000	; 
   2533  fd9d		       42		      .byte.b	#%01000010	; 
   2534  fd9e		       42		      .byte.b	#%01000010	; 
   2535  fd9f		       42		      .byte.b	#%01000010	;
   2536  fda0
   2537  fda0				   Dot
   2538  fda0		       42		      .byte.b	#%01000010	;
   2539  fda1		       42		      .byte.b	#%01000010	; 
   2540  fda2		       00		      .byte.b	#%00000000	; 
   2541  fda3		       00		      .byte.b	#%00000000	; 
   2542  fda4		       00		      .byte.b	#%00000000	;
   2543  fda5
   2544  fda5				   Pipe
   2545  fda5				   Colon
   2546  fda5		       42		      .byte.b	#%01000010	;
   2547  fda6		       42		      .byte.b	#%01000010	; 
   2548  fda7		       00		      .byte.b	#%00000000	; 
   2549  fda8		       42		      .byte.b	#%01000010	; 
   2550  fda9		       42		      .byte.b	#%01000010	;
   2551  fdaa
   2552  fdaa				   Triangle
   2553  fdaa		       81		      .byte.b	#%10000001	;
   2554  fdab		       c3		      .byte.b	#%11000011	; 
   2555  fdac		       e7		      .byte.b	#%11100111	; 
   2556  fdad		       c3		      .byte.b	#%11000011	; 
   2557  fdae		       81		      .byte.b	#%10000001	;
   2558  fdaf
   2559  fdaf				   Space
   2560  fdaf				   C0B
   2561  fdaf		       00		      .byte.b	#%00000000	;
   2562  fdb0		       00		      .byte.b	#%00000000	; 
   2563  fdb1		       00		      .byte.b	#%00000000	; 
   2564  fdb2		       00		      .byte.b	#%00000000	; 
   2565  fdb3		       00		      .byte.b	#%00000000	;	
   2566  fdb4				   C1B
   2567  fdb4		       24		      .byte.b	#%00100100	;
   2568  fdb5		       00		      .byte.b	#%00000000	; 
   2569  fdb6		       00		      .byte.b	#%00000000	; 
   2570  fdb7		       00		      .byte.b	#%00000000	; 
   2571  fdb8		       00		      .byte.b	#%00000000	;
   2572  fdb9				   C2B
   2573  fdb9		       66		      .byte.b	#%01100110	;
   2574  fdba		       00		      .byte.b	#%00000000	; 
   2575  fdbb		       00		      .byte.b	#%00000000	; 
   2576  fdbc		       00		      .byte.b	#%00000000	; 
   2577  fdbd		       00		      .byte.b	#%00000000	;
   2578  fdbe				   C3B
   2579  fdbe		       e7		      .byte.b	#%11100111	;
   2580  fdbf		       00		      .byte.b	#%00000000	; 
   2581  fdc0		       00		      .byte.b	#%00000000	; 
   2582  fdc1		       00		      .byte.b	#%00000000	; 
   2583  fdc2		       00		      .byte.b	#%00000000	;
   2584  fdc3				   C4B
   2585  fdc3		       e7		      .byte.b	#%11100111	;
   2586  fdc4		       24		      .byte.b	#%00100100	; 
   2587  fdc5		       00		      .byte.b	#%00000000	; 
   2588  fdc6		       00		      .byte.b	#%00000000	; 
   2589  fdc7		       00		      .byte.b	#%00000000	;
   2590  fdc8				   C5B
   2591  fdc8		       e7		      .byte.b	#%11100111	;
   2592  fdc9		       66		      .byte.b	#%01100110	; 
   2593  fdca		       00		      .byte.b	#%00000000	; 
   2594  fdcb		       00		      .byte.b	#%00000000	; 
   2595  fdcc		       00		      .byte.b	#%00000000	;
   2596  fdcd				   C6B
   2597  fdcd		       e7		      .byte.b	#%11100111	;
   2598  fdce		       e7		      .byte.b	#%11100111	; 
   2599  fdcf		       00		      .byte.b	#%00000000	; 
   2600  fdd0		       00		      .byte.b	#%00000000	; 
   2601  fdd1		       00		      .byte.b	#%00000000	;
   2602  fdd2				   C7B
   2603  fdd2		       e7		      .byte.b	#%11100111	;
   2604  fdd3		       e7		      .byte.b	#%11100111	; 
   2605  fdd4		       24		      .byte.b	#%00100100	; 
   2606  fdd5		       00		      .byte.b	#%00000000	; 
   2607  fdd6		       00		      .byte.b	#%00000000	;
   2608  fdd7				   C8B
   2609  fdd7		       e7		      .byte.b	#%11100111	;
   2610  fdd8		       e7		      .byte.b	#%11100111	; 
   2611  fdd9		       66		      .byte.b	#%01100110	; 
   2612  fdda		       00		      .byte.b	#%00000000	; 
   2613  fddb		       00		      .byte.b	#%00000000	;
   2614  fddc				   C9B
   2615  fddc		       e7		      .byte.b	#%11100111	;
   2616  fddd		       e7		      .byte.b	#%11100111	; 
   2617  fdde		       e7		      .byte.b	#%11100111	; 
   2618  fddf		       00		      .byte.b	#%00000000	; 
   2619  fde0		       00		      .byte.b	#%00000000	;
   2620  fde1				   CAB
   2621  fde1		       e7		      .byte.b	#%11100111	;
   2622  fde2		       e7		      .byte.b	#%11100111	; 
   2623  fde3		       e7		      .byte.b	#%11100111	; 
   2624  fde4		       24		      .byte.b	#%00100100	; 
   2625  fde5		       00		      .byte.b	#%00000000	;
   2626  fde6				   CBB
   2627  fde6		       e7		      .byte.b	#%11100111	;
   2628  fde7		       e7		      .byte.b	#%11100111	; 
   2629  fde8		       e7		      .byte.b	#%11100111	; 
   2630  fde9		       66		      .byte.b	#%01100110	; 
   2631  fdea		       00		      .byte.b	#%00000000	;
   2632  fdeb				   CCB
   2633  fdeb		       e7		      .byte.b	#%11100111	;
   2634  fdec		       e7		      .byte.b	#%11100111	; 
   2635  fded		       e7		      .byte.b	#%11100111	; 
   2636  fdee		       e7		      .byte.b	#%11100111	; 
   2637  fdef		       00		      .byte.b	#%00000000	;
   2638  fdf0
   2639  fdf0				   CDB
   2640  fdf0		       e7		      .byte.b	#%11100111	;
   2641  fdf1		       e7		      .byte.b	#%11100111	; 
   2642  fdf2		       e7		      .byte.b	#%11100111	; 
   2643  fdf3		       e7		      .byte.b	#%11100111	; 
   2644  fdf4		       24		      .byte.b	#%00100100	;
   2645  fdf5
   2646  fdf5				   CEB
   2647  fdf5		       e7		      .byte.b	#%11100111	;
   2648  fdf6		       e7		      .byte.b	#%11100111	; 
   2649  fdf7		       e7		      .byte.b	#%11100111	; 
   2650  fdf8		       e7		      .byte.b	#%11100111	; 
   2651  fdf9		       66		      .byte.b	#%01100110	;
   2652  fdfa
   2653  fdfa				   CFB
   2654  fdfa		       e7		      .byte.b	#%11100111	;
   2655  fdfb		       e7		      .byte.b	#%11100111	; 
   2656  fdfc		       e7		      .byte.b	#%11100111	; 
   2657  fdfd		       e7		      .byte.b	#%11100111	; 
   2658  fdfe		       e7		      .byte.b	#%11100111	;
   2659  fdff
   2660  fe00					      org	$FE00
   2661  fe00				   AesTable
   2662  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2663  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2664  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2665  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2666  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2667  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2668  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2669  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2670  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2671  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2672  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2673  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2674  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2675  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2676  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2677  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2678  ff00
   2679  ff00							; From FF00 to FFFB (122 bytes) to use here
   2680  ff00
   2681  ff00				   StaticText		; All static text must be on the same MSB block. 
   2682  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2683  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2684  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2685  ff02		       77		      .byte.b	#<CP + #FONT_OFFSET
   2686  ff03		       86		      .byte.b	#<CT + #FONT_OFFSET
   2687  ff04		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2688  ff05
   2689  ff05				   HellwayLeftText
   2690  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2691  ff06		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2692  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2693  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2694  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2695  ff0a
   2696  ff0a				   HellwayRightText
   2697  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2698  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2699  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2700  ff0d		       90		      .byte.b	#<CY + #FONT_OFFSET
   2701  ff0e		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2702  ff0f
   2703  ff0f				   OpbText
   2704  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2705  ff10		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2706  ff11		       72		      .byte.b	#<CO + #FONT_OFFSET
   2707  ff12		       77		      .byte.b	#<CP + #FONT_OFFSET
   2708  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2709  ff14
   2710  ff14				   YearText
   2711  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2712  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2713  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2714  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2715  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2716  ff19
   2717  ff19				   GameText
   2718  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2719  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2720  ff1b		       68		      .byte.b	#<CM + #FONT_OFFSET
   2721  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2722  ff1d		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2723  ff1e
   2724  ff1e				   OverText
   2725  ff1e		       72		      .byte.b	#<CO + #FONT_OFFSET
   2726  ff1f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2727  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2728  ff21		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2729  ff22		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2730  ff23				   GoText
   2731  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2732  ff24		       72		      .byte.b	#<CO + #FONT_OFFSET
   2733  ff25		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2734  ff26		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2735  ff27		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2736  ff28
   2737  ff28				   VersionText
   2738  ff28		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2739  ff29		       a4		      .byte.b	#<Dot + #FONT_OFFSET
   2740  ff2a		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2741  ff2b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2742  ff2c		       ae		      .byte.b	#<Triangle + #FONT_OFFSET
   2743  ff2d				   EndStaticText
   2744  ff2d
   2745  ff2d				   TachometerSizeLookup1
   2746  ff2d		       1f		      .byte.b	#%00011111
   2747  ff2e		       3f		      .byte.b	#%00111111
   2748  ff2f		       7f		      .byte.b	#%01111111
   2749  ff30		       ff		      .byte.b	#%11111111
   2750  ff31		       ff		      .byte.b	#%11111111
   2751  ff32		       ff		      .byte.b	#%11111111
   2752  ff33		       ff		      .byte.b	#%11111111
   2753  ff34		       ff		      .byte.b	#%11111111
   2754  ff35
   2755  ff35				   TachometerSizeLookup2
   2756  ff35		       00		      .byte.b	#%00000000
   2757  ff36		       00		      .byte.b	#%00000000
   2758  ff37		       00		      .byte.b	#%00000000
   2759  ff38		       00		      .byte.b	#%00000000
   2760  ff39		       80		      .byte.b	#%10000000
   2761  ff3a		       c0		      .byte.b	#%11000000
   2762  ff3b		       e0		      .byte.b	#%11100000
   2763  ff3c		       f0		      .byte.b	#%11110000
   2764  ff3d
   2765  ff3d				   TachometerGearLookup
   2766  ff3d		       01		      .byte.b	#%00000001
   2767  ff3e		       02		      .byte.b	#%00000010
   2768  ff3f		       04		      .byte.b	#%00000100
   2769  ff40		       08		      .byte.b	#%00001000
   2770  ff41		       10		      .byte.b	#%00010000
   2771  ff42		       30		      .byte.b	#%00110000
   2772  ff43
   2773  ff43				   EngineSoundType
   2774  ff43		       02		      .byte.b	#2
   2775  ff44		       02		      .byte.b	#2
   2776  ff45		       0e		      .byte.b	#14
   2777  ff46		       06		      .byte.b	#6
   2778  ff47		       06		      .byte.b	#6
   2779  ff48		       0e		      .byte.b	#14
   2780  ff49
   2781  ff49				   EngineBaseFrequence
   2782  ff49		       1f		      .byte.b	#31
   2783  ff4a		       15		      .byte.b	#21
   2784  ff4b		       14		      .byte.b	#20
   2785  ff4c		       1f		      .byte.b	#31
   2786  ff4d		       16		      .byte.b	#22
   2787  ff4e		       03		      .byte.b	#3
   2788  ff4f
   2789  ff4f				   CarSprite0		; Upside down, Original Car
   2790  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2791  ff57				   CarSprite0NoPadding
   2792  ff57		       7e		      .byte.b	#%01111110
   2793  ff58		       24		      .byte.b	#%00100100
   2794  ff59		       bd		      .byte.b	#%10111101
   2795  ff5a		       3c		      .byte.b	#%00111100
   2796  ff5b		       bd		      .byte.b	#%10111101
   2797  ff5c		       3c		      .byte.b	#%00111100
   2798  ff5d
   2799  ff5d				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2800  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2801  ff65				   CarSprite1NoPadding
   2802  ff65		       bd		      .byte.b	#%10111101
   2803  ff66		       7e		      .byte.b	#%01111110
   2804  ff67		       5a		      .byte.b	#%01011010
   2805  ff68		       66		      .byte.b	#%01100110
   2806  ff69		       bd		      .byte.b	#%10111101
   2807  ff6a		       3c		      .byte.b	#%00111100
   2808  ff6b
   2809  ff6b				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2810  ff6b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2811  ff73				   CarSprite2NoPadding
   2812  ff73		       7e		      .byte.b	#%01111110
   2813  ff74		       a5		      .byte.b	#%10100101
   2814  ff75		       42		      .byte.b	#%01000010
   2815  ff76		       42		      .byte.b	#%01000010
   2816  ff77		       bd		      .byte.b	#%10111101
   2817  ff78		       7e		      .byte.b	#%01111110
   2818  ff79
   2819  ff79				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2820  ff79		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2821  ff81				   CarSprite3NoPadding
   2822  ff81		       3c		      .byte.b	#%00111100
   2823  ff82		       db		      .byte.b	#%11011011
   2824  ff83		       db		      .byte.b	#%11011011
   2825  ff84		       3c		      .byte.b	#%00111100
   2826  ff85		       5a		      .byte.b	#%01011010
   2827  ff86		       3c		      .byte.b	#%00111100
   2828  ff87
   2829  ff87				   TrafficSpeeds
   2830  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2831  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2832  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2833  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2834  ff8b		       e6		      .byte.b	#$E6	;  Trafic2 L
   2835  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2836  ff8d		       c2		      .byte.b	#$C2	;  Trafic3 L
   2837  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2838  ff8f		       9e		      .byte.b	#$9E	;  Trafic4 L
   2839  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2840  ff91				   TrafficSpeedsHighDelta
   2841  ff91		       00		      .byte.b	#$00	;  Trafic0 L
   2842  ff92		       00		      .byte.b	#$00	;  Trafic0 H
   2843  ff93		       0a		      .byte.b	#$0A	;  Trafic1 L
   2844  ff94		       01		      .byte.b	#$01	;  Trafic1 H
   2845  ff95		       c8		      .byte.b	#$C8	;  Trafic2 L
   2846  ff96		       00		      .byte.b	#$00	;  Trafic2 H
   2847  ff97		       86		      .byte.b	#$86	;  Trafic3 L
   2848  ff98		       00		      .byte.b	#$00	;  Trafic3 H
   2849  ff99		       44		      .byte.b	#$44	;  Trafic4 L
   2850  ff9a		       00		      .byte.b	#$00	;  Trafic4 H
   2851  ff9b
   2852  ff9b				   CarIdToSpriteAddressL
   2853  ff9b		       4f		      .byte.b	#<CarSprite0
   2854  ff9c		       5d		      .byte.b	#<CarSprite1
   2855  ff9d		       6b		      .byte.b	#<CarSprite2
   2856  ff9e		       79		      .byte.b	#<CarSprite3
   2857  ff9f
   2858  ff9f				   CarIdToSpriteAddressH
   2859  ff9f		       ff		      .byte.b	#>CarSprite0
   2860  ffa0		       ff		      .byte.b	#>CarSprite1
   2861  ffa1		       ff		      .byte.b	#>CarSprite2
   2862  ffa2		       ff		      .byte.b	#>CarSprite3
   2863  ffa3
   2864  ffa3				   EnemyCarIdToSpriteAddressL
   2865  ffa3		       57		      .byte.b	#<CarSprite0NoPadding
   2866  ffa4		       65		      .byte.b	#<CarSprite1NoPadding
   2867  ffa5		       73		      .byte.b	#<CarSprite2NoPadding
   2868  ffa6		       81		      .byte.b	#<CarSprite3NoPadding
   2869  ffa7
   2870  ffa7				   EnemyCarIdToSpriteAddressH
   2871  ffa7		       ff		      .byte.b	#>CarSprite0NoPadding
   2872  ffa8		       ff		      .byte.b	#>CarSprite1NoPadding
   2873  ffa9		       ff		      .byte.b	#>CarSprite2NoPadding
   2874  ffaa		       ff		      .byte.b	#>CarSprite3NoPadding
   2875  ffab
   2876  ffab				   CarIdToAccelerateSpeed
   2877  ffab		       80		      .byte.b	#128
   2878  ffac		       c0		      .byte.b	#192
   2879  ffad		       60		      .byte.b	#96
   2880  ffae		       c0		      .byte.b	#192
   2881  ffaf
   2882  ffaf				   CarIdToTimeoverBreakInterval 		; Glide
   2883  ffaf		       03		      .byte.b	#%00000011	;Every 4 frames
   2884  ffb0		       03		      .byte.b	#%00000011	;Every 4 frames
   2885  ffb1		       0f		      .byte.b	#%00001111	;Every 16 frames
   2886  ffb2		       03		      .byte.b	#%00000011	;Every 4 frames
   2887  ffb3
   2888  ffb3				   CarIdToMaxSpeedL
   2889  ffb3		       80		      .byte.b	#$80
   2890  ffb4		       00		      .byte.b	#$00	; One less gear
   2891  ffb5		       80		      .byte.b	#$80
   2892  ffb6		       80		      .byte.b	#$80
   2893  ffb7
   2894  ffb7				   CarIdToMaxGear
   2895  ffb7		       05		      .byte.b	#5
   2896  ffb8		       04		      .byte.b	#4	; One less gear
   2897  ffb9		       05		      .byte.b	#5
   2898  ffba		       05		      .byte.b	#5
   2899  ffbb
   2900  ffbb				   GearToBreakSpeedTable
   2901  ffbb		       09		      .byte.b	#(BREAK_SPEED - 1)
   2902  ffbc		       09		      .byte.b	#(BREAK_SPEED - 1)
   2903  ffbd		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2904  ffbe		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2905  ffbf		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2906  ffc0		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2907  ffc1
   2908  ffc1				   TrafficColorTable
   2909  ffc1		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2910  ffc2		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2911  ffc3		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2912  ffc4		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2913  ffc5
   2914  ffc5				   TrafficChanceTable
   2915  ffc5		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2916  ffc6		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2917  ffc7		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2918  ffc8		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2919  ffc9
   2920  ffc9				   TrafficTimeTable
   2921  ffc9		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2922  ffca		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2923  ffcb		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2924  ffcc		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2925  ffcd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2926  ffce
   2927  ffce
   2928  fffc					      org	$FFFC
   2929  fffc		       00 f0		      .word.w	BeforeStart
   2930  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
