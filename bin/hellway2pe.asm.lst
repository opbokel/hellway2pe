------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 ec f6 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 b9 f6 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080		       85 b9		      STA	OpCountdownTimer	;3
    283  f082
    284  f082				   ConfigurePlayer1XPosition
    285  f082		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    286  f084		       85 b7		      STA	Player1X	;3
    287  f086
    288  f086				   HPositioning 		; Avoid sleep doing needed stuff
    289  f086		       85 02		      STA	WSYNC
    290  f088
    291  f088				   ConfigurePlayer0XPosition
    292  f088		       a9 21		      LDA	#PLAYER_0_X_START	;2
    293  f08a		       85 b6		      STA	Player0X	;3
    294  f08c
    295  f08c				   ConfigureMissileSize
    296  f08c		       a9 30		      LDA	#%00110000	;2 Missile Size
    297  f08e		       85 04		      STA	NUSIZ0	;3
    298  f090		       85 05		      STA	NUSIZ1	;3
    299  f092
    300  f092				   ConfigureNextCheckpoint
    301  f092		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    302  f094		       85 cd		      STA	NextCheckpoint
    303  f096
    304  f096		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f098					      SLEEP	4	;
      1  f098				   .CYCLES    SET	4
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     19  f09a					      REPEND
    306  f09a		       85 12		      STA	RESM0
      0  f09c					      SLEEP	2	;
      1  f09c				   .CYCLES    SET	2
      2  f09c
      3  f09c				  -	      IF	.CYCLES < 2
      4  f09c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09c				  -	      ERR
      6  f09c					      ENDIF
      7  f09c
      8  f09c				  -	      IF	.CYCLES & 1
      9  f09c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09c				  -	      nop	0
     11  f09c				  -	      ELSE
     12  f09c				  -	      bit	VSYNC
     13  f09c				  -	      ENDIF
     14  f09c				  -.CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c					      REPEAT	.CYCLES / 2
     18  f09c		       ea		      nop
     19  f09d					      REPEND
    308  f09d		       85 14		      STA	RESBL
      0  f09f					      SLEEP	2
      1  f09f				   .CYCLES    SET	2
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f				  -	      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f				  -	      ELSE
     12  f09f				  -	      bit	VSYNC
     13  f09f				  -	      ENDIF
     14  f09f				  -.CYCLES    SET	.CYCLES - 3
     15  f09f					      ENDIF
     16  f09f
     17  f09f					      REPEAT	.CYCLES / 2
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    310  f0a0		       85 13		      STA	RESM1
      0  f0a2					      SLEEP	3
      1  f0a2				   .CYCLES    SET	3
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4				  -	      REPEAT	.CYCLES / 2
     18  f0a4				  -	      nop
     19  f0a4					      REPEND
    312  f0a4
    313  f0a4		       a9 e0		      LDA	#$E0
    314  f0a6		       85 24		      STA	HMBL
    315  f0a8		       85 22		      STA	HMM0
    316  f0aa		       85 23		      STA	HMM1
    317  f0ac		       85 02		      STA	WSYNC
    318  f0ae		       85 2a		      STA	HMOVE
    319  f0b0		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    320  f0b2		       85 2b		      STA	HMCLR
      0  f0b4					      SLEEP	30
      1  f0b4				   .CYCLES    SET	30
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     19  f0c3					      REPEND
    322  f0c3		       85 10		      STA	RESP0
    323  f0c5							;SLEEP 5 ; Temporarily move player 1 away.
    324  f0c5		       85 11		      STA	RESP1
    325  f0c7
    326  f0c7				   WaitResetToEnd
    327  f0c7		       ad 84 02 	      LDA	INTIM
    328  f0ca		       d0 fb		      BNE	WaitResetToEnd
    329  f0cc
    330  f0cc				   MainLoop
    331  f0cc		       a9 02		      LDA	#2
    332  f0ce		       85 00		      STA	VSYNC
    333  f0d0		       85 02		      STA	WSYNC
    334  f0d2		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    335  f0d4				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    336  f0d4		       a9 01		      LDA	#%00000001	;3
    337  f0d6		       24 df		      BIT	TextFlickerMode	;2
    338  f0d8		       f0 05		      BEQ	TextSideFrameZero	;2
    339  f0da		       25 8d		      AND	FrameCount1	;2
    340  f0dc		       4c e1 f0 	      JMP	StoreTextSize	;3
    341  f0df				   TextSideFrameZero
    342  f0df		       25 8c		      AND	FrameCount0	;2
    343  f0e1				   StoreTextSize
    344  f0e1		       85 de		      STA	TextSide	;3
    345  f0e3
    346  f0e3				   PrepareMaxHMove
      0  f0e3					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e3				   .CYCLES    SET	18
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     19  f0ec					      REPEND
    348  f0ec		       a9 80		      LDA	#$80
    349  f0ee		       85 24		      STA	HMBL
    350  f0f0		       85 22		      STA	HMM0
    351  f0f2		       85 23		      STA	HMM1
    352  f0f4		       85 20		      STA	HMP0
    353  f0f6		       85 21		      STA	HMP1
    354  f0f8		       85 02		      STA	WSYNC
    355  f0fa		       85 2a		      STA	HMOVE	; 1/10			
    356  f0fc
    357  f0fc				   ConfigVBlankTimer
    358  f0fc		       a5 c6		      LDA	GameMode
    359  f0fe		       c9 10		      CMP	#MAX_GAME_MODE
    360  f100		       f0 05		      BEQ	SetVblankTimerQrCode
    361  f102		       a9 29		      LDA	#VBLANK_TIMER
    362  f104		       4c 09 f1 	      JMP	SetVblankTimer
    363  f107				   SetVblankTimerQrCode
    364  f107		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    365  f109
    366  f109				   SetVblankTimer
    367  f109		       85 02		      STA	WSYNC	;3
    368  f10b		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    369  f10d		       8d 96 02 	      STA	TIM64T	;3	
    370  f110		       a9 00		      LDA	#0	;2
    371  f112		       85 00		      STA	VSYNC	;3	
    372  f114
    373  f114				   RandomizeGame
    374  f114		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    375  f116		       d0 2d		      BNE	EndRandomizeGame
    376  f118		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    377  f11a		       29 02		      AND	#%00000010
    378  f11c		       f0 24		      BEQ	DeterministicGame
    379  f11e		       a6 96		      LDX	TrafficOffset1 + 2
    380  f120		       bd 00 fe 	      LDA	AesTable,X
    381  f123		       45 8c		      EOR	FrameCount0
    382  f125		       85 96		      STA	TrafficOffset1 + 2
    383  f127		       85 a6		      STA	OpTrafficOffset1 + 2
    384  f129		       a6 9a		      LDX	TrafficOffset2 + 2
    385  f12b		       bd 00 fe 	      LDA	AesTable,X
    386  f12e		       45 8c		      EOR	FrameCount0
    387  f130		       85 9a		      STA	TrafficOffset2 + 2
    388  f132		       85 aa		      STA	OpTrafficOffset2 + 2
    389  f134		       a6 9e		      LDX	TrafficOffset3 + 2
    390  f136		       bd 00 fe 	      LDA	AesTable,X
    391  f139		       45 8c		      EOR	FrameCount0
    392  f13b		       85 9e		      STA	TrafficOffset3 + 2
    393  f13d		       85 ae		      STA	OpTrafficOffset3 + 2
    394  f13f		       4c 45 f1 	      JMP	EndRandomizeGame
    395  f142
    396  f142				   DeterministicGame
    397  f142		       20 ec f6 	      JSR	DefaultOffsets
    398  f145
    399  f145				   EndRandomizeGame
    400  f145
    401  f145
    402  f145							; Move this in the code and save cycles, for some reason spliting is breaking...
    403  f145		       a2 08		      LDX	#8
    404  f147				   BurnAllHMove
    405  f147		       85 02		      STA	WSYNC	;3
    406  f149		       85 2a		      STA	HMOVE	; 3/10 
    407  f14b		       ca		      DEX
    408  f14c		       d0 f9		      BNE	BurnAllHMove
    409  f14e		       85 02		      STA	WSYNC	;3
    410  f150		       85 2b		      STA	HMCLR	; 
    411  f152
    412  f152				   CountFrame
    413  f152		       e6 8c		      INC	FrameCount0	; 5
    414  f154		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    415  f156		       e6 8d		      INC	FrameCount1	; 5 
    416  f158				   SkipIncFC1
    417  f158
    418  f158				   CallDrawQrCode
    419  f158		       a5 c6		      LDA	GameMode
    420  f15a		       c9 10		      CMP	#MAX_GAME_MODE
    421  f15c		       d0 03		      BNE	TestIsGameRunning
    422  f15e		       4c 64 fc 	      JMP	DrawQrCode
    423  f161
    424  f161							;Does not update the game if not running
    425  f161				   TestIsGameRunning
    426  f161		       a5 bd		      LDA	GameStatus	;3
    427  f163		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    428  f165				   SelectCarWithDpadCall		; Only do it when game is stoped
    429  f165		       a2 00		      LDX	#0	; Player 0
    430  f167		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    431  f169		       85 b0		      STA	Tmp0
    432  f16b		       20 5b f9 	      JSR	SelectCarWithDpad
    433  f16e		       e8		      INX		; Player 1
    434  f16f		       20 5b f9 	      JSR	SelectCarWithDpad
    435  f172
    436  f172							; Needs to draw the opponent in the correct line even when game stoped  
    437  f172							; Draeing is a destructive operation
    438  f172		       20 6d f9 	      JSR	ProcessOpponentLine
    439  f175
    440  f175				   CallConfigureCarSprites
    441  f175		       20 29 f9 	      JSR	ConfigureCarSprites
    442  f178				   SkipUpdateLogicJump
    443  f178		       4c c2 f1 	      JMP	SkipUpdateLogic
    444  f17b				   ContinueWithGameLogic
    445  f17b
    446  f17b				   CallEverySecond		; Timer for now
    447  f17b		       a2 00		      LDX	#0
    448  f17d		       20 0b fb 	      JSR	EverySecond
    449  f180		       e8		      INX
    450  f181		       20 0b fb 	      JSR	EverySecond
    451  f184
    452  f184
    453  f184				   ChangeTextFlickerMode
    454  f184		       a5 bc		      LDA	SwitchDebounceCounter
    455  f186		       d0 0d		      BNE	EndChangeTextFlickerMode
    456  f188		       ad 82 02 	      LDA	SWCHB
    457  f18b		       29 02		      AND	#%00000010	;Game select
    458  f18d		       d0 06		      BNE	EndChangeTextFlickerMode
    459  f18f		       e6 df		      INC	TextFlickerMode
    460  f191		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    461  f193		       85 bc		      STA	SwitchDebounceCounter
    462  f195				   EndChangeTextFlickerMode
    463  f195
    464  f195				   CallProcessSpeed
    465  f195		       a2 00		      LDX	#0
    466  f197		       20 68 fa 	      JSR	ProcessSpeed
    467  f19a
    468  f19a		       e8		      INX		; Player 1
    469  f19b		       20 68 fa 	      JSR	ProcessSpeed
    470  f19e
    471  f19e				   CallUpdateOffsets
    472  f19e		       a2 00		      LDX	#0	; Player 0
    473  f1a0		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    474  f1a2		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    475  f1a4		       a5 f0		      LDA	Player0SpeedL
    476  f1a6		       85 b4		      STA	Tmp4
    477  f1a8		       a5 f2		      LDA	Player0SpeedH
    478  f1aa		       85 b5		      STA	Tmp5
    479  f1ac		       20 15 fa 	      JSR	UpdateOffsets
    480  f1af
    481  f1af							;LDX Exits the call with correct value.
    482  f1af		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    483  f1b1		       85 b3		      STA	Tmp3
    484  f1b3		       a5 f1		      LDA	Player1SpeedL
    485  f1b5		       85 b4		      STA	Tmp4
    486  f1b7		       a5 f3		      LDA	Player1SpeedH
    487  f1b9		       85 b5		      STA	Tmp5
    488  f1bb		       20 15 fa 	      JSR	UpdateOffsets
    489  f1be
    490  f1be				   CallProcessOpponentLine
    491  f1be							;JSR ProcessOpponentLine 
    492  f1be							;SLEEP 90
    493  f1be		       a9 14		      LDA	#20
    494  f1c0		       85 cf		      STA	OpponentLine
    495  f1c2
    496  f1c2				   SkipUpdateLogic		; Continue here if not paused
    497  f1c2
    498  f1c2				   CallStatusUpdateSbr
    499  f1c2		       a2 00		      LDX	#0
    500  f1c4		       20 18 fb 	      JSR	CalculateGear
    501  f1c7		       20 25 fb 	      JSR	ProcessScoreFontColor
    502  f1ca		       e8		      INX
    503  f1cb		       20 18 fb 	      JSR	CalculateGear
    504  f1ce		       20 25 fb 	      JSR	ProcessScoreFontColor
    505  f1d1
    506  f1d1				   IsGameOver
    507  f1d1		       a5 b8		      LDA	CountdownTimer
    508  f1d3		       05 f0		      ORA	Player0SpeedL
    509  f1d5		       05 f2		      ORA	Player0SpeedH
    510  f1d7		       d0 0b		      BNE	IsCheckpoint
    511  f1d9		       a9 01		      LDA	#1
    512  f1db		       85 cb		      STA	ScoreFontColorHoldChange
    513  f1dd		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    514  f1df		       85 c9		      STA	ScoreFontColor
    515  f1e1		       4c 16 f2 	      JMP	SkipIsTimeOver
    516  f1e4
    517  f1e4				   IsCheckpoint
    518  f1e4		       a5 cd		      LDA	NextCheckpoint
    519  f1e6		       c5 92		      CMP	TrafficOffset0 + 2
    520  f1e8		       d0 20		      BNE	SkipIsCheckpoint
    521  f1ea		       18		      CLC
    522  f1eb		       69 10		      ADC	#CHECKPOINT_INTERVAL
    523  f1ed		       85 cd		      STA	NextCheckpoint
    524  f1ef		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    525  f1f1		       85 c9		      STA	ScoreFontColor
    526  f1f3		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    527  f1f5		       85 cb		      STA	ScoreFontColorHoldChange
    528  f1f7		       a5 b8		      LDA	CountdownTimer
    529  f1f9		       18		      CLC
    530  f1fa		       65 c0		      ADC	CheckpointTime
    531  f1fc		       85 b8		      STA	CountdownTimer
    532  f1fe		       90 04		      BCC	JumpSkipTimeOver
    533  f200		       a9 ff		      LDA	#$FF
    534  f202		       85 b8		      STA	CountdownTimer	; Does not overflow!
    535  f204				   JumpSkipTimeOver
    536  f204		       20 aa f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    537  f207		       4c 16 f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    538  f20a				   SkipIsCheckpoint
    539  f20a
    540  f20a				   IsTimeOver
    541  f20a		       a5 b8		      LDA	CountdownTimer
    542  f20c		       d0 08		      BNE	SkipIsTimeOver
    543  f20e		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    544  f210		       85 cb		      STA	ScoreFontColorHoldChange
    545  f212		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    546  f214		       85 c9		      STA	ScoreFontColor
    547  f216				   SkipIsTimeOver
    548  f216
    549  f216		       20 29 f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    550  f219
    551  f219				   CallProcessSound
    552  f219		       20 d4 f5 	      JSR	ProcessSound
    553  f21c
    554  f21c				   PrintEasterEggCondition
    555  f21c		       a5 8d		      LDA	FrameCount1
    556  f21e		       29 38		      AND	#%00111000
    557  f220		       05 bd		      ORA	GameStatus
    558  f222		       c9 38		      CMP	#%00111000
    559  f224		       d0 06		      BNE	ChooseTextSide
    560  f226		       20 1f f7 	      JSR	PrintEasterEgg
    561  f229		       4c 1b f3 	      JMP	RightScoreWriteEnd
    562  f22c
    563  f22c							;Could be done during on vblank to save this comparisson time (before draw score), 
    564  f22c							;but I am saving vblank cycles for now, in case of 2 players.
    565  f22c				   ChooseTextSide		; 
    566  f22c		       a5 de		      LDA	TextSide	;3
    567  f22e		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    568  f230		       4c b1 f2 	      JMP	RightScoreWrite
    569  f233
    570  f233				   LeftScoreWrite
    571  f233		       a5 c9		      LDA	ScoreFontColor
    572  f235		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    573  f237		       f0 4e		      BEQ	PrintCheckpoint
    574  f239		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    575  f23b		       f0 52		      BEQ	PrintStartGame
    576  f23d		       a5 bd		      LDA	GameStatus
    577  f23f		       f0 56		      BEQ	PrintHellwayLeft
    578  f241				   WriteDistance		;Not optimized yet, ugly code.
    579  f241				   Digit0Distance
    580  f241		       a5 91		      LDA	TrafficOffset0 + 1	;3
    581  f243		       4a		      LSR		; 2
    582  f244		       4a		      LSR		; 2
    583  f245		       4a		      LSR		; 2
    584  f246		       4a		      LSR		; 2
    585  f247		       aa		      TAX		; 2
    586  f248		       bd be fd 	      LDA	FontLookup,X	;4
    587  f24b		       85 d3		      STA	ScoreD3	;3
    588  f24d
    589  f24d				   Digit1Distance
    590  f24d		       a5 92		      LDA	TrafficOffset0 + 2	;3
    591  f24f		       29 0f		      AND	#%00001111	;2
    592  f251		       aa		      TAX		; 2
    593  f252		       bd be fd 	      LDA	FontLookup,X	;4 
    594  f255		       85 d2		      STA	ScoreD2	;3
    595  f257
    596  f257				   Digit2Distance
    597  f257		       a5 92		      LDA	TrafficOffset0 + 2	;3
    598  f259		       4a		      LSR		; 2
    599  f25a		       4a		      LSR		; 2
    600  f25b		       4a		      LSR		; 2
    601  f25c		       4a		      LSR		; 2
    602  f25d		       aa		      TAX		; 2
    603  f25e		       bd be fd 	      LDA	FontLookup,X	;4
    604  f261		       85 d1		      STA	ScoreD1	;3
    605  f263
    606  f263				   Digit3Distance
    607  f263		       a5 ba		      LDA	Traffic0Msb	;3
    608  f265		       29 0f		      AND	#%00001111	;2
    609  f267		       aa		      TAX		; 2
    610  f268		       bd be fd 	      LDA	FontLookup,X	;4 
    611  f26b		       85 d0		      STA	ScoreD0	;3
    612  f26d
    613  f26d				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    614  f26d		       a5 ba		      LDA	Traffic0Msb
    615  f26f		       29 f0		      AND	#%11110000	;2
    616  f271		       d0 07		      BNE	DrawDistanceExtraDigit
    617  f273		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    618  f275		       85 d4		      STA	ScoreD4	;3
    619  f277		       4c 84 f2 	      JMP	EndDrawDistance
    620  f27a				   DrawDistanceExtraDigit
    621  f27a		       4a		      LSR		; 2
    622  f27b		       4a		      LSR		; 2
    623  f27c		       4a		      LSR		; 2
    624  f27d		       4a		      LSR		; 2
    625  f27e		       aa		      TAX		; 2
    626  f27f		       bd be fd 	      LDA	FontLookup,X	;4
    627  f282		       85 d4		      STA	ScoreD4	;3
    628  f284
    629  f284				   EndDrawDistance
    630  f284		       4c 1b f3 	      JMP	RightScoreWriteEnd	;3
    631  f287
    632  f287				   PrintCheckpoint
    633  f287		       a2 00		      LDX	#<CheckpointText
    634  f289		       20 01 f7 	      JSR	PrintStaticText
    635  f28c		       4c 1b f3 	      JMP	RightScoreWriteEnd	;3
    636  f28f				   PrintStartGame
    637  f28f		       a2 23		      LDX	#<GoText
    638  f291		       20 01 f7 	      JSR	PrintStaticText
    639  f294		       4c 1b f3 	      JMP	RightScoreWriteEnd	;3
    640  f297
    641  f297				   PrintHellwayLeft
    642  f297		       a5 8d		      LDA	FrameCount1
    643  f299		       29 01		      AND	#1
    644  f29b		       d0 05		      BNE	PrintCreditsLeft
    645  f29d		       a2 05		      LDX	#<HellwayLeftText
    646  f29f		       4c a4 f2 	      JMP	PrintGameMode
    647  f2a2				   PrintCreditsLeft
    648  f2a2		       a2 0f		      LDX	#<OpbText
    649  f2a4
    650  f2a4				   PrintGameMode
    651  f2a4		       20 01 f7 	      JSR	PrintStaticText
    652  f2a7		       a6 c6		      LDX	GameMode
    653  f2a9		       bd be fd 	      LDA	FontLookup,X	;4 
    654  f2ac		       85 d0		      STA	ScoreD0	;3
    655  f2ae		       4c 1b f3 	      JMP	RightScoreWriteEnd	;3
    656  f2b1
    657  f2b1				   RightScoreWrite
    658  f2b1		       a5 bd		      LDA	GameStatus
    659  f2b3		       f0 45		      BEQ	PrintHellwayRight
    660  f2b5		       a5 c9		      LDA	ScoreFontColor
    661  f2b7		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    662  f2b9		       f0 52		      BEQ	PrintGameOver
    663  f2bb				   Digit0Timer
    664  f2bb		       a5 b8		      LDA	CountdownTimer	;3
    665  f2bd		       29 0f		      AND	#%00001111	;2
    666  f2bf		       aa		      TAX		; 2
    667  f2c0		       bd be fd 	      LDA	FontLookup,X	;4 
    668  f2c3		       85 d1		      STA	ScoreD1	;3
    669  f2c5
    670  f2c5				   Digit1Timer
    671  f2c5		       a5 b8		      LDA	CountdownTimer	;3
    672  f2c7		       4a		      LSR		; 2
    673  f2c8		       4a		      LSR		; 2
    674  f2c9		       4a		      LSR		; 2
    675  f2ca		       4a		      LSR		; 2
    676  f2cb		       aa		      TAX		; 2
    677  f2cc		       bd be fd 	      LDA	FontLookup,X	;4
    678  f2cf		       85 d0		      STA	ScoreD0	;3
    679  f2d1
    680  f2d1		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    681  f2d3		       85 d2		      STA	ScoreD2	;3
    682  f2d5
    683  f2d5				   Digit0Speed
    684  f2d5		       a5 f0		      LDA	Player0SpeedL
    685  f2d7		       29 3c		      AND	#%00111100	;2 Discard the last bits
    686  f2d9		       4a		      LSR		; 2
    687  f2da		       4a		      LSR		; 2
    688  f2db		       aa		      TAX		; 2
    689  f2dc		       bd be fd 	      LDA	FontLookup,X	;4
    690  f2df		       85 d4		      STA	ScoreD4	;3
    691  f2e1
    692  f2e1				   Digit1Speed
    693  f2e1		       a5 f0		      LDA	Player0SpeedL
    694  f2e3		       29 c0		      AND	#%11000000	;2 Discard the last bits
    695  f2e5		       18		      CLC
    696  f2e6		       2a		      ROL		;First goes into carry
    697  f2e7		       2a		      ROL
    698  f2e8		       2a		      ROL
    699  f2e9		       85 b0		      STA	Tmp0
    700  f2eb		       a5 f2		      LDA	Player0SpeedH
    701  f2ed		       0a		      ASL
    702  f2ee		       0a		      ASL
    703  f2ef		       05 b0		      ORA	Tmp0
    704  f2f1		       aa		      TAX		; 2
    705  f2f2		       bd be fd 	      LDA	FontLookup,X	;4
    706  f2f5		       85 d3		      STA	ScoreD3	;3
    707  f2f7		       4c 1b f3 	      JMP	RightScoreWriteEnd
    708  f2fa
    709  f2fa				   PrintHellwayRight
    710  f2fa		       a5 8d		      LDA	FrameCount1
    711  f2fc		       29 01		      AND	#1
    712  f2fe		       d0 05		      BNE	PrintCreditsRight
    713  f300		       a2 0a		      LDX	#<HellwayRightText
    714  f302		       4c 07 f3 	      JMP	PrintRightIntro
    715  f305				   PrintCreditsRight
    716  f305		       a2 14		      LDX	#<YearText
    717  f307				   PrintRightIntro
    718  f307		       20 01 f7 	      JSR	PrintStaticText
    719  f30a		       4c 1b f3 	      JMP	RightScoreWriteEnd
    720  f30d				   PrintGameOver
    721  f30d		       a5 8c		      LDA	FrameCount0
    722  f30f		       30 05		      BMI	PrintOverText
    723  f311		       a2 19		      LDX	#<GameText
    724  f313		       4c 18 f3 	      JMP	StoreGameOverText
    725  f316				   PrintOverText
    726  f316		       a2 1e		      LDX	#<OverText
    727  f318				   StoreGameOverText
    728  f318		       20 01 f7 	      JSR	PrintStaticText
    729  f31b				   RightScoreWriteEnd
    730  f31b
    731  f31b
    732  f31b				   ScoreBackgroundColor
    733  f31b		       a2 00		      LDX	#0
    734  f31d		       ad 82 02 	      LDA	SWCHB
    735  f320		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    736  f322		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    737  f324		       f0 04		      BEQ	BlackAndWhiteScoreBg
    738  f326		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    739  f328		       a2 03		      LDX	#BACKGROUND_COLOR
    740  f32a				   BlackAndWhiteScoreBg
    741  f32a		       85 b2		      STA	Tmp2	; Score Background
    742  f32c		       86 b3		      STX	Tmp3	; Traffic Background
    743  f32e
    744  f32e				   ConfigurePFForScore
    745  f32e							;LDA #SCORE_BACKGROUND_COLOR; Done above
    746  f32e		       85 09		      STA	COLUBK
    747  f330		       20 6c f6 	      JSR	ClearAll
    748  f333		       a9 02		      LDA	#%00000010	; Score mode
    749  f335		       85 0a		      STA	CTRLPF
    750  f337		       a5 de		      LDA	TextSide	;3
    751  f339		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    752  f33b				   LeftScoreOn
    753  f33b		       a5 c9		      LDA	ScoreFontColor
    754  f33d		       85 07		      STA	COLUP1
    755  f33f		       a5 b2		      LDA	Tmp2
    756  f341		       85 06		      STA	COLUP0
    757  f343		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    758  f345		       85 b1		      STA	Tmp1
    759  f347		       4c 56 f3 	      JMP	CallWaitForVblankEnd
    760  f34a				   RightScoreOn
    761  f34a		       a5 c9		      LDA	ScoreFontColor
    762  f34c		       85 06		      STA	COLUP0
    763  f34e		       a5 b2		      LDA	Tmp2
    764  f350		       85 07		      STA	COLUP1
    765  f352		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    766  f354		       85 b1		      STA	Tmp1
    767  f356
    768  f356							; After here we are going to update the screen, No more heavy code
    769  f356				   CallWaitForVblankEnd
    770  f356		       20 02 f9 	      JSR	WaitForVblankEnd
    771  f359
    772  f359				   DrawScoreHud
    773  f359		       20 91 f7 	      JSR	PrintScore
    774  f35c
    775  f35c		       85 02		      STA	WSYNC
    776  f35e
    777  f35e		       a5 0c		      LDA	INPT4	;3
    778  f360		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    779  f362		       a5 c9		      LDA	ScoreFontColor
    780  f364		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    781  f366		       d0 0a		      BNE	WaitAnotherScoreLine
    782  f368		       a5 de		      LDA	TextSide	;3
    783  f36a		       d0 03		      BNE	LeftScoreOnGameOver
    784  f36c		       4c dc f8 	      JMP	DrawGameOverScreenRight
    785  f36f				   LeftScoreOnGameOver
    786  f36f		       4c 4e f8 	      JMP	DrawGameOverScreenLeft
    787  f372
    788  f372				   WaitAnotherScoreLine
    789  f372		       85 02		      STA	WSYNC
    790  f374
    791  f374				   PrepareForTraffic
    792  f374		       20 7e f6 	      JSR	ClearPF	; 32
    793  f377
    794  f377		       85 02		      STA	WSYNC
    795  f379		       85 02		      STA	WSYNC
    796  f37b
    797  f37b		       a9 30		      LDA	#%00110000	; 2 Score mode
    798  f37d		       85 0a		      STA	CTRLPF	;3
    799  f37f
    800  f37f		       a5 c2		      LDA	TrafficColor	;3
    801  f381		       85 08		      STA	COLUPF	;3
    802  f383
    803  f383		       a9 96		      LDA	#PLAYER1_COLOR	;2
    804  f385		       85 07		      STA	COLUP1	;3
    805  f387
    806  f387		       a5 c9		      LDA	ScoreFontColor	;3
    807  f389		       85 06		      STA	COLUP0	;3
    808  f38b
    809  f38b		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    810  f38d
    811  f38d		       20 7e f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    812  f390
    813  f390		       a6 b3		      LDX	Tmp3	; Background color.
    814  f392
      0  f392					      SLEEP	9	; Odd sleep destroys flags
      1  f392				   .CYCLES    SET	9
      2  f392
      3  f392				  -	      IF	.CYCLES < 2
      4  f392				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f392				  -	      ERR
      6  f392					      ENDIF
      7  f392
      8  f392					      IF	.CYCLES & 1
      9  f392				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f392				  -	      nop	0
     11  f392					      ELSE
     12  f392		       24 00		      bit	VSYNC
     13  f394					      ENDIF
     14  f394				   .CYCLES    SET	.CYCLES - 3
     15  f394					      ENDIF
     16  f394
     17  f394					      REPEAT	.CYCLES / 2
     18  f394		       ea		      nop
     17  f394					      REPEND
     18  f395		       ea		      nop
     17  f395					      REPEND
     18  f396		       ea		      nop
     19  f397					      REPEND
    816  f397
    817  f397		       a5 8c		      LDA	FrameCount0	;Brach flag
    818  f399		       29 01		      AND	#%00000001
    819  f39b
    820  f39b		       86 09		      STX	COLUBK	;3
    821  f39d		       d0 05		      BNE	OpDrawCache	;2
    822  f39f		       4c 5e f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    823  f3a2							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    824  f3a2
    825  f3a2							;main scanline loop...
    826  f3a2				   OpScanLoop
    827  f3a2		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    828  f3a4
    829  f3a4							;Start of next line!			
    830  f3a4				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    831  f3a4
    832  f3a4		       a5 80		      LDA	GRP0Cache	;3
    833  f3a6		       85 1b		      STA	GRP0	;3
    834  f3a8
    835  f3a8		       a5 84		      LDA	GRP1Cache	;3
    836  f3aa		       85 1c		      STA	GRP1	;3
    837  f3ac
    838  f3ac		       a5 85		      LDA	ENABLCache	;3
    839  f3ae		       85 1f		      STA	ENABL	;3
    840  f3b0
    841  f3b0		       a5 86		      LDA	ENAM0Cache	;3
    842  f3b2		       85 1d		      STA	ENAM0	;3
    843  f3b4
    844  f3b4		       a5 87		      LDA	ENAM1Cache	;3
    845  f3b6		       85 1e		      STA	ENAM1	;3
    846  f3b8
    847  f3b8		       a5 81		      LDA	PF0Cache	;3
    848  f3ba		       85 0d		      STA	PF0	;3
    849  f3bc
    850  f3bc		       a9 00		      LDA	#0	;2
    851  f3be							;STA PF0	     ;3
    852  f3be		       85 80		      STA	GRP0Cache	;3
    853  f3c0		       85 86		      STA	ENAM0Cache	;3
    854  f3c2		       85 85		      STA	ENABLCache	;3
    855  f3c4		       85 87		      STA	ENAM1Cache	; 3
    856  f3c6							;STA GRP1Cache ;3
    857  f3c6		       85 0d		      STA	PF0	;3
    858  f3c8							;STA PF2	     ;3
    859  f3c8
    860  f3c8		       a5 83		      LDA	PF2Cache	;3
    861  f3ca		       85 0f		      STA	PF2	;3
    862  f3cc
    863  f3cc				   OpDrawCar0
    864  f3cc		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    865  f3ce		       b0 04		      BCS	OpSkipDrawCar	;2
    866  f3d0		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    867  f3d2		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    868  f3d4				   OpSkipDrawCar
    869  f3d4
    870  f3d4							;BEQ DrawTraffic3
    871  f3d4				   OpDrawTraffic1		; 33
    872  f3d4		       98		      TYA		; 2
    873  f3d5		       18		      CLC		; 2 
    874  f3d6		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    875  f3d8		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    876  f3da		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    877  f3dc		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    878  f3de		       4c e3 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    879  f3e1				   OpEorOffsetWithCarry
    880  f3e1		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    881  f3e3				   OpAfterEorOffsetWithCarry		;17
    882  f3e3		       aa		      TAX		;2
    883  f3e4		       bd 00 fe 	      LDA	AesTable,X	; 4
    884  f3e7		       c5 bf		      CMP	OpTrafficChance	;3
    885  f3e9		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    886  f3eb		       a9 ff		      LDA	#$FF	;2
    887  f3ed		       85 86		      STA	ENAM0Cache	;3
    888  f3ef				   OpFinishDrawTraffic1
    889  f3ef
    890  f3ef				   OpErasePF2
    891  f3ef		       a9 00		      LDA	#0
    892  f3f1		       85 0f		      STA	PF2
    893  f3f3
    894  f3f3				   OpDrawTraffic2		; 33
    895  f3f3		       98		      TYA		; 2
    896  f3f4		       18		      CLC		; 2 
    897  f3f5		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    898  f3f7		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    899  f3f9		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    900  f3fb		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    901  f3fd		       4c 02 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    902  f400				   OpEorOffsetWithCarry2
    903  f400		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    904  f402				   OpAfterEorOffsetWithCarry2		;17
    905  f402		       aa		      TAX		;2
    906  f403		       bd 00 fe 	      LDA	AesTable,X	; 4
    907  f406		       c5 bf		      CMP	OpTrafficChance	;3
    908  f408		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    909  f40a		       a9 02		      LDA	#%00000010	;2
    910  f40c		       85 85		      STA	ENABLCache	;3
    911  f40e				   OpFinishDrawTraffic2
    912  f40e
    913  f40e							;STA WSYNC ;65 / 137
    914  f40e
    915  f40e							; LDA Tmp0 ; Flicker this line if drawing car
    916  f40e							; BEQ FinishDrawTraffic4
    917  f40e				   OpDrawTraffic3		; 33
    918  f40e		       98		      TYA		; 2
    919  f40f		       18		      CLC		; 2 
    920  f410		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    921  f412		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    922  f414		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    923  f416		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    924  f418		       4c 1d f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    925  f41b				   OpEorOffsetWithCarry3
    926  f41b		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    927  f41d				   OpAfterEorOffsetWithCarry3		;17
    928  f41d		       aa		      TAX		;2
    929  f41e		       bd 00 fe 	      LDA	AesTable,X	; 4
    930  f421		       c5 bf		      CMP	OpTrafficChance	;3
    931  f423		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    932  f425		       a9 02		      LDA	#%00000010	;2
    933  f427		       85 87		      STA	ENAM1Cache
    934  f429				   OpFinishDrawTraffic3
    935  f429
    936  f429				   OpDrawOponent		;26
    937  f429		       84 b0		      STY	Tmp0	;3
    938  f42b		       a4 cf		      LDY	OpponentLine	;3
    939  f42d		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    940  f42f		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    941  f431				   OpDrawOpponent
    942  f431		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    943  f433		       85 80		      STA	GRP0Cache	;3
    944  f435		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    945  f437		       a4 b0		      LDY	Tmp0	;3
    946  f439		       4c 4d f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    947  f43c				   OpSkipDrawOpponent
    948  f43c		       c6 cf		      DEC	OpponentLine	;5
    949  f43e		       a4 b0		      LDY	Tmp0	;3
    950  f440
    951  f440
    952  f440				   OpDrawTraffic0		; 21 2pe
    953  f440		       98		      TYA		; 2
    954  f441		       18		      CLC		; 2 
    955  f442		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    956  f444		       29 08		      AND	#%00001000	;2
    957  f446		       f0 05		      BEQ	OpHasNoBorderP0	;3
    958  f448				   OpHasBorderP0
    959  f448		       a9 70		      LDA	#%01110000	; 2
    960  f44a		       4c 4f f4 	      JMP	OpStoreBorderP0	; 3
    961  f44d				   OpHasNoBorderP0
    962  f44d		       a9 00		      LDA	#0	; 2
    963  f44f				   OpStoreBorderP0
    964  f44f		       85 81		      STA	PF0Cache	; 3
    965  f451		       85 83		      STA	PF2Cache	; 3
    966  f453
    967  f453				   OpSkipDrawTraffic0
    968  f453
    969  f453				   OpWhileScanLoop
    970  f453		       88		      DEY		;2
    971  f454		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    972  f456		       4c a2 f3 	      JMP	OpScanLoop	;3
    973  f459				   OpFinishScanLoop		; 7 209 of 222
    974  f459		       4c 11 f5 	      JMP	FinishScanLoop
    975  f45c
    976  f45c							;main scanline loop...
    977  f45c				   ScanLoop
    978  f45c		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    979  f45e
    980  f45e							;Start of next line!			
    981  f45e				   DrawCache		;63 Is the last line going to the top of the next frame?
    982  f45e		       a5 81		      LDA	PF0Cache	;3
    983  f460		       85 0d		      STA	PF0	;3
    984  f462
    985  f462		       a5 80		      LDA	GRP0Cache	;3
    986  f464		       85 1b		      STA	GRP0	;3
    987  f466
    988  f466		       a5 84		      LDA	GRP1Cache	;3
    989  f468		       85 1c		      STA	GRP1	;3
    990  f46a
    991  f46a		       a5 86		      LDA	ENAM0Cache	;3
    992  f46c		       85 1d		      STA	ENAM0	;3
    993  f46e
    994  f46e		       a5 85		      LDA	ENABLCache	;3
    995  f470		       85 1f		      STA	ENABL	;3
    996  f472
    997  f472		       a5 87		      LDA	ENAM1Cache	;3
    998  f474		       85 1e		      STA	ENAM1	;3
    999  f476
   1000  f476		       a5 83		      LDA	PF2Cache	;3
   1001  f478		       85 0f		      STA	PF2	;3
   1002  f47a
   1003  f47a		       a9 00		      LDA	#0	;2
   1004  f47c		       85 0d		      STA	PF0	;3
   1005  f47e		       85 84		      STA	GRP1Cache	;3
   1006  f480		       85 85		      STA	ENABLCache	;3
   1007  f482		       85 86		      STA	ENAM0Cache	;3
   1008  f484		       85 87		      STA	ENAM1Cache	; 3
   1009  f486							;STA GRP0Cache
   1010  f486		       85 0f		      STA	PF2	;3
   1011  f488
   1012  f488				   DrawCar0
   1013  f488		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1014  f48a		       b0 04		      BCS	SkipDrawCar	;2
   1015  f48c		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1016  f48e		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1017  f490				   SkipDrawCar
   1018  f490
   1019  f490							;BEQ DrawTraffic3
   1020  f490				   DrawTraffic1 		; 33
   1021  f490		       98		      TYA		; 2
   1022  f491		       18		      CLC		; 2 
   1023  f492		       65 95		      ADC	TrafficOffset1 + 1	;3
   1024  f494		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1025  f496		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1026  f498		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1027  f49a		       4c 9f f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1028  f49d				   EorOffsetWithCarry
   1029  f49d		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1030  f49f				   AfterEorOffsetWithCarry		;17
   1031  f49f		       aa		      TAX		;2
   1032  f4a0		       bd 00 fe 	      LDA	AesTable,X	; 4
   1033  f4a3		       c5 be		      CMP	TrafficChance	;3
   1034  f4a5		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1035  f4a7		       a9 ff		      LDA	#$FF	;2
   1036  f4a9		       85 86		      STA	ENAM0Cache	;3
   1037  f4ab				   FinishDrawTraffic1
   1038  f4ab
   1039  f4ab				   DrawTraffic2 		; 33
   1040  f4ab		       98		      TYA		; 2
   1041  f4ac		       18		      CLC		; 2 
   1042  f4ad		       65 99		      ADC	TrafficOffset2 + 1	;3
   1043  f4af		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1044  f4b1		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1045  f4b3		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1046  f4b5		       4c ba f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1047  f4b8				   EorOffsetWithCarry2
   1048  f4b8		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1049  f4ba				   AfterEorOffsetWithCarry2		;17
   1050  f4ba		       aa		      TAX		;2
   1051  f4bb		       bd 00 fe 	      LDA	AesTable,X	; 4
   1052  f4be		       c5 be		      CMP	TrafficChance	;3
   1053  f4c0		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1054  f4c2		       a9 02		      LDA	#%00000010	;2
   1055  f4c4		       85 85		      STA	ENABLCache	;3
   1056  f4c6				   FinishDrawTraffic2
   1057  f4c6
   1058  f4c6							;STA WSYNC ;65 / 137
   1059  f4c6
   1060  f4c6							; LDA Tmp0 ; Flicker this line if drawing car
   1061  f4c6							; BEQ FinishDrawTraffic4
   1062  f4c6				   DrawTraffic3 		; 33
   1063  f4c6		       98		      TYA		; 2
   1064  f4c7		       18		      CLC		; 2 
   1065  f4c8		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1066  f4ca		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1067  f4cc		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1068  f4ce		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1069  f4d0		       4c d5 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1070  f4d3				   EorOffsetWithCarry3
   1071  f4d3		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1072  f4d5				   AfterEorOffsetWithCarry3		;17
   1073  f4d5		       aa		      TAX		;2
   1074  f4d6		       bd 00 fe 	      LDA	AesTable,X	; 4
   1075  f4d9		       c5 be		      CMP	TrafficChance	;3
   1076  f4db		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1077  f4dd		       a9 02		      LDA	#%00000010	;2
   1078  f4df		       85 87		      STA	ENAM1Cache
   1079  f4e1				   FinishDrawTraffic3
   1080  f4e1
   1081  f4e1
   1082  f4e1				   DrawOponent		;26
   1083  f4e1		       84 b0		      STY	Tmp0	;3
   1084  f4e3		       a4 cf		      LDY	OpponentLine	;3
   1085  f4e5		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1086  f4e7		       b0 0b		      BCS	SkipDrawOpponent	;2
   1087  f4e9				   DrawOpponent
   1088  f4e9		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1089  f4eb		       85 84		      STA	GRP1Cache	;3
   1090  f4ed		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1091  f4ef		       a4 b0		      LDY	Tmp0	;3
   1092  f4f1		       4c 05 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1093  f4f4				   SkipDrawOpponent
   1094  f4f4		       c6 cf		      DEC	OpponentLine	;5
   1095  f4f6		       a4 b0		      LDY	Tmp0	;3
   1096  f4f8
   1097  f4f8				   DrawTraffic0 		; 21 2pe
   1098  f4f8		       98		      TYA		; 2
   1099  f4f9		       18		      CLC		; 2 
   1100  f4fa		       65 91		      ADC	TrafficOffset0 + 1	;3
   1101  f4fc		       29 08		      AND	#%00001000	;2
   1102  f4fe		       f0 05		      BEQ	HasNoBorderP0	;3
   1103  f500				   HasBorderP0
   1104  f500		       a9 70		      LDA	#%01110000	; 2
   1105  f502		       4c 07 f5 	      JMP	StoreBorderP0	; 3
   1106  f505				   HasNoBorderP0
   1107  f505		       a9 00		      LDA	#0	; 2
   1108  f507				   StoreBorderP0
   1109  f507		       85 81		      STA	PF0Cache	; 3
   1110  f509		       85 83		      STA	PF2Cache	; 3
   1111  f50b
   1112  f50b				   SkipDrawTraffic0
   1113  f50b
   1114  f50b				   WhileScanLoop
   1115  f50b		       88		      DEY		;2
   1116  f50c		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1117  f50e		       4c 5c f4 	      JMP	ScanLoop	;3
   1118  f511				   FinishScanLoop		; 7 209 of 222
   1119  f511
   1120  f511		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1121  f513		       20 8d f6 	      JSR	LoadAll
   1122  f516		       85 02		      STA	WSYNC	; do stuff!
   1123  f518		       85 02		      STA	WSYNC
   1124  f51a		       85 02		      STA	WSYNC
   1125  f51c							;42 cycles to use here
   1126  f51c
   1127  f51c				   PrepareOverscan
   1128  f51c		       a9 02		      LDA	#2
   1129  f51e		       85 02		      STA	WSYNC
   1130  f520		       85 01		      STA	VBLANK
   1131  f522
   1132  f522		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1133  f524		       8d 96 02 	      STA	TIM64T
   1134  f527
   1135  f527							;Read Fire Button before, will make it start the game for now.
   1136  f527				   StartGame
   1137  f527		       a5 0c		      LDA	INPT4	;3
   1138  f529		       25 0d		      AND	INPT5	;3 player 
   1139  f52b		       30 35		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1140  f52d		       a5 8c		      LDA	FrameCount0
   1141  f52f		       29 01		      AND	#%00000001
   1142  f531		       d0 2f		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1143  f533		       a5 bd		      LDA	GameStatus	;3
   1144  f535		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1145  f537		       d0 29		      BNE	SkipGameStart
   1146  f539		       a5 c6		      LDA	GameMode
   1147  f53b		       c9 10		      CMP	#MAX_GAME_MODE
   1148  f53d		       d0 0b		      BNE	SetGameRunning
   1149  f53f		       a9 00		      LDA	#0
   1150  f541		       85 c6		      STA	GameMode
   1151  f543		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1152  f545		       85 bc		      STA	SwitchDebounceCounter
   1153  f547		       4c 62 f5 	      JMP	SkipGameStart
   1154  f54a				   SetGameRunning
   1155  f54a		       e6 bd		      INC	GameStatus
   1156  f54c		       a9 00		      LDA	#0	;
   1157  f54e		       85 8c		      STA	FrameCount0
   1158  f550		       85 8d		      STA	FrameCount1
   1159  f552		       a9 0a		      LDA	#10
   1160  f554		       85 19		      STA	AUDV0
   1161  f556		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1162  f558		       85 c9		      STA	ScoreFontColor
   1163  f55a		       85 ca		      STA	OpScoreFontColor
   1164  f55c		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1165  f55e		       85 cb		      STA	ScoreFontColorHoldChange
   1166  f560		       85 cc		      STA	OpScoreFontColorHoldChange
   1167  f562				   SkipGameStart
   1168  f562
   1169  f562				   ReadSwitches
   1170  f562		       a6 bc		      LDX	SwitchDebounceCounter
   1171  f564		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1172  f566		       a9 01		      LDA	#%00000001
   1173  f568		       2c 82 02 	      BIT	SWCHB
   1174  f56b		       d0 07		      BNE	SkipReset
   1175  f56d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1176  f56f		       85 bc		      STA	SwitchDebounceCounter
   1177  f571		       4c cc f5 	      JMP	OverScanWaitBeforeReset
   1178  f574				   SkipReset
   1179  f574
   1180  f574				   GameModeSelect
   1181  f574		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1182  f576		       d0 1c		      BNE	SkipGameSelect
   1183  f578		       20 b9 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1184  f57b				   ContinueGameSelect
   1185  f57b		       a9 02		      LDA	#%00000010
   1186  f57d		       2c 82 02 	      BIT	SWCHB
   1187  f580		       d0 12		      BNE	SkipGameSelect
   1188  f582		       a6 c6		      LDX	GameMode
   1189  f584		       e0 10		      CPX	#MAX_GAME_MODE
   1190  f586		       f0 04		      BEQ	ResetGameMode
   1191  f588		       e8		      INX
   1192  f589		       4c 8e f5 	      JMP	StoreGameMode
   1193  f58c				   ResetGameMode
   1194  f58c		       a2 00		      LDX	#0
   1195  f58e				   StoreGameMode
   1196  f58e		       86 c6		      STX	GameMode
   1197  f590		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1198  f592		       85 bc		      STA	SwitchDebounceCounter
   1199  f594				   SkipGameSelect
   1200  f594		       4c 99 f5 	      JMP	EndReadSwitches
   1201  f597				   DecrementSwitchDebounceCounter
   1202  f597		       c6 bc		      DEC	SwitchDebounceCounter
   1203  f599				   EndReadSwitches
   1204  f599
   1205  f599							; Last thing, will overrride hmove
   1206  f599				   CallTestColisionAndMove
   1207  f599		       a2 00		      LDX	#0	; Player 0
   1208  f59b							; Colision with traffic, each player check different flags,
   1209  f59b		       a5 8c		      LDA	FrameCount0
   1210  f59d		       29 01		      AND	#%00000001
   1211  f59f		       d0 07		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1212  f5a1		       a5 01		      LDA	CXM1P
   1213  f5a3		       4a		      LSR
   1214  f5a4		       05 00		      ORA	CXM0P
   1215  f5a6		       05 02		      ORA	CXP0FB
   1216  f5a8							; ORA CXPPMM ; Collision between players will have its own rules
   1217  f5a8				   SkipColisionPlayer0		; Should not colide on opponent side.
   1218  f5a8		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1219  f5aa		       85 b2		      STA	Tmp2
   1220  f5ac		       20 93 f9 	      JSR	TestCollisionAndMove
   1221  f5af
   1222  f5af		       e8		      INX		; player 1
   1223  f5b0		       a5 8c		      LDA	FrameCount0
   1224  f5b2		       29 01		      AND	#%00000001
   1225  f5b4		       f0 07		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1226  f5b6		       a5 00		      LDA	CXM0P
   1227  f5b8		       4a		      LSR
   1228  f5b9		       05 01		      ORA	CXM1P
   1229  f5bb		       05 03		      ORA	CXP1FB
   1230  f5bd				   SkipColisionPlayer1
   1231  f5bd		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1232  f5bf		       85 b2		      STA	Tmp2
   1233  f5c1		       20 93 f9 	      JSR	TestCollisionAndMove
   1234  f5c4
   1235  f5c4				   OverScanWait
   1236  f5c4		       ad 84 02 	      LDA	INTIM
   1237  f5c7		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1238  f5c9		       4c cc f0 	      JMP	MainLoop
   1239  f5cc
   1240  f5cc				   OverScanWaitBeforeReset
   1241  f5cc		       ad 84 02 	      LDA	INTIM
   1242  f5cf		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1243  f5d1		       4c 12 f0 	      JMP	Start
   1244  f5d4
   1245  f5d4				   Subroutines
   1246  f5d4
   1247  f5d4				   ProcessSound
   1248  f5d4				   LeftSound		;41
   1249  f5d4		       a5 b8		      LDA	CountdownTimer	;3
   1250  f5d6		       f0 1b		      BEQ	EngineOff	;2
   1251  f5d8		       a6 d5		      LDX	Gear
   1252  f5da		       a5 f0		      LDA	Player0SpeedL	;3
   1253  f5dc		       4a		      LSR		;2
   1254  f5dd		       4a		      LSR		;2
   1255  f5de		       4a		      LSR		;2
   1256  f5df		       29 0f		      AND	#%00001111	;2
   1257  f5e1		       85 b0		      STA	Tmp0	;3
   1258  f5e3		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1259  f5e6		       38		      SEC		;2
   1260  f5e7		       e5 b0		      SBC	Tmp0	;3
   1261  f5e9		       85 17		      STA	AUDF0	;3
   1262  f5eb		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1263  f5ee		       85 15		      STA	AUDC0	;3
   1264  f5f0		       4c f7 f5 	      JMP	EndLeftSound	;3
   1265  f5f3				   EngineOff
   1266  f5f3		       a9 00		      LDA	#0
   1267  f5f5		       85 15		      STA	AUDC0
   1268  f5f7
   1269  f5f7				   EndLeftSound
   1270  f5f7
   1271  f5f7
   1272  f5f7				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1273  f5f7		       a5 c9		      LDA	ScoreFontColor	;3
   1274  f5f9		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1275  f5fb		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1276  f5fd		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1277  f5ff		       f0 29		      BEQ	PlayCheckpoint	;2
   1278  f601		       a5 8e		      LDA	CollisionCounter	;3
   1279  f603		       c9 e0		      CMP	#$E0	;2
   1280  f605		       b0 14		      BCS	PlayColision	;2
   1281  f607		       a5 cd		      LDA	NextCheckpoint	;3
   1282  f609		       38		      SEC		;2
   1283  f60a		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1284  f60c		       c9 02		      CMP	#$02	;2
   1285  f60e		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1286  f610		       a5 b8		      LDA	CountdownTimer	; 3
   1287  f612		       f0 53		      BEQ	MuteRightSound	;2
   1288  f614		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1289  f616		       90 37		      BCC	PlayWarnTimeEnding	;4
   1290  f618		       4c 67 f6 	      JMP	MuteRightSound	;3
   1291  f61b				   PlayColision
   1292  f61b		       a9 1f		      LDA	#31
   1293  f61d		       85 18		      STA	AUDF1
   1294  f61f		       a9 08		      LDA	#8
   1295  f621		       85 16		      STA	AUDC1
   1296  f623		       a9 08		      LDA	#8
   1297  f625		       85 1a		      STA	AUDV1
   1298  f627		       4c 6b f6 	      JMP	EndRightSound
   1299  f62a
   1300  f62a				   PlayCheckpoint
   1301  f62a		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1302  f62c		       4a		      LSR		;2
   1303  f62d		       4a		      LSR		;2
   1304  f62e		       4a		      LSR		;2
   1305  f62f		       85 18		      STA	AUDF1	;3
   1306  f631		       a9 0c		      LDA	#12	;2
   1307  f633		       85 16		      STA	AUDC1	;3
   1308  f635		       a9 06		      LDA	#6	;2
   1309  f637		       85 1a		      STA	AUDV1	;3
   1310  f639		       4c 6b f6 	      JMP	EndRightSound	;3
   1311  f63c
   1312  f63c				   PlayBeforeCheckpoint
   1313  f63c		       a5 8c		      LDA	FrameCount0	;3
   1314  f63e		       29 1c		      AND	#%00011100	;2
   1315  f640		       09 03		      ORA	#%00000011	;2
   1316  f642		       85 18		      STA	AUDF1	;3
   1317  f644		       a9 0c		      LDA	#12	;2
   1318  f646		       85 16		      STA	AUDC1	;3
   1319  f648		       a9 03		      LDA	#3	;2
   1320  f64a		       85 1a		      STA	AUDV1	;3
   1321  f64c		       4c 6b f6 	      JMP	EndRightSound	;3
   1322  f64f
   1323  f64f				   PlayWarnTimeEnding
   1324  f64f		       a5 8c		      LDA	FrameCount0	;3
   1325  f651		       29 04		      AND	#%00000100	;2
   1326  f653		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1327  f655		       18		      CLC		;2
   1328  f656		       a9 0a		      LDA	#10	;2
   1329  f658		       65 b8		      ADC	CountdownTimer	;2
   1330  f65a		       85 18		      STA	AUDF1	;3
   1331  f65c		       a9 0c		      LDA	#12	;2
   1332  f65e		       85 16		      STA	AUDC1	;3
   1333  f660		       a9 03		      LDA	#3	;2
   1334  f662		       85 1a		      STA	AUDV1	;3
   1335  f664		       4c 6b f6 	      JMP	EndRightSound	;3
   1336  f667
   1337  f667				   MuteRightSound
   1338  f667		       a9 00		      LDA	#0
   1339  f669		       85 1a		      STA	AUDV1
   1340  f66b				   EndRightSound
   1341  f66b		       60		      RTS
   1342  f66c
   1343  f66c				   ClearAll		; 52
   1344  f66c		       a9 00		      LDA	#0	;2
   1345  f66e		       85 1c		      STA	GRP1	;3
   1346  f670		       85 1f		      STA	ENABL	;3
   1347  f672		       85 1d		      STA	ENAM0	;3
   1348  f674		       85 1e		      STA	ENAM1	;3
   1349  f676		       85 84		      STA	GRP1Cache	;3
   1350  f678		       85 85		      STA	ENABLCache	;3
   1351  f67a		       85 86		      STA	ENAM0Cache	;3
   1352  f67c		       85 87		      STA	ENAM1Cache	;3
   1353  f67e
   1354  f67e				   ClearPF		; 26
   1355  f67e		       a9 00		      LDA	#0	;2
   1356  f680				   ClearPFSkipLDA0
   1357  f680		       85 0d		      STA	PF0	;3
   1358  f682		       85 0e		      STA	PF1	;3
   1359  f684		       85 0f		      STA	PF2	;3	
   1360  f686		       85 81		      STA	PF0Cache	;3
   1361  f688		       85 82		      STA	PF1Cache	;3
   1362  f68a		       85 83		      STA	PF2Cache	;3 
   1363  f68c		       60		      RTS		;6
   1364  f68d				   EndClearAll
   1365  f68d
   1366  f68d				   LoadAll		; 48
   1367  f68d		       a5 81		      LDA	PF0Cache	;3
   1368  f68f		       85 0d		      STA	PF0	;3
   1369  f691
   1370  f691		       a5 82		      LDA	PF1Cache	;3
   1371  f693		       85 0e		      STA	PF1	;3
   1372  f695
   1373  f695		       a5 83		      LDA	PF2Cache	;3
   1374  f697		       85 0f		      STA	PF2	;3
   1375  f699
   1376  f699		       a5 84		      LDA	GRP1Cache	;3
   1377  f69b		       85 1c		      STA	GRP1	;3
   1378  f69d
   1379  f69d		       a5 85		      LDA	ENABLCache	;3
   1380  f69f		       85 1f		      STA	ENABL	;3
   1381  f6a1
   1382  f6a1		       a5 86		      LDA	ENAM0Cache	;3
   1383  f6a3		       85 1d		      STA	ENAM0	;3
   1384  f6a5
   1385  f6a5		       a5 87		      LDA	ENAM1Cache	;3
   1386  f6a7		       85 1e		      STA	ENAM1	;3
   1387  f6a9
   1388  f6a9		       60		      RTS		;6
   1389  f6aa				   EndLoadAll
   1390  f6aa
   1391  f6aa				   NextDifficulty
   1392  f6aa		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1393  f6ac		       29 01		      AND	#%00000001
   1394  f6ae		       d0 2a		      BNE	CheckRandomDifficulty
   1395  f6b0
   1396  f6b0		       a5 c4		      LDA	CurrentDifficulty
   1397  f6b2		       18		      CLC
   1398  f6b3		       69 01		      ADC	#1
   1399  f6b5		       29 03		      AND	#%00000011	; 0 to 3
   1400  f6b7		       85 c4		      STA	CurrentDifficulty
   1401  f6b9
   1402  f6b9				   ConfigureDifficulty
   1403  f6b9		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1404  f6bb		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1405  f6be		       85 be		      STA	TrafficChance
   1406  f6c0		       85 bf		      STA	OpTrafficChance	; Needs FIX
   1407  f6c2		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1408  f6c5		       85 c2		      STA	TrafficColor
   1409  f6c7		       85 c3		      STA	OpTrafficColor	; Needs FIX
   1410  f6c9
   1411  f6c9		       a5 c6		      LDA	GameMode	;
   1412  f6cb		       29 01		      AND	#%00000001
   1413  f6cd		       f0 03		      BEQ	UseNextDifficultyTime
   1414  f6cf		       4c d3 f6 	      JMP	StoreDifficultyTime
   1415  f6d2				   UseNextDifficultyTime
   1416  f6d2		       c8		      INY
   1417  f6d3				   StoreDifficultyTime
   1418  f6d3		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1419  f6d6		       85 c0		      STA	CheckpointTime
   1420  f6d8		       85 c1		      STA	OpCheckpointTime
   1421  f6da
   1422  f6da				   CheckRandomDifficulty
   1423  f6da		       a5 c6		      LDA	GameMode
   1424  f6dc		       29 08		      AND	#%00001000	; Random difficulties
   1425  f6de		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1426  f6e0				   RandomDifficulty		; need work to make 2 players compatible
   1427  f6e0		       a6 8c		      LDX	FrameCount0
   1428  f6e2		       bd 00 fe 	      LDA	AesTable,X
   1429  f6e5							;EOR TrafficChance, no need, lets make life simple
   1430  f6e5		       29 3f		      AND	#%00111111
   1431  f6e7		       85 be		      STA	TrafficChance
   1432  f6e9		       85 bf		      STA	OpTrafficChance	; While not fix
   1433  f6eb
   1434  f6eb				   ReturnFromNextDifficulty
   1435  f6eb		       60		      RTS
   1436  f6ec
   1437  f6ec				   DefaultOffsets
   1438  f6ec		       a9 20		      LDA	#$20
   1439  f6ee		       85 96		      STA	TrafficOffset1 + 2
   1440  f6f0		       85 a6		      STA	OpTrafficOffset1 + 2
   1441  f6f2		       a9 40		      LDA	#$40
   1442  f6f4		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1443  f6f6		       85 aa		      STA	OpTrafficOffset2 + 2
   1444  f6f8		       a9 60		      LDA	#$60
   1445  f6fa		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1446  f6fc		       85 ae		      STA	OpTrafficOffset3 + 2
   1447  f6fe		       a9 80		      LDA	#$80
   1448  f700		       60		      RTS
   1449  f701
   1450  f701				   PrintStaticText		; Preload X with the offset referent to StaticText
   1451  f701		       bd 00 ff 	      LDA	StaticText,X
   1452  f704		       85 d0		      STA	ScoreD0
   1453  f706		       e8		      INX
   1454  f707		       bd 00 ff 	      LDA	StaticText,X
   1455  f70a		       85 d1		      STA	ScoreD1
   1456  f70c		       e8		      INX
   1457  f70d		       bd 00 ff 	      LDA	StaticText,X
   1458  f710		       85 d2		      STA	ScoreD2
   1459  f712		       e8		      INX
   1460  f713		       bd 00 ff 	      LDA	StaticText,X
   1461  f716		       85 d3		      STA	ScoreD3
   1462  f718		       e8		      INX
   1463  f719		       bd 00 ff 	      LDA	StaticText,X
   1464  f71c		       85 d4		      STA	ScoreD4
   1465  f71e		       60		      RTS
   1466  f71f
   1467  f71f				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1468  f71f		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1469  f721		       85 c9		      STA	ScoreFontColor
   1470  f723		       a9 01		      LDA	#1
   1471  f725		       85 cb		      STA	ScoreFontColorHoldChange
   1472  f727
   1473  f727		       a5 8d		      LDA	FrameCount1
   1474  f729		       29 07		      AND	#%00000111
   1475  f72b		       85 b3		      STA	Tmp3
   1476  f72d							;0 is Zelda Name, (default)
   1477  f72d		       a9 01		      LDA	#1
   1478  f72f		       c5 b3		      CMP	Tmp3
   1479  f731		       f0 38		      BEQ	PrintZeldaDateLeft
   1480  f733
   1481  f733		       a9 02		      LDA	#2
   1482  f735		       c5 b3		      CMP	Tmp3
   1483  f737		       f0 23		      BEQ	PrintPolvinhosLeft
   1484  f739
   1485  f739		       a9 03		      LDA	#3
   1486  f73b		       c5 b3		      CMP	Tmp3
   1487  f73d		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1488  f73f
   1489  f73f		       a9 04		      LDA	#4
   1490  f741		       c5 b3		      CMP	Tmp3
   1491  f743		       f0 1c		      BEQ	PrintIvonneLeft
   1492  f745
   1493  f745		       a9 05		      LDA	#5
   1494  f747		       c5 b3		      CMP	Tmp3
   1495  f749		       f0 2a		      BEQ	PrintIvonneDateLeft
   1496  f74b
   1497  f74b		       a9 06		      LDA	#6
   1498  f74d		       c5 b3		      CMP	Tmp3
   1499  f74f		       f0 15		      BEQ	PrintArtLeft
   1500  f751
   1501  f751		       a9 07		      LDA	#7
   1502  f753		       c5 b3		      CMP	Tmp3
   1503  f755		       f0 23		      BEQ	PrintLeonardoLeft
   1504  f757
   1505  f757				   PrintZeldaLeft
   1506  f757		       a2 28		      LDX	#<ZeldaTextLeft
   1507  f759		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1508  f75c				   PrintPolvinhosLeft
   1509  f75c		       a2 3c		      LDX	#<PolvinhosTextLeft
   1510  f75e		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1511  f761				   PrintIvonneLeft
   1512  f761		       a2 50		      LDX	#<IvonneTextLeft
   1513  f763		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1514  f766				   PrintArtLeft
   1515  f766		       a2 64		      LDX	#<PaperArtTextLeft
   1516  f768		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1517  f76b
   1518  f76b				   PrintZeldaDateLeft
   1519  f76b		       a2 32		      LDX	#<ZeldaDateLeft
   1520  f76d		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1521  f770				   PrintPolvinhosDateLeft
   1522  f770		       a2 46		      LDX	#<PolvinhosDateLeft
   1523  f772		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1524  f775				   PrintIvonneDateLeft
   1525  f775		       a2 5a		      LDX	#<IvonneDateLeft
   1526  f777		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1527  f77a				   PrintLeonardoLeft
   1528  f77a		       a2 6e		      LDX	#<LeonardoTextLeft
   1529  f77c		       4c 7f f7 	      JMP	ProcessPrintEasterEgg
   1530  f77f
   1531  f77f				   ProcessPrintEasterEgg
   1532  f77f		       a5 8c		      LDA	FrameCount0	;3
   1533  f781		       29 01		      AND	#%00000001	;2
   1534  f783		       d0 03		      BNE	TranformIntoRightText
   1535  f785		       4c 8d f7 	      JMP	PrintEasterEggText
   1536  f788				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1537  f788		       8a		      TXA
   1538  f789		       18		      CLC
   1539  f78a		       69 05		      ADC	#HALF_TEXT_SIZE
   1540  f78c		       aa		      TAX
   1541  f78d
   1542  f78d				   PrintEasterEggText
   1543  f78d		       20 01 f7 	      JSR	PrintStaticText
   1544  f790		       60		      RTS
   1545  f791
   1546  f791				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1547  f791		       a2 00		      LDX	#0
   1548  f793		       a0 04		      LDY	#FONT_OFFSET
   1549  f795
   1550  f795				   ScoreLoop		; 20 
   1551  f795		       85 02		      STA	WSYNC	;2
   1552  f797
   1553  f797		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1554  f799		       85 0d		      STA	PF0	;3
   1555  f79b
   1556  f79b		       a5 82		      LDA	PF1Cache	;3
   1557  f79d		       85 0e		      STA	PF1	;3
   1558  f79f
   1559  f79f		       a5 83		      LDA	PF2Cache	;3
   1560  f7a1		       85 0f		      STA	PF2	;3
   1561  f7a3
   1562  f7a3				   DrawScoreD0		; 15
   1563  f7a3		       a6 d0		      LDX	ScoreD0	; 3
   1564  f7a5		       bd 00 fd 	      LDA	Font,X	;4
   1565  f7a8		       85 81		      STA	PF0Cache	;3
   1566  f7aa		       c6 d0		      DEC	ScoreD0	;5
   1567  f7ac
   1568  f7ac				   DrawScoreD1		; 23	
   1569  f7ac		       a6 d1		      LDX	ScoreD1	; 3
   1570  f7ae		       bd 00 fd 	      LDA	Font,X	;4
   1571  f7b1		       0a		      ASL		;2
   1572  f7b2		       0a		      ASL		;2
   1573  f7b3		       0a		      ASL		;2
   1574  f7b4		       0a		      ASL		;2
   1575  f7b5		       85 82		      STA	PF1Cache	;3
   1576  f7b7		       c6 d1		      DEC	ScoreD1	;5
   1577  f7b9
   1578  f7b9				   DrawScoreD2		; 20
   1579  f7b9		       a6 d2		      LDX	ScoreD2	; 3
   1580  f7bb		       bd 00 fd 	      LDA	Font,X	;4
   1581  f7be		       29 0f		      AND	#%00001111	;2
   1582  f7c0		       05 82		      ORA	PF1Cache	;3
   1583  f7c2		       85 82		      STA	PF1Cache	;3
   1584  f7c4		       c6 d2		      DEC	ScoreD2	;5
   1585  f7c6
   1586  f7c6				   DrawScoreD3		; 23
   1587  f7c6		       a6 d3		      LDX	ScoreD3	; 3
   1588  f7c8		       bd 00 fd 	      LDA	Font,X	;4
   1589  f7cb		       4a		      LSR		;2
   1590  f7cc		       4a		      LSR		;2
   1591  f7cd		       4a		      LSR		;2
   1592  f7ce		       4a		      LSR		;2
   1593  f7cf		       85 83		      STA	PF2Cache	;3
   1594  f7d1		       c6 d3		      DEC	ScoreD3	;5
   1595  f7d3
   1596  f7d3				   DrawScoreD4		; 20
   1597  f7d3		       a6 d4		      LDX	ScoreD4	; 3
   1598  f7d5		       bd 00 fd 	      LDA	Font,X	;4
   1599  f7d8		       29 f0		      AND	#%11110000	;2
   1600  f7da		       05 83		      ORA	PF2Cache	;3
   1601  f7dc		       85 83		      STA	PF2Cache	;3
   1602  f7de		       c6 d4		      DEC	ScoreD4	;5
   1603  f7e0
   1604  f7e0
   1605  f7e0		       88		      DEY		;2
   1606  f7e1		       10 b2		      BPL	ScoreLoop	;4
   1607  f7e3
   1608  f7e3		       85 02		      STA	WSYNC
   1609  f7e5		       20 8d f6 	      JSR	LoadAll
   1610  f7e8		       60		      RTS		; 6
   1611  f7e9
   1612  f7e9				   PrintRightDecimalDigits
   1613  f7e9		       b9 00 00 	      LDA	0,Y
   1614  f7ec		       4a		      LSR
   1615  f7ed		       4a		      LSR
   1616  f7ee		       4a		      LSR
   1617  f7ef		       4a		      LSR
   1618  f7f0		       aa		      TAX
   1619  f7f1		       bd be fd 	      LDA	FontLookup,X	;4
   1620  f7f4		       85 d2		      STA	ScoreD2	;3
   1621  f7f6
   1622  f7f6		       b9 00 00 	      LDA	0,Y
   1623  f7f9		       29 0f		      AND	#%00001111
   1624  f7fb		       aa		      TAX
   1625  f7fc		       bd be fd 	      LDA	FontLookup,X	;4
   1626  f7ff		       85 d3		      STA	ScoreD3	;3
   1627  f801
   1628  f801		       c8		      INY
   1629  f802		       b9 00 00 	      LDA	0,Y
   1630  f805		       4a		      LSR
   1631  f806		       4a		      LSR
   1632  f807		       4a		      LSR
   1633  f808		       4a		      LSR
   1634  f809		       aa		      TAX
   1635  f80a		       bd be fd 	      LDA	FontLookup,X	;4
   1636  f80d		       85 d0		      STA	ScoreD0	;3
   1637  f80f
   1638  f80f		       b9 00 00 	      LDA	0,Y
   1639  f812		       29 0f		      AND	#%00001111
   1640  f814		       aa		      TAX
   1641  f815		       bd be fd 	      LDA	FontLookup,X	;4
   1642  f818		       85 d1		      STA	ScoreD1	;3
   1643  f81a
   1644  f81a		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1645  f81c		       85 d4		      STA	ScoreD4
   1646  f81e		       60		      RTS
   1647  f81f
   1648  f81f				   PrintLastLeftDecimalDigits
   1649  f81f		       b9 00 00 	      LDA	0,Y
   1650  f822		       4a		      LSR
   1651  f823		       4a		      LSR
   1652  f824		       4a		      LSR
   1653  f825		       4a		      LSR
   1654  f826		       aa		      TAX
   1655  f827		       bd be fd 	      LDA	FontLookup,X	;4
   1656  f82a		       85 d3		      STA	ScoreD3	;3
   1657  f82c		       b9 00 00 	      LDA	0,Y
   1658  f82f		       29 0f		      AND	#%00001111
   1659  f831		       aa		      TAX
   1660  f832		       bd be fd 	      LDA	FontLookup,X	;4
   1661  f835		       85 d4		      STA	ScoreD4	;3
   1662  f837		       60		      RTS
   1663  f838
   1664  f838				   PrintZerosLeft
   1665  f838		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1666  f83a		       85 d2		      STA	ScoreD2
   1667  f83c		       85 d3		      STA	ScoreD3
   1668  f83e		       85 d4		      STA	ScoreD4
   1669  f840		       60		      RTS
   1670  f841
   1671  f841				   DrawGameOverScoreLine
   1672  f841		       85 02		      STA	WSYNC
   1673  f843		       20 91 f7 	      JSR	PrintScore
   1674  f846		       85 02		      STA	WSYNC
   1675  f848		       85 02		      STA	WSYNC
   1676  f84a		       20 7e f6 	      JSR	ClearPF
   1677  f84d		       60		      RTS
   1678  f84e
   1679  f84e				   DrawGameOverScreenLeft
   1680  f84e		       85 02		      STA	WSYNC
   1681  f850		       20 7e f6 	      JSR	ClearPF
   1682  f853
   1683  f853				   DrawGlideTimerLeft
   1684  f853		       20 15 f9 	      JSR	Sleep8Lines
   1685  f856		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1686  f858		       85 06		      STA	COLUP0
   1687  f85a		       85 02		      STA	WSYNC
   1688  f85c		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1689  f85e		       85 d0		      STA	ScoreD0
   1690  f860		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1691  f862		       85 d1		      STA	ScoreD1
   1692  f864		       20 38 f8 	      JSR	PrintZerosLeft
   1693  f867		       20 41 f8 	      JSR	DrawGameOverScoreLine
   1694  f86a
   1695  f86a				   DrawHitCountLeft
   1696  f86a		       20 15 f9 	      JSR	Sleep8Lines
   1697  f86d		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1698  f86f		       85 06		      STA	COLUP0
   1699  f871		       85 02		      STA	WSYNC
   1700  f873		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1701  f875		       85 d0		      STA	ScoreD0
   1702  f877		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1703  f879		       85 d1		      STA	ScoreD1
   1704  f87b		       20 38 f8 	      JSR	PrintZerosLeft
   1705  f87e		       20 41 f8 	      JSR	DrawGameOverScoreLine
   1706  f881
   1707  f881				   DrawCheckpointCountLeft
   1708  f881		       20 15 f9 	      JSR	Sleep8Lines
   1709  f884		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1710  f886		       85 06		      STA	COLUP0
   1711  f888		       85 02		      STA	WSYNC
   1712  f88a		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1713  f88c		       85 d0		      STA	ScoreD0
   1714  f88e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1715  f890		       85 d1		      STA	ScoreD1
   1716  f892		       20 38 f8 	      JSR	PrintZerosLeft
   1717  f895		       20 41 f8 	      JSR	DrawGameOverScoreLine
   1718  f898
   1719  f898				   DrawGameVersionLeft
   1720  f898		       20 15 f9 	      JSR	Sleep8Lines
   1721  f89b		       a9 49		      LDA	#VERSION_COLOR
   1722  f89d		       85 06		      STA	COLUP0
   1723  f89f
   1724  f89f		       a5 c6		      LDA	GameMode
   1725  f8a1		       aa		      TAX
   1726  f8a2		       bd be fd 	      LDA	FontLookup,X	;4
   1727  f8a5		       85 d0		      STA	ScoreD0	;3
   1728  f8a7
   1729  f8a7		       a5 c7		      LDA	CurrentCarId
   1730  f8a9		       aa		      TAX
   1731  f8aa		       bd be fd 	      LDA	FontLookup,X	;4
   1732  f8ad		       85 d1		      STA	ScoreD1	;3
   1733  f8af
   1734  f8af		       a5 db		      LDA	StartSWCHB
   1735  f8b1		       29 40		      AND	#%01000000	; P0 difficulty
   1736  f8b3		       49 40		      EOR	#%01000000	; Reverse bytes
   1737  f8b5		       2a		      ROL
   1738  f8b6		       2a		      ROL
   1739  f8b7		       2a		      ROL
   1740  f8b8		       18		      CLC
   1741  f8b9		       69 0a		      ADC	#10
   1742  f8bb		       aa		      TAX
   1743  f8bc		       bd be fd 	      LDA	FontLookup,X	;4
   1744  f8bf		       85 d2		      STA	ScoreD2	;3
   1745  f8c1
   1746  f8c1		       a5 db		      LDA	StartSWCHB
   1747  f8c3		       29 80		      AND	#%10000000	; P0 difficulty
   1748  f8c5		       49 80		      EOR	#%10000000	; Reverse bytes
   1749  f8c7		       2a		      ROL
   1750  f8c8		       2a		      ROL
   1751  f8c9		       18		      CLC
   1752  f8ca		       69 0a		      ADC	#10
   1753  f8cc		       aa		      TAX
   1754  f8cd		       bd be fd 	      LDA	FontLookup,X	;4
   1755  f8d0		       85 d3		      STA	ScoreD3	;3
   1756  f8d2
   1757  f8d2		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1758  f8d4		       85 d4		      STA	ScoreD4
   1759  f8d6
   1760  f8d6		       20 41 f8 	      JSR	DrawGameOverScoreLine
   1761  f8d9
   1762  f8d9		       4c f2 f8 	      JMP	FinalizeDrawGameOver
   1763  f8dc
   1764  f8dc				   DrawGameOverScreenRight
   1765  f8dc		       85 02		      STA	WSYNC
   1766  f8de		       20 7e f6 	      JSR	ClearPF
   1767  f8e1
   1768  f8e1				   DrawVersionRight
   1769  f8e1		       20 15 f9 	      JSR	Sleep8Lines
   1770  f8e4		       a9 49		      LDA	#VERSION_COLOR
   1771  f8e6		       85 07		      STA	COLUP1
   1772  f8e8		       85 02		      STA	WSYNC
   1773  f8ea		       a2 78		      LDX	#<VersionText
   1774  f8ec		       20 01 f7 	      JSR	PrintStaticText
   1775  f8ef		       20 41 f8 	      JSR	DrawGameOverScoreLine
   1776  f8f2
   1777  f8f2				   FinalizeDrawGameOver
   1778  f8f2		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1779  f8f4		       85 c9		      STA	ScoreFontColor
   1780  f8f6		       20 0c f9 	      JSR	Sleep4Lines
   1781  f8f9		       20 1c f9 	      JSR	Sleep32Lines
   1782  f8fc		       20 1c f9 	      JSR	Sleep32Lines
   1783  f8ff		       4c 1c f5 	      JMP	PrepareOverscan
   1784  f902
   1785  f902				   WaitForVblankEnd
   1786  f902		       ad 84 02 	      LDA	INTIM
   1787  f905		       d0 fb		      BNE	WaitForVblankEnd
   1788  f907		       85 02		      STA	WSYNC
   1789  f909		       85 01		      STA	VBLANK
   1790  f90b		       60		      RTS
   1791  f90c
   1792  f90c				   Sleep4Lines
   1793  f90c		       85 02		      STA	WSYNC
   1794  f90e		       85 02		      STA	WSYNC
   1795  f910		       85 02		      STA	WSYNC
   1796  f912		       85 02		      STA	WSYNC
   1797  f914		       60		      RTS
   1798  f915
   1799  f915				   Sleep8Lines
   1800  f915		       20 0c f9 	      JSR	Sleep4Lines
   1801  f918		       20 0c f9 	      JSR	Sleep4Lines
   1802  f91b		       60		      RTS
   1803  f91c
   1804  f91c				   Sleep32Lines
   1805  f91c		       20 15 f9 	      JSR	Sleep8Lines
   1806  f91f		       20 15 f9 	      JSR	Sleep8Lines
   1807  f922		       20 15 f9 	      JSR	Sleep8Lines
   1808  f925		       20 15 f9 	      JSR	Sleep8Lines
   1809  f928		       60		      RTS
   1810  f929
   1811  f929				   ConfigureCarSprites
   1812  f929		       a5 8c		      LDA	FrameCount0
   1813  f92b		       29 01		      AND	#%00000001
   1814  f92d		       d0 0b		      BNE	LoadForRightScreenSprites
   1815  f92f				   LoadForLeftScreenSprites
   1816  f92f		       a5 c7		      LDA	CurrentCarId
   1817  f931		       85 b0		      STA	Tmp0
   1818  f933		       a5 c8		      LDA	OpCurrentCarId
   1819  f935		       85 b1		      STA	Tmp1
   1820  f937		       4c 42 f9 	      JMP	LoadCarSpritesFromIds
   1821  f93a				   LoadForRightScreenSprites
   1822  f93a		       a5 c7		      LDA	CurrentCarId
   1823  f93c		       85 b1		      STA	Tmp1
   1824  f93e		       a5 c8		      LDA	OpCurrentCarId
   1825  f940		       85 b0		      STA	Tmp0
   1826  f942
   1827  f942				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1828  f942		       a4 b0		      LDY	Tmp0
   1829  f944		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1830  f947		       85 d7		      STA	CarSpritePointerL
   1831  f949		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1832  f94c		       85 d8		      STA	CarSpritePointerH
   1833  f94e				   ConfigureOpponentCarSprite
   1834  f94e		       a4 b1		      LDY	Tmp1
   1835  f950		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1836  f953		       85 d9		      STA	EnemyCarSpritePointerL
   1837  f955		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1838  f958		       85 da		      STA	EnemyCarSpritePointerH
   1839  f95a		       60		      RTS
   1840  f95b
   1841  f95b							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1842  f95b							;X player 0 or 1
   1843  f95b				   SelectCarWithDpad
   1844  f95b		       a0 03		      LDY	#3
   1845  f95d				   SelectCarWithDpadLoop
   1846  f95d		       ad 80 02 	      LDA	SWCHA
   1847  f960		       25 b0		      AND	Tmp0
   1848  f962		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1849  f964		       98		      TYA
   1850  f965		       95 c7		      STA	CurrentCarId,X
   1851  f967				   ContinueSelectCarWithDpadLoop
   1852  f967		       46 b0		      LSR	Tmp0
   1853  f969		       88		      DEY
   1854  f96a		       10 f1		      BPL	SelectCarWithDpadLoop
   1855  f96c		       60		      RTS
   1856  f96d
   1857  f96d				   ProcessOpponentLine
   1858  f96d		       38		      SEC
   1859  f96e		       a5 91		      LDA	TrafficOffset0 + 1
   1860  f970		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1861  f972		       85 b0		      STA	Tmp0
   1862  f974		       a5 92		      LDA	TrafficOffset0 + 2
   1863  f976		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1864  f978		       85 b1		      STA	Tmp1
   1865  f97a		       18		      CLC
   1866  f97b		       a5 b0		      LDA	Tmp0
   1867  f97d		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1868  f97f		       85 b0		      STA	Tmp0
   1869  f981		       a5 b1		      LDA	Tmp1
   1870  f983		       69 00		      ADC	#0
   1871  f985		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1872  f987				   OpponentNotVisible
   1873  f987		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1874  f989		       85 cf		      STA	OpponentLine
   1875  f98b		       4c 92 f9 	      JMP	ReturnFromProcessOpponentLine
   1876  f98e				   OpponentVisible
   1877  f98e		       a5 b0		      LDA	Tmp0
   1878  f990		       85 cf		      STA	OpponentLine
   1879  f992				   ReturnFromProcessOpponentLine
   1880  f992		       60		      RTS
   1881  f993
   1882  f993							; Movement and colision are binded because the car must be moved after duplicate size.
   1883  f993							; Use X for the player
   1884  f993							; Tmp2 Traffic colision result
   1885  f993							; Tmp3 Opponent Colision result (Not implemented)
   1886  f993				   TestCollisionAndMove
   1887  f993							; Until store the movemnt, Y contains the value to be stored.
   1888  f993							; see if player0 colides with the rest
   1889  f993		       a5 b2		      LDA	Tmp2
   1890  f995		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1891  f997		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1892  f999		       d0 25		      BNE	NoCollision
   1893  f99b		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1894  f99d		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1895  f99f		       f0 1f		      BEQ	NoCollision
   1896  f9a1		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1897  f9a3		       f0 1b		      BEQ	NoCollision
   1898  f9a5		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1899  f9a7		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1900  f9a9		       b5 f2		      LDA	Player0SpeedH,X
   1901  f9ab		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1902  f9ad		       a9 10		      LDA	#COLLISION_SPEED_L
   1903  f9af		       d5 f0		      CMP	Player0SpeedL,X
   1904  f9b1		       b0 04		      BCS	SkipSetColisionSpeedL
   1905  f9b3				   SetColisionSpeedL
   1906  f9b3		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1907  f9b5		       95 f0		      STA	Player0SpeedL,X
   1908  f9b7				   SkipSetColisionSpeedL
   1909  f9b7		       a9 00		      LDA	#0
   1910  f9b9		       95 f2		      STA	Player0SpeedH,X
   1911  f9bb		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1912  f9bd		       4c 10 fa 	      JMP	StoreHMove	; We keep position consistent
   1913  f9c0				   NoCollision
   1914  f9c0
   1915  f9c0				   DecrementCollision
   1916  f9c0		       b5 8e		      LDA	CollisionCounter,X
   1917  f9c2		       f0 06		      BEQ	FinishDecrementCollision
   1918  f9c4		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1919  f9c6		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1920  f9c8		       d6 8e		      DEC	CollisionCounter,X
   1921  f9ca				   FinishDecrementCollision
   1922  f9ca
   1923  f9ca				   ResetPlayerSize
   1924  f9ca		       d0 04		      BNE	FinishResetPlayerSize
   1925  f9cc		       a9 30		      LDA	#%00110000
   1926  f9ce		       95 04		      STA	NUSIZ0,X	;
   1927  f9d0				   FinishResetPlayerSize
   1928  f9d0
   1929  f9d0				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1930  f9d0		       b5 8e		      LDA	CollisionCounter,X
   1931  f9d2		       c9 01		      CMP	#1	; Last frame before reset
   1932  f9d4		       d0 05		      BNE	SkipResetPlayerPosition
   1933  f9d6		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1934  f9d8		       4c 10 fa 	      JMP	StoreHMove
   1935  f9db				   SkipResetPlayerPosition
   1936  f9db
   1937  f9db				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1938  f9db		       b5 c7		      LDA	CurrentCarId,X
   1939  f9dd		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1940  f9df		       d0 08		      BNE	PrepareReadXAxis
   1941  f9e1		       a0 00		      LDY	#0
   1942  f9e3		       a5 8c		      LDA	FrameCount0
   1943  f9e5		       29 01		      AND	#DRAGSTER_TURN_MASK
   1944  f9e7		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1945  f9e9
   1946  f9e9				   PrepareReadXAxis
   1947  f9e9		       a0 00		      LDY	#0
   1948  f9eb		       b5 b6		      LDA	Player0X,X
   1949  f9ed				   BeginReadLeft
   1950  f9ed		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1951  f9ef		       bd d1 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1952  f9f2		       2c 80 02 	      BIT	SWCHA
   1953  f9f5		       d0 07		      BNE	SkipMoveLeft
   1954  f9f7		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1955  f9f9		       d6 b6		      DEC	Player0X,X
   1956  f9fb		       4c 10 fa 	      JMP	StoreHMove	; Cannot move left and right...
   1957  f9fe				   SkipMoveLeft
   1958  f9fe				   BeginReadRight
   1959  f9fe		       b5 b6		      LDA	Player0X,X
   1960  fa00		       c9 2c		      CMP	#PLAYER_MAX_X
   1961  fa02		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1962  fa04		       bd d3 fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1963  fa07		       2c 80 02 	      BIT	SWCHA
   1964  fa0a		       d0 04		      BNE	SkipMoveRight
   1965  fa0c		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1966  fa0e		       f6 b6		      INC	Player0X,X
   1967  fa10				   SkipMoveRight
   1968  fa10				   StoreHMove
   1969  fa10		       94 20		      STY	HMP0,X	;set the move for player 0
   1970  fa12
   1971  fa12				   ClearCollision
   1972  fa12		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1973  fa14		       60		      RTS
   1974  fa15
   1975  fa15							; X Traffic offset 4 bits each lane, 4 lanes per player
   1976  fa15							; Tmp3 Max X offset
   1977  fa15							; Tmp4 Max Player Speed L
   1978  fa15							; Tmp5 Max Player Speed H
   1979  fa15				   UpdateOffsets
   1980  fa15		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1981  fa17		       a5 c6		      LDA	GameMode
   1982  fa19		       29 04		      AND	#%00000100	; GameModes with high delta
   1983  fa1b		       f0 02		      BEQ	UpdateOffsetsLoop
   1984  fa1d		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1985  fa1f
   1986  fa1f				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1987  fa1f		       38		      SEC
   1988  fa20		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1989  fa22		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1990  fa25		       85 b0		      STA	Tmp0
   1991  fa27		       c8		      INY
   1992  fa28		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1993  fa2a		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1994  fa2d		       85 b1		      STA	Tmp1
   1995  fa2f		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1996  fa31		       e9 00		      SBC	#0
   1997  fa33		       85 b2		      STA	Tmp2
   1998  fa35
   1999  fa35				   AddsTheResult
   2000  fa35		       18		      CLC
   2001  fa36		       a5 b0		      LDA	Tmp0
   2002  fa38		       75 90		      ADC	TrafficOffset0,X
   2003  fa3a		       95 90		      STA	TrafficOffset0,X
   2004  fa3c		       e8		      INX
   2005  fa3d		       a5 b1		      LDA	Tmp1
   2006  fa3f		       75 90		      ADC	TrafficOffset0,X
   2007  fa41		       95 90		      STA	TrafficOffset0,X
   2008  fa43		       e8		      INX
   2009  fa44		       a5 b2		      LDA	Tmp2	; Carry
   2010  fa46		       75 90		      ADC	TrafficOffset0,X
   2011  fa48		       95 90		      STA	TrafficOffset0,X
   2012  fa4a		       90 0f		      BCC	CalculateOffsetCache
   2013  fa4c				   CalculatePlayer0Msb
   2014  fa4c		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   2015  fa4e		       d0 05		      BNE	CalculatePlayer1Msb
   2016  fa50		       e6 ba		      INC	Traffic0Msb
   2017  fa52		       4c 5b fa 	      JMP	CalculateOffsetCache
   2018  fa55				   CalculatePlayer1Msb
   2019  fa55		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   2020  fa57		       d0 02		      BNE	CalculateOffsetCache
   2021  fa59		       e6 bb		      INC	OpTraffic0Msb
   2022  fa5b
   2023  fa5b				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   2024  fa5b		       e8		      INX
   2025  fa5c		       38		      SEC
   2026  fa5d		       69 00		      ADC	#0	;Increment by one
   2027  fa5f		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   2028  fa61
   2029  fa61				   PrepareNextUpdateLoop
   2030  fa61		       c8		      INY
   2031  fa62		       e8		      INX
   2032  fa63		       e4 b3		      CPX	Tmp3	; Max X offset
   2033  fa65		       d0 b8		      BNE	UpdateOffsetsLoop
   2034  fa67		       60		      RTS
   2035  fa68
   2036  fa68							; X Player 0 or 1
   2037  fa68				   ProcessSpeed
   2038  fa68				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2039  fa68		       a9 00		      LDA	#0
   2040  fa6a		       85 b0		      STA	Tmp0	; Break speed
   2041  fa6c		       b5 b8		      LDA	CountdownTimer,X
   2042  fa6e		       d0 0d		      BNE	Break
   2043  fa70		       b4 c7		      LDY	CurrentCarId,X
   2044  fa72		       a5 8c		      LDA	FrameCount0
   2045  fa74		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2046  fa77		       d0 04		      BNE	Break
   2047  fa79		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2048  fa7b		       85 b0		      STA	Tmp0
   2049  fa7d
   2050  fa7d				   Break
   2051  fa7d		       bd cf fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2052  fa80		       2c 80 02 	      BIT	SWCHA
   2053  fa83		       d0 12		      BNE	BreakNonZero
   2054  fa85		       b5 0c		      LDA	INPT4,X	;3
   2055  fa87		       10 0a		      BPL	BreakWhileAccelerating
   2056  fa89		       b4 d5		      LDY	Gear,X
   2057  fa8b		       b9 e9 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2058  fa8e		       85 b0		      STA	Tmp0
   2059  fa90		       4c 97 fa 	      JMP	BreakNonZero
   2060  fa93				   BreakWhileAccelerating		; Allow better control while breaking.
   2061  fa93		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2062  fa95		       85 b0		      STA	Tmp0
   2063  fa97
   2064  fa97				   BreakNonZero
   2065  fa97		       a5 b0		      LDA	Tmp0
   2066  fa99		       f0 29		      BEQ	SkipBreak
   2067  fa9b
   2068  fa9b				   DecreaseSpeed
   2069  fa9b		       38		      SEC
   2070  fa9c		       b5 f0		      LDA	Player0SpeedL,X
   2071  fa9e		       e5 b0		      SBC	Tmp0
   2072  faa0		       95 f0		      STA	Player0SpeedL,X
   2073  faa2		       b5 f2		      LDA	Player0SpeedH,X
   2074  faa4		       e9 00		      SBC	#0
   2075  faa6		       95 f2		      STA	Player0SpeedH,X
   2076  faa8
   2077  faa8				   CheckMinSpeed
   2078  faa8		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2079  faaa		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2080  faac		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2081  faae		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2082  fab0
   2083  fab0				   CompareLBreakSpeed
   2084  fab0		       b5 f0		      LDA	Player0SpeedL,X
   2085  fab2		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2086  fab4		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2087  fab6		       4c c1 fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2088  fab9
   2089  fab9				   ResetMinSpeed
   2090  fab9		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2091  fabb		       95 f2		      STA	Player0SpeedH,X
   2092  fabd		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2093  fabf		       95 f0		      STA	Player0SpeedL,X
   2094  fac1
   2095  fac1				   SkipAccelerateIfBreaking
   2096  fac1		       4c 0a fb 	      JMP	SkipAccelerate
   2097  fac4				   SkipBreak
   2098  fac4
   2099  fac4				   Acelerates
   2100  fac4		       b5 b8		      LDA	CountdownTimer,X
   2101  fac6		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2102  fac8
   2103  fac8				   ContinueAccelerateTest
   2104  fac8		       b5 0c		      LDA	INPT4,X	;3
   2105  faca		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2106  facc		       bd cd fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2107  facf		       2c 80 02 	      BIT	SWCHA
   2108  fad2		       d0 36		      BNE	SkipAccelerate
   2109  fad4
   2110  fad4				   IncreaseCarSpeed
   2111  fad4		       a9 02		      LDA	#2
   2112  fad6		       85 b0		      STA	Tmp0	; Loop control
   2113  fad8		       b4 c7		      LDY	CurrentCarId,X
   2114  fada				   IncreaseCarSpeedLoop
   2115  fada							;Adds speed
   2116  fada		       18		      CLC
   2117  fadb		       b5 dc		      LDA	AccelerateBuffer,X
   2118  fadd		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
   2119  fae0		       95 dc		      STA	AccelerateBuffer,X
   2120  fae2		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2121  fae4		       f6 f0		      INC	Player0SpeedL,X
   2122  fae6		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2123  fae8		       f6 f2		      INC	Player0SpeedH,X
   2124  faea				   ContinueIncreaseSpeedLoop
   2125  faea		       c6 b0		      DEC	Tmp0
   2126  faec		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2127  faee				   SkipIncreaseCarSpeed
   2128  faee
   2129  faee				   CheckIfAlreadyMaxSpeed
   2130  faee		       b5 f2		      LDA	Player0SpeedH,X
   2131  faf0		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2132  faf2		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2133  faf4		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2134  faf6							;High bit is max, compare the low
   2135  faf6		       b4 c7		      LDY	CurrentCarId,X
   2136  faf8		       b5 f0		      LDA	Player0SpeedL,X
   2137  fafa		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
   2138  fafd		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2139  faff							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2140  faff
   2141  faff				   ResetToMaxSpeed		; Speed is more, or is already max
   2142  faff		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2143  fb01		       95 f2		      STA	Player0SpeedH,X
   2144  fb03		       b4 c7		      LDY	CurrentCarId,X
   2145  fb05		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
   2146  fb08		       95 f0		      STA	Player0SpeedL,X
   2147  fb0a				   SkipAccelerate
   2148  fb0a		       60		      RTS
   2149  fb0b
   2150  fb0b				   EverySecond		; 64 frames to be more precise
   2151  fb0b		       a9 3f		      LDA	#%00111111
   2152  fb0d		       25 8c		      AND	FrameCount0
   2153  fb0f		       d0 06		      BNE	SkipEverySecondAction
   2154  fb11		       d5 b8		      CMP	CountdownTimer,X
   2155  fb13		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2156  fb15		       d6 b8		      DEC	CountdownTimer,X
   2157  fb17				   SkipEverySecondAction
   2158  fb17		       60		      RTS
   2159  fb18
   2160  fb18				   CalculateGear
   2161  fb18		       b5 f0		      LDA	Player0SpeedL,X	;3
   2162  fb1a		       29 80		      AND	#%10000000	;2
   2163  fb1c		       15 f2		      ORA	Player0SpeedH,X	;3
   2164  fb1e		       18		      CLC		;2
   2165  fb1f		       2a		      ROL		;2
   2166  fb20		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2167  fb22		       95 d5		      STA	Gear,X
   2168  fb24		       60		      RTS
   2169  fb25
   2170  fb25				   ProcessScoreFontColor
   2171  fb25		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2172  fb27		       f0 06		      BEQ	ResetScoreFontColor
   2173  fb29		       88		      DEY
   2174  fb2a		       94 cb		      STY	ScoreFontColorHoldChange,X
   2175  fb2c		       4c 33 fb 	      JMP	SkipScoreFontColor
   2176  fb2f				   ResetScoreFontColor
   2177  fb2f		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2178  fb31		       95 c9		      STA	ScoreFontColor,X
   2179  fb33				   SkipScoreFontColor
   2180  fb33		       60		      RTS
   2181  fb34
   2182  fb34							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2183  fc00					      org	$FC00
   2184  fc00				   QrCode1
   2185  fc00		       1f		      .byte.b	#%00011111
   2186  fc01		       10		      .byte.b	#%00010000
   2187  fc02		       17		      .byte.b	#%00010111
   2188  fc03		       17		      .byte.b	#%00010111
   2189  fc04		       17		      .byte.b	#%00010111
   2190  fc05		       10		      .byte.b	#%00010000
   2191  fc06		       1f		      .byte.b	#%00011111
   2192  fc07		       00		      .byte.b	#%00000000
   2193  fc08		       17		      .byte.b	#%00010111
   2194  fc09		       10		      .byte.b	#%00010000
   2195  fc0a		       1d		      .byte.b	#%00011101
   2196  fc0b		       16		      .byte.b	#%00010110
   2197  fc0c		       03		      .byte.b	#%00000011
   2198  fc0d		       19		      .byte.b	#%00011001
   2199  fc0e		       13		      .byte.b	#%00010011
   2200  fc0f		       1c		      .byte.b	#%00011100
   2201  fc10		       0b		      .byte.b	#%00001011
   2202  fc11		       00		      .byte.b	#%00000000
   2203  fc12		       1f		      .byte.b	#%00011111
   2204  fc13		       10		      .byte.b	#%00010000
   2205  fc14		       17		      .byte.b	#%00010111
   2206  fc15		       17		      .byte.b	#%00010111
   2207  fc16		       17		      .byte.b	#%00010111
   2208  fc17		       10		      .byte.b	#%00010000
   2209  fc18		       1f		      .byte.b	#%00011111
   2210  fc19
   2211  fc19				   QrCode2
   2212  fc19		       c3		      .byte.b	#%11000011
   2213  fc1a		       9a		      .byte.b	#%10011010
   2214  fc1b		       82		      .byte.b	#%10000010
   2215  fc1c		       da		      .byte.b	#%11011010
   2216  fc1d		       aa		      .byte.b	#%10101010
   2217  fc1e		       ca		      .byte.b	#%11001010
   2218  fc1f		       f3		      .byte.b	#%11110011
   2219  fc20		       78		      .byte.b	#%01111000
   2220  fc21		       df		      .byte.b	#%11011111
   2221  fc22		       fc		      .byte.b	#%11111100
   2222  fc23		       c7		      .byte.b	#%11000111
   2223  fc24		       98		      .byte.b	#%10011000
   2224  fc25		       23		      .byte.b	#%00100011
   2225  fc26		       b9		      .byte.b	#%10111001
   2226  fc27		       d2		      .byte.b	#%11010010
   2227  fc28		       30		      .byte.b	#%00110000
   2228  fc29		       eb		      .byte.b	#%11101011
   2229  fc2a		       28		      .byte.b	#%00101000
   2230  fc2b		       ab		      .byte.b	#%10101011
   2231  fc2c		       72		      .byte.b	#%01110010
   2232  fc2d		       fa		      .byte.b	#%11111010
   2233  fc2e		       7a		      .byte.b	#%01111010
   2234  fc2f		       32		      .byte.b	#%00110010
   2235  fc30		       3a		      .byte.b	#%00111010
   2236  fc31		       63		      .byte.b	#%01100011
   2237  fc32
   2238  fc32				   QrCode3
   2239  fc32		       98		      .byte.b	#%10011000
   2240  fc33		       c3		      .byte.b	#%11000011
   2241  fc34		       39		      .byte.b	#%00111001
   2242  fc35		       34		      .byte.b	#%00110100
   2243  fc36		       ff		      .byte.b	#%11111111
   2244  fc37		       71		      .byte.b	#%01110001
   2245  fc38		       d5		      .byte.b	#%11010101
   2246  fc39		       d1		      .byte.b	#%11010001
   2247  fc3a		       5f		      .byte.b	#%01011111
   2248  fc3b		       26		      .byte.b	#%00100110
   2249  fc3c		       2d		      .byte.b	#%00101101
   2250  fc3d		       e9		      .byte.b	#%11101001
   2251  fc3e		       d6		      .byte.b	#%11010110
   2252  fc3f		       26		      .byte.b	#%00100110
   2253  fc40		       ba		      .byte.b	#%10111010
   2254  fc41		       03		      .byte.b	#%00000011
   2255  fc42		       dd		      .byte.b	#%11011101
   2256  fc43		       e0		      .byte.b	#%11100000
   2257  fc44		       57		      .byte.b	#%01010111
   2258  fc45		       14		      .byte.b	#%00010100
   2259  fc46		       35		      .byte.b	#%00110101
   2260  fc47		       e5		      .byte.b	#%11100101
   2261  fc48		       b5		      .byte.b	#%10110101
   2262  fc49		       d4		      .byte.b	#%11010100
   2263  fc4a		       97		      .byte.b	#%10010111
   2264  fc4b
   2265  fc4b				   QrCode4
   2266  fc4b		       09		      .byte.b	#%00001001
   2267  fc4c		       0e		      .byte.b	#%00001110
   2268  fc4d		       0f		      .byte.b	#%00001111
   2269  fc4e		       0c		      .byte.b	#%00001100
   2270  fc4f		       0c		      .byte.b	#%00001100
   2271  fc50		       08		      .byte.b	#%00001000
   2272  fc51		       08		      .byte.b	#%00001000
   2273  fc52		       06		      .byte.b	#%00000110
   2274  fc53		       06		      .byte.b	#%00000110
   2275  fc54		       0b		      .byte.b	#%00001011
   2276  fc55		       0f		      .byte.b	#%00001111
   2277  fc56		       04		      .byte.b	#%00000100
   2278  fc57		       08		      .byte.b	#%00001000
   2279  fc58		       0f		      .byte.b	#%00001111
   2280  fc59		       09		      .byte.b	#%00001001
   2281  fc5a		       07		      .byte.b	#%00000111
   2282  fc5b		       05		      .byte.b	#%00000101
   2283  fc5c		       00		      .byte.b	#%00000000
   2284  fc5d		       0f		      .byte.b	#%00001111
   2285  fc5e		       08		      .byte.b	#%00001000
   2286  fc5f		       0b		      .byte.b	#%00001011
   2287  fc60		       0b		      .byte.b	#%00001011
   2288  fc61		       0b		      .byte.b	#%00001011
   2289  fc62		       08		      .byte.b	#%00001000
   2290  fc63		       0f		      .byte.b	#%00001111
   2291  fc64
   2292  fc64							; Moved here because of rom space.
   2293  fc64							; The only SBR in constants space
   2294  fc64				   DrawQrCode
   2295  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2296  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2297  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2298  fc6a		       85 0a		      STA	CTRLPF
   2299  fc6c		       20 6c f6 	      JSR	ClearAll	; To be 100 sure!
   2300  fc6f		       ad 82 02 	      LDA	SWCHB
   2301  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2302  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2303  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2304  fc78		       86 09		      STX	COLUBK
   2305  fc7a		       84 08		      STY	COLUPF
   2306  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2307  fc7f				   StoreReversedQrCode
   2308  fc7f		       86 08		      STX	COLUPF
   2309  fc81		       84 09		      STY	COLUBK
   2310  fc83
   2311  fc83				   ContinueQrCode
   2312  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2313  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2314  fc87		       20 02 f9 	      JSR	WaitForVblankEnd
   2315  fc8a		       20 15 f9 	      JSR	Sleep8Lines
   2316  fc8d		       20 15 f9 	      JSR	Sleep8Lines
   2317  fc90		       20 15 f9 	      JSR	Sleep8Lines
   2318  fc93
   2319  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2320  fc93		       85 02		      STA	WSYNC
   2321  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2322  fc98		       85 0e		      STA	PF1	;3
   2323  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2324  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2326  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2327  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2328  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2329  fcb5		       85 0e		      STA	PF1	;3
   2330  fcb7
   2331  fcb7		       ca		      DEX		;2
   2332  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2333  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2334  fcbc		       88		      DEY		;2
   2335  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2336  fcbf
   2337  fcbf				   EndQrCodeLoop
   2338  fcbf		       85 02		      STA	WSYNC	;
   2339  fcc1		       a9 00		      LDA	#0
   2340  fcc3		       85 0e		      STA	PF1	;3
   2341  fcc5		       85 0f		      STA	PF2	;3
   2342  fcc7
   2343  fcc7		       20 1c f9 	      JSR	Sleep32Lines
   2344  fcca		       4c 1c f5 	      JMP	PrepareOverscan
   2345  fccd
   2346  fccd				   PlayerToUpMask
   2347  fccd		       10		      .byte.b	#%00010000	;
   2348  fcce		       01		      .byte.b	#%00000001	;
   2349  fccf
   2350  fccf				   PlayerToDownMask
   2351  fccf		       20		      .byte.b	#%00100000	;
   2352  fcd0		       02		      .byte.b	#%00000010	;
   2353  fcd1
   2354  fcd1
   2355  fcd1				   PlayerToLeftMask
   2356  fcd1		       40		      .byte.b	#%01000000	;
   2357  fcd2		       04		      .byte.b	#%00000100	;
   2358  fcd3
   2359  fcd3				   PlayerToRightMask
   2360  fcd3		       80		      .byte.b	#%10000000	;
   2361  fcd4		       08		      .byte.b	#%00001000	;
   2362  fcd5
   2363  fd00					      org	$FD00
   2364  fd00				   Font
   2365  fd00				   C0
   2366  fd00		       e7		      .byte.b	#%11100111	;
   2367  fd01		       a5		      .byte.b	#%10100101	; 
   2368  fd02		       a5		      .byte.b	#%10100101	; 
   2369  fd03		       a5		      .byte.b	#%10100101	; 
   2370  fd04		       e7		      .byte.b	#%11100111	;	
   2371  fd05				   C1
   2372  fd05		       e7		      .byte.b	#%11100111	;
   2373  fd06		       42		      .byte.b	#%01000010	; 
   2374  fd07		       42		      .byte.b	#%01000010	; 
   2375  fd08		       42		      .byte.b	#%01000010	; 
   2376  fd09		       66		      .byte.b	#%01100110	;
   2377  fd0a				   C2
   2378  fd0a		       e7		      .byte.b	#%11100111	;
   2379  fd0b		       24		      .byte.b	#%00100100	; 
   2380  fd0c		       e7		      .byte.b	#%11100111	; 
   2381  fd0d		       81		      .byte.b	#%10000001	; 
   2382  fd0e		       e7		      .byte.b	#%11100111	;
   2383  fd0f				   C3
   2384  fd0f		       e7		      .byte.b	#%11100111	;
   2385  fd10		       81		      .byte.b	#%10000001	; 
   2386  fd11		       e7		      .byte.b	#%11100111	; 
   2387  fd12		       81		      .byte.b	#%10000001	; 
   2388  fd13		       e7		      .byte.b	#%11100111	;
   2389  fd14				   C4
   2390  fd14		       81		      .byte.b	#%10000001	;
   2391  fd15		       81		      .byte.b	#%10000001	; 
   2392  fd16		       e7		      .byte.b	#%11100111	; 
   2393  fd17		       a5		      .byte.b	#%10100101	; 
   2394  fd18		       a5		      .byte.b	#%10100101	;
   2395  fd19				   C5
   2396  fd19		       e7		      .byte.b	#%11100111	;
   2397  fd1a		       81		      .byte.b	#%10000001	; 
   2398  fd1b		       e7		      .byte.b	#%11100111	; 
   2399  fd1c		       24		      .byte.b	#%00100100	; 
   2400  fd1d		       e7		      .byte.b	#%11100111	;
   2401  fd1e				   C6
   2402  fd1e		       e7		      .byte.b	#%11100111	;
   2403  fd1f		       a5		      .byte.b	#%10100101	; 
   2404  fd20		       e7		      .byte.b	#%11100111	; 
   2405  fd21		       24		      .byte.b	#%00100100	; 
   2406  fd22		       e7		      .byte.b	#%11100111	;
   2407  fd23				   C7
   2408  fd23		       81		      .byte.b	#%10000001	;
   2409  fd24		       81		      .byte.b	#%10000001	; 
   2410  fd25		       81		      .byte.b	#%10000001	; 
   2411  fd26		       81		      .byte.b	#%10000001	; 
   2412  fd27		       e7		      .byte.b	#%11100111	;
   2413  fd28				   C8
   2414  fd28		       e7		      .byte.b	#%11100111	;
   2415  fd29		       a5		      .byte.b	#%10100101	; 
   2416  fd2a		       e7		      .byte.b	#%11100111	; 
   2417  fd2b		       a5		      .byte.b	#%10100101	; 
   2418  fd2c		       e7		      .byte.b	#%11100111	;
   2419  fd2d				   C9
   2420  fd2d		       e7		      .byte.b	#%11100111	;
   2421  fd2e		       81		      .byte.b	#%10000001	; 
   2422  fd2f		       e7		      .byte.b	#%11100111	; 
   2423  fd30		       a5		      .byte.b	#%10100101	; 
   2424  fd31		       e7		      .byte.b	#%11100111	;
   2425  fd32				   CA
   2426  fd32		       a5		      .byte.b	#%10100101	;
   2427  fd33		       a5		      .byte.b	#%10100101	; 
   2428  fd34		       e7		      .byte.b	#%11100111	; 
   2429  fd35		       a5		      .byte.b	#%10100101	; 
   2430  fd36		       e7		      .byte.b	#%11100111	;
   2431  fd37				   CB
   2432  fd37		       66		      .byte.b	#%01100110	;
   2433  fd38		       a5		      .byte.b	#%10100101	; 
   2434  fd39		       66		      .byte.b	#%01100110	; 
   2435  fd3a		       a5		      .byte.b	#%10100101	;
   2436  fd3b		       66		      .byte.b	#%01100110	;
   2437  fd3c				   CC
   2438  fd3c		       e7		      .byte.b	#%11100111	;
   2439  fd3d		       24		      .byte.b	#%00100100	; 
   2440  fd3e		       24		      .byte.b	#%00100100	; 
   2441  fd3f		       24		      .byte.b	#%00100100	;
   2442  fd40		       e7		      .byte.b	#%11100111	;
   2443  fd41
   2444  fd41				   CD
   2445  fd41		       66		      .byte.b	#%01100110	;
   2446  fd42		       a5		      .byte.b	#%10100101	; 
   2447  fd43		       a5		      .byte.b	#%10100101	; 
   2448  fd44		       a5		      .byte.b	#%10100101	;
   2449  fd45		       66		      .byte.b	#%01100110	;
   2450  fd46
   2451  fd46				   CE
   2452  fd46		       e7		      .byte.b	#%11100111	;
   2453  fd47		       24		      .byte.b	#%00100100	; 
   2454  fd48		       e7		      .byte.b	#%11100111	; 
   2455  fd49		       24		      .byte.b	#%00100100	; 
   2456  fd4a		       e7		      .byte.b	#%11100111	;
   2457  fd4b
   2458  fd4b				   CF
   2459  fd4b		       24		      .byte.b	#%00100100	;
   2460  fd4c		       24		      .byte.b	#%00100100	; 
   2461  fd4d		       e7		      .byte.b	#%11100111	; 
   2462  fd4e		       24		      .byte.b	#%00100100	; 
   2463  fd4f		       e7		      .byte.b	#%11100111	;
   2464  fd50
   2465  fd50				   CG
   2466  fd50		       c3		      .byte.b	#%11000011	;
   2467  fd51		       a5		      .byte.b	#%10100101	; 
   2468  fd52		       a5		      .byte.b	#%10100101	; 
   2469  fd53		       24		      .byte.b	#%00100100	; 
   2470  fd54		       c3		      .byte.b	#%11000011	;	
   2471  fd55
   2472  fd55				   CH
   2473  fd55		       a5		      .byte.b	#%10100101	;
   2474  fd56		       a5		      .byte.b	#%10100101	; 
   2475  fd57		       e7		      .byte.b	#%11100111	; 
   2476  fd58		       a5		      .byte.b	#%10100101	; 
   2477  fd59		       a5		      .byte.b	#%10100101	;
   2478  fd5a
   2479  fd5a				   CK
   2480  fd5a		       a5		      .byte.b	#%10100101	;
   2481  fd5b		       a5		      .byte.b	#%10100101	; 
   2482  fd5c		       66		      .byte.b	#%01100110	; 
   2483  fd5d		       a5		      .byte.b	#%10100101	; 
   2484  fd5e		       a5		      .byte.b	#%10100101	;
   2485  fd5f
   2486  fd5f				   CL
   2487  fd5f		       e7		      .byte.b	#%11100111	;
   2488  fd60		       24		      .byte.b	#%00100100	; 
   2489  fd61		       24		      .byte.b	#%00100100	; 
   2490  fd62		       24		      .byte.b	#%00100100	; 
   2491  fd63		       24		      .byte.b	#%00100100	;
   2492  fd64
   2493  fd64				   CI
   2494  fd64		       42		      .byte.b	#%01000010	;
   2495  fd65		       42		      .byte.b	#%01000010	; 
   2496  fd66		       42		      .byte.b	#%01000010	; 
   2497  fd67		       42		      .byte.b	#%01000010	; 
   2498  fd68		       42		      .byte.b	#%01000010	;
   2499  fd69
   2500  fd69				   CM
   2501  fd69		       a5		      .byte.b	#%10100101	;
   2502  fd6a		       a5		      .byte.b	#%10100101	; 
   2503  fd6b		       a5		      .byte.b	#%10100101	; 
   2504  fd6c		       e7		      .byte.b	#%11100111	; 
   2505  fd6d		       a5		      .byte.b	#%10100101	;
   2506  fd6e
   2507  fd6e				   CN
   2508  fd6e		       a5		      .byte.b	#%10100101	;
   2509  fd6f		       a5		      .byte.b	#%10100101	; 
   2510  fd70		       a5		      .byte.b	#%10100101	; 
   2511  fd71		       a5		      .byte.b	#%10100101	; 
   2512  fd72		       66		      .byte.b	#%01100110	;	
   2513  fd73
   2514  fd73
   2515  fd73				   CO
   2516  fd73		       42		      .byte.b	#%01000010	;
   2517  fd74		       a5		      .byte.b	#%10100101	; 
   2518  fd75		       a5		      .byte.b	#%10100101	; 
   2519  fd76		       a5		      .byte.b	#%10100101	; 
   2520  fd77		       42		      .byte.b	#%01000010	;	
   2521  fd78
   2522  fd78				   CP
   2523  fd78		       24		      .byte.b	#%00100100	;
   2524  fd79		       24		      .byte.b	#%00100100	; 
   2525  fd7a		       e7		      .byte.b	#%11100111	; 
   2526  fd7b		       a5		      .byte.b	#%10100101	; 
   2527  fd7c		       e7		      .byte.b	#%11100111	;
   2528  fd7d
   2529  fd7d				   CR
   2530  fd7d		       a5		      .byte.b	#%10100101	;
   2531  fd7e		       a5		      .byte.b	#%10100101	; 
   2532  fd7f		       66		      .byte.b	#%01100110	; 
   2533  fd80		       a5		      .byte.b	#%10100101	; 
   2534  fd81		       66		      .byte.b	#%01100110	;
   2535  fd82
   2536  fd82				   CS
   2537  fd82		       66		      .byte.b	#%01100110	;
   2538  fd83		       81		      .byte.b	#%10000001	; 
   2539  fd84		       42		      .byte.b	#%01000010	; 
   2540  fd85		       24		      .byte.b	#%00100100	; 
   2541  fd86		       c3		      .byte.b	#%11000011	;
   2542  fd87
   2543  fd87				   CT
   2544  fd87		       42		      .byte.b	#%01000010	;
   2545  fd88		       42		      .byte.b	#%01000010	; 
   2546  fd89		       42		      .byte.b	#%01000010	; 
   2547  fd8a		       42		      .byte.b	#%01000010	; 
   2548  fd8b		       e7		      .byte.b	#%11100111	;
   2549  fd8c
   2550  fd8c				   CV
   2551  fd8c		       42		      .byte.b	#%01000010	;
   2552  fd8d		       a5		      .byte.b	#%10100101	; 
   2553  fd8e		       a5		      .byte.b	#%10100101	; 
   2554  fd8f		       a5		      .byte.b	#%10100101	; 
   2555  fd90		       a5		      .byte.b	#%10100101	;	
   2556  fd91
   2557  fd91				   CY
   2558  fd91		       42		      .byte.b	#%01000010	;
   2559  fd92		       42		      .byte.b	#%01000010	; 
   2560  fd93		       42		      .byte.b	#%01000010	; 
   2561  fd94		       a5		      .byte.b	#%10100101	; 
   2562  fd95		       a5		      .byte.b	#%10100101	;
   2563  fd96
   2564  fd96				   CW
   2565  fd96		       a5		      .byte.b	#%10100101	;
   2566  fd97		       e7		      .byte.b	#%11100111	; 
   2567  fd98		       a5		      .byte.b	#%10100101	; 
   2568  fd99		       a5		      .byte.b	#%10100101	; 
   2569  fd9a		       a5		      .byte.b	#%10100101	;
   2570  fd9b
   2571  fd9b				   CZ
   2572  fd9b		       e7		      .byte.b	#%11100111	;
   2573  fd9c		       24		      .byte.b	#%00100100	; 
   2574  fd9d		       42		      .byte.b	#%01000010	; 
   2575  fd9e		       81		      .byte.b	#%10000001	; 
   2576  fd9f		       e7		      .byte.b	#%11100111	;
   2577  fda0
   2578  fda0				   Pipe
   2579  fda0		       42		      .byte.b	#%01000010	;
   2580  fda1		       00		      .byte.b	#%00000000	; 
   2581  fda2		       42		      .byte.b	#%01000010	; 
   2582  fda3		       00		      .byte.b	#%00000000	; 
   2583  fda4		       42		      .byte.b	#%01000010	;
   2584  fda5
   2585  fda5				   Exclamation
   2586  fda5		       42		      .byte.b	#%01000010	;
   2587  fda6		       00		      .byte.b	#%00000000	; 
   2588  fda7		       42		      .byte.b	#%01000010	; 
   2589  fda8		       42		      .byte.b	#%01000010	; 
   2590  fda9		       42		      .byte.b	#%01000010	;
   2591  fdaa
   2592  fdaa				   Dot
   2593  fdaa		       42		      .byte.b	#%01000010	;
   2594  fdab		       42		      .byte.b	#%01000010	; 
   2595  fdac		       00		      .byte.b	#%00000000	; 
   2596  fdad		       00		      .byte.b	#%00000000	; 
   2597  fdae		       00		      .byte.b	#%00000000	;
   2598  fdaf
   2599  fdaf				   Colon
   2600  fdaf		       42		      .byte.b	#%01000010	;
   2601  fdb0		       42		      .byte.b	#%01000010	; 
   2602  fdb1		       00		      .byte.b	#%00000000	; 
   2603  fdb2		       42		      .byte.b	#%01000010	; 
   2604  fdb3		       42		      .byte.b	#%01000010	;
   2605  fdb4
   2606  fdb4				   Triangle
   2607  fdb4		       81		      .byte.b	#%10000001	;
   2608  fdb5		       c3		      .byte.b	#%11000011	; 
   2609  fdb6		       e7		      .byte.b	#%11100111	; 
   2610  fdb7		       c3		      .byte.b	#%11000011	; 
   2611  fdb8		       81		      .byte.b	#%10000001	;
   2612  fdb9
   2613  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2614  fdb9		       00		      .byte.b	#0	;
   2615  fdba		       00		      .byte.b	#0	;
   2616  fdbb		       00		      .byte.b	#0	;
   2617  fdbc		       00		      .byte.b	#0	;
   2618  fdbd		       00		      .byte.b	#0	;
   2619  fdbe
   2620  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2621  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2622  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2623  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2624  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2625  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2626  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2627  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2628  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2629  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2630  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2631  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2632  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2633  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2634  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2635  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2636  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2637  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2638  fdcf
   2639  fdcf				   EngineSoundType
   2640  fdcf		       02		      .byte.b	#2
   2641  fdd0		       02		      .byte.b	#2
   2642  fdd1		       0e		      .byte.b	#14
   2643  fdd2		       06		      .byte.b	#6
   2644  fdd3		       06		      .byte.b	#6
   2645  fdd4		       0e		      .byte.b	#14
   2646  fdd5
   2647  fdd5				   EngineBaseFrequence
   2648  fdd5		       1f		      .byte.b	#31
   2649  fdd6		       15		      .byte.b	#21
   2650  fdd7		       14		      .byte.b	#20
   2651  fdd8		       1f		      .byte.b	#31
   2652  fdd9		       16		      .byte.b	#22
   2653  fdda		       03		      .byte.b	#3
   2654  fddb
   2655  fddb				   TachometerSizeLookup1
   2656  fddb		       1f		      .byte.b	#%00011111
   2657  fddc		       3f		      .byte.b	#%00111111
   2658  fddd		       7f		      .byte.b	#%01111111
   2659  fdde		       ff		      .byte.b	#%11111111
   2660  fddf		       ff		      .byte.b	#%11111111
   2661  fde0		       ff		      .byte.b	#%11111111
   2662  fde1		       ff		      .byte.b	#%11111111
   2663  fde2		       ff		      .byte.b	#%11111111
   2664  fde3
   2665  fde3				   TachometerSizeLookup2
   2666  fde3		       00		      .byte.b	#%00000000
   2667  fde4		       00		      .byte.b	#%00000000
   2668  fde5		       00		      .byte.b	#%00000000
   2669  fde6		       00		      .byte.b	#%00000000
   2670  fde7		       80		      .byte.b	#%10000000
   2671  fde8		       c0		      .byte.b	#%11000000
   2672  fde9		       e0		      .byte.b	#%11100000
   2673  fdea		       f0		      .byte.b	#%11110000
   2674  fdeb
   2675  fdeb				   TachometerGearLookup
   2676  fdeb		       01		      .byte.b	#%00000001
   2677  fdec		       02		      .byte.b	#%00000010
   2678  fded		       04		      .byte.b	#%00000100
   2679  fdee		       08		      .byte.b	#%00001000
   2680  fdef		       10		      .byte.b	#%00010000
   2681  fdf0		       30		      .byte.b	#%00110000
   2682  fdf1
   2683  fe00					      org	$FE00
   2684  fe00				   AesTable
   2685  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2686  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2687  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2688  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2689  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2690  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2691  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2692  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2693  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2694  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2695  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2696  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2697  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2698  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2699  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2700  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2701  ff00
   2702  ff00							; From FF00 to FFFB (122 bytes) to use here
   2703  ff00
   2704  ff00				   StaticText		; All static text must be on the same MSB block. 
   2705  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2706  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2707  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2708  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2709  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2710  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2711  ff05
   2712  ff05				   HellwayLeftText
   2713  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2714  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2715  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2716  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2717  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2718  ff0a
   2719  ff0a				   HellwayRightText
   2720  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2721  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2722  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2723  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2724  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2725  ff0f
   2726  ff0f				   OpbText
   2727  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2728  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2729  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2730  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2731  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2732  ff14
   2733  ff14				   YearText
   2734  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2735  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2736  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2737  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2738  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2739  ff19
   2740  ff19				   GameText
   2741  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2742  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2743  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2744  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2745  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2746  ff1e
   2747  ff1e				   OverText
   2748  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2749  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2750  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2751  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2752  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2753  ff23				   GoText
   2754  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2755  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2756  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2757  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2758  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2759  ff28
   2760  ff28				   ZeldaTextLeft
   2761  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2762  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2763  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2764  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2765  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2766  ff2d
   2767  ff2d				   ZeldaTextRight
   2768  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2769  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2770  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2771  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2772  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2773  ff32
   2774  ff32				   ZeldaDateLeft
   2775  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2776  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2777  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2778  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2779  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2780  ff37
   2781  ff37				   ZeldaDateRight
   2782  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2783  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2784  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2785  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2786  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2787  ff3c
   2788  ff3c				   PolvinhosTextLeft
   2789  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2790  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2791  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2792  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2793  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2794  ff41
   2795  ff41				   PolvinhosTextRight
   2796  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2797  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2798  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2799  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2800  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2801  ff46
   2802  ff46				   PolvinhosDateLeft
   2803  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2804  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2805  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2806  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2807  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2808  ff4b
   2809  ff4b				   PolvinhosDateRight
   2810  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2811  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2812  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2813  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2814  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2815  ff50
   2816  ff50				   IvonneTextLeft
   2817  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2818  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2819  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2820  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2821  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2822  ff55
   2823  ff55				   IvonneTextRight
   2824  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2825  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2826  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2827  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2828  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2829  ff5a
   2830  ff5a				   IvonneDateLeft
   2831  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2832  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2833  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2834  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2835  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2836  ff5f
   2837  ff5f				   IvonneDateRight
   2838  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2839  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2840  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2841  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2842  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2843  ff64
   2844  ff64				   PaperArtTextLeft
   2845  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2846  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2847  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2848  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2849  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2850  ff69
   2851  ff69				   PaperArtTextRight
   2852  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2853  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2854  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2855  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2856  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2857  ff6e
   2858  ff6e				   LeonardoTextLeft
   2859  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2860  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2861  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2862  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2863  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2864  ff73
   2865  ff73				   LeonardoTextRight
   2866  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2867  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2868  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2869  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2870  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2871  ff78
   2872  ff78				   VersionText
   2873  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2874  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2875  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2876  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2877  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2878  ff7d
   2879  ff7d
   2880  ff7d				   EndStaticText
   2881  ff7d
   2882  ff7d				   CarSprite0		; Upside down, Original Car
   2883  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2884  ff85				   CarSprite0NoPadding
   2885  ff85		       7e		      .byte.b	#%01111110
   2886  ff86		       24		      .byte.b	#%00100100
   2887  ff87		       bd		      .byte.b	#%10111101
   2888  ff88		       3c		      .byte.b	#%00111100
   2889  ff89		       bd		      .byte.b	#%10111101
   2890  ff8a		       3c		      .byte.b	#%00111100
   2891  ff8b
   2892  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2893  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2894  ff93				   CarSprite1NoPadding
   2895  ff93		       bd		      .byte.b	#%10111101
   2896  ff94		       7e		      .byte.b	#%01111110
   2897  ff95		       5a		      .byte.b	#%01011010
   2898  ff96		       66		      .byte.b	#%01100110
   2899  ff97		       bd		      .byte.b	#%10111101
   2900  ff98		       3c		      .byte.b	#%00111100
   2901  ff99
   2902  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2903  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2904  ffa1				   CarSprite2NoPadding
   2905  ffa1		       7e		      .byte.b	#%01111110
   2906  ffa2		       a5		      .byte.b	#%10100101
   2907  ffa3		       42		      .byte.b	#%01000010
   2908  ffa4		       42		      .byte.b	#%01000010
   2909  ffa5		       bd		      .byte.b	#%10111101
   2910  ffa6		       7e		      .byte.b	#%01111110
   2911  ffa7
   2912  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2913  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2914  ffaf				   CarSprite3NoPadding
   2915  ffaf		       3c		      .byte.b	#%00111100
   2916  ffb0		       db		      .byte.b	#%11011011
   2917  ffb1		       db		      .byte.b	#%11011011
   2918  ffb2		       3c		      .byte.b	#%00111100
   2919  ffb3		       5a		      .byte.b	#%01011010
   2920  ffb4		       3c		      .byte.b	#%00111100
   2921  ffb5
   2922  ffb5				   TrafficSpeeds
   2923  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2924  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2925  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2926  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2927  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2928  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2929  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2930  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2931  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2932  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2933  ffbf				   TrafficSpeedsHighDelta
   2934  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2935  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2936  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2937  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2938  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2939  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2940  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2941  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2942  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2943  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2944  ffc9
   2945  ffc9				   CarIdToSpriteAddressL
   2946  ffc9		       7d		      .byte.b	#<CarSprite0
   2947  ffca		       8b		      .byte.b	#<CarSprite1
   2948  ffcb		       99		      .byte.b	#<CarSprite2
   2949  ffcc		       a7		      .byte.b	#<CarSprite3
   2950  ffcd
   2951  ffcd				   CarIdToSpriteAddressH
   2952  ffcd		       ff		      .byte.b	#>CarSprite0
   2953  ffce		       ff		      .byte.b	#>CarSprite1
   2954  ffcf		       ff		      .byte.b	#>CarSprite2
   2955  ffd0		       ff		      .byte.b	#>CarSprite3
   2956  ffd1
   2957  ffd1				   EnemyCarIdToSpriteAddressL
   2958  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2959  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2960  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2961  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2962  ffd5
   2963  ffd5				   EnemyCarIdToSpriteAddressH
   2964  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2965  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2966  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2967  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2968  ffd9
   2969  ffd9				   CarIdToAccelerateSpeed
   2970  ffd9		       80		      .byte.b	#128
   2971  ffda		       c0		      .byte.b	#192
   2972  ffdb		       60		      .byte.b	#96
   2973  ffdc		       c0		      .byte.b	#192
   2974  ffdd
   2975  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2976  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2977  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2978  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2979  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2980  ffe1
   2981  ffe1				   CarIdToMaxSpeedL
   2982  ffe1		       80		      .byte.b	#$80
   2983  ffe2		       00		      .byte.b	#$00	; One less gear
   2984  ffe3		       80		      .byte.b	#$80
   2985  ffe4		       80		      .byte.b	#$80
   2986  ffe5
   2987  ffe5				   CarIdToMaxGear
   2988  ffe5		       05		      .byte.b	#5
   2989  ffe6		       04		      .byte.b	#4	; One less gear
   2990  ffe7		       05		      .byte.b	#5
   2991  ffe8		       05		      .byte.b	#5
   2992  ffe9
   2993  ffe9				   GearToBreakSpeedTable
   2994  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2995  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2996  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2997  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2998  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2999  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3000  ffef
   3001  ffef				   TrafficColorTable
   3002  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3003  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3004  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3005  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3006  fff3
   3007  fff3				   TrafficChanceTable
   3008  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3009  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3010  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3011  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3012  fff7
   3013  fff7				   TrafficTimeTable
   3014  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3015  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3016  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3017  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3018  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3019  fffc
   3020  fffc
   3021  fffc					      org	$FFFC
   3022  fffc		       00 f0		      .word.w	BeforeStart
   3023  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
