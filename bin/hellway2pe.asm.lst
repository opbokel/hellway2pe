------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 27	   PLAYER_1_X_START =	39	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000							; 8E and 8F are free!!!!
    115  f000
    116  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    117  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    118  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    119  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    120  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    121  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    122  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    123  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    124  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    125  f000
    126  f000							;Temporary variables, multiple uses
    127  f000		       00 b0	   Tmp0       =	$B0
    128  f000		       00 b1	   Tmp1       =	$B1
    129  f000		       00 b2	   Tmp2       =	$B2
    130  f000		       00 b3	   Tmp3       =	$B3
    131  f000
    132  f000		       00 b4	   CollisionCounter =	$B4
    133  f000		       00 b5	   OpCollisionCounter =	$B5
    134  f000		       00 b6	   Player0X   =	$B6
    135  f000		       00 b7	   Player1X   =	$B7
    136  f000		       00 b8	   CountdownTimer =	$B8
    137  f000		       00 b9	   OpCountdownTimer =	$B9
    138  f000		       00 ba	   Traffic0Msb =	$BA
    139  f000		       00 bb	   OpTraffic0Msb =	$BB
    140  f000		       00 bc	   SwitchDebounceCounter =	$BC
    141  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    142  f000		       00 be	   TrafficChance =	$BE
    143  f000		       00 bf	   OpTrafficChance =	$BF
    144  f000
    145  f000		       00 c0	   CheckpointTime =	$C0
    146  f000		       00 c1	   OpCheckpointTime =	$C1
    147  f000		       00 c2	   TrafficColor =	$C2
    148  f000		       00 c3	   OpTrafficColor =	$C3
    149  f000		       00 c4	   CurrentDifficulty =	$C4
    150  f000		       00 c5	   OpCurrentDifficulty =	$C5
    151  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    152  f000							;Bit 2 speed delta, Bit 3 random traffic 
    153  f000
    154  f000		       00 c7	   CurrentCarId =	$C7
    155  f000		       00 c8	   OpCurrentCarId =	$C8
    156  f000
    157  f000		       00 c9	   ScoreFontColor =	$C9
    158  f000		       00 ca	   OpScoreFontColor =	$CA
    159  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    160  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    161  f000		       00 cd	   NextCheckpoint =	$CD
    162  f000		       00 ce	   OpNextCheckpoint =	$CE
    163  f000		       00 cf	   OpponentLine =	$CF
    164  f000
    165  f000		       00 d0	   ScoreD0    =	$D0
    166  f000		       00 d1	   ScoreD1    =	$D1
    167  f000		       00 d2	   ScoreD2    =	$D2
    168  f000		       00 d3	   ScoreD3    =	$D3
    169  f000		       00 d4	   ScoreD4    =	$D4
    170  f000
    171  f000		       00 d5	   Gear       =	$D5
    172  f000		       00 d6	   OpGear     =	$D6
    173  f000
    174  f000		       00 d7	   CarSpritePointerL =	$D7
    175  f000		       00 d8	   CarSpritePointerH =	$D8
    176  f000
    177  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    178  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    179  f000
    180  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    181  f000
    182  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    183  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    184  f000
    185  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    186  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    187  f000
    188  f000		       00 f0	   Player0SpeedL =	$F0
    189  f000		       00 f1	   Player1SpeedL =	$F1
    190  f000		       00 f2	   Player0SpeedH =	$F2
    191  f000		       00 f3	   Player1SpeedH =	$F3
    192  f000
    193  f000							;generic start up stuff, put zero in almost all...
    194  f000				   BeforeStart		;All variables that are kept on game reset or select
    195  f000		       a0 00		      LDY	#0
    196  f002		       84 bc		      STY	SwitchDebounceCounter
    197  f004		       84 c4		      STY	CurrentDifficulty
    198  f006		       84 bd		      STY	GameStatus
    199  f008		       84 c7		      STY	CurrentCarId
    200  f00a		       84 c8		      STY	OpCurrentCarId
    201  f00c		       a0 10		      LDY	#16
    202  f00e		       84 c6		      STY	GameMode
    203  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    204  f012
    205  f012				   Start
    206  f012		       a9 02		      LDA	#2
    207  f014		       85 00		      STA	VSYNC
    208  f016		       85 02		      STA	WSYNC
    209  f018		       85 02		      STA	WSYNC
    210  f01a		       85 02		      STA	WSYNC
    211  f01c		       a9 00		      LDA	#0	;2
    212  f01e		       85 00		      STA	VSYNC	;3
    213  f020
    214  f020		       78		      SEI
    215  f021		       d8		      CLD
    216  f022		       a2 ff		      LDX	#$FF
    217  f024		       9a		      TXS
    218  f025
    219  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    220  f027				   CleanMem
    221  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    222  f029		       f0 16		      BEQ	SkipClean
    223  f02b		       e0 c6		      CPX	#GameMode
    224  f02d		       f0 12		      BEQ	SkipClean
    225  f02f		       e0 c7		      CPX	#CurrentCarId
    226  f031		       f0 0e		      BEQ	SkipClean
    227  f033		       e0 c8		      CPX	#OpCurrentCarId
    228  f035		       f0 0a		      BEQ	SkipClean
    229  f037		       e0 c4		      CPX	#CurrentDifficulty
    230  f039		       f0 06		      BEQ	SkipClean
    231  f03b		       e0 bd		      CPX	#GameStatus
    232  f03d		       f0 02		      BEQ	SkipClean
    233  f03f		       95 00		      STA	0,X
    234  f041				   SkipClean
    235  f041		       e8		      INX
    236  f042		       d0 e3		      BNE	CleanMem
    237  f044
    238  f044		       a9 d5		      LDA	#213
    239  f046		       8d 96 02 	      STA	TIM64T	;3	
    240  f049
    241  f049							;Setting some variables...
    242  f049
    243  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    244  f049		       85 02		      STA	WSYNC	;We will set player position
    245  f04b		       20 85 f7 	      JSR	DefaultOffsets
    246  f04e
    247  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    248  f051		       85 f0		      STA	Player0SpeedL
    249  f053
    250  f053							;SLEEP 11;18
    251  f053		       a2 00		      LDX	#0
    252  f055		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    253  f058		       85 db		      STA	StartSWCHB	; For game over
    254  f05a		       29 c0		      AND	#%11000000
    255  f05c		       f0 0b		      BEQ	CallConfigureDifficulty
    256  f05e		       e8		      INX
    257  f05f		       c9 80		      CMP	#%10000000
    258  f061		       f0 06		      BEQ	CallConfigureDifficulty
    259  f063		       e8		      INX
    260  f064		       c9 40		      CMP	#%01000000
    261  f066		       f0 01		      BEQ	CallConfigureDifficulty
    262  f068		       e8		      INX
    263  f069
    264  f069				   CallConfigureDifficulty
    265  f069		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    266  f06b		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    267  f06d		       a5 bd		      LDA	GameStatus
    268  f06f		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    269  f071				   StoreCurrentDifficulty
    270  f071		       86 c4		      STX	CurrentDifficulty
    271  f073		       20 5a f7 	      JSR	ConfigureDifficulty
    272  f076
    273  f076				   SetGameNotRunning
    274  f076		       a9 00		      LDA	#0
    275  f078		       85 bd		      STA	GameStatus
    276  f07a
    277  f07a				   ConfigureTimer
    278  f07a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    279  f07c		       85 b8		      STA	CountdownTimer	;3
    280  f07e
    281  f07e				   ConfigurePlayer1XPosition
    282  f07e		       a9 27		      LDA	#PLAYER_1_X_START	;2
    283  f080		       85 b7		      STA	Player1X	;3
    284  f082
    285  f082				   HPositioning 		; Avoid sleep doing needed stuff
    286  f082		       85 02		      STA	WSYNC
    287  f084
    288  f084				   ConfigurePlayer0XPosition
    289  f084		       a9 21		      LDA	#PLAYER_0_X_START	;2
    290  f086		       85 b6		      STA	Player0X	;3
    291  f088
    292  f088				   ConfigureMissileSize
    293  f088		       a9 30		      LDA	#%00110000	;2 Missile Size
    294  f08a		       85 04		      STA	NUSIZ0	;3
    295  f08c		       85 05		      STA	NUSIZ1	;3
    296  f08e
    297  f08e				   ConfigureNextCheckpoint
    298  f08e		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    299  f090		       85 cd		      STA	NextCheckpoint
    300  f092
    301  f092		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f094					      SLEEP	4	;
      1  f094				   .CYCLES    SET	4
      2  f094
      3  f094				  -	      IF	.CYCLES < 2
      4  f094				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f094				  -	      ERR
      6  f094					      ENDIF
      7  f094
      8  f094				  -	      IF	.CYCLES & 1
      9  f094				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f094				  -	      nop	0
     11  f094				  -	      ELSE
     12  f094				  -	      bit	VSYNC
     13  f094				  -	      ENDIF
     14  f094				  -.CYCLES    SET	.CYCLES - 3
     15  f094					      ENDIF
     16  f094
     17  f094					      REPEAT	.CYCLES / 2
     18  f094		       ea		      nop
     17  f094					      REPEND
     18  f095		       ea		      nop
     19  f096					      REPEND
    303  f096		       85 12		      STA	RESM0
      0  f098					      SLEEP	2	;
      1  f098				   .CYCLES    SET	2
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     19  f099					      REPEND
    305  f099		       85 14		      STA	RESBL
      0  f09b					      SLEEP	2
      1  f09b				   .CYCLES    SET	2
      2  f09b
      3  f09b				  -	      IF	.CYCLES < 2
      4  f09b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09b				  -	      ERR
      6  f09b					      ENDIF
      7  f09b
      8  f09b				  -	      IF	.CYCLES & 1
      9  f09b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09b				  -	      nop	0
     11  f09b				  -	      ELSE
     12  f09b				  -	      bit	VSYNC
     13  f09b				  -	      ENDIF
     14  f09b				  -.CYCLES    SET	.CYCLES - 3
     15  f09b					      ENDIF
     16  f09b
     17  f09b					      REPEAT	.CYCLES / 2
     18  f09b		       ea		      nop
     19  f09c					      REPEND
    307  f09c		       85 13		      STA	RESM1
      0  f09e					      SLEEP	3
      1  f09e				   .CYCLES    SET	3
      2  f09e
      3  f09e				  -	      IF	.CYCLES < 2
      4  f09e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09e				  -	      ERR
      6  f09e					      ENDIF
      7  f09e
      8  f09e					      IF	.CYCLES & 1
      9  f09e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09e				  -	      nop	0
     11  f09e					      ELSE
     12  f09e		       24 00		      bit	VSYNC
     13  f0a0					      ENDIF
     14  f0a0				   .CYCLES    SET	.CYCLES - 3
     15  f0a0					      ENDIF
     16  f0a0
     17  f0a0				  -	      REPEAT	.CYCLES / 2
     18  f0a0				  -	      nop
     19  f0a0					      REPEND
    309  f0a0
    310  f0a0		       a9 e0		      LDA	#$E0
    311  f0a2		       85 24		      STA	HMBL
    312  f0a4		       85 22		      STA	HMM0
    313  f0a6		       85 23		      STA	HMM1
    314  f0a8		       85 02		      STA	WSYNC
    315  f0aa		       85 2a		      STA	HMOVE
    316  f0ac		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    317  f0ae		       85 2b		      STA	HMCLR
      0  f0b0					      SLEEP	30
      1  f0b0				   .CYCLES    SET	30
      2  f0b0
      3  f0b0				  -	      IF	.CYCLES < 2
      4  f0b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b0				  -	      ERR
      6  f0b0					      ENDIF
      7  f0b0
      8  f0b0				  -	      IF	.CYCLES & 1
      9  f0b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b0				  -	      nop	0
     11  f0b0				  -	      ELSE
     12  f0b0				  -	      bit	VSYNC
     13  f0b0				  -	      ENDIF
     14  f0b0				  -.CYCLES    SET	.CYCLES - 3
     15  f0b0					      ENDIF
     16  f0b0
     17  f0b0					      REPEAT	.CYCLES / 2
     18  f0b0		       ea		      nop
     17  f0b0					      REPEND
     18  f0b1		       ea		      nop
     17  f0b1					      REPEND
     18  f0b2		       ea		      nop
     17  f0b2					      REPEND
     18  f0b3		       ea		      nop
     17  f0b3					      REPEND
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     19  f0bf					      REPEND
    319  f0bf		       85 10		      STA	RESP0
      0  f0c1					      SLEEP	5	; Temporarily move player 1 away.
      1  f0c1				   .CYCLES    SET	5
      2  f0c1
      3  f0c1				  -	      IF	.CYCLES < 2
      4  f0c1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c1				  -	      ERR
      6  f0c1					      ENDIF
      7  f0c1
      8  f0c1					      IF	.CYCLES & 1
      9  f0c1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c1				  -	      nop	0
     11  f0c1					      ELSE
     12  f0c1		       24 00		      bit	VSYNC
     13  f0c3					      ENDIF
     14  f0c3				   .CYCLES    SET	.CYCLES - 3
     15  f0c3					      ENDIF
     16  f0c3
     17  f0c3					      REPEAT	.CYCLES / 2
     18  f0c3		       ea		      nop
     19  f0c4					      REPEND
    321  f0c4		       85 11		      STA	RESP1
    322  f0c6
    323  f0c6				   WaitResetToEnd
    324  f0c6		       ad 84 02 	      LDA	INTIM
    325  f0c9		       d0 fb		      BNE	WaitResetToEnd
    326  f0cb
    327  f0cb				   MainLoop
    328  f0cb		       a9 02		      LDA	#2
    329  f0cd		       85 00		      STA	VSYNC
    330  f0cf		       85 02		      STA	WSYNC
    331  f0d1		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    332  f0d3				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    333  f0d3		       a9 01		      LDA	#%00000001	;3
    334  f0d5		       24 df		      BIT	TextFlickerMode	;2
    335  f0d7		       f0 05		      BEQ	TextSideFrameZero	;2
    336  f0d9		       25 8d		      AND	FrameCount1	;2
    337  f0db		       4c e0 f0 	      JMP	StoreTextSize	;3
    338  f0de				   TextSideFrameZero
    339  f0de		       25 8c		      AND	FrameCount0	;2
    340  f0e0				   StoreTextSize
    341  f0e0		       85 de		      STA	TextSide	;3
    342  f0e2
    343  f0e2				   PrepareMaxHMove
      0  f0e2					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e2				   .CYCLES    SET	18
      2  f0e2
      3  f0e2				  -	      IF	.CYCLES < 2
      4  f0e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e2				  -	      ERR
      6  f0e2					      ENDIF
      7  f0e2
      8  f0e2				  -	      IF	.CYCLES & 1
      9  f0e2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e2				  -	      nop	0
     11  f0e2				  -	      ELSE
     12  f0e2				  -	      bit	VSYNC
     13  f0e2				  -	      ENDIF
     14  f0e2				  -.CYCLES    SET	.CYCLES - 3
     15  f0e2					      ENDIF
     16  f0e2
     17  f0e2					      REPEAT	.CYCLES / 2
     18  f0e2		       ea		      nop
     17  f0e2					      REPEND
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    345  f0eb		       a9 80		      LDA	#$80
    346  f0ed		       85 24		      STA	HMBL
    347  f0ef		       85 22		      STA	HMM0
    348  f0f1		       85 23		      STA	HMM1
    349  f0f3		       85 20		      STA	HMP0
    350  f0f5		       85 21		      STA	HMP1
    351  f0f7		       85 02		      STA	WSYNC
    352  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    353  f0fb
    354  f0fb				   ConfigVBlankTimer
    355  f0fb		       a5 c6		      LDA	GameMode
    356  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    357  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    358  f101		       a9 29		      LDA	#VBLANK_TIMER
    359  f103		       4c 08 f1 	      JMP	SetVblankTimer
    360  f106				   SetVblankTimerQrCode
    361  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    362  f108
    363  f108				   SetVblankTimer
    364  f108		       85 02		      STA	WSYNC	;3
    365  f10a		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    366  f10c		       8d 96 02 	      STA	TIM64T	;3	
    367  f10f		       a9 00		      LDA	#0	;2
    368  f111		       85 00		      STA	VSYNC	;3	
    369  f113
    370  f113				   RandomizeGame
    371  f113		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    372  f115		       d0 2d		      BNE	EndRandomizeGame
    373  f117		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    374  f119		       29 02		      AND	#%00000010
    375  f11b		       f0 24		      BEQ	DeterministicGame
    376  f11d		       a6 96		      LDX	TrafficOffset1 + 2
    377  f11f		       bd 00 fe 	      LDA	AesTable,X
    378  f122		       45 8c		      EOR	FrameCount0
    379  f124		       85 96		      STA	TrafficOffset1 + 2
    380  f126		       85 a6		      STA	OpTrafficOffset1 + 2
    381  f128		       a6 9a		      LDX	TrafficOffset2 + 2
    382  f12a		       bd 00 fe 	      LDA	AesTable,X
    383  f12d		       45 8c		      EOR	FrameCount0
    384  f12f		       85 9a		      STA	TrafficOffset2 + 2
    385  f131		       85 aa		      STA	OpTrafficOffset2 + 2
    386  f133		       a6 9e		      LDX	TrafficOffset3 + 2
    387  f135		       bd 00 fe 	      LDA	AesTable,X
    388  f138		       45 8c		      EOR	FrameCount0
    389  f13a		       85 9e		      STA	TrafficOffset3 + 2
    390  f13c		       85 ae		      STA	OpTrafficOffset3 + 2
    391  f13e		       4c 44 f1 	      JMP	EndRandomizeGame
    392  f141
    393  f141				   DeterministicGame
    394  f141		       20 85 f7 	      JSR	DefaultOffsets
    395  f144
    396  f144				   EndRandomizeGame
    397  f144
    398  f144
    399  f144							; Move this in the code and save cycles, for some reason spliting is breaking...
    400  f144		       a2 08		      LDX	#8
    401  f146				   BurnAllHMove
    402  f146		       85 02		      STA	WSYNC	;3
    403  f148		       85 2a		      STA	HMOVE	; 3/10 
    404  f14a		       ca		      DEX
    405  f14b		       d0 f9		      BNE	BurnAllHMove
    406  f14d		       85 02		      STA	WSYNC	;3
    407  f14f		       85 2b		      STA	HMCLR	; 
    408  f151
    409  f151				   CountFrame
    410  f151		       e6 8c		      INC	FrameCount0	; 5
    411  f153		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    412  f155		       e6 8d		      INC	FrameCount1	; 5 
    413  f157				   SkipIncFC1
    414  f157
    415  f157				   CallDrawQrCode
    416  f157		       a5 c6		      LDA	GameMode
    417  f159		       c9 10		      CMP	#MAX_GAME_MODE
    418  f15b		       d0 03		      BNE	TestIsGameRunning
    419  f15d		       4c 64 fc 	      JMP	DrawQrCode
    420  f160
    421  f160							;Does not update the game if not running
    422  f160				   TestIsGameRunning
    423  f160		       a5 bd		      LDA	GameStatus	;3
    424  f162		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    425  f164				   SelectCarWithDpadCall		; Only do it when game is stoped
    426  f164		       a2 00		      LDX	#0	; Player 0
    427  f166		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    428  f168		       85 b0		      STA	Tmp0
    429  f16a		       20 f4 f9 	      JSR	SelectCarWithDpad
    430  f16d		       e8		      INX		; Player 1
    431  f16e		       20 f4 f9 	      JSR	SelectCarWithDpad
    432  f171
    433  f171				   CallConfigureCarSprites
    434  f171		       20 c2 f9 	      JSR	ConfigureCarSprites
    435  f174				   SkipUpdateLogicJump
    436  f174		       4c 8b f2 	      JMP	SkipUpdateLogic
    437  f177				   ContinueWithGameLogic
    438  f177
    439  f177				   EverySecond		; 64 frames to be more precise
    440  f177		       a9 3f		      LDA	#%00111111
    441  f179		       25 8c		      AND	FrameCount0
    442  f17b		       d0 06		      BNE	SkipEverySecondAction
    443  f17d		       c5 b8		      CMP	CountdownTimer
    444  f17f		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    445  f181		       c6 b8		      DEC	CountdownTimer
    446  f183				   SkipEverySecondAction
    447  f183
    448  f183				   ChangeTextFlickerMode
    449  f183		       a5 bc		      LDA	SwitchDebounceCounter
    450  f185		       d0 0d		      BNE	EndChangeTextFlickerMode
    451  f187		       ad 82 02 	      LDA	SWCHB
    452  f18a		       29 02		      AND	#%00000010	;Game select
    453  f18c		       d0 06		      BNE	EndChangeTextFlickerMode
    454  f18e		       e6 df		      INC	TextFlickerMode
    455  f190		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    456  f192		       85 bc		      STA	SwitchDebounceCounter
    457  f194				   EndChangeTextFlickerMode
    458  f194
    459  f194				   BreakOnTimeOver		; Uses LDX as the breaking speed
    460  f194		       a2 00		      LDX	#0
    461  f196		       a5 b8		      LDA	CountdownTimer
    462  f198		       d0 0b		      BNE	Break
    463  f19a		       a4 c7		      LDY	CurrentCarId
    464  f19c		       a5 8c		      LDA	FrameCount0
    465  f19e		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    466  f1a1		       d0 02		      BNE	Break
    467  f1a3		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    468  f1a5
    469  f1a5				   Break
    470  f1a5		       a9 20		      LDA	#%00100000	;Down in controller
    471  f1a7		       2c 80 02 	      BIT	SWCHA
    472  f1aa		       d0 0e		      BNE	BreakNonZero
    473  f1ac		       a5 0c		      LDA	INPT4	;3
    474  f1ae		       10 08		      BPL	BreakWhileAccelerating
    475  f1b0		       a4 d5		      LDY	Gear
    476  f1b2		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    477  f1b5		       4c ba f1 	      JMP	BreakNonZero
    478  f1b8				   BreakWhileAccelerating		; Allow better control while breaking.
    479  f1b8		       a2 05		      LDX	(#BREAK_SPEED / 2)
    480  f1ba
    481  f1ba				   BreakNonZero
    482  f1ba		       e0 00		      CPX	#0
    483  f1bc		       f0 2b		      BEQ	SkipBreak
    484  f1be		       86 b0		      STX	Tmp0
    485  f1c0
    486  f1c0				   DecreaseSpeed
    487  f1c0		       38		      SEC
    488  f1c1		       a5 f0		      LDA	Player0SpeedL
    489  f1c3		       e5 b0		      SBC	Tmp0
    490  f1c5		       85 f0		      STA	Player0SpeedL
    491  f1c7		       a5 f2		      LDA	Player0SpeedH
    492  f1c9		       e9 00		      SBC	#0
    493  f1cb		       85 f2		      STA	Player0SpeedH
    494  f1cd
    495  f1cd				   CheckMinSpeed
    496  f1cd		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    497  f1cf		       c9 00		      CMP	#CAR_MIN_SPEED_H
    498  f1d1		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    499  f1d3		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    500  f1d5
    501  f1d5				   CompareLBreakSpeed
    502  f1d5		       a5 f0		      LDA	Player0SpeedL
    503  f1d7		       c9 00		      CMP	#CAR_MIN_SPEED_L
    504  f1d9		       90 03		      BCC	ResetMinSpeed	; Less than memory
    505  f1db		       4c e6 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    506  f1de
    507  f1de				   ResetMinSpeed
    508  f1de		       a9 00		      LDA	#CAR_MIN_SPEED_H
    509  f1e0		       85 f2		      STA	Player0SpeedH
    510  f1e2		       a9 00		      LDA	#CAR_MIN_SPEED_L
    511  f1e4		       85 f0		      STA	Player0SpeedL
    512  f1e6
    513  f1e6				   SkipAccelerateIfBreaking
    514  f1e6		       4c 2b f2 	      JMP	SkipAccelerate
    515  f1e9				   SkipBreak
    516  f1e9
    517  f1e9				   Acelerates
    518  f1e9		       a5 b8		      LDA	CountdownTimer
    519  f1eb		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    520  f1ed
    521  f1ed				   ContinueAccelerateTest
    522  f1ed		       a5 0c		      LDA	INPT4	;3
    523  f1ef		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    524  f1f1		       a9 10		      LDA	#%00010000	;UP in controller
    525  f1f3		       2c 80 02 	      BIT	SWCHA
    526  f1f6		       d0 33		      BNE	SkipAccelerate
    527  f1f8
    528  f1f8				   IncreaseCarSpeed
    529  f1f8		       a2 02		      LDX	#2
    530  f1fa		       a4 c7		      LDY	CurrentCarId
    531  f1fc				   IncreaseCarSpeedLoop
    532  f1fc							;Adds speed
    533  f1fc		       18		      CLC
    534  f1fd		       a5 dc		      LDA	AccelerateBuffer
    535  f1ff		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    536  f202		       85 dc		      STA	AccelerateBuffer
    537  f204		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    538  f206		       e6 f0		      INC	Player0SpeedL
    539  f208		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    540  f20a		       e6 f2		      INC	Player0SpeedH
    541  f20c				   ContinueIncreaseSpeedLoop
    542  f20c		       ca		      DEX
    543  f20d		       d0 ed		      BNE	IncreaseCarSpeedLoop
    544  f20f				   SkipIncreaseCarSpeed
    545  f20f
    546  f20f				   CheckIfAlreadyMaxSpeed
    547  f20f		       a5 f2		      LDA	Player0SpeedH
    548  f211		       c9 02		      CMP	#CAR_MAX_SPEED_H
    549  f213		       90 16		      BCC	SkipAccelerate	; less than my max speed
    550  f215		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    551  f217							;High bit is max, compare the low
    552  f217		       a4 c7		      LDY	CurrentCarId
    553  f219		       a5 f0		      LDA	Player0SpeedL
    554  f21b		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    555  f21e		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    556  f220							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    557  f220
    558  f220				   ResetToMaxSpeed		; Speed is more, or is already max
    559  f220		       a9 02		      LDA	#CAR_MAX_SPEED_H
    560  f222		       85 f2		      STA	Player0SpeedH
    561  f224		       a4 c7		      LDY	CurrentCarId
    562  f226		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    563  f229		       85 f0		      STA	Player0SpeedL
    564  f22b				   SkipAccelerate
    565  f22b
    566  f22b				   InitUpdateOffsets
    567  f22b		       a2 00		      LDX	#0	; Memory Offset 24 bit
    568  f22d		       a0 00		      LDY	#0	; Line Speeds 16 bits
    569  f22f		       a5 91		      LDA	TrafficOffset0 + 1	;
    570  f231		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    571  f233		       a5 c6		      LDA	GameMode
    572  f235		       29 04		      AND	#%00000100	; GameModes with high delta
    573  f237		       f0 02		      BEQ	UpdateOffsets
    574  f239		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    575  f23b
    576  f23b				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    577  f23b		       38		      SEC
    578  f23c		       a5 f0		      LDA	Player0SpeedL
    579  f23e		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    580  f241		       85 b0		      STA	Tmp0
    581  f243		       c8		      INY
    582  f244		       a5 f2		      LDA	Player0SpeedH
    583  f246		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    584  f249		       85 b1		      STA	Tmp1
    585  f24b		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    586  f24d		       e9 00		      SBC	#0
    587  f24f		       85 b2		      STA	Tmp2
    588  f251
    589  f251				   AddsTheResult
    590  f251		       18		      CLC
    591  f252		       a5 b0		      LDA	Tmp0
    592  f254		       75 90		      ADC	TrafficOffset0,X
    593  f256		       95 90		      STA	TrafficOffset0,X
    594  f258		       e8		      INX
    595  f259		       a5 b1		      LDA	Tmp1
    596  f25b		       75 90		      ADC	TrafficOffset0,X
    597  f25d		       95 90		      STA	TrafficOffset0,X
    598  f25f		       e8		      INX
    599  f260		       a5 b2		      LDA	Tmp2	; Carry
    600  f262		       75 90		      ADC	TrafficOffset0,X
    601  f264		       95 90		      STA	TrafficOffset0,X
    602  f266		       90 06		      BCC	CalculateOffsetCache
    603  f268		       e0 02		      CPX	#2	;MSB offset 0
    604  f26a		       d0 02		      BNE	CalculateOffsetCache
    605  f26c		       e6 ba		      INC	Traffic0Msb
    606  f26e
    607  f26e				   CalculateOffsetCache
    608  f26e		       e8		      INX
    609  f26f		       38		      SEC
    610  f270		       69 00		      ADC	#0	;Increment by one
    611  f272		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    612  f274
    613  f274				   PrepareNextUpdateLoop
    614  f274		       c8		      INY
    615  f275		       e8		      INX
    616  f276		       e0 10		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    617  f278		       d0 c1		      BNE	UpdateOffsets
    618  f27a
    619  f27a				   ConfigureOpponentLine		; Temporary
    620  f27a		       a9 14		      LDA	#20	; Extract to constant
    621  f27c		       85 cf		      STA	OpponentLine
    622  f27e
    623  f27e				   CallTestColisionAndMove
    624  f27e		       a2 00		      LDX	#0	; Player 0
    625  f280		       a9 40		      LDA	#%01000000	; Left player 0
    626  f282		       85 b0		      STA	Tmp0
    627  f284		       a9 80		      LDA	#%10000000	; Left player 0
    628  f286		       85 b1		      STA	Tmp1
    629  f288		       20 06 fa 	      JSR	TestCollisionAndMove
    630  f28b
    631  f28b				   SkipUpdateLogic		; Continue here if not paused
    632  f28b
    633  f28b				   CalculateGear
    634  f28b		       a5 f0		      LDA	Player0SpeedL	;3
    635  f28d		       29 80		      AND	#%10000000	;2
    636  f28f		       05 f2		      ORA	Player0SpeedH	;3
    637  f291		       18		      CLC		;2
    638  f292		       2a		      ROL		;2
    639  f293		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    640  f295		       85 d5		      STA	Gear
    641  f297
    642  f297				   EndProcessingBorder
    643  f297
    644  f297				   ProcessScoreFontColor
    645  f297		       a6 cb		      LDX	ScoreFontColorHoldChange
    646  f299		       f0 06		      BEQ	ResetScoreFontColor
    647  f29b		       ca		      DEX
    648  f29c		       86 cb		      STX	ScoreFontColorHoldChange
    649  f29e		       4c a5 f2 	      JMP	SkipScoreFontColor
    650  f2a1				   ResetScoreFontColor
    651  f2a1		       a9 f9		      LDA	#SCORE_FONT_COLOR
    652  f2a3		       85 c9		      STA	ScoreFontColor
    653  f2a5				   SkipScoreFontColor
    654  f2a5
    655  f2a5				   IsGameOver
    656  f2a5		       a5 b8		      LDA	CountdownTimer
    657  f2a7		       05 f0		      ORA	Player0SpeedL
    658  f2a9		       05 f2		      ORA	Player0SpeedH
    659  f2ab		       d0 0b		      BNE	IsCheckpoint
    660  f2ad		       a9 01		      LDA	#1
    661  f2af		       85 cb		      STA	ScoreFontColorHoldChange
    662  f2b1		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    663  f2b3		       85 c9		      STA	ScoreFontColor
    664  f2b5		       4c ea f2 	      JMP	SkipIsTimeOver
    665  f2b8
    666  f2b8				   IsCheckpoint
    667  f2b8		       a5 cd		      LDA	NextCheckpoint
    668  f2ba		       c5 92		      CMP	TrafficOffset0 + 2
    669  f2bc		       d0 20		      BNE	SkipIsCheckpoint
    670  f2be		       18		      CLC
    671  f2bf		       69 10		      ADC	#CHECKPOINT_INTERVAL
    672  f2c1		       85 cd		      STA	NextCheckpoint
    673  f2c3		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    674  f2c5		       85 c9		      STA	ScoreFontColor
    675  f2c7		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    676  f2c9		       85 cb		      STA	ScoreFontColorHoldChange
    677  f2cb		       a5 b8		      LDA	CountdownTimer
    678  f2cd		       18		      CLC
    679  f2ce		       65 c0		      ADC	CheckpointTime
    680  f2d0		       85 b8		      STA	CountdownTimer
    681  f2d2		       90 04		      BCC	JumpSkipTimeOver
    682  f2d4		       a9 ff		      LDA	#$FF
    683  f2d6		       85 b8		      STA	CountdownTimer	; Does not overflow!
    684  f2d8				   JumpSkipTimeOver
    685  f2d8		       20 4b f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    686  f2db		       4c ea f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    687  f2de				   SkipIsCheckpoint
    688  f2de
    689  f2de				   IsTimeOver
    690  f2de		       a5 b8		      LDA	CountdownTimer
    691  f2e0		       d0 08		      BNE	SkipIsTimeOver
    692  f2e2		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    693  f2e4		       85 cb		      STA	ScoreFontColorHoldChange
    694  f2e6		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    695  f2e8		       85 c9		      STA	ScoreFontColor
    696  f2ea				   SkipIsTimeOver
    697  f2ea
    698  f2ea		       20 c2 f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    699  f2ed
    700  f2ed				   PrintEasterEggCondition
    701  f2ed		       a5 8d		      LDA	FrameCount1
    702  f2ef		       29 38		      AND	#%00111000
    703  f2f1		       05 bd		      ORA	GameStatus
    704  f2f3		       c9 38		      CMP	#%00111000
    705  f2f5		       d0 06		      BNE	ChooseTextSide
    706  f2f7		       20 b8 f7 	      JSR	PrintEasterEgg
    707  f2fa		       4c ec f3 	      JMP	RightScoreWriteEnd
    708  f2fd
    709  f2fd							;Could be done during on vblank to save this comparisson time (before draw score), 
    710  f2fd							;but I am saving vblank cycles for now, in case of 2 players.
    711  f2fd				   ChooseTextSide		; 
    712  f2fd		       a5 de		      LDA	TextSide	;3
    713  f2ff		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    714  f301		       4c 82 f3 	      JMP	RightScoreWrite
    715  f304
    716  f304				   LeftScoreWrite
    717  f304		       a5 c9		      LDA	ScoreFontColor
    718  f306		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    719  f308		       f0 4e		      BEQ	PrintCheckpoint
    720  f30a		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    721  f30c		       f0 52		      BEQ	PrintStartGame
    722  f30e		       a5 bd		      LDA	GameStatus
    723  f310		       f0 56		      BEQ	PrintHellwayLeft
    724  f312				   WriteDistance		;Not optimized yet, ugly code.
    725  f312				   Digit0Distance
    726  f312		       a5 91		      LDA	TrafficOffset0 + 1	;3
    727  f314		       4a		      LSR		; 2
    728  f315		       4a		      LSR		; 2
    729  f316		       4a		      LSR		; 2
    730  f317		       4a		      LSR		; 2
    731  f318		       aa		      TAX		; 2
    732  f319		       bd be fd 	      LDA	FontLookup,X	;4
    733  f31c		       85 d3		      STA	ScoreD3	;3
    734  f31e
    735  f31e				   Digit1Distance
    736  f31e		       a5 92		      LDA	TrafficOffset0 + 2	;3
    737  f320		       29 0f		      AND	#%00001111	;2
    738  f322		       aa		      TAX		; 2
    739  f323		       bd be fd 	      LDA	FontLookup,X	;4 
    740  f326		       85 d2		      STA	ScoreD2	;3
    741  f328
    742  f328				   Digit2Distance
    743  f328		       a5 92		      LDA	TrafficOffset0 + 2	;3
    744  f32a		       4a		      LSR		; 2
    745  f32b		       4a		      LSR		; 2
    746  f32c		       4a		      LSR		; 2
    747  f32d		       4a		      LSR		; 2
    748  f32e		       aa		      TAX		; 2
    749  f32f		       bd be fd 	      LDA	FontLookup,X	;4
    750  f332		       85 d1		      STA	ScoreD1	;3
    751  f334
    752  f334				   Digit3Distance
    753  f334		       a5 ba		      LDA	Traffic0Msb	;3
    754  f336		       29 0f		      AND	#%00001111	;2
    755  f338		       aa		      TAX		; 2
    756  f339		       bd be fd 	      LDA	FontLookup,X	;4 
    757  f33c		       85 d0		      STA	ScoreD0	;3
    758  f33e
    759  f33e				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    760  f33e		       a5 ba		      LDA	Traffic0Msb
    761  f340		       29 f0		      AND	#%11110000	;2
    762  f342		       d0 07		      BNE	DrawDistanceExtraDigit
    763  f344		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    764  f346		       85 d4		      STA	ScoreD4	;3
    765  f348		       4c 55 f3 	      JMP	EndDrawDistance
    766  f34b				   DrawDistanceExtraDigit
    767  f34b		       4a		      LSR		; 2
    768  f34c		       4a		      LSR		; 2
    769  f34d		       4a		      LSR		; 2
    770  f34e		       4a		      LSR		; 2
    771  f34f		       aa		      TAX		; 2
    772  f350		       bd be fd 	      LDA	FontLookup,X	;4
    773  f353		       85 d4		      STA	ScoreD4	;3
    774  f355
    775  f355				   EndDrawDistance
    776  f355		       4c ec f3 	      JMP	RightScoreWriteEnd	;3
    777  f358
    778  f358				   PrintCheckpoint
    779  f358		       a2 00		      LDX	#<CheckpointText
    780  f35a		       20 9a f7 	      JSR	PrintStaticText
    781  f35d		       4c ec f3 	      JMP	RightScoreWriteEnd	;3
    782  f360				   PrintStartGame
    783  f360		       a2 23		      LDX	#<GoText
    784  f362		       20 9a f7 	      JSR	PrintStaticText
    785  f365		       4c ec f3 	      JMP	RightScoreWriteEnd	;3
    786  f368
    787  f368				   PrintHellwayLeft
    788  f368		       a5 8d		      LDA	FrameCount1
    789  f36a		       29 01		      AND	#1
    790  f36c		       d0 05		      BNE	PrintCreditsLeft
    791  f36e		       a2 05		      LDX	#<HellwayLeftText
    792  f370		       4c 75 f3 	      JMP	PrintGameMode
    793  f373				   PrintCreditsLeft
    794  f373		       a2 0f		      LDX	#<OpbText
    795  f375
    796  f375				   PrintGameMode
    797  f375		       20 9a f7 	      JSR	PrintStaticText
    798  f378		       a6 c6		      LDX	GameMode
    799  f37a		       bd be fd 	      LDA	FontLookup,X	;4 
    800  f37d		       85 d0		      STA	ScoreD0	;3
    801  f37f		       4c ec f3 	      JMP	RightScoreWriteEnd	;3
    802  f382
    803  f382				   RightScoreWrite
    804  f382		       a5 bd		      LDA	GameStatus
    805  f384		       f0 45		      BEQ	PrintHellwayRight
    806  f386		       a5 c9		      LDA	ScoreFontColor
    807  f388		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    808  f38a		       f0 52		      BEQ	PrintGameOver
    809  f38c				   Digit0Timer
    810  f38c		       a5 b8		      LDA	CountdownTimer	;3
    811  f38e		       29 0f		      AND	#%00001111	;2
    812  f390		       aa		      TAX		; 2
    813  f391		       bd be fd 	      LDA	FontLookup,X	;4 
    814  f394		       85 d1		      STA	ScoreD1	;3
    815  f396
    816  f396				   Digit1Timer
    817  f396		       a5 b8		      LDA	CountdownTimer	;3
    818  f398		       4a		      LSR		; 2
    819  f399		       4a		      LSR		; 2
    820  f39a		       4a		      LSR		; 2
    821  f39b		       4a		      LSR		; 2
    822  f39c		       aa		      TAX		; 2
    823  f39d		       bd be fd 	      LDA	FontLookup,X	;4
    824  f3a0		       85 d0		      STA	ScoreD0	;3
    825  f3a2
    826  f3a2		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    827  f3a4		       85 d2		      STA	ScoreD2	;3
    828  f3a6
    829  f3a6				   Digit0Speed
    830  f3a6		       a5 f0		      LDA	Player0SpeedL
    831  f3a8		       29 3c		      AND	#%00111100	;2 Discard the last bits
    832  f3aa		       4a		      LSR		; 2
    833  f3ab		       4a		      LSR		; 2
    834  f3ac		       aa		      TAX		; 2
    835  f3ad		       bd be fd 	      LDA	FontLookup,X	;4
    836  f3b0		       85 d4		      STA	ScoreD4	;3
    837  f3b2
    838  f3b2				   Digit1Speed
    839  f3b2		       a5 f0		      LDA	Player0SpeedL
    840  f3b4		       29 c0		      AND	#%11000000	;2 Discard the last bits
    841  f3b6		       18		      CLC
    842  f3b7		       2a		      ROL		;First goes into carry
    843  f3b8		       2a		      ROL
    844  f3b9		       2a		      ROL
    845  f3ba		       85 b0		      STA	Tmp0
    846  f3bc		       a5 f2		      LDA	Player0SpeedH
    847  f3be		       0a		      ASL
    848  f3bf		       0a		      ASL
    849  f3c0		       05 b0		      ORA	Tmp0
    850  f3c2		       aa		      TAX		; 2
    851  f3c3		       bd be fd 	      LDA	FontLookup,X	;4
    852  f3c6		       85 d3		      STA	ScoreD3	;3
    853  f3c8		       4c ec f3 	      JMP	RightScoreWriteEnd
    854  f3cb
    855  f3cb				   PrintHellwayRight
    856  f3cb		       a5 8d		      LDA	FrameCount1
    857  f3cd		       29 01		      AND	#1
    858  f3cf		       d0 05		      BNE	PrintCreditsRight
    859  f3d1		       a2 0a		      LDX	#<HellwayRightText
    860  f3d3		       4c d8 f3 	      JMP	PrintRightIntro
    861  f3d6				   PrintCreditsRight
    862  f3d6		       a2 14		      LDX	#<YearText
    863  f3d8				   PrintRightIntro
    864  f3d8		       20 9a f7 	      JSR	PrintStaticText
    865  f3db		       4c ec f3 	      JMP	RightScoreWriteEnd
    866  f3de				   PrintGameOver
    867  f3de		       a5 8c		      LDA	FrameCount0
    868  f3e0		       30 05		      BMI	PrintOverText
    869  f3e2		       a2 19		      LDX	#<GameText
    870  f3e4		       4c e9 f3 	      JMP	StoreGameOverText
    871  f3e7				   PrintOverText
    872  f3e7		       a2 1e		      LDX	#<OverText
    873  f3e9				   StoreGameOverText
    874  f3e9		       20 9a f7 	      JSR	PrintStaticText
    875  f3ec				   RightScoreWriteEnd
    876  f3ec
    877  f3ec
    878  f3ec				   ScoreBackgroundColor
    879  f3ec		       a2 00		      LDX	#0
    880  f3ee		       ad 82 02 	      LDA	SWCHB
    881  f3f1		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    882  f3f3		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    883  f3f5		       f0 04		      BEQ	BlackAndWhiteScoreBg
    884  f3f7		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    885  f3f9		       a2 03		      LDX	#BACKGROUND_COLOR
    886  f3fb				   BlackAndWhiteScoreBg
    887  f3fb		       85 b2		      STA	Tmp2	; Score Background
    888  f3fd		       86 b3		      STX	Tmp3	; Traffic Background
    889  f3ff
    890  f3ff				   ConfigurePFForScore
    891  f3ff							;LDA #SCORE_BACKGROUND_COLOR; Done above
    892  f3ff		       85 09		      STA	COLUBK
    893  f401		       20 0d f7 	      JSR	ClearAll
    894  f404		       a9 02		      LDA	#%00000010	; Score mode
    895  f406		       85 0a		      STA	CTRLPF
    896  f408		       a5 de		      LDA	TextSide	;3
    897  f40a		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    898  f40c				   LeftScoreOn
    899  f40c		       a5 c9		      LDA	ScoreFontColor
    900  f40e		       85 07		      STA	COLUP1
    901  f410		       a5 b2		      LDA	Tmp2
    902  f412		       85 06		      STA	COLUP0
    903  f414		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    904  f416		       85 b1		      STA	Tmp1
    905  f418		       4c 27 f4 	      JMP	CallWaitForVblankEnd
    906  f41b				   RightScoreOn
    907  f41b		       a5 c9		      LDA	ScoreFontColor
    908  f41d		       85 06		      STA	COLUP0
    909  f41f		       a5 b2		      LDA	Tmp2
    910  f421		       85 07		      STA	COLUP1
    911  f423		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    912  f425		       85 b1		      STA	Tmp1
    913  f427
    914  f427							; After here we are going to update the screen, No more heavy code
    915  f427				   CallWaitForVblankEnd
    916  f427		       20 9b f9 	      JSR	WaitForVblankEnd
    917  f42a
    918  f42a				   DrawScoreHud
    919  f42a		       20 2a f8 	      JSR	PrintScore
    920  f42d
    921  f42d		       85 02		      STA	WSYNC
    922  f42f
    923  f42f		       a5 0c		      LDA	INPT4	;3
    924  f431		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    925  f433		       a5 c9		      LDA	ScoreFontColor
    926  f435		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    927  f437		       d0 0a		      BNE	WaitAnotherScoreLine
    928  f439		       a5 de		      LDA	TextSide	;3
    929  f43b		       d0 03		      BNE	LeftScoreOnGameOver
    930  f43d		       4c 75 f9 	      JMP	DrawGameOverScreenRight
    931  f440				   LeftScoreOnGameOver
    932  f440		       4c e7 f8 	      JMP	DrawGameOverScreenLeft
    933  f443
    934  f443				   WaitAnotherScoreLine
    935  f443		       85 02		      STA	WSYNC
    936  f445
    937  f445				   PrepareForTraffic
    938  f445		       20 1f f7 	      JSR	ClearPF	; 32
    939  f448
    940  f448		       85 02		      STA	WSYNC
    941  f44a		       85 02		      STA	WSYNC
    942  f44c
    943  f44c		       a9 30		      LDA	#%00110000	; 2 Score mode
    944  f44e		       85 0a		      STA	CTRLPF	;3
    945  f450
    946  f450		       a5 c2		      LDA	TrafficColor	;3
    947  f452		       85 08		      STA	COLUPF	;3
    948  f454
    949  f454		       a9 96		      LDA	#PLAYER1_COLOR	;2
    950  f456		       85 07		      STA	COLUP1	;3
    951  f458
    952  f458		       a5 c9		      LDA	ScoreFontColor	;3
    953  f45a		       85 06		      STA	COLUP0	;3
    954  f45c
    955  f45c		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    956  f45e
    957  f45e		       20 1f f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    958  f461
    959  f461		       a6 b3		      LDX	Tmp3	; Background color.
    960  f463
      0  f463					      SLEEP	9	; Odd sleep destroys flags
      1  f463				   .CYCLES    SET	9
      2  f463
      3  f463				  -	      IF	.CYCLES < 2
      4  f463				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f463				  -	      ERR
      6  f463					      ENDIF
      7  f463
      8  f463					      IF	.CYCLES & 1
      9  f463				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f463				  -	      nop	0
     11  f463					      ELSE
     12  f463		       24 00		      bit	VSYNC
     13  f465					      ENDIF
     14  f465				   .CYCLES    SET	.CYCLES - 3
     15  f465					      ENDIF
     16  f465
     17  f465					      REPEAT	.CYCLES / 2
     18  f465		       ea		      nop
     17  f465					      REPEND
     18  f466		       ea		      nop
     17  f466					      REPEND
     18  f467		       ea		      nop
     19  f468					      REPEND
    962  f468
    963  f468		       a5 8c		      LDA	FrameCount0	;Brach flag
    964  f46a		       29 01		      AND	#%00000001
    965  f46c
    966  f46c		       86 09		      STX	COLUBK	;3
    967  f46e		       d0 05		      BNE	OpDrawCache	;2
    968  f470		       4c 2f f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    969  f473							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    970  f473
    971  f473							;main scanline loop...
    972  f473				   OpScanLoop
    973  f473		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    974  f475
    975  f475							;Start of next line!			
    976  f475				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    977  f475
    978  f475		       a5 80		      LDA	GRP0Cache	;3
    979  f477		       85 1b		      STA	GRP0	;3
    980  f479
    981  f479		       a5 84		      LDA	GRP1Cache	;3
    982  f47b		       85 1c		      STA	GRP1	;3
    983  f47d
    984  f47d		       a5 85		      LDA	ENABLCache	;3
    985  f47f		       85 1f		      STA	ENABL	;3
    986  f481
    987  f481		       a5 86		      LDA	ENAM0Cache	;3
    988  f483		       85 1d		      STA	ENAM0	;3
    989  f485
    990  f485		       a5 87		      LDA	ENAM1Cache	;3
    991  f487		       85 1e		      STA	ENAM1	;3
    992  f489
    993  f489		       a5 81		      LDA	PF0Cache	;3
    994  f48b		       85 0d		      STA	PF0	;3
    995  f48d
    996  f48d		       a9 00		      LDA	#0	;2
    997  f48f							;STA PF0	     ;3
    998  f48f		       85 80		      STA	GRP0Cache	;3
    999  f491		       85 86		      STA	ENAM0Cache	;3
   1000  f493		       85 85		      STA	ENABLCache	;3
   1001  f495		       85 87		      STA	ENAM1Cache	; 3
   1002  f497							;STA GRP1Cache ;3
   1003  f497		       85 0d		      STA	PF0	;3
   1004  f499							;STA PF2	     ;3
   1005  f499
   1006  f499		       a5 83		      LDA	PF2Cache	;3
   1007  f49b		       85 0f		      STA	PF2	;3
   1008  f49d
   1009  f49d				   OpDrawCar0
   1010  f49d		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1011  f49f		       b0 04		      BCS	OpSkipDrawCar	;2
   1012  f4a1		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1013  f4a3		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
   1014  f4a5				   OpSkipDrawCar
   1015  f4a5
   1016  f4a5							;BEQ DrawTraffic3
   1017  f4a5				   OpDrawTraffic1		; 33
   1018  f4a5		       98		      TYA		; 2
   1019  f4a6		       18		      CLC		; 2 
   1020  f4a7		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
   1021  f4a9		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1022  f4ab		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1023  f4ad		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
   1024  f4af		       4c b4 f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1025  f4b2				   OpEorOffsetWithCarry
   1026  f4b2		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1027  f4b4				   OpAfterEorOffsetWithCarry		;17
   1028  f4b4		       aa		      TAX		;2
   1029  f4b5		       bd 00 fe 	      LDA	AesTable,X	; 4
   1030  f4b8		       c5 be		      CMP	TrafficChance	;3
   1031  f4ba		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1032  f4bc		       a9 ff		      LDA	#$FF	;2
   1033  f4be		       85 86		      STA	ENAM0Cache	;3
   1034  f4c0				   OpFinishDrawTraffic1
   1035  f4c0
   1036  f4c0				   OpErasePF2
   1037  f4c0		       a9 00		      LDA	#0
   1038  f4c2		       85 0f		      STA	PF2
   1039  f4c4
   1040  f4c4				   OpDrawTraffic2		; 33
   1041  f4c4		       98		      TYA		; 2
   1042  f4c5		       18		      CLC		; 2 
   1043  f4c6		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
   1044  f4c8		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1045  f4ca		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1046  f4cc		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
   1047  f4ce		       4c d3 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1048  f4d1				   OpEorOffsetWithCarry2
   1049  f4d1		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1050  f4d3				   OpAfterEorOffsetWithCarry2		;17
   1051  f4d3		       aa		      TAX		;2
   1052  f4d4		       bd 00 fe 	      LDA	AesTable,X	; 4
   1053  f4d7		       c5 be		      CMP	TrafficChance	;3
   1054  f4d9		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1055  f4db		       a9 02		      LDA	#%00000010	;2
   1056  f4dd		       85 85		      STA	ENABLCache	;3
   1057  f4df				   OpFinishDrawTraffic2
   1058  f4df
   1059  f4df							;STA WSYNC ;65 / 137
   1060  f4df
   1061  f4df							; LDA Tmp0 ; Flicker this line if drawing car
   1062  f4df							; BEQ FinishDrawTraffic4
   1063  f4df				   OpDrawTraffic3		; 33
   1064  f4df		       98		      TYA		; 2
   1065  f4e0		       18		      CLC		; 2 
   1066  f4e1		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
   1067  f4e3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1068  f4e5		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1069  f4e7		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
   1070  f4e9		       4c ee f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
   1071  f4ec				   OpEorOffsetWithCarry3
   1072  f4ec		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1073  f4ee				   OpAfterEorOffsetWithCarry3		;17
   1074  f4ee		       aa		      TAX		;2
   1075  f4ef		       bd 00 fe 	      LDA	AesTable,X	; 4
   1076  f4f2		       c5 be		      CMP	TrafficChance	;3
   1077  f4f4		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1078  f4f6		       a9 02		      LDA	#%00000010	;2
   1079  f4f8		       85 87		      STA	ENAM1Cache
   1080  f4fa				   OpFinishDrawTraffic3
   1081  f4fa
   1082  f4fa				   OpDrawOponent		;26
   1083  f4fa		       84 b0		      STY	Tmp0	;3
   1084  f4fc		       a4 cf		      LDY	OpponentLine	;3
   1085  f4fe		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1086  f500		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1087  f502				   OpDrawOpponent
   1088  f502		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1089  f504		       85 80		      STA	GRP0Cache	;3
   1090  f506		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1091  f508		       a4 b0		      LDY	Tmp0	;3
   1092  f50a		       4c 1e f5 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
   1093  f50d				   OpSkipDrawOpponent
   1094  f50d		       c6 cf		      DEC	OpponentLine	;5
   1095  f50f		       a4 b0		      LDY	Tmp0	;3
   1096  f511
   1097  f511
   1098  f511				   OpDrawTraffic0		; 21 2pe
   1099  f511		       98		      TYA		; 2
   1100  f512		       18		      CLC		; 2 
   1101  f513		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1102  f515		       29 08		      AND	#%00001000	;2
   1103  f517		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1104  f519				   OpHasBorderP0
   1105  f519		       a9 70		      LDA	#%01110000	; 2
   1106  f51b		       4c 20 f5 	      JMP	OpStoreBorderP0	; 3
   1107  f51e				   OpHasNoBorderP0
   1108  f51e		       a9 00		      LDA	#0	; 2
   1109  f520				   OpStoreBorderP0
   1110  f520		       85 81		      STA	PF0Cache	; 3
   1111  f522		       85 83		      STA	PF2Cache	; 3
   1112  f524
   1113  f524				   OpSkipDrawTraffic0
   1114  f524
   1115  f524				   OpWhileScanLoop
   1116  f524		       88		      DEY		;2
   1117  f525		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1118  f527		       4c 73 f4 	      JMP	OpScanLoop	;3
   1119  f52a				   OpFinishScanLoop		; 7 209 of 222
   1120  f52a		       4c e2 f5 	      JMP	FinishScanLoop
   1121  f52d
   1122  f52d							;main scanline loop...
   1123  f52d				   ScanLoop
   1124  f52d		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1125  f52f
   1126  f52f							;Start of next line!			
   1127  f52f				   DrawCache		;63 Is the last line going to the top of the next frame?
   1128  f52f		       a5 81		      LDA	PF0Cache	;3
   1129  f531		       85 0d		      STA	PF0	;3
   1130  f533
   1131  f533		       a5 80		      LDA	GRP0Cache	;3
   1132  f535		       85 1b		      STA	GRP0	;3
   1133  f537
   1134  f537		       a5 84		      LDA	GRP1Cache	;3
   1135  f539		       85 1c		      STA	GRP1	;3
   1136  f53b
   1137  f53b		       a5 86		      LDA	ENAM0Cache	;3
   1138  f53d		       85 1d		      STA	ENAM0	;3
   1139  f53f
   1140  f53f		       a5 85		      LDA	ENABLCache	;3
   1141  f541		       85 1f		      STA	ENABL	;3
   1142  f543
   1143  f543		       a5 87		      LDA	ENAM1Cache	;3
   1144  f545		       85 1e		      STA	ENAM1	;3
   1145  f547
   1146  f547		       a5 83		      LDA	PF2Cache	;3
   1147  f549		       85 0f		      STA	PF2	;3
   1148  f54b
   1149  f54b		       a9 00		      LDA	#0	;2
   1150  f54d		       85 0d		      STA	PF0	;3
   1151  f54f		       85 84		      STA	GRP1Cache	;3
   1152  f551		       85 85		      STA	ENABLCache	;3
   1153  f553		       85 86		      STA	ENAM0Cache	;3
   1154  f555		       85 87		      STA	ENAM1Cache	; 3
   1155  f557							;STA GRP0Cache
   1156  f557		       85 0f		      STA	PF2	;3
   1157  f559
   1158  f559				   DrawCar0
   1159  f559		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1160  f55b		       b0 04		      BCS	SkipDrawCar	;2
   1161  f55d		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1162  f55f		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1163  f561				   SkipDrawCar
   1164  f561
   1165  f561							;BEQ DrawTraffic3
   1166  f561				   DrawTraffic1 		; 33
   1167  f561		       98		      TYA		; 2
   1168  f562		       18		      CLC		; 2 
   1169  f563		       65 95		      ADC	TrafficOffset1 + 1	;3
   1170  f565		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1171  f567		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1172  f569		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1173  f56b		       4c 70 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1174  f56e				   EorOffsetWithCarry
   1175  f56e		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1176  f570				   AfterEorOffsetWithCarry		;17
   1177  f570		       aa		      TAX		;2
   1178  f571		       bd 00 fe 	      LDA	AesTable,X	; 4
   1179  f574		       c5 be		      CMP	TrafficChance	;3
   1180  f576		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1181  f578		       a9 ff		      LDA	#$FF	;2
   1182  f57a		       85 86		      STA	ENAM0Cache	;3
   1183  f57c				   FinishDrawTraffic1
   1184  f57c
   1185  f57c				   DrawTraffic2 		; 33
   1186  f57c		       98		      TYA		; 2
   1187  f57d		       18		      CLC		; 2 
   1188  f57e		       65 99		      ADC	TrafficOffset2 + 1	;3
   1189  f580		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1190  f582		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1191  f584		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1192  f586		       4c 8b f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1193  f589				   EorOffsetWithCarry2
   1194  f589		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1195  f58b				   AfterEorOffsetWithCarry2		;17
   1196  f58b		       aa		      TAX		;2
   1197  f58c		       bd 00 fe 	      LDA	AesTable,X	; 4
   1198  f58f		       c5 be		      CMP	TrafficChance	;3
   1199  f591		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1200  f593		       a9 02		      LDA	#%00000010	;2
   1201  f595		       85 85		      STA	ENABLCache	;3
   1202  f597				   FinishDrawTraffic2
   1203  f597
   1204  f597							;STA WSYNC ;65 / 137
   1205  f597
   1206  f597							; LDA Tmp0 ; Flicker this line if drawing car
   1207  f597							; BEQ FinishDrawTraffic4
   1208  f597				   DrawTraffic3 		; 33
   1209  f597		       98		      TYA		; 2
   1210  f598		       18		      CLC		; 2 
   1211  f599		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1212  f59b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1213  f59d		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1214  f59f		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1215  f5a1		       4c a6 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1216  f5a4				   EorOffsetWithCarry3
   1217  f5a4		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1218  f5a6				   AfterEorOffsetWithCarry3		;17
   1219  f5a6		       aa		      TAX		;2
   1220  f5a7		       bd 00 fe 	      LDA	AesTable,X	; 4
   1221  f5aa		       c5 be		      CMP	TrafficChance	;3
   1222  f5ac		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1223  f5ae		       a9 02		      LDA	#%00000010	;2
   1224  f5b0		       85 87		      STA	ENAM1Cache
   1225  f5b2				   FinishDrawTraffic3
   1226  f5b2
   1227  f5b2
   1228  f5b2				   DrawOponent		;26
   1229  f5b2		       84 b0		      STY	Tmp0	;3
   1230  f5b4		       a4 cf		      LDY	OpponentLine	;3
   1231  f5b6		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1232  f5b8		       b0 0b		      BCS	SkipDrawOpponent	;2
   1233  f5ba				   DrawOpponent
   1234  f5ba		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1235  f5bc		       85 84		      STA	GRP1Cache	;3
   1236  f5be		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1237  f5c0		       a4 b0		      LDY	Tmp0	;3
   1238  f5c2		       4c d6 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1239  f5c5				   SkipDrawOpponent
   1240  f5c5		       c6 cf		      DEC	OpponentLine	;5
   1241  f5c7		       a4 b0		      LDY	Tmp0	;3
   1242  f5c9
   1243  f5c9				   DrawTraffic0 		; 21 2pe
   1244  f5c9		       98		      TYA		; 2
   1245  f5ca		       18		      CLC		; 2 
   1246  f5cb		       65 91		      ADC	TrafficOffset0 + 1	;3
   1247  f5cd		       29 08		      AND	#%00001000	;2
   1248  f5cf		       f0 05		      BEQ	HasNoBorderP0	;3
   1249  f5d1				   HasBorderP0
   1250  f5d1		       a9 70		      LDA	#%01110000	; 2
   1251  f5d3		       4c d8 f5 	      JMP	StoreBorderP0	; 3
   1252  f5d6				   HasNoBorderP0
   1253  f5d6		       a9 00		      LDA	#0	; 2
   1254  f5d8				   StoreBorderP0
   1255  f5d8		       85 81		      STA	PF0Cache	; 3
   1256  f5da		       85 83		      STA	PF2Cache	; 3
   1257  f5dc
   1258  f5dc				   SkipDrawTraffic0
   1259  f5dc
   1260  f5dc				   WhileScanLoop
   1261  f5dc		       88		      DEY		;2
   1262  f5dd		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1263  f5df		       4c 2d f5 	      JMP	ScanLoop	;3
   1264  f5e2				   FinishScanLoop		; 7 209 of 222
   1265  f5e2
   1266  f5e2		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1267  f5e4		       20 2e f7 	      JSR	LoadAll
   1268  f5e7		       85 02		      STA	WSYNC	; do stuff!
   1269  f5e9		       85 02		      STA	WSYNC
   1270  f5eb		       85 02		      STA	WSYNC
   1271  f5ed							;42 cycles to use here
   1272  f5ed
   1273  f5ed				   PrepareOverscan
   1274  f5ed		       a9 02		      LDA	#2
   1275  f5ef		       85 02		      STA	WSYNC
   1276  f5f1		       85 01		      STA	VBLANK
   1277  f5f3
   1278  f5f3		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1279  f5f5		       8d 96 02 	      STA	TIM64T
   1280  f5f8
   1281  f5f8				   LeftSound		;41
   1282  f5f8		       a5 b8		      LDA	CountdownTimer	;3
   1283  f5fa		       f0 1b		      BEQ	EngineOff	;2
   1284  f5fc		       a6 d5		      LDX	Gear
   1285  f5fe		       a5 f0		      LDA	Player0SpeedL	;3
   1286  f600		       4a		      LSR		;2
   1287  f601		       4a		      LSR		;2
   1288  f602		       4a		      LSR		;2
   1289  f603		       29 0f		      AND	#%00001111	;2
   1290  f605		       85 b0		      STA	Tmp0	;3
   1291  f607		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1292  f60a		       38		      SEC		;2
   1293  f60b		       e5 b0		      SBC	Tmp0	;3
   1294  f60d		       85 17		      STA	AUDF0	;3
   1295  f60f		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1296  f612		       85 15		      STA	AUDC0	;3
   1297  f614		       4c 1b f6 	      JMP	EndLeftSound	;3
   1298  f617				   EngineOff
   1299  f617		       a9 00		      LDA	#0
   1300  f619		       85 15		      STA	AUDC0
   1301  f61b
   1302  f61b				   EndLeftSound
   1303  f61b
   1304  f61b
   1305  f61b				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1306  f61b		       a5 c9		      LDA	ScoreFontColor	;3
   1307  f61d		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1308  f61f		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1309  f621		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1310  f623		       f0 29		      BEQ	PlayCheckpoint	;2
   1311  f625		       a5 b4		      LDA	CollisionCounter	;3
   1312  f627		       c9 e0		      CMP	#$E0	;2
   1313  f629		       b0 14		      BCS	PlayColision	;2
   1314  f62b		       a5 cd		      LDA	NextCheckpoint	;3
   1315  f62d		       38		      SEC		;2
   1316  f62e		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1317  f630		       c9 02		      CMP	#$02	;2
   1318  f632		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1319  f634		       a5 b8		      LDA	CountdownTimer	; 3
   1320  f636		       f0 53		      BEQ	MuteRightSound	;2
   1321  f638		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1322  f63a		       90 37		      BCC	PlayWarnTimeEnding	;4
   1323  f63c		       4c 8b f6 	      JMP	MuteRightSound	;3
   1324  f63f				   PlayColision
   1325  f63f		       a9 1f		      LDA	#31
   1326  f641		       85 18		      STA	AUDF1
   1327  f643		       a9 08		      LDA	#8
   1328  f645		       85 16		      STA	AUDC1
   1329  f647		       a9 08		      LDA	#8
   1330  f649		       85 1a		      STA	AUDV1
   1331  f64b		       4c 8f f6 	      JMP	EndRightSound
   1332  f64e
   1333  f64e				   PlayCheckpoint
   1334  f64e		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1335  f650		       4a		      LSR		;2
   1336  f651		       4a		      LSR		;2
   1337  f652		       4a		      LSR		;2
   1338  f653		       85 18		      STA	AUDF1	;3
   1339  f655		       a9 0c		      LDA	#12	;2
   1340  f657		       85 16		      STA	AUDC1	;3
   1341  f659		       a9 06		      LDA	#6	;2
   1342  f65b		       85 1a		      STA	AUDV1	;3
   1343  f65d		       4c 8f f6 	      JMP	EndRightSound	;3
   1344  f660
   1345  f660				   PlayBeforeCheckpoint
   1346  f660		       a5 8c		      LDA	FrameCount0	;3
   1347  f662		       29 1c		      AND	#%00011100	;2
   1348  f664		       09 03		      ORA	#%00000011	;2
   1349  f666		       85 18		      STA	AUDF1	;3
   1350  f668		       a9 0c		      LDA	#12	;2
   1351  f66a		       85 16		      STA	AUDC1	;3
   1352  f66c		       a9 03		      LDA	#3	;2
   1353  f66e		       85 1a		      STA	AUDV1	;3
   1354  f670		       4c 8f f6 	      JMP	EndRightSound	;3
   1355  f673
   1356  f673				   PlayWarnTimeEnding
   1357  f673		       a5 8c		      LDA	FrameCount0	;3
   1358  f675		       29 04		      AND	#%00000100	;2
   1359  f677		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1360  f679		       18		      CLC		;2
   1361  f67a		       a9 0a		      LDA	#10	;2
   1362  f67c		       65 b8		      ADC	CountdownTimer	;2
   1363  f67e		       85 18		      STA	AUDF1	;3
   1364  f680		       a9 0c		      LDA	#12	;2
   1365  f682		       85 16		      STA	AUDC1	;3
   1366  f684		       a9 03		      LDA	#3	;2
   1367  f686		       85 1a		      STA	AUDV1	;3
   1368  f688		       4c 8f f6 	      JMP	EndRightSound	;3
   1369  f68b
   1370  f68b				   MuteRightSound
   1371  f68b		       a9 00		      LDA	#0
   1372  f68d		       85 1a		      STA	AUDV1
   1373  f68f				   EndRightSound
   1374  f68f
   1375  f68f							;Read Fire Button before, will make it start the game for now.
   1376  f68f				   StartGame
   1377  f68f		       a5 0c		      LDA	INPT4	;3
   1378  f691		       25 0d		      AND	INPT5	;3 player 
   1379  f693		       30 31		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1380  f695		       a5 8c		      LDA	FrameCount0
   1381  f697		       29 01		      AND	#%00000001
   1382  f699		       d0 2b		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1383  f69b		       a5 bd		      LDA	GameStatus	;3
   1384  f69d		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1385  f69f		       d0 25		      BNE	SkipGameStart
   1386  f6a1		       a5 c6		      LDA	GameMode
   1387  f6a3		       c9 10		      CMP	#MAX_GAME_MODE
   1388  f6a5		       d0 0b		      BNE	SetGameRunning
   1389  f6a7		       a9 00		      LDA	#0
   1390  f6a9		       85 c6		      STA	GameMode
   1391  f6ab		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1392  f6ad		       85 bc		      STA	SwitchDebounceCounter
   1393  f6af		       4c c6 f6 	      JMP	SkipGameStart
   1394  f6b2				   SetGameRunning
   1395  f6b2		       e6 bd		      INC	GameStatus
   1396  f6b4		       a9 00		      LDA	#0	;
   1397  f6b6		       85 8c		      STA	FrameCount0
   1398  f6b8		       85 8d		      STA	FrameCount1
   1399  f6ba		       a9 0a		      LDA	#10
   1400  f6bc		       85 19		      STA	AUDV0
   1401  f6be		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1402  f6c0		       85 c9		      STA	ScoreFontColor
   1403  f6c2		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1404  f6c4		       85 cb		      STA	ScoreFontColorHoldChange
   1405  f6c6				   SkipGameStart
   1406  f6c6
   1407  f6c6				   ReadSwitches
   1408  f6c6		       a6 bc		      LDX	SwitchDebounceCounter
   1409  f6c8		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1410  f6ca		       a9 01		      LDA	#%00000001
   1411  f6cc		       2c 82 02 	      BIT	SWCHB
   1412  f6cf		       d0 07		      BNE	SkipReset
   1413  f6d1		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1414  f6d3		       85 bc		      STA	SwitchDebounceCounter
   1415  f6d5		       4c 05 f7 	      JMP	OverScanWaitBeforeReset
   1416  f6d8				   SkipReset
   1417  f6d8
   1418  f6d8				   GameModeSelect
   1419  f6d8		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1420  f6da		       d0 1c		      BNE	SkipGameSelect
   1421  f6dc		       20 5a f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1422  f6df				   ContinueGameSelect
   1423  f6df		       a9 02		      LDA	#%00000010
   1424  f6e1		       2c 82 02 	      BIT	SWCHB
   1425  f6e4		       d0 12		      BNE	SkipGameSelect
   1426  f6e6		       a6 c6		      LDX	GameMode
   1427  f6e8		       e0 10		      CPX	#MAX_GAME_MODE
   1428  f6ea		       f0 04		      BEQ	ResetGameMode
   1429  f6ec		       e8		      INX
   1430  f6ed		       4c f2 f6 	      JMP	StoreGameMode
   1431  f6f0				   ResetGameMode
   1432  f6f0		       a2 00		      LDX	#0
   1433  f6f2				   StoreGameMode
   1434  f6f2		       86 c6		      STX	GameMode
   1435  f6f4		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1436  f6f6		       85 bc		      STA	SwitchDebounceCounter
   1437  f6f8				   SkipGameSelect
   1438  f6f8		       4c fd f6 	      JMP	EndReadSwitches
   1439  f6fb				   DecrementSwitchDebounceCounter
   1440  f6fb		       c6 bc		      DEC	SwitchDebounceCounter
   1441  f6fd				   EndReadSwitches
   1442  f6fd
   1443  f6fd				   OverScanWait
   1444  f6fd		       ad 84 02 	      LDA	INTIM
   1445  f700		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1446  f702		       4c cb f0 	      JMP	MainLoop
   1447  f705
   1448  f705				   OverScanWaitBeforeReset
   1449  f705		       ad 84 02 	      LDA	INTIM
   1450  f708		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1451  f70a		       4c 12 f0 	      JMP	Start
   1452  f70d
   1453  f70d				   Subroutines
   1454  f70d
   1455  f70d				   ClearAll		; 52
   1456  f70d		       a9 00		      LDA	#0	;2
   1457  f70f		       85 1c		      STA	GRP1	;3
   1458  f711		       85 1f		      STA	ENABL	;3
   1459  f713		       85 1d		      STA	ENAM0	;3
   1460  f715		       85 1e		      STA	ENAM1	;3
   1461  f717		       85 84		      STA	GRP1Cache	;3
   1462  f719		       85 85		      STA	ENABLCache	;3
   1463  f71b		       85 86		      STA	ENAM0Cache	;3
   1464  f71d		       85 87		      STA	ENAM1Cache	;3
   1465  f71f
   1466  f71f				   ClearPF		; 26
   1467  f71f		       a9 00		      LDA	#0	;2
   1468  f721				   ClearPFSkipLDA0
   1469  f721		       85 0d		      STA	PF0	;3
   1470  f723		       85 0e		      STA	PF1	;3
   1471  f725		       85 0f		      STA	PF2	;3	
   1472  f727		       85 81		      STA	PF0Cache	;3
   1473  f729		       85 82		      STA	PF1Cache	;3
   1474  f72b		       85 83		      STA	PF2Cache	;3 
   1475  f72d		       60		      RTS		;6
   1476  f72e				   EndClearAll
   1477  f72e
   1478  f72e				   LoadAll		; 48
   1479  f72e		       a5 81		      LDA	PF0Cache	;3
   1480  f730		       85 0d		      STA	PF0	;3
   1481  f732
   1482  f732		       a5 82		      LDA	PF1Cache	;3
   1483  f734		       85 0e		      STA	PF1	;3
   1484  f736
   1485  f736		       a5 83		      LDA	PF2Cache	;3
   1486  f738		       85 0f		      STA	PF2	;3
   1487  f73a
   1488  f73a		       a5 84		      LDA	GRP1Cache	;3
   1489  f73c		       85 1c		      STA	GRP1	;3
   1490  f73e
   1491  f73e		       a5 85		      LDA	ENABLCache	;3
   1492  f740		       85 1f		      STA	ENABL	;3
   1493  f742
   1494  f742		       a5 86		      LDA	ENAM0Cache	;3
   1495  f744		       85 1d		      STA	ENAM0	;3
   1496  f746
   1497  f746		       a5 87		      LDA	ENAM1Cache	;3
   1498  f748		       85 1e		      STA	ENAM1	;3
   1499  f74a
   1500  f74a		       60		      RTS		;6
   1501  f74b				   EndLoadAll
   1502  f74b
   1503  f74b				   NextDifficulty
   1504  f74b		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1505  f74d		       29 01		      AND	#%00000001
   1506  f74f		       d0 24		      BNE	CheckRandomDifficulty
   1507  f751
   1508  f751		       a5 c4		      LDA	CurrentDifficulty
   1509  f753		       18		      CLC
   1510  f754		       69 01		      ADC	#1
   1511  f756		       29 03		      AND	#%00000011	; 0 to 3
   1512  f758		       85 c4		      STA	CurrentDifficulty
   1513  f75a
   1514  f75a				   ConfigureDifficulty
   1515  f75a		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1516  f75c		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1517  f75f		       85 be		      STA	TrafficChance
   1518  f761		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1519  f764		       85 c2		      STA	TrafficColor
   1520  f766
   1521  f766		       a5 c6		      LDA	GameMode	;
   1522  f768		       29 01		      AND	#%00000001
   1523  f76a		       f0 03		      BEQ	UseNextDifficultyTime
   1524  f76c		       4c 70 f7 	      JMP	StoreDifficultyTime
   1525  f76f				   UseNextDifficultyTime
   1526  f76f		       c8		      INY
   1527  f770				   StoreDifficultyTime
   1528  f770		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1529  f773		       85 c0		      STA	CheckpointTime
   1530  f775
   1531  f775				   CheckRandomDifficulty
   1532  f775		       a5 c6		      LDA	GameMode
   1533  f777		       29 08		      AND	#%00001000	; Random difficulties
   1534  f779		       f0 09		      BEQ	ReturnFromNextDifficulty
   1535  f77b				   RandomDifficulty
   1536  f77b		       a6 8c		      LDX	FrameCount0
   1537  f77d		       bd 00 fe 	      LDA	AesTable,X
   1538  f780							;EOR TrafficChance, no need, lets make life simple
   1539  f780		       29 3f		      AND	#%00111111
   1540  f782		       85 be		      STA	TrafficChance
   1541  f784
   1542  f784				   ReturnFromNextDifficulty
   1543  f784		       60		      RTS
   1544  f785				   EndNextDifficulty
   1545  f785
   1546  f785				   DefaultOffsets
   1547  f785		       a9 20		      LDA	#$20
   1548  f787		       85 96		      STA	TrafficOffset1 + 2
   1549  f789		       85 a6		      STA	OpTrafficOffset1 + 2
   1550  f78b		       a9 40		      LDA	#$40
   1551  f78d		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1552  f78f		       85 aa		      STA	OpTrafficOffset2 + 2
   1553  f791		       a9 60		      LDA	#$60
   1554  f793		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1555  f795		       85 ae		      STA	OpTrafficOffset3 + 2
   1556  f797		       a9 80		      LDA	#$80
   1557  f799		       60		      RTS
   1558  f79a
   1559  f79a				   PrintStaticText		; Preload X with the offset referent to StaticText
   1560  f79a		       bd 00 ff 	      LDA	StaticText,X
   1561  f79d		       85 d0		      STA	ScoreD0
   1562  f79f		       e8		      INX
   1563  f7a0		       bd 00 ff 	      LDA	StaticText,X
   1564  f7a3		       85 d1		      STA	ScoreD1
   1565  f7a5		       e8		      INX
   1566  f7a6		       bd 00 ff 	      LDA	StaticText,X
   1567  f7a9		       85 d2		      STA	ScoreD2
   1568  f7ab		       e8		      INX
   1569  f7ac		       bd 00 ff 	      LDA	StaticText,X
   1570  f7af		       85 d3		      STA	ScoreD3
   1571  f7b1		       e8		      INX
   1572  f7b2		       bd 00 ff 	      LDA	StaticText,X
   1573  f7b5		       85 d4		      STA	ScoreD4
   1574  f7b7		       60		      RTS
   1575  f7b8
   1576  f7b8				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1577  f7b8		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1578  f7ba		       85 c9		      STA	ScoreFontColor
   1579  f7bc		       a9 01		      LDA	#1
   1580  f7be		       85 cb		      STA	ScoreFontColorHoldChange
   1581  f7c0
   1582  f7c0		       a5 8d		      LDA	FrameCount1
   1583  f7c2		       29 07		      AND	#%00000111
   1584  f7c4		       85 b3		      STA	Tmp3
   1585  f7c6							;0 is Zelda Name, (default)
   1586  f7c6		       a9 01		      LDA	#1
   1587  f7c8		       c5 b3		      CMP	Tmp3
   1588  f7ca		       f0 38		      BEQ	PrintZeldaDateLeft
   1589  f7cc
   1590  f7cc		       a9 02		      LDA	#2
   1591  f7ce		       c5 b3		      CMP	Tmp3
   1592  f7d0		       f0 23		      BEQ	PrintPolvinhosLeft
   1593  f7d2
   1594  f7d2		       a9 03		      LDA	#3
   1595  f7d4		       c5 b3		      CMP	Tmp3
   1596  f7d6		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1597  f7d8
   1598  f7d8		       a9 04		      LDA	#4
   1599  f7da		       c5 b3		      CMP	Tmp3
   1600  f7dc		       f0 1c		      BEQ	PrintIvonneLeft
   1601  f7de
   1602  f7de		       a9 05		      LDA	#5
   1603  f7e0		       c5 b3		      CMP	Tmp3
   1604  f7e2		       f0 2a		      BEQ	PrintIvonneDateLeft
   1605  f7e4
   1606  f7e4		       a9 06		      LDA	#6
   1607  f7e6		       c5 b3		      CMP	Tmp3
   1608  f7e8		       f0 15		      BEQ	PrintArtLeft
   1609  f7ea
   1610  f7ea		       a9 07		      LDA	#7
   1611  f7ec		       c5 b3		      CMP	Tmp3
   1612  f7ee		       f0 23		      BEQ	PrintLeonardoLeft
   1613  f7f0
   1614  f7f0				   PrintZeldaLeft
   1615  f7f0		       a2 28		      LDX	#<ZeldaTextLeft
   1616  f7f2		       4c 18 f8 	      JMP	ProcessPrintEasterEgg
   1617  f7f5				   PrintPolvinhosLeft
   1618  f7f5		       a2 3c		      LDX	#<PolvinhosTextLeft
   1619  f7f7		       4c 18 f8 	      JMP	ProcessPrintEasterEgg
   1620  f7fa				   PrintIvonneLeft
   1621  f7fa		       a2 50		      LDX	#<IvonneTextLeft
   1622  f7fc		       4c 18 f8 	      JMP	ProcessPrintEasterEgg
   1623  f7ff				   PrintArtLeft
   1624  f7ff		       a2 64		      LDX	#<PaperArtTextLeft
   1625  f801		       4c 18 f8 	      JMP	ProcessPrintEasterEgg
   1626  f804
   1627  f804				   PrintZeldaDateLeft
   1628  f804		       a2 32		      LDX	#<ZeldaDateLeft
   1629  f806		       4c 18 f8 	      JMP	ProcessPrintEasterEgg
   1630  f809				   PrintPolvinhosDateLeft
   1631  f809		       a2 46		      LDX	#<PolvinhosDateLeft
   1632  f80b		       4c 18 f8 	      JMP	ProcessPrintEasterEgg
   1633  f80e				   PrintIvonneDateLeft
   1634  f80e		       a2 5a		      LDX	#<IvonneDateLeft
   1635  f810		       4c 18 f8 	      JMP	ProcessPrintEasterEgg
   1636  f813				   PrintLeonardoLeft
   1637  f813		       a2 6e		      LDX	#<LeonardoTextLeft
   1638  f815		       4c 18 f8 	      JMP	ProcessPrintEasterEgg
   1639  f818
   1640  f818				   ProcessPrintEasterEgg
   1641  f818		       a5 8c		      LDA	FrameCount0	;3
   1642  f81a		       29 01		      AND	#%00000001	;2
   1643  f81c		       d0 03		      BNE	TranformIntoRightText
   1644  f81e		       4c 26 f8 	      JMP	PrintEasterEggText
   1645  f821				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1646  f821		       8a		      TXA
   1647  f822		       18		      CLC
   1648  f823		       69 05		      ADC	#HALF_TEXT_SIZE
   1649  f825		       aa		      TAX
   1650  f826
   1651  f826				   PrintEasterEggText
   1652  f826		       20 9a f7 	      JSR	PrintStaticText
   1653  f829		       60		      RTS
   1654  f82a
   1655  f82a				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1656  f82a		       a2 00		      LDX	#0
   1657  f82c		       a0 04		      LDY	#FONT_OFFSET
   1658  f82e
   1659  f82e				   ScoreLoop		; 20 
   1660  f82e		       85 02		      STA	WSYNC	;2
   1661  f830
   1662  f830		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1663  f832		       85 0d		      STA	PF0	;3
   1664  f834
   1665  f834		       a5 82		      LDA	PF1Cache	;3
   1666  f836		       85 0e		      STA	PF1	;3
   1667  f838
   1668  f838		       a5 83		      LDA	PF2Cache	;3
   1669  f83a		       85 0f		      STA	PF2	;3
   1670  f83c
   1671  f83c				   DrawScoreD0		; 15
   1672  f83c		       a6 d0		      LDX	ScoreD0	; 3
   1673  f83e		       bd 00 fd 	      LDA	Font,X	;4
   1674  f841		       85 81		      STA	PF0Cache	;3
   1675  f843		       c6 d0		      DEC	ScoreD0	;5
   1676  f845
   1677  f845				   DrawScoreD1		; 23	
   1678  f845		       a6 d1		      LDX	ScoreD1	; 3
   1679  f847		       bd 00 fd 	      LDA	Font,X	;4
   1680  f84a		       0a		      ASL		;2
   1681  f84b		       0a		      ASL		;2
   1682  f84c		       0a		      ASL		;2
   1683  f84d		       0a		      ASL		;2
   1684  f84e		       85 82		      STA	PF1Cache	;3
   1685  f850		       c6 d1		      DEC	ScoreD1	;5
   1686  f852
   1687  f852				   DrawScoreD2		; 20
   1688  f852		       a6 d2		      LDX	ScoreD2	; 3
   1689  f854		       bd 00 fd 	      LDA	Font,X	;4
   1690  f857		       29 0f		      AND	#%00001111	;2
   1691  f859		       05 82		      ORA	PF1Cache	;3
   1692  f85b		       85 82		      STA	PF1Cache	;3
   1693  f85d		       c6 d2		      DEC	ScoreD2	;5
   1694  f85f
   1695  f85f				   DrawScoreD3		; 23
   1696  f85f		       a6 d3		      LDX	ScoreD3	; 3
   1697  f861		       bd 00 fd 	      LDA	Font,X	;4
   1698  f864		       4a		      LSR		;2
   1699  f865		       4a		      LSR		;2
   1700  f866		       4a		      LSR		;2
   1701  f867		       4a		      LSR		;2
   1702  f868		       85 83		      STA	PF2Cache	;3
   1703  f86a		       c6 d3		      DEC	ScoreD3	;5
   1704  f86c
   1705  f86c				   DrawScoreD4		; 20
   1706  f86c		       a6 d4		      LDX	ScoreD4	; 3
   1707  f86e		       bd 00 fd 	      LDA	Font,X	;4
   1708  f871		       29 f0		      AND	#%11110000	;2
   1709  f873		       05 83		      ORA	PF2Cache	;3
   1710  f875		       85 83		      STA	PF2Cache	;3
   1711  f877		       c6 d4		      DEC	ScoreD4	;5
   1712  f879
   1713  f879
   1714  f879		       88		      DEY		;2
   1715  f87a		       10 b2		      BPL	ScoreLoop	;4
   1716  f87c
   1717  f87c		       85 02		      STA	WSYNC
   1718  f87e		       20 2e f7 	      JSR	LoadAll
   1719  f881		       60		      RTS		; 6
   1720  f882
   1721  f882				   PrintRightDecimalDigits
   1722  f882		       b9 00 00 	      LDA	0,Y
   1723  f885		       4a		      LSR
   1724  f886		       4a		      LSR
   1725  f887		       4a		      LSR
   1726  f888		       4a		      LSR
   1727  f889		       aa		      TAX
   1728  f88a		       bd be fd 	      LDA	FontLookup,X	;4
   1729  f88d		       85 d2		      STA	ScoreD2	;3
   1730  f88f
   1731  f88f		       b9 00 00 	      LDA	0,Y
   1732  f892		       29 0f		      AND	#%00001111
   1733  f894		       aa		      TAX
   1734  f895		       bd be fd 	      LDA	FontLookup,X	;4
   1735  f898		       85 d3		      STA	ScoreD3	;3
   1736  f89a
   1737  f89a		       c8		      INY
   1738  f89b		       b9 00 00 	      LDA	0,Y
   1739  f89e		       4a		      LSR
   1740  f89f		       4a		      LSR
   1741  f8a0		       4a		      LSR
   1742  f8a1		       4a		      LSR
   1743  f8a2		       aa		      TAX
   1744  f8a3		       bd be fd 	      LDA	FontLookup,X	;4
   1745  f8a6		       85 d0		      STA	ScoreD0	;3
   1746  f8a8
   1747  f8a8		       b9 00 00 	      LDA	0,Y
   1748  f8ab		       29 0f		      AND	#%00001111
   1749  f8ad		       aa		      TAX
   1750  f8ae		       bd be fd 	      LDA	FontLookup,X	;4
   1751  f8b1		       85 d1		      STA	ScoreD1	;3
   1752  f8b3
   1753  f8b3		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1754  f8b5		       85 d4		      STA	ScoreD4
   1755  f8b7		       60		      RTS
   1756  f8b8
   1757  f8b8				   PrintLastLeftDecimalDigits
   1758  f8b8		       b9 00 00 	      LDA	0,Y
   1759  f8bb		       4a		      LSR
   1760  f8bc		       4a		      LSR
   1761  f8bd		       4a		      LSR
   1762  f8be		       4a		      LSR
   1763  f8bf		       aa		      TAX
   1764  f8c0		       bd be fd 	      LDA	FontLookup,X	;4
   1765  f8c3		       85 d3		      STA	ScoreD3	;3
   1766  f8c5		       b9 00 00 	      LDA	0,Y
   1767  f8c8		       29 0f		      AND	#%00001111
   1768  f8ca		       aa		      TAX
   1769  f8cb		       bd be fd 	      LDA	FontLookup,X	;4
   1770  f8ce		       85 d4		      STA	ScoreD4	;3
   1771  f8d0		       60		      RTS
   1772  f8d1
   1773  f8d1				   PrintZerosLeft
   1774  f8d1		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1775  f8d3		       85 d2		      STA	ScoreD2
   1776  f8d5		       85 d3		      STA	ScoreD3
   1777  f8d7		       85 d4		      STA	ScoreD4
   1778  f8d9		       60		      RTS
   1779  f8da
   1780  f8da				   DrawGameOverScoreLine
   1781  f8da		       85 02		      STA	WSYNC
   1782  f8dc		       20 2a f8 	      JSR	PrintScore
   1783  f8df		       85 02		      STA	WSYNC
   1784  f8e1		       85 02		      STA	WSYNC
   1785  f8e3		       20 1f f7 	      JSR	ClearPF
   1786  f8e6		       60		      RTS
   1787  f8e7
   1788  f8e7				   DrawGameOverScreenLeft
   1789  f8e7		       85 02		      STA	WSYNC
   1790  f8e9		       20 1f f7 	      JSR	ClearPF
   1791  f8ec
   1792  f8ec				   DrawGlideTimerLeft
   1793  f8ec		       20 ae f9 	      JSR	Sleep8Lines
   1794  f8ef		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1795  f8f1		       85 06		      STA	COLUP0
   1796  f8f3		       85 02		      STA	WSYNC
   1797  f8f5		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1798  f8f7		       85 d0		      STA	ScoreD0
   1799  f8f9		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1800  f8fb		       85 d1		      STA	ScoreD1
   1801  f8fd		       20 d1 f8 	      JSR	PrintZerosLeft
   1802  f900		       20 da f8 	      JSR	DrawGameOverScoreLine
   1803  f903
   1804  f903				   DrawHitCountLeft
   1805  f903		       20 ae f9 	      JSR	Sleep8Lines
   1806  f906		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1807  f908		       85 06		      STA	COLUP0
   1808  f90a		       85 02		      STA	WSYNC
   1809  f90c		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1810  f90e		       85 d0		      STA	ScoreD0
   1811  f910		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1812  f912		       85 d1		      STA	ScoreD1
   1813  f914		       20 d1 f8 	      JSR	PrintZerosLeft
   1814  f917		       20 da f8 	      JSR	DrawGameOverScoreLine
   1815  f91a
   1816  f91a				   DrawCheckpointCountLeft
   1817  f91a		       20 ae f9 	      JSR	Sleep8Lines
   1818  f91d		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1819  f91f		       85 06		      STA	COLUP0
   1820  f921		       85 02		      STA	WSYNC
   1821  f923		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1822  f925		       85 d0		      STA	ScoreD0
   1823  f927		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1824  f929		       85 d1		      STA	ScoreD1
   1825  f92b		       20 d1 f8 	      JSR	PrintZerosLeft
   1826  f92e		       20 da f8 	      JSR	DrawGameOverScoreLine
   1827  f931
   1828  f931				   DrawGameVersionLeft
   1829  f931		       20 ae f9 	      JSR	Sleep8Lines
   1830  f934		       a9 49		      LDA	#VERSION_COLOR
   1831  f936		       85 06		      STA	COLUP0
   1832  f938
   1833  f938		       a5 c6		      LDA	GameMode
   1834  f93a		       aa		      TAX
   1835  f93b		       bd be fd 	      LDA	FontLookup,X	;4
   1836  f93e		       85 d0		      STA	ScoreD0	;3
   1837  f940
   1838  f940		       a5 c7		      LDA	CurrentCarId
   1839  f942		       aa		      TAX
   1840  f943		       bd be fd 	      LDA	FontLookup,X	;4
   1841  f946		       85 d1		      STA	ScoreD1	;3
   1842  f948
   1843  f948		       a5 db		      LDA	StartSWCHB
   1844  f94a		       29 40		      AND	#%01000000	; P0 difficulty
   1845  f94c		       49 40		      EOR	#%01000000	; Reverse bytes
   1846  f94e		       2a		      ROL
   1847  f94f		       2a		      ROL
   1848  f950		       2a		      ROL
   1849  f951		       18		      CLC
   1850  f952		       69 0a		      ADC	#10
   1851  f954		       aa		      TAX
   1852  f955		       bd be fd 	      LDA	FontLookup,X	;4
   1853  f958		       85 d2		      STA	ScoreD2	;3
   1854  f95a
   1855  f95a		       a5 db		      LDA	StartSWCHB
   1856  f95c		       29 80		      AND	#%10000000	; P0 difficulty
   1857  f95e		       49 80		      EOR	#%10000000	; Reverse bytes
   1858  f960		       2a		      ROL
   1859  f961		       2a		      ROL
   1860  f962		       18		      CLC
   1861  f963		       69 0a		      ADC	#10
   1862  f965		       aa		      TAX
   1863  f966		       bd be fd 	      LDA	FontLookup,X	;4
   1864  f969		       85 d3		      STA	ScoreD3	;3
   1865  f96b
   1866  f96b		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1867  f96d		       85 d4		      STA	ScoreD4
   1868  f96f
   1869  f96f		       20 da f8 	      JSR	DrawGameOverScoreLine
   1870  f972
   1871  f972		       4c 8b f9 	      JMP	FinalizeDrawGameOver
   1872  f975
   1873  f975				   DrawGameOverScreenRight
   1874  f975		       85 02		      STA	WSYNC
   1875  f977		       20 1f f7 	      JSR	ClearPF
   1876  f97a
   1877  f97a				   DrawVersionRight
   1878  f97a		       20 ae f9 	      JSR	Sleep8Lines
   1879  f97d		       a9 49		      LDA	#VERSION_COLOR
   1880  f97f		       85 07		      STA	COLUP1
   1881  f981		       85 02		      STA	WSYNC
   1882  f983		       a2 78		      LDX	#<VersionText
   1883  f985		       20 9a f7 	      JSR	PrintStaticText
   1884  f988		       20 da f8 	      JSR	DrawGameOverScoreLine
   1885  f98b
   1886  f98b				   FinalizeDrawGameOver
   1887  f98b		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1888  f98d		       85 c9		      STA	ScoreFontColor
   1889  f98f		       20 a5 f9 	      JSR	Sleep4Lines
   1890  f992		       20 b5 f9 	      JSR	Sleep32Lines
   1891  f995		       20 b5 f9 	      JSR	Sleep32Lines
   1892  f998		       4c ed f5 	      JMP	PrepareOverscan
   1893  f99b
   1894  f99b				   WaitForVblankEnd
   1895  f99b		       ad 84 02 	      LDA	INTIM
   1896  f99e		       d0 fb		      BNE	WaitForVblankEnd
   1897  f9a0		       85 02		      STA	WSYNC
   1898  f9a2		       85 01		      STA	VBLANK
   1899  f9a4		       60		      RTS
   1900  f9a5
   1901  f9a5				   Sleep4Lines
   1902  f9a5		       85 02		      STA	WSYNC
   1903  f9a7		       85 02		      STA	WSYNC
   1904  f9a9		       85 02		      STA	WSYNC
   1905  f9ab		       85 02		      STA	WSYNC
   1906  f9ad		       60		      RTS
   1907  f9ae
   1908  f9ae				   Sleep8Lines
   1909  f9ae		       20 a5 f9 	      JSR	Sleep4Lines
   1910  f9b1		       20 a5 f9 	      JSR	Sleep4Lines
   1911  f9b4		       60		      RTS
   1912  f9b5
   1913  f9b5				   Sleep32Lines
   1914  f9b5		       20 ae f9 	      JSR	Sleep8Lines
   1915  f9b8		       20 ae f9 	      JSR	Sleep8Lines
   1916  f9bb		       20 ae f9 	      JSR	Sleep8Lines
   1917  f9be		       20 ae f9 	      JSR	Sleep8Lines
   1918  f9c1		       60		      RTS
   1919  f9c2
   1920  f9c2				   ConfigureCarSprites
   1921  f9c2		       a5 8c		      LDA	FrameCount0
   1922  f9c4		       29 01		      AND	#%00000001
   1923  f9c6		       d0 0b		      BNE	LoadForRightScreenSprites
   1924  f9c8				   LoadForLeftScreenSprites
   1925  f9c8		       a5 c7		      LDA	CurrentCarId
   1926  f9ca		       85 b0		      STA	Tmp0
   1927  f9cc		       a5 c8		      LDA	OpCurrentCarId
   1928  f9ce		       85 b1		      STA	Tmp1
   1929  f9d0		       4c db f9 	      JMP	LoadCarSpritesFromIds
   1930  f9d3				   LoadForRightScreenSprites
   1931  f9d3		       a5 c7		      LDA	CurrentCarId
   1932  f9d5		       85 b1		      STA	Tmp1
   1933  f9d7		       a5 c8		      LDA	OpCurrentCarId
   1934  f9d9		       85 b0		      STA	Tmp0
   1935  f9db
   1936  f9db				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1937  f9db		       a4 b0		      LDY	Tmp0
   1938  f9dd		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1939  f9e0		       85 d7		      STA	CarSpritePointerL
   1940  f9e2		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1941  f9e5		       85 d8		      STA	CarSpritePointerH
   1942  f9e7				   ConfigureOpponentCarSprite
   1943  f9e7		       a4 b1		      LDY	Tmp1
   1944  f9e9		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1945  f9ec		       85 d9		      STA	EnemyCarSpritePointerL
   1946  f9ee		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1947  f9f1		       85 da		      STA	EnemyCarSpritePointerH
   1948  f9f3		       60		      RTS
   1949  f9f4
   1950  f9f4							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1951  f9f4							;X player 0 or 1
   1952  f9f4				   SelectCarWithDpad
   1953  f9f4		       a0 03		      LDY	#3
   1954  f9f6				   SelectCarWithDpadLoop
   1955  f9f6		       ad 80 02 	      LDA	SWCHA
   1956  f9f9		       25 b0		      AND	Tmp0
   1957  f9fb		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1958  f9fd		       98		      TYA
   1959  f9fe		       95 c7		      STA	CurrentCarId,X
   1960  fa00				   ContinueSelectCarWithDpadLoop
   1961  fa00		       46 b0		      LSR	Tmp0
   1962  fa02		       88		      DEY
   1963  fa03		       10 f1		      BPL	SelectCarWithDpadLoop
   1964  fa05		       60		      RTS
   1965  fa06
   1966  fa06							; Movement and colision are binded because the car must be moved after duplicate size.
   1967  fa06							; Use X for the player
   1968  fa06							; Tmp0 SWCHA Turn left Mask
   1969  fa06							; Tmp1 SWCHA Turn right Mask
   1970  fa06				   TestCollisionAndMove
   1971  fa06							; Until store the movemnt, Y contains the value to be stored.
   1972  fa06							; see if player0 colides with the rest
   1973  fa06		       a5 00		      LDA	CXM0P
   1974  fa08		       05 01		      ORA	CXM1P
   1975  fa0a		       05 02		      ORA	CXP0FB
   1976  fa0c							; ORA CXPPMM ; Collision between players will have its own rules
   1977  fa0c		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
   1978  fa0e		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1979  fa10		       b5 b4		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1980  fa12		       d0 25		      BNE	NoCollision
   1981  fa14		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1982  fa16		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1983  fa18		       f0 1f		      BEQ	NoCollision
   1984  fa1a		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1985  fa1c		       f0 1b		      BEQ	NoCollision
   1986  fa1e		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1987  fa20		       95 b4		      STA	CollisionCounter,X	;and store as colision.
   1988  fa22		       b5 f2		      LDA	Player0SpeedH,X
   1989  fa24		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1990  fa26		       a9 10		      LDA	#COLLISION_SPEED_L
   1991  fa28		       d5 f0		      CMP	Player0SpeedL,X
   1992  fa2a		       b0 04		      BCS	SkipSetColisionSpeedL
   1993  fa2c				   SetColisionSpeedL
   1994  fa2c		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1995  fa2e		       95 f0		      STA	Player0SpeedL,X
   1996  fa30				   SkipSetColisionSpeedL
   1997  fa30		       a9 00		      LDA	#0
   1998  fa32		       95 f2		      STA	Player0SpeedH,X
   1999  fa34		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   2000  fa36		       4c 87 fa 	      JMP	StoreHMove	; We keep position consistent
   2001  fa39				   NoCollision
   2002  fa39
   2003  fa39				   DecrementCollision
   2004  fa39		       b5 b4		      LDA	CollisionCounter,X
   2005  fa3b		       f0 06		      BEQ	FinishDecrementCollision
   2006  fa3d		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   2007  fa3f		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   2008  fa41		       d6 b4		      DEC	CollisionCounter,X
   2009  fa43				   FinishDecrementCollision
   2010  fa43
   2011  fa43				   ResetPlayerSize
   2012  fa43		       d0 04		      BNE	FinishResetPlayerSize
   2013  fa45		       a9 30		      LDA	#%00110000
   2014  fa47		       95 04		      STA	NUSIZ0,X	;
   2015  fa49				   FinishResetPlayerSize
   2016  fa49
   2017  fa49				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   2018  fa49		       b5 b4		      LDA	CollisionCounter,X
   2019  fa4b		       c9 01		      CMP	#1	; Last frame before reset
   2020  fa4d		       d0 05		      BNE	SkipResetPlayerPosition
   2021  fa4f		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   2022  fa51		       4c 87 fa 	      JMP	StoreHMove
   2023  fa54				   SkipResetPlayerPosition
   2024  fa54
   2025  fa54				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   2026  fa54		       b5 c7		      LDA	CurrentCarId,X
   2027  fa56		       c9 03		      CMP	#CAR_ID_DRAGSTER
   2028  fa58		       d0 08		      BNE	PrepareReadXAxis
   2029  fa5a		       a0 00		      LDY	#0
   2030  fa5c		       a5 8c		      LDA	FrameCount0
   2031  fa5e		       29 01		      AND	#DRAGSTER_TURN_MASK
   2032  fa60		       f0 25		      BEQ	StoreHMove	; Ignore movement on some frames
   2033  fa62
   2034  fa62							; for left and right, we're gonna 
   2035  fa62							; set the horizontal speed, and then do
   2036  fa62							; a single HMOVE.  We'll use X to hold the
   2037  fa62							; horizontal speed, then store it in the 
   2038  fa62							; appropriate register
   2039  fa62				   PrepareReadXAxis
   2040  fa62		       a0 00		      LDY	#0
   2041  fa64		       a5 b6		      LDA	Player0X
   2042  fa66				   BeginReadLeft
   2043  fa66		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
   2044  fa68		       a5 b0		      LDA	Tmp0	;Left mask set before call (player 0 or 1)
   2045  fa6a		       2c 80 02 	      BIT	SWCHA
   2046  fa6d		       d0 07		      BNE	SkipMoveLeft
   2047  fa6f		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   2048  fa71		       d6 b6		      DEC	Player0X,X
   2049  fa73		       4c 87 fa 	      JMP	StoreHMove	; Cannot move left and right...
   2050  fa76				   SkipMoveLeft
   2051  fa76				   BeginReadRight
   2052  fa76		       a5 b6		      LDA	Player0X
   2053  fa78		       c9 2c		      CMP	#PLAYER_MAX_X
   2054  fa7a		       f0 0b		      BEQ	SkipMoveRight	; At max already
   2055  fa7c		       a5 b1		      LDA	Tmp1	;Right mask set before call (player 0 or 1)
   2056  fa7e		       2c 80 02 	      BIT	SWCHA
   2057  fa81		       d0 04		      BNE	SkipMoveRight
   2058  fa83		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   2059  fa85		       f6 b6		      INC	Player0X,X
   2060  fa87				   SkipMoveRight
   2061  fa87				   StoreHMove
   2062  fa87		       94 20		      STY	HMP0,X	;set the move for player 0
   2063  fa89
   2064  fa89				   ClearCollision
   2065  fa89		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   2066  fa8b		       60		      RTS
   2067  fa8c
   2068  fa8c							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2069  fc00					      org	$FC00
   2070  fc00				   QrCode1
   2071  fc00		       1f		      .byte.b	#%00011111
   2072  fc01		       10		      .byte.b	#%00010000
   2073  fc02		       17		      .byte.b	#%00010111
   2074  fc03		       17		      .byte.b	#%00010111
   2075  fc04		       17		      .byte.b	#%00010111
   2076  fc05		       10		      .byte.b	#%00010000
   2077  fc06		       1f		      .byte.b	#%00011111
   2078  fc07		       00		      .byte.b	#%00000000
   2079  fc08		       17		      .byte.b	#%00010111
   2080  fc09		       10		      .byte.b	#%00010000
   2081  fc0a		       1d		      .byte.b	#%00011101
   2082  fc0b		       16		      .byte.b	#%00010110
   2083  fc0c		       03		      .byte.b	#%00000011
   2084  fc0d		       19		      .byte.b	#%00011001
   2085  fc0e		       13		      .byte.b	#%00010011
   2086  fc0f		       1c		      .byte.b	#%00011100
   2087  fc10		       0b		      .byte.b	#%00001011
   2088  fc11		       00		      .byte.b	#%00000000
   2089  fc12		       1f		      .byte.b	#%00011111
   2090  fc13		       10		      .byte.b	#%00010000
   2091  fc14		       17		      .byte.b	#%00010111
   2092  fc15		       17		      .byte.b	#%00010111
   2093  fc16		       17		      .byte.b	#%00010111
   2094  fc17		       10		      .byte.b	#%00010000
   2095  fc18		       1f		      .byte.b	#%00011111
   2096  fc19
   2097  fc19				   QrCode2
   2098  fc19		       c3		      .byte.b	#%11000011
   2099  fc1a		       9a		      .byte.b	#%10011010
   2100  fc1b		       82		      .byte.b	#%10000010
   2101  fc1c		       da		      .byte.b	#%11011010
   2102  fc1d		       aa		      .byte.b	#%10101010
   2103  fc1e		       ca		      .byte.b	#%11001010
   2104  fc1f		       f3		      .byte.b	#%11110011
   2105  fc20		       78		      .byte.b	#%01111000
   2106  fc21		       df		      .byte.b	#%11011111
   2107  fc22		       fc		      .byte.b	#%11111100
   2108  fc23		       c7		      .byte.b	#%11000111
   2109  fc24		       98		      .byte.b	#%10011000
   2110  fc25		       23		      .byte.b	#%00100011
   2111  fc26		       b9		      .byte.b	#%10111001
   2112  fc27		       d2		      .byte.b	#%11010010
   2113  fc28		       30		      .byte.b	#%00110000
   2114  fc29		       eb		      .byte.b	#%11101011
   2115  fc2a		       28		      .byte.b	#%00101000
   2116  fc2b		       ab		      .byte.b	#%10101011
   2117  fc2c		       72		      .byte.b	#%01110010
   2118  fc2d		       fa		      .byte.b	#%11111010
   2119  fc2e		       7a		      .byte.b	#%01111010
   2120  fc2f		       32		      .byte.b	#%00110010
   2121  fc30		       3a		      .byte.b	#%00111010
   2122  fc31		       63		      .byte.b	#%01100011
   2123  fc32
   2124  fc32				   QrCode3
   2125  fc32		       98		      .byte.b	#%10011000
   2126  fc33		       c3		      .byte.b	#%11000011
   2127  fc34		       39		      .byte.b	#%00111001
   2128  fc35		       34		      .byte.b	#%00110100
   2129  fc36		       ff		      .byte.b	#%11111111
   2130  fc37		       71		      .byte.b	#%01110001
   2131  fc38		       d5		      .byte.b	#%11010101
   2132  fc39		       d1		      .byte.b	#%11010001
   2133  fc3a		       5f		      .byte.b	#%01011111
   2134  fc3b		       26		      .byte.b	#%00100110
   2135  fc3c		       2d		      .byte.b	#%00101101
   2136  fc3d		       e9		      .byte.b	#%11101001
   2137  fc3e		       d6		      .byte.b	#%11010110
   2138  fc3f		       26		      .byte.b	#%00100110
   2139  fc40		       ba		      .byte.b	#%10111010
   2140  fc41		       03		      .byte.b	#%00000011
   2141  fc42		       dd		      .byte.b	#%11011101
   2142  fc43		       e0		      .byte.b	#%11100000
   2143  fc44		       57		      .byte.b	#%01010111
   2144  fc45		       14		      .byte.b	#%00010100
   2145  fc46		       35		      .byte.b	#%00110101
   2146  fc47		       e5		      .byte.b	#%11100101
   2147  fc48		       b5		      .byte.b	#%10110101
   2148  fc49		       d4		      .byte.b	#%11010100
   2149  fc4a		       97		      .byte.b	#%10010111
   2150  fc4b
   2151  fc4b				   QrCode4
   2152  fc4b		       09		      .byte.b	#%00001001
   2153  fc4c		       0e		      .byte.b	#%00001110
   2154  fc4d		       0f		      .byte.b	#%00001111
   2155  fc4e		       0c		      .byte.b	#%00001100
   2156  fc4f		       0c		      .byte.b	#%00001100
   2157  fc50		       08		      .byte.b	#%00001000
   2158  fc51		       08		      .byte.b	#%00001000
   2159  fc52		       06		      .byte.b	#%00000110
   2160  fc53		       06		      .byte.b	#%00000110
   2161  fc54		       0b		      .byte.b	#%00001011
   2162  fc55		       0f		      .byte.b	#%00001111
   2163  fc56		       04		      .byte.b	#%00000100
   2164  fc57		       08		      .byte.b	#%00001000
   2165  fc58		       0f		      .byte.b	#%00001111
   2166  fc59		       09		      .byte.b	#%00001001
   2167  fc5a		       07		      .byte.b	#%00000111
   2168  fc5b		       05		      .byte.b	#%00000101
   2169  fc5c		       00		      .byte.b	#%00000000
   2170  fc5d		       0f		      .byte.b	#%00001111
   2171  fc5e		       08		      .byte.b	#%00001000
   2172  fc5f		       0b		      .byte.b	#%00001011
   2173  fc60		       0b		      .byte.b	#%00001011
   2174  fc61		       0b		      .byte.b	#%00001011
   2175  fc62		       08		      .byte.b	#%00001000
   2176  fc63		       0f		      .byte.b	#%00001111
   2177  fc64
   2178  fc64							; Moved here because of rom space.
   2179  fc64							; The only SBR in constants space
   2180  fc64				   DrawQrCode
   2181  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2182  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2183  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2184  fc6a		       85 0a		      STA	CTRLPF
   2185  fc6c		       20 0d f7 	      JSR	ClearAll	; To be 100 sure!
   2186  fc6f		       ad 82 02 	      LDA	SWCHB
   2187  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2188  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2189  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2190  fc78		       86 09		      STX	COLUBK
   2191  fc7a		       84 08		      STY	COLUPF
   2192  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2193  fc7f				   StoreReversedQrCode
   2194  fc7f		       86 08		      STX	COLUPF
   2195  fc81		       84 09		      STY	COLUBK
   2196  fc83
   2197  fc83				   ContinueQrCode
   2198  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2199  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2200  fc87		       20 9b f9 	      JSR	WaitForVblankEnd
   2201  fc8a		       20 ae f9 	      JSR	Sleep8Lines
   2202  fc8d		       20 ae f9 	      JSR	Sleep8Lines
   2203  fc90		       20 ae f9 	      JSR	Sleep8Lines
   2204  fc93
   2205  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2206  fc93		       85 02		      STA	WSYNC
   2207  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2208  fc98		       85 0e		      STA	PF1	;3
   2209  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2210  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2212  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2213  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2214  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2215  fcb5		       85 0e		      STA	PF1	;3
   2216  fcb7
   2217  fcb7		       ca		      DEX		;2
   2218  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2219  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2220  fcbc		       88		      DEY		;2
   2221  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2222  fcbf
   2223  fcbf				   EndQrCodeLoop
   2224  fcbf		       85 02		      STA	WSYNC	;
   2225  fcc1		       a9 00		      LDA	#0
   2226  fcc3		       85 0e		      STA	PF1	;3
   2227  fcc5		       85 0f		      STA	PF2	;3
   2228  fcc7
   2229  fcc7		       20 b5 f9 	      JSR	Sleep32Lines
   2230  fcca		       4c ed f5 	      JMP	PrepareOverscan
   2231  fccd
   2232  fd00					      org	$FD00
   2233  fd00				   Font
   2234  fd00				   C0
   2235  fd00		       e7		      .byte.b	#%11100111	;
   2236  fd01		       a5		      .byte.b	#%10100101	; 
   2237  fd02		       a5		      .byte.b	#%10100101	; 
   2238  fd03		       a5		      .byte.b	#%10100101	; 
   2239  fd04		       e7		      .byte.b	#%11100111	;	
   2240  fd05				   C1
   2241  fd05		       e7		      .byte.b	#%11100111	;
   2242  fd06		       42		      .byte.b	#%01000010	; 
   2243  fd07		       42		      .byte.b	#%01000010	; 
   2244  fd08		       42		      .byte.b	#%01000010	; 
   2245  fd09		       66		      .byte.b	#%01100110	;
   2246  fd0a				   C2
   2247  fd0a		       e7		      .byte.b	#%11100111	;
   2248  fd0b		       24		      .byte.b	#%00100100	; 
   2249  fd0c		       e7		      .byte.b	#%11100111	; 
   2250  fd0d		       81		      .byte.b	#%10000001	; 
   2251  fd0e		       e7		      .byte.b	#%11100111	;
   2252  fd0f				   C3
   2253  fd0f		       e7		      .byte.b	#%11100111	;
   2254  fd10		       81		      .byte.b	#%10000001	; 
   2255  fd11		       e7		      .byte.b	#%11100111	; 
   2256  fd12		       81		      .byte.b	#%10000001	; 
   2257  fd13		       e7		      .byte.b	#%11100111	;
   2258  fd14				   C4
   2259  fd14		       81		      .byte.b	#%10000001	;
   2260  fd15		       81		      .byte.b	#%10000001	; 
   2261  fd16		       e7		      .byte.b	#%11100111	; 
   2262  fd17		       a5		      .byte.b	#%10100101	; 
   2263  fd18		       a5		      .byte.b	#%10100101	;
   2264  fd19				   C5
   2265  fd19		       e7		      .byte.b	#%11100111	;
   2266  fd1a		       81		      .byte.b	#%10000001	; 
   2267  fd1b		       e7		      .byte.b	#%11100111	; 
   2268  fd1c		       24		      .byte.b	#%00100100	; 
   2269  fd1d		       e7		      .byte.b	#%11100111	;
   2270  fd1e				   C6
   2271  fd1e		       e7		      .byte.b	#%11100111	;
   2272  fd1f		       a5		      .byte.b	#%10100101	; 
   2273  fd20		       e7		      .byte.b	#%11100111	; 
   2274  fd21		       24		      .byte.b	#%00100100	; 
   2275  fd22		       e7		      .byte.b	#%11100111	;
   2276  fd23				   C7
   2277  fd23		       81		      .byte.b	#%10000001	;
   2278  fd24		       81		      .byte.b	#%10000001	; 
   2279  fd25		       81		      .byte.b	#%10000001	; 
   2280  fd26		       81		      .byte.b	#%10000001	; 
   2281  fd27		       e7		      .byte.b	#%11100111	;
   2282  fd28				   C8
   2283  fd28		       e7		      .byte.b	#%11100111	;
   2284  fd29		       a5		      .byte.b	#%10100101	; 
   2285  fd2a		       e7		      .byte.b	#%11100111	; 
   2286  fd2b		       a5		      .byte.b	#%10100101	; 
   2287  fd2c		       e7		      .byte.b	#%11100111	;
   2288  fd2d				   C9
   2289  fd2d		       e7		      .byte.b	#%11100111	;
   2290  fd2e		       81		      .byte.b	#%10000001	; 
   2291  fd2f		       e7		      .byte.b	#%11100111	; 
   2292  fd30		       a5		      .byte.b	#%10100101	; 
   2293  fd31		       e7		      .byte.b	#%11100111	;
   2294  fd32				   CA
   2295  fd32		       a5		      .byte.b	#%10100101	;
   2296  fd33		       a5		      .byte.b	#%10100101	; 
   2297  fd34		       e7		      .byte.b	#%11100111	; 
   2298  fd35		       a5		      .byte.b	#%10100101	; 
   2299  fd36		       e7		      .byte.b	#%11100111	;
   2300  fd37				   CB
   2301  fd37		       66		      .byte.b	#%01100110	;
   2302  fd38		       a5		      .byte.b	#%10100101	; 
   2303  fd39		       66		      .byte.b	#%01100110	; 
   2304  fd3a		       a5		      .byte.b	#%10100101	;
   2305  fd3b		       66		      .byte.b	#%01100110	;
   2306  fd3c				   CC
   2307  fd3c		       e7		      .byte.b	#%11100111	;
   2308  fd3d		       24		      .byte.b	#%00100100	; 
   2309  fd3e		       24		      .byte.b	#%00100100	; 
   2310  fd3f		       24		      .byte.b	#%00100100	;
   2311  fd40		       e7		      .byte.b	#%11100111	;
   2312  fd41
   2313  fd41				   CD
   2314  fd41		       66		      .byte.b	#%01100110	;
   2315  fd42		       a5		      .byte.b	#%10100101	; 
   2316  fd43		       a5		      .byte.b	#%10100101	; 
   2317  fd44		       a5		      .byte.b	#%10100101	;
   2318  fd45		       66		      .byte.b	#%01100110	;
   2319  fd46
   2320  fd46				   CE
   2321  fd46		       e7		      .byte.b	#%11100111	;
   2322  fd47		       24		      .byte.b	#%00100100	; 
   2323  fd48		       e7		      .byte.b	#%11100111	; 
   2324  fd49		       24		      .byte.b	#%00100100	; 
   2325  fd4a		       e7		      .byte.b	#%11100111	;
   2326  fd4b
   2327  fd4b				   CF
   2328  fd4b		       24		      .byte.b	#%00100100	;
   2329  fd4c		       24		      .byte.b	#%00100100	; 
   2330  fd4d		       e7		      .byte.b	#%11100111	; 
   2331  fd4e		       24		      .byte.b	#%00100100	; 
   2332  fd4f		       e7		      .byte.b	#%11100111	;
   2333  fd50
   2334  fd50				   CG
   2335  fd50		       c3		      .byte.b	#%11000011	;
   2336  fd51		       a5		      .byte.b	#%10100101	; 
   2337  fd52		       a5		      .byte.b	#%10100101	; 
   2338  fd53		       24		      .byte.b	#%00100100	; 
   2339  fd54		       c3		      .byte.b	#%11000011	;	
   2340  fd55
   2341  fd55				   CH
   2342  fd55		       a5		      .byte.b	#%10100101	;
   2343  fd56		       a5		      .byte.b	#%10100101	; 
   2344  fd57		       e7		      .byte.b	#%11100111	; 
   2345  fd58		       a5		      .byte.b	#%10100101	; 
   2346  fd59		       a5		      .byte.b	#%10100101	;
   2347  fd5a
   2348  fd5a				   CK
   2349  fd5a		       a5		      .byte.b	#%10100101	;
   2350  fd5b		       a5		      .byte.b	#%10100101	; 
   2351  fd5c		       66		      .byte.b	#%01100110	; 
   2352  fd5d		       a5		      .byte.b	#%10100101	; 
   2353  fd5e		       a5		      .byte.b	#%10100101	;
   2354  fd5f
   2355  fd5f				   CL
   2356  fd5f		       e7		      .byte.b	#%11100111	;
   2357  fd60		       24		      .byte.b	#%00100100	; 
   2358  fd61		       24		      .byte.b	#%00100100	; 
   2359  fd62		       24		      .byte.b	#%00100100	; 
   2360  fd63		       24		      .byte.b	#%00100100	;
   2361  fd64
   2362  fd64				   CI
   2363  fd64		       42		      .byte.b	#%01000010	;
   2364  fd65		       42		      .byte.b	#%01000010	; 
   2365  fd66		       42		      .byte.b	#%01000010	; 
   2366  fd67		       42		      .byte.b	#%01000010	; 
   2367  fd68		       42		      .byte.b	#%01000010	;
   2368  fd69
   2369  fd69				   CM
   2370  fd69		       a5		      .byte.b	#%10100101	;
   2371  fd6a		       a5		      .byte.b	#%10100101	; 
   2372  fd6b		       a5		      .byte.b	#%10100101	; 
   2373  fd6c		       e7		      .byte.b	#%11100111	; 
   2374  fd6d		       a5		      .byte.b	#%10100101	;
   2375  fd6e
   2376  fd6e				   CN
   2377  fd6e		       a5		      .byte.b	#%10100101	;
   2378  fd6f		       a5		      .byte.b	#%10100101	; 
   2379  fd70		       a5		      .byte.b	#%10100101	; 
   2380  fd71		       a5		      .byte.b	#%10100101	; 
   2381  fd72		       66		      .byte.b	#%01100110	;	
   2382  fd73
   2383  fd73
   2384  fd73				   CO
   2385  fd73		       42		      .byte.b	#%01000010	;
   2386  fd74		       a5		      .byte.b	#%10100101	; 
   2387  fd75		       a5		      .byte.b	#%10100101	; 
   2388  fd76		       a5		      .byte.b	#%10100101	; 
   2389  fd77		       42		      .byte.b	#%01000010	;	
   2390  fd78
   2391  fd78				   CP
   2392  fd78		       24		      .byte.b	#%00100100	;
   2393  fd79		       24		      .byte.b	#%00100100	; 
   2394  fd7a		       e7		      .byte.b	#%11100111	; 
   2395  fd7b		       a5		      .byte.b	#%10100101	; 
   2396  fd7c		       e7		      .byte.b	#%11100111	;
   2397  fd7d
   2398  fd7d				   CR
   2399  fd7d		       a5		      .byte.b	#%10100101	;
   2400  fd7e		       a5		      .byte.b	#%10100101	; 
   2401  fd7f		       66		      .byte.b	#%01100110	; 
   2402  fd80		       a5		      .byte.b	#%10100101	; 
   2403  fd81		       66		      .byte.b	#%01100110	;
   2404  fd82
   2405  fd82				   CS
   2406  fd82		       66		      .byte.b	#%01100110	;
   2407  fd83		       81		      .byte.b	#%10000001	; 
   2408  fd84		       42		      .byte.b	#%01000010	; 
   2409  fd85		       24		      .byte.b	#%00100100	; 
   2410  fd86		       c3		      .byte.b	#%11000011	;
   2411  fd87
   2412  fd87				   CT
   2413  fd87		       42		      .byte.b	#%01000010	;
   2414  fd88		       42		      .byte.b	#%01000010	; 
   2415  fd89		       42		      .byte.b	#%01000010	; 
   2416  fd8a		       42		      .byte.b	#%01000010	; 
   2417  fd8b		       e7		      .byte.b	#%11100111	;
   2418  fd8c
   2419  fd8c				   CV
   2420  fd8c		       42		      .byte.b	#%01000010	;
   2421  fd8d		       a5		      .byte.b	#%10100101	; 
   2422  fd8e		       a5		      .byte.b	#%10100101	; 
   2423  fd8f		       a5		      .byte.b	#%10100101	; 
   2424  fd90		       a5		      .byte.b	#%10100101	;	
   2425  fd91
   2426  fd91				   CY
   2427  fd91		       42		      .byte.b	#%01000010	;
   2428  fd92		       42		      .byte.b	#%01000010	; 
   2429  fd93		       42		      .byte.b	#%01000010	; 
   2430  fd94		       a5		      .byte.b	#%10100101	; 
   2431  fd95		       a5		      .byte.b	#%10100101	;
   2432  fd96
   2433  fd96				   CW
   2434  fd96		       a5		      .byte.b	#%10100101	;
   2435  fd97		       e7		      .byte.b	#%11100111	; 
   2436  fd98		       a5		      .byte.b	#%10100101	; 
   2437  fd99		       a5		      .byte.b	#%10100101	; 
   2438  fd9a		       a5		      .byte.b	#%10100101	;
   2439  fd9b
   2440  fd9b				   CZ
   2441  fd9b		       e7		      .byte.b	#%11100111	;
   2442  fd9c		       24		      .byte.b	#%00100100	; 
   2443  fd9d		       42		      .byte.b	#%01000010	; 
   2444  fd9e		       81		      .byte.b	#%10000001	; 
   2445  fd9f		       e7		      .byte.b	#%11100111	;
   2446  fda0
   2447  fda0				   Pipe
   2448  fda0		       42		      .byte.b	#%01000010	;
   2449  fda1		       00		      .byte.b	#%00000000	; 
   2450  fda2		       42		      .byte.b	#%01000010	; 
   2451  fda3		       00		      .byte.b	#%00000000	; 
   2452  fda4		       42		      .byte.b	#%01000010	;
   2453  fda5
   2454  fda5				   Exclamation
   2455  fda5		       42		      .byte.b	#%01000010	;
   2456  fda6		       00		      .byte.b	#%00000000	; 
   2457  fda7		       42		      .byte.b	#%01000010	; 
   2458  fda8		       42		      .byte.b	#%01000010	; 
   2459  fda9		       42		      .byte.b	#%01000010	;
   2460  fdaa
   2461  fdaa				   Dot
   2462  fdaa		       42		      .byte.b	#%01000010	;
   2463  fdab		       42		      .byte.b	#%01000010	; 
   2464  fdac		       00		      .byte.b	#%00000000	; 
   2465  fdad		       00		      .byte.b	#%00000000	; 
   2466  fdae		       00		      .byte.b	#%00000000	;
   2467  fdaf
   2468  fdaf				   Colon
   2469  fdaf		       42		      .byte.b	#%01000010	;
   2470  fdb0		       42		      .byte.b	#%01000010	; 
   2471  fdb1		       00		      .byte.b	#%00000000	; 
   2472  fdb2		       42		      .byte.b	#%01000010	; 
   2473  fdb3		       42		      .byte.b	#%01000010	;
   2474  fdb4
   2475  fdb4				   Triangle
   2476  fdb4		       81		      .byte.b	#%10000001	;
   2477  fdb5		       c3		      .byte.b	#%11000011	; 
   2478  fdb6		       e7		      .byte.b	#%11100111	; 
   2479  fdb7		       c3		      .byte.b	#%11000011	; 
   2480  fdb8		       81		      .byte.b	#%10000001	;
   2481  fdb9
   2482  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2483  fdb9		       00		      .byte.b	#0	;
   2484  fdba		       00		      .byte.b	#0	;
   2485  fdbb		       00		      .byte.b	#0	;
   2486  fdbc		       00		      .byte.b	#0	;
   2487  fdbd		       00		      .byte.b	#0	;
   2488  fdbe
   2489  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2490  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2491  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2492  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2493  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2494  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2495  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2496  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2497  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2498  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2499  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2500  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2501  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2502  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2503  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2504  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2505  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2506  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2507  fdcf
   2508  fdcf				   EngineSoundType
   2509  fdcf		       02		      .byte.b	#2
   2510  fdd0		       02		      .byte.b	#2
   2511  fdd1		       0e		      .byte.b	#14
   2512  fdd2		       06		      .byte.b	#6
   2513  fdd3		       06		      .byte.b	#6
   2514  fdd4		       0e		      .byte.b	#14
   2515  fdd5
   2516  fdd5				   EngineBaseFrequence
   2517  fdd5		       1f		      .byte.b	#31
   2518  fdd6		       15		      .byte.b	#21
   2519  fdd7		       14		      .byte.b	#20
   2520  fdd8		       1f		      .byte.b	#31
   2521  fdd9		       16		      .byte.b	#22
   2522  fdda		       03		      .byte.b	#3
   2523  fddb
   2524  fddb				   TachometerSizeLookup1
   2525  fddb		       1f		      .byte.b	#%00011111
   2526  fddc		       3f		      .byte.b	#%00111111
   2527  fddd		       7f		      .byte.b	#%01111111
   2528  fdde		       ff		      .byte.b	#%11111111
   2529  fddf		       ff		      .byte.b	#%11111111
   2530  fde0		       ff		      .byte.b	#%11111111
   2531  fde1		       ff		      .byte.b	#%11111111
   2532  fde2		       ff		      .byte.b	#%11111111
   2533  fde3
   2534  fde3				   TachometerSizeLookup2
   2535  fde3		       00		      .byte.b	#%00000000
   2536  fde4		       00		      .byte.b	#%00000000
   2537  fde5		       00		      .byte.b	#%00000000
   2538  fde6		       00		      .byte.b	#%00000000
   2539  fde7		       80		      .byte.b	#%10000000
   2540  fde8		       c0		      .byte.b	#%11000000
   2541  fde9		       e0		      .byte.b	#%11100000
   2542  fdea		       f0		      .byte.b	#%11110000
   2543  fdeb
   2544  fdeb				   TachometerGearLookup
   2545  fdeb		       01		      .byte.b	#%00000001
   2546  fdec		       02		      .byte.b	#%00000010
   2547  fded		       04		      .byte.b	#%00000100
   2548  fdee		       08		      .byte.b	#%00001000
   2549  fdef		       10		      .byte.b	#%00010000
   2550  fdf0		       30		      .byte.b	#%00110000
   2551  fdf1
   2552  fe00					      org	$FE00
   2553  fe00				   AesTable
   2554  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2555  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2556  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2557  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2558  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2559  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2560  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2561  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2562  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2563  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2564  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2565  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2566  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2567  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2568  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2569  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2570  ff00
   2571  ff00							; From FF00 to FFFB (122 bytes) to use here
   2572  ff00
   2573  ff00				   StaticText		; All static text must be on the same MSB block. 
   2574  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2575  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2576  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2577  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2578  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2579  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2580  ff05
   2581  ff05				   HellwayLeftText
   2582  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2583  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2584  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2585  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2586  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2587  ff0a
   2588  ff0a				   HellwayRightText
   2589  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2590  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2591  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2592  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2593  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2594  ff0f
   2595  ff0f				   OpbText
   2596  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2597  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2598  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2599  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2600  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2601  ff14
   2602  ff14				   YearText
   2603  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2604  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2605  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2606  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2607  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2608  ff19
   2609  ff19				   GameText
   2610  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2611  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2612  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2613  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2614  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2615  ff1e
   2616  ff1e				   OverText
   2617  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2618  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2619  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2620  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2621  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2622  ff23				   GoText
   2623  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2624  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2625  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2626  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2627  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2628  ff28
   2629  ff28				   ZeldaTextLeft
   2630  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2631  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2632  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2633  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2634  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2635  ff2d
   2636  ff2d				   ZeldaTextRight
   2637  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2638  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2639  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2640  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2641  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2642  ff32
   2643  ff32				   ZeldaDateLeft
   2644  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2645  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2646  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2647  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2648  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2649  ff37
   2650  ff37				   ZeldaDateRight
   2651  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2652  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2653  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2654  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2655  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2656  ff3c
   2657  ff3c				   PolvinhosTextLeft
   2658  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2659  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2660  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2661  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2662  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2663  ff41
   2664  ff41				   PolvinhosTextRight
   2665  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2666  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2667  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2668  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2669  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2670  ff46
   2671  ff46				   PolvinhosDateLeft
   2672  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2673  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2674  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2675  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2676  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2677  ff4b
   2678  ff4b				   PolvinhosDateRight
   2679  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2680  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2681  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2682  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2683  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2684  ff50
   2685  ff50				   IvonneTextLeft
   2686  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2687  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2688  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2689  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2690  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2691  ff55
   2692  ff55				   IvonneTextRight
   2693  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2694  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2695  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2696  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2697  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2698  ff5a
   2699  ff5a				   IvonneDateLeft
   2700  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2701  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2702  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2703  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2704  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2705  ff5f
   2706  ff5f				   IvonneDateRight
   2707  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2708  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2709  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2710  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2711  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2712  ff64
   2713  ff64				   PaperArtTextLeft
   2714  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2715  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2716  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2717  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2718  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2719  ff69
   2720  ff69				   PaperArtTextRight
   2721  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2722  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2723  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2724  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2725  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2726  ff6e
   2727  ff6e				   LeonardoTextLeft
   2728  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2729  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2730  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2731  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2732  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2733  ff73
   2734  ff73				   LeonardoTextRight
   2735  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2736  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2737  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2738  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2739  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2740  ff78
   2741  ff78				   VersionText
   2742  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2743  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2744  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2745  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2746  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2747  ff7d
   2748  ff7d
   2749  ff7d				   EndStaticText
   2750  ff7d
   2751  ff7d				   CarSprite0		; Upside down, Original Car
   2752  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2753  ff85				   CarSprite0NoPadding
   2754  ff85		       7e		      .byte.b	#%01111110
   2755  ff86		       24		      .byte.b	#%00100100
   2756  ff87		       bd		      .byte.b	#%10111101
   2757  ff88		       3c		      .byte.b	#%00111100
   2758  ff89		       bd		      .byte.b	#%10111101
   2759  ff8a		       3c		      .byte.b	#%00111100
   2760  ff8b
   2761  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2762  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2763  ff93				   CarSprite1NoPadding
   2764  ff93		       bd		      .byte.b	#%10111101
   2765  ff94		       7e		      .byte.b	#%01111110
   2766  ff95		       5a		      .byte.b	#%01011010
   2767  ff96		       66		      .byte.b	#%01100110
   2768  ff97		       bd		      .byte.b	#%10111101
   2769  ff98		       3c		      .byte.b	#%00111100
   2770  ff99
   2771  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2772  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2773  ffa1				   CarSprite2NoPadding
   2774  ffa1		       7e		      .byte.b	#%01111110
   2775  ffa2		       a5		      .byte.b	#%10100101
   2776  ffa3		       42		      .byte.b	#%01000010
   2777  ffa4		       42		      .byte.b	#%01000010
   2778  ffa5		       bd		      .byte.b	#%10111101
   2779  ffa6		       7e		      .byte.b	#%01111110
   2780  ffa7
   2781  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2782  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2783  ffaf				   CarSprite3NoPadding
   2784  ffaf		       3c		      .byte.b	#%00111100
   2785  ffb0		       db		      .byte.b	#%11011011
   2786  ffb1		       db		      .byte.b	#%11011011
   2787  ffb2		       3c		      .byte.b	#%00111100
   2788  ffb3		       5a		      .byte.b	#%01011010
   2789  ffb4		       3c		      .byte.b	#%00111100
   2790  ffb5
   2791  ffb5				   TrafficSpeeds
   2792  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2793  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2794  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2795  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2796  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2797  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2798  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2799  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2800  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2801  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2802  ffbf				   TrafficSpeedsHighDelta
   2803  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2804  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2805  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2806  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2807  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2808  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2809  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2810  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2811  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2812  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2813  ffc9
   2814  ffc9				   CarIdToSpriteAddressL
   2815  ffc9		       7d		      .byte.b	#<CarSprite0
   2816  ffca		       8b		      .byte.b	#<CarSprite1
   2817  ffcb		       99		      .byte.b	#<CarSprite2
   2818  ffcc		       a7		      .byte.b	#<CarSprite3
   2819  ffcd
   2820  ffcd				   CarIdToSpriteAddressH
   2821  ffcd		       ff		      .byte.b	#>CarSprite0
   2822  ffce		       ff		      .byte.b	#>CarSprite1
   2823  ffcf		       ff		      .byte.b	#>CarSprite2
   2824  ffd0		       ff		      .byte.b	#>CarSprite3
   2825  ffd1
   2826  ffd1				   EnemyCarIdToSpriteAddressL
   2827  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2828  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2829  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2830  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2831  ffd5
   2832  ffd5				   EnemyCarIdToSpriteAddressH
   2833  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2834  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2835  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2836  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2837  ffd9
   2838  ffd9				   CarIdToAccelerateSpeed
   2839  ffd9		       80		      .byte.b	#128
   2840  ffda		       c0		      .byte.b	#192
   2841  ffdb		       60		      .byte.b	#96
   2842  ffdc		       c0		      .byte.b	#192
   2843  ffdd
   2844  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2845  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2846  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2847  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2848  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2849  ffe1
   2850  ffe1				   CarIdToMaxSpeedL
   2851  ffe1		       80		      .byte.b	#$80
   2852  ffe2		       00		      .byte.b	#$00	; One less gear
   2853  ffe3		       80		      .byte.b	#$80
   2854  ffe4		       80		      .byte.b	#$80
   2855  ffe5
   2856  ffe5				   CarIdToMaxGear
   2857  ffe5		       05		      .byte.b	#5
   2858  ffe6		       04		      .byte.b	#4	; One less gear
   2859  ffe7		       05		      .byte.b	#5
   2860  ffe8		       05		      .byte.b	#5
   2861  ffe9
   2862  ffe9				   GearToBreakSpeedTable
   2863  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2864  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2865  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2866  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2867  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2868  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2869  ffef
   2870  ffef				   TrafficColorTable
   2871  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2872  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2873  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2874  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2875  fff3
   2876  fff3				   TrafficChanceTable
   2877  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2878  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2879  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2880  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2881  fff7
   2882  fff7				   TrafficTimeTable
   2883  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2884  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2885  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2886  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2887  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2888  fffc
   2889  fffc
   2890  fffc					      org	$FFFC
   2891  fffc		       00 f0		      .word.w	BeforeStart
   2892  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
