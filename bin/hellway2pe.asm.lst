------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 09	   ENGINE_VOLUME =	9
    104  f000
    105  f000		       00 80	   GRP0Cache  =	$80
    106  f000		       00 81	   PF0Cache   =	$81
    107  f000		       00 82	   PF1Cache   =	$82
    108  f000		       00 83	   PF2Cache   =	$83
    109  f000		       00 84	   GRP1Cache  =	$84
    110  f000		       00 85	   ENABLCache =	$85
    111  f000		       00 86	   ENAM0Cache =	$86
    112  f000		       00 87	   ENAM1Cache =	$87
    113  f000
    114  f000		       00 8c	   FrameCount0 =	$8C	;
    115  f000		       00 8d	   FrameCount1 =	$8D	;
    116  f000
    117  f000		       00 8e	   CollisionCounter =	$8E
    118  f000		       00 8f	   OpCollisionCounter =	$8F
    119  f000
    120  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    121  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    122  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    123  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    124  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    125  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    126  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    127  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    128  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    129  f000
    130  f000							;Temporary variables, multiple uses
    131  f000		       00 b0	   Tmp0       =	$B0
    132  f000		       00 b1	   Tmp1       =	$B1
    133  f000		       00 b2	   Tmp2       =	$B2
    134  f000		       00 b3	   Tmp3       =	$B3
    135  f000		       00 b4	   Tmp4       =	$B4
    136  f000		       00 b5	   Tmp5       =	$B5
    137  f000
    138  f000		       00 b6	   Player0X   =	$B6
    139  f000		       00 b7	   Player1X   =	$B7
    140  f000		       00 b8	   CountdownTimer =	$B8
    141  f000		       00 b9	   OpCountdownTimer =	$B9
    142  f000		       00 ba	   Traffic0Msb =	$BA
    143  f000		       00 bb	   OpTraffic0Msb =	$BB
    144  f000		       00 bc	   SwitchDebounceCounter =	$BC
    145  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    146  f000		       00 be	   TrafficChance =	$BE
    147  f000		       00 bf	   OpTrafficChance =	$BF
    148  f000
    149  f000		       00 c0	   CheckpointTime =	$C0
    150  f000		       00 c1	   OpCheckpointTime =	$C1
    151  f000		       00 c2	   TrafficColor =	$C2
    152  f000		       00 c3	   OpTrafficColor =	$C3
    153  f000		       00 c4	   CurrentDifficulty =	$C4
    154  f000		       00 c5	   OpCurrentDifficulty =	$C5
    155  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    156  f000
    157  f000		       00 c7	   CurrentCarId =	$C7
    158  f000		       00 c8	   OpCurrentCarId =	$C8
    159  f000
    160  f000		       00 c9	   ScoreFontColor =	$C9
    161  f000		       00 ca	   OpScoreFontColor =	$CA
    162  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    163  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    164  f000		       00 cd	   NextCheckpoint =	$CD
    165  f000		       00 ce	   OpNextCheckpoint =	$CE
    166  f000		       00 cf	   OpponentLine =	$CF
    167  f000
    168  f000		       00 d0	   ScoreD0    =	$D0
    169  f000		       00 d1	   ScoreD1    =	$D1
    170  f000		       00 d2	   ScoreD2    =	$D2
    171  f000		       00 d3	   ScoreD3    =	$D3
    172  f000		       00 d4	   ScoreD4    =	$D4
    173  f000
    174  f000		       00 d5	   Gear       =	$D5
    175  f000		       00 d6	   OpGear     =	$D6
    176  f000
    177  f000		       00 d7	   CarSpritePointerL =	$D7
    178  f000		       00 d8	   CarSpritePointerH =	$D8
    179  f000
    180  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    181  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    182  f000
    183  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    184  f000
    185  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    186  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    187  f000
    188  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    189  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    190  f000
    191  f000		       00 f0	   Player0SpeedL =	$F0
    192  f000		       00 f1	   Player1SpeedL =	$F1
    193  f000		       00 f2	   Player0SpeedH =	$F2
    194  f000		       00 f3	   Player1SpeedH =	$F3
    195  f000
    196  f000		       00 f4	   IsOpponentInFront =	$F4	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 de f6 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 8f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 f0		      STA	Player0SpeedL
    257  f059		       85 f1		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	CallConfigureDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	CallConfigureDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	CallConfigureDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   CallConfigureDifficulty
    274  f071		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    275  f073		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    276  f075		       a5 bd		      LDA	GameStatus
    277  f077		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    278  f079				   StoreCurrentDifficulty
    279  f079		       86 c4		      STX	CurrentDifficulty
    280  f07b		       86 c5		      STX	OpCurrentDifficulty
    281  f07d		       a2 00		      LDX	#0
    282  f07f		       20 b3 f6 	      JSR	ConfigureDifficulty
    283  f082		       e8		      INX
    284  f083		       20 b3 f6 	      JSR	ConfigureDifficulty
    285  f086
    286  f086				   SetGameNotRunning
    287  f086		       a9 00		      LDA	#0
    288  f088		       85 bd		      STA	GameStatus
    289  f08a
    290  f08a				   ConfigureTimer
    291  f08a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    292  f08c		       85 b8		      STA	CountdownTimer	;3
    293  f08e		       85 b9		      STA	OpCountdownTimer	;3
    294  f090
    295  f090				   ConfigurePlayer1XPosition
    296  f090		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    297  f092		       85 b7		      STA	Player1X	;3
    298  f094
    299  f094				   ConfigureOpNextCheckpoint
    300  f094		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    301  f096		       85 ce		      STA	OpNextCheckpoint
    302  f098
    303  f098				   HPositioning 		; Avoid sleep doing needed stuff
    304  f098		       85 02		      STA	WSYNC
    305  f09a
    306  f09a				   ConfigurePlayer0XPosition
    307  f09a		       a9 21		      LDA	#PLAYER_0_X_START	;2
    308  f09c		       85 b6		      STA	Player0X	;3
    309  f09e
    310  f09e				   ConfigureMissileSize
    311  f09e		       a9 30		      LDA	#%00110000	;2 Missile Size
    312  f0a0		       85 04		      STA	NUSIZ0	;3
    313  f0a2		       85 05		      STA	NUSIZ1	;3
    314  f0a4
    315  f0a4				   ConfigureNextCheckpoint
    316  f0a4		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    317  f0a6		       85 cd		      STA	NextCheckpoint
    318  f0a8
    319  f0a8		       a9 00		      LDA	#0	; Avoid missile reseting position 
    320  f0aa							;SLEEP 41
      0  f0aa					      SLEEP	4	;
      1  f0aa				   .CYCLES    SET	4
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     17  f0aa					      REPEND
     18  f0ab		       ea		      nop
     19  f0ac					      REPEND
    322  f0ac		       85 12		      STA	RESM0
      0  f0ae					      SLEEP	2	;
      1  f0ae				   .CYCLES    SET	2
      2  f0ae
      3  f0ae				  -	      IF	.CYCLES < 2
      4  f0ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ae				  -	      ERR
      6  f0ae					      ENDIF
      7  f0ae
      8  f0ae				  -	      IF	.CYCLES & 1
      9  f0ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ae				  -	      nop	0
     11  f0ae				  -	      ELSE
     12  f0ae				  -	      bit	VSYNC
     13  f0ae				  -	      ENDIF
     14  f0ae				  -.CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae					      REPEAT	.CYCLES / 2
     18  f0ae		       ea		      nop
     19  f0af					      REPEND
    324  f0af		       85 14		      STA	RESBL
      0  f0b1					      SLEEP	2
      1  f0b1				   .CYCLES    SET	2
      2  f0b1
      3  f0b1				  -	      IF	.CYCLES < 2
      4  f0b1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b1				  -	      ERR
      6  f0b1					      ENDIF
      7  f0b1
      8  f0b1				  -	      IF	.CYCLES & 1
      9  f0b1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b1				  -	      nop	0
     11  f0b1				  -	      ELSE
     12  f0b1				  -	      bit	VSYNC
     13  f0b1				  -	      ENDIF
     14  f0b1				  -.CYCLES    SET	.CYCLES - 3
     15  f0b1					      ENDIF
     16  f0b1
     17  f0b1					      REPEAT	.CYCLES / 2
     18  f0b1		       ea		      nop
     19  f0b2					      REPEND
    326  f0b2		       85 13		      STA	RESM1
      0  f0b4					      SLEEP	3
      1  f0b4				   .CYCLES    SET	3
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4					      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4					      ELSE
     12  f0b4		       24 00		      bit	VSYNC
     13  f0b6					      ENDIF
     14  f0b6				   .CYCLES    SET	.CYCLES - 3
     15  f0b6					      ENDIF
     16  f0b6
     17  f0b6				  -	      REPEAT	.CYCLES / 2
     18  f0b6				  -	      nop
     19  f0b6					      REPEND
    328  f0b6
    329  f0b6		       a9 e0		      LDA	#$E0
    330  f0b8		       85 24		      STA	HMBL
    331  f0ba		       85 22		      STA	HMM0
    332  f0bc		       85 23		      STA	HMM1
    333  f0be		       85 02		      STA	WSYNC
    334  f0c0		       85 2a		      STA	HMOVE
    335  f0c2		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    336  f0c4		       85 2b		      STA	HMCLR
      0  f0c6					      SLEEP	30
      1  f0c6				   .CYCLES    SET	30
      2  f0c6
      3  f0c6				  -	      IF	.CYCLES < 2
      4  f0c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c6				  -	      ERR
      6  f0c6					      ENDIF
      7  f0c6
      8  f0c6				  -	      IF	.CYCLES & 1
      9  f0c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c6				  -	      nop	0
     11  f0c6				  -	      ELSE
     12  f0c6				  -	      bit	VSYNC
     13  f0c6				  -	      ENDIF
     14  f0c6				  -.CYCLES    SET	.CYCLES - 3
     15  f0c6					      ENDIF
     16  f0c6
     17  f0c6					      REPEAT	.CYCLES / 2
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     17  f0ce					      REPEND
     18  f0cf		       ea		      nop
     17  f0cf					      REPEND
     18  f0d0		       ea		      nop
     17  f0d0					      REPEND
     18  f0d1		       ea		      nop
     17  f0d1					      REPEND
     18  f0d2		       ea		      nop
     17  f0d2					      REPEND
     18  f0d3		       ea		      nop
     17  f0d3					      REPEND
     18  f0d4		       ea		      nop
     19  f0d5					      REPEND
    338  f0d5		       85 10		      STA	RESP0
    339  f0d7							;SLEEP 5 ; Temporarily move player 1 away.
    340  f0d7		       85 11		      STA	RESP1
    341  f0d9
    342  f0d9				   WaitResetToEnd
    343  f0d9		       ad 84 02 	      LDA	INTIM
    344  f0dc		       d0 fb		      BNE	WaitResetToEnd
    345  f0de
    346  f0de				   MainLoop
    347  f0de		       a9 02		      LDA	#2
    348  f0e0		       85 00		      STA	VSYNC
    349  f0e2		       85 02		      STA	WSYNC
    350  f0e4		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    351  f0e6				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    352  f0e6		       a9 01		      LDA	#%00000001	;3
    353  f0e8		       24 df		      BIT	TextFlickerMode	;2
    354  f0ea		       f0 05		      BEQ	TextSideFrameZero	;2
    355  f0ec		       25 8d		      AND	FrameCount1	;2
    356  f0ee		       4c f3 f0 	      JMP	StoreTextSize	;3
    357  f0f1				   TextSideFrameZero
    358  f0f1		       25 8c		      AND	FrameCount0	;2
    359  f0f3				   StoreTextSize
    360  f0f3		       85 de		      STA	TextSide	;3
    361  f0f5
    362  f0f5				   PrepareMaxHMove
      0  f0f5					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0f5				   .CYCLES    SET	18
      2  f0f5
      3  f0f5				  -	      IF	.CYCLES < 2
      4  f0f5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0f5				  -	      ERR
      6  f0f5					      ENDIF
      7  f0f5
      8  f0f5				  -	      IF	.CYCLES & 1
      9  f0f5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0f5				  -	      nop	0
     11  f0f5				  -	      ELSE
     12  f0f5				  -	      bit	VSYNC
     13  f0f5				  -	      ENDIF
     14  f0f5				  -.CYCLES    SET	.CYCLES - 3
     15  f0f5					      ENDIF
     16  f0f5
     17  f0f5					      REPEAT	.CYCLES / 2
     18  f0f5		       ea		      nop
     17  f0f5					      REPEND
     18  f0f6		       ea		      nop
     17  f0f6					      REPEND
     18  f0f7		       ea		      nop
     17  f0f7					      REPEND
     18  f0f8		       ea		      nop
     17  f0f8					      REPEND
     18  f0f9		       ea		      nop
     17  f0f9					      REPEND
     18  f0fa		       ea		      nop
     17  f0fa					      REPEND
     18  f0fb		       ea		      nop
     17  f0fb					      REPEND
     18  f0fc		       ea		      nop
     17  f0fc					      REPEND
     18  f0fd		       ea		      nop
     19  f0fe					      REPEND
    364  f0fe		       a9 80		      LDA	#$80
    365  f100		       85 24		      STA	HMBL
    366  f102		       85 22		      STA	HMM0
    367  f104		       85 23		      STA	HMM1
    368  f106		       85 20		      STA	HMP0
    369  f108		       85 21		      STA	HMP1
    370  f10a		       85 02		      STA	WSYNC
    371  f10c		       85 2a		      STA	HMOVE	; 1/10			
    372  f10e
    373  f10e				   ConfigVBlankTimer
    374  f10e		       a5 c6		      LDA	GameMode
    375  f110		       c9 10		      CMP	#MAX_GAME_MODE
    376  f112		       f0 05		      BEQ	SetVblankTimerQrCode
    377  f114		       a9 29		      LDA	#VBLANK_TIMER
    378  f116		       4c 1b f1 	      JMP	SetVblankTimer
    379  f119				   SetVblankTimerQrCode
    380  f119		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    381  f11b
    382  f11b				   SetVblankTimer
    383  f11b		       85 02		      STA	WSYNC	;3
    384  f11d		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    385  f11f		       8d 96 02 	      STA	TIM64T	;3	
    386  f122		       a9 00		      LDA	#0	;2
    387  f124		       85 00		      STA	VSYNC	;3	
    388  f126
    389  f126				   RandomizeGame
    390  f126		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    391  f128		       d0 2d		      BNE	EndRandomizeGame
    392  f12a		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    393  f12c		       29 02		      AND	#%00000010
    394  f12e		       f0 24		      BEQ	DeterministicGame
    395  f130		       a6 96		      LDX	TrafficOffset1 + 2
    396  f132		       bd 00 fe 	      LDA	AesTable,X
    397  f135		       45 8c		      EOR	FrameCount0
    398  f137		       85 96		      STA	TrafficOffset1 + 2
    399  f139		       85 a6		      STA	OpTrafficOffset1 + 2
    400  f13b		       a6 9a		      LDX	TrafficOffset2 + 2
    401  f13d		       bd 00 fe 	      LDA	AesTable,X
    402  f140		       45 8c		      EOR	FrameCount0
    403  f142		       85 9a		      STA	TrafficOffset2 + 2
    404  f144		       85 aa		      STA	OpTrafficOffset2 + 2
    405  f146		       a6 9e		      LDX	TrafficOffset3 + 2
    406  f148		       bd 00 fe 	      LDA	AesTable,X
    407  f14b		       45 8c		      EOR	FrameCount0
    408  f14d		       85 9e		      STA	TrafficOffset3 + 2
    409  f14f		       85 ae		      STA	OpTrafficOffset3 + 2
    410  f151		       4c 57 f1 	      JMP	EndRandomizeGame
    411  f154
    412  f154				   DeterministicGame
    413  f154		       20 de f6 	      JSR	DefaultOffsets
    414  f157
    415  f157				   EndRandomizeGame
    416  f157
    417  f157
    418  f157				   CountFrame
    419  f157		       e6 8c		      INC	FrameCount0	; 5
    420  f159		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    421  f15b		       e6 8d		      INC	FrameCount1	; 5 
    422  f15d				   SkipIncFC1
    423  f15d
    424  f15d				   CallDrawQrCode
    425  f15d		       a5 c6		      LDA	GameMode
    426  f15f		       c9 10		      CMP	#MAX_GAME_MODE
    427  f161		       d0 03		      BNE	TestIsGameRunning
    428  f163		       4c 44 fb 	      JMP	DrawQrCode
    429  f166
    430  f166							;Does not update the game if not running
    431  f166				   TestIsGameRunning
    432  f166		       a5 bd		      LDA	GameStatus	;3
    433  f168		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    434  f16a				   SelectCarWithDpadCall		; Only do it when game is stoped
    435  f16a		       a2 00		      LDX	#0	; Player 0
    436  f16c		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    437  f16e		       85 b0		      STA	Tmp0
    438  f170		       20 e7 f8 	      JSR	SelectCarWithDpad
    439  f173		       e8		      INX		; Player 1
    440  f174		       20 e7 f8 	      JSR	SelectCarWithDpad
    441  f177
    442  f177							; Needs to draw the opponent in the correct line even when game stoped  
    443  f177							; Draeing is a destructive operation
    444  f177		       20 f9 f8 	      JSR	ProcessOpponentLine
    445  f17a
    446  f17a				   CallConfigureCarSprites
    447  f17a		       20 b5 f8 	      JSR	ConfigureCarSprites
    448  f17d				   SkipUpdateLogicJump
    449  f17d		       4c c6 f1 	      JMP	SkipUpdateLogic
    450  f180				   ContinueWithGameLogic
    451  f180
    452  f180				   CallEverySecond		; Timer for now
    453  f180		       a2 00		      LDX	#0
    454  f182		       20 1a fb 	      JSR	EverySecond
    455  f185		       e8		      INX
    456  f186		       20 1a fb 	      JSR	EverySecond
    457  f189
    458  f189
    459  f189				   ChangeTextFlickerMode
    460  f189		       a5 bc		      LDA	SwitchDebounceCounter
    461  f18b		       d0 0d		      BNE	EndChangeTextFlickerMode
    462  f18d		       ad 82 02 	      LDA	SWCHB
    463  f190		       29 02		      AND	#%00000010	;Game select
    464  f192		       d0 06		      BNE	EndChangeTextFlickerMode
    465  f194		       e6 df		      INC	TextFlickerMode
    466  f196		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    467  f198		       85 bc		      STA	SwitchDebounceCounter
    468  f19a				   EndChangeTextFlickerMode
    469  f19a
    470  f19a				   CallProcessSpeed
    471  f19a		       a2 00		      LDX	#0
    472  f19c		       20 31 fa 	      JSR	ProcessSpeed
    473  f19f
    474  f19f		       e8		      INX		; Player 1
    475  f1a0		       20 31 fa 	      JSR	ProcessSpeed
    476  f1a3
    477  f1a3				   CallUpdateOffsets
    478  f1a3		       a2 00		      LDX	#0	; Player 0
    479  f1a5		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    480  f1a7		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    481  f1a9		       a5 f0		      LDA	Player0SpeedL
    482  f1ab		       85 b4		      STA	Tmp4
    483  f1ad		       a5 f2		      LDA	Player0SpeedH
    484  f1af		       85 b5		      STA	Tmp5
    485  f1b1		       20 de f9 	      JSR	UpdateOffsets
    486  f1b4
    487  f1b4							;LDX Exits the call with correct value.
    488  f1b4		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    489  f1b6		       85 b3		      STA	Tmp3
    490  f1b8		       a5 f1		      LDA	Player1SpeedL
    491  f1ba		       85 b4		      STA	Tmp4
    492  f1bc		       a5 f3		      LDA	Player1SpeedH
    493  f1be		       85 b5		      STA	Tmp5
    494  f1c0		       20 de f9 	      JSR	UpdateOffsets
    495  f1c3
    496  f1c3				   CallProcessOpponentLine
    497  f1c3		       20 f9 f8 	      JSR	ProcessOpponentLine
    498  f1c6
    499  f1c6
    500  f1c6				   SkipUpdateLogic		; Continue here if not paused
    501  f1c6
    502  f1c6				   CallStatusUpdateSbr
    503  f1c6		       a2 00		      LDX	#0
    504  f1c8		       20 27 fb 	      JSR	CalculateGear
    505  f1cb		       20 34 fb 	      JSR	ProcessScoreFontColor
    506  f1ce		       e8		      INX
    507  f1cf		       20 27 fb 	      JSR	CalculateGear
    508  f1d2		       20 34 fb 	      JSR	ProcessScoreFontColor
    509  f1d5
    510  f1d5				   CallProcessPlayerStatus
    511  f1d5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    512  f1d7		       85 b0		      STA	Tmp0
    513  f1d9		       a2 00		      LDX	#0
    514  f1db		       20 d4 fa 	      JSR	ProcessPlayerStatus
    515  f1de		       a5 a2		      LDA	OpTrafficOffset0 + 2
    516  f1e0		       85 b0		      STA	Tmp0
    517  f1e2		       e8		      INX
    518  f1e3		       20 d4 fa 	      JSR	ProcessPlayerStatus
    519  f1e6
    520  f1e6				   CallProcessPlayerSprites
    521  f1e6		       20 b5 f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    522  f1e9
    523  f1e9				   CallProcessSound
    524  f1e9		       a2 00		      LDX	#0
    525  f1eb		       a5 92		      LDA	TrafficOffset0 + 2
    526  f1ed		       85 b1		      STA	Tmp1
    527  f1ef		       20 ca f5 	      JSR	ProcessSound
    528  f1f2		       e8		      INX		; Player 1
    529  f1f3		       a5 a2		      LDA	OpTrafficOffset0 + 2
    530  f1f5		       85 b1		      STA	Tmp1
    531  f1f7		       20 ca f5 	      JSR	ProcessSound
    532  f1fa
    533  f1fa							;Could be done during on vblank to save this comparisson time (before draw score), 
    534  f1fa							;but I am saving vblank cycles for now, in case of 2 players.
    535  f1fa				   ChooseTextSide		; 
    536  f1fa		       a5 de		      LDA	TextSide	;3
    537  f1fc		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    538  f1fe		       4c 82 f2 	      JMP	RightScoreWrite
    539  f201
    540  f201				   LeftScoreWrite
    541  f201		       a5 c9		      LDA	ScoreFontColor
    542  f203		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    543  f205		       f0 51		      BEQ	PrintCheckpoint
    544  f207		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    545  f209		       f0 55		      BEQ	PrintStartGame
    546  f20b		       a5 bd		      LDA	GameStatus
    547  f20d		       f0 59		      BEQ	PrintHellwayLeft
    548  f20f				   WriteDistance		;Not optimized yet, ugly code.
    549  f20f				   Digit0Timer
    550  f20f		       a5 b8		      LDA	CountdownTimer	;3
    551  f211		       29 0f		      AND	#%00001111	;2
    552  f213		       aa		      TAX		; 2
    553  f214		       bd 6c fc 	      LDA	FontLookup,X	;4 
    554  f217		       85 d1		      STA	ScoreD1	;3
    555  f219
    556  f219				   Digit1Timer
    557  f219		       a5 b8		      LDA	CountdownTimer	;3
    558  f21b		       4a		      LSR		; 2
    559  f21c		       4a		      LSR		; 2
    560  f21d		       4a		      LSR		; 2
    561  f21e		       4a		      LSR		; 2
    562  f21f		       aa		      TAX		; 2
    563  f220		       bd 6c fc 	      LDA	FontLookup,X	;4
    564  f223		       85 d0		      STA	ScoreD0	;3
    565  f225
    566  f225				   SpeedBar
    567  f225		       a5 f0		      LDA	Player0SpeedL
    568  f227		       29 e0		      AND	#%11100000	;2 Discard the last bits
    569  f229		       18		      CLC
    570  f22a		       2a		      ROL		;First goes into carry
    571  f22b		       2a		      ROL
    572  f22c		       2a		      ROL
    573  f22d		       2a		      ROL
    574  f22e		       85 b0		      STA	Tmp0
    575  f230		       a5 f2		      LDA	Player0SpeedH
    576  f232		       0a		      ASL
    577  f233		       0a		      ASL
    578  f234		       0a		      ASL
    579  f235		       05 b0		      ORA	Tmp0
    580  f237		       aa		      TAX		; 2
    581  f238		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    582  f23b		       85 d2		      STA	ScoreD2	;3
    583  f23d
    584  f23d				   DistanceCheckpointCount		; Will run all letters in the future
    585  f23d		       a5 92		      LDA	TrafficOffset0 + 2	;3
    586  f23f		       29 f0		      AND	#%11110000	;2
    587  f241		       4a		      LSR
    588  f242		       4a		      LSR
    589  f243		       4a		      LSR
    590  f244		       4a		      LSR
    591  f245		       aa		      TAX		; 2
    592  f246		       bd 6c fc 	      LDA	FontLookup,X	;4 
    593  f249		       85 d3		      STA	ScoreD3	;3
    594  f24b
    595  f24b				   DistanceBar		; 16 subdivisions per checkpoint
    596  f24b		       a5 92		      LDA	TrafficOffset0 + 2	;3
    597  f24d		       29 0f		      AND	#%00001111	;2
    598  f24f		       aa		      TAX		; 2
    599  f250		       bd 7d fc 	      LDA	BarLookup,X	;4 
    600  f253		       85 d4		      STA	ScoreD4	;3
    601  f255
    602  f255				   EndDrawDistance
    603  f255		       4c fa f2 	      JMP	RightScoreWriteEnd	;3
    604  f258
    605  f258				   PrintCheckpoint
    606  f258		       a2 00		      LDX	#<CheckpointText
    607  f25a		       20 f3 f6 	      JSR	PrintStaticText
    608  f25d		       4c fa f2 	      JMP	RightScoreWriteEnd	;3
    609  f260				   PrintStartGame
    610  f260		       a2 23		      LDX	#<GoText
    611  f262		       20 f3 f6 	      JSR	PrintStaticText
    612  f265		       4c fa f2 	      JMP	RightScoreWriteEnd	;3
    613  f268
    614  f268				   PrintHellwayLeft
    615  f268		       a5 8d		      LDA	FrameCount1
    616  f26a		       29 01		      AND	#1
    617  f26c		       d0 05		      BNE	PrintCreditsLeft
    618  f26e		       a2 05		      LDX	#<HellwayLeftText
    619  f270		       4c 75 f2 	      JMP	PrintGameMode
    620  f273				   PrintCreditsLeft
    621  f273		       a2 0f		      LDX	#<OpbText
    622  f275
    623  f275				   PrintGameMode
    624  f275		       20 f3 f6 	      JSR	PrintStaticText
    625  f278		       a6 c6		      LDX	GameMode
    626  f27a		       bd 6c fc 	      LDA	FontLookup,X	;4 
    627  f27d		       85 d0		      STA	ScoreD0	;3
    628  f27f		       4c fa f2 	      JMP	RightScoreWriteEnd	;3
    629  f282
    630  f282				   RightScoreWrite
    631  f282		       a5 bd		      LDA	GameStatus
    632  f284		       f0 53		      BEQ	PrintHellwayRight
    633  f286		       a5 c9		      LDA	ScoreFontColor
    634  f288		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    635  f28a		       f0 d4		      BEQ	PrintStartGame
    636  f28c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    637  f28e		       f0 5c		      BEQ	PrintGameOver
    638  f290
    639  f290				   OpDigit0Timer
    640  f290		       a5 b9		      LDA	OpCountdownTimer	;3
    641  f292		       29 0f		      AND	#%00001111	;2
    642  f294		       aa		      TAX		; 2
    643  f295		       bd 6c fc 	      LDA	FontLookup,X	;4 
    644  f298		       85 d4		      STA	ScoreD4	;3
    645  f29a
    646  f29a				   OpDigit1Timer
    647  f29a		       a5 b9		      LDA	OpCountdownTimer	;3
    648  f29c		       4a		      LSR		; 2
    649  f29d		       4a		      LSR		; 2
    650  f29e		       4a		      LSR		; 2
    651  f29f		       4a		      LSR		; 2
    652  f2a0		       aa		      TAX		; 2
    653  f2a1		       bd 6c fc 	      LDA	FontLookup,X	;4
    654  f2a4		       85 d3		      STA	ScoreD3	;3
    655  f2a6
    656  f2a6				   OpSpeedBar
    657  f2a6		       a5 f1		      LDA	Player1SpeedL
    658  f2a8		       29 e0		      AND	#%11100000	;2 Discard the last bits
    659  f2aa		       18		      CLC
    660  f2ab		       2a		      ROL		;First goes into carry
    661  f2ac		       2a		      ROL
    662  f2ad		       2a		      ROL
    663  f2ae		       2a		      ROL
    664  f2af		       85 b0		      STA	Tmp0
    665  f2b1		       a5 f3		      LDA	Player1SpeedH
    666  f2b3		       0a		      ASL
    667  f2b4		       0a		      ASL
    668  f2b5		       0a		      ASL
    669  f2b6		       05 b0		      ORA	Tmp0
    670  f2b8		       aa		      TAX		; 2
    671  f2b9		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    672  f2bc		       85 d2		      STA	ScoreD2	;3
    673  f2be
    674  f2be				   OpDistanceCheckpointCount		; Will run all letters in the future
    675  f2be		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    676  f2c0		       29 f0		      AND	#%11110000	;2
    677  f2c2		       4a		      LSR
    678  f2c3		       4a		      LSR
    679  f2c4		       4a		      LSR
    680  f2c5		       4a		      LSR
    681  f2c6		       aa		      TAX		; 2
    682  f2c7		       bd 6c fc 	      LDA	FontLookup,X	;4 
    683  f2ca		       85 d1		      STA	ScoreD1	;3
    684  f2cc
    685  f2cc				   OpDistanceBar		; 16 subdivisions per checkpoint
    686  f2cc		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    687  f2ce		       29 0f		      AND	#%00001111	;2
    688  f2d0		       aa		      TAX		; 2
    689  f2d1		       bd 7d fc 	      LDA	BarLookup,X	;4 
    690  f2d4		       85 d0		      STA	ScoreD0	;3
    691  f2d6		       4c fa f2 	      JMP	RightScoreWriteEnd
    692  f2d9
    693  f2d9				   PrintHellwayRight
    694  f2d9		       a5 8d		      LDA	FrameCount1
    695  f2db		       29 01		      AND	#1
    696  f2dd		       d0 05		      BNE	PrintCreditsRight
    697  f2df		       a2 0a		      LDX	#<HellwayRightText
    698  f2e1		       4c e6 f2 	      JMP	PrintRightIntro
    699  f2e4				   PrintCreditsRight
    700  f2e4		       a2 14		      LDX	#<YearText
    701  f2e6				   PrintRightIntro
    702  f2e6		       20 f3 f6 	      JSR	PrintStaticText
    703  f2e9		       4c fa f2 	      JMP	RightScoreWriteEnd
    704  f2ec				   PrintGameOver
    705  f2ec		       a5 8c		      LDA	FrameCount0
    706  f2ee		       30 05		      BMI	PrintOverText
    707  f2f0		       a2 19		      LDX	#<GameText
    708  f2f2		       4c f7 f2 	      JMP	StoreGameOverText
    709  f2f5				   PrintOverText
    710  f2f5		       a2 1e		      LDX	#<OverText
    711  f2f7				   StoreGameOverText
    712  f2f7		       20 f3 f6 	      JSR	PrintStaticText
    713  f2fa				   RightScoreWriteEnd
    714  f2fa
    715  f2fa
    716  f2fa				   ScoreBackgroundColor
    717  f2fa		       a2 00		      LDX	#0
    718  f2fc		       ad 82 02 	      LDA	SWCHB
    719  f2ff		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    720  f301		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    721  f303		       f0 04		      BEQ	BlackAndWhiteScoreBg
    722  f305		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    723  f307		       a2 03		      LDX	#BACKGROUND_COLOR
    724  f309				   BlackAndWhiteScoreBg
    725  f309		       85 b2		      STA	Tmp2	; Score Background
    726  f30b		       86 b3		      STX	Tmp3	; Traffic Background
    727  f30d
    728  f30d				   ConfigurePFForScore
    729  f30d							;LDA #SCORE_BACKGROUND_COLOR; Done above
    730  f30d		       85 09		      STA	COLUBK
    731  f30f		       20 62 f6 	      JSR	ClearAll
    732  f312		       a9 02		      LDA	#%00000010	; Score mode
    733  f314		       85 0a		      STA	CTRLPF
    734  f316		       a5 de		      LDA	TextSide	;3
    735  f318		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    736  f31a				   RightScoreOn
    737  f31a		       a5 ca		      LDA	OpScoreFontColor
    738  f31c		       85 07		      STA	COLUP1
    739  f31e		       a5 b2		      LDA	Tmp2
    740  f320		       85 06		      STA	COLUP0
    741  f322		       4c 2d f3 	      JMP	CallWaitForVblankEnd
    742  f325				   LeftScoreOn
    743  f325		       a5 c9		      LDA	ScoreFontColor
    744  f327		       85 06		      STA	COLUP0
    745  f329		       a5 b2		      LDA	Tmp2
    746  f32b		       85 07		      STA	COLUP1
    747  f32d
    748  f32d							; After here we are going to update the screen, No more heavy code
    749  f32d				   CallWaitForVblankEnd
    750  f32d		       20 86 f8 	      JSR	WaitForVblankEnd
    751  f330
    752  f330				   DrawScoreHud
    753  f330		       20 11 f7 	      JSR	PrintScore
    754  f333
    755  f333		       85 02		      STA	WSYNC
    756  f335
    757  f335		       a5 0c		      LDA	INPT4	;3
    758  f337							;BPL WaitAnotherScoreLine ; Draw traffic while button is pressed.
    759  f337		       4c 4a f3 	      JMP	WaitAnotherScoreLine	; Temporary disabling score, please enable line above!
    760  f33a		       a5 c9		      LDA	ScoreFontColor
    761  f33c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    762  f33e		       d0 0a		      BNE	WaitAnotherScoreLine
    763  f340		       a5 de		      LDA	TextSide	;3
    764  f342		       d0 03		      BNE	LeftScoreOnGameOver
    765  f344		       4c 60 f8 	      JMP	DrawGameOverScreenRight
    766  f347				   LeftScoreOnGameOver
    767  f347		       4c d2 f7 	      JMP	DrawGameOverScreenLeft
    768  f34a
    769  f34a				   WaitAnotherScoreLine
    770  f34a		       85 02		      STA	WSYNC
    771  f34c
    772  f34c				   PrepareForTraffic
    773  f34c		       20 78 f6 	      JSR	ClearPF	; 32
    774  f34f
    775  f34f		       85 02		      STA	WSYNC
    776  f351		       85 2a		      STA	HMOVE
    777  f353		       85 02		      STA	WSYNC
    778  f355		       85 2a		      STA	HMOVE
    779  f357
    780  f357		       a9 30		      LDA	#%00110000	; 2 Score mode
    781  f359		       85 0a		      STA	CTRLPF	;3
    782  f35b
    783  f35b		       a5 8c		      LDA	FrameCount0	;3
    784  f35d		       29 01		      AND	#%00000001	;2
    785  f35f		       aa		      TAX		;2
    786  f360		       b5 c2		      LDA	TrafficColor,X	;4
    787  f362		       85 08		      STA	COLUPF	;3
    788  f364
    789  f364		       a9 96		      LDA	#PLAYER1_COLOR	;2
    790  f366		       85 07		      STA	COLUP1	;3
    791  f368
    792  f368		       a5 c9		      LDA	ScoreFontColor	;3
    793  f36a		       85 06		      STA	COLUP0	;3
    794  f36c
    795  f36c		       a5 ca		      LDA	OpScoreFontColor	;3
    796  f36e		       85 07		      STA	COLUP1	;3
    797  f370
    798  f370		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    799  f372
      0  f372					      SLEEP	24	; Keep the backround color more time, only needed if still support non dark mode
      1  f372				   .CYCLES    SET	24
      2  f372
      3  f372				  -	      IF	.CYCLES < 2
      4  f372				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f372				  -	      ERR
      6  f372					      ENDIF
      7  f372
      8  f372				  -	      IF	.CYCLES & 1
      9  f372				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f372				  -	      nop	0
     11  f372				  -	      ELSE
     12  f372				  -	      bit	VSYNC
     13  f372				  -	      ENDIF
     14  f372				  -.CYCLES    SET	.CYCLES - 3
     15  f372					      ENDIF
     16  f372
     17  f372					      REPEAT	.CYCLES / 2
     18  f372		       ea		      nop
     17  f372					      REPEND
     18  f373		       ea		      nop
     17  f373					      REPEND
     18  f374		       ea		      nop
     17  f374					      REPEND
     18  f375		       ea		      nop
     17  f375					      REPEND
     18  f376		       ea		      nop
     17  f376					      REPEND
     18  f377		       ea		      nop
     17  f377					      REPEND
     18  f378		       ea		      nop
     17  f378					      REPEND
     18  f379		       ea		      nop
     17  f379					      REPEND
     18  f37a		       ea		      nop
     17  f37a					      REPEND
     18  f37b		       ea		      nop
     17  f37b					      REPEND
     18  f37c		       ea		      nop
     17  f37c					      REPEND
     18  f37d		       ea		      nop
     19  f37e					      REPEND
    801  f37e
    802  f37e		       a6 b3		      LDX	Tmp3	; Background color.
    803  f380
    804  f380		       a5 8c		      LDA	FrameCount0	;Brach flag
    805  f382		       29 01		      AND	#%00000001
    806  f384
    807  f384		       86 09		      STX	COLUBK	;3
    808  f386		       d0 05		      BNE	OpDrawCache	;2
    809  f388		       4c 47 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    810  f38b							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    811  f38b
    812  f38b							;main scanline loop...
    813  f38b				   OpScanLoop
    814  f38b		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    815  f38d
    816  f38d							;Start of next line!			
    817  f38d				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    818  f38d
    819  f38d		       a5 80		      LDA	GRP0Cache	;3
    820  f38f		       85 1b		      STA	GRP0	;3
    821  f391
    822  f391		       a5 84		      LDA	GRP1Cache	;3
    823  f393		       85 1c		      STA	GRP1	;3
    824  f395
    825  f395		       a5 85		      LDA	ENABLCache	;3
    826  f397		       85 1f		      STA	ENABL	;3
    827  f399
    828  f399		       a5 86		      LDA	ENAM0Cache	;3
    829  f39b		       85 1d		      STA	ENAM0	;3
    830  f39d
    831  f39d		       a5 87		      LDA	ENAM1Cache	;3
    832  f39f		       85 1e		      STA	ENAM1	;3
    833  f3a1
    834  f3a1		       a5 81		      LDA	PF0Cache	;3
    835  f3a3		       85 0d		      STA	PF0	;3
    836  f3a5
    837  f3a5		       a9 00		      LDA	#0	;2
    838  f3a7							;STA PF0	     ;3
    839  f3a7		       85 80		      STA	GRP0Cache	;3
    840  f3a9		       85 86		      STA	ENAM0Cache	;3
    841  f3ab		       85 85		      STA	ENABLCache	;3
    842  f3ad		       85 87		      STA	ENAM1Cache	; 3
    843  f3af							;STA GRP1Cache ;3
    844  f3af		       85 0d		      STA	PF0	;3
    845  f3b1							;STA PF2	     ;3
    846  f3b1
    847  f3b1		       a5 83		      LDA	PF2Cache	;3
    848  f3b3		       85 0f		      STA	PF2	;3
    849  f3b5
    850  f3b5				   OpDrawCar0
    851  f3b5		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    852  f3b7		       b0 04		      BCS	OpSkipDrawCar	;2
    853  f3b9		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    854  f3bb		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    855  f3bd				   OpSkipDrawCar
    856  f3bd
    857  f3bd							;BEQ DrawTraffic3
    858  f3bd				   OpDrawTraffic1		; 33
    859  f3bd		       98		      TYA		; 2
    860  f3be		       18		      CLC		; 2 
    861  f3bf		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    862  f3c1		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    863  f3c3		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    864  f3c5		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    865  f3c7		       4c cc f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    866  f3ca				   OpEorOffsetWithCarry
    867  f3ca		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    868  f3cc				   OpAfterEorOffsetWithCarry		;17
    869  f3cc		       aa		      TAX		;2
    870  f3cd		       bd 00 fe 	      LDA	AesTable,X	; 4
    871  f3d0		       c5 bf		      CMP	OpTrafficChance	;3
    872  f3d2		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    873  f3d4		       a9 ff		      LDA	#$FF	;2
    874  f3d6		       85 86		      STA	ENAM0Cache	;3
    875  f3d8				   OpFinishDrawTraffic1
    876  f3d8
    877  f3d8				   OpErasePF2
    878  f3d8		       a9 00		      LDA	#0
    879  f3da		       85 0f		      STA	PF2
    880  f3dc
    881  f3dc				   OpDrawTraffic2		; 33
    882  f3dc		       98		      TYA		; 2
    883  f3dd		       18		      CLC		; 2 
    884  f3de		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    885  f3e0		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    886  f3e2		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    887  f3e4		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    888  f3e6		       4c eb f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    889  f3e9				   OpEorOffsetWithCarry2
    890  f3e9		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    891  f3eb				   OpAfterEorOffsetWithCarry2		;17
    892  f3eb		       aa		      TAX		;2
    893  f3ec		       bd 00 fe 	      LDA	AesTable,X	; 4
    894  f3ef		       c5 bf		      CMP	OpTrafficChance	;3
    895  f3f1		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    896  f3f3		       a9 02		      LDA	#%00000010	;2
    897  f3f5		       85 85		      STA	ENABLCache	;3
    898  f3f7				   OpFinishDrawTraffic2
    899  f3f7
    900  f3f7							;STA WSYNC ;65 / 137
    901  f3f7
    902  f3f7							; LDA Tmp0 ; Flicker this line if drawing car
    903  f3f7							; BEQ FinishDrawTraffic4
    904  f3f7				   OpDrawTraffic3		; 33
    905  f3f7		       98		      TYA		; 2
    906  f3f8		       18		      CLC		; 2 
    907  f3f9		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    908  f3fb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    909  f3fd		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    910  f3ff		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    911  f401		       4c 06 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    912  f404				   OpEorOffsetWithCarry3
    913  f404		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    914  f406				   OpAfterEorOffsetWithCarry3		;17
    915  f406		       aa		      TAX		;2
    916  f407		       bd 00 fe 	      LDA	AesTable,X	; 4
    917  f40a		       c5 bf		      CMP	OpTrafficChance	;3
    918  f40c		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    919  f40e		       a9 02		      LDA	#%00000010	;2
    920  f410		       85 87		      STA	ENAM1Cache
    921  f412				   OpFinishDrawTraffic3
    922  f412
    923  f412				   OpDrawOponent		;26
    924  f412		       84 b0		      STY	Tmp0	;3
    925  f414		       a4 cf		      LDY	OpponentLine	;3
    926  f416		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    927  f418		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    928  f41a				   OpDrawOpponent
    929  f41a		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    930  f41c		       85 80		      STA	GRP0Cache	;3
    931  f41e		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    932  f420		       a4 b0		      LDY	Tmp0	;3
    933  f422		       4c 36 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    934  f425				   OpSkipDrawOpponent
    935  f425		       c6 cf		      DEC	OpponentLine	;5
    936  f427		       a4 b0		      LDY	Tmp0	;3
    937  f429
    938  f429
    939  f429				   OpDrawTraffic0		; 21 2pe
    940  f429		       98		      TYA		; 2
    941  f42a		       18		      CLC		; 2 
    942  f42b		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    943  f42d		       29 08		      AND	#%00001000	;2
    944  f42f		       f0 05		      BEQ	OpHasNoBorderP0	;3
    945  f431				   OpHasBorderP0
    946  f431		       a9 70		      LDA	#%01110000	; 2
    947  f433		       4c 38 f4 	      JMP	OpStoreBorderP0	; 3
    948  f436				   OpHasNoBorderP0
    949  f436		       a9 00		      LDA	#0	; 2
    950  f438				   OpStoreBorderP0
    951  f438		       85 81		      STA	PF0Cache	; 3
    952  f43a		       85 83		      STA	PF2Cache	; 3
    953  f43c
    954  f43c				   OpSkipDrawTraffic0
    955  f43c
    956  f43c				   OpWhileScanLoop
    957  f43c		       88		      DEY		;2
    958  f43d		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    959  f43f		       4c 8b f3 	      JMP	OpScanLoop	;3
    960  f442				   OpFinishScanLoop		; 7 209 of 222
    961  f442		       4c fa f4 	      JMP	FinishScanLoop
    962  f445
    963  f445							;main scanline loop...
    964  f445				   ScanLoop
    965  f445		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    966  f447
    967  f447							;Start of next line!			
    968  f447				   DrawCache		;63 Is the last line going to the top of the next frame?
    969  f447		       a5 81		      LDA	PF0Cache	;3
    970  f449		       85 0d		      STA	PF0	;3
    971  f44b
    972  f44b		       a5 80		      LDA	GRP0Cache	;3
    973  f44d		       85 1b		      STA	GRP0	;3
    974  f44f
    975  f44f		       a5 84		      LDA	GRP1Cache	;3
    976  f451		       85 1c		      STA	GRP1	;3
    977  f453
    978  f453		       a5 86		      LDA	ENAM0Cache	;3
    979  f455		       85 1d		      STA	ENAM0	;3
    980  f457
    981  f457		       a5 85		      LDA	ENABLCache	;3
    982  f459		       85 1f		      STA	ENABL	;3
    983  f45b
    984  f45b		       a5 87		      LDA	ENAM1Cache	;3
    985  f45d		       85 1e		      STA	ENAM1	;3
    986  f45f
    987  f45f		       a5 83		      LDA	PF2Cache	;3
    988  f461		       85 0f		      STA	PF2	;3
    989  f463
    990  f463		       a9 00		      LDA	#0	;2
    991  f465		       85 0d		      STA	PF0	;3
    992  f467		       85 84		      STA	GRP1Cache	;3
    993  f469		       85 85		      STA	ENABLCache	;3
    994  f46b		       85 86		      STA	ENAM0Cache	;3
    995  f46d		       85 87		      STA	ENAM1Cache	; 3
    996  f46f							;STA GRP0Cache
    997  f46f		       85 0f		      STA	PF2	;3
    998  f471
    999  f471				   DrawCar0
   1000  f471		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1001  f473		       b0 04		      BCS	SkipDrawCar	;2
   1002  f475		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1003  f477		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1004  f479				   SkipDrawCar
   1005  f479
   1006  f479							;BEQ DrawTraffic3
   1007  f479				   DrawTraffic1 		; 33
   1008  f479		       98		      TYA		; 2
   1009  f47a		       18		      CLC		; 2 
   1010  f47b		       65 95		      ADC	TrafficOffset1 + 1	;3
   1011  f47d		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1012  f47f		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1013  f481		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1014  f483		       4c 88 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1015  f486				   EorOffsetWithCarry
   1016  f486		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1017  f488				   AfterEorOffsetWithCarry		;17
   1018  f488		       aa		      TAX		;2
   1019  f489		       bd 00 fe 	      LDA	AesTable,X	; 4
   1020  f48c		       c5 be		      CMP	TrafficChance	;3
   1021  f48e		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1022  f490		       a9 ff		      LDA	#$FF	;2
   1023  f492		       85 86		      STA	ENAM0Cache	;3
   1024  f494				   FinishDrawTraffic1
   1025  f494
   1026  f494				   DrawTraffic2 		; 33
   1027  f494		       98		      TYA		; 2
   1028  f495		       18		      CLC		; 2 
   1029  f496		       65 99		      ADC	TrafficOffset2 + 1	;3
   1030  f498		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1031  f49a		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1032  f49c		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1033  f49e		       4c a3 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1034  f4a1				   EorOffsetWithCarry2
   1035  f4a1		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1036  f4a3				   AfterEorOffsetWithCarry2		;17
   1037  f4a3		       aa		      TAX		;2
   1038  f4a4		       bd 00 fe 	      LDA	AesTable,X	; 4
   1039  f4a7		       c5 be		      CMP	TrafficChance	;3
   1040  f4a9		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1041  f4ab		       a9 02		      LDA	#%00000010	;2
   1042  f4ad		       85 85		      STA	ENABLCache	;3
   1043  f4af				   FinishDrawTraffic2
   1044  f4af
   1045  f4af							;STA WSYNC ;65 / 137
   1046  f4af
   1047  f4af							; LDA Tmp0 ; Flicker this line if drawing car
   1048  f4af							; BEQ FinishDrawTraffic4
   1049  f4af				   DrawTraffic3 		; 33
   1050  f4af		       98		      TYA		; 2
   1051  f4b0		       18		      CLC		; 2 
   1052  f4b1		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1053  f4b3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1054  f4b5		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1055  f4b7		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1056  f4b9		       4c be f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1057  f4bc				   EorOffsetWithCarry3
   1058  f4bc		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1059  f4be				   AfterEorOffsetWithCarry3		;17
   1060  f4be		       aa		      TAX		;2
   1061  f4bf		       bd 00 fe 	      LDA	AesTable,X	; 4
   1062  f4c2		       c5 be		      CMP	TrafficChance	;3
   1063  f4c4		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1064  f4c6		       a9 02		      LDA	#%00000010	;2
   1065  f4c8		       85 87		      STA	ENAM1Cache
   1066  f4ca				   FinishDrawTraffic3
   1067  f4ca
   1068  f4ca
   1069  f4ca				   DrawOponent		;26
   1070  f4ca		       84 b0		      STY	Tmp0	;3
   1071  f4cc		       a4 cf		      LDY	OpponentLine	;3
   1072  f4ce		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1073  f4d0		       b0 0b		      BCS	SkipDrawOpponent	;2
   1074  f4d2				   DrawOpponent
   1075  f4d2		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1076  f4d4		       85 84		      STA	GRP1Cache	;3
   1077  f4d6		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1078  f4d8		       a4 b0		      LDY	Tmp0	;3
   1079  f4da		       4c ee f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1080  f4dd				   SkipDrawOpponent
   1081  f4dd		       c6 cf		      DEC	OpponentLine	;5
   1082  f4df		       a4 b0		      LDY	Tmp0	;3
   1083  f4e1
   1084  f4e1				   DrawTraffic0 		; 21 2pe
   1085  f4e1		       98		      TYA		; 2
   1086  f4e2		       18		      CLC		; 2 
   1087  f4e3		       65 91		      ADC	TrafficOffset0 + 1	;3
   1088  f4e5		       29 08		      AND	#%00001000	;2
   1089  f4e7		       f0 05		      BEQ	HasNoBorderP0	;3
   1090  f4e9				   HasBorderP0
   1091  f4e9		       a9 70		      LDA	#%01110000	; 2
   1092  f4eb		       4c f0 f4 	      JMP	StoreBorderP0	; 3
   1093  f4ee				   HasNoBorderP0
   1094  f4ee		       a9 00		      LDA	#0	; 2
   1095  f4f0				   StoreBorderP0
   1096  f4f0		       85 81		      STA	PF0Cache	; 3
   1097  f4f2		       85 83		      STA	PF2Cache	; 3
   1098  f4f4
   1099  f4f4				   SkipDrawTraffic0
   1100  f4f4
   1101  f4f4				   WhileScanLoop
   1102  f4f4		       88		      DEY		;2
   1103  f4f5		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1104  f4f7		       4c 45 f4 	      JMP	ScanLoop	;3
   1105  f4fa				   FinishScanLoop		; 7 209 of 222
   1106  f4fa
   1107  f4fa		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1108  f4fc		       20 87 f6 	      JSR	LoadAll
   1109  f4ff		       85 02		      STA	WSYNC	; do stuff!
   1110  f501		       85 02		      STA	WSYNC
   1111  f503		       85 02		      STA	WSYNC
   1112  f505
   1113  f505				   PrepareOverscan
   1114  f505		       a9 02		      LDA	#2
   1115  f507		       85 02		      STA	WSYNC
   1116  f509							;STA HMOVE	; HMOVE 10
   1117  f509		       85 01		      STA	VBLANK
   1118  f50b
   1119  f50b		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1120  f50d		       8d 96 02 	      STA	TIM64T
   1121  f510
   1122  f510		       85 2b		      STA	HMCLR	; Before we process car movement
   1123  f512							;Read Fire Button before, will make it start the game for now.
   1124  f512				   StartGame
   1125  f512		       a5 0c		      LDA	INPT4	;3
   1126  f514		       25 0d		      AND	INPT5	;3 player 
   1127  f516		       30 34		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1128  f518		       a5 8c		      LDA	FrameCount0
   1129  f51a		       29 01		      AND	#%00000001
   1130  f51c		       d0 2e		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1131  f51e		       a5 bd		      LDA	GameStatus	;3
   1132  f520		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1133  f522		       d0 28		      BNE	SkipGameStart
   1134  f524		       a5 c6		      LDA	GameMode
   1135  f526		       c9 10		      CMP	#MAX_GAME_MODE
   1136  f528		       d0 0b		      BNE	SetGameRunning
   1137  f52a		       a9 00		      LDA	#0
   1138  f52c		       85 c6		      STA	GameMode
   1139  f52e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1140  f530		       85 bc		      STA	SwitchDebounceCounter
   1141  f532		       4c 4c f5 	      JMP	SkipGameStart
   1142  f535				   SetGameRunning
   1143  f535		       e6 bd		      INC	GameStatus
   1144  f537		       a9 00		      LDA	#0	;
   1145  f539		       85 8c		      STA	FrameCount0
   1146  f53b		       85 8d		      STA	FrameCount1
   1147  f53d		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1148  f53f		       85 c9		      STA	ScoreFontColor
   1149  f541		       85 ca		      STA	OpScoreFontColor
   1150  f543		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1151  f545		       85 cb		      STA	ScoreFontColorHoldChange
   1152  f547		       85 cc		      STA	OpScoreFontColorHoldChange
   1153  f549		       4c ba f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1154  f54c				   SkipGameStart
   1155  f54c
   1156  f54c				   ReadSwitches
   1157  f54c		       a6 bc		      LDX	SwitchDebounceCounter
   1158  f54e		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1159  f550		       a9 01		      LDA	#%00000001
   1160  f552		       2c 82 02 	      BIT	SWCHB
   1161  f555		       d0 07		      BNE	SkipReset
   1162  f557		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1163  f559		       85 bc		      STA	SwitchDebounceCounter
   1164  f55b		       4c c2 f5 	      JMP	OverScanWaitBeforeReset
   1165  f55e				   SkipReset
   1166  f55e
   1167  f55e				   GameModeSelect
   1168  f55e		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1169  f560		       d0 1c		      BNE	SkipGameSelect
   1170  f562		       20 b3 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1171  f565				   ContinueGameSelect
   1172  f565		       a9 02		      LDA	#%00000010
   1173  f567		       2c 82 02 	      BIT	SWCHB
   1174  f56a		       d0 12		      BNE	SkipGameSelect
   1175  f56c		       a6 c6		      LDX	GameMode
   1176  f56e		       e0 10		      CPX	#MAX_GAME_MODE
   1177  f570		       f0 04		      BEQ	ResetGameMode
   1178  f572		       e8		      INX
   1179  f573		       4c 78 f5 	      JMP	StoreGameMode
   1180  f576				   ResetGameMode
   1181  f576		       a2 00		      LDX	#0
   1182  f578				   StoreGameMode
   1183  f578		       86 c6		      STX	GameMode
   1184  f57a		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1185  f57c		       85 bc		      STA	SwitchDebounceCounter
   1186  f57e				   SkipGameSelect
   1187  f57e		       4c 83 f5 	      JMP	EndReadSwitches
   1188  f581				   DecrementSwitchDebounceCounter
   1189  f581		       c6 bc		      DEC	SwitchDebounceCounter
   1190  f583				   EndReadSwitches
   1191  f583
   1192  f583				   DoNotTurnBeforeStart
   1193  f583							;STA HMCLR
   1194  f583		       a5 bd		      LDA	GameStatus
   1195  f585		       f0 33		      BEQ	OverScanWait
   1196  f587
   1197  f587							; Last thing, will overrride hmove
   1198  f587				   CallTestColisionAndMove
   1199  f587		       a2 00		      LDX	#0	; Player 0
   1200  f589							; Colision with traffic, each player check different flags,
   1201  f589		       a5 8c		      LDA	FrameCount0
   1202  f58b		       29 01		      AND	#%00000001
   1203  f58d		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1204  f58f		       20 4a f9 	      JSR	IsOpponentColliding
   1205  f592		       05 01		      ORA	CXM1P
   1206  f594		       4a		      LSR
   1207  f595		       05 00		      ORA	CXM0P
   1208  f597		       05 02		      ORA	CXP0FB
   1209  f599							; ORA CXPPMM ; Collision between players will have its own rules
   1210  f599				   SkipColisionPlayer0		; Should not colide on opponent side.
   1211  f599		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1212  f59b		       85 b2		      STA	Tmp2
   1213  f59d		       20 5e f9 	      JSR	TestCollisionAndMove
   1214  f5a0
   1215  f5a0		       e8		      INX		; player 1
   1216  f5a1		       a5 8c		      LDA	FrameCount0
   1217  f5a3		       29 01		      AND	#%00000001
   1218  f5a5		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1219  f5a7		       20 4a f9 	      JSR	IsOpponentColliding
   1220  f5aa		       05 00		      ORA	CXM0P
   1221  f5ac		       4a		      LSR
   1222  f5ad		       05 01		      ORA	CXM1P
   1223  f5af		       05 03		      ORA	CXP1FB
   1224  f5b1				   SkipColisionPlayer1
   1225  f5b1		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1226  f5b3		       85 b2		      STA	Tmp2
   1227  f5b5		       20 5e f9 	      JSR	TestCollisionAndMove
   1228  f5b8
   1229  f5b8				   ClearCollision
   1230  f5b8		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1231  f5ba
   1232  f5ba				   OverScanWait
   1233  f5ba		       ad 84 02 	      LDA	INTIM
   1234  f5bd		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1235  f5bf		       4c de f0 	      JMP	MainLoop
   1236  f5c2
   1237  f5c2				   OverScanWaitBeforeReset
   1238  f5c2		       ad 84 02 	      LDA	INTIM
   1239  f5c5		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1240  f5c7		       4c 14 f0 	      JMP	Start
   1241  f5ca
   1242  f5ca				   Subroutines
   1243  f5ca
   1244  f5ca							;X Player
   1245  f5ca							;Tmp1 TrafficOffset 2
   1246  f5ca				   ProcessSound
   1247  f5ca				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1248  f5ca		       b5 c9		      LDA	ScoreFontColor,X	;3
   1249  f5cc		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1250  f5ce		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1251  f5d0		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1252  f5d2		       f0 29		      BEQ	PlayCheckpoint	;2
   1253  f5d4		       b5 8e		      LDA	CollisionCounter,X	;3
   1254  f5d6		       c9 e0		      CMP	#$E0	;2
   1255  f5d8		       b0 14		      BCS	PlayColision	;2
   1256  f5da		       b5 cd		      LDA	NextCheckpoint,X	;3
   1257  f5dc		       38		      SEC		;2
   1258  f5dd		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1259  f5df		       c9 02		      CMP	#$02	;2
   1260  f5e1		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1261  f5e3		       b5 b8		      LDA	CountdownTimer,X	; 3
   1262  f5e5		       f0 53		      BEQ	EngineSound	;2
   1263  f5e7		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1264  f5e9		       90 37		      BCC	PlayWarnTimeEnding	;4
   1265  f5eb		       4c 3a f6 	      JMP	EngineSound	;3
   1266  f5ee				   PlayColision
   1267  f5ee		       a9 1f		      LDA	#31
   1268  f5f0		       95 17		      STA	AUDF0,X
   1269  f5f2		       a9 08		      LDA	#8
   1270  f5f4		       95 15		      STA	AUDC0,X
   1271  f5f6		       a9 08		      LDA	#8
   1272  f5f8		       95 19		      STA	AUDV0,X
   1273  f5fa		       4c 61 f6 	      JMP	EndSound
   1274  f5fd
   1275  f5fd				   PlayCheckpoint
   1276  f5fd		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1277  f5ff		       4a		      LSR		;2
   1278  f600		       4a		      LSR		;2
   1279  f601		       4a		      LSR		;2
   1280  f602		       95 17		      STA	AUDF0,X	;3
   1281  f604		       a9 0c		      LDA	#12	;2
   1282  f606		       95 15		      STA	AUDC0,X	;3
   1283  f608		       a9 06		      LDA	#6	;2
   1284  f60a		       95 19		      STA	AUDV0,X	;3
   1285  f60c		       4c 61 f6 	      JMP	EndSound	;3
   1286  f60f
   1287  f60f				   PlayBeforeCheckpoint
   1288  f60f		       a5 8c		      LDA	FrameCount0	;3
   1289  f611		       29 1c		      AND	#%00011100	;2
   1290  f613		       09 03		      ORA	#%00000011	;2
   1291  f615		       95 17		      STA	AUDF0,X	;3
   1292  f617		       a9 0c		      LDA	#12	;2
   1293  f619		       95 15		      STA	AUDC0,X	;3
   1294  f61b		       a9 03		      LDA	#3	;2
   1295  f61d		       95 19		      STA	AUDV0,X	;3
   1296  f61f		       4c 61 f6 	      JMP	EndSound	;3
   1297  f622
   1298  f622				   PlayWarnTimeEnding
   1299  f622		       a5 8c		      LDA	FrameCount0	;3
   1300  f624		       29 04		      AND	#%00000100	;2
   1301  f626		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1302  f628		       18		      CLC		;2
   1303  f629		       a9 0a		      LDA	#10	;2
   1304  f62b		       75 b8		      ADC	CountdownTimer,X	;2
   1305  f62d		       95 17		      STA	AUDF0,X	;3
   1306  f62f		       a9 0c		      LDA	#12	;2
   1307  f631		       95 15		      STA	AUDC0,X	;3
   1308  f633		       a9 03		      LDA	#3	;2
   1309  f635		       95 19		      STA	AUDV0,X	;3
   1310  f637		       4c 61 f6 	      JMP	EndSound	;3
   1311  f63a
   1312  f63a				   EngineSound		;41
   1313  f63a		       a9 09		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1314  f63c		       95 19		      STA	AUDV0,X
   1315  f63e		       b5 b8		      LDA	CountdownTimer,X	;3
   1316  f640		       f0 1b		      BEQ	EngineOff	;2
   1317  f642		       b4 d5		      LDY	Gear,X
   1318  f644		       b5 f0		      LDA	Player0SpeedL,X	;3
   1319  f646		       4a		      LSR		;2
   1320  f647		       4a		      LSR		;2
   1321  f648		       4a		      LSR		;2
   1322  f649		       29 0f		      AND	#%00001111	;2
   1323  f64b		       85 b0		      STA	Tmp0	;3
   1324  f64d		       b9 49 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1325  f650		       38		      SEC		;2
   1326  f651		       e5 b0		      SBC	Tmp0	;3
   1327  f653		       95 17		      STA	AUDF0,X	;3
   1328  f655		       b9 43 ff 	      LDA	EngineSoundType,Y	;4
   1329  f658		       95 15		      STA	AUDC0,X	;3
   1330  f65a		       4c 61 f6 	      JMP	EndEngineSound	;3
   1331  f65d				   EngineOff
   1332  f65d				   MuteSound
   1333  f65d		       a9 00		      LDA	#0
   1334  f65f		       95 15		      STA	AUDC0,X
   1335  f661				   EndEngineSound
   1336  f661				   EndSound
   1337  f661		       60		      RTS
   1338  f662
   1339  f662				   ClearAll		; 58
   1340  f662		       a9 00		      LDA	#0	;2
   1341  f664		       85 1b		      STA	GRP0	;3
   1342  f666		       85 1c		      STA	GRP1	;3
   1343  f668		       85 1f		      STA	ENABL	;3
   1344  f66a		       85 1d		      STA	ENAM0	;3
   1345  f66c		       85 1e		      STA	ENAM1	;3
   1346  f66e		       85 80		      STA	GRP0Cache	;3
   1347  f670		       85 84		      STA	GRP1Cache	;3
   1348  f672		       85 85		      STA	ENABLCache	;3
   1349  f674		       85 86		      STA	ENAM0Cache	;3
   1350  f676		       85 87		      STA	ENAM1Cache	;3
   1351  f678
   1352  f678				   ClearPF		; 26
   1353  f678		       a9 00		      LDA	#0	;2
   1354  f67a				   ClearPFSkipLDA0
   1355  f67a		       85 0d		      STA	PF0	;3
   1356  f67c		       85 0e		      STA	PF1	;3
   1357  f67e		       85 0f		      STA	PF2	;3	
   1358  f680		       85 81		      STA	PF0Cache	;3
   1359  f682		       85 82		      STA	PF1Cache	;3
   1360  f684		       85 83		      STA	PF2Cache	;3 
   1361  f686		       60		      RTS		;6
   1362  f687				   EndClearAll
   1363  f687
   1364  f687				   LoadAll		; 48
   1365  f687		       a5 81		      LDA	PF0Cache	;3
   1366  f689		       85 0d		      STA	PF0	;3
   1367  f68b
   1368  f68b		       a5 82		      LDA	PF1Cache	;3
   1369  f68d		       85 0e		      STA	PF1	;3
   1370  f68f
   1371  f68f		       a5 83		      LDA	PF2Cache	;3
   1372  f691		       85 0f		      STA	PF2	;3
   1373  f693
   1374  f693		       a5 84		      LDA	GRP1Cache	;3
   1375  f695		       85 1c		      STA	GRP1	;3
   1376  f697
   1377  f697		       a5 85		      LDA	ENABLCache	;3
   1378  f699		       85 1f		      STA	ENABL	;3
   1379  f69b
   1380  f69b		       a5 86		      LDA	ENAM0Cache	;3
   1381  f69d		       85 1d		      STA	ENAM0	;3
   1382  f69f
   1383  f69f		       a5 87		      LDA	ENAM1Cache	;3
   1384  f6a1		       85 1e		      STA	ENAM1	;3
   1385  f6a3
   1386  f6a3		       60		      RTS		;6
   1387  f6a4				   EndLoadAll
   1388  f6a4
   1389  f6a4				   NextDifficulty		;Is a SBR
   1390  f6a4		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1391  f6a6		       29 01		      AND	#%00000001
   1392  f6a8		       d0 24		      BNE	CheckRandomDifficulty
   1393  f6aa
   1394  f6aa		       b5 c4		      LDA	CurrentDifficulty,X
   1395  f6ac		       18		      CLC
   1396  f6ad		       69 01		      ADC	#1
   1397  f6af		       29 03		      AND	#%00000011	; 0 to 3
   1398  f6b1		       95 c4		      STA	CurrentDifficulty,X
   1399  f6b3
   1400  f6b3				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1401  f6b3		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1402  f6b5		       b9 c5 ff 	      LDA	TrafficChanceTable,Y
   1403  f6b8		       95 be		      STA	TrafficChance,X
   1404  f6ba		       b9 c1 ff 	      LDA	TrafficColorTable,Y
   1405  f6bd		       95 c2		      STA	TrafficColor,X
   1406  f6bf
   1407  f6bf		       a5 c6		      LDA	GameMode	;
   1408  f6c1		       29 01		      AND	#%00000001
   1409  f6c3		       f0 03		      BEQ	UseNextDifficultyTime
   1410  f6c5		       4c c9 f6 	      JMP	StoreDifficultyTime
   1411  f6c8				   UseNextDifficultyTime
   1412  f6c8		       c8		      INY
   1413  f6c9				   StoreDifficultyTime
   1414  f6c9		       b9 c9 ff 	      LDA	TrafficTimeTable,Y
   1415  f6cc		       95 c0		      STA	CheckpointTime,X
   1416  f6ce
   1417  f6ce				   CheckRandomDifficulty
   1418  f6ce		       a5 c6		      LDA	GameMode
   1419  f6d0		       29 08		      AND	#%00001000	; Random difficulties
   1420  f6d2		       f0 09		      BEQ	ReturnFromNextDifficulty
   1421  f6d4				   RandomDifficulty		; need work to make 2 players compatible
   1422  f6d4		       a4 8c		      LDY	FrameCount0
   1423  f6d6		       b9 00 fe 	      LDA	AesTable,Y
   1424  f6d9							;EOR TrafficChance, no need, lets make life simple
   1425  f6d9		       29 3f		      AND	#%00111111
   1426  f6db		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1427  f6dd
   1428  f6dd				   ReturnFromNextDifficulty
   1429  f6dd		       60		      RTS
   1430  f6de
   1431  f6de				   DefaultOffsets
   1432  f6de		       a9 20		      LDA	#$20
   1433  f6e0		       85 96		      STA	TrafficOffset1 + 2
   1434  f6e2		       85 a6		      STA	OpTrafficOffset1 + 2
   1435  f6e4		       a9 40		      LDA	#$40
   1436  f6e6		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1437  f6e8		       85 aa		      STA	OpTrafficOffset2 + 2
   1438  f6ea		       a9 60		      LDA	#$60
   1439  f6ec		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1440  f6ee		       85 ae		      STA	OpTrafficOffset3 + 2
   1441  f6f0		       a9 80		      LDA	#$80
   1442  f6f2		       60		      RTS
   1443  f6f3
   1444  f6f3				   PrintStaticText		; Preload X with the offset referent to StaticText
   1445  f6f3		       bd 00 ff 	      LDA	StaticText,X
   1446  f6f6		       85 d0		      STA	ScoreD0
   1447  f6f8		       e8		      INX
   1448  f6f9		       bd 00 ff 	      LDA	StaticText,X
   1449  f6fc		       85 d1		      STA	ScoreD1
   1450  f6fe		       e8		      INX
   1451  f6ff		       bd 00 ff 	      LDA	StaticText,X
   1452  f702		       85 d2		      STA	ScoreD2
   1453  f704		       e8		      INX
   1454  f705		       bd 00 ff 	      LDA	StaticText,X
   1455  f708		       85 d3		      STA	ScoreD3
   1456  f70a		       e8		      INX
   1457  f70b		       bd 00 ff 	      LDA	StaticText,X
   1458  f70e		       85 d4		      STA	ScoreD4
   1459  f710		       60		      RTS
   1460  f711
   1461  f711				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1462  f711		       a2 00		      LDX	#0
   1463  f713		       a0 04		      LDY	#FONT_OFFSET
   1464  f715
   1465  f715				   ScoreLoop		; 20 
   1466  f715		       85 02		      STA	WSYNC	;2
   1467  f717		       85 2a		      STA	HMOVE
   1468  f719
   1469  f719		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1470  f71b		       85 0d		      STA	PF0	;3
   1471  f71d
   1472  f71d		       a5 82		      LDA	PF1Cache	;3
   1473  f71f		       85 0e		      STA	PF1	;3
   1474  f721
   1475  f721		       a5 83		      LDA	PF2Cache	;3
   1476  f723		       85 0f		      STA	PF2	;3
   1477  f725
   1478  f725				   DrawScoreD0		; 15
   1479  f725		       a6 d0		      LDX	ScoreD0	; 3
   1480  f727		       bd 00 fd 	      LDA	Font,X	;4
   1481  f72a		       85 81		      STA	PF0Cache	;3
   1482  f72c		       c6 d0		      DEC	ScoreD0	;5
   1483  f72e
   1484  f72e				   DrawScoreD1		; 23	
   1485  f72e		       a6 d1		      LDX	ScoreD1	; 3
   1486  f730		       bd 00 fd 	      LDA	Font,X	;4
   1487  f733		       0a		      ASL		;2
   1488  f734		       0a		      ASL		;2
   1489  f735		       0a		      ASL		;2
   1490  f736		       0a		      ASL		;2
   1491  f737		       85 82		      STA	PF1Cache	;3
   1492  f739		       c6 d1		      DEC	ScoreD1	;5
   1493  f73b
   1494  f73b				   DrawScoreD2		; 20
   1495  f73b		       a6 d2		      LDX	ScoreD2	; 3
   1496  f73d		       bd 00 fd 	      LDA	Font,X	;4
   1497  f740		       29 0f		      AND	#%00001111	;2
   1498  f742		       05 82		      ORA	PF1Cache	;3
   1499  f744		       85 82		      STA	PF1Cache	;3
   1500  f746		       c6 d2		      DEC	ScoreD2	;5
   1501  f748
   1502  f748				   DrawScoreD3		; 23
   1503  f748		       a6 d3		      LDX	ScoreD3	; 3
   1504  f74a		       bd 00 fd 	      LDA	Font,X	;4
   1505  f74d		       4a		      LSR		;2
   1506  f74e		       4a		      LSR		;2
   1507  f74f		       4a		      LSR		;2
   1508  f750		       4a		      LSR		;2
   1509  f751		       85 83		      STA	PF2Cache	;3
   1510  f753		       c6 d3		      DEC	ScoreD3	;5
   1511  f755
   1512  f755				   DrawScoreD4		; 20
   1513  f755		       a6 d4		      LDX	ScoreD4	; 3
   1514  f757		       bd 00 fd 	      LDA	Font,X	;4
   1515  f75a		       29 f0		      AND	#%11110000	;2
   1516  f75c		       05 83		      ORA	PF2Cache	;3
   1517  f75e		       85 83		      STA	PF2Cache	;3
   1518  f760		       c6 d4		      DEC	ScoreD4	;5
   1519  f762
   1520  f762
   1521  f762		       88		      DEY		;2
   1522  f763		       10 b0		      BPL	ScoreLoop	;4
   1523  f765
   1524  f765		       85 02		      STA	WSYNC
   1525  f767		       85 2a		      STA	HMOVE
   1526  f769		       20 87 f6 	      JSR	LoadAll
   1527  f76c		       60		      RTS		; 6
   1528  f76d
   1529  f76d				   PrintRightDecimalDigits
   1530  f76d		       b9 00 00 	      LDA	0,Y
   1531  f770		       4a		      LSR
   1532  f771		       4a		      LSR
   1533  f772		       4a		      LSR
   1534  f773		       4a		      LSR
   1535  f774		       aa		      TAX
   1536  f775		       bd 6c fc 	      LDA	FontLookup,X	;4
   1537  f778		       85 d2		      STA	ScoreD2	;3
   1538  f77a
   1539  f77a		       b9 00 00 	      LDA	0,Y
   1540  f77d		       29 0f		      AND	#%00001111
   1541  f77f		       aa		      TAX
   1542  f780		       bd 6c fc 	      LDA	FontLookup,X	;4
   1543  f783		       85 d3		      STA	ScoreD3	;3
   1544  f785
   1545  f785		       c8		      INY
   1546  f786		       b9 00 00 	      LDA	0,Y
   1547  f789		       4a		      LSR
   1548  f78a		       4a		      LSR
   1549  f78b		       4a		      LSR
   1550  f78c		       4a		      LSR
   1551  f78d		       aa		      TAX
   1552  f78e		       bd 6c fc 	      LDA	FontLookup,X	;4
   1553  f791		       85 d0		      STA	ScoreD0	;3
   1554  f793
   1555  f793		       b9 00 00 	      LDA	0,Y
   1556  f796		       29 0f		      AND	#%00001111
   1557  f798		       aa		      TAX
   1558  f799		       bd 6c fc 	      LDA	FontLookup,X	;4
   1559  f79c		       85 d1		      STA	ScoreD1	;3
   1560  f79e
   1561  f79e		       a9 ae		      LDA	#<Triangle + FONT_OFFSET
   1562  f7a0		       85 d4		      STA	ScoreD4
   1563  f7a2		       60		      RTS
   1564  f7a3
   1565  f7a3				   PrintLastLeftDecimalDigits
   1566  f7a3		       b9 00 00 	      LDA	0,Y
   1567  f7a6		       4a		      LSR
   1568  f7a7		       4a		      LSR
   1569  f7a8		       4a		      LSR
   1570  f7a9		       4a		      LSR
   1571  f7aa		       aa		      TAX
   1572  f7ab		       bd 6c fc 	      LDA	FontLookup,X	;4
   1573  f7ae		       85 d3		      STA	ScoreD3	;3
   1574  f7b0		       b9 00 00 	      LDA	0,Y
   1575  f7b3		       29 0f		      AND	#%00001111
   1576  f7b5		       aa		      TAX
   1577  f7b6		       bd 6c fc 	      LDA	FontLookup,X	;4
   1578  f7b9		       85 d4		      STA	ScoreD4	;3
   1579  f7bb		       60		      RTS
   1580  f7bc
   1581  f7bc				   PrintZerosLeft
   1582  f7bc		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1583  f7be		       85 d2		      STA	ScoreD2
   1584  f7c0		       85 d3		      STA	ScoreD3
   1585  f7c2		       85 d4		      STA	ScoreD4
   1586  f7c4		       60		      RTS
   1587  f7c5
   1588  f7c5				   DrawGameOverScoreLine
   1589  f7c5		       85 02		      STA	WSYNC
   1590  f7c7		       20 11 f7 	      JSR	PrintScore
   1591  f7ca		       85 02		      STA	WSYNC
   1592  f7cc		       85 02		      STA	WSYNC
   1593  f7ce		       20 78 f6 	      JSR	ClearPF
   1594  f7d1		       60		      RTS
   1595  f7d2
   1596  f7d2				   DrawGameOverScreenLeft
   1597  f7d2		       85 02		      STA	WSYNC
   1598  f7d4		       20 78 f6 	      JSR	ClearPF
   1599  f7d7
   1600  f7d7				   DrawGlideTimerLeft
   1601  f7d7		       20 99 f8 	      JSR	Sleep8Lines
   1602  f7da		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1603  f7dc		       85 06		      STA	COLUP0
   1604  f7de		       85 02		      STA	WSYNC
   1605  f7e0		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1606  f7e2		       85 d0		      STA	ScoreD0
   1607  f7e4		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1608  f7e6		       85 d1		      STA	ScoreD1
   1609  f7e8		       20 bc f7 	      JSR	PrintZerosLeft
   1610  f7eb		       20 c5 f7 	      JSR	DrawGameOverScoreLine
   1611  f7ee
   1612  f7ee				   DrawHitCountLeft
   1613  f7ee		       20 99 f8 	      JSR	Sleep8Lines
   1614  f7f1		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1615  f7f3		       85 06		      STA	COLUP0
   1616  f7f5		       85 02		      STA	WSYNC
   1617  f7f7		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1618  f7f9		       85 d0		      STA	ScoreD0
   1619  f7fb		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1620  f7fd		       85 d1		      STA	ScoreD1
   1621  f7ff		       20 bc f7 	      JSR	PrintZerosLeft
   1622  f802		       20 c5 f7 	      JSR	DrawGameOverScoreLine
   1623  f805
   1624  f805				   DrawCheckpointCountLeft
   1625  f805		       20 99 f8 	      JSR	Sleep8Lines
   1626  f808		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1627  f80a		       85 06		      STA	COLUP0
   1628  f80c		       85 02		      STA	WSYNC
   1629  f80e		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1630  f810		       85 d0		      STA	ScoreD0
   1631  f812		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1632  f814		       85 d1		      STA	ScoreD1
   1633  f816		       20 bc f7 	      JSR	PrintZerosLeft
   1634  f819		       20 c5 f7 	      JSR	DrawGameOverScoreLine
   1635  f81c
   1636  f81c				   DrawGameVersionLeft
   1637  f81c		       20 99 f8 	      JSR	Sleep8Lines
   1638  f81f		       a9 49		      LDA	#VERSION_COLOR
   1639  f821		       85 06		      STA	COLUP0
   1640  f823
   1641  f823		       a5 c6		      LDA	GameMode
   1642  f825		       aa		      TAX
   1643  f826		       bd 6c fc 	      LDA	FontLookup,X	;4
   1644  f829		       85 d0		      STA	ScoreD0	;3
   1645  f82b
   1646  f82b		       a5 c7		      LDA	CurrentCarId
   1647  f82d		       aa		      TAX
   1648  f82e		       bd 6c fc 	      LDA	FontLookup,X	;4
   1649  f831		       85 d1		      STA	ScoreD1	;3
   1650  f833
   1651  f833		       a5 db		      LDA	StartSWCHB
   1652  f835		       29 40		      AND	#%01000000	; P0 difficulty
   1653  f837		       49 40		      EOR	#%01000000	; Reverse bytes
   1654  f839		       2a		      ROL
   1655  f83a		       2a		      ROL
   1656  f83b		       2a		      ROL
   1657  f83c		       18		      CLC
   1658  f83d		       69 0a		      ADC	#10
   1659  f83f		       aa		      TAX
   1660  f840		       bd 6c fc 	      LDA	FontLookup,X	;4
   1661  f843		       85 d2		      STA	ScoreD2	;3
   1662  f845
   1663  f845		       a5 db		      LDA	StartSWCHB
   1664  f847		       29 80		      AND	#%10000000	; P0 difficulty
   1665  f849		       49 80		      EOR	#%10000000	; Reverse bytes
   1666  f84b		       2a		      ROL
   1667  f84c		       2a		      ROL
   1668  f84d		       18		      CLC
   1669  f84e		       69 0a		      ADC	#10
   1670  f850		       aa		      TAX
   1671  f851		       bd 6c fc 	      LDA	FontLookup,X	;4
   1672  f854		       85 d3		      STA	ScoreD3	;3
   1673  f856
   1674  f856		       a9 a9		      LDA	#<Pipe + FONT_OFFSET
   1675  f858		       85 d4		      STA	ScoreD4
   1676  f85a
   1677  f85a		       20 c5 f7 	      JSR	DrawGameOverScoreLine
   1678  f85d
   1679  f85d		       4c 76 f8 	      JMP	FinalizeDrawGameOver
   1680  f860
   1681  f860				   DrawGameOverScreenRight
   1682  f860		       85 02		      STA	WSYNC
   1683  f862		       20 78 f6 	      JSR	ClearPF
   1684  f865
   1685  f865				   DrawVersionRight
   1686  f865		       20 99 f8 	      JSR	Sleep8Lines
   1687  f868		       a9 49		      LDA	#VERSION_COLOR
   1688  f86a		       85 07		      STA	COLUP1
   1689  f86c		       85 02		      STA	WSYNC
   1690  f86e		       a2 28		      LDX	#<VersionText
   1691  f870		       20 f3 f6 	      JSR	PrintStaticText
   1692  f873		       20 c5 f7 	      JSR	DrawGameOverScoreLine
   1693  f876
   1694  f876				   FinalizeDrawGameOver
   1695  f876		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1696  f878		       85 c9		      STA	ScoreFontColor
   1697  f87a		       20 90 f8 	      JSR	Sleep4Lines
   1698  f87d		       20 a0 f8 	      JSR	Sleep32Lines
   1699  f880		       20 a0 f8 	      JSR	Sleep32Lines
   1700  f883		       4c 05 f5 	      JMP	PrepareOverscan
   1701  f886
   1702  f886				   WaitForVblankEnd
   1703  f886		       ad 84 02 	      LDA	INTIM
   1704  f889		       d0 fb		      BNE	WaitForVblankEnd
   1705  f88b		       85 02		      STA	WSYNC
   1706  f88d		       85 01		      STA	VBLANK
   1707  f88f		       60		      RTS
   1708  f890
   1709  f890				   Sleep4Lines
   1710  f890		       85 02		      STA	WSYNC
   1711  f892		       85 02		      STA	WSYNC
   1712  f894		       85 02		      STA	WSYNC
   1713  f896		       85 02		      STA	WSYNC
   1714  f898		       60		      RTS
   1715  f899
   1716  f899				   Sleep8Lines
   1717  f899		       20 90 f8 	      JSR	Sleep4Lines
   1718  f89c		       20 90 f8 	      JSR	Sleep4Lines
   1719  f89f		       60		      RTS
   1720  f8a0
   1721  f8a0				   Sleep32Lines
   1722  f8a0		       20 99 f8 	      JSR	Sleep8Lines
   1723  f8a3		       20 99 f8 	      JSR	Sleep8Lines
   1724  f8a6		       20 99 f8 	      JSR	Sleep8Lines
   1725  f8a9		       20 99 f8 	      JSR	Sleep8Lines
   1726  f8ac		       60		      RTS
   1727  f8ad
   1728  f8ad							;X = number of WSYNC HMOVE to run
   1729  f8ad				   HMoveXTimes
   1730  f8ad		       85 02		      STA	WSYNC	;3
   1731  f8af		       85 2a		      STA	HMOVE	; 3/10 
   1732  f8b1		       ca		      DEX
   1733  f8b2		       d0 f9		      BNE	HMoveXTimes
   1734  f8b4		       60		      RTS
   1735  f8b5
   1736  f8b5				   ConfigureCarSprites
   1737  f8b5		       a5 8c		      LDA	FrameCount0
   1738  f8b7		       29 01		      AND	#%00000001
   1739  f8b9		       d0 0b		      BNE	LoadForRightScreenSprites
   1740  f8bb				   LoadForLeftScreenSprites
   1741  f8bb		       a5 c7		      LDA	CurrentCarId
   1742  f8bd		       85 b0		      STA	Tmp0
   1743  f8bf		       a5 c8		      LDA	OpCurrentCarId
   1744  f8c1		       85 b1		      STA	Tmp1
   1745  f8c3		       4c ce f8 	      JMP	LoadCarSpritesFromIds
   1746  f8c6				   LoadForRightScreenSprites
   1747  f8c6		       a5 c7		      LDA	CurrentCarId
   1748  f8c8		       85 b1		      STA	Tmp1
   1749  f8ca		       a5 c8		      LDA	OpCurrentCarId
   1750  f8cc		       85 b0		      STA	Tmp0
   1751  f8ce
   1752  f8ce				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1753  f8ce		       a4 b0		      LDY	Tmp0
   1754  f8d0		       b9 9b ff 	      LDA	CarIdToSpriteAddressL,Y
   1755  f8d3		       85 d7		      STA	CarSpritePointerL
   1756  f8d5		       b9 9f ff 	      LDA	CarIdToSpriteAddressH,Y
   1757  f8d8		       85 d8		      STA	CarSpritePointerH
   1758  f8da				   ConfigureOpponentCarSprite
   1759  f8da		       a4 b1		      LDY	Tmp1
   1760  f8dc		       b9 a3 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1761  f8df		       85 d9		      STA	EnemyCarSpritePointerL
   1762  f8e1		       b9 a7 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1763  f8e4		       85 da		      STA	EnemyCarSpritePointerH
   1764  f8e6		       60		      RTS
   1765  f8e7
   1766  f8e7							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1767  f8e7							;X player 0 or 1
   1768  f8e7				   SelectCarWithDpad
   1769  f8e7		       a0 03		      LDY	#3
   1770  f8e9				   SelectCarWithDpadLoop
   1771  f8e9		       ad 80 02 	      LDA	SWCHA
   1772  f8ec		       25 b0		      AND	Tmp0
   1773  f8ee		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1774  f8f0		       98		      TYA
   1775  f8f1		       95 c7		      STA	CurrentCarId,X
   1776  f8f3				   ContinueSelectCarWithDpadLoop
   1777  f8f3		       46 b0		      LSR	Tmp0
   1778  f8f5		       88		      DEY
   1779  f8f6		       10 f1		      BPL	SelectCarWithDpadLoop
   1780  f8f8		       60		      RTS
   1781  f8f9
   1782  f8f9				   ProcessOpponentLine
   1783  f8f9		       a5 8c		      LDA	FrameCount0
   1784  f8fb		       29 01		      AND	#%00000001
   1785  f8fd		       38		      SEC
   1786  f8fe		       d0 15		      BNE	Player0IsOpponent
   1787  f900				   Player1IsOpponent		; Code could be reused?
   1788  f900		       a5 91		      LDA	TrafficOffset0 + 1
   1789  f902		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1790  f904		       85 b0		      STA	Tmp0
   1791  f906		       a5 92		      LDA	TrafficOffset0 + 2
   1792  f908		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1793  f90a		       85 b1		      STA	Tmp1
   1794  f90c		       a5 ba		      LDA	Traffic0Msb
   1795  f90e		       e5 bb		      SBC	OpTraffic0Msb
   1796  f910		       85 b2		      STA	Tmp2
   1797  f912		       4c 27 f9 	      JMP	StoreInFrontPlayer
   1798  f915				   Player0IsOpponent
   1799  f915		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1800  f917		       e5 91		      SBC	TrafficOffset0 + 1
   1801  f919		       85 b0		      STA	Tmp0
   1802  f91b		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1803  f91d		       e5 92		      SBC	TrafficOffset0 + 2
   1804  f91f		       85 b1		      STA	Tmp1
   1805  f921		       a5 bb		      LDA	OpTraffic0Msb
   1806  f923		       e5 ba		      SBC	Traffic0Msb
   1807  f925		       85 b2		      STA	Tmp2
   1808  f927
   1809  f927				   StoreInFrontPlayer
   1810  f927		       85 f4		      STA	IsOpponentInFront
   1811  f929
   1812  f929				   AddOffsetToOpponentLine
   1813  f929		       18		      CLC
   1814  f92a		       a5 b0		      LDA	Tmp0
   1815  f92c		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1816  f92e		       85 b0		      STA	Tmp0
   1817  f930		       a5 b1		      LDA	Tmp1
   1818  f932		       69 00		      ADC	#0
   1819  f934		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1820  f936		       a5 b2		      LDA	Tmp2
   1821  f938		       69 00		      ADC	#0
   1822  f93a		       05 b1		      ORA	Tmp1
   1823  f93c		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1824  f93e				   OpponentNotVisible
   1825  f93e		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1826  f940		       85 cf		      STA	OpponentLine
   1827  f942		       4c 49 f9 	      JMP	ReturnFromProcessOpponentLine
   1828  f945				   OpponentVisible
   1829  f945		       a5 b0		      LDA	Tmp0
   1830  f947		       85 cf		      STA	OpponentLine
   1831  f949				   ReturnFromProcessOpponentLine
   1832  f949		       60		      RTS
   1833  f94a
   1834  f94a							; Value stored in A
   1835  f94a				   IsOpponentColliding
   1836  f94a							;Any non default state, opponent do not colide
   1837  f94a		       a5 8e		      LDA	CollisionCounter
   1838  f94c		       05 8f		      ORA	OpCollisionCounter
   1839  f94e		       05 cb		      ORA	ScoreFontColorHoldChange
   1840  f950		       05 cc		      ORA	OpScoreFontColorHoldChange
   1841  f952		       d0 07		      BNE	OpponentNotColliding
   1842  f954		       a5 f4		      LDA	IsOpponentInFront
   1843  f956		       25 07		      AND	CXPPMM
   1844  f958		       4c 5d f9 	      JMP	ReturnIsOpponentColliding
   1845  f95b				   OpponentNotColliding
   1846  f95b		       a9 00		      LDA	#0
   1847  f95d				   ReturnIsOpponentColliding
   1848  f95d		       60		      RTS
   1849  f95e
   1850  f95e
   1851  f95e							; Movement and colision are binded because the car must be moved after duplicate size.
   1852  f95e							; Use X for the player
   1853  f95e							; Tmp2 Traffic colision result
   1854  f95e				   TestCollisionAndMove
   1855  f95e							; Until store the movemnt, Y contains the value to be stored.
   1856  f95e							; see if player0 colides with the rest
   1857  f95e		       a5 b2		      LDA	Tmp2
   1858  f960		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1859  f962		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1860  f964		       d0 25		      BNE	NoCollision
   1861  f966		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1862  f968		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1863  f96a		       f0 1f		      BEQ	NoCollision
   1864  f96c		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1865  f96e		       f0 1b		      BEQ	NoCollision
   1866  f970		       a9 ff		      LDA	#COLLISION_FRAMES
   1867  f972		       95 8e		      STA	CollisionCounter,X
   1868  f974		       b5 f2		      LDA	Player0SpeedH,X
   1869  f976		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1870  f978		       a9 10		      LDA	#COLLISION_SPEED_L
   1871  f97a		       d5 f0		      CMP	Player0SpeedL,X
   1872  f97c		       b0 04		      BCS	SkipSetColisionSpeedL
   1873  f97e				   SetColisionSpeedL
   1874  f97e		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1875  f980		       95 f0		      STA	Player0SpeedL,X
   1876  f982				   SkipSetColisionSpeedL
   1877  f982		       a9 00		      LDA	#0
   1878  f984		       95 f2		      STA	Player0SpeedH,X
   1879  f986		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1880  f988		       4c db f9 	      JMP	StoreHMove	; We keep position consistent
   1881  f98b				   NoCollision
   1882  f98b
   1883  f98b				   DecrementCollision
   1884  f98b		       b5 8e		      LDA	CollisionCounter,X
   1885  f98d		       f0 06		      BEQ	FinishDecrementCollision
   1886  f98f		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1887  f991		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1888  f993		       d6 8e		      DEC	CollisionCounter,X
   1889  f995				   FinishDecrementCollision
   1890  f995
   1891  f995				   ResetPlayerSize
   1892  f995		       d0 04		      BNE	FinishResetPlayerSize
   1893  f997		       a9 30		      LDA	#%00110000
   1894  f999		       95 04		      STA	NUSIZ0,X	;
   1895  f99b				   FinishResetPlayerSize
   1896  f99b
   1897  f99b				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1898  f99b		       b5 8e		      LDA	CollisionCounter,X
   1899  f99d		       c9 01		      CMP	#1	; Last frame before reset
   1900  f99f		       d0 05		      BNE	SkipResetPlayerPosition
   1901  f9a1		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1902  f9a3		       4c db f9 	      JMP	StoreHMove
   1903  f9a6				   SkipResetPlayerPosition
   1904  f9a6
   1905  f9a6				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1906  f9a6		       b5 c7		      LDA	CurrentCarId,X
   1907  f9a8		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1908  f9aa		       d0 08		      BNE	PrepareReadXAxis
   1909  f9ac		       a0 00		      LDY	#0
   1910  f9ae		       a5 8c		      LDA	FrameCount0
   1911  f9b0		       29 01		      AND	#DRAGSTER_TURN_MASK
   1912  f9b2		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1913  f9b4
   1914  f9b4				   PrepareReadXAxis
   1915  f9b4		       a0 00		      LDY	#0
   1916  f9b6		       b5 b6		      LDA	Player0X,X
   1917  f9b8				   BeginReadLeft
   1918  f9b8		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1919  f9ba		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1920  f9bd		       2c 80 02 	      BIT	SWCHA
   1921  f9c0		       d0 07		      BNE	SkipMoveLeft
   1922  f9c2		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1923  f9c4		       d6 b6		      DEC	Player0X,X
   1924  f9c6		       4c db f9 	      JMP	StoreHMove	; Cannot move left and right...
   1925  f9c9				   SkipMoveLeft
   1926  f9c9				   BeginReadRight
   1927  f9c9		       b5 b6		      LDA	Player0X,X
   1928  f9cb		       c9 2c		      CMP	#PLAYER_MAX_X
   1929  f9cd		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1930  f9cf		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1931  f9d2		       2c 80 02 	      BIT	SWCHA
   1932  f9d5		       d0 04		      BNE	SkipMoveRight
   1933  f9d7		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1934  f9d9		       f6 b6		      INC	Player0X,X
   1935  f9db				   SkipMoveRight
   1936  f9db				   StoreHMove
   1937  f9db		       94 20		      STY	HMP0,X	;set the move for player 0
   1938  f9dd
   1939  f9dd		       60		      RTS
   1940  f9de
   1941  f9de							; X Traffic offset 4 bits each lane, 4 lanes per player
   1942  f9de							; Tmp3 Max X offset
   1943  f9de							; Tmp4 Max Player Speed L
   1944  f9de							; Tmp5 Max Player Speed H
   1945  f9de				   UpdateOffsets
   1946  f9de		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1947  f9e0		       a5 c6		      LDA	GameMode
   1948  f9e2		       29 04		      AND	#%00000100	; GameModes with high delta
   1949  f9e4		       f0 02		      BEQ	UpdateOffsetsLoop
   1950  f9e6		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1951  f9e8
   1952  f9e8				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1953  f9e8		       38		      SEC
   1954  f9e9		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1955  f9eb		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1956  f9ee		       85 b0		      STA	Tmp0
   1957  f9f0		       c8		      INY
   1958  f9f1		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1959  f9f3		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1960  f9f6		       85 b1		      STA	Tmp1
   1961  f9f8		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1962  f9fa		       e9 00		      SBC	#0
   1963  f9fc		       85 b2		      STA	Tmp2
   1964  f9fe
   1965  f9fe				   AddsTheResult
   1966  f9fe		       18		      CLC
   1967  f9ff		       a5 b0		      LDA	Tmp0
   1968  fa01		       75 90		      ADC	TrafficOffset0,X
   1969  fa03		       95 90		      STA	TrafficOffset0,X
   1970  fa05		       e8		      INX
   1971  fa06		       a5 b1		      LDA	Tmp1
   1972  fa08		       75 90		      ADC	TrafficOffset0,X
   1973  fa0a		       95 90		      STA	TrafficOffset0,X
   1974  fa0c		       e8		      INX
   1975  fa0d		       a5 b2		      LDA	Tmp2	; Carry
   1976  fa0f		       75 90		      ADC	TrafficOffset0,X
   1977  fa11		       95 90		      STA	TrafficOffset0,X
   1978  fa13		       90 0f		      BCC	CalculateOffsetCache
   1979  fa15				   CalculatePlayer0Msb
   1980  fa15		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1981  fa17		       d0 05		      BNE	CalculatePlayer1Msb
   1982  fa19		       e6 ba		      INC	Traffic0Msb
   1983  fa1b		       4c 24 fa 	      JMP	CalculateOffsetCache
   1984  fa1e				   CalculatePlayer1Msb
   1985  fa1e		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1986  fa20		       d0 02		      BNE	CalculateOffsetCache
   1987  fa22		       e6 bb		      INC	OpTraffic0Msb
   1988  fa24
   1989  fa24				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1990  fa24		       e8		      INX
   1991  fa25		       38		      SEC
   1992  fa26		       69 00		      ADC	#0	;Increment by one
   1993  fa28		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1994  fa2a
   1995  fa2a				   PrepareNextUpdateLoop
   1996  fa2a		       c8		      INY
   1997  fa2b		       e8		      INX
   1998  fa2c		       e4 b3		      CPX	Tmp3	; Max X offset
   1999  fa2e		       d0 b8		      BNE	UpdateOffsetsLoop
   2000  fa30		       60		      RTS
   2001  fa31
   2002  fa31							; X Player 0 or 1
   2003  fa31				   ProcessSpeed
   2004  fa31				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2005  fa31		       a9 00		      LDA	#0
   2006  fa33		       85 b0		      STA	Tmp0	; Break speed
   2007  fa35		       b5 b8		      LDA	CountdownTimer,X
   2008  fa37		       d0 0d		      BNE	Break
   2009  fa39		       b4 c7		      LDY	CurrentCarId,X
   2010  fa3b		       a5 8c		      LDA	FrameCount0
   2011  fa3d		       39 af ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2012  fa40		       d0 04		      BNE	Break
   2013  fa42		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2014  fa44		       85 b0		      STA	Tmp0
   2015  fa46
   2016  fa46				   Break
   2017  fa46		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2018  fa49		       2c 80 02 	      BIT	SWCHA
   2019  fa4c		       d0 12		      BNE	BreakNonZero
   2020  fa4e		       b5 0c		      LDA	INPT4,X	;3
   2021  fa50		       10 0a		      BPL	BreakWhileAccelerating
   2022  fa52		       b4 d5		      LDY	Gear,X
   2023  fa54		       b9 bb ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2024  fa57		       85 b0		      STA	Tmp0
   2025  fa59		       4c 60 fa 	      JMP	BreakNonZero
   2026  fa5c				   BreakWhileAccelerating		; Allow better control while breaking.
   2027  fa5c		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2028  fa5e		       85 b0		      STA	Tmp0
   2029  fa60
   2030  fa60				   BreakNonZero
   2031  fa60		       a5 b0		      LDA	Tmp0
   2032  fa62		       f0 29		      BEQ	SkipBreak
   2033  fa64
   2034  fa64				   DecreaseSpeed
   2035  fa64		       38		      SEC
   2036  fa65		       b5 f0		      LDA	Player0SpeedL,X
   2037  fa67		       e5 b0		      SBC	Tmp0
   2038  fa69		       95 f0		      STA	Player0SpeedL,X
   2039  fa6b		       b5 f2		      LDA	Player0SpeedH,X
   2040  fa6d		       e9 00		      SBC	#0
   2041  fa6f		       95 f2		      STA	Player0SpeedH,X
   2042  fa71
   2043  fa71				   CheckMinSpeed
   2044  fa71		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2045  fa73		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2046  fa75		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2047  fa77		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2048  fa79
   2049  fa79				   CompareLBreakSpeed
   2050  fa79		       b5 f0		      LDA	Player0SpeedL,X
   2051  fa7b		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2052  fa7d		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2053  fa7f		       4c 8a fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2054  fa82
   2055  fa82				   ResetMinSpeed
   2056  fa82		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2057  fa84		       95 f2		      STA	Player0SpeedH,X
   2058  fa86		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2059  fa88		       95 f0		      STA	Player0SpeedL,X
   2060  fa8a
   2061  fa8a				   SkipAccelerateIfBreaking
   2062  fa8a		       4c d3 fa 	      JMP	SkipAccelerate
   2063  fa8d				   SkipBreak
   2064  fa8d
   2065  fa8d				   Acelerates
   2066  fa8d		       b5 b8		      LDA	CountdownTimer,X
   2067  fa8f		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2068  fa91
   2069  fa91				   ContinueAccelerateTest
   2070  fa91		       b5 0c		      LDA	INPT4,X	;3
   2071  fa93		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2072  fa95		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2073  fa98		       2c 80 02 	      BIT	SWCHA
   2074  fa9b		       d0 36		      BNE	SkipAccelerate
   2075  fa9d
   2076  fa9d				   IncreaseCarSpeed
   2077  fa9d		       a9 02		      LDA	#2
   2078  fa9f		       85 b0		      STA	Tmp0	; Loop control
   2079  faa1		       b4 c7		      LDY	CurrentCarId,X
   2080  faa3				   IncreaseCarSpeedLoop
   2081  faa3							;Adds speed
   2082  faa3		       18		      CLC
   2083  faa4		       b5 dc		      LDA	AccelerateBuffer,X
   2084  faa6		       79 ab ff 	      ADC	CarIdToAccelerateSpeed,Y
   2085  faa9		       95 dc		      STA	AccelerateBuffer,X
   2086  faab		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2087  faad		       f6 f0		      INC	Player0SpeedL,X
   2088  faaf		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2089  fab1		       f6 f2		      INC	Player0SpeedH,X
   2090  fab3				   ContinueIncreaseSpeedLoop
   2091  fab3		       c6 b0		      DEC	Tmp0
   2092  fab5		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2093  fab7				   SkipIncreaseCarSpeed
   2094  fab7
   2095  fab7				   CheckIfAlreadyMaxSpeed
   2096  fab7		       b5 f2		      LDA	Player0SpeedH,X
   2097  fab9		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2098  fabb		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2099  fabd		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2100  fabf							;High bit is max, compare the low
   2101  fabf		       b4 c7		      LDY	CurrentCarId,X
   2102  fac1		       b5 f0		      LDA	Player0SpeedL,X
   2103  fac3		       d9 b3 ff 	      CMP	CarIdToMaxSpeedL,Y
   2104  fac6		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2105  fac8							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2106  fac8
   2107  fac8				   ResetToMaxSpeed		; Speed is more, or is already max
   2108  fac8		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2109  faca		       95 f2		      STA	Player0SpeedH,X
   2110  facc		       b4 c7		      LDY	CurrentCarId,X
   2111  face		       b9 b3 ff 	      LDA	CarIdToMaxSpeedL,Y
   2112  fad1		       95 f0		      STA	Player0SpeedL,X
   2113  fad3				   SkipAccelerate
   2114  fad3		       60		      RTS
   2115  fad4
   2116  fad4							;Tmp0 Traffic Offset to compare with next checkpoint
   2117  fad4				   ProcessPlayerStatus
   2118  fad4				   IsGameOver
   2119  fad4		       b5 b8		      LDA	CountdownTimer,X
   2120  fad6		       15 f0		      ORA	Player0SpeedL,X
   2121  fad8		       15 f2		      ORA	Player0SpeedH,X
   2122  fada		       d0 0b		      BNE	IsCheckpoint
   2123  fadc		       a9 01		      LDA	#1
   2124  fade		       95 cb		      STA	ScoreFontColorHoldChange,X
   2125  fae0		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2126  fae2		       95 c9		      STA	ScoreFontColor,X
   2127  fae4		       4c 19 fb 	      JMP	SkipIsTimeOver
   2128  fae7
   2129  fae7				   IsCheckpoint
   2130  fae7		       b5 cd		      LDA	NextCheckpoint,X
   2131  fae9		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2132  faeb		       d0 20		      BNE	SkipIsCheckpoint
   2133  faed		       18		      CLC
   2134  faee		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2135  faf0		       95 cd		      STA	NextCheckpoint,X
   2136  faf2		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2137  faf4		       95 c9		      STA	ScoreFontColor,X
   2138  faf6		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2139  faf8		       95 cb		      STA	ScoreFontColorHoldChange,X
   2140  fafa		       b5 b8		      LDA	CountdownTimer,X
   2141  fafc		       18		      CLC
   2142  fafd		       75 c0		      ADC	CheckpointTime,X
   2143  faff		       95 b8		      STA	CountdownTimer,X
   2144  fb01		       90 04		      BCC	JumpSkipTimeOver
   2145  fb03		       a9 ff		      LDA	#$FF
   2146  fb05		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2147  fb07				   JumpSkipTimeOver
   2148  fb07		       20 a4 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2149  fb0a		       4c 19 fb 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2150  fb0d				   SkipIsCheckpoint
   2151  fb0d
   2152  fb0d				   IsTimeOver
   2153  fb0d		       b5 b8		      LDA	CountdownTimer,X
   2154  fb0f		       d0 08		      BNE	SkipIsTimeOver
   2155  fb11		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2156  fb13		       95 cb		      STA	ScoreFontColorHoldChange,X
   2157  fb15		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2158  fb17		       95 c9		      STA	ScoreFontColor,X
   2159  fb19				   SkipIsTimeOver
   2160  fb19		       60		      RTS
   2161  fb1a
   2162  fb1a
   2163  fb1a				   EverySecond		; 64 frames to be more precise
   2164  fb1a		       a9 3f		      LDA	#%00111111
   2165  fb1c		       25 8c		      AND	FrameCount0
   2166  fb1e		       d0 06		      BNE	SkipEverySecondAction
   2167  fb20		       d5 b8		      CMP	CountdownTimer,X
   2168  fb22		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2169  fb24		       d6 b8		      DEC	CountdownTimer,X
   2170  fb26				   SkipEverySecondAction
   2171  fb26		       60		      RTS
   2172  fb27
   2173  fb27				   CalculateGear
   2174  fb27		       b5 f0		      LDA	Player0SpeedL,X	;3
   2175  fb29		       29 80		      AND	#%10000000	;2
   2176  fb2b		       15 f2		      ORA	Player0SpeedH,X	;3
   2177  fb2d		       18		      CLC		;2
   2178  fb2e		       2a		      ROL		;2
   2179  fb2f		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2180  fb31		       95 d5		      STA	Gear,X
   2181  fb33		       60		      RTS
   2182  fb34
   2183  fb34				   ProcessScoreFontColor
   2184  fb34		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2185  fb36		       f0 06		      BEQ	ResetScoreFontColor
   2186  fb38		       88		      DEY
   2187  fb39		       94 cb		      STY	ScoreFontColorHoldChange,X
   2188  fb3b		       4c 43 fb 	      JMP	SkipScoreFontColor
   2189  fb3e				   ResetScoreFontColor
   2190  fb3e		       bd a2 fc 	      LDA	PlayerToDefaultColor,X
   2191  fb41		       95 c9		      STA	ScoreFontColor,X
   2192  fb43				   SkipScoreFontColor
   2193  fb43		       60		      RTS
   2194  fb44
   2195  fb44							; Moved here because of rom space.
   2196  fb44							; The only SBR in constants space
   2197  fb44				   DrawQrCode
   2198  fb44		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2199  fb46		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2200  fb48		       a9 01		      LDA	#%00000001	; Mirror playfield
   2201  fb4a		       85 0a		      STA	CTRLPF
   2202  fb4c		       20 62 f6 	      JSR	ClearAll	; To be 100 sure!
   2203  fb4f		       ad 82 02 	      LDA	SWCHB
   2204  fb52		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2205  fb54		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2206  fb56		       f0 07		      BEQ	StoreReversedQrCode
   2207  fb58		       86 09		      STX	COLUBK
   2208  fb5a		       84 08		      STY	COLUPF
   2209  fb5c		       4c 63 fb 	      JMP	ContinueQrCode
   2210  fb5f				   StoreReversedQrCode
   2211  fb5f		       86 08		      STX	COLUPF
   2212  fb61		       84 09		      STY	COLUBK
   2213  fb63
   2214  fb63				   ContinueQrCode
   2215  fb63		       a2 08		      LDX	#8
   2216  fb65		       20 ad f8 	      JSR	HMoveXTimes
   2217  fb68		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2218  fb6a		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2219  fb6c		       20 86 f8 	      JSR	WaitForVblankEnd
   2220  fb6f		       20 99 f8 	      JSR	Sleep8Lines
   2221  fb72		       20 99 f8 	      JSR	Sleep8Lines
   2222  fb75		       20 99 f8 	      JSR	Sleep8Lines
   2223  fb78
   2224  fb78				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2225  fb78		       85 02		      STA	WSYNC
   2226  fb7a		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2227  fb7d		       85 0e		      STA	PF1	;3
   2228  fb7f		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2229  fb82		       85 0f		      STA	PF2	;3
      0  fb84					      SLEEP	27	; 
      1  fb84				   .CYCLES    SET	27
      2  fb84
      3  fb84				  -	      IF	.CYCLES < 2
      4  fb84				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb84				  -	      ERR
      6  fb84					      ENDIF
      7  fb84
      8  fb84					      IF	.CYCLES & 1
      9  fb84				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb84				  -	      nop	0
     11  fb84					      ELSE
     12  fb84		       24 00		      bit	VSYNC
     13  fb86					      ENDIF
     14  fb86				   .CYCLES    SET	.CYCLES - 3
     15  fb86					      ENDIF
     16  fb86
     17  fb86					      REPEAT	.CYCLES / 2
     18  fb86		       ea		      nop
     17  fb86					      REPEND
     18  fb87		       ea		      nop
     17  fb87					      REPEND
     18  fb88		       ea		      nop
     17  fb88					      REPEND
     18  fb89		       ea		      nop
     17  fb89					      REPEND
     18  fb8a		       ea		      nop
     17  fb8a					      REPEND
     18  fb8b		       ea		      nop
     17  fb8b					      REPEND
     18  fb8c		       ea		      nop
     17  fb8c					      REPEND
     18  fb8d		       ea		      nop
     17  fb8d					      REPEND
     18  fb8e		       ea		      nop
     17  fb8e					      REPEND
     18  fb8f		       ea		      nop
     17  fb8f					      REPEND
     18  fb90		       ea		      nop
     17  fb90					      REPEND
     18  fb91		       ea		      nop
     19  fb92					      REPEND
   2231  fb92		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2232  fb95		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2233  fb97		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2234  fb9a		       85 0e		      STA	PF1	;3
   2235  fb9c
   2236  fb9c		       ca		      DEX		;2
   2237  fb9d		       d0 d9		      BNE	QrCodeLoop	;2
   2238  fb9f		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2239  fba1		       88		      DEY		;2
   2240  fba2		       10 d4		      BPL	QrCodeLoop	;4
   2241  fba4
   2242  fba4				   EndQrCodeLoop
   2243  fba4		       85 02		      STA	WSYNC	;
   2244  fba6		       a9 00		      LDA	#0
   2245  fba8		       85 0e		      STA	PF1	;3
   2246  fbaa		       85 0f		      STA	PF2	;3
   2247  fbac
   2248  fbac		       20 a0 f8 	      JSR	Sleep32Lines
   2249  fbaf		       4c 05 f5 	      JMP	PrepareOverscan
   2250  fbb2
   2251  fbb2							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2252  fc00					      org	$FC00
   2253  fc00				   QrCode1
   2254  fc00		       1f		      .byte.b	#%00011111
   2255  fc01		       10		      .byte.b	#%00010000
   2256  fc02		       17		      .byte.b	#%00010111
   2257  fc03		       17		      .byte.b	#%00010111
   2258  fc04		       17		      .byte.b	#%00010111
   2259  fc05		       10		      .byte.b	#%00010000
   2260  fc06		       1f		      .byte.b	#%00011111
   2261  fc07		       00		      .byte.b	#%00000000
   2262  fc08		       17		      .byte.b	#%00010111
   2263  fc09		       10		      .byte.b	#%00010000
   2264  fc0a		       1d		      .byte.b	#%00011101
   2265  fc0b		       16		      .byte.b	#%00010110
   2266  fc0c		       03		      .byte.b	#%00000011
   2267  fc0d		       19		      .byte.b	#%00011001
   2268  fc0e		       13		      .byte.b	#%00010011
   2269  fc0f		       1c		      .byte.b	#%00011100
   2270  fc10		       0b		      .byte.b	#%00001011
   2271  fc11		       00		      .byte.b	#%00000000
   2272  fc12		       1f		      .byte.b	#%00011111
   2273  fc13		       10		      .byte.b	#%00010000
   2274  fc14		       17		      .byte.b	#%00010111
   2275  fc15		       17		      .byte.b	#%00010111
   2276  fc16		       17		      .byte.b	#%00010111
   2277  fc17		       10		      .byte.b	#%00010000
   2278  fc18		       1f		      .byte.b	#%00011111
   2279  fc19
   2280  fc19				   QrCode2
   2281  fc19		       c3		      .byte.b	#%11000011
   2282  fc1a		       9a		      .byte.b	#%10011010
   2283  fc1b		       82		      .byte.b	#%10000010
   2284  fc1c		       da		      .byte.b	#%11011010
   2285  fc1d		       aa		      .byte.b	#%10101010
   2286  fc1e		       ca		      .byte.b	#%11001010
   2287  fc1f		       f3		      .byte.b	#%11110011
   2288  fc20		       78		      .byte.b	#%01111000
   2289  fc21		       df		      .byte.b	#%11011111
   2290  fc22		       fc		      .byte.b	#%11111100
   2291  fc23		       c7		      .byte.b	#%11000111
   2292  fc24		       98		      .byte.b	#%10011000
   2293  fc25		       23		      .byte.b	#%00100011
   2294  fc26		       b9		      .byte.b	#%10111001
   2295  fc27		       d2		      .byte.b	#%11010010
   2296  fc28		       30		      .byte.b	#%00110000
   2297  fc29		       eb		      .byte.b	#%11101011
   2298  fc2a		       28		      .byte.b	#%00101000
   2299  fc2b		       ab		      .byte.b	#%10101011
   2300  fc2c		       72		      .byte.b	#%01110010
   2301  fc2d		       fa		      .byte.b	#%11111010
   2302  fc2e		       7a		      .byte.b	#%01111010
   2303  fc2f		       32		      .byte.b	#%00110010
   2304  fc30		       3a		      .byte.b	#%00111010
   2305  fc31		       63		      .byte.b	#%01100011
   2306  fc32
   2307  fc32				   QrCode3
   2308  fc32		       98		      .byte.b	#%10011000
   2309  fc33		       c3		      .byte.b	#%11000011
   2310  fc34		       39		      .byte.b	#%00111001
   2311  fc35		       34		      .byte.b	#%00110100
   2312  fc36		       ff		      .byte.b	#%11111111
   2313  fc37		       71		      .byte.b	#%01110001
   2314  fc38		       d5		      .byte.b	#%11010101
   2315  fc39		       d1		      .byte.b	#%11010001
   2316  fc3a		       5f		      .byte.b	#%01011111
   2317  fc3b		       26		      .byte.b	#%00100110
   2318  fc3c		       2d		      .byte.b	#%00101101
   2319  fc3d		       e9		      .byte.b	#%11101001
   2320  fc3e		       d6		      .byte.b	#%11010110
   2321  fc3f		       26		      .byte.b	#%00100110
   2322  fc40		       ba		      .byte.b	#%10111010
   2323  fc41		       03		      .byte.b	#%00000011
   2324  fc42		       dd		      .byte.b	#%11011101
   2325  fc43		       e0		      .byte.b	#%11100000
   2326  fc44		       57		      .byte.b	#%01010111
   2327  fc45		       14		      .byte.b	#%00010100
   2328  fc46		       35		      .byte.b	#%00110101
   2329  fc47		       e5		      .byte.b	#%11100101
   2330  fc48		       b5		      .byte.b	#%10110101
   2331  fc49		       d4		      .byte.b	#%11010100
   2332  fc4a		       97		      .byte.b	#%10010111
   2333  fc4b
   2334  fc4b				   QrCode4
   2335  fc4b		       09		      .byte.b	#%00001001
   2336  fc4c		       0e		      .byte.b	#%00001110
   2337  fc4d		       0f		      .byte.b	#%00001111
   2338  fc4e		       0c		      .byte.b	#%00001100
   2339  fc4f		       0c		      .byte.b	#%00001100
   2340  fc50		       08		      .byte.b	#%00001000
   2341  fc51		       08		      .byte.b	#%00001000
   2342  fc52		       06		      .byte.b	#%00000110
   2343  fc53		       06		      .byte.b	#%00000110
   2344  fc54		       0b		      .byte.b	#%00001011
   2345  fc55		       0f		      .byte.b	#%00001111
   2346  fc56		       04		      .byte.b	#%00000100
   2347  fc57		       08		      .byte.b	#%00001000
   2348  fc58		       0f		      .byte.b	#%00001111
   2349  fc59		       09		      .byte.b	#%00001001
   2350  fc5a		       07		      .byte.b	#%00000111
   2351  fc5b		       05		      .byte.b	#%00000101
   2352  fc5c		       00		      .byte.b	#%00000000
   2353  fc5d		       0f		      .byte.b	#%00001111
   2354  fc5e		       08		      .byte.b	#%00001000
   2355  fc5f		       0b		      .byte.b	#%00001011
   2356  fc60		       0b		      .byte.b	#%00001011
   2357  fc61		       0b		      .byte.b	#%00001011
   2358  fc62		       08		      .byte.b	#%00001000
   2359  fc63		       0f		      .byte.b	#%00001111
   2360  fc64
   2361  fc64				   PlayerToUpMask
   2362  fc64		       10		      .byte.b	#%00010000	;
   2363  fc65		       01		      .byte.b	#%00000001	;
   2364  fc66
   2365  fc66				   PlayerToDownMask
   2366  fc66		       20		      .byte.b	#%00100000	;
   2367  fc67		       02		      .byte.b	#%00000010	;
   2368  fc68
   2369  fc68
   2370  fc68				   PlayerToLeftMask
   2371  fc68		       40		      .byte.b	#%01000000	;
   2372  fc69		       04		      .byte.b	#%00000100	;
   2373  fc6a
   2374  fc6a				   PlayerToRightMask
   2375  fc6a		       80		      .byte.b	#%10000000	;
   2376  fc6b		       08		      .byte.b	#%00001000	;
   2377  fc6c
   2378  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2379  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2380  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2381  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2382  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2383  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2384  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2385  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2386  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2387  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2388  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2389  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2390  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2391  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2392  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2393  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2394  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2395  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2396  fc7d
   2397  fc7d				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2398  fc7d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2399  fc7e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2400  fc7f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2401  fc80		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2402  fc81		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2403  fc82		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2404  fc83		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2405  fc84		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2406  fc85		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2407  fc86		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2408  fc87		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2409  fc88		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2410  fc89		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2411  fc8a		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2412  fc8b		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2413  fc8c		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2414  fc8d
   2415  fc8d				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2416  fc8d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2417  fc8e		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2418  fc8f		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2419  fc90		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2420  fc91		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2421  fc92		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2422  fc93		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2423  fc94		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2424  fc95		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2425  fc96		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2426  fc97		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2427  fc98		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2428  fc99		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2429  fc9a		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2430  fc9b		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2431  fc9c		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2432  fc9d		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2433  fc9e		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2434  fc9f		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2435  fca0		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2436  fca1		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2437  fca2
   2438  fca2				   PlayerToDefaultColor
   2439  fca2		       f9		      .byte.b	#PLAYER0_COLOR
   2440  fca3		       96		      .byte.b	#PLAYER1_COLOR
   2441  fca4
   2442  fd00					      org	$FD00
   2443  fd00				   Font
   2444  fd00				   C0
   2445  fd00		       e7		      .byte.b	#%11100111	;
   2446  fd01		       a5		      .byte.b	#%10100101	; 
   2447  fd02		       a5		      .byte.b	#%10100101	; 
   2448  fd03		       a5		      .byte.b	#%10100101	; 
   2449  fd04		       e7		      .byte.b	#%11100111	;	
   2450  fd05				   C1
   2451  fd05		       e7		      .byte.b	#%11100111	;
   2452  fd06		       42		      .byte.b	#%01000010	; 
   2453  fd07		       42		      .byte.b	#%01000010	; 
   2454  fd08		       42		      .byte.b	#%01000010	; 
   2455  fd09		       66		      .byte.b	#%01100110	;
   2456  fd0a				   C2
   2457  fd0a		       e7		      .byte.b	#%11100111	;
   2458  fd0b		       24		      .byte.b	#%00100100	; 
   2459  fd0c		       e7		      .byte.b	#%11100111	; 
   2460  fd0d		       81		      .byte.b	#%10000001	; 
   2461  fd0e		       e7		      .byte.b	#%11100111	;
   2462  fd0f				   C3
   2463  fd0f		       e7		      .byte.b	#%11100111	;
   2464  fd10		       81		      .byte.b	#%10000001	; 
   2465  fd11		       e7		      .byte.b	#%11100111	; 
   2466  fd12		       81		      .byte.b	#%10000001	; 
   2467  fd13		       e7		      .byte.b	#%11100111	;
   2468  fd14				   C4
   2469  fd14		       81		      .byte.b	#%10000001	;
   2470  fd15		       81		      .byte.b	#%10000001	; 
   2471  fd16		       e7		      .byte.b	#%11100111	; 
   2472  fd17		       a5		      .byte.b	#%10100101	; 
   2473  fd18		       a5		      .byte.b	#%10100101	;
   2474  fd19				   C5
   2475  fd19		       e7		      .byte.b	#%11100111	;
   2476  fd1a		       81		      .byte.b	#%10000001	; 
   2477  fd1b		       e7		      .byte.b	#%11100111	; 
   2478  fd1c		       24		      .byte.b	#%00100100	; 
   2479  fd1d		       e7		      .byte.b	#%11100111	;
   2480  fd1e				   C6
   2481  fd1e		       e7		      .byte.b	#%11100111	;
   2482  fd1f		       a5		      .byte.b	#%10100101	; 
   2483  fd20		       e7		      .byte.b	#%11100111	; 
   2484  fd21		       24		      .byte.b	#%00100100	; 
   2485  fd22		       e7		      .byte.b	#%11100111	;
   2486  fd23				   C7
   2487  fd23		       81		      .byte.b	#%10000001	;
   2488  fd24		       81		      .byte.b	#%10000001	; 
   2489  fd25		       81		      .byte.b	#%10000001	; 
   2490  fd26		       81		      .byte.b	#%10000001	; 
   2491  fd27		       e7		      .byte.b	#%11100111	;
   2492  fd28				   C8
   2493  fd28		       e7		      .byte.b	#%11100111	;
   2494  fd29		       a5		      .byte.b	#%10100101	; 
   2495  fd2a		       e7		      .byte.b	#%11100111	; 
   2496  fd2b		       a5		      .byte.b	#%10100101	; 
   2497  fd2c		       e7		      .byte.b	#%11100111	;
   2498  fd2d				   C9
   2499  fd2d		       e7		      .byte.b	#%11100111	;
   2500  fd2e		       81		      .byte.b	#%10000001	; 
   2501  fd2f		       e7		      .byte.b	#%11100111	; 
   2502  fd30		       a5		      .byte.b	#%10100101	; 
   2503  fd31		       e7		      .byte.b	#%11100111	;
   2504  fd32				   CA
   2505  fd32		       a5		      .byte.b	#%10100101	;
   2506  fd33		       a5		      .byte.b	#%10100101	; 
   2507  fd34		       e7		      .byte.b	#%11100111	; 
   2508  fd35		       a5		      .byte.b	#%10100101	; 
   2509  fd36		       e7		      .byte.b	#%11100111	;
   2510  fd37				   CB
   2511  fd37		       66		      .byte.b	#%01100110	;
   2512  fd38		       a5		      .byte.b	#%10100101	; 
   2513  fd39		       66		      .byte.b	#%01100110	; 
   2514  fd3a		       a5		      .byte.b	#%10100101	;
   2515  fd3b		       66		      .byte.b	#%01100110	;
   2516  fd3c				   CC
   2517  fd3c		       e7		      .byte.b	#%11100111	;
   2518  fd3d		       24		      .byte.b	#%00100100	; 
   2519  fd3e		       24		      .byte.b	#%00100100	; 
   2520  fd3f		       24		      .byte.b	#%00100100	;
   2521  fd40		       e7		      .byte.b	#%11100111	;
   2522  fd41
   2523  fd41				   CD
   2524  fd41		       66		      .byte.b	#%01100110	;
   2525  fd42		       a5		      .byte.b	#%10100101	; 
   2526  fd43		       a5		      .byte.b	#%10100101	; 
   2527  fd44		       a5		      .byte.b	#%10100101	;
   2528  fd45		       66		      .byte.b	#%01100110	;
   2529  fd46
   2530  fd46				   CE
   2531  fd46		       e7		      .byte.b	#%11100111	;
   2532  fd47		       24		      .byte.b	#%00100100	; 
   2533  fd48		       e7		      .byte.b	#%11100111	; 
   2534  fd49		       24		      .byte.b	#%00100100	; 
   2535  fd4a		       e7		      .byte.b	#%11100111	;
   2536  fd4b
   2537  fd4b				   CF
   2538  fd4b		       24		      .byte.b	#%00100100	;
   2539  fd4c		       24		      .byte.b	#%00100100	; 
   2540  fd4d		       e7		      .byte.b	#%11100111	; 
   2541  fd4e		       24		      .byte.b	#%00100100	; 
   2542  fd4f		       e7		      .byte.b	#%11100111	;
   2543  fd50
   2544  fd50				   CG
   2545  fd50		       c3		      .byte.b	#%11000011	;
   2546  fd51		       a5		      .byte.b	#%10100101	; 
   2547  fd52		       a5		      .byte.b	#%10100101	; 
   2548  fd53		       24		      .byte.b	#%00100100	; 
   2549  fd54		       c3		      .byte.b	#%11000011	;	
   2550  fd55
   2551  fd55				   CH
   2552  fd55		       a5		      .byte.b	#%10100101	;
   2553  fd56		       a5		      .byte.b	#%10100101	; 
   2554  fd57		       e7		      .byte.b	#%11100111	; 
   2555  fd58		       a5		      .byte.b	#%10100101	; 
   2556  fd59		       a5		      .byte.b	#%10100101	;
   2557  fd5a
   2558  fd5a				   CK
   2559  fd5a		       a5		      .byte.b	#%10100101	;
   2560  fd5b		       a5		      .byte.b	#%10100101	; 
   2561  fd5c		       66		      .byte.b	#%01100110	; 
   2562  fd5d		       a5		      .byte.b	#%10100101	; 
   2563  fd5e		       a5		      .byte.b	#%10100101	;
   2564  fd5f
   2565  fd5f				   CL
   2566  fd5f		       e7		      .byte.b	#%11100111	;
   2567  fd60		       24		      .byte.b	#%00100100	; 
   2568  fd61		       24		      .byte.b	#%00100100	; 
   2569  fd62		       24		      .byte.b	#%00100100	; 
   2570  fd63		       24		      .byte.b	#%00100100	;
   2571  fd64
   2572  fd64				   CM
   2573  fd64		       a5		      .byte.b	#%10100101	;
   2574  fd65		       a5		      .byte.b	#%10100101	; 
   2575  fd66		       a5		      .byte.b	#%10100101	; 
   2576  fd67		       e7		      .byte.b	#%11100111	; 
   2577  fd68		       a5		      .byte.b	#%10100101	;
   2578  fd69
   2579  fd69				   CN
   2580  fd69		       a5		      .byte.b	#%10100101	;
   2581  fd6a		       a5		      .byte.b	#%10100101	; 
   2582  fd6b		       a5		      .byte.b	#%10100101	; 
   2583  fd6c		       a5		      .byte.b	#%10100101	; 
   2584  fd6d		       66		      .byte.b	#%01100110	;	
   2585  fd6e
   2586  fd6e
   2587  fd6e				   CO
   2588  fd6e		       42		      .byte.b	#%01000010	;
   2589  fd6f		       a5		      .byte.b	#%10100101	; 
   2590  fd70		       a5		      .byte.b	#%10100101	; 
   2591  fd71		       a5		      .byte.b	#%10100101	; 
   2592  fd72		       42		      .byte.b	#%01000010	;	
   2593  fd73
   2594  fd73				   CP
   2595  fd73		       24		      .byte.b	#%00100100	;
   2596  fd74		       24		      .byte.b	#%00100100	; 
   2597  fd75		       e7		      .byte.b	#%11100111	; 
   2598  fd76		       a5		      .byte.b	#%10100101	; 
   2599  fd77		       e7		      .byte.b	#%11100111	;
   2600  fd78
   2601  fd78				   CR
   2602  fd78		       a5		      .byte.b	#%10100101	;
   2603  fd79		       a5		      .byte.b	#%10100101	; 
   2604  fd7a		       66		      .byte.b	#%01100110	; 
   2605  fd7b		       a5		      .byte.b	#%10100101	; 
   2606  fd7c		       66		      .byte.b	#%01100110	;
   2607  fd7d
   2608  fd7d				   CS
   2609  fd7d		       66		      .byte.b	#%01100110	;
   2610  fd7e		       81		      .byte.b	#%10000001	; 
   2611  fd7f		       42		      .byte.b	#%01000010	; 
   2612  fd80		       24		      .byte.b	#%00100100	; 
   2613  fd81		       c3		      .byte.b	#%11000011	;
   2614  fd82
   2615  fd82				   CT
   2616  fd82		       42		      .byte.b	#%01000010	;
   2617  fd83		       42		      .byte.b	#%01000010	; 
   2618  fd84		       42		      .byte.b	#%01000010	; 
   2619  fd85		       42		      .byte.b	#%01000010	; 
   2620  fd86		       e7		      .byte.b	#%11100111	;
   2621  fd87
   2622  fd87				   CV
   2623  fd87		       42		      .byte.b	#%01000010	;
   2624  fd88		       a5		      .byte.b	#%10100101	; 
   2625  fd89		       a5		      .byte.b	#%10100101	; 
   2626  fd8a		       a5		      .byte.b	#%10100101	; 
   2627  fd8b		       a5		      .byte.b	#%10100101	;	
   2628  fd8c
   2629  fd8c				   CY
   2630  fd8c		       42		      .byte.b	#%01000010	;
   2631  fd8d		       42		      .byte.b	#%01000010	; 
   2632  fd8e		       42		      .byte.b	#%01000010	; 
   2633  fd8f		       a5		      .byte.b	#%10100101	; 
   2634  fd90		       a5		      .byte.b	#%10100101	;
   2635  fd91
   2636  fd91				   CW
   2637  fd91		       a5		      .byte.b	#%10100101	;
   2638  fd92		       e7		      .byte.b	#%11100111	; 
   2639  fd93		       a5		      .byte.b	#%10100101	; 
   2640  fd94		       a5		      .byte.b	#%10100101	; 
   2641  fd95		       a5		      .byte.b	#%10100101	;
   2642  fd96
   2643  fd96				   CZ
   2644  fd96		       e7		      .byte.b	#%11100111	;
   2645  fd97		       24		      .byte.b	#%00100100	; 
   2646  fd98		       42		      .byte.b	#%01000010	; 
   2647  fd99		       81		      .byte.b	#%10000001	; 
   2648  fd9a		       e7		      .byte.b	#%11100111	;
   2649  fd9b
   2650  fd9b
   2651  fd9b				   Exclamation
   2652  fd9b		       42		      .byte.b	#%01000010	;
   2653  fd9c		       00		      .byte.b	#%00000000	; 
   2654  fd9d		       42		      .byte.b	#%01000010	; 
   2655  fd9e		       42		      .byte.b	#%01000010	; 
   2656  fd9f		       42		      .byte.b	#%01000010	;
   2657  fda0
   2658  fda0				   Dot
   2659  fda0		       42		      .byte.b	#%01000010	;
   2660  fda1		       42		      .byte.b	#%01000010	; 
   2661  fda2		       00		      .byte.b	#%00000000	; 
   2662  fda3		       00		      .byte.b	#%00000000	; 
   2663  fda4		       00		      .byte.b	#%00000000	;
   2664  fda5
   2665  fda5				   Pipe
   2666  fda5				   Colon
   2667  fda5		       42		      .byte.b	#%01000010	;
   2668  fda6		       42		      .byte.b	#%01000010	; 
   2669  fda7		       00		      .byte.b	#%00000000	; 
   2670  fda8		       42		      .byte.b	#%01000010	; 
   2671  fda9		       42		      .byte.b	#%01000010	;
   2672  fdaa
   2673  fdaa				   Triangle
   2674  fdaa		       81		      .byte.b	#%10000001	;
   2675  fdab		       c3		      .byte.b	#%11000011	; 
   2676  fdac		       e7		      .byte.b	#%11100111	; 
   2677  fdad		       c3		      .byte.b	#%11000011	; 
   2678  fdae		       81		      .byte.b	#%10000001	;
   2679  fdaf
   2680  fdaf				   Space
   2681  fdaf				   C0B
   2682  fdaf		       00		      .byte.b	#%00000000	;
   2683  fdb0		       00		      .byte.b	#%00000000	; 
   2684  fdb1		       00		      .byte.b	#%00000000	; 
   2685  fdb2		       00		      .byte.b	#%00000000	; 
   2686  fdb3		       00		      .byte.b	#%00000000	;	
   2687  fdb4				   C1B
   2688  fdb4		       24		      .byte.b	#%00100100	;
   2689  fdb5		       00		      .byte.b	#%00000000	; 
   2690  fdb6		       00		      .byte.b	#%00000000	; 
   2691  fdb7		       00		      .byte.b	#%00000000	; 
   2692  fdb8		       00		      .byte.b	#%00000000	;
   2693  fdb9				   C2B
   2694  fdb9		       66		      .byte.b	#%01100110	;
   2695  fdba		       00		      .byte.b	#%00000000	; 
   2696  fdbb		       00		      .byte.b	#%00000000	; 
   2697  fdbc		       00		      .byte.b	#%00000000	; 
   2698  fdbd		       00		      .byte.b	#%00000000	;
   2699  fdbe				   C3B
   2700  fdbe		       e7		      .byte.b	#%11100111	;
   2701  fdbf		       00		      .byte.b	#%00000000	; 
   2702  fdc0		       00		      .byte.b	#%00000000	; 
   2703  fdc1		       00		      .byte.b	#%00000000	; 
   2704  fdc2		       00		      .byte.b	#%00000000	;
   2705  fdc3				   C4B
   2706  fdc3		       e7		      .byte.b	#%11100111	;
   2707  fdc4		       24		      .byte.b	#%00100100	; 
   2708  fdc5		       00		      .byte.b	#%00000000	; 
   2709  fdc6		       00		      .byte.b	#%00000000	; 
   2710  fdc7		       00		      .byte.b	#%00000000	;
   2711  fdc8				   C5B
   2712  fdc8		       e7		      .byte.b	#%11100111	;
   2713  fdc9		       66		      .byte.b	#%01100110	; 
   2714  fdca		       00		      .byte.b	#%00000000	; 
   2715  fdcb		       00		      .byte.b	#%00000000	; 
   2716  fdcc		       00		      .byte.b	#%00000000	;
   2717  fdcd				   C6B
   2718  fdcd		       e7		      .byte.b	#%11100111	;
   2719  fdce		       e7		      .byte.b	#%11100111	; 
   2720  fdcf		       00		      .byte.b	#%00000000	; 
   2721  fdd0		       00		      .byte.b	#%00000000	; 
   2722  fdd1		       00		      .byte.b	#%00000000	;
   2723  fdd2				   C7B
   2724  fdd2		       e7		      .byte.b	#%11100111	;
   2725  fdd3		       e7		      .byte.b	#%11100111	; 
   2726  fdd4		       24		      .byte.b	#%00100100	; 
   2727  fdd5		       00		      .byte.b	#%00000000	; 
   2728  fdd6		       00		      .byte.b	#%00000000	;
   2729  fdd7				   C8B
   2730  fdd7		       e7		      .byte.b	#%11100111	;
   2731  fdd8		       e7		      .byte.b	#%11100111	; 
   2732  fdd9		       66		      .byte.b	#%01100110	; 
   2733  fdda		       00		      .byte.b	#%00000000	; 
   2734  fddb		       00		      .byte.b	#%00000000	;
   2735  fddc				   C9B
   2736  fddc		       e7		      .byte.b	#%11100111	;
   2737  fddd		       e7		      .byte.b	#%11100111	; 
   2738  fdde		       e7		      .byte.b	#%11100111	; 
   2739  fddf		       00		      .byte.b	#%00000000	; 
   2740  fde0		       00		      .byte.b	#%00000000	;
   2741  fde1				   CAB
   2742  fde1		       e7		      .byte.b	#%11100111	;
   2743  fde2		       e7		      .byte.b	#%11100111	; 
   2744  fde3		       e7		      .byte.b	#%11100111	; 
   2745  fde4		       24		      .byte.b	#%00100100	; 
   2746  fde5		       00		      .byte.b	#%00000000	;
   2747  fde6				   CBB
   2748  fde6		       e7		      .byte.b	#%11100111	;
   2749  fde7		       e7		      .byte.b	#%11100111	; 
   2750  fde8		       e7		      .byte.b	#%11100111	; 
   2751  fde9		       66		      .byte.b	#%01100110	; 
   2752  fdea		       00		      .byte.b	#%00000000	;
   2753  fdeb				   CCB
   2754  fdeb		       e7		      .byte.b	#%11100111	;
   2755  fdec		       e7		      .byte.b	#%11100111	; 
   2756  fded		       e7		      .byte.b	#%11100111	; 
   2757  fdee		       e7		      .byte.b	#%11100111	; 
   2758  fdef		       00		      .byte.b	#%00000000	;
   2759  fdf0
   2760  fdf0				   CDB
   2761  fdf0		       e7		      .byte.b	#%11100111	;
   2762  fdf1		       e7		      .byte.b	#%11100111	; 
   2763  fdf2		       e7		      .byte.b	#%11100111	; 
   2764  fdf3		       e7		      .byte.b	#%11100111	; 
   2765  fdf4		       24		      .byte.b	#%00100100	;
   2766  fdf5
   2767  fdf5				   CEB
   2768  fdf5		       e7		      .byte.b	#%11100111	;
   2769  fdf6		       e7		      .byte.b	#%11100111	; 
   2770  fdf7		       e7		      .byte.b	#%11100111	; 
   2771  fdf8		       e7		      .byte.b	#%11100111	; 
   2772  fdf9		       66		      .byte.b	#%01100110	;
   2773  fdfa
   2774  fdfa				   CFB
   2775  fdfa		       e7		      .byte.b	#%11100111	;
   2776  fdfb		       e7		      .byte.b	#%11100111	; 
   2777  fdfc		       e7		      .byte.b	#%11100111	; 
   2778  fdfd		       e7		      .byte.b	#%11100111	; 
   2779  fdfe		       e7		      .byte.b	#%11100111	;
   2780  fdff
   2781  fe00					      org	$FE00
   2782  fe00				   AesTable
   2783  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2784  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2785  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2786  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2787  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2788  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2789  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2790  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2791  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2792  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2793  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2794  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2795  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2796  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2797  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2798  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2799  ff00
   2800  ff00							; From FF00 to FFFB (122 bytes) to use here
   2801  ff00
   2802  ff00				   StaticText		; All static text must be on the same MSB block. 
   2803  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2804  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2805  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2806  ff02		       77		      .byte.b	#<CP + #FONT_OFFSET
   2807  ff03		       86		      .byte.b	#<CT + #FONT_OFFSET
   2808  ff04		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2809  ff05
   2810  ff05				   HellwayLeftText
   2811  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2812  ff06		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2813  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2814  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2815  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2816  ff0a
   2817  ff0a				   HellwayRightText
   2818  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2819  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2820  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2821  ff0d		       90		      .byte.b	#<CY + #FONT_OFFSET
   2822  ff0e		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2823  ff0f
   2824  ff0f				   OpbText
   2825  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2826  ff10		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2827  ff11		       72		      .byte.b	#<CO + #FONT_OFFSET
   2828  ff12		       77		      .byte.b	#<CP + #FONT_OFFSET
   2829  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2830  ff14
   2831  ff14				   YearText
   2832  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2833  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2834  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2835  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2836  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2837  ff19
   2838  ff19				   GameText
   2839  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2840  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2841  ff1b		       68		      .byte.b	#<CM + #FONT_OFFSET
   2842  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2843  ff1d		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2844  ff1e
   2845  ff1e				   OverText
   2846  ff1e		       72		      .byte.b	#<CO + #FONT_OFFSET
   2847  ff1f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2848  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2849  ff21		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2850  ff22		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2851  ff23				   GoText
   2852  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2853  ff24		       72		      .byte.b	#<CO + #FONT_OFFSET
   2854  ff25		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2855  ff26		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2856  ff27		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2857  ff28
   2858  ff28				   VersionText
   2859  ff28		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2860  ff29		       a4		      .byte.b	#<Dot + #FONT_OFFSET
   2861  ff2a		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2862  ff2b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2863  ff2c		       ae		      .byte.b	#<Triangle + #FONT_OFFSET
   2864  ff2d				   EndStaticText
   2865  ff2d
   2866  ff2d				   TachometerSizeLookup1
   2867  ff2d		       1f		      .byte.b	#%00011111
   2868  ff2e		       3f		      .byte.b	#%00111111
   2869  ff2f		       7f		      .byte.b	#%01111111
   2870  ff30		       ff		      .byte.b	#%11111111
   2871  ff31		       ff		      .byte.b	#%11111111
   2872  ff32		       ff		      .byte.b	#%11111111
   2873  ff33		       ff		      .byte.b	#%11111111
   2874  ff34		       ff		      .byte.b	#%11111111
   2875  ff35
   2876  ff35				   TachometerSizeLookup2
   2877  ff35		       00		      .byte.b	#%00000000
   2878  ff36		       00		      .byte.b	#%00000000
   2879  ff37		       00		      .byte.b	#%00000000
   2880  ff38		       00		      .byte.b	#%00000000
   2881  ff39		       80		      .byte.b	#%10000000
   2882  ff3a		       c0		      .byte.b	#%11000000
   2883  ff3b		       e0		      .byte.b	#%11100000
   2884  ff3c		       f0		      .byte.b	#%11110000
   2885  ff3d
   2886  ff3d				   TachometerGearLookup
   2887  ff3d		       01		      .byte.b	#%00000001
   2888  ff3e		       02		      .byte.b	#%00000010
   2889  ff3f		       04		      .byte.b	#%00000100
   2890  ff40		       08		      .byte.b	#%00001000
   2891  ff41		       10		      .byte.b	#%00010000
   2892  ff42		       30		      .byte.b	#%00110000
   2893  ff43
   2894  ff43				   EngineSoundType
   2895  ff43		       02		      .byte.b	#2
   2896  ff44		       02		      .byte.b	#2
   2897  ff45		       0e		      .byte.b	#14
   2898  ff46		       06		      .byte.b	#6
   2899  ff47		       06		      .byte.b	#6
   2900  ff48		       0e		      .byte.b	#14
   2901  ff49
   2902  ff49				   EngineBaseFrequence
   2903  ff49		       1f		      .byte.b	#31
   2904  ff4a		       15		      .byte.b	#21
   2905  ff4b		       14		      .byte.b	#20
   2906  ff4c		       1f		      .byte.b	#31
   2907  ff4d		       16		      .byte.b	#22
   2908  ff4e		       03		      .byte.b	#3
   2909  ff4f
   2910  ff4f				   CarSprite0		; Upside down, Original Car
   2911  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2912  ff57				   CarSprite0NoPadding
   2913  ff57		       7e		      .byte.b	#%01111110
   2914  ff58		       24		      .byte.b	#%00100100
   2915  ff59		       bd		      .byte.b	#%10111101
   2916  ff5a		       3c		      .byte.b	#%00111100
   2917  ff5b		       bd		      .byte.b	#%10111101
   2918  ff5c		       3c		      .byte.b	#%00111100
   2919  ff5d
   2920  ff5d				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2921  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2922  ff65				   CarSprite1NoPadding
   2923  ff65		       bd		      .byte.b	#%10111101
   2924  ff66		       7e		      .byte.b	#%01111110
   2925  ff67		       5a		      .byte.b	#%01011010
   2926  ff68		       66		      .byte.b	#%01100110
   2927  ff69		       bd		      .byte.b	#%10111101
   2928  ff6a		       3c		      .byte.b	#%00111100
   2929  ff6b
   2930  ff6b				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2931  ff6b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2932  ff73				   CarSprite2NoPadding
   2933  ff73		       7e		      .byte.b	#%01111110
   2934  ff74		       a5		      .byte.b	#%10100101
   2935  ff75		       42		      .byte.b	#%01000010
   2936  ff76		       42		      .byte.b	#%01000010
   2937  ff77		       bd		      .byte.b	#%10111101
   2938  ff78		       7e		      .byte.b	#%01111110
   2939  ff79
   2940  ff79				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2941  ff79		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2942  ff81				   CarSprite3NoPadding
   2943  ff81		       3c		      .byte.b	#%00111100
   2944  ff82		       db		      .byte.b	#%11011011
   2945  ff83		       db		      .byte.b	#%11011011
   2946  ff84		       3c		      .byte.b	#%00111100
   2947  ff85		       5a		      .byte.b	#%01011010
   2948  ff86		       3c		      .byte.b	#%00111100
   2949  ff87
   2950  ff87				   TrafficSpeeds
   2951  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2952  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2953  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2954  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2955  ff8b		       e6		      .byte.b	#$E6	;  Trafic2 L
   2956  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2957  ff8d		       c2		      .byte.b	#$C2	;  Trafic3 L
   2958  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2959  ff8f		       9e		      .byte.b	#$9E	;  Trafic4 L
   2960  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2961  ff91				   TrafficSpeedsHighDelta
   2962  ff91		       00		      .byte.b	#$00	;  Trafic0 L
   2963  ff92		       00		      .byte.b	#$00	;  Trafic0 H
   2964  ff93		       0a		      .byte.b	#$0A	;  Trafic1 L
   2965  ff94		       01		      .byte.b	#$01	;  Trafic1 H
   2966  ff95		       c8		      .byte.b	#$C8	;  Trafic2 L
   2967  ff96		       00		      .byte.b	#$00	;  Trafic2 H
   2968  ff97		       86		      .byte.b	#$86	;  Trafic3 L
   2969  ff98		       00		      .byte.b	#$00	;  Trafic3 H
   2970  ff99		       44		      .byte.b	#$44	;  Trafic4 L
   2971  ff9a		       00		      .byte.b	#$00	;  Trafic4 H
   2972  ff9b
   2973  ff9b				   CarIdToSpriteAddressL
   2974  ff9b		       4f		      .byte.b	#<CarSprite0
   2975  ff9c		       5d		      .byte.b	#<CarSprite1
   2976  ff9d		       6b		      .byte.b	#<CarSprite2
   2977  ff9e		       79		      .byte.b	#<CarSprite3
   2978  ff9f
   2979  ff9f				   CarIdToSpriteAddressH
   2980  ff9f		       ff		      .byte.b	#>CarSprite0
   2981  ffa0		       ff		      .byte.b	#>CarSprite1
   2982  ffa1		       ff		      .byte.b	#>CarSprite2
   2983  ffa2		       ff		      .byte.b	#>CarSprite3
   2984  ffa3
   2985  ffa3				   EnemyCarIdToSpriteAddressL
   2986  ffa3		       57		      .byte.b	#<CarSprite0NoPadding
   2987  ffa4		       65		      .byte.b	#<CarSprite1NoPadding
   2988  ffa5		       73		      .byte.b	#<CarSprite2NoPadding
   2989  ffa6		       81		      .byte.b	#<CarSprite3NoPadding
   2990  ffa7
   2991  ffa7				   EnemyCarIdToSpriteAddressH
   2992  ffa7		       ff		      .byte.b	#>CarSprite0NoPadding
   2993  ffa8		       ff		      .byte.b	#>CarSprite1NoPadding
   2994  ffa9		       ff		      .byte.b	#>CarSprite2NoPadding
   2995  ffaa		       ff		      .byte.b	#>CarSprite3NoPadding
   2996  ffab
   2997  ffab				   CarIdToAccelerateSpeed
   2998  ffab		       80		      .byte.b	#128
   2999  ffac		       c0		      .byte.b	#192
   3000  ffad		       60		      .byte.b	#96
   3001  ffae		       c0		      .byte.b	#192
   3002  ffaf
   3003  ffaf				   CarIdToTimeoverBreakInterval 		; Glide
   3004  ffaf		       03		      .byte.b	#%00000011	;Every 4 frames
   3005  ffb0		       03		      .byte.b	#%00000011	;Every 4 frames
   3006  ffb1		       0f		      .byte.b	#%00001111	;Every 16 frames
   3007  ffb2		       03		      .byte.b	#%00000011	;Every 4 frames
   3008  ffb3
   3009  ffb3				   CarIdToMaxSpeedL
   3010  ffb3		       80		      .byte.b	#$80
   3011  ffb4		       00		      .byte.b	#$00	; One less gear
   3012  ffb5		       80		      .byte.b	#$80
   3013  ffb6		       80		      .byte.b	#$80
   3014  ffb7
   3015  ffb7				   CarIdToMaxGear
   3016  ffb7		       05		      .byte.b	#5
   3017  ffb8		       04		      .byte.b	#4	; One less gear
   3018  ffb9		       05		      .byte.b	#5
   3019  ffba		       05		      .byte.b	#5
   3020  ffbb
   3021  ffbb				   GearToBreakSpeedTable
   3022  ffbb		       09		      .byte.b	#(BREAK_SPEED - 1)
   3023  ffbc		       09		      .byte.b	#(BREAK_SPEED - 1)
   3024  ffbd		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3025  ffbe		       0b		      .byte.b	#(BREAK_SPEED + 1)
   3026  ffbf		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3027  ffc0		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3028  ffc1
   3029  ffc1				   TrafficColorTable
   3030  ffc1		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3031  ffc2		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3032  ffc3		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3033  ffc4		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3034  ffc5
   3035  ffc5				   TrafficChanceTable
   3036  ffc5		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3037  ffc6		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3038  ffc7		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3039  ffc8		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3040  ffc9
   3041  ffc9				   TrafficTimeTable
   3042  ffc9		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3043  ffca		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3044  ffcb		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3045  ffcc		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3046  ffcd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3047  ffce
   3048  ffce
   3049  fffc					      org	$FFFC
   3050  fffc		       00 f0		      .word.w	BeforeStart
   3051  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
