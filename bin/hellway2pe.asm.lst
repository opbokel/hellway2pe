------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 f3 f6 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 c8 f6 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080
    283  f080				   ConfigurePlayer1XPosition
    284  f080		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    285  f082		       85 b7		      STA	Player1X	;3
    286  f084
    287  f084				   HPositioning 		; Avoid sleep doing needed stuff
    288  f084		       85 02		      STA	WSYNC
    289  f086
    290  f086				   ConfigurePlayer0XPosition
    291  f086		       a9 21		      LDA	#PLAYER_0_X_START	;2
    292  f088		       85 b6		      STA	Player0X	;3
    293  f08a
    294  f08a				   ConfigureMissileSize
    295  f08a		       a9 30		      LDA	#%00110000	;2 Missile Size
    296  f08c		       85 04		      STA	NUSIZ0	;3
    297  f08e		       85 05		      STA	NUSIZ1	;3
    298  f090
    299  f090				   ConfigureNextCheckpoint
    300  f090		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    301  f092		       85 cd		      STA	NextCheckpoint
    302  f094
    303  f094		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f096					      SLEEP	4	;
      1  f096				   .CYCLES    SET	4
      2  f096
      3  f096				  -	      IF	.CYCLES < 2
      4  f096				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f096				  -	      ERR
      6  f096					      ENDIF
      7  f096
      8  f096				  -	      IF	.CYCLES & 1
      9  f096				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f096				  -	      nop	0
     11  f096				  -	      ELSE
     12  f096				  -	      bit	VSYNC
     13  f096				  -	      ENDIF
     14  f096				  -.CYCLES    SET	.CYCLES - 3
     15  f096					      ENDIF
     16  f096
     17  f096					      REPEAT	.CYCLES / 2
     18  f096		       ea		      nop
     17  f096					      REPEND
     18  f097		       ea		      nop
     19  f098					      REPEND
    305  f098		       85 12		      STA	RESM0
      0  f09a					      SLEEP	2	;
      1  f09a				   .CYCLES    SET	2
      2  f09a
      3  f09a				  -	      IF	.CYCLES < 2
      4  f09a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09a				  -	      ERR
      6  f09a					      ENDIF
      7  f09a
      8  f09a				  -	      IF	.CYCLES & 1
      9  f09a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09a				  -	      nop	0
     11  f09a				  -	      ELSE
     12  f09a				  -	      bit	VSYNC
     13  f09a				  -	      ENDIF
     14  f09a				  -.CYCLES    SET	.CYCLES - 3
     15  f09a					      ENDIF
     16  f09a
     17  f09a					      REPEAT	.CYCLES / 2
     18  f09a		       ea		      nop
     19  f09b					      REPEND
    307  f09b		       85 14		      STA	RESBL
      0  f09d					      SLEEP	2
      1  f09d				   .CYCLES    SET	2
      2  f09d
      3  f09d				  -	      IF	.CYCLES < 2
      4  f09d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09d				  -	      ERR
      6  f09d					      ENDIF
      7  f09d
      8  f09d				  -	      IF	.CYCLES & 1
      9  f09d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09d				  -	      nop	0
     11  f09d				  -	      ELSE
     12  f09d				  -	      bit	VSYNC
     13  f09d				  -	      ENDIF
     14  f09d				  -.CYCLES    SET	.CYCLES - 3
     15  f09d					      ENDIF
     16  f09d
     17  f09d					      REPEAT	.CYCLES / 2
     18  f09d		       ea		      nop
     19  f09e					      REPEND
    309  f09e		       85 13		      STA	RESM1
      0  f0a0					      SLEEP	3
      1  f0a0				   .CYCLES    SET	3
      2  f0a0
      3  f0a0				  -	      IF	.CYCLES < 2
      4  f0a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a0				  -	      ERR
      6  f0a0					      ENDIF
      7  f0a0
      8  f0a0					      IF	.CYCLES & 1
      9  f0a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a0				  -	      nop	0
     11  f0a0					      ELSE
     12  f0a0		       24 00		      bit	VSYNC
     13  f0a2					      ENDIF
     14  f0a2				   .CYCLES    SET	.CYCLES - 3
     15  f0a2					      ENDIF
     16  f0a2
     17  f0a2				  -	      REPEAT	.CYCLES / 2
     18  f0a2				  -	      nop
     19  f0a2					      REPEND
    311  f0a2
    312  f0a2		       a9 e0		      LDA	#$E0
    313  f0a4		       85 24		      STA	HMBL
    314  f0a6		       85 22		      STA	HMM0
    315  f0a8		       85 23		      STA	HMM1
    316  f0aa		       85 02		      STA	WSYNC
    317  f0ac		       85 2a		      STA	HMOVE
    318  f0ae		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    319  f0b0		       85 2b		      STA	HMCLR
      0  f0b2					      SLEEP	30
      1  f0b2				   .CYCLES    SET	30
      2  f0b2
      3  f0b2				  -	      IF	.CYCLES < 2
      4  f0b2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b2				  -	      ERR
      6  f0b2					      ENDIF
      7  f0b2
      8  f0b2				  -	      IF	.CYCLES & 1
      9  f0b2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b2				  -	      nop	0
     11  f0b2				  -	      ELSE
     12  f0b2				  -	      bit	VSYNC
     13  f0b2				  -	      ENDIF
     14  f0b2				  -.CYCLES    SET	.CYCLES - 3
     15  f0b2					      ENDIF
     16  f0b2
     17  f0b2					      REPEAT	.CYCLES / 2
     18  f0b2		       ea		      nop
     17  f0b2					      REPEND
     18  f0b3		       ea		      nop
     17  f0b3					      REPEND
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     19  f0c1					      REPEND
    321  f0c1		       85 10		      STA	RESP0
    322  f0c3							;SLEEP 5 ; Temporarily move player 1 away.
    323  f0c3		       85 11		      STA	RESP1
    324  f0c5
    325  f0c5				   WaitResetToEnd
    326  f0c5		       ad 84 02 	      LDA	INTIM
    327  f0c8		       d0 fb		      BNE	WaitResetToEnd
    328  f0ca
    329  f0ca				   MainLoop
    330  f0ca		       a9 02		      LDA	#2
    331  f0cc		       85 00		      STA	VSYNC
    332  f0ce		       85 02		      STA	WSYNC
    333  f0d0		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    334  f0d2				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    335  f0d2		       a9 01		      LDA	#%00000001	;3
    336  f0d4		       24 df		      BIT	TextFlickerMode	;2
    337  f0d6		       f0 05		      BEQ	TextSideFrameZero	;2
    338  f0d8		       25 8d		      AND	FrameCount1	;2
    339  f0da		       4c df f0 	      JMP	StoreTextSize	;3
    340  f0dd				   TextSideFrameZero
    341  f0dd		       25 8c		      AND	FrameCount0	;2
    342  f0df				   StoreTextSize
    343  f0df		       85 de		      STA	TextSide	;3
    344  f0e1
    345  f0e1				   PrepareMaxHMove
      0  f0e1					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e1				   .CYCLES    SET	18
      2  f0e1
      3  f0e1				  -	      IF	.CYCLES < 2
      4  f0e1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e1				  -	      ERR
      6  f0e1					      ENDIF
      7  f0e1
      8  f0e1				  -	      IF	.CYCLES & 1
      9  f0e1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e1				  -	      nop	0
     11  f0e1				  -	      ELSE
     12  f0e1				  -	      bit	VSYNC
     13  f0e1				  -	      ENDIF
     14  f0e1				  -.CYCLES    SET	.CYCLES - 3
     15  f0e1					      ENDIF
     16  f0e1
     17  f0e1					      REPEAT	.CYCLES / 2
     18  f0e1		       ea		      nop
     17  f0e1					      REPEND
     18  f0e2		       ea		      nop
     17  f0e2					      REPEND
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     19  f0ea					      REPEND
    347  f0ea		       a9 80		      LDA	#$80
    348  f0ec		       85 24		      STA	HMBL
    349  f0ee		       85 22		      STA	HMM0
    350  f0f0		       85 23		      STA	HMM1
    351  f0f2		       85 20		      STA	HMP0
    352  f0f4		       85 21		      STA	HMP1
    353  f0f6		       85 02		      STA	WSYNC
    354  f0f8		       85 2a		      STA	HMOVE	; 1/10			
    355  f0fa
    356  f0fa				   ConfigVBlankTimer
    357  f0fa		       a5 c6		      LDA	GameMode
    358  f0fc		       c9 10		      CMP	#MAX_GAME_MODE
    359  f0fe		       f0 05		      BEQ	SetVblankTimerQrCode
    360  f100		       a9 29		      LDA	#VBLANK_TIMER
    361  f102		       4c 07 f1 	      JMP	SetVblankTimer
    362  f105				   SetVblankTimerQrCode
    363  f105		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    364  f107
    365  f107				   SetVblankTimer
    366  f107		       85 02		      STA	WSYNC	;3
    367  f109		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    368  f10b		       8d 96 02 	      STA	TIM64T	;3	
    369  f10e		       a9 00		      LDA	#0	;2
    370  f110		       85 00		      STA	VSYNC	;3	
    371  f112
    372  f112				   RandomizeGame
    373  f112		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    374  f114		       d0 2d		      BNE	EndRandomizeGame
    375  f116		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    376  f118		       29 02		      AND	#%00000010
    377  f11a		       f0 24		      BEQ	DeterministicGame
    378  f11c		       a6 96		      LDX	TrafficOffset1 + 2
    379  f11e		       bd 00 fe 	      LDA	AesTable,X
    380  f121		       45 8c		      EOR	FrameCount0
    381  f123		       85 96		      STA	TrafficOffset1 + 2
    382  f125		       85 a6		      STA	OpTrafficOffset1 + 2
    383  f127		       a6 9a		      LDX	TrafficOffset2 + 2
    384  f129		       bd 00 fe 	      LDA	AesTable,X
    385  f12c		       45 8c		      EOR	FrameCount0
    386  f12e		       85 9a		      STA	TrafficOffset2 + 2
    387  f130		       85 aa		      STA	OpTrafficOffset2 + 2
    388  f132		       a6 9e		      LDX	TrafficOffset3 + 2
    389  f134		       bd 00 fe 	      LDA	AesTable,X
    390  f137		       45 8c		      EOR	FrameCount0
    391  f139		       85 9e		      STA	TrafficOffset3 + 2
    392  f13b		       85 ae		      STA	OpTrafficOffset3 + 2
    393  f13d		       4c 43 f1 	      JMP	EndRandomizeGame
    394  f140
    395  f140				   DeterministicGame
    396  f140		       20 f3 f6 	      JSR	DefaultOffsets
    397  f143
    398  f143				   EndRandomizeGame
    399  f143
    400  f143
    401  f143							; Move this in the code and save cycles, for some reason spliting is breaking...
    402  f143		       a2 08		      LDX	#8
    403  f145				   BurnAllHMove
    404  f145		       85 02		      STA	WSYNC	;3
    405  f147		       85 2a		      STA	HMOVE	; 3/10 
    406  f149		       ca		      DEX
    407  f14a		       d0 f9		      BNE	BurnAllHMove
    408  f14c		       85 02		      STA	WSYNC	;3
    409  f14e		       85 2b		      STA	HMCLR	; 
    410  f150
    411  f150				   CountFrame
    412  f150		       e6 8c		      INC	FrameCount0	; 5
    413  f152		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    414  f154		       e6 8d		      INC	FrameCount1	; 5 
    415  f156				   SkipIncFC1
    416  f156
    417  f156				   CallDrawQrCode
    418  f156		       a5 c6		      LDA	GameMode
    419  f158		       c9 10		      CMP	#MAX_GAME_MODE
    420  f15a		       d0 03		      BNE	TestIsGameRunning
    421  f15c		       4c 64 fc 	      JMP	DrawQrCode
    422  f15f
    423  f15f							;Does not update the game if not running
    424  f15f				   TestIsGameRunning
    425  f15f		       a5 bd		      LDA	GameStatus	;3
    426  f161		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    427  f163				   SelectCarWithDpadCall		; Only do it when game is stoped
    428  f163		       a2 00		      LDX	#0	; Player 0
    429  f165		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    430  f167		       85 b0		      STA	Tmp0
    431  f169		       20 62 f9 	      JSR	SelectCarWithDpad
    432  f16c		       e8		      INX		; Player 1
    433  f16d		       20 62 f9 	      JSR	SelectCarWithDpad
    434  f170
    435  f170				   CallConfigureCarSprites
    436  f170		       20 30 f9 	      JSR	ConfigureCarSprites
    437  f173				   SkipUpdateLogicJump
    438  f173		       4c f5 f1 	      JMP	SkipUpdateLogic
    439  f176				   ContinueWithGameLogic
    440  f176
    441  f176				   EverySecond		; 64 frames to be more precise
    442  f176		       a9 3f		      LDA	#%00111111
    443  f178		       25 8c		      AND	FrameCount0
    444  f17a		       d0 06		      BNE	SkipEverySecondAction
    445  f17c		       c5 b8		      CMP	CountdownTimer
    446  f17e		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    447  f180		       c6 b8		      DEC	CountdownTimer
    448  f182				   SkipEverySecondAction
    449  f182
    450  f182				   ChangeTextFlickerMode
    451  f182		       a5 bc		      LDA	SwitchDebounceCounter
    452  f184		       d0 0d		      BNE	EndChangeTextFlickerMode
    453  f186		       ad 82 02 	      LDA	SWCHB
    454  f189		       29 02		      AND	#%00000010	;Game select
    455  f18b		       d0 06		      BNE	EndChangeTextFlickerMode
    456  f18d		       e6 df		      INC	TextFlickerMode
    457  f18f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    458  f191		       85 bc		      STA	SwitchDebounceCounter
    459  f193				   EndChangeTextFlickerMode
    460  f193
    461  f193				   CallProcessSpeed
    462  f193		       20 47 fa 	      JSR	ProcessSpeed
    463  f196
    464  f196				   CallUpdateOffsets
    465  f196		       a2 00		      LDX	#0	; Player 0
    466  f198		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    467  f19a		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    468  f19c		       a5 f0		      LDA	Player0SpeedL
    469  f19e		       85 b4		      STA	Tmp4
    470  f1a0		       a5 f2		      LDA	Player0SpeedH
    471  f1a2		       85 b5		      STA	Tmp5
    472  f1a4		       20 f4 f9 	      JSR	UpdateOffsets
    473  f1a7
    474  f1a7							;LDX Exits the call with correct value.
    475  f1a7		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    476  f1a9		       85 b3		      STA	Tmp3
    477  f1ab		       a5 f1		      LDA	Player1SpeedL
    478  f1ad		       85 b4		      STA	Tmp4
    479  f1af		       a5 f3		      LDA	Player1SpeedH
    480  f1b1		       85 b5		      STA	Tmp5
    481  f1b3		       20 f4 f9 	      JSR	UpdateOffsets
    482  f1b6
    483  f1b6				   ConfigureOpponentLine		; Temporary
    484  f1b6		       a9 14		      LDA	#20	; Extract to constant
    485  f1b8		       85 cf		      STA	OpponentLine
    486  f1ba
    487  f1ba				   CallTestColisionAndMove
    488  f1ba		       a2 00		      LDX	#0	; Player 0
    489  f1bc		       a9 40		      LDA	#%01000000	; Left player 0
    490  f1be		       85 b0		      STA	Tmp0
    491  f1c0		       a9 80		      LDA	#%10000000	; right player 0
    492  f1c2		       85 b1		      STA	Tmp1
    493  f1c4							; Colision with traffic, each player check different flags,
    494  f1c4		       a5 8c		      LDA	FrameCount0
    495  f1c6		       29 01		      AND	#%00000001
    496  f1c8		       f0 07		      BEQ	SkipColisionPlayer0	; Test colision after draw frame
    497  f1ca		       a5 01		      LDA	CXM1P
    498  f1cc		       4a		      LSR
    499  f1cd		       05 00		      ORA	CXM0P
    500  f1cf		       05 02		      ORA	CXP0FB
    501  f1d1							; ORA CXPPMM ; Collision between players will have its own rules
    502  f1d1				   SkipColisionPlayer0		; Should not colide on opponent side.
    503  f1d1		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    504  f1d3		       85 b2		      STA	Tmp2
    505  f1d5		       20 74 f9 	      JSR	TestCollisionAndMove
    506  f1d8
    507  f1d8		       e8		      INX		; player 1
    508  f1d9		       a9 04		      LDA	#%00000100	; Left player 1
    509  f1db		       85 b0		      STA	Tmp0
    510  f1dd		       a9 08		      LDA	#%00001000	; right player 1
    511  f1df		       85 b1		      STA	Tmp1
    512  f1e1		       a5 8c		      LDA	FrameCount0
    513  f1e3		       29 01		      AND	#%00000001
    514  f1e5		       d0 07		      BNE	SkipColisionPlayer1	; Test colision after draw frame
    515  f1e7		       a5 00		      LDA	CXM0P
    516  f1e9		       4a		      LSR
    517  f1ea		       05 01		      ORA	CXM1P
    518  f1ec		       05 03		      ORA	CXP1FB
    519  f1ee				   SkipColisionPlayer1
    520  f1ee		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    521  f1f0		       85 b2		      STA	Tmp2
    522  f1f2		       20 74 f9 	      JSR	TestCollisionAndMove
    523  f1f5
    524  f1f5				   SkipUpdateLogic		; Continue here if not paused
    525  f1f5
    526  f1f5				   CalculateGear
    527  f1f5		       a5 f0		      LDA	Player0SpeedL	;3
    528  f1f7		       29 80		      AND	#%10000000	;2
    529  f1f9		       05 f2		      ORA	Player0SpeedH	;3
    530  f1fb		       18		      CLC		;2
    531  f1fc		       2a		      ROL		;2
    532  f1fd		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    533  f1ff		       85 d5		      STA	Gear
    534  f201
    535  f201				   EndProcessingBorder
    536  f201
    537  f201				   ProcessScoreFontColor
    538  f201		       a6 cb		      LDX	ScoreFontColorHoldChange
    539  f203		       f0 06		      BEQ	ResetScoreFontColor
    540  f205		       ca		      DEX
    541  f206		       86 cb		      STX	ScoreFontColorHoldChange
    542  f208		       4c 0f f2 	      JMP	SkipScoreFontColor
    543  f20b				   ResetScoreFontColor
    544  f20b		       a9 f9		      LDA	#SCORE_FONT_COLOR
    545  f20d		       85 c9		      STA	ScoreFontColor
    546  f20f				   SkipScoreFontColor
    547  f20f
    548  f20f				   IsGameOver
    549  f20f		       a5 b8		      LDA	CountdownTimer
    550  f211		       05 f0		      ORA	Player0SpeedL
    551  f213		       05 f2		      ORA	Player0SpeedH
    552  f215		       d0 0b		      BNE	IsCheckpoint
    553  f217		       a9 01		      LDA	#1
    554  f219		       85 cb		      STA	ScoreFontColorHoldChange
    555  f21b		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    556  f21d		       85 c9		      STA	ScoreFontColor
    557  f21f		       4c 54 f2 	      JMP	SkipIsTimeOver
    558  f222
    559  f222				   IsCheckpoint
    560  f222		       a5 cd		      LDA	NextCheckpoint
    561  f224		       c5 92		      CMP	TrafficOffset0 + 2
    562  f226		       d0 20		      BNE	SkipIsCheckpoint
    563  f228		       18		      CLC
    564  f229		       69 10		      ADC	#CHECKPOINT_INTERVAL
    565  f22b		       85 cd		      STA	NextCheckpoint
    566  f22d		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    567  f22f		       85 c9		      STA	ScoreFontColor
    568  f231		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    569  f233		       85 cb		      STA	ScoreFontColorHoldChange
    570  f235		       a5 b8		      LDA	CountdownTimer
    571  f237		       18		      CLC
    572  f238		       65 c0		      ADC	CheckpointTime
    573  f23a		       85 b8		      STA	CountdownTimer
    574  f23c		       90 04		      BCC	JumpSkipTimeOver
    575  f23e		       a9 ff		      LDA	#$FF
    576  f240		       85 b8		      STA	CountdownTimer	; Does not overflow!
    577  f242				   JumpSkipTimeOver
    578  f242		       20 b9 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    579  f245		       4c 54 f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    580  f248				   SkipIsCheckpoint
    581  f248
    582  f248				   IsTimeOver
    583  f248		       a5 b8		      LDA	CountdownTimer
    584  f24a		       d0 08		      BNE	SkipIsTimeOver
    585  f24c		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    586  f24e		       85 cb		      STA	ScoreFontColorHoldChange
    587  f250		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    588  f252		       85 c9		      STA	ScoreFontColor
    589  f254				   SkipIsTimeOver
    590  f254
    591  f254		       20 30 f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    592  f257
    593  f257				   PrintEasterEggCondition
    594  f257		       a5 8d		      LDA	FrameCount1
    595  f259		       29 38		      AND	#%00111000
    596  f25b		       05 bd		      ORA	GameStatus
    597  f25d		       c9 38		      CMP	#%00111000
    598  f25f		       d0 06		      BNE	ChooseTextSide
    599  f261		       20 26 f7 	      JSR	PrintEasterEgg
    600  f264		       4c 56 f3 	      JMP	RightScoreWriteEnd
    601  f267
    602  f267							;Could be done during on vblank to save this comparisson time (before draw score), 
    603  f267							;but I am saving vblank cycles for now, in case of 2 players.
    604  f267				   ChooseTextSide		; 
    605  f267		       a5 de		      LDA	TextSide	;3
    606  f269		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    607  f26b		       4c ec f2 	      JMP	RightScoreWrite
    608  f26e
    609  f26e				   LeftScoreWrite
    610  f26e		       a5 c9		      LDA	ScoreFontColor
    611  f270		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    612  f272		       f0 4e		      BEQ	PrintCheckpoint
    613  f274		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    614  f276		       f0 52		      BEQ	PrintStartGame
    615  f278		       a5 bd		      LDA	GameStatus
    616  f27a		       f0 56		      BEQ	PrintHellwayLeft
    617  f27c				   WriteDistance		;Not optimized yet, ugly code.
    618  f27c				   Digit0Distance
    619  f27c		       a5 91		      LDA	TrafficOffset0 + 1	;3
    620  f27e		       4a		      LSR		; 2
    621  f27f		       4a		      LSR		; 2
    622  f280		       4a		      LSR		; 2
    623  f281		       4a		      LSR		; 2
    624  f282		       aa		      TAX		; 2
    625  f283		       bd be fd 	      LDA	FontLookup,X	;4
    626  f286		       85 d3		      STA	ScoreD3	;3
    627  f288
    628  f288				   Digit1Distance
    629  f288		       a5 92		      LDA	TrafficOffset0 + 2	;3
    630  f28a		       29 0f		      AND	#%00001111	;2
    631  f28c		       aa		      TAX		; 2
    632  f28d		       bd be fd 	      LDA	FontLookup,X	;4 
    633  f290		       85 d2		      STA	ScoreD2	;3
    634  f292
    635  f292				   Digit2Distance
    636  f292		       a5 92		      LDA	TrafficOffset0 + 2	;3
    637  f294		       4a		      LSR		; 2
    638  f295		       4a		      LSR		; 2
    639  f296		       4a		      LSR		; 2
    640  f297		       4a		      LSR		; 2
    641  f298		       aa		      TAX		; 2
    642  f299		       bd be fd 	      LDA	FontLookup,X	;4
    643  f29c		       85 d1		      STA	ScoreD1	;3
    644  f29e
    645  f29e				   Digit3Distance
    646  f29e		       a5 ba		      LDA	Traffic0Msb	;3
    647  f2a0		       29 0f		      AND	#%00001111	;2
    648  f2a2		       aa		      TAX		; 2
    649  f2a3		       bd be fd 	      LDA	FontLookup,X	;4 
    650  f2a6		       85 d0		      STA	ScoreD0	;3
    651  f2a8
    652  f2a8				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    653  f2a8		       a5 ba		      LDA	Traffic0Msb
    654  f2aa		       29 f0		      AND	#%11110000	;2
    655  f2ac		       d0 07		      BNE	DrawDistanceExtraDigit
    656  f2ae		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    657  f2b0		       85 d4		      STA	ScoreD4	;3
    658  f2b2		       4c bf f2 	      JMP	EndDrawDistance
    659  f2b5				   DrawDistanceExtraDigit
    660  f2b5		       4a		      LSR		; 2
    661  f2b6		       4a		      LSR		; 2
    662  f2b7		       4a		      LSR		; 2
    663  f2b8		       4a		      LSR		; 2
    664  f2b9		       aa		      TAX		; 2
    665  f2ba		       bd be fd 	      LDA	FontLookup,X	;4
    666  f2bd		       85 d4		      STA	ScoreD4	;3
    667  f2bf
    668  f2bf				   EndDrawDistance
    669  f2bf		       4c 56 f3 	      JMP	RightScoreWriteEnd	;3
    670  f2c2
    671  f2c2				   PrintCheckpoint
    672  f2c2		       a2 00		      LDX	#<CheckpointText
    673  f2c4		       20 08 f7 	      JSR	PrintStaticText
    674  f2c7		       4c 56 f3 	      JMP	RightScoreWriteEnd	;3
    675  f2ca				   PrintStartGame
    676  f2ca		       a2 23		      LDX	#<GoText
    677  f2cc		       20 08 f7 	      JSR	PrintStaticText
    678  f2cf		       4c 56 f3 	      JMP	RightScoreWriteEnd	;3
    679  f2d2
    680  f2d2				   PrintHellwayLeft
    681  f2d2		       a5 8d		      LDA	FrameCount1
    682  f2d4		       29 01		      AND	#1
    683  f2d6		       d0 05		      BNE	PrintCreditsLeft
    684  f2d8		       a2 05		      LDX	#<HellwayLeftText
    685  f2da		       4c df f2 	      JMP	PrintGameMode
    686  f2dd				   PrintCreditsLeft
    687  f2dd		       a2 0f		      LDX	#<OpbText
    688  f2df
    689  f2df				   PrintGameMode
    690  f2df		       20 08 f7 	      JSR	PrintStaticText
    691  f2e2		       a6 c6		      LDX	GameMode
    692  f2e4		       bd be fd 	      LDA	FontLookup,X	;4 
    693  f2e7		       85 d0		      STA	ScoreD0	;3
    694  f2e9		       4c 56 f3 	      JMP	RightScoreWriteEnd	;3
    695  f2ec
    696  f2ec				   RightScoreWrite
    697  f2ec		       a5 bd		      LDA	GameStatus
    698  f2ee		       f0 45		      BEQ	PrintHellwayRight
    699  f2f0		       a5 c9		      LDA	ScoreFontColor
    700  f2f2		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    701  f2f4		       f0 52		      BEQ	PrintGameOver
    702  f2f6				   Digit0Timer
    703  f2f6		       a5 b8		      LDA	CountdownTimer	;3
    704  f2f8		       29 0f		      AND	#%00001111	;2
    705  f2fa		       aa		      TAX		; 2
    706  f2fb		       bd be fd 	      LDA	FontLookup,X	;4 
    707  f2fe		       85 d1		      STA	ScoreD1	;3
    708  f300
    709  f300				   Digit1Timer
    710  f300		       a5 b8		      LDA	CountdownTimer	;3
    711  f302		       4a		      LSR		; 2
    712  f303		       4a		      LSR		; 2
    713  f304		       4a		      LSR		; 2
    714  f305		       4a		      LSR		; 2
    715  f306		       aa		      TAX		; 2
    716  f307		       bd be fd 	      LDA	FontLookup,X	;4
    717  f30a		       85 d0		      STA	ScoreD0	;3
    718  f30c
    719  f30c		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    720  f30e		       85 d2		      STA	ScoreD2	;3
    721  f310
    722  f310				   Digit0Speed
    723  f310		       a5 f0		      LDA	Player0SpeedL
    724  f312		       29 3c		      AND	#%00111100	;2 Discard the last bits
    725  f314		       4a		      LSR		; 2
    726  f315		       4a		      LSR		; 2
    727  f316		       aa		      TAX		; 2
    728  f317		       bd be fd 	      LDA	FontLookup,X	;4
    729  f31a		       85 d4		      STA	ScoreD4	;3
    730  f31c
    731  f31c				   Digit1Speed
    732  f31c		       a5 f0		      LDA	Player0SpeedL
    733  f31e		       29 c0		      AND	#%11000000	;2 Discard the last bits
    734  f320		       18		      CLC
    735  f321		       2a		      ROL		;First goes into carry
    736  f322		       2a		      ROL
    737  f323		       2a		      ROL
    738  f324		       85 b0		      STA	Tmp0
    739  f326		       a5 f2		      LDA	Player0SpeedH
    740  f328		       0a		      ASL
    741  f329		       0a		      ASL
    742  f32a		       05 b0		      ORA	Tmp0
    743  f32c		       aa		      TAX		; 2
    744  f32d		       bd be fd 	      LDA	FontLookup,X	;4
    745  f330		       85 d3		      STA	ScoreD3	;3
    746  f332		       4c 56 f3 	      JMP	RightScoreWriteEnd
    747  f335
    748  f335				   PrintHellwayRight
    749  f335		       a5 8d		      LDA	FrameCount1
    750  f337		       29 01		      AND	#1
    751  f339		       d0 05		      BNE	PrintCreditsRight
    752  f33b		       a2 0a		      LDX	#<HellwayRightText
    753  f33d		       4c 42 f3 	      JMP	PrintRightIntro
    754  f340				   PrintCreditsRight
    755  f340		       a2 14		      LDX	#<YearText
    756  f342				   PrintRightIntro
    757  f342		       20 08 f7 	      JSR	PrintStaticText
    758  f345		       4c 56 f3 	      JMP	RightScoreWriteEnd
    759  f348				   PrintGameOver
    760  f348		       a5 8c		      LDA	FrameCount0
    761  f34a		       30 05		      BMI	PrintOverText
    762  f34c		       a2 19		      LDX	#<GameText
    763  f34e		       4c 53 f3 	      JMP	StoreGameOverText
    764  f351				   PrintOverText
    765  f351		       a2 1e		      LDX	#<OverText
    766  f353				   StoreGameOverText
    767  f353		       20 08 f7 	      JSR	PrintStaticText
    768  f356				   RightScoreWriteEnd
    769  f356
    770  f356
    771  f356				   ScoreBackgroundColor
    772  f356		       a2 00		      LDX	#0
    773  f358		       ad 82 02 	      LDA	SWCHB
    774  f35b		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    775  f35d		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    776  f35f		       f0 04		      BEQ	BlackAndWhiteScoreBg
    777  f361		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    778  f363		       a2 03		      LDX	#BACKGROUND_COLOR
    779  f365				   BlackAndWhiteScoreBg
    780  f365		       85 b2		      STA	Tmp2	; Score Background
    781  f367		       86 b3		      STX	Tmp3	; Traffic Background
    782  f369
    783  f369				   ConfigurePFForScore
    784  f369							;LDA #SCORE_BACKGROUND_COLOR; Done above
    785  f369		       85 09		      STA	COLUBK
    786  f36b		       20 7b f6 	      JSR	ClearAll
    787  f36e		       a9 02		      LDA	#%00000010	; Score mode
    788  f370		       85 0a		      STA	CTRLPF
    789  f372		       a5 de		      LDA	TextSide	;3
    790  f374		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    791  f376				   LeftScoreOn
    792  f376		       a5 c9		      LDA	ScoreFontColor
    793  f378		       85 07		      STA	COLUP1
    794  f37a		       a5 b2		      LDA	Tmp2
    795  f37c		       85 06		      STA	COLUP0
    796  f37e		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    797  f380		       85 b1		      STA	Tmp1
    798  f382		       4c 91 f3 	      JMP	CallWaitForVblankEnd
    799  f385				   RightScoreOn
    800  f385		       a5 c9		      LDA	ScoreFontColor
    801  f387		       85 06		      STA	COLUP0
    802  f389		       a5 b2		      LDA	Tmp2
    803  f38b		       85 07		      STA	COLUP1
    804  f38d		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    805  f38f		       85 b1		      STA	Tmp1
    806  f391
    807  f391							; After here we are going to update the screen, No more heavy code
    808  f391				   CallWaitForVblankEnd
    809  f391		       20 09 f9 	      JSR	WaitForVblankEnd
    810  f394
    811  f394				   DrawScoreHud
    812  f394		       20 98 f7 	      JSR	PrintScore
    813  f397
    814  f397		       85 02		      STA	WSYNC
    815  f399
    816  f399		       a5 0c		      LDA	INPT4	;3
    817  f39b		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    818  f39d		       a5 c9		      LDA	ScoreFontColor
    819  f39f		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    820  f3a1		       d0 0a		      BNE	WaitAnotherScoreLine
    821  f3a3		       a5 de		      LDA	TextSide	;3
    822  f3a5		       d0 03		      BNE	LeftScoreOnGameOver
    823  f3a7		       4c e3 f8 	      JMP	DrawGameOverScreenRight
    824  f3aa				   LeftScoreOnGameOver
    825  f3aa		       4c 55 f8 	      JMP	DrawGameOverScreenLeft
    826  f3ad
    827  f3ad				   WaitAnotherScoreLine
    828  f3ad		       85 02		      STA	WSYNC
    829  f3af
    830  f3af				   PrepareForTraffic
    831  f3af		       20 8d f6 	      JSR	ClearPF	; 32
    832  f3b2
    833  f3b2		       85 02		      STA	WSYNC
    834  f3b4		       85 02		      STA	WSYNC
    835  f3b6
    836  f3b6		       a9 30		      LDA	#%00110000	; 2 Score mode
    837  f3b8		       85 0a		      STA	CTRLPF	;3
    838  f3ba
    839  f3ba		       a5 c2		      LDA	TrafficColor	;3
    840  f3bc		       85 08		      STA	COLUPF	;3
    841  f3be
    842  f3be		       a9 96		      LDA	#PLAYER1_COLOR	;2
    843  f3c0		       85 07		      STA	COLUP1	;3
    844  f3c2
    845  f3c2		       a5 c9		      LDA	ScoreFontColor	;3
    846  f3c4		       85 06		      STA	COLUP0	;3
    847  f3c6
    848  f3c6		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    849  f3c8
    850  f3c8		       20 8d f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    851  f3cb
    852  f3cb		       a6 b3		      LDX	Tmp3	; Background color.
    853  f3cd
      0  f3cd					      SLEEP	9	; Odd sleep destroys flags
      1  f3cd				   .CYCLES    SET	9
      2  f3cd
      3  f3cd				  -	      IF	.CYCLES < 2
      4  f3cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3cd				  -	      ERR
      6  f3cd					      ENDIF
      7  f3cd
      8  f3cd					      IF	.CYCLES & 1
      9  f3cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3cd				  -	      nop	0
     11  f3cd					      ELSE
     12  f3cd		       24 00		      bit	VSYNC
     13  f3cf					      ENDIF
     14  f3cf				   .CYCLES    SET	.CYCLES - 3
     15  f3cf					      ENDIF
     16  f3cf
     17  f3cf					      REPEAT	.CYCLES / 2
     18  f3cf		       ea		      nop
     17  f3cf					      REPEND
     18  f3d0		       ea		      nop
     17  f3d0					      REPEND
     18  f3d1		       ea		      nop
     19  f3d2					      REPEND
    855  f3d2
    856  f3d2		       a5 8c		      LDA	FrameCount0	;Brach flag
    857  f3d4		       29 01		      AND	#%00000001
    858  f3d6
    859  f3d6		       86 09		      STX	COLUBK	;3
    860  f3d8		       d0 05		      BNE	OpDrawCache	;2
    861  f3da		       4c 99 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    862  f3dd							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    863  f3dd
    864  f3dd							;main scanline loop...
    865  f3dd				   OpScanLoop
    866  f3dd		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    867  f3df
    868  f3df							;Start of next line!			
    869  f3df				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    870  f3df
    871  f3df		       a5 80		      LDA	GRP0Cache	;3
    872  f3e1		       85 1b		      STA	GRP0	;3
    873  f3e3
    874  f3e3		       a5 84		      LDA	GRP1Cache	;3
    875  f3e5		       85 1c		      STA	GRP1	;3
    876  f3e7
    877  f3e7		       a5 85		      LDA	ENABLCache	;3
    878  f3e9		       85 1f		      STA	ENABL	;3
    879  f3eb
    880  f3eb		       a5 86		      LDA	ENAM0Cache	;3
    881  f3ed		       85 1d		      STA	ENAM0	;3
    882  f3ef
    883  f3ef		       a5 87		      LDA	ENAM1Cache	;3
    884  f3f1		       85 1e		      STA	ENAM1	;3
    885  f3f3
    886  f3f3		       a5 81		      LDA	PF0Cache	;3
    887  f3f5		       85 0d		      STA	PF0	;3
    888  f3f7
    889  f3f7		       a9 00		      LDA	#0	;2
    890  f3f9							;STA PF0	     ;3
    891  f3f9		       85 80		      STA	GRP0Cache	;3
    892  f3fb		       85 86		      STA	ENAM0Cache	;3
    893  f3fd		       85 85		      STA	ENABLCache	;3
    894  f3ff		       85 87		      STA	ENAM1Cache	; 3
    895  f401							;STA GRP1Cache ;3
    896  f401		       85 0d		      STA	PF0	;3
    897  f403							;STA PF2	     ;3
    898  f403
    899  f403		       a5 83		      LDA	PF2Cache	;3
    900  f405		       85 0f		      STA	PF2	;3
    901  f407
    902  f407				   OpDrawCar0
    903  f407		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    904  f409		       b0 04		      BCS	OpSkipDrawCar	;2
    905  f40b		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    906  f40d		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    907  f40f				   OpSkipDrawCar
    908  f40f
    909  f40f							;BEQ DrawTraffic3
    910  f40f				   OpDrawTraffic1		; 33
    911  f40f		       98		      TYA		; 2
    912  f410		       18		      CLC		; 2 
    913  f411		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    914  f413		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    915  f415		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    916  f417		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    917  f419		       4c 1e f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
    918  f41c				   OpEorOffsetWithCarry
    919  f41c		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    920  f41e				   OpAfterEorOffsetWithCarry		;17
    921  f41e		       aa		      TAX		;2
    922  f41f		       bd 00 fe 	      LDA	AesTable,X	; 4
    923  f422		       c5 be		      CMP	TrafficChance	;3
    924  f424		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    925  f426		       a9 ff		      LDA	#$FF	;2
    926  f428		       85 86		      STA	ENAM0Cache	;3
    927  f42a				   OpFinishDrawTraffic1
    928  f42a
    929  f42a				   OpErasePF2
    930  f42a		       a9 00		      LDA	#0
    931  f42c		       85 0f		      STA	PF2
    932  f42e
    933  f42e				   OpDrawTraffic2		; 33
    934  f42e		       98		      TYA		; 2
    935  f42f		       18		      CLC		; 2 
    936  f430		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    937  f432		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    938  f434		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    939  f436		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    940  f438		       4c 3d f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    941  f43b				   OpEorOffsetWithCarry2
    942  f43b		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    943  f43d				   OpAfterEorOffsetWithCarry2		;17
    944  f43d		       aa		      TAX		;2
    945  f43e		       bd 00 fe 	      LDA	AesTable,X	; 4
    946  f441		       c5 be		      CMP	TrafficChance	;3
    947  f443		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    948  f445		       a9 02		      LDA	#%00000010	;2
    949  f447		       85 85		      STA	ENABLCache	;3
    950  f449				   OpFinishDrawTraffic2
    951  f449
    952  f449							;STA WSYNC ;65 / 137
    953  f449
    954  f449							; LDA Tmp0 ; Flicker this line if drawing car
    955  f449							; BEQ FinishDrawTraffic4
    956  f449				   OpDrawTraffic3		; 33
    957  f449		       98		      TYA		; 2
    958  f44a		       18		      CLC		; 2 
    959  f44b		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    960  f44d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    961  f44f		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    962  f451		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    963  f453		       4c 58 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    964  f456				   OpEorOffsetWithCarry3
    965  f456		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    966  f458				   OpAfterEorOffsetWithCarry3		;17
    967  f458		       aa		      TAX		;2
    968  f459		       bd 00 fe 	      LDA	AesTable,X	; 4
    969  f45c		       c5 be		      CMP	TrafficChance	;3
    970  f45e		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    971  f460		       a9 02		      LDA	#%00000010	;2
    972  f462		       85 87		      STA	ENAM1Cache
    973  f464				   OpFinishDrawTraffic3
    974  f464
    975  f464				   OpDrawOponent		;26
    976  f464		       84 b0		      STY	Tmp0	;3
    977  f466		       a4 cf		      LDY	OpponentLine	;3
    978  f468		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    979  f46a		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    980  f46c				   OpDrawOpponent
    981  f46c		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    982  f46e		       85 80		      STA	GRP0Cache	;3
    983  f470		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    984  f472		       a4 b0		      LDY	Tmp0	;3
    985  f474		       4c 88 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    986  f477				   OpSkipDrawOpponent
    987  f477		       c6 cf		      DEC	OpponentLine	;5
    988  f479		       a4 b0		      LDY	Tmp0	;3
    989  f47b
    990  f47b
    991  f47b				   OpDrawTraffic0		; 21 2pe
    992  f47b		       98		      TYA		; 2
    993  f47c		       18		      CLC		; 2 
    994  f47d		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    995  f47f		       29 08		      AND	#%00001000	;2
    996  f481		       f0 05		      BEQ	OpHasNoBorderP0	;3
    997  f483				   OpHasBorderP0
    998  f483		       a9 70		      LDA	#%01110000	; 2
    999  f485		       4c 8a f4 	      JMP	OpStoreBorderP0	; 3
   1000  f488				   OpHasNoBorderP0
   1001  f488		       a9 00		      LDA	#0	; 2
   1002  f48a				   OpStoreBorderP0
   1003  f48a		       85 81		      STA	PF0Cache	; 3
   1004  f48c		       85 83		      STA	PF2Cache	; 3
   1005  f48e
   1006  f48e				   OpSkipDrawTraffic0
   1007  f48e
   1008  f48e				   OpWhileScanLoop
   1009  f48e		       88		      DEY		;2
   1010  f48f		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1011  f491		       4c dd f3 	      JMP	OpScanLoop	;3
   1012  f494				   OpFinishScanLoop		; 7 209 of 222
   1013  f494		       4c 4c f5 	      JMP	FinishScanLoop
   1014  f497
   1015  f497							;main scanline loop...
   1016  f497				   ScanLoop
   1017  f497		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1018  f499
   1019  f499							;Start of next line!			
   1020  f499				   DrawCache		;63 Is the last line going to the top of the next frame?
   1021  f499		       a5 81		      LDA	PF0Cache	;3
   1022  f49b		       85 0d		      STA	PF0	;3
   1023  f49d
   1024  f49d		       a5 80		      LDA	GRP0Cache	;3
   1025  f49f		       85 1b		      STA	GRP0	;3
   1026  f4a1
   1027  f4a1		       a5 84		      LDA	GRP1Cache	;3
   1028  f4a3		       85 1c		      STA	GRP1	;3
   1029  f4a5
   1030  f4a5		       a5 86		      LDA	ENAM0Cache	;3
   1031  f4a7		       85 1d		      STA	ENAM0	;3
   1032  f4a9
   1033  f4a9		       a5 85		      LDA	ENABLCache	;3
   1034  f4ab		       85 1f		      STA	ENABL	;3
   1035  f4ad
   1036  f4ad		       a5 87		      LDA	ENAM1Cache	;3
   1037  f4af		       85 1e		      STA	ENAM1	;3
   1038  f4b1
   1039  f4b1		       a5 83		      LDA	PF2Cache	;3
   1040  f4b3		       85 0f		      STA	PF2	;3
   1041  f4b5
   1042  f4b5		       a9 00		      LDA	#0	;2
   1043  f4b7		       85 0d		      STA	PF0	;3
   1044  f4b9		       85 84		      STA	GRP1Cache	;3
   1045  f4bb		       85 85		      STA	ENABLCache	;3
   1046  f4bd		       85 86		      STA	ENAM0Cache	;3
   1047  f4bf		       85 87		      STA	ENAM1Cache	; 3
   1048  f4c1							;STA GRP0Cache
   1049  f4c1		       85 0f		      STA	PF2	;3
   1050  f4c3
   1051  f4c3				   DrawCar0
   1052  f4c3		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1053  f4c5		       b0 04		      BCS	SkipDrawCar	;2
   1054  f4c7		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1055  f4c9		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1056  f4cb				   SkipDrawCar
   1057  f4cb
   1058  f4cb							;BEQ DrawTraffic3
   1059  f4cb				   DrawTraffic1 		; 33
   1060  f4cb		       98		      TYA		; 2
   1061  f4cc		       18		      CLC		; 2 
   1062  f4cd		       65 95		      ADC	TrafficOffset1 + 1	;3
   1063  f4cf		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1064  f4d1		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1065  f4d3		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1066  f4d5		       4c da f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1067  f4d8				   EorOffsetWithCarry
   1068  f4d8		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1069  f4da				   AfterEorOffsetWithCarry		;17
   1070  f4da		       aa		      TAX		;2
   1071  f4db		       bd 00 fe 	      LDA	AesTable,X	; 4
   1072  f4de		       c5 be		      CMP	TrafficChance	;3
   1073  f4e0		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1074  f4e2		       a9 ff		      LDA	#$FF	;2
   1075  f4e4		       85 86		      STA	ENAM0Cache	;3
   1076  f4e6				   FinishDrawTraffic1
   1077  f4e6
   1078  f4e6				   DrawTraffic2 		; 33
   1079  f4e6		       98		      TYA		; 2
   1080  f4e7		       18		      CLC		; 2 
   1081  f4e8		       65 99		      ADC	TrafficOffset2 + 1	;3
   1082  f4ea		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1083  f4ec		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1084  f4ee		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1085  f4f0		       4c f5 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1086  f4f3				   EorOffsetWithCarry2
   1087  f4f3		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1088  f4f5				   AfterEorOffsetWithCarry2		;17
   1089  f4f5		       aa		      TAX		;2
   1090  f4f6		       bd 00 fe 	      LDA	AesTable,X	; 4
   1091  f4f9		       c5 be		      CMP	TrafficChance	;3
   1092  f4fb		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1093  f4fd		       a9 02		      LDA	#%00000010	;2
   1094  f4ff		       85 85		      STA	ENABLCache	;3
   1095  f501				   FinishDrawTraffic2
   1096  f501
   1097  f501							;STA WSYNC ;65 / 137
   1098  f501
   1099  f501							; LDA Tmp0 ; Flicker this line if drawing car
   1100  f501							; BEQ FinishDrawTraffic4
   1101  f501				   DrawTraffic3 		; 33
   1102  f501		       98		      TYA		; 2
   1103  f502		       18		      CLC		; 2 
   1104  f503		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1105  f505		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1106  f507		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1107  f509		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1108  f50b		       4c 10 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1109  f50e				   EorOffsetWithCarry3
   1110  f50e		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1111  f510				   AfterEorOffsetWithCarry3		;17
   1112  f510		       aa		      TAX		;2
   1113  f511		       bd 00 fe 	      LDA	AesTable,X	; 4
   1114  f514		       c5 be		      CMP	TrafficChance	;3
   1115  f516		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1116  f518		       a9 02		      LDA	#%00000010	;2
   1117  f51a		       85 87		      STA	ENAM1Cache
   1118  f51c				   FinishDrawTraffic3
   1119  f51c
   1120  f51c
   1121  f51c				   DrawOponent		;26
   1122  f51c		       84 b0		      STY	Tmp0	;3
   1123  f51e		       a4 cf		      LDY	OpponentLine	;3
   1124  f520		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1125  f522		       b0 0b		      BCS	SkipDrawOpponent	;2
   1126  f524				   DrawOpponent
   1127  f524		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1128  f526		       85 84		      STA	GRP1Cache	;3
   1129  f528		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1130  f52a		       a4 b0		      LDY	Tmp0	;3
   1131  f52c		       4c 40 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1132  f52f				   SkipDrawOpponent
   1133  f52f		       c6 cf		      DEC	OpponentLine	;5
   1134  f531		       a4 b0		      LDY	Tmp0	;3
   1135  f533
   1136  f533				   DrawTraffic0 		; 21 2pe
   1137  f533		       98		      TYA		; 2
   1138  f534		       18		      CLC		; 2 
   1139  f535		       65 91		      ADC	TrafficOffset0 + 1	;3
   1140  f537		       29 08		      AND	#%00001000	;2
   1141  f539		       f0 05		      BEQ	HasNoBorderP0	;3
   1142  f53b				   HasBorderP0
   1143  f53b		       a9 70		      LDA	#%01110000	; 2
   1144  f53d		       4c 42 f5 	      JMP	StoreBorderP0	; 3
   1145  f540				   HasNoBorderP0
   1146  f540		       a9 00		      LDA	#0	; 2
   1147  f542				   StoreBorderP0
   1148  f542		       85 81		      STA	PF0Cache	; 3
   1149  f544		       85 83		      STA	PF2Cache	; 3
   1150  f546
   1151  f546				   SkipDrawTraffic0
   1152  f546
   1153  f546				   WhileScanLoop
   1154  f546		       88		      DEY		;2
   1155  f547		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1156  f549		       4c 97 f4 	      JMP	ScanLoop	;3
   1157  f54c				   FinishScanLoop		; 7 209 of 222
   1158  f54c
   1159  f54c		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1160  f54e		       20 9c f6 	      JSR	LoadAll
   1161  f551		       85 02		      STA	WSYNC	; do stuff!
   1162  f553		       85 02		      STA	WSYNC
   1163  f555		       85 02		      STA	WSYNC
   1164  f557							;42 cycles to use here
   1165  f557
   1166  f557				   PrepareOverscan
   1167  f557		       a9 02		      LDA	#2
   1168  f559		       85 02		      STA	WSYNC
   1169  f55b		       85 01		      STA	VBLANK
   1170  f55d
   1171  f55d		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1172  f55f		       8d 96 02 	      STA	TIM64T
   1173  f562
   1174  f562				   LeftSound		;41
   1175  f562		       a5 b8		      LDA	CountdownTimer	;3
   1176  f564		       f0 1b		      BEQ	EngineOff	;2
   1177  f566		       a6 d5		      LDX	Gear
   1178  f568		       a5 f0		      LDA	Player0SpeedL	;3
   1179  f56a		       4a		      LSR		;2
   1180  f56b		       4a		      LSR		;2
   1181  f56c		       4a		      LSR		;2
   1182  f56d		       29 0f		      AND	#%00001111	;2
   1183  f56f		       85 b0		      STA	Tmp0	;3
   1184  f571		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1185  f574		       38		      SEC		;2
   1186  f575		       e5 b0		      SBC	Tmp0	;3
   1187  f577		       85 17		      STA	AUDF0	;3
   1188  f579		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1189  f57c		       85 15		      STA	AUDC0	;3
   1190  f57e		       4c 85 f5 	      JMP	EndLeftSound	;3
   1191  f581				   EngineOff
   1192  f581		       a9 00		      LDA	#0
   1193  f583		       85 15		      STA	AUDC0
   1194  f585
   1195  f585				   EndLeftSound
   1196  f585
   1197  f585
   1198  f585				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1199  f585		       a5 c9		      LDA	ScoreFontColor	;3
   1200  f587		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1201  f589		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1202  f58b		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1203  f58d		       f0 29		      BEQ	PlayCheckpoint	;2
   1204  f58f		       a5 8e		      LDA	CollisionCounter	;3
   1205  f591		       c9 e0		      CMP	#$E0	;2
   1206  f593		       b0 14		      BCS	PlayColision	;2
   1207  f595		       a5 cd		      LDA	NextCheckpoint	;3
   1208  f597		       38		      SEC		;2
   1209  f598		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1210  f59a		       c9 02		      CMP	#$02	;2
   1211  f59c		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1212  f59e		       a5 b8		      LDA	CountdownTimer	; 3
   1213  f5a0		       f0 53		      BEQ	MuteRightSound	;2
   1214  f5a2		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1215  f5a4		       90 37		      BCC	PlayWarnTimeEnding	;4
   1216  f5a6		       4c f5 f5 	      JMP	MuteRightSound	;3
   1217  f5a9				   PlayColision
   1218  f5a9		       a9 1f		      LDA	#31
   1219  f5ab		       85 18		      STA	AUDF1
   1220  f5ad		       a9 08		      LDA	#8
   1221  f5af		       85 16		      STA	AUDC1
   1222  f5b1		       a9 08		      LDA	#8
   1223  f5b3		       85 1a		      STA	AUDV1
   1224  f5b5		       4c f9 f5 	      JMP	EndRightSound
   1225  f5b8
   1226  f5b8				   PlayCheckpoint
   1227  f5b8		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1228  f5ba		       4a		      LSR		;2
   1229  f5bb		       4a		      LSR		;2
   1230  f5bc		       4a		      LSR		;2
   1231  f5bd		       85 18		      STA	AUDF1	;3
   1232  f5bf		       a9 0c		      LDA	#12	;2
   1233  f5c1		       85 16		      STA	AUDC1	;3
   1234  f5c3		       a9 06		      LDA	#6	;2
   1235  f5c5		       85 1a		      STA	AUDV1	;3
   1236  f5c7		       4c f9 f5 	      JMP	EndRightSound	;3
   1237  f5ca
   1238  f5ca				   PlayBeforeCheckpoint
   1239  f5ca		       a5 8c		      LDA	FrameCount0	;3
   1240  f5cc		       29 1c		      AND	#%00011100	;2
   1241  f5ce		       09 03		      ORA	#%00000011	;2
   1242  f5d0		       85 18		      STA	AUDF1	;3
   1243  f5d2		       a9 0c		      LDA	#12	;2
   1244  f5d4		       85 16		      STA	AUDC1	;3
   1245  f5d6		       a9 03		      LDA	#3	;2
   1246  f5d8		       85 1a		      STA	AUDV1	;3
   1247  f5da		       4c f9 f5 	      JMP	EndRightSound	;3
   1248  f5dd
   1249  f5dd				   PlayWarnTimeEnding
   1250  f5dd		       a5 8c		      LDA	FrameCount0	;3
   1251  f5df		       29 04		      AND	#%00000100	;2
   1252  f5e1		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1253  f5e3		       18		      CLC		;2
   1254  f5e4		       a9 0a		      LDA	#10	;2
   1255  f5e6		       65 b8		      ADC	CountdownTimer	;2
   1256  f5e8		       85 18		      STA	AUDF1	;3
   1257  f5ea		       a9 0c		      LDA	#12	;2
   1258  f5ec		       85 16		      STA	AUDC1	;3
   1259  f5ee		       a9 03		      LDA	#3	;2
   1260  f5f0		       85 1a		      STA	AUDV1	;3
   1261  f5f2		       4c f9 f5 	      JMP	EndRightSound	;3
   1262  f5f5
   1263  f5f5				   MuteRightSound
   1264  f5f5		       a9 00		      LDA	#0
   1265  f5f7		       85 1a		      STA	AUDV1
   1266  f5f9				   EndRightSound
   1267  f5f9
   1268  f5f9							;Read Fire Button before, will make it start the game for now.
   1269  f5f9				   StartGame
   1270  f5f9		       a5 0c		      LDA	INPT4	;3
   1271  f5fb		       25 0d		      AND	INPT5	;3 player 
   1272  f5fd		       30 35		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1273  f5ff		       a5 8c		      LDA	FrameCount0
   1274  f601		       29 01		      AND	#%00000001
   1275  f603		       d0 2f		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1276  f605		       a5 bd		      LDA	GameStatus	;3
   1277  f607		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1278  f609		       d0 29		      BNE	SkipGameStart
   1279  f60b		       a5 c6		      LDA	GameMode
   1280  f60d		       c9 10		      CMP	#MAX_GAME_MODE
   1281  f60f		       d0 0b		      BNE	SetGameRunning
   1282  f611		       a9 00		      LDA	#0
   1283  f613		       85 c6		      STA	GameMode
   1284  f615		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1285  f617		       85 bc		      STA	SwitchDebounceCounter
   1286  f619		       4c 34 f6 	      JMP	SkipGameStart
   1287  f61c				   SetGameRunning
   1288  f61c		       e6 bd		      INC	GameStatus
   1289  f61e		       a9 00		      LDA	#0	;
   1290  f620		       85 8c		      STA	FrameCount0
   1291  f622		       85 8d		      STA	FrameCount1
   1292  f624		       a9 0a		      LDA	#10
   1293  f626		       85 19		      STA	AUDV0
   1294  f628		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1295  f62a		       85 c9		      STA	ScoreFontColor
   1296  f62c		       85 ca		      STA	OpScoreFontColor
   1297  f62e		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1298  f630		       85 cb		      STA	ScoreFontColorHoldChange
   1299  f632		       85 cc		      STA	OpScoreFontColorHoldChange
   1300  f634				   SkipGameStart
   1301  f634
   1302  f634				   ReadSwitches
   1303  f634		       a6 bc		      LDX	SwitchDebounceCounter
   1304  f636		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1305  f638		       a9 01		      LDA	#%00000001
   1306  f63a		       2c 82 02 	      BIT	SWCHB
   1307  f63d		       d0 07		      BNE	SkipReset
   1308  f63f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1309  f641		       85 bc		      STA	SwitchDebounceCounter
   1310  f643		       4c 73 f6 	      JMP	OverScanWaitBeforeReset
   1311  f646				   SkipReset
   1312  f646
   1313  f646				   GameModeSelect
   1314  f646		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1315  f648		       d0 1c		      BNE	SkipGameSelect
   1316  f64a		       20 c8 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1317  f64d				   ContinueGameSelect
   1318  f64d		       a9 02		      LDA	#%00000010
   1319  f64f		       2c 82 02 	      BIT	SWCHB
   1320  f652		       d0 12		      BNE	SkipGameSelect
   1321  f654		       a6 c6		      LDX	GameMode
   1322  f656		       e0 10		      CPX	#MAX_GAME_MODE
   1323  f658		       f0 04		      BEQ	ResetGameMode
   1324  f65a		       e8		      INX
   1325  f65b		       4c 60 f6 	      JMP	StoreGameMode
   1326  f65e				   ResetGameMode
   1327  f65e		       a2 00		      LDX	#0
   1328  f660				   StoreGameMode
   1329  f660		       86 c6		      STX	GameMode
   1330  f662		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1331  f664		       85 bc		      STA	SwitchDebounceCounter
   1332  f666				   SkipGameSelect
   1333  f666		       4c 6b f6 	      JMP	EndReadSwitches
   1334  f669				   DecrementSwitchDebounceCounter
   1335  f669		       c6 bc		      DEC	SwitchDebounceCounter
   1336  f66b				   EndReadSwitches
   1337  f66b
   1338  f66b				   OverScanWait
   1339  f66b		       ad 84 02 	      LDA	INTIM
   1340  f66e		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1341  f670		       4c ca f0 	      JMP	MainLoop
   1342  f673
   1343  f673				   OverScanWaitBeforeReset
   1344  f673		       ad 84 02 	      LDA	INTIM
   1345  f676		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1346  f678		       4c 12 f0 	      JMP	Start
   1347  f67b
   1348  f67b				   Subroutines
   1349  f67b
   1350  f67b				   ClearAll		; 52
   1351  f67b		       a9 00		      LDA	#0	;2
   1352  f67d		       85 1c		      STA	GRP1	;3
   1353  f67f		       85 1f		      STA	ENABL	;3
   1354  f681		       85 1d		      STA	ENAM0	;3
   1355  f683		       85 1e		      STA	ENAM1	;3
   1356  f685		       85 84		      STA	GRP1Cache	;3
   1357  f687		       85 85		      STA	ENABLCache	;3
   1358  f689		       85 86		      STA	ENAM0Cache	;3
   1359  f68b		       85 87		      STA	ENAM1Cache	;3
   1360  f68d
   1361  f68d				   ClearPF		; 26
   1362  f68d		       a9 00		      LDA	#0	;2
   1363  f68f				   ClearPFSkipLDA0
   1364  f68f		       85 0d		      STA	PF0	;3
   1365  f691		       85 0e		      STA	PF1	;3
   1366  f693		       85 0f		      STA	PF2	;3	
   1367  f695		       85 81		      STA	PF0Cache	;3
   1368  f697		       85 82		      STA	PF1Cache	;3
   1369  f699		       85 83		      STA	PF2Cache	;3 
   1370  f69b		       60		      RTS		;6
   1371  f69c				   EndClearAll
   1372  f69c
   1373  f69c				   LoadAll		; 48
   1374  f69c		       a5 81		      LDA	PF0Cache	;3
   1375  f69e		       85 0d		      STA	PF0	;3
   1376  f6a0
   1377  f6a0		       a5 82		      LDA	PF1Cache	;3
   1378  f6a2		       85 0e		      STA	PF1	;3
   1379  f6a4
   1380  f6a4		       a5 83		      LDA	PF2Cache	;3
   1381  f6a6		       85 0f		      STA	PF2	;3
   1382  f6a8
   1383  f6a8		       a5 84		      LDA	GRP1Cache	;3
   1384  f6aa		       85 1c		      STA	GRP1	;3
   1385  f6ac
   1386  f6ac		       a5 85		      LDA	ENABLCache	;3
   1387  f6ae		       85 1f		      STA	ENABL	;3
   1388  f6b0
   1389  f6b0		       a5 86		      LDA	ENAM0Cache	;3
   1390  f6b2		       85 1d		      STA	ENAM0	;3
   1391  f6b4
   1392  f6b4		       a5 87		      LDA	ENAM1Cache	;3
   1393  f6b6		       85 1e		      STA	ENAM1	;3
   1394  f6b8
   1395  f6b8		       60		      RTS		;6
   1396  f6b9				   EndLoadAll
   1397  f6b9
   1398  f6b9				   NextDifficulty
   1399  f6b9		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1400  f6bb		       29 01		      AND	#%00000001
   1401  f6bd		       d0 24		      BNE	CheckRandomDifficulty
   1402  f6bf
   1403  f6bf		       a5 c4		      LDA	CurrentDifficulty
   1404  f6c1		       18		      CLC
   1405  f6c2		       69 01		      ADC	#1
   1406  f6c4		       29 03		      AND	#%00000011	; 0 to 3
   1407  f6c6		       85 c4		      STA	CurrentDifficulty
   1408  f6c8
   1409  f6c8				   ConfigureDifficulty
   1410  f6c8		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1411  f6ca		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1412  f6cd		       85 be		      STA	TrafficChance
   1413  f6cf		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1414  f6d2		       85 c2		      STA	TrafficColor
   1415  f6d4
   1416  f6d4		       a5 c6		      LDA	GameMode	;
   1417  f6d6		       29 01		      AND	#%00000001
   1418  f6d8		       f0 03		      BEQ	UseNextDifficultyTime
   1419  f6da		       4c de f6 	      JMP	StoreDifficultyTime
   1420  f6dd				   UseNextDifficultyTime
   1421  f6dd		       c8		      INY
   1422  f6de				   StoreDifficultyTime
   1423  f6de		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1424  f6e1		       85 c0		      STA	CheckpointTime
   1425  f6e3
   1426  f6e3				   CheckRandomDifficulty
   1427  f6e3		       a5 c6		      LDA	GameMode
   1428  f6e5		       29 08		      AND	#%00001000	; Random difficulties
   1429  f6e7		       f0 09		      BEQ	ReturnFromNextDifficulty
   1430  f6e9				   RandomDifficulty
   1431  f6e9		       a6 8c		      LDX	FrameCount0
   1432  f6eb		       bd 00 fe 	      LDA	AesTable,X
   1433  f6ee							;EOR TrafficChance, no need, lets make life simple
   1434  f6ee		       29 3f		      AND	#%00111111
   1435  f6f0		       85 be		      STA	TrafficChance
   1436  f6f2
   1437  f6f2				   ReturnFromNextDifficulty
   1438  f6f2		       60		      RTS
   1439  f6f3				   EndNextDifficulty
   1440  f6f3
   1441  f6f3				   DefaultOffsets
   1442  f6f3		       a9 20		      LDA	#$20
   1443  f6f5		       85 96		      STA	TrafficOffset1 + 2
   1444  f6f7		       85 a6		      STA	OpTrafficOffset1 + 2
   1445  f6f9		       a9 40		      LDA	#$40
   1446  f6fb		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1447  f6fd		       85 aa		      STA	OpTrafficOffset2 + 2
   1448  f6ff		       a9 60		      LDA	#$60
   1449  f701		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1450  f703		       85 ae		      STA	OpTrafficOffset3 + 2
   1451  f705		       a9 80		      LDA	#$80
   1452  f707		       60		      RTS
   1453  f708
   1454  f708				   PrintStaticText		; Preload X with the offset referent to StaticText
   1455  f708		       bd 00 ff 	      LDA	StaticText,X
   1456  f70b		       85 d0		      STA	ScoreD0
   1457  f70d		       e8		      INX
   1458  f70e		       bd 00 ff 	      LDA	StaticText,X
   1459  f711		       85 d1		      STA	ScoreD1
   1460  f713		       e8		      INX
   1461  f714		       bd 00 ff 	      LDA	StaticText,X
   1462  f717		       85 d2		      STA	ScoreD2
   1463  f719		       e8		      INX
   1464  f71a		       bd 00 ff 	      LDA	StaticText,X
   1465  f71d		       85 d3		      STA	ScoreD3
   1466  f71f		       e8		      INX
   1467  f720		       bd 00 ff 	      LDA	StaticText,X
   1468  f723		       85 d4		      STA	ScoreD4
   1469  f725		       60		      RTS
   1470  f726
   1471  f726				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1472  f726		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1473  f728		       85 c9		      STA	ScoreFontColor
   1474  f72a		       a9 01		      LDA	#1
   1475  f72c		       85 cb		      STA	ScoreFontColorHoldChange
   1476  f72e
   1477  f72e		       a5 8d		      LDA	FrameCount1
   1478  f730		       29 07		      AND	#%00000111
   1479  f732		       85 b3		      STA	Tmp3
   1480  f734							;0 is Zelda Name, (default)
   1481  f734		       a9 01		      LDA	#1
   1482  f736		       c5 b3		      CMP	Tmp3
   1483  f738		       f0 38		      BEQ	PrintZeldaDateLeft
   1484  f73a
   1485  f73a		       a9 02		      LDA	#2
   1486  f73c		       c5 b3		      CMP	Tmp3
   1487  f73e		       f0 23		      BEQ	PrintPolvinhosLeft
   1488  f740
   1489  f740		       a9 03		      LDA	#3
   1490  f742		       c5 b3		      CMP	Tmp3
   1491  f744		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1492  f746
   1493  f746		       a9 04		      LDA	#4
   1494  f748		       c5 b3		      CMP	Tmp3
   1495  f74a		       f0 1c		      BEQ	PrintIvonneLeft
   1496  f74c
   1497  f74c		       a9 05		      LDA	#5
   1498  f74e		       c5 b3		      CMP	Tmp3
   1499  f750		       f0 2a		      BEQ	PrintIvonneDateLeft
   1500  f752
   1501  f752		       a9 06		      LDA	#6
   1502  f754		       c5 b3		      CMP	Tmp3
   1503  f756		       f0 15		      BEQ	PrintArtLeft
   1504  f758
   1505  f758		       a9 07		      LDA	#7
   1506  f75a		       c5 b3		      CMP	Tmp3
   1507  f75c		       f0 23		      BEQ	PrintLeonardoLeft
   1508  f75e
   1509  f75e				   PrintZeldaLeft
   1510  f75e		       a2 28		      LDX	#<ZeldaTextLeft
   1511  f760		       4c 86 f7 	      JMP	ProcessPrintEasterEgg
   1512  f763				   PrintPolvinhosLeft
   1513  f763		       a2 3c		      LDX	#<PolvinhosTextLeft
   1514  f765		       4c 86 f7 	      JMP	ProcessPrintEasterEgg
   1515  f768				   PrintIvonneLeft
   1516  f768		       a2 50		      LDX	#<IvonneTextLeft
   1517  f76a		       4c 86 f7 	      JMP	ProcessPrintEasterEgg
   1518  f76d				   PrintArtLeft
   1519  f76d		       a2 64		      LDX	#<PaperArtTextLeft
   1520  f76f		       4c 86 f7 	      JMP	ProcessPrintEasterEgg
   1521  f772
   1522  f772				   PrintZeldaDateLeft
   1523  f772		       a2 32		      LDX	#<ZeldaDateLeft
   1524  f774		       4c 86 f7 	      JMP	ProcessPrintEasterEgg
   1525  f777				   PrintPolvinhosDateLeft
   1526  f777		       a2 46		      LDX	#<PolvinhosDateLeft
   1527  f779		       4c 86 f7 	      JMP	ProcessPrintEasterEgg
   1528  f77c				   PrintIvonneDateLeft
   1529  f77c		       a2 5a		      LDX	#<IvonneDateLeft
   1530  f77e		       4c 86 f7 	      JMP	ProcessPrintEasterEgg
   1531  f781				   PrintLeonardoLeft
   1532  f781		       a2 6e		      LDX	#<LeonardoTextLeft
   1533  f783		       4c 86 f7 	      JMP	ProcessPrintEasterEgg
   1534  f786
   1535  f786				   ProcessPrintEasterEgg
   1536  f786		       a5 8c		      LDA	FrameCount0	;3
   1537  f788		       29 01		      AND	#%00000001	;2
   1538  f78a		       d0 03		      BNE	TranformIntoRightText
   1539  f78c		       4c 94 f7 	      JMP	PrintEasterEggText
   1540  f78f				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1541  f78f		       8a		      TXA
   1542  f790		       18		      CLC
   1543  f791		       69 05		      ADC	#HALF_TEXT_SIZE
   1544  f793		       aa		      TAX
   1545  f794
   1546  f794				   PrintEasterEggText
   1547  f794		       20 08 f7 	      JSR	PrintStaticText
   1548  f797		       60		      RTS
   1549  f798
   1550  f798				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1551  f798		       a2 00		      LDX	#0
   1552  f79a		       a0 04		      LDY	#FONT_OFFSET
   1553  f79c
   1554  f79c				   ScoreLoop		; 20 
   1555  f79c		       85 02		      STA	WSYNC	;2
   1556  f79e
   1557  f79e		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1558  f7a0		       85 0d		      STA	PF0	;3
   1559  f7a2
   1560  f7a2		       a5 82		      LDA	PF1Cache	;3
   1561  f7a4		       85 0e		      STA	PF1	;3
   1562  f7a6
   1563  f7a6		       a5 83		      LDA	PF2Cache	;3
   1564  f7a8		       85 0f		      STA	PF2	;3
   1565  f7aa
   1566  f7aa				   DrawScoreD0		; 15
   1567  f7aa		       a6 d0		      LDX	ScoreD0	; 3
   1568  f7ac		       bd 00 fd 	      LDA	Font,X	;4
   1569  f7af		       85 81		      STA	PF0Cache	;3
   1570  f7b1		       c6 d0		      DEC	ScoreD0	;5
   1571  f7b3
   1572  f7b3				   DrawScoreD1		; 23	
   1573  f7b3		       a6 d1		      LDX	ScoreD1	; 3
   1574  f7b5		       bd 00 fd 	      LDA	Font,X	;4
   1575  f7b8		       0a		      ASL		;2
   1576  f7b9		       0a		      ASL		;2
   1577  f7ba		       0a		      ASL		;2
   1578  f7bb		       0a		      ASL		;2
   1579  f7bc		       85 82		      STA	PF1Cache	;3
   1580  f7be		       c6 d1		      DEC	ScoreD1	;5
   1581  f7c0
   1582  f7c0				   DrawScoreD2		; 20
   1583  f7c0		       a6 d2		      LDX	ScoreD2	; 3
   1584  f7c2		       bd 00 fd 	      LDA	Font,X	;4
   1585  f7c5		       29 0f		      AND	#%00001111	;2
   1586  f7c7		       05 82		      ORA	PF1Cache	;3
   1587  f7c9		       85 82		      STA	PF1Cache	;3
   1588  f7cb		       c6 d2		      DEC	ScoreD2	;5
   1589  f7cd
   1590  f7cd				   DrawScoreD3		; 23
   1591  f7cd		       a6 d3		      LDX	ScoreD3	; 3
   1592  f7cf		       bd 00 fd 	      LDA	Font,X	;4
   1593  f7d2		       4a		      LSR		;2
   1594  f7d3		       4a		      LSR		;2
   1595  f7d4		       4a		      LSR		;2
   1596  f7d5		       4a		      LSR		;2
   1597  f7d6		       85 83		      STA	PF2Cache	;3
   1598  f7d8		       c6 d3		      DEC	ScoreD3	;5
   1599  f7da
   1600  f7da				   DrawScoreD4		; 20
   1601  f7da		       a6 d4		      LDX	ScoreD4	; 3
   1602  f7dc		       bd 00 fd 	      LDA	Font,X	;4
   1603  f7df		       29 f0		      AND	#%11110000	;2
   1604  f7e1		       05 83		      ORA	PF2Cache	;3
   1605  f7e3		       85 83		      STA	PF2Cache	;3
   1606  f7e5		       c6 d4		      DEC	ScoreD4	;5
   1607  f7e7
   1608  f7e7
   1609  f7e7		       88		      DEY		;2
   1610  f7e8		       10 b2		      BPL	ScoreLoop	;4
   1611  f7ea
   1612  f7ea		       85 02		      STA	WSYNC
   1613  f7ec		       20 9c f6 	      JSR	LoadAll
   1614  f7ef		       60		      RTS		; 6
   1615  f7f0
   1616  f7f0				   PrintRightDecimalDigits
   1617  f7f0		       b9 00 00 	      LDA	0,Y
   1618  f7f3		       4a		      LSR
   1619  f7f4		       4a		      LSR
   1620  f7f5		       4a		      LSR
   1621  f7f6		       4a		      LSR
   1622  f7f7		       aa		      TAX
   1623  f7f8		       bd be fd 	      LDA	FontLookup,X	;4
   1624  f7fb		       85 d2		      STA	ScoreD2	;3
   1625  f7fd
   1626  f7fd		       b9 00 00 	      LDA	0,Y
   1627  f800		       29 0f		      AND	#%00001111
   1628  f802		       aa		      TAX
   1629  f803		       bd be fd 	      LDA	FontLookup,X	;4
   1630  f806		       85 d3		      STA	ScoreD3	;3
   1631  f808
   1632  f808		       c8		      INY
   1633  f809		       b9 00 00 	      LDA	0,Y
   1634  f80c		       4a		      LSR
   1635  f80d		       4a		      LSR
   1636  f80e		       4a		      LSR
   1637  f80f		       4a		      LSR
   1638  f810		       aa		      TAX
   1639  f811		       bd be fd 	      LDA	FontLookup,X	;4
   1640  f814		       85 d0		      STA	ScoreD0	;3
   1641  f816
   1642  f816		       b9 00 00 	      LDA	0,Y
   1643  f819		       29 0f		      AND	#%00001111
   1644  f81b		       aa		      TAX
   1645  f81c		       bd be fd 	      LDA	FontLookup,X	;4
   1646  f81f		       85 d1		      STA	ScoreD1	;3
   1647  f821
   1648  f821		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1649  f823		       85 d4		      STA	ScoreD4
   1650  f825		       60		      RTS
   1651  f826
   1652  f826				   PrintLastLeftDecimalDigits
   1653  f826		       b9 00 00 	      LDA	0,Y
   1654  f829		       4a		      LSR
   1655  f82a		       4a		      LSR
   1656  f82b		       4a		      LSR
   1657  f82c		       4a		      LSR
   1658  f82d		       aa		      TAX
   1659  f82e		       bd be fd 	      LDA	FontLookup,X	;4
   1660  f831		       85 d3		      STA	ScoreD3	;3
   1661  f833		       b9 00 00 	      LDA	0,Y
   1662  f836		       29 0f		      AND	#%00001111
   1663  f838		       aa		      TAX
   1664  f839		       bd be fd 	      LDA	FontLookup,X	;4
   1665  f83c		       85 d4		      STA	ScoreD4	;3
   1666  f83e		       60		      RTS
   1667  f83f
   1668  f83f				   PrintZerosLeft
   1669  f83f		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1670  f841		       85 d2		      STA	ScoreD2
   1671  f843		       85 d3		      STA	ScoreD3
   1672  f845		       85 d4		      STA	ScoreD4
   1673  f847		       60		      RTS
   1674  f848
   1675  f848				   DrawGameOverScoreLine
   1676  f848		       85 02		      STA	WSYNC
   1677  f84a		       20 98 f7 	      JSR	PrintScore
   1678  f84d		       85 02		      STA	WSYNC
   1679  f84f		       85 02		      STA	WSYNC
   1680  f851		       20 8d f6 	      JSR	ClearPF
   1681  f854		       60		      RTS
   1682  f855
   1683  f855				   DrawGameOverScreenLeft
   1684  f855		       85 02		      STA	WSYNC
   1685  f857		       20 8d f6 	      JSR	ClearPF
   1686  f85a
   1687  f85a				   DrawGlideTimerLeft
   1688  f85a		       20 1c f9 	      JSR	Sleep8Lines
   1689  f85d		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1690  f85f		       85 06		      STA	COLUP0
   1691  f861		       85 02		      STA	WSYNC
   1692  f863		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1693  f865		       85 d0		      STA	ScoreD0
   1694  f867		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1695  f869		       85 d1		      STA	ScoreD1
   1696  f86b		       20 3f f8 	      JSR	PrintZerosLeft
   1697  f86e		       20 48 f8 	      JSR	DrawGameOverScoreLine
   1698  f871
   1699  f871				   DrawHitCountLeft
   1700  f871		       20 1c f9 	      JSR	Sleep8Lines
   1701  f874		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1702  f876		       85 06		      STA	COLUP0
   1703  f878		       85 02		      STA	WSYNC
   1704  f87a		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1705  f87c		       85 d0		      STA	ScoreD0
   1706  f87e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1707  f880		       85 d1		      STA	ScoreD1
   1708  f882		       20 3f f8 	      JSR	PrintZerosLeft
   1709  f885		       20 48 f8 	      JSR	DrawGameOverScoreLine
   1710  f888
   1711  f888				   DrawCheckpointCountLeft
   1712  f888		       20 1c f9 	      JSR	Sleep8Lines
   1713  f88b		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1714  f88d		       85 06		      STA	COLUP0
   1715  f88f		       85 02		      STA	WSYNC
   1716  f891		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1717  f893		       85 d0		      STA	ScoreD0
   1718  f895		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1719  f897		       85 d1		      STA	ScoreD1
   1720  f899		       20 3f f8 	      JSR	PrintZerosLeft
   1721  f89c		       20 48 f8 	      JSR	DrawGameOverScoreLine
   1722  f89f
   1723  f89f				   DrawGameVersionLeft
   1724  f89f		       20 1c f9 	      JSR	Sleep8Lines
   1725  f8a2		       a9 49		      LDA	#VERSION_COLOR
   1726  f8a4		       85 06		      STA	COLUP0
   1727  f8a6
   1728  f8a6		       a5 c6		      LDA	GameMode
   1729  f8a8		       aa		      TAX
   1730  f8a9		       bd be fd 	      LDA	FontLookup,X	;4
   1731  f8ac		       85 d0		      STA	ScoreD0	;3
   1732  f8ae
   1733  f8ae		       a5 c7		      LDA	CurrentCarId
   1734  f8b0		       aa		      TAX
   1735  f8b1		       bd be fd 	      LDA	FontLookup,X	;4
   1736  f8b4		       85 d1		      STA	ScoreD1	;3
   1737  f8b6
   1738  f8b6		       a5 db		      LDA	StartSWCHB
   1739  f8b8		       29 40		      AND	#%01000000	; P0 difficulty
   1740  f8ba		       49 40		      EOR	#%01000000	; Reverse bytes
   1741  f8bc		       2a		      ROL
   1742  f8bd		       2a		      ROL
   1743  f8be		       2a		      ROL
   1744  f8bf		       18		      CLC
   1745  f8c0		       69 0a		      ADC	#10
   1746  f8c2		       aa		      TAX
   1747  f8c3		       bd be fd 	      LDA	FontLookup,X	;4
   1748  f8c6		       85 d2		      STA	ScoreD2	;3
   1749  f8c8
   1750  f8c8		       a5 db		      LDA	StartSWCHB
   1751  f8ca		       29 80		      AND	#%10000000	; P0 difficulty
   1752  f8cc		       49 80		      EOR	#%10000000	; Reverse bytes
   1753  f8ce		       2a		      ROL
   1754  f8cf		       2a		      ROL
   1755  f8d0		       18		      CLC
   1756  f8d1		       69 0a		      ADC	#10
   1757  f8d3		       aa		      TAX
   1758  f8d4		       bd be fd 	      LDA	FontLookup,X	;4
   1759  f8d7		       85 d3		      STA	ScoreD3	;3
   1760  f8d9
   1761  f8d9		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1762  f8db		       85 d4		      STA	ScoreD4
   1763  f8dd
   1764  f8dd		       20 48 f8 	      JSR	DrawGameOverScoreLine
   1765  f8e0
   1766  f8e0		       4c f9 f8 	      JMP	FinalizeDrawGameOver
   1767  f8e3
   1768  f8e3				   DrawGameOverScreenRight
   1769  f8e3		       85 02		      STA	WSYNC
   1770  f8e5		       20 8d f6 	      JSR	ClearPF
   1771  f8e8
   1772  f8e8				   DrawVersionRight
   1773  f8e8		       20 1c f9 	      JSR	Sleep8Lines
   1774  f8eb		       a9 49		      LDA	#VERSION_COLOR
   1775  f8ed		       85 07		      STA	COLUP1
   1776  f8ef		       85 02		      STA	WSYNC
   1777  f8f1		       a2 78		      LDX	#<VersionText
   1778  f8f3		       20 08 f7 	      JSR	PrintStaticText
   1779  f8f6		       20 48 f8 	      JSR	DrawGameOverScoreLine
   1780  f8f9
   1781  f8f9				   FinalizeDrawGameOver
   1782  f8f9		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1783  f8fb		       85 c9		      STA	ScoreFontColor
   1784  f8fd		       20 13 f9 	      JSR	Sleep4Lines
   1785  f900		       20 23 f9 	      JSR	Sleep32Lines
   1786  f903		       20 23 f9 	      JSR	Sleep32Lines
   1787  f906		       4c 57 f5 	      JMP	PrepareOverscan
   1788  f909
   1789  f909				   WaitForVblankEnd
   1790  f909		       ad 84 02 	      LDA	INTIM
   1791  f90c		       d0 fb		      BNE	WaitForVblankEnd
   1792  f90e		       85 02		      STA	WSYNC
   1793  f910		       85 01		      STA	VBLANK
   1794  f912		       60		      RTS
   1795  f913
   1796  f913				   Sleep4Lines
   1797  f913		       85 02		      STA	WSYNC
   1798  f915		       85 02		      STA	WSYNC
   1799  f917		       85 02		      STA	WSYNC
   1800  f919		       85 02		      STA	WSYNC
   1801  f91b		       60		      RTS
   1802  f91c
   1803  f91c				   Sleep8Lines
   1804  f91c		       20 13 f9 	      JSR	Sleep4Lines
   1805  f91f		       20 13 f9 	      JSR	Sleep4Lines
   1806  f922		       60		      RTS
   1807  f923
   1808  f923				   Sleep32Lines
   1809  f923		       20 1c f9 	      JSR	Sleep8Lines
   1810  f926		       20 1c f9 	      JSR	Sleep8Lines
   1811  f929		       20 1c f9 	      JSR	Sleep8Lines
   1812  f92c		       20 1c f9 	      JSR	Sleep8Lines
   1813  f92f		       60		      RTS
   1814  f930
   1815  f930				   ConfigureCarSprites
   1816  f930		       a5 8c		      LDA	FrameCount0
   1817  f932		       29 01		      AND	#%00000001
   1818  f934		       d0 0b		      BNE	LoadForRightScreenSprites
   1819  f936				   LoadForLeftScreenSprites
   1820  f936		       a5 c7		      LDA	CurrentCarId
   1821  f938		       85 b0		      STA	Tmp0
   1822  f93a		       a5 c8		      LDA	OpCurrentCarId
   1823  f93c		       85 b1		      STA	Tmp1
   1824  f93e		       4c 49 f9 	      JMP	LoadCarSpritesFromIds
   1825  f941				   LoadForRightScreenSprites
   1826  f941		       a5 c7		      LDA	CurrentCarId
   1827  f943		       85 b1		      STA	Tmp1
   1828  f945		       a5 c8		      LDA	OpCurrentCarId
   1829  f947		       85 b0		      STA	Tmp0
   1830  f949
   1831  f949				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1832  f949		       a4 b0		      LDY	Tmp0
   1833  f94b		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1834  f94e		       85 d7		      STA	CarSpritePointerL
   1835  f950		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1836  f953		       85 d8		      STA	CarSpritePointerH
   1837  f955				   ConfigureOpponentCarSprite
   1838  f955		       a4 b1		      LDY	Tmp1
   1839  f957		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1840  f95a		       85 d9		      STA	EnemyCarSpritePointerL
   1841  f95c		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1842  f95f		       85 da		      STA	EnemyCarSpritePointerH
   1843  f961		       60		      RTS
   1844  f962
   1845  f962							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1846  f962							;X player 0 or 1
   1847  f962				   SelectCarWithDpad
   1848  f962		       a0 03		      LDY	#3
   1849  f964				   SelectCarWithDpadLoop
   1850  f964		       ad 80 02 	      LDA	SWCHA
   1851  f967		       25 b0		      AND	Tmp0
   1852  f969		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1853  f96b		       98		      TYA
   1854  f96c		       95 c7		      STA	CurrentCarId,X
   1855  f96e				   ContinueSelectCarWithDpadLoop
   1856  f96e		       46 b0		      LSR	Tmp0
   1857  f970		       88		      DEY
   1858  f971		       10 f1		      BPL	SelectCarWithDpadLoop
   1859  f973		       60		      RTS
   1860  f974
   1861  f974							; Movement and colision are binded because the car must be moved after duplicate size.
   1862  f974							; Use X for the player
   1863  f974							; Tmp0 SWCHA Turn left Mask
   1864  f974							; Tmp1 SWCHA Turn right Mask
   1865  f974							; Tmp2 Traffic colision result
   1866  f974							; Tmp3 Opponent Colision result (Not implemented)
   1867  f974				   TestCollisionAndMove
   1868  f974							; Until store the movemnt, Y contains the value to be stored.
   1869  f974							; see if player0 colides with the rest
   1870  f974		       a5 b2		      LDA	Tmp2
   1871  f976		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1872  f978		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1873  f97a		       d0 25		      BNE	NoCollision
   1874  f97c		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1875  f97e		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1876  f980		       f0 1f		      BEQ	NoCollision
   1877  f982		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1878  f984		       f0 1b		      BEQ	NoCollision
   1879  f986		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1880  f988		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1881  f98a		       b5 f2		      LDA	Player0SpeedH,X
   1882  f98c		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1883  f98e		       a9 10		      LDA	#COLLISION_SPEED_L
   1884  f990		       d5 f0		      CMP	Player0SpeedL,X
   1885  f992		       b0 04		      BCS	SkipSetColisionSpeedL
   1886  f994				   SetColisionSpeedL
   1887  f994		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1888  f996		       95 f0		      STA	Player0SpeedL,X
   1889  f998				   SkipSetColisionSpeedL
   1890  f998		       a9 00		      LDA	#0
   1891  f99a		       95 f2		      STA	Player0SpeedH,X
   1892  f99c		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1893  f99e		       4c ef f9 	      JMP	StoreHMove	; We keep position consistent
   1894  f9a1				   NoCollision
   1895  f9a1
   1896  f9a1				   DecrementCollision
   1897  f9a1		       b5 8e		      LDA	CollisionCounter,X
   1898  f9a3		       f0 06		      BEQ	FinishDecrementCollision
   1899  f9a5		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1900  f9a7		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1901  f9a9		       d6 8e		      DEC	CollisionCounter,X
   1902  f9ab				   FinishDecrementCollision
   1903  f9ab
   1904  f9ab				   ResetPlayerSize
   1905  f9ab		       d0 04		      BNE	FinishResetPlayerSize
   1906  f9ad		       a9 30		      LDA	#%00110000
   1907  f9af		       95 04		      STA	NUSIZ0,X	;
   1908  f9b1				   FinishResetPlayerSize
   1909  f9b1
   1910  f9b1				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1911  f9b1		       b5 8e		      LDA	CollisionCounter,X
   1912  f9b3		       c9 01		      CMP	#1	; Last frame before reset
   1913  f9b5		       d0 05		      BNE	SkipResetPlayerPosition
   1914  f9b7		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1915  f9b9		       4c ef f9 	      JMP	StoreHMove
   1916  f9bc				   SkipResetPlayerPosition
   1917  f9bc
   1918  f9bc				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1919  f9bc		       b5 c7		      LDA	CurrentCarId,X
   1920  f9be		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1921  f9c0		       d0 08		      BNE	PrepareReadXAxis
   1922  f9c2		       a0 00		      LDY	#0
   1923  f9c4		       a5 8c		      LDA	FrameCount0
   1924  f9c6		       29 01		      AND	#DRAGSTER_TURN_MASK
   1925  f9c8		       f0 25		      BEQ	StoreHMove	; Ignore movement on some frames
   1926  f9ca
   1927  f9ca				   PrepareReadXAxis
   1928  f9ca		       a0 00		      LDY	#0
   1929  f9cc		       b5 b6		      LDA	Player0X,X
   1930  f9ce				   BeginReadLeft
   1931  f9ce		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
   1932  f9d0		       a5 b0		      LDA	Tmp0	;Left mask set before call (player 0 or 1)
   1933  f9d2		       2c 80 02 	      BIT	SWCHA
   1934  f9d5		       d0 07		      BNE	SkipMoveLeft
   1935  f9d7		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1936  f9d9		       d6 b6		      DEC	Player0X,X
   1937  f9db		       4c ef f9 	      JMP	StoreHMove	; Cannot move left and right...
   1938  f9de				   SkipMoveLeft
   1939  f9de				   BeginReadRight
   1940  f9de		       b5 b6		      LDA	Player0X,X
   1941  f9e0		       c9 2c		      CMP	#PLAYER_MAX_X
   1942  f9e2		       f0 0b		      BEQ	SkipMoveRight	; At max already
   1943  f9e4		       a5 b1		      LDA	Tmp1	;Right mask set before call (player 0 or 1)
   1944  f9e6		       2c 80 02 	      BIT	SWCHA
   1945  f9e9		       d0 04		      BNE	SkipMoveRight
   1946  f9eb		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1947  f9ed		       f6 b6		      INC	Player0X,X
   1948  f9ef				   SkipMoveRight
   1949  f9ef				   StoreHMove
   1950  f9ef		       94 20		      STY	HMP0,X	;set the move for player 0
   1951  f9f1
   1952  f9f1				   ClearCollision
   1953  f9f1		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1954  f9f3		       60		      RTS
   1955  f9f4
   1956  f9f4							; X Traffic offset 4 bits each lane, 4 lanes per player
   1957  f9f4							; Tmp3 Max X offset
   1958  f9f4							; Tmp4 Max Player Speed L
   1959  f9f4							; Tmp5 Max Player Speed H
   1960  f9f4				   UpdateOffsets
   1961  f9f4		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1962  f9f6		       a5 c6		      LDA	GameMode
   1963  f9f8		       29 04		      AND	#%00000100	; GameModes with high delta
   1964  f9fa		       f0 02		      BEQ	UpdateOffsetsLoop
   1965  f9fc		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1966  f9fe
   1967  f9fe				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1968  f9fe		       38		      SEC
   1969  f9ff		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1970  fa01		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1971  fa04		       85 b0		      STA	Tmp0
   1972  fa06		       c8		      INY
   1973  fa07		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1974  fa09		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1975  fa0c		       85 b1		      STA	Tmp1
   1976  fa0e		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1977  fa10		       e9 00		      SBC	#0
   1978  fa12		       85 b2		      STA	Tmp2
   1979  fa14
   1980  fa14				   AddsTheResult
   1981  fa14		       18		      CLC
   1982  fa15		       a5 b0		      LDA	Tmp0
   1983  fa17		       75 90		      ADC	TrafficOffset0,X
   1984  fa19		       95 90		      STA	TrafficOffset0,X
   1985  fa1b		       e8		      INX
   1986  fa1c		       a5 b1		      LDA	Tmp1
   1987  fa1e		       75 90		      ADC	TrafficOffset0,X
   1988  fa20		       95 90		      STA	TrafficOffset0,X
   1989  fa22		       e8		      INX
   1990  fa23		       a5 b2		      LDA	Tmp2	; Carry
   1991  fa25		       75 90		      ADC	TrafficOffset0,X
   1992  fa27		       95 90		      STA	TrafficOffset0,X
   1993  fa29		       90 0f		      BCC	CalculateOffsetCache
   1994  fa2b				   CalculatePlayer0Msb
   1995  fa2b		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1996  fa2d		       d0 05		      BNE	CalculatePlayer1Msb
   1997  fa2f		       e6 ba		      INC	Traffic0Msb
   1998  fa31		       4c 3a fa 	      JMP	CalculateOffsetCache
   1999  fa34				   CalculatePlayer1Msb
   2000  fa34		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   2001  fa36		       d0 02		      BNE	CalculateOffsetCache
   2002  fa38		       e6 bb		      INC	OpTraffic0Msb
   2003  fa3a
   2004  fa3a				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   2005  fa3a		       e8		      INX
   2006  fa3b		       38		      SEC
   2007  fa3c		       69 00		      ADC	#0	;Increment by one
   2008  fa3e		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   2009  fa40
   2010  fa40				   PrepareNextUpdateLoop
   2011  fa40		       c8		      INY
   2012  fa41		       e8		      INX
   2013  fa42		       e4 b3		      CPX	Tmp3	; Max X offset
   2014  fa44		       d0 b8		      BNE	UpdateOffsetsLoop
   2015  fa46		       60		      RTS
   2016  fa47
   2017  fa47				   ProcessSpeed
   2018  fa47				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2019  fa47		       a9 00		      LDA	#0
   2020  fa49		       85 b0		      STA	Tmp0	; Break speed
   2021  fa4b		       a5 b8		      LDA	CountdownTimer
   2022  fa4d		       d0 0d		      BNE	Break
   2023  fa4f		       a4 c7		      LDY	CurrentCarId
   2024  fa51		       a5 8c		      LDA	FrameCount0
   2025  fa53		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2026  fa56		       d0 04		      BNE	Break
   2027  fa58		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2028  fa5a		       85 b0		      STA	Tmp0
   2029  fa5c
   2030  fa5c				   Break
   2031  fa5c		       a9 20		      LDA	#%00100000	;Down in controller
   2032  fa5e		       2c 80 02 	      BIT	SWCHA
   2033  fa61		       d0 12		      BNE	BreakNonZero
   2034  fa63		       a5 0c		      LDA	INPT4	;3
   2035  fa65		       10 0a		      BPL	BreakWhileAccelerating
   2036  fa67		       a4 d5		      LDY	Gear
   2037  fa69		       b9 e9 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2038  fa6c		       85 b0		      STA	Tmp0
   2039  fa6e		       4c 75 fa 	      JMP	BreakNonZero
   2040  fa71				   BreakWhileAccelerating		; Allow better control while breaking.
   2041  fa71		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2042  fa73		       85 b0		      STA	Tmp0
   2043  fa75
   2044  fa75				   BreakNonZero
   2045  fa75		       a5 b0		      LDA	Tmp0
   2046  fa77		       f0 29		      BEQ	SkipBreak
   2047  fa79
   2048  fa79				   DecreaseSpeed
   2049  fa79		       38		      SEC
   2050  fa7a		       a5 f0		      LDA	Player0SpeedL
   2051  fa7c		       e5 b0		      SBC	Tmp0
   2052  fa7e		       85 f0		      STA	Player0SpeedL
   2053  fa80		       a5 f2		      LDA	Player0SpeedH
   2054  fa82		       e9 00		      SBC	#0
   2055  fa84		       85 f2		      STA	Player0SpeedH
   2056  fa86
   2057  fa86				   CheckMinSpeed
   2058  fa86		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2059  fa88		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2060  fa8a		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2061  fa8c		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2062  fa8e
   2063  fa8e				   CompareLBreakSpeed
   2064  fa8e		       a5 f0		      LDA	Player0SpeedL
   2065  fa90		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2066  fa92		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2067  fa94		       4c 9f fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2068  fa97
   2069  fa97				   ResetMinSpeed
   2070  fa97		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2071  fa99		       85 f2		      STA	Player0SpeedH
   2072  fa9b		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2073  fa9d		       85 f0		      STA	Player0SpeedL
   2074  fa9f
   2075  fa9f				   SkipAccelerateIfBreaking
   2076  fa9f		       4c e7 fa 	      JMP	SkipAccelerate
   2077  faa2				   SkipBreak
   2078  faa2
   2079  faa2				   Acelerates
   2080  faa2		       a5 b8		      LDA	CountdownTimer
   2081  faa4		       f0 41		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2082  faa6
   2083  faa6				   ContinueAccelerateTest
   2084  faa6		       a5 0c		      LDA	INPT4	;3
   2085  faa8		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2086  faaa		       a9 10		      LDA	#%00010000	;UP in controller
   2087  faac		       2c 80 02 	      BIT	SWCHA
   2088  faaf		       d0 36		      BNE	SkipAccelerate
   2089  fab1
   2090  fab1				   IncreaseCarSpeed
   2091  fab1		       a9 02		      LDA	#2
   2092  fab3		       85 b0		      STA	Tmp0	; Loop control
   2093  fab5		       a4 c7		      LDY	CurrentCarId
   2094  fab7				   IncreaseCarSpeedLoop
   2095  fab7							;Adds speed
   2096  fab7		       18		      CLC
   2097  fab8		       a5 dc		      LDA	AccelerateBuffer
   2098  faba		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
   2099  fabd		       85 dc		      STA	AccelerateBuffer
   2100  fabf		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2101  fac1		       e6 f0		      INC	Player0SpeedL
   2102  fac3		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2103  fac5		       e6 f2		      INC	Player0SpeedH
   2104  fac7				   ContinueIncreaseSpeedLoop
   2105  fac7		       c6 b0		      DEC	Tmp0
   2106  fac9		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2107  facb				   SkipIncreaseCarSpeed
   2108  facb
   2109  facb				   CheckIfAlreadyMaxSpeed
   2110  facb		       a5 f2		      LDA	Player0SpeedH
   2111  facd		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2112  facf		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2113  fad1		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2114  fad3							;High bit is max, compare the low
   2115  fad3		       a4 c7		      LDY	CurrentCarId
   2116  fad5		       a5 f0		      LDA	Player0SpeedL
   2117  fad7		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
   2118  fada		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2119  fadc							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2120  fadc
   2121  fadc				   ResetToMaxSpeed		; Speed is more, or is already max
   2122  fadc		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2123  fade		       85 f2		      STA	Player0SpeedH
   2124  fae0		       a4 c7		      LDY	CurrentCarId
   2125  fae2		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
   2126  fae5		       85 f0		      STA	Player0SpeedL
   2127  fae7				   SkipAccelerate
   2128  fae7		       60		      RTS
   2129  fae8
   2130  fae8							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2131  fc00					      org	$FC00
   2132  fc00				   QrCode1
   2133  fc00		       1f		      .byte.b	#%00011111
   2134  fc01		       10		      .byte.b	#%00010000
   2135  fc02		       17		      .byte.b	#%00010111
   2136  fc03		       17		      .byte.b	#%00010111
   2137  fc04		       17		      .byte.b	#%00010111
   2138  fc05		       10		      .byte.b	#%00010000
   2139  fc06		       1f		      .byte.b	#%00011111
   2140  fc07		       00		      .byte.b	#%00000000
   2141  fc08		       17		      .byte.b	#%00010111
   2142  fc09		       10		      .byte.b	#%00010000
   2143  fc0a		       1d		      .byte.b	#%00011101
   2144  fc0b		       16		      .byte.b	#%00010110
   2145  fc0c		       03		      .byte.b	#%00000011
   2146  fc0d		       19		      .byte.b	#%00011001
   2147  fc0e		       13		      .byte.b	#%00010011
   2148  fc0f		       1c		      .byte.b	#%00011100
   2149  fc10		       0b		      .byte.b	#%00001011
   2150  fc11		       00		      .byte.b	#%00000000
   2151  fc12		       1f		      .byte.b	#%00011111
   2152  fc13		       10		      .byte.b	#%00010000
   2153  fc14		       17		      .byte.b	#%00010111
   2154  fc15		       17		      .byte.b	#%00010111
   2155  fc16		       17		      .byte.b	#%00010111
   2156  fc17		       10		      .byte.b	#%00010000
   2157  fc18		       1f		      .byte.b	#%00011111
   2158  fc19
   2159  fc19				   QrCode2
   2160  fc19		       c3		      .byte.b	#%11000011
   2161  fc1a		       9a		      .byte.b	#%10011010
   2162  fc1b		       82		      .byte.b	#%10000010
   2163  fc1c		       da		      .byte.b	#%11011010
   2164  fc1d		       aa		      .byte.b	#%10101010
   2165  fc1e		       ca		      .byte.b	#%11001010
   2166  fc1f		       f3		      .byte.b	#%11110011
   2167  fc20		       78		      .byte.b	#%01111000
   2168  fc21		       df		      .byte.b	#%11011111
   2169  fc22		       fc		      .byte.b	#%11111100
   2170  fc23		       c7		      .byte.b	#%11000111
   2171  fc24		       98		      .byte.b	#%10011000
   2172  fc25		       23		      .byte.b	#%00100011
   2173  fc26		       b9		      .byte.b	#%10111001
   2174  fc27		       d2		      .byte.b	#%11010010
   2175  fc28		       30		      .byte.b	#%00110000
   2176  fc29		       eb		      .byte.b	#%11101011
   2177  fc2a		       28		      .byte.b	#%00101000
   2178  fc2b		       ab		      .byte.b	#%10101011
   2179  fc2c		       72		      .byte.b	#%01110010
   2180  fc2d		       fa		      .byte.b	#%11111010
   2181  fc2e		       7a		      .byte.b	#%01111010
   2182  fc2f		       32		      .byte.b	#%00110010
   2183  fc30		       3a		      .byte.b	#%00111010
   2184  fc31		       63		      .byte.b	#%01100011
   2185  fc32
   2186  fc32				   QrCode3
   2187  fc32		       98		      .byte.b	#%10011000
   2188  fc33		       c3		      .byte.b	#%11000011
   2189  fc34		       39		      .byte.b	#%00111001
   2190  fc35		       34		      .byte.b	#%00110100
   2191  fc36		       ff		      .byte.b	#%11111111
   2192  fc37		       71		      .byte.b	#%01110001
   2193  fc38		       d5		      .byte.b	#%11010101
   2194  fc39		       d1		      .byte.b	#%11010001
   2195  fc3a		       5f		      .byte.b	#%01011111
   2196  fc3b		       26		      .byte.b	#%00100110
   2197  fc3c		       2d		      .byte.b	#%00101101
   2198  fc3d		       e9		      .byte.b	#%11101001
   2199  fc3e		       d6		      .byte.b	#%11010110
   2200  fc3f		       26		      .byte.b	#%00100110
   2201  fc40		       ba		      .byte.b	#%10111010
   2202  fc41		       03		      .byte.b	#%00000011
   2203  fc42		       dd		      .byte.b	#%11011101
   2204  fc43		       e0		      .byte.b	#%11100000
   2205  fc44		       57		      .byte.b	#%01010111
   2206  fc45		       14		      .byte.b	#%00010100
   2207  fc46		       35		      .byte.b	#%00110101
   2208  fc47		       e5		      .byte.b	#%11100101
   2209  fc48		       b5		      .byte.b	#%10110101
   2210  fc49		       d4		      .byte.b	#%11010100
   2211  fc4a		       97		      .byte.b	#%10010111
   2212  fc4b
   2213  fc4b				   QrCode4
   2214  fc4b		       09		      .byte.b	#%00001001
   2215  fc4c		       0e		      .byte.b	#%00001110
   2216  fc4d		       0f		      .byte.b	#%00001111
   2217  fc4e		       0c		      .byte.b	#%00001100
   2218  fc4f		       0c		      .byte.b	#%00001100
   2219  fc50		       08		      .byte.b	#%00001000
   2220  fc51		       08		      .byte.b	#%00001000
   2221  fc52		       06		      .byte.b	#%00000110
   2222  fc53		       06		      .byte.b	#%00000110
   2223  fc54		       0b		      .byte.b	#%00001011
   2224  fc55		       0f		      .byte.b	#%00001111
   2225  fc56		       04		      .byte.b	#%00000100
   2226  fc57		       08		      .byte.b	#%00001000
   2227  fc58		       0f		      .byte.b	#%00001111
   2228  fc59		       09		      .byte.b	#%00001001
   2229  fc5a		       07		      .byte.b	#%00000111
   2230  fc5b		       05		      .byte.b	#%00000101
   2231  fc5c		       00		      .byte.b	#%00000000
   2232  fc5d		       0f		      .byte.b	#%00001111
   2233  fc5e		       08		      .byte.b	#%00001000
   2234  fc5f		       0b		      .byte.b	#%00001011
   2235  fc60		       0b		      .byte.b	#%00001011
   2236  fc61		       0b		      .byte.b	#%00001011
   2237  fc62		       08		      .byte.b	#%00001000
   2238  fc63		       0f		      .byte.b	#%00001111
   2239  fc64
   2240  fc64							; Moved here because of rom space.
   2241  fc64							; The only SBR in constants space
   2242  fc64				   DrawQrCode
   2243  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2244  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2245  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2246  fc6a		       85 0a		      STA	CTRLPF
   2247  fc6c		       20 7b f6 	      JSR	ClearAll	; To be 100 sure!
   2248  fc6f		       ad 82 02 	      LDA	SWCHB
   2249  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2250  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2251  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2252  fc78		       86 09		      STX	COLUBK
   2253  fc7a		       84 08		      STY	COLUPF
   2254  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2255  fc7f				   StoreReversedQrCode
   2256  fc7f		       86 08		      STX	COLUPF
   2257  fc81		       84 09		      STY	COLUBK
   2258  fc83
   2259  fc83				   ContinueQrCode
   2260  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2261  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2262  fc87		       20 09 f9 	      JSR	WaitForVblankEnd
   2263  fc8a		       20 1c f9 	      JSR	Sleep8Lines
   2264  fc8d		       20 1c f9 	      JSR	Sleep8Lines
   2265  fc90		       20 1c f9 	      JSR	Sleep8Lines
   2266  fc93
   2267  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2268  fc93		       85 02		      STA	WSYNC
   2269  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2270  fc98		       85 0e		      STA	PF1	;3
   2271  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2272  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2274  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2275  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2276  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2277  fcb5		       85 0e		      STA	PF1	;3
   2278  fcb7
   2279  fcb7		       ca		      DEX		;2
   2280  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2281  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2282  fcbc		       88		      DEY		;2
   2283  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2284  fcbf
   2285  fcbf				   EndQrCodeLoop
   2286  fcbf		       85 02		      STA	WSYNC	;
   2287  fcc1		       a9 00		      LDA	#0
   2288  fcc3		       85 0e		      STA	PF1	;3
   2289  fcc5		       85 0f		      STA	PF2	;3
   2290  fcc7
   2291  fcc7		       20 23 f9 	      JSR	Sleep32Lines
   2292  fcca		       4c 57 f5 	      JMP	PrepareOverscan
   2293  fccd
   2294  fd00					      org	$FD00
   2295  fd00				   Font
   2296  fd00				   C0
   2297  fd00		       e7		      .byte.b	#%11100111	;
   2298  fd01		       a5		      .byte.b	#%10100101	; 
   2299  fd02		       a5		      .byte.b	#%10100101	; 
   2300  fd03		       a5		      .byte.b	#%10100101	; 
   2301  fd04		       e7		      .byte.b	#%11100111	;	
   2302  fd05				   C1
   2303  fd05		       e7		      .byte.b	#%11100111	;
   2304  fd06		       42		      .byte.b	#%01000010	; 
   2305  fd07		       42		      .byte.b	#%01000010	; 
   2306  fd08		       42		      .byte.b	#%01000010	; 
   2307  fd09		       66		      .byte.b	#%01100110	;
   2308  fd0a				   C2
   2309  fd0a		       e7		      .byte.b	#%11100111	;
   2310  fd0b		       24		      .byte.b	#%00100100	; 
   2311  fd0c		       e7		      .byte.b	#%11100111	; 
   2312  fd0d		       81		      .byte.b	#%10000001	; 
   2313  fd0e		       e7		      .byte.b	#%11100111	;
   2314  fd0f				   C3
   2315  fd0f		       e7		      .byte.b	#%11100111	;
   2316  fd10		       81		      .byte.b	#%10000001	; 
   2317  fd11		       e7		      .byte.b	#%11100111	; 
   2318  fd12		       81		      .byte.b	#%10000001	; 
   2319  fd13		       e7		      .byte.b	#%11100111	;
   2320  fd14				   C4
   2321  fd14		       81		      .byte.b	#%10000001	;
   2322  fd15		       81		      .byte.b	#%10000001	; 
   2323  fd16		       e7		      .byte.b	#%11100111	; 
   2324  fd17		       a5		      .byte.b	#%10100101	; 
   2325  fd18		       a5		      .byte.b	#%10100101	;
   2326  fd19				   C5
   2327  fd19		       e7		      .byte.b	#%11100111	;
   2328  fd1a		       81		      .byte.b	#%10000001	; 
   2329  fd1b		       e7		      .byte.b	#%11100111	; 
   2330  fd1c		       24		      .byte.b	#%00100100	; 
   2331  fd1d		       e7		      .byte.b	#%11100111	;
   2332  fd1e				   C6
   2333  fd1e		       e7		      .byte.b	#%11100111	;
   2334  fd1f		       a5		      .byte.b	#%10100101	; 
   2335  fd20		       e7		      .byte.b	#%11100111	; 
   2336  fd21		       24		      .byte.b	#%00100100	; 
   2337  fd22		       e7		      .byte.b	#%11100111	;
   2338  fd23				   C7
   2339  fd23		       81		      .byte.b	#%10000001	;
   2340  fd24		       81		      .byte.b	#%10000001	; 
   2341  fd25		       81		      .byte.b	#%10000001	; 
   2342  fd26		       81		      .byte.b	#%10000001	; 
   2343  fd27		       e7		      .byte.b	#%11100111	;
   2344  fd28				   C8
   2345  fd28		       e7		      .byte.b	#%11100111	;
   2346  fd29		       a5		      .byte.b	#%10100101	; 
   2347  fd2a		       e7		      .byte.b	#%11100111	; 
   2348  fd2b		       a5		      .byte.b	#%10100101	; 
   2349  fd2c		       e7		      .byte.b	#%11100111	;
   2350  fd2d				   C9
   2351  fd2d		       e7		      .byte.b	#%11100111	;
   2352  fd2e		       81		      .byte.b	#%10000001	; 
   2353  fd2f		       e7		      .byte.b	#%11100111	; 
   2354  fd30		       a5		      .byte.b	#%10100101	; 
   2355  fd31		       e7		      .byte.b	#%11100111	;
   2356  fd32				   CA
   2357  fd32		       a5		      .byte.b	#%10100101	;
   2358  fd33		       a5		      .byte.b	#%10100101	; 
   2359  fd34		       e7		      .byte.b	#%11100111	; 
   2360  fd35		       a5		      .byte.b	#%10100101	; 
   2361  fd36		       e7		      .byte.b	#%11100111	;
   2362  fd37				   CB
   2363  fd37		       66		      .byte.b	#%01100110	;
   2364  fd38		       a5		      .byte.b	#%10100101	; 
   2365  fd39		       66		      .byte.b	#%01100110	; 
   2366  fd3a		       a5		      .byte.b	#%10100101	;
   2367  fd3b		       66		      .byte.b	#%01100110	;
   2368  fd3c				   CC
   2369  fd3c		       e7		      .byte.b	#%11100111	;
   2370  fd3d		       24		      .byte.b	#%00100100	; 
   2371  fd3e		       24		      .byte.b	#%00100100	; 
   2372  fd3f		       24		      .byte.b	#%00100100	;
   2373  fd40		       e7		      .byte.b	#%11100111	;
   2374  fd41
   2375  fd41				   CD
   2376  fd41		       66		      .byte.b	#%01100110	;
   2377  fd42		       a5		      .byte.b	#%10100101	; 
   2378  fd43		       a5		      .byte.b	#%10100101	; 
   2379  fd44		       a5		      .byte.b	#%10100101	;
   2380  fd45		       66		      .byte.b	#%01100110	;
   2381  fd46
   2382  fd46				   CE
   2383  fd46		       e7		      .byte.b	#%11100111	;
   2384  fd47		       24		      .byte.b	#%00100100	; 
   2385  fd48		       e7		      .byte.b	#%11100111	; 
   2386  fd49		       24		      .byte.b	#%00100100	; 
   2387  fd4a		       e7		      .byte.b	#%11100111	;
   2388  fd4b
   2389  fd4b				   CF
   2390  fd4b		       24		      .byte.b	#%00100100	;
   2391  fd4c		       24		      .byte.b	#%00100100	; 
   2392  fd4d		       e7		      .byte.b	#%11100111	; 
   2393  fd4e		       24		      .byte.b	#%00100100	; 
   2394  fd4f		       e7		      .byte.b	#%11100111	;
   2395  fd50
   2396  fd50				   CG
   2397  fd50		       c3		      .byte.b	#%11000011	;
   2398  fd51		       a5		      .byte.b	#%10100101	; 
   2399  fd52		       a5		      .byte.b	#%10100101	; 
   2400  fd53		       24		      .byte.b	#%00100100	; 
   2401  fd54		       c3		      .byte.b	#%11000011	;	
   2402  fd55
   2403  fd55				   CH
   2404  fd55		       a5		      .byte.b	#%10100101	;
   2405  fd56		       a5		      .byte.b	#%10100101	; 
   2406  fd57		       e7		      .byte.b	#%11100111	; 
   2407  fd58		       a5		      .byte.b	#%10100101	; 
   2408  fd59		       a5		      .byte.b	#%10100101	;
   2409  fd5a
   2410  fd5a				   CK
   2411  fd5a		       a5		      .byte.b	#%10100101	;
   2412  fd5b		       a5		      .byte.b	#%10100101	; 
   2413  fd5c		       66		      .byte.b	#%01100110	; 
   2414  fd5d		       a5		      .byte.b	#%10100101	; 
   2415  fd5e		       a5		      .byte.b	#%10100101	;
   2416  fd5f
   2417  fd5f				   CL
   2418  fd5f		       e7		      .byte.b	#%11100111	;
   2419  fd60		       24		      .byte.b	#%00100100	; 
   2420  fd61		       24		      .byte.b	#%00100100	; 
   2421  fd62		       24		      .byte.b	#%00100100	; 
   2422  fd63		       24		      .byte.b	#%00100100	;
   2423  fd64
   2424  fd64				   CI
   2425  fd64		       42		      .byte.b	#%01000010	;
   2426  fd65		       42		      .byte.b	#%01000010	; 
   2427  fd66		       42		      .byte.b	#%01000010	; 
   2428  fd67		       42		      .byte.b	#%01000010	; 
   2429  fd68		       42		      .byte.b	#%01000010	;
   2430  fd69
   2431  fd69				   CM
   2432  fd69		       a5		      .byte.b	#%10100101	;
   2433  fd6a		       a5		      .byte.b	#%10100101	; 
   2434  fd6b		       a5		      .byte.b	#%10100101	; 
   2435  fd6c		       e7		      .byte.b	#%11100111	; 
   2436  fd6d		       a5		      .byte.b	#%10100101	;
   2437  fd6e
   2438  fd6e				   CN
   2439  fd6e		       a5		      .byte.b	#%10100101	;
   2440  fd6f		       a5		      .byte.b	#%10100101	; 
   2441  fd70		       a5		      .byte.b	#%10100101	; 
   2442  fd71		       a5		      .byte.b	#%10100101	; 
   2443  fd72		       66		      .byte.b	#%01100110	;	
   2444  fd73
   2445  fd73
   2446  fd73				   CO
   2447  fd73		       42		      .byte.b	#%01000010	;
   2448  fd74		       a5		      .byte.b	#%10100101	; 
   2449  fd75		       a5		      .byte.b	#%10100101	; 
   2450  fd76		       a5		      .byte.b	#%10100101	; 
   2451  fd77		       42		      .byte.b	#%01000010	;	
   2452  fd78
   2453  fd78				   CP
   2454  fd78		       24		      .byte.b	#%00100100	;
   2455  fd79		       24		      .byte.b	#%00100100	; 
   2456  fd7a		       e7		      .byte.b	#%11100111	; 
   2457  fd7b		       a5		      .byte.b	#%10100101	; 
   2458  fd7c		       e7		      .byte.b	#%11100111	;
   2459  fd7d
   2460  fd7d				   CR
   2461  fd7d		       a5		      .byte.b	#%10100101	;
   2462  fd7e		       a5		      .byte.b	#%10100101	; 
   2463  fd7f		       66		      .byte.b	#%01100110	; 
   2464  fd80		       a5		      .byte.b	#%10100101	; 
   2465  fd81		       66		      .byte.b	#%01100110	;
   2466  fd82
   2467  fd82				   CS
   2468  fd82		       66		      .byte.b	#%01100110	;
   2469  fd83		       81		      .byte.b	#%10000001	; 
   2470  fd84		       42		      .byte.b	#%01000010	; 
   2471  fd85		       24		      .byte.b	#%00100100	; 
   2472  fd86		       c3		      .byte.b	#%11000011	;
   2473  fd87
   2474  fd87				   CT
   2475  fd87		       42		      .byte.b	#%01000010	;
   2476  fd88		       42		      .byte.b	#%01000010	; 
   2477  fd89		       42		      .byte.b	#%01000010	; 
   2478  fd8a		       42		      .byte.b	#%01000010	; 
   2479  fd8b		       e7		      .byte.b	#%11100111	;
   2480  fd8c
   2481  fd8c				   CV
   2482  fd8c		       42		      .byte.b	#%01000010	;
   2483  fd8d		       a5		      .byte.b	#%10100101	; 
   2484  fd8e		       a5		      .byte.b	#%10100101	; 
   2485  fd8f		       a5		      .byte.b	#%10100101	; 
   2486  fd90		       a5		      .byte.b	#%10100101	;	
   2487  fd91
   2488  fd91				   CY
   2489  fd91		       42		      .byte.b	#%01000010	;
   2490  fd92		       42		      .byte.b	#%01000010	; 
   2491  fd93		       42		      .byte.b	#%01000010	; 
   2492  fd94		       a5		      .byte.b	#%10100101	; 
   2493  fd95		       a5		      .byte.b	#%10100101	;
   2494  fd96
   2495  fd96				   CW
   2496  fd96		       a5		      .byte.b	#%10100101	;
   2497  fd97		       e7		      .byte.b	#%11100111	; 
   2498  fd98		       a5		      .byte.b	#%10100101	; 
   2499  fd99		       a5		      .byte.b	#%10100101	; 
   2500  fd9a		       a5		      .byte.b	#%10100101	;
   2501  fd9b
   2502  fd9b				   CZ
   2503  fd9b		       e7		      .byte.b	#%11100111	;
   2504  fd9c		       24		      .byte.b	#%00100100	; 
   2505  fd9d		       42		      .byte.b	#%01000010	; 
   2506  fd9e		       81		      .byte.b	#%10000001	; 
   2507  fd9f		       e7		      .byte.b	#%11100111	;
   2508  fda0
   2509  fda0				   Pipe
   2510  fda0		       42		      .byte.b	#%01000010	;
   2511  fda1		       00		      .byte.b	#%00000000	; 
   2512  fda2		       42		      .byte.b	#%01000010	; 
   2513  fda3		       00		      .byte.b	#%00000000	; 
   2514  fda4		       42		      .byte.b	#%01000010	;
   2515  fda5
   2516  fda5				   Exclamation
   2517  fda5		       42		      .byte.b	#%01000010	;
   2518  fda6		       00		      .byte.b	#%00000000	; 
   2519  fda7		       42		      .byte.b	#%01000010	; 
   2520  fda8		       42		      .byte.b	#%01000010	; 
   2521  fda9		       42		      .byte.b	#%01000010	;
   2522  fdaa
   2523  fdaa				   Dot
   2524  fdaa		       42		      .byte.b	#%01000010	;
   2525  fdab		       42		      .byte.b	#%01000010	; 
   2526  fdac		       00		      .byte.b	#%00000000	; 
   2527  fdad		       00		      .byte.b	#%00000000	; 
   2528  fdae		       00		      .byte.b	#%00000000	;
   2529  fdaf
   2530  fdaf				   Colon
   2531  fdaf		       42		      .byte.b	#%01000010	;
   2532  fdb0		       42		      .byte.b	#%01000010	; 
   2533  fdb1		       00		      .byte.b	#%00000000	; 
   2534  fdb2		       42		      .byte.b	#%01000010	; 
   2535  fdb3		       42		      .byte.b	#%01000010	;
   2536  fdb4
   2537  fdb4				   Triangle
   2538  fdb4		       81		      .byte.b	#%10000001	;
   2539  fdb5		       c3		      .byte.b	#%11000011	; 
   2540  fdb6		       e7		      .byte.b	#%11100111	; 
   2541  fdb7		       c3		      .byte.b	#%11000011	; 
   2542  fdb8		       81		      .byte.b	#%10000001	;
   2543  fdb9
   2544  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2545  fdb9		       00		      .byte.b	#0	;
   2546  fdba		       00		      .byte.b	#0	;
   2547  fdbb		       00		      .byte.b	#0	;
   2548  fdbc		       00		      .byte.b	#0	;
   2549  fdbd		       00		      .byte.b	#0	;
   2550  fdbe
   2551  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2552  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2553  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2554  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2555  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2556  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2557  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2558  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2559  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2560  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2561  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2562  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2563  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2564  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2565  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2566  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2567  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2568  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2569  fdcf
   2570  fdcf				   EngineSoundType
   2571  fdcf		       02		      .byte.b	#2
   2572  fdd0		       02		      .byte.b	#2
   2573  fdd1		       0e		      .byte.b	#14
   2574  fdd2		       06		      .byte.b	#6
   2575  fdd3		       06		      .byte.b	#6
   2576  fdd4		       0e		      .byte.b	#14
   2577  fdd5
   2578  fdd5				   EngineBaseFrequence
   2579  fdd5		       1f		      .byte.b	#31
   2580  fdd6		       15		      .byte.b	#21
   2581  fdd7		       14		      .byte.b	#20
   2582  fdd8		       1f		      .byte.b	#31
   2583  fdd9		       16		      .byte.b	#22
   2584  fdda		       03		      .byte.b	#3
   2585  fddb
   2586  fddb				   TachometerSizeLookup1
   2587  fddb		       1f		      .byte.b	#%00011111
   2588  fddc		       3f		      .byte.b	#%00111111
   2589  fddd		       7f		      .byte.b	#%01111111
   2590  fdde		       ff		      .byte.b	#%11111111
   2591  fddf		       ff		      .byte.b	#%11111111
   2592  fde0		       ff		      .byte.b	#%11111111
   2593  fde1		       ff		      .byte.b	#%11111111
   2594  fde2		       ff		      .byte.b	#%11111111
   2595  fde3
   2596  fde3				   TachometerSizeLookup2
   2597  fde3		       00		      .byte.b	#%00000000
   2598  fde4		       00		      .byte.b	#%00000000
   2599  fde5		       00		      .byte.b	#%00000000
   2600  fde6		       00		      .byte.b	#%00000000
   2601  fde7		       80		      .byte.b	#%10000000
   2602  fde8		       c0		      .byte.b	#%11000000
   2603  fde9		       e0		      .byte.b	#%11100000
   2604  fdea		       f0		      .byte.b	#%11110000
   2605  fdeb
   2606  fdeb				   TachometerGearLookup
   2607  fdeb		       01		      .byte.b	#%00000001
   2608  fdec		       02		      .byte.b	#%00000010
   2609  fded		       04		      .byte.b	#%00000100
   2610  fdee		       08		      .byte.b	#%00001000
   2611  fdef		       10		      .byte.b	#%00010000
   2612  fdf0		       30		      .byte.b	#%00110000
   2613  fdf1
   2614  fe00					      org	$FE00
   2615  fe00				   AesTable
   2616  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2617  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2618  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2619  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2620  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2621  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2622  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2623  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2624  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2625  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2626  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2627  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2628  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2629  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2630  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2631  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2632  ff00
   2633  ff00							; From FF00 to FFFB (122 bytes) to use here
   2634  ff00
   2635  ff00				   StaticText		; All static text must be on the same MSB block. 
   2636  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2637  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2638  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2639  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2640  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2641  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2642  ff05
   2643  ff05				   HellwayLeftText
   2644  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2645  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2646  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2647  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2648  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2649  ff0a
   2650  ff0a				   HellwayRightText
   2651  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2652  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2653  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2654  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2655  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2656  ff0f
   2657  ff0f				   OpbText
   2658  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2659  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2660  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2661  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2662  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2663  ff14
   2664  ff14				   YearText
   2665  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2666  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2667  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2668  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2669  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2670  ff19
   2671  ff19				   GameText
   2672  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2673  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2674  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2675  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2676  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2677  ff1e
   2678  ff1e				   OverText
   2679  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2680  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2681  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2682  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2683  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2684  ff23				   GoText
   2685  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2686  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2687  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2688  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2689  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2690  ff28
   2691  ff28				   ZeldaTextLeft
   2692  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2693  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2694  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2695  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2696  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2697  ff2d
   2698  ff2d				   ZeldaTextRight
   2699  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2700  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2701  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2702  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2703  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2704  ff32
   2705  ff32				   ZeldaDateLeft
   2706  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2707  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2708  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2709  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2710  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2711  ff37
   2712  ff37				   ZeldaDateRight
   2713  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2714  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2715  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2716  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2717  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2718  ff3c
   2719  ff3c				   PolvinhosTextLeft
   2720  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2721  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2722  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2723  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2724  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2725  ff41
   2726  ff41				   PolvinhosTextRight
   2727  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2728  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2729  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2730  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2731  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2732  ff46
   2733  ff46				   PolvinhosDateLeft
   2734  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2735  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2736  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2737  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2738  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2739  ff4b
   2740  ff4b				   PolvinhosDateRight
   2741  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2742  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2743  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2744  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2745  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2746  ff50
   2747  ff50				   IvonneTextLeft
   2748  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2749  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2750  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2751  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2752  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2753  ff55
   2754  ff55				   IvonneTextRight
   2755  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2756  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2757  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2758  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2759  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2760  ff5a
   2761  ff5a				   IvonneDateLeft
   2762  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2763  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2764  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2765  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2766  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2767  ff5f
   2768  ff5f				   IvonneDateRight
   2769  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2770  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2771  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2772  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2773  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2774  ff64
   2775  ff64				   PaperArtTextLeft
   2776  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2777  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2778  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2779  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2780  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2781  ff69
   2782  ff69				   PaperArtTextRight
   2783  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2784  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2785  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2786  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2787  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2788  ff6e
   2789  ff6e				   LeonardoTextLeft
   2790  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2791  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2792  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2793  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2794  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2795  ff73
   2796  ff73				   LeonardoTextRight
   2797  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2798  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2799  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2800  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2801  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2802  ff78
   2803  ff78				   VersionText
   2804  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2805  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2806  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2807  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2808  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2809  ff7d
   2810  ff7d
   2811  ff7d				   EndStaticText
   2812  ff7d
   2813  ff7d				   CarSprite0		; Upside down, Original Car
   2814  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2815  ff85				   CarSprite0NoPadding
   2816  ff85		       7e		      .byte.b	#%01111110
   2817  ff86		       24		      .byte.b	#%00100100
   2818  ff87		       bd		      .byte.b	#%10111101
   2819  ff88		       3c		      .byte.b	#%00111100
   2820  ff89		       bd		      .byte.b	#%10111101
   2821  ff8a		       3c		      .byte.b	#%00111100
   2822  ff8b
   2823  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2824  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2825  ff93				   CarSprite1NoPadding
   2826  ff93		       bd		      .byte.b	#%10111101
   2827  ff94		       7e		      .byte.b	#%01111110
   2828  ff95		       5a		      .byte.b	#%01011010
   2829  ff96		       66		      .byte.b	#%01100110
   2830  ff97		       bd		      .byte.b	#%10111101
   2831  ff98		       3c		      .byte.b	#%00111100
   2832  ff99
   2833  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2834  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2835  ffa1				   CarSprite2NoPadding
   2836  ffa1		       7e		      .byte.b	#%01111110
   2837  ffa2		       a5		      .byte.b	#%10100101
   2838  ffa3		       42		      .byte.b	#%01000010
   2839  ffa4		       42		      .byte.b	#%01000010
   2840  ffa5		       bd		      .byte.b	#%10111101
   2841  ffa6		       7e		      .byte.b	#%01111110
   2842  ffa7
   2843  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2844  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2845  ffaf				   CarSprite3NoPadding
   2846  ffaf		       3c		      .byte.b	#%00111100
   2847  ffb0		       db		      .byte.b	#%11011011
   2848  ffb1		       db		      .byte.b	#%11011011
   2849  ffb2		       3c		      .byte.b	#%00111100
   2850  ffb3		       5a		      .byte.b	#%01011010
   2851  ffb4		       3c		      .byte.b	#%00111100
   2852  ffb5
   2853  ffb5				   TrafficSpeeds
   2854  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2855  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2856  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2857  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2858  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2859  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2860  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2861  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2862  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2863  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2864  ffbf				   TrafficSpeedsHighDelta
   2865  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2866  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2867  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2868  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2869  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2870  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2871  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2872  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2873  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2874  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2875  ffc9
   2876  ffc9				   CarIdToSpriteAddressL
   2877  ffc9		       7d		      .byte.b	#<CarSprite0
   2878  ffca		       8b		      .byte.b	#<CarSprite1
   2879  ffcb		       99		      .byte.b	#<CarSprite2
   2880  ffcc		       a7		      .byte.b	#<CarSprite3
   2881  ffcd
   2882  ffcd				   CarIdToSpriteAddressH
   2883  ffcd		       ff		      .byte.b	#>CarSprite0
   2884  ffce		       ff		      .byte.b	#>CarSprite1
   2885  ffcf		       ff		      .byte.b	#>CarSprite2
   2886  ffd0		       ff		      .byte.b	#>CarSprite3
   2887  ffd1
   2888  ffd1				   EnemyCarIdToSpriteAddressL
   2889  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2890  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2891  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2892  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2893  ffd5
   2894  ffd5				   EnemyCarIdToSpriteAddressH
   2895  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2896  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2897  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2898  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2899  ffd9
   2900  ffd9				   CarIdToAccelerateSpeed
   2901  ffd9		       80		      .byte.b	#128
   2902  ffda		       c0		      .byte.b	#192
   2903  ffdb		       60		      .byte.b	#96
   2904  ffdc		       c0		      .byte.b	#192
   2905  ffdd
   2906  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2907  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2908  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2909  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2910  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2911  ffe1
   2912  ffe1				   CarIdToMaxSpeedL
   2913  ffe1		       80		      .byte.b	#$80
   2914  ffe2		       00		      .byte.b	#$00	; One less gear
   2915  ffe3		       80		      .byte.b	#$80
   2916  ffe4		       80		      .byte.b	#$80
   2917  ffe5
   2918  ffe5				   CarIdToMaxGear
   2919  ffe5		       05		      .byte.b	#5
   2920  ffe6		       04		      .byte.b	#4	; One less gear
   2921  ffe7		       05		      .byte.b	#5
   2922  ffe8		       05		      .byte.b	#5
   2923  ffe9
   2924  ffe9				   GearToBreakSpeedTable
   2925  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2926  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2927  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2928  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2929  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2930  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2931  ffef
   2932  ffef				   TrafficColorTable
   2933  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2934  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2935  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2936  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2937  fff3
   2938  fff3				   TrafficChanceTable
   2939  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2940  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2941  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2942  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2943  fff7
   2944  fff7				   TrafficTimeTable
   2945  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2946  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2947  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2948  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2949  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2950  fffc
   2951  fffc
   2952  fffc					      org	$FFFC
   2953  fffc		       00 f0		      .word.w	BeforeStart
   2954  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
