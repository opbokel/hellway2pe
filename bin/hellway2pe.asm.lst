------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 08	   ENGINE_VOLUME =	8
    104  f000
    105  f000		       00 08	   CAR_SIZE   =	8
    106  f000
    107  f000		       00 80	   GRP0Cache  =	$80
    108  f000		       00 81	   PF0Cache   =	$81
    109  f000		       00 82	   PF1Cache   =	$82
    110  f000		       00 83	   PF2Cache   =	$83
    111  f000		       00 84	   GRP1Cache  =	$84
    112  f000		       00 85	   ENABLCache =	$85
    113  f000		       00 86	   ENAM0Cache =	$86
    114  f000		       00 87	   ENAM1Cache =	$87
    115  f000
    116  f000		       00 8c	   FrameCount0 =	$8C	;
    117  f000		       00 8d	   FrameCount1 =	$8D	;
    118  f000
    119  f000		       00 8e	   CollisionCounter =	$8E
    120  f000		       00 8f	   OpCollisionCounter =	$8F
    121  f000
    122  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    123  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    124  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    125  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    126  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    127  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    128  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    129  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    130  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    131  f000
    132  f000							;Temporary variables, multiple uses
    133  f000		       00 b0	   Tmp0       =	$B0
    134  f000		       00 b1	   Tmp1       =	$B1
    135  f000		       00 b2	   Tmp2       =	$B2
    136  f000		       00 b3	   Tmp3       =	$B3
    137  f000		       00 b4	   Tmp4       =	$B4
    138  f000		       00 b5	   Tmp5       =	$B5
    139  f000
    140  f000		       00 b6	   Player0X   =	$B6
    141  f000		       00 b7	   Player1X   =	$B7
    142  f000		       00 b8	   CountdownTimer =	$B8
    143  f000		       00 b9	   OpCountdownTimer =	$B9
    144  f000		       00 ba	   Traffic0Msb =	$BA
    145  f000		       00 bb	   OpTraffic0Msb =	$BB
    146  f000		       00 bc	   SwitchDebounceCounter =	$BC
    147  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    148  f000		       00 be	   TrafficChance =	$BE
    149  f000		       00 bf	   OpTrafficChance =	$BF
    150  f000
    151  f000		       00 c0	   CheckpointTime =	$C0
    152  f000		       00 c1	   OpCheckpointTime =	$C1
    153  f000		       00 c2	   TrafficColor =	$C2
    154  f000		       00 c3	   OpTrafficColor =	$C3
    155  f000		       00 c4	   CurrentDifficulty =	$C4
    156  f000		       00 c5	   OpCurrentDifficulty =	$C5
    157  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    158  f000
    159  f000		       00 c7	   CurrentCarId =	$C7
    160  f000		       00 c8	   OpCurrentCarId =	$C8
    161  f000
    162  f000		       00 c9	   ScoreFontColor =	$C9
    163  f000		       00 ca	   OpScoreFontColor =	$CA
    164  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    165  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    166  f000		       00 cd	   NextCheckpoint =	$CD
    167  f000		       00 ce	   OpNextCheckpoint =	$CE
    168  f000		       00 cf	   OpponentLine =	$CF
    169  f000
    170  f000		       00 d0	   ScoreD0    =	$D0
    171  f000		       00 d1	   ScoreD1    =	$D1
    172  f000		       00 d2	   ScoreD2    =	$D2
    173  f000		       00 d3	   ScoreD3    =	$D3
    174  f000		       00 d4	   ScoreD4    =	$D4
    175  f000
    176  f000		       00 d5	   Gear       =	$D5
    177  f000		       00 d6	   OpGear     =	$D6
    178  f000
    179  f000		       00 d7	   CarSpritePointerL =	$D7
    180  f000		       00 d8	   CarSpritePointerH =	$D8
    181  f000
    182  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    183  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    184  f000
    185  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    186  f000
    187  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    188  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    189  f000
    190  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    191  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    192  f000
    193  f000		       00 f0	   Player0SpeedL =	$F0
    194  f000		       00 f1	   Player1SpeedL =	$F1
    195  f000		       00 f2	   Player0SpeedH =	$F2
    196  f000		       00 f3	   Player1SpeedH =	$F3
    197  f000
    198  f000		       00 f4	   IsOpponentInFront =	$F4	; Bit 7 tells if negative or positive.
    199  f000
    200  f000							;generic start up stuff, put zero in almost all...
    201  f000				   BeforeStart		;All variables that are kept on game reset or select
    202  f000		       a0 00		      LDY	#0
    203  f002		       84 bc		      STY	SwitchDebounceCounter
    204  f004		       84 c4		      STY	CurrentDifficulty
    205  f006		       84 c5		      STY	OpCurrentDifficulty
    206  f008		       84 bd		      STY	GameStatus
    207  f00a		       84 c7		      STY	CurrentCarId
    208  f00c		       84 c8		      STY	OpCurrentCarId
    209  f00e		       a0 10		      LDY	#16
    210  f010		       84 c6		      STY	GameMode
    211  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    212  f014
    213  f014				   Start
    214  f014		       a9 02		      LDA	#2
    215  f016		       85 00		      STA	VSYNC
    216  f018		       85 02		      STA	WSYNC
    217  f01a		       85 02		      STA	WSYNC
    218  f01c		       85 02		      STA	WSYNC
    219  f01e		       a9 00		      LDA	#0	;2
    220  f020		       85 00		      STA	VSYNC	;3
    221  f022
    222  f022		       78		      SEI
    223  f023		       d8		      CLD
    224  f024		       a2 ff		      LDX	#$FF
    225  f026		       9a		      TXS
    226  f027
    227  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    228  f029				   CleanMem
    229  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    230  f02b		       f0 1a		      BEQ	SkipClean
    231  f02d		       e0 c6		      CPX	#GameMode
    232  f02f		       f0 16		      BEQ	SkipClean
    233  f031		       e0 c7		      CPX	#CurrentCarId
    234  f033		       f0 12		      BEQ	SkipClean
    235  f035		       e0 c8		      CPX	#OpCurrentCarId
    236  f037		       f0 0e		      BEQ	SkipClean
    237  f039		       e0 c4		      CPX	#CurrentDifficulty
    238  f03b		       f0 0a		      BEQ	SkipClean
    239  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    240  f03f		       f0 06		      BEQ	SkipClean
    241  f041		       e0 bd		      CPX	#GameStatus
    242  f043		       f0 02		      BEQ	SkipClean
    243  f045		       95 00		      STA	0,X
    244  f047				   SkipClean
    245  f047		       e8		      INX
    246  f048		       d0 df		      BNE	CleanMem
    247  f04a
    248  f04a		       a9 d5		      LDA	#213
    249  f04c		       8d 96 02 	      STA	TIM64T	;3	
    250  f04f
    251  f04f							;Setting some variables...
    252  f04f
    253  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    254  f04f		       85 02		      STA	WSYNC	;We will set player position
    255  f051		       20 4a f7 	      JSR	DefaultOffsets
    256  f054
    257  f054		       ad 89 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    258  f057		       85 f0		      STA	Player0SpeedL
    259  f059		       85 f1		      STA	Player1SpeedL
    260  f05b
    261  f05b							;SLEEP 11;18
    262  f05b		       a2 00		      LDX	#0
    263  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    264  f060		       85 db		      STA	StartSWCHB	; For game over
    265  f062		       29 c0		      AND	#%11000000
    266  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    267  f066		       e8		      INX
    268  f067		       c9 80		      CMP	#%10000000
    269  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    270  f06b		       e8		      INX
    271  f06c		       c9 40		      CMP	#%01000000
    272  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    273  f070		       e8		      INX
    274  f071
    275  f071				   StoreCurrentDifficulty
    276  f071		       86 c4		      STX	CurrentDifficulty
    277  f073		       86 c5		      STX	OpCurrentDifficulty
    278  f075		       a2 00		      LDX	#0
    279  f077		       20 02 f7 	      JSR	ConfigureDifficulty
    280  f07a		       e8		      INX
    281  f07b		       20 02 f7 	      JSR	ConfigureDifficulty
    282  f07e
    283  f07e				   SetGameNotRunning
    284  f07e		       a9 00		      LDA	#0
    285  f080		       85 bd		      STA	GameStatus
    286  f082
    287  f082				   ConfigureTimer
    288  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    289  f084		       85 b8		      STA	CountdownTimer	;3
    290  f086		       85 b9		      STA	OpCountdownTimer	;3
    291  f088
    292  f088				   ConfigurePlayer1XPosition
    293  f088		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    294  f08a		       85 b7		      STA	Player1X	;3
    295  f08c
    296  f08c				   ConfigureOpNextCheckpoint
    297  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    298  f08e		       85 ce		      STA	OpNextCheckpoint
    299  f090
    300  f090				   HPositioning 		; Avoid sleep doing needed stuff
    301  f090		       85 02		      STA	WSYNC
    302  f092
    303  f092				   ConfigurePlayer0XPosition
    304  f092		       a9 21		      LDA	#PLAYER_0_X_START	;2
    305  f094		       85 b6		      STA	Player0X	;3
    306  f096
    307  f096				   ConfigureMissileSize
    308  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    309  f098		       85 04		      STA	NUSIZ0	;3
    310  f09a		       85 05		      STA	NUSIZ1	;3
    311  f09c
    312  f09c				   ConfigureNextCheckpoint
    313  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    314  f09e		       85 cd		      STA	NextCheckpoint
    315  f0a0
    316  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    317  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	4	;
      1  f0a2				   .CYCLES    SET	4
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2				  -	      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2				  -	      ELSE
     12  f0a2				  -	      bit	VSYNC
     13  f0a2				  -	      ENDIF
     14  f0a2				  -.CYCLES    SET	.CYCLES - 3
     15  f0a2					      ENDIF
     16  f0a2
     17  f0a2					      REPEAT	.CYCLES / 2
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     19  f0a4					      REPEND
    319  f0a4		       85 12		      STA	RESM0
      0  f0a6					      SLEEP	2	;
      1  f0a6				   .CYCLES    SET	2
      2  f0a6
      3  f0a6				  -	      IF	.CYCLES < 2
      4  f0a6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a6				  -	      ERR
      6  f0a6					      ENDIF
      7  f0a6
      8  f0a6				  -	      IF	.CYCLES & 1
      9  f0a6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a6				  -	      nop	0
     11  f0a6				  -	      ELSE
     12  f0a6				  -	      bit	VSYNC
     13  f0a6				  -	      ENDIF
     14  f0a6				  -.CYCLES    SET	.CYCLES - 3
     15  f0a6					      ENDIF
     16  f0a6
     17  f0a6					      REPEAT	.CYCLES / 2
     18  f0a6		       ea		      nop
     19  f0a7					      REPEND
    321  f0a7		       85 14		      STA	RESBL
      0  f0a9					      SLEEP	2
      1  f0a9				   .CYCLES    SET	2
      2  f0a9
      3  f0a9				  -	      IF	.CYCLES < 2
      4  f0a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a9				  -	      ERR
      6  f0a9					      ENDIF
      7  f0a9
      8  f0a9				  -	      IF	.CYCLES & 1
      9  f0a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a9				  -	      nop	0
     11  f0a9				  -	      ELSE
     12  f0a9				  -	      bit	VSYNC
     13  f0a9				  -	      ENDIF
     14  f0a9				  -.CYCLES    SET	.CYCLES - 3
     15  f0a9					      ENDIF
     16  f0a9
     17  f0a9					      REPEAT	.CYCLES / 2
     18  f0a9		       ea		      nop
     19  f0aa					      REPEND
    323  f0aa		       85 13		      STA	RESM1
      0  f0ac					      SLEEP	3
      1  f0ac				   .CYCLES    SET	3
      2  f0ac
      3  f0ac				  -	      IF	.CYCLES < 2
      4  f0ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ac				  -	      ERR
      6  f0ac					      ENDIF
      7  f0ac
      8  f0ac					      IF	.CYCLES & 1
      9  f0ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ac				  -	      nop	0
     11  f0ac					      ELSE
     12  f0ac		       24 00		      bit	VSYNC
     13  f0ae					      ENDIF
     14  f0ae				   .CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae				  -	      REPEAT	.CYCLES / 2
     18  f0ae				  -	      nop
     19  f0ae					      REPEND
    325  f0ae
    326  f0ae		       a9 e0		      LDA	#$E0
    327  f0b0		       85 24		      STA	HMBL
    328  f0b2		       85 22		      STA	HMM0
    329  f0b4		       85 23		      STA	HMM1
    330  f0b6		       85 02		      STA	WSYNC
    331  f0b8		       85 2a		      STA	HMOVE
    332  f0ba		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    333  f0bc		       85 2b		      STA	HMCLR
      0  f0be					      SLEEP	30
      1  f0be				   .CYCLES    SET	30
      2  f0be
      3  f0be				  -	      IF	.CYCLES < 2
      4  f0be				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0be				  -	      ERR
      6  f0be					      ENDIF
      7  f0be
      8  f0be				  -	      IF	.CYCLES & 1
      9  f0be				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0be				  -	      nop	0
     11  f0be				  -	      ELSE
     12  f0be				  -	      bit	VSYNC
     13  f0be				  -	      ENDIF
     14  f0be				  -.CYCLES    SET	.CYCLES - 3
     15  f0be					      ENDIF
     16  f0be
     17  f0be					      REPEAT	.CYCLES / 2
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     19  f0cd					      REPEND
    335  f0cd		       85 10		      STA	RESP0
    336  f0cf							;SLEEP 5 ; Temporarily move player 1 away.
    337  f0cf		       85 11		      STA	RESP1
    338  f0d1
    339  f0d1				   WaitResetToEnd
    340  f0d1		       ad 84 02 	      LDA	INTIM
    341  f0d4		       d0 fb		      BNE	WaitResetToEnd
    342  f0d6
    343  f0d6				   MainLoop
    344  f0d6		       a9 02		      LDA	#2
    345  f0d8		       85 00		      STA	VSYNC
    346  f0da		       85 02		      STA	WSYNC
    347  f0dc		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    348  f0de				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    349  f0de		       a9 01		      LDA	#%00000001	;3
    350  f0e0		       24 df		      BIT	TextFlickerMode	;2
    351  f0e2		       f0 05		      BEQ	TextSideFrameZero	;2
    352  f0e4		       25 8d		      AND	FrameCount1	;2
    353  f0e6		       4c eb f0 	      JMP	StoreTextSize	;3
    354  f0e9				   TextSideFrameZero
    355  f0e9		       25 8c		      AND	FrameCount0	;2
    356  f0eb				   StoreTextSize
    357  f0eb		       85 de		      STA	TextSide	;3
    358  f0ed
    359  f0ed				   PrepareMaxHMove
      0  f0ed					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0ed				   .CYCLES    SET	18
      2  f0ed
      3  f0ed				  -	      IF	.CYCLES < 2
      4  f0ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ed				  -	      ERR
      6  f0ed					      ENDIF
      7  f0ed
      8  f0ed				  -	      IF	.CYCLES & 1
      9  f0ed				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ed				  -	      nop	0
     11  f0ed				  -	      ELSE
     12  f0ed				  -	      bit	VSYNC
     13  f0ed				  -	      ENDIF
     14  f0ed				  -.CYCLES    SET	.CYCLES - 3
     15  f0ed					      ENDIF
     16  f0ed
     17  f0ed					      REPEAT	.CYCLES / 2
     18  f0ed		       ea		      nop
     17  f0ed					      REPEND
     18  f0ee		       ea		      nop
     17  f0ee					      REPEND
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     17  f0f3					      REPEND
     18  f0f4		       ea		      nop
     17  f0f4					      REPEND
     18  f0f5		       ea		      nop
     19  f0f6					      REPEND
    361  f0f6		       a9 80		      LDA	#$80
    362  f0f8		       85 24		      STA	HMBL
    363  f0fa		       85 22		      STA	HMM0
    364  f0fc		       85 23		      STA	HMM1
    365  f0fe		       85 20		      STA	HMP0
    366  f100		       85 21		      STA	HMP1
    367  f102		       85 02		      STA	WSYNC
    368  f104		       85 2a		      STA	HMOVE	; 1/10			
    369  f106
    370  f106				   ConfigVBlankTimer
    371  f106		       a5 c6		      LDA	GameMode
    372  f108		       c9 10		      CMP	#MAX_GAME_MODE
    373  f10a		       f0 05		      BEQ	SetVblankTimerQrCode
    374  f10c		       a9 29		      LDA	#VBLANK_TIMER
    375  f10e		       4c 13 f1 	      JMP	SetVblankTimer
    376  f111				   SetVblankTimerQrCode
    377  f111		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    378  f113
    379  f113				   SetVblankTimer
    380  f113		       85 02		      STA	WSYNC	;3
    381  f115		       8d 96 02 	      STA	TIM64T	;3	
    382  f118		       a9 00		      LDA	#0	;2
    383  f11a		       85 00		      STA	VSYNC	;3	
    384  f11c
    385  f11c				   RandomizeGame
    386  f11c		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    387  f11e		       d0 2d		      BNE	EndRandomizeGame
    388  f120		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    389  f122		       29 02		      AND	#%00000010
    390  f124		       f0 24		      BEQ	DeterministicGame
    391  f126		       a6 96		      LDX	TrafficOffset1 + 2
    392  f128		       bd 00 fe 	      LDA	AesTable,X
    393  f12b		       45 8c		      EOR	FrameCount0
    394  f12d		       85 96		      STA	TrafficOffset1 + 2
    395  f12f		       85 a6		      STA	OpTrafficOffset1 + 2
    396  f131		       a6 9a		      LDX	TrafficOffset2 + 2
    397  f133		       bd 00 fe 	      LDA	AesTable,X
    398  f136		       45 8c		      EOR	FrameCount0
    399  f138		       85 9a		      STA	TrafficOffset2 + 2
    400  f13a		       85 aa		      STA	OpTrafficOffset2 + 2
    401  f13c		       a6 9e		      LDX	TrafficOffset3 + 2
    402  f13e		       bd 00 fe 	      LDA	AesTable,X
    403  f141		       45 8c		      EOR	FrameCount0
    404  f143		       85 9e		      STA	TrafficOffset3 + 2
    405  f145		       85 ae		      STA	OpTrafficOffset3 + 2
    406  f147		       4c 4d f1 	      JMP	EndRandomizeGame
    407  f14a
    408  f14a				   DeterministicGame
    409  f14a		       20 4a f7 	      JSR	DefaultOffsets
    410  f14d
    411  f14d				   EndRandomizeGame
    412  f14d
    413  f14d
    414  f14d				   CountFrame
    415  f14d		       e6 8c		      INC	FrameCount0	; 5
    416  f14f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    417  f151		       e6 8d		      INC	FrameCount1	; 5 
    418  f153				   SkipIncFC1
    419  f153
    420  f153				   CallDrawQrCode
    421  f153		       a5 c6		      LDA	GameMode
    422  f155		       c9 10		      CMP	#MAX_GAME_MODE
    423  f157		       d0 03		      BNE	TestIsGameRunning
    424  f159		       4c ab fa 	      JMP	DrawQrCode
    425  f15c
    426  f15c							;Does not update the game if not running
    427  f15c				   TestIsGameRunning
    428  f15c		       a5 bd		      LDA	GameStatus	;3
    429  f15e		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    430  f160				   SelectCarWithDpadCall		; Only do it when game is stoped
    431  f160		       a2 00		      LDX	#0	; Player 0
    432  f162		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    433  f164		       85 b0		      STA	Tmp0
    434  f166		       20 4e f8 	      JSR	SelectCarWithDpad
    435  f169		       e8		      INX		; Player 1
    436  f16a		       20 4e f8 	      JSR	SelectCarWithDpad
    437  f16d
    438  f16d							; Needs to draw the opponent in the correct line even when game stoped  
    439  f16d							; Draeing is a destructive operation
    440  f16d		       20 60 f8 	      JSR	ProcessOpponentLine
    441  f170
    442  f170				   CallConfigureCarSprites
    443  f170		       20 08 f8 	      JSR	ConfigureCarSprites
    444  f173				   SkipUpdateLogicJump
    445  f173		       4c bc f1 	      JMP	SkipUpdateLogic
    446  f176				   ContinueWithGameLogic
    447  f176
    448  f176				   CallEverySecond		; Timer for now
    449  f176		       a2 00		      LDX	#0
    450  f178		       20 81 fa 	      JSR	EverySecond
    451  f17b		       e8		      INX
    452  f17c		       20 81 fa 	      JSR	EverySecond
    453  f17f
    454  f17f				   ChangeTextFlickerMode
    455  f17f		       a5 bc		      LDA	SwitchDebounceCounter
    456  f181		       d0 0d		      BNE	EndChangeTextFlickerMode
    457  f183		       ad 82 02 	      LDA	SWCHB
    458  f186		       29 02		      AND	#%00000010	;Game select
    459  f188		       d0 06		      BNE	EndChangeTextFlickerMode
    460  f18a		       e6 df		      INC	TextFlickerMode
    461  f18c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    462  f18e		       85 bc		      STA	SwitchDebounceCounter
    463  f190				   EndChangeTextFlickerMode
    464  f190
    465  f190				   CallProcessSpeed
    466  f190		       a2 00		      LDX	#0
    467  f192		       20 98 f9 	      JSR	ProcessSpeed
    468  f195
    469  f195		       e8		      INX		; Player 1
    470  f196		       20 98 f9 	      JSR	ProcessSpeed
    471  f199
    472  f199				   CallUpdateOffsets
    473  f199		       a2 00		      LDX	#0	; Player 0
    474  f19b		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    475  f19d		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    476  f19f		       a5 f0		      LDA	Player0SpeedL
    477  f1a1		       85 b4		      STA	Tmp4
    478  f1a3		       a5 f2		      LDA	Player0SpeedH
    479  f1a5		       85 b5		      STA	Tmp5
    480  f1a7		       20 45 f9 	      JSR	UpdateOffsets
    481  f1aa
    482  f1aa							;LDX Exits the call with correct value.
    483  f1aa		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    484  f1ac		       85 b3		      STA	Tmp3
    485  f1ae		       a5 f1		      LDA	Player1SpeedL
    486  f1b0		       85 b4		      STA	Tmp4
    487  f1b2		       a5 f3		      LDA	Player1SpeedH
    488  f1b4		       85 b5		      STA	Tmp5
    489  f1b6		       20 45 f9 	      JSR	UpdateOffsets
    490  f1b9
    491  f1b9				   CallProcessOpponentLine
    492  f1b9		       20 60 f8 	      JSR	ProcessOpponentLine
    493  f1bc
    494  f1bc				   SkipUpdateLogic		; Continue here if not paused
    495  f1bc
    496  f1bc				   CallStatusUpdateSbr
    497  f1bc		       a2 00		      LDX	#0
    498  f1be		       20 8e fa 	      JSR	CalculateGear
    499  f1c1		       20 9b fa 	      JSR	ProcessScoreFontColor
    500  f1c4		       e8		      INX
    501  f1c5		       20 8e fa 	      JSR	CalculateGear
    502  f1c8		       20 9b fa 	      JSR	ProcessScoreFontColor
    503  f1cb
    504  f1cb				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    505  f1cb		       a5 8c		      LDA	FrameCount0
    506  f1cd		       29 01		      AND	#%00000001
    507  f1cf		       d0 0c		      BNE	CallProcessPlayer1Status
    508  f1d1				   CallProcessPlayer0Status
    509  f1d1		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    510  f1d3		       85 b0		      STA	Tmp0
    511  f1d5		       a2 00		      LDX	#0
    512  f1d7		       20 3b fa 	      JSR	ProcessPlayerStatus
    513  f1da		       4c e6 f1 	      JMP	EndCallProcessPlayerStatus
    514  f1dd				   CallProcessPlayer1Status
    515  f1dd		       a5 a2		      LDA	OpTrafficOffset0 + 2
    516  f1df		       85 b0		      STA	Tmp0
    517  f1e1		       a2 01		      LDX	#1
    518  f1e3		       20 3b fa 	      JSR	ProcessPlayerStatus
    519  f1e6				   EndCallProcessPlayerStatus
    520  f1e6
    521  f1e6				   CallProcessPlayerSprites
    522  f1e6		       20 08 f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    523  f1e9
    524  f1e9				   CallProcessSound		; We might save cycles by updating one channel per frame.
    525  f1e9		       a2 00		      LDX	#0
    526  f1eb		       a5 92		      LDA	TrafficOffset0 + 2
    527  f1ed		       85 b1		      STA	Tmp1
    528  f1ef		       20 19 f6 	      JSR	ProcessSound
    529  f1f2		       e8		      INX		; Player 1
    530  f1f3		       a5 a2		      LDA	OpTrafficOffset0 + 2
    531  f1f5		       85 b1		      STA	Tmp1
    532  f1f7		       20 19 f6 	      JSR	ProcessSound
    533  f1fa
    534  f1fa							;Could be done during on vblank to save this comparisson time (before draw score), 
    535  f1fa							;but I am saving vblank cycles for now, in case of 2 players.
    536  f1fa				   ChooseTextSide		; 
    537  f1fa		       a5 de		      LDA	TextSide	;3
    538  f1fc		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    539  f1fe		       4c b4 f2 	      JMP	RightScoreWrite
    540  f201
    541  f201				   LeftScoreWrite
    542  f201		       a5 c9		      LDA	ScoreFontColor
    543  f203		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    544  f205		       f0 77		      BEQ	PrintCheckpoint
    545  f207		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    546  f209		       f0 7b		      BEQ	PrintStartGame
    547  f20b		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    548  f20d		       f0 3a		      BEQ	ProcessPlayer0OverText
    549  f20f		       a5 bd		      LDA	GameStatus
    550  f211		       f0 7b		      BEQ	PrintHellwayLeft
    551  f213
    552  f213				   Digit0Timer
    553  f213		       a5 b8		      LDA	CountdownTimer	;3
    554  f215		       85 b0		      STA	Tmp0
    555  f217		       20 3a f8 	      JSR	BINBCD8
    556  f21a							; LDA Tmp1 Also returned in A
    557  f21a		       29 0f		      AND	#%00001111	;2
    558  f21c		       aa		      TAX		; 2
    559  f21d		       bd 6c fc 	      LDA	FontLookup,X	;4 
    560  f220		       85 d1		      STA	ScoreD1	;3
    561  f222
    562  f222				   Digit1Timer
    563  f222		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    564  f224		       4a		      LSR		; 2
    565  f225		       4a		      LSR		; 2
    566  f226		       4a		      LSR		; 2
    567  f227		       4a		      LSR		; 2
    568  f228		       aa		      TAX		; 2
    569  f229		       bd 6c fc 	      LDA	FontLookup,X	;4
    570  f22c		       85 d0		      STA	ScoreD0	;3
    571  f22e
    572  f22e				   SpeedBar
    573  f22e		       a5 f0		      LDA	Player0SpeedL
    574  f230		       29 e0		      AND	#%11100000	;2 Discard the last bits
    575  f232		       18		      CLC
    576  f233		       2a		      ROL		;First goes into carry
    577  f234		       2a		      ROL
    578  f235		       2a		      ROL
    579  f236		       2a		      ROL
    580  f237		       85 b0		      STA	Tmp0
    581  f239		       a5 f2		      LDA	Player0SpeedH
    582  f23b		       0a		      ASL
    583  f23c		       0a		      ASL
    584  f23d		       0a		      ASL
    585  f23e		       05 b0		      ORA	Tmp0
    586  f240		       aa		      TAX		; 2
    587  f241		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    588  f244		       85 d2		      STA	ScoreD2	;3
    589  f246		       4c 57 f2 	      JMP	DistanceCheckpointCount
    590  f249
    591  f249				   ProcessPlayer0OverText
    592  f249		       a5 f4		      LDA	IsOpponentInFront
    593  f24b		       30 05		      BMI	PrintPlayer0Lose
    594  f24d				   PrintPlayer0Win
    595  f24d		       a2 21		      LDX	#<WinText
    596  f24f		       4c 54 f2 	      JMP	PrintPlayer0Status
    597  f252				   PrintPlayer0Lose
    598  f252		       a2 24		      LDX	#<LoseText
    599  f254				   PrintPlayer0Status
    600  f254		       20 5f f7 	      JSR	PrintStaticText
    601  f257
    602  f257				   DistanceCheckpointCount		; Will run all letters in the future
    603  f257		       a5 ba		      LDA	Traffic0Msb
    604  f259		       29 01		      AND	#%00000001
    605  f25b		       0a		      ASL
    606  f25c		       0a		      ASL
    607  f25d		       0a		      ASL
    608  f25e		       0a		      ASL
    609  f25f		       85 b0		      STA	Tmp0
    610  f261		       a5 92		      LDA	TrafficOffset0 + 2	;3
    611  f263		       29 f0		      AND	#%11110000	;2
    612  f265		       4a		      LSR
    613  f266		       4a		      LSR
    614  f267		       4a		      LSR
    615  f268		       4a		      LSR
    616  f269		       05 b0		      ORA	Tmp0
    617  f26b		       aa		      TAX		; 2
    618  f26c		       bd 6c fc 	      LDA	FontLookup,X	;4 
    619  f26f		       85 d3		      STA	ScoreD3	;3
    620  f271
    621  f271				   DistanceBar		; 16 subdivisions per checkpoint
    622  f271		       a5 92		      LDA	TrafficOffset0 + 2	;3
    623  f273		       29 0f		      AND	#%00001111	;2
    624  f275		       aa		      TAX		; 2
    625  f276		       bd 8c fc 	      LDA	BarLookup,X	;4 
    626  f279		       85 d4		      STA	ScoreD4	;3
    627  f27b
    628  f27b				   EndDrawDistance
    629  f27b		       4c 50 f3 	      JMP	RightScoreWriteEnd	;3
    630  f27e
    631  f27e				   PrintCheckpoint
    632  f27e		       a2 00		      LDX	#<CheckpointText
    633  f280		       20 5f f7 	      JSR	PrintStaticText
    634  f283		       4c 50 f3 	      JMP	RightScoreWriteEnd	;3
    635  f286				   PrintStartGame
    636  f286		       a2 17		      LDX	#<GoText
    637  f288		       20 5f f7 	      JSR	PrintStaticText
    638  f28b		       4c 50 f3 	      JMP	RightScoreWriteEnd	;3
    639  f28e
    640  f28e				   PrintHellwayLeft
    641  f28e		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    642  f290		       30 08		      BMI	ContinueWithDefaultLeftText
    643  f292				   Player0IsReady
    644  f292		       a2 1c		      LDX	#<ReadyText
    645  f294		       20 5f f7 	      JSR	PrintStaticText
    646  f297		       4c 50 f3 	      JMP	RightScoreWriteEnd	;3
    647  f29a				   ContinueWithDefaultLeftText
    648  f29a		       a5 8d		      LDA	FrameCount1
    649  f29c		       29 01		      AND	#1
    650  f29e		       d0 05		      BNE	PrintCreditsLeft
    651  f2a0		       a2 04		      LDX	#<HellwayLeftText - 1	; Padding
    652  f2a2		       4c a7 f2 	      JMP	PrintGameMode
    653  f2a5				   PrintCreditsLeft
    654  f2a5		       a2 0d		      LDX	#<OpbText - 1	; Padding
    655  f2a7
    656  f2a7				   PrintGameMode
    657  f2a7		       20 5f f7 	      JSR	PrintStaticText
    658  f2aa		       a6 c6		      LDX	GameMode
    659  f2ac		       bd 6c fc 	      LDA	FontLookup,X	;4 
    660  f2af		       85 d0		      STA	ScoreD0	;3
    661  f2b1		       4c 50 f3 	      JMP	RightScoreWriteEnd	;3
    662  f2b4
    663  f2b4				   RightScoreWrite
    664  f2b4		       a5 bd		      LDA	GameStatus
    665  f2b6		       f0 79		      BEQ	PrintHellwayRight
    666  f2b8		       a5 ca		      LDA	OpScoreFontColor
    667  f2ba		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    668  f2bc		       f0 c0		      BEQ	PrintCheckpoint
    669  f2be		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    670  f2c0		       f0 c4		      BEQ	PrintStartGame
    671  f2c2		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    672  f2c4		       f0 36		      BEQ	ProcessPlayer1OverText
    673  f2c6
    674  f2c6				   OpDigit0Timer
    675  f2c6		       a5 b9		      LDA	OpCountdownTimer	;3
    676  f2c8		       85 b0		      STA	Tmp0
    677  f2ca		       20 3a f8 	      JSR	BINBCD8
    678  f2cd							; LDA Tmp1 Also returned in A
    679  f2cd		       29 0f		      AND	#%00001111	;2
    680  f2cf		       aa		      TAX		; 2
    681  f2d0		       bd 6c fc 	      LDA	FontLookup,X	;4 
    682  f2d3		       85 d4		      STA	ScoreD4	;3
    683  f2d5
    684  f2d5				   OpDigit1Timer
    685  f2d5		       a5 b1		      LDA	Tmp1	;3
    686  f2d7		       4a		      LSR		; 2
    687  f2d8		       4a		      LSR		; 2
    688  f2d9		       4a		      LSR		; 2
    689  f2da		       4a		      LSR		; 2
    690  f2db		       aa		      TAX		; 2
    691  f2dc		       bd 6c fc 	      LDA	FontLookup,X	;4
    692  f2df		       85 d3		      STA	ScoreD3	;3
    693  f2e1
    694  f2e1				   OpSpeedBar
    695  f2e1		       a5 f1		      LDA	Player1SpeedL
    696  f2e3		       29 e0		      AND	#%11100000	;2 Discard the last bits
    697  f2e5		       18		      CLC
    698  f2e6		       2a		      ROL		;First goes into carry
    699  f2e7		       2a		      ROL
    700  f2e8		       2a		      ROL
    701  f2e9		       2a		      ROL
    702  f2ea		       85 b0		      STA	Tmp0
    703  f2ec		       a5 f3		      LDA	Player1SpeedH
    704  f2ee		       0a		      ASL
    705  f2ef		       0a		      ASL
    706  f2f0		       0a		      ASL
    707  f2f1		       05 b0		      ORA	Tmp0
    708  f2f3		       aa		      TAX		; 2
    709  f2f4		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    710  f2f7		       85 d2		      STA	ScoreD2	;3
    711  f2f9		       4c 0a f3 	      JMP	OpDistanceCheckpointCount
    712  f2fc
    713  f2fc				   ProcessPlayer1OverText
    714  f2fc		       a5 f4		      LDA	IsOpponentInFront
    715  f2fe		       30 05		      BMI	PrintPlayer1Lose
    716  f300				   PrintPlayer1Win
    717  f300		       a2 1f		      LDX	#<WinText - 2
    718  f302		       4c 0a f3 	      JMP	OpDistanceCheckpointCount
    719  f305				   PrintPlayer1Lose
    720  f305		       a2 22		      LDX	#<LoseText - 2
    721  f307				   PrintPlayer1Status
    722  f307		       20 5f f7 	      JSR	PrintStaticText
    723  f30a
    724  f30a				   OpDistanceCheckpointCount
    725  f30a		       a5 bb		      LDA	OpTraffic0Msb
    726  f30c		       29 01		      AND	#%00000001
    727  f30e		       0a		      ASL
    728  f30f		       0a		      ASL
    729  f310		       0a		      ASL
    730  f311		       0a		      ASL
    731  f312		       85 b0		      STA	Tmp0
    732  f314		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    733  f316		       29 f0		      AND	#%11110000	;2
    734  f318		       4a		      LSR
    735  f319		       4a		      LSR
    736  f31a		       4a		      LSR
    737  f31b		       4a		      LSR
    738  f31c		       05 b0		      ORA	Tmp0
    739  f31e		       aa		      TAX		; 2
    740  f31f		       bd 6c fc 	      LDA	FontLookup,X	;4 
    741  f322		       85 d1		      STA	ScoreD1	;3
    742  f324
    743  f324				   OpDistanceBar		; 16 subdivisions per checkpoint
    744  f324		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    745  f326		       29 0f		      AND	#%00001111	;2
    746  f328		       aa		      TAX		; 2
    747  f329		       bd 8c fc 	      LDA	BarLookup,X	;4 
    748  f32c		       85 d0		      STA	ScoreD0	;3
    749  f32e		       4c 50 f3 	      JMP	RightScoreWriteEnd
    750  f331
    751  f331				   PrintHellwayRight
    752  f331		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    753  f333		       30 08		      BMI	ContinueWithDefaultRightText
    754  f335				   Player1IsReady
    755  f335		       a2 1c		      LDX	#<ReadyText
    756  f337		       20 5f f7 	      JSR	PrintStaticText
    757  f33a		       4c 50 f3 	      JMP	RightScoreWriteEnd	;3
    758  f33d				   ContinueWithDefaultRightText
    759  f33d		       a5 8d		      LDA	FrameCount1
    760  f33f		       29 01		      AND	#1
    761  f341		       d0 05		      BNE	PrintCreditsRight
    762  f343		       a2 09		      LDX	#<HellwayRightText
    763  f345		       4c 4a f3 	      JMP	PrintRightIntro
    764  f348				   PrintCreditsRight
    765  f348		       a2 12		      LDX	#<YearText
    766  f34a				   PrintRightIntro
    767  f34a		       20 5f f7 	      JSR	PrintStaticText
    768  f34d		       4c 50 f3 	      JMP	RightScoreWriteEnd
    769  f350				   RightScoreWriteEnd
    770  f350
    771  f350
    772  f350				   ScoreBackgroundColor
    773  f350		       a2 00		      LDX	#0
    774  f352		       ad 82 02 	      LDA	SWCHB
    775  f355		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    776  f357		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    777  f359		       f0 04		      BEQ	BlackAndWhiteScoreBg
    778  f35b		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    779  f35d		       a2 03		      LDX	#BACKGROUND_COLOR
    780  f35f				   BlackAndWhiteScoreBg
    781  f35f		       85 b2		      STA	Tmp2	; Score Background
    782  f361		       86 b3		      STX	Tmp3	; Traffic Background
    783  f363
    784  f363				   ConfigurePFForScore
    785  f363							;LDA #SCORE_BACKGROUND_COLOR; Done above
    786  f363		       85 09		      STA	COLUBK
    787  f365		       20 b1 f6 	      JSR	ClearAll
    788  f368		       a9 02		      LDA	#%00000010	; Score mode
    789  f36a		       85 0a		      STA	CTRLPF
    790  f36c		       a5 de		      LDA	TextSide	;3
    791  f36e		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    792  f370				   RightScoreOn
    793  f370		       a5 ca		      LDA	OpScoreFontColor
    794  f372		       85 07		      STA	COLUP1
    795  f374		       a5 b2		      LDA	Tmp2
    796  f376		       85 06		      STA	COLUP0
    797  f378		       4c 83 f3 	      JMP	CallWaitForVblankEnd
    798  f37b				   LeftScoreOn
    799  f37b		       a5 c9		      LDA	ScoreFontColor
    800  f37d		       85 06		      STA	COLUP0
    801  f37f		       a5 b2		      LDA	Tmp2
    802  f381		       85 07		      STA	COLUP1
    803  f383
    804  f383							; After here we are going to update the screen, No more heavy code
    805  f383				   CallWaitForVblankEnd
    806  f383		       20 d9 f7 	      JSR	WaitForVblankEnd
    807  f386
    808  f386				   DrawScoreHud
    809  f386		       20 7d f7 	      JSR	PrintScore
    810  f389
    811  f389							; 4 lines to go crazy
    812  f389		       85 02		      STA	WSYNC
    813  f38b							;STA HMOVE
    814  f38b
    815  f38b		       85 02		      STA	WSYNC
    816  f38d		       85 2a		      STA	HMOVE
    817  f38f
    818  f38f				   PrepareForTraffic
    819  f38f		       20 c7 f6 	      JSR	ClearPF	; 32
    820  f392
    821  f392		       85 02		      STA	WSYNC
    822  f394		       85 2a		      STA	HMOVE
    823  f396		       85 02		      STA	WSYNC
    824  f398		       85 2a		      STA	HMOVE
    825  f39a
    826  f39a		       a9 30		      LDA	#%00110000	; 2 Score mode
    827  f39c		       85 0a		      STA	CTRLPF	;3
    828  f39e
    829  f39e		       a5 8c		      LDA	FrameCount0	;3
    830  f3a0		       29 01		      AND	#%00000001	;2
    831  f3a2		       aa		      TAX		;2
    832  f3a3		       b5 c2		      LDA	TrafficColor,X	;4
    833  f3a5		       85 08		      STA	COLUPF	;3
    834  f3a7
    835  f3a7		       a9 96		      LDA	#PLAYER1_COLOR	;2
    836  f3a9		       85 07		      STA	COLUP1	;3
    837  f3ab
    838  f3ab		       a5 c9		      LDA	ScoreFontColor	;3
    839  f3ad		       85 06		      STA	COLUP0	;3
    840  f3af
    841  f3af		       a5 ca		      LDA	OpScoreFontColor	;3
    842  f3b1		       85 07		      STA	COLUP1	;3
    843  f3b3
    844  f3b3		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    845  f3b5
      0  f3b5					      SLEEP	24	; Keep the backround color more time, only needed if still support non dark mode
      1  f3b5				   .CYCLES    SET	24
      2  f3b5
      3  f3b5				  -	      IF	.CYCLES < 2
      4  f3b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3b5				  -	      ERR
      6  f3b5					      ENDIF
      7  f3b5
      8  f3b5				  -	      IF	.CYCLES & 1
      9  f3b5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3b5				  -	      nop	0
     11  f3b5				  -	      ELSE
     12  f3b5				  -	      bit	VSYNC
     13  f3b5				  -	      ENDIF
     14  f3b5				  -.CYCLES    SET	.CYCLES - 3
     15  f3b5					      ENDIF
     16  f3b5
     17  f3b5					      REPEAT	.CYCLES / 2
     18  f3b5		       ea		      nop
     17  f3b5					      REPEND
     18  f3b6		       ea		      nop
     17  f3b6					      REPEND
     18  f3b7		       ea		      nop
     17  f3b7					      REPEND
     18  f3b8		       ea		      nop
     17  f3b8					      REPEND
     18  f3b9		       ea		      nop
     17  f3b9					      REPEND
     18  f3ba		       ea		      nop
     17  f3ba					      REPEND
     18  f3bb		       ea		      nop
     17  f3bb					      REPEND
     18  f3bc		       ea		      nop
     17  f3bc					      REPEND
     18  f3bd		       ea		      nop
     17  f3bd					      REPEND
     18  f3be		       ea		      nop
     17  f3be					      REPEND
     18  f3bf		       ea		      nop
     17  f3bf					      REPEND
     18  f3c0		       ea		      nop
     19  f3c1					      REPEND
    847  f3c1
    848  f3c1		       a6 b3		      LDX	Tmp3	; Background color.
    849  f3c3
    850  f3c3		       a5 8c		      LDA	FrameCount0	;Brach flag
    851  f3c5		       29 01		      AND	#%00000001
    852  f3c7
    853  f3c7		       86 09		      STX	COLUBK	;3
    854  f3c9		       d0 05		      BNE	OpDrawCache	;2
    855  f3cb		       4c 8a f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    856  f3ce							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    857  f3ce
    858  f3ce							;main scanline loop...
    859  f3ce				   OpScanLoop
    860  f3ce		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    861  f3d0
    862  f3d0							;Start of next line!			
    863  f3d0				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    864  f3d0
    865  f3d0		       a5 80		      LDA	GRP0Cache	;3
    866  f3d2		       85 1b		      STA	GRP0	;3
    867  f3d4
    868  f3d4		       a5 84		      LDA	GRP1Cache	;3
    869  f3d6		       85 1c		      STA	GRP1	;3
    870  f3d8
    871  f3d8		       a5 85		      LDA	ENABLCache	;3
    872  f3da		       85 1f		      STA	ENABL	;3
    873  f3dc
    874  f3dc		       a5 86		      LDA	ENAM0Cache	;3
    875  f3de		       85 1d		      STA	ENAM0	;3
    876  f3e0
    877  f3e0		       a5 87		      LDA	ENAM1Cache	;3
    878  f3e2		       85 1e		      STA	ENAM1	;3
    879  f3e4
    880  f3e4		       a5 81		      LDA	PF0Cache	;3
    881  f3e6		       85 0d		      STA	PF0	;3
    882  f3e8
    883  f3e8		       a9 00		      LDA	#0	;2
    884  f3ea							;STA PF0	     ;3
    885  f3ea		       85 80		      STA	GRP0Cache	;3
    886  f3ec		       85 86		      STA	ENAM0Cache	;3
    887  f3ee		       85 85		      STA	ENABLCache	;3
    888  f3f0		       85 87		      STA	ENAM1Cache	; 3
    889  f3f2							;STA GRP1Cache ;3
    890  f3f2		       85 0d		      STA	PF0	;3
    891  f3f4							;STA PF2	     ;3
    892  f3f4
    893  f3f4		       a5 83		      LDA	PF2Cache	;3
    894  f3f6		       85 0f		      STA	PF2	;3
    895  f3f8
    896  f3f8				   OpDrawCar0
    897  f3f8		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    898  f3fa		       b0 04		      BCS	OpSkipDrawCar	;2
    899  f3fc		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    900  f3fe		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    901  f400				   OpSkipDrawCar
    902  f400
    903  f400							;BEQ DrawTraffic3
    904  f400				   OpDrawTraffic1		; 33
    905  f400		       98		      TYA		; 2
    906  f401		       18		      CLC		; 2 
    907  f402		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    908  f404		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    909  f406		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    910  f408		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    911  f40a		       4c 0f f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
    912  f40d				   OpEorOffsetWithCarry
    913  f40d		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    914  f40f				   OpAfterEorOffsetWithCarry		;17
    915  f40f		       aa		      TAX		;2
    916  f410		       bd 00 fe 	      LDA	AesTable,X	; 4
    917  f413		       c5 bf		      CMP	OpTrafficChance	;3
    918  f415		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    919  f417		       a9 ff		      LDA	#$FF	;2
    920  f419		       85 86		      STA	ENAM0Cache	;3
    921  f41b				   OpFinishDrawTraffic1
    922  f41b
    923  f41b				   OpErasePF2
    924  f41b		       a9 00		      LDA	#0
    925  f41d		       85 0f		      STA	PF2
    926  f41f
    927  f41f				   OpDrawTraffic2		; 33
    928  f41f		       98		      TYA		; 2
    929  f420		       18		      CLC		; 2 
    930  f421		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    931  f423		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    932  f425		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    933  f427		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    934  f429		       4c 2e f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    935  f42c				   OpEorOffsetWithCarry2
    936  f42c		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    937  f42e				   OpAfterEorOffsetWithCarry2		;17
    938  f42e		       aa		      TAX		;2
    939  f42f		       bd 00 fe 	      LDA	AesTable,X	; 4
    940  f432		       c5 bf		      CMP	OpTrafficChance	;3
    941  f434		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    942  f436		       a9 02		      LDA	#%00000010	;2
    943  f438		       85 85		      STA	ENABLCache	;3
    944  f43a				   OpFinishDrawTraffic2
    945  f43a
    946  f43a							;STA WSYNC ;65 / 137
    947  f43a
    948  f43a							; LDA Tmp0 ; Flicker this line if drawing car
    949  f43a							; BEQ FinishDrawTraffic4
    950  f43a				   OpDrawTraffic3		; 33
    951  f43a		       98		      TYA		; 2
    952  f43b		       18		      CLC		; 2 
    953  f43c		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    954  f43e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    955  f440		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    956  f442		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    957  f444		       4c 49 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    958  f447				   OpEorOffsetWithCarry3
    959  f447		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    960  f449				   OpAfterEorOffsetWithCarry3		;17
    961  f449		       aa		      TAX		;2
    962  f44a		       bd 00 fe 	      LDA	AesTable,X	; 4
    963  f44d		       c5 bf		      CMP	OpTrafficChance	;3
    964  f44f		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    965  f451		       a9 02		      LDA	#%00000010	;2
    966  f453		       85 87		      STA	ENAM1Cache
    967  f455				   OpFinishDrawTraffic3
    968  f455
    969  f455				   OpDrawOponent		;26
    970  f455		       84 b0		      STY	Tmp0	;3
    971  f457		       a4 cf		      LDY	OpponentLine	;3
    972  f459		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    973  f45b		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    974  f45d				   OpDrawOpponent
    975  f45d		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    976  f45f		       85 80		      STA	GRP0Cache	;3
    977  f461		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    978  f463		       a4 b0		      LDY	Tmp0	;3
    979  f465		       4c 79 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    980  f468				   OpSkipDrawOpponent
    981  f468		       c6 cf		      DEC	OpponentLine	;5
    982  f46a		       a4 b0		      LDY	Tmp0	;3
    983  f46c
    984  f46c
    985  f46c				   OpDrawTraffic0		; 21 2pe
    986  f46c		       98		      TYA		; 2
    987  f46d		       18		      CLC		; 2 
    988  f46e		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    989  f470		       29 08		      AND	#%00001000	;2
    990  f472		       f0 05		      BEQ	OpHasNoBorderP0	;3
    991  f474				   OpHasBorderP0
    992  f474		       a9 70		      LDA	#%01110000	; 2
    993  f476		       4c 7b f4 	      JMP	OpStoreBorderP0	; 3
    994  f479				   OpHasNoBorderP0
    995  f479		       a9 00		      LDA	#0	; 2
    996  f47b				   OpStoreBorderP0
    997  f47b		       85 81		      STA	PF0Cache	; 3
    998  f47d		       85 83		      STA	PF2Cache	; 3
    999  f47f
   1000  f47f				   OpSkipDrawTraffic0
   1001  f47f
   1002  f47f				   OpWhileScanLoop
   1003  f47f		       88		      DEY		;2
   1004  f480		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1005  f482		       4c ce f3 	      JMP	OpScanLoop	;3
   1006  f485				   OpFinishScanLoop		; 7 209 of 222
   1007  f485		       4c 3d f5 	      JMP	FinishScanLoop
   1008  f488
   1009  f488							;main scanline loop...
   1010  f488				   ScanLoop
   1011  f488		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1012  f48a
   1013  f48a							;Start of next line!			
   1014  f48a				   DrawCache		;63 Is the last line going to the top of the next frame?
   1015  f48a		       a5 81		      LDA	PF0Cache	;3
   1016  f48c		       85 0d		      STA	PF0	;3
   1017  f48e
   1018  f48e		       a5 80		      LDA	GRP0Cache	;3
   1019  f490		       85 1b		      STA	GRP0	;3
   1020  f492
   1021  f492		       a5 84		      LDA	GRP1Cache	;3
   1022  f494		       85 1c		      STA	GRP1	;3
   1023  f496
   1024  f496		       a5 86		      LDA	ENAM0Cache	;3
   1025  f498		       85 1d		      STA	ENAM0	;3
   1026  f49a
   1027  f49a		       a5 85		      LDA	ENABLCache	;3
   1028  f49c		       85 1f		      STA	ENABL	;3
   1029  f49e
   1030  f49e		       a5 87		      LDA	ENAM1Cache	;3
   1031  f4a0		       85 1e		      STA	ENAM1	;3
   1032  f4a2
   1033  f4a2		       a5 83		      LDA	PF2Cache	;3
   1034  f4a4		       85 0f		      STA	PF2	;3
   1035  f4a6
   1036  f4a6		       a9 00		      LDA	#0	;2
   1037  f4a8		       85 0d		      STA	PF0	;3
   1038  f4aa		       85 84		      STA	GRP1Cache	;3
   1039  f4ac		       85 85		      STA	ENABLCache	;3
   1040  f4ae		       85 86		      STA	ENAM0Cache	;3
   1041  f4b0		       85 87		      STA	ENAM1Cache	; 3
   1042  f4b2							;STA GRP0Cache
   1043  f4b2		       85 0f		      STA	PF2	;3
   1044  f4b4
   1045  f4b4				   DrawCar0
   1046  f4b4		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1047  f4b6		       b0 04		      BCS	SkipDrawCar	;2
   1048  f4b8		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1049  f4ba		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1050  f4bc				   SkipDrawCar
   1051  f4bc
   1052  f4bc							;BEQ DrawTraffic3
   1053  f4bc				   DrawTraffic1 		; 33
   1054  f4bc		       98		      TYA		; 2
   1055  f4bd		       18		      CLC		; 2 
   1056  f4be		       65 95		      ADC	TrafficOffset1 + 1	;3
   1057  f4c0		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1058  f4c2		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1059  f4c4		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1060  f4c6		       4c cb f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1061  f4c9				   EorOffsetWithCarry
   1062  f4c9		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1063  f4cb				   AfterEorOffsetWithCarry		;17
   1064  f4cb		       aa		      TAX		;2
   1065  f4cc		       bd 00 fe 	      LDA	AesTable,X	; 4
   1066  f4cf		       c5 be		      CMP	TrafficChance	;3
   1067  f4d1		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1068  f4d3		       a9 ff		      LDA	#$FF	;2
   1069  f4d5		       85 86		      STA	ENAM0Cache	;3
   1070  f4d7				   FinishDrawTraffic1
   1071  f4d7
   1072  f4d7				   DrawTraffic2 		; 33
   1073  f4d7		       98		      TYA		; 2
   1074  f4d8		       18		      CLC		; 2 
   1075  f4d9		       65 99		      ADC	TrafficOffset2 + 1	;3
   1076  f4db		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1077  f4dd		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1078  f4df		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1079  f4e1		       4c e6 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1080  f4e4				   EorOffsetWithCarry2
   1081  f4e4		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1082  f4e6				   AfterEorOffsetWithCarry2		;17
   1083  f4e6		       aa		      TAX		;2
   1084  f4e7		       bd 00 fe 	      LDA	AesTable,X	; 4
   1085  f4ea		       c5 be		      CMP	TrafficChance	;3
   1086  f4ec		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1087  f4ee		       a9 02		      LDA	#%00000010	;2
   1088  f4f0		       85 85		      STA	ENABLCache	;3
   1089  f4f2				   FinishDrawTraffic2
   1090  f4f2
   1091  f4f2							;STA WSYNC ;65 / 137
   1092  f4f2
   1093  f4f2							; LDA Tmp0 ; Flicker this line if drawing car
   1094  f4f2							; BEQ FinishDrawTraffic4
   1095  f4f2				   DrawTraffic3 		; 33
   1096  f4f2		       98		      TYA		; 2
   1097  f4f3		       18		      CLC		; 2 
   1098  f4f4		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1099  f4f6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1100  f4f8		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1101  f4fa		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1102  f4fc		       4c 01 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1103  f4ff				   EorOffsetWithCarry3
   1104  f4ff		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1105  f501				   AfterEorOffsetWithCarry3		;17
   1106  f501		       aa		      TAX		;2
   1107  f502		       bd 00 fe 	      LDA	AesTable,X	; 4
   1108  f505		       c5 be		      CMP	TrafficChance	;3
   1109  f507		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1110  f509		       a9 02		      LDA	#%00000010	;2
   1111  f50b		       85 87		      STA	ENAM1Cache
   1112  f50d				   FinishDrawTraffic3
   1113  f50d
   1114  f50d
   1115  f50d				   DrawOponent		;26
   1116  f50d		       84 b0		      STY	Tmp0	;3
   1117  f50f		       a4 cf		      LDY	OpponentLine	;3
   1118  f511		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1119  f513		       b0 0b		      BCS	SkipDrawOpponent	;2
   1120  f515				   DrawOpponent
   1121  f515		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1122  f517		       85 84		      STA	GRP1Cache	;3
   1123  f519		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1124  f51b		       a4 b0		      LDY	Tmp0	;3
   1125  f51d		       4c 31 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1126  f520				   SkipDrawOpponent
   1127  f520		       c6 cf		      DEC	OpponentLine	;5
   1128  f522		       a4 b0		      LDY	Tmp0	;3
   1129  f524
   1130  f524				   DrawTraffic0 		; 21 2pe
   1131  f524		       98		      TYA		; 2
   1132  f525		       18		      CLC		; 2 
   1133  f526		       65 91		      ADC	TrafficOffset0 + 1	;3
   1134  f528		       29 08		      AND	#%00001000	;2
   1135  f52a		       f0 05		      BEQ	HasNoBorderP0	;3
   1136  f52c				   HasBorderP0
   1137  f52c		       a9 70		      LDA	#%01110000	; 2
   1138  f52e		       4c 33 f5 	      JMP	StoreBorderP0	; 3
   1139  f531				   HasNoBorderP0
   1140  f531		       a9 00		      LDA	#0	; 2
   1141  f533				   StoreBorderP0
   1142  f533		       85 81		      STA	PF0Cache	; 3
   1143  f535		       85 83		      STA	PF2Cache	; 3
   1144  f537
   1145  f537				   SkipDrawTraffic0
   1146  f537
   1147  f537				   WhileScanLoop
   1148  f537		       88		      DEY		;2
   1149  f538		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1150  f53a		       4c 88 f4 	      JMP	ScanLoop	;3
   1151  f53d				   FinishScanLoop		; 7 209 of 222
   1152  f53d
   1153  f53d		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1154  f53f		       20 d6 f6 	      JSR	LoadAll
   1155  f542		       85 02		      STA	WSYNC	; do stuff!
   1156  f544		       85 02		      STA	WSYNC
   1157  f546		       85 02		      STA	WSYNC
   1158  f548
   1159  f548				   PrepareOverscan
   1160  f548		       a9 02		      LDA	#2
   1161  f54a		       85 02		      STA	WSYNC
   1162  f54c							;STA HMOVE	; HMOVE 10
   1163  f54c		       85 01		      STA	VBLANK
   1164  f54e
   1165  f54e		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1166  f550		       8d 96 02 	      STA	TIM64T
   1167  f553
   1168  f553		       85 2b		      STA	HMCLR	; Before we process car movement
   1169  f555							;Read Fire Button before, will make it start the game for now.
   1170  f555				   StartGame
   1171  f555		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1172  f557		       25 0d		      AND	INPT5	;3 player 1
   1173  f559		       30 3a		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1174  f55b		       a5 8c		      LDA	FrameCount0
   1175  f55d		       29 01		      AND	#%00000001
   1176  f55f		       d0 34		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1177  f561		       a5 bd		      LDA	GameStatus	;3
   1178  f563		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1179  f565		       d0 2e		      BNE	SkipGameStart
   1180  f567		       a5 c6		      LDA	GameMode
   1181  f569		       c9 10		      CMP	#MAX_GAME_MODE
   1182  f56b		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1183  f56d		       a9 00		      LDA	#0
   1184  f56f		       85 c6		      STA	GameMode
   1185  f571		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1186  f573		       85 bc		      STA	SwitchDebounceCounter
   1187  f575		       4c 95 f5 	      JMP	SkipGameStart
   1188  f578				   SetGameRunningIfBothPressing
   1189  f578		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1190  f57a		       05 0d		      ORA	INPT5	;3 player 1
   1191  f57c		       30 17		      BMI	SkipGameStart
   1192  f57e				   SetGameRunning
   1193  f57e		       e6 bd		      INC	GameStatus
   1194  f580		       a9 00		      LDA	#0	;
   1195  f582		       85 8c		      STA	FrameCount0
   1196  f584		       85 8d		      STA	FrameCount1
   1197  f586		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1198  f588		       85 c9		      STA	ScoreFontColor
   1199  f58a		       85 ca		      STA	OpScoreFontColor
   1200  f58c		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1201  f58e		       85 cb		      STA	ScoreFontColorHoldChange
   1202  f590		       85 cc		      STA	OpScoreFontColorHoldChange
   1203  f592		       4c 09 f6 	      JMP	OverScanWait	; Do not process player movement and also start
   1204  f595				   SkipGameStart
   1205  f595
   1206  f595				   ReadSwitches
   1207  f595		       a6 bc		      LDX	SwitchDebounceCounter
   1208  f597		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1209  f599		       a9 01		      LDA	#%00000001
   1210  f59b		       2c 82 02 	      BIT	SWCHB
   1211  f59e		       d0 07		      BNE	SkipReset
   1212  f5a0		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1213  f5a2		       85 bc		      STA	SwitchDebounceCounter
   1214  f5a4		       4c 11 f6 	      JMP	OverScanWaitBeforeReset
   1215  f5a7				   SkipReset
   1216  f5a7
   1217  f5a7				   GameModeSelect
   1218  f5a7		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1219  f5a9		       d0 22		      BNE	SkipGameSelect
   1220  f5ab		       a2 00		      LDX	#0
   1221  f5ad		       20 02 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1222  f5b0		       e8		      INX
   1223  f5b1		       20 02 f7 	      JSR	ConfigureDifficulty
   1224  f5b4				   ContinueGameSelect
   1225  f5b4		       a9 02		      LDA	#%00000010
   1226  f5b6		       2c 82 02 	      BIT	SWCHB
   1227  f5b9		       d0 12		      BNE	SkipGameSelect
   1228  f5bb		       a6 c6		      LDX	GameMode
   1229  f5bd		       e0 10		      CPX	#MAX_GAME_MODE
   1230  f5bf		       f0 04		      BEQ	ResetGameMode
   1231  f5c1		       e8		      INX
   1232  f5c2		       4c c7 f5 	      JMP	StoreGameMode
   1233  f5c5				   ResetGameMode
   1234  f5c5		       a2 00		      LDX	#0
   1235  f5c7				   StoreGameMode
   1236  f5c7		       86 c6		      STX	GameMode
   1237  f5c9		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1238  f5cb		       85 bc		      STA	SwitchDebounceCounter
   1239  f5cd				   SkipGameSelect
   1240  f5cd		       4c d2 f5 	      JMP	EndReadSwitches
   1241  f5d0				   DecrementSwitchDebounceCounter
   1242  f5d0		       c6 bc		      DEC	SwitchDebounceCounter
   1243  f5d2				   EndReadSwitches
   1244  f5d2
   1245  f5d2				   DoNotTurnBeforeStart
   1246  f5d2							;STA HMCLR
   1247  f5d2		       a5 bd		      LDA	GameStatus
   1248  f5d4		       f0 33		      BEQ	OverScanWait
   1249  f5d6
   1250  f5d6							; Last thing, will overrride hmove
   1251  f5d6				   CallTestColisionAndMove
   1252  f5d6		       a2 00		      LDX	#0	; Player 0
   1253  f5d8							; Colision with traffic, each player check different flags,
   1254  f5d8		       a5 8c		      LDA	FrameCount0
   1255  f5da		       29 01		      AND	#%00000001
   1256  f5dc		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1257  f5de		       20 b1 f8 	      JSR	IsOpponentColliding
   1258  f5e1		       05 01		      ORA	CXM1P
   1259  f5e3		       4a		      LSR
   1260  f5e4		       05 00		      ORA	CXM0P
   1261  f5e6		       05 02		      ORA	CXP0FB
   1262  f5e8							; ORA CXPPMM ; Collision between players will have its own rules
   1263  f5e8				   SkipColisionPlayer0		; Should not colide on opponent side.
   1264  f5e8		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1265  f5ea		       85 b2		      STA	Tmp2
   1266  f5ec		       20 c5 f8 	      JSR	TestCollisionAndMove
   1267  f5ef
   1268  f5ef		       e8		      INX		; player 1
   1269  f5f0		       a5 8c		      LDA	FrameCount0
   1270  f5f2		       29 01		      AND	#%00000001
   1271  f5f4		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1272  f5f6		       20 b1 f8 	      JSR	IsOpponentColliding
   1273  f5f9		       05 00		      ORA	CXM0P
   1274  f5fb		       4a		      LSR
   1275  f5fc		       05 01		      ORA	CXM1P
   1276  f5fe		       05 03		      ORA	CXP1FB
   1277  f600				   SkipColisionPlayer1
   1278  f600		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1279  f602		       85 b2		      STA	Tmp2
   1280  f604		       20 c5 f8 	      JSR	TestCollisionAndMove
   1281  f607
   1282  f607				   ClearCollision
   1283  f607		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1284  f609
   1285  f609				   OverScanWait
   1286  f609		       ad 84 02 	      LDA	INTIM
   1287  f60c		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1288  f60e		       4c d6 f0 	      JMP	MainLoop
   1289  f611
   1290  f611				   OverScanWaitBeforeReset
   1291  f611		       ad 84 02 	      LDA	INTIM
   1292  f614		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1293  f616		       4c 14 f0 	      JMP	Start
   1294  f619
   1295  f619				   Subroutines
   1296  f619
   1297  f619							;X Player
   1298  f619							;Tmp1 TrafficOffset 2
   1299  f619				   ProcessSound
   1300  f619				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1301  f619		       b5 c9		      LDA	ScoreFontColor,X	;3
   1302  f61b		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1303  f61d		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1304  f61f		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1305  f621		       f0 29		      BEQ	PlayCheckpoint	;2
   1306  f623		       b5 8e		      LDA	CollisionCounter,X	;3
   1307  f625		       c9 e0		      CMP	#$E0	;2
   1308  f627		       b0 14		      BCS	PlayColision	;2
   1309  f629		       b5 cd		      LDA	NextCheckpoint,X	;3
   1310  f62b		       38		      SEC		;2
   1311  f62c		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1312  f62e		       c9 02		      CMP	#$02	;2
   1313  f630		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1314  f632		       b5 b8		      LDA	CountdownTimer,X	; 3
   1315  f634		       f0 53		      BEQ	EngineSound	;2
   1316  f636		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1317  f638		       90 37		      BCC	PlayWarnTimeEnding	;4
   1318  f63a		       4c 89 f6 	      JMP	EngineSound	;3
   1319  f63d				   PlayColision
   1320  f63d		       a9 1f		      LDA	#31
   1321  f63f		       95 17		      STA	AUDF0,X
   1322  f641		       a9 08		      LDA	#8
   1323  f643		       95 15		      STA	AUDC0,X
   1324  f645		       a9 08		      LDA	#8
   1325  f647		       95 19		      STA	AUDV0,X
   1326  f649		       4c b0 f6 	      JMP	EndSound
   1327  f64c
   1328  f64c				   PlayCheckpoint
   1329  f64c		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1330  f64e		       4a		      LSR		;2
   1331  f64f		       4a		      LSR		;2
   1332  f650		       4a		      LSR		;2
   1333  f651		       95 17		      STA	AUDF0,X	;3
   1334  f653		       a9 0c		      LDA	#12	;2
   1335  f655		       95 15		      STA	AUDC0,X	;3
   1336  f657		       a9 06		      LDA	#6	;2
   1337  f659		       95 19		      STA	AUDV0,X	;3
   1338  f65b		       4c b0 f6 	      JMP	EndSound	;3
   1339  f65e
   1340  f65e				   PlayBeforeCheckpoint
   1341  f65e		       a5 8c		      LDA	FrameCount0	;3
   1342  f660		       29 1c		      AND	#%00011100	;2
   1343  f662		       09 03		      ORA	#%00000011	;2
   1344  f664		       95 17		      STA	AUDF0,X	;3
   1345  f666		       a9 0c		      LDA	#12	;2
   1346  f668		       95 15		      STA	AUDC0,X	;3
   1347  f66a		       a9 03		      LDA	#3	;2
   1348  f66c		       95 19		      STA	AUDV0,X	;3
   1349  f66e		       4c b0 f6 	      JMP	EndSound	;3
   1350  f671
   1351  f671				   PlayWarnTimeEnding
   1352  f671		       a5 8c		      LDA	FrameCount0	;3
   1353  f673		       29 04		      AND	#%00000100	;2
   1354  f675		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1355  f677		       18		      CLC		;2
   1356  f678		       a9 0a		      LDA	#10	;2
   1357  f67a		       75 b8		      ADC	CountdownTimer,X	;2
   1358  f67c		       95 17		      STA	AUDF0,X	;3
   1359  f67e		       a9 0c		      LDA	#12	;2
   1360  f680		       95 15		      STA	AUDC0,X	;3
   1361  f682		       a9 03		      LDA	#3	;2
   1362  f684		       95 19		      STA	AUDV0,X	;3
   1363  f686		       4c b0 f6 	      JMP	EndSound	;3
   1364  f689
   1365  f689				   EngineSound		;41
   1366  f689		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1367  f68b		       95 19		      STA	AUDV0,X
   1368  f68d		       b5 b8		      LDA	CountdownTimer,X	;3
   1369  f68f		       f0 1b		      BEQ	EngineOff	;2
   1370  f691		       b4 d5		      LDY	Gear,X
   1371  f693		       b5 f0		      LDA	Player0SpeedL,X	;3
   1372  f695		       4a		      LSR		;2
   1373  f696		       4a		      LSR		;2
   1374  f697		       4a		      LSR		;2
   1375  f698		       29 0f		      AND	#%00001111	;2
   1376  f69a		       85 b0		      STA	Tmp0	;3
   1377  f69c		       b9 43 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1378  f69f		       38		      SEC		;2
   1379  f6a0		       e5 b0		      SBC	Tmp0	;3
   1380  f6a2		       95 17		      STA	AUDF0,X	;3
   1381  f6a4		       b9 3d ff 	      LDA	EngineSoundType,Y	;4
   1382  f6a7		       95 15		      STA	AUDC0,X	;3
   1383  f6a9		       4c b0 f6 	      JMP	EndEngineSound	;3
   1384  f6ac				   EngineOff
   1385  f6ac				   MuteSound
   1386  f6ac		       a9 00		      LDA	#0
   1387  f6ae		       95 15		      STA	AUDC0,X
   1388  f6b0				   EndEngineSound
   1389  f6b0				   EndSound
   1390  f6b0		       60		      RTS
   1391  f6b1
   1392  f6b1				   ClearAll		; 58
   1393  f6b1		       a9 00		      LDA	#0	;2
   1394  f6b3		       85 1b		      STA	GRP0	;3
   1395  f6b5		       85 1c		      STA	GRP1	;3
   1396  f6b7		       85 1f		      STA	ENABL	;3
   1397  f6b9		       85 1d		      STA	ENAM0	;3
   1398  f6bb		       85 1e		      STA	ENAM1	;3
   1399  f6bd		       85 80		      STA	GRP0Cache	;3
   1400  f6bf		       85 84		      STA	GRP1Cache	;3
   1401  f6c1		       85 85		      STA	ENABLCache	;3
   1402  f6c3		       85 86		      STA	ENAM0Cache	;3
   1403  f6c5		       85 87		      STA	ENAM1Cache	;3
   1404  f6c7
   1405  f6c7				   ClearPF		; 26
   1406  f6c7		       a9 00		      LDA	#0	;2
   1407  f6c9				   ClearPFSkipLDA0
   1408  f6c9		       85 0d		      STA	PF0	;3
   1409  f6cb		       85 0e		      STA	PF1	;3
   1410  f6cd		       85 0f		      STA	PF2	;3	
   1411  f6cf		       85 81		      STA	PF0Cache	;3
   1412  f6d1		       85 82		      STA	PF1Cache	;3
   1413  f6d3		       85 83		      STA	PF2Cache	;3 
   1414  f6d5		       60		      RTS		;6
   1415  f6d6				   EndClearAll
   1416  f6d6
   1417  f6d6				   LoadAll		; 48
   1418  f6d6		       a5 81		      LDA	PF0Cache	;3
   1419  f6d8		       85 0d		      STA	PF0	;3
   1420  f6da
   1421  f6da		       a5 82		      LDA	PF1Cache	;3
   1422  f6dc		       85 0e		      STA	PF1	;3
   1423  f6de
   1424  f6de		       a5 83		      LDA	PF2Cache	;3
   1425  f6e0		       85 0f		      STA	PF2	;3
   1426  f6e2
   1427  f6e2		       a5 84		      LDA	GRP1Cache	;3
   1428  f6e4		       85 1c		      STA	GRP1	;3
   1429  f6e6
   1430  f6e6		       a5 85		      LDA	ENABLCache	;3
   1431  f6e8		       85 1f		      STA	ENABL	;3
   1432  f6ea
   1433  f6ea		       a5 86		      LDA	ENAM0Cache	;3
   1434  f6ec		       85 1d		      STA	ENAM0	;3
   1435  f6ee
   1436  f6ee		       a5 87		      LDA	ENAM1Cache	;3
   1437  f6f0		       85 1e		      STA	ENAM1	;3
   1438  f6f2
   1439  f6f2		       60		      RTS		;6
   1440  f6f3				   EndLoadAll
   1441  f6f3
   1442  f6f3				   NextDifficulty		;Is a SBR
   1443  f6f3		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1444  f6f5		       29 01		      AND	#%00000001
   1445  f6f7		       d0 24		      BNE	CheckRandomDifficulty
   1446  f6f9
   1447  f6f9		       b5 c4		      LDA	CurrentDifficulty,X
   1448  f6fb		       18		      CLC
   1449  f6fc		       69 01		      ADC	#1
   1450  f6fe		       29 03		      AND	#%00000011	; 0 to 3
   1451  f700		       95 c4		      STA	CurrentDifficulty,X
   1452  f702
   1453  f702				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1454  f702		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1455  f704		       b9 bf ff 	      LDA	TrafficChanceTable,Y
   1456  f707		       95 be		      STA	TrafficChance,X
   1457  f709		       b9 bb ff 	      LDA	TrafficColorTable,Y
   1458  f70c		       95 c2		      STA	TrafficColor,X
   1459  f70e
   1460  f70e		       a5 c6		      LDA	GameMode	;
   1461  f710		       29 01		      AND	#%00000001
   1462  f712		       f0 03		      BEQ	UseNextDifficultyTime
   1463  f714		       4c 18 f7 	      JMP	StoreDifficultyTime
   1464  f717				   UseNextDifficultyTime
   1465  f717		       c8		      INY
   1466  f718				   StoreDifficultyTime
   1467  f718		       b9 c3 ff 	      LDA	TrafficTimeTable,Y
   1468  f71b		       95 c0		      STA	CheckpointTime,X
   1469  f71d
   1470  f71d				   CheckRandomDifficulty
   1471  f71d		       a5 c6		      LDA	GameMode
   1472  f71f		       29 08		      AND	#%00001000	; Random difficulties
   1473  f721		       f0 26		      BEQ	ReturnFromNextDifficulty
   1474  f723				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1475  f723		       a5 f4		      LDA	IsOpponentInFront
   1476  f725		       30 12		      BMI	UseOpponentChance
   1477  f727		       a5 cf		      LDA	OpponentLine	; Same line
   1478  f729		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1479  f72b		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1480  f72d		       a4 8c		      LDY	FrameCount0
   1481  f72f		       b9 00 fe 	      LDA	AesTable,Y
   1482  f732							;EOR TrafficChance, no need, lets make life simple
   1483  f732		       29 3f		      AND	#%00111111
   1484  f734		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1485  f736		       4c 49 f7 	      JMP	ReturnFromNextDifficulty
   1486  f739				   UseOpponentChance
   1487  f739		       8a		      TXA
   1488  f73a		       49 01		      EOR	#%00000001	; Reverts the player
   1489  f73c		       aa		      TAX
   1490  f73d		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1491  f73f		       85 b3		      STA	Tmp3
   1492  f741		       8a		      TXA
   1493  f742		       49 01		      EOR	#%00000001	; Restors the player
   1494  f744		       aa		      TAX
   1495  f745		       a5 b3		      LDA	Tmp3
   1496  f747		       95 be		      STA	TrafficChance,X
   1497  f749
   1498  f749				   ReturnFromNextDifficulty
   1499  f749		       60		      RTS
   1500  f74a
   1501  f74a				   DefaultOffsets
   1502  f74a		       a9 20		      LDA	#$20
   1503  f74c		       85 96		      STA	TrafficOffset1 + 2
   1504  f74e		       85 a6		      STA	OpTrafficOffset1 + 2
   1505  f750		       a9 40		      LDA	#$40
   1506  f752		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1507  f754		       85 aa		      STA	OpTrafficOffset2 + 2
   1508  f756		       a9 60		      LDA	#$60
   1509  f758		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1510  f75a		       85 ae		      STA	OpTrafficOffset3 + 2
   1511  f75c		       a9 80		      LDA	#$80
   1512  f75e		       60		      RTS
   1513  f75f
   1514  f75f				   PrintStaticText		; Preload X with the offset referent to StaticText
   1515  f75f		       bd 00 ff 	      LDA	StaticText,X
   1516  f762		       85 d0		      STA	ScoreD0
   1517  f764		       e8		      INX
   1518  f765		       bd 00 ff 	      LDA	StaticText,X
   1519  f768		       85 d1		      STA	ScoreD1
   1520  f76a		       e8		      INX
   1521  f76b		       bd 00 ff 	      LDA	StaticText,X
   1522  f76e		       85 d2		      STA	ScoreD2
   1523  f770		       e8		      INX
   1524  f771		       bd 00 ff 	      LDA	StaticText,X
   1525  f774		       85 d3		      STA	ScoreD3
   1526  f776		       e8		      INX
   1527  f777		       bd 00 ff 	      LDA	StaticText,X
   1528  f77a		       85 d4		      STA	ScoreD4
   1529  f77c		       60		      RTS
   1530  f77d
   1531  f77d				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1532  f77d		       a2 00		      LDX	#0
   1533  f77f		       a0 04		      LDY	#FONT_OFFSET
   1534  f781
   1535  f781				   ScoreLoop		; 20 
   1536  f781		       85 02		      STA	WSYNC	;2
   1537  f783		       85 2a		      STA	HMOVE
   1538  f785
   1539  f785		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1540  f787		       85 0d		      STA	PF0	;3
   1541  f789
   1542  f789		       a5 82		      LDA	PF1Cache	;3
   1543  f78b		       85 0e		      STA	PF1	;3
   1544  f78d
   1545  f78d		       a5 83		      LDA	PF2Cache	;3
   1546  f78f		       85 0f		      STA	PF2	;3
   1547  f791
   1548  f791				   DrawScoreD0		; 15
   1549  f791		       a6 d0		      LDX	ScoreD0	; 3
   1550  f793		       bd 00 fd 	      LDA	Font,X	;4
   1551  f796		       85 81		      STA	PF0Cache	;3
   1552  f798		       c6 d0		      DEC	ScoreD0	;5
   1553  f79a
   1554  f79a				   DrawScoreD1		; 23	
   1555  f79a		       a6 d1		      LDX	ScoreD1	; 3
   1556  f79c		       bd 00 fd 	      LDA	Font,X	;4
   1557  f79f		       0a		      ASL		;2
   1558  f7a0		       0a		      ASL		;2
   1559  f7a1		       0a		      ASL		;2
   1560  f7a2		       0a		      ASL		;2
   1561  f7a3		       85 82		      STA	PF1Cache	;3
   1562  f7a5		       c6 d1		      DEC	ScoreD1	;5
   1563  f7a7
   1564  f7a7				   DrawScoreD2		; 20
   1565  f7a7		       a6 d2		      LDX	ScoreD2	; 3
   1566  f7a9		       bd 00 fd 	      LDA	Font,X	;4
   1567  f7ac		       29 0f		      AND	#%00001111	;2
   1568  f7ae		       05 82		      ORA	PF1Cache	;3
   1569  f7b0		       85 82		      STA	PF1Cache	;3
   1570  f7b2		       c6 d2		      DEC	ScoreD2	;5
   1571  f7b4
   1572  f7b4				   DrawScoreD3		; 23
   1573  f7b4		       a6 d3		      LDX	ScoreD3	; 3
   1574  f7b6		       bd 00 fd 	      LDA	Font,X	;4
   1575  f7b9		       4a		      LSR		;2
   1576  f7ba		       4a		      LSR		;2
   1577  f7bb		       4a		      LSR		;2
   1578  f7bc		       4a		      LSR		;2
   1579  f7bd		       85 83		      STA	PF2Cache	;3
   1580  f7bf		       c6 d3		      DEC	ScoreD3	;5
   1581  f7c1
   1582  f7c1				   DrawScoreD4		; 20
   1583  f7c1		       a6 d4		      LDX	ScoreD4	; 3
   1584  f7c3		       bd 00 fd 	      LDA	Font,X	;4
   1585  f7c6		       29 f0		      AND	#%11110000	;2
   1586  f7c8		       05 83		      ORA	PF2Cache	;3
   1587  f7ca		       85 83		      STA	PF2Cache	;3
   1588  f7cc		       c6 d4		      DEC	ScoreD4	;5
   1589  f7ce
   1590  f7ce
   1591  f7ce		       88		      DEY		;2
   1592  f7cf		       10 b0		      BPL	ScoreLoop	;4
   1593  f7d1
   1594  f7d1		       85 02		      STA	WSYNC
   1595  f7d3		       85 2a		      STA	HMOVE
   1596  f7d5		       20 d6 f6 	      JSR	LoadAll
   1597  f7d8		       60		      RTS		; 6
   1598  f7d9
   1599  f7d9				   WaitForVblankEnd
   1600  f7d9		       ad 84 02 	      LDA	INTIM
   1601  f7dc		       d0 fb		      BNE	WaitForVblankEnd
   1602  f7de		       85 02		      STA	WSYNC
   1603  f7e0		       85 01		      STA	VBLANK
   1604  f7e2		       60		      RTS
   1605  f7e3
   1606  f7e3				   Sleep4Lines
   1607  f7e3		       85 02		      STA	WSYNC
   1608  f7e5		       85 02		      STA	WSYNC
   1609  f7e7		       85 02		      STA	WSYNC
   1610  f7e9		       85 02		      STA	WSYNC
   1611  f7eb		       60		      RTS
   1612  f7ec
   1613  f7ec				   Sleep8Lines
   1614  f7ec		       20 e3 f7 	      JSR	Sleep4Lines
   1615  f7ef		       20 e3 f7 	      JSR	Sleep4Lines
   1616  f7f2		       60		      RTS
   1617  f7f3
   1618  f7f3				   Sleep32Lines
   1619  f7f3		       20 ec f7 	      JSR	Sleep8Lines
   1620  f7f6		       20 ec f7 	      JSR	Sleep8Lines
   1621  f7f9		       20 ec f7 	      JSR	Sleep8Lines
   1622  f7fc		       20 ec f7 	      JSR	Sleep8Lines
   1623  f7ff		       60		      RTS
   1624  f800
   1625  f800							;X = number of WSYNC HMOVE to run
   1626  f800				   HMoveXTimes
   1627  f800		       85 02		      STA	WSYNC	;3
   1628  f802		       85 2a		      STA	HMOVE	; 3/10 
   1629  f804		       ca		      DEX
   1630  f805		       d0 f9		      BNE	HMoveXTimes
   1631  f807		       60		      RTS
   1632  f808
   1633  f808				   ConfigureCarSprites
   1634  f808		       a5 8c		      LDA	FrameCount0
   1635  f80a		       29 01		      AND	#%00000001
   1636  f80c		       d0 0b		      BNE	LoadForRightScreenSprites
   1637  f80e				   LoadForLeftScreenSprites
   1638  f80e		       a5 c7		      LDA	CurrentCarId
   1639  f810		       85 b0		      STA	Tmp0
   1640  f812		       a5 c8		      LDA	OpCurrentCarId
   1641  f814		       85 b1		      STA	Tmp1
   1642  f816		       4c 21 f8 	      JMP	LoadCarSpritesFromIds
   1643  f819				   LoadForRightScreenSprites
   1644  f819		       a5 c7		      LDA	CurrentCarId
   1645  f81b		       85 b1		      STA	Tmp1
   1646  f81d		       a5 c8		      LDA	OpCurrentCarId
   1647  f81f		       85 b0		      STA	Tmp0
   1648  f821
   1649  f821				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1650  f821		       a4 b0		      LDY	Tmp0
   1651  f823		       b9 95 ff 	      LDA	CarIdToSpriteAddressL,Y
   1652  f826		       85 d7		      STA	CarSpritePointerL
   1653  f828		       b9 99 ff 	      LDA	CarIdToSpriteAddressH,Y
   1654  f82b		       85 d8		      STA	CarSpritePointerH
   1655  f82d				   ConfigureOpponentCarSprite
   1656  f82d		       a4 b1		      LDY	Tmp1
   1657  f82f		       b9 9d ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1658  f832		       85 d9		      STA	EnemyCarSpritePointerL
   1659  f834		       b9 a1 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1660  f837		       85 da		      STA	EnemyCarSpritePointerH
   1661  f839		       60		      RTS
   1662  f83a
   1663  f83a							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1664  f83a							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1665  f83a							; Tmp0 Binary Number
   1666  f83a							; Result Returned in Tmp 1 and A
   1667  f83a				   BINBCD8
   1668  f83a		       f8		      SED		; Switch to decimal mode
   1669  f83b		       a9 00		      LDA	#0	; Ensure the result is clear
   1670  f83d		       85 b1		      STA	Tmp1+0
   1671  f83f							;STA Tmp1+1
   1672  f83f		       a2 08		      LDX	#8	; The number of source bits
   1673  f841
   1674  f841				   CNVBIT
   1675  f841		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1676  f843		       a5 b1		      LDA	Tmp1+0	; And add into result
   1677  f845		       65 b1		      ADC	Tmp1+0
   1678  f847		       85 b1		      STA	Tmp1+0
   1679  f849							;Not needed now, 0 to 99 is enought for timer!
   1680  f849							; LDA Tmp1+1	; propagating any carry
   1681  f849							; ADC Tmp1+1
   1682  f849							; STA Tmp1+1
   1683  f849		       ca		      DEX		; And repeat for next bit
   1684  f84a		       d0 f5		      BNE	CNVBIT
   1685  f84c		       d8		      CLD		; Back to binary
   1686  f84d
   1687  f84d		       60		      RTS		; All Done.
   1688  f84e
   1689  f84e							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1690  f84e							;X player 0 or 1
   1691  f84e				   SelectCarWithDpad
   1692  f84e		       a0 03		      LDY	#3
   1693  f850				   SelectCarWithDpadLoop
   1694  f850		       ad 80 02 	      LDA	SWCHA
   1695  f853		       25 b0		      AND	Tmp0
   1696  f855		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1697  f857		       98		      TYA
   1698  f858		       95 c7		      STA	CurrentCarId,X
   1699  f85a				   ContinueSelectCarWithDpadLoop
   1700  f85a		       46 b0		      LSR	Tmp0
   1701  f85c		       88		      DEY
   1702  f85d		       10 f1		      BPL	SelectCarWithDpadLoop
   1703  f85f		       60		      RTS
   1704  f860
   1705  f860				   ProcessOpponentLine
   1706  f860		       a5 8c		      LDA	FrameCount0
   1707  f862		       29 01		      AND	#%00000001
   1708  f864		       38		      SEC
   1709  f865		       d0 15		      BNE	Player0IsOpponent
   1710  f867				   Player1IsOpponent		; Code could be reused?
   1711  f867		       a5 91		      LDA	TrafficOffset0 + 1
   1712  f869		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1713  f86b		       85 b0		      STA	Tmp0
   1714  f86d		       a5 92		      LDA	TrafficOffset0 + 2
   1715  f86f		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1716  f871		       85 b1		      STA	Tmp1
   1717  f873		       a5 ba		      LDA	Traffic0Msb
   1718  f875		       e5 bb		      SBC	OpTraffic0Msb
   1719  f877		       85 b2		      STA	Tmp2
   1720  f879		       4c 8e f8 	      JMP	StoreInFrontPlayer
   1721  f87c				   Player0IsOpponent
   1722  f87c		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1723  f87e		       e5 91		      SBC	TrafficOffset0 + 1
   1724  f880		       85 b0		      STA	Tmp0
   1725  f882		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1726  f884		       e5 92		      SBC	TrafficOffset0 + 2
   1727  f886		       85 b1		      STA	Tmp1
   1728  f888		       a5 bb		      LDA	OpTraffic0Msb
   1729  f88a		       e5 ba		      SBC	Traffic0Msb
   1730  f88c		       85 b2		      STA	Tmp2
   1731  f88e
   1732  f88e				   StoreInFrontPlayer
   1733  f88e		       85 f4		      STA	IsOpponentInFront
   1734  f890
   1735  f890				   AddOffsetToOpponentLine
   1736  f890		       18		      CLC
   1737  f891		       a5 b0		      LDA	Tmp0
   1738  f893		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1739  f895		       85 b0		      STA	Tmp0
   1740  f897		       a5 b1		      LDA	Tmp1
   1741  f899		       69 00		      ADC	#0
   1742  f89b		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1743  f89d		       a5 b2		      LDA	Tmp2
   1744  f89f		       69 00		      ADC	#0
   1745  f8a1		       05 b1		      ORA	Tmp1
   1746  f8a3		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1747  f8a5				   OpponentNotVisible
   1748  f8a5		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1749  f8a7		       85 cf		      STA	OpponentLine
   1750  f8a9		       4c b0 f8 	      JMP	ReturnFromProcessOpponentLine
   1751  f8ac				   OpponentVisible
   1752  f8ac		       a5 b0		      LDA	Tmp0
   1753  f8ae		       85 cf		      STA	OpponentLine
   1754  f8b0				   ReturnFromProcessOpponentLine
   1755  f8b0		       60		      RTS
   1756  f8b1
   1757  f8b1							; Value stored in A
   1758  f8b1				   IsOpponentColliding
   1759  f8b1							;Any non default state, opponent do not colide
   1760  f8b1		       a5 8e		      LDA	CollisionCounter
   1761  f8b3		       05 8f		      ORA	OpCollisionCounter
   1762  f8b5		       05 cb		      ORA	ScoreFontColorHoldChange
   1763  f8b7		       05 cc		      ORA	OpScoreFontColorHoldChange
   1764  f8b9		       d0 07		      BNE	OpponentNotColliding
   1765  f8bb		       a5 f4		      LDA	IsOpponentInFront
   1766  f8bd		       25 07		      AND	CXPPMM
   1767  f8bf		       4c c4 f8 	      JMP	ReturnIsOpponentColliding
   1768  f8c2				   OpponentNotColliding
   1769  f8c2		       a9 00		      LDA	#0
   1770  f8c4				   ReturnIsOpponentColliding
   1771  f8c4		       60		      RTS
   1772  f8c5
   1773  f8c5
   1774  f8c5							; Movement and colision are binded because the car must be moved after duplicate size.
   1775  f8c5							; Use X for the player
   1776  f8c5							; Tmp2 Traffic colision result
   1777  f8c5				   TestCollisionAndMove
   1778  f8c5							; Until store the movemnt, Y contains the value to be stored.
   1779  f8c5							; see if player0 colides with the rest
   1780  f8c5		       a5 b2		      LDA	Tmp2
   1781  f8c7		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1782  f8c9		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1783  f8cb		       d0 25		      BNE	NoCollision
   1784  f8cd		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1785  f8cf		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1786  f8d1		       f0 1f		      BEQ	NoCollision
   1787  f8d3		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1788  f8d5		       f0 1b		      BEQ	NoCollision
   1789  f8d7		       a9 ff		      LDA	#COLLISION_FRAMES
   1790  f8d9		       95 8e		      STA	CollisionCounter,X
   1791  f8db		       b5 f2		      LDA	Player0SpeedH,X
   1792  f8dd		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1793  f8df		       a9 10		      LDA	#COLLISION_SPEED_L
   1794  f8e1		       d5 f0		      CMP	Player0SpeedL,X
   1795  f8e3		       b0 04		      BCS	SkipSetColisionSpeedL
   1796  f8e5				   SetColisionSpeedL
   1797  f8e5		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1798  f8e7		       95 f0		      STA	Player0SpeedL,X
   1799  f8e9				   SkipSetColisionSpeedL
   1800  f8e9		       a9 00		      LDA	#0
   1801  f8eb		       95 f2		      STA	Player0SpeedH,X
   1802  f8ed		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1803  f8ef		       4c 42 f9 	      JMP	StoreHMove	; We keep position consistent
   1804  f8f2				   NoCollision
   1805  f8f2
   1806  f8f2				   DecrementCollision
   1807  f8f2		       b5 8e		      LDA	CollisionCounter,X
   1808  f8f4		       f0 06		      BEQ	FinishDecrementCollision
   1809  f8f6		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1810  f8f8		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1811  f8fa		       d6 8e		      DEC	CollisionCounter,X
   1812  f8fc				   FinishDecrementCollision
   1813  f8fc
   1814  f8fc				   ResetPlayerSize
   1815  f8fc		       d0 04		      BNE	FinishResetPlayerSize
   1816  f8fe		       a9 30		      LDA	#%00110000
   1817  f900		       95 04		      STA	NUSIZ0,X	;
   1818  f902				   FinishResetPlayerSize
   1819  f902
   1820  f902				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1821  f902		       b5 8e		      LDA	CollisionCounter,X
   1822  f904		       c9 01		      CMP	#1	; Last frame before reset
   1823  f906		       d0 05		      BNE	SkipResetPlayerPosition
   1824  f908		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1825  f90a		       4c 42 f9 	      JMP	StoreHMove
   1826  f90d				   SkipResetPlayerPosition
   1827  f90d
   1828  f90d				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1829  f90d		       b5 c7		      LDA	CurrentCarId,X
   1830  f90f		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1831  f911		       d0 08		      BNE	PrepareReadXAxis
   1832  f913		       a0 00		      LDY	#0
   1833  f915		       a5 8c		      LDA	FrameCount0
   1834  f917		       29 01		      AND	#DRAGSTER_TURN_MASK
   1835  f919		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1836  f91b
   1837  f91b				   PrepareReadXAxis
   1838  f91b		       a0 00		      LDY	#0
   1839  f91d		       b5 b6		      LDA	Player0X,X
   1840  f91f				   BeginReadLeft
   1841  f91f		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1842  f921		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1843  f924		       2c 80 02 	      BIT	SWCHA
   1844  f927		       d0 07		      BNE	SkipMoveLeft
   1845  f929		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1846  f92b		       d6 b6		      DEC	Player0X,X
   1847  f92d		       4c 42 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1848  f930				   SkipMoveLeft
   1849  f930				   BeginReadRight
   1850  f930		       b5 b6		      LDA	Player0X,X
   1851  f932		       c9 2c		      CMP	#PLAYER_MAX_X
   1852  f934		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1853  f936		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1854  f939		       2c 80 02 	      BIT	SWCHA
   1855  f93c		       d0 04		      BNE	SkipMoveRight
   1856  f93e		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1857  f940		       f6 b6		      INC	Player0X,X
   1858  f942				   SkipMoveRight
   1859  f942				   StoreHMove
   1860  f942		       94 20		      STY	HMP0,X	;set the move for player 0
   1861  f944
   1862  f944		       60		      RTS
   1863  f945
   1864  f945							; X Traffic offset 4 bits each lane, 4 lanes per player
   1865  f945							; Tmp3 Max X offset
   1866  f945							; Tmp4 Max Player Speed L
   1867  f945							; Tmp5 Max Player Speed H
   1868  f945				   UpdateOffsets
   1869  f945		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1870  f947		       a5 c6		      LDA	GameMode
   1871  f949		       29 04		      AND	#%00000100	; GameModes with high delta
   1872  f94b		       f0 02		      BEQ	UpdateOffsetsLoop
   1873  f94d		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1874  f94f
   1875  f94f				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1876  f94f		       38		      SEC
   1877  f950		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1878  f952		       f9 81 ff 	      SBC	TrafficSpeeds,Y
   1879  f955		       85 b0		      STA	Tmp0
   1880  f957		       c8		      INY
   1881  f958		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1882  f95a		       f9 81 ff 	      SBC	TrafficSpeeds,Y
   1883  f95d		       85 b1		      STA	Tmp1
   1884  f95f		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1885  f961		       e9 00		      SBC	#0
   1886  f963		       85 b2		      STA	Tmp2
   1887  f965
   1888  f965				   AddsTheResult
   1889  f965		       18		      CLC
   1890  f966		       a5 b0		      LDA	Tmp0
   1891  f968		       75 90		      ADC	TrafficOffset0,X
   1892  f96a		       95 90		      STA	TrafficOffset0,X
   1893  f96c		       e8		      INX
   1894  f96d		       a5 b1		      LDA	Tmp1
   1895  f96f		       75 90		      ADC	TrafficOffset0,X
   1896  f971		       95 90		      STA	TrafficOffset0,X
   1897  f973		       e8		      INX
   1898  f974		       a5 b2		      LDA	Tmp2	; Carry
   1899  f976		       75 90		      ADC	TrafficOffset0,X
   1900  f978		       95 90		      STA	TrafficOffset0,X
   1901  f97a		       90 0f		      BCC	CalculateOffsetCache
   1902  f97c				   CalculatePlayer0Msb
   1903  f97c		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1904  f97e		       d0 05		      BNE	CalculatePlayer1Msb
   1905  f980		       e6 ba		      INC	Traffic0Msb
   1906  f982		       4c 8b f9 	      JMP	CalculateOffsetCache
   1907  f985				   CalculatePlayer1Msb
   1908  f985		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1909  f987		       d0 02		      BNE	CalculateOffsetCache
   1910  f989		       e6 bb		      INC	OpTraffic0Msb
   1911  f98b
   1912  f98b				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1913  f98b		       e8		      INX
   1914  f98c		       38		      SEC
   1915  f98d		       69 00		      ADC	#0	;Increment by one
   1916  f98f		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1917  f991
   1918  f991				   PrepareNextUpdateLoop
   1919  f991		       c8		      INY
   1920  f992		       e8		      INX
   1921  f993		       e4 b3		      CPX	Tmp3	; Max X offset
   1922  f995		       d0 b8		      BNE	UpdateOffsetsLoop
   1923  f997		       60		      RTS
   1924  f998
   1925  f998							; X Player 0 or 1
   1926  f998				   ProcessSpeed
   1927  f998				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1928  f998		       a9 00		      LDA	#0
   1929  f99a		       85 b0		      STA	Tmp0	; Break speed
   1930  f99c		       b5 b8		      LDA	CountdownTimer,X
   1931  f99e		       d0 0d		      BNE	Break
   1932  f9a0		       b4 c7		      LDY	CurrentCarId,X
   1933  f9a2		       a5 8c		      LDA	FrameCount0
   1934  f9a4		       39 a9 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1935  f9a7		       d0 04		      BNE	Break
   1936  f9a9		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1937  f9ab		       85 b0		      STA	Tmp0
   1938  f9ad
   1939  f9ad				   Break
   1940  f9ad		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1941  f9b0		       2c 80 02 	      BIT	SWCHA
   1942  f9b3		       d0 12		      BNE	BreakNonZero
   1943  f9b5		       b5 0c		      LDA	INPT4,X	;3
   1944  f9b7		       10 0a		      BPL	BreakWhileAccelerating
   1945  f9b9		       b4 d5		      LDY	Gear,X
   1946  f9bb		       b9 b5 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1947  f9be		       85 b0		      STA	Tmp0
   1948  f9c0		       4c c7 f9 	      JMP	BreakNonZero
   1949  f9c3				   BreakWhileAccelerating		; Allow better control while breaking.
   1950  f9c3		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1951  f9c5		       85 b0		      STA	Tmp0
   1952  f9c7
   1953  f9c7				   BreakNonZero
   1954  f9c7		       a5 b0		      LDA	Tmp0
   1955  f9c9		       f0 29		      BEQ	SkipBreak
   1956  f9cb
   1957  f9cb				   DecreaseSpeed
   1958  f9cb		       38		      SEC
   1959  f9cc		       b5 f0		      LDA	Player0SpeedL,X
   1960  f9ce		       e5 b0		      SBC	Tmp0
   1961  f9d0		       95 f0		      STA	Player0SpeedL,X
   1962  f9d2		       b5 f2		      LDA	Player0SpeedH,X
   1963  f9d4		       e9 00		      SBC	#0
   1964  f9d6		       95 f2		      STA	Player0SpeedH,X
   1965  f9d8
   1966  f9d8				   CheckMinSpeed
   1967  f9d8		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1968  f9da		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1969  f9dc		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1970  f9de		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1971  f9e0
   1972  f9e0				   CompareLBreakSpeed
   1973  f9e0		       b5 f0		      LDA	Player0SpeedL,X
   1974  f9e2		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1975  f9e4		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1976  f9e6		       4c f1 f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1977  f9e9
   1978  f9e9				   ResetMinSpeed
   1979  f9e9		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1980  f9eb		       95 f2		      STA	Player0SpeedH,X
   1981  f9ed		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1982  f9ef		       95 f0		      STA	Player0SpeedL,X
   1983  f9f1
   1984  f9f1				   SkipAccelerateIfBreaking
   1985  f9f1		       4c 3a fa 	      JMP	SkipAccelerate
   1986  f9f4				   SkipBreak
   1987  f9f4
   1988  f9f4				   Acelerates
   1989  f9f4		       b5 b8		      LDA	CountdownTimer,X
   1990  f9f6		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1991  f9f8
   1992  f9f8				   ContinueAccelerateTest
   1993  f9f8		       b5 0c		      LDA	INPT4,X	;3
   1994  f9fa		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1995  f9fc		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1996  f9ff		       2c 80 02 	      BIT	SWCHA
   1997  fa02		       d0 36		      BNE	SkipAccelerate
   1998  fa04
   1999  fa04				   IncreaseCarSpeed
   2000  fa04		       a9 02		      LDA	#2
   2001  fa06		       85 b0		      STA	Tmp0	; Loop control
   2002  fa08		       b4 c7		      LDY	CurrentCarId,X
   2003  fa0a				   IncreaseCarSpeedLoop
   2004  fa0a							;Adds speed
   2005  fa0a		       18		      CLC
   2006  fa0b		       b5 dc		      LDA	AccelerateBuffer,X
   2007  fa0d		       79 a5 ff 	      ADC	CarIdToAccelerateSpeed,Y
   2008  fa10		       95 dc		      STA	AccelerateBuffer,X
   2009  fa12		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2010  fa14		       f6 f0		      INC	Player0SpeedL,X
   2011  fa16		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2012  fa18		       f6 f2		      INC	Player0SpeedH,X
   2013  fa1a				   ContinueIncreaseSpeedLoop
   2014  fa1a		       c6 b0		      DEC	Tmp0
   2015  fa1c		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2016  fa1e				   SkipIncreaseCarSpeed
   2017  fa1e
   2018  fa1e				   CheckIfAlreadyMaxSpeed
   2019  fa1e		       b5 f2		      LDA	Player0SpeedH,X
   2020  fa20		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2021  fa22		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2022  fa24		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2023  fa26							;High bit is max, compare the low
   2024  fa26		       b4 c7		      LDY	CurrentCarId,X
   2025  fa28		       b5 f0		      LDA	Player0SpeedL,X
   2026  fa2a		       d9 ad ff 	      CMP	CarIdToMaxSpeedL,Y
   2027  fa2d		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2028  fa2f							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2029  fa2f
   2030  fa2f				   ResetToMaxSpeed		; Speed is more, or is already max
   2031  fa2f		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2032  fa31		       95 f2		      STA	Player0SpeedH,X
   2033  fa33		       b4 c7		      LDY	CurrentCarId,X
   2034  fa35		       b9 ad ff 	      LDA	CarIdToMaxSpeedL,Y
   2035  fa38		       95 f0		      STA	Player0SpeedL,X
   2036  fa3a				   SkipAccelerate
   2037  fa3a		       60		      RTS
   2038  fa3b
   2039  fa3b							;Tmp0 Traffic Offset to compare with next checkpoint
   2040  fa3b				   ProcessPlayerStatus
   2041  fa3b				   IsGameOver
   2042  fa3b		       b5 b8		      LDA	CountdownTimer,X
   2043  fa3d		       15 f0		      ORA	Player0SpeedL,X
   2044  fa3f		       15 f2		      ORA	Player0SpeedH,X
   2045  fa41		       d0 0b		      BNE	IsCheckpoint
   2046  fa43		       a9 01		      LDA	#1
   2047  fa45		       95 cb		      STA	ScoreFontColorHoldChange,X
   2048  fa47		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2049  fa49		       95 c9		      STA	ScoreFontColor,X
   2050  fa4b		       4c 80 fa 	      JMP	SkipIsTimeOver
   2051  fa4e
   2052  fa4e				   IsCheckpoint
   2053  fa4e		       b5 cd		      LDA	NextCheckpoint,X
   2054  fa50		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2055  fa52		       d0 20		      BNE	SkipIsCheckpoint
   2056  fa54		       18		      CLC
   2057  fa55		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2058  fa57		       95 cd		      STA	NextCheckpoint,X
   2059  fa59		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2060  fa5b		       95 c9		      STA	ScoreFontColor,X
   2061  fa5d		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2062  fa5f		       95 cb		      STA	ScoreFontColorHoldChange,X
   2063  fa61		       b5 b8		      LDA	CountdownTimer,X
   2064  fa63		       18		      CLC
   2065  fa64		       75 c0		      ADC	CheckpointTime,X
   2066  fa66		       95 b8		      STA	CountdownTimer,X
   2067  fa68		       90 04		      BCC	JumpSkipTimeOver
   2068  fa6a		       a9 ff		      LDA	#$FF
   2069  fa6c		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2070  fa6e				   JumpSkipTimeOver
   2071  fa6e		       20 f3 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2072  fa71		       4c 80 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2073  fa74				   SkipIsCheckpoint
   2074  fa74
   2075  fa74				   IsTimeOver
   2076  fa74		       b5 b8		      LDA	CountdownTimer,X
   2077  fa76		       d0 08		      BNE	SkipIsTimeOver
   2078  fa78		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2079  fa7a		       95 cb		      STA	ScoreFontColorHoldChange,X
   2080  fa7c		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2081  fa7e		       95 c9		      STA	ScoreFontColor,X
   2082  fa80				   SkipIsTimeOver
   2083  fa80		       60		      RTS
   2084  fa81
   2085  fa81
   2086  fa81				   EverySecond		; 64 frames to be more precise
   2087  fa81		       a9 3f		      LDA	#%00111111
   2088  fa83		       25 8c		      AND	FrameCount0
   2089  fa85		       d0 06		      BNE	SkipEverySecondAction
   2090  fa87		       d5 b8		      CMP	CountdownTimer,X
   2091  fa89		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2092  fa8b		       d6 b8		      DEC	CountdownTimer,X
   2093  fa8d				   SkipEverySecondAction
   2094  fa8d		       60		      RTS
   2095  fa8e
   2096  fa8e				   CalculateGear
   2097  fa8e		       b5 f0		      LDA	Player0SpeedL,X	;3
   2098  fa90		       29 80		      AND	#%10000000	;2
   2099  fa92		       15 f2		      ORA	Player0SpeedH,X	;3
   2100  fa94		       18		      CLC		;2
   2101  fa95		       2a		      ROL		;2
   2102  fa96		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2103  fa98		       95 d5		      STA	Gear,X
   2104  fa9a		       60		      RTS
   2105  fa9b
   2106  fa9b				   ProcessScoreFontColor
   2107  fa9b		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2108  fa9d		       f0 06		      BEQ	ResetScoreFontColor
   2109  fa9f		       88		      DEY
   2110  faa0		       94 cb		      STY	ScoreFontColorHoldChange,X
   2111  faa2		       4c aa fa 	      JMP	SkipScoreFontColor
   2112  faa5				   ResetScoreFontColor
   2113  faa5		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2114  faa8		       95 c9		      STA	ScoreFontColor,X
   2115  faaa				   SkipScoreFontColor
   2116  faaa		       60		      RTS
   2117  faab
   2118  faab							; Moved here because of rom space.
   2119  faab							; The only SBR in constants space
   2120  faab				   DrawQrCode
   2121  faab		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2122  faad		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2123  faaf		       a9 01		      LDA	#%00000001	; Mirror playfield
   2124  fab1		       85 0a		      STA	CTRLPF
   2125  fab3		       20 b1 f6 	      JSR	ClearAll	; To be 100 sure!
   2126  fab6		       ad 82 02 	      LDA	SWCHB
   2127  fab9		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2128  fabb		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2129  fabd		       f0 07		      BEQ	StoreReversedQrCode
   2130  fabf		       86 09		      STX	COLUBK
   2131  fac1		       84 08		      STY	COLUPF
   2132  fac3		       4c ca fa 	      JMP	ContinueQrCode
   2133  fac6				   StoreReversedQrCode
   2134  fac6		       86 08		      STX	COLUPF
   2135  fac8		       84 09		      STY	COLUBK
   2136  faca
   2137  faca				   ContinueQrCode
   2138  faca		       a2 09		      LDX	#9
   2139  facc		       20 00 f8 	      JSR	HMoveXTimes
   2140  facf		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2141  fad1		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2142  fad3		       20 d9 f7 	      JSR	WaitForVblankEnd
   2143  fad6		       20 ec f7 	      JSR	Sleep8Lines
   2144  fad9		       20 ec f7 	      JSR	Sleep8Lines
   2145  fadc		       20 ec f7 	      JSR	Sleep8Lines
   2146  fadf
   2147  fadf				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2148  fadf		       85 02		      STA	WSYNC
   2149  fae1		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2150  fae4		       85 0e		      STA	PF1	;3
   2151  fae6		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2152  fae9		       85 0f		      STA	PF2	;3
      0  faeb					      SLEEP	27	; 
      1  faeb				   .CYCLES    SET	27
      2  faeb
      3  faeb				  -	      IF	.CYCLES < 2
      4  faeb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  faeb				  -	      ERR
      6  faeb					      ENDIF
      7  faeb
      8  faeb					      IF	.CYCLES & 1
      9  faeb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  faeb				  -	      nop	0
     11  faeb					      ELSE
     12  faeb		       24 00		      bit	VSYNC
     13  faed					      ENDIF
     14  faed				   .CYCLES    SET	.CYCLES - 3
     15  faed					      ENDIF
     16  faed
     17  faed					      REPEAT	.CYCLES / 2
     18  faed		       ea		      nop
     17  faed					      REPEND
     18  faee		       ea		      nop
     17  faee					      REPEND
     18  faef		       ea		      nop
     17  faef					      REPEND
     18  faf0		       ea		      nop
     17  faf0					      REPEND
     18  faf1		       ea		      nop
     17  faf1					      REPEND
     18  faf2		       ea		      nop
     17  faf2					      REPEND
     18  faf3		       ea		      nop
     17  faf3					      REPEND
     18  faf4		       ea		      nop
     17  faf4					      REPEND
     18  faf5		       ea		      nop
     17  faf5					      REPEND
     18  faf6		       ea		      nop
     17  faf6					      REPEND
     18  faf7		       ea		      nop
     17  faf7					      REPEND
     18  faf8		       ea		      nop
     19  faf9					      REPEND
   2154  faf9		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2155  fafc		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2156  fafe		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2157  fb01		       85 0e		      STA	PF1	;3
   2158  fb03
   2159  fb03		       ca		      DEX		;2
   2160  fb04		       d0 d9		      BNE	QrCodeLoop	;2
   2161  fb06		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2162  fb08		       88		      DEY		;2
   2163  fb09		       10 d4		      BPL	QrCodeLoop	;4
   2164  fb0b
   2165  fb0b				   EndQrCodeLoop
   2166  fb0b		       85 02		      STA	WSYNC	;
   2167  fb0d		       a9 00		      LDA	#0
   2168  fb0f		       85 0e		      STA	PF1	;3
   2169  fb11		       85 0f		      STA	PF2	;3
   2170  fb13
   2171  fb13		       20 f3 f7 	      JSR	Sleep32Lines
   2172  fb16		       4c 48 f5 	      JMP	PrepareOverscan
   2173  fb19
   2174  fb19							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2175  fc00					      org	$FC00
   2176  fc00				   QrCode1
   2177  fc00		       1f		      .byte.b	#%00011111
   2178  fc01		       10		      .byte.b	#%00010000
   2179  fc02		       17		      .byte.b	#%00010111
   2180  fc03		       17		      .byte.b	#%00010111
   2181  fc04		       17		      .byte.b	#%00010111
   2182  fc05		       10		      .byte.b	#%00010000
   2183  fc06		       1f		      .byte.b	#%00011111
   2184  fc07		       00		      .byte.b	#%00000000
   2185  fc08		       17		      .byte.b	#%00010111
   2186  fc09		       10		      .byte.b	#%00010000
   2187  fc0a		       1d		      .byte.b	#%00011101
   2188  fc0b		       16		      .byte.b	#%00010110
   2189  fc0c		       03		      .byte.b	#%00000011
   2190  fc0d		       19		      .byte.b	#%00011001
   2191  fc0e		       13		      .byte.b	#%00010011
   2192  fc0f		       1c		      .byte.b	#%00011100
   2193  fc10		       0b		      .byte.b	#%00001011
   2194  fc11		       00		      .byte.b	#%00000000
   2195  fc12		       1f		      .byte.b	#%00011111
   2196  fc13		       10		      .byte.b	#%00010000
   2197  fc14		       17		      .byte.b	#%00010111
   2198  fc15		       17		      .byte.b	#%00010111
   2199  fc16		       17		      .byte.b	#%00010111
   2200  fc17		       10		      .byte.b	#%00010000
   2201  fc18		       1f		      .byte.b	#%00011111
   2202  fc19
   2203  fc19				   QrCode2
   2204  fc19		       c3		      .byte.b	#%11000011
   2205  fc1a		       9a		      .byte.b	#%10011010
   2206  fc1b		       82		      .byte.b	#%10000010
   2207  fc1c		       da		      .byte.b	#%11011010
   2208  fc1d		       aa		      .byte.b	#%10101010
   2209  fc1e		       ca		      .byte.b	#%11001010
   2210  fc1f		       f3		      .byte.b	#%11110011
   2211  fc20		       78		      .byte.b	#%01111000
   2212  fc21		       df		      .byte.b	#%11011111
   2213  fc22		       fc		      .byte.b	#%11111100
   2214  fc23		       c7		      .byte.b	#%11000111
   2215  fc24		       98		      .byte.b	#%10011000
   2216  fc25		       23		      .byte.b	#%00100011
   2217  fc26		       b9		      .byte.b	#%10111001
   2218  fc27		       d2		      .byte.b	#%11010010
   2219  fc28		       30		      .byte.b	#%00110000
   2220  fc29		       eb		      .byte.b	#%11101011
   2221  fc2a		       28		      .byte.b	#%00101000
   2222  fc2b		       ab		      .byte.b	#%10101011
   2223  fc2c		       72		      .byte.b	#%01110010
   2224  fc2d		       fa		      .byte.b	#%11111010
   2225  fc2e		       7a		      .byte.b	#%01111010
   2226  fc2f		       32		      .byte.b	#%00110010
   2227  fc30		       3a		      .byte.b	#%00111010
   2228  fc31		       63		      .byte.b	#%01100011
   2229  fc32
   2230  fc32				   QrCode3
   2231  fc32		       98		      .byte.b	#%10011000
   2232  fc33		       c3		      .byte.b	#%11000011
   2233  fc34		       39		      .byte.b	#%00111001
   2234  fc35		       34		      .byte.b	#%00110100
   2235  fc36		       ff		      .byte.b	#%11111111
   2236  fc37		       71		      .byte.b	#%01110001
   2237  fc38		       d5		      .byte.b	#%11010101
   2238  fc39		       d1		      .byte.b	#%11010001
   2239  fc3a		       5f		      .byte.b	#%01011111
   2240  fc3b		       26		      .byte.b	#%00100110
   2241  fc3c		       2d		      .byte.b	#%00101101
   2242  fc3d		       e9		      .byte.b	#%11101001
   2243  fc3e		       d6		      .byte.b	#%11010110
   2244  fc3f		       26		      .byte.b	#%00100110
   2245  fc40		       ba		      .byte.b	#%10111010
   2246  fc41		       03		      .byte.b	#%00000011
   2247  fc42		       dd		      .byte.b	#%11011101
   2248  fc43		       e0		      .byte.b	#%11100000
   2249  fc44		       57		      .byte.b	#%01010111
   2250  fc45		       14		      .byte.b	#%00010100
   2251  fc46		       35		      .byte.b	#%00110101
   2252  fc47		       e5		      .byte.b	#%11100101
   2253  fc48		       b5		      .byte.b	#%10110101
   2254  fc49		       d4		      .byte.b	#%11010100
   2255  fc4a		       97		      .byte.b	#%10010111
   2256  fc4b
   2257  fc4b				   QrCode4
   2258  fc4b		       09		      .byte.b	#%00001001
   2259  fc4c		       0e		      .byte.b	#%00001110
   2260  fc4d		       0f		      .byte.b	#%00001111
   2261  fc4e		       0c		      .byte.b	#%00001100
   2262  fc4f		       0c		      .byte.b	#%00001100
   2263  fc50		       08		      .byte.b	#%00001000
   2264  fc51		       08		      .byte.b	#%00001000
   2265  fc52		       06		      .byte.b	#%00000110
   2266  fc53		       06		      .byte.b	#%00000110
   2267  fc54		       0b		      .byte.b	#%00001011
   2268  fc55		       0f		      .byte.b	#%00001111
   2269  fc56		       04		      .byte.b	#%00000100
   2270  fc57		       08		      .byte.b	#%00001000
   2271  fc58		       0f		      .byte.b	#%00001111
   2272  fc59		       09		      .byte.b	#%00001001
   2273  fc5a		       07		      .byte.b	#%00000111
   2274  fc5b		       05		      .byte.b	#%00000101
   2275  fc5c		       00		      .byte.b	#%00000000
   2276  fc5d		       0f		      .byte.b	#%00001111
   2277  fc5e		       08		      .byte.b	#%00001000
   2278  fc5f		       0b		      .byte.b	#%00001011
   2279  fc60		       0b		      .byte.b	#%00001011
   2280  fc61		       0b		      .byte.b	#%00001011
   2281  fc62		       08		      .byte.b	#%00001000
   2282  fc63		       0f		      .byte.b	#%00001111
   2283  fc64
   2284  fc64				   PlayerToUpMask
   2285  fc64		       10		      .byte.b	#%00010000	;
   2286  fc65		       01		      .byte.b	#%00000001	;
   2287  fc66
   2288  fc66				   PlayerToDownMask
   2289  fc66		       20		      .byte.b	#%00100000	;
   2290  fc67		       02		      .byte.b	#%00000010	;
   2291  fc68
   2292  fc68				   PlayerToLeftMask
   2293  fc68		       40		      .byte.b	#%01000000	;
   2294  fc69		       04		      .byte.b	#%00000100	;
   2295  fc6a
   2296  fc6a				   PlayerToRightMask
   2297  fc6a		       80		      .byte.b	#%10000000	;
   2298  fc6b		       08		      .byte.b	#%00001000	;
   2299  fc6c
   2300  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2301  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2302  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2303  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2304  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2305  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2306  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2307  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2308  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2309  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2310  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2311  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2312  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2313  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2314  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2315  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2316  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2317  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2318  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2319  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2320  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2321  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2322  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2323  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2324  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2325  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2326  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2327  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2328  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2329  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2330  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2331  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2332  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2333  fc8c
   2334  fc8c
   2335  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2336  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2337  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2338  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2339  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2340  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2341  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2342  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2343  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2344  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2345  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2346  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2347  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2348  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2349  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2350  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2351  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2352  fc9c
   2353  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2354  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2355  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2356  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2357  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2358  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2359  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2360  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2361  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2362  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2363  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2364  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2365  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2366  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2367  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2368  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2369  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2370  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2371  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2372  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2373  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2374  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2375  fcb1
   2376  fcb1				   PlayerToDefaultColor
   2377  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2378  fcb2		       96		      .byte.b	#PLAYER1_COLOR
   2379  fcb3
   2380  fd00					      org	$FD00
   2381  fd00				   Font
   2382  fd00				   C0
   2383  fd00		       e7		      .byte.b	#%11100111	;
   2384  fd01		       a5		      .byte.b	#%10100101	; 
   2385  fd02		       a5		      .byte.b	#%10100101	; 
   2386  fd03		       a5		      .byte.b	#%10100101	; 
   2387  fd04		       e7		      .byte.b	#%11100111	;	
   2388  fd05				   C1
   2389  fd05		       e7		      .byte.b	#%11100111	;
   2390  fd06		       42		      .byte.b	#%01000010	; 
   2391  fd07		       42		      .byte.b	#%01000010	; 
   2392  fd08		       42		      .byte.b	#%01000010	; 
   2393  fd09		       66		      .byte.b	#%01100110	;
   2394  fd0a				   C2
   2395  fd0a		       e7		      .byte.b	#%11100111	;
   2396  fd0b		       24		      .byte.b	#%00100100	; 
   2397  fd0c		       e7		      .byte.b	#%11100111	; 
   2398  fd0d		       81		      .byte.b	#%10000001	; 
   2399  fd0e		       e7		      .byte.b	#%11100111	;
   2400  fd0f				   C3
   2401  fd0f		       e7		      .byte.b	#%11100111	;
   2402  fd10		       81		      .byte.b	#%10000001	; 
   2403  fd11		       e7		      .byte.b	#%11100111	; 
   2404  fd12		       81		      .byte.b	#%10000001	; 
   2405  fd13		       e7		      .byte.b	#%11100111	;
   2406  fd14				   C4
   2407  fd14		       81		      .byte.b	#%10000001	;
   2408  fd15		       81		      .byte.b	#%10000001	; 
   2409  fd16		       e7		      .byte.b	#%11100111	; 
   2410  fd17		       a5		      .byte.b	#%10100101	; 
   2411  fd18		       a5		      .byte.b	#%10100101	;
   2412  fd19				   C5
   2413  fd19		       e7		      .byte.b	#%11100111	;
   2414  fd1a		       81		      .byte.b	#%10000001	; 
   2415  fd1b		       e7		      .byte.b	#%11100111	; 
   2416  fd1c		       24		      .byte.b	#%00100100	; 
   2417  fd1d		       e7		      .byte.b	#%11100111	;
   2418  fd1e				   C6
   2419  fd1e		       e7		      .byte.b	#%11100111	;
   2420  fd1f		       a5		      .byte.b	#%10100101	; 
   2421  fd20		       e7		      .byte.b	#%11100111	; 
   2422  fd21		       24		      .byte.b	#%00100100	; 
   2423  fd22		       e7		      .byte.b	#%11100111	;
   2424  fd23				   C7
   2425  fd23		       81		      .byte.b	#%10000001	;
   2426  fd24		       81		      .byte.b	#%10000001	; 
   2427  fd25		       81		      .byte.b	#%10000001	; 
   2428  fd26		       81		      .byte.b	#%10000001	; 
   2429  fd27		       e7		      .byte.b	#%11100111	;
   2430  fd28				   C8
   2431  fd28		       e7		      .byte.b	#%11100111	;
   2432  fd29		       a5		      .byte.b	#%10100101	; 
   2433  fd2a		       e7		      .byte.b	#%11100111	; 
   2434  fd2b		       a5		      .byte.b	#%10100101	; 
   2435  fd2c		       e7		      .byte.b	#%11100111	;
   2436  fd2d				   C9
   2437  fd2d		       e7		      .byte.b	#%11100111	;
   2438  fd2e		       81		      .byte.b	#%10000001	; 
   2439  fd2f		       e7		      .byte.b	#%11100111	; 
   2440  fd30		       a5		      .byte.b	#%10100101	; 
   2441  fd31		       e7		      .byte.b	#%11100111	;
   2442  fd32				   CA
   2443  fd32		       a5		      .byte.b	#%10100101	;
   2444  fd33		       a5		      .byte.b	#%10100101	; 
   2445  fd34		       e7		      .byte.b	#%11100111	; 
   2446  fd35		       a5		      .byte.b	#%10100101	; 
   2447  fd36		       e7		      .byte.b	#%11100111	;
   2448  fd37				   CB
   2449  fd37		       66		      .byte.b	#%01100110	;
   2450  fd38		       a5		      .byte.b	#%10100101	; 
   2451  fd39		       66		      .byte.b	#%01100110	; 
   2452  fd3a		       a5		      .byte.b	#%10100101	;
   2453  fd3b		       66		      .byte.b	#%01100110	;
   2454  fd3c				   CC
   2455  fd3c		       e7		      .byte.b	#%11100111	;
   2456  fd3d		       24		      .byte.b	#%00100100	; 
   2457  fd3e		       24		      .byte.b	#%00100100	; 
   2458  fd3f		       24		      .byte.b	#%00100100	;
   2459  fd40		       e7		      .byte.b	#%11100111	;
   2460  fd41
   2461  fd41				   CD
   2462  fd41		       66		      .byte.b	#%01100110	;
   2463  fd42		       a5		      .byte.b	#%10100101	; 
   2464  fd43		       a5		      .byte.b	#%10100101	; 
   2465  fd44		       a5		      .byte.b	#%10100101	;
   2466  fd45		       66		      .byte.b	#%01100110	;
   2467  fd46
   2468  fd46				   CE
   2469  fd46		       e7		      .byte.b	#%11100111	;
   2470  fd47		       24		      .byte.b	#%00100100	; 
   2471  fd48		       e7		      .byte.b	#%11100111	; 
   2472  fd49		       24		      .byte.b	#%00100100	; 
   2473  fd4a		       e7		      .byte.b	#%11100111	;
   2474  fd4b
   2475  fd4b				   CF
   2476  fd4b		       24		      .byte.b	#%00100100	;
   2477  fd4c		       24		      .byte.b	#%00100100	; 
   2478  fd4d		       e7		      .byte.b	#%11100111	; 
   2479  fd4e		       24		      .byte.b	#%00100100	; 
   2480  fd4f		       e7		      .byte.b	#%11100111	;
   2481  fd50
   2482  fd50				   CG
   2483  fd50		       c3		      .byte.b	#%11000011	;
   2484  fd51		       a5		      .byte.b	#%10100101	; 
   2485  fd52		       a5		      .byte.b	#%10100101	; 
   2486  fd53		       24		      .byte.b	#%00100100	; 
   2487  fd54		       c3		      .byte.b	#%11000011	;	
   2488  fd55
   2489  fd55				   CH
   2490  fd55		       a5		      .byte.b	#%10100101	;
   2491  fd56		       a5		      .byte.b	#%10100101	; 
   2492  fd57		       e7		      .byte.b	#%11100111	; 
   2493  fd58		       a5		      .byte.b	#%10100101	; 
   2494  fd59		       a5		      .byte.b	#%10100101	;
   2495  fd5a
   2496  fd5a				   CI
   2497  fd5a		       e7		      .byte.b	#%11100111	;
   2498  fd5b		       42		      .byte.b	#%01000010	; 
   2499  fd5c		       42		      .byte.b	#%01000010	; 
   2500  fd5d		       42		      .byte.b	#%01000010	; 
   2501  fd5e		       e7		      .byte.b	#%11100111	;
   2502  fd5f
   2503  fd5f				   CJ
   2504  fd5f		       e7		      .byte.b	#%11100111	;
   2505  fd60		       a5		      .byte.b	#%10100101	; 
   2506  fd61		       81		      .byte.b	#%10000001	; 
   2507  fd62		       81		      .byte.b	#%10000001	; 
   2508  fd63		       81		      .byte.b	#%10000001	;	
   2509  fd64
   2510  fd64				   CK
   2511  fd64		       a5		      .byte.b	#%10100101	;
   2512  fd65		       a5		      .byte.b	#%10100101	; 
   2513  fd66		       66		      .byte.b	#%01100110	; 
   2514  fd67		       a5		      .byte.b	#%10100101	; 
   2515  fd68		       a5		      .byte.b	#%10100101	;
   2516  fd69
   2517  fd69				   CL
   2518  fd69		       e7		      .byte.b	#%11100111	;
   2519  fd6a		       24		      .byte.b	#%00100100	; 
   2520  fd6b		       24		      .byte.b	#%00100100	; 
   2521  fd6c		       24		      .byte.b	#%00100100	; 
   2522  fd6d		       24		      .byte.b	#%00100100	;
   2523  fd6e
   2524  fd6e				   CM
   2525  fd6e		       a5		      .byte.b	#%10100101	;
   2526  fd6f		       a5		      .byte.b	#%10100101	; 
   2527  fd70		       a5		      .byte.b	#%10100101	; 
   2528  fd71		       e7		      .byte.b	#%11100111	; 
   2529  fd72		       a5		      .byte.b	#%10100101	;
   2530  fd73
   2531  fd73				   CN
   2532  fd73		       a5		      .byte.b	#%10100101	;
   2533  fd74		       a5		      .byte.b	#%10100101	; 
   2534  fd75		       a5		      .byte.b	#%10100101	; 
   2535  fd76		       a5		      .byte.b	#%10100101	; 
   2536  fd77		       66		      .byte.b	#%01100110	;	
   2537  fd78
   2538  fd78
   2539  fd78				   CO
   2540  fd78		       42		      .byte.b	#%01000010	;
   2541  fd79		       a5		      .byte.b	#%10100101	; 
   2542  fd7a		       a5		      .byte.b	#%10100101	; 
   2543  fd7b		       a5		      .byte.b	#%10100101	; 
   2544  fd7c		       42		      .byte.b	#%01000010	;	
   2545  fd7d
   2546  fd7d				   CP
   2547  fd7d		       24		      .byte.b	#%00100100	;
   2548  fd7e		       24		      .byte.b	#%00100100	; 
   2549  fd7f		       e7		      .byte.b	#%11100111	; 
   2550  fd80		       a5		      .byte.b	#%10100101	; 
   2551  fd81		       e7		      .byte.b	#%11100111	;
   2552  fd82
   2553  fd82				   CQ
   2554  fd82		       81		      .byte.b	#%10000001	;
   2555  fd83		       e5		      .byte.b	#%11100101	; 
   2556  fd84		       a5		      .byte.b	#%10100101	; 
   2557  fd85		       a5		      .byte.b	#%10100101	; 
   2558  fd86		       e7		      .byte.b	#%11100111	;	
   2559  fd87
   2560  fd87				   CR
   2561  fd87		       a5		      .byte.b	#%10100101	;
   2562  fd88		       a5		      .byte.b	#%10100101	; 
   2563  fd89		       66		      .byte.b	#%01100110	; 
   2564  fd8a		       a5		      .byte.b	#%10100101	; 
   2565  fd8b		       66		      .byte.b	#%01100110	;
   2566  fd8c
   2567  fd8c				   CS
   2568  fd8c		       66		      .byte.b	#%01100110	;
   2569  fd8d		       81		      .byte.b	#%10000001	; 
   2570  fd8e		       42		      .byte.b	#%01000010	; 
   2571  fd8f		       24		      .byte.b	#%00100100	; 
   2572  fd90		       c3		      .byte.b	#%11000011	;
   2573  fd91
   2574  fd91				   CT
   2575  fd91		       42		      .byte.b	#%01000010	;
   2576  fd92		       42		      .byte.b	#%01000010	; 
   2577  fd93		       42		      .byte.b	#%01000010	; 
   2578  fd94		       42		      .byte.b	#%01000010	; 
   2579  fd95		       e7		      .byte.b	#%11100111	;
   2580  fd96
   2581  fd96				   CU
   2582  fd96		       e7		      .byte.b	#%11100111	;
   2583  fd97		       a5		      .byte.b	#%10100101	; 
   2584  fd98		       a5		      .byte.b	#%10100101	; 
   2585  fd99		       a5		      .byte.b	#%10100101	; 
   2586  fd9a		       a5		      .byte.b	#%10100101	;	
   2587  fd9b
   2588  fd9b				   CW
   2589  fd9b		       a5		      .byte.b	#%10100101	;
   2590  fd9c		       e7		      .byte.b	#%11100111	; 
   2591  fd9d		       a5		      .byte.b	#%10100101	; 
   2592  fd9e		       a5		      .byte.b	#%10100101	; 
   2593  fd9f		       a5		      .byte.b	#%10100101	;
   2594  fda0
   2595  fda0				   CY
   2596  fda0		       42		      .byte.b	#%01000010	;
   2597  fda1		       42		      .byte.b	#%01000010	; 
   2598  fda2		       42		      .byte.b	#%01000010	; 
   2599  fda3		       a5		      .byte.b	#%10100101	; 
   2600  fda4		       a5		      .byte.b	#%10100101	;
   2601  fda5
   2602  fda5				   Exclamation
   2603  fda5		       42		      .byte.b	#%01000010	;
   2604  fda6		       00		      .byte.b	#%00000000	; 
   2605  fda7		       42		      .byte.b	#%01000010	; 
   2606  fda8		       42		      .byte.b	#%01000010	; 
   2607  fda9		       42		      .byte.b	#%01000010	;
   2608  fdaa
   2609  fdaa				   Pipe
   2610  fdaa				   Colon
   2611  fdaa		       42		      .byte.b	#%01000010	;
   2612  fdab		       42		      .byte.b	#%01000010	; 
   2613  fdac		       00		      .byte.b	#%00000000	; 
   2614  fdad		       42		      .byte.b	#%01000010	; 
   2615  fdae		       42		      .byte.b	#%01000010	;
   2616  fdaf
   2617  fdaf				   Space
   2618  fdaf				   C0B
   2619  fdaf		       00		      .byte.b	#%00000000	;
   2620  fdb0		       00		      .byte.b	#%00000000	; 
   2621  fdb1		       00		      .byte.b	#%00000000	; 
   2622  fdb2		       00		      .byte.b	#%00000000	; 
   2623  fdb3		       00		      .byte.b	#%00000000	;	
   2624  fdb4				   C1B
   2625  fdb4		       24		      .byte.b	#%00100100	;
   2626  fdb5		       00		      .byte.b	#%00000000	; 
   2627  fdb6		       00		      .byte.b	#%00000000	; 
   2628  fdb7		       00		      .byte.b	#%00000000	; 
   2629  fdb8		       00		      .byte.b	#%00000000	;
   2630  fdb9				   C2B
   2631  fdb9		       66		      .byte.b	#%01100110	;
   2632  fdba		       00		      .byte.b	#%00000000	; 
   2633  fdbb		       00		      .byte.b	#%00000000	; 
   2634  fdbc		       00		      .byte.b	#%00000000	; 
   2635  fdbd		       00		      .byte.b	#%00000000	;
   2636  fdbe				   C3B
   2637  fdbe		       e7		      .byte.b	#%11100111	;
   2638  fdbf		       00		      .byte.b	#%00000000	; 
   2639  fdc0		       00		      .byte.b	#%00000000	; 
   2640  fdc1		       00		      .byte.b	#%00000000	; 
   2641  fdc2		       00		      .byte.b	#%00000000	;
   2642  fdc3				   C4B
   2643  fdc3		       e7		      .byte.b	#%11100111	;
   2644  fdc4		       24		      .byte.b	#%00100100	; 
   2645  fdc5		       00		      .byte.b	#%00000000	; 
   2646  fdc6		       00		      .byte.b	#%00000000	; 
   2647  fdc7		       00		      .byte.b	#%00000000	;
   2648  fdc8				   C5B
   2649  fdc8		       e7		      .byte.b	#%11100111	;
   2650  fdc9		       66		      .byte.b	#%01100110	; 
   2651  fdca		       00		      .byte.b	#%00000000	; 
   2652  fdcb		       00		      .byte.b	#%00000000	; 
   2653  fdcc		       00		      .byte.b	#%00000000	;
   2654  fdcd				   C6B
   2655  fdcd		       e7		      .byte.b	#%11100111	;
   2656  fdce		       e7		      .byte.b	#%11100111	; 
   2657  fdcf		       00		      .byte.b	#%00000000	; 
   2658  fdd0		       00		      .byte.b	#%00000000	; 
   2659  fdd1		       00		      .byte.b	#%00000000	;
   2660  fdd2				   C7B
   2661  fdd2		       e7		      .byte.b	#%11100111	;
   2662  fdd3		       e7		      .byte.b	#%11100111	; 
   2663  fdd4		       24		      .byte.b	#%00100100	; 
   2664  fdd5		       00		      .byte.b	#%00000000	; 
   2665  fdd6		       00		      .byte.b	#%00000000	;
   2666  fdd7				   C8B
   2667  fdd7		       e7		      .byte.b	#%11100111	;
   2668  fdd8		       e7		      .byte.b	#%11100111	; 
   2669  fdd9		       66		      .byte.b	#%01100110	; 
   2670  fdda		       00		      .byte.b	#%00000000	; 
   2671  fddb		       00		      .byte.b	#%00000000	;
   2672  fddc				   C9B
   2673  fddc		       e7		      .byte.b	#%11100111	;
   2674  fddd		       e7		      .byte.b	#%11100111	; 
   2675  fdde		       e7		      .byte.b	#%11100111	; 
   2676  fddf		       00		      .byte.b	#%00000000	; 
   2677  fde0		       00		      .byte.b	#%00000000	;
   2678  fde1				   CAB
   2679  fde1		       e7		      .byte.b	#%11100111	;
   2680  fde2		       e7		      .byte.b	#%11100111	; 
   2681  fde3		       e7		      .byte.b	#%11100111	; 
   2682  fde4		       24		      .byte.b	#%00100100	; 
   2683  fde5		       00		      .byte.b	#%00000000	;
   2684  fde6				   CBB
   2685  fde6		       e7		      .byte.b	#%11100111	;
   2686  fde7		       e7		      .byte.b	#%11100111	; 
   2687  fde8		       e7		      .byte.b	#%11100111	; 
   2688  fde9		       66		      .byte.b	#%01100110	; 
   2689  fdea		       00		      .byte.b	#%00000000	;
   2690  fdeb				   CCB
   2691  fdeb		       e7		      .byte.b	#%11100111	;
   2692  fdec		       e7		      .byte.b	#%11100111	; 
   2693  fded		       e7		      .byte.b	#%11100111	; 
   2694  fdee		       e7		      .byte.b	#%11100111	; 
   2695  fdef		       00		      .byte.b	#%00000000	;
   2696  fdf0
   2697  fdf0				   CDB
   2698  fdf0		       e7		      .byte.b	#%11100111	;
   2699  fdf1		       e7		      .byte.b	#%11100111	; 
   2700  fdf2		       e7		      .byte.b	#%11100111	; 
   2701  fdf3		       e7		      .byte.b	#%11100111	; 
   2702  fdf4		       24		      .byte.b	#%00100100	;
   2703  fdf5
   2704  fdf5				   CEB
   2705  fdf5		       e7		      .byte.b	#%11100111	;
   2706  fdf6		       e7		      .byte.b	#%11100111	; 
   2707  fdf7		       e7		      .byte.b	#%11100111	; 
   2708  fdf8		       e7		      .byte.b	#%11100111	; 
   2709  fdf9		       66		      .byte.b	#%01100110	;
   2710  fdfa
   2711  fdfa				   CFB
   2712  fdfa		       e7		      .byte.b	#%11100111	;
   2713  fdfb		       e7		      .byte.b	#%11100111	; 
   2714  fdfc		       e7		      .byte.b	#%11100111	; 
   2715  fdfd		       e7		      .byte.b	#%11100111	; 
   2716  fdfe		       e7		      .byte.b	#%11100111	;
   2717  fdff
   2718  fe00					      org	$FE00
   2719  fe00				   AesTable
   2720  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2721  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2722  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2723  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2724  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2725  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2726  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2727  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2728  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2729  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2730  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2731  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2732  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2733  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2734  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2735  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2736  ff00
   2737  ff00					      org	$FF00
   2738  ff00				   StaticText		; All static text must be on the same MSB block. 
   2739  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2740  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2741  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2742  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2743  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2744  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2745  ff05
   2746  ff05				   HellwayLeftText
   2747  ff05		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2748  ff06		       59		      .byte.b	#<CH + #FONT_OFFSET
   2749  ff07		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2750  ff08		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2751  ff09
   2752  ff09				   HellwayRightText
   2753  ff09		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2754  ff0a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2755  ff0b		       81		      .byte.b	#<CP + #FONT_OFFSET
   2756  ff0c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2757  ff0d		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2758  ff0e
   2759  ff0e				   OpbText
   2760  ff0e		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2761  ff0f		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2762  ff10		       81		      .byte.b	#<CP + #FONT_OFFSET
   2763  ff11		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2764  ff12
   2765  ff12				   YearText
   2766  ff12		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2767  ff13		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2768  ff14		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2769  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2770  ff16		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2771  ff17
   2772  ff17				   GoText
   2773  ff17		       54		      .byte.b	#<CG + #FONT_OFFSET
   2774  ff18		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2775  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2776  ff1a		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2777  ff1b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2778  ff1c
   2779  ff1c				   ReadyText
   2780  ff1c		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2781  ff1d		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2782  ff1e		       36		      .byte.b	#<CA + #FONT_OFFSET
   2783  ff1f		       45		      .byte.b	#<CD + #FONT_OFFSET
   2784  ff20		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2785  ff21
   2786  ff21				   WinText
   2787  ff21		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2788  ff22		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2789  ff23		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2790  ff24
   2791  ff24				   LoseText
   2792  ff24		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2793  ff25		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2794  ff26		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2795  ff27
   2796  ff27				   EndStaticText
   2797  ff27
   2798  ff27				   TachometerSizeLookup1
   2799  ff27		       1f		      .byte.b	#%00011111
   2800  ff28		       3f		      .byte.b	#%00111111
   2801  ff29		       7f		      .byte.b	#%01111111
   2802  ff2a		       ff		      .byte.b	#%11111111
   2803  ff2b		       ff		      .byte.b	#%11111111
   2804  ff2c		       ff		      .byte.b	#%11111111
   2805  ff2d		       ff		      .byte.b	#%11111111
   2806  ff2e		       ff		      .byte.b	#%11111111
   2807  ff2f
   2808  ff2f				   TachometerSizeLookup2
   2809  ff2f		       00		      .byte.b	#%00000000
   2810  ff30		       00		      .byte.b	#%00000000
   2811  ff31		       00		      .byte.b	#%00000000
   2812  ff32		       00		      .byte.b	#%00000000
   2813  ff33		       80		      .byte.b	#%10000000
   2814  ff34		       c0		      .byte.b	#%11000000
   2815  ff35		       e0		      .byte.b	#%11100000
   2816  ff36		       f0		      .byte.b	#%11110000
   2817  ff37
   2818  ff37				   TachometerGearLookup
   2819  ff37		       01		      .byte.b	#%00000001
   2820  ff38		       02		      .byte.b	#%00000010
   2821  ff39		       04		      .byte.b	#%00000100
   2822  ff3a		       08		      .byte.b	#%00001000
   2823  ff3b		       10		      .byte.b	#%00010000
   2824  ff3c		       30		      .byte.b	#%00110000
   2825  ff3d
   2826  ff3d				   EngineSoundType
   2827  ff3d		       02		      .byte.b	#2
   2828  ff3e		       02		      .byte.b	#2
   2829  ff3f		       0e		      .byte.b	#14
   2830  ff40		       06		      .byte.b	#6
   2831  ff41		       06		      .byte.b	#6
   2832  ff42		       0e		      .byte.b	#14
   2833  ff43
   2834  ff43				   EngineBaseFrequence
   2835  ff43		       1f		      .byte.b	#31
   2836  ff44		       15		      .byte.b	#21
   2837  ff45		       14		      .byte.b	#20
   2838  ff46		       1f		      .byte.b	#31
   2839  ff47		       16		      .byte.b	#22
   2840  ff48		       03		      .byte.b	#3
   2841  ff49
   2842  ff49				   CarSprite0		; Upside down, Original Car
   2843  ff49		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2844  ff51				   CarSprite0NoPadding
   2845  ff51		       7e		      .byte.b	#%01111110
   2846  ff52		       24		      .byte.b	#%00100100
   2847  ff53		       bd		      .byte.b	#%10111101
   2848  ff54		       3c		      .byte.b	#%00111100
   2849  ff55		       bd		      .byte.b	#%10111101
   2850  ff56		       3c		      .byte.b	#%00111100
   2851  ff57
   2852  ff57				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2853  ff57		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2854  ff5f				   CarSprite1NoPadding
   2855  ff5f		       bd		      .byte.b	#%10111101
   2856  ff60		       7e		      .byte.b	#%01111110
   2857  ff61		       5a		      .byte.b	#%01011010
   2858  ff62		       66		      .byte.b	#%01100110
   2859  ff63		       bd		      .byte.b	#%10111101
   2860  ff64		       3c		      .byte.b	#%00111100
   2861  ff65
   2862  ff65				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2863  ff65		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2864  ff6d				   CarSprite2NoPadding
   2865  ff6d		       7e		      .byte.b	#%01111110
   2866  ff6e		       a5		      .byte.b	#%10100101
   2867  ff6f		       42		      .byte.b	#%01000010
   2868  ff70		       42		      .byte.b	#%01000010
   2869  ff71		       bd		      .byte.b	#%10111101
   2870  ff72		       7e		      .byte.b	#%01111110
   2871  ff73
   2872  ff73				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2873  ff73		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2874  ff7b				   CarSprite3NoPadding
   2875  ff7b		       3c		      .byte.b	#%00111100
   2876  ff7c		       db		      .byte.b	#%11011011
   2877  ff7d		       db		      .byte.b	#%11011011
   2878  ff7e		       3c		      .byte.b	#%00111100
   2879  ff7f		       5a		      .byte.b	#%01011010
   2880  ff80		       3c		      .byte.b	#%00111100
   2881  ff81
   2882  ff81				   TrafficSpeeds
   2883  ff81		       00		      .byte.b	#$00	;  Trafic0 L
   2884  ff82		       00		      .byte.b	#$00	;  Trafic0 H
   2885  ff83		       0a		      .byte.b	#$0A	;  Trafic1 L
   2886  ff84		       01		      .byte.b	#$01	;  Trafic1 H
   2887  ff85		       e6		      .byte.b	#$E6	;  Trafic2 L
   2888  ff86		       00		      .byte.b	#$00	;  Trafic2 H
   2889  ff87		       c2		      .byte.b	#$C2	;  Trafic3 L
   2890  ff88		       00		      .byte.b	#$00	;  Trafic3 H
   2891  ff89		       9e		      .byte.b	#$9E	;  Trafic4 L
   2892  ff8a		       00		      .byte.b	#$00	;  Trafic4 H
   2893  ff8b				   TrafficSpeedsHighDelta
   2894  ff8b		       00		      .byte.b	#$00	;  Trafic0 L
   2895  ff8c		       00		      .byte.b	#$00	;  Trafic0 H
   2896  ff8d		       0a		      .byte.b	#$0A	;  Trafic1 L
   2897  ff8e		       01		      .byte.b	#$01	;  Trafic1 H
   2898  ff8f		       c8		      .byte.b	#$C8	;  Trafic2 L
   2899  ff90		       00		      .byte.b	#$00	;  Trafic2 H
   2900  ff91		       86		      .byte.b	#$86	;  Trafic3 L
   2901  ff92		       00		      .byte.b	#$00	;  Trafic3 H
   2902  ff93		       44		      .byte.b	#$44	;  Trafic4 L
   2903  ff94		       00		      .byte.b	#$00	;  Trafic4 H
   2904  ff95
   2905  ff95				   CarIdToSpriteAddressL
   2906  ff95		       49		      .byte.b	#<CarSprite0
   2907  ff96		       57		      .byte.b	#<CarSprite1
   2908  ff97		       65		      .byte.b	#<CarSprite2
   2909  ff98		       73		      .byte.b	#<CarSprite3
   2910  ff99
   2911  ff99				   CarIdToSpriteAddressH
   2912  ff99		       ff		      .byte.b	#>CarSprite0
   2913  ff9a		       ff		      .byte.b	#>CarSprite1
   2914  ff9b		       ff		      .byte.b	#>CarSprite2
   2915  ff9c		       ff		      .byte.b	#>CarSprite3
   2916  ff9d
   2917  ff9d				   EnemyCarIdToSpriteAddressL
   2918  ff9d		       51		      .byte.b	#<CarSprite0NoPadding
   2919  ff9e		       5f		      .byte.b	#<CarSprite1NoPadding
   2920  ff9f		       6d		      .byte.b	#<CarSprite2NoPadding
   2921  ffa0		       7b		      .byte.b	#<CarSprite3NoPadding
   2922  ffa1
   2923  ffa1				   EnemyCarIdToSpriteAddressH
   2924  ffa1		       ff		      .byte.b	#>CarSprite0NoPadding
   2925  ffa2		       ff		      .byte.b	#>CarSprite1NoPadding
   2926  ffa3		       ff		      .byte.b	#>CarSprite2NoPadding
   2927  ffa4		       ff		      .byte.b	#>CarSprite3NoPadding
   2928  ffa5
   2929  ffa5				   CarIdToAccelerateSpeed
   2930  ffa5		       80		      .byte.b	#128
   2931  ffa6		       c0		      .byte.b	#192
   2932  ffa7		       60		      .byte.b	#96
   2933  ffa8		       c0		      .byte.b	#192
   2934  ffa9
   2935  ffa9				   CarIdToTimeoverBreakInterval 		; Glide
   2936  ffa9		       03		      .byte.b	#%00000011	;Every 4 frames
   2937  ffaa		       03		      .byte.b	#%00000011	;Every 4 frames
   2938  ffab		       0f		      .byte.b	#%00001111	;Every 16 frames
   2939  ffac		       03		      .byte.b	#%00000011	;Every 4 frames
   2940  ffad
   2941  ffad				   CarIdToMaxSpeedL
   2942  ffad		       80		      .byte.b	#$80
   2943  ffae		       00		      .byte.b	#$00	; One less gear
   2944  ffaf		       80		      .byte.b	#$80
   2945  ffb0		       80		      .byte.b	#$80
   2946  ffb1
   2947  ffb1				   CarIdToMaxGear
   2948  ffb1		       05		      .byte.b	#5
   2949  ffb2		       04		      .byte.b	#4	; One less gear
   2950  ffb3		       05		      .byte.b	#5
   2951  ffb4		       05		      .byte.b	#5
   2952  ffb5
   2953  ffb5				   GearToBreakSpeedTable
   2954  ffb5		       09		      .byte.b	#(BREAK_SPEED - 1)
   2955  ffb6		       09		      .byte.b	#(BREAK_SPEED - 1)
   2956  ffb7		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2957  ffb8		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2958  ffb9		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2959  ffba		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2960  ffbb
   2961  ffbb				   TrafficColorTable
   2962  ffbb		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2963  ffbc		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2964  ffbd		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2965  ffbe		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2966  ffbf
   2967  ffbf				   TrafficChanceTable
   2968  ffbf		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2969  ffc0		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2970  ffc1		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2971  ffc2		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2972  ffc3
   2973  ffc3				   TrafficTimeTable
   2974  ffc3		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2975  ffc4		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2976  ffc5		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2977  ffc6		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2978  ffc7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2979  ffc8
   2980  ffc8
   2981  fffc					      org	$FFFC
   2982  fffc		       00 f0		      .word.w	BeforeStart
   2983  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
