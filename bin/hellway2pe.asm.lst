------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 37	   SCORE_FONT_COLOR_GOOD =	$37
     58  f000		       00 d8	   OP_SCORE_FONT_COLOR_GOOD =	$D8
     59  f000
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 56	   OP_SCORE_FONT_COLOR_BAD =	$56
     62  f000
     63  f000		       00 38	   SCORE_FONT_COLOR_START =	$38	;Cannot be the same as good, font colors = game state
     64  f000		       00 c8	   OP_SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     65  f000
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000		       00 ab	   OP_SCORE_FONT_COLOR_OVER =	$AB
     68  f000
     69  f000		       00 f9	   PLAYER0_COLOR =	$F9
     70  f000		       00 98	   PLAYER1_COLOR =	$98
     71  f000
     72  f000		       00 20	   PLAYER_0_X_START =	32	;
     73  f000		       00 29	   PLAYER_1_X_START =	41	;
     74  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     75  f000
     76  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     77  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     78  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     79  f000
     80  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     81  f000
     82  f000		       00 00	   BLACK      =	$00	;
     83  f000
     84  f000		       00 10	   MAX_GAME_MODE =	16
     85  f000
     86  f000		       00 08	   PARALLAX_SIZE =	8
     87  f000
     88  f000		       00 05	   HALF_TEXT_SIZE =	5
     89  f000
     90  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     91  f000
     92  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     93  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     94  f000		       00 00	   QR_CODE_COLOR =	$00
     95  f000		       00 19	   QR_CODE_SIZE =	25
     96  f000
     97  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     98  f000
     99  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    100  f000		       00 29	   VBLANK_TIMER =	41
    101  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    102  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    103  f000
    104  f000		       00 08	   ENGINE_VOLUME =	8
    105  f000
    106  f000		       00 08	   CAR_SIZE   =	8
    107  f000
    108  f000		       00 80	   GRP0Cache  =	$80
    109  f000		       00 81	   PF0Cache   =	$81
    110  f000		       00 82	   PF1Cache   =	$82
    111  f000		       00 83	   PF2Cache   =	$83
    112  f000		       00 84	   GRP1Cache  =	$84
    113  f000		       00 85	   ENABLCache =	$85
    114  f000		       00 86	   ENAM0Cache =	$86
    115  f000		       00 87	   ENAM1Cache =	$87
    116  f000
    117  f000		       00 8c	   FrameCount0 =	$8C	;
    118  f000		       00 8d	   FrameCount1 =	$8D	;
    119  f000
    120  f000		       00 8e	   CollisionCounter =	$8E
    121  f000		       00 8f	   OpCollisionCounter =	$8F
    122  f000
    123  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    124  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    125  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    126  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    127  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    128  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    129  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    130  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    131  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000		       00 b4	   Tmp4       =	$B4
    139  f000		       00 b5	   Tmp5       =	$B5
    140  f000
    141  f000		       00 b6	   Player0X   =	$B6
    142  f000		       00 b7	   Player1X   =	$B7
    143  f000		       00 b8	   CountdownTimer =	$B8
    144  f000		       00 b9	   OpCountdownTimer =	$B9
    145  f000		       00 ba	   Traffic0Msb =	$BA
    146  f000		       00 bb	   OpTraffic0Msb =	$BB
    147  f000		       00 bc	   SwitchDebounceCounter =	$BC
    148  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    149  f000		       00 be	   TrafficChance =	$BE
    150  f000		       00 bf	   OpTrafficChance =	$BF
    151  f000
    152  f000		       00 c0	   CheckpointTime =	$C0
    153  f000		       00 c1	   OpCheckpointTime =	$C1
    154  f000		       00 c2	   TrafficColor =	$C2
    155  f000		       00 c3	   OpTrafficColor =	$C3
    156  f000		       00 c4	   CurrentDifficulty =	$C4
    157  f000		       00 c5	   OpCurrentDifficulty =	$C5
    158  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    159  f000
    160  f000		       00 c7	   CurrentCarId =	$C7
    161  f000		       00 c8	   OpCurrentCarId =	$C8
    162  f000
    163  f000		       00 c9	   ScoreFontColor =	$C9
    164  f000		       00 ca	   OpScoreFontColor =	$CA
    165  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    166  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    167  f000		       00 cd	   NextCheckpoint =	$CD
    168  f000		       00 ce	   OpNextCheckpoint =	$CE
    169  f000		       00 cf	   OpponentLine =	$CF
    170  f000
    171  f000		       00 d0	   ScoreD0    =	$D0
    172  f000		       00 d1	   ScoreD1    =	$D1
    173  f000		       00 d2	   ScoreD2    =	$D2
    174  f000		       00 d3	   ScoreD3    =	$D3
    175  f000		       00 d4	   ScoreD4    =	$D4
    176  f000
    177  f000		       00 d5	   Gear       =	$D5
    178  f000		       00 d6	   OpGear     =	$D6
    179  f000
    180  f000		       00 d7	   CarSpritePointerL =	$D7
    181  f000		       00 d8	   CarSpritePointerH =	$D8
    182  f000
    183  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    184  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    185  f000
    186  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    187  f000
    188  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    189  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    190  f000
    191  f000		       00 de	   Player0SpeedL =	$DE
    192  f000		       00 df	   Player1SpeedL =	$DF
    193  f000		       00 f0	   Player0SpeedH =	$F0
    194  f000		       00 f1	   Player1SpeedH =	$F1
    195  f000
    196  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 45 f7 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 76 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 de		      STA	Player0SpeedL
    257  f059		       85 df		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   StoreCurrentDifficulty
    274  f071		       86 c4		      STX	CurrentDifficulty
    275  f073		       86 c5		      STX	OpCurrentDifficulty
    276  f075		       a2 00		      LDX	#0
    277  f077		       20 fd f6 	      JSR	ConfigureDifficulty
    278  f07a		       e8		      INX
    279  f07b		       20 fd f6 	      JSR	ConfigureDifficulty
    280  f07e
    281  f07e				   SetGameNotRunning
    282  f07e		       a9 00		      LDA	#0
    283  f080		       85 bd		      STA	GameStatus
    284  f082
    285  f082				   ConfigureTimer
    286  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    287  f084		       85 b8		      STA	CountdownTimer	;3
    288  f086		       85 b9		      STA	OpCountdownTimer	;3
    289  f088
    290  f088				   ConfigurePlayer1XPosition
    291  f088		       a9 29		      LDA	#PLAYER_1_X_START	;2
    292  f08a		       85 b7		      STA	Player1X	;3
    293  f08c
    294  f08c				   ConfigureOpNextCheckpoint
    295  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    296  f08e		       85 ce		      STA	OpNextCheckpoint
    297  f090
    298  f090				   HPositioning 		; Avoid sleep doing needed stuff
    299  f090		       85 02		      STA	WSYNC
    300  f092
    301  f092				   ConfigurePlayer0XPosition
    302  f092		       a9 20		      LDA	#PLAYER_0_X_START	;2
    303  f094		       85 b6		      STA	Player0X	;3
    304  f096
    305  f096				   ConfigureMissileSize
    306  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    307  f098		       85 04		      STA	NUSIZ0	;3
    308  f09a		       85 05		      STA	NUSIZ1	;3
    309  f09c
    310  f09c				   ConfigureNextCheckpoint
    311  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    312  f09e		       85 cd		      STA	NextCheckpoint
    313  f0a0
    314  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    315  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	5	;
      1  f0a2				   .CYCLES    SET	5
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    317  f0a5		       85 12		      STA	RESM0
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    319  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    321  f0ab		       85 13		      STA	RESM1
      0  f0ad					      SLEEP	3
      1  f0ad				   .CYCLES    SET	3
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad					      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad					      ELSE
     12  f0ad		       24 00		      bit	VSYNC
     13  f0af					      ENDIF
     14  f0af				   .CYCLES    SET	.CYCLES - 3
     15  f0af					      ENDIF
     16  f0af
     17  f0af				  -	      REPEAT	.CYCLES / 2
     18  f0af				  -	      nop
     19  f0af					      REPEND
    323  f0af
    324  f0af		       a9 d0		      LDA	#$D0
    325  f0b1		       85 24		      STA	HMBL
    326  f0b3		       85 22		      STA	HMM0
    327  f0b5		       85 23		      STA	HMM1
    328  f0b7		       85 02		      STA	WSYNC
    329  f0b9		       85 2a		      STA	HMOVE
    330  f0bb		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    331  f0bd		       85 2b		      STA	HMCLR
      0  f0bf					      SLEEP	31
      1  f0bf				   .CYCLES    SET	31
      2  f0bf
      3  f0bf				  -	      IF	.CYCLES < 2
      4  f0bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bf				  -	      ERR
      6  f0bf					      ENDIF
      7  f0bf
      8  f0bf					      IF	.CYCLES & 1
      9  f0bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bf				  -	      nop	0
     11  f0bf					      ELSE
     12  f0bf		       24 00		      bit	VSYNC
     13  f0c1					      ENDIF
     14  f0c1				   .CYCLES    SET	.CYCLES - 3
     15  f0c1					      ENDIF
     16  f0c1
     17  f0c1					      REPEAT	.CYCLES / 2
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     19  f0cf					      REPEND
    333  f0cf		       85 10		      STA	RESP0
    334  f0d1		       85 11		      STA	RESP1
    335  f0d3
    336  f0d3				   WaitResetToEnd
    337  f0d3		       ad 84 02 	      LDA	INTIM
    338  f0d6		       d0 fb		      BNE	WaitResetToEnd
    339  f0d8
    340  f0d8				   MainLoop
    341  f0d8		       a9 02		      LDA	#2
    342  f0da		       85 00		      STA	VSYNC
    343  f0dc		       85 02		      STA	WSYNC
    344  f0de		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    345  f0e0							;Some free cycles here!
    346  f0e0				   PrepareMaxHMove
    347  f0e0		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    348  f0e2		       85 09		      STA	COLUBK
      0  f0e4					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e4				   .CYCLES    SET	24 - 11
      2  f0e4
      3  f0e4				  -	      IF	.CYCLES < 2
      4  f0e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e4				  -	      ERR
      6  f0e4					      ENDIF
      7  f0e4
      8  f0e4					      IF	.CYCLES & 1
      9  f0e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e4				  -	      nop	0
     11  f0e4					      ELSE
     12  f0e4		       24 00		      bit	VSYNC
     13  f0e6					      ENDIF
     14  f0e6				   .CYCLES    SET	.CYCLES - 3
     15  f0e6					      ENDIF
     16  f0e6
     17  f0e6					      REPEAT	.CYCLES / 2
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    350  f0eb		       a9 80		      LDA	#$80
    351  f0ed		       85 24		      STA	HMBL
    352  f0ef		       85 22		      STA	HMM0
    353  f0f1		       85 23		      STA	HMM1
    354  f0f3		       85 20		      STA	HMP0
    355  f0f5		       85 21		      STA	HMP1
    356  f0f7		       85 02		      STA	WSYNC
    357  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    358  f0fb
    359  f0fb				   ConfigVBlankTimer
    360  f0fb		       a5 c6		      LDA	GameMode
    361  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    362  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    363  f101		       a9 29		      LDA	#VBLANK_TIMER
    364  f103		       4c 08 f1 	      JMP	SetVblankTimer
    365  f106				   SetVblankTimerQrCode
    366  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    367  f108
    368  f108				   SetVblankTimer
    369  f108		       85 02		      STA	WSYNC	;3
    370  f10a		       8d 96 02 	      STA	TIM64T	;3	
    371  f10d		       a9 00		      LDA	#0	;2
    372  f10f		       85 00		      STA	VSYNC	;3	
    373  f111
    374  f111				   RandomizeGame
    375  f111		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f113		       d0 2d		      BNE	EndRandomizeGame
    377  f115		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f117		       29 02		      AND	#%00000010
    379  f119		       f0 24		      BEQ	DeterministicGame
    380  f11b		       a6 96		      LDX	TrafficOffset1 + 2
    381  f11d		       bd 00 fe 	      LDA	AesTable,X
    382  f120		       45 8c		      EOR	FrameCount0
    383  f122		       85 96		      STA	TrafficOffset1 + 2
    384  f124		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f126		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f128		       bd 00 fe 	      LDA	AesTable,X
    387  f12b		       45 8c		      EOR	FrameCount0
    388  f12d		       85 9a		      STA	TrafficOffset2 + 2
    389  f12f		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f131		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f133		       bd 00 fe 	      LDA	AesTable,X
    392  f136		       45 8c		      EOR	FrameCount0
    393  f138		       85 9e		      STA	TrafficOffset3 + 2
    394  f13a		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13c		       4c 42 f1 	      JMP	EndRandomizeGame
    396  f13f
    397  f13f				   DeterministicGame
    398  f13f		       20 45 f7 	      JSR	DefaultOffsets
    399  f142
    400  f142				   EndRandomizeGame
    401  f142
    402  f142				   CountFrame
    403  f142		       e6 8c		      INC	FrameCount0	; 5
    404  f144		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    405  f146		       e6 8d		      INC	FrameCount1	; 5 
    406  f148				   SkipIncFC1
    407  f148
    408  f148				   CallDrawQrCode
    409  f148		       a5 c6		      LDA	GameMode
    410  f14a		       c9 10		      CMP	#MAX_GAME_MODE
    411  f14c		       d0 03		      BNE	TestIsGameRunning
    412  f14e		       4c cf fa 	      JMP	DrawQrCode
    413  f151
    414  f151							;Does not update the game if not running
    415  f151				   TestIsGameRunning
    416  f151		       a5 bd		      LDA	GameStatus	;3
    417  f153		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    418  f155				   SelectCarWithDpadCall		; Only do it when game is stoped
    419  f155		       a2 00		      LDX	#0	; Player 0
    420  f157		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    421  f159		       85 b0		      STA	Tmp0
    422  f15b		       20 49 f8 	      JSR	SelectCarWithDpad
    423  f15e		       e8		      INX		; Player 1
    424  f15f		       20 49 f8 	      JSR	SelectCarWithDpad
    425  f162
    426  f162							; Needs to draw the opponent in the correct line even when game stoped  
    427  f162							; Draeing is a destructive operation
    428  f162		       20 5b f8 	      JSR	ProcessOpponentLine
    429  f165
    430  f165				   CallConfigureCarSprites
    431  f165		       20 03 f8 	      JSR	ConfigureCarSprites
    432  f168				   SkipUpdateLogicJump
    433  f168		       4c a0 f1 	      JMP	SkipUpdateLogic
    434  f16b				   ContinueWithGameLogic
    435  f16b
    436  f16b				   CallEverySecond		; Timer for now
    437  f16b		       a2 00		      LDX	#0
    438  f16d		       20 81 fa 	      JSR	EverySecond
    439  f170		       e8		      INX
    440  f171		       20 81 fa 	      JSR	EverySecond
    441  f174
    442  f174				   CallProcessSpeed
    443  f174		       a2 00		      LDX	#0
    444  f176		       20 95 f9 	      JSR	ProcessSpeed
    445  f179
    446  f179		       e8		      INX		; Player 1
    447  f17a		       20 95 f9 	      JSR	ProcessSpeed
    448  f17d
    449  f17d				   CallUpdateOffsets
    450  f17d		       a2 00		      LDX	#0	; Player 0
    451  f17f		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    452  f181		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    453  f183		       a5 de		      LDA	Player0SpeedL
    454  f185		       85 b4		      STA	Tmp4
    455  f187		       a5 f0		      LDA	Player0SpeedH
    456  f189		       85 b5		      STA	Tmp5
    457  f18b		       20 42 f9 	      JSR	UpdateOffsets
    458  f18e
    459  f18e							;LDX Exits the call with correct value.
    460  f18e		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    461  f190		       85 b3		      STA	Tmp3
    462  f192		       a5 df		      LDA	Player1SpeedL
    463  f194		       85 b4		      STA	Tmp4
    464  f196		       a5 f1		      LDA	Player1SpeedH
    465  f198		       85 b5		      STA	Tmp5
    466  f19a		       20 42 f9 	      JSR	UpdateOffsets
    467  f19d
    468  f19d				   CallProcessOpponentLine
    469  f19d		       20 5b f8 	      JSR	ProcessOpponentLine
    470  f1a0
    471  f1a0				   SkipUpdateLogic		; Continue here if not paused
    472  f1a0
    473  f1a0				   CallCalculateGear
    474  f1a0		       a2 00		      LDX	#0
    475  f1a2		       20 8e fa 	      JSR	CalculateGear
    476  f1a5		       e8		      INX
    477  f1a6		       20 8e fa 	      JSR	CalculateGear
    478  f1a9
    479  f1a9				   CallProcessFontColor
    480  f1a9		       a5 8c		      LDA	FrameCount0
    481  f1ab		       29 01		      AND	#%00000001
    482  f1ad		       d0 0a		      BNE	ContinueProcessFontColorPlayer0	; Not my frame, always process!
    483  f1af		       a5 f2		      LDA	IsOpponentInFront
    484  f1b1		       f0 06		      BEQ	ContinueProcessFontColorPlayer0	; Oponent not in front
    485  f1b3		       a5 c9		      LDA	ScoreFontColor
    486  f1b5		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    487  f1b7		       f0 15		      BEQ	ContinueProcessFontColorPlayer1	; Opponent is in front! Skip counting checkpoint for the frame (double time)
    488  f1b9				   ContinueProcessFontColorPlayer0
    489  f1b9		       a2 00		      LDX	#0
    490  f1bb		       20 9b fa 	      JSR	ProcessScoreFontColor
    491  f1be				   ContinueProcessIsToUpdateColorPlayer1
    492  f1be		       a5 8c		      LDA	FrameCount0
    493  f1c0		       29 01		      AND	#%00000001
    494  f1c2		       f0 0a		      BEQ	ContinueProcessFontColorPlayer1	; Not my frame, always process!
    495  f1c4		       a5 f2		      LDA	IsOpponentInFront
    496  f1c6		       f0 06		      BEQ	ContinueProcessFontColorPlayer1	; Oponent not in front
    497  f1c8		       a5 ca		      LDA	OpScoreFontColor
    498  f1ca		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    499  f1cc		       f0 05		      BEQ	SkipProcessFontColor	; Opponent is in front and is checkpoint Skip counting checkpoint for the frame (double time)
    500  f1ce				   ContinueProcessFontColorPlayer1
    501  f1ce		       a2 01		      LDX	#1
    502  f1d0		       20 9b fa 	      JSR	ProcessScoreFontColor
    503  f1d3				   SkipProcessFontColor
    504  f1d3
    505  f1d3				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    506  f1d3		       a5 8c		      LDA	FrameCount0
    507  f1d5		       29 01		      AND	#%00000001
    508  f1d7		       d0 0c		      BNE	CallProcessPlayer1Status
    509  f1d9				   CallProcessPlayer0Status
    510  f1d9		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    511  f1db		       85 b0		      STA	Tmp0
    512  f1dd		       a2 00		      LDX	#0
    513  f1df		       20 38 fa 	      JSR	ProcessPlayerStatus
    514  f1e2		       4c ee f1 	      JMP	EndCallProcessPlayerStatus
    515  f1e5				   CallProcessPlayer1Status
    516  f1e5		       a5 a2		      LDA	OpTrafficOffset0 + 2
    517  f1e7		       85 b0		      STA	Tmp0
    518  f1e9		       a2 01		      LDX	#1
    519  f1eb		       20 38 fa 	      JSR	ProcessPlayerStatus
    520  f1ee				   EndCallProcessPlayerStatus
    521  f1ee
    522  f1ee				   CallProcessPlayerSprites
    523  f1ee		       20 03 f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    524  f1f1
    525  f1f1				   CallProcessSound		; We might save cycles by updating one channel per frame.
    526  f1f1		       a2 00		      LDX	#0
    527  f1f3		       a5 92		      LDA	TrafficOffset0 + 2
    528  f1f5		       85 b1		      STA	Tmp1
    529  f1f7		       20 12 f6 	      JSR	ProcessSound
    530  f1fa		       e8		      INX		; Player 1
    531  f1fb		       a5 a2		      LDA	OpTrafficOffset0 + 2
    532  f1fd		       85 b1		      STA	Tmp1
    533  f1ff		       20 12 f6 	      JSR	ProcessSound
    534  f202
    535  f202				   ChooseTextSide		; 
    536  f202		       a5 8c		      LDA	FrameCount0	;3
    537  f204		       29 01		      AND	#%00000001
    538  f206		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    539  f208		       4c b5 f2 	      JMP	RightScoreWrite
    540  f20b
    541  f20b				   LeftScoreWrite
    542  f20b		       a5 bd		      LDA	GameStatus
    543  f20d		       f0 11		      BEQ	PrintHellwayLeft
    544  f20f		       a5 c9		      LDA	ScoreFontColor
    545  f211		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    546  f213		       f0 42		      BEQ	PrintPlayer0Checkpoint
    547  f215		       c9 38		      CMP	#SCORE_FONT_COLOR_START
    548  f217		       f0 46		      BEQ	PrintPlayer0StartGame
    549  f219		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    550  f21b		       f0 29		      BEQ	ProcessPlayer0OverText
    551  f21d				   ContinueP0Score
    552  f21d		       4c 6e f2 	      JMP	Digit0Timer
    553  f220
    554  f220				   PrintHellwayLeft
    555  f220		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    556  f222		       30 08		      BMI	ContinueWithDefaultLeftText
    557  f224				   Player0IsReady
    558  f224		       a2 25		      LDX	#<ReadyText
    559  f226		       20 5a f7 	      JSR	PrintStaticText
    560  f229		       4c 6a f3 	      JMP	RightScoreWriteEnd	;3
    561  f22c				   ContinueWithDefaultLeftText
    562  f22c		       a5 8d		      LDA	FrameCount1
    563  f22e		       29 01		      AND	#1
    564  f230		       d0 05		      BNE	PrintCreditsLeft
    565  f232		       a2 03		      LDX	#<HellwayLeftText - 1	; Padding
    566  f234		       4c 39 f2 	      JMP	PrintGameMode
    567  f237				   PrintCreditsLeft
    568  f237		       a2 0c		      LDX	#<OpbText - 1	; Padding
    569  f239
    570  f239				   PrintGameMode
    571  f239		       20 5a f7 	      JSR	PrintStaticText
    572  f23c		       a6 c6		      LDX	GameMode
    573  f23e		       bd 6c fc 	      LDA	FontLookup,X	;4 
    574  f241		       85 d0		      STA	ScoreD0	;3
    575  f243		       4c 6a f3 	      JMP	RightScoreWriteEnd	;3
    576  f246
    577  f246				   ProcessPlayer0OverText
    578  f246		       a5 f2		      LDA	IsOpponentInFront
    579  f248		       30 05		      BMI	PrintPlayer0Lose
    580  f24a				   PrintPlayer0Win
    581  f24a		       a2 1a		      LDX	#<WinText
    582  f24c		       4c 51 f2 	      JMP	PrintPlayer0Status
    583  f24f				   PrintPlayer0Lose
    584  f24f		       a2 1d		      LDX	#<LoseText
    585  f251				   PrintPlayer0Status
    586  f251		       20 5a f7 	      JSR	PrintStaticText
    587  f254		       4c 8e f2 	      JMP	DistanceCheckpointCount	;3
    588  f257
    589  f257				   PrintPlayer0Checkpoint
    590  f257		       a2 00		      LDX	#<CheckpointText
    591  f259		       20 5a f7 	      JSR	PrintStaticText
    592  f25c		       4c 64 f2 	      JMP	PrintPlayer0ScoreHoldChange	;3
    593  f25f
    594  f25f				   PrintPlayer0StartGame
    595  f25f		       a2 16		      LDX	#<GoText
    596  f261		       20 5a f7 	      JSR	PrintStaticText
    597  f264
    598  f264				   PrintPlayer0ScoreHoldChange
    599  f264		       a2 00		      LDX	#0
    600  f266		       20 ab fa 	      JSR	PrintScoreHoldChange
    601  f269		       85 d4		      STA	ScoreD4
    602  f26b		       4c 6a f3 	      JMP	RightScoreWriteEnd	;3
    603  f26e
    604  f26e				   Digit0Timer
    605  f26e		       a5 b8		      LDA	CountdownTimer	;3
    606  f270		       85 b0		      STA	Tmp0
    607  f272		       20 35 f8 	      JSR	BINBCD8
    608  f275							; LDA Tmp1 Also returned in A
    609  f275		       29 0f		      AND	#%00001111	;2
    610  f277		       aa		      TAX		; 2
    611  f278		       bd 6c fc 	      LDA	FontLookup,X	;4 
    612  f27b		       85 d1		      STA	ScoreD1	;3
    613  f27d
    614  f27d				   Digit1Timer
    615  f27d		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    616  f27f		       4a		      LSR		; 2
    617  f280		       4a		      LSR		; 2
    618  f281		       4a		      LSR		; 2
    619  f282		       4a		      LSR		; 2
    620  f283		       aa		      TAX		; 2
    621  f284		       bd 6c fc 	      LDA	FontLookup,X	;4
    622  f287		       85 d0		      STA	ScoreD0	;3
    623  f289
    624  f289				   SpeedBar
    625  f289		       a2 00		      LDX	#0
    626  f28b		       20 b6 fa 	      JSR	PrintSpeedBar
    627  f28e
    628  f28e				   DistanceCheckpointCount		; Will run all letters in the future
    629  f28e		       a5 ba		      LDA	Traffic0Msb
    630  f290		       29 01		      AND	#%00000001
    631  f292		       0a		      ASL
    632  f293		       0a		      ASL
    633  f294		       0a		      ASL
    634  f295		       0a		      ASL
    635  f296		       85 b0		      STA	Tmp0
    636  f298		       a5 92		      LDA	TrafficOffset0 + 2	;3
    637  f29a		       29 f0		      AND	#%11110000	;2
    638  f29c		       4a		      LSR
    639  f29d		       4a		      LSR
    640  f29e		       4a		      LSR
    641  f29f		       4a		      LSR
    642  f2a0		       05 b0		      ORA	Tmp0
    643  f2a2		       aa		      TAX		; 2
    644  f2a3		       bd 6c fc 	      LDA	FontLookup,X	;4 
    645  f2a6		       85 d3		      STA	ScoreD3	;3
    646  f2a8
    647  f2a8				   DistanceBar		; 16 subdivisions per checkpoint
    648  f2a8		       a5 92		      LDA	TrafficOffset0 + 2	;3
    649  f2aa		       29 0f		      AND	#%00001111	;2
    650  f2ac		       aa		      TAX		; 2
    651  f2ad		       bd 8c fc 	      LDA	BarLookup,X	;4 
    652  f2b0		       85 d4		      STA	ScoreD4	;3
    653  f2b2
    654  f2b2				   EndDrawDistance
    655  f2b2		       4c 6a f3 	      JMP	RightScoreWriteEnd	;3
    656  f2b5
    657  f2b5				   RightScoreWrite
    658  f2b5		       a5 bd		      LDA	GameStatus
    659  f2b7		       f0 11		      BEQ	PrintHellwayRight
    660  f2b9		       a5 ca		      LDA	OpScoreFontColor
    661  f2bb		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    662  f2bd		       f0 50		      BEQ	PrintPlayer1Checkpoint
    663  f2bf		       c9 c8		      CMP	#OP_SCORE_FONT_COLOR_START
    664  f2c1		       f0 54		      BEQ	PrintPlayer1StartGame
    665  f2c3		       c9 ab		      CMP	#OP_SCORE_FONT_COLOR_OVER
    666  f2c5		       f0 37		      BEQ	ProcessPlayer1OverText
    667  f2c7				   ContinueP1Score
    668  f2c7		       4c 26 f3 	      JMP	OpDigit0Timer
    669  f2ca
    670  f2ca				   PrintHellwayRight
    671  f2ca		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    672  f2cc		       30 08		      BMI	ContinueWithDefaultRightText
    673  f2ce				   Player1IsReady
    674  f2ce		       a2 25		      LDX	#<ReadyText
    675  f2d0		       20 5a f7 	      JSR	PrintStaticText
    676  f2d3		       4c 6a f3 	      JMP	RightScoreWriteEnd	;3
    677  f2d6				   ContinueWithDefaultRightText
    678  f2d6		       a5 8d		      LDA	FrameCount1
    679  f2d8		       29 01		      AND	#1
    680  f2da		       d0 05		      BNE	PrintCreditsRight
    681  f2dc		       a2 08		      LDX	#<HellwayRightText
    682  f2de		       4c ed f2 	      JMP	PrintRightIntro
    683  f2e1				   PrintCreditsRight
    684  f2e1		       a5 8d		      LDA	FrameCount1
    685  f2e3		       29 02		      AND	#%00000010
    686  f2e5		       f0 04		      BEQ	PrintYearText
    687  f2e7				   PrintBuildNumberText
    688  f2e7		       a2 20		      LDX	#<BuildNumberText
    689  f2e9		       d0 02		      BNE	PrintRightIntro	; Save one byte, it will neve be equal in not first text constant...
    690  f2eb				   PrintYearText
    691  f2eb		       a2 11		      LDX	#<YearText
    692  f2ed				   PrintRightIntro
    693  f2ed		       20 5a f7 	      JSR	PrintStaticText
    694  f2f0				   PipeOnRuberBandOff
    695  f2f0		       ad 82 02 	      LDA	SWCHB
    696  f2f3		       29 08		      AND	#%00001000
    697  f2f5		       d0 04		      BNE	EndPrintHellwayRight
    698  f2f7		       a9 ae		      LDA	#<Pipe + FONT_OFFSET
    699  f2f9		       85 d0		      STA	ScoreD0
    700  f2fb				   EndPrintHellwayRight
    701  f2fb		       4c 6a f3 	      JMP	RightScoreWriteEnd
    702  f2fe
    703  f2fe				   ProcessPlayer1OverText
    704  f2fe		       a5 f2		      LDA	IsOpponentInFront
    705  f300		       30 05		      BMI	PrintPlayer1Lose
    706  f302				   PrintPlayer1Win
    707  f302		       a2 18		      LDX	#<WinText - 2
    708  f304		       4c 09 f3 	      JMP	PrintPlayer1Status
    709  f307				   PrintPlayer1Lose
    710  f307		       a2 1b		      LDX	#<LoseText - 2
    711  f309				   PrintPlayer1Status
    712  f309		       20 5a f7 	      JSR	PrintStaticText
    713  f30c		       4c 46 f3 	      JMP	OpDistanceCheckpointCount
    714  f30f
    715  f30f				   PrintPlayer1Checkpoint
    716  f30f		       a2 ff		      LDX	#<CheckpointText - 1
    717  f311		       20 5a f7 	      JSR	PrintStaticText
    718  f314		       4c 1c f3 	      JMP	PrintPlayer1ScoreHoldChange	;3
    719  f317
    720  f317				   PrintPlayer1StartGame
    721  f317		       a2 15		      LDX	#<GoText - 1
    722  f319		       20 5a f7 	      JSR	PrintStaticText
    723  f31c
    724  f31c				   PrintPlayer1ScoreHoldChange
    725  f31c		       a2 01		      LDX	#1
    726  f31e		       20 ab fa 	      JSR	PrintScoreHoldChange
    727  f321		       85 d0		      STA	ScoreD0
    728  f323		       4c 6a f3 	      JMP	RightScoreWriteEnd	;3
    729  f326
    730  f326				   OpDigit0Timer
    731  f326		       a5 b9		      LDA	OpCountdownTimer	;3
    732  f328		       85 b0		      STA	Tmp0
    733  f32a		       20 35 f8 	      JSR	BINBCD8
    734  f32d							; LDA Tmp1 Also returned in A
    735  f32d		       29 0f		      AND	#%00001111	;2
    736  f32f		       aa		      TAX		; 2
    737  f330		       bd 6c fc 	      LDA	FontLookup,X	;4 
    738  f333		       85 d4		      STA	ScoreD4	;3
    739  f335
    740  f335				   OpDigit1Timer
    741  f335		       a5 b1		      LDA	Tmp1	;3
    742  f337		       4a		      LSR		; 2
    743  f338		       4a		      LSR		; 2
    744  f339		       4a		      LSR		; 2
    745  f33a		       4a		      LSR		; 2
    746  f33b		       aa		      TAX		; 2
    747  f33c		       bd 6c fc 	      LDA	FontLookup,X	;4
    748  f33f		       85 d3		      STA	ScoreD3	;3
    749  f341
    750  f341				   OpSpeedBar
    751  f341		       a2 01		      LDX	#1
    752  f343		       20 b6 fa 	      JSR	PrintSpeedBar
    753  f346
    754  f346				   OpDistanceCheckpointCount
    755  f346		       a5 bb		      LDA	OpTraffic0Msb
    756  f348		       29 01		      AND	#%00000001
    757  f34a		       0a		      ASL
    758  f34b		       0a		      ASL
    759  f34c		       0a		      ASL
    760  f34d		       0a		      ASL
    761  f34e		       85 b0		      STA	Tmp0
    762  f350		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    763  f352		       29 f0		      AND	#%11110000	;2
    764  f354		       4a		      LSR
    765  f355		       4a		      LSR
    766  f356		       4a		      LSR
    767  f357		       4a		      LSR
    768  f358		       05 b0		      ORA	Tmp0
    769  f35a		       aa		      TAX		; 2
    770  f35b		       bd 6c fc 	      LDA	FontLookup,X	;4 
    771  f35e		       85 d1		      STA	ScoreD1	;3
    772  f360
    773  f360				   OpDistanceBar		; 16 subdivisions per checkpoint
    774  f360		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    775  f362		       29 0f		      AND	#%00001111	;2
    776  f364		       aa		      TAX		; 2
    777  f365		       bd 8c fc 	      LDA	BarLookup,X	;4 
    778  f368		       85 d0		      STA	ScoreD0	;3
    779  f36a
    780  f36a				   ScoreWriteEnd
    781  f36a				   RightScoreWriteEnd
    782  f36a
    783  f36a				   ConfigurePFForScore
    784  f36a		       20 ac f6 	      JSR	ClearAll
    785  f36d		       a9 02		      LDA	#%00000010	; Score mode
    786  f36f		       85 0a		      STA	CTRLPF
    787  f371		       a5 8c		      LDA	FrameCount0	;3
    788  f373		       29 01		      AND	#%00000001
    789  f375		       f0 0b		      BEQ	LeftScoreOn	; Half of the screen with the correct colors.
    790  f377				   RightScoreOn
    791  f377		       a5 ca		      LDA	OpScoreFontColor
    792  f379		       85 07		      STA	COLUP1
    793  f37b		       a9 00		      LDA	#BACKGROUND_COLOR
    794  f37d		       85 06		      STA	COLUP0
    795  f37f		       4c 8a f3 	      JMP	CallWaitForVblankEnd
    796  f382				   LeftScoreOn
    797  f382		       a5 c9		      LDA	ScoreFontColor
    798  f384		       85 06		      STA	COLUP0
    799  f386		       a9 00		      LDA	#BACKGROUND_COLOR
    800  f388		       85 07		      STA	COLUP1
    801  f38a
    802  f38a							; After here we are going to update the screen, No more heavy code
    803  f38a				   CallWaitForVblankEnd
    804  f38a		       20 d4 f7 	      JSR	WaitForVblankEnd
    805  f38d
    806  f38d				   DrawScoreHud
    807  f38d		       20 78 f7 	      JSR	PrintScore
    808  f390
    809  f390							; 4 lines to go crazy
    810  f390		       85 02		      STA	WSYNC
    811  f392							;STA HMOVE
    812  f392
    813  f392		       85 02		      STA	WSYNC
    814  f394		       85 2a		      STA	HMOVE
    815  f396
    816  f396				   PrepareForTraffic
    817  f396		       20 c2 f6 	      JSR	ClearPF	; 32
    818  f399
    819  f399		       85 02		      STA	WSYNC
    820  f39b		       85 2a		      STA	HMOVE
    821  f39d		       85 02		      STA	WSYNC
    822  f39f		       85 2a		      STA	HMOVE
    823  f3a1
    824  f3a1		       a9 30		      LDA	#%00110000	; 2 Score mode
    825  f3a3		       85 0a		      STA	CTRLPF	;3
    826  f3a5
    827  f3a5		       a5 8c		      LDA	FrameCount0	;3
    828  f3a7		       29 01		      AND	#%00000001	;2
    829  f3a9		       aa		      TAX		;2
    830  f3aa		       b5 c2		      LDA	TrafficColor,X	;4
    831  f3ac		       85 08		      STA	COLUPF	;3
    832  f3ae
    833  f3ae		       a9 98		      LDA	#PLAYER1_COLOR	;2
    834  f3b0		       85 07		      STA	COLUP1	;3
    835  f3b2
    836  f3b2		       a5 c9		      LDA	ScoreFontColor	;3
    837  f3b4		       85 06		      STA	COLUP0	;3
    838  f3b6
    839  f3b6		       a5 ca		      LDA	OpScoreFontColor	;3
    840  f3b8		       85 07		      STA	COLUP1	;3
    841  f3ba
    842  f3ba		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    843  f3bc
    844  f3bc		       a5 8c		      LDA	FrameCount0	;Brach flag
    845  f3be		       29 01		      AND	#%00000001
    846  f3c0
    847  f3c0		       d0 03		      BNE	OpScanLoop	;2
    848  f3c2		       4c 7f f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    849  f3c5							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    850  f3c5
    851  f3c5							;main scanline loop...
    852  f3c5				   OpScanLoop
    853  f3c5		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    854  f3c7
    855  f3c7		       a5 80		      LDA	GRP0Cache	;3
    856  f3c9		       85 1b		      STA	GRP0	;3
    857  f3cb
    858  f3cb		       a5 84		      LDA	GRP1Cache	;3
    859  f3cd		       85 1c		      STA	GRP1	;3
    860  f3cf
    861  f3cf		       a5 85		      LDA	ENABLCache	;3
    862  f3d1		       85 1f		      STA	ENABL	;3
    863  f3d3
    864  f3d3		       a5 86		      LDA	ENAM0Cache	;3
    865  f3d5		       85 1d		      STA	ENAM0	;3
    866  f3d7
    867  f3d7		       a5 87		      LDA	ENAM1Cache	;3
    868  f3d9		       85 1e		      STA	ENAM1	;3
    869  f3db
    870  f3db		       a5 81		      LDA	PF0Cache	;3
    871  f3dd		       85 0d		      STA	PF0	;3
    872  f3df
    873  f3df		       a9 00		      LDA	#0	;2
    874  f3e1							;STA PF0	     ;3
    875  f3e1		       85 80		      STA	GRP0Cache	;3
    876  f3e3		       85 86		      STA	ENAM0Cache	;3
    877  f3e5		       85 85		      STA	ENABLCache	;3
    878  f3e7		       85 87		      STA	ENAM1Cache	; 3
    879  f3e9							;STA GRP1Cache ;3
    880  f3e9		       85 0d		      STA	PF0	;3
    881  f3eb							;STA PF2	     ;3
    882  f3eb
    883  f3eb		       a5 83		      LDA	PF2Cache	;3
    884  f3ed		       85 0f		      STA	PF2	;3
    885  f3ef
    886  f3ef				   OpDrawCar0
    887  f3ef		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    888  f3f1		       b0 04		      BCS	OpSkipDrawCar	;2
    889  f3f3		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    890  f3f5		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    891  f3f7				   OpSkipDrawCar
    892  f3f7
    893  f3f7							;BEQ DrawTraffic3
    894  f3f7				   OpDrawTraffic1		; 33
    895  f3f7		       98		      TYA		; 2
    896  f3f8		       18		      CLC		; 2 
    897  f3f9		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    898  f3fb		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    899  f3fd		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    900  f3ff		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    901  f401		       4c 06 f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
    902  f404				   OpEorOffsetWithCarry
    903  f404		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    904  f406				   OpAfterEorOffsetWithCarry		;17
    905  f406		       aa		      TAX		;2
    906  f407		       bd 00 fe 	      LDA	AesTable,X	; 4
    907  f40a		       c5 bf		      CMP	OpTrafficChance	;3
    908  f40c		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    909  f40e		       a9 ff		      LDA	#$FF	;2
    910  f410		       85 86		      STA	ENAM0Cache	;3
    911  f412				   OpFinishDrawTraffic1
    912  f412
    913  f412				   OpErasePF2
    914  f412		       a9 00		      LDA	#0
    915  f414		       85 0f		      STA	PF2
    916  f416
    917  f416				   OpDrawTraffic2		; 33
    918  f416		       98		      TYA		; 2
    919  f417		       18		      CLC		; 2 
    920  f418		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    921  f41a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    922  f41c		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    923  f41e		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    924  f420		       4c 25 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    925  f423				   OpEorOffsetWithCarry2
    926  f423		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    927  f425				   OpAfterEorOffsetWithCarry2		;17
    928  f425		       aa		      TAX		;2
    929  f426		       bd 00 fe 	      LDA	AesTable,X	; 4
    930  f429		       c5 bf		      CMP	OpTrafficChance	;3
    931  f42b		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    932  f42d		       a9 02		      LDA	#%00000010	;2
    933  f42f		       85 85		      STA	ENABLCache	;3
    934  f431				   OpFinishDrawTraffic2
    935  f431
    936  f431							;STA WSYNC ;65 / 137
    937  f431
    938  f431							; LDA Tmp0 ; Flicker this line if drawing car
    939  f431							; BEQ FinishDrawTraffic4
    940  f431				   OpDrawTraffic3		; 33
    941  f431		       98		      TYA		; 2
    942  f432		       18		      CLC		; 2 
    943  f433		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    944  f435		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    945  f437		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    946  f439		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    947  f43b		       4c 40 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    948  f43e				   OpEorOffsetWithCarry3
    949  f43e		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    950  f440				   OpAfterEorOffsetWithCarry3		;17
    951  f440		       aa		      TAX		;2
    952  f441		       bd 00 fe 	      LDA	AesTable,X	; 4
    953  f444		       c5 bf		      CMP	OpTrafficChance	;3
    954  f446		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    955  f448		       a9 02		      LDA	#%00000010	;2
    956  f44a		       85 87		      STA	ENAM1Cache
    957  f44c				   OpFinishDrawTraffic3
    958  f44c
    959  f44c				   OpDrawOponent		;26
    960  f44c		       84 b0		      STY	Tmp0	;3
    961  f44e		       a4 cf		      LDY	OpponentLine	;3
    962  f450		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    963  f452		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    964  f454				   OpDrawOpponent
    965  f454		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    966  f456		       85 80		      STA	GRP0Cache	;3
    967  f458		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    968  f45a		       a4 b0		      LDY	Tmp0	;3
    969  f45c		       4c 70 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    970  f45f				   OpSkipDrawOpponent
    971  f45f		       c6 cf		      DEC	OpponentLine	;5
    972  f461		       a4 b0		      LDY	Tmp0	;3
    973  f463
    974  f463
    975  f463				   OpDrawTraffic0		; 21 2pe
    976  f463		       98		      TYA		; 2
    977  f464		       18		      CLC		; 2 
    978  f465		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    979  f467		       29 08		      AND	#%00001000	;2
    980  f469		       f0 05		      BEQ	OpHasNoBorderP0	;3
    981  f46b				   OpHasBorderP0
    982  f46b		       a9 e0		      LDA	#%11100000	; 2
    983  f46d		       4c 72 f4 	      JMP	OpStoreBorderP0	; 3
    984  f470				   OpHasNoBorderP0
    985  f470		       a9 00		      LDA	#0	; 2
    986  f472				   OpStoreBorderP0
    987  f472		       85 81		      STA	PF0Cache	; 3
    988  f474		       85 83		      STA	PF2Cache	; 3
    989  f476
    990  f476				   OpSkipDrawTraffic0
    991  f476
    992  f476				   OpWhileScanLoop
    993  f476		       88		      DEY		;2
    994  f477		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    995  f479		       4c c5 f3 	      JMP	OpScanLoop	;3
    996  f47c				   OpFinishScanLoop		; 7 209 of 222
    997  f47c		       4c 34 f5 	      JMP	FinishScanLoop
    998  f47f
    999  f47f							;main scanline loop...
   1000  f47f				   ScanLoop
   1001  f47f		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
   1002  f481
   1003  f481		       a5 81		      LDA	PF0Cache	;3
   1004  f483		       85 0d		      STA	PF0	;3
   1005  f485
   1006  f485		       a5 80		      LDA	GRP0Cache	;3
   1007  f487		       85 1b		      STA	GRP0	;3
   1008  f489
   1009  f489		       a5 84		      LDA	GRP1Cache	;3
   1010  f48b		       85 1c		      STA	GRP1	;3
   1011  f48d
   1012  f48d		       a5 86		      LDA	ENAM0Cache	;3
   1013  f48f		       85 1d		      STA	ENAM0	;3
   1014  f491
   1015  f491		       a5 85		      LDA	ENABLCache	;3
   1016  f493		       85 1f		      STA	ENABL	;3
   1017  f495
   1018  f495		       a5 87		      LDA	ENAM1Cache	;3
   1019  f497		       85 1e		      STA	ENAM1	;3
   1020  f499
   1021  f499		       a5 83		      LDA	PF2Cache	;3
   1022  f49b		       85 0f		      STA	PF2	;3
   1023  f49d
   1024  f49d		       a9 00		      LDA	#0	;2
   1025  f49f		       85 0d		      STA	PF0	;3
   1026  f4a1		       85 84		      STA	GRP1Cache	;3
   1027  f4a3		       85 85		      STA	ENABLCache	;3
   1028  f4a5		       85 86		      STA	ENAM0Cache	;3
   1029  f4a7		       85 87		      STA	ENAM1Cache	; 3
   1030  f4a9							;STA GRP0Cache
   1031  f4a9		       85 0f		      STA	PF2	;3
   1032  f4ab
   1033  f4ab				   DrawCar0
   1034  f4ab		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1035  f4ad		       b0 04		      BCS	SkipDrawCar	;2
   1036  f4af		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1037  f4b1		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1038  f4b3				   SkipDrawCar
   1039  f4b3
   1040  f4b3							;BEQ DrawTraffic3
   1041  f4b3				   DrawTraffic1 		; 33
   1042  f4b3		       98		      TYA		; 2
   1043  f4b4		       18		      CLC		; 2 
   1044  f4b5		       65 95		      ADC	TrafficOffset1 + 1	;3
   1045  f4b7		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1046  f4b9		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1047  f4bb		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1048  f4bd		       4c c2 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1049  f4c0				   EorOffsetWithCarry
   1050  f4c0		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1051  f4c2				   AfterEorOffsetWithCarry		;17
   1052  f4c2		       aa		      TAX		;2
   1053  f4c3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1054  f4c6		       c5 be		      CMP	TrafficChance	;3
   1055  f4c8		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1056  f4ca		       a9 ff		      LDA	#$FF	;2
   1057  f4cc		       85 86		      STA	ENAM0Cache	;3
   1058  f4ce				   FinishDrawTraffic1
   1059  f4ce
   1060  f4ce				   DrawTraffic2 		; 33
   1061  f4ce		       98		      TYA		; 2
   1062  f4cf		       18		      CLC		; 2 
   1063  f4d0		       65 99		      ADC	TrafficOffset2 + 1	;3
   1064  f4d2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1065  f4d4		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1066  f4d6		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1067  f4d8		       4c dd f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1068  f4db				   EorOffsetWithCarry2
   1069  f4db		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1070  f4dd				   AfterEorOffsetWithCarry2		;17
   1071  f4dd		       aa		      TAX		;2
   1072  f4de		       bd 00 fe 	      LDA	AesTable,X	; 4
   1073  f4e1		       c5 be		      CMP	TrafficChance	;3
   1074  f4e3		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1075  f4e5		       a9 02		      LDA	#%00000010	;2
   1076  f4e7		       85 85		      STA	ENABLCache	;3
   1077  f4e9				   FinishDrawTraffic2
   1078  f4e9
   1079  f4e9							;STA WSYNC ;65 / 137
   1080  f4e9
   1081  f4e9							; LDA Tmp0 ; Flicker this line if drawing car
   1082  f4e9							; BEQ FinishDrawTraffic4
   1083  f4e9				   DrawTraffic3 		; 33
   1084  f4e9		       98		      TYA		; 2
   1085  f4ea		       18		      CLC		; 2 
   1086  f4eb		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1087  f4ed		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1088  f4ef		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1089  f4f1		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1090  f4f3		       4c f8 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1091  f4f6				   EorOffsetWithCarry3
   1092  f4f6		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1093  f4f8				   AfterEorOffsetWithCarry3		;17
   1094  f4f8		       aa		      TAX		;2
   1095  f4f9		       bd 00 fe 	      LDA	AesTable,X	; 4
   1096  f4fc		       c5 be		      CMP	TrafficChance	;3
   1097  f4fe		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1098  f500		       a9 02		      LDA	#%00000010	;2
   1099  f502		       85 87		      STA	ENAM1Cache
   1100  f504				   FinishDrawTraffic3
   1101  f504
   1102  f504
   1103  f504				   DrawOponent		;26
   1104  f504		       84 b0		      STY	Tmp0	;3
   1105  f506		       a4 cf		      LDY	OpponentLine	;3
   1106  f508		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1107  f50a		       b0 0b		      BCS	SkipDrawOpponent	;2
   1108  f50c				   DrawOpponent
   1109  f50c		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1110  f50e		       85 84		      STA	GRP1Cache	;3
   1111  f510		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1112  f512		       a4 b0		      LDY	Tmp0	;3
   1113  f514		       4c 28 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1114  f517				   SkipDrawOpponent
   1115  f517		       c6 cf		      DEC	OpponentLine	;5
   1116  f519		       a4 b0		      LDY	Tmp0	;3
   1117  f51b
   1118  f51b				   DrawTraffic0 		; 21 2pe
   1119  f51b		       98		      TYA		; 2
   1120  f51c		       18		      CLC		; 2 
   1121  f51d		       65 91		      ADC	TrafficOffset0 + 1	;3
   1122  f51f		       29 08		      AND	#%00001000	;2
   1123  f521		       f0 05		      BEQ	HasNoBorderP0	;3
   1124  f523				   HasBorderP0
   1125  f523		       a9 e0		      LDA	#%11100000	; 2
   1126  f525		       4c 2a f5 	      JMP	StoreBorderP0	; 3
   1127  f528				   HasNoBorderP0
   1128  f528		       a9 00		      LDA	#0	; 2
   1129  f52a				   StoreBorderP0
   1130  f52a		       85 81		      STA	PF0Cache	; 3
   1131  f52c		       85 83		      STA	PF2Cache	; 3
   1132  f52e
   1133  f52e				   SkipDrawTraffic0
   1134  f52e
   1135  f52e				   WhileScanLoop
   1136  f52e		       88		      DEY		;2
   1137  f52f		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1138  f531		       4c 7f f4 	      JMP	ScanLoop	;3
   1139  f534				   FinishScanLoop		; 7 209 of 222
   1140  f534
   1141  f534		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1142  f536		       20 d1 f6 	      JSR	LoadAll
   1143  f539		       85 02		      STA	WSYNC	; do stuff!
   1144  f53b		       85 02		      STA	WSYNC
   1145  f53d		       85 02		      STA	WSYNC
   1146  f53f
   1147  f53f				   PrepareOverscan
   1148  f53f		       a9 02		      LDA	#2
   1149  f541		       85 02		      STA	WSYNC
   1150  f543							;STA HMOVE	; HMOVE 10
   1151  f543		       85 01		      STA	VBLANK
   1152  f545
   1153  f545		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1154  f547		       8d 96 02 	      STA	TIM64T
   1155  f54a
   1156  f54a		       85 2b		      STA	HMCLR	; Before we process car movement
   1157  f54c							;Read Fire Button before, will make it start the game for now.
   1158  f54c				   StartGame
   1159  f54c		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1160  f54e		       25 0d		      AND	INPT5	;3 player 1
   1161  f550		       30 3c		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1162  f552		       a5 8c		      LDA	FrameCount0
   1163  f554		       29 01		      AND	#%00000001
   1164  f556		       d0 36		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1165  f558		       a5 bd		      LDA	GameStatus	;3
   1166  f55a		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1167  f55c		       d0 30		      BNE	SkipGameStart
   1168  f55e		       a5 c6		      LDA	GameMode
   1169  f560		       c9 10		      CMP	#MAX_GAME_MODE
   1170  f562		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1171  f564		       a9 00		      LDA	#0
   1172  f566		       85 c6		      STA	GameMode
   1173  f568		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1174  f56a		       85 bc		      STA	SwitchDebounceCounter
   1175  f56c		       4c 8e f5 	      JMP	SkipGameStart
   1176  f56f				   SetGameRunningIfBothPressing
   1177  f56f		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1178  f571		       05 0d		      ORA	INPT5	;3 player 1
   1179  f573		       30 19		      BMI	SkipGameStart
   1180  f575				   SetGameRunning
   1181  f575		       e6 bd		      INC	GameStatus
   1182  f577		       a9 00		      LDA	#0	;
   1183  f579		       85 8c		      STA	FrameCount0
   1184  f57b		       85 8d		      STA	FrameCount1
   1185  f57d		       a9 38		      LDA	#SCORE_FONT_COLOR_START
   1186  f57f		       85 c9		      STA	ScoreFontColor
   1187  f581		       a9 c8		      LDA	#OP_SCORE_FONT_COLOR_START
   1188  f583		       85 ca		      STA	OpScoreFontColor
   1189  f585		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1190  f587		       85 cb		      STA	ScoreFontColorHoldChange
   1191  f589		       85 cc		      STA	OpScoreFontColorHoldChange
   1192  f58b		       4c 02 f6 	      JMP	OverScanWait	; Do not process player movement and also start
   1193  f58e				   SkipGameStart
   1194  f58e
   1195  f58e				   ReadSwitches
   1196  f58e		       a6 bc		      LDX	SwitchDebounceCounter
   1197  f590		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1198  f592		       a9 01		      LDA	#%00000001
   1199  f594		       2c 82 02 	      BIT	SWCHB
   1200  f597		       d0 07		      BNE	SkipReset
   1201  f599		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1202  f59b		       85 bc		      STA	SwitchDebounceCounter
   1203  f59d		       4c 0a f6 	      JMP	OverScanWaitBeforeReset
   1204  f5a0				   SkipReset
   1205  f5a0
   1206  f5a0				   GameModeSelect
   1207  f5a0		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1208  f5a2		       d0 22		      BNE	SkipGameSelect
   1209  f5a4		       a2 00		      LDX	#0
   1210  f5a6		       20 fd f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1211  f5a9		       e8		      INX
   1212  f5aa		       20 fd f6 	      JSR	ConfigureDifficulty
   1213  f5ad				   ContinueGameSelect
   1214  f5ad		       a9 02		      LDA	#%00000010
   1215  f5af		       2c 82 02 	      BIT	SWCHB
   1216  f5b2		       d0 12		      BNE	SkipGameSelect
   1217  f5b4		       a6 c6		      LDX	GameMode
   1218  f5b6		       e0 10		      CPX	#MAX_GAME_MODE
   1219  f5b8		       f0 04		      BEQ	ResetGameMode
   1220  f5ba		       e8		      INX
   1221  f5bb		       4c c0 f5 	      JMP	StoreGameMode
   1222  f5be				   ResetGameMode
   1223  f5be		       a2 00		      LDX	#0
   1224  f5c0				   StoreGameMode
   1225  f5c0		       86 c6		      STX	GameMode
   1226  f5c2		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1227  f5c4		       85 bc		      STA	SwitchDebounceCounter
   1228  f5c6				   SkipGameSelect
   1229  f5c6		       4c cb f5 	      JMP	EndReadSwitches
   1230  f5c9				   DecrementSwitchDebounceCounter
   1231  f5c9		       c6 bc		      DEC	SwitchDebounceCounter
   1232  f5cb				   EndReadSwitches
   1233  f5cb
   1234  f5cb				   DoNotTurnBeforeStart
   1235  f5cb							;STA HMCLR
   1236  f5cb		       a5 bd		      LDA	GameStatus
   1237  f5cd		       f0 33		      BEQ	OverScanWait
   1238  f5cf
   1239  f5cf							; Last thing, will overrride hmove
   1240  f5cf				   CallTestColisionAndMove
   1241  f5cf		       a2 00		      LDX	#0	; Player 0
   1242  f5d1							; Colision with traffic, each player check different flags,
   1243  f5d1		       a5 8c		      LDA	FrameCount0
   1244  f5d3		       29 01		      AND	#%00000001
   1245  f5d5		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1246  f5d7		       20 ac f8 	      JSR	IsOpponentColliding
   1247  f5da		       05 01		      ORA	CXM1P
   1248  f5dc		       4a		      LSR
   1249  f5dd		       05 00		      ORA	CXM0P
   1250  f5df		       05 02		      ORA	CXP0FB
   1251  f5e1							; ORA CXPPMM ; Collision between players will have its own rules
   1252  f5e1				   SkipColisionPlayer0		; Should not colide on opponent side.
   1253  f5e1		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1254  f5e3		       85 b2		      STA	Tmp2
   1255  f5e5		       20 c0 f8 	      JSR	TestCollisionAndMove
   1256  f5e8
   1257  f5e8		       e8		      INX		; player 1
   1258  f5e9		       a5 8c		      LDA	FrameCount0
   1259  f5eb		       29 01		      AND	#%00000001
   1260  f5ed		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1261  f5ef		       20 ac f8 	      JSR	IsOpponentColliding
   1262  f5f2		       05 00		      ORA	CXM0P
   1263  f5f4		       4a		      LSR
   1264  f5f5		       05 01		      ORA	CXM1P
   1265  f5f7		       05 03		      ORA	CXP1FB
   1266  f5f9				   SkipColisionPlayer1
   1267  f5f9		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1268  f5fb		       85 b2		      STA	Tmp2
   1269  f5fd		       20 c0 f8 	      JSR	TestCollisionAndMove
   1270  f600
   1271  f600				   ClearCollision
   1272  f600		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1273  f602
   1274  f602				   OverScanWait
   1275  f602		       ad 84 02 	      LDA	INTIM
   1276  f605		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1277  f607		       4c d8 f0 	      JMP	MainLoop
   1278  f60a
   1279  f60a				   OverScanWaitBeforeReset
   1280  f60a		       ad 84 02 	      LDA	INTIM
   1281  f60d		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1282  f60f		       4c 14 f0 	      JMP	Start
   1283  f612
   1284  f612				   Subroutines
   1285  f612
   1286  f612							;X Player
   1287  f612							;Tmp1 TrafficOffset 2
   1288  f612				   ProcessSound
   1289  f612				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1290  f612		       b5 c9		      LDA	ScoreFontColor,X	;3
   1291  f614		       dd b7 fc 	      CMP	PlayerToScoreOverColor,X	;2
   1292  f617		       f0 6b		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1293  f619		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X	;2
   1294  f61c		       f0 29		      BEQ	PlayCheckpoint	;2
   1295  f61e		       b5 8e		      LDA	CollisionCounter,X	;3
   1296  f620		       c9 e0		      CMP	#$E0	;2
   1297  f622		       b0 14		      BCS	PlayColision	;2
   1298  f624		       b5 cd		      LDA	NextCheckpoint,X	;3
   1299  f626		       38		      SEC		;2
   1300  f627		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1301  f629		       c9 02		      CMP	#$02	;2
   1302  f62b		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1303  f62d		       b5 b8		      LDA	CountdownTimer,X	; 3
   1304  f62f		       f0 53		      BEQ	EngineSound	;2
   1305  f631		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1306  f633		       90 37		      BCC	PlayWarnTimeEnding	;4
   1307  f635		       4c 84 f6 	      JMP	EngineSound	;3
   1308  f638				   PlayColision
   1309  f638		       a9 1f		      LDA	#31
   1310  f63a		       95 17		      STA	AUDF0,X
   1311  f63c		       a9 08		      LDA	#8
   1312  f63e		       95 15		      STA	AUDC0,X
   1313  f640		       a9 08		      LDA	#8
   1314  f642		       95 19		      STA	AUDV0,X
   1315  f644		       4c ab f6 	      JMP	EndSound
   1316  f647
   1317  f647				   PlayCheckpoint
   1318  f647		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1319  f649		       4a		      LSR		;2
   1320  f64a		       4a		      LSR		;2
   1321  f64b		       4a		      LSR		;2
   1322  f64c		       95 17		      STA	AUDF0,X	;3
   1323  f64e		       a9 0c		      LDA	#12	;2
   1324  f650		       95 15		      STA	AUDC0,X	;3
   1325  f652		       a9 06		      LDA	#6	;2
   1326  f654		       95 19		      STA	AUDV0,X	;3
   1327  f656		       4c ab f6 	      JMP	EndSound	;3
   1328  f659
   1329  f659				   PlayBeforeCheckpoint
   1330  f659		       a5 8c		      LDA	FrameCount0	;3
   1331  f65b		       29 1c		      AND	#%00011100	;2
   1332  f65d		       09 03		      ORA	#%00000011	;2
   1333  f65f		       95 17		      STA	AUDF0,X	;3
   1334  f661		       a9 0c		      LDA	#12	;2
   1335  f663		       95 15		      STA	AUDC0,X	;3
   1336  f665		       a9 03		      LDA	#3	;2
   1337  f667		       95 19		      STA	AUDV0,X	;3
   1338  f669		       4c ab f6 	      JMP	EndSound	;3
   1339  f66c
   1340  f66c				   PlayWarnTimeEnding
   1341  f66c		       a5 8c		      LDA	FrameCount0	;3
   1342  f66e		       29 04		      AND	#%00000100	;2
   1343  f670		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1344  f672		       18		      CLC		;2
   1345  f673		       a9 0a		      LDA	#10	;2
   1346  f675		       75 b8		      ADC	CountdownTimer,X	;2
   1347  f677		       95 17		      STA	AUDF0,X	;3
   1348  f679		       a9 0c		      LDA	#12	;2
   1349  f67b		       95 15		      STA	AUDC0,X	;3
   1350  f67d		       a9 03		      LDA	#3	;2
   1351  f67f		       95 19		      STA	AUDV0,X	;3
   1352  f681		       4c ab f6 	      JMP	EndSound	;3
   1353  f684
   1354  f684				   EngineSound		;41
   1355  f684		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1356  f686		       95 19		      STA	AUDV0,X
   1357  f688		       b5 b8		      LDA	CountdownTimer,X	;3
   1358  f68a		       f0 1b		      BEQ	EngineOff	;2
   1359  f68c		       b4 d5		      LDY	Gear,X
   1360  f68e		       b5 de		      LDA	Player0SpeedL,X	;3
   1361  f690		       4a		      LSR		;2
   1362  f691		       4a		      LSR		;2
   1363  f692		       4a		      LSR		;2
   1364  f693		       29 0f		      AND	#%00001111	;2
   1365  f695		       85 b0		      STA	Tmp0	;3
   1366  f697		       b9 30 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1367  f69a		       38		      SEC		;2
   1368  f69b		       e5 b0		      SBC	Tmp0	;3
   1369  f69d		       95 17		      STA	AUDF0,X	;3
   1370  f69f		       b9 2a ff 	      LDA	EngineSoundType,Y	;4
   1371  f6a2		       95 15		      STA	AUDC0,X	;3
   1372  f6a4		       4c ab f6 	      JMP	EndEngineSound	;3
   1373  f6a7				   EngineOff
   1374  f6a7				   MuteSound
   1375  f6a7		       a9 00		      LDA	#0
   1376  f6a9		       95 15		      STA	AUDC0,X
   1377  f6ab				   EndEngineSound
   1378  f6ab				   EndSound
   1379  f6ab		       60		      RTS
   1380  f6ac
   1381  f6ac				   ClearAll		; 58
   1382  f6ac		       a9 00		      LDA	#0	;2
   1383  f6ae		       85 1b		      STA	GRP0	;3
   1384  f6b0		       85 1c		      STA	GRP1	;3
   1385  f6b2		       85 1f		      STA	ENABL	;3
   1386  f6b4		       85 1d		      STA	ENAM0	;3
   1387  f6b6		       85 1e		      STA	ENAM1	;3
   1388  f6b8		       85 80		      STA	GRP0Cache	;3
   1389  f6ba		       85 84		      STA	GRP1Cache	;3
   1390  f6bc		       85 85		      STA	ENABLCache	;3
   1391  f6be		       85 86		      STA	ENAM0Cache	;3
   1392  f6c0		       85 87		      STA	ENAM1Cache	;3
   1393  f6c2
   1394  f6c2				   ClearPF		; 26
   1395  f6c2		       a9 00		      LDA	#0	;2
   1396  f6c4				   ClearPFSkipLDA0
   1397  f6c4		       85 0d		      STA	PF0	;3
   1398  f6c6		       85 0e		      STA	PF1	;3
   1399  f6c8		       85 0f		      STA	PF2	;3	
   1400  f6ca		       85 81		      STA	PF0Cache	;3
   1401  f6cc		       85 82		      STA	PF1Cache	;3
   1402  f6ce		       85 83		      STA	PF2Cache	;3 
   1403  f6d0		       60		      RTS		;6
   1404  f6d1				   EndClearAll
   1405  f6d1
   1406  f6d1				   LoadAll		; 48
   1407  f6d1		       a5 81		      LDA	PF0Cache	;3
   1408  f6d3		       85 0d		      STA	PF0	;3
   1409  f6d5
   1410  f6d5		       a5 82		      LDA	PF1Cache	;3
   1411  f6d7		       85 0e		      STA	PF1	;3
   1412  f6d9
   1413  f6d9		       a5 83		      LDA	PF2Cache	;3
   1414  f6db		       85 0f		      STA	PF2	;3
   1415  f6dd
   1416  f6dd		       a5 84		      LDA	GRP1Cache	;3
   1417  f6df		       85 1c		      STA	GRP1	;3
   1418  f6e1
   1419  f6e1		       a5 85		      LDA	ENABLCache	;3
   1420  f6e3		       85 1f		      STA	ENABL	;3
   1421  f6e5
   1422  f6e5		       a5 86		      LDA	ENAM0Cache	;3
   1423  f6e7		       85 1d		      STA	ENAM0	;3
   1424  f6e9
   1425  f6e9		       a5 87		      LDA	ENAM1Cache	;3
   1426  f6eb		       85 1e		      STA	ENAM1	;3
   1427  f6ed
   1428  f6ed		       60		      RTS		;6
   1429  f6ee				   EndLoadAll
   1430  f6ee
   1431  f6ee				   NextDifficulty		;Is a SBR
   1432  f6ee		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1433  f6f0		       29 01		      AND	#%00000001
   1434  f6f2		       d0 24		      BNE	CheckRandomDifficulty
   1435  f6f4
   1436  f6f4		       b5 c4		      LDA	CurrentDifficulty,X
   1437  f6f6		       18		      CLC
   1438  f6f7		       69 01		      ADC	#1
   1439  f6f9		       29 03		      AND	#%00000011	; 0 to 3
   1440  f6fb		       95 c4		      STA	CurrentDifficulty,X
   1441  f6fd
   1442  f6fd				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1443  f6fd		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1444  f6ff		       b9 ac ff 	      LDA	TrafficChanceTable,Y
   1445  f702		       95 be		      STA	TrafficChance,X
   1446  f704		       b9 a8 ff 	      LDA	TrafficColorTable,Y
   1447  f707		       95 c2		      STA	TrafficColor,X
   1448  f709
   1449  f709		       a5 c6		      LDA	GameMode	;
   1450  f70b		       29 01		      AND	#%00000001
   1451  f70d		       f0 03		      BEQ	UseNextDifficultyTime
   1452  f70f		       4c 13 f7 	      JMP	StoreDifficultyTime
   1453  f712				   UseNextDifficultyTime
   1454  f712		       c8		      INY
   1455  f713				   StoreDifficultyTime
   1456  f713		       b9 b0 ff 	      LDA	TrafficTimeTable,Y
   1457  f716		       95 c0		      STA	CheckpointTime,X
   1458  f718
   1459  f718				   CheckRandomDifficulty
   1460  f718		       a5 c6		      LDA	GameMode
   1461  f71a		       29 08		      AND	#%00001000	; Random difficulties
   1462  f71c		       f0 26		      BEQ	ReturnFromNextDifficulty
   1463  f71e				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1464  f71e		       a5 f2		      LDA	IsOpponentInFront
   1465  f720		       30 12		      BMI	UseOpponentChance
   1466  f722		       a5 cf		      LDA	OpponentLine	; Same line
   1467  f724		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1468  f726		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1469  f728		       a4 8c		      LDY	FrameCount0
   1470  f72a		       b9 00 fe 	      LDA	AesTable,Y
   1471  f72d							;EOR TrafficChance, no need, lets make life simple
   1472  f72d		       29 3f		      AND	#%00111111
   1473  f72f		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1474  f731		       4c 44 f7 	      JMP	ReturnFromNextDifficulty
   1475  f734				   UseOpponentChance
   1476  f734		       8a		      TXA
   1477  f735		       49 01		      EOR	#%00000001	; Reverts the player
   1478  f737		       aa		      TAX
   1479  f738		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1480  f73a		       85 b3		      STA	Tmp3
   1481  f73c		       8a		      TXA
   1482  f73d		       49 01		      EOR	#%00000001	; Restors the player
   1483  f73f		       aa		      TAX
   1484  f740		       a5 b3		      LDA	Tmp3
   1485  f742		       95 be		      STA	TrafficChance,X
   1486  f744
   1487  f744				   ReturnFromNextDifficulty
   1488  f744		       60		      RTS
   1489  f745
   1490  f745				   DefaultOffsets
   1491  f745		       a9 20		      LDA	#$20
   1492  f747		       85 96		      STA	TrafficOffset1 + 2
   1493  f749		       85 a6		      STA	OpTrafficOffset1 + 2
   1494  f74b		       a9 40		      LDA	#$40
   1495  f74d		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1496  f74f		       85 aa		      STA	OpTrafficOffset2 + 2
   1497  f751		       a9 60		      LDA	#$60
   1498  f753		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1499  f755		       85 ae		      STA	OpTrafficOffset3 + 2
   1500  f757		       a9 80		      LDA	#$80
   1501  f759		       60		      RTS
   1502  f75a
   1503  f75a				   PrintStaticText		; Preload X with the offset referent to StaticText
   1504  f75a		       bd 00 ff 	      LDA	StaticText,X
   1505  f75d		       85 d0		      STA	ScoreD0
   1506  f75f		       e8		      INX
   1507  f760		       bd 00 ff 	      LDA	StaticText,X
   1508  f763		       85 d1		      STA	ScoreD1
   1509  f765		       e8		      INX
   1510  f766		       bd 00 ff 	      LDA	StaticText,X
   1511  f769		       85 d2		      STA	ScoreD2
   1512  f76b		       e8		      INX
   1513  f76c		       bd 00 ff 	      LDA	StaticText,X
   1514  f76f		       85 d3		      STA	ScoreD3
   1515  f771		       e8		      INX
   1516  f772		       bd 00 ff 	      LDA	StaticText,X
   1517  f775		       85 d4		      STA	ScoreD4
   1518  f777		       60		      RTS
   1519  f778
   1520  f778				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1521  f778		       a2 00		      LDX	#0
   1522  f77a		       a0 04		      LDY	#FONT_OFFSET
   1523  f77c
   1524  f77c				   ScoreLoop		; 20 
   1525  f77c		       85 02		      STA	WSYNC	;2
   1526  f77e		       85 2a		      STA	HMOVE
   1527  f780
   1528  f780		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1529  f782		       85 0d		      STA	PF0	;3
   1530  f784
   1531  f784		       a5 82		      LDA	PF1Cache	;3
   1532  f786		       85 0e		      STA	PF1	;3
   1533  f788
   1534  f788		       a5 83		      LDA	PF2Cache	;3
   1535  f78a		       85 0f		      STA	PF2	;3
   1536  f78c
   1537  f78c				   DrawScoreD0		; 15
   1538  f78c		       a6 d0		      LDX	ScoreD0	; 3
   1539  f78e		       bd 00 fd 	      LDA	Font,X	;4
   1540  f791		       85 81		      STA	PF0Cache	;3
   1541  f793		       c6 d0		      DEC	ScoreD0	;5
   1542  f795
   1543  f795				   DrawScoreD1		; 23	
   1544  f795		       a6 d1		      LDX	ScoreD1	; 3
   1545  f797		       bd 00 fd 	      LDA	Font,X	;4
   1546  f79a		       0a		      ASL		;2
   1547  f79b		       0a		      ASL		;2
   1548  f79c		       0a		      ASL		;2
   1549  f79d		       0a		      ASL		;2
   1550  f79e		       85 82		      STA	PF1Cache	;3
   1551  f7a0		       c6 d1		      DEC	ScoreD1	;5
   1552  f7a2
   1553  f7a2				   DrawScoreD2		; 20
   1554  f7a2		       a6 d2		      LDX	ScoreD2	; 3
   1555  f7a4		       bd 00 fd 	      LDA	Font,X	;4
   1556  f7a7		       29 0f		      AND	#%00001111	;2
   1557  f7a9		       05 82		      ORA	PF1Cache	;3
   1558  f7ab		       85 82		      STA	PF1Cache	;3
   1559  f7ad		       c6 d2		      DEC	ScoreD2	;5
   1560  f7af
   1561  f7af				   DrawScoreD3		; 23
   1562  f7af		       a6 d3		      LDX	ScoreD3	; 3
   1563  f7b1		       bd 00 fd 	      LDA	Font,X	;4
   1564  f7b4		       4a		      LSR		;2
   1565  f7b5		       4a		      LSR		;2
   1566  f7b6		       4a		      LSR		;2
   1567  f7b7		       4a		      LSR		;2
   1568  f7b8		       85 83		      STA	PF2Cache	;3
   1569  f7ba		       c6 d3		      DEC	ScoreD3	;5
   1570  f7bc
   1571  f7bc				   DrawScoreD4		; 20
   1572  f7bc		       a6 d4		      LDX	ScoreD4	; 3
   1573  f7be		       bd 00 fd 	      LDA	Font,X	;4
   1574  f7c1		       29 f0		      AND	#%11110000	;2
   1575  f7c3		       05 83		      ORA	PF2Cache	;3
   1576  f7c5		       85 83		      STA	PF2Cache	;3
   1577  f7c7		       c6 d4		      DEC	ScoreD4	;5
   1578  f7c9
   1579  f7c9
   1580  f7c9		       88		      DEY		;2
   1581  f7ca		       10 b0		      BPL	ScoreLoop	;4
   1582  f7cc
   1583  f7cc		       85 02		      STA	WSYNC
   1584  f7ce		       85 2a		      STA	HMOVE
   1585  f7d0		       20 d1 f6 	      JSR	LoadAll
   1586  f7d3		       60		      RTS		; 6
   1587  f7d4
   1588  f7d4				   WaitForVblankEnd
   1589  f7d4		       ad 84 02 	      LDA	INTIM
   1590  f7d7		       d0 fb		      BNE	WaitForVblankEnd
   1591  f7d9		       85 02		      STA	WSYNC
   1592  f7db		       85 01		      STA	VBLANK
   1593  f7dd		       60		      RTS
   1594  f7de
   1595  f7de				   Sleep4Lines
   1596  f7de		       85 02		      STA	WSYNC
   1597  f7e0		       85 02		      STA	WSYNC
   1598  f7e2		       85 02		      STA	WSYNC
   1599  f7e4		       85 02		      STA	WSYNC
   1600  f7e6		       60		      RTS
   1601  f7e7
   1602  f7e7				   Sleep8Lines
   1603  f7e7		       20 de f7 	      JSR	Sleep4Lines
   1604  f7ea		       20 de f7 	      JSR	Sleep4Lines
   1605  f7ed		       60		      RTS
   1606  f7ee
   1607  f7ee				   Sleep32Lines
   1608  f7ee		       20 e7 f7 	      JSR	Sleep8Lines
   1609  f7f1		       20 e7 f7 	      JSR	Sleep8Lines
   1610  f7f4		       20 e7 f7 	      JSR	Sleep8Lines
   1611  f7f7		       20 e7 f7 	      JSR	Sleep8Lines
   1612  f7fa		       60		      RTS
   1613  f7fb
   1614  f7fb							;X = number of WSYNC HMOVE to run
   1615  f7fb				   HMoveXTimes
   1616  f7fb		       85 02		      STA	WSYNC	;3
   1617  f7fd		       85 2a		      STA	HMOVE	; 3/10 
   1618  f7ff		       ca		      DEX
   1619  f800		       d0 f9		      BNE	HMoveXTimes
   1620  f802		       60		      RTS
   1621  f803
   1622  f803				   ConfigureCarSprites
   1623  f803		       a5 8c		      LDA	FrameCount0
   1624  f805		       29 01		      AND	#%00000001
   1625  f807		       d0 0b		      BNE	LoadForRightScreenSprites
   1626  f809				   LoadForLeftScreenSprites
   1627  f809		       a5 c7		      LDA	CurrentCarId
   1628  f80b		       85 b0		      STA	Tmp0
   1629  f80d		       a5 c8		      LDA	OpCurrentCarId
   1630  f80f		       85 b1		      STA	Tmp1
   1631  f811		       4c 1c f8 	      JMP	LoadCarSpritesFromIds
   1632  f814				   LoadForRightScreenSprites
   1633  f814		       a5 c7		      LDA	CurrentCarId
   1634  f816		       85 b1		      STA	Tmp1
   1635  f818		       a5 c8		      LDA	OpCurrentCarId
   1636  f81a		       85 b0		      STA	Tmp0
   1637  f81c
   1638  f81c				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1639  f81c		       a4 b0		      LDY	Tmp0
   1640  f81e		       b9 82 ff 	      LDA	CarIdToSpriteAddressL,Y
   1641  f821		       85 d7		      STA	CarSpritePointerL
   1642  f823		       b9 86 ff 	      LDA	CarIdToSpriteAddressH,Y
   1643  f826		       85 d8		      STA	CarSpritePointerH
   1644  f828				   ConfigureOpponentCarSprite
   1645  f828		       a4 b1		      LDY	Tmp1
   1646  f82a		       b9 8a ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1647  f82d		       85 d9		      STA	EnemyCarSpritePointerL
   1648  f82f		       b9 8e ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1649  f832		       85 da		      STA	EnemyCarSpritePointerH
   1650  f834		       60		      RTS
   1651  f835
   1652  f835							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1653  f835							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1654  f835							; Tmp0 Binary Number
   1655  f835							; Result Returned in Tmp 1 and A
   1656  f835				   BINBCD8
   1657  f835		       f8		      SED		; Switch to decimal mode
   1658  f836		       a9 00		      LDA	#0	; Ensure the result is clear
   1659  f838		       85 b1		      STA	Tmp1+0
   1660  f83a							;STA Tmp1+1
   1661  f83a		       a2 08		      LDX	#8	; The number of source bits
   1662  f83c
   1663  f83c				   CNVBIT
   1664  f83c		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1665  f83e		       a5 b1		      LDA	Tmp1+0	; And add into result
   1666  f840		       65 b1		      ADC	Tmp1+0
   1667  f842		       85 b1		      STA	Tmp1+0
   1668  f844							;Not needed now, 0 to 99 is enought for timer!
   1669  f844							; LDA Tmp1+1	; propagating any carry
   1670  f844							; ADC Tmp1+1
   1671  f844							; STA Tmp1+1
   1672  f844		       ca		      DEX		; And repeat for next bit
   1673  f845		       d0 f5		      BNE	CNVBIT
   1674  f847		       d8		      CLD		; Back to binary
   1675  f848
   1676  f848		       60		      RTS		; All Done.
   1677  f849
   1678  f849							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1679  f849							;X player 0 or 1
   1680  f849				   SelectCarWithDpad
   1681  f849		       a0 03		      LDY	#3
   1682  f84b				   SelectCarWithDpadLoop
   1683  f84b		       ad 80 02 	      LDA	SWCHA
   1684  f84e		       25 b0		      AND	Tmp0
   1685  f850		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1686  f852		       98		      TYA
   1687  f853		       95 c7		      STA	CurrentCarId,X
   1688  f855				   ContinueSelectCarWithDpadLoop
   1689  f855		       46 b0		      LSR	Tmp0
   1690  f857		       88		      DEY
   1691  f858		       10 f1		      BPL	SelectCarWithDpadLoop
   1692  f85a		       60		      RTS
   1693  f85b
   1694  f85b				   ProcessOpponentLine
   1695  f85b		       a5 8c		      LDA	FrameCount0
   1696  f85d		       29 01		      AND	#%00000001
   1697  f85f		       38		      SEC
   1698  f860		       d0 15		      BNE	Player0IsOpponent
   1699  f862				   Player1IsOpponent		; Code could be reused?
   1700  f862		       a5 91		      LDA	TrafficOffset0 + 1
   1701  f864		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1702  f866		       85 b0		      STA	Tmp0
   1703  f868		       a5 92		      LDA	TrafficOffset0 + 2
   1704  f86a		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1705  f86c		       85 b1		      STA	Tmp1
   1706  f86e		       a5 ba		      LDA	Traffic0Msb
   1707  f870		       e5 bb		      SBC	OpTraffic0Msb
   1708  f872		       85 b2		      STA	Tmp2
   1709  f874		       4c 89 f8 	      JMP	StoreInFrontPlayer
   1710  f877				   Player0IsOpponent
   1711  f877		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1712  f879		       e5 91		      SBC	TrafficOffset0 + 1
   1713  f87b		       85 b0		      STA	Tmp0
   1714  f87d		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1715  f87f		       e5 92		      SBC	TrafficOffset0 + 2
   1716  f881		       85 b1		      STA	Tmp1
   1717  f883		       a5 bb		      LDA	OpTraffic0Msb
   1718  f885		       e5 ba		      SBC	Traffic0Msb
   1719  f887		       85 b2		      STA	Tmp2
   1720  f889
   1721  f889				   StoreInFrontPlayer
   1722  f889		       85 f2		      STA	IsOpponentInFront
   1723  f88b
   1724  f88b				   AddOffsetToOpponentLine
   1725  f88b		       18		      CLC
   1726  f88c		       a5 b0		      LDA	Tmp0
   1727  f88e		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1728  f890		       85 b0		      STA	Tmp0
   1729  f892		       a5 b1		      LDA	Tmp1
   1730  f894		       69 00		      ADC	#0
   1731  f896		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1732  f898		       a5 b2		      LDA	Tmp2
   1733  f89a		       69 00		      ADC	#0
   1734  f89c		       05 b1		      ORA	Tmp1
   1735  f89e		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1736  f8a0				   OpponentNotVisible
   1737  f8a0		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1738  f8a2		       85 cf		      STA	OpponentLine
   1739  f8a4		       4c ab f8 	      JMP	ReturnFromProcessOpponentLine
   1740  f8a7				   OpponentVisible
   1741  f8a7		       a5 b0		      LDA	Tmp0
   1742  f8a9		       85 cf		      STA	OpponentLine
   1743  f8ab				   ReturnFromProcessOpponentLine
   1744  f8ab		       60		      RTS
   1745  f8ac
   1746  f8ac							; Value stored in A
   1747  f8ac				   IsOpponentColliding
   1748  f8ac							;Any non default state, opponent do not colide
   1749  f8ac		       a5 8e		      LDA	CollisionCounter
   1750  f8ae		       05 8f		      ORA	OpCollisionCounter
   1751  f8b0		       05 cb		      ORA	ScoreFontColorHoldChange
   1752  f8b2		       05 cc		      ORA	OpScoreFontColorHoldChange
   1753  f8b4		       d0 07		      BNE	OpponentNotColliding
   1754  f8b6		       a5 f2		      LDA	IsOpponentInFront
   1755  f8b8		       25 07		      AND	CXPPMM
   1756  f8ba		       4c bf f8 	      JMP	ReturnIsOpponentColliding
   1757  f8bd				   OpponentNotColliding
   1758  f8bd		       a9 00		      LDA	#0
   1759  f8bf				   ReturnIsOpponentColliding
   1760  f8bf		       60		      RTS
   1761  f8c0
   1762  f8c0
   1763  f8c0							; Movement and colision are binded because the car must be moved after duplicate size.
   1764  f8c0							; Use X for the player
   1765  f8c0							; Tmp2 Traffic colision result
   1766  f8c0				   TestCollisionAndMove
   1767  f8c0							; Until store the movemnt, Y contains the value to be stored.
   1768  f8c0							; see if player0 colides with the rest
   1769  f8c0		       a5 b2		      LDA	Tmp2
   1770  f8c2		       f0 2b		      BEQ	NoCollision	;skip if not hitting...
   1771  f8c4		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1772  f8c6		       d0 27		      BNE	NoCollision
   1773  f8c8		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1774  f8ca		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X
   1775  f8cd		       f0 20		      BEQ	NoCollision
   1776  f8cf		       dd b5 fc 	      CMP	PlayerToScoreStartColor,X
   1777  f8d2		       f0 1b		      BEQ	NoCollision
   1778  f8d4		       a9 ff		      LDA	#COLLISION_FRAMES
   1779  f8d6		       95 8e		      STA	CollisionCounter,X
   1780  f8d8		       b5 f0		      LDA	Player0SpeedH,X
   1781  f8da		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1782  f8dc		       a9 10		      LDA	#COLLISION_SPEED_L
   1783  f8de		       d5 de		      CMP	Player0SpeedL,X
   1784  f8e0		       b0 04		      BCS	SkipSetColisionSpeedL
   1785  f8e2				   SetColisionSpeedL
   1786  f8e2		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1787  f8e4		       95 de		      STA	Player0SpeedL,X
   1788  f8e6				   SkipSetColisionSpeedL
   1789  f8e6		       a9 00		      LDA	#0
   1790  f8e8		       95 f0		      STA	Player0SpeedH,X
   1791  f8ea		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1792  f8ec		       4c 3f f9 	      JMP	StoreHMove	; We keep position consistent
   1793  f8ef				   NoCollision
   1794  f8ef
   1795  f8ef				   DecrementCollision
   1796  f8ef		       b5 8e		      LDA	CollisionCounter,X
   1797  f8f1		       f0 06		      BEQ	FinishDecrementCollision
   1798  f8f3		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1799  f8f5		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1800  f8f7		       d6 8e		      DEC	CollisionCounter,X
   1801  f8f9				   FinishDecrementCollision
   1802  f8f9
   1803  f8f9				   ResetPlayerSize
   1804  f8f9		       d0 04		      BNE	FinishResetPlayerSize
   1805  f8fb		       a9 30		      LDA	#%00110000
   1806  f8fd		       95 04		      STA	NUSIZ0,X	;
   1807  f8ff				   FinishResetPlayerSize
   1808  f8ff
   1809  f8ff				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1810  f8ff		       b5 8e		      LDA	CollisionCounter,X
   1811  f901		       c9 01		      CMP	#1	; Last frame before reset
   1812  f903		       d0 05		      BNE	SkipResetPlayerPosition
   1813  f905		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1814  f907		       4c 3f f9 	      JMP	StoreHMove
   1815  f90a				   SkipResetPlayerPosition
   1816  f90a
   1817  f90a				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1818  f90a		       b5 c7		      LDA	CurrentCarId,X
   1819  f90c		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1820  f90e		       d0 08		      BNE	PrepareReadXAxis
   1821  f910		       a0 00		      LDY	#0
   1822  f912		       a5 8c		      LDA	FrameCount0
   1823  f914		       29 01		      AND	#DRAGSTER_TURN_MASK
   1824  f916		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1825  f918
   1826  f918				   PrepareReadXAxis
   1827  f918		       a0 00		      LDY	#0
   1828  f91a		       b5 b6		      LDA	Player0X,X
   1829  f91c				   BeginReadLeft
   1830  f91c		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1831  f91e		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1832  f921		       2c 80 02 	      BIT	SWCHA
   1833  f924		       d0 07		      BNE	SkipMoveLeft
   1834  f926		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1835  f928		       d6 b6		      DEC	Player0X,X
   1836  f92a		       4c 3f f9 	      JMP	StoreHMove	; Cannot move left and right...
   1837  f92d				   SkipMoveLeft
   1838  f92d				   BeginReadRight
   1839  f92d		       b5 b6		      LDA	Player0X,X
   1840  f92f		       c9 2c		      CMP	#PLAYER_MAX_X
   1841  f931		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1842  f933		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1843  f936		       2c 80 02 	      BIT	SWCHA
   1844  f939		       d0 04		      BNE	SkipMoveRight
   1845  f93b		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1846  f93d		       f6 b6		      INC	Player0X,X
   1847  f93f				   SkipMoveRight
   1848  f93f				   StoreHMove
   1849  f93f		       94 20		      STY	HMP0,X	;set the move for player 0
   1850  f941
   1851  f941		       60		      RTS
   1852  f942
   1853  f942							; X Traffic offset 4 bits each lane, 4 lanes per player
   1854  f942							; Tmp3 Max X offset
   1855  f942							; Tmp4 Max Player Speed L
   1856  f942							; Tmp5 Max Player Speed H
   1857  f942				   UpdateOffsets
   1858  f942		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1859  f944		       a5 c6		      LDA	GameMode
   1860  f946		       29 04		      AND	#%00000100	; GameModes with high delta
   1861  f948		       f0 02		      BEQ	UpdateOffsetsLoop
   1862  f94a		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1863  f94c
   1864  f94c				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1865  f94c		       38		      SEC
   1866  f94d		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1867  f94f		       f9 6e ff 	      SBC	TrafficSpeeds,Y
   1868  f952		       85 b0		      STA	Tmp0
   1869  f954		       c8		      INY
   1870  f955		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1871  f957		       f9 6e ff 	      SBC	TrafficSpeeds,Y
   1872  f95a		       85 b1		      STA	Tmp1
   1873  f95c		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1874  f95e		       e9 00		      SBC	#0
   1875  f960		       85 b2		      STA	Tmp2
   1876  f962
   1877  f962				   AddsTheResult
   1878  f962		       18		      CLC
   1879  f963		       a5 b0		      LDA	Tmp0
   1880  f965		       75 90		      ADC	TrafficOffset0,X
   1881  f967		       95 90		      STA	TrafficOffset0,X
   1882  f969		       e8		      INX
   1883  f96a		       a5 b1		      LDA	Tmp1
   1884  f96c		       75 90		      ADC	TrafficOffset0,X
   1885  f96e		       95 90		      STA	TrafficOffset0,X
   1886  f970		       e8		      INX
   1887  f971		       a5 b2		      LDA	Tmp2	; Carry
   1888  f973		       75 90		      ADC	TrafficOffset0,X
   1889  f975		       95 90		      STA	TrafficOffset0,X
   1890  f977		       90 0f		      BCC	CalculateOffsetCache
   1891  f979				   CalculatePlayer0Msb
   1892  f979		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1893  f97b		       d0 05		      BNE	CalculatePlayer1Msb
   1894  f97d		       e6 ba		      INC	Traffic0Msb
   1895  f97f		       4c 88 f9 	      JMP	CalculateOffsetCache
   1896  f982				   CalculatePlayer1Msb
   1897  f982		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1898  f984		       d0 02		      BNE	CalculateOffsetCache
   1899  f986		       e6 bb		      INC	OpTraffic0Msb
   1900  f988
   1901  f988				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1902  f988		       e8		      INX
   1903  f989		       38		      SEC
   1904  f98a		       69 00		      ADC	#0	;Increment by one
   1905  f98c		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1906  f98e
   1907  f98e				   PrepareNextUpdateLoop
   1908  f98e		       c8		      INY
   1909  f98f		       e8		      INX
   1910  f990		       e4 b3		      CPX	Tmp3	; Max X offset
   1911  f992		       d0 b8		      BNE	UpdateOffsetsLoop
   1912  f994		       60		      RTS
   1913  f995
   1914  f995							; X Player 0 or 1
   1915  f995				   ProcessSpeed
   1916  f995				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1917  f995		       a9 00		      LDA	#0
   1918  f997		       85 b0		      STA	Tmp0	; Break speed
   1919  f999		       b5 b8		      LDA	CountdownTimer,X
   1920  f99b		       d0 0d		      BNE	Break
   1921  f99d		       b4 c7		      LDY	CurrentCarId,X
   1922  f99f		       a5 8c		      LDA	FrameCount0
   1923  f9a1		       39 96 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1924  f9a4		       d0 04		      BNE	Break
   1925  f9a6		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1926  f9a8		       85 b0		      STA	Tmp0
   1927  f9aa
   1928  f9aa				   Break
   1929  f9aa		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1930  f9ad		       2c 80 02 	      BIT	SWCHA
   1931  f9b0		       d0 12		      BNE	BreakNonZero
   1932  f9b2		       b5 0c		      LDA	INPT4,X	;3
   1933  f9b4		       10 0a		      BPL	BreakWhileAccelerating
   1934  f9b6		       b4 d5		      LDY	Gear,X
   1935  f9b8		       b9 a2 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1936  f9bb		       85 b0		      STA	Tmp0
   1937  f9bd		       4c c4 f9 	      JMP	BreakNonZero
   1938  f9c0				   BreakWhileAccelerating		; Allow better control while breaking.
   1939  f9c0		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1940  f9c2		       85 b0		      STA	Tmp0
   1941  f9c4
   1942  f9c4				   BreakNonZero
   1943  f9c4		       a5 b0		      LDA	Tmp0
   1944  f9c6		       f0 29		      BEQ	SkipBreak
   1945  f9c8
   1946  f9c8				   DecreaseSpeed
   1947  f9c8		       38		      SEC
   1948  f9c9		       b5 de		      LDA	Player0SpeedL,X
   1949  f9cb		       e5 b0		      SBC	Tmp0
   1950  f9cd		       95 de		      STA	Player0SpeedL,X
   1951  f9cf		       b5 f0		      LDA	Player0SpeedH,X
   1952  f9d1		       e9 00		      SBC	#0
   1953  f9d3		       95 f0		      STA	Player0SpeedH,X
   1954  f9d5
   1955  f9d5				   CheckMinSpeed
   1956  f9d5		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1957  f9d7		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1958  f9d9		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1959  f9db		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1960  f9dd
   1961  f9dd				   CompareLBreakSpeed
   1962  f9dd		       b5 de		      LDA	Player0SpeedL,X
   1963  f9df		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1964  f9e1		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1965  f9e3		       4c ee f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1966  f9e6
   1967  f9e6				   ResetMinSpeed
   1968  f9e6		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1969  f9e8		       95 f0		      STA	Player0SpeedH,X
   1970  f9ea		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1971  f9ec		       95 de		      STA	Player0SpeedL,X
   1972  f9ee
   1973  f9ee				   SkipAccelerateIfBreaking
   1974  f9ee		       4c 37 fa 	      JMP	SkipAccelerate
   1975  f9f1				   SkipBreak
   1976  f9f1
   1977  f9f1				   Acelerates
   1978  f9f1		       b5 b8		      LDA	CountdownTimer,X
   1979  f9f3		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1980  f9f5
   1981  f9f5				   ContinueAccelerateTest
   1982  f9f5		       b5 0c		      LDA	INPT4,X	;3
   1983  f9f7		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1984  f9f9		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1985  f9fc		       2c 80 02 	      BIT	SWCHA
   1986  f9ff		       d0 36		      BNE	SkipAccelerate
   1987  fa01
   1988  fa01				   IncreaseCarSpeed
   1989  fa01		       a9 02		      LDA	#2
   1990  fa03		       85 b0		      STA	Tmp0	; Loop control
   1991  fa05		       b4 c7		      LDY	CurrentCarId,X
   1992  fa07				   IncreaseCarSpeedLoop
   1993  fa07							;Adds speed
   1994  fa07		       18		      CLC
   1995  fa08		       b5 dc		      LDA	AccelerateBuffer,X
   1996  fa0a		       79 92 ff 	      ADC	CarIdToAccelerateSpeed,Y
   1997  fa0d		       95 dc		      STA	AccelerateBuffer,X
   1998  fa0f		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1999  fa11		       f6 de		      INC	Player0SpeedL,X
   2000  fa13		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2001  fa15		       f6 f0		      INC	Player0SpeedH,X
   2002  fa17				   ContinueIncreaseSpeedLoop
   2003  fa17		       c6 b0		      DEC	Tmp0
   2004  fa19		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2005  fa1b				   SkipIncreaseCarSpeed
   2006  fa1b
   2007  fa1b				   CheckIfAlreadyMaxSpeed
   2008  fa1b		       b5 f0		      LDA	Player0SpeedH,X
   2009  fa1d		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2010  fa1f		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2011  fa21		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2012  fa23							;High bit is max, compare the low
   2013  fa23		       b4 c7		      LDY	CurrentCarId,X
   2014  fa25		       b5 de		      LDA	Player0SpeedL,X
   2015  fa27		       d9 9a ff 	      CMP	CarIdToMaxSpeedL,Y
   2016  fa2a		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2017  fa2c							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2018  fa2c
   2019  fa2c				   ResetToMaxSpeed		; Speed is more, or is already max
   2020  fa2c		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2021  fa2e		       95 f0		      STA	Player0SpeedH,X
   2022  fa30		       b4 c7		      LDY	CurrentCarId,X
   2023  fa32		       b9 9a ff 	      LDA	CarIdToMaxSpeedL,Y
   2024  fa35		       95 de		      STA	Player0SpeedL,X
   2025  fa37				   SkipAccelerate
   2026  fa37		       60		      RTS
   2027  fa38
   2028  fa38							;Tmp0 Traffic Offset to compare with next checkpoint
   2029  fa38				   ProcessPlayerStatus
   2030  fa38				   IsGameOver
   2031  fa38		       b5 b8		      LDA	CountdownTimer,X
   2032  fa3a		       15 de		      ORA	Player0SpeedL,X
   2033  fa3c		       15 f0		      ORA	Player0SpeedH,X
   2034  fa3e		       d0 0c		      BNE	IsCheckpoint
   2035  fa40		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2036  fa42		       95 cb		      STA	ScoreFontColorHoldChange,X
   2037  fa44		       bd b7 fc 	      LDA	PlayerToScoreOverColor,X
   2038  fa47		       95 c9		      STA	ScoreFontColor,X
   2039  fa49		       4c 80 fa 	      JMP	SkipIsTimeOver
   2040  fa4c
   2041  fa4c				   IsCheckpoint
   2042  fa4c		       b5 cd		      LDA	NextCheckpoint,X
   2043  fa4e		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2044  fa50		       d0 21		      BNE	SkipIsCheckpoint
   2045  fa52		       18		      CLC
   2046  fa53		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2047  fa55		       95 cd		      STA	NextCheckpoint,X
   2048  fa57		       bd b3 fc 	      LDA	PlayerToScoreGoodColor,X
   2049  fa5a		       95 c9		      STA	ScoreFontColor,X
   2050  fa5c		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2051  fa5e		       95 cb		      STA	ScoreFontColorHoldChange,X
   2052  fa60		       b5 b8		      LDA	CountdownTimer,X
   2053  fa62		       18		      CLC
   2054  fa63		       75 c0		      ADC	CheckpointTime,X
   2055  fa65		       95 b8		      STA	CountdownTimer,X
   2056  fa67		       90 04		      BCC	JumpSkipTimeOver
   2057  fa69		       a9 ff		      LDA	#$FF
   2058  fa6b		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2059  fa6d				   JumpSkipTimeOver
   2060  fa6d		       20 ee f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2061  fa70		       4c 80 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2062  fa73				   SkipIsCheckpoint
   2063  fa73
   2064  fa73				   IsTimeOver
   2065  fa73		       b5 b8		      LDA	CountdownTimer,X
   2066  fa75		       d0 09		      BNE	SkipIsTimeOver
   2067  fa77		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2068  fa79		       95 cb		      STA	ScoreFontColorHoldChange,X
   2069  fa7b		       bd b9 fc 	      LDA	PlayerToScoreBadColor,X
   2070  fa7e		       95 c9		      STA	ScoreFontColor,X
   2071  fa80				   SkipIsTimeOver
   2072  fa80		       60		      RTS
   2073  fa81
   2074  fa81
   2075  fa81				   EverySecond		; 64 frames to be more precise
   2076  fa81		       a9 3f		      LDA	#%00111111
   2077  fa83		       25 8c		      AND	FrameCount0
   2078  fa85		       d0 06		      BNE	SkipEverySecondAction
   2079  fa87		       d5 b8		      CMP	CountdownTimer,X
   2080  fa89		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2081  fa8b		       d6 b8		      DEC	CountdownTimer,X
   2082  fa8d				   SkipEverySecondAction
   2083  fa8d		       60		      RTS
   2084  fa8e
   2085  fa8e				   CalculateGear
   2086  fa8e		       b5 de		      LDA	Player0SpeedL,X	;3
   2087  fa90		       29 80		      AND	#%10000000	;2
   2088  fa92		       15 f0		      ORA	Player0SpeedH,X	;3
   2089  fa94		       18		      CLC		;2
   2090  fa95		       2a		      ROL		;2
   2091  fa96		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2092  fa98		       95 d5		      STA	Gear,X
   2093  fa9a		       60		      RTS
   2094  fa9b
   2095  fa9b				   ProcessScoreFontColor
   2096  fa9b		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2097  fa9d		       f0 06		      BEQ	ResetScoreFontColor
   2098  fa9f		       88		      DEY
   2099  faa0		       94 cb		      STY	ScoreFontColorHoldChange,X
   2100  faa2		       4c aa fa 	      JMP	SkipScoreFontColor
   2101  faa5				   ResetScoreFontColor
   2102  faa5		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2103  faa8		       95 c9		      STA	ScoreFontColor,X
   2104  faaa				   SkipScoreFontColor
   2105  faaa		       60		      RTS
   2106  faab
   2107  faab							; X = Player
   2108  faab							; A Returns result to be sotored in the proper digit
   2109  faab				   PrintScoreHoldChange
   2110  faab		       b5 cb		      LDA	ScoreFontColorHoldChange,X
   2111  faad		       4a		      LSR
   2112  faae		       4a		      LSR
   2113  faaf		       4a		      LSR
   2114  fab0		       4a		      LSR
   2115  fab1		       a8		      TAY
   2116  fab2		       b9 8c fc 	      LDA	BarLookup,Y
   2117  fab5		       60		      RTS
   2118  fab6
   2119  fab6				   PrintSpeedBar
   2120  fab6		       b5 de		      LDA	Player0SpeedL,X
   2121  fab8		       29 e0		      AND	#%11100000	;2 Discard the last bits
   2122  faba		       18		      CLC
   2123  fabb		       2a		      ROL		;First goes into carry
   2124  fabc		       2a		      ROL
   2125  fabd		       2a		      ROL
   2126  fabe		       2a		      ROL
   2127  fabf		       85 b0		      STA	Tmp0
   2128  fac1		       b5 f0		      LDA	Player0SpeedH,X
   2129  fac3		       0a		      ASL
   2130  fac4		       0a		      ASL
   2131  fac5		       0a		      ASL
   2132  fac6		       05 b0		      ORA	Tmp0
   2133  fac8		       a8		      TAY		; 2
   2134  fac9		       b9 9c fc 	      LDA	SpeedToBarLookup,Y	;4
   2135  facc		       85 d2		      STA	ScoreD2	;3
   2136  face		       60		      RTS
   2137  facf
   2138  facf							; Moved here because of rom space.
   2139  facf							; The only SBR in constants space
   2140  facf				   DrawQrCode
   2141  facf		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2142  fad1		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2143  fad3		       a9 01		      LDA	#%00000001	; Mirror playfield
   2144  fad5		       85 0a		      STA	CTRLPF
   2145  fad7		       20 ac f6 	      JSR	ClearAll	; To be 100 sure!
   2146  fada		       ad 82 02 	      LDA	SWCHB
   2147  fadd		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2148  fadf		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2149  fae1		       f0 07		      BEQ	StoreReversedQrCode
   2150  fae3		       86 09		      STX	COLUBK
   2151  fae5		       84 08		      STY	COLUPF
   2152  fae7		       4c ee fa 	      JMP	ContinueQrCode
   2153  faea				   StoreReversedQrCode
   2154  faea		       86 08		      STX	COLUPF
   2155  faec		       84 09		      STY	COLUBK
   2156  faee
   2157  faee				   ContinueQrCode
   2158  faee		       a2 09		      LDX	#9
   2159  faf0		       20 fb f7 	      JSR	HMoveXTimes
   2160  faf3		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2161  faf5		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2162  faf7		       20 d4 f7 	      JSR	WaitForVblankEnd
   2163  fafa		       20 e7 f7 	      JSR	Sleep8Lines
   2164  fafd		       20 e7 f7 	      JSR	Sleep8Lines
   2165  fb00		       20 e7 f7 	      JSR	Sleep8Lines
   2166  fb03
   2167  fb03				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2168  fb03		       85 02		      STA	WSYNC
   2169  fb05		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2170  fb08		       85 0e		      STA	PF1	;3
   2171  fb0a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2172  fb0d		       85 0f		      STA	PF2	;3
      0  fb0f					      SLEEP	27	; 
      1  fb0f				   .CYCLES    SET	27
      2  fb0f
      3  fb0f				  -	      IF	.CYCLES < 2
      4  fb0f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb0f				  -	      ERR
      6  fb0f					      ENDIF
      7  fb0f
      8  fb0f					      IF	.CYCLES & 1
      9  fb0f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb0f				  -	      nop	0
     11  fb0f					      ELSE
     12  fb0f		       24 00		      bit	VSYNC
     13  fb11					      ENDIF
     14  fb11				   .CYCLES    SET	.CYCLES - 3
     15  fb11					      ENDIF
     16  fb11
     17  fb11					      REPEAT	.CYCLES / 2
     18  fb11		       ea		      nop
     17  fb11					      REPEND
     18  fb12		       ea		      nop
     17  fb12					      REPEND
     18  fb13		       ea		      nop
     17  fb13					      REPEND
     18  fb14		       ea		      nop
     17  fb14					      REPEND
     18  fb15		       ea		      nop
     17  fb15					      REPEND
     18  fb16		       ea		      nop
     17  fb16					      REPEND
     18  fb17		       ea		      nop
     17  fb17					      REPEND
     18  fb18		       ea		      nop
     17  fb18					      REPEND
     18  fb19		       ea		      nop
     17  fb19					      REPEND
     18  fb1a		       ea		      nop
     17  fb1a					      REPEND
     18  fb1b		       ea		      nop
     17  fb1b					      REPEND
     18  fb1c		       ea		      nop
     19  fb1d					      REPEND
   2174  fb1d		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2175  fb20		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2176  fb22		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2177  fb25		       85 0e		      STA	PF1	;3
   2178  fb27
   2179  fb27		       ca		      DEX		;2
   2180  fb28		       d0 d9		      BNE	QrCodeLoop	;2
   2181  fb2a		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2182  fb2c		       88		      DEY		;2
   2183  fb2d		       10 d4		      BPL	QrCodeLoop	;4
   2184  fb2f
   2185  fb2f				   EndQrCodeLoop
   2186  fb2f		       85 02		      STA	WSYNC	;
   2187  fb31		       a9 00		      LDA	#0
   2188  fb33		       85 0e		      STA	PF1	;3
   2189  fb35		       85 0f		      STA	PF2	;3
   2190  fb37
   2191  fb37		       20 ee f7 	      JSR	Sleep32Lines
   2192  fb3a		       4c 3f f5 	      JMP	PrepareOverscan
   2193  fb3d
   2194  fb3d							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2195  fc00					      org	$FC00
   2196  fc00				   QrCode1
   2197  fc00		       1f		      .byte.b	#%00011111
   2198  fc01		       10		      .byte.b	#%00010000
   2199  fc02		       17		      .byte.b	#%00010111
   2200  fc03		       17		      .byte.b	#%00010111
   2201  fc04		       17		      .byte.b	#%00010111
   2202  fc05		       10		      .byte.b	#%00010000
   2203  fc06		       1f		      .byte.b	#%00011111
   2204  fc07		       00		      .byte.b	#%00000000
   2205  fc08		       17		      .byte.b	#%00010111
   2206  fc09		       10		      .byte.b	#%00010000
   2207  fc0a		       1d		      .byte.b	#%00011101
   2208  fc0b		       16		      .byte.b	#%00010110
   2209  fc0c		       03		      .byte.b	#%00000011
   2210  fc0d		       19		      .byte.b	#%00011001
   2211  fc0e		       13		      .byte.b	#%00010011
   2212  fc0f		       1c		      .byte.b	#%00011100
   2213  fc10		       0b		      .byte.b	#%00001011
   2214  fc11		       00		      .byte.b	#%00000000
   2215  fc12		       1f		      .byte.b	#%00011111
   2216  fc13		       10		      .byte.b	#%00010000
   2217  fc14		       17		      .byte.b	#%00010111
   2218  fc15		       17		      .byte.b	#%00010111
   2219  fc16		       17		      .byte.b	#%00010111
   2220  fc17		       10		      .byte.b	#%00010000
   2221  fc18		       1f		      .byte.b	#%00011111
   2222  fc19
   2223  fc19				   QrCode2
   2224  fc19		       c3		      .byte.b	#%11000011
   2225  fc1a		       9a		      .byte.b	#%10011010
   2226  fc1b		       82		      .byte.b	#%10000010
   2227  fc1c		       da		      .byte.b	#%11011010
   2228  fc1d		       aa		      .byte.b	#%10101010
   2229  fc1e		       ca		      .byte.b	#%11001010
   2230  fc1f		       f3		      .byte.b	#%11110011
   2231  fc20		       78		      .byte.b	#%01111000
   2232  fc21		       df		      .byte.b	#%11011111
   2233  fc22		       fc		      .byte.b	#%11111100
   2234  fc23		       c7		      .byte.b	#%11000111
   2235  fc24		       98		      .byte.b	#%10011000
   2236  fc25		       23		      .byte.b	#%00100011
   2237  fc26		       b9		      .byte.b	#%10111001
   2238  fc27		       d2		      .byte.b	#%11010010
   2239  fc28		       30		      .byte.b	#%00110000
   2240  fc29		       eb		      .byte.b	#%11101011
   2241  fc2a		       28		      .byte.b	#%00101000
   2242  fc2b		       ab		      .byte.b	#%10101011
   2243  fc2c		       72		      .byte.b	#%01110010
   2244  fc2d		       fa		      .byte.b	#%11111010
   2245  fc2e		       7a		      .byte.b	#%01111010
   2246  fc2f		       32		      .byte.b	#%00110010
   2247  fc30		       3a		      .byte.b	#%00111010
   2248  fc31		       63		      .byte.b	#%01100011
   2249  fc32
   2250  fc32				   QrCode3
   2251  fc32		       98		      .byte.b	#%10011000
   2252  fc33		       c3		      .byte.b	#%11000011
   2253  fc34		       39		      .byte.b	#%00111001
   2254  fc35		       34		      .byte.b	#%00110100
   2255  fc36		       ff		      .byte.b	#%11111111
   2256  fc37		       71		      .byte.b	#%01110001
   2257  fc38		       d5		      .byte.b	#%11010101
   2258  fc39		       d1		      .byte.b	#%11010001
   2259  fc3a		       5f		      .byte.b	#%01011111
   2260  fc3b		       26		      .byte.b	#%00100110
   2261  fc3c		       2d		      .byte.b	#%00101101
   2262  fc3d		       e9		      .byte.b	#%11101001
   2263  fc3e		       d6		      .byte.b	#%11010110
   2264  fc3f		       26		      .byte.b	#%00100110
   2265  fc40		       ba		      .byte.b	#%10111010
   2266  fc41		       03		      .byte.b	#%00000011
   2267  fc42		       dd		      .byte.b	#%11011101
   2268  fc43		       e0		      .byte.b	#%11100000
   2269  fc44		       57		      .byte.b	#%01010111
   2270  fc45		       14		      .byte.b	#%00010100
   2271  fc46		       35		      .byte.b	#%00110101
   2272  fc47		       e5		      .byte.b	#%11100101
   2273  fc48		       b5		      .byte.b	#%10110101
   2274  fc49		       d4		      .byte.b	#%11010100
   2275  fc4a		       97		      .byte.b	#%10010111
   2276  fc4b
   2277  fc4b				   QrCode4
   2278  fc4b		       09		      .byte.b	#%00001001
   2279  fc4c		       0e		      .byte.b	#%00001110
   2280  fc4d		       0f		      .byte.b	#%00001111
   2281  fc4e		       0c		      .byte.b	#%00001100
   2282  fc4f		       0c		      .byte.b	#%00001100
   2283  fc50		       08		      .byte.b	#%00001000
   2284  fc51		       08		      .byte.b	#%00001000
   2285  fc52		       06		      .byte.b	#%00000110
   2286  fc53		       06		      .byte.b	#%00000110
   2287  fc54		       0b		      .byte.b	#%00001011
   2288  fc55		       0f		      .byte.b	#%00001111
   2289  fc56		       04		      .byte.b	#%00000100
   2290  fc57		       08		      .byte.b	#%00001000
   2291  fc58		       0f		      .byte.b	#%00001111
   2292  fc59		       09		      .byte.b	#%00001001
   2293  fc5a		       07		      .byte.b	#%00000111
   2294  fc5b		       05		      .byte.b	#%00000101
   2295  fc5c		       00		      .byte.b	#%00000000
   2296  fc5d		       0f		      .byte.b	#%00001111
   2297  fc5e		       08		      .byte.b	#%00001000
   2298  fc5f		       0b		      .byte.b	#%00001011
   2299  fc60		       0b		      .byte.b	#%00001011
   2300  fc61		       0b		      .byte.b	#%00001011
   2301  fc62		       08		      .byte.b	#%00001000
   2302  fc63		       0f		      .byte.b	#%00001111
   2303  fc64
   2304  fc64				   PlayerToUpMask
   2305  fc64		       10		      .byte.b	#%00010000	;
   2306  fc65		       01		      .byte.b	#%00000001	;
   2307  fc66
   2308  fc66				   PlayerToDownMask
   2309  fc66		       20		      .byte.b	#%00100000	;
   2310  fc67		       02		      .byte.b	#%00000010	;
   2311  fc68
   2312  fc68				   PlayerToLeftMask
   2313  fc68		       40		      .byte.b	#%01000000	;
   2314  fc69		       04		      .byte.b	#%00000100	;
   2315  fc6a
   2316  fc6a				   PlayerToRightMask
   2317  fc6a		       80		      .byte.b	#%10000000	;
   2318  fc6b		       08		      .byte.b	#%00001000	;
   2319  fc6c
   2320  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2321  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2322  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2323  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2324  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2325  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2326  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2327  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2328  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2329  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2330  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2331  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2332  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2333  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2334  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2335  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2336  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2337  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2338  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2339  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2340  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2341  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2342  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2343  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2344  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2345  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2346  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2347  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2348  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2349  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2350  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2351  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2352  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2353  fc8c
   2354  fc8c
   2355  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2356  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2357  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2358  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2359  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2360  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2361  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2362  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2363  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2364  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2365  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2366  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2367  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2368  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2369  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2370  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2371  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2372  fc9c
   2373  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2374  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2375  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2376  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2377  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2378  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2379  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2380  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2381  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2382  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2383  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2384  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2385  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2386  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2387  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2388  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2389  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2390  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2391  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2392  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2393  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2394  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2395  fcb1
   2396  fcb1				   PlayerToDefaultColor
   2397  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2398  fcb2		       98		      .byte.b	#PLAYER1_COLOR
   2399  fcb3
   2400  fcb3				   PlayerToScoreGoodColor
   2401  fcb3		       37		      .byte.b	#SCORE_FONT_COLOR_GOOD
   2402  fcb4		       d8		      .byte.b	#OP_SCORE_FONT_COLOR_GOOD
   2403  fcb5
   2404  fcb5				   PlayerToScoreStartColor
   2405  fcb5		       38		      .byte.b	#SCORE_FONT_COLOR_START
   2406  fcb6		       c8		      .byte.b	#OP_SCORE_FONT_COLOR_START
   2407  fcb7
   2408  fcb7				   PlayerToScoreOverColor
   2409  fcb7		       0c		      .byte.b	#SCORE_FONT_COLOR_OVER
   2410  fcb8		       ab		      .byte.b	#OP_SCORE_FONT_COLOR_OVER
   2411  fcb9
   2412  fcb9				   PlayerToScoreBadColor
   2413  fcb9		       44		      .byte.b	#SCORE_FONT_COLOR_BAD
   2414  fcba		       56		      .byte.b	#OP_SCORE_FONT_COLOR_BAD
   2415  fcbb
   2416  fd00					      org	$FD00
   2417  fd00				   Font
   2418  fd00				   C0
   2419  fd00		       e7		      .byte.b	#%11100111	;
   2420  fd01		       a5		      .byte.b	#%10100101	; 
   2421  fd02		       a5		      .byte.b	#%10100101	; 
   2422  fd03		       a5		      .byte.b	#%10100101	; 
   2423  fd04		       e7		      .byte.b	#%11100111	;	
   2424  fd05				   C1
   2425  fd05		       e7		      .byte.b	#%11100111	;
   2426  fd06		       42		      .byte.b	#%01000010	; 
   2427  fd07		       42		      .byte.b	#%01000010	; 
   2428  fd08		       42		      .byte.b	#%01000010	; 
   2429  fd09		       66		      .byte.b	#%01100110	;
   2430  fd0a				   C2
   2431  fd0a		       e7		      .byte.b	#%11100111	;
   2432  fd0b		       24		      .byte.b	#%00100100	; 
   2433  fd0c		       e7		      .byte.b	#%11100111	; 
   2434  fd0d		       81		      .byte.b	#%10000001	; 
   2435  fd0e		       e7		      .byte.b	#%11100111	;
   2436  fd0f				   C3
   2437  fd0f		       e7		      .byte.b	#%11100111	;
   2438  fd10		       81		      .byte.b	#%10000001	; 
   2439  fd11		       e7		      .byte.b	#%11100111	; 
   2440  fd12		       81		      .byte.b	#%10000001	; 
   2441  fd13		       e7		      .byte.b	#%11100111	;
   2442  fd14				   C4
   2443  fd14		       81		      .byte.b	#%10000001	;
   2444  fd15		       81		      .byte.b	#%10000001	; 
   2445  fd16		       e7		      .byte.b	#%11100111	; 
   2446  fd17		       a5		      .byte.b	#%10100101	; 
   2447  fd18		       a5		      .byte.b	#%10100101	;
   2448  fd19				   C5
   2449  fd19		       e7		      .byte.b	#%11100111	;
   2450  fd1a		       81		      .byte.b	#%10000001	; 
   2451  fd1b		       e7		      .byte.b	#%11100111	; 
   2452  fd1c		       24		      .byte.b	#%00100100	; 
   2453  fd1d		       e7		      .byte.b	#%11100111	;
   2454  fd1e				   C6
   2455  fd1e		       e7		      .byte.b	#%11100111	;
   2456  fd1f		       a5		      .byte.b	#%10100101	; 
   2457  fd20		       e7		      .byte.b	#%11100111	; 
   2458  fd21		       24		      .byte.b	#%00100100	; 
   2459  fd22		       e7		      .byte.b	#%11100111	;
   2460  fd23				   C7
   2461  fd23		       81		      .byte.b	#%10000001	;
   2462  fd24		       81		      .byte.b	#%10000001	; 
   2463  fd25		       81		      .byte.b	#%10000001	; 
   2464  fd26		       81		      .byte.b	#%10000001	; 
   2465  fd27		       e7		      .byte.b	#%11100111	;
   2466  fd28				   C8
   2467  fd28		       e7		      .byte.b	#%11100111	;
   2468  fd29		       a5		      .byte.b	#%10100101	; 
   2469  fd2a		       e7		      .byte.b	#%11100111	; 
   2470  fd2b		       a5		      .byte.b	#%10100101	; 
   2471  fd2c		       e7		      .byte.b	#%11100111	;
   2472  fd2d				   C9
   2473  fd2d		       e7		      .byte.b	#%11100111	;
   2474  fd2e		       81		      .byte.b	#%10000001	; 
   2475  fd2f		       e7		      .byte.b	#%11100111	; 
   2476  fd30		       a5		      .byte.b	#%10100101	; 
   2477  fd31		       e7		      .byte.b	#%11100111	;
   2478  fd32				   CA
   2479  fd32		       a5		      .byte.b	#%10100101	;
   2480  fd33		       a5		      .byte.b	#%10100101	; 
   2481  fd34		       e7		      .byte.b	#%11100111	; 
   2482  fd35		       a5		      .byte.b	#%10100101	; 
   2483  fd36		       e7		      .byte.b	#%11100111	;
   2484  fd37				   CB
   2485  fd37		       66		      .byte.b	#%01100110	;
   2486  fd38		       a5		      .byte.b	#%10100101	; 
   2487  fd39		       66		      .byte.b	#%01100110	; 
   2488  fd3a		       a5		      .byte.b	#%10100101	;
   2489  fd3b		       66		      .byte.b	#%01100110	;
   2490  fd3c				   CC
   2491  fd3c		       e7		      .byte.b	#%11100111	;
   2492  fd3d		       24		      .byte.b	#%00100100	; 
   2493  fd3e		       24		      .byte.b	#%00100100	; 
   2494  fd3f		       24		      .byte.b	#%00100100	;
   2495  fd40		       e7		      .byte.b	#%11100111	;
   2496  fd41
   2497  fd41				   CD
   2498  fd41		       66		      .byte.b	#%01100110	;
   2499  fd42		       a5		      .byte.b	#%10100101	; 
   2500  fd43		       a5		      .byte.b	#%10100101	; 
   2501  fd44		       a5		      .byte.b	#%10100101	;
   2502  fd45		       66		      .byte.b	#%01100110	;
   2503  fd46
   2504  fd46				   CE
   2505  fd46		       e7		      .byte.b	#%11100111	;
   2506  fd47		       24		      .byte.b	#%00100100	; 
   2507  fd48		       e7		      .byte.b	#%11100111	; 
   2508  fd49		       24		      .byte.b	#%00100100	; 
   2509  fd4a		       e7		      .byte.b	#%11100111	;
   2510  fd4b
   2511  fd4b				   CF
   2512  fd4b		       24		      .byte.b	#%00100100	;
   2513  fd4c		       24		      .byte.b	#%00100100	; 
   2514  fd4d		       e7		      .byte.b	#%11100111	; 
   2515  fd4e		       24		      .byte.b	#%00100100	; 
   2516  fd4f		       e7		      .byte.b	#%11100111	;
   2517  fd50
   2518  fd50				   CG
   2519  fd50		       c3		      .byte.b	#%11000011	;
   2520  fd51		       a5		      .byte.b	#%10100101	; 
   2521  fd52		       a5		      .byte.b	#%10100101	; 
   2522  fd53		       24		      .byte.b	#%00100100	; 
   2523  fd54		       c3		      .byte.b	#%11000011	;	
   2524  fd55
   2525  fd55				   CH
   2526  fd55		       a5		      .byte.b	#%10100101	;
   2527  fd56		       a5		      .byte.b	#%10100101	; 
   2528  fd57		       e7		      .byte.b	#%11100111	; 
   2529  fd58		       a5		      .byte.b	#%10100101	; 
   2530  fd59		       a5		      .byte.b	#%10100101	;
   2531  fd5a
   2532  fd5a				   CI
   2533  fd5a		       e7		      .byte.b	#%11100111	;
   2534  fd5b		       42		      .byte.b	#%01000010	; 
   2535  fd5c		       42		      .byte.b	#%01000010	; 
   2536  fd5d		       42		      .byte.b	#%01000010	; 
   2537  fd5e		       e7		      .byte.b	#%11100111	;
   2538  fd5f
   2539  fd5f				   CJ
   2540  fd5f		       e7		      .byte.b	#%11100111	;
   2541  fd60		       a5		      .byte.b	#%10100101	; 
   2542  fd61		       81		      .byte.b	#%10000001	; 
   2543  fd62		       81		      .byte.b	#%10000001	; 
   2544  fd63		       81		      .byte.b	#%10000001	;	
   2545  fd64
   2546  fd64				   CK
   2547  fd64		       a5		      .byte.b	#%10100101	;
   2548  fd65		       a5		      .byte.b	#%10100101	; 
   2549  fd66		       66		      .byte.b	#%01100110	; 
   2550  fd67		       a5		      .byte.b	#%10100101	; 
   2551  fd68		       a5		      .byte.b	#%10100101	;
   2552  fd69
   2553  fd69				   CL
   2554  fd69		       e7		      .byte.b	#%11100111	;
   2555  fd6a		       24		      .byte.b	#%00100100	; 
   2556  fd6b		       24		      .byte.b	#%00100100	; 
   2557  fd6c		       24		      .byte.b	#%00100100	; 
   2558  fd6d		       24		      .byte.b	#%00100100	;
   2559  fd6e
   2560  fd6e				   CM
   2561  fd6e		       a5		      .byte.b	#%10100101	;
   2562  fd6f		       a5		      .byte.b	#%10100101	; 
   2563  fd70		       a5		      .byte.b	#%10100101	; 
   2564  fd71		       e7		      .byte.b	#%11100111	; 
   2565  fd72		       a5		      .byte.b	#%10100101	;
   2566  fd73
   2567  fd73				   CN
   2568  fd73		       a5		      .byte.b	#%10100101	;
   2569  fd74		       a5		      .byte.b	#%10100101	; 
   2570  fd75		       a5		      .byte.b	#%10100101	; 
   2571  fd76		       a5		      .byte.b	#%10100101	; 
   2572  fd77		       66		      .byte.b	#%01100110	;	
   2573  fd78
   2574  fd78
   2575  fd78				   CO
   2576  fd78		       42		      .byte.b	#%01000010	;
   2577  fd79		       a5		      .byte.b	#%10100101	; 
   2578  fd7a		       a5		      .byte.b	#%10100101	; 
   2579  fd7b		       a5		      .byte.b	#%10100101	; 
   2580  fd7c		       42		      .byte.b	#%01000010	;	
   2581  fd7d
   2582  fd7d				   CP
   2583  fd7d		       24		      .byte.b	#%00100100	;
   2584  fd7e		       24		      .byte.b	#%00100100	; 
   2585  fd7f		       e7		      .byte.b	#%11100111	; 
   2586  fd80		       a5		      .byte.b	#%10100101	; 
   2587  fd81		       e7		      .byte.b	#%11100111	;
   2588  fd82
   2589  fd82				   CQ
   2590  fd82		       81		      .byte.b	#%10000001	;
   2591  fd83		       e5		      .byte.b	#%11100101	; 
   2592  fd84		       a5		      .byte.b	#%10100101	; 
   2593  fd85		       a5		      .byte.b	#%10100101	; 
   2594  fd86		       e7		      .byte.b	#%11100111	;	
   2595  fd87
   2596  fd87				   CR
   2597  fd87		       a5		      .byte.b	#%10100101	;
   2598  fd88		       a5		      .byte.b	#%10100101	; 
   2599  fd89		       66		      .byte.b	#%01100110	; 
   2600  fd8a		       a5		      .byte.b	#%10100101	; 
   2601  fd8b		       66		      .byte.b	#%01100110	;
   2602  fd8c
   2603  fd8c				   CS
   2604  fd8c		       66		      .byte.b	#%01100110	;
   2605  fd8d		       81		      .byte.b	#%10000001	; 
   2606  fd8e		       42		      .byte.b	#%01000010	; 
   2607  fd8f		       24		      .byte.b	#%00100100	; 
   2608  fd90		       c3		      .byte.b	#%11000011	;
   2609  fd91
   2610  fd91				   CT
   2611  fd91		       42		      .byte.b	#%01000010	;
   2612  fd92		       42		      .byte.b	#%01000010	; 
   2613  fd93		       42		      .byte.b	#%01000010	; 
   2614  fd94		       42		      .byte.b	#%01000010	; 
   2615  fd95		       e7		      .byte.b	#%11100111	;
   2616  fd96
   2617  fd96				   CU
   2618  fd96		       e7		      .byte.b	#%11100111	;
   2619  fd97		       a5		      .byte.b	#%10100101	; 
   2620  fd98		       a5		      .byte.b	#%10100101	; 
   2621  fd99		       a5		      .byte.b	#%10100101	; 
   2622  fd9a		       a5		      .byte.b	#%10100101	;	
   2623  fd9b
   2624  fd9b				   CW
   2625  fd9b		       a5		      .byte.b	#%10100101	;
   2626  fd9c		       e7		      .byte.b	#%11100111	; 
   2627  fd9d		       a5		      .byte.b	#%10100101	; 
   2628  fd9e		       a5		      .byte.b	#%10100101	; 
   2629  fd9f		       a5		      .byte.b	#%10100101	;
   2630  fda0
   2631  fda0				   CY
   2632  fda0		       42		      .byte.b	#%01000010	;
   2633  fda1		       42		      .byte.b	#%01000010	; 
   2634  fda2		       42		      .byte.b	#%01000010	; 
   2635  fda3		       a5		      .byte.b	#%10100101	; 
   2636  fda4		       a5		      .byte.b	#%10100101	;
   2637  fda5
   2638  fda5				   Exclamation
   2639  fda5		       42		      .byte.b	#%01000010	;
   2640  fda6		       00		      .byte.b	#%00000000	; 
   2641  fda7		       42		      .byte.b	#%01000010	; 
   2642  fda8		       42		      .byte.b	#%01000010	; 
   2643  fda9		       42		      .byte.b	#%01000010	;
   2644  fdaa
   2645  fdaa				   Pipe
   2646  fdaa				   Colon
   2647  fdaa		       42		      .byte.b	#%01000010	;
   2648  fdab		       42		      .byte.b	#%01000010	; 
   2649  fdac		       00		      .byte.b	#%00000000	; 
   2650  fdad		       42		      .byte.b	#%01000010	; 
   2651  fdae		       42		      .byte.b	#%01000010	;
   2652  fdaf
   2653  fdaf				   Space
   2654  fdaf				   C0B
   2655  fdaf		       00		      .byte.b	#%00000000	;
   2656  fdb0		       00		      .byte.b	#%00000000	; 
   2657  fdb1		       00		      .byte.b	#%00000000	; 
   2658  fdb2		       00		      .byte.b	#%00000000	; 
   2659  fdb3		       00		      .byte.b	#%00000000	;	
   2660  fdb4				   C1B
   2661  fdb4		       24		      .byte.b	#%00100100	;
   2662  fdb5		       00		      .byte.b	#%00000000	; 
   2663  fdb6		       00		      .byte.b	#%00000000	; 
   2664  fdb7		       00		      .byte.b	#%00000000	; 
   2665  fdb8		       00		      .byte.b	#%00000000	;
   2666  fdb9				   C2B
   2667  fdb9		       66		      .byte.b	#%01100110	;
   2668  fdba		       00		      .byte.b	#%00000000	; 
   2669  fdbb		       00		      .byte.b	#%00000000	; 
   2670  fdbc		       00		      .byte.b	#%00000000	; 
   2671  fdbd		       00		      .byte.b	#%00000000	;
   2672  fdbe				   C3B
   2673  fdbe		       e7		      .byte.b	#%11100111	;
   2674  fdbf		       00		      .byte.b	#%00000000	; 
   2675  fdc0		       00		      .byte.b	#%00000000	; 
   2676  fdc1		       00		      .byte.b	#%00000000	; 
   2677  fdc2		       00		      .byte.b	#%00000000	;
   2678  fdc3				   C4B
   2679  fdc3		       e7		      .byte.b	#%11100111	;
   2680  fdc4		       24		      .byte.b	#%00100100	; 
   2681  fdc5		       00		      .byte.b	#%00000000	; 
   2682  fdc6		       00		      .byte.b	#%00000000	; 
   2683  fdc7		       00		      .byte.b	#%00000000	;
   2684  fdc8				   C5B
   2685  fdc8		       e7		      .byte.b	#%11100111	;
   2686  fdc9		       66		      .byte.b	#%01100110	; 
   2687  fdca		       00		      .byte.b	#%00000000	; 
   2688  fdcb		       00		      .byte.b	#%00000000	; 
   2689  fdcc		       00		      .byte.b	#%00000000	;
   2690  fdcd				   C6B
   2691  fdcd		       e7		      .byte.b	#%11100111	;
   2692  fdce		       e7		      .byte.b	#%11100111	; 
   2693  fdcf		       00		      .byte.b	#%00000000	; 
   2694  fdd0		       00		      .byte.b	#%00000000	; 
   2695  fdd1		       00		      .byte.b	#%00000000	;
   2696  fdd2				   C7B
   2697  fdd2		       e7		      .byte.b	#%11100111	;
   2698  fdd3		       e7		      .byte.b	#%11100111	; 
   2699  fdd4		       24		      .byte.b	#%00100100	; 
   2700  fdd5		       00		      .byte.b	#%00000000	; 
   2701  fdd6		       00		      .byte.b	#%00000000	;
   2702  fdd7				   C8B
   2703  fdd7		       e7		      .byte.b	#%11100111	;
   2704  fdd8		       e7		      .byte.b	#%11100111	; 
   2705  fdd9		       66		      .byte.b	#%01100110	; 
   2706  fdda		       00		      .byte.b	#%00000000	; 
   2707  fddb		       00		      .byte.b	#%00000000	;
   2708  fddc				   C9B
   2709  fddc		       e7		      .byte.b	#%11100111	;
   2710  fddd		       e7		      .byte.b	#%11100111	; 
   2711  fdde		       e7		      .byte.b	#%11100111	; 
   2712  fddf		       00		      .byte.b	#%00000000	; 
   2713  fde0		       00		      .byte.b	#%00000000	;
   2714  fde1				   CAB
   2715  fde1		       e7		      .byte.b	#%11100111	;
   2716  fde2		       e7		      .byte.b	#%11100111	; 
   2717  fde3		       e7		      .byte.b	#%11100111	; 
   2718  fde4		       24		      .byte.b	#%00100100	; 
   2719  fde5		       00		      .byte.b	#%00000000	;
   2720  fde6				   CBB
   2721  fde6		       e7		      .byte.b	#%11100111	;
   2722  fde7		       e7		      .byte.b	#%11100111	; 
   2723  fde8		       e7		      .byte.b	#%11100111	; 
   2724  fde9		       66		      .byte.b	#%01100110	; 
   2725  fdea		       00		      .byte.b	#%00000000	;
   2726  fdeb				   CCB
   2727  fdeb		       e7		      .byte.b	#%11100111	;
   2728  fdec		       e7		      .byte.b	#%11100111	; 
   2729  fded		       e7		      .byte.b	#%11100111	; 
   2730  fdee		       e7		      .byte.b	#%11100111	; 
   2731  fdef		       00		      .byte.b	#%00000000	;
   2732  fdf0
   2733  fdf0				   CDB
   2734  fdf0		       e7		      .byte.b	#%11100111	;
   2735  fdf1		       e7		      .byte.b	#%11100111	; 
   2736  fdf2		       e7		      .byte.b	#%11100111	; 
   2737  fdf3		       e7		      .byte.b	#%11100111	; 
   2738  fdf4		       24		      .byte.b	#%00100100	;
   2739  fdf5
   2740  fdf5				   CEB
   2741  fdf5		       e7		      .byte.b	#%11100111	;
   2742  fdf6		       e7		      .byte.b	#%11100111	; 
   2743  fdf7		       e7		      .byte.b	#%11100111	; 
   2744  fdf8		       e7		      .byte.b	#%11100111	; 
   2745  fdf9		       66		      .byte.b	#%01100110	;
   2746  fdfa
   2747  fdfa				   CFB
   2748  fdfa		       e7		      .byte.b	#%11100111	;
   2749  fdfb		       e7		      .byte.b	#%11100111	; 
   2750  fdfc		       e7		      .byte.b	#%11100111	; 
   2751  fdfd		       e7		      .byte.b	#%11100111	; 
   2752  fdfe		       e7		      .byte.b	#%11100111	;
   2753  fdff
   2754  fe00					      org	$FE00
   2755  fe00				   AesTable
   2756  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2757  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2758  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2759  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2760  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2761  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2762  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2763  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2764  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2765  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2766  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2767  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2768  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2769  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2770  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2771  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2772  ff00
   2773  ff00					      org	$FF00
   2774  ff00				   StaticText		; All static text must be on the same MSB block. 
   2775  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2776  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2777  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2778  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2779  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2780  ff04
   2781  ff04				   HellwayLeftText
   2782  ff04		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2783  ff05		       59		      .byte.b	#<CH + #FONT_OFFSET
   2784  ff06		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2785  ff07		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2786  ff08
   2787  ff08				   HellwayRightText
   2788  ff08		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2789  ff09		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2790  ff0a		       81		      .byte.b	#<CP + #FONT_OFFSET
   2791  ff0b		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2792  ff0c		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2793  ff0d
   2794  ff0d				   OpbText
   2795  ff0d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2796  ff0e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2797  ff0f		       81		      .byte.b	#<CP + #FONT_OFFSET
   2798  ff10		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2799  ff11
   2800  ff11				   YearText
   2801  ff11		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2802  ff12		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2803  ff13		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2804  ff14		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2805  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2806  ff16
   2807  ff16				   GoText
   2808  ff16		       54		      .byte.b	#<CG + #FONT_OFFSET
   2809  ff17		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2810  ff18		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2811  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2812  ff1a
   2813  ff1a				   WinText
   2814  ff1a		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2815  ff1b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2816  ff1c		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2817  ff1d
   2818  ff1d				   LoseText
   2819  ff1d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2820  ff1e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2821  ff1f		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2822  ff20
   2823  ff20				   BuildNumberText
   2824  ff20		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2825  ff21		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2826  ff22		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2827  ff23		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2828  ff24		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2829  ff25
   2830  ff25				   ReadyText
   2831  ff25		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2832  ff26		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2833  ff27		       36		      .byte.b	#<CA + #FONT_OFFSET
   2834  ff28		       45		      .byte.b	#<CD + #FONT_OFFSET
   2835  ff29		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2836  ff2a
   2837  ff2a				   EndStaticText
   2838  ff2a
   2839  ff2a				   EngineSoundType
   2840  ff2a		       02		      .byte.b	#2
   2841  ff2b		       02		      .byte.b	#2
   2842  ff2c		       0e		      .byte.b	#14
   2843  ff2d		       06		      .byte.b	#6
   2844  ff2e		       06		      .byte.b	#6
   2845  ff2f		       0e		      .byte.b	#14
   2846  ff30
   2847  ff30				   EngineBaseFrequence
   2848  ff30		       1f		      .byte.b	#31
   2849  ff31		       15		      .byte.b	#21
   2850  ff32		       14		      .byte.b	#20
   2851  ff33		       1f		      .byte.b	#31
   2852  ff34		       16		      .byte.b	#22
   2853  ff35		       03		      .byte.b	#3
   2854  ff36
   2855  ff36				   CarSprite0		; Upside down, Original Car
   2856  ff36		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2857  ff3e				   CarSprite0NoPadding
   2858  ff3e		       7e		      .byte.b	#%01111110
   2859  ff3f		       24		      .byte.b	#%00100100
   2860  ff40		       bd		      .byte.b	#%10111101
   2861  ff41		       3c		      .byte.b	#%00111100
   2862  ff42		       bd		      .byte.b	#%10111101
   2863  ff43		       3c		      .byte.b	#%00111100
   2864  ff44
   2865  ff44				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2866  ff44		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2867  ff4c				   CarSprite1NoPadding
   2868  ff4c		       bd		      .byte.b	#%10111101
   2869  ff4d		       7e		      .byte.b	#%01111110
   2870  ff4e		       5a		      .byte.b	#%01011010
   2871  ff4f		       66		      .byte.b	#%01100110
   2872  ff50		       bd		      .byte.b	#%10111101
   2873  ff51		       3c		      .byte.b	#%00111100
   2874  ff52
   2875  ff52				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2876  ff52		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2877  ff5a				   CarSprite2NoPadding
   2878  ff5a		       7e		      .byte.b	#%01111110
   2879  ff5b		       a5		      .byte.b	#%10100101
   2880  ff5c		       42		      .byte.b	#%01000010
   2881  ff5d		       42		      .byte.b	#%01000010
   2882  ff5e		       bd		      .byte.b	#%10111101
   2883  ff5f		       7e		      .byte.b	#%01111110
   2884  ff60
   2885  ff60				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2886  ff60		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2887  ff68				   CarSprite3NoPadding
   2888  ff68		       3c		      .byte.b	#%00111100
   2889  ff69		       db		      .byte.b	#%11011011
   2890  ff6a		       db		      .byte.b	#%11011011
   2891  ff6b		       3c		      .byte.b	#%00111100
   2892  ff6c		       5a		      .byte.b	#%01011010
   2893  ff6d		       3c		      .byte.b	#%00111100
   2894  ff6e
   2895  ff6e				   TrafficSpeeds
   2896  ff6e		       00		      .byte.b	#$00	;  Trafic0 L
   2897  ff6f		       00		      .byte.b	#$00	;  Trafic0 H
   2898  ff70		       0a		      .byte.b	#$0A	;  Trafic1 L
   2899  ff71		       01		      .byte.b	#$01	;  Trafic1 H
   2900  ff72		       e6		      .byte.b	#$E6	;  Trafic2 L
   2901  ff73		       00		      .byte.b	#$00	;  Trafic2 H
   2902  ff74		       c2		      .byte.b	#$C2	;  Trafic3 L
   2903  ff75		       00		      .byte.b	#$00	;  Trafic3 H
   2904  ff76		       9e		      .byte.b	#$9E	;  Trafic4 L
   2905  ff77		       00		      .byte.b	#$00	;  Trafic4 H
   2906  ff78				   TrafficSpeedsHighDelta
   2907  ff78		       00		      .byte.b	#$00	;  Trafic0 L
   2908  ff79		       00		      .byte.b	#$00	;  Trafic0 H
   2909  ff7a		       0a		      .byte.b	#$0A	;  Trafic1 L
   2910  ff7b		       01		      .byte.b	#$01	;  Trafic1 H
   2911  ff7c		       c8		      .byte.b	#$C8	;  Trafic2 L
   2912  ff7d		       00		      .byte.b	#$00	;  Trafic2 H
   2913  ff7e		       86		      .byte.b	#$86	;  Trafic3 L
   2914  ff7f		       00		      .byte.b	#$00	;  Trafic3 H
   2915  ff80		       44		      .byte.b	#$44	;  Trafic4 L
   2916  ff81		       00		      .byte.b	#$00	;  Trafic4 H
   2917  ff82
   2918  ff82				   CarIdToSpriteAddressL
   2919  ff82		       36		      .byte.b	#<CarSprite0
   2920  ff83		       44		      .byte.b	#<CarSprite1
   2921  ff84		       52		      .byte.b	#<CarSprite2
   2922  ff85		       60		      .byte.b	#<CarSprite3
   2923  ff86
   2924  ff86				   CarIdToSpriteAddressH
   2925  ff86		       ff		      .byte.b	#>CarSprite0
   2926  ff87		       ff		      .byte.b	#>CarSprite1
   2927  ff88		       ff		      .byte.b	#>CarSprite2
   2928  ff89		       ff		      .byte.b	#>CarSprite3
   2929  ff8a
   2930  ff8a				   EnemyCarIdToSpriteAddressL
   2931  ff8a		       3e		      .byte.b	#<CarSprite0NoPadding
   2932  ff8b		       4c		      .byte.b	#<CarSprite1NoPadding
   2933  ff8c		       5a		      .byte.b	#<CarSprite2NoPadding
   2934  ff8d		       68		      .byte.b	#<CarSprite3NoPadding
   2935  ff8e
   2936  ff8e				   EnemyCarIdToSpriteAddressH
   2937  ff8e		       ff		      .byte.b	#>CarSprite0NoPadding
   2938  ff8f		       ff		      .byte.b	#>CarSprite1NoPadding
   2939  ff90		       ff		      .byte.b	#>CarSprite2NoPadding
   2940  ff91		       ff		      .byte.b	#>CarSprite3NoPadding
   2941  ff92
   2942  ff92				   CarIdToAccelerateSpeed
   2943  ff92		       80		      .byte.b	#128
   2944  ff93		       c0		      .byte.b	#192
   2945  ff94		       60		      .byte.b	#96
   2946  ff95		       c0		      .byte.b	#192
   2947  ff96
   2948  ff96				   CarIdToTimeoverBreakInterval 		; Glide
   2949  ff96		       03		      .byte.b	#%00000011	;Every 4 frames
   2950  ff97		       03		      .byte.b	#%00000011	;Every 4 frames
   2951  ff98		       0f		      .byte.b	#%00001111	;Every 16 frames
   2952  ff99		       03		      .byte.b	#%00000011	;Every 4 frames
   2953  ff9a
   2954  ff9a				   CarIdToMaxSpeedL
   2955  ff9a		       80		      .byte.b	#$80
   2956  ff9b		       00		      .byte.b	#$00	; One less gear
   2957  ff9c		       80		      .byte.b	#$80
   2958  ff9d		       80		      .byte.b	#$80
   2959  ff9e
   2960  ff9e				   CarIdToMaxGear
   2961  ff9e		       05		      .byte.b	#5
   2962  ff9f		       04		      .byte.b	#4	; One less gear
   2963  ffa0		       05		      .byte.b	#5
   2964  ffa1		       05		      .byte.b	#5
   2965  ffa2
   2966  ffa2				   GearToBreakSpeedTable
   2967  ffa2		       09		      .byte.b	#(BREAK_SPEED - 1)
   2968  ffa3		       09		      .byte.b	#(BREAK_SPEED - 1)
   2969  ffa4		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2970  ffa5		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2971  ffa6		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2972  ffa7		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2973  ffa8
   2974  ffa8				   TrafficColorTable
   2975  ffa8		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2976  ffa9		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2977  ffaa		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2978  ffab		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2979  ffac
   2980  ffac				   TrafficChanceTable
   2981  ffac		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2982  ffad		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2983  ffae		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2984  ffaf		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2985  ffb0
   2986  ffb0				   TrafficTimeTable
   2987  ffb0		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2988  ffb1		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2989  ffb2		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2990  ffb3		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2991  ffb4		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2992  ffb5
   2993  ffb5
   2994  fffc					      org	$FFFC
   2995  fffc		       00 f0		      .word.w	BeforeStart
   2996  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
