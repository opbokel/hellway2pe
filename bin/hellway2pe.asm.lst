------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 09	   ENGINE_VOLUME =	9
    104  f000
    105  f000		       00 08	   CAR_SIZE   =	8
    106  f000
    107  f000		       00 80	   GRP0Cache  =	$80
    108  f000		       00 81	   PF0Cache   =	$81
    109  f000		       00 82	   PF1Cache   =	$82
    110  f000		       00 83	   PF2Cache   =	$83
    111  f000		       00 84	   GRP1Cache  =	$84
    112  f000		       00 85	   ENABLCache =	$85
    113  f000		       00 86	   ENAM0Cache =	$86
    114  f000		       00 87	   ENAM1Cache =	$87
    115  f000
    116  f000		       00 8c	   FrameCount0 =	$8C	;
    117  f000		       00 8d	   FrameCount1 =	$8D	;
    118  f000
    119  f000		       00 8e	   CollisionCounter =	$8E
    120  f000		       00 8f	   OpCollisionCounter =	$8F
    121  f000
    122  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    123  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    124  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    125  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    126  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    127  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    128  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    129  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    130  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    131  f000
    132  f000							;Temporary variables, multiple uses
    133  f000		       00 b0	   Tmp0       =	$B0
    134  f000		       00 b1	   Tmp1       =	$B1
    135  f000		       00 b2	   Tmp2       =	$B2
    136  f000		       00 b3	   Tmp3       =	$B3
    137  f000		       00 b4	   Tmp4       =	$B4
    138  f000		       00 b5	   Tmp5       =	$B5
    139  f000
    140  f000		       00 b6	   Player0X   =	$B6
    141  f000		       00 b7	   Player1X   =	$B7
    142  f000		       00 b8	   CountdownTimer =	$B8
    143  f000		       00 b9	   OpCountdownTimer =	$B9
    144  f000		       00 ba	   Traffic0Msb =	$BA
    145  f000		       00 bb	   OpTraffic0Msb =	$BB
    146  f000		       00 bc	   SwitchDebounceCounter =	$BC
    147  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    148  f000		       00 be	   TrafficChance =	$BE
    149  f000		       00 bf	   OpTrafficChance =	$BF
    150  f000
    151  f000		       00 c0	   CheckpointTime =	$C0
    152  f000		       00 c1	   OpCheckpointTime =	$C1
    153  f000		       00 c2	   TrafficColor =	$C2
    154  f000		       00 c3	   OpTrafficColor =	$C3
    155  f000		       00 c4	   CurrentDifficulty =	$C4
    156  f000		       00 c5	   OpCurrentDifficulty =	$C5
    157  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    158  f000
    159  f000		       00 c7	   CurrentCarId =	$C7
    160  f000		       00 c8	   OpCurrentCarId =	$C8
    161  f000
    162  f000		       00 c9	   ScoreFontColor =	$C9
    163  f000		       00 ca	   OpScoreFontColor =	$CA
    164  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    165  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    166  f000		       00 cd	   NextCheckpoint =	$CD
    167  f000		       00 ce	   OpNextCheckpoint =	$CE
    168  f000		       00 cf	   OpponentLine =	$CF
    169  f000
    170  f000		       00 d0	   ScoreD0    =	$D0
    171  f000		       00 d1	   ScoreD1    =	$D1
    172  f000		       00 d2	   ScoreD2    =	$D2
    173  f000		       00 d3	   ScoreD3    =	$D3
    174  f000		       00 d4	   ScoreD4    =	$D4
    175  f000
    176  f000		       00 d5	   Gear       =	$D5
    177  f000		       00 d6	   OpGear     =	$D6
    178  f000
    179  f000		       00 d7	   CarSpritePointerL =	$D7
    180  f000		       00 d8	   CarSpritePointerH =	$D8
    181  f000
    182  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    183  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    184  f000
    185  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    186  f000
    187  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    188  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    189  f000
    190  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    191  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    192  f000
    193  f000		       00 f0	   Player0SpeedL =	$F0
    194  f000		       00 f1	   Player1SpeedL =	$F1
    195  f000		       00 f2	   Player0SpeedH =	$F2
    196  f000		       00 f3	   Player1SpeedH =	$F3
    197  f000
    198  f000		       00 f4	   IsOpponentInFront =	$F4	; Bit 7 tells if negative or positive.
    199  f000
    200  f000							;generic start up stuff, put zero in almost all...
    201  f000				   BeforeStart		;All variables that are kept on game reset or select
    202  f000		       a0 00		      LDY	#0
    203  f002		       84 bc		      STY	SwitchDebounceCounter
    204  f004		       84 c4		      STY	CurrentDifficulty
    205  f006		       84 c5		      STY	OpCurrentDifficulty
    206  f008		       84 bd		      STY	GameStatus
    207  f00a		       84 c7		      STY	CurrentCarId
    208  f00c		       84 c8		      STY	OpCurrentCarId
    209  f00e		       a0 10		      LDY	#16
    210  f010		       84 c6		      STY	GameMode
    211  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    212  f014
    213  f014				   Start
    214  f014		       a9 02		      LDA	#2
    215  f016		       85 00		      STA	VSYNC
    216  f018		       85 02		      STA	WSYNC
    217  f01a		       85 02		      STA	WSYNC
    218  f01c		       85 02		      STA	WSYNC
    219  f01e		       a9 00		      LDA	#0	;2
    220  f020		       85 00		      STA	VSYNC	;3
    221  f022
    222  f022		       78		      SEI
    223  f023		       d8		      CLD
    224  f024		       a2 ff		      LDX	#$FF
    225  f026		       9a		      TXS
    226  f027
    227  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    228  f029				   CleanMem
    229  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    230  f02b		       f0 1a		      BEQ	SkipClean
    231  f02d		       e0 c6		      CPX	#GameMode
    232  f02f		       f0 16		      BEQ	SkipClean
    233  f031		       e0 c7		      CPX	#CurrentCarId
    234  f033		       f0 12		      BEQ	SkipClean
    235  f035		       e0 c8		      CPX	#OpCurrentCarId
    236  f037		       f0 0e		      BEQ	SkipClean
    237  f039		       e0 c4		      CPX	#CurrentDifficulty
    238  f03b		       f0 0a		      BEQ	SkipClean
    239  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    240  f03f		       f0 06		      BEQ	SkipClean
    241  f041		       e0 bd		      CPX	#GameStatus
    242  f043		       f0 02		      BEQ	SkipClean
    243  f045		       95 00		      STA	0,X
    244  f047				   SkipClean
    245  f047		       e8		      INX
    246  f048		       d0 df		      BNE	CleanMem
    247  f04a
    248  f04a		       a9 d5		      LDA	#213
    249  f04c		       8d 96 02 	      STA	TIM64T	;3	
    250  f04f
    251  f04f							;Setting some variables...
    252  f04f
    253  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    254  f04f		       85 02		      STA	WSYNC	;We will set player position
    255  f051		       20 20 f7 	      JSR	DefaultOffsets
    256  f054
    257  f054		       ad 85 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    258  f057		       85 f0		      STA	Player0SpeedL
    259  f059		       85 f1		      STA	Player1SpeedL
    260  f05b
    261  f05b							;SLEEP 11;18
    262  f05b		       a2 00		      LDX	#0
    263  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    264  f060		       85 db		      STA	StartSWCHB	; For game over
    265  f062		       29 c0		      AND	#%11000000
    266  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    267  f066		       e8		      INX
    268  f067		       c9 80		      CMP	#%10000000
    269  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    270  f06b		       e8		      INX
    271  f06c		       c9 40		      CMP	#%01000000
    272  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    273  f070		       e8		      INX
    274  f071
    275  f071				   StoreCurrentDifficulty
    276  f071		       86 c4		      STX	CurrentDifficulty
    277  f073		       86 c5		      STX	OpCurrentDifficulty
    278  f075		       a2 00		      LDX	#0
    279  f077		       20 d8 f6 	      JSR	ConfigureDifficulty
    280  f07a		       e8		      INX
    281  f07b		       20 d8 f6 	      JSR	ConfigureDifficulty
    282  f07e
    283  f07e				   SetGameNotRunning
    284  f07e		       a9 00		      LDA	#0
    285  f080		       85 bd		      STA	GameStatus
    286  f082
    287  f082				   ConfigureTimer
    288  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    289  f084		       85 b8		      STA	CountdownTimer	;3
    290  f086		       85 b9		      STA	OpCountdownTimer	;3
    291  f088
    292  f088				   ConfigurePlayer1XPosition
    293  f088		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    294  f08a		       85 b7		      STA	Player1X	;3
    295  f08c
    296  f08c				   ConfigureOpNextCheckpoint
    297  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    298  f08e		       85 ce		      STA	OpNextCheckpoint
    299  f090
    300  f090				   HPositioning 		; Avoid sleep doing needed stuff
    301  f090		       85 02		      STA	WSYNC
    302  f092
    303  f092				   ConfigurePlayer0XPosition
    304  f092		       a9 21		      LDA	#PLAYER_0_X_START	;2
    305  f094		       85 b6		      STA	Player0X	;3
    306  f096
    307  f096				   ConfigureMissileSize
    308  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    309  f098		       85 04		      STA	NUSIZ0	;3
    310  f09a		       85 05		      STA	NUSIZ1	;3
    311  f09c
    312  f09c				   ConfigureNextCheckpoint
    313  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    314  f09e		       85 cd		      STA	NextCheckpoint
    315  f0a0
    316  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    317  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	4	;
      1  f0a2				   .CYCLES    SET	4
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2				  -	      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2				  -	      ELSE
     12  f0a2				  -	      bit	VSYNC
     13  f0a2				  -	      ENDIF
     14  f0a2				  -.CYCLES    SET	.CYCLES - 3
     15  f0a2					      ENDIF
     16  f0a2
     17  f0a2					      REPEAT	.CYCLES / 2
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     19  f0a4					      REPEND
    319  f0a4		       85 12		      STA	RESM0
      0  f0a6					      SLEEP	2	;
      1  f0a6				   .CYCLES    SET	2
      2  f0a6
      3  f0a6				  -	      IF	.CYCLES < 2
      4  f0a6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a6				  -	      ERR
      6  f0a6					      ENDIF
      7  f0a6
      8  f0a6				  -	      IF	.CYCLES & 1
      9  f0a6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a6				  -	      nop	0
     11  f0a6				  -	      ELSE
     12  f0a6				  -	      bit	VSYNC
     13  f0a6				  -	      ENDIF
     14  f0a6				  -.CYCLES    SET	.CYCLES - 3
     15  f0a6					      ENDIF
     16  f0a6
     17  f0a6					      REPEAT	.CYCLES / 2
     18  f0a6		       ea		      nop
     19  f0a7					      REPEND
    321  f0a7		       85 14		      STA	RESBL
      0  f0a9					      SLEEP	2
      1  f0a9				   .CYCLES    SET	2
      2  f0a9
      3  f0a9				  -	      IF	.CYCLES < 2
      4  f0a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a9				  -	      ERR
      6  f0a9					      ENDIF
      7  f0a9
      8  f0a9				  -	      IF	.CYCLES & 1
      9  f0a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a9				  -	      nop	0
     11  f0a9				  -	      ELSE
     12  f0a9				  -	      bit	VSYNC
     13  f0a9				  -	      ENDIF
     14  f0a9				  -.CYCLES    SET	.CYCLES - 3
     15  f0a9					      ENDIF
     16  f0a9
     17  f0a9					      REPEAT	.CYCLES / 2
     18  f0a9		       ea		      nop
     19  f0aa					      REPEND
    323  f0aa		       85 13		      STA	RESM1
      0  f0ac					      SLEEP	3
      1  f0ac				   .CYCLES    SET	3
      2  f0ac
      3  f0ac				  -	      IF	.CYCLES < 2
      4  f0ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ac				  -	      ERR
      6  f0ac					      ENDIF
      7  f0ac
      8  f0ac					      IF	.CYCLES & 1
      9  f0ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ac				  -	      nop	0
     11  f0ac					      ELSE
     12  f0ac		       24 00		      bit	VSYNC
     13  f0ae					      ENDIF
     14  f0ae				   .CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae				  -	      REPEAT	.CYCLES / 2
     18  f0ae				  -	      nop
     19  f0ae					      REPEND
    325  f0ae
    326  f0ae		       a9 e0		      LDA	#$E0
    327  f0b0		       85 24		      STA	HMBL
    328  f0b2		       85 22		      STA	HMM0
    329  f0b4		       85 23		      STA	HMM1
    330  f0b6		       85 02		      STA	WSYNC
    331  f0b8		       85 2a		      STA	HMOVE
    332  f0ba		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    333  f0bc		       85 2b		      STA	HMCLR
      0  f0be					      SLEEP	30
      1  f0be				   .CYCLES    SET	30
      2  f0be
      3  f0be				  -	      IF	.CYCLES < 2
      4  f0be				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0be				  -	      ERR
      6  f0be					      ENDIF
      7  f0be
      8  f0be				  -	      IF	.CYCLES & 1
      9  f0be				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0be				  -	      nop	0
     11  f0be				  -	      ELSE
     12  f0be				  -	      bit	VSYNC
     13  f0be				  -	      ENDIF
     14  f0be				  -.CYCLES    SET	.CYCLES - 3
     15  f0be					      ENDIF
     16  f0be
     17  f0be					      REPEAT	.CYCLES / 2
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     19  f0cd					      REPEND
    335  f0cd		       85 10		      STA	RESP0
    336  f0cf							;SLEEP 5 ; Temporarily move player 1 away.
    337  f0cf		       85 11		      STA	RESP1
    338  f0d1
    339  f0d1				   WaitResetToEnd
    340  f0d1		       ad 84 02 	      LDA	INTIM
    341  f0d4		       d0 fb		      BNE	WaitResetToEnd
    342  f0d6
    343  f0d6				   MainLoop
    344  f0d6		       a9 02		      LDA	#2
    345  f0d8		       85 00		      STA	VSYNC
    346  f0da		       85 02		      STA	WSYNC
    347  f0dc		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    348  f0de				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    349  f0de		       a9 01		      LDA	#%00000001	;3
    350  f0e0		       24 df		      BIT	TextFlickerMode	;2
    351  f0e2		       f0 05		      BEQ	TextSideFrameZero	;2
    352  f0e4		       25 8d		      AND	FrameCount1	;2
    353  f0e6		       4c eb f0 	      JMP	StoreTextSize	;3
    354  f0e9				   TextSideFrameZero
    355  f0e9		       25 8c		      AND	FrameCount0	;2
    356  f0eb				   StoreTextSize
    357  f0eb		       85 de		      STA	TextSide	;3
    358  f0ed
    359  f0ed				   PrepareMaxHMove
      0  f0ed					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0ed				   .CYCLES    SET	18
      2  f0ed
      3  f0ed				  -	      IF	.CYCLES < 2
      4  f0ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ed				  -	      ERR
      6  f0ed					      ENDIF
      7  f0ed
      8  f0ed				  -	      IF	.CYCLES & 1
      9  f0ed				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ed				  -	      nop	0
     11  f0ed				  -	      ELSE
     12  f0ed				  -	      bit	VSYNC
     13  f0ed				  -	      ENDIF
     14  f0ed				  -.CYCLES    SET	.CYCLES - 3
     15  f0ed					      ENDIF
     16  f0ed
     17  f0ed					      REPEAT	.CYCLES / 2
     18  f0ed		       ea		      nop
     17  f0ed					      REPEND
     18  f0ee		       ea		      nop
     17  f0ee					      REPEND
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     17  f0f3					      REPEND
     18  f0f4		       ea		      nop
     17  f0f4					      REPEND
     18  f0f5		       ea		      nop
     19  f0f6					      REPEND
    361  f0f6		       a9 80		      LDA	#$80
    362  f0f8		       85 24		      STA	HMBL
    363  f0fa		       85 22		      STA	HMM0
    364  f0fc		       85 23		      STA	HMM1
    365  f0fe		       85 20		      STA	HMP0
    366  f100		       85 21		      STA	HMP1
    367  f102		       85 02		      STA	WSYNC
    368  f104		       85 2a		      STA	HMOVE	; 1/10			
    369  f106
    370  f106				   ConfigVBlankTimer
    371  f106		       a5 c6		      LDA	GameMode
    372  f108		       c9 10		      CMP	#MAX_GAME_MODE
    373  f10a		       f0 05		      BEQ	SetVblankTimerQrCode
    374  f10c		       a9 29		      LDA	#VBLANK_TIMER
    375  f10e		       4c 13 f1 	      JMP	SetVblankTimer
    376  f111				   SetVblankTimerQrCode
    377  f111		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    378  f113
    379  f113				   SetVblankTimer
    380  f113		       85 02		      STA	WSYNC	;3
    381  f115		       8d 96 02 	      STA	TIM64T	;3	
    382  f118		       a9 00		      LDA	#0	;2
    383  f11a		       85 00		      STA	VSYNC	;3	
    384  f11c
    385  f11c				   RandomizeGame
    386  f11c		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    387  f11e		       d0 2d		      BNE	EndRandomizeGame
    388  f120		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    389  f122		       29 02		      AND	#%00000010
    390  f124		       f0 24		      BEQ	DeterministicGame
    391  f126		       a6 96		      LDX	TrafficOffset1 + 2
    392  f128		       bd 00 fe 	      LDA	AesTable,X
    393  f12b		       45 8c		      EOR	FrameCount0
    394  f12d		       85 96		      STA	TrafficOffset1 + 2
    395  f12f		       85 a6		      STA	OpTrafficOffset1 + 2
    396  f131		       a6 9a		      LDX	TrafficOffset2 + 2
    397  f133		       bd 00 fe 	      LDA	AesTable,X
    398  f136		       45 8c		      EOR	FrameCount0
    399  f138		       85 9a		      STA	TrafficOffset2 + 2
    400  f13a		       85 aa		      STA	OpTrafficOffset2 + 2
    401  f13c		       a6 9e		      LDX	TrafficOffset3 + 2
    402  f13e		       bd 00 fe 	      LDA	AesTable,X
    403  f141		       45 8c		      EOR	FrameCount0
    404  f143		       85 9e		      STA	TrafficOffset3 + 2
    405  f145		       85 ae		      STA	OpTrafficOffset3 + 2
    406  f147		       4c 4d f1 	      JMP	EndRandomizeGame
    407  f14a
    408  f14a				   DeterministicGame
    409  f14a		       20 20 f7 	      JSR	DefaultOffsets
    410  f14d
    411  f14d				   EndRandomizeGame
    412  f14d
    413  f14d
    414  f14d				   CountFrame
    415  f14d		       e6 8c		      INC	FrameCount0	; 5
    416  f14f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    417  f151		       e6 8d		      INC	FrameCount1	; 5 
    418  f153				   SkipIncFC1
    419  f153
    420  f153				   CallDrawQrCode
    421  f153		       a5 c6		      LDA	GameMode
    422  f155		       c9 10		      CMP	#MAX_GAME_MODE
    423  f157		       d0 03		      BNE	TestIsGameRunning
    424  f159		       4c 81 fa 	      JMP	DrawQrCode
    425  f15c
    426  f15c							;Does not update the game if not running
    427  f15c				   TestIsGameRunning
    428  f15c		       a5 bd		      LDA	GameStatus	;3
    429  f15e		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    430  f160				   SelectCarWithDpadCall		; Only do it when game is stoped
    431  f160		       a2 00		      LDX	#0	; Player 0
    432  f162		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    433  f164		       85 b0		      STA	Tmp0
    434  f166		       20 24 f8 	      JSR	SelectCarWithDpad
    435  f169		       e8		      INX		; Player 1
    436  f16a		       20 24 f8 	      JSR	SelectCarWithDpad
    437  f16d
    438  f16d							; Needs to draw the opponent in the correct line even when game stoped  
    439  f16d							; Draeing is a destructive operation
    440  f16d		       20 36 f8 	      JSR	ProcessOpponentLine
    441  f170
    442  f170				   CallConfigureCarSprites
    443  f170		       20 de f7 	      JSR	ConfigureCarSprites
    444  f173				   SkipUpdateLogicJump
    445  f173		       4c bc f1 	      JMP	SkipUpdateLogic
    446  f176				   ContinueWithGameLogic
    447  f176
    448  f176				   CallEverySecond		; Timer for now
    449  f176		       a2 00		      LDX	#0
    450  f178		       20 57 fa 	      JSR	EverySecond
    451  f17b		       e8		      INX
    452  f17c		       20 57 fa 	      JSR	EverySecond
    453  f17f
    454  f17f				   ChangeTextFlickerMode
    455  f17f		       a5 bc		      LDA	SwitchDebounceCounter
    456  f181		       d0 0d		      BNE	EndChangeTextFlickerMode
    457  f183		       ad 82 02 	      LDA	SWCHB
    458  f186		       29 02		      AND	#%00000010	;Game select
    459  f188		       d0 06		      BNE	EndChangeTextFlickerMode
    460  f18a		       e6 df		      INC	TextFlickerMode
    461  f18c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    462  f18e		       85 bc		      STA	SwitchDebounceCounter
    463  f190				   EndChangeTextFlickerMode
    464  f190
    465  f190				   CallProcessSpeed
    466  f190		       a2 00		      LDX	#0
    467  f192		       20 6e f9 	      JSR	ProcessSpeed
    468  f195
    469  f195		       e8		      INX		; Player 1
    470  f196		       20 6e f9 	      JSR	ProcessSpeed
    471  f199
    472  f199				   CallUpdateOffsets
    473  f199		       a2 00		      LDX	#0	; Player 0
    474  f19b		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    475  f19d		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    476  f19f		       a5 f0		      LDA	Player0SpeedL
    477  f1a1		       85 b4		      STA	Tmp4
    478  f1a3		       a5 f2		      LDA	Player0SpeedH
    479  f1a5		       85 b5		      STA	Tmp5
    480  f1a7		       20 1b f9 	      JSR	UpdateOffsets
    481  f1aa
    482  f1aa							;LDX Exits the call with correct value.
    483  f1aa		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    484  f1ac		       85 b3		      STA	Tmp3
    485  f1ae		       a5 f1		      LDA	Player1SpeedL
    486  f1b0		       85 b4		      STA	Tmp4
    487  f1b2		       a5 f3		      LDA	Player1SpeedH
    488  f1b4		       85 b5		      STA	Tmp5
    489  f1b6		       20 1b f9 	      JSR	UpdateOffsets
    490  f1b9
    491  f1b9				   CallProcessOpponentLine
    492  f1b9		       20 36 f8 	      JSR	ProcessOpponentLine
    493  f1bc
    494  f1bc				   SkipUpdateLogic		; Continue here if not paused
    495  f1bc
    496  f1bc				   CallStatusUpdateSbr
    497  f1bc		       a2 00		      LDX	#0
    498  f1be		       20 64 fa 	      JSR	CalculateGear
    499  f1c1		       20 71 fa 	      JSR	ProcessScoreFontColor
    500  f1c4		       e8		      INX
    501  f1c5		       20 64 fa 	      JSR	CalculateGear
    502  f1c8		       20 71 fa 	      JSR	ProcessScoreFontColor
    503  f1cb
    504  f1cb				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    505  f1cb		       a5 8c		      LDA	FrameCount0
    506  f1cd		       29 01		      AND	#%00000001
    507  f1cf		       d0 0c		      BNE	CallProcessPlayer1Status
    508  f1d1				   CallProcessPlayer0Status
    509  f1d1		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    510  f1d3		       85 b0		      STA	Tmp0
    511  f1d5		       a2 00		      LDX	#0
    512  f1d7		       20 11 fa 	      JSR	ProcessPlayerStatus
    513  f1da		       4c e6 f1 	      JMP	EndCallProcessPlayerStatus
    514  f1dd				   CallProcessPlayer1Status
    515  f1dd		       a5 a2		      LDA	OpTrafficOffset0 + 2
    516  f1df		       85 b0		      STA	Tmp0
    517  f1e1		       a2 01		      LDX	#1
    518  f1e3		       20 11 fa 	      JSR	ProcessPlayerStatus
    519  f1e6				   EndCallProcessPlayerStatus
    520  f1e6
    521  f1e6				   CallProcessPlayerSprites
    522  f1e6		       20 de f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    523  f1e9
    524  f1e9				   CallProcessSound		; We might save cycles by updating one channel per frame.
    525  f1e9		       a2 00		      LDX	#0
    526  f1eb		       a5 92		      LDA	TrafficOffset0 + 2
    527  f1ed		       85 b1		      STA	Tmp1
    528  f1ef		       20 ef f5 	      JSR	ProcessSound
    529  f1f2		       e8		      INX		; Player 1
    530  f1f3		       a5 a2		      LDA	OpTrafficOffset0 + 2
    531  f1f5		       85 b1		      STA	Tmp1
    532  f1f7		       20 ef f5 	      JSR	ProcessSound
    533  f1fa
    534  f1fa							;Could be done during on vblank to save this comparisson time (before draw score), 
    535  f1fa							;but I am saving vblank cycles for now, in case of 2 players.
    536  f1fa				   ChooseTextSide		; 
    537  f1fa		       a5 de		      LDA	TextSide	;3
    538  f1fc		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    539  f1fe		       4c 9f f2 	      JMP	RightScoreWrite
    540  f201
    541  f201				   LeftScoreWrite
    542  f201		       a5 c9		      LDA	ScoreFontColor
    543  f203		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    544  f205		       f0 62		      BEQ	PrintCheckpoint
    545  f207		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    546  f209		       f0 66		      BEQ	PrintStartGame
    547  f20b		       a5 bd		      LDA	GameStatus
    548  f20d		       f0 6a		      BEQ	PrintHellwayLeft
    549  f20f				   WriteDistance		;Not optimized yet, ugly code.
    550  f20f				   Digit0Timer
    551  f20f		       a5 b8		      LDA	CountdownTimer	;3
    552  f211		       85 b0		      STA	Tmp0
    553  f213		       20 10 f8 	      JSR	BINBCD8
    554  f216							; LDA Tmp1 Also returned in A
    555  f216		       29 0f		      AND	#%00001111	;2
    556  f218		       aa		      TAX		; 2
    557  f219		       bd 6c fc 	      LDA	FontLookup,X	;4 
    558  f21c		       85 d1		      STA	ScoreD1	;3
    559  f21e
    560  f21e				   Digit1Timer
    561  f21e		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    562  f220		       4a		      LSR		; 2
    563  f221		       4a		      LSR		; 2
    564  f222		       4a		      LSR		; 2
    565  f223		       4a		      LSR		; 2
    566  f224		       aa		      TAX		; 2
    567  f225		       bd 6c fc 	      LDA	FontLookup,X	;4
    568  f228		       85 d0		      STA	ScoreD0	;3
    569  f22a
    570  f22a				   SpeedBar
    571  f22a		       a5 f0		      LDA	Player0SpeedL
    572  f22c		       29 e0		      AND	#%11100000	;2 Discard the last bits
    573  f22e		       18		      CLC
    574  f22f		       2a		      ROL		;First goes into carry
    575  f230		       2a		      ROL
    576  f231		       2a		      ROL
    577  f232		       2a		      ROL
    578  f233		       85 b0		      STA	Tmp0
    579  f235		       a5 f2		      LDA	Player0SpeedH
    580  f237		       0a		      ASL
    581  f238		       0a		      ASL
    582  f239		       0a		      ASL
    583  f23a		       05 b0		      ORA	Tmp0
    584  f23c		       aa		      TAX		; 2
    585  f23d		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    586  f240		       85 d2		      STA	ScoreD2	;3
    587  f242
    588  f242				   DistanceCheckpointCount		; Will run all letters in the future
    589  f242		       a5 ba		      LDA	Traffic0Msb
    590  f244		       29 01		      AND	#%00000001
    591  f246		       0a		      ASL
    592  f247		       0a		      ASL
    593  f248		       0a		      ASL
    594  f249		       0a		      ASL
    595  f24a		       85 b0		      STA	Tmp0
    596  f24c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    597  f24e		       29 f0		      AND	#%11110000	;2
    598  f250		       4a		      LSR
    599  f251		       4a		      LSR
    600  f252		       4a		      LSR
    601  f253		       4a		      LSR
    602  f254		       05 b0		      ORA	Tmp0
    603  f256		       aa		      TAX		; 2
    604  f257		       bd 6c fc 	      LDA	FontLookup,X	;4 
    605  f25a		       85 d3		      STA	ScoreD3	;3
    606  f25c
    607  f25c				   DistanceBar		; 16 subdivisions per checkpoint
    608  f25c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    609  f25e		       29 0f		      AND	#%00001111	;2
    610  f260		       aa		      TAX		; 2
    611  f261		       bd 8c fc 	      LDA	BarLookup,X	;4 
    612  f264		       85 d4		      STA	ScoreD4	;3
    613  f266
    614  f266				   EndDrawDistance
    615  f266		       4c 26 f3 	      JMP	RightScoreWriteEnd	;3
    616  f269
    617  f269				   PrintCheckpoint
    618  f269		       a2 00		      LDX	#<CheckpointText
    619  f26b		       20 35 f7 	      JSR	PrintStaticText
    620  f26e		       4c 26 f3 	      JMP	RightScoreWriteEnd	;3
    621  f271				   PrintStartGame
    622  f271		       a2 19		      LDX	#<GoText
    623  f273		       20 35 f7 	      JSR	PrintStaticText
    624  f276		       4c 26 f3 	      JMP	RightScoreWriteEnd	;3
    625  f279
    626  f279				   PrintHellwayLeft
    627  f279		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    628  f27b		       30 08		      BMI	ContinueWithDefaultLeftText
    629  f27d				   Player0IsReady
    630  f27d		       a2 1e		      LDX	#<ReadyText
    631  f27f		       20 35 f7 	      JSR	PrintStaticText
    632  f282		       4c 26 f3 	      JMP	RightScoreWriteEnd	;3
    633  f285				   ContinueWithDefaultLeftText
    634  f285		       a5 8d		      LDA	FrameCount1
    635  f287		       29 01		      AND	#1
    636  f289		       d0 05		      BNE	PrintCreditsLeft
    637  f28b		       a2 05		      LDX	#<HellwayLeftText
    638  f28d		       4c 92 f2 	      JMP	PrintGameMode
    639  f290				   PrintCreditsLeft
    640  f290		       a2 0f		      LDX	#<OpbText
    641  f292
    642  f292				   PrintGameMode
    643  f292		       20 35 f7 	      JSR	PrintStaticText
    644  f295		       a6 c6		      LDX	GameMode
    645  f297		       bd 6c fc 	      LDA	FontLookup,X	;4 
    646  f29a		       85 d0		      STA	ScoreD0	;3
    647  f29c		       4c 26 f3 	      JMP	RightScoreWriteEnd	;3
    648  f29f
    649  f29f				   RightScoreWrite
    650  f29f		       a5 bd		      LDA	GameStatus
    651  f2a1		       f0 64		      BEQ	PrintHellwayRight
    652  f2a3		       a5 ca		      LDA	OpScoreFontColor
    653  f2a5		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    654  f2a7		       f0 c0		      BEQ	PrintCheckpoint
    655  f2a9		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    656  f2ab		       f0 c4		      BEQ	PrintStartGame
    657  f2ad
    658  f2ad				   OpDigit0Timer
    659  f2ad		       a5 b9		      LDA	OpCountdownTimer	;3
    660  f2af		       85 b0		      STA	Tmp0
    661  f2b1		       20 10 f8 	      JSR	BINBCD8
    662  f2b4							; LDA Tmp1 Also returned in A
    663  f2b4		       29 0f		      AND	#%00001111	;2
    664  f2b6		       aa		      TAX		; 2
    665  f2b7		       bd 6c fc 	      LDA	FontLookup,X	;4 
    666  f2ba		       85 d4		      STA	ScoreD4	;3
    667  f2bc
    668  f2bc				   OpDigit1Timer
    669  f2bc		       a5 b1		      LDA	Tmp1	;3
    670  f2be		       4a		      LSR		; 2
    671  f2bf		       4a		      LSR		; 2
    672  f2c0		       4a		      LSR		; 2
    673  f2c1		       4a		      LSR		; 2
    674  f2c2		       aa		      TAX		; 2
    675  f2c3		       bd 6c fc 	      LDA	FontLookup,X	;4
    676  f2c6		       85 d3		      STA	ScoreD3	;3
    677  f2c8
    678  f2c8				   OpSpeedBar
    679  f2c8		       a5 f1		      LDA	Player1SpeedL
    680  f2ca		       29 e0		      AND	#%11100000	;2 Discard the last bits
    681  f2cc		       18		      CLC
    682  f2cd		       2a		      ROL		;First goes into carry
    683  f2ce		       2a		      ROL
    684  f2cf		       2a		      ROL
    685  f2d0		       2a		      ROL
    686  f2d1		       85 b0		      STA	Tmp0
    687  f2d3		       a5 f3		      LDA	Player1SpeedH
    688  f2d5		       0a		      ASL
    689  f2d6		       0a		      ASL
    690  f2d7		       0a		      ASL
    691  f2d8		       05 b0		      ORA	Tmp0
    692  f2da		       aa		      TAX		; 2
    693  f2db		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    694  f2de		       85 d2		      STA	ScoreD2	;3
    695  f2e0
    696  f2e0				   OpDistanceCheckpointCount
    697  f2e0		       a5 bb		      LDA	OpTraffic0Msb
    698  f2e2		       29 01		      AND	#%00000001
    699  f2e4		       0a		      ASL
    700  f2e5		       0a		      ASL
    701  f2e6		       0a		      ASL
    702  f2e7		       0a		      ASL
    703  f2e8		       85 b0		      STA	Tmp0
    704  f2ea		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    705  f2ec		       29 f0		      AND	#%11110000	;2
    706  f2ee		       4a		      LSR
    707  f2ef		       4a		      LSR
    708  f2f0		       4a		      LSR
    709  f2f1		       4a		      LSR
    710  f2f2		       05 b0		      ORA	Tmp0
    711  f2f4		       aa		      TAX		; 2
    712  f2f5		       bd 6c fc 	      LDA	FontLookup,X	;4 
    713  f2f8		       85 d1		      STA	ScoreD1	;3
    714  f2fa
    715  f2fa				   OpDistanceBar		; 16 subdivisions per checkpoint
    716  f2fa		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    717  f2fc		       29 0f		      AND	#%00001111	;2
    718  f2fe		       aa		      TAX		; 2
    719  f2ff		       bd 8c fc 	      LDA	BarLookup,X	;4 
    720  f302		       85 d0		      STA	ScoreD0	;3
    721  f304		       4c 26 f3 	      JMP	RightScoreWriteEnd
    722  f307
    723  f307				   PrintHellwayRight
    724  f307		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    725  f309		       30 08		      BMI	ContinueWithDefaultRightText
    726  f30b				   Player1IsReady
    727  f30b		       a2 1e		      LDX	#<ReadyText
    728  f30d		       20 35 f7 	      JSR	PrintStaticText
    729  f310		       4c 26 f3 	      JMP	RightScoreWriteEnd	;3
    730  f313				   ContinueWithDefaultRightText
    731  f313		       a5 8d		      LDA	FrameCount1
    732  f315		       29 01		      AND	#1
    733  f317		       d0 05		      BNE	PrintCreditsRight
    734  f319		       a2 0a		      LDX	#<HellwayRightText
    735  f31b		       4c 20 f3 	      JMP	PrintRightIntro
    736  f31e				   PrintCreditsRight
    737  f31e		       a2 14		      LDX	#<YearText
    738  f320				   PrintRightIntro
    739  f320		       20 35 f7 	      JSR	PrintStaticText
    740  f323		       4c 26 f3 	      JMP	RightScoreWriteEnd
    741  f326				   RightScoreWriteEnd
    742  f326
    743  f326
    744  f326				   ScoreBackgroundColor
    745  f326		       a2 00		      LDX	#0
    746  f328		       ad 82 02 	      LDA	SWCHB
    747  f32b		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    748  f32d		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    749  f32f		       f0 04		      BEQ	BlackAndWhiteScoreBg
    750  f331		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    751  f333		       a2 03		      LDX	#BACKGROUND_COLOR
    752  f335				   BlackAndWhiteScoreBg
    753  f335		       85 b2		      STA	Tmp2	; Score Background
    754  f337		       86 b3		      STX	Tmp3	; Traffic Background
    755  f339
    756  f339				   ConfigurePFForScore
    757  f339							;LDA #SCORE_BACKGROUND_COLOR; Done above
    758  f339		       85 09		      STA	COLUBK
    759  f33b		       20 87 f6 	      JSR	ClearAll
    760  f33e		       a9 02		      LDA	#%00000010	; Score mode
    761  f340		       85 0a		      STA	CTRLPF
    762  f342		       a5 de		      LDA	TextSide	;3
    763  f344		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    764  f346				   RightScoreOn
    765  f346		       a5 ca		      LDA	OpScoreFontColor
    766  f348		       85 07		      STA	COLUP1
    767  f34a		       a5 b2		      LDA	Tmp2
    768  f34c		       85 06		      STA	COLUP0
    769  f34e		       4c 59 f3 	      JMP	CallWaitForVblankEnd
    770  f351				   LeftScoreOn
    771  f351		       a5 c9		      LDA	ScoreFontColor
    772  f353		       85 06		      STA	COLUP0
    773  f355		       a5 b2		      LDA	Tmp2
    774  f357		       85 07		      STA	COLUP1
    775  f359
    776  f359							; After here we are going to update the screen, No more heavy code
    777  f359				   CallWaitForVblankEnd
    778  f359		       20 af f7 	      JSR	WaitForVblankEnd
    779  f35c
    780  f35c				   DrawScoreHud
    781  f35c		       20 53 f7 	      JSR	PrintScore
    782  f35f
    783  f35f							; 4 lines to go crazy
    784  f35f		       85 02		      STA	WSYNC
    785  f361							;STA HMOVE
    786  f361
    787  f361		       85 02		      STA	WSYNC
    788  f363		       85 2a		      STA	HMOVE
    789  f365
    790  f365				   PrepareForTraffic
    791  f365		       20 9d f6 	      JSR	ClearPF	; 32
    792  f368
    793  f368		       85 02		      STA	WSYNC
    794  f36a		       85 2a		      STA	HMOVE
    795  f36c		       85 02		      STA	WSYNC
    796  f36e		       85 2a		      STA	HMOVE
    797  f370
    798  f370		       a9 30		      LDA	#%00110000	; 2 Score mode
    799  f372		       85 0a		      STA	CTRLPF	;3
    800  f374
    801  f374		       a5 8c		      LDA	FrameCount0	;3
    802  f376		       29 01		      AND	#%00000001	;2
    803  f378		       aa		      TAX		;2
    804  f379		       b5 c2		      LDA	TrafficColor,X	;4
    805  f37b		       85 08		      STA	COLUPF	;3
    806  f37d
    807  f37d		       a9 96		      LDA	#PLAYER1_COLOR	;2
    808  f37f		       85 07		      STA	COLUP1	;3
    809  f381
    810  f381		       a5 c9		      LDA	ScoreFontColor	;3
    811  f383		       85 06		      STA	COLUP0	;3
    812  f385
    813  f385		       a5 ca		      LDA	OpScoreFontColor	;3
    814  f387		       85 07		      STA	COLUP1	;3
    815  f389
    816  f389		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    817  f38b
      0  f38b					      SLEEP	24	; Keep the backround color more time, only needed if still support non dark mode
      1  f38b				   .CYCLES    SET	24
      2  f38b
      3  f38b				  -	      IF	.CYCLES < 2
      4  f38b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f38b				  -	      ERR
      6  f38b					      ENDIF
      7  f38b
      8  f38b				  -	      IF	.CYCLES & 1
      9  f38b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f38b				  -	      nop	0
     11  f38b				  -	      ELSE
     12  f38b				  -	      bit	VSYNC
     13  f38b				  -	      ENDIF
     14  f38b				  -.CYCLES    SET	.CYCLES - 3
     15  f38b					      ENDIF
     16  f38b
     17  f38b					      REPEAT	.CYCLES / 2
     18  f38b		       ea		      nop
     17  f38b					      REPEND
     18  f38c		       ea		      nop
     17  f38c					      REPEND
     18  f38d		       ea		      nop
     17  f38d					      REPEND
     18  f38e		       ea		      nop
     17  f38e					      REPEND
     18  f38f		       ea		      nop
     17  f38f					      REPEND
     18  f390		       ea		      nop
     17  f390					      REPEND
     18  f391		       ea		      nop
     17  f391					      REPEND
     18  f392		       ea		      nop
     17  f392					      REPEND
     18  f393		       ea		      nop
     17  f393					      REPEND
     18  f394		       ea		      nop
     17  f394					      REPEND
     18  f395		       ea		      nop
     17  f395					      REPEND
     18  f396		       ea		      nop
     19  f397					      REPEND
    819  f397
    820  f397		       a6 b3		      LDX	Tmp3	; Background color.
    821  f399
    822  f399		       a5 8c		      LDA	FrameCount0	;Brach flag
    823  f39b		       29 01		      AND	#%00000001
    824  f39d
    825  f39d		       86 09		      STX	COLUBK	;3
    826  f39f		       d0 05		      BNE	OpDrawCache	;2
    827  f3a1		       4c 60 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    828  f3a4							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    829  f3a4
    830  f3a4							;main scanline loop...
    831  f3a4				   OpScanLoop
    832  f3a4		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    833  f3a6
    834  f3a6							;Start of next line!			
    835  f3a6				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    836  f3a6
    837  f3a6		       a5 80		      LDA	GRP0Cache	;3
    838  f3a8		       85 1b		      STA	GRP0	;3
    839  f3aa
    840  f3aa		       a5 84		      LDA	GRP1Cache	;3
    841  f3ac		       85 1c		      STA	GRP1	;3
    842  f3ae
    843  f3ae		       a5 85		      LDA	ENABLCache	;3
    844  f3b0		       85 1f		      STA	ENABL	;3
    845  f3b2
    846  f3b2		       a5 86		      LDA	ENAM0Cache	;3
    847  f3b4		       85 1d		      STA	ENAM0	;3
    848  f3b6
    849  f3b6		       a5 87		      LDA	ENAM1Cache	;3
    850  f3b8		       85 1e		      STA	ENAM1	;3
    851  f3ba
    852  f3ba		       a5 81		      LDA	PF0Cache	;3
    853  f3bc		       85 0d		      STA	PF0	;3
    854  f3be
    855  f3be		       a9 00		      LDA	#0	;2
    856  f3c0							;STA PF0	     ;3
    857  f3c0		       85 80		      STA	GRP0Cache	;3
    858  f3c2		       85 86		      STA	ENAM0Cache	;3
    859  f3c4		       85 85		      STA	ENABLCache	;3
    860  f3c6		       85 87		      STA	ENAM1Cache	; 3
    861  f3c8							;STA GRP1Cache ;3
    862  f3c8		       85 0d		      STA	PF0	;3
    863  f3ca							;STA PF2	     ;3
    864  f3ca
    865  f3ca		       a5 83		      LDA	PF2Cache	;3
    866  f3cc		       85 0f		      STA	PF2	;3
    867  f3ce
    868  f3ce				   OpDrawCar0
    869  f3ce		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    870  f3d0		       b0 04		      BCS	OpSkipDrawCar	;2
    871  f3d2		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    872  f3d4		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    873  f3d6				   OpSkipDrawCar
    874  f3d6
    875  f3d6							;BEQ DrawTraffic3
    876  f3d6				   OpDrawTraffic1		; 33
    877  f3d6		       98		      TYA		; 2
    878  f3d7		       18		      CLC		; 2 
    879  f3d8		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    880  f3da		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    881  f3dc		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    882  f3de		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    883  f3e0		       4c e5 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    884  f3e3				   OpEorOffsetWithCarry
    885  f3e3		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    886  f3e5				   OpAfterEorOffsetWithCarry		;17
    887  f3e5		       aa		      TAX		;2
    888  f3e6		       bd 00 fe 	      LDA	AesTable,X	; 4
    889  f3e9		       c5 bf		      CMP	OpTrafficChance	;3
    890  f3eb		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    891  f3ed		       a9 ff		      LDA	#$FF	;2
    892  f3ef		       85 86		      STA	ENAM0Cache	;3
    893  f3f1				   OpFinishDrawTraffic1
    894  f3f1
    895  f3f1				   OpErasePF2
    896  f3f1		       a9 00		      LDA	#0
    897  f3f3		       85 0f		      STA	PF2
    898  f3f5
    899  f3f5				   OpDrawTraffic2		; 33
    900  f3f5		       98		      TYA		; 2
    901  f3f6		       18		      CLC		; 2 
    902  f3f7		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    903  f3f9		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    904  f3fb		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    905  f3fd		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    906  f3ff		       4c 04 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    907  f402				   OpEorOffsetWithCarry2
    908  f402		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    909  f404				   OpAfterEorOffsetWithCarry2		;17
    910  f404		       aa		      TAX		;2
    911  f405		       bd 00 fe 	      LDA	AesTable,X	; 4
    912  f408		       c5 bf		      CMP	OpTrafficChance	;3
    913  f40a		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    914  f40c		       a9 02		      LDA	#%00000010	;2
    915  f40e		       85 85		      STA	ENABLCache	;3
    916  f410				   OpFinishDrawTraffic2
    917  f410
    918  f410							;STA WSYNC ;65 / 137
    919  f410
    920  f410							; LDA Tmp0 ; Flicker this line if drawing car
    921  f410							; BEQ FinishDrawTraffic4
    922  f410				   OpDrawTraffic3		; 33
    923  f410		       98		      TYA		; 2
    924  f411		       18		      CLC		; 2 
    925  f412		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    926  f414		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    927  f416		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    928  f418		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    929  f41a		       4c 1f f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    930  f41d				   OpEorOffsetWithCarry3
    931  f41d		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    932  f41f				   OpAfterEorOffsetWithCarry3		;17
    933  f41f		       aa		      TAX		;2
    934  f420		       bd 00 fe 	      LDA	AesTable,X	; 4
    935  f423		       c5 bf		      CMP	OpTrafficChance	;3
    936  f425		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    937  f427		       a9 02		      LDA	#%00000010	;2
    938  f429		       85 87		      STA	ENAM1Cache
    939  f42b				   OpFinishDrawTraffic3
    940  f42b
    941  f42b				   OpDrawOponent		;26
    942  f42b		       84 b0		      STY	Tmp0	;3
    943  f42d		       a4 cf		      LDY	OpponentLine	;3
    944  f42f		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    945  f431		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    946  f433				   OpDrawOpponent
    947  f433		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    948  f435		       85 80		      STA	GRP0Cache	;3
    949  f437		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    950  f439		       a4 b0		      LDY	Tmp0	;3
    951  f43b		       4c 4f f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    952  f43e				   OpSkipDrawOpponent
    953  f43e		       c6 cf		      DEC	OpponentLine	;5
    954  f440		       a4 b0		      LDY	Tmp0	;3
    955  f442
    956  f442
    957  f442				   OpDrawTraffic0		; 21 2pe
    958  f442		       98		      TYA		; 2
    959  f443		       18		      CLC		; 2 
    960  f444		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    961  f446		       29 08		      AND	#%00001000	;2
    962  f448		       f0 05		      BEQ	OpHasNoBorderP0	;3
    963  f44a				   OpHasBorderP0
    964  f44a		       a9 70		      LDA	#%01110000	; 2
    965  f44c		       4c 51 f4 	      JMP	OpStoreBorderP0	; 3
    966  f44f				   OpHasNoBorderP0
    967  f44f		       a9 00		      LDA	#0	; 2
    968  f451				   OpStoreBorderP0
    969  f451		       85 81		      STA	PF0Cache	; 3
    970  f453		       85 83		      STA	PF2Cache	; 3
    971  f455
    972  f455				   OpSkipDrawTraffic0
    973  f455
    974  f455				   OpWhileScanLoop
    975  f455		       88		      DEY		;2
    976  f456		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    977  f458		       4c a4 f3 	      JMP	OpScanLoop	;3
    978  f45b				   OpFinishScanLoop		; 7 209 of 222
    979  f45b		       4c 13 f5 	      JMP	FinishScanLoop
    980  f45e
    981  f45e							;main scanline loop...
    982  f45e				   ScanLoop
    983  f45e		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    984  f460
    985  f460							;Start of next line!			
    986  f460				   DrawCache		;63 Is the last line going to the top of the next frame?
    987  f460		       a5 81		      LDA	PF0Cache	;3
    988  f462		       85 0d		      STA	PF0	;3
    989  f464
    990  f464		       a5 80		      LDA	GRP0Cache	;3
    991  f466		       85 1b		      STA	GRP0	;3
    992  f468
    993  f468		       a5 84		      LDA	GRP1Cache	;3
    994  f46a		       85 1c		      STA	GRP1	;3
    995  f46c
    996  f46c		       a5 86		      LDA	ENAM0Cache	;3
    997  f46e		       85 1d		      STA	ENAM0	;3
    998  f470
    999  f470		       a5 85		      LDA	ENABLCache	;3
   1000  f472		       85 1f		      STA	ENABL	;3
   1001  f474
   1002  f474		       a5 87		      LDA	ENAM1Cache	;3
   1003  f476		       85 1e		      STA	ENAM1	;3
   1004  f478
   1005  f478		       a5 83		      LDA	PF2Cache	;3
   1006  f47a		       85 0f		      STA	PF2	;3
   1007  f47c
   1008  f47c		       a9 00		      LDA	#0	;2
   1009  f47e		       85 0d		      STA	PF0	;3
   1010  f480		       85 84		      STA	GRP1Cache	;3
   1011  f482		       85 85		      STA	ENABLCache	;3
   1012  f484		       85 86		      STA	ENAM0Cache	;3
   1013  f486		       85 87		      STA	ENAM1Cache	; 3
   1014  f488							;STA GRP0Cache
   1015  f488		       85 0f		      STA	PF2	;3
   1016  f48a
   1017  f48a				   DrawCar0
   1018  f48a		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1019  f48c		       b0 04		      BCS	SkipDrawCar	;2
   1020  f48e		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1021  f490		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1022  f492				   SkipDrawCar
   1023  f492
   1024  f492							;BEQ DrawTraffic3
   1025  f492				   DrawTraffic1 		; 33
   1026  f492		       98		      TYA		; 2
   1027  f493		       18		      CLC		; 2 
   1028  f494		       65 95		      ADC	TrafficOffset1 + 1	;3
   1029  f496		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1030  f498		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1031  f49a		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1032  f49c		       4c a1 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1033  f49f				   EorOffsetWithCarry
   1034  f49f		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1035  f4a1				   AfterEorOffsetWithCarry		;17
   1036  f4a1		       aa		      TAX		;2
   1037  f4a2		       bd 00 fe 	      LDA	AesTable,X	; 4
   1038  f4a5		       c5 be		      CMP	TrafficChance	;3
   1039  f4a7		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1040  f4a9		       a9 ff		      LDA	#$FF	;2
   1041  f4ab		       85 86		      STA	ENAM0Cache	;3
   1042  f4ad				   FinishDrawTraffic1
   1043  f4ad
   1044  f4ad				   DrawTraffic2 		; 33
   1045  f4ad		       98		      TYA		; 2
   1046  f4ae		       18		      CLC		; 2 
   1047  f4af		       65 99		      ADC	TrafficOffset2 + 1	;3
   1048  f4b1		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1049  f4b3		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1050  f4b5		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1051  f4b7		       4c bc f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1052  f4ba				   EorOffsetWithCarry2
   1053  f4ba		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1054  f4bc				   AfterEorOffsetWithCarry2		;17
   1055  f4bc		       aa		      TAX		;2
   1056  f4bd		       bd 00 fe 	      LDA	AesTable,X	; 4
   1057  f4c0		       c5 be		      CMP	TrafficChance	;3
   1058  f4c2		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1059  f4c4		       a9 02		      LDA	#%00000010	;2
   1060  f4c6		       85 85		      STA	ENABLCache	;3
   1061  f4c8				   FinishDrawTraffic2
   1062  f4c8
   1063  f4c8							;STA WSYNC ;65 / 137
   1064  f4c8
   1065  f4c8							; LDA Tmp0 ; Flicker this line if drawing car
   1066  f4c8							; BEQ FinishDrawTraffic4
   1067  f4c8				   DrawTraffic3 		; 33
   1068  f4c8		       98		      TYA		; 2
   1069  f4c9		       18		      CLC		; 2 
   1070  f4ca		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1071  f4cc		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1072  f4ce		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1073  f4d0		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1074  f4d2		       4c d7 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1075  f4d5				   EorOffsetWithCarry3
   1076  f4d5		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1077  f4d7				   AfterEorOffsetWithCarry3		;17
   1078  f4d7		       aa		      TAX		;2
   1079  f4d8		       bd 00 fe 	      LDA	AesTable,X	; 4
   1080  f4db		       c5 be		      CMP	TrafficChance	;3
   1081  f4dd		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1082  f4df		       a9 02		      LDA	#%00000010	;2
   1083  f4e1		       85 87		      STA	ENAM1Cache
   1084  f4e3				   FinishDrawTraffic3
   1085  f4e3
   1086  f4e3
   1087  f4e3				   DrawOponent		;26
   1088  f4e3		       84 b0		      STY	Tmp0	;3
   1089  f4e5		       a4 cf		      LDY	OpponentLine	;3
   1090  f4e7		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1091  f4e9		       b0 0b		      BCS	SkipDrawOpponent	;2
   1092  f4eb				   DrawOpponent
   1093  f4eb		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1094  f4ed		       85 84		      STA	GRP1Cache	;3
   1095  f4ef		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1096  f4f1		       a4 b0		      LDY	Tmp0	;3
   1097  f4f3		       4c 07 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1098  f4f6				   SkipDrawOpponent
   1099  f4f6		       c6 cf		      DEC	OpponentLine	;5
   1100  f4f8		       a4 b0		      LDY	Tmp0	;3
   1101  f4fa
   1102  f4fa				   DrawTraffic0 		; 21 2pe
   1103  f4fa		       98		      TYA		; 2
   1104  f4fb		       18		      CLC		; 2 
   1105  f4fc		       65 91		      ADC	TrafficOffset0 + 1	;3
   1106  f4fe		       29 08		      AND	#%00001000	;2
   1107  f500		       f0 05		      BEQ	HasNoBorderP0	;3
   1108  f502				   HasBorderP0
   1109  f502		       a9 70		      LDA	#%01110000	; 2
   1110  f504		       4c 09 f5 	      JMP	StoreBorderP0	; 3
   1111  f507				   HasNoBorderP0
   1112  f507		       a9 00		      LDA	#0	; 2
   1113  f509				   StoreBorderP0
   1114  f509		       85 81		      STA	PF0Cache	; 3
   1115  f50b		       85 83		      STA	PF2Cache	; 3
   1116  f50d
   1117  f50d				   SkipDrawTraffic0
   1118  f50d
   1119  f50d				   WhileScanLoop
   1120  f50d		       88		      DEY		;2
   1121  f50e		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1122  f510		       4c 5e f4 	      JMP	ScanLoop	;3
   1123  f513				   FinishScanLoop		; 7 209 of 222
   1124  f513
   1125  f513		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1126  f515		       20 ac f6 	      JSR	LoadAll
   1127  f518		       85 02		      STA	WSYNC	; do stuff!
   1128  f51a		       85 02		      STA	WSYNC
   1129  f51c		       85 02		      STA	WSYNC
   1130  f51e
   1131  f51e				   PrepareOverscan
   1132  f51e		       a9 02		      LDA	#2
   1133  f520		       85 02		      STA	WSYNC
   1134  f522							;STA HMOVE	; HMOVE 10
   1135  f522		       85 01		      STA	VBLANK
   1136  f524
   1137  f524		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1138  f526		       8d 96 02 	      STA	TIM64T
   1139  f529
   1140  f529		       85 2b		      STA	HMCLR	; Before we process car movement
   1141  f52b							;Read Fire Button before, will make it start the game for now.
   1142  f52b				   StartGame
   1143  f52b		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1144  f52d		       25 0d		      AND	INPT5	;3 player 1
   1145  f52f		       30 3a		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1146  f531		       a5 8c		      LDA	FrameCount0
   1147  f533		       29 01		      AND	#%00000001
   1148  f535		       d0 34		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1149  f537		       a5 bd		      LDA	GameStatus	;3
   1150  f539		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1151  f53b		       d0 2e		      BNE	SkipGameStart
   1152  f53d		       a5 c6		      LDA	GameMode
   1153  f53f		       c9 10		      CMP	#MAX_GAME_MODE
   1154  f541		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1155  f543		       a9 00		      LDA	#0
   1156  f545		       85 c6		      STA	GameMode
   1157  f547		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1158  f549		       85 bc		      STA	SwitchDebounceCounter
   1159  f54b		       4c 6b f5 	      JMP	SkipGameStart
   1160  f54e				   SetGameRunningIfBothPressing
   1161  f54e		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1162  f550		       05 0d		      ORA	INPT5	;3 player 1
   1163  f552		       30 17		      BMI	SkipGameStart
   1164  f554				   SetGameRunning
   1165  f554		       e6 bd		      INC	GameStatus
   1166  f556		       a9 00		      LDA	#0	;
   1167  f558		       85 8c		      STA	FrameCount0
   1168  f55a		       85 8d		      STA	FrameCount1
   1169  f55c		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1170  f55e		       85 c9		      STA	ScoreFontColor
   1171  f560		       85 ca		      STA	OpScoreFontColor
   1172  f562		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1173  f564		       85 cb		      STA	ScoreFontColorHoldChange
   1174  f566		       85 cc		      STA	OpScoreFontColorHoldChange
   1175  f568		       4c df f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1176  f56b				   SkipGameStart
   1177  f56b
   1178  f56b				   ReadSwitches
   1179  f56b		       a6 bc		      LDX	SwitchDebounceCounter
   1180  f56d		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1181  f56f		       a9 01		      LDA	#%00000001
   1182  f571		       2c 82 02 	      BIT	SWCHB
   1183  f574		       d0 07		      BNE	SkipReset
   1184  f576		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1185  f578		       85 bc		      STA	SwitchDebounceCounter
   1186  f57a		       4c e7 f5 	      JMP	OverScanWaitBeforeReset
   1187  f57d				   SkipReset
   1188  f57d
   1189  f57d				   GameModeSelect
   1190  f57d		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1191  f57f		       d0 22		      BNE	SkipGameSelect
   1192  f581		       a2 00		      LDX	#0
   1193  f583		       20 d8 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1194  f586		       e8		      INX
   1195  f587		       20 d8 f6 	      JSR	ConfigureDifficulty
   1196  f58a				   ContinueGameSelect
   1197  f58a		       a9 02		      LDA	#%00000010
   1198  f58c		       2c 82 02 	      BIT	SWCHB
   1199  f58f		       d0 12		      BNE	SkipGameSelect
   1200  f591		       a6 c6		      LDX	GameMode
   1201  f593		       e0 10		      CPX	#MAX_GAME_MODE
   1202  f595		       f0 04		      BEQ	ResetGameMode
   1203  f597		       e8		      INX
   1204  f598		       4c 9d f5 	      JMP	StoreGameMode
   1205  f59b				   ResetGameMode
   1206  f59b		       a2 00		      LDX	#0
   1207  f59d				   StoreGameMode
   1208  f59d		       86 c6		      STX	GameMode
   1209  f59f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1210  f5a1		       85 bc		      STA	SwitchDebounceCounter
   1211  f5a3				   SkipGameSelect
   1212  f5a3		       4c a8 f5 	      JMP	EndReadSwitches
   1213  f5a6				   DecrementSwitchDebounceCounter
   1214  f5a6		       c6 bc		      DEC	SwitchDebounceCounter
   1215  f5a8				   EndReadSwitches
   1216  f5a8
   1217  f5a8				   DoNotTurnBeforeStart
   1218  f5a8							;STA HMCLR
   1219  f5a8		       a5 bd		      LDA	GameStatus
   1220  f5aa		       f0 33		      BEQ	OverScanWait
   1221  f5ac
   1222  f5ac							; Last thing, will overrride hmove
   1223  f5ac				   CallTestColisionAndMove
   1224  f5ac		       a2 00		      LDX	#0	; Player 0
   1225  f5ae							; Colision with traffic, each player check different flags,
   1226  f5ae		       a5 8c		      LDA	FrameCount0
   1227  f5b0		       29 01		      AND	#%00000001
   1228  f5b2		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1229  f5b4		       20 87 f8 	      JSR	IsOpponentColliding
   1230  f5b7		       05 01		      ORA	CXM1P
   1231  f5b9		       4a		      LSR
   1232  f5ba		       05 00		      ORA	CXM0P
   1233  f5bc		       05 02		      ORA	CXP0FB
   1234  f5be							; ORA CXPPMM ; Collision between players will have its own rules
   1235  f5be				   SkipColisionPlayer0		; Should not colide on opponent side.
   1236  f5be		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1237  f5c0		       85 b2		      STA	Tmp2
   1238  f5c2		       20 9b f8 	      JSR	TestCollisionAndMove
   1239  f5c5
   1240  f5c5		       e8		      INX		; player 1
   1241  f5c6		       a5 8c		      LDA	FrameCount0
   1242  f5c8		       29 01		      AND	#%00000001
   1243  f5ca		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1244  f5cc		       20 87 f8 	      JSR	IsOpponentColliding
   1245  f5cf		       05 00		      ORA	CXM0P
   1246  f5d1		       4a		      LSR
   1247  f5d2		       05 01		      ORA	CXM1P
   1248  f5d4		       05 03		      ORA	CXP1FB
   1249  f5d6				   SkipColisionPlayer1
   1250  f5d6		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1251  f5d8		       85 b2		      STA	Tmp2
   1252  f5da		       20 9b f8 	      JSR	TestCollisionAndMove
   1253  f5dd
   1254  f5dd				   ClearCollision
   1255  f5dd		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1256  f5df
   1257  f5df				   OverScanWait
   1258  f5df		       ad 84 02 	      LDA	INTIM
   1259  f5e2		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1260  f5e4		       4c d6 f0 	      JMP	MainLoop
   1261  f5e7
   1262  f5e7				   OverScanWaitBeforeReset
   1263  f5e7		       ad 84 02 	      LDA	INTIM
   1264  f5ea		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1265  f5ec		       4c 14 f0 	      JMP	Start
   1266  f5ef
   1267  f5ef				   Subroutines
   1268  f5ef
   1269  f5ef							;X Player
   1270  f5ef							;Tmp1 TrafficOffset 2
   1271  f5ef				   ProcessSound
   1272  f5ef				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1273  f5ef		       b5 c9		      LDA	ScoreFontColor,X	;3
   1274  f5f1		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1275  f5f3		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1276  f5f5		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1277  f5f7		       f0 29		      BEQ	PlayCheckpoint	;2
   1278  f5f9		       b5 8e		      LDA	CollisionCounter,X	;3
   1279  f5fb		       c9 e0		      CMP	#$E0	;2
   1280  f5fd		       b0 14		      BCS	PlayColision	;2
   1281  f5ff		       b5 cd		      LDA	NextCheckpoint,X	;3
   1282  f601		       38		      SEC		;2
   1283  f602		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1284  f604		       c9 02		      CMP	#$02	;2
   1285  f606		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1286  f608		       b5 b8		      LDA	CountdownTimer,X	; 3
   1287  f60a		       f0 53		      BEQ	EngineSound	;2
   1288  f60c		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1289  f60e		       90 37		      BCC	PlayWarnTimeEnding	;4
   1290  f610		       4c 5f f6 	      JMP	EngineSound	;3
   1291  f613				   PlayColision
   1292  f613		       a9 1f		      LDA	#31
   1293  f615		       95 17		      STA	AUDF0,X
   1294  f617		       a9 08		      LDA	#8
   1295  f619		       95 15		      STA	AUDC0,X
   1296  f61b		       a9 08		      LDA	#8
   1297  f61d		       95 19		      STA	AUDV0,X
   1298  f61f		       4c 86 f6 	      JMP	EndSound
   1299  f622
   1300  f622				   PlayCheckpoint
   1301  f622		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1302  f624		       4a		      LSR		;2
   1303  f625		       4a		      LSR		;2
   1304  f626		       4a		      LSR		;2
   1305  f627		       95 17		      STA	AUDF0,X	;3
   1306  f629		       a9 0c		      LDA	#12	;2
   1307  f62b		       95 15		      STA	AUDC0,X	;3
   1308  f62d		       a9 06		      LDA	#6	;2
   1309  f62f		       95 19		      STA	AUDV0,X	;3
   1310  f631		       4c 86 f6 	      JMP	EndSound	;3
   1311  f634
   1312  f634				   PlayBeforeCheckpoint
   1313  f634		       a5 8c		      LDA	FrameCount0	;3
   1314  f636		       29 1c		      AND	#%00011100	;2
   1315  f638		       09 03		      ORA	#%00000011	;2
   1316  f63a		       95 17		      STA	AUDF0,X	;3
   1317  f63c		       a9 0c		      LDA	#12	;2
   1318  f63e		       95 15		      STA	AUDC0,X	;3
   1319  f640		       a9 03		      LDA	#3	;2
   1320  f642		       95 19		      STA	AUDV0,X	;3
   1321  f644		       4c 86 f6 	      JMP	EndSound	;3
   1322  f647
   1323  f647				   PlayWarnTimeEnding
   1324  f647		       a5 8c		      LDA	FrameCount0	;3
   1325  f649		       29 04		      AND	#%00000100	;2
   1326  f64b		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1327  f64d		       18		      CLC		;2
   1328  f64e		       a9 0a		      LDA	#10	;2
   1329  f650		       75 b8		      ADC	CountdownTimer,X	;2
   1330  f652		       95 17		      STA	AUDF0,X	;3
   1331  f654		       a9 0c		      LDA	#12	;2
   1332  f656		       95 15		      STA	AUDC0,X	;3
   1333  f658		       a9 03		      LDA	#3	;2
   1334  f65a		       95 19		      STA	AUDV0,X	;3
   1335  f65c		       4c 86 f6 	      JMP	EndSound	;3
   1336  f65f
   1337  f65f				   EngineSound		;41
   1338  f65f		       a9 09		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1339  f661		       95 19		      STA	AUDV0,X
   1340  f663		       b5 b8		      LDA	CountdownTimer,X	;3
   1341  f665		       f0 1b		      BEQ	EngineOff	;2
   1342  f667		       b4 d5		      LDY	Gear,X
   1343  f669		       b5 f0		      LDA	Player0SpeedL,X	;3
   1344  f66b		       4a		      LSR		;2
   1345  f66c		       4a		      LSR		;2
   1346  f66d		       4a		      LSR		;2
   1347  f66e		       29 0f		      AND	#%00001111	;2
   1348  f670		       85 b0		      STA	Tmp0	;3
   1349  f672		       b9 3f ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1350  f675		       38		      SEC		;2
   1351  f676		       e5 b0		      SBC	Tmp0	;3
   1352  f678		       95 17		      STA	AUDF0,X	;3
   1353  f67a		       b9 39 ff 	      LDA	EngineSoundType,Y	;4
   1354  f67d		       95 15		      STA	AUDC0,X	;3
   1355  f67f		       4c 86 f6 	      JMP	EndEngineSound	;3
   1356  f682				   EngineOff
   1357  f682				   MuteSound
   1358  f682		       a9 00		      LDA	#0
   1359  f684		       95 15		      STA	AUDC0,X
   1360  f686				   EndEngineSound
   1361  f686				   EndSound
   1362  f686		       60		      RTS
   1363  f687
   1364  f687				   ClearAll		; 58
   1365  f687		       a9 00		      LDA	#0	;2
   1366  f689		       85 1b		      STA	GRP0	;3
   1367  f68b		       85 1c		      STA	GRP1	;3
   1368  f68d		       85 1f		      STA	ENABL	;3
   1369  f68f		       85 1d		      STA	ENAM0	;3
   1370  f691		       85 1e		      STA	ENAM1	;3
   1371  f693		       85 80		      STA	GRP0Cache	;3
   1372  f695		       85 84		      STA	GRP1Cache	;3
   1373  f697		       85 85		      STA	ENABLCache	;3
   1374  f699		       85 86		      STA	ENAM0Cache	;3
   1375  f69b		       85 87		      STA	ENAM1Cache	;3
   1376  f69d
   1377  f69d				   ClearPF		; 26
   1378  f69d		       a9 00		      LDA	#0	;2
   1379  f69f				   ClearPFSkipLDA0
   1380  f69f		       85 0d		      STA	PF0	;3
   1381  f6a1		       85 0e		      STA	PF1	;3
   1382  f6a3		       85 0f		      STA	PF2	;3	
   1383  f6a5		       85 81		      STA	PF0Cache	;3
   1384  f6a7		       85 82		      STA	PF1Cache	;3
   1385  f6a9		       85 83		      STA	PF2Cache	;3 
   1386  f6ab		       60		      RTS		;6
   1387  f6ac				   EndClearAll
   1388  f6ac
   1389  f6ac				   LoadAll		; 48
   1390  f6ac		       a5 81		      LDA	PF0Cache	;3
   1391  f6ae		       85 0d		      STA	PF0	;3
   1392  f6b0
   1393  f6b0		       a5 82		      LDA	PF1Cache	;3
   1394  f6b2		       85 0e		      STA	PF1	;3
   1395  f6b4
   1396  f6b4		       a5 83		      LDA	PF2Cache	;3
   1397  f6b6		       85 0f		      STA	PF2	;3
   1398  f6b8
   1399  f6b8		       a5 84		      LDA	GRP1Cache	;3
   1400  f6ba		       85 1c		      STA	GRP1	;3
   1401  f6bc
   1402  f6bc		       a5 85		      LDA	ENABLCache	;3
   1403  f6be		       85 1f		      STA	ENABL	;3
   1404  f6c0
   1405  f6c0		       a5 86		      LDA	ENAM0Cache	;3
   1406  f6c2		       85 1d		      STA	ENAM0	;3
   1407  f6c4
   1408  f6c4		       a5 87		      LDA	ENAM1Cache	;3
   1409  f6c6		       85 1e		      STA	ENAM1	;3
   1410  f6c8
   1411  f6c8		       60		      RTS		;6
   1412  f6c9				   EndLoadAll
   1413  f6c9
   1414  f6c9				   NextDifficulty		;Is a SBR
   1415  f6c9		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1416  f6cb		       29 01		      AND	#%00000001
   1417  f6cd		       d0 24		      BNE	CheckRandomDifficulty
   1418  f6cf
   1419  f6cf		       b5 c4		      LDA	CurrentDifficulty,X
   1420  f6d1		       18		      CLC
   1421  f6d2		       69 01		      ADC	#1
   1422  f6d4		       29 03		      AND	#%00000011	; 0 to 3
   1423  f6d6		       95 c4		      STA	CurrentDifficulty,X
   1424  f6d8
   1425  f6d8				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1426  f6d8		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1427  f6da		       b9 bb ff 	      LDA	TrafficChanceTable,Y
   1428  f6dd		       95 be		      STA	TrafficChance,X
   1429  f6df		       b9 b7 ff 	      LDA	TrafficColorTable,Y
   1430  f6e2		       95 c2		      STA	TrafficColor,X
   1431  f6e4
   1432  f6e4		       a5 c6		      LDA	GameMode	;
   1433  f6e6		       29 01		      AND	#%00000001
   1434  f6e8		       f0 03		      BEQ	UseNextDifficultyTime
   1435  f6ea		       4c ee f6 	      JMP	StoreDifficultyTime
   1436  f6ed				   UseNextDifficultyTime
   1437  f6ed		       c8		      INY
   1438  f6ee				   StoreDifficultyTime
   1439  f6ee		       b9 bf ff 	      LDA	TrafficTimeTable,Y
   1440  f6f1		       95 c0		      STA	CheckpointTime,X
   1441  f6f3
   1442  f6f3				   CheckRandomDifficulty
   1443  f6f3		       a5 c6		      LDA	GameMode
   1444  f6f5		       29 08		      AND	#%00001000	; Random difficulties
   1445  f6f7		       f0 26		      BEQ	ReturnFromNextDifficulty
   1446  f6f9				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1447  f6f9		       a5 f4		      LDA	IsOpponentInFront
   1448  f6fb		       30 12		      BMI	UseOpponentChance
   1449  f6fd		       a5 cf		      LDA	OpponentLine	; Same line
   1450  f6ff		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1451  f701		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1452  f703		       a4 8c		      LDY	FrameCount0
   1453  f705		       b9 00 fe 	      LDA	AesTable,Y
   1454  f708							;EOR TrafficChance, no need, lets make life simple
   1455  f708		       29 3f		      AND	#%00111111
   1456  f70a		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1457  f70c		       4c 1f f7 	      JMP	ReturnFromNextDifficulty
   1458  f70f				   UseOpponentChance
   1459  f70f		       8a		      TXA
   1460  f710		       49 01		      EOR	#%00000001	; Reverts the player
   1461  f712		       aa		      TAX
   1462  f713		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1463  f715		       85 b3		      STA	Tmp3
   1464  f717		       8a		      TXA
   1465  f718		       49 01		      EOR	#%00000001	; Restors the player
   1466  f71a		       aa		      TAX
   1467  f71b		       a5 b3		      LDA	Tmp3
   1468  f71d		       95 be		      STA	TrafficChance,X
   1469  f71f
   1470  f71f				   ReturnFromNextDifficulty
   1471  f71f		       60		      RTS
   1472  f720
   1473  f720				   DefaultOffsets
   1474  f720		       a9 20		      LDA	#$20
   1475  f722		       85 96		      STA	TrafficOffset1 + 2
   1476  f724		       85 a6		      STA	OpTrafficOffset1 + 2
   1477  f726		       a9 40		      LDA	#$40
   1478  f728		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1479  f72a		       85 aa		      STA	OpTrafficOffset2 + 2
   1480  f72c		       a9 60		      LDA	#$60
   1481  f72e		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1482  f730		       85 ae		      STA	OpTrafficOffset3 + 2
   1483  f732		       a9 80		      LDA	#$80
   1484  f734		       60		      RTS
   1485  f735
   1486  f735				   PrintStaticText		; Preload X with the offset referent to StaticText
   1487  f735		       bd 00 ff 	      LDA	StaticText,X
   1488  f738		       85 d0		      STA	ScoreD0
   1489  f73a		       e8		      INX
   1490  f73b		       bd 00 ff 	      LDA	StaticText,X
   1491  f73e		       85 d1		      STA	ScoreD1
   1492  f740		       e8		      INX
   1493  f741		       bd 00 ff 	      LDA	StaticText,X
   1494  f744		       85 d2		      STA	ScoreD2
   1495  f746		       e8		      INX
   1496  f747		       bd 00 ff 	      LDA	StaticText,X
   1497  f74a		       85 d3		      STA	ScoreD3
   1498  f74c		       e8		      INX
   1499  f74d		       bd 00 ff 	      LDA	StaticText,X
   1500  f750		       85 d4		      STA	ScoreD4
   1501  f752		       60		      RTS
   1502  f753
   1503  f753				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1504  f753		       a2 00		      LDX	#0
   1505  f755		       a0 04		      LDY	#FONT_OFFSET
   1506  f757
   1507  f757				   ScoreLoop		; 20 
   1508  f757		       85 02		      STA	WSYNC	;2
   1509  f759		       85 2a		      STA	HMOVE
   1510  f75b
   1511  f75b		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1512  f75d		       85 0d		      STA	PF0	;3
   1513  f75f
   1514  f75f		       a5 82		      LDA	PF1Cache	;3
   1515  f761		       85 0e		      STA	PF1	;3
   1516  f763
   1517  f763		       a5 83		      LDA	PF2Cache	;3
   1518  f765		       85 0f		      STA	PF2	;3
   1519  f767
   1520  f767				   DrawScoreD0		; 15
   1521  f767		       a6 d0		      LDX	ScoreD0	; 3
   1522  f769		       bd 00 fd 	      LDA	Font,X	;4
   1523  f76c		       85 81		      STA	PF0Cache	;3
   1524  f76e		       c6 d0		      DEC	ScoreD0	;5
   1525  f770
   1526  f770				   DrawScoreD1		; 23	
   1527  f770		       a6 d1		      LDX	ScoreD1	; 3
   1528  f772		       bd 00 fd 	      LDA	Font,X	;4
   1529  f775		       0a		      ASL		;2
   1530  f776		       0a		      ASL		;2
   1531  f777		       0a		      ASL		;2
   1532  f778		       0a		      ASL		;2
   1533  f779		       85 82		      STA	PF1Cache	;3
   1534  f77b		       c6 d1		      DEC	ScoreD1	;5
   1535  f77d
   1536  f77d				   DrawScoreD2		; 20
   1537  f77d		       a6 d2		      LDX	ScoreD2	; 3
   1538  f77f		       bd 00 fd 	      LDA	Font,X	;4
   1539  f782		       29 0f		      AND	#%00001111	;2
   1540  f784		       05 82		      ORA	PF1Cache	;3
   1541  f786		       85 82		      STA	PF1Cache	;3
   1542  f788		       c6 d2		      DEC	ScoreD2	;5
   1543  f78a
   1544  f78a				   DrawScoreD3		; 23
   1545  f78a		       a6 d3		      LDX	ScoreD3	; 3
   1546  f78c		       bd 00 fd 	      LDA	Font,X	;4
   1547  f78f		       4a		      LSR		;2
   1548  f790		       4a		      LSR		;2
   1549  f791		       4a		      LSR		;2
   1550  f792		       4a		      LSR		;2
   1551  f793		       85 83		      STA	PF2Cache	;3
   1552  f795		       c6 d3		      DEC	ScoreD3	;5
   1553  f797
   1554  f797				   DrawScoreD4		; 20
   1555  f797		       a6 d4		      LDX	ScoreD4	; 3
   1556  f799		       bd 00 fd 	      LDA	Font,X	;4
   1557  f79c		       29 f0		      AND	#%11110000	;2
   1558  f79e		       05 83		      ORA	PF2Cache	;3
   1559  f7a0		       85 83		      STA	PF2Cache	;3
   1560  f7a2		       c6 d4		      DEC	ScoreD4	;5
   1561  f7a4
   1562  f7a4
   1563  f7a4		       88		      DEY		;2
   1564  f7a5		       10 b0		      BPL	ScoreLoop	;4
   1565  f7a7
   1566  f7a7		       85 02		      STA	WSYNC
   1567  f7a9		       85 2a		      STA	HMOVE
   1568  f7ab		       20 ac f6 	      JSR	LoadAll
   1569  f7ae		       60		      RTS		; 6
   1570  f7af
   1571  f7af				   WaitForVblankEnd
   1572  f7af		       ad 84 02 	      LDA	INTIM
   1573  f7b2		       d0 fb		      BNE	WaitForVblankEnd
   1574  f7b4		       85 02		      STA	WSYNC
   1575  f7b6		       85 01		      STA	VBLANK
   1576  f7b8		       60		      RTS
   1577  f7b9
   1578  f7b9				   Sleep4Lines
   1579  f7b9		       85 02		      STA	WSYNC
   1580  f7bb		       85 02		      STA	WSYNC
   1581  f7bd		       85 02		      STA	WSYNC
   1582  f7bf		       85 02		      STA	WSYNC
   1583  f7c1		       60		      RTS
   1584  f7c2
   1585  f7c2				   Sleep8Lines
   1586  f7c2		       20 b9 f7 	      JSR	Sleep4Lines
   1587  f7c5		       20 b9 f7 	      JSR	Sleep4Lines
   1588  f7c8		       60		      RTS
   1589  f7c9
   1590  f7c9				   Sleep32Lines
   1591  f7c9		       20 c2 f7 	      JSR	Sleep8Lines
   1592  f7cc		       20 c2 f7 	      JSR	Sleep8Lines
   1593  f7cf		       20 c2 f7 	      JSR	Sleep8Lines
   1594  f7d2		       20 c2 f7 	      JSR	Sleep8Lines
   1595  f7d5		       60		      RTS
   1596  f7d6
   1597  f7d6							;X = number of WSYNC HMOVE to run
   1598  f7d6				   HMoveXTimes
   1599  f7d6		       85 02		      STA	WSYNC	;3
   1600  f7d8		       85 2a		      STA	HMOVE	; 3/10 
   1601  f7da		       ca		      DEX
   1602  f7db		       d0 f9		      BNE	HMoveXTimes
   1603  f7dd		       60		      RTS
   1604  f7de
   1605  f7de				   ConfigureCarSprites
   1606  f7de		       a5 8c		      LDA	FrameCount0
   1607  f7e0		       29 01		      AND	#%00000001
   1608  f7e2		       d0 0b		      BNE	LoadForRightScreenSprites
   1609  f7e4				   LoadForLeftScreenSprites
   1610  f7e4		       a5 c7		      LDA	CurrentCarId
   1611  f7e6		       85 b0		      STA	Tmp0
   1612  f7e8		       a5 c8		      LDA	OpCurrentCarId
   1613  f7ea		       85 b1		      STA	Tmp1
   1614  f7ec		       4c f7 f7 	      JMP	LoadCarSpritesFromIds
   1615  f7ef				   LoadForRightScreenSprites
   1616  f7ef		       a5 c7		      LDA	CurrentCarId
   1617  f7f1		       85 b1		      STA	Tmp1
   1618  f7f3		       a5 c8		      LDA	OpCurrentCarId
   1619  f7f5		       85 b0		      STA	Tmp0
   1620  f7f7
   1621  f7f7				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1622  f7f7		       a4 b0		      LDY	Tmp0
   1623  f7f9		       b9 91 ff 	      LDA	CarIdToSpriteAddressL,Y
   1624  f7fc		       85 d7		      STA	CarSpritePointerL
   1625  f7fe		       b9 95 ff 	      LDA	CarIdToSpriteAddressH,Y
   1626  f801		       85 d8		      STA	CarSpritePointerH
   1627  f803				   ConfigureOpponentCarSprite
   1628  f803		       a4 b1		      LDY	Tmp1
   1629  f805		       b9 99 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1630  f808		       85 d9		      STA	EnemyCarSpritePointerL
   1631  f80a		       b9 9d ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1632  f80d		       85 da		      STA	EnemyCarSpritePointerH
   1633  f80f		       60		      RTS
   1634  f810
   1635  f810							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1636  f810							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1637  f810							; Tmp0 Binary Number
   1638  f810							; Result Returned in Tmp 1 and A
   1639  f810				   BINBCD8
   1640  f810		       f8		      SED		; Switch to decimal mode
   1641  f811		       a9 00		      LDA	#0	; Ensure the result is clear
   1642  f813		       85 b1		      STA	Tmp1+0
   1643  f815							;STA Tmp1+1
   1644  f815		       a2 08		      LDX	#8	; The number of source bits
   1645  f817
   1646  f817				   CNVBIT
   1647  f817		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1648  f819		       a5 b1		      LDA	Tmp1+0	; And add into result
   1649  f81b		       65 b1		      ADC	Tmp1+0
   1650  f81d		       85 b1		      STA	Tmp1+0
   1651  f81f							;Not needed now, 0 to 99 is enought for timer!
   1652  f81f							; LDA Tmp1+1	; propagating any carry
   1653  f81f							; ADC Tmp1+1
   1654  f81f							; STA Tmp1+1
   1655  f81f		       ca		      DEX		; And repeat for next bit
   1656  f820		       d0 f5		      BNE	CNVBIT
   1657  f822		       d8		      CLD		; Back to binary
   1658  f823
   1659  f823		       60		      RTS		; All Done.
   1660  f824
   1661  f824							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1662  f824							;X player 0 or 1
   1663  f824				   SelectCarWithDpad
   1664  f824		       a0 03		      LDY	#3
   1665  f826				   SelectCarWithDpadLoop
   1666  f826		       ad 80 02 	      LDA	SWCHA
   1667  f829		       25 b0		      AND	Tmp0
   1668  f82b		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1669  f82d		       98		      TYA
   1670  f82e		       95 c7		      STA	CurrentCarId,X
   1671  f830				   ContinueSelectCarWithDpadLoop
   1672  f830		       46 b0		      LSR	Tmp0
   1673  f832		       88		      DEY
   1674  f833		       10 f1		      BPL	SelectCarWithDpadLoop
   1675  f835		       60		      RTS
   1676  f836
   1677  f836				   ProcessOpponentLine
   1678  f836		       a5 8c		      LDA	FrameCount0
   1679  f838		       29 01		      AND	#%00000001
   1680  f83a		       38		      SEC
   1681  f83b		       d0 15		      BNE	Player0IsOpponent
   1682  f83d				   Player1IsOpponent		; Code could be reused?
   1683  f83d		       a5 91		      LDA	TrafficOffset0 + 1
   1684  f83f		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1685  f841		       85 b0		      STA	Tmp0
   1686  f843		       a5 92		      LDA	TrafficOffset0 + 2
   1687  f845		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1688  f847		       85 b1		      STA	Tmp1
   1689  f849		       a5 ba		      LDA	Traffic0Msb
   1690  f84b		       e5 bb		      SBC	OpTraffic0Msb
   1691  f84d		       85 b2		      STA	Tmp2
   1692  f84f		       4c 64 f8 	      JMP	StoreInFrontPlayer
   1693  f852				   Player0IsOpponent
   1694  f852		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1695  f854		       e5 91		      SBC	TrafficOffset0 + 1
   1696  f856		       85 b0		      STA	Tmp0
   1697  f858		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1698  f85a		       e5 92		      SBC	TrafficOffset0 + 2
   1699  f85c		       85 b1		      STA	Tmp1
   1700  f85e		       a5 bb		      LDA	OpTraffic0Msb
   1701  f860		       e5 ba		      SBC	Traffic0Msb
   1702  f862		       85 b2		      STA	Tmp2
   1703  f864
   1704  f864				   StoreInFrontPlayer
   1705  f864		       85 f4		      STA	IsOpponentInFront
   1706  f866
   1707  f866				   AddOffsetToOpponentLine
   1708  f866		       18		      CLC
   1709  f867		       a5 b0		      LDA	Tmp0
   1710  f869		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1711  f86b		       85 b0		      STA	Tmp0
   1712  f86d		       a5 b1		      LDA	Tmp1
   1713  f86f		       69 00		      ADC	#0
   1714  f871		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1715  f873		       a5 b2		      LDA	Tmp2
   1716  f875		       69 00		      ADC	#0
   1717  f877		       05 b1		      ORA	Tmp1
   1718  f879		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1719  f87b				   OpponentNotVisible
   1720  f87b		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1721  f87d		       85 cf		      STA	OpponentLine
   1722  f87f		       4c 86 f8 	      JMP	ReturnFromProcessOpponentLine
   1723  f882				   OpponentVisible
   1724  f882		       a5 b0		      LDA	Tmp0
   1725  f884		       85 cf		      STA	OpponentLine
   1726  f886				   ReturnFromProcessOpponentLine
   1727  f886		       60		      RTS
   1728  f887
   1729  f887							; Value stored in A
   1730  f887				   IsOpponentColliding
   1731  f887							;Any non default state, opponent do not colide
   1732  f887		       a5 8e		      LDA	CollisionCounter
   1733  f889		       05 8f		      ORA	OpCollisionCounter
   1734  f88b		       05 cb		      ORA	ScoreFontColorHoldChange
   1735  f88d		       05 cc		      ORA	OpScoreFontColorHoldChange
   1736  f88f		       d0 07		      BNE	OpponentNotColliding
   1737  f891		       a5 f4		      LDA	IsOpponentInFront
   1738  f893		       25 07		      AND	CXPPMM
   1739  f895		       4c 9a f8 	      JMP	ReturnIsOpponentColliding
   1740  f898				   OpponentNotColliding
   1741  f898		       a9 00		      LDA	#0
   1742  f89a				   ReturnIsOpponentColliding
   1743  f89a		       60		      RTS
   1744  f89b
   1745  f89b
   1746  f89b							; Movement and colision are binded because the car must be moved after duplicate size.
   1747  f89b							; Use X for the player
   1748  f89b							; Tmp2 Traffic colision result
   1749  f89b				   TestCollisionAndMove
   1750  f89b							; Until store the movemnt, Y contains the value to be stored.
   1751  f89b							; see if player0 colides with the rest
   1752  f89b		       a5 b2		      LDA	Tmp2
   1753  f89d		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1754  f89f		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1755  f8a1		       d0 25		      BNE	NoCollision
   1756  f8a3		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1757  f8a5		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1758  f8a7		       f0 1f		      BEQ	NoCollision
   1759  f8a9		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1760  f8ab		       f0 1b		      BEQ	NoCollision
   1761  f8ad		       a9 ff		      LDA	#COLLISION_FRAMES
   1762  f8af		       95 8e		      STA	CollisionCounter,X
   1763  f8b1		       b5 f2		      LDA	Player0SpeedH,X
   1764  f8b3		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1765  f8b5		       a9 10		      LDA	#COLLISION_SPEED_L
   1766  f8b7		       d5 f0		      CMP	Player0SpeedL,X
   1767  f8b9		       b0 04		      BCS	SkipSetColisionSpeedL
   1768  f8bb				   SetColisionSpeedL
   1769  f8bb		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1770  f8bd		       95 f0		      STA	Player0SpeedL,X
   1771  f8bf				   SkipSetColisionSpeedL
   1772  f8bf		       a9 00		      LDA	#0
   1773  f8c1		       95 f2		      STA	Player0SpeedH,X
   1774  f8c3		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1775  f8c5		       4c 18 f9 	      JMP	StoreHMove	; We keep position consistent
   1776  f8c8				   NoCollision
   1777  f8c8
   1778  f8c8				   DecrementCollision
   1779  f8c8		       b5 8e		      LDA	CollisionCounter,X
   1780  f8ca		       f0 06		      BEQ	FinishDecrementCollision
   1781  f8cc		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1782  f8ce		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1783  f8d0		       d6 8e		      DEC	CollisionCounter,X
   1784  f8d2				   FinishDecrementCollision
   1785  f8d2
   1786  f8d2				   ResetPlayerSize
   1787  f8d2		       d0 04		      BNE	FinishResetPlayerSize
   1788  f8d4		       a9 30		      LDA	#%00110000
   1789  f8d6		       95 04		      STA	NUSIZ0,X	;
   1790  f8d8				   FinishResetPlayerSize
   1791  f8d8
   1792  f8d8				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1793  f8d8		       b5 8e		      LDA	CollisionCounter,X
   1794  f8da		       c9 01		      CMP	#1	; Last frame before reset
   1795  f8dc		       d0 05		      BNE	SkipResetPlayerPosition
   1796  f8de		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1797  f8e0		       4c 18 f9 	      JMP	StoreHMove
   1798  f8e3				   SkipResetPlayerPosition
   1799  f8e3
   1800  f8e3				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1801  f8e3		       b5 c7		      LDA	CurrentCarId,X
   1802  f8e5		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1803  f8e7		       d0 08		      BNE	PrepareReadXAxis
   1804  f8e9		       a0 00		      LDY	#0
   1805  f8eb		       a5 8c		      LDA	FrameCount0
   1806  f8ed		       29 01		      AND	#DRAGSTER_TURN_MASK
   1807  f8ef		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1808  f8f1
   1809  f8f1				   PrepareReadXAxis
   1810  f8f1		       a0 00		      LDY	#0
   1811  f8f3		       b5 b6		      LDA	Player0X,X
   1812  f8f5				   BeginReadLeft
   1813  f8f5		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1814  f8f7		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1815  f8fa		       2c 80 02 	      BIT	SWCHA
   1816  f8fd		       d0 07		      BNE	SkipMoveLeft
   1817  f8ff		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1818  f901		       d6 b6		      DEC	Player0X,X
   1819  f903		       4c 18 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1820  f906				   SkipMoveLeft
   1821  f906				   BeginReadRight
   1822  f906		       b5 b6		      LDA	Player0X,X
   1823  f908		       c9 2c		      CMP	#PLAYER_MAX_X
   1824  f90a		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1825  f90c		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1826  f90f		       2c 80 02 	      BIT	SWCHA
   1827  f912		       d0 04		      BNE	SkipMoveRight
   1828  f914		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1829  f916		       f6 b6		      INC	Player0X,X
   1830  f918				   SkipMoveRight
   1831  f918				   StoreHMove
   1832  f918		       94 20		      STY	HMP0,X	;set the move for player 0
   1833  f91a
   1834  f91a		       60		      RTS
   1835  f91b
   1836  f91b							; X Traffic offset 4 bits each lane, 4 lanes per player
   1837  f91b							; Tmp3 Max X offset
   1838  f91b							; Tmp4 Max Player Speed L
   1839  f91b							; Tmp5 Max Player Speed H
   1840  f91b				   UpdateOffsets
   1841  f91b		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1842  f91d		       a5 c6		      LDA	GameMode
   1843  f91f		       29 04		      AND	#%00000100	; GameModes with high delta
   1844  f921		       f0 02		      BEQ	UpdateOffsetsLoop
   1845  f923		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1846  f925
   1847  f925				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1848  f925		       38		      SEC
   1849  f926		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1850  f928		       f9 7d ff 	      SBC	TrafficSpeeds,Y
   1851  f92b		       85 b0		      STA	Tmp0
   1852  f92d		       c8		      INY
   1853  f92e		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1854  f930		       f9 7d ff 	      SBC	TrafficSpeeds,Y
   1855  f933		       85 b1		      STA	Tmp1
   1856  f935		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1857  f937		       e9 00		      SBC	#0
   1858  f939		       85 b2		      STA	Tmp2
   1859  f93b
   1860  f93b				   AddsTheResult
   1861  f93b		       18		      CLC
   1862  f93c		       a5 b0		      LDA	Tmp0
   1863  f93e		       75 90		      ADC	TrafficOffset0,X
   1864  f940		       95 90		      STA	TrafficOffset0,X
   1865  f942		       e8		      INX
   1866  f943		       a5 b1		      LDA	Tmp1
   1867  f945		       75 90		      ADC	TrafficOffset0,X
   1868  f947		       95 90		      STA	TrafficOffset0,X
   1869  f949		       e8		      INX
   1870  f94a		       a5 b2		      LDA	Tmp2	; Carry
   1871  f94c		       75 90		      ADC	TrafficOffset0,X
   1872  f94e		       95 90		      STA	TrafficOffset0,X
   1873  f950		       90 0f		      BCC	CalculateOffsetCache
   1874  f952				   CalculatePlayer0Msb
   1875  f952		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1876  f954		       d0 05		      BNE	CalculatePlayer1Msb
   1877  f956		       e6 ba		      INC	Traffic0Msb
   1878  f958		       4c 61 f9 	      JMP	CalculateOffsetCache
   1879  f95b				   CalculatePlayer1Msb
   1880  f95b		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1881  f95d		       d0 02		      BNE	CalculateOffsetCache
   1882  f95f		       e6 bb		      INC	OpTraffic0Msb
   1883  f961
   1884  f961				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1885  f961		       e8		      INX
   1886  f962		       38		      SEC
   1887  f963		       69 00		      ADC	#0	;Increment by one
   1888  f965		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1889  f967
   1890  f967				   PrepareNextUpdateLoop
   1891  f967		       c8		      INY
   1892  f968		       e8		      INX
   1893  f969		       e4 b3		      CPX	Tmp3	; Max X offset
   1894  f96b		       d0 b8		      BNE	UpdateOffsetsLoop
   1895  f96d		       60		      RTS
   1896  f96e
   1897  f96e							; X Player 0 or 1
   1898  f96e				   ProcessSpeed
   1899  f96e				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1900  f96e		       a9 00		      LDA	#0
   1901  f970		       85 b0		      STA	Tmp0	; Break speed
   1902  f972		       b5 b8		      LDA	CountdownTimer,X
   1903  f974		       d0 0d		      BNE	Break
   1904  f976		       b4 c7		      LDY	CurrentCarId,X
   1905  f978		       a5 8c		      LDA	FrameCount0
   1906  f97a		       39 a5 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1907  f97d		       d0 04		      BNE	Break
   1908  f97f		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1909  f981		       85 b0		      STA	Tmp0
   1910  f983
   1911  f983				   Break
   1912  f983		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1913  f986		       2c 80 02 	      BIT	SWCHA
   1914  f989		       d0 12		      BNE	BreakNonZero
   1915  f98b		       b5 0c		      LDA	INPT4,X	;3
   1916  f98d		       10 0a		      BPL	BreakWhileAccelerating
   1917  f98f		       b4 d5		      LDY	Gear,X
   1918  f991		       b9 b1 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1919  f994		       85 b0		      STA	Tmp0
   1920  f996		       4c 9d f9 	      JMP	BreakNonZero
   1921  f999				   BreakWhileAccelerating		; Allow better control while breaking.
   1922  f999		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1923  f99b		       85 b0		      STA	Tmp0
   1924  f99d
   1925  f99d				   BreakNonZero
   1926  f99d		       a5 b0		      LDA	Tmp0
   1927  f99f		       f0 29		      BEQ	SkipBreak
   1928  f9a1
   1929  f9a1				   DecreaseSpeed
   1930  f9a1		       38		      SEC
   1931  f9a2		       b5 f0		      LDA	Player0SpeedL,X
   1932  f9a4		       e5 b0		      SBC	Tmp0
   1933  f9a6		       95 f0		      STA	Player0SpeedL,X
   1934  f9a8		       b5 f2		      LDA	Player0SpeedH,X
   1935  f9aa		       e9 00		      SBC	#0
   1936  f9ac		       95 f2		      STA	Player0SpeedH,X
   1937  f9ae
   1938  f9ae				   CheckMinSpeed
   1939  f9ae		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1940  f9b0		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1941  f9b2		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1942  f9b4		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1943  f9b6
   1944  f9b6				   CompareLBreakSpeed
   1945  f9b6		       b5 f0		      LDA	Player0SpeedL,X
   1946  f9b8		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1947  f9ba		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1948  f9bc		       4c c7 f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1949  f9bf
   1950  f9bf				   ResetMinSpeed
   1951  f9bf		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1952  f9c1		       95 f2		      STA	Player0SpeedH,X
   1953  f9c3		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1954  f9c5		       95 f0		      STA	Player0SpeedL,X
   1955  f9c7
   1956  f9c7				   SkipAccelerateIfBreaking
   1957  f9c7		       4c 10 fa 	      JMP	SkipAccelerate
   1958  f9ca				   SkipBreak
   1959  f9ca
   1960  f9ca				   Acelerates
   1961  f9ca		       b5 b8		      LDA	CountdownTimer,X
   1962  f9cc		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1963  f9ce
   1964  f9ce				   ContinueAccelerateTest
   1965  f9ce		       b5 0c		      LDA	INPT4,X	;3
   1966  f9d0		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1967  f9d2		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1968  f9d5		       2c 80 02 	      BIT	SWCHA
   1969  f9d8		       d0 36		      BNE	SkipAccelerate
   1970  f9da
   1971  f9da				   IncreaseCarSpeed
   1972  f9da		       a9 02		      LDA	#2
   1973  f9dc		       85 b0		      STA	Tmp0	; Loop control
   1974  f9de		       b4 c7		      LDY	CurrentCarId,X
   1975  f9e0				   IncreaseCarSpeedLoop
   1976  f9e0							;Adds speed
   1977  f9e0		       18		      CLC
   1978  f9e1		       b5 dc		      LDA	AccelerateBuffer,X
   1979  f9e3		       79 a1 ff 	      ADC	CarIdToAccelerateSpeed,Y
   1980  f9e6		       95 dc		      STA	AccelerateBuffer,X
   1981  f9e8		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1982  f9ea		       f6 f0		      INC	Player0SpeedL,X
   1983  f9ec		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1984  f9ee		       f6 f2		      INC	Player0SpeedH,X
   1985  f9f0				   ContinueIncreaseSpeedLoop
   1986  f9f0		       c6 b0		      DEC	Tmp0
   1987  f9f2		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1988  f9f4				   SkipIncreaseCarSpeed
   1989  f9f4
   1990  f9f4				   CheckIfAlreadyMaxSpeed
   1991  f9f4		       b5 f2		      LDA	Player0SpeedH,X
   1992  f9f6		       c9 02		      CMP	#CAR_MAX_SPEED_H
   1993  f9f8		       90 16		      BCC	SkipAccelerate	; less than my max speed
   1994  f9fa		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   1995  f9fc							;High bit is max, compare the low
   1996  f9fc		       b4 c7		      LDY	CurrentCarId,X
   1997  f9fe		       b5 f0		      LDA	Player0SpeedL,X
   1998  fa00		       d9 a9 ff 	      CMP	CarIdToMaxSpeedL,Y
   1999  fa03		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2000  fa05							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2001  fa05
   2002  fa05				   ResetToMaxSpeed		; Speed is more, or is already max
   2003  fa05		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2004  fa07		       95 f2		      STA	Player0SpeedH,X
   2005  fa09		       b4 c7		      LDY	CurrentCarId,X
   2006  fa0b		       b9 a9 ff 	      LDA	CarIdToMaxSpeedL,Y
   2007  fa0e		       95 f0		      STA	Player0SpeedL,X
   2008  fa10				   SkipAccelerate
   2009  fa10		       60		      RTS
   2010  fa11
   2011  fa11							;Tmp0 Traffic Offset to compare with next checkpoint
   2012  fa11				   ProcessPlayerStatus
   2013  fa11				   IsGameOver
   2014  fa11		       b5 b8		      LDA	CountdownTimer,X
   2015  fa13		       15 f0		      ORA	Player0SpeedL,X
   2016  fa15		       15 f2		      ORA	Player0SpeedH,X
   2017  fa17		       d0 0b		      BNE	IsCheckpoint
   2018  fa19		       a9 01		      LDA	#1
   2019  fa1b		       95 cb		      STA	ScoreFontColorHoldChange,X
   2020  fa1d		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2021  fa1f		       95 c9		      STA	ScoreFontColor,X
   2022  fa21		       4c 56 fa 	      JMP	SkipIsTimeOver
   2023  fa24
   2024  fa24				   IsCheckpoint
   2025  fa24		       b5 cd		      LDA	NextCheckpoint,X
   2026  fa26		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2027  fa28		       d0 20		      BNE	SkipIsCheckpoint
   2028  fa2a		       18		      CLC
   2029  fa2b		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2030  fa2d		       95 cd		      STA	NextCheckpoint,X
   2031  fa2f		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2032  fa31		       95 c9		      STA	ScoreFontColor,X
   2033  fa33		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2034  fa35		       95 cb		      STA	ScoreFontColorHoldChange,X
   2035  fa37		       b5 b8		      LDA	CountdownTimer,X
   2036  fa39		       18		      CLC
   2037  fa3a		       75 c0		      ADC	CheckpointTime,X
   2038  fa3c		       95 b8		      STA	CountdownTimer,X
   2039  fa3e		       90 04		      BCC	JumpSkipTimeOver
   2040  fa40		       a9 ff		      LDA	#$FF
   2041  fa42		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2042  fa44				   JumpSkipTimeOver
   2043  fa44		       20 c9 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2044  fa47		       4c 56 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2045  fa4a				   SkipIsCheckpoint
   2046  fa4a
   2047  fa4a				   IsTimeOver
   2048  fa4a		       b5 b8		      LDA	CountdownTimer,X
   2049  fa4c		       d0 08		      BNE	SkipIsTimeOver
   2050  fa4e		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2051  fa50		       95 cb		      STA	ScoreFontColorHoldChange,X
   2052  fa52		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2053  fa54		       95 c9		      STA	ScoreFontColor,X
   2054  fa56				   SkipIsTimeOver
   2055  fa56		       60		      RTS
   2056  fa57
   2057  fa57
   2058  fa57				   EverySecond		; 64 frames to be more precise
   2059  fa57		       a9 3f		      LDA	#%00111111
   2060  fa59		       25 8c		      AND	FrameCount0
   2061  fa5b		       d0 06		      BNE	SkipEverySecondAction
   2062  fa5d		       d5 b8		      CMP	CountdownTimer,X
   2063  fa5f		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2064  fa61		       d6 b8		      DEC	CountdownTimer,X
   2065  fa63				   SkipEverySecondAction
   2066  fa63		       60		      RTS
   2067  fa64
   2068  fa64				   CalculateGear
   2069  fa64		       b5 f0		      LDA	Player0SpeedL,X	;3
   2070  fa66		       29 80		      AND	#%10000000	;2
   2071  fa68		       15 f2		      ORA	Player0SpeedH,X	;3
   2072  fa6a		       18		      CLC		;2
   2073  fa6b		       2a		      ROL		;2
   2074  fa6c		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2075  fa6e		       95 d5		      STA	Gear,X
   2076  fa70		       60		      RTS
   2077  fa71
   2078  fa71				   ProcessScoreFontColor
   2079  fa71		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2080  fa73		       f0 06		      BEQ	ResetScoreFontColor
   2081  fa75		       88		      DEY
   2082  fa76		       94 cb		      STY	ScoreFontColorHoldChange,X
   2083  fa78		       4c 80 fa 	      JMP	SkipScoreFontColor
   2084  fa7b				   ResetScoreFontColor
   2085  fa7b		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2086  fa7e		       95 c9		      STA	ScoreFontColor,X
   2087  fa80				   SkipScoreFontColor
   2088  fa80		       60		      RTS
   2089  fa81
   2090  fa81							; Moved here because of rom space.
   2091  fa81							; The only SBR in constants space
   2092  fa81				   DrawQrCode
   2093  fa81		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2094  fa83		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2095  fa85		       a9 01		      LDA	#%00000001	; Mirror playfield
   2096  fa87		       85 0a		      STA	CTRLPF
   2097  fa89		       20 87 f6 	      JSR	ClearAll	; To be 100 sure!
   2098  fa8c		       ad 82 02 	      LDA	SWCHB
   2099  fa8f		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2100  fa91		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2101  fa93		       f0 07		      BEQ	StoreReversedQrCode
   2102  fa95		       86 09		      STX	COLUBK
   2103  fa97		       84 08		      STY	COLUPF
   2104  fa99		       4c a0 fa 	      JMP	ContinueQrCode
   2105  fa9c				   StoreReversedQrCode
   2106  fa9c		       86 08		      STX	COLUPF
   2107  fa9e		       84 09		      STY	COLUBK
   2108  faa0
   2109  faa0				   ContinueQrCode
   2110  faa0		       a2 09		      LDX	#9
   2111  faa2		       20 d6 f7 	      JSR	HMoveXTimes
   2112  faa5		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2113  faa7		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2114  faa9		       20 af f7 	      JSR	WaitForVblankEnd
   2115  faac		       20 c2 f7 	      JSR	Sleep8Lines
   2116  faaf		       20 c2 f7 	      JSR	Sleep8Lines
   2117  fab2		       20 c2 f7 	      JSR	Sleep8Lines
   2118  fab5
   2119  fab5				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2120  fab5		       85 02		      STA	WSYNC
   2121  fab7		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2122  faba		       85 0e		      STA	PF1	;3
   2123  fabc		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2124  fabf		       85 0f		      STA	PF2	;3
      0  fac1					      SLEEP	27	; 
      1  fac1				   .CYCLES    SET	27
      2  fac1
      3  fac1				  -	      IF	.CYCLES < 2
      4  fac1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fac1				  -	      ERR
      6  fac1					      ENDIF
      7  fac1
      8  fac1					      IF	.CYCLES & 1
      9  fac1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fac1				  -	      nop	0
     11  fac1					      ELSE
     12  fac1		       24 00		      bit	VSYNC
     13  fac3					      ENDIF
     14  fac3				   .CYCLES    SET	.CYCLES - 3
     15  fac3					      ENDIF
     16  fac3
     17  fac3					      REPEAT	.CYCLES / 2
     18  fac3		       ea		      nop
     17  fac3					      REPEND
     18  fac4		       ea		      nop
     17  fac4					      REPEND
     18  fac5		       ea		      nop
     17  fac5					      REPEND
     18  fac6		       ea		      nop
     17  fac6					      REPEND
     18  fac7		       ea		      nop
     17  fac7					      REPEND
     18  fac8		       ea		      nop
     17  fac8					      REPEND
     18  fac9		       ea		      nop
     17  fac9					      REPEND
     18  faca		       ea		      nop
     17  faca					      REPEND
     18  facb		       ea		      nop
     17  facb					      REPEND
     18  facc		       ea		      nop
     17  facc					      REPEND
     18  facd		       ea		      nop
     17  facd					      REPEND
     18  face		       ea		      nop
     19  facf					      REPEND
   2126  facf		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2127  fad2		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2128  fad4		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2129  fad7		       85 0e		      STA	PF1	;3
   2130  fad9
   2131  fad9		       ca		      DEX		;2
   2132  fada		       d0 d9		      BNE	QrCodeLoop	;2
   2133  fadc		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2134  fade		       88		      DEY		;2
   2135  fadf		       10 d4		      BPL	QrCodeLoop	;4
   2136  fae1
   2137  fae1				   EndQrCodeLoop
   2138  fae1		       85 02		      STA	WSYNC	;
   2139  fae3		       a9 00		      LDA	#0
   2140  fae5		       85 0e		      STA	PF1	;3
   2141  fae7		       85 0f		      STA	PF2	;3
   2142  fae9
   2143  fae9		       20 c9 f7 	      JSR	Sleep32Lines
   2144  faec		       4c 1e f5 	      JMP	PrepareOverscan
   2145  faef
   2146  faef							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2147  fc00					      org	$FC00
   2148  fc00				   QrCode1
   2149  fc00		       1f		      .byte.b	#%00011111
   2150  fc01		       10		      .byte.b	#%00010000
   2151  fc02		       17		      .byte.b	#%00010111
   2152  fc03		       17		      .byte.b	#%00010111
   2153  fc04		       17		      .byte.b	#%00010111
   2154  fc05		       10		      .byte.b	#%00010000
   2155  fc06		       1f		      .byte.b	#%00011111
   2156  fc07		       00		      .byte.b	#%00000000
   2157  fc08		       17		      .byte.b	#%00010111
   2158  fc09		       10		      .byte.b	#%00010000
   2159  fc0a		       1d		      .byte.b	#%00011101
   2160  fc0b		       16		      .byte.b	#%00010110
   2161  fc0c		       03		      .byte.b	#%00000011
   2162  fc0d		       19		      .byte.b	#%00011001
   2163  fc0e		       13		      .byte.b	#%00010011
   2164  fc0f		       1c		      .byte.b	#%00011100
   2165  fc10		       0b		      .byte.b	#%00001011
   2166  fc11		       00		      .byte.b	#%00000000
   2167  fc12		       1f		      .byte.b	#%00011111
   2168  fc13		       10		      .byte.b	#%00010000
   2169  fc14		       17		      .byte.b	#%00010111
   2170  fc15		       17		      .byte.b	#%00010111
   2171  fc16		       17		      .byte.b	#%00010111
   2172  fc17		       10		      .byte.b	#%00010000
   2173  fc18		       1f		      .byte.b	#%00011111
   2174  fc19
   2175  fc19				   QrCode2
   2176  fc19		       c3		      .byte.b	#%11000011
   2177  fc1a		       9a		      .byte.b	#%10011010
   2178  fc1b		       82		      .byte.b	#%10000010
   2179  fc1c		       da		      .byte.b	#%11011010
   2180  fc1d		       aa		      .byte.b	#%10101010
   2181  fc1e		       ca		      .byte.b	#%11001010
   2182  fc1f		       f3		      .byte.b	#%11110011
   2183  fc20		       78		      .byte.b	#%01111000
   2184  fc21		       df		      .byte.b	#%11011111
   2185  fc22		       fc		      .byte.b	#%11111100
   2186  fc23		       c7		      .byte.b	#%11000111
   2187  fc24		       98		      .byte.b	#%10011000
   2188  fc25		       23		      .byte.b	#%00100011
   2189  fc26		       b9		      .byte.b	#%10111001
   2190  fc27		       d2		      .byte.b	#%11010010
   2191  fc28		       30		      .byte.b	#%00110000
   2192  fc29		       eb		      .byte.b	#%11101011
   2193  fc2a		       28		      .byte.b	#%00101000
   2194  fc2b		       ab		      .byte.b	#%10101011
   2195  fc2c		       72		      .byte.b	#%01110010
   2196  fc2d		       fa		      .byte.b	#%11111010
   2197  fc2e		       7a		      .byte.b	#%01111010
   2198  fc2f		       32		      .byte.b	#%00110010
   2199  fc30		       3a		      .byte.b	#%00111010
   2200  fc31		       63		      .byte.b	#%01100011
   2201  fc32
   2202  fc32				   QrCode3
   2203  fc32		       98		      .byte.b	#%10011000
   2204  fc33		       c3		      .byte.b	#%11000011
   2205  fc34		       39		      .byte.b	#%00111001
   2206  fc35		       34		      .byte.b	#%00110100
   2207  fc36		       ff		      .byte.b	#%11111111
   2208  fc37		       71		      .byte.b	#%01110001
   2209  fc38		       d5		      .byte.b	#%11010101
   2210  fc39		       d1		      .byte.b	#%11010001
   2211  fc3a		       5f		      .byte.b	#%01011111
   2212  fc3b		       26		      .byte.b	#%00100110
   2213  fc3c		       2d		      .byte.b	#%00101101
   2214  fc3d		       e9		      .byte.b	#%11101001
   2215  fc3e		       d6		      .byte.b	#%11010110
   2216  fc3f		       26		      .byte.b	#%00100110
   2217  fc40		       ba		      .byte.b	#%10111010
   2218  fc41		       03		      .byte.b	#%00000011
   2219  fc42		       dd		      .byte.b	#%11011101
   2220  fc43		       e0		      .byte.b	#%11100000
   2221  fc44		       57		      .byte.b	#%01010111
   2222  fc45		       14		      .byte.b	#%00010100
   2223  fc46		       35		      .byte.b	#%00110101
   2224  fc47		       e5		      .byte.b	#%11100101
   2225  fc48		       b5		      .byte.b	#%10110101
   2226  fc49		       d4		      .byte.b	#%11010100
   2227  fc4a		       97		      .byte.b	#%10010111
   2228  fc4b
   2229  fc4b				   QrCode4
   2230  fc4b		       09		      .byte.b	#%00001001
   2231  fc4c		       0e		      .byte.b	#%00001110
   2232  fc4d		       0f		      .byte.b	#%00001111
   2233  fc4e		       0c		      .byte.b	#%00001100
   2234  fc4f		       0c		      .byte.b	#%00001100
   2235  fc50		       08		      .byte.b	#%00001000
   2236  fc51		       08		      .byte.b	#%00001000
   2237  fc52		       06		      .byte.b	#%00000110
   2238  fc53		       06		      .byte.b	#%00000110
   2239  fc54		       0b		      .byte.b	#%00001011
   2240  fc55		       0f		      .byte.b	#%00001111
   2241  fc56		       04		      .byte.b	#%00000100
   2242  fc57		       08		      .byte.b	#%00001000
   2243  fc58		       0f		      .byte.b	#%00001111
   2244  fc59		       09		      .byte.b	#%00001001
   2245  fc5a		       07		      .byte.b	#%00000111
   2246  fc5b		       05		      .byte.b	#%00000101
   2247  fc5c		       00		      .byte.b	#%00000000
   2248  fc5d		       0f		      .byte.b	#%00001111
   2249  fc5e		       08		      .byte.b	#%00001000
   2250  fc5f		       0b		      .byte.b	#%00001011
   2251  fc60		       0b		      .byte.b	#%00001011
   2252  fc61		       0b		      .byte.b	#%00001011
   2253  fc62		       08		      .byte.b	#%00001000
   2254  fc63		       0f		      .byte.b	#%00001111
   2255  fc64
   2256  fc64				   PlayerToUpMask
   2257  fc64		       10		      .byte.b	#%00010000	;
   2258  fc65		       01		      .byte.b	#%00000001	;
   2259  fc66
   2260  fc66				   PlayerToDownMask
   2261  fc66		       20		      .byte.b	#%00100000	;
   2262  fc67		       02		      .byte.b	#%00000010	;
   2263  fc68
   2264  fc68				   PlayerToLeftMask
   2265  fc68		       40		      .byte.b	#%01000000	;
   2266  fc69		       04		      .byte.b	#%00000100	;
   2267  fc6a
   2268  fc6a				   PlayerToRightMask
   2269  fc6a		       80		      .byte.b	#%10000000	;
   2270  fc6b		       08		      .byte.b	#%00001000	;
   2271  fc6c
   2272  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2273  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2274  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2275  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2276  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2277  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2278  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2279  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2280  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2281  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2282  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2283  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2284  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2285  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2286  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2287  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2288  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2289  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2290  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2291  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2292  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2293  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2294  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2295  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2296  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2297  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2298  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2299  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2300  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2301  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2302  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2303  fc8a		       9a		      .byte.b	#<CV + #FONT_OFFSET	; If game over text is gone, we can replace the v for u!
   2304  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2305  fc8c
   2306  fc8c
   2307  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2308  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2309  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2310  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2311  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2312  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2313  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2314  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2315  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2316  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2317  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2318  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2319  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2320  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2321  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2322  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2323  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2324  fc9c
   2325  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2326  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2327  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2328  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2329  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2330  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2331  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2332  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2333  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2334  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2335  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2336  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2337  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2338  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2339  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2340  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2341  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2342  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2343  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2344  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2345  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2346  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2347  fcb1
   2348  fcb1				   PlayerToDefaultColor
   2349  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2350  fcb2		       96		      .byte.b	#PLAYER1_COLOR
   2351  fcb3
   2352  fd00					      org	$FD00
   2353  fd00				   Font
   2354  fd00				   C0
   2355  fd00		       e7		      .byte.b	#%11100111	;
   2356  fd01		       a5		      .byte.b	#%10100101	; 
   2357  fd02		       a5		      .byte.b	#%10100101	; 
   2358  fd03		       a5		      .byte.b	#%10100101	; 
   2359  fd04		       e7		      .byte.b	#%11100111	;	
   2360  fd05				   C1
   2361  fd05		       e7		      .byte.b	#%11100111	;
   2362  fd06		       42		      .byte.b	#%01000010	; 
   2363  fd07		       42		      .byte.b	#%01000010	; 
   2364  fd08		       42		      .byte.b	#%01000010	; 
   2365  fd09		       66		      .byte.b	#%01100110	;
   2366  fd0a				   C2
   2367  fd0a		       e7		      .byte.b	#%11100111	;
   2368  fd0b		       24		      .byte.b	#%00100100	; 
   2369  fd0c		       e7		      .byte.b	#%11100111	; 
   2370  fd0d		       81		      .byte.b	#%10000001	; 
   2371  fd0e		       e7		      .byte.b	#%11100111	;
   2372  fd0f				   C3
   2373  fd0f		       e7		      .byte.b	#%11100111	;
   2374  fd10		       81		      .byte.b	#%10000001	; 
   2375  fd11		       e7		      .byte.b	#%11100111	; 
   2376  fd12		       81		      .byte.b	#%10000001	; 
   2377  fd13		       e7		      .byte.b	#%11100111	;
   2378  fd14				   C4
   2379  fd14		       81		      .byte.b	#%10000001	;
   2380  fd15		       81		      .byte.b	#%10000001	; 
   2381  fd16		       e7		      .byte.b	#%11100111	; 
   2382  fd17		       a5		      .byte.b	#%10100101	; 
   2383  fd18		       a5		      .byte.b	#%10100101	;
   2384  fd19				   C5
   2385  fd19		       e7		      .byte.b	#%11100111	;
   2386  fd1a		       81		      .byte.b	#%10000001	; 
   2387  fd1b		       e7		      .byte.b	#%11100111	; 
   2388  fd1c		       24		      .byte.b	#%00100100	; 
   2389  fd1d		       e7		      .byte.b	#%11100111	;
   2390  fd1e				   C6
   2391  fd1e		       e7		      .byte.b	#%11100111	;
   2392  fd1f		       a5		      .byte.b	#%10100101	; 
   2393  fd20		       e7		      .byte.b	#%11100111	; 
   2394  fd21		       24		      .byte.b	#%00100100	; 
   2395  fd22		       e7		      .byte.b	#%11100111	;
   2396  fd23				   C7
   2397  fd23		       81		      .byte.b	#%10000001	;
   2398  fd24		       81		      .byte.b	#%10000001	; 
   2399  fd25		       81		      .byte.b	#%10000001	; 
   2400  fd26		       81		      .byte.b	#%10000001	; 
   2401  fd27		       e7		      .byte.b	#%11100111	;
   2402  fd28				   C8
   2403  fd28		       e7		      .byte.b	#%11100111	;
   2404  fd29		       a5		      .byte.b	#%10100101	; 
   2405  fd2a		       e7		      .byte.b	#%11100111	; 
   2406  fd2b		       a5		      .byte.b	#%10100101	; 
   2407  fd2c		       e7		      .byte.b	#%11100111	;
   2408  fd2d				   C9
   2409  fd2d		       e7		      .byte.b	#%11100111	;
   2410  fd2e		       81		      .byte.b	#%10000001	; 
   2411  fd2f		       e7		      .byte.b	#%11100111	; 
   2412  fd30		       a5		      .byte.b	#%10100101	; 
   2413  fd31		       e7		      .byte.b	#%11100111	;
   2414  fd32				   CA
   2415  fd32		       a5		      .byte.b	#%10100101	;
   2416  fd33		       a5		      .byte.b	#%10100101	; 
   2417  fd34		       e7		      .byte.b	#%11100111	; 
   2418  fd35		       a5		      .byte.b	#%10100101	; 
   2419  fd36		       e7		      .byte.b	#%11100111	;
   2420  fd37				   CB
   2421  fd37		       66		      .byte.b	#%01100110	;
   2422  fd38		       a5		      .byte.b	#%10100101	; 
   2423  fd39		       66		      .byte.b	#%01100110	; 
   2424  fd3a		       a5		      .byte.b	#%10100101	;
   2425  fd3b		       66		      .byte.b	#%01100110	;
   2426  fd3c				   CC
   2427  fd3c		       e7		      .byte.b	#%11100111	;
   2428  fd3d		       24		      .byte.b	#%00100100	; 
   2429  fd3e		       24		      .byte.b	#%00100100	; 
   2430  fd3f		       24		      .byte.b	#%00100100	;
   2431  fd40		       e7		      .byte.b	#%11100111	;
   2432  fd41
   2433  fd41				   CD
   2434  fd41		       66		      .byte.b	#%01100110	;
   2435  fd42		       a5		      .byte.b	#%10100101	; 
   2436  fd43		       a5		      .byte.b	#%10100101	; 
   2437  fd44		       a5		      .byte.b	#%10100101	;
   2438  fd45		       66		      .byte.b	#%01100110	;
   2439  fd46
   2440  fd46				   CE
   2441  fd46		       e7		      .byte.b	#%11100111	;
   2442  fd47		       24		      .byte.b	#%00100100	; 
   2443  fd48		       e7		      .byte.b	#%11100111	; 
   2444  fd49		       24		      .byte.b	#%00100100	; 
   2445  fd4a		       e7		      .byte.b	#%11100111	;
   2446  fd4b
   2447  fd4b				   CF
   2448  fd4b		       24		      .byte.b	#%00100100	;
   2449  fd4c		       24		      .byte.b	#%00100100	; 
   2450  fd4d		       e7		      .byte.b	#%11100111	; 
   2451  fd4e		       24		      .byte.b	#%00100100	; 
   2452  fd4f		       e7		      .byte.b	#%11100111	;
   2453  fd50
   2454  fd50				   CG
   2455  fd50		       c3		      .byte.b	#%11000011	;
   2456  fd51		       a5		      .byte.b	#%10100101	; 
   2457  fd52		       a5		      .byte.b	#%10100101	; 
   2458  fd53		       24		      .byte.b	#%00100100	; 
   2459  fd54		       c3		      .byte.b	#%11000011	;	
   2460  fd55
   2461  fd55				   CH
   2462  fd55		       a5		      .byte.b	#%10100101	;
   2463  fd56		       a5		      .byte.b	#%10100101	; 
   2464  fd57		       e7		      .byte.b	#%11100111	; 
   2465  fd58		       a5		      .byte.b	#%10100101	; 
   2466  fd59		       a5		      .byte.b	#%10100101	;
   2467  fd5a
   2468  fd5a				   CI
   2469  fd5a		       e7		      .byte.b	#%11100111	;
   2470  fd5b		       42		      .byte.b	#%01000010	; 
   2471  fd5c		       42		      .byte.b	#%01000010	; 
   2472  fd5d		       42		      .byte.b	#%01000010	; 
   2473  fd5e		       e7		      .byte.b	#%11100111	;
   2474  fd5f
   2475  fd5f				   CJ
   2476  fd5f		       e7		      .byte.b	#%11100111	;
   2477  fd60		       a5		      .byte.b	#%10100101	; 
   2478  fd61		       81		      .byte.b	#%10000001	; 
   2479  fd62		       81		      .byte.b	#%10000001	; 
   2480  fd63		       81		      .byte.b	#%10000001	;	
   2481  fd64
   2482  fd64				   CK
   2483  fd64		       a5		      .byte.b	#%10100101	;
   2484  fd65		       a5		      .byte.b	#%10100101	; 
   2485  fd66		       66		      .byte.b	#%01100110	; 
   2486  fd67		       a5		      .byte.b	#%10100101	; 
   2487  fd68		       a5		      .byte.b	#%10100101	;
   2488  fd69
   2489  fd69				   CL
   2490  fd69		       e7		      .byte.b	#%11100111	;
   2491  fd6a		       24		      .byte.b	#%00100100	; 
   2492  fd6b		       24		      .byte.b	#%00100100	; 
   2493  fd6c		       24		      .byte.b	#%00100100	; 
   2494  fd6d		       24		      .byte.b	#%00100100	;
   2495  fd6e
   2496  fd6e				   CM
   2497  fd6e		       a5		      .byte.b	#%10100101	;
   2498  fd6f		       a5		      .byte.b	#%10100101	; 
   2499  fd70		       a5		      .byte.b	#%10100101	; 
   2500  fd71		       e7		      .byte.b	#%11100111	; 
   2501  fd72		       a5		      .byte.b	#%10100101	;
   2502  fd73
   2503  fd73				   CN
   2504  fd73		       a5		      .byte.b	#%10100101	;
   2505  fd74		       a5		      .byte.b	#%10100101	; 
   2506  fd75		       a5		      .byte.b	#%10100101	; 
   2507  fd76		       a5		      .byte.b	#%10100101	; 
   2508  fd77		       66		      .byte.b	#%01100110	;	
   2509  fd78
   2510  fd78
   2511  fd78				   CO
   2512  fd78		       42		      .byte.b	#%01000010	;
   2513  fd79		       a5		      .byte.b	#%10100101	; 
   2514  fd7a		       a5		      .byte.b	#%10100101	; 
   2515  fd7b		       a5		      .byte.b	#%10100101	; 
   2516  fd7c		       42		      .byte.b	#%01000010	;	
   2517  fd7d
   2518  fd7d				   CP
   2519  fd7d		       24		      .byte.b	#%00100100	;
   2520  fd7e		       24		      .byte.b	#%00100100	; 
   2521  fd7f		       e7		      .byte.b	#%11100111	; 
   2522  fd80		       a5		      .byte.b	#%10100101	; 
   2523  fd81		       e7		      .byte.b	#%11100111	;
   2524  fd82
   2525  fd82				   CQ
   2526  fd82		       81		      .byte.b	#%10000001	;
   2527  fd83		       e5		      .byte.b	#%11100101	; 
   2528  fd84		       a5		      .byte.b	#%10100101	; 
   2529  fd85		       a5		      .byte.b	#%10100101	; 
   2530  fd86		       e7		      .byte.b	#%11100111	;	
   2531  fd87
   2532  fd87				   CR
   2533  fd87		       a5		      .byte.b	#%10100101	;
   2534  fd88		       a5		      .byte.b	#%10100101	; 
   2535  fd89		       66		      .byte.b	#%01100110	; 
   2536  fd8a		       a5		      .byte.b	#%10100101	; 
   2537  fd8b		       66		      .byte.b	#%01100110	;
   2538  fd8c
   2539  fd8c				   CS
   2540  fd8c		       66		      .byte.b	#%01100110	;
   2541  fd8d		       81		      .byte.b	#%10000001	; 
   2542  fd8e		       42		      .byte.b	#%01000010	; 
   2543  fd8f		       24		      .byte.b	#%00100100	; 
   2544  fd90		       c3		      .byte.b	#%11000011	;
   2545  fd91
   2546  fd91				   CT
   2547  fd91		       42		      .byte.b	#%01000010	;
   2548  fd92		       42		      .byte.b	#%01000010	; 
   2549  fd93		       42		      .byte.b	#%01000010	; 
   2550  fd94		       42		      .byte.b	#%01000010	; 
   2551  fd95		       e7		      .byte.b	#%11100111	;
   2552  fd96
   2553  fd96				   CV
   2554  fd96		       42		      .byte.b	#%01000010	;
   2555  fd97		       a5		      .byte.b	#%10100101	; 
   2556  fd98		       a5		      .byte.b	#%10100101	; 
   2557  fd99		       a5		      .byte.b	#%10100101	; 
   2558  fd9a		       a5		      .byte.b	#%10100101	;	
   2559  fd9b
   2560  fd9b				   CW
   2561  fd9b		       a5		      .byte.b	#%10100101	;
   2562  fd9c		       e7		      .byte.b	#%11100111	; 
   2563  fd9d		       a5		      .byte.b	#%10100101	; 
   2564  fd9e		       a5		      .byte.b	#%10100101	; 
   2565  fd9f		       a5		      .byte.b	#%10100101	;
   2566  fda0
   2567  fda0				   CY
   2568  fda0		       42		      .byte.b	#%01000010	;
   2569  fda1		       42		      .byte.b	#%01000010	; 
   2570  fda2		       42		      .byte.b	#%01000010	; 
   2571  fda3		       a5		      .byte.b	#%10100101	; 
   2572  fda4		       a5		      .byte.b	#%10100101	;
   2573  fda5
   2574  fda5				   Exclamation
   2575  fda5		       42		      .byte.b	#%01000010	;
   2576  fda6		       00		      .byte.b	#%00000000	; 
   2577  fda7		       42		      .byte.b	#%01000010	; 
   2578  fda8		       42		      .byte.b	#%01000010	; 
   2579  fda9		       42		      .byte.b	#%01000010	;
   2580  fdaa
   2581  fdaa				   Pipe
   2582  fdaa				   Colon
   2583  fdaa		       42		      .byte.b	#%01000010	;
   2584  fdab		       42		      .byte.b	#%01000010	; 
   2585  fdac		       00		      .byte.b	#%00000000	; 
   2586  fdad		       42		      .byte.b	#%01000010	; 
   2587  fdae		       42		      .byte.b	#%01000010	;
   2588  fdaf
   2589  fdaf				   Space
   2590  fdaf				   C0B
   2591  fdaf		       00		      .byte.b	#%00000000	;
   2592  fdb0		       00		      .byte.b	#%00000000	; 
   2593  fdb1		       00		      .byte.b	#%00000000	; 
   2594  fdb2		       00		      .byte.b	#%00000000	; 
   2595  fdb3		       00		      .byte.b	#%00000000	;	
   2596  fdb4				   C1B
   2597  fdb4		       24		      .byte.b	#%00100100	;
   2598  fdb5		       00		      .byte.b	#%00000000	; 
   2599  fdb6		       00		      .byte.b	#%00000000	; 
   2600  fdb7		       00		      .byte.b	#%00000000	; 
   2601  fdb8		       00		      .byte.b	#%00000000	;
   2602  fdb9				   C2B
   2603  fdb9		       66		      .byte.b	#%01100110	;
   2604  fdba		       00		      .byte.b	#%00000000	; 
   2605  fdbb		       00		      .byte.b	#%00000000	; 
   2606  fdbc		       00		      .byte.b	#%00000000	; 
   2607  fdbd		       00		      .byte.b	#%00000000	;
   2608  fdbe				   C3B
   2609  fdbe		       e7		      .byte.b	#%11100111	;
   2610  fdbf		       00		      .byte.b	#%00000000	; 
   2611  fdc0		       00		      .byte.b	#%00000000	; 
   2612  fdc1		       00		      .byte.b	#%00000000	; 
   2613  fdc2		       00		      .byte.b	#%00000000	;
   2614  fdc3				   C4B
   2615  fdc3		       e7		      .byte.b	#%11100111	;
   2616  fdc4		       24		      .byte.b	#%00100100	; 
   2617  fdc5		       00		      .byte.b	#%00000000	; 
   2618  fdc6		       00		      .byte.b	#%00000000	; 
   2619  fdc7		       00		      .byte.b	#%00000000	;
   2620  fdc8				   C5B
   2621  fdc8		       e7		      .byte.b	#%11100111	;
   2622  fdc9		       66		      .byte.b	#%01100110	; 
   2623  fdca		       00		      .byte.b	#%00000000	; 
   2624  fdcb		       00		      .byte.b	#%00000000	; 
   2625  fdcc		       00		      .byte.b	#%00000000	;
   2626  fdcd				   C6B
   2627  fdcd		       e7		      .byte.b	#%11100111	;
   2628  fdce		       e7		      .byte.b	#%11100111	; 
   2629  fdcf		       00		      .byte.b	#%00000000	; 
   2630  fdd0		       00		      .byte.b	#%00000000	; 
   2631  fdd1		       00		      .byte.b	#%00000000	;
   2632  fdd2				   C7B
   2633  fdd2		       e7		      .byte.b	#%11100111	;
   2634  fdd3		       e7		      .byte.b	#%11100111	; 
   2635  fdd4		       24		      .byte.b	#%00100100	; 
   2636  fdd5		       00		      .byte.b	#%00000000	; 
   2637  fdd6		       00		      .byte.b	#%00000000	;
   2638  fdd7				   C8B
   2639  fdd7		       e7		      .byte.b	#%11100111	;
   2640  fdd8		       e7		      .byte.b	#%11100111	; 
   2641  fdd9		       66		      .byte.b	#%01100110	; 
   2642  fdda		       00		      .byte.b	#%00000000	; 
   2643  fddb		       00		      .byte.b	#%00000000	;
   2644  fddc				   C9B
   2645  fddc		       e7		      .byte.b	#%11100111	;
   2646  fddd		       e7		      .byte.b	#%11100111	; 
   2647  fdde		       e7		      .byte.b	#%11100111	; 
   2648  fddf		       00		      .byte.b	#%00000000	; 
   2649  fde0		       00		      .byte.b	#%00000000	;
   2650  fde1				   CAB
   2651  fde1		       e7		      .byte.b	#%11100111	;
   2652  fde2		       e7		      .byte.b	#%11100111	; 
   2653  fde3		       e7		      .byte.b	#%11100111	; 
   2654  fde4		       24		      .byte.b	#%00100100	; 
   2655  fde5		       00		      .byte.b	#%00000000	;
   2656  fde6				   CBB
   2657  fde6		       e7		      .byte.b	#%11100111	;
   2658  fde7		       e7		      .byte.b	#%11100111	; 
   2659  fde8		       e7		      .byte.b	#%11100111	; 
   2660  fde9		       66		      .byte.b	#%01100110	; 
   2661  fdea		       00		      .byte.b	#%00000000	;
   2662  fdeb				   CCB
   2663  fdeb		       e7		      .byte.b	#%11100111	;
   2664  fdec		       e7		      .byte.b	#%11100111	; 
   2665  fded		       e7		      .byte.b	#%11100111	; 
   2666  fdee		       e7		      .byte.b	#%11100111	; 
   2667  fdef		       00		      .byte.b	#%00000000	;
   2668  fdf0
   2669  fdf0				   CDB
   2670  fdf0		       e7		      .byte.b	#%11100111	;
   2671  fdf1		       e7		      .byte.b	#%11100111	; 
   2672  fdf2		       e7		      .byte.b	#%11100111	; 
   2673  fdf3		       e7		      .byte.b	#%11100111	; 
   2674  fdf4		       24		      .byte.b	#%00100100	;
   2675  fdf5
   2676  fdf5				   CEB
   2677  fdf5		       e7		      .byte.b	#%11100111	;
   2678  fdf6		       e7		      .byte.b	#%11100111	; 
   2679  fdf7		       e7		      .byte.b	#%11100111	; 
   2680  fdf8		       e7		      .byte.b	#%11100111	; 
   2681  fdf9		       66		      .byte.b	#%01100110	;
   2682  fdfa
   2683  fdfa				   CFB
   2684  fdfa		       e7		      .byte.b	#%11100111	;
   2685  fdfb		       e7		      .byte.b	#%11100111	; 
   2686  fdfc		       e7		      .byte.b	#%11100111	; 
   2687  fdfd		       e7		      .byte.b	#%11100111	; 
   2688  fdfe		       e7		      .byte.b	#%11100111	;
   2689  fdff
   2690  fe00					      org	$FE00
   2691  fe00				   AesTable
   2692  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2693  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2694  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2695  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2696  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2697  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2698  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2699  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2700  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2701  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2702  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2703  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2704  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2705  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2706  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2707  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2708  ff00
   2709  ff00					      org	$FF00
   2710  ff00				   StaticText		; All static text must be on the same MSB block. 
   2711  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2712  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2713  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2714  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2715  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2716  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2717  ff05
   2718  ff05				   HellwayLeftText
   2719  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2720  ff06		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2721  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2722  ff08		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2723  ff09		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2724  ff0a
   2725  ff0a				   HellwayRightText
   2726  ff0a		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2727  ff0b		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2728  ff0c		       81		      .byte.b	#<CP + #FONT_OFFSET
   2729  ff0d		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2730  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2731  ff0f
   2732  ff0f				   OpbText
   2733  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2734  ff10		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2735  ff11		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2736  ff12		       81		      .byte.b	#<CP + #FONT_OFFSET
   2737  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2738  ff14
   2739  ff14				   YearText
   2740  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2741  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2742  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2743  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2744  ff18		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2745  ff19
   2746  ff19				   GoText
   2747  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2748  ff1a		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2749  ff1b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2750  ff1c		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2751  ff1d		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2752  ff1e
   2753  ff1e				   ReadyText
   2754  ff1e		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2755  ff1f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2756  ff20		       36		      .byte.b	#<CA + #FONT_OFFSET
   2757  ff21		       45		      .byte.b	#<CD + #FONT_OFFSET
   2758  ff22		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2759  ff23
   2760  ff23				   EndStaticText
   2761  ff23
   2762  ff23				   TachometerSizeLookup1
   2763  ff23		       1f		      .byte.b	#%00011111
   2764  ff24		       3f		      .byte.b	#%00111111
   2765  ff25		       7f		      .byte.b	#%01111111
   2766  ff26		       ff		      .byte.b	#%11111111
   2767  ff27		       ff		      .byte.b	#%11111111
   2768  ff28		       ff		      .byte.b	#%11111111
   2769  ff29		       ff		      .byte.b	#%11111111
   2770  ff2a		       ff		      .byte.b	#%11111111
   2771  ff2b
   2772  ff2b				   TachometerSizeLookup2
   2773  ff2b		       00		      .byte.b	#%00000000
   2774  ff2c		       00		      .byte.b	#%00000000
   2775  ff2d		       00		      .byte.b	#%00000000
   2776  ff2e		       00		      .byte.b	#%00000000
   2777  ff2f		       80		      .byte.b	#%10000000
   2778  ff30		       c0		      .byte.b	#%11000000
   2779  ff31		       e0		      .byte.b	#%11100000
   2780  ff32		       f0		      .byte.b	#%11110000
   2781  ff33
   2782  ff33				   TachometerGearLookup
   2783  ff33		       01		      .byte.b	#%00000001
   2784  ff34		       02		      .byte.b	#%00000010
   2785  ff35		       04		      .byte.b	#%00000100
   2786  ff36		       08		      .byte.b	#%00001000
   2787  ff37		       10		      .byte.b	#%00010000
   2788  ff38		       30		      .byte.b	#%00110000
   2789  ff39
   2790  ff39				   EngineSoundType
   2791  ff39		       02		      .byte.b	#2
   2792  ff3a		       02		      .byte.b	#2
   2793  ff3b		       0e		      .byte.b	#14
   2794  ff3c		       06		      .byte.b	#6
   2795  ff3d		       06		      .byte.b	#6
   2796  ff3e		       0e		      .byte.b	#14
   2797  ff3f
   2798  ff3f				   EngineBaseFrequence
   2799  ff3f		       1f		      .byte.b	#31
   2800  ff40		       15		      .byte.b	#21
   2801  ff41		       14		      .byte.b	#20
   2802  ff42		       1f		      .byte.b	#31
   2803  ff43		       16		      .byte.b	#22
   2804  ff44		       03		      .byte.b	#3
   2805  ff45
   2806  ff45				   CarSprite0		; Upside down, Original Car
   2807  ff45		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2808  ff4d				   CarSprite0NoPadding
   2809  ff4d		       7e		      .byte.b	#%01111110
   2810  ff4e		       24		      .byte.b	#%00100100
   2811  ff4f		       bd		      .byte.b	#%10111101
   2812  ff50		       3c		      .byte.b	#%00111100
   2813  ff51		       bd		      .byte.b	#%10111101
   2814  ff52		       3c		      .byte.b	#%00111100
   2815  ff53
   2816  ff53				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2817  ff53		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2818  ff5b				   CarSprite1NoPadding
   2819  ff5b		       bd		      .byte.b	#%10111101
   2820  ff5c		       7e		      .byte.b	#%01111110
   2821  ff5d		       5a		      .byte.b	#%01011010
   2822  ff5e		       66		      .byte.b	#%01100110
   2823  ff5f		       bd		      .byte.b	#%10111101
   2824  ff60		       3c		      .byte.b	#%00111100
   2825  ff61
   2826  ff61				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2827  ff61		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2828  ff69				   CarSprite2NoPadding
   2829  ff69		       7e		      .byte.b	#%01111110
   2830  ff6a		       a5		      .byte.b	#%10100101
   2831  ff6b		       42		      .byte.b	#%01000010
   2832  ff6c		       42		      .byte.b	#%01000010
   2833  ff6d		       bd		      .byte.b	#%10111101
   2834  ff6e		       7e		      .byte.b	#%01111110
   2835  ff6f
   2836  ff6f				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2837  ff6f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2838  ff77				   CarSprite3NoPadding
   2839  ff77		       3c		      .byte.b	#%00111100
   2840  ff78		       db		      .byte.b	#%11011011
   2841  ff79		       db		      .byte.b	#%11011011
   2842  ff7a		       3c		      .byte.b	#%00111100
   2843  ff7b		       5a		      .byte.b	#%01011010
   2844  ff7c		       3c		      .byte.b	#%00111100
   2845  ff7d
   2846  ff7d				   TrafficSpeeds
   2847  ff7d		       00		      .byte.b	#$00	;  Trafic0 L
   2848  ff7e		       00		      .byte.b	#$00	;  Trafic0 H
   2849  ff7f		       0a		      .byte.b	#$0A	;  Trafic1 L
   2850  ff80		       01		      .byte.b	#$01	;  Trafic1 H
   2851  ff81		       e6		      .byte.b	#$E6	;  Trafic2 L
   2852  ff82		       00		      .byte.b	#$00	;  Trafic2 H
   2853  ff83		       c2		      .byte.b	#$C2	;  Trafic3 L
   2854  ff84		       00		      .byte.b	#$00	;  Trafic3 H
   2855  ff85		       9e		      .byte.b	#$9E	;  Trafic4 L
   2856  ff86		       00		      .byte.b	#$00	;  Trafic4 H
   2857  ff87				   TrafficSpeedsHighDelta
   2858  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2859  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2860  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2861  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2862  ff8b		       c8		      .byte.b	#$C8	;  Trafic2 L
   2863  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2864  ff8d		       86		      .byte.b	#$86	;  Trafic3 L
   2865  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2866  ff8f		       44		      .byte.b	#$44	;  Trafic4 L
   2867  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2868  ff91
   2869  ff91				   CarIdToSpriteAddressL
   2870  ff91		       45		      .byte.b	#<CarSprite0
   2871  ff92		       53		      .byte.b	#<CarSprite1
   2872  ff93		       61		      .byte.b	#<CarSprite2
   2873  ff94		       6f		      .byte.b	#<CarSprite3
   2874  ff95
   2875  ff95				   CarIdToSpriteAddressH
   2876  ff95		       ff		      .byte.b	#>CarSprite0
   2877  ff96		       ff		      .byte.b	#>CarSprite1
   2878  ff97		       ff		      .byte.b	#>CarSprite2
   2879  ff98		       ff		      .byte.b	#>CarSprite3
   2880  ff99
   2881  ff99				   EnemyCarIdToSpriteAddressL
   2882  ff99		       4d		      .byte.b	#<CarSprite0NoPadding
   2883  ff9a		       5b		      .byte.b	#<CarSprite1NoPadding
   2884  ff9b		       69		      .byte.b	#<CarSprite2NoPadding
   2885  ff9c		       77		      .byte.b	#<CarSprite3NoPadding
   2886  ff9d
   2887  ff9d				   EnemyCarIdToSpriteAddressH
   2888  ff9d		       ff		      .byte.b	#>CarSprite0NoPadding
   2889  ff9e		       ff		      .byte.b	#>CarSprite1NoPadding
   2890  ff9f		       ff		      .byte.b	#>CarSprite2NoPadding
   2891  ffa0		       ff		      .byte.b	#>CarSprite3NoPadding
   2892  ffa1
   2893  ffa1				   CarIdToAccelerateSpeed
   2894  ffa1		       80		      .byte.b	#128
   2895  ffa2		       c0		      .byte.b	#192
   2896  ffa3		       60		      .byte.b	#96
   2897  ffa4		       c0		      .byte.b	#192
   2898  ffa5
   2899  ffa5				   CarIdToTimeoverBreakInterval 		; Glide
   2900  ffa5		       03		      .byte.b	#%00000011	;Every 4 frames
   2901  ffa6		       03		      .byte.b	#%00000011	;Every 4 frames
   2902  ffa7		       0f		      .byte.b	#%00001111	;Every 16 frames
   2903  ffa8		       03		      .byte.b	#%00000011	;Every 4 frames
   2904  ffa9
   2905  ffa9				   CarIdToMaxSpeedL
   2906  ffa9		       80		      .byte.b	#$80
   2907  ffaa		       00		      .byte.b	#$00	; One less gear
   2908  ffab		       80		      .byte.b	#$80
   2909  ffac		       80		      .byte.b	#$80
   2910  ffad
   2911  ffad				   CarIdToMaxGear
   2912  ffad		       05		      .byte.b	#5
   2913  ffae		       04		      .byte.b	#4	; One less gear
   2914  ffaf		       05		      .byte.b	#5
   2915  ffb0		       05		      .byte.b	#5
   2916  ffb1
   2917  ffb1				   GearToBreakSpeedTable
   2918  ffb1		       09		      .byte.b	#(BREAK_SPEED - 1)
   2919  ffb2		       09		      .byte.b	#(BREAK_SPEED - 1)
   2920  ffb3		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2921  ffb4		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2922  ffb5		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2923  ffb6		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2924  ffb7
   2925  ffb7				   TrafficColorTable
   2926  ffb7		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2927  ffb8		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2928  ffb9		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2929  ffba		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2930  ffbb
   2931  ffbb				   TrafficChanceTable
   2932  ffbb		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2933  ffbc		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2934  ffbd		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2935  ffbe		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2936  ffbf
   2937  ffbf				   TrafficTimeTable
   2938  ffbf		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2939  ffc0		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2940  ffc1		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2941  ffc2		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2942  ffc3		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2943  ffc4
   2944  ffc4
   2945  fffc					      org	$FFFC
   2946  fffc		       00 f0		      .word.w	BeforeStart
   2947  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
