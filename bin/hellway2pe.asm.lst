------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2c	   PLAYER_0_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 8c	   FrameCount0 =	$8C	;
    111  f000		       00 8d	   FrameCount1 =	$8D	;
    112  f000
    113  f000		       00 8e	   Player0SpeedL =	$8E
    114  f000		       00 8f	   Player0SpeedH =	$8F
    115  f000
    116  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    117  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    118  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    119  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    120  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    121  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    122  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    123  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    124  f000
    125  f000
    126  f000							;Temporary variables, multiple uses
    127  f000		       00 b0	   Tmp0       =	$B0
    128  f000		       00 b1	   Tmp1       =	$B1
    129  f000		       00 b2	   Tmp2       =	$B2
    130  f000		       00 b3	   Tmp3       =	$B3
    131  f000
    132  f000
    133  f000		       00 b8	   CollisionCounter =	$B8
    134  f000		       00 b9	   Player0X   =	$B9
    135  f000		       00 ba	   CountdownTimer =	$BA
    136  f000		       00 bb	   Traffic0Msb =	$BB
    137  f000		       00 bc	   SwitchDebounceCounter =	$BC
    138  f000
    139  f000		       00 bd	   TimeBcd0   =	$BD
    140  f000		       00 be	   TimeBcd1   =	$BE
    141  f000		       00 bf	   TimeBcd2   =	$BF
    142  f000
    143  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    144  f000		       00 c1	   TrafficChance =	$C1
    145  f000		       00 c2	   CheckpointTime =	$C2
    146  f000		       00 c3	   TrafficColor =	$C3
    147  f000		       00 c4	   CurrentDifficulty =	$C4
    148  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    149  f000							;Bit 2 speed delta, Bit 3 random traffic 
    150  f000
    151  f000
    152  f000
    153  f000		       00 d0	   ScoreD0    =	$D0
    154  f000		       00 d1	   ScoreD1    =	$D1
    155  f000		       00 d2	   ScoreD2    =	$D2
    156  f000		       00 d3	   ScoreD3    =	$D3
    157  f000		       00 d4	   ScoreD4    =	$D4
    158  f000		       00 d5	   ScoreFontColor =	$D5
    159  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    160  f000		       00 d7	   NextCheckpoint =	$D7
    161  f000
    162  f000		       00 d8	   OpponentLine =	$D8
    163  f000
    164  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    165  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    166  f000
    167  f000		       00 dd	   StartSWCHB =	$DD	; Used for Score, so it cannot be cheated.
    168  f000		       00 de	   CarSpritePointerL =	$DE
    169  f000		       00 df	   CarSpritePointerH =	$DF
    170  f000		       00 f0	   CurrentCarId =	$F0
    171  f000		       00 f1	   AccelerateBuffer =	$F1	; Change speed on buffer overflow.
    172  f000		       00 f2	   TextSide   =	$F2
    173  f000		       00 f3	   TextFlickerMode =	$F3
    174  f000		       00 f4	   Gear       =	$F4
    175  f000		       00 f5	   CurrentOpponentCarId =	$F5
    176  f000
    177  f000
    178  f000							;generic start up stuff, put zero in almost all...
    179  f000				   BeforeStart		;All variables that are kept on game reset or select
    180  f000		       a0 00		      LDY	#0
    181  f002		       84 bc		      STY	SwitchDebounceCounter
    182  f004		       84 c4		      STY	CurrentDifficulty
    183  f006		       84 c0		      STY	GameStatus
    184  f008		       84 f0		      STY	CurrentCarId
    185  f00a		       84 f5		      STY	CurrentOpponentCarId
    186  f00c		       a0 10		      LDY	#16
    187  f00e		       84 c5		      STY	GameMode
    188  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    189  f012
    190  f012				   Start
    191  f012		       a9 02		      LDA	#2
    192  f014		       85 00		      STA	VSYNC
    193  f016		       85 02		      STA	WSYNC
    194  f018		       85 02		      STA	WSYNC
    195  f01a		       85 02		      STA	WSYNC
    196  f01c		       a9 00		      LDA	#0	;2
    197  f01e		       85 00		      STA	VSYNC	;3
    198  f020
    199  f020		       78		      SEI
    200  f021		       d8		      CLD
    201  f022		       a2 ff		      LDX	#$FF
    202  f024		       9a		      TXS
    203  f025
    204  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    205  f027				   CleanMem
    206  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    207  f029		       f0 16		      BEQ	SkipClean
    208  f02b		       e0 c5		      CPX	#GameMode
    209  f02d		       f0 12		      BEQ	SkipClean
    210  f02f		       e0 f0		      CPX	#CurrentCarId
    211  f031		       f0 0e		      BEQ	SkipClean
    212  f033		       e0 f5		      CPX	#CurrentOpponentCarId
    213  f035		       f0 0a		      BEQ	SkipClean
    214  f037		       e0 c4		      CPX	#CurrentDifficulty
    215  f039		       f0 06		      BEQ	SkipClean
    216  f03b		       e0 c0		      CPX	#GameStatus
    217  f03d		       f0 02		      BEQ	SkipClean
    218  f03f		       95 00		      STA	0,X
    219  f041				   SkipClean
    220  f041		       e8		      INX
    221  f042		       d0 e3		      BNE	CleanMem
    222  f044
    223  f044		       a9 d5		      LDA	#213
    224  f046		       8d 96 02 	      STA	TIM64T	;3	
    225  f049
    226  f049							;Setting some variables...
    227  f049
    228  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    229  f049		       85 02		      STA	WSYNC	;We will set player position
    230  f04b		       20 45 f8 	      JSR	DefaultOffsets
    231  f04e
    232  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    233  f051		       85 8e		      STA	Player0SpeedL
    234  f053
    235  f053							;SLEEP 11;18
    236  f053		       a2 00		      LDX	#0
    237  f055		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    238  f058		       85 dd		      STA	StartSWCHB	; For game over
    239  f05a		       29 c0		      AND	#%11000000
    240  f05c		       f0 0b		      BEQ	CallConfigureDifficulty
    241  f05e		       e8		      INX
    242  f05f		       c9 80		      CMP	#%10000000
    243  f061		       f0 06		      BEQ	CallConfigureDifficulty
    244  f063		       e8		      INX
    245  f064		       c9 40		      CMP	#%01000000
    246  f066		       f0 01		      BEQ	CallConfigureDifficulty
    247  f068		       e8		      INX
    248  f069
    249  f069				   CallConfigureDifficulty
    250  f069		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    251  f06b		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    252  f06d		       a5 c0		      LDA	GameStatus
    253  f06f		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    254  f071				   StoreCurrentDifficulty
    255  f071		       86 c4		      STX	CurrentDifficulty
    256  f073		       20 1a f8 	      JSR	ConfigureDifficulty
    257  f076
    258  f076				   SetGameNotRunning
    259  f076		       a9 00		      LDA	#0
    260  f078		       85 c0		      STA	GameStatus
    261  f07a
    262  f07a				   ConfigureTimer
    263  f07a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    264  f07c		       85 ba		      STA	CountdownTimer	;3
    265  f07e
    266  f07e
    267  f07e				   HPositioning 		; Avoid sleep doing needed stuff
    268  f07e		       85 02		      STA	WSYNC
    269  f080
    270  f080				   ConfigurePlayerXPosition
    271  f080		       a9 21		      LDA	#PLAYER_0_X_START	;2
    272  f082		       85 b9		      STA	Player0X	;3
    273  f084
    274  f084				   ConfigureMissileSize
    275  f084		       a9 30		      LDA	#%00110000	;2 Missile Size
    276  f086		       85 04		      STA	NUSIZ0	;3
    277  f088		       85 05		      STA	NUSIZ1	;3
    278  f08a
    279  f08a				   ConfigureNextCheckpoint
    280  f08a		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    281  f08c		       85 d7		      STA	NextCheckpoint
    282  f08e
    283  f08e		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f090					      SLEEP	4	;
      1  f090				   .CYCLES    SET	4
      2  f090
      3  f090				  -	      IF	.CYCLES < 2
      4  f090				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f090				  -	      ERR
      6  f090					      ENDIF
      7  f090
      8  f090				  -	      IF	.CYCLES & 1
      9  f090				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f090				  -	      nop	0
     11  f090				  -	      ELSE
     12  f090				  -	      bit	VSYNC
     13  f090				  -	      ENDIF
     14  f090				  -.CYCLES    SET	.CYCLES - 3
     15  f090					      ENDIF
     16  f090
     17  f090					      REPEAT	.CYCLES / 2
     18  f090		       ea		      nop
     17  f090					      REPEND
     18  f091		       ea		      nop
     19  f092					      REPEND
    285  f092		       85 12		      STA	RESM0
      0  f094					      SLEEP	2	;
      1  f094				   .CYCLES    SET	2
      2  f094
      3  f094				  -	      IF	.CYCLES < 2
      4  f094				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f094				  -	      ERR
      6  f094					      ENDIF
      7  f094
      8  f094				  -	      IF	.CYCLES & 1
      9  f094				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f094				  -	      nop	0
     11  f094				  -	      ELSE
     12  f094				  -	      bit	VSYNC
     13  f094				  -	      ENDIF
     14  f094				  -.CYCLES    SET	.CYCLES - 3
     15  f094					      ENDIF
     16  f094
     17  f094					      REPEAT	.CYCLES / 2
     18  f094		       ea		      nop
     19  f095					      REPEND
    287  f095		       85 14		      STA	RESBL
      0  f097					      SLEEP	2
      1  f097				   .CYCLES    SET	2
      2  f097
      3  f097				  -	      IF	.CYCLES < 2
      4  f097				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f097				  -	      ERR
      6  f097					      ENDIF
      7  f097
      8  f097				  -	      IF	.CYCLES & 1
      9  f097				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f097				  -	      nop	0
     11  f097				  -	      ELSE
     12  f097				  -	      bit	VSYNC
     13  f097				  -	      ENDIF
     14  f097				  -.CYCLES    SET	.CYCLES - 3
     15  f097					      ENDIF
     16  f097
     17  f097					      REPEAT	.CYCLES / 2
     18  f097		       ea		      nop
     19  f098					      REPEND
    289  f098		       85 13		      STA	RESM1
      0  f09a					      SLEEP	3
      1  f09a				   .CYCLES    SET	3
      2  f09a
      3  f09a				  -	      IF	.CYCLES < 2
      4  f09a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09a				  -	      ERR
      6  f09a					      ENDIF
      7  f09a
      8  f09a					      IF	.CYCLES & 1
      9  f09a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09a				  -	      nop	0
     11  f09a					      ELSE
     12  f09a		       24 00		      bit	VSYNC
     13  f09c					      ENDIF
     14  f09c				   .CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c				  -	      REPEAT	.CYCLES / 2
     18  f09c				  -	      nop
     19  f09c					      REPEND
    291  f09c
    292  f09c		       a9 e0		      LDA	#$E0
    293  f09e		       85 24		      STA	HMBL
    294  f0a0		       85 22		      STA	HMM0
    295  f0a2		       85 23		      STA	HMM1
    296  f0a4		       85 02		      STA	WSYNC
    297  f0a6		       85 2a		      STA	HMOVE
    298  f0a8		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    299  f0aa		       85 2b		      STA	HMCLR
      0  f0ac					      SLEEP	30
      1  f0ac				   .CYCLES    SET	30
      2  f0ac
      3  f0ac				  -	      IF	.CYCLES < 2
      4  f0ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ac				  -	      ERR
      6  f0ac					      ENDIF
      7  f0ac
      8  f0ac				  -	      IF	.CYCLES & 1
      9  f0ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ac				  -	      nop	0
     11  f0ac				  -	      ELSE
     12  f0ac				  -	      bit	VSYNC
     13  f0ac				  -	      ENDIF
     14  f0ac				  -.CYCLES    SET	.CYCLES - 3
     15  f0ac					      ENDIF
     16  f0ac
     17  f0ac					      REPEAT	.CYCLES / 2
     18  f0ac		       ea		      nop
     17  f0ac					      REPEND
     18  f0ad		       ea		      nop
     17  f0ad					      REPEND
     18  f0ae		       ea		      nop
     17  f0ae					      REPEND
     18  f0af		       ea		      nop
     17  f0af					      REPEND
     18  f0b0		       ea		      nop
     17  f0b0					      REPEND
     18  f0b1		       ea		      nop
     17  f0b1					      REPEND
     18  f0b2		       ea		      nop
     17  f0b2					      REPEND
     18  f0b3		       ea		      nop
     17  f0b3					      REPEND
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     19  f0bb					      REPEND
    301  f0bb		       85 10		      STA	RESP0
      0  f0bd					      SLEEP	5	; Temporarily move player 1 away.
      1  f0bd				   .CYCLES    SET	5
      2  f0bd
      3  f0bd				  -	      IF	.CYCLES < 2
      4  f0bd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bd				  -	      ERR
      6  f0bd					      ENDIF
      7  f0bd
      8  f0bd					      IF	.CYCLES & 1
      9  f0bd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bd				  -	      nop	0
     11  f0bd					      ELSE
     12  f0bd		       24 00		      bit	VSYNC
     13  f0bf					      ENDIF
     14  f0bf				   .CYCLES    SET	.CYCLES - 3
     15  f0bf					      ENDIF
     16  f0bf
     17  f0bf					      REPEAT	.CYCLES / 2
     18  f0bf		       ea		      nop
     19  f0c0					      REPEND
    303  f0c0		       85 11		      STA	RESP1
    304  f0c2
    305  f0c2				   WaitResetToEnd
    306  f0c2		       ad 84 02 	      LDA	INTIM
    307  f0c5		       d0 fb		      BNE	WaitResetToEnd
    308  f0c7
    309  f0c7				   MainLoop
    310  f0c7		       a9 02		      LDA	#2
    311  f0c9		       85 00		      STA	VSYNC
    312  f0cb		       85 02		      STA	WSYNC
    313  f0cd		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    314  f0cf				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    315  f0cf		       a9 01		      LDA	#%00000001	;3
    316  f0d1		       24 f3		      BIT	TextFlickerMode	;2
    317  f0d3		       f0 05		      BEQ	TextSideFrameZero	;2
    318  f0d5		       25 8d		      AND	FrameCount1	;2
    319  f0d7		       4c dc f0 	      JMP	StoreTextSize	;3
    320  f0da				   TextSideFrameZero
    321  f0da		       25 8c		      AND	FrameCount0	;2
    322  f0dc				   StoreTextSize
    323  f0dc		       85 f2		      STA	TextSide	;3
    324  f0de
    325  f0de				   PrepareMaxHMove
      0  f0de					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0de				   .CYCLES    SET	18
      2  f0de
      3  f0de				  -	      IF	.CYCLES < 2
      4  f0de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0de				  -	      ERR
      6  f0de					      ENDIF
      7  f0de
      8  f0de				  -	      IF	.CYCLES & 1
      9  f0de				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0de				  -	      nop	0
     11  f0de				  -	      ELSE
     12  f0de				  -	      bit	VSYNC
     13  f0de				  -	      ENDIF
     14  f0de				  -.CYCLES    SET	.CYCLES - 3
     15  f0de					      ENDIF
     16  f0de
     17  f0de					      REPEAT	.CYCLES / 2
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     17  f0e1					      REPEND
     18  f0e2		       ea		      nop
     17  f0e2					      REPEND
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     19  f0e7					      REPEND
    327  f0e7		       a9 80		      LDA	#$80
    328  f0e9		       85 24		      STA	HMBL
    329  f0eb		       85 22		      STA	HMM0
    330  f0ed		       85 23		      STA	HMM1
    331  f0ef		       85 20		      STA	HMP0
    332  f0f1		       85 21		      STA	HMP1
    333  f0f3		       85 02		      STA	WSYNC
    334  f0f5		       85 2a		      STA	HMOVE	; 1/10			
    335  f0f7
    336  f0f7				   ConfigVBlankTimer
    337  f0f7		       a5 c5		      LDA	GameMode
    338  f0f9		       c9 10		      CMP	#MAX_GAME_MODE
    339  f0fb		       f0 05		      BEQ	SetVblankTimerQrCode
    340  f0fd		       a9 29		      LDA	#VBLANK_TIMER
    341  f0ff		       4c 04 f1 	      JMP	SetVblankTimer
    342  f102				   SetVblankTimerQrCode
    343  f102		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    344  f104
    345  f104				   SetVblankTimer
    346  f104		       85 02		      STA	WSYNC	;3
    347  f106		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    348  f108		       8d 96 02 	      STA	TIM64T	;3	
    349  f10b		       a9 00		      LDA	#0	;2
    350  f10d		       85 00		      STA	VSYNC	;3	
    351  f10f
    352  f10f				   RandomizeGame
    353  f10f		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    354  f111		       d0 2d		      BNE	EndRandomizeGame
    355  f113		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    356  f115		       29 02		      AND	#%00000010
    357  f117		       f0 24		      BEQ	DeterministicGame
    358  f119		       a6 96		      LDX	TrafficOffset1 + 2
    359  f11b		       bd 00 fe 	      LDA	AesTable,X
    360  f11e		       45 8c		      EOR	FrameCount0
    361  f120		       85 96		      STA	TrafficOffset1 + 2
    362  f122		       85 a6		      STA	OpTrafficOffset1 + 2
    363  f124		       a6 9a		      LDX	TrafficOffset2 + 2
    364  f126		       bd 00 fe 	      LDA	AesTable,X
    365  f129		       45 8c		      EOR	FrameCount0
    366  f12b		       85 9a		      STA	TrafficOffset2 + 2
    367  f12d		       85 aa		      STA	OpTrafficOffset2 + 2
    368  f12f		       a6 9e		      LDX	TrafficOffset3 + 2
    369  f131		       bd 00 fe 	      LDA	AesTable,X
    370  f134		       45 8c		      EOR	FrameCount0
    371  f136		       85 9e		      STA	TrafficOffset3 + 2
    372  f138		       85 ae		      STA	OpTrafficOffset3 + 2
    373  f13a		       4c 40 f1 	      JMP	EndRandomizeGame
    374  f13d
    375  f13d				   DeterministicGame
    376  f13d		       20 45 f8 	      JSR	DefaultOffsets
    377  f140
    378  f140				   EndRandomizeGame
    379  f140
    380  f140
    381  f140							; Move this in the code and save cycles, for some reason spliting is breaking...
    382  f140		       a2 08		      LDX	#8
    383  f142				   BurnAllHMove
    384  f142		       85 02		      STA	WSYNC	;3
    385  f144		       85 2a		      STA	HMOVE	; 3/10 
    386  f146		       ca		      DEX
    387  f147		       d0 f9		      BNE	BurnAllHMove
    388  f149		       85 02		      STA	WSYNC	;3
    389  f14b		       85 2b		      STA	HMCLR	; 
    390  f14d
    391  f14d				   CountFrame
    392  f14d		       e6 8c		      INC	FrameCount0	; 5
    393  f14f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    394  f151		       e6 8d		      INC	FrameCount1	; 5 
    395  f153				   SkipIncFC1
    396  f153
    397  f153				   CallDrawQrCode
    398  f153		       a5 c5		      LDA	GameMode
    399  f155		       c9 10		      CMP	#MAX_GAME_MODE
    400  f157		       d0 03		      BNE	TestIsGameRunning
    401  f159		       4c 64 fc 	      JMP	DrawQrCode
    402  f15c
    403  f15c							;Does not update the game if not running
    404  f15c				   TestIsGameRunning
    405  f15c		       a5 c0		      LDA	GameStatus	;3
    406  f15e		       d0 5e		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    407  f160				   SelectCarWithDpad		; Only do it when game is stoped
    408  f160		       ad 80 02 	      LDA	SWCHA
    409  f163		       29 10		      AND	#%00010000
    410  f165		       d0 04		      BNE	ReadDpadDown
    411  f167		       a9 00		      LDA	#0
    412  f169		       85 f0		      STA	CurrentCarId
    413  f16b				   ReadDpadDown
    414  f16b		       ad 80 02 	      LDA	SWCHA
    415  f16e		       29 20		      AND	#%00100000
    416  f170		       d0 04		      BNE	ReadDpadLeft
    417  f172		       a9 01		      LDA	#1
    418  f174		       85 f0		      STA	CurrentCarId
    419  f176				   ReadDpadLeft
    420  f176		       ad 80 02 	      LDA	SWCHA
    421  f179		       29 40		      AND	#%01000000
    422  f17b		       d0 04		      BNE	ReadDpadRight
    423  f17d		       a9 02		      LDA	#2
    424  f17f		       85 f0		      STA	CurrentCarId
    425  f181				   ReadDpadRight
    426  f181		       ad 80 02 	      LDA	SWCHA
    427  f184		       29 80		      AND	#%10000000
    428  f186		       d0 04		      BNE	SelectOpponentCarWithDpad
    429  f188		       a9 03		      LDA	#3
    430  f18a		       85 f0		      STA	CurrentCarId
    431  f18c				   SelectOpponentCarWithDpad		; Only do it when game is stoped
    432  f18c		       ad 80 02 	      LDA	SWCHA
    433  f18f		       29 01		      AND	#%00000001
    434  f191		       d0 04		      BNE	ReadOpponentDpadDown
    435  f193		       a9 00		      LDA	#0
    436  f195		       85 f5		      STA	CurrentOpponentCarId
    437  f197				   ReadOpponentDpadDown
    438  f197		       ad 80 02 	      LDA	SWCHA
    439  f19a		       29 02		      AND	#%00000010
    440  f19c		       d0 04		      BNE	ReadOpponentDpadLeft
    441  f19e		       a9 01		      LDA	#1
    442  f1a0		       85 f5		      STA	CurrentOpponentCarId
    443  f1a2				   ReadOpponentDpadLeft
    444  f1a2		       ad 80 02 	      LDA	SWCHA
    445  f1a5		       29 04		      AND	#%00000100
    446  f1a7		       d0 04		      BNE	ReadOpponentDpadRight
    447  f1a9		       a9 02		      LDA	#2
    448  f1ab		       85 f5		      STA	CurrentOpponentCarId
    449  f1ad				   ReadOpponentDpadRight
    450  f1ad		       ad 80 02 	      LDA	SWCHA
    451  f1b0		       29 08		      AND	#%00001000
    452  f1b2		       d0 04		      BNE	CallConfigureCarSprites
    453  f1b4		       a9 03		      LDA	#3
    454  f1b6		       85 f5		      STA	CurrentOpponentCarId
    455  f1b8
    456  f1b8				   CallConfigureCarSprites
    457  f1b8		       20 9f fa 	      JSR	ConfigureCarSprites
    458  f1bb				   SkipUpdateLogicJump
    459  f1bb		       4c 49 f3 	      JMP	SkipUpdateLogic
    460  f1be				   ContinueWithGameLogic
    461  f1be
    462  f1be				   EverySecond		; 64 frames to be more precise
    463  f1be		       a9 3f		      LDA	#%00111111
    464  f1c0		       25 8c		      AND	FrameCount0
    465  f1c2		       d0 06		      BNE	SkipEverySecondAction
    466  f1c4		       c5 ba		      CMP	CountdownTimer
    467  f1c6		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    468  f1c8		       c6 ba		      DEC	CountdownTimer
    469  f1ca				   SkipEverySecondAction
    470  f1ca
    471  f1ca				   ChangeTextFlickerMode
    472  f1ca		       a5 bc		      LDA	SwitchDebounceCounter
    473  f1cc		       d0 0d		      BNE	EndChangeTextFlickerMode
    474  f1ce		       ad 82 02 	      LDA	SWCHB
    475  f1d1		       29 02		      AND	#%00000010	;Game select
    476  f1d3		       d0 06		      BNE	EndChangeTextFlickerMode
    477  f1d5		       e6 f3		      INC	TextFlickerMode
    478  f1d7		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    479  f1d9		       85 bc		      STA	SwitchDebounceCounter
    480  f1db				   EndChangeTextFlickerMode
    481  f1db
    482  f1db				   BreakOnTimeOver		; Uses LDX as the breaking speed
    483  f1db		       a2 00		      LDX	#0
    484  f1dd		       a5 ba		      LDA	CountdownTimer
    485  f1df		       d0 0b		      BNE	Break
    486  f1e1		       a4 f0		      LDY	CurrentCarId
    487  f1e3		       a5 8c		      LDA	FrameCount0
    488  f1e5		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    489  f1e8		       d0 02		      BNE	Break
    490  f1ea		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    491  f1ec
    492  f1ec				   Break
    493  f1ec		       a9 20		      LDA	#%00100000	;Down in controller
    494  f1ee		       2c 80 02 	      BIT	SWCHA
    495  f1f1		       d0 0e		      BNE	BreakNonZero
    496  f1f3		       a5 0c		      LDA	INPT4	;3
    497  f1f5		       10 08		      BPL	BreakWhileAccelerating
    498  f1f7		       a4 f4		      LDY	Gear
    499  f1f9		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    500  f1fc		       4c 01 f2 	      JMP	BreakNonZero
    501  f1ff				   BreakWhileAccelerating		; Allow better control while breaking.
    502  f1ff		       a2 05		      LDX	(#BREAK_SPEED / 2)
    503  f201
    504  f201				   BreakNonZero
    505  f201		       e0 00		      CPX	#0
    506  f203		       f0 2b		      BEQ	SkipBreak
    507  f205		       86 b0		      STX	Tmp0
    508  f207
    509  f207				   DecreaseSpeed
    510  f207		       38		      SEC
    511  f208		       a5 8e		      LDA	Player0SpeedL
    512  f20a		       e5 b0		      SBC	Tmp0
    513  f20c		       85 8e		      STA	Player0SpeedL
    514  f20e		       a5 8f		      LDA	Player0SpeedH
    515  f210		       e9 00		      SBC	#0
    516  f212		       85 8f		      STA	Player0SpeedH
    517  f214
    518  f214				   CheckMinSpeed
    519  f214		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    520  f216		       c9 00		      CMP	#CAR_MIN_SPEED_H
    521  f218		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    522  f21a		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    523  f21c
    524  f21c				   CompareLBreakSpeed
    525  f21c		       a5 8e		      LDA	Player0SpeedL
    526  f21e		       c9 00		      CMP	#CAR_MIN_SPEED_L
    527  f220		       90 03		      BCC	ResetMinSpeed	; Less than memory
    528  f222		       4c 2d f2 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    529  f225
    530  f225				   ResetMinSpeed
    531  f225		       a9 00		      LDA	#CAR_MIN_SPEED_H
    532  f227		       85 8f		      STA	Player0SpeedH
    533  f229		       a9 00		      LDA	#CAR_MIN_SPEED_L
    534  f22b		       85 8e		      STA	Player0SpeedL
    535  f22d
    536  f22d				   SkipAccelerateIfBreaking
    537  f22d		       4c 72 f2 	      JMP	SkipAccelerate
    538  f230				   SkipBreak
    539  f230
    540  f230				   Acelerates
    541  f230		       a5 ba		      LDA	CountdownTimer
    542  f232		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    543  f234
    544  f234				   ContinueAccelerateTest
    545  f234		       a5 0c		      LDA	INPT4	;3
    546  f236		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    547  f238		       a9 10		      LDA	#%00010000	;UP in controller
    548  f23a		       2c 80 02 	      BIT	SWCHA
    549  f23d		       d0 33		      BNE	SkipAccelerate
    550  f23f
    551  f23f				   IncreaseCarSpeed
    552  f23f		       a2 02		      LDX	#2
    553  f241		       a4 f0		      LDY	CurrentCarId
    554  f243				   IncreaseCarSpeedLoop
    555  f243							;Adds speed
    556  f243		       18		      CLC
    557  f244		       a5 f1		      LDA	AccelerateBuffer
    558  f246		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    559  f249		       85 f1		      STA	AccelerateBuffer
    560  f24b		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    561  f24d		       e6 8e		      INC	Player0SpeedL
    562  f24f		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    563  f251		       e6 8f		      INC	Player0SpeedH
    564  f253				   ContinueIncreaseSpeedLoop
    565  f253		       ca		      DEX
    566  f254		       d0 ed		      BNE	IncreaseCarSpeedLoop
    567  f256				   SkipIncreaseCarSpeed
    568  f256
    569  f256				   CheckIfAlreadyMaxSpeed
    570  f256		       a5 8f		      LDA	Player0SpeedH
    571  f258		       c9 02		      CMP	#CAR_MAX_SPEED_H
    572  f25a		       90 16		      BCC	SkipAccelerate	; less than my max speed
    573  f25c		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    574  f25e							;High bit is max, compare the low
    575  f25e		       a4 f0		      LDY	CurrentCarId
    576  f260		       a5 8e		      LDA	Player0SpeedL
    577  f262		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    578  f265		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    579  f267							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    580  f267
    581  f267				   ResetToMaxSpeed		; Speed is more, or is already max
    582  f267		       a9 02		      LDA	#CAR_MAX_SPEED_H
    583  f269		       85 8f		      STA	Player0SpeedH
    584  f26b		       a4 f0		      LDY	CurrentCarId
    585  f26d		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    586  f270		       85 8e		      STA	Player0SpeedL
    587  f272				   SkipAccelerate
    588  f272
    589  f272				   InitUpdateOffsets
    590  f272		       a2 00		      LDX	#0	; Memory Offset 24 bit
    591  f274		       a0 00		      LDY	#0	; Line Speeds 16 bits
    592  f276		       a5 91		      LDA	TrafficOffset0 + 1	;
    593  f278		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    594  f27a		       a5 c5		      LDA	GameMode
    595  f27c		       29 04		      AND	#%00000100	; GameModes with high delta
    596  f27e		       f0 02		      BEQ	UpdateOffsets
    597  f280		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    598  f282
    599  f282				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    600  f282		       38		      SEC
    601  f283		       a5 8e		      LDA	Player0SpeedL
    602  f285		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    603  f288		       85 b0		      STA	Tmp0
    604  f28a		       c8		      INY
    605  f28b		       a5 8f		      LDA	Player0SpeedH
    606  f28d		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    607  f290		       85 b1		      STA	Tmp1
    608  f292		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    609  f294		       e9 00		      SBC	#0
    610  f296		       85 b2		      STA	Tmp2
    611  f298
    612  f298				   AddsTheResult
    613  f298		       18		      CLC
    614  f299		       a5 b0		      LDA	Tmp0
    615  f29b		       75 90		      ADC	TrafficOffset0,X
    616  f29d		       95 90		      STA	TrafficOffset0,X
    617  f29f		       e8		      INX
    618  f2a0		       a5 b1		      LDA	Tmp1
    619  f2a2		       75 90		      ADC	TrafficOffset0,X
    620  f2a4		       95 90		      STA	TrafficOffset0,X
    621  f2a6		       e8		      INX
    622  f2a7		       a5 b2		      LDA	Tmp2	; Carry
    623  f2a9		       75 90		      ADC	TrafficOffset0,X
    624  f2ab		       95 90		      STA	TrafficOffset0,X
    625  f2ad		       90 06		      BCC	CalculateOffsetCache
    626  f2af		       e0 02		      CPX	#2	;MSB offset 0
    627  f2b1		       d0 02		      BNE	CalculateOffsetCache
    628  f2b3		       e6 bb		      INC	Traffic0Msb
    629  f2b5
    630  f2b5				   CalculateOffsetCache
    631  f2b5		       e8		      INX
    632  f2b6		       38		      SEC
    633  f2b7		       69 00		      ADC	#0	;Increment by one
    634  f2b9		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    635  f2bb
    636  f2bb				   PrepareNextUpdateLoop
    637  f2bb		       c8		      INY
    638  f2bc		       e8		      INX
    639  f2bd		       e0 10		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    640  f2bf		       d0 c1		      BNE	UpdateOffsets
    641  f2c1
    642  f2c1				   ConfigureOpponentLine		; Temporary
    643  f2c1		       a9 14		      LDA	#20	; Extract to constant
    644  f2c3		       85 d8		      STA	OpponentLine
    645  f2c5
    646  f2c5
    647  f2c5							;Until store the movemnt, LDX contains the value to be stored.
    648  f2c5				   TestCollision		;
    649  f2c5							; see if player0 colides with the rest
    650  f2c5		       a5 00		      LDA	CXM0P
    651  f2c7		       05 01		      ORA	CXM1P
    652  f2c9		       05 02		      ORA	CXP0FB
    653  f2cb		       05 07		      ORA	CXPPMM
    654  f2cd		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    655  f2cf		       f0 29		      BEQ	NoCollision	;skip if not hitting...
    656  f2d1		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    657  f2d3		       d0 25		      BNE	NoCollision
    658  f2d5		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    659  f2d7		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    660  f2d9		       f0 1f		      BEQ	NoCollision
    661  f2db		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    662  f2dd		       f0 1b		      BEQ	NoCollision
    663  f2df		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    664  f2e1		       85 b8		      STA	CollisionCounter	;and store as colision.
    665  f2e3		       a5 8f		      LDA	Player0SpeedH
    666  f2e5		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    667  f2e7		       a9 10		      LDA	#COLLISION_SPEED_L
    668  f2e9		       c5 8e		      CMP	Player0SpeedL
    669  f2eb		       b0 04		      BCS	SkipSetColisionSpeedL
    670  f2ed				   SetColisionSpeedL
    671  f2ed		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    672  f2ef		       85 8e		      STA	Player0SpeedL
    673  f2f1				   SkipSetColisionSpeedL
    674  f2f1		       a9 00		      LDA	#0
    675  f2f3		       85 8f		      STA	Player0SpeedH
    676  f2f5		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    677  f2f7		       4c 45 f3 	      JMP	StoreHMove	; We keep position consistent
    678  f2fa				   NoCollision
    679  f2fa
    680  f2fa				   DecrementCollision
    681  f2fa		       a4 b8		      LDY	CollisionCounter
    682  f2fc		       f0 07		      BEQ	FinishDecrementCollision
    683  f2fe		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    684  f300		       85 04		      STA	NUSIZ0
    685  f302		       88		      DEY
    686  f303		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    687  f305				   FinishDecrementCollision
    688  f305
    689  f305				   ResetPlayerSize
    690  f305		       d0 04		      BNE	FinishResetPlayerSize
    691  f307		       a9 30		      LDA	#%00110000
    692  f309		       85 04		      STA	NUSIZ0	;
    693  f30b				   FinishResetPlayerSize
    694  f30b
    695  f30b							;STA HMCLR ; Do not double move car.
    696  f30b
    697  f30b				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    698  f30b		       c0 01		      CPY	#1	; Last frame before reset
    699  f30d		       d0 05		      BNE	SkipResetPlayerPosition
    700  f30f		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    701  f311		       4c 45 f3 	      JMP	StoreHMove
    702  f314				   SkipResetPlayerPosition
    703  f314
    704  f314				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    705  f314		       a5 f0		      LDA	CurrentCarId
    706  f316		       c9 03		      CMP	#CAR_ID_DRAGSTER
    707  f318		       d0 08		      BNE	PrepareReadXAxis
    708  f31a		       a2 00		      LDX	#0
    709  f31c		       a5 8c		      LDA	FrameCount0
    710  f31e		       29 01		      AND	#DRAGSTER_TURN_MASK
    711  f320		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    712  f322
    713  f322							; for left and right, we're gonna 
    714  f322							; set the horizontal speed, and then do
    715  f322							; a single HMOVE.  We'll use X to hold the
    716  f322							; horizontal speed, then store it in the 
    717  f322							; appropriate register
    718  f322				   PrepareReadXAxis
    719  f322		       a2 00		      LDX	#0
    720  f324		       a4 b9		      LDY	Player0X
    721  f326				   BeginReadLeft
    722  f326		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    723  f328		       a9 40		      LDA	#%01000000	;Left
    724  f32a		       2c 80 02 	      BIT	SWCHA
    725  f32d		       d0 07		      BNE	SkipMoveLeft
    726  f32f		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    727  f331		       c6 b9		      DEC	Player0X
    728  f333		       4c 45 f3 	      JMP	StoreHMove	; Cannot move left and right...
    729  f336				   SkipMoveLeft
    730  f336				   BeginReadRight
    731  f336		       c0 2c		      CPY	#PLAYER_0_MAX_X
    732  f338		       f0 0b		      BEQ	SkipMoveRight	; At max already
    733  f33a		       a9 80		      LDA	#%10000000	;Right
    734  f33c		       2c 80 02 	      BIT	SWCHA
    735  f33f		       d0 04		      BNE	SkipMoveRight
    736  f341		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    737  f343		       e6 b9		      INC	Player0X
    738  f345				   SkipMoveRight
    739  f345				   StoreHMove
    740  f345		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    741  f347		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    742  f349
    743  f349				   SkipUpdateLogic		; Continue here if not paused
    744  f349
    745  f349				   CalculateGear
    746  f349		       a5 8e		      LDA	Player0SpeedL	;3
    747  f34b		       29 80		      AND	#%10000000	;2
    748  f34d		       05 8f		      ORA	Player0SpeedH	;3
    749  f34f		       18		      CLC		;2
    750  f350		       2a		      ROL		;2
    751  f351		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    752  f353		       85 f4		      STA	Gear
    753  f355
    754  f355				   EndProcessingBorder
    755  f355
    756  f355				   ProcessScoreFontColor
    757  f355		       a6 d6		      LDX	ScoreFontColorHoldChange
    758  f357		       f0 06		      BEQ	ResetScoreFontColor
    759  f359		       ca		      DEX
    760  f35a		       86 d6		      STX	ScoreFontColorHoldChange
    761  f35c		       4c 63 f3 	      JMP	SkipScoreFontColor
    762  f35f				   ResetScoreFontColor
    763  f35f		       a9 f9		      LDA	#SCORE_FONT_COLOR
    764  f361		       85 d5		      STA	ScoreFontColor
    765  f363				   SkipScoreFontColor
    766  f363
    767  f363				   IsGameOver
    768  f363		       a5 ba		      LDA	CountdownTimer
    769  f365		       05 8e		      ORA	Player0SpeedL
    770  f367		       05 8f		      ORA	Player0SpeedH
    771  f369		       d0 0b		      BNE	IsCheckpoint
    772  f36b		       a9 01		      LDA	#1
    773  f36d		       85 d6		      STA	ScoreFontColorHoldChange
    774  f36f		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    775  f371		       85 d5		      STA	ScoreFontColor
    776  f373		       4c a8 f3 	      JMP	SkipIsTimeOver
    777  f376
    778  f376				   IsCheckpoint
    779  f376		       a5 d7		      LDA	NextCheckpoint
    780  f378		       c5 92		      CMP	TrafficOffset0 + 2
    781  f37a		       d0 20		      BNE	SkipIsCheckpoint
    782  f37c		       18		      CLC
    783  f37d		       69 10		      ADC	#CHECKPOINT_INTERVAL
    784  f37f		       85 d7		      STA	NextCheckpoint
    785  f381		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    786  f383		       85 d5		      STA	ScoreFontColor
    787  f385		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    788  f387		       85 d6		      STA	ScoreFontColorHoldChange
    789  f389		       a5 ba		      LDA	CountdownTimer
    790  f38b		       18		      CLC
    791  f38c		       65 c2		      ADC	CheckpointTime
    792  f38e		       85 ba		      STA	CountdownTimer
    793  f390		       90 04		      BCC	JumpSkipTimeOver
    794  f392		       a9 ff		      LDA	#$FF
    795  f394		       85 ba		      STA	CountdownTimer	; Does not overflow!
    796  f396				   JumpSkipTimeOver
    797  f396		       20 0b f8 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    798  f399		       4c a8 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    799  f39c				   SkipIsCheckpoint
    800  f39c
    801  f39c				   IsTimeOver
    802  f39c		       a5 ba		      LDA	CountdownTimer
    803  f39e		       d0 08		      BNE	SkipIsTimeOver
    804  f3a0		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    805  f3a2		       85 d6		      STA	ScoreFontColorHoldChange
    806  f3a4		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    807  f3a6		       85 d5		      STA	ScoreFontColor
    808  f3a8				   SkipIsTimeOver
    809  f3a8
    810  f3a8		       20 9f fa 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    811  f3ab
    812  f3ab				   PrintEasterEggCondition
    813  f3ab		       a5 8d		      LDA	FrameCount1
    814  f3ad		       29 38		      AND	#%00111000
    815  f3af		       05 c0		      ORA	GameStatus
    816  f3b1		       c9 38		      CMP	#%00111000
    817  f3b3		       d0 06		      BNE	ChooseTextSide
    818  f3b5		       20 78 f8 	      JSR	PrintEasterEgg
    819  f3b8		       4c aa f4 	      JMP	RightScoreWriteEnd
    820  f3bb
    821  f3bb							;Could be done during on vblank to save this comparisson time (before draw score), 
    822  f3bb							;but I am saving vblank cycles for now, in case of 2 players.
    823  f3bb				   ChooseTextSide		; 
    824  f3bb		       a5 f2		      LDA	TextSide	;3
    825  f3bd		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    826  f3bf		       4c 40 f4 	      JMP	RightScoreWrite
    827  f3c2
    828  f3c2				   LeftScoreWrite
    829  f3c2		       a5 d5		      LDA	ScoreFontColor
    830  f3c4		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    831  f3c6		       f0 4e		      BEQ	PrintCheckpoint
    832  f3c8		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    833  f3ca		       f0 52		      BEQ	PrintStartGame
    834  f3cc		       a5 c0		      LDA	GameStatus
    835  f3ce		       f0 56		      BEQ	PrintHellwayLeft
    836  f3d0				   WriteDistance		;Not optimized yet, ugly code.
    837  f3d0				   Digit0Distance
    838  f3d0		       a5 91		      LDA	TrafficOffset0 + 1	;3
    839  f3d2		       4a		      LSR		; 2
    840  f3d3		       4a		      LSR		; 2
    841  f3d4		       4a		      LSR		; 2
    842  f3d5		       4a		      LSR		; 2
    843  f3d6		       aa		      TAX		; 2
    844  f3d7		       bd be fd 	      LDA	FontLookup,X	;4
    845  f3da		       85 d3		      STA	ScoreD3	;3
    846  f3dc
    847  f3dc				   Digit1Distance
    848  f3dc		       a5 92		      LDA	TrafficOffset0 + 2	;3
    849  f3de		       29 0f		      AND	#%00001111	;2
    850  f3e0		       aa		      TAX		; 2
    851  f3e1		       bd be fd 	      LDA	FontLookup,X	;4 
    852  f3e4		       85 d2		      STA	ScoreD2	;3
    853  f3e6
    854  f3e6				   Digit2Distance
    855  f3e6		       a5 92		      LDA	TrafficOffset0 + 2	;3
    856  f3e8		       4a		      LSR		; 2
    857  f3e9		       4a		      LSR		; 2
    858  f3ea		       4a		      LSR		; 2
    859  f3eb		       4a		      LSR		; 2
    860  f3ec		       aa		      TAX		; 2
    861  f3ed		       bd be fd 	      LDA	FontLookup,X	;4
    862  f3f0		       85 d1		      STA	ScoreD1	;3
    863  f3f2
    864  f3f2				   Digit3Distance
    865  f3f2		       a5 bb		      LDA	Traffic0Msb	;3
    866  f3f4		       29 0f		      AND	#%00001111	;2
    867  f3f6		       aa		      TAX		; 2
    868  f3f7		       bd be fd 	      LDA	FontLookup,X	;4 
    869  f3fa		       85 d0		      STA	ScoreD0	;3
    870  f3fc
    871  f3fc				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    872  f3fc		       a5 bb		      LDA	Traffic0Msb
    873  f3fe		       29 f0		      AND	#%11110000	;2
    874  f400		       d0 07		      BNE	DrawDistanceExtraDigit
    875  f402		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    876  f404		       85 d4		      STA	ScoreD4	;3
    877  f406		       4c 13 f4 	      JMP	EndDrawDistance
    878  f409				   DrawDistanceExtraDigit
    879  f409		       4a		      LSR		; 2
    880  f40a		       4a		      LSR		; 2
    881  f40b		       4a		      LSR		; 2
    882  f40c		       4a		      LSR		; 2
    883  f40d		       aa		      TAX		; 2
    884  f40e		       bd be fd 	      LDA	FontLookup,X	;4
    885  f411		       85 d4		      STA	ScoreD4	;3
    886  f413
    887  f413				   EndDrawDistance
    888  f413		       4c aa f4 	      JMP	RightScoreWriteEnd	;3
    889  f416
    890  f416				   PrintCheckpoint
    891  f416		       a2 00		      LDX	#<CheckpointText
    892  f418		       20 5a f8 	      JSR	PrintStaticText
    893  f41b		       4c aa f4 	      JMP	RightScoreWriteEnd	;3
    894  f41e				   PrintStartGame
    895  f41e		       a2 23		      LDX	#<GoText
    896  f420		       20 5a f8 	      JSR	PrintStaticText
    897  f423		       4c aa f4 	      JMP	RightScoreWriteEnd	;3
    898  f426
    899  f426				   PrintHellwayLeft
    900  f426		       a5 8d		      LDA	FrameCount1
    901  f428		       29 01		      AND	#1
    902  f42a		       d0 05		      BNE	PrintCreditsLeft
    903  f42c		       a2 05		      LDX	#<HellwayLeftText
    904  f42e		       4c 33 f4 	      JMP	PrintGameMode
    905  f431				   PrintCreditsLeft
    906  f431		       a2 0f		      LDX	#<OpbText
    907  f433
    908  f433				   PrintGameMode
    909  f433		       20 5a f8 	      JSR	PrintStaticText
    910  f436		       a6 c5		      LDX	GameMode
    911  f438		       bd be fd 	      LDA	FontLookup,X	;4 
    912  f43b		       85 d0		      STA	ScoreD0	;3
    913  f43d		       4c aa f4 	      JMP	RightScoreWriteEnd	;3
    914  f440
    915  f440				   RightScoreWrite
    916  f440		       a5 c0		      LDA	GameStatus
    917  f442		       f0 45		      BEQ	PrintHellwayRight
    918  f444		       a5 d5		      LDA	ScoreFontColor
    919  f446		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    920  f448		       f0 52		      BEQ	PrintGameOver
    921  f44a				   Digit0Timer
    922  f44a		       a5 ba		      LDA	CountdownTimer	;3
    923  f44c		       29 0f		      AND	#%00001111	;2
    924  f44e		       aa		      TAX		; 2
    925  f44f		       bd be fd 	      LDA	FontLookup,X	;4 
    926  f452		       85 d1		      STA	ScoreD1	;3
    927  f454
    928  f454				   Digit1Timer
    929  f454		       a5 ba		      LDA	CountdownTimer	;3
    930  f456		       4a		      LSR		; 2
    931  f457		       4a		      LSR		; 2
    932  f458		       4a		      LSR		; 2
    933  f459		       4a		      LSR		; 2
    934  f45a		       aa		      TAX		; 2
    935  f45b		       bd be fd 	      LDA	FontLookup,X	;4
    936  f45e		       85 d0		      STA	ScoreD0	;3
    937  f460
    938  f460		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    939  f462		       85 d2		      STA	ScoreD2	;3
    940  f464
    941  f464				   Digit0Speed
    942  f464		       a5 8e		      LDA	Player0SpeedL
    943  f466		       29 3c		      AND	#%00111100	;2 Discard the last bits
    944  f468		       4a		      LSR		; 2
    945  f469		       4a		      LSR		; 2
    946  f46a		       aa		      TAX		; 2
    947  f46b		       bd be fd 	      LDA	FontLookup,X	;4
    948  f46e		       85 d4		      STA	ScoreD4	;3
    949  f470
    950  f470				   Digit1Speed
    951  f470		       a5 8e		      LDA	Player0SpeedL
    952  f472		       29 c0		      AND	#%11000000	;2 Discard the last bits
    953  f474		       18		      CLC
    954  f475		       2a		      ROL		;First goes into carry
    955  f476		       2a		      ROL
    956  f477		       2a		      ROL
    957  f478		       85 b0		      STA	Tmp0
    958  f47a		       a5 8f		      LDA	Player0SpeedH
    959  f47c		       0a		      ASL
    960  f47d		       0a		      ASL
    961  f47e		       05 b0		      ORA	Tmp0
    962  f480		       aa		      TAX		; 2
    963  f481		       bd be fd 	      LDA	FontLookup,X	;4
    964  f484		       85 d3		      STA	ScoreD3	;3
    965  f486		       4c aa f4 	      JMP	RightScoreWriteEnd
    966  f489
    967  f489				   PrintHellwayRight
    968  f489		       a5 8d		      LDA	FrameCount1
    969  f48b		       29 01		      AND	#1
    970  f48d		       d0 05		      BNE	PrintCreditsRight
    971  f48f		       a2 0a		      LDX	#<HellwayRightText
    972  f491		       4c 96 f4 	      JMP	PrintRightIntro
    973  f494				   PrintCreditsRight
    974  f494		       a2 14		      LDX	#<YearText
    975  f496				   PrintRightIntro
    976  f496		       20 5a f8 	      JSR	PrintStaticText
    977  f499		       4c aa f4 	      JMP	RightScoreWriteEnd
    978  f49c				   PrintGameOver
    979  f49c		       a5 8c		      LDA	FrameCount0
    980  f49e		       30 05		      BMI	PrintOverText
    981  f4a0		       a2 19		      LDX	#<GameText
    982  f4a2		       4c a7 f4 	      JMP	StoreGameOverText
    983  f4a5				   PrintOverText
    984  f4a5		       a2 1e		      LDX	#<OverText
    985  f4a7				   StoreGameOverText
    986  f4a7		       20 5a f8 	      JSR	PrintStaticText
    987  f4aa				   RightScoreWriteEnd
    988  f4aa
    989  f4aa
    990  f4aa				   ScoreBackgroundColor
    991  f4aa		       a2 00		      LDX	#0
    992  f4ac		       ad 82 02 	      LDA	SWCHB
    993  f4af		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    994  f4b1		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    995  f4b3		       f0 04		      BEQ	BlackAndWhiteScoreBg
    996  f4b5		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    997  f4b7		       a2 03		      LDX	#BACKGROUND_COLOR
    998  f4b9				   BlackAndWhiteScoreBg
    999  f4b9		       85 b2		      STA	Tmp2	; Score Background
   1000  f4bb		       86 b3		      STX	Tmp3	; Traffic Background
   1001  f4bd
   1002  f4bd				   ConfigurePFForScore
   1003  f4bd							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1004  f4bd		       85 09		      STA	COLUBK
   1005  f4bf		       20 cd f7 	      JSR	ClearAll
   1006  f4c2		       a9 02		      LDA	#%00000010	; Score mode
   1007  f4c4		       85 0a		      STA	CTRLPF
   1008  f4c6		       a5 f2		      LDA	TextSide	;3
   1009  f4c8		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1010  f4ca				   LeftScoreOn
   1011  f4ca		       a5 d5		      LDA	ScoreFontColor
   1012  f4cc		       85 07		      STA	COLUP1
   1013  f4ce		       a5 b2		      LDA	Tmp2
   1014  f4d0		       85 06		      STA	COLUP0
   1015  f4d2		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1016  f4d4		       85 b1		      STA	Tmp1
   1017  f4d6		       4c e5 f4 	      JMP	CallWaitForVblankEnd
   1018  f4d9				   RightScoreOn
   1019  f4d9		       a5 d5		      LDA	ScoreFontColor
   1020  f4db		       85 06		      STA	COLUP0
   1021  f4dd		       a5 b2		      LDA	Tmp2
   1022  f4df		       85 07		      STA	COLUP1
   1023  f4e1		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1024  f4e3		       85 b1		      STA	Tmp1
   1025  f4e5
   1026  f4e5							; After here we are going to update the screen, No more heavy code
   1027  f4e5				   CallWaitForVblankEnd
   1028  f4e5		       20 78 fa 	      JSR	WaitForVblankEnd
   1029  f4e8
   1030  f4e8				   DrawScoreHud
   1031  f4e8		       20 ea f8 	      JSR	PrintScore
   1032  f4eb
   1033  f4eb		       85 02		      STA	WSYNC
   1034  f4ed
   1035  f4ed		       a5 0c		      LDA	INPT4	;3
   1036  f4ef		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1037  f4f1		       a5 d5		      LDA	ScoreFontColor
   1038  f4f3		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1039  f4f5		       d0 0a		      BNE	WaitAnotherScoreLine
   1040  f4f7		       a5 f2		      LDA	TextSide	;3
   1041  f4f9		       d0 03		      BNE	LeftScoreOnGameOver
   1042  f4fb		       4c 52 fa 	      JMP	DrawGameOverScreenRight
   1043  f4fe				   LeftScoreOnGameOver
   1044  f4fe		       4c a7 f9 	      JMP	DrawGameOverScreenLeft
   1045  f501
   1046  f501				   WaitAnotherScoreLine
   1047  f501		       85 02		      STA	WSYNC
   1048  f503
   1049  f503				   PrepareForTraffic
   1050  f503		       20 df f7 	      JSR	ClearPF	; 32
   1051  f506
   1052  f506		       85 02		      STA	WSYNC
   1053  f508		       85 02		      STA	WSYNC
   1054  f50a
   1055  f50a		       a9 30		      LDA	#%00110000	; 2 Score mode
   1056  f50c		       85 0a		      STA	CTRLPF	;3
   1057  f50e
   1058  f50e		       a5 c3		      LDA	TrafficColor	;3
   1059  f510		       85 08		      STA	COLUPF	;3
   1060  f512
   1061  f512		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1062  f514		       85 07		      STA	COLUP1	;3
   1063  f516
   1064  f516		       a5 d5		      LDA	ScoreFontColor	;3
   1065  f518		       85 06		      STA	COLUP0	;3
   1066  f51a
   1067  f51a		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1068  f51c
   1069  f51c		       20 df f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1070  f51f
      0  f51f					      SLEEP	14
      1  f51f				   .CYCLES    SET	14
      2  f51f
      3  f51f				  -	      IF	.CYCLES < 2
      4  f51f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f51f				  -	      ERR
      6  f51f					      ENDIF
      7  f51f
      8  f51f				  -	      IF	.CYCLES & 1
      9  f51f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f51f				  -	      nop	0
     11  f51f				  -	      ELSE
     12  f51f				  -	      bit	VSYNC
     13  f51f				  -	      ENDIF
     14  f51f				  -.CYCLES    SET	.CYCLES - 3
     15  f51f					      ENDIF
     16  f51f
     17  f51f					      REPEAT	.CYCLES / 2
     18  f51f		       ea		      nop
     17  f51f					      REPEND
     18  f520		       ea		      nop
     17  f520					      REPEND
     18  f521		       ea		      nop
     17  f521					      REPEND
     18  f522		       ea		      nop
     17  f522					      REPEND
     18  f523		       ea		      nop
     17  f523					      REPEND
     18  f524		       ea		      nop
     17  f524					      REPEND
     18  f525		       ea		      nop
     19  f526					      REPEND
   1072  f526
   1073  f526		       a5 b3		      LDA	Tmp3	;3
   1074  f528		       85 09		      STA	COLUBK	;3
   1075  f52a		       a5 8c		      LDA	FrameCount0
   1076  f52c		       29 01		      AND	#%00000001
   1077  f52e		       d0 05		      BNE	OpDrawCache
   1078  f530		       4c ef f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1079  f533							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1080  f533
   1081  f533							;main scanline loop...
   1082  f533				   OpScanLoop
   1083  f533		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1084  f535
   1085  f535							;Start of next line!			
   1086  f535				   OpDrawCache		;63 Is the last line going to the top of the next frame?
   1087  f535
   1088  f535		       a5 80		      LDA	GRP0Cache	;3
   1089  f537		       85 1b		      STA	GRP0	;3
   1090  f539
   1091  f539		       a5 84		      LDA	GRP1Cache	;3
   1092  f53b		       85 1c		      STA	GRP1	;3
   1093  f53d
   1094  f53d		       a5 85		      LDA	ENABLCache	;3
   1095  f53f		       85 1f		      STA	ENABL	;3
   1096  f541
   1097  f541		       a5 86		      LDA	ENAM0Cache	;3
   1098  f543		       85 1d		      STA	ENAM0	;3
   1099  f545
   1100  f545		       a5 87		      LDA	ENAM1Cache	;3
   1101  f547		       85 1e		      STA	ENAM1	;3
   1102  f549
   1103  f549		       a5 81		      LDA	PF0Cache	;3
   1104  f54b		       85 0d		      STA	PF0	;3
   1105  f54d
   1106  f54d		       a9 00		      LDA	#0	;2
   1107  f54f							;STA PF0	     ;3
   1108  f54f		       85 80		      STA	GRP0Cache	;3
   1109  f551		       85 86		      STA	ENAM0Cache	;3
   1110  f553		       85 85		      STA	ENABLCache	;3
   1111  f555		       85 87		      STA	ENAM1Cache	; 3
   1112  f557							;STA GRP1Cache ;3
   1113  f557		       85 0d		      STA	PF0	;3
   1114  f559							;STA PF2	     ;3
   1115  f559
   1116  f559		       a5 83		      LDA	PF2Cache	;3
   1117  f55b		       85 0f		      STA	PF2	;3
   1118  f55d
   1119  f55d				   OpDrawCar0
   1120  f55d		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1121  f55f		       b0 04		      BCS	OpSkipDrawCar	;2
   1122  f561		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1123  f563		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
   1124  f565				   OpSkipDrawCar
   1125  f565
   1126  f565							;BEQ DrawTraffic3
   1127  f565				   OpDrawTraffic1		; 33
   1128  f565		       98		      TYA		; 2
   1129  f566		       18		      CLC		; 2 
   1130  f567		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
   1131  f569		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1132  f56b		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1133  f56d		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
   1134  f56f		       4c 74 f5 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1135  f572				   OpEorOffsetWithCarry
   1136  f572		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1137  f574				   OpAfterEorOffsetWithCarry		;17
   1138  f574		       aa		      TAX		;2
   1139  f575		       bd 00 fe 	      LDA	AesTable,X	; 4
   1140  f578		       c5 c1		      CMP	TrafficChance	;3
   1141  f57a		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1142  f57c		       a9 ff		      LDA	#$FF	;2
   1143  f57e		       85 86		      STA	ENAM0Cache	;3
   1144  f580				   OpFinishDrawTraffic1
   1145  f580
   1146  f580				   OpErasePF2
   1147  f580		       a9 00		      LDA	#0
   1148  f582		       85 0f		      STA	PF2
   1149  f584
   1150  f584				   OpDrawTraffic2		; 33
   1151  f584		       98		      TYA		; 2
   1152  f585		       18		      CLC		; 2 
   1153  f586		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
   1154  f588		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1155  f58a		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1156  f58c		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
   1157  f58e		       4c 93 f5 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1158  f591				   OpEorOffsetWithCarry2
   1159  f591		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1160  f593				   OpAfterEorOffsetWithCarry2		;17
   1161  f593		       aa		      TAX		;2
   1162  f594		       bd 00 fe 	      LDA	AesTable,X	; 4
   1163  f597		       c5 c1		      CMP	TrafficChance	;3
   1164  f599		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1165  f59b		       a9 02		      LDA	#%00000010	;2
   1166  f59d		       85 85		      STA	ENABLCache	;3
   1167  f59f				   OpFinishDrawTraffic2
   1168  f59f
   1169  f59f							;STA WSYNC ;65 / 137
   1170  f59f
   1171  f59f							; LDA Tmp0 ; Flicker this line if drawing car
   1172  f59f							; BEQ FinishDrawTraffic4
   1173  f59f				   OpDrawTraffic3		; 33
   1174  f59f		       98		      TYA		; 2
   1175  f5a0		       18		      CLC		; 2 
   1176  f5a1		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
   1177  f5a3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1178  f5a5		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1179  f5a7		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
   1180  f5a9		       4c ae f5 	      JMP	OpAfterEorOffsetWithCarry3	; 3
   1181  f5ac				   OpEorOffsetWithCarry3
   1182  f5ac		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1183  f5ae				   OpAfterEorOffsetWithCarry3		;17
   1184  f5ae		       aa		      TAX		;2
   1185  f5af		       bd 00 fe 	      LDA	AesTable,X	; 4
   1186  f5b2		       c5 c1		      CMP	TrafficChance	;3
   1187  f5b4		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1188  f5b6		       a9 02		      LDA	#%00000010	;2
   1189  f5b8		       85 87		      STA	ENAM1Cache
   1190  f5ba				   OpFinishDrawTraffic3
   1191  f5ba
   1192  f5ba				   OpDrawOponent		;26
   1193  f5ba		       84 b0		      STY	Tmp0	;3
   1194  f5bc		       a4 d8		      LDY	OpponentLine	;3
   1195  f5be		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1196  f5c0		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1197  f5c2				   OpDrawOpponent
   1198  f5c2		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1199  f5c4		       85 80		      STA	GRP0Cache	;3
   1200  f5c6		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1201  f5c8		       a4 b0		      LDY	Tmp0	;3
   1202  f5ca		       4c de f5 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
   1203  f5cd				   OpSkipDrawOpponent
   1204  f5cd		       c6 d8		      DEC	OpponentLine	;5
   1205  f5cf		       a4 b0		      LDY	Tmp0	;3
   1206  f5d1
   1207  f5d1
   1208  f5d1				   OpDrawTraffic0		; 21 2pe
   1209  f5d1		       98		      TYA		; 2
   1210  f5d2		       18		      CLC		; 2 
   1211  f5d3		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1212  f5d5		       29 08		      AND	#%00001000	;2
   1213  f5d7		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1214  f5d9				   OpHasBorderP0
   1215  f5d9		       a9 70		      LDA	#%01110000	; 2
   1216  f5db		       4c e0 f5 	      JMP	OpStoreBorderP0	; 3
   1217  f5de				   OpHasNoBorderP0
   1218  f5de		       a9 00		      LDA	#0	; 2
   1219  f5e0				   OpStoreBorderP0
   1220  f5e0		       85 81		      STA	PF0Cache	; 3
   1221  f5e2		       85 83		      STA	PF2Cache	; 3
   1222  f5e4
   1223  f5e4				   OpSkipDrawTraffic0
   1224  f5e4
   1225  f5e4				   OpWhileScanLoop
   1226  f5e4		       88		      DEY		;2
   1227  f5e5		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1228  f5e7		       4c 33 f5 	      JMP	OpScanLoop	;3
   1229  f5ea				   OpFinishScanLoop		; 7 209 of 222
   1230  f5ea		       4c a2 f6 	      JMP	FinishScanLoop
   1231  f5ed
   1232  f5ed							;main scanline loop...
   1233  f5ed				   ScanLoop
   1234  f5ed		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1235  f5ef
   1236  f5ef							;Start of next line!			
   1237  f5ef				   DrawCache		;63 Is the last line going to the top of the next frame?
   1238  f5ef		       a5 81		      LDA	PF0Cache	;3
   1239  f5f1		       85 0d		      STA	PF0	;3
   1240  f5f3
   1241  f5f3		       a5 80		      LDA	GRP0Cache	;3
   1242  f5f5		       85 1b		      STA	GRP0	;3
   1243  f5f7
   1244  f5f7		       a5 84		      LDA	GRP1Cache	;3
   1245  f5f9		       85 1c		      STA	GRP1	;3
   1246  f5fb
   1247  f5fb		       a5 86		      LDA	ENAM0Cache	;3
   1248  f5fd		       85 1d		      STA	ENAM0	;3
   1249  f5ff
   1250  f5ff		       a5 85		      LDA	ENABLCache	;3
   1251  f601		       85 1f		      STA	ENABL	;3
   1252  f603
   1253  f603		       a5 87		      LDA	ENAM1Cache	;3
   1254  f605		       85 1e		      STA	ENAM1	;3
   1255  f607
   1256  f607		       a5 83		      LDA	PF2Cache	;3
   1257  f609		       85 0f		      STA	PF2	;3
   1258  f60b
   1259  f60b		       a9 00		      LDA	#0	;2
   1260  f60d		       85 0d		      STA	PF0	;3
   1261  f60f		       85 84		      STA	GRP1Cache	;3
   1262  f611		       85 85		      STA	ENABLCache	;3
   1263  f613		       85 86		      STA	ENAM0Cache	;3
   1264  f615		       85 87		      STA	ENAM1Cache	; 3
   1265  f617							;STA GRP0Cache
   1266  f617		       85 0f		      STA	PF2	;3
   1267  f619
   1268  f619				   DrawCar0
   1269  f619		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1270  f61b		       b0 04		      BCS	SkipDrawCar	;2
   1271  f61d		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1272  f61f		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1273  f621				   SkipDrawCar
   1274  f621
   1275  f621							;BEQ DrawTraffic3
   1276  f621				   DrawTraffic1 		; 33
   1277  f621		       98		      TYA		; 2
   1278  f622		       18		      CLC		; 2 
   1279  f623		       65 95		      ADC	TrafficOffset1 + 1	;3
   1280  f625		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1281  f627		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1282  f629		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1283  f62b		       4c 30 f6 	      JMP	AfterEorOffsetWithCarry	; 3
   1284  f62e				   EorOffsetWithCarry
   1285  f62e		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1286  f630				   AfterEorOffsetWithCarry		;17
   1287  f630		       aa		      TAX		;2
   1288  f631		       bd 00 fe 	      LDA	AesTable,X	; 4
   1289  f634		       c5 c1		      CMP	TrafficChance	;3
   1290  f636		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1291  f638		       a9 ff		      LDA	#$FF	;2
   1292  f63a		       85 86		      STA	ENAM0Cache	;3
   1293  f63c				   FinishDrawTraffic1
   1294  f63c
   1295  f63c				   DrawTraffic2 		; 33
   1296  f63c		       98		      TYA		; 2
   1297  f63d		       18		      CLC		; 2 
   1298  f63e		       65 99		      ADC	TrafficOffset2 + 1	;3
   1299  f640		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1300  f642		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1301  f644		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1302  f646		       4c 4b f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1303  f649				   EorOffsetWithCarry2
   1304  f649		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1305  f64b				   AfterEorOffsetWithCarry2		;17
   1306  f64b		       aa		      TAX		;2
   1307  f64c		       bd 00 fe 	      LDA	AesTable,X	; 4
   1308  f64f		       c5 c1		      CMP	TrafficChance	;3
   1309  f651		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1310  f653		       a9 02		      LDA	#%00000010	;2
   1311  f655		       85 85		      STA	ENABLCache	;3
   1312  f657				   FinishDrawTraffic2
   1313  f657
   1314  f657							;STA WSYNC ;65 / 137
   1315  f657
   1316  f657							; LDA Tmp0 ; Flicker this line if drawing car
   1317  f657							; BEQ FinishDrawTraffic4
   1318  f657				   DrawTraffic3 		; 33
   1319  f657		       98		      TYA		; 2
   1320  f658		       18		      CLC		; 2 
   1321  f659		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1322  f65b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1323  f65d		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1324  f65f		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1325  f661		       4c 66 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1326  f664				   EorOffsetWithCarry3
   1327  f664		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1328  f666				   AfterEorOffsetWithCarry3		;17
   1329  f666		       aa		      TAX		;2
   1330  f667		       bd 00 fe 	      LDA	AesTable,X	; 4
   1331  f66a		       c5 c1		      CMP	TrafficChance	;3
   1332  f66c		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1333  f66e		       a9 02		      LDA	#%00000010	;2
   1334  f670		       85 87		      STA	ENAM1Cache
   1335  f672				   FinishDrawTraffic3
   1336  f672
   1337  f672
   1338  f672				   DrawOponent		;26
   1339  f672		       84 b0		      STY	Tmp0	;3
   1340  f674		       a4 d8		      LDY	OpponentLine	;3
   1341  f676		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1342  f678		       b0 0b		      BCS	SkipDrawOpponent	;2
   1343  f67a				   DrawOpponent
   1344  f67a		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1345  f67c		       85 84		      STA	GRP1Cache	;3
   1346  f67e		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1347  f680		       a4 b0		      LDY	Tmp0	;3
   1348  f682		       4c 96 f6 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1349  f685				   SkipDrawOpponent
   1350  f685		       c6 d8		      DEC	OpponentLine	;5
   1351  f687		       a4 b0		      LDY	Tmp0	;3
   1352  f689
   1353  f689				   DrawTraffic0 		; 21 2pe
   1354  f689		       98		      TYA		; 2
   1355  f68a		       18		      CLC		; 2 
   1356  f68b		       65 91		      ADC	TrafficOffset0 + 1	;3
   1357  f68d		       29 08		      AND	#%00001000	;2
   1358  f68f		       f0 05		      BEQ	HasNoBorderP0	;3
   1359  f691				   HasBorderP0
   1360  f691		       a9 70		      LDA	#%01110000	; 2
   1361  f693		       4c 98 f6 	      JMP	StoreBorderP0	; 3
   1362  f696				   HasNoBorderP0
   1363  f696		       a9 00		      LDA	#0	; 2
   1364  f698				   StoreBorderP0
   1365  f698		       85 81		      STA	PF0Cache	; 3
   1366  f69a		       85 83		      STA	PF2Cache	; 3
   1367  f69c
   1368  f69c				   SkipDrawTraffic0
   1369  f69c
   1370  f69c				   WhileScanLoop
   1371  f69c		       88		      DEY		;2
   1372  f69d		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1373  f69f		       4c ed f5 	      JMP	ScanLoop	;3
   1374  f6a2				   FinishScanLoop		; 7 209 of 222
   1375  f6a2
   1376  f6a2		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1377  f6a4		       20 ee f7 	      JSR	LoadAll
   1378  f6a7		       85 02		      STA	WSYNC	; do stuff!
   1379  f6a9		       85 02		      STA	WSYNC
   1380  f6ab		       85 02		      STA	WSYNC
   1381  f6ad							;42 cycles to use here
   1382  f6ad
   1383  f6ad				   PrepareOverscan
   1384  f6ad		       a9 02		      LDA	#2
   1385  f6af		       85 02		      STA	WSYNC
   1386  f6b1		       85 01		      STA	VBLANK
   1387  f6b3
   1388  f6b3		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1389  f6b5		       8d 96 02 	      STA	TIM64T
   1390  f6b8
   1391  f6b8				   LeftSound		;41
   1392  f6b8		       a5 ba		      LDA	CountdownTimer	;3
   1393  f6ba		       f0 1b		      BEQ	EngineOff	;2
   1394  f6bc		       a6 f4		      LDX	Gear
   1395  f6be		       a5 8e		      LDA	Player0SpeedL	;3
   1396  f6c0		       4a		      LSR		;2
   1397  f6c1		       4a		      LSR		;2
   1398  f6c2		       4a		      LSR		;2
   1399  f6c3		       29 0f		      AND	#%00001111	;2
   1400  f6c5		       85 b0		      STA	Tmp0	;3
   1401  f6c7		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1402  f6ca		       38		      SEC		;2
   1403  f6cb		       e5 b0		      SBC	Tmp0	;3
   1404  f6cd		       85 17		      STA	AUDF0	;3
   1405  f6cf		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1406  f6d2		       85 15		      STA	AUDC0	;3
   1407  f6d4		       4c db f6 	      JMP	EndLeftSound	;3
   1408  f6d7				   EngineOff
   1409  f6d7		       a9 00		      LDA	#0
   1410  f6d9		       85 15		      STA	AUDC0
   1411  f6db
   1412  f6db				   EndLeftSound
   1413  f6db
   1414  f6db
   1415  f6db				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1416  f6db		       a5 d5		      LDA	ScoreFontColor	;3
   1417  f6dd		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1418  f6df		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1419  f6e1		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1420  f6e3		       f0 29		      BEQ	PlayCheckpoint	;2
   1421  f6e5		       a5 b8		      LDA	CollisionCounter	;3
   1422  f6e7		       c9 e0		      CMP	#$E0	;2
   1423  f6e9		       b0 14		      BCS	PlayColision	;2
   1424  f6eb		       a5 d7		      LDA	NextCheckpoint	;3
   1425  f6ed		       38		      SEC		;2
   1426  f6ee		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1427  f6f0		       c9 02		      CMP	#$02	;2
   1428  f6f2		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1429  f6f4		       a5 ba		      LDA	CountdownTimer	; 3
   1430  f6f6		       f0 53		      BEQ	MuteRightSound	;2
   1431  f6f8		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1432  f6fa		       90 37		      BCC	PlayWarnTimeEnding	;4
   1433  f6fc		       4c 4b f7 	      JMP	MuteRightSound	;3
   1434  f6ff				   PlayColision
   1435  f6ff		       a9 1f		      LDA	#31
   1436  f701		       85 18		      STA	AUDF1
   1437  f703		       a9 08		      LDA	#8
   1438  f705		       85 16		      STA	AUDC1
   1439  f707		       a9 08		      LDA	#8
   1440  f709		       85 1a		      STA	AUDV1
   1441  f70b		       4c 4f f7 	      JMP	EndRightSound
   1442  f70e
   1443  f70e				   PlayCheckpoint
   1444  f70e		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1445  f710		       4a		      LSR		;2
   1446  f711		       4a		      LSR		;2
   1447  f712		       4a		      LSR		;2
   1448  f713		       85 18		      STA	AUDF1	;3
   1449  f715		       a9 0c		      LDA	#12	;2
   1450  f717		       85 16		      STA	AUDC1	;3
   1451  f719		       a9 06		      LDA	#6	;2
   1452  f71b		       85 1a		      STA	AUDV1	;3
   1453  f71d		       4c 4f f7 	      JMP	EndRightSound	;3
   1454  f720
   1455  f720				   PlayBeforeCheckpoint
   1456  f720		       a5 8c		      LDA	FrameCount0	;3
   1457  f722		       29 1c		      AND	#%00011100	;2
   1458  f724		       09 03		      ORA	#%00000011	;2
   1459  f726		       85 18		      STA	AUDF1	;3
   1460  f728		       a9 0c		      LDA	#12	;2
   1461  f72a		       85 16		      STA	AUDC1	;3
   1462  f72c		       a9 03		      LDA	#3	;2
   1463  f72e		       85 1a		      STA	AUDV1	;3
   1464  f730		       4c 4f f7 	      JMP	EndRightSound	;3
   1465  f733
   1466  f733				   PlayWarnTimeEnding
   1467  f733		       a5 8c		      LDA	FrameCount0	;3
   1468  f735		       29 04		      AND	#%00000100	;2
   1469  f737		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1470  f739		       18		      CLC		;2
   1471  f73a		       a9 0a		      LDA	#10	;2
   1472  f73c		       65 ba		      ADC	CountdownTimer	;2
   1473  f73e		       85 18		      STA	AUDF1	;3
   1474  f740		       a9 0c		      LDA	#12	;2
   1475  f742		       85 16		      STA	AUDC1	;3
   1476  f744		       a9 03		      LDA	#3	;2
   1477  f746		       85 1a		      STA	AUDV1	;3
   1478  f748		       4c 4f f7 	      JMP	EndRightSound	;3
   1479  f74b
   1480  f74b				   MuteRightSound
   1481  f74b		       a9 00		      LDA	#0
   1482  f74d		       85 1a		      STA	AUDV1
   1483  f74f				   EndRightSound
   1484  f74f
   1485  f74f							;Read Fire Button before, will make it start the game for now.
   1486  f74f				   StartGame
   1487  f74f		       a5 0c		      LDA	INPT4	;3
   1488  f751		       25 0d		      AND	INPT5	;3 player 
   1489  f753		       30 31		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1490  f755		       a5 8c		      LDA	FrameCount0
   1491  f757		       29 01		      AND	#%00000001
   1492  f759		       d0 2b		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1493  f75b		       a5 c0		      LDA	GameStatus	;3
   1494  f75d		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1495  f75f		       d0 25		      BNE	SkipGameStart
   1496  f761		       a5 c5		      LDA	GameMode
   1497  f763		       c9 10		      CMP	#MAX_GAME_MODE
   1498  f765		       d0 0b		      BNE	SetGameRunning
   1499  f767		       a9 00		      LDA	#0
   1500  f769		       85 c5		      STA	GameMode
   1501  f76b		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1502  f76d		       85 bc		      STA	SwitchDebounceCounter
   1503  f76f		       4c 86 f7 	      JMP	SkipGameStart
   1504  f772				   SetGameRunning
   1505  f772		       e6 c0		      INC	GameStatus
   1506  f774		       a9 00		      LDA	#0	;
   1507  f776		       85 8c		      STA	FrameCount0
   1508  f778		       85 8d		      STA	FrameCount1
   1509  f77a		       a9 0a		      LDA	#10
   1510  f77c		       85 19		      STA	AUDV0
   1511  f77e		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1512  f780		       85 d5		      STA	ScoreFontColor
   1513  f782		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1514  f784		       85 d6		      STA	ScoreFontColorHoldChange
   1515  f786				   SkipGameStart
   1516  f786
   1517  f786				   ReadSwitches
   1518  f786		       a6 bc		      LDX	SwitchDebounceCounter
   1519  f788		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1520  f78a		       a9 01		      LDA	#%00000001
   1521  f78c		       2c 82 02 	      BIT	SWCHB
   1522  f78f		       d0 07		      BNE	SkipReset
   1523  f791		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1524  f793		       85 bc		      STA	SwitchDebounceCounter
   1525  f795		       4c c5 f7 	      JMP	OverScanWaitBeforeReset
   1526  f798				   SkipReset
   1527  f798
   1528  f798				   GameModeSelect
   1529  f798		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1530  f79a		       d0 1c		      BNE	SkipGameSelect
   1531  f79c		       20 1a f8 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1532  f79f				   ContinueGameSelect
   1533  f79f		       a9 02		      LDA	#%00000010
   1534  f7a1		       2c 82 02 	      BIT	SWCHB
   1535  f7a4		       d0 12		      BNE	SkipGameSelect
   1536  f7a6		       a6 c5		      LDX	GameMode
   1537  f7a8		       e0 10		      CPX	#MAX_GAME_MODE
   1538  f7aa		       f0 04		      BEQ	ResetGameMode
   1539  f7ac		       e8		      INX
   1540  f7ad		       4c b2 f7 	      JMP	StoreGameMode
   1541  f7b0				   ResetGameMode
   1542  f7b0		       a2 00		      LDX	#0
   1543  f7b2				   StoreGameMode
   1544  f7b2		       86 c5		      STX	GameMode
   1545  f7b4		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1546  f7b6		       85 bc		      STA	SwitchDebounceCounter
   1547  f7b8				   SkipGameSelect
   1548  f7b8		       4c bd f7 	      JMP	EndReadSwitches
   1549  f7bb				   DecrementSwitchDebounceCounter
   1550  f7bb		       c6 bc		      DEC	SwitchDebounceCounter
   1551  f7bd				   EndReadSwitches
   1552  f7bd
   1553  f7bd				   OverScanWait
   1554  f7bd		       ad 84 02 	      LDA	INTIM
   1555  f7c0		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1556  f7c2		       4c c7 f0 	      JMP	MainLoop
   1557  f7c5
   1558  f7c5				   OverScanWaitBeforeReset
   1559  f7c5		       ad 84 02 	      LDA	INTIM
   1560  f7c8		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1561  f7ca		       4c 12 f0 	      JMP	Start
   1562  f7cd
   1563  f7cd				   Subroutines
   1564  f7cd
   1565  f7cd				   ClearAll		; 52
   1566  f7cd		       a9 00		      LDA	#0	;2
   1567  f7cf		       85 1c		      STA	GRP1	;3
   1568  f7d1		       85 1f		      STA	ENABL	;3
   1569  f7d3		       85 1d		      STA	ENAM0	;3
   1570  f7d5		       85 1e		      STA	ENAM1	;3
   1571  f7d7		       85 84		      STA	GRP1Cache	;3
   1572  f7d9		       85 85		      STA	ENABLCache	;3
   1573  f7db		       85 86		      STA	ENAM0Cache	;3
   1574  f7dd		       85 87		      STA	ENAM1Cache	;3
   1575  f7df
   1576  f7df				   ClearPF		; 26
   1577  f7df		       a9 00		      LDA	#0	;2
   1578  f7e1				   ClearPFSkipLDA0
   1579  f7e1		       85 0d		      STA	PF0	;3
   1580  f7e3		       85 0e		      STA	PF1	;3
   1581  f7e5		       85 0f		      STA	PF2	;3	
   1582  f7e7		       85 81		      STA	PF0Cache	;3
   1583  f7e9		       85 82		      STA	PF1Cache	;3
   1584  f7eb		       85 83		      STA	PF2Cache	;3 
   1585  f7ed		       60		      RTS		;6
   1586  f7ee				   EndClearAll
   1587  f7ee
   1588  f7ee				   LoadAll		; 48
   1589  f7ee		       a5 81		      LDA	PF0Cache	;3
   1590  f7f0		       85 0d		      STA	PF0	;3
   1591  f7f2
   1592  f7f2		       a5 82		      LDA	PF1Cache	;3
   1593  f7f4		       85 0e		      STA	PF1	;3
   1594  f7f6
   1595  f7f6		       a5 83		      LDA	PF2Cache	;3
   1596  f7f8		       85 0f		      STA	PF2	;3
   1597  f7fa
   1598  f7fa		       a5 84		      LDA	GRP1Cache	;3
   1599  f7fc		       85 1c		      STA	GRP1	;3
   1600  f7fe
   1601  f7fe		       a5 85		      LDA	ENABLCache	;3
   1602  f800		       85 1f		      STA	ENABL	;3
   1603  f802
   1604  f802		       a5 86		      LDA	ENAM0Cache	;3
   1605  f804		       85 1d		      STA	ENAM0	;3
   1606  f806
   1607  f806		       a5 87		      LDA	ENAM1Cache	;3
   1608  f808		       85 1e		      STA	ENAM1	;3
   1609  f80a
   1610  f80a		       60		      RTS		;6
   1611  f80b				   EndLoadAll
   1612  f80b
   1613  f80b				   NextDifficulty
   1614  f80b		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1615  f80d		       29 01		      AND	#%00000001
   1616  f80f		       d0 24		      BNE	CheckRandomDifficulty
   1617  f811
   1618  f811		       a5 c4		      LDA	CurrentDifficulty
   1619  f813		       18		      CLC
   1620  f814		       69 01		      ADC	#1
   1621  f816		       29 03		      AND	#%00000011	; 0 to 3
   1622  f818		       85 c4		      STA	CurrentDifficulty
   1623  f81a
   1624  f81a				   ConfigureDifficulty
   1625  f81a		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1626  f81c		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1627  f81f		       85 c1		      STA	TrafficChance
   1628  f821		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1629  f824		       85 c3		      STA	TrafficColor
   1630  f826
   1631  f826		       a5 c5		      LDA	GameMode	;
   1632  f828		       29 01		      AND	#%00000001
   1633  f82a		       f0 03		      BEQ	UseNextDifficultyTime
   1634  f82c		       4c 30 f8 	      JMP	StoreDifficultyTime
   1635  f82f				   UseNextDifficultyTime
   1636  f82f		       c8		      INY
   1637  f830				   StoreDifficultyTime
   1638  f830		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1639  f833		       85 c2		      STA	CheckpointTime
   1640  f835
   1641  f835				   CheckRandomDifficulty
   1642  f835		       a5 c5		      LDA	GameMode
   1643  f837		       29 08		      AND	#%00001000	; Random difficulties
   1644  f839		       f0 09		      BEQ	ReturnFromNextDifficulty
   1645  f83b				   RandomDifficulty
   1646  f83b		       a6 8c		      LDX	FrameCount0
   1647  f83d		       bd 00 fe 	      LDA	AesTable,X
   1648  f840							;EOR TrafficChance, no need, lets make life simple
   1649  f840		       29 3f		      AND	#%00111111
   1650  f842		       85 c1		      STA	TrafficChance
   1651  f844
   1652  f844				   ReturnFromNextDifficulty
   1653  f844		       60		      RTS
   1654  f845				   EndNextDifficulty
   1655  f845
   1656  f845				   DefaultOffsets
   1657  f845		       a9 20		      LDA	#$20
   1658  f847		       85 96		      STA	TrafficOffset1 + 2
   1659  f849		       85 a6		      STA	OpTrafficOffset1 + 2
   1660  f84b		       a9 40		      LDA	#$40
   1661  f84d		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1662  f84f		       85 aa		      STA	OpTrafficOffset2 + 2
   1663  f851		       a9 60		      LDA	#$60
   1664  f853		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1665  f855		       85 ae		      STA	OpTrafficOffset3 + 2
   1666  f857		       a9 80		      LDA	#$80
   1667  f859		       60		      RTS
   1668  f85a
   1669  f85a				   PrintStaticText		; Preload X with the offset referent to StaticText
   1670  f85a		       bd 00 ff 	      LDA	StaticText,X
   1671  f85d		       85 d0		      STA	ScoreD0
   1672  f85f		       e8		      INX
   1673  f860		       bd 00 ff 	      LDA	StaticText,X
   1674  f863		       85 d1		      STA	ScoreD1
   1675  f865		       e8		      INX
   1676  f866		       bd 00 ff 	      LDA	StaticText,X
   1677  f869		       85 d2		      STA	ScoreD2
   1678  f86b		       e8		      INX
   1679  f86c		       bd 00 ff 	      LDA	StaticText,X
   1680  f86f		       85 d3		      STA	ScoreD3
   1681  f871		       e8		      INX
   1682  f872		       bd 00 ff 	      LDA	StaticText,X
   1683  f875		       85 d4		      STA	ScoreD4
   1684  f877		       60		      RTS
   1685  f878
   1686  f878				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1687  f878		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1688  f87a		       85 d5		      STA	ScoreFontColor
   1689  f87c		       a9 01		      LDA	#1
   1690  f87e		       85 d6		      STA	ScoreFontColorHoldChange
   1691  f880
   1692  f880		       a5 8d		      LDA	FrameCount1
   1693  f882		       29 07		      AND	#%00000111
   1694  f884		       85 b3		      STA	Tmp3
   1695  f886							;0 is Zelda Name, (default)
   1696  f886		       a9 01		      LDA	#1
   1697  f888		       c5 b3		      CMP	Tmp3
   1698  f88a		       f0 38		      BEQ	PrintZeldaDateLeft
   1699  f88c
   1700  f88c		       a9 02		      LDA	#2
   1701  f88e		       c5 b3		      CMP	Tmp3
   1702  f890		       f0 23		      BEQ	PrintPolvinhosLeft
   1703  f892
   1704  f892		       a9 03		      LDA	#3
   1705  f894		       c5 b3		      CMP	Tmp3
   1706  f896		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1707  f898
   1708  f898		       a9 04		      LDA	#4
   1709  f89a		       c5 b3		      CMP	Tmp3
   1710  f89c		       f0 1c		      BEQ	PrintIvonneLeft
   1711  f89e
   1712  f89e		       a9 05		      LDA	#5
   1713  f8a0		       c5 b3		      CMP	Tmp3
   1714  f8a2		       f0 2a		      BEQ	PrintIvonneDateLeft
   1715  f8a4
   1716  f8a4		       a9 06		      LDA	#6
   1717  f8a6		       c5 b3		      CMP	Tmp3
   1718  f8a8		       f0 15		      BEQ	PrintArtLeft
   1719  f8aa
   1720  f8aa		       a9 07		      LDA	#7
   1721  f8ac		       c5 b3		      CMP	Tmp3
   1722  f8ae		       f0 23		      BEQ	PrintLeonardoLeft
   1723  f8b0
   1724  f8b0				   PrintZeldaLeft
   1725  f8b0		       a2 28		      LDX	#<ZeldaTextLeft
   1726  f8b2		       4c d8 f8 	      JMP	ProcessPrintEasterEgg
   1727  f8b5				   PrintPolvinhosLeft
   1728  f8b5		       a2 3c		      LDX	#<PolvinhosTextLeft
   1729  f8b7		       4c d8 f8 	      JMP	ProcessPrintEasterEgg
   1730  f8ba				   PrintIvonneLeft
   1731  f8ba		       a2 50		      LDX	#<IvonneTextLeft
   1732  f8bc		       4c d8 f8 	      JMP	ProcessPrintEasterEgg
   1733  f8bf				   PrintArtLeft
   1734  f8bf		       a2 64		      LDX	#<PaperArtTextLeft
   1735  f8c1		       4c d8 f8 	      JMP	ProcessPrintEasterEgg
   1736  f8c4
   1737  f8c4				   PrintZeldaDateLeft
   1738  f8c4		       a2 32		      LDX	#<ZeldaDateLeft
   1739  f8c6		       4c d8 f8 	      JMP	ProcessPrintEasterEgg
   1740  f8c9				   PrintPolvinhosDateLeft
   1741  f8c9		       a2 46		      LDX	#<PolvinhosDateLeft
   1742  f8cb		       4c d8 f8 	      JMP	ProcessPrintEasterEgg
   1743  f8ce				   PrintIvonneDateLeft
   1744  f8ce		       a2 5a		      LDX	#<IvonneDateLeft
   1745  f8d0		       4c d8 f8 	      JMP	ProcessPrintEasterEgg
   1746  f8d3				   PrintLeonardoLeft
   1747  f8d3		       a2 6e		      LDX	#<LeonardoTextLeft
   1748  f8d5		       4c d8 f8 	      JMP	ProcessPrintEasterEgg
   1749  f8d8
   1750  f8d8				   ProcessPrintEasterEgg
   1751  f8d8		       a5 8c		      LDA	FrameCount0	;3
   1752  f8da		       29 01		      AND	#%00000001	;2
   1753  f8dc		       d0 03		      BNE	TranformIntoRightText
   1754  f8de		       4c e6 f8 	      JMP	PrintEasterEggText
   1755  f8e1				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1756  f8e1		       8a		      TXA
   1757  f8e2		       18		      CLC
   1758  f8e3		       69 05		      ADC	#HALF_TEXT_SIZE
   1759  f8e5		       aa		      TAX
   1760  f8e6
   1761  f8e6				   PrintEasterEggText
   1762  f8e6		       20 5a f8 	      JSR	PrintStaticText
   1763  f8e9		       60		      RTS
   1764  f8ea
   1765  f8ea				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1766  f8ea		       a2 00		      LDX	#0
   1767  f8ec		       a0 04		      LDY	#FONT_OFFSET
   1768  f8ee
   1769  f8ee				   ScoreLoop		; 20 
   1770  f8ee		       85 02		      STA	WSYNC	;2
   1771  f8f0
   1772  f8f0		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1773  f8f2		       85 0d		      STA	PF0	;3
   1774  f8f4
   1775  f8f4		       a5 82		      LDA	PF1Cache	;3
   1776  f8f6		       85 0e		      STA	PF1	;3
   1777  f8f8
   1778  f8f8		       a5 83		      LDA	PF2Cache	;3
   1779  f8fa		       85 0f		      STA	PF2	;3
   1780  f8fc
   1781  f8fc				   DrawScoreD0		; 15
   1782  f8fc		       a6 d0		      LDX	ScoreD0	; 3
   1783  f8fe		       bd 00 fd 	      LDA	Font,X	;4
   1784  f901		       85 81		      STA	PF0Cache	;3
   1785  f903		       c6 d0		      DEC	ScoreD0	;5
   1786  f905
   1787  f905				   DrawScoreD1		; 23	
   1788  f905		       a6 d1		      LDX	ScoreD1	; 3
   1789  f907		       bd 00 fd 	      LDA	Font,X	;4
   1790  f90a		       0a		      ASL		;2
   1791  f90b		       0a		      ASL		;2
   1792  f90c		       0a		      ASL		;2
   1793  f90d		       0a		      ASL		;2
   1794  f90e		       85 82		      STA	PF1Cache	;3
   1795  f910		       c6 d1		      DEC	ScoreD1	;5
   1796  f912
   1797  f912				   DrawScoreD2		; 20
   1798  f912		       a6 d2		      LDX	ScoreD2	; 3
   1799  f914		       bd 00 fd 	      LDA	Font,X	;4
   1800  f917		       29 0f		      AND	#%00001111	;2
   1801  f919		       05 82		      ORA	PF1Cache	;3
   1802  f91b		       85 82		      STA	PF1Cache	;3
   1803  f91d		       c6 d2		      DEC	ScoreD2	;5
   1804  f91f
   1805  f91f				   DrawScoreD3		; 23
   1806  f91f		       a6 d3		      LDX	ScoreD3	; 3
   1807  f921		       bd 00 fd 	      LDA	Font,X	;4
   1808  f924		       4a		      LSR		;2
   1809  f925		       4a		      LSR		;2
   1810  f926		       4a		      LSR		;2
   1811  f927		       4a		      LSR		;2
   1812  f928		       85 83		      STA	PF2Cache	;3
   1813  f92a		       c6 d3		      DEC	ScoreD3	;5
   1814  f92c
   1815  f92c				   DrawScoreD4		; 20
   1816  f92c		       a6 d4		      LDX	ScoreD4	; 3
   1817  f92e		       bd 00 fd 	      LDA	Font,X	;4
   1818  f931		       29 f0		      AND	#%11110000	;2
   1819  f933		       05 83		      ORA	PF2Cache	;3
   1820  f935		       85 83		      STA	PF2Cache	;3
   1821  f937		       c6 d4		      DEC	ScoreD4	;5
   1822  f939
   1823  f939
   1824  f939		       88		      DEY		;2
   1825  f93a		       10 b2		      BPL	ScoreLoop	;4
   1826  f93c
   1827  f93c		       85 02		      STA	WSYNC
   1828  f93e		       20 ee f7 	      JSR	LoadAll
   1829  f941		       60		      RTS		; 6
   1830  f942
   1831  f942				   PrintRightDecimalDigits
   1832  f942		       b9 00 00 	      LDA	0,Y
   1833  f945		       4a		      LSR
   1834  f946		       4a		      LSR
   1835  f947		       4a		      LSR
   1836  f948		       4a		      LSR
   1837  f949		       aa		      TAX
   1838  f94a		       bd be fd 	      LDA	FontLookup,X	;4
   1839  f94d		       85 d2		      STA	ScoreD2	;3
   1840  f94f
   1841  f94f		       b9 00 00 	      LDA	0,Y
   1842  f952		       29 0f		      AND	#%00001111
   1843  f954		       aa		      TAX
   1844  f955		       bd be fd 	      LDA	FontLookup,X	;4
   1845  f958		       85 d3		      STA	ScoreD3	;3
   1846  f95a
   1847  f95a		       c8		      INY
   1848  f95b		       b9 00 00 	      LDA	0,Y
   1849  f95e		       4a		      LSR
   1850  f95f		       4a		      LSR
   1851  f960		       4a		      LSR
   1852  f961		       4a		      LSR
   1853  f962		       aa		      TAX
   1854  f963		       bd be fd 	      LDA	FontLookup,X	;4
   1855  f966		       85 d0		      STA	ScoreD0	;3
   1856  f968
   1857  f968		       b9 00 00 	      LDA	0,Y
   1858  f96b		       29 0f		      AND	#%00001111
   1859  f96d		       aa		      TAX
   1860  f96e		       bd be fd 	      LDA	FontLookup,X	;4
   1861  f971		       85 d1		      STA	ScoreD1	;3
   1862  f973
   1863  f973		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1864  f975		       85 d4		      STA	ScoreD4
   1865  f977		       60		      RTS
   1866  f978
   1867  f978				   PrintLastLeftDecimalDigits
   1868  f978		       b9 00 00 	      LDA	0,Y
   1869  f97b		       4a		      LSR
   1870  f97c		       4a		      LSR
   1871  f97d		       4a		      LSR
   1872  f97e		       4a		      LSR
   1873  f97f		       aa		      TAX
   1874  f980		       bd be fd 	      LDA	FontLookup,X	;4
   1875  f983		       85 d3		      STA	ScoreD3	;3
   1876  f985		       b9 00 00 	      LDA	0,Y
   1877  f988		       29 0f		      AND	#%00001111
   1878  f98a		       aa		      TAX
   1879  f98b		       bd be fd 	      LDA	FontLookup,X	;4
   1880  f98e		       85 d4		      STA	ScoreD4	;3
   1881  f990		       60		      RTS
   1882  f991
   1883  f991				   PrintZerosLeft
   1884  f991		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1885  f993		       85 d2		      STA	ScoreD2
   1886  f995		       85 d3		      STA	ScoreD3
   1887  f997		       85 d4		      STA	ScoreD4
   1888  f999		       60		      RTS
   1889  f99a
   1890  f99a				   DrawGameOverScoreLine
   1891  f99a		       85 02		      STA	WSYNC
   1892  f99c		       20 ea f8 	      JSR	PrintScore
   1893  f99f		       85 02		      STA	WSYNC
   1894  f9a1		       85 02		      STA	WSYNC
   1895  f9a3		       20 df f7 	      JSR	ClearPF
   1896  f9a6		       60		      RTS
   1897  f9a7
   1898  f9a7				   DrawGameOverScreenLeft
   1899  f9a7		       85 02		      STA	WSYNC
   1900  f9a9		       20 df f7 	      JSR	ClearPF
   1901  f9ac
   1902  f9ac				   DrawTimerLeft
   1903  f9ac		       20 8b fa 	      JSR	Sleep8Lines
   1904  f9af		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1905  f9b1		       85 06		      STA	COLUP0
   1906  f9b3		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1907  f9b5		       85 d0		      STA	ScoreD0
   1908  f9b7		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1909  f9b9		       85 d1		      STA	ScoreD1
   1910  f9bb		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1911  f9bd		       85 d2		      STA	ScoreD2
   1912  f9bf		       a0 bf		      LDY	#TimeBcd2
   1913  f9c1		       85 02		      STA	WSYNC
   1914  f9c3		       20 78 f9 	      JSR	PrintLastLeftDecimalDigits
   1915  f9c6		       20 9a f9 	      JSR	DrawGameOverScoreLine
   1916  f9c9
   1917  f9c9				   DrawGlideTimerLeft
   1918  f9c9		       20 8b fa 	      JSR	Sleep8Lines
   1919  f9cc		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1920  f9ce		       85 06		      STA	COLUP0
   1921  f9d0		       85 02		      STA	WSYNC
   1922  f9d2		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1923  f9d4		       85 d0		      STA	ScoreD0
   1924  f9d6		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1925  f9d8		       85 d1		      STA	ScoreD1
   1926  f9da		       20 91 f9 	      JSR	PrintZerosLeft
   1927  f9dd		       20 9a f9 	      JSR	DrawGameOverScoreLine
   1928  f9e0
   1929  f9e0				   DrawHitCountLeft
   1930  f9e0		       20 8b fa 	      JSR	Sleep8Lines
   1931  f9e3		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1932  f9e5		       85 06		      STA	COLUP0
   1933  f9e7		       85 02		      STA	WSYNC
   1934  f9e9		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1935  f9eb		       85 d0		      STA	ScoreD0
   1936  f9ed		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1937  f9ef		       85 d1		      STA	ScoreD1
   1938  f9f1		       20 91 f9 	      JSR	PrintZerosLeft
   1939  f9f4		       20 9a f9 	      JSR	DrawGameOverScoreLine
   1940  f9f7
   1941  f9f7				   DrawCheckpointCountLeft
   1942  f9f7		       20 8b fa 	      JSR	Sleep8Lines
   1943  f9fa		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1944  f9fc		       85 06		      STA	COLUP0
   1945  f9fe		       85 02		      STA	WSYNC
   1946  fa00		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1947  fa02		       85 d0		      STA	ScoreD0
   1948  fa04		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1949  fa06		       85 d1		      STA	ScoreD1
   1950  fa08		       20 91 f9 	      JSR	PrintZerosLeft
   1951  fa0b		       20 9a f9 	      JSR	DrawGameOverScoreLine
   1952  fa0e
   1953  fa0e				   DrawGameVersionLeft
   1954  fa0e		       20 8b fa 	      JSR	Sleep8Lines
   1955  fa11		       a9 49		      LDA	#VERSION_COLOR
   1956  fa13		       85 06		      STA	COLUP0
   1957  fa15
   1958  fa15		       a5 c5		      LDA	GameMode
   1959  fa17		       aa		      TAX
   1960  fa18		       bd be fd 	      LDA	FontLookup,X	;4
   1961  fa1b		       85 d0		      STA	ScoreD0	;3
   1962  fa1d
   1963  fa1d		       a5 f0		      LDA	CurrentCarId
   1964  fa1f		       aa		      TAX
   1965  fa20		       bd be fd 	      LDA	FontLookup,X	;4
   1966  fa23		       85 d1		      STA	ScoreD1	;3
   1967  fa25
   1968  fa25		       a5 dd		      LDA	StartSWCHB
   1969  fa27		       29 40		      AND	#%01000000	; P0 difficulty
   1970  fa29		       49 40		      EOR	#%01000000	; Reverse bytes
   1971  fa2b		       2a		      ROL
   1972  fa2c		       2a		      ROL
   1973  fa2d		       2a		      ROL
   1974  fa2e		       18		      CLC
   1975  fa2f		       69 0a		      ADC	#10
   1976  fa31		       aa		      TAX
   1977  fa32		       bd be fd 	      LDA	FontLookup,X	;4
   1978  fa35		       85 d2		      STA	ScoreD2	;3
   1979  fa37
   1980  fa37		       a5 dd		      LDA	StartSWCHB
   1981  fa39		       29 80		      AND	#%10000000	; P0 difficulty
   1982  fa3b		       49 80		      EOR	#%10000000	; Reverse bytes
   1983  fa3d		       2a		      ROL
   1984  fa3e		       2a		      ROL
   1985  fa3f		       18		      CLC
   1986  fa40		       69 0a		      ADC	#10
   1987  fa42		       aa		      TAX
   1988  fa43		       bd be fd 	      LDA	FontLookup,X	;4
   1989  fa46		       85 d3		      STA	ScoreD3	;3
   1990  fa48
   1991  fa48		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1992  fa4a		       85 d4		      STA	ScoreD4
   1993  fa4c
   1994  fa4c		       20 9a f9 	      JSR	DrawGameOverScoreLine
   1995  fa4f
   1996  fa4f		       4c 68 fa 	      JMP	FinalizeDrawGameOver
   1997  fa52
   1998  fa52				   DrawGameOverScreenRight
   1999  fa52		       85 02		      STA	WSYNC
   2000  fa54		       20 df f7 	      JSR	ClearPF
   2001  fa57
   2002  fa57				   DrawVersionRight
   2003  fa57		       20 8b fa 	      JSR	Sleep8Lines
   2004  fa5a		       a9 49		      LDA	#VERSION_COLOR
   2005  fa5c		       85 07		      STA	COLUP1
   2006  fa5e		       85 02		      STA	WSYNC
   2007  fa60		       a2 78		      LDX	#<VersionText
   2008  fa62		       20 5a f8 	      JSR	PrintStaticText
   2009  fa65		       20 9a f9 	      JSR	DrawGameOverScoreLine
   2010  fa68
   2011  fa68				   FinalizeDrawGameOver
   2012  fa68		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2013  fa6a		       85 d5		      STA	ScoreFontColor
   2014  fa6c		       20 82 fa 	      JSR	Sleep4Lines
   2015  fa6f		       20 92 fa 	      JSR	Sleep32Lines
   2016  fa72		       20 92 fa 	      JSR	Sleep32Lines
   2017  fa75		       4c ad f6 	      JMP	PrepareOverscan
   2018  fa78
   2019  fa78				   WaitForVblankEnd
   2020  fa78		       ad 84 02 	      LDA	INTIM
   2021  fa7b		       d0 fb		      BNE	WaitForVblankEnd
   2022  fa7d		       85 02		      STA	WSYNC
   2023  fa7f		       85 01		      STA	VBLANK
   2024  fa81		       60		      RTS
   2025  fa82
   2026  fa82				   Sleep4Lines
   2027  fa82		       85 02		      STA	WSYNC
   2028  fa84		       85 02		      STA	WSYNC
   2029  fa86		       85 02		      STA	WSYNC
   2030  fa88		       85 02		      STA	WSYNC
   2031  fa8a		       60		      RTS
   2032  fa8b
   2033  fa8b				   Sleep8Lines
   2034  fa8b		       20 82 fa 	      JSR	Sleep4Lines
   2035  fa8e		       20 82 fa 	      JSR	Sleep4Lines
   2036  fa91		       60		      RTS
   2037  fa92
   2038  fa92				   Sleep32Lines
   2039  fa92		       20 8b fa 	      JSR	Sleep8Lines
   2040  fa95		       20 8b fa 	      JSR	Sleep8Lines
   2041  fa98		       20 8b fa 	      JSR	Sleep8Lines
   2042  fa9b		       20 8b fa 	      JSR	Sleep8Lines
   2043  fa9e		       60		      RTS
   2044  fa9f
   2045  fa9f				   ConfigureCarSprites
   2046  fa9f		       a5 8c		      LDA	FrameCount0
   2047  faa1		       29 01		      AND	#%00000001
   2048  faa3		       d0 0b		      BNE	LoadForRightScreenSprites
   2049  faa5				   LoadForLeftScreenSprites
   2050  faa5		       a5 f0		      LDA	CurrentCarId
   2051  faa7		       85 b0		      STA	Tmp0
   2052  faa9		       a5 f5		      LDA	CurrentOpponentCarId
   2053  faab		       85 b1		      STA	Tmp1
   2054  faad		       4c b8 fa 	      JMP	LoadCarSpritesFromIds
   2055  fab0				   LoadForRightScreenSprites
   2056  fab0		       a5 f0		      LDA	CurrentCarId
   2057  fab2		       85 b1		      STA	Tmp1
   2058  fab4		       a5 f5		      LDA	CurrentOpponentCarId
   2059  fab6		       85 b0		      STA	Tmp0
   2060  fab8
   2061  fab8				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   2062  fab8		       a4 b0		      LDY	Tmp0
   2063  faba		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   2064  fabd		       85 de		      STA	CarSpritePointerL
   2065  fabf		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   2066  fac2		       85 df		      STA	CarSpritePointerH
   2067  fac4				   ConfigureOpponentCarSprite
   2068  fac4		       a4 b1		      LDY	Tmp1
   2069  fac6		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   2070  fac9		       85 d9		      STA	EnemyCarSpritePointerL
   2071  facb		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   2072  face		       85 da		      STA	EnemyCarSpritePointerH
   2073  fad0		       60		      RTS
   2074  fad1
   2075  fad1							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2076  fc00					      org	$FC00
   2077  fc00				   QrCode1
   2078  fc00		       1f		      .byte.b	#%00011111
   2079  fc01		       10		      .byte.b	#%00010000
   2080  fc02		       17		      .byte.b	#%00010111
   2081  fc03		       17		      .byte.b	#%00010111
   2082  fc04		       17		      .byte.b	#%00010111
   2083  fc05		       10		      .byte.b	#%00010000
   2084  fc06		       1f		      .byte.b	#%00011111
   2085  fc07		       00		      .byte.b	#%00000000
   2086  fc08		       17		      .byte.b	#%00010111
   2087  fc09		       10		      .byte.b	#%00010000
   2088  fc0a		       1d		      .byte.b	#%00011101
   2089  fc0b		       16		      .byte.b	#%00010110
   2090  fc0c		       03		      .byte.b	#%00000011
   2091  fc0d		       19		      .byte.b	#%00011001
   2092  fc0e		       13		      .byte.b	#%00010011
   2093  fc0f		       1c		      .byte.b	#%00011100
   2094  fc10		       0b		      .byte.b	#%00001011
   2095  fc11		       00		      .byte.b	#%00000000
   2096  fc12		       1f		      .byte.b	#%00011111
   2097  fc13		       10		      .byte.b	#%00010000
   2098  fc14		       17		      .byte.b	#%00010111
   2099  fc15		       17		      .byte.b	#%00010111
   2100  fc16		       17		      .byte.b	#%00010111
   2101  fc17		       10		      .byte.b	#%00010000
   2102  fc18		       1f		      .byte.b	#%00011111
   2103  fc19
   2104  fc19				   QrCode2
   2105  fc19		       c3		      .byte.b	#%11000011
   2106  fc1a		       9a		      .byte.b	#%10011010
   2107  fc1b		       82		      .byte.b	#%10000010
   2108  fc1c		       da		      .byte.b	#%11011010
   2109  fc1d		       aa		      .byte.b	#%10101010
   2110  fc1e		       ca		      .byte.b	#%11001010
   2111  fc1f		       f3		      .byte.b	#%11110011
   2112  fc20		       78		      .byte.b	#%01111000
   2113  fc21		       df		      .byte.b	#%11011111
   2114  fc22		       fc		      .byte.b	#%11111100
   2115  fc23		       c7		      .byte.b	#%11000111
   2116  fc24		       98		      .byte.b	#%10011000
   2117  fc25		       23		      .byte.b	#%00100011
   2118  fc26		       b9		      .byte.b	#%10111001
   2119  fc27		       d2		      .byte.b	#%11010010
   2120  fc28		       30		      .byte.b	#%00110000
   2121  fc29		       eb		      .byte.b	#%11101011
   2122  fc2a		       28		      .byte.b	#%00101000
   2123  fc2b		       ab		      .byte.b	#%10101011
   2124  fc2c		       72		      .byte.b	#%01110010
   2125  fc2d		       fa		      .byte.b	#%11111010
   2126  fc2e		       7a		      .byte.b	#%01111010
   2127  fc2f		       32		      .byte.b	#%00110010
   2128  fc30		       3a		      .byte.b	#%00111010
   2129  fc31		       63		      .byte.b	#%01100011
   2130  fc32
   2131  fc32				   QrCode3
   2132  fc32		       98		      .byte.b	#%10011000
   2133  fc33		       c3		      .byte.b	#%11000011
   2134  fc34		       39		      .byte.b	#%00111001
   2135  fc35		       34		      .byte.b	#%00110100
   2136  fc36		       ff		      .byte.b	#%11111111
   2137  fc37		       71		      .byte.b	#%01110001
   2138  fc38		       d5		      .byte.b	#%11010101
   2139  fc39		       d1		      .byte.b	#%11010001
   2140  fc3a		       5f		      .byte.b	#%01011111
   2141  fc3b		       26		      .byte.b	#%00100110
   2142  fc3c		       2d		      .byte.b	#%00101101
   2143  fc3d		       e9		      .byte.b	#%11101001
   2144  fc3e		       d6		      .byte.b	#%11010110
   2145  fc3f		       26		      .byte.b	#%00100110
   2146  fc40		       ba		      .byte.b	#%10111010
   2147  fc41		       03		      .byte.b	#%00000011
   2148  fc42		       dd		      .byte.b	#%11011101
   2149  fc43		       e0		      .byte.b	#%11100000
   2150  fc44		       57		      .byte.b	#%01010111
   2151  fc45		       14		      .byte.b	#%00010100
   2152  fc46		       35		      .byte.b	#%00110101
   2153  fc47		       e5		      .byte.b	#%11100101
   2154  fc48		       b5		      .byte.b	#%10110101
   2155  fc49		       d4		      .byte.b	#%11010100
   2156  fc4a		       97		      .byte.b	#%10010111
   2157  fc4b
   2158  fc4b				   QrCode4
   2159  fc4b		       09		      .byte.b	#%00001001
   2160  fc4c		       0e		      .byte.b	#%00001110
   2161  fc4d		       0f		      .byte.b	#%00001111
   2162  fc4e		       0c		      .byte.b	#%00001100
   2163  fc4f		       0c		      .byte.b	#%00001100
   2164  fc50		       08		      .byte.b	#%00001000
   2165  fc51		       08		      .byte.b	#%00001000
   2166  fc52		       06		      .byte.b	#%00000110
   2167  fc53		       06		      .byte.b	#%00000110
   2168  fc54		       0b		      .byte.b	#%00001011
   2169  fc55		       0f		      .byte.b	#%00001111
   2170  fc56		       04		      .byte.b	#%00000100
   2171  fc57		       08		      .byte.b	#%00001000
   2172  fc58		       0f		      .byte.b	#%00001111
   2173  fc59		       09		      .byte.b	#%00001001
   2174  fc5a		       07		      .byte.b	#%00000111
   2175  fc5b		       05		      .byte.b	#%00000101
   2176  fc5c		       00		      .byte.b	#%00000000
   2177  fc5d		       0f		      .byte.b	#%00001111
   2178  fc5e		       08		      .byte.b	#%00001000
   2179  fc5f		       0b		      .byte.b	#%00001011
   2180  fc60		       0b		      .byte.b	#%00001011
   2181  fc61		       0b		      .byte.b	#%00001011
   2182  fc62		       08		      .byte.b	#%00001000
   2183  fc63		       0f		      .byte.b	#%00001111
   2184  fc64
   2185  fc64							; Moved here because of rom space.
   2186  fc64							; The only SBR in constants space
   2187  fc64				   DrawQrCode
   2188  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2189  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2190  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2191  fc6a		       85 0a		      STA	CTRLPF
   2192  fc6c		       20 cd f7 	      JSR	ClearAll	; To be 100 sure!
   2193  fc6f		       ad 82 02 	      LDA	SWCHB
   2194  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2195  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2196  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2197  fc78		       86 09		      STX	COLUBK
   2198  fc7a		       84 08		      STY	COLUPF
   2199  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2200  fc7f				   StoreReversedQrCode
   2201  fc7f		       86 08		      STX	COLUPF
   2202  fc81		       84 09		      STY	COLUBK
   2203  fc83
   2204  fc83				   ContinueQrCode
   2205  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2206  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2207  fc87		       20 78 fa 	      JSR	WaitForVblankEnd
   2208  fc8a		       20 8b fa 	      JSR	Sleep8Lines
   2209  fc8d		       20 8b fa 	      JSR	Sleep8Lines
   2210  fc90		       20 8b fa 	      JSR	Sleep8Lines
   2211  fc93
   2212  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2213  fc93		       85 02		      STA	WSYNC
   2214  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2215  fc98		       85 0e		      STA	PF1	;3
   2216  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2217  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2219  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2220  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2221  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2222  fcb5		       85 0e		      STA	PF1	;3
   2223  fcb7
   2224  fcb7		       ca		      DEX		;2
   2225  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2226  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2227  fcbc		       88		      DEY		;2
   2228  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2229  fcbf
   2230  fcbf				   EndQrCodeLoop
   2231  fcbf		       85 02		      STA	WSYNC	;
   2232  fcc1		       a9 00		      LDA	#0
   2233  fcc3		       85 0e		      STA	PF1	;3
   2234  fcc5		       85 0f		      STA	PF2	;3
   2235  fcc7
   2236  fcc7		       20 92 fa 	      JSR	Sleep32Lines
   2237  fcca		       4c ad f6 	      JMP	PrepareOverscan
   2238  fccd
   2239  fd00					      org	$FD00
   2240  fd00				   Font
   2241  fd00				   C0
   2242  fd00		       e7		      .byte.b	#%11100111	;
   2243  fd01		       a5		      .byte.b	#%10100101	; 
   2244  fd02		       a5		      .byte.b	#%10100101	; 
   2245  fd03		       a5		      .byte.b	#%10100101	; 
   2246  fd04		       e7		      .byte.b	#%11100111	;	
   2247  fd05				   C1
   2248  fd05		       e7		      .byte.b	#%11100111	;
   2249  fd06		       42		      .byte.b	#%01000010	; 
   2250  fd07		       42		      .byte.b	#%01000010	; 
   2251  fd08		       42		      .byte.b	#%01000010	; 
   2252  fd09		       66		      .byte.b	#%01100110	;
   2253  fd0a				   C2
   2254  fd0a		       e7		      .byte.b	#%11100111	;
   2255  fd0b		       24		      .byte.b	#%00100100	; 
   2256  fd0c		       e7		      .byte.b	#%11100111	; 
   2257  fd0d		       81		      .byte.b	#%10000001	; 
   2258  fd0e		       e7		      .byte.b	#%11100111	;
   2259  fd0f				   C3
   2260  fd0f		       e7		      .byte.b	#%11100111	;
   2261  fd10		       81		      .byte.b	#%10000001	; 
   2262  fd11		       e7		      .byte.b	#%11100111	; 
   2263  fd12		       81		      .byte.b	#%10000001	; 
   2264  fd13		       e7		      .byte.b	#%11100111	;
   2265  fd14				   C4
   2266  fd14		       81		      .byte.b	#%10000001	;
   2267  fd15		       81		      .byte.b	#%10000001	; 
   2268  fd16		       e7		      .byte.b	#%11100111	; 
   2269  fd17		       a5		      .byte.b	#%10100101	; 
   2270  fd18		       a5		      .byte.b	#%10100101	;
   2271  fd19				   C5
   2272  fd19		       e7		      .byte.b	#%11100111	;
   2273  fd1a		       81		      .byte.b	#%10000001	; 
   2274  fd1b		       e7		      .byte.b	#%11100111	; 
   2275  fd1c		       24		      .byte.b	#%00100100	; 
   2276  fd1d		       e7		      .byte.b	#%11100111	;
   2277  fd1e				   C6
   2278  fd1e		       e7		      .byte.b	#%11100111	;
   2279  fd1f		       a5		      .byte.b	#%10100101	; 
   2280  fd20		       e7		      .byte.b	#%11100111	; 
   2281  fd21		       24		      .byte.b	#%00100100	; 
   2282  fd22		       e7		      .byte.b	#%11100111	;
   2283  fd23				   C7
   2284  fd23		       81		      .byte.b	#%10000001	;
   2285  fd24		       81		      .byte.b	#%10000001	; 
   2286  fd25		       81		      .byte.b	#%10000001	; 
   2287  fd26		       81		      .byte.b	#%10000001	; 
   2288  fd27		       e7		      .byte.b	#%11100111	;
   2289  fd28				   C8
   2290  fd28		       e7		      .byte.b	#%11100111	;
   2291  fd29		       a5		      .byte.b	#%10100101	; 
   2292  fd2a		       e7		      .byte.b	#%11100111	; 
   2293  fd2b		       a5		      .byte.b	#%10100101	; 
   2294  fd2c		       e7		      .byte.b	#%11100111	;
   2295  fd2d				   C9
   2296  fd2d		       e7		      .byte.b	#%11100111	;
   2297  fd2e		       81		      .byte.b	#%10000001	; 
   2298  fd2f		       e7		      .byte.b	#%11100111	; 
   2299  fd30		       a5		      .byte.b	#%10100101	; 
   2300  fd31		       e7		      .byte.b	#%11100111	;
   2301  fd32				   CA
   2302  fd32		       a5		      .byte.b	#%10100101	;
   2303  fd33		       a5		      .byte.b	#%10100101	; 
   2304  fd34		       e7		      .byte.b	#%11100111	; 
   2305  fd35		       a5		      .byte.b	#%10100101	; 
   2306  fd36		       e7		      .byte.b	#%11100111	;
   2307  fd37				   CB
   2308  fd37		       66		      .byte.b	#%01100110	;
   2309  fd38		       a5		      .byte.b	#%10100101	; 
   2310  fd39		       66		      .byte.b	#%01100110	; 
   2311  fd3a		       a5		      .byte.b	#%10100101	;
   2312  fd3b		       66		      .byte.b	#%01100110	;
   2313  fd3c				   CC
   2314  fd3c		       e7		      .byte.b	#%11100111	;
   2315  fd3d		       24		      .byte.b	#%00100100	; 
   2316  fd3e		       24		      .byte.b	#%00100100	; 
   2317  fd3f		       24		      .byte.b	#%00100100	;
   2318  fd40		       e7		      .byte.b	#%11100111	;
   2319  fd41
   2320  fd41				   CD
   2321  fd41		       66		      .byte.b	#%01100110	;
   2322  fd42		       a5		      .byte.b	#%10100101	; 
   2323  fd43		       a5		      .byte.b	#%10100101	; 
   2324  fd44		       a5		      .byte.b	#%10100101	;
   2325  fd45		       66		      .byte.b	#%01100110	;
   2326  fd46
   2327  fd46				   CE
   2328  fd46		       e7		      .byte.b	#%11100111	;
   2329  fd47		       24		      .byte.b	#%00100100	; 
   2330  fd48		       e7		      .byte.b	#%11100111	; 
   2331  fd49		       24		      .byte.b	#%00100100	; 
   2332  fd4a		       e7		      .byte.b	#%11100111	;
   2333  fd4b
   2334  fd4b				   CF
   2335  fd4b		       24		      .byte.b	#%00100100	;
   2336  fd4c		       24		      .byte.b	#%00100100	; 
   2337  fd4d		       e7		      .byte.b	#%11100111	; 
   2338  fd4e		       24		      .byte.b	#%00100100	; 
   2339  fd4f		       e7		      .byte.b	#%11100111	;
   2340  fd50
   2341  fd50				   CG
   2342  fd50		       c3		      .byte.b	#%11000011	;
   2343  fd51		       a5		      .byte.b	#%10100101	; 
   2344  fd52		       a5		      .byte.b	#%10100101	; 
   2345  fd53		       24		      .byte.b	#%00100100	; 
   2346  fd54		       c3		      .byte.b	#%11000011	;	
   2347  fd55
   2348  fd55				   CH
   2349  fd55		       a5		      .byte.b	#%10100101	;
   2350  fd56		       a5		      .byte.b	#%10100101	; 
   2351  fd57		       e7		      .byte.b	#%11100111	; 
   2352  fd58		       a5		      .byte.b	#%10100101	; 
   2353  fd59		       a5		      .byte.b	#%10100101	;
   2354  fd5a
   2355  fd5a				   CK
   2356  fd5a		       a5		      .byte.b	#%10100101	;
   2357  fd5b		       a5		      .byte.b	#%10100101	; 
   2358  fd5c		       66		      .byte.b	#%01100110	; 
   2359  fd5d		       a5		      .byte.b	#%10100101	; 
   2360  fd5e		       a5		      .byte.b	#%10100101	;
   2361  fd5f
   2362  fd5f				   CL
   2363  fd5f		       e7		      .byte.b	#%11100111	;
   2364  fd60		       24		      .byte.b	#%00100100	; 
   2365  fd61		       24		      .byte.b	#%00100100	; 
   2366  fd62		       24		      .byte.b	#%00100100	; 
   2367  fd63		       24		      .byte.b	#%00100100	;
   2368  fd64
   2369  fd64				   CI
   2370  fd64		       42		      .byte.b	#%01000010	;
   2371  fd65		       42		      .byte.b	#%01000010	; 
   2372  fd66		       42		      .byte.b	#%01000010	; 
   2373  fd67		       42		      .byte.b	#%01000010	; 
   2374  fd68		       42		      .byte.b	#%01000010	;
   2375  fd69
   2376  fd69				   CM
   2377  fd69		       a5		      .byte.b	#%10100101	;
   2378  fd6a		       a5		      .byte.b	#%10100101	; 
   2379  fd6b		       a5		      .byte.b	#%10100101	; 
   2380  fd6c		       e7		      .byte.b	#%11100111	; 
   2381  fd6d		       a5		      .byte.b	#%10100101	;
   2382  fd6e
   2383  fd6e				   CN
   2384  fd6e		       a5		      .byte.b	#%10100101	;
   2385  fd6f		       a5		      .byte.b	#%10100101	; 
   2386  fd70		       a5		      .byte.b	#%10100101	; 
   2387  fd71		       a5		      .byte.b	#%10100101	; 
   2388  fd72		       66		      .byte.b	#%01100110	;	
   2389  fd73
   2390  fd73
   2391  fd73				   CO
   2392  fd73		       42		      .byte.b	#%01000010	;
   2393  fd74		       a5		      .byte.b	#%10100101	; 
   2394  fd75		       a5		      .byte.b	#%10100101	; 
   2395  fd76		       a5		      .byte.b	#%10100101	; 
   2396  fd77		       42		      .byte.b	#%01000010	;	
   2397  fd78
   2398  fd78				   CP
   2399  fd78		       24		      .byte.b	#%00100100	;
   2400  fd79		       24		      .byte.b	#%00100100	; 
   2401  fd7a		       e7		      .byte.b	#%11100111	; 
   2402  fd7b		       a5		      .byte.b	#%10100101	; 
   2403  fd7c		       e7		      .byte.b	#%11100111	;
   2404  fd7d
   2405  fd7d				   CR
   2406  fd7d		       a5		      .byte.b	#%10100101	;
   2407  fd7e		       a5		      .byte.b	#%10100101	; 
   2408  fd7f		       66		      .byte.b	#%01100110	; 
   2409  fd80		       a5		      .byte.b	#%10100101	; 
   2410  fd81		       66		      .byte.b	#%01100110	;
   2411  fd82
   2412  fd82				   CS
   2413  fd82		       66		      .byte.b	#%01100110	;
   2414  fd83		       81		      .byte.b	#%10000001	; 
   2415  fd84		       42		      .byte.b	#%01000010	; 
   2416  fd85		       24		      .byte.b	#%00100100	; 
   2417  fd86		       c3		      .byte.b	#%11000011	;
   2418  fd87
   2419  fd87				   CT
   2420  fd87		       42		      .byte.b	#%01000010	;
   2421  fd88		       42		      .byte.b	#%01000010	; 
   2422  fd89		       42		      .byte.b	#%01000010	; 
   2423  fd8a		       42		      .byte.b	#%01000010	; 
   2424  fd8b		       e7		      .byte.b	#%11100111	;
   2425  fd8c
   2426  fd8c				   CV
   2427  fd8c		       42		      .byte.b	#%01000010	;
   2428  fd8d		       a5		      .byte.b	#%10100101	; 
   2429  fd8e		       a5		      .byte.b	#%10100101	; 
   2430  fd8f		       a5		      .byte.b	#%10100101	; 
   2431  fd90		       a5		      .byte.b	#%10100101	;	
   2432  fd91
   2433  fd91				   CY
   2434  fd91		       42		      .byte.b	#%01000010	;
   2435  fd92		       42		      .byte.b	#%01000010	; 
   2436  fd93		       42		      .byte.b	#%01000010	; 
   2437  fd94		       a5		      .byte.b	#%10100101	; 
   2438  fd95		       a5		      .byte.b	#%10100101	;
   2439  fd96
   2440  fd96				   CW
   2441  fd96		       a5		      .byte.b	#%10100101	;
   2442  fd97		       e7		      .byte.b	#%11100111	; 
   2443  fd98		       a5		      .byte.b	#%10100101	; 
   2444  fd99		       a5		      .byte.b	#%10100101	; 
   2445  fd9a		       a5		      .byte.b	#%10100101	;
   2446  fd9b
   2447  fd9b				   CZ
   2448  fd9b		       e7		      .byte.b	#%11100111	;
   2449  fd9c		       24		      .byte.b	#%00100100	; 
   2450  fd9d		       42		      .byte.b	#%01000010	; 
   2451  fd9e		       81		      .byte.b	#%10000001	; 
   2452  fd9f		       e7		      .byte.b	#%11100111	;
   2453  fda0
   2454  fda0				   Pipe
   2455  fda0		       42		      .byte.b	#%01000010	;
   2456  fda1		       00		      .byte.b	#%00000000	; 
   2457  fda2		       42		      .byte.b	#%01000010	; 
   2458  fda3		       00		      .byte.b	#%00000000	; 
   2459  fda4		       42		      .byte.b	#%01000010	;
   2460  fda5
   2461  fda5				   Exclamation
   2462  fda5		       42		      .byte.b	#%01000010	;
   2463  fda6		       00		      .byte.b	#%00000000	; 
   2464  fda7		       42		      .byte.b	#%01000010	; 
   2465  fda8		       42		      .byte.b	#%01000010	; 
   2466  fda9		       42		      .byte.b	#%01000010	;
   2467  fdaa
   2468  fdaa				   Dot
   2469  fdaa		       42		      .byte.b	#%01000010	;
   2470  fdab		       42		      .byte.b	#%01000010	; 
   2471  fdac		       00		      .byte.b	#%00000000	; 
   2472  fdad		       00		      .byte.b	#%00000000	; 
   2473  fdae		       00		      .byte.b	#%00000000	;
   2474  fdaf
   2475  fdaf				   Colon
   2476  fdaf		       42		      .byte.b	#%01000010	;
   2477  fdb0		       42		      .byte.b	#%01000010	; 
   2478  fdb1		       00		      .byte.b	#%00000000	; 
   2479  fdb2		       42		      .byte.b	#%01000010	; 
   2480  fdb3		       42		      .byte.b	#%01000010	;
   2481  fdb4
   2482  fdb4				   Triangle
   2483  fdb4		       81		      .byte.b	#%10000001	;
   2484  fdb5		       c3		      .byte.b	#%11000011	; 
   2485  fdb6		       e7		      .byte.b	#%11100111	; 
   2486  fdb7		       c3		      .byte.b	#%11000011	; 
   2487  fdb8		       81		      .byte.b	#%10000001	;
   2488  fdb9
   2489  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2490  fdb9		       00		      .byte.b	#0	;
   2491  fdba		       00		      .byte.b	#0	;
   2492  fdbb		       00		      .byte.b	#0	;
   2493  fdbc		       00		      .byte.b	#0	;
   2494  fdbd		       00		      .byte.b	#0	;
   2495  fdbe
   2496  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2497  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2498  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2499  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2500  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2501  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2502  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2503  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2504  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2505  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2506  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2507  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2508  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2509  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2510  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2511  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2512  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2513  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2514  fdcf
   2515  fdcf				   EngineSoundType
   2516  fdcf		       02		      .byte.b	#2
   2517  fdd0		       02		      .byte.b	#2
   2518  fdd1		       0e		      .byte.b	#14
   2519  fdd2		       06		      .byte.b	#6
   2520  fdd3		       06		      .byte.b	#6
   2521  fdd4		       0e		      .byte.b	#14
   2522  fdd5
   2523  fdd5				   EngineBaseFrequence
   2524  fdd5		       1f		      .byte.b	#31
   2525  fdd6		       15		      .byte.b	#21
   2526  fdd7		       14		      .byte.b	#20
   2527  fdd8		       1f		      .byte.b	#31
   2528  fdd9		       16		      .byte.b	#22
   2529  fdda		       03		      .byte.b	#3
   2530  fddb
   2531  fddb				   TachometerSizeLookup1
   2532  fddb		       1f		      .byte.b	#%00011111
   2533  fddc		       3f		      .byte.b	#%00111111
   2534  fddd		       7f		      .byte.b	#%01111111
   2535  fdde		       ff		      .byte.b	#%11111111
   2536  fddf		       ff		      .byte.b	#%11111111
   2537  fde0		       ff		      .byte.b	#%11111111
   2538  fde1		       ff		      .byte.b	#%11111111
   2539  fde2		       ff		      .byte.b	#%11111111
   2540  fde3
   2541  fde3				   TachometerSizeLookup2
   2542  fde3		       00		      .byte.b	#%00000000
   2543  fde4		       00		      .byte.b	#%00000000
   2544  fde5		       00		      .byte.b	#%00000000
   2545  fde6		       00		      .byte.b	#%00000000
   2546  fde7		       80		      .byte.b	#%10000000
   2547  fde8		       c0		      .byte.b	#%11000000
   2548  fde9		       e0		      .byte.b	#%11100000
   2549  fdea		       f0		      .byte.b	#%11110000
   2550  fdeb
   2551  fdeb				   TachometerGearLookup
   2552  fdeb		       01		      .byte.b	#%00000001
   2553  fdec		       02		      .byte.b	#%00000010
   2554  fded		       04		      .byte.b	#%00000100
   2555  fdee		       08		      .byte.b	#%00001000
   2556  fdef		       10		      .byte.b	#%00010000
   2557  fdf0		       30		      .byte.b	#%00110000
   2558  fdf1
   2559  fe00					      org	$FE00
   2560  fe00				   AesTable
   2561  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2562  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2563  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2564  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2565  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2566  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2567  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2568  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2569  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2570  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2571  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2572  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2573  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2574  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2575  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2576  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2577  ff00
   2578  ff00							; From FF00 to FFFB (122 bytes) to use here
   2579  ff00
   2580  ff00				   StaticText		; All static text must be on the same MSB block. 
   2581  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2582  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2583  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2584  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2585  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2586  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2587  ff05
   2588  ff05				   HellwayLeftText
   2589  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2590  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2591  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2592  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2593  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2594  ff0a
   2595  ff0a				   HellwayRightText
   2596  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2597  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2598  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2599  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2600  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2601  ff0f
   2602  ff0f				   OpbText
   2603  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2604  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2605  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2606  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2607  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2608  ff14
   2609  ff14				   YearText
   2610  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2611  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2612  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2613  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2614  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2615  ff19
   2616  ff19				   GameText
   2617  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2618  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2619  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2620  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2621  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2622  ff1e
   2623  ff1e				   OverText
   2624  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2625  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2626  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2627  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2628  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2629  ff23				   GoText
   2630  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2631  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2632  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2633  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2634  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2635  ff28
   2636  ff28				   ZeldaTextLeft
   2637  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2638  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2639  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2640  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2641  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2642  ff2d
   2643  ff2d				   ZeldaTextRight
   2644  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2645  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2646  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2647  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2648  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2649  ff32
   2650  ff32				   ZeldaDateLeft
   2651  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2652  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2653  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2654  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2655  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2656  ff37
   2657  ff37				   ZeldaDateRight
   2658  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2659  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2660  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2661  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2662  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2663  ff3c
   2664  ff3c				   PolvinhosTextLeft
   2665  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2666  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2667  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2668  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2669  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2670  ff41
   2671  ff41				   PolvinhosTextRight
   2672  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2673  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2674  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2675  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2676  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2677  ff46
   2678  ff46				   PolvinhosDateLeft
   2679  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2680  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2681  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2682  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2683  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2684  ff4b
   2685  ff4b				   PolvinhosDateRight
   2686  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2687  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2688  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2689  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2690  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2691  ff50
   2692  ff50				   IvonneTextLeft
   2693  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2694  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2695  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2696  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2697  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2698  ff55
   2699  ff55				   IvonneTextRight
   2700  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2701  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2702  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2703  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2704  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2705  ff5a
   2706  ff5a				   IvonneDateLeft
   2707  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2708  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2709  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2710  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2711  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2712  ff5f
   2713  ff5f				   IvonneDateRight
   2714  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2715  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2716  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2717  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2718  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2719  ff64
   2720  ff64				   PaperArtTextLeft
   2721  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2722  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2723  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2724  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2725  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2726  ff69
   2727  ff69				   PaperArtTextRight
   2728  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2729  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2730  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2731  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2732  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2733  ff6e
   2734  ff6e				   LeonardoTextLeft
   2735  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2736  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2737  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2738  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2739  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2740  ff73
   2741  ff73				   LeonardoTextRight
   2742  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2743  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2744  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2745  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2746  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2747  ff78
   2748  ff78				   VersionText
   2749  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2750  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2751  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2752  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2753  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2754  ff7d
   2755  ff7d
   2756  ff7d				   EndStaticText
   2757  ff7d
   2758  ff7d				   CarSprite0		; Upside down, Original Car
   2759  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2760  ff85				   CarSprite0NoPadding
   2761  ff85		       7e		      .byte.b	#%01111110
   2762  ff86		       24		      .byte.b	#%00100100
   2763  ff87		       bd		      .byte.b	#%10111101
   2764  ff88		       3c		      .byte.b	#%00111100
   2765  ff89		       bd		      .byte.b	#%10111101
   2766  ff8a		       3c		      .byte.b	#%00111100
   2767  ff8b
   2768  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2769  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2770  ff93				   CarSprite1NoPadding
   2771  ff93		       bd		      .byte.b	#%10111101
   2772  ff94		       7e		      .byte.b	#%01111110
   2773  ff95		       5a		      .byte.b	#%01011010
   2774  ff96		       66		      .byte.b	#%01100110
   2775  ff97		       bd		      .byte.b	#%10111101
   2776  ff98		       3c		      .byte.b	#%00111100
   2777  ff99
   2778  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2779  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2780  ffa1				   CarSprite2NoPadding
   2781  ffa1		       7e		      .byte.b	#%01111110
   2782  ffa2		       a5		      .byte.b	#%10100101
   2783  ffa3		       42		      .byte.b	#%01000010
   2784  ffa4		       42		      .byte.b	#%01000010
   2785  ffa5		       bd		      .byte.b	#%10111101
   2786  ffa6		       7e		      .byte.b	#%01111110
   2787  ffa7
   2788  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2789  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2790  ffaf				   CarSprite3NoPadding
   2791  ffaf		       3c		      .byte.b	#%00111100
   2792  ffb0		       db		      .byte.b	#%11011011
   2793  ffb1		       db		      .byte.b	#%11011011
   2794  ffb2		       3c		      .byte.b	#%00111100
   2795  ffb3		       5a		      .byte.b	#%01011010
   2796  ffb4		       3c		      .byte.b	#%00111100
   2797  ffb5
   2798  ffb5				   TrafficSpeeds
   2799  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2800  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2801  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2802  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2803  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2804  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2805  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2806  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2807  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2808  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2809  ffbf				   TrafficSpeedsHighDelta
   2810  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2811  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2812  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2813  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2814  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2815  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2816  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2817  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2818  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2819  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2820  ffc9
   2821  ffc9				   CarIdToSpriteAddressL
   2822  ffc9		       7d		      .byte.b	#<CarSprite0
   2823  ffca		       8b		      .byte.b	#<CarSprite1
   2824  ffcb		       99		      .byte.b	#<CarSprite2
   2825  ffcc		       a7		      .byte.b	#<CarSprite3
   2826  ffcd
   2827  ffcd				   CarIdToSpriteAddressH
   2828  ffcd		       ff		      .byte.b	#>CarSprite0
   2829  ffce		       ff		      .byte.b	#>CarSprite1
   2830  ffcf		       ff		      .byte.b	#>CarSprite2
   2831  ffd0		       ff		      .byte.b	#>CarSprite3
   2832  ffd1
   2833  ffd1				   EnemyCarIdToSpriteAddressL
   2834  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2835  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2836  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2837  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2838  ffd5
   2839  ffd5				   EnemyCarIdToSpriteAddressH
   2840  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2841  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2842  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2843  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2844  ffd9
   2845  ffd9				   CarIdToAccelerateSpeed
   2846  ffd9		       80		      .byte.b	#128
   2847  ffda		       c0		      .byte.b	#192
   2848  ffdb		       60		      .byte.b	#96
   2849  ffdc		       c0		      .byte.b	#192
   2850  ffdd
   2851  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2852  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2853  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2854  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2855  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2856  ffe1
   2857  ffe1				   CarIdToMaxSpeedL
   2858  ffe1		       80		      .byte.b	#$80
   2859  ffe2		       00		      .byte.b	#$00	; One less gear
   2860  ffe3		       80		      .byte.b	#$80
   2861  ffe4		       80		      .byte.b	#$80
   2862  ffe5
   2863  ffe5				   CarIdToMaxGear
   2864  ffe5		       05		      .byte.b	#5
   2865  ffe6		       04		      .byte.b	#4	; One less gear
   2866  ffe7		       05		      .byte.b	#5
   2867  ffe8		       05		      .byte.b	#5
   2868  ffe9
   2869  ffe9				   GearToBreakSpeedTable
   2870  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2871  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2872  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2873  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2874  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2875  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2876  ffef
   2877  ffef				   TrafficColorTable
   2878  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2879  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2880  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2881  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2882  fff3
   2883  fff3				   TrafficChanceTable
   2884  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2885  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2886  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2887  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2888  fff7
   2889  fff7				   TrafficTimeTable
   2890  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2891  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2892  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2893  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2894  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2895  fffc
   2896  fffc
   2897  fffc					      org	$FFFC
   2898  fffc		       00 f0		      .word.w	BeforeStart
   2899  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
