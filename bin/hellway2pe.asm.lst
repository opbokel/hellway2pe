------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     58  f000
     59  f000		       00 f9	   PLAYER0_COLOR =	$F9
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 08	   ENGINE_VOLUME =	8
    103  f000
    104  f000		       00 08	   CAR_SIZE   =	8
    105  f000
    106  f000		       00 80	   GRP0Cache  =	$80
    107  f000		       00 81	   PF0Cache   =	$81
    108  f000		       00 82	   PF1Cache   =	$82
    109  f000		       00 83	   PF2Cache   =	$83
    110  f000		       00 84	   GRP1Cache  =	$84
    111  f000		       00 85	   ENABLCache =	$85
    112  f000		       00 86	   ENAM0Cache =	$86
    113  f000		       00 87	   ENAM1Cache =	$87
    114  f000
    115  f000		       00 8c	   FrameCount0 =	$8C	;
    116  f000		       00 8d	   FrameCount1 =	$8D	;
    117  f000
    118  f000		       00 8e	   CollisionCounter =	$8E
    119  f000		       00 8f	   OpCollisionCounter =	$8F
    120  f000
    121  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    122  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    123  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    124  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    125  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    126  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    127  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    128  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    129  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    130  f000
    131  f000							;Temporary variables, multiple uses
    132  f000		       00 b0	   Tmp0       =	$B0
    133  f000		       00 b1	   Tmp1       =	$B1
    134  f000		       00 b2	   Tmp2       =	$B2
    135  f000		       00 b3	   Tmp3       =	$B3
    136  f000		       00 b4	   Tmp4       =	$B4
    137  f000		       00 b5	   Tmp5       =	$B5
    138  f000
    139  f000		       00 b6	   Player0X   =	$B6
    140  f000		       00 b7	   Player1X   =	$B7
    141  f000		       00 b8	   CountdownTimer =	$B8
    142  f000		       00 b9	   OpCountdownTimer =	$B9
    143  f000		       00 ba	   Traffic0Msb =	$BA
    144  f000		       00 bb	   OpTraffic0Msb =	$BB
    145  f000		       00 bc	   SwitchDebounceCounter =	$BC
    146  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    147  f000		       00 be	   TrafficChance =	$BE
    148  f000		       00 bf	   OpTrafficChance =	$BF
    149  f000
    150  f000		       00 c0	   CheckpointTime =	$C0
    151  f000		       00 c1	   OpCheckpointTime =	$C1
    152  f000		       00 c2	   TrafficColor =	$C2
    153  f000		       00 c3	   OpTrafficColor =	$C3
    154  f000		       00 c4	   CurrentDifficulty =	$C4
    155  f000		       00 c5	   OpCurrentDifficulty =	$C5
    156  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    157  f000
    158  f000		       00 c7	   CurrentCarId =	$C7
    159  f000		       00 c8	   OpCurrentCarId =	$C8
    160  f000
    161  f000		       00 c9	   ScoreFontColor =	$C9
    162  f000		       00 ca	   OpScoreFontColor =	$CA
    163  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    164  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    165  f000		       00 cd	   NextCheckpoint =	$CD
    166  f000		       00 ce	   OpNextCheckpoint =	$CE
    167  f000		       00 cf	   OpponentLine =	$CF
    168  f000
    169  f000		       00 d0	   ScoreD0    =	$D0
    170  f000		       00 d1	   ScoreD1    =	$D1
    171  f000		       00 d2	   ScoreD2    =	$D2
    172  f000		       00 d3	   ScoreD3    =	$D3
    173  f000		       00 d4	   ScoreD4    =	$D4
    174  f000
    175  f000		       00 d5	   Gear       =	$D5
    176  f000		       00 d6	   OpGear     =	$D6
    177  f000
    178  f000		       00 d7	   CarSpritePointerL =	$D7
    179  f000		       00 d8	   CarSpritePointerH =	$D8
    180  f000
    181  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    182  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    183  f000
    184  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    185  f000
    186  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    187  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    188  f000
    189  f000		       00 de	   Player0SpeedL =	$DE
    190  f000		       00 df	   Player1SpeedL =	$DF
    191  f000		       00 f0	   Player0SpeedH =	$F0
    192  f000		       00 f1	   Player1SpeedH =	$F1
    193  f000
    194  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    195  f000
    196  f000							;generic start up stuff, put zero in almost all...
    197  f000				   BeforeStart		;All variables that are kept on game reset or select
    198  f000		       a0 00		      LDY	#0
    199  f002		       84 bc		      STY	SwitchDebounceCounter
    200  f004		       84 c4		      STY	CurrentDifficulty
    201  f006		       84 c5		      STY	OpCurrentDifficulty
    202  f008		       84 bd		      STY	GameStatus
    203  f00a		       84 c7		      STY	CurrentCarId
    204  f00c		       84 c8		      STY	OpCurrentCarId
    205  f00e		       a0 10		      LDY	#16
    206  f010		       84 c6		      STY	GameMode
    207  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    208  f014
    209  f014				   Start
    210  f014		       a9 02		      LDA	#2
    211  f016		       85 00		      STA	VSYNC
    212  f018		       85 02		      STA	WSYNC
    213  f01a		       85 02		      STA	WSYNC
    214  f01c		       85 02		      STA	WSYNC
    215  f01e		       a9 00		      LDA	#0	;2
    216  f020		       85 00		      STA	VSYNC	;3
    217  f022
    218  f022		       78		      SEI
    219  f023		       d8		      CLD
    220  f024		       a2 ff		      LDX	#$FF
    221  f026		       9a		      TXS
    222  f027
    223  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    224  f029				   CleanMem
    225  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    226  f02b		       f0 1a		      BEQ	SkipClean
    227  f02d		       e0 c6		      CPX	#GameMode
    228  f02f		       f0 16		      BEQ	SkipClean
    229  f031		       e0 c7		      CPX	#CurrentCarId
    230  f033		       f0 12		      BEQ	SkipClean
    231  f035		       e0 c8		      CPX	#OpCurrentCarId
    232  f037		       f0 0e		      BEQ	SkipClean
    233  f039		       e0 c4		      CPX	#CurrentDifficulty
    234  f03b		       f0 0a		      BEQ	SkipClean
    235  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    236  f03f		       f0 06		      BEQ	SkipClean
    237  f041		       e0 bd		      CPX	#GameStatus
    238  f043		       f0 02		      BEQ	SkipClean
    239  f045		       95 00		      STA	0,X
    240  f047				   SkipClean
    241  f047		       e8		      INX
    242  f048		       d0 df		      BNE	CleanMem
    243  f04a
    244  f04a		       a9 d5		      LDA	#213
    245  f04c		       8d 96 02 	      STA	TIM64T	;3	
    246  f04f
    247  f04f							;Setting some variables...
    248  f04f
    249  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    250  f04f		       85 02		      STA	WSYNC	;We will set player position
    251  f051		       20 0b f7 	      JSR	DefaultOffsets
    252  f054
    253  f054		       ad 89 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    254  f057		       85 de		      STA	Player0SpeedL
    255  f059		       85 df		      STA	Player1SpeedL
    256  f05b
    257  f05b							;SLEEP 11;18
    258  f05b		       a2 00		      LDX	#0
    259  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    260  f060		       85 db		      STA	StartSWCHB	; For game over
    261  f062		       29 c0		      AND	#%11000000
    262  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    263  f066		       e8		      INX
    264  f067		       c9 80		      CMP	#%10000000
    265  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    266  f06b		       e8		      INX
    267  f06c		       c9 40		      CMP	#%01000000
    268  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    269  f070		       e8		      INX
    270  f071
    271  f071				   StoreCurrentDifficulty
    272  f071		       86 c4		      STX	CurrentDifficulty
    273  f073		       86 c5		      STX	OpCurrentDifficulty
    274  f075		       a2 00		      LDX	#0
    275  f077		       20 c3 f6 	      JSR	ConfigureDifficulty
    276  f07a		       e8		      INX
    277  f07b		       20 c3 f6 	      JSR	ConfigureDifficulty
    278  f07e
    279  f07e				   SetGameNotRunning
    280  f07e		       a9 00		      LDA	#0
    281  f080		       85 bd		      STA	GameStatus
    282  f082
    283  f082				   ConfigureTimer
    284  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    285  f084		       85 b8		      STA	CountdownTimer	;3
    286  f086		       85 b9		      STA	OpCountdownTimer	;3
    287  f088
    288  f088				   ConfigurePlayer1XPosition
    289  f088		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    290  f08a		       85 b7		      STA	Player1X	;3
    291  f08c
    292  f08c				   ConfigureOpNextCheckpoint
    293  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    294  f08e		       85 ce		      STA	OpNextCheckpoint
    295  f090
    296  f090				   HPositioning 		; Avoid sleep doing needed stuff
    297  f090		       85 02		      STA	WSYNC
    298  f092
    299  f092				   ConfigurePlayer0XPosition
    300  f092		       a9 21		      LDA	#PLAYER_0_X_START	;2
    301  f094		       85 b6		      STA	Player0X	;3
    302  f096
    303  f096				   ConfigureMissileSize
    304  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    305  f098		       85 04		      STA	NUSIZ0	;3
    306  f09a		       85 05		      STA	NUSIZ1	;3
    307  f09c
    308  f09c				   ConfigureNextCheckpoint
    309  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    310  f09e		       85 cd		      STA	NextCheckpoint
    311  f0a0
    312  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    313  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	4	;
      1  f0a2				   .CYCLES    SET	4
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2				  -	      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2				  -	      ELSE
     12  f0a2				  -	      bit	VSYNC
     13  f0a2				  -	      ENDIF
     14  f0a2				  -.CYCLES    SET	.CYCLES - 3
     15  f0a2					      ENDIF
     16  f0a2
     17  f0a2					      REPEAT	.CYCLES / 2
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     19  f0a4					      REPEND
    315  f0a4		       85 12		      STA	RESM0
      0  f0a6					      SLEEP	2	;
      1  f0a6				   .CYCLES    SET	2
      2  f0a6
      3  f0a6				  -	      IF	.CYCLES < 2
      4  f0a6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a6				  -	      ERR
      6  f0a6					      ENDIF
      7  f0a6
      8  f0a6				  -	      IF	.CYCLES & 1
      9  f0a6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a6				  -	      nop	0
     11  f0a6				  -	      ELSE
     12  f0a6				  -	      bit	VSYNC
     13  f0a6				  -	      ENDIF
     14  f0a6				  -.CYCLES    SET	.CYCLES - 3
     15  f0a6					      ENDIF
     16  f0a6
     17  f0a6					      REPEAT	.CYCLES / 2
     18  f0a6		       ea		      nop
     19  f0a7					      REPEND
    317  f0a7		       85 14		      STA	RESBL
      0  f0a9					      SLEEP	2
      1  f0a9				   .CYCLES    SET	2
      2  f0a9
      3  f0a9				  -	      IF	.CYCLES < 2
      4  f0a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a9				  -	      ERR
      6  f0a9					      ENDIF
      7  f0a9
      8  f0a9				  -	      IF	.CYCLES & 1
      9  f0a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a9				  -	      nop	0
     11  f0a9				  -	      ELSE
     12  f0a9				  -	      bit	VSYNC
     13  f0a9				  -	      ENDIF
     14  f0a9				  -.CYCLES    SET	.CYCLES - 3
     15  f0a9					      ENDIF
     16  f0a9
     17  f0a9					      REPEAT	.CYCLES / 2
     18  f0a9		       ea		      nop
     19  f0aa					      REPEND
    319  f0aa		       85 13		      STA	RESM1
      0  f0ac					      SLEEP	3
      1  f0ac				   .CYCLES    SET	3
      2  f0ac
      3  f0ac				  -	      IF	.CYCLES < 2
      4  f0ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ac				  -	      ERR
      6  f0ac					      ENDIF
      7  f0ac
      8  f0ac					      IF	.CYCLES & 1
      9  f0ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ac				  -	      nop	0
     11  f0ac					      ELSE
     12  f0ac		       24 00		      bit	VSYNC
     13  f0ae					      ENDIF
     14  f0ae				   .CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae				  -	      REPEAT	.CYCLES / 2
     18  f0ae				  -	      nop
     19  f0ae					      REPEND
    321  f0ae
    322  f0ae		       a9 e0		      LDA	#$E0
    323  f0b0		       85 24		      STA	HMBL
    324  f0b2		       85 22		      STA	HMM0
    325  f0b4		       85 23		      STA	HMM1
    326  f0b6		       85 02		      STA	WSYNC
    327  f0b8		       85 2a		      STA	HMOVE
    328  f0ba		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    329  f0bc		       85 2b		      STA	HMCLR
      0  f0be					      SLEEP	30
      1  f0be				   .CYCLES    SET	30
      2  f0be
      3  f0be				  -	      IF	.CYCLES < 2
      4  f0be				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0be				  -	      ERR
      6  f0be					      ENDIF
      7  f0be
      8  f0be				  -	      IF	.CYCLES & 1
      9  f0be				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0be				  -	      nop	0
     11  f0be				  -	      ELSE
     12  f0be				  -	      bit	VSYNC
     13  f0be				  -	      ENDIF
     14  f0be				  -.CYCLES    SET	.CYCLES - 3
     15  f0be					      ENDIF
     16  f0be
     17  f0be					      REPEAT	.CYCLES / 2
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     19  f0cd					      REPEND
    331  f0cd		       85 10		      STA	RESP0
    332  f0cf							;SLEEP 5 ; Temporarily move player 1 away.
    333  f0cf		       85 11		      STA	RESP1
    334  f0d1
    335  f0d1				   WaitResetToEnd
    336  f0d1		       ad 84 02 	      LDA	INTIM
    337  f0d4		       d0 fb		      BNE	WaitResetToEnd
    338  f0d6
    339  f0d6				   MainLoop
    340  f0d6		       a9 02		      LDA	#2
    341  f0d8		       85 00		      STA	VSYNC
    342  f0da		       85 02		      STA	WSYNC
    343  f0dc		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    344  f0de							;Some free cycles here!
    345  f0de				   PrepareMaxHMove
    346  f0de		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    347  f0e0		       85 09		      STA	COLUBK
      0  f0e2					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e2				   .CYCLES    SET	24 - 11
      2  f0e2
      3  f0e2				  -	      IF	.CYCLES < 2
      4  f0e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e2				  -	      ERR
      6  f0e2					      ENDIF
      7  f0e2
      8  f0e2					      IF	.CYCLES & 1
      9  f0e2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e2				  -	      nop	0
     11  f0e2					      ELSE
     12  f0e2		       24 00		      bit	VSYNC
     13  f0e4					      ENDIF
     14  f0e4				   .CYCLES    SET	.CYCLES - 3
     15  f0e4					      ENDIF
     16  f0e4
     17  f0e4					      REPEAT	.CYCLES / 2
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     19  f0e9					      REPEND
    349  f0e9		       a9 80		      LDA	#$80
    350  f0eb		       85 24		      STA	HMBL
    351  f0ed		       85 22		      STA	HMM0
    352  f0ef		       85 23		      STA	HMM1
    353  f0f1		       85 20		      STA	HMP0
    354  f0f3		       85 21		      STA	HMP1
    355  f0f5		       85 02		      STA	WSYNC
    356  f0f7		       85 2a		      STA	HMOVE	; 1/10			
    357  f0f9
    358  f0f9				   ConfigVBlankTimer
    359  f0f9		       a5 c6		      LDA	GameMode
    360  f0fb		       c9 10		      CMP	#MAX_GAME_MODE
    361  f0fd		       f0 05		      BEQ	SetVblankTimerQrCode
    362  f0ff		       a9 29		      LDA	#VBLANK_TIMER
    363  f101		       4c 06 f1 	      JMP	SetVblankTimer
    364  f104				   SetVblankTimerQrCode
    365  f104		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    366  f106
    367  f106				   SetVblankTimer
    368  f106		       85 02		      STA	WSYNC	;3
    369  f108		       8d 96 02 	      STA	TIM64T	;3	
    370  f10b		       a9 00		      LDA	#0	;2
    371  f10d		       85 00		      STA	VSYNC	;3	
    372  f10f
    373  f10f				   RandomizeGame
    374  f10f		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    375  f111		       d0 2d		      BNE	EndRandomizeGame
    376  f113		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    377  f115		       29 02		      AND	#%00000010
    378  f117		       f0 24		      BEQ	DeterministicGame
    379  f119		       a6 96		      LDX	TrafficOffset1 + 2
    380  f11b		       bd 00 fe 	      LDA	AesTable,X
    381  f11e		       45 8c		      EOR	FrameCount0
    382  f120		       85 96		      STA	TrafficOffset1 + 2
    383  f122		       85 a6		      STA	OpTrafficOffset1 + 2
    384  f124		       a6 9a		      LDX	TrafficOffset2 + 2
    385  f126		       bd 00 fe 	      LDA	AesTable,X
    386  f129		       45 8c		      EOR	FrameCount0
    387  f12b		       85 9a		      STA	TrafficOffset2 + 2
    388  f12d		       85 aa		      STA	OpTrafficOffset2 + 2
    389  f12f		       a6 9e		      LDX	TrafficOffset3 + 2
    390  f131		       bd 00 fe 	      LDA	AesTable,X
    391  f134		       45 8c		      EOR	FrameCount0
    392  f136		       85 9e		      STA	TrafficOffset3 + 2
    393  f138		       85 ae		      STA	OpTrafficOffset3 + 2
    394  f13a		       4c 40 f1 	      JMP	EndRandomizeGame
    395  f13d
    396  f13d				   DeterministicGame
    397  f13d		       20 0b f7 	      JSR	DefaultOffsets
    398  f140
    399  f140				   EndRandomizeGame
    400  f140
    401  f140
    402  f140				   CountFrame
    403  f140		       e6 8c		      INC	FrameCount0	; 5
    404  f142		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    405  f144		       e6 8d		      INC	FrameCount1	; 5 
    406  f146				   SkipIncFC1
    407  f146
    408  f146				   CallDrawQrCode
    409  f146		       a5 c6		      LDA	GameMode
    410  f148		       c9 10		      CMP	#MAX_GAME_MODE
    411  f14a		       d0 03		      BNE	TestIsGameRunning
    412  f14c		       4c 6c fa 	      JMP	DrawQrCode
    413  f14f
    414  f14f							;Does not update the game if not running
    415  f14f				   TestIsGameRunning
    416  f14f		       a5 bd		      LDA	GameStatus	;3
    417  f151		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    418  f153				   SelectCarWithDpadCall		; Only do it when game is stoped
    419  f153		       a2 00		      LDX	#0	; Player 0
    420  f155		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    421  f157		       85 b0		      STA	Tmp0
    422  f159		       20 0f f8 	      JSR	SelectCarWithDpad
    423  f15c		       e8		      INX		; Player 1
    424  f15d		       20 0f f8 	      JSR	SelectCarWithDpad
    425  f160
    426  f160							; Needs to draw the opponent in the correct line even when game stoped  
    427  f160							; Draeing is a destructive operation
    428  f160		       20 21 f8 	      JSR	ProcessOpponentLine
    429  f163
    430  f163				   CallConfigureCarSprites
    431  f163		       20 c9 f7 	      JSR	ConfigureCarSprites
    432  f166				   SkipUpdateLogicJump
    433  f166		       4c 9e f1 	      JMP	SkipUpdateLogic
    434  f169				   ContinueWithGameLogic
    435  f169
    436  f169				   CallEverySecond		; Timer for now
    437  f169		       a2 00		      LDX	#0
    438  f16b		       20 42 fa 	      JSR	EverySecond
    439  f16e		       e8		      INX
    440  f16f		       20 42 fa 	      JSR	EverySecond
    441  f172
    442  f172				   CallProcessSpeed
    443  f172		       a2 00		      LDX	#0
    444  f174		       20 59 f9 	      JSR	ProcessSpeed
    445  f177
    446  f177		       e8		      INX		; Player 1
    447  f178		       20 59 f9 	      JSR	ProcessSpeed
    448  f17b
    449  f17b				   CallUpdateOffsets
    450  f17b		       a2 00		      LDX	#0	; Player 0
    451  f17d		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    452  f17f		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    453  f181		       a5 de		      LDA	Player0SpeedL
    454  f183		       85 b4		      STA	Tmp4
    455  f185		       a5 f0		      LDA	Player0SpeedH
    456  f187		       85 b5		      STA	Tmp5
    457  f189		       20 06 f9 	      JSR	UpdateOffsets
    458  f18c
    459  f18c							;LDX Exits the call with correct value.
    460  f18c		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    461  f18e		       85 b3		      STA	Tmp3
    462  f190		       a5 df		      LDA	Player1SpeedL
    463  f192		       85 b4		      STA	Tmp4
    464  f194		       a5 f1		      LDA	Player1SpeedH
    465  f196		       85 b5		      STA	Tmp5
    466  f198		       20 06 f9 	      JSR	UpdateOffsets
    467  f19b
    468  f19b				   CallProcessOpponentLine
    469  f19b		       20 21 f8 	      JSR	ProcessOpponentLine
    470  f19e
    471  f19e				   SkipUpdateLogic		; Continue here if not paused
    472  f19e
    473  f19e				   CallStatusUpdateSbr
    474  f19e		       a2 00		      LDX	#0
    475  f1a0		       20 4f fa 	      JSR	CalculateGear
    476  f1a3		       20 5c fa 	      JSR	ProcessScoreFontColor
    477  f1a6		       e8		      INX
    478  f1a7		       20 4f fa 	      JSR	CalculateGear
    479  f1aa		       20 5c fa 	      JSR	ProcessScoreFontColor
    480  f1ad
    481  f1ad				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    482  f1ad		       a5 8c		      LDA	FrameCount0
    483  f1af		       29 01		      AND	#%00000001
    484  f1b1		       d0 0c		      BNE	CallProcessPlayer1Status
    485  f1b3				   CallProcessPlayer0Status
    486  f1b3		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    487  f1b5		       85 b0		      STA	Tmp0
    488  f1b7		       a2 00		      LDX	#0
    489  f1b9		       20 fc f9 	      JSR	ProcessPlayerStatus
    490  f1bc		       4c c8 f1 	      JMP	EndCallProcessPlayerStatus
    491  f1bf				   CallProcessPlayer1Status
    492  f1bf		       a5 a2		      LDA	OpTrafficOffset0 + 2
    493  f1c1		       85 b0		      STA	Tmp0
    494  f1c3		       a2 01		      LDX	#1
    495  f1c5		       20 fc f9 	      JSR	ProcessPlayerStatus
    496  f1c8				   EndCallProcessPlayerStatus
    497  f1c8
    498  f1c8				   CallProcessPlayerSprites
    499  f1c8		       20 c9 f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    500  f1cb
    501  f1cb				   CallProcessSound		; We might save cycles by updating one channel per frame.
    502  f1cb		       a2 00		      LDX	#0
    503  f1cd		       a5 92		      LDA	TrafficOffset0 + 2
    504  f1cf		       85 b1		      STA	Tmp1
    505  f1d1		       20 da f5 	      JSR	ProcessSound
    506  f1d4		       e8		      INX		; Player 1
    507  f1d5		       a5 a2		      LDA	OpTrafficOffset0 + 2
    508  f1d7		       85 b1		      STA	Tmp1
    509  f1d9		       20 da f5 	      JSR	ProcessSound
    510  f1dc
    511  f1dc				   ChooseTextSide		; 
    512  f1dc		       a5 8c		      LDA	FrameCount0	;3
    513  f1de		       29 01		      AND	#%00000001
    514  f1e0		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    515  f1e2		       4c 98 f2 	      JMP	RightScoreWrite
    516  f1e5
    517  f1e5				   LeftScoreWrite
    518  f1e5		       a5 c9		      LDA	ScoreFontColor
    519  f1e7		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    520  f1e9		       f0 77		      BEQ	PrintCheckpoint
    521  f1eb		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    522  f1ed		       f0 7b		      BEQ	PrintStartGame
    523  f1ef		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    524  f1f1		       f0 3a		      BEQ	ProcessPlayer0OverText
    525  f1f3		       a5 bd		      LDA	GameStatus
    526  f1f5		       f0 7b		      BEQ	PrintHellwayLeft
    527  f1f7
    528  f1f7				   Digit0Timer
    529  f1f7		       a5 b8		      LDA	CountdownTimer	;3
    530  f1f9		       85 b0		      STA	Tmp0
    531  f1fb		       20 fb f7 	      JSR	BINBCD8
    532  f1fe							; LDA Tmp1 Also returned in A
    533  f1fe		       29 0f		      AND	#%00001111	;2
    534  f200		       aa		      TAX		; 2
    535  f201		       bd 6c fc 	      LDA	FontLookup,X	;4 
    536  f204		       85 d1		      STA	ScoreD1	;3
    537  f206
    538  f206				   Digit1Timer
    539  f206		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    540  f208		       4a		      LSR		; 2
    541  f209		       4a		      LSR		; 2
    542  f20a		       4a		      LSR		; 2
    543  f20b		       4a		      LSR		; 2
    544  f20c		       aa		      TAX		; 2
    545  f20d		       bd 6c fc 	      LDA	FontLookup,X	;4
    546  f210		       85 d0		      STA	ScoreD0	;3
    547  f212
    548  f212				   SpeedBar
    549  f212		       a5 de		      LDA	Player0SpeedL
    550  f214		       29 e0		      AND	#%11100000	;2 Discard the last bits
    551  f216		       18		      CLC
    552  f217		       2a		      ROL		;First goes into carry
    553  f218		       2a		      ROL
    554  f219		       2a		      ROL
    555  f21a		       2a		      ROL
    556  f21b		       85 b0		      STA	Tmp0
    557  f21d		       a5 f0		      LDA	Player0SpeedH
    558  f21f		       0a		      ASL
    559  f220		       0a		      ASL
    560  f221		       0a		      ASL
    561  f222		       05 b0		      ORA	Tmp0
    562  f224		       aa		      TAX		; 2
    563  f225		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    564  f228		       85 d2		      STA	ScoreD2	;3
    565  f22a		       4c 3b f2 	      JMP	DistanceCheckpointCount
    566  f22d
    567  f22d				   ProcessPlayer0OverText
    568  f22d		       a5 f2		      LDA	IsOpponentInFront
    569  f22f		       30 05		      BMI	PrintPlayer0Lose
    570  f231				   PrintPlayer0Win
    571  f231		       a2 21		      LDX	#<WinText
    572  f233		       4c 38 f2 	      JMP	PrintPlayer0Status
    573  f236				   PrintPlayer0Lose
    574  f236		       a2 24		      LDX	#<LoseText
    575  f238				   PrintPlayer0Status
    576  f238		       20 20 f7 	      JSR	PrintStaticText
    577  f23b
    578  f23b				   DistanceCheckpointCount		; Will run all letters in the future
    579  f23b		       a5 ba		      LDA	Traffic0Msb
    580  f23d		       29 01		      AND	#%00000001
    581  f23f		       0a		      ASL
    582  f240		       0a		      ASL
    583  f241		       0a		      ASL
    584  f242		       0a		      ASL
    585  f243		       85 b0		      STA	Tmp0
    586  f245		       a5 92		      LDA	TrafficOffset0 + 2	;3
    587  f247		       29 f0		      AND	#%11110000	;2
    588  f249		       4a		      LSR
    589  f24a		       4a		      LSR
    590  f24b		       4a		      LSR
    591  f24c		       4a		      LSR
    592  f24d		       05 b0		      ORA	Tmp0
    593  f24f		       aa		      TAX		; 2
    594  f250		       bd 6c fc 	      LDA	FontLookup,X	;4 
    595  f253		       85 d3		      STA	ScoreD3	;3
    596  f255
    597  f255				   DistanceBar		; 16 subdivisions per checkpoint
    598  f255		       a5 92		      LDA	TrafficOffset0 + 2	;3
    599  f257		       29 0f		      AND	#%00001111	;2
    600  f259		       aa		      TAX		; 2
    601  f25a		       bd 8c fc 	      LDA	BarLookup,X	;4 
    602  f25d		       85 d4		      STA	ScoreD4	;3
    603  f25f
    604  f25f				   EndDrawDistance
    605  f25f		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    606  f262
    607  f262				   PrintCheckpoint
    608  f262		       a2 00		      LDX	#<CheckpointText
    609  f264		       20 20 f7 	      JSR	PrintStaticText
    610  f267		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    611  f26a				   PrintStartGame
    612  f26a		       a2 17		      LDX	#<GoText
    613  f26c		       20 20 f7 	      JSR	PrintStaticText
    614  f26f		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    615  f272
    616  f272				   PrintHellwayLeft
    617  f272		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    618  f274		       30 08		      BMI	ContinueWithDefaultLeftText
    619  f276				   Player0IsReady
    620  f276		       a2 1c		      LDX	#<ReadyText
    621  f278		       20 20 f7 	      JSR	PrintStaticText
    622  f27b		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    623  f27e				   ContinueWithDefaultLeftText
    624  f27e		       a5 8d		      LDA	FrameCount1
    625  f280		       29 01		      AND	#1
    626  f282		       d0 05		      BNE	PrintCreditsLeft
    627  f284		       a2 04		      LDX	#<HellwayLeftText - 1	; Padding
    628  f286		       4c 8b f2 	      JMP	PrintGameMode
    629  f289				   PrintCreditsLeft
    630  f289		       a2 0d		      LDX	#<OpbText - 1	; Padding
    631  f28b
    632  f28b				   PrintGameMode
    633  f28b		       20 20 f7 	      JSR	PrintStaticText
    634  f28e		       a6 c6		      LDX	GameMode
    635  f290		       bd 6c fc 	      LDA	FontLookup,X	;4 
    636  f293		       85 d0		      STA	ScoreD0	;3
    637  f295		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    638  f298
    639  f298				   RightScoreWrite
    640  f298		       a5 bd		      LDA	GameStatus
    641  f29a		       f0 79		      BEQ	PrintHellwayRight
    642  f29c		       a5 ca		      LDA	OpScoreFontColor
    643  f29e		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    644  f2a0		       f0 c0		      BEQ	PrintCheckpoint
    645  f2a2		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    646  f2a4		       f0 c4		      BEQ	PrintStartGame
    647  f2a6		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    648  f2a8		       f0 36		      BEQ	ProcessPlayer1OverText
    649  f2aa
    650  f2aa				   OpDigit0Timer
    651  f2aa		       a5 b9		      LDA	OpCountdownTimer	;3
    652  f2ac		       85 b0		      STA	Tmp0
    653  f2ae		       20 fb f7 	      JSR	BINBCD8
    654  f2b1							; LDA Tmp1 Also returned in A
    655  f2b1		       29 0f		      AND	#%00001111	;2
    656  f2b3		       aa		      TAX		; 2
    657  f2b4		       bd 6c fc 	      LDA	FontLookup,X	;4 
    658  f2b7		       85 d4		      STA	ScoreD4	;3
    659  f2b9
    660  f2b9				   OpDigit1Timer
    661  f2b9		       a5 b1		      LDA	Tmp1	;3
    662  f2bb		       4a		      LSR		; 2
    663  f2bc		       4a		      LSR		; 2
    664  f2bd		       4a		      LSR		; 2
    665  f2be		       4a		      LSR		; 2
    666  f2bf		       aa		      TAX		; 2
    667  f2c0		       bd 6c fc 	      LDA	FontLookup,X	;4
    668  f2c3		       85 d3		      STA	ScoreD3	;3
    669  f2c5
    670  f2c5				   OpSpeedBar
    671  f2c5		       a5 df		      LDA	Player1SpeedL
    672  f2c7		       29 e0		      AND	#%11100000	;2 Discard the last bits
    673  f2c9		       18		      CLC
    674  f2ca		       2a		      ROL		;First goes into carry
    675  f2cb		       2a		      ROL
    676  f2cc		       2a		      ROL
    677  f2cd		       2a		      ROL
    678  f2ce		       85 b0		      STA	Tmp0
    679  f2d0		       a5 f1		      LDA	Player1SpeedH
    680  f2d2		       0a		      ASL
    681  f2d3		       0a		      ASL
    682  f2d4		       0a		      ASL
    683  f2d5		       05 b0		      ORA	Tmp0
    684  f2d7		       aa		      TAX		; 2
    685  f2d8		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    686  f2db		       85 d2		      STA	ScoreD2	;3
    687  f2dd		       4c ee f2 	      JMP	OpDistanceCheckpointCount
    688  f2e0
    689  f2e0				   ProcessPlayer1OverText
    690  f2e0		       a5 f2		      LDA	IsOpponentInFront
    691  f2e2		       30 05		      BMI	PrintPlayer1Lose
    692  f2e4				   PrintPlayer1Win
    693  f2e4		       a2 1f		      LDX	#<WinText - 2
    694  f2e6		       4c ee f2 	      JMP	OpDistanceCheckpointCount
    695  f2e9				   PrintPlayer1Lose
    696  f2e9		       a2 22		      LDX	#<LoseText - 2
    697  f2eb				   PrintPlayer1Status
    698  f2eb		       20 20 f7 	      JSR	PrintStaticText
    699  f2ee
    700  f2ee				   OpDistanceCheckpointCount
    701  f2ee		       a5 bb		      LDA	OpTraffic0Msb
    702  f2f0		       29 01		      AND	#%00000001
    703  f2f2		       0a		      ASL
    704  f2f3		       0a		      ASL
    705  f2f4		       0a		      ASL
    706  f2f5		       0a		      ASL
    707  f2f6		       85 b0		      STA	Tmp0
    708  f2f8		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    709  f2fa		       29 f0		      AND	#%11110000	;2
    710  f2fc		       4a		      LSR
    711  f2fd		       4a		      LSR
    712  f2fe		       4a		      LSR
    713  f2ff		       4a		      LSR
    714  f300		       05 b0		      ORA	Tmp0
    715  f302		       aa		      TAX		; 2
    716  f303		       bd 6c fc 	      LDA	FontLookup,X	;4 
    717  f306		       85 d1		      STA	ScoreD1	;3
    718  f308
    719  f308				   OpDistanceBar		; 16 subdivisions per checkpoint
    720  f308		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    721  f30a		       29 0f		      AND	#%00001111	;2
    722  f30c		       aa		      TAX		; 2
    723  f30d		       bd 8c fc 	      LDA	BarLookup,X	;4 
    724  f310		       85 d0		      STA	ScoreD0	;3
    725  f312		       4c 34 f3 	      JMP	RightScoreWriteEnd
    726  f315
    727  f315				   PrintHellwayRight
    728  f315		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    729  f317		       30 08		      BMI	ContinueWithDefaultRightText
    730  f319				   Player1IsReady
    731  f319		       a2 1c		      LDX	#<ReadyText
    732  f31b		       20 20 f7 	      JSR	PrintStaticText
    733  f31e		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    734  f321				   ContinueWithDefaultRightText
    735  f321		       a5 8d		      LDA	FrameCount1
    736  f323		       29 01		      AND	#1
    737  f325		       d0 05		      BNE	PrintCreditsRight
    738  f327		       a2 09		      LDX	#<HellwayRightText
    739  f329		       4c 2e f3 	      JMP	PrintRightIntro
    740  f32c				   PrintCreditsRight
    741  f32c		       a2 12		      LDX	#<YearText
    742  f32e				   PrintRightIntro
    743  f32e		       20 20 f7 	      JSR	PrintStaticText
    744  f331		       4c 34 f3 	      JMP	RightScoreWriteEnd
    745  f334				   RightScoreWriteEnd
    746  f334
    747  f334
    748  f334				   ConfigurePFForScore
    749  f334		       20 72 f6 	      JSR	ClearAll
    750  f337		       a9 02		      LDA	#%00000010	; Score mode
    751  f339		       85 0a		      STA	CTRLPF
    752  f33b		       a5 8c		      LDA	FrameCount0	;3
    753  f33d		       29 01		      AND	#%00000001
    754  f33f		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    755  f341				   RightScoreOn
    756  f341		       a5 ca		      LDA	OpScoreFontColor
    757  f343		       85 07		      STA	COLUP1
    758  f345		       a9 00		      LDA	#BACKGROUND_COLOR
    759  f347		       85 06		      STA	COLUP0
    760  f349		       4c 54 f3 	      JMP	CallWaitForVblankEnd
    761  f34c				   LeftScoreOn
    762  f34c		       a5 c9		      LDA	ScoreFontColor
    763  f34e		       85 06		      STA	COLUP0
    764  f350		       a9 00		      LDA	#BACKGROUND_COLOR
    765  f352		       85 07		      STA	COLUP1
    766  f354
    767  f354							; After here we are going to update the screen, No more heavy code
    768  f354				   CallWaitForVblankEnd
    769  f354		       20 9a f7 	      JSR	WaitForVblankEnd
    770  f357
    771  f357				   DrawScoreHud
    772  f357		       20 3e f7 	      JSR	PrintScore
    773  f35a
    774  f35a							; 4 lines to go crazy
    775  f35a		       85 02		      STA	WSYNC
    776  f35c							;STA HMOVE
    777  f35c
    778  f35c		       85 02		      STA	WSYNC
    779  f35e		       85 2a		      STA	HMOVE
    780  f360
    781  f360				   PrepareForTraffic
    782  f360		       20 88 f6 	      JSR	ClearPF	; 32
    783  f363
    784  f363		       85 02		      STA	WSYNC
    785  f365		       85 2a		      STA	HMOVE
    786  f367		       85 02		      STA	WSYNC
    787  f369		       85 2a		      STA	HMOVE
    788  f36b
    789  f36b		       a9 30		      LDA	#%00110000	; 2 Score mode
    790  f36d		       85 0a		      STA	CTRLPF	;3
    791  f36f
    792  f36f		       a5 8c		      LDA	FrameCount0	;3
    793  f371		       29 01		      AND	#%00000001	;2
    794  f373		       aa		      TAX		;2
    795  f374		       b5 c2		      LDA	TrafficColor,X	;4
    796  f376		       85 08		      STA	COLUPF	;3
    797  f378
    798  f378		       a9 96		      LDA	#PLAYER1_COLOR	;2
    799  f37a		       85 07		      STA	COLUP1	;3
    800  f37c
    801  f37c		       a5 c9		      LDA	ScoreFontColor	;3
    802  f37e		       85 06		      STA	COLUP0	;3
    803  f380
    804  f380		       a5 ca		      LDA	OpScoreFontColor	;3
    805  f382		       85 07		      STA	COLUP1	;3
    806  f384
    807  f384		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    808  f386
    809  f386		       a5 8c		      LDA	FrameCount0	;Brach flag
    810  f388		       29 01		      AND	#%00000001
    811  f38a
    812  f38a		       d0 03		      BNE	OpScanLoop	;2
    813  f38c		       4c 49 f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    814  f38f							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    815  f38f
    816  f38f							;main scanline loop...
    817  f38f				   OpScanLoop
    818  f38f		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    819  f391
    820  f391		       a5 80		      LDA	GRP0Cache	;3
    821  f393		       85 1b		      STA	GRP0	;3
    822  f395
    823  f395		       a5 84		      LDA	GRP1Cache	;3
    824  f397		       85 1c		      STA	GRP1	;3
    825  f399
    826  f399		       a5 85		      LDA	ENABLCache	;3
    827  f39b		       85 1f		      STA	ENABL	;3
    828  f39d
    829  f39d		       a5 86		      LDA	ENAM0Cache	;3
    830  f39f		       85 1d		      STA	ENAM0	;3
    831  f3a1
    832  f3a1		       a5 87		      LDA	ENAM1Cache	;3
    833  f3a3		       85 1e		      STA	ENAM1	;3
    834  f3a5
    835  f3a5		       a5 81		      LDA	PF0Cache	;3
    836  f3a7		       85 0d		      STA	PF0	;3
    837  f3a9
    838  f3a9		       a9 00		      LDA	#0	;2
    839  f3ab							;STA PF0	     ;3
    840  f3ab		       85 80		      STA	GRP0Cache	;3
    841  f3ad		       85 86		      STA	ENAM0Cache	;3
    842  f3af		       85 85		      STA	ENABLCache	;3
    843  f3b1		       85 87		      STA	ENAM1Cache	; 3
    844  f3b3							;STA GRP1Cache ;3
    845  f3b3		       85 0d		      STA	PF0	;3
    846  f3b5							;STA PF2	     ;3
    847  f3b5
    848  f3b5		       a5 83		      LDA	PF2Cache	;3
    849  f3b7		       85 0f		      STA	PF2	;3
    850  f3b9
    851  f3b9				   OpDrawCar0
    852  f3b9		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    853  f3bb		       b0 04		      BCS	OpSkipDrawCar	;2
    854  f3bd		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    855  f3bf		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    856  f3c1				   OpSkipDrawCar
    857  f3c1
    858  f3c1							;BEQ DrawTraffic3
    859  f3c1				   OpDrawTraffic1		; 33
    860  f3c1		       98		      TYA		; 2
    861  f3c2		       18		      CLC		; 2 
    862  f3c3		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    863  f3c5		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    864  f3c7		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    865  f3c9		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    866  f3cb		       4c d0 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    867  f3ce				   OpEorOffsetWithCarry
    868  f3ce		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    869  f3d0				   OpAfterEorOffsetWithCarry		;17
    870  f3d0		       aa		      TAX		;2
    871  f3d1		       bd 00 fe 	      LDA	AesTable,X	; 4
    872  f3d4		       c5 bf		      CMP	OpTrafficChance	;3
    873  f3d6		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    874  f3d8		       a9 ff		      LDA	#$FF	;2
    875  f3da		       85 86		      STA	ENAM0Cache	;3
    876  f3dc				   OpFinishDrawTraffic1
    877  f3dc
    878  f3dc				   OpErasePF2
    879  f3dc		       a9 00		      LDA	#0
    880  f3de		       85 0f		      STA	PF2
    881  f3e0
    882  f3e0				   OpDrawTraffic2		; 33
    883  f3e0		       98		      TYA		; 2
    884  f3e1		       18		      CLC		; 2 
    885  f3e2		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    886  f3e4		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    887  f3e6		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    888  f3e8		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    889  f3ea		       4c ef f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    890  f3ed				   OpEorOffsetWithCarry2
    891  f3ed		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    892  f3ef				   OpAfterEorOffsetWithCarry2		;17
    893  f3ef		       aa		      TAX		;2
    894  f3f0		       bd 00 fe 	      LDA	AesTable,X	; 4
    895  f3f3		       c5 bf		      CMP	OpTrafficChance	;3
    896  f3f5		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    897  f3f7		       a9 02		      LDA	#%00000010	;2
    898  f3f9		       85 85		      STA	ENABLCache	;3
    899  f3fb				   OpFinishDrawTraffic2
    900  f3fb
    901  f3fb							;STA WSYNC ;65 / 137
    902  f3fb
    903  f3fb							; LDA Tmp0 ; Flicker this line if drawing car
    904  f3fb							; BEQ FinishDrawTraffic4
    905  f3fb				   OpDrawTraffic3		; 33
    906  f3fb		       98		      TYA		; 2
    907  f3fc		       18		      CLC		; 2 
    908  f3fd		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    909  f3ff		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    910  f401		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    911  f403		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    912  f405		       4c 0a f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    913  f408				   OpEorOffsetWithCarry3
    914  f408		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    915  f40a				   OpAfterEorOffsetWithCarry3		;17
    916  f40a		       aa		      TAX		;2
    917  f40b		       bd 00 fe 	      LDA	AesTable,X	; 4
    918  f40e		       c5 bf		      CMP	OpTrafficChance	;3
    919  f410		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    920  f412		       a9 02		      LDA	#%00000010	;2
    921  f414		       85 87		      STA	ENAM1Cache
    922  f416				   OpFinishDrawTraffic3
    923  f416
    924  f416				   OpDrawOponent		;26
    925  f416		       84 b0		      STY	Tmp0	;3
    926  f418		       a4 cf		      LDY	OpponentLine	;3
    927  f41a		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    928  f41c		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    929  f41e				   OpDrawOpponent
    930  f41e		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    931  f420		       85 80		      STA	GRP0Cache	;3
    932  f422		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    933  f424		       a4 b0		      LDY	Tmp0	;3
    934  f426		       4c 3a f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    935  f429				   OpSkipDrawOpponent
    936  f429		       c6 cf		      DEC	OpponentLine	;5
    937  f42b		       a4 b0		      LDY	Tmp0	;3
    938  f42d
    939  f42d
    940  f42d				   OpDrawTraffic0		; 21 2pe
    941  f42d		       98		      TYA		; 2
    942  f42e		       18		      CLC		; 2 
    943  f42f		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    944  f431		       29 08		      AND	#%00001000	;2
    945  f433		       f0 05		      BEQ	OpHasNoBorderP0	;3
    946  f435				   OpHasBorderP0
    947  f435		       a9 70		      LDA	#%01110000	; 2
    948  f437		       4c 3c f4 	      JMP	OpStoreBorderP0	; 3
    949  f43a				   OpHasNoBorderP0
    950  f43a		       a9 00		      LDA	#0	; 2
    951  f43c				   OpStoreBorderP0
    952  f43c		       85 81		      STA	PF0Cache	; 3
    953  f43e		       85 83		      STA	PF2Cache	; 3
    954  f440
    955  f440				   OpSkipDrawTraffic0
    956  f440
    957  f440				   OpWhileScanLoop
    958  f440		       88		      DEY		;2
    959  f441		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    960  f443		       4c 8f f3 	      JMP	OpScanLoop	;3
    961  f446				   OpFinishScanLoop		; 7 209 of 222
    962  f446		       4c fe f4 	      JMP	FinishScanLoop
    963  f449
    964  f449							;main scanline loop...
    965  f449				   ScanLoop
    966  f449		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    967  f44b
    968  f44b		       a5 81		      LDA	PF0Cache	;3
    969  f44d		       85 0d		      STA	PF0	;3
    970  f44f
    971  f44f		       a5 80		      LDA	GRP0Cache	;3
    972  f451		       85 1b		      STA	GRP0	;3
    973  f453
    974  f453		       a5 84		      LDA	GRP1Cache	;3
    975  f455		       85 1c		      STA	GRP1	;3
    976  f457
    977  f457		       a5 86		      LDA	ENAM0Cache	;3
    978  f459		       85 1d		      STA	ENAM0	;3
    979  f45b
    980  f45b		       a5 85		      LDA	ENABLCache	;3
    981  f45d		       85 1f		      STA	ENABL	;3
    982  f45f
    983  f45f		       a5 87		      LDA	ENAM1Cache	;3
    984  f461		       85 1e		      STA	ENAM1	;3
    985  f463
    986  f463		       a5 83		      LDA	PF2Cache	;3
    987  f465		       85 0f		      STA	PF2	;3
    988  f467
    989  f467		       a9 00		      LDA	#0	;2
    990  f469		       85 0d		      STA	PF0	;3
    991  f46b		       85 84		      STA	GRP1Cache	;3
    992  f46d		       85 85		      STA	ENABLCache	;3
    993  f46f		       85 86		      STA	ENAM0Cache	;3
    994  f471		       85 87		      STA	ENAM1Cache	; 3
    995  f473							;STA GRP0Cache
    996  f473		       85 0f		      STA	PF2	;3
    997  f475
    998  f475				   DrawCar0
    999  f475		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1000  f477		       b0 04		      BCS	SkipDrawCar	;2
   1001  f479		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1002  f47b		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1003  f47d				   SkipDrawCar
   1004  f47d
   1005  f47d							;BEQ DrawTraffic3
   1006  f47d				   DrawTraffic1 		; 33
   1007  f47d		       98		      TYA		; 2
   1008  f47e		       18		      CLC		; 2 
   1009  f47f		       65 95		      ADC	TrafficOffset1 + 1	;3
   1010  f481		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1011  f483		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1012  f485		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1013  f487		       4c 8c f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1014  f48a				   EorOffsetWithCarry
   1015  f48a		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1016  f48c				   AfterEorOffsetWithCarry		;17
   1017  f48c		       aa		      TAX		;2
   1018  f48d		       bd 00 fe 	      LDA	AesTable,X	; 4
   1019  f490		       c5 be		      CMP	TrafficChance	;3
   1020  f492		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1021  f494		       a9 ff		      LDA	#$FF	;2
   1022  f496		       85 86		      STA	ENAM0Cache	;3
   1023  f498				   FinishDrawTraffic1
   1024  f498
   1025  f498				   DrawTraffic2 		; 33
   1026  f498		       98		      TYA		; 2
   1027  f499		       18		      CLC		; 2 
   1028  f49a		       65 99		      ADC	TrafficOffset2 + 1	;3
   1029  f49c		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1030  f49e		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1031  f4a0		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1032  f4a2		       4c a7 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1033  f4a5				   EorOffsetWithCarry2
   1034  f4a5		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1035  f4a7				   AfterEorOffsetWithCarry2		;17
   1036  f4a7		       aa		      TAX		;2
   1037  f4a8		       bd 00 fe 	      LDA	AesTable,X	; 4
   1038  f4ab		       c5 be		      CMP	TrafficChance	;3
   1039  f4ad		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1040  f4af		       a9 02		      LDA	#%00000010	;2
   1041  f4b1		       85 85		      STA	ENABLCache	;3
   1042  f4b3				   FinishDrawTraffic2
   1043  f4b3
   1044  f4b3							;STA WSYNC ;65 / 137
   1045  f4b3
   1046  f4b3							; LDA Tmp0 ; Flicker this line if drawing car
   1047  f4b3							; BEQ FinishDrawTraffic4
   1048  f4b3				   DrawTraffic3 		; 33
   1049  f4b3		       98		      TYA		; 2
   1050  f4b4		       18		      CLC		; 2 
   1051  f4b5		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1052  f4b7		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1053  f4b9		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1054  f4bb		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1055  f4bd		       4c c2 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1056  f4c0				   EorOffsetWithCarry3
   1057  f4c0		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1058  f4c2				   AfterEorOffsetWithCarry3		;17
   1059  f4c2		       aa		      TAX		;2
   1060  f4c3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1061  f4c6		       c5 be		      CMP	TrafficChance	;3
   1062  f4c8		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1063  f4ca		       a9 02		      LDA	#%00000010	;2
   1064  f4cc		       85 87		      STA	ENAM1Cache
   1065  f4ce				   FinishDrawTraffic3
   1066  f4ce
   1067  f4ce
   1068  f4ce				   DrawOponent		;26
   1069  f4ce		       84 b0		      STY	Tmp0	;3
   1070  f4d0		       a4 cf		      LDY	OpponentLine	;3
   1071  f4d2		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1072  f4d4		       b0 0b		      BCS	SkipDrawOpponent	;2
   1073  f4d6				   DrawOpponent
   1074  f4d6		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1075  f4d8		       85 84		      STA	GRP1Cache	;3
   1076  f4da		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1077  f4dc		       a4 b0		      LDY	Tmp0	;3
   1078  f4de		       4c f2 f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1079  f4e1				   SkipDrawOpponent
   1080  f4e1		       c6 cf		      DEC	OpponentLine	;5
   1081  f4e3		       a4 b0		      LDY	Tmp0	;3
   1082  f4e5
   1083  f4e5				   DrawTraffic0 		; 21 2pe
   1084  f4e5		       98		      TYA		; 2
   1085  f4e6		       18		      CLC		; 2 
   1086  f4e7		       65 91		      ADC	TrafficOffset0 + 1	;3
   1087  f4e9		       29 08		      AND	#%00001000	;2
   1088  f4eb		       f0 05		      BEQ	HasNoBorderP0	;3
   1089  f4ed				   HasBorderP0
   1090  f4ed		       a9 70		      LDA	#%01110000	; 2
   1091  f4ef		       4c f4 f4 	      JMP	StoreBorderP0	; 3
   1092  f4f2				   HasNoBorderP0
   1093  f4f2		       a9 00		      LDA	#0	; 2
   1094  f4f4				   StoreBorderP0
   1095  f4f4		       85 81		      STA	PF0Cache	; 3
   1096  f4f6		       85 83		      STA	PF2Cache	; 3
   1097  f4f8
   1098  f4f8				   SkipDrawTraffic0
   1099  f4f8
   1100  f4f8				   WhileScanLoop
   1101  f4f8		       88		      DEY		;2
   1102  f4f9		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1103  f4fb		       4c 49 f4 	      JMP	ScanLoop	;3
   1104  f4fe				   FinishScanLoop		; 7 209 of 222
   1105  f4fe
   1106  f4fe		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1107  f500		       20 97 f6 	      JSR	LoadAll
   1108  f503		       85 02		      STA	WSYNC	; do stuff!
   1109  f505		       85 02		      STA	WSYNC
   1110  f507		       85 02		      STA	WSYNC
   1111  f509
   1112  f509				   PrepareOverscan
   1113  f509		       a9 02		      LDA	#2
   1114  f50b		       85 02		      STA	WSYNC
   1115  f50d							;STA HMOVE	; HMOVE 10
   1116  f50d		       85 01		      STA	VBLANK
   1117  f50f
   1118  f50f		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1119  f511		       8d 96 02 	      STA	TIM64T
   1120  f514
   1121  f514		       85 2b		      STA	HMCLR	; Before we process car movement
   1122  f516							;Read Fire Button before, will make it start the game for now.
   1123  f516				   StartGame
   1124  f516		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1125  f518		       25 0d		      AND	INPT5	;3 player 1
   1126  f51a		       30 3a		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1127  f51c		       a5 8c		      LDA	FrameCount0
   1128  f51e		       29 01		      AND	#%00000001
   1129  f520		       d0 34		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1130  f522		       a5 bd		      LDA	GameStatus	;3
   1131  f524		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1132  f526		       d0 2e		      BNE	SkipGameStart
   1133  f528		       a5 c6		      LDA	GameMode
   1134  f52a		       c9 10		      CMP	#MAX_GAME_MODE
   1135  f52c		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1136  f52e		       a9 00		      LDA	#0
   1137  f530		       85 c6		      STA	GameMode
   1138  f532		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1139  f534		       85 bc		      STA	SwitchDebounceCounter
   1140  f536		       4c 56 f5 	      JMP	SkipGameStart
   1141  f539				   SetGameRunningIfBothPressing
   1142  f539		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1143  f53b		       05 0d		      ORA	INPT5	;3 player 1
   1144  f53d		       30 17		      BMI	SkipGameStart
   1145  f53f				   SetGameRunning
   1146  f53f		       e6 bd		      INC	GameStatus
   1147  f541		       a9 00		      LDA	#0	;
   1148  f543		       85 8c		      STA	FrameCount0
   1149  f545		       85 8d		      STA	FrameCount1
   1150  f547		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1151  f549		       85 c9		      STA	ScoreFontColor
   1152  f54b		       85 ca		      STA	OpScoreFontColor
   1153  f54d		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1154  f54f		       85 cb		      STA	ScoreFontColorHoldChange
   1155  f551		       85 cc		      STA	OpScoreFontColorHoldChange
   1156  f553		       4c ca f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1157  f556				   SkipGameStart
   1158  f556
   1159  f556				   ReadSwitches
   1160  f556		       a6 bc		      LDX	SwitchDebounceCounter
   1161  f558		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1162  f55a		       a9 01		      LDA	#%00000001
   1163  f55c		       2c 82 02 	      BIT	SWCHB
   1164  f55f		       d0 07		      BNE	SkipReset
   1165  f561		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1166  f563		       85 bc		      STA	SwitchDebounceCounter
   1167  f565		       4c d2 f5 	      JMP	OverScanWaitBeforeReset
   1168  f568				   SkipReset
   1169  f568
   1170  f568				   GameModeSelect
   1171  f568		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1172  f56a		       d0 22		      BNE	SkipGameSelect
   1173  f56c		       a2 00		      LDX	#0
   1174  f56e		       20 c3 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1175  f571		       e8		      INX
   1176  f572		       20 c3 f6 	      JSR	ConfigureDifficulty
   1177  f575				   ContinueGameSelect
   1178  f575		       a9 02		      LDA	#%00000010
   1179  f577		       2c 82 02 	      BIT	SWCHB
   1180  f57a		       d0 12		      BNE	SkipGameSelect
   1181  f57c		       a6 c6		      LDX	GameMode
   1182  f57e		       e0 10		      CPX	#MAX_GAME_MODE
   1183  f580		       f0 04		      BEQ	ResetGameMode
   1184  f582		       e8		      INX
   1185  f583		       4c 88 f5 	      JMP	StoreGameMode
   1186  f586				   ResetGameMode
   1187  f586		       a2 00		      LDX	#0
   1188  f588				   StoreGameMode
   1189  f588		       86 c6		      STX	GameMode
   1190  f58a		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1191  f58c		       85 bc		      STA	SwitchDebounceCounter
   1192  f58e				   SkipGameSelect
   1193  f58e		       4c 93 f5 	      JMP	EndReadSwitches
   1194  f591				   DecrementSwitchDebounceCounter
   1195  f591		       c6 bc		      DEC	SwitchDebounceCounter
   1196  f593				   EndReadSwitches
   1197  f593
   1198  f593				   DoNotTurnBeforeStart
   1199  f593							;STA HMCLR
   1200  f593		       a5 bd		      LDA	GameStatus
   1201  f595		       f0 33		      BEQ	OverScanWait
   1202  f597
   1203  f597							; Last thing, will overrride hmove
   1204  f597				   CallTestColisionAndMove
   1205  f597		       a2 00		      LDX	#0	; Player 0
   1206  f599							; Colision with traffic, each player check different flags,
   1207  f599		       a5 8c		      LDA	FrameCount0
   1208  f59b		       29 01		      AND	#%00000001
   1209  f59d		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1210  f59f		       20 72 f8 	      JSR	IsOpponentColliding
   1211  f5a2		       05 01		      ORA	CXM1P
   1212  f5a4		       4a		      LSR
   1213  f5a5		       05 00		      ORA	CXM0P
   1214  f5a7		       05 02		      ORA	CXP0FB
   1215  f5a9							; ORA CXPPMM ; Collision between players will have its own rules
   1216  f5a9				   SkipColisionPlayer0		; Should not colide on opponent side.
   1217  f5a9		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1218  f5ab		       85 b2		      STA	Tmp2
   1219  f5ad		       20 86 f8 	      JSR	TestCollisionAndMove
   1220  f5b0
   1221  f5b0		       e8		      INX		; player 1
   1222  f5b1		       a5 8c		      LDA	FrameCount0
   1223  f5b3		       29 01		      AND	#%00000001
   1224  f5b5		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1225  f5b7		       20 72 f8 	      JSR	IsOpponentColliding
   1226  f5ba		       05 00		      ORA	CXM0P
   1227  f5bc		       4a		      LSR
   1228  f5bd		       05 01		      ORA	CXM1P
   1229  f5bf		       05 03		      ORA	CXP1FB
   1230  f5c1				   SkipColisionPlayer1
   1231  f5c1		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1232  f5c3		       85 b2		      STA	Tmp2
   1233  f5c5		       20 86 f8 	      JSR	TestCollisionAndMove
   1234  f5c8
   1235  f5c8				   ClearCollision
   1236  f5c8		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1237  f5ca
   1238  f5ca				   OverScanWait
   1239  f5ca		       ad 84 02 	      LDA	INTIM
   1240  f5cd		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1241  f5cf		       4c d6 f0 	      JMP	MainLoop
   1242  f5d2
   1243  f5d2				   OverScanWaitBeforeReset
   1244  f5d2		       ad 84 02 	      LDA	INTIM
   1245  f5d5		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1246  f5d7		       4c 14 f0 	      JMP	Start
   1247  f5da
   1248  f5da				   Subroutines
   1249  f5da
   1250  f5da							;X Player
   1251  f5da							;Tmp1 TrafficOffset 2
   1252  f5da				   ProcessSound
   1253  f5da				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1254  f5da		       b5 c9		      LDA	ScoreFontColor,X	;3
   1255  f5dc		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1256  f5de		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1257  f5e0		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1258  f5e2		       f0 29		      BEQ	PlayCheckpoint	;2
   1259  f5e4		       b5 8e		      LDA	CollisionCounter,X	;3
   1260  f5e6		       c9 e0		      CMP	#$E0	;2
   1261  f5e8		       b0 14		      BCS	PlayColision	;2
   1262  f5ea		       b5 cd		      LDA	NextCheckpoint,X	;3
   1263  f5ec		       38		      SEC		;2
   1264  f5ed		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1265  f5ef		       c9 02		      CMP	#$02	;2
   1266  f5f1		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1267  f5f3		       b5 b8		      LDA	CountdownTimer,X	; 3
   1268  f5f5		       f0 53		      BEQ	EngineSound	;2
   1269  f5f7		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1270  f5f9		       90 37		      BCC	PlayWarnTimeEnding	;4
   1271  f5fb		       4c 4a f6 	      JMP	EngineSound	;3
   1272  f5fe				   PlayColision
   1273  f5fe		       a9 1f		      LDA	#31
   1274  f600		       95 17		      STA	AUDF0,X
   1275  f602		       a9 08		      LDA	#8
   1276  f604		       95 15		      STA	AUDC0,X
   1277  f606		       a9 08		      LDA	#8
   1278  f608		       95 19		      STA	AUDV0,X
   1279  f60a		       4c 71 f6 	      JMP	EndSound
   1280  f60d
   1281  f60d				   PlayCheckpoint
   1282  f60d		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1283  f60f		       4a		      LSR		;2
   1284  f610		       4a		      LSR		;2
   1285  f611		       4a		      LSR		;2
   1286  f612		       95 17		      STA	AUDF0,X	;3
   1287  f614		       a9 0c		      LDA	#12	;2
   1288  f616		       95 15		      STA	AUDC0,X	;3
   1289  f618		       a9 06		      LDA	#6	;2
   1290  f61a		       95 19		      STA	AUDV0,X	;3
   1291  f61c		       4c 71 f6 	      JMP	EndSound	;3
   1292  f61f
   1293  f61f				   PlayBeforeCheckpoint
   1294  f61f		       a5 8c		      LDA	FrameCount0	;3
   1295  f621		       29 1c		      AND	#%00011100	;2
   1296  f623		       09 03		      ORA	#%00000011	;2
   1297  f625		       95 17		      STA	AUDF0,X	;3
   1298  f627		       a9 0c		      LDA	#12	;2
   1299  f629		       95 15		      STA	AUDC0,X	;3
   1300  f62b		       a9 03		      LDA	#3	;2
   1301  f62d		       95 19		      STA	AUDV0,X	;3
   1302  f62f		       4c 71 f6 	      JMP	EndSound	;3
   1303  f632
   1304  f632				   PlayWarnTimeEnding
   1305  f632		       a5 8c		      LDA	FrameCount0	;3
   1306  f634		       29 04		      AND	#%00000100	;2
   1307  f636		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1308  f638		       18		      CLC		;2
   1309  f639		       a9 0a		      LDA	#10	;2
   1310  f63b		       75 b8		      ADC	CountdownTimer,X	;2
   1311  f63d		       95 17		      STA	AUDF0,X	;3
   1312  f63f		       a9 0c		      LDA	#12	;2
   1313  f641		       95 15		      STA	AUDC0,X	;3
   1314  f643		       a9 03		      LDA	#3	;2
   1315  f645		       95 19		      STA	AUDV0,X	;3
   1316  f647		       4c 71 f6 	      JMP	EndSound	;3
   1317  f64a
   1318  f64a				   EngineSound		;41
   1319  f64a		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1320  f64c		       95 19		      STA	AUDV0,X
   1321  f64e		       b5 b8		      LDA	CountdownTimer,X	;3
   1322  f650		       f0 1b		      BEQ	EngineOff	;2
   1323  f652		       b4 d5		      LDY	Gear,X
   1324  f654		       b5 de		      LDA	Player0SpeedL,X	;3
   1325  f656		       4a		      LSR		;2
   1326  f657		       4a		      LSR		;2
   1327  f658		       4a		      LSR		;2
   1328  f659		       29 0f		      AND	#%00001111	;2
   1329  f65b		       85 b0		      STA	Tmp0	;3
   1330  f65d		       b9 43 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1331  f660		       38		      SEC		;2
   1332  f661		       e5 b0		      SBC	Tmp0	;3
   1333  f663		       95 17		      STA	AUDF0,X	;3
   1334  f665		       b9 3d ff 	      LDA	EngineSoundType,Y	;4
   1335  f668		       95 15		      STA	AUDC0,X	;3
   1336  f66a		       4c 71 f6 	      JMP	EndEngineSound	;3
   1337  f66d				   EngineOff
   1338  f66d				   MuteSound
   1339  f66d		       a9 00		      LDA	#0
   1340  f66f		       95 15		      STA	AUDC0,X
   1341  f671				   EndEngineSound
   1342  f671				   EndSound
   1343  f671		       60		      RTS
   1344  f672
   1345  f672				   ClearAll		; 58
   1346  f672		       a9 00		      LDA	#0	;2
   1347  f674		       85 1b		      STA	GRP0	;3
   1348  f676		       85 1c		      STA	GRP1	;3
   1349  f678		       85 1f		      STA	ENABL	;3
   1350  f67a		       85 1d		      STA	ENAM0	;3
   1351  f67c		       85 1e		      STA	ENAM1	;3
   1352  f67e		       85 80		      STA	GRP0Cache	;3
   1353  f680		       85 84		      STA	GRP1Cache	;3
   1354  f682		       85 85		      STA	ENABLCache	;3
   1355  f684		       85 86		      STA	ENAM0Cache	;3
   1356  f686		       85 87		      STA	ENAM1Cache	;3
   1357  f688
   1358  f688				   ClearPF		; 26
   1359  f688		       a9 00		      LDA	#0	;2
   1360  f68a				   ClearPFSkipLDA0
   1361  f68a		       85 0d		      STA	PF0	;3
   1362  f68c		       85 0e		      STA	PF1	;3
   1363  f68e		       85 0f		      STA	PF2	;3	
   1364  f690		       85 81		      STA	PF0Cache	;3
   1365  f692		       85 82		      STA	PF1Cache	;3
   1366  f694		       85 83		      STA	PF2Cache	;3 
   1367  f696		       60		      RTS		;6
   1368  f697				   EndClearAll
   1369  f697
   1370  f697				   LoadAll		; 48
   1371  f697		       a5 81		      LDA	PF0Cache	;3
   1372  f699		       85 0d		      STA	PF0	;3
   1373  f69b
   1374  f69b		       a5 82		      LDA	PF1Cache	;3
   1375  f69d		       85 0e		      STA	PF1	;3
   1376  f69f
   1377  f69f		       a5 83		      LDA	PF2Cache	;3
   1378  f6a1		       85 0f		      STA	PF2	;3
   1379  f6a3
   1380  f6a3		       a5 84		      LDA	GRP1Cache	;3
   1381  f6a5		       85 1c		      STA	GRP1	;3
   1382  f6a7
   1383  f6a7		       a5 85		      LDA	ENABLCache	;3
   1384  f6a9		       85 1f		      STA	ENABL	;3
   1385  f6ab
   1386  f6ab		       a5 86		      LDA	ENAM0Cache	;3
   1387  f6ad		       85 1d		      STA	ENAM0	;3
   1388  f6af
   1389  f6af		       a5 87		      LDA	ENAM1Cache	;3
   1390  f6b1		       85 1e		      STA	ENAM1	;3
   1391  f6b3
   1392  f6b3		       60		      RTS		;6
   1393  f6b4				   EndLoadAll
   1394  f6b4
   1395  f6b4				   NextDifficulty		;Is a SBR
   1396  f6b4		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1397  f6b6		       29 01		      AND	#%00000001
   1398  f6b8		       d0 24		      BNE	CheckRandomDifficulty
   1399  f6ba
   1400  f6ba		       b5 c4		      LDA	CurrentDifficulty,X
   1401  f6bc		       18		      CLC
   1402  f6bd		       69 01		      ADC	#1
   1403  f6bf		       29 03		      AND	#%00000011	; 0 to 3
   1404  f6c1		       95 c4		      STA	CurrentDifficulty,X
   1405  f6c3
   1406  f6c3				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1407  f6c3		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1408  f6c5		       b9 bf ff 	      LDA	TrafficChanceTable,Y
   1409  f6c8		       95 be		      STA	TrafficChance,X
   1410  f6ca		       b9 bb ff 	      LDA	TrafficColorTable,Y
   1411  f6cd		       95 c2		      STA	TrafficColor,X
   1412  f6cf
   1413  f6cf		       a5 c6		      LDA	GameMode	;
   1414  f6d1		       29 01		      AND	#%00000001
   1415  f6d3		       f0 03		      BEQ	UseNextDifficultyTime
   1416  f6d5		       4c d9 f6 	      JMP	StoreDifficultyTime
   1417  f6d8				   UseNextDifficultyTime
   1418  f6d8		       c8		      INY
   1419  f6d9				   StoreDifficultyTime
   1420  f6d9		       b9 c3 ff 	      LDA	TrafficTimeTable,Y
   1421  f6dc		       95 c0		      STA	CheckpointTime,X
   1422  f6de
   1423  f6de				   CheckRandomDifficulty
   1424  f6de		       a5 c6		      LDA	GameMode
   1425  f6e0		       29 08		      AND	#%00001000	; Random difficulties
   1426  f6e2		       f0 26		      BEQ	ReturnFromNextDifficulty
   1427  f6e4				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1428  f6e4		       a5 f2		      LDA	IsOpponentInFront
   1429  f6e6		       30 12		      BMI	UseOpponentChance
   1430  f6e8		       a5 cf		      LDA	OpponentLine	; Same line
   1431  f6ea		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1432  f6ec		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1433  f6ee		       a4 8c		      LDY	FrameCount0
   1434  f6f0		       b9 00 fe 	      LDA	AesTable,Y
   1435  f6f3							;EOR TrafficChance, no need, lets make life simple
   1436  f6f3		       29 3f		      AND	#%00111111
   1437  f6f5		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1438  f6f7		       4c 0a f7 	      JMP	ReturnFromNextDifficulty
   1439  f6fa				   UseOpponentChance
   1440  f6fa		       8a		      TXA
   1441  f6fb		       49 01		      EOR	#%00000001	; Reverts the player
   1442  f6fd		       aa		      TAX
   1443  f6fe		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1444  f700		       85 b3		      STA	Tmp3
   1445  f702		       8a		      TXA
   1446  f703		       49 01		      EOR	#%00000001	; Restors the player
   1447  f705		       aa		      TAX
   1448  f706		       a5 b3		      LDA	Tmp3
   1449  f708		       95 be		      STA	TrafficChance,X
   1450  f70a
   1451  f70a				   ReturnFromNextDifficulty
   1452  f70a		       60		      RTS
   1453  f70b
   1454  f70b				   DefaultOffsets
   1455  f70b		       a9 20		      LDA	#$20
   1456  f70d		       85 96		      STA	TrafficOffset1 + 2
   1457  f70f		       85 a6		      STA	OpTrafficOffset1 + 2
   1458  f711		       a9 40		      LDA	#$40
   1459  f713		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1460  f715		       85 aa		      STA	OpTrafficOffset2 + 2
   1461  f717		       a9 60		      LDA	#$60
   1462  f719		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1463  f71b		       85 ae		      STA	OpTrafficOffset3 + 2
   1464  f71d		       a9 80		      LDA	#$80
   1465  f71f		       60		      RTS
   1466  f720
   1467  f720				   PrintStaticText		; Preload X with the offset referent to StaticText
   1468  f720		       bd 00 ff 	      LDA	StaticText,X
   1469  f723		       85 d0		      STA	ScoreD0
   1470  f725		       e8		      INX
   1471  f726		       bd 00 ff 	      LDA	StaticText,X
   1472  f729		       85 d1		      STA	ScoreD1
   1473  f72b		       e8		      INX
   1474  f72c		       bd 00 ff 	      LDA	StaticText,X
   1475  f72f		       85 d2		      STA	ScoreD2
   1476  f731		       e8		      INX
   1477  f732		       bd 00 ff 	      LDA	StaticText,X
   1478  f735		       85 d3		      STA	ScoreD3
   1479  f737		       e8		      INX
   1480  f738		       bd 00 ff 	      LDA	StaticText,X
   1481  f73b		       85 d4		      STA	ScoreD4
   1482  f73d		       60		      RTS
   1483  f73e
   1484  f73e				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1485  f73e		       a2 00		      LDX	#0
   1486  f740		       a0 04		      LDY	#FONT_OFFSET
   1487  f742
   1488  f742				   ScoreLoop		; 20 
   1489  f742		       85 02		      STA	WSYNC	;2
   1490  f744		       85 2a		      STA	HMOVE
   1491  f746
   1492  f746		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1493  f748		       85 0d		      STA	PF0	;3
   1494  f74a
   1495  f74a		       a5 82		      LDA	PF1Cache	;3
   1496  f74c		       85 0e		      STA	PF1	;3
   1497  f74e
   1498  f74e		       a5 83		      LDA	PF2Cache	;3
   1499  f750		       85 0f		      STA	PF2	;3
   1500  f752
   1501  f752				   DrawScoreD0		; 15
   1502  f752		       a6 d0		      LDX	ScoreD0	; 3
   1503  f754		       bd 00 fd 	      LDA	Font,X	;4
   1504  f757		       85 81		      STA	PF0Cache	;3
   1505  f759		       c6 d0		      DEC	ScoreD0	;5
   1506  f75b
   1507  f75b				   DrawScoreD1		; 23	
   1508  f75b		       a6 d1		      LDX	ScoreD1	; 3
   1509  f75d		       bd 00 fd 	      LDA	Font,X	;4
   1510  f760		       0a		      ASL		;2
   1511  f761		       0a		      ASL		;2
   1512  f762		       0a		      ASL		;2
   1513  f763		       0a		      ASL		;2
   1514  f764		       85 82		      STA	PF1Cache	;3
   1515  f766		       c6 d1		      DEC	ScoreD1	;5
   1516  f768
   1517  f768				   DrawScoreD2		; 20
   1518  f768		       a6 d2		      LDX	ScoreD2	; 3
   1519  f76a		       bd 00 fd 	      LDA	Font,X	;4
   1520  f76d		       29 0f		      AND	#%00001111	;2
   1521  f76f		       05 82		      ORA	PF1Cache	;3
   1522  f771		       85 82		      STA	PF1Cache	;3
   1523  f773		       c6 d2		      DEC	ScoreD2	;5
   1524  f775
   1525  f775				   DrawScoreD3		; 23
   1526  f775		       a6 d3		      LDX	ScoreD3	; 3
   1527  f777		       bd 00 fd 	      LDA	Font,X	;4
   1528  f77a		       4a		      LSR		;2
   1529  f77b		       4a		      LSR		;2
   1530  f77c		       4a		      LSR		;2
   1531  f77d		       4a		      LSR		;2
   1532  f77e		       85 83		      STA	PF2Cache	;3
   1533  f780		       c6 d3		      DEC	ScoreD3	;5
   1534  f782
   1535  f782				   DrawScoreD4		; 20
   1536  f782		       a6 d4		      LDX	ScoreD4	; 3
   1537  f784		       bd 00 fd 	      LDA	Font,X	;4
   1538  f787		       29 f0		      AND	#%11110000	;2
   1539  f789		       05 83		      ORA	PF2Cache	;3
   1540  f78b		       85 83		      STA	PF2Cache	;3
   1541  f78d		       c6 d4		      DEC	ScoreD4	;5
   1542  f78f
   1543  f78f
   1544  f78f		       88		      DEY		;2
   1545  f790		       10 b0		      BPL	ScoreLoop	;4
   1546  f792
   1547  f792		       85 02		      STA	WSYNC
   1548  f794		       85 2a		      STA	HMOVE
   1549  f796		       20 97 f6 	      JSR	LoadAll
   1550  f799		       60		      RTS		; 6
   1551  f79a
   1552  f79a				   WaitForVblankEnd
   1553  f79a		       ad 84 02 	      LDA	INTIM
   1554  f79d		       d0 fb		      BNE	WaitForVblankEnd
   1555  f79f		       85 02		      STA	WSYNC
   1556  f7a1		       85 01		      STA	VBLANK
   1557  f7a3		       60		      RTS
   1558  f7a4
   1559  f7a4				   Sleep4Lines
   1560  f7a4		       85 02		      STA	WSYNC
   1561  f7a6		       85 02		      STA	WSYNC
   1562  f7a8		       85 02		      STA	WSYNC
   1563  f7aa		       85 02		      STA	WSYNC
   1564  f7ac		       60		      RTS
   1565  f7ad
   1566  f7ad				   Sleep8Lines
   1567  f7ad		       20 a4 f7 	      JSR	Sleep4Lines
   1568  f7b0		       20 a4 f7 	      JSR	Sleep4Lines
   1569  f7b3		       60		      RTS
   1570  f7b4
   1571  f7b4				   Sleep32Lines
   1572  f7b4		       20 ad f7 	      JSR	Sleep8Lines
   1573  f7b7		       20 ad f7 	      JSR	Sleep8Lines
   1574  f7ba		       20 ad f7 	      JSR	Sleep8Lines
   1575  f7bd		       20 ad f7 	      JSR	Sleep8Lines
   1576  f7c0		       60		      RTS
   1577  f7c1
   1578  f7c1							;X = number of WSYNC HMOVE to run
   1579  f7c1				   HMoveXTimes
   1580  f7c1		       85 02		      STA	WSYNC	;3
   1581  f7c3		       85 2a		      STA	HMOVE	; 3/10 
   1582  f7c5		       ca		      DEX
   1583  f7c6		       d0 f9		      BNE	HMoveXTimes
   1584  f7c8		       60		      RTS
   1585  f7c9
   1586  f7c9				   ConfigureCarSprites
   1587  f7c9		       a5 8c		      LDA	FrameCount0
   1588  f7cb		       29 01		      AND	#%00000001
   1589  f7cd		       d0 0b		      BNE	LoadForRightScreenSprites
   1590  f7cf				   LoadForLeftScreenSprites
   1591  f7cf		       a5 c7		      LDA	CurrentCarId
   1592  f7d1		       85 b0		      STA	Tmp0
   1593  f7d3		       a5 c8		      LDA	OpCurrentCarId
   1594  f7d5		       85 b1		      STA	Tmp1
   1595  f7d7		       4c e2 f7 	      JMP	LoadCarSpritesFromIds
   1596  f7da				   LoadForRightScreenSprites
   1597  f7da		       a5 c7		      LDA	CurrentCarId
   1598  f7dc		       85 b1		      STA	Tmp1
   1599  f7de		       a5 c8		      LDA	OpCurrentCarId
   1600  f7e0		       85 b0		      STA	Tmp0
   1601  f7e2
   1602  f7e2				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1603  f7e2		       a4 b0		      LDY	Tmp0
   1604  f7e4		       b9 95 ff 	      LDA	CarIdToSpriteAddressL,Y
   1605  f7e7		       85 d7		      STA	CarSpritePointerL
   1606  f7e9		       b9 99 ff 	      LDA	CarIdToSpriteAddressH,Y
   1607  f7ec		       85 d8		      STA	CarSpritePointerH
   1608  f7ee				   ConfigureOpponentCarSprite
   1609  f7ee		       a4 b1		      LDY	Tmp1
   1610  f7f0		       b9 9d ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1611  f7f3		       85 d9		      STA	EnemyCarSpritePointerL
   1612  f7f5		       b9 a1 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1613  f7f8		       85 da		      STA	EnemyCarSpritePointerH
   1614  f7fa		       60		      RTS
   1615  f7fb
   1616  f7fb							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1617  f7fb							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1618  f7fb							; Tmp0 Binary Number
   1619  f7fb							; Result Returned in Tmp 1 and A
   1620  f7fb				   BINBCD8
   1621  f7fb		       f8		      SED		; Switch to decimal mode
   1622  f7fc		       a9 00		      LDA	#0	; Ensure the result is clear
   1623  f7fe		       85 b1		      STA	Tmp1+0
   1624  f800							;STA Tmp1+1
   1625  f800		       a2 08		      LDX	#8	; The number of source bits
   1626  f802
   1627  f802				   CNVBIT
   1628  f802		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1629  f804		       a5 b1		      LDA	Tmp1+0	; And add into result
   1630  f806		       65 b1		      ADC	Tmp1+0
   1631  f808		       85 b1		      STA	Tmp1+0
   1632  f80a							;Not needed now, 0 to 99 is enought for timer!
   1633  f80a							; LDA Tmp1+1	; propagating any carry
   1634  f80a							; ADC Tmp1+1
   1635  f80a							; STA Tmp1+1
   1636  f80a		       ca		      DEX		; And repeat for next bit
   1637  f80b		       d0 f5		      BNE	CNVBIT
   1638  f80d		       d8		      CLD		; Back to binary
   1639  f80e
   1640  f80e		       60		      RTS		; All Done.
   1641  f80f
   1642  f80f							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1643  f80f							;X player 0 or 1
   1644  f80f				   SelectCarWithDpad
   1645  f80f		       a0 03		      LDY	#3
   1646  f811				   SelectCarWithDpadLoop
   1647  f811		       ad 80 02 	      LDA	SWCHA
   1648  f814		       25 b0		      AND	Tmp0
   1649  f816		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1650  f818		       98		      TYA
   1651  f819		       95 c7		      STA	CurrentCarId,X
   1652  f81b				   ContinueSelectCarWithDpadLoop
   1653  f81b		       46 b0		      LSR	Tmp0
   1654  f81d		       88		      DEY
   1655  f81e		       10 f1		      BPL	SelectCarWithDpadLoop
   1656  f820		       60		      RTS
   1657  f821
   1658  f821				   ProcessOpponentLine
   1659  f821		       a5 8c		      LDA	FrameCount0
   1660  f823		       29 01		      AND	#%00000001
   1661  f825		       38		      SEC
   1662  f826		       d0 15		      BNE	Player0IsOpponent
   1663  f828				   Player1IsOpponent		; Code could be reused?
   1664  f828		       a5 91		      LDA	TrafficOffset0 + 1
   1665  f82a		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1666  f82c		       85 b0		      STA	Tmp0
   1667  f82e		       a5 92		      LDA	TrafficOffset0 + 2
   1668  f830		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1669  f832		       85 b1		      STA	Tmp1
   1670  f834		       a5 ba		      LDA	Traffic0Msb
   1671  f836		       e5 bb		      SBC	OpTraffic0Msb
   1672  f838		       85 b2		      STA	Tmp2
   1673  f83a		       4c 4f f8 	      JMP	StoreInFrontPlayer
   1674  f83d				   Player0IsOpponent
   1675  f83d		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1676  f83f		       e5 91		      SBC	TrafficOffset0 + 1
   1677  f841		       85 b0		      STA	Tmp0
   1678  f843		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1679  f845		       e5 92		      SBC	TrafficOffset0 + 2
   1680  f847		       85 b1		      STA	Tmp1
   1681  f849		       a5 bb		      LDA	OpTraffic0Msb
   1682  f84b		       e5 ba		      SBC	Traffic0Msb
   1683  f84d		       85 b2		      STA	Tmp2
   1684  f84f
   1685  f84f				   StoreInFrontPlayer
   1686  f84f		       85 f2		      STA	IsOpponentInFront
   1687  f851
   1688  f851				   AddOffsetToOpponentLine
   1689  f851		       18		      CLC
   1690  f852		       a5 b0		      LDA	Tmp0
   1691  f854		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1692  f856		       85 b0		      STA	Tmp0
   1693  f858		       a5 b1		      LDA	Tmp1
   1694  f85a		       69 00		      ADC	#0
   1695  f85c		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1696  f85e		       a5 b2		      LDA	Tmp2
   1697  f860		       69 00		      ADC	#0
   1698  f862		       05 b1		      ORA	Tmp1
   1699  f864		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1700  f866				   OpponentNotVisible
   1701  f866		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1702  f868		       85 cf		      STA	OpponentLine
   1703  f86a		       4c 71 f8 	      JMP	ReturnFromProcessOpponentLine
   1704  f86d				   OpponentVisible
   1705  f86d		       a5 b0		      LDA	Tmp0
   1706  f86f		       85 cf		      STA	OpponentLine
   1707  f871				   ReturnFromProcessOpponentLine
   1708  f871		       60		      RTS
   1709  f872
   1710  f872							; Value stored in A
   1711  f872				   IsOpponentColliding
   1712  f872							;Any non default state, opponent do not colide
   1713  f872		       a5 8e		      LDA	CollisionCounter
   1714  f874		       05 8f		      ORA	OpCollisionCounter
   1715  f876		       05 cb		      ORA	ScoreFontColorHoldChange
   1716  f878		       05 cc		      ORA	OpScoreFontColorHoldChange
   1717  f87a		       d0 07		      BNE	OpponentNotColliding
   1718  f87c		       a5 f2		      LDA	IsOpponentInFront
   1719  f87e		       25 07		      AND	CXPPMM
   1720  f880		       4c 85 f8 	      JMP	ReturnIsOpponentColliding
   1721  f883				   OpponentNotColliding
   1722  f883		       a9 00		      LDA	#0
   1723  f885				   ReturnIsOpponentColliding
   1724  f885		       60		      RTS
   1725  f886
   1726  f886
   1727  f886							; Movement and colision are binded because the car must be moved after duplicate size.
   1728  f886							; Use X for the player
   1729  f886							; Tmp2 Traffic colision result
   1730  f886				   TestCollisionAndMove
   1731  f886							; Until store the movemnt, Y contains the value to be stored.
   1732  f886							; see if player0 colides with the rest
   1733  f886		       a5 b2		      LDA	Tmp2
   1734  f888		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1735  f88a		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1736  f88c		       d0 25		      BNE	NoCollision
   1737  f88e		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1738  f890		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1739  f892		       f0 1f		      BEQ	NoCollision
   1740  f894		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1741  f896		       f0 1b		      BEQ	NoCollision
   1742  f898		       a9 ff		      LDA	#COLLISION_FRAMES
   1743  f89a		       95 8e		      STA	CollisionCounter,X
   1744  f89c		       b5 f0		      LDA	Player0SpeedH,X
   1745  f89e		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1746  f8a0		       a9 10		      LDA	#COLLISION_SPEED_L
   1747  f8a2		       d5 de		      CMP	Player0SpeedL,X
   1748  f8a4		       b0 04		      BCS	SkipSetColisionSpeedL
   1749  f8a6				   SetColisionSpeedL
   1750  f8a6		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1751  f8a8		       95 de		      STA	Player0SpeedL,X
   1752  f8aa				   SkipSetColisionSpeedL
   1753  f8aa		       a9 00		      LDA	#0
   1754  f8ac		       95 f0		      STA	Player0SpeedH,X
   1755  f8ae		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1756  f8b0		       4c 03 f9 	      JMP	StoreHMove	; We keep position consistent
   1757  f8b3				   NoCollision
   1758  f8b3
   1759  f8b3				   DecrementCollision
   1760  f8b3		       b5 8e		      LDA	CollisionCounter,X
   1761  f8b5		       f0 06		      BEQ	FinishDecrementCollision
   1762  f8b7		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1763  f8b9		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1764  f8bb		       d6 8e		      DEC	CollisionCounter,X
   1765  f8bd				   FinishDecrementCollision
   1766  f8bd
   1767  f8bd				   ResetPlayerSize
   1768  f8bd		       d0 04		      BNE	FinishResetPlayerSize
   1769  f8bf		       a9 30		      LDA	#%00110000
   1770  f8c1		       95 04		      STA	NUSIZ0,X	;
   1771  f8c3				   FinishResetPlayerSize
   1772  f8c3
   1773  f8c3				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1774  f8c3		       b5 8e		      LDA	CollisionCounter,X
   1775  f8c5		       c9 01		      CMP	#1	; Last frame before reset
   1776  f8c7		       d0 05		      BNE	SkipResetPlayerPosition
   1777  f8c9		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1778  f8cb		       4c 03 f9 	      JMP	StoreHMove
   1779  f8ce				   SkipResetPlayerPosition
   1780  f8ce
   1781  f8ce				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1782  f8ce		       b5 c7		      LDA	CurrentCarId,X
   1783  f8d0		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1784  f8d2		       d0 08		      BNE	PrepareReadXAxis
   1785  f8d4		       a0 00		      LDY	#0
   1786  f8d6		       a5 8c		      LDA	FrameCount0
   1787  f8d8		       29 01		      AND	#DRAGSTER_TURN_MASK
   1788  f8da		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1789  f8dc
   1790  f8dc				   PrepareReadXAxis
   1791  f8dc		       a0 00		      LDY	#0
   1792  f8de		       b5 b6		      LDA	Player0X,X
   1793  f8e0				   BeginReadLeft
   1794  f8e0		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1795  f8e2		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1796  f8e5		       2c 80 02 	      BIT	SWCHA
   1797  f8e8		       d0 07		      BNE	SkipMoveLeft
   1798  f8ea		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1799  f8ec		       d6 b6		      DEC	Player0X,X
   1800  f8ee		       4c 03 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1801  f8f1				   SkipMoveLeft
   1802  f8f1				   BeginReadRight
   1803  f8f1		       b5 b6		      LDA	Player0X,X
   1804  f8f3		       c9 2c		      CMP	#PLAYER_MAX_X
   1805  f8f5		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1806  f8f7		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1807  f8fa		       2c 80 02 	      BIT	SWCHA
   1808  f8fd		       d0 04		      BNE	SkipMoveRight
   1809  f8ff		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1810  f901		       f6 b6		      INC	Player0X,X
   1811  f903				   SkipMoveRight
   1812  f903				   StoreHMove
   1813  f903		       94 20		      STY	HMP0,X	;set the move for player 0
   1814  f905
   1815  f905		       60		      RTS
   1816  f906
   1817  f906							; X Traffic offset 4 bits each lane, 4 lanes per player
   1818  f906							; Tmp3 Max X offset
   1819  f906							; Tmp4 Max Player Speed L
   1820  f906							; Tmp5 Max Player Speed H
   1821  f906				   UpdateOffsets
   1822  f906		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1823  f908		       a5 c6		      LDA	GameMode
   1824  f90a		       29 04		      AND	#%00000100	; GameModes with high delta
   1825  f90c		       f0 02		      BEQ	UpdateOffsetsLoop
   1826  f90e		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1827  f910
   1828  f910				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1829  f910		       38		      SEC
   1830  f911		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1831  f913		       f9 81 ff 	      SBC	TrafficSpeeds,Y
   1832  f916		       85 b0		      STA	Tmp0
   1833  f918		       c8		      INY
   1834  f919		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1835  f91b		       f9 81 ff 	      SBC	TrafficSpeeds,Y
   1836  f91e		       85 b1		      STA	Tmp1
   1837  f920		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1838  f922		       e9 00		      SBC	#0
   1839  f924		       85 b2		      STA	Tmp2
   1840  f926
   1841  f926				   AddsTheResult
   1842  f926		       18		      CLC
   1843  f927		       a5 b0		      LDA	Tmp0
   1844  f929		       75 90		      ADC	TrafficOffset0,X
   1845  f92b		       95 90		      STA	TrafficOffset0,X
   1846  f92d		       e8		      INX
   1847  f92e		       a5 b1		      LDA	Tmp1
   1848  f930		       75 90		      ADC	TrafficOffset0,X
   1849  f932		       95 90		      STA	TrafficOffset0,X
   1850  f934		       e8		      INX
   1851  f935		       a5 b2		      LDA	Tmp2	; Carry
   1852  f937		       75 90		      ADC	TrafficOffset0,X
   1853  f939		       95 90		      STA	TrafficOffset0,X
   1854  f93b		       90 0f		      BCC	CalculateOffsetCache
   1855  f93d				   CalculatePlayer0Msb
   1856  f93d		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1857  f93f		       d0 05		      BNE	CalculatePlayer1Msb
   1858  f941		       e6 ba		      INC	Traffic0Msb
   1859  f943		       4c 4c f9 	      JMP	CalculateOffsetCache
   1860  f946				   CalculatePlayer1Msb
   1861  f946		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1862  f948		       d0 02		      BNE	CalculateOffsetCache
   1863  f94a		       e6 bb		      INC	OpTraffic0Msb
   1864  f94c
   1865  f94c				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1866  f94c		       e8		      INX
   1867  f94d		       38		      SEC
   1868  f94e		       69 00		      ADC	#0	;Increment by one
   1869  f950		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1870  f952
   1871  f952				   PrepareNextUpdateLoop
   1872  f952		       c8		      INY
   1873  f953		       e8		      INX
   1874  f954		       e4 b3		      CPX	Tmp3	; Max X offset
   1875  f956		       d0 b8		      BNE	UpdateOffsetsLoop
   1876  f958		       60		      RTS
   1877  f959
   1878  f959							; X Player 0 or 1
   1879  f959				   ProcessSpeed
   1880  f959				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1881  f959		       a9 00		      LDA	#0
   1882  f95b		       85 b0		      STA	Tmp0	; Break speed
   1883  f95d		       b5 b8		      LDA	CountdownTimer,X
   1884  f95f		       d0 0d		      BNE	Break
   1885  f961		       b4 c7		      LDY	CurrentCarId,X
   1886  f963		       a5 8c		      LDA	FrameCount0
   1887  f965		       39 a9 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1888  f968		       d0 04		      BNE	Break
   1889  f96a		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1890  f96c		       85 b0		      STA	Tmp0
   1891  f96e
   1892  f96e				   Break
   1893  f96e		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1894  f971		       2c 80 02 	      BIT	SWCHA
   1895  f974		       d0 12		      BNE	BreakNonZero
   1896  f976		       b5 0c		      LDA	INPT4,X	;3
   1897  f978		       10 0a		      BPL	BreakWhileAccelerating
   1898  f97a		       b4 d5		      LDY	Gear,X
   1899  f97c		       b9 b5 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1900  f97f		       85 b0		      STA	Tmp0
   1901  f981		       4c 88 f9 	      JMP	BreakNonZero
   1902  f984				   BreakWhileAccelerating		; Allow better control while breaking.
   1903  f984		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1904  f986		       85 b0		      STA	Tmp0
   1905  f988
   1906  f988				   BreakNonZero
   1907  f988		       a5 b0		      LDA	Tmp0
   1908  f98a		       f0 29		      BEQ	SkipBreak
   1909  f98c
   1910  f98c				   DecreaseSpeed
   1911  f98c		       38		      SEC
   1912  f98d		       b5 de		      LDA	Player0SpeedL,X
   1913  f98f		       e5 b0		      SBC	Tmp0
   1914  f991		       95 de		      STA	Player0SpeedL,X
   1915  f993		       b5 f0		      LDA	Player0SpeedH,X
   1916  f995		       e9 00		      SBC	#0
   1917  f997		       95 f0		      STA	Player0SpeedH,X
   1918  f999
   1919  f999				   CheckMinSpeed
   1920  f999		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1921  f99b		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1922  f99d		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1923  f99f		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1924  f9a1
   1925  f9a1				   CompareLBreakSpeed
   1926  f9a1		       b5 de		      LDA	Player0SpeedL,X
   1927  f9a3		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1928  f9a5		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1929  f9a7		       4c b2 f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1930  f9aa
   1931  f9aa				   ResetMinSpeed
   1932  f9aa		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1933  f9ac		       95 f0		      STA	Player0SpeedH,X
   1934  f9ae		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1935  f9b0		       95 de		      STA	Player0SpeedL,X
   1936  f9b2
   1937  f9b2				   SkipAccelerateIfBreaking
   1938  f9b2		       4c fb f9 	      JMP	SkipAccelerate
   1939  f9b5				   SkipBreak
   1940  f9b5
   1941  f9b5				   Acelerates
   1942  f9b5		       b5 b8		      LDA	CountdownTimer,X
   1943  f9b7		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1944  f9b9
   1945  f9b9				   ContinueAccelerateTest
   1946  f9b9		       b5 0c		      LDA	INPT4,X	;3
   1947  f9bb		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1948  f9bd		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1949  f9c0		       2c 80 02 	      BIT	SWCHA
   1950  f9c3		       d0 36		      BNE	SkipAccelerate
   1951  f9c5
   1952  f9c5				   IncreaseCarSpeed
   1953  f9c5		       a9 02		      LDA	#2
   1954  f9c7		       85 b0		      STA	Tmp0	; Loop control
   1955  f9c9		       b4 c7		      LDY	CurrentCarId,X
   1956  f9cb				   IncreaseCarSpeedLoop
   1957  f9cb							;Adds speed
   1958  f9cb		       18		      CLC
   1959  f9cc		       b5 dc		      LDA	AccelerateBuffer,X
   1960  f9ce		       79 a5 ff 	      ADC	CarIdToAccelerateSpeed,Y
   1961  f9d1		       95 dc		      STA	AccelerateBuffer,X
   1962  f9d3		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1963  f9d5		       f6 de		      INC	Player0SpeedL,X
   1964  f9d7		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1965  f9d9		       f6 f0		      INC	Player0SpeedH,X
   1966  f9db				   ContinueIncreaseSpeedLoop
   1967  f9db		       c6 b0		      DEC	Tmp0
   1968  f9dd		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1969  f9df				   SkipIncreaseCarSpeed
   1970  f9df
   1971  f9df				   CheckIfAlreadyMaxSpeed
   1972  f9df		       b5 f0		      LDA	Player0SpeedH,X
   1973  f9e1		       c9 02		      CMP	#CAR_MAX_SPEED_H
   1974  f9e3		       90 16		      BCC	SkipAccelerate	; less than my max speed
   1975  f9e5		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   1976  f9e7							;High bit is max, compare the low
   1977  f9e7		       b4 c7		      LDY	CurrentCarId,X
   1978  f9e9		       b5 de		      LDA	Player0SpeedL,X
   1979  f9eb		       d9 ad ff 	      CMP	CarIdToMaxSpeedL,Y
   1980  f9ee		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   1981  f9f0							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   1982  f9f0
   1983  f9f0				   ResetToMaxSpeed		; Speed is more, or is already max
   1984  f9f0		       a9 02		      LDA	#CAR_MAX_SPEED_H
   1985  f9f2		       95 f0		      STA	Player0SpeedH,X
   1986  f9f4		       b4 c7		      LDY	CurrentCarId,X
   1987  f9f6		       b9 ad ff 	      LDA	CarIdToMaxSpeedL,Y
   1988  f9f9		       95 de		      STA	Player0SpeedL,X
   1989  f9fb				   SkipAccelerate
   1990  f9fb		       60		      RTS
   1991  f9fc
   1992  f9fc							;Tmp0 Traffic Offset to compare with next checkpoint
   1993  f9fc				   ProcessPlayerStatus
   1994  f9fc				   IsGameOver
   1995  f9fc		       b5 b8		      LDA	CountdownTimer,X
   1996  f9fe		       15 de		      ORA	Player0SpeedL,X
   1997  fa00		       15 f0		      ORA	Player0SpeedH,X
   1998  fa02		       d0 0b		      BNE	IsCheckpoint
   1999  fa04		       a9 01		      LDA	#1
   2000  fa06		       95 cb		      STA	ScoreFontColorHoldChange,X
   2001  fa08		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2002  fa0a		       95 c9		      STA	ScoreFontColor,X
   2003  fa0c		       4c 41 fa 	      JMP	SkipIsTimeOver
   2004  fa0f
   2005  fa0f				   IsCheckpoint
   2006  fa0f		       b5 cd		      LDA	NextCheckpoint,X
   2007  fa11		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2008  fa13		       d0 20		      BNE	SkipIsCheckpoint
   2009  fa15		       18		      CLC
   2010  fa16		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2011  fa18		       95 cd		      STA	NextCheckpoint,X
   2012  fa1a		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2013  fa1c		       95 c9		      STA	ScoreFontColor,X
   2014  fa1e		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2015  fa20		       95 cb		      STA	ScoreFontColorHoldChange,X
   2016  fa22		       b5 b8		      LDA	CountdownTimer,X
   2017  fa24		       18		      CLC
   2018  fa25		       75 c0		      ADC	CheckpointTime,X
   2019  fa27		       95 b8		      STA	CountdownTimer,X
   2020  fa29		       90 04		      BCC	JumpSkipTimeOver
   2021  fa2b		       a9 ff		      LDA	#$FF
   2022  fa2d		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2023  fa2f				   JumpSkipTimeOver
   2024  fa2f		       20 b4 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2025  fa32		       4c 41 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2026  fa35				   SkipIsCheckpoint
   2027  fa35
   2028  fa35				   IsTimeOver
   2029  fa35		       b5 b8		      LDA	CountdownTimer,X
   2030  fa37		       d0 08		      BNE	SkipIsTimeOver
   2031  fa39		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2032  fa3b		       95 cb		      STA	ScoreFontColorHoldChange,X
   2033  fa3d		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2034  fa3f		       95 c9		      STA	ScoreFontColor,X
   2035  fa41				   SkipIsTimeOver
   2036  fa41		       60		      RTS
   2037  fa42
   2038  fa42
   2039  fa42				   EverySecond		; 64 frames to be more precise
   2040  fa42		       a9 3f		      LDA	#%00111111
   2041  fa44		       25 8c		      AND	FrameCount0
   2042  fa46		       d0 06		      BNE	SkipEverySecondAction
   2043  fa48		       d5 b8		      CMP	CountdownTimer,X
   2044  fa4a		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2045  fa4c		       d6 b8		      DEC	CountdownTimer,X
   2046  fa4e				   SkipEverySecondAction
   2047  fa4e		       60		      RTS
   2048  fa4f
   2049  fa4f				   CalculateGear
   2050  fa4f		       b5 de		      LDA	Player0SpeedL,X	;3
   2051  fa51		       29 80		      AND	#%10000000	;2
   2052  fa53		       15 f0		      ORA	Player0SpeedH,X	;3
   2053  fa55		       18		      CLC		;2
   2054  fa56		       2a		      ROL		;2
   2055  fa57		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2056  fa59		       95 d5		      STA	Gear,X
   2057  fa5b		       60		      RTS
   2058  fa5c
   2059  fa5c				   ProcessScoreFontColor
   2060  fa5c		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2061  fa5e		       f0 06		      BEQ	ResetScoreFontColor
   2062  fa60		       88		      DEY
   2063  fa61		       94 cb		      STY	ScoreFontColorHoldChange,X
   2064  fa63		       4c 6b fa 	      JMP	SkipScoreFontColor
   2065  fa66				   ResetScoreFontColor
   2066  fa66		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2067  fa69		       95 c9		      STA	ScoreFontColor,X
   2068  fa6b				   SkipScoreFontColor
   2069  fa6b		       60		      RTS
   2070  fa6c
   2071  fa6c							; Moved here because of rom space.
   2072  fa6c							; The only SBR in constants space
   2073  fa6c				   DrawQrCode
   2074  fa6c		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2075  fa6e		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2076  fa70		       a9 01		      LDA	#%00000001	; Mirror playfield
   2077  fa72		       85 0a		      STA	CTRLPF
   2078  fa74		       20 72 f6 	      JSR	ClearAll	; To be 100 sure!
   2079  fa77		       ad 82 02 	      LDA	SWCHB
   2080  fa7a		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2081  fa7c		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2082  fa7e		       f0 07		      BEQ	StoreReversedQrCode
   2083  fa80		       86 09		      STX	COLUBK
   2084  fa82		       84 08		      STY	COLUPF
   2085  fa84		       4c 8b fa 	      JMP	ContinueQrCode
   2086  fa87				   StoreReversedQrCode
   2087  fa87		       86 08		      STX	COLUPF
   2088  fa89		       84 09		      STY	COLUBK
   2089  fa8b
   2090  fa8b				   ContinueQrCode
   2091  fa8b		       a2 09		      LDX	#9
   2092  fa8d		       20 c1 f7 	      JSR	HMoveXTimes
   2093  fa90		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2094  fa92		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2095  fa94		       20 9a f7 	      JSR	WaitForVblankEnd
   2096  fa97		       20 ad f7 	      JSR	Sleep8Lines
   2097  fa9a		       20 ad f7 	      JSR	Sleep8Lines
   2098  fa9d		       20 ad f7 	      JSR	Sleep8Lines
   2099  faa0
   2100  faa0				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2101  faa0		       85 02		      STA	WSYNC
   2102  faa2		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2103  faa5		       85 0e		      STA	PF1	;3
   2104  faa7		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2105  faaa		       85 0f		      STA	PF2	;3
      0  faac					      SLEEP	27	; 
      1  faac				   .CYCLES    SET	27
      2  faac
      3  faac				  -	      IF	.CYCLES < 2
      4  faac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  faac				  -	      ERR
      6  faac					      ENDIF
      7  faac
      8  faac					      IF	.CYCLES & 1
      9  faac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  faac				  -	      nop	0
     11  faac					      ELSE
     12  faac		       24 00		      bit	VSYNC
     13  faae					      ENDIF
     14  faae				   .CYCLES    SET	.CYCLES - 3
     15  faae					      ENDIF
     16  faae
     17  faae					      REPEAT	.CYCLES / 2
     18  faae		       ea		      nop
     17  faae					      REPEND
     18  faaf		       ea		      nop
     17  faaf					      REPEND
     18  fab0		       ea		      nop
     17  fab0					      REPEND
     18  fab1		       ea		      nop
     17  fab1					      REPEND
     18  fab2		       ea		      nop
     17  fab2					      REPEND
     18  fab3		       ea		      nop
     17  fab3					      REPEND
     18  fab4		       ea		      nop
     17  fab4					      REPEND
     18  fab5		       ea		      nop
     17  fab5					      REPEND
     18  fab6		       ea		      nop
     17  fab6					      REPEND
     18  fab7		       ea		      nop
     17  fab7					      REPEND
     18  fab8		       ea		      nop
     17  fab8					      REPEND
     18  fab9		       ea		      nop
     19  faba					      REPEND
   2107  faba		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2108  fabd		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2109  fabf		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2110  fac2		       85 0e		      STA	PF1	;3
   2111  fac4
   2112  fac4		       ca		      DEX		;2
   2113  fac5		       d0 d9		      BNE	QrCodeLoop	;2
   2114  fac7		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2115  fac9		       88		      DEY		;2
   2116  faca		       10 d4		      BPL	QrCodeLoop	;4
   2117  facc
   2118  facc				   EndQrCodeLoop
   2119  facc		       85 02		      STA	WSYNC	;
   2120  face		       a9 00		      LDA	#0
   2121  fad0		       85 0e		      STA	PF1	;3
   2122  fad2		       85 0f		      STA	PF2	;3
   2123  fad4
   2124  fad4		       20 b4 f7 	      JSR	Sleep32Lines
   2125  fad7		       4c 09 f5 	      JMP	PrepareOverscan
   2126  fada
   2127  fada							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2128  fc00					      org	$FC00
   2129  fc00				   QrCode1
   2130  fc00		       1f		      .byte.b	#%00011111
   2131  fc01		       10		      .byte.b	#%00010000
   2132  fc02		       17		      .byte.b	#%00010111
   2133  fc03		       17		      .byte.b	#%00010111
   2134  fc04		       17		      .byte.b	#%00010111
   2135  fc05		       10		      .byte.b	#%00010000
   2136  fc06		       1f		      .byte.b	#%00011111
   2137  fc07		       00		      .byte.b	#%00000000
   2138  fc08		       17		      .byte.b	#%00010111
   2139  fc09		       10		      .byte.b	#%00010000
   2140  fc0a		       1d		      .byte.b	#%00011101
   2141  fc0b		       16		      .byte.b	#%00010110
   2142  fc0c		       03		      .byte.b	#%00000011
   2143  fc0d		       19		      .byte.b	#%00011001
   2144  fc0e		       13		      .byte.b	#%00010011
   2145  fc0f		       1c		      .byte.b	#%00011100
   2146  fc10		       0b		      .byte.b	#%00001011
   2147  fc11		       00		      .byte.b	#%00000000
   2148  fc12		       1f		      .byte.b	#%00011111
   2149  fc13		       10		      .byte.b	#%00010000
   2150  fc14		       17		      .byte.b	#%00010111
   2151  fc15		       17		      .byte.b	#%00010111
   2152  fc16		       17		      .byte.b	#%00010111
   2153  fc17		       10		      .byte.b	#%00010000
   2154  fc18		       1f		      .byte.b	#%00011111
   2155  fc19
   2156  fc19				   QrCode2
   2157  fc19		       c3		      .byte.b	#%11000011
   2158  fc1a		       9a		      .byte.b	#%10011010
   2159  fc1b		       82		      .byte.b	#%10000010
   2160  fc1c		       da		      .byte.b	#%11011010
   2161  fc1d		       aa		      .byte.b	#%10101010
   2162  fc1e		       ca		      .byte.b	#%11001010
   2163  fc1f		       f3		      .byte.b	#%11110011
   2164  fc20		       78		      .byte.b	#%01111000
   2165  fc21		       df		      .byte.b	#%11011111
   2166  fc22		       fc		      .byte.b	#%11111100
   2167  fc23		       c7		      .byte.b	#%11000111
   2168  fc24		       98		      .byte.b	#%10011000
   2169  fc25		       23		      .byte.b	#%00100011
   2170  fc26		       b9		      .byte.b	#%10111001
   2171  fc27		       d2		      .byte.b	#%11010010
   2172  fc28		       30		      .byte.b	#%00110000
   2173  fc29		       eb		      .byte.b	#%11101011
   2174  fc2a		       28		      .byte.b	#%00101000
   2175  fc2b		       ab		      .byte.b	#%10101011
   2176  fc2c		       72		      .byte.b	#%01110010
   2177  fc2d		       fa		      .byte.b	#%11111010
   2178  fc2e		       7a		      .byte.b	#%01111010
   2179  fc2f		       32		      .byte.b	#%00110010
   2180  fc30		       3a		      .byte.b	#%00111010
   2181  fc31		       63		      .byte.b	#%01100011
   2182  fc32
   2183  fc32				   QrCode3
   2184  fc32		       98		      .byte.b	#%10011000
   2185  fc33		       c3		      .byte.b	#%11000011
   2186  fc34		       39		      .byte.b	#%00111001
   2187  fc35		       34		      .byte.b	#%00110100
   2188  fc36		       ff		      .byte.b	#%11111111
   2189  fc37		       71		      .byte.b	#%01110001
   2190  fc38		       d5		      .byte.b	#%11010101
   2191  fc39		       d1		      .byte.b	#%11010001
   2192  fc3a		       5f		      .byte.b	#%01011111
   2193  fc3b		       26		      .byte.b	#%00100110
   2194  fc3c		       2d		      .byte.b	#%00101101
   2195  fc3d		       e9		      .byte.b	#%11101001
   2196  fc3e		       d6		      .byte.b	#%11010110
   2197  fc3f		       26		      .byte.b	#%00100110
   2198  fc40		       ba		      .byte.b	#%10111010
   2199  fc41		       03		      .byte.b	#%00000011
   2200  fc42		       dd		      .byte.b	#%11011101
   2201  fc43		       e0		      .byte.b	#%11100000
   2202  fc44		       57		      .byte.b	#%01010111
   2203  fc45		       14		      .byte.b	#%00010100
   2204  fc46		       35		      .byte.b	#%00110101
   2205  fc47		       e5		      .byte.b	#%11100101
   2206  fc48		       b5		      .byte.b	#%10110101
   2207  fc49		       d4		      .byte.b	#%11010100
   2208  fc4a		       97		      .byte.b	#%10010111
   2209  fc4b
   2210  fc4b				   QrCode4
   2211  fc4b		       09		      .byte.b	#%00001001
   2212  fc4c		       0e		      .byte.b	#%00001110
   2213  fc4d		       0f		      .byte.b	#%00001111
   2214  fc4e		       0c		      .byte.b	#%00001100
   2215  fc4f		       0c		      .byte.b	#%00001100
   2216  fc50		       08		      .byte.b	#%00001000
   2217  fc51		       08		      .byte.b	#%00001000
   2218  fc52		       06		      .byte.b	#%00000110
   2219  fc53		       06		      .byte.b	#%00000110
   2220  fc54		       0b		      .byte.b	#%00001011
   2221  fc55		       0f		      .byte.b	#%00001111
   2222  fc56		       04		      .byte.b	#%00000100
   2223  fc57		       08		      .byte.b	#%00001000
   2224  fc58		       0f		      .byte.b	#%00001111
   2225  fc59		       09		      .byte.b	#%00001001
   2226  fc5a		       07		      .byte.b	#%00000111
   2227  fc5b		       05		      .byte.b	#%00000101
   2228  fc5c		       00		      .byte.b	#%00000000
   2229  fc5d		       0f		      .byte.b	#%00001111
   2230  fc5e		       08		      .byte.b	#%00001000
   2231  fc5f		       0b		      .byte.b	#%00001011
   2232  fc60		       0b		      .byte.b	#%00001011
   2233  fc61		       0b		      .byte.b	#%00001011
   2234  fc62		       08		      .byte.b	#%00001000
   2235  fc63		       0f		      .byte.b	#%00001111
   2236  fc64
   2237  fc64				   PlayerToUpMask
   2238  fc64		       10		      .byte.b	#%00010000	;
   2239  fc65		       01		      .byte.b	#%00000001	;
   2240  fc66
   2241  fc66				   PlayerToDownMask
   2242  fc66		       20		      .byte.b	#%00100000	;
   2243  fc67		       02		      .byte.b	#%00000010	;
   2244  fc68
   2245  fc68				   PlayerToLeftMask
   2246  fc68		       40		      .byte.b	#%01000000	;
   2247  fc69		       04		      .byte.b	#%00000100	;
   2248  fc6a
   2249  fc6a				   PlayerToRightMask
   2250  fc6a		       80		      .byte.b	#%10000000	;
   2251  fc6b		       08		      .byte.b	#%00001000	;
   2252  fc6c
   2253  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2254  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2255  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2256  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2257  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2258  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2259  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2260  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2261  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2262  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2263  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2264  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2265  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2266  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2267  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2268  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2269  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2270  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2271  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2272  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2273  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2274  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2275  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2276  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2277  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2278  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2279  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2280  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2281  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2282  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2283  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2284  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2285  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2286  fc8c
   2287  fc8c
   2288  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2289  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2290  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2291  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2292  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2293  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2294  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2295  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2296  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2297  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2298  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2299  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2300  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2301  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2302  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2303  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2304  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2305  fc9c
   2306  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2307  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2308  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2309  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2310  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2311  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2312  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2313  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2314  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2315  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2316  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2317  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2318  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2319  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2320  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2321  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2322  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2323  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2324  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2325  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2326  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2327  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2328  fcb1
   2329  fcb1				   PlayerToDefaultColor
   2330  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2331  fcb2		       96		      .byte.b	#PLAYER1_COLOR
   2332  fcb3
   2333  fd00					      org	$FD00
   2334  fd00				   Font
   2335  fd00				   C0
   2336  fd00		       e7		      .byte.b	#%11100111	;
   2337  fd01		       a5		      .byte.b	#%10100101	; 
   2338  fd02		       a5		      .byte.b	#%10100101	; 
   2339  fd03		       a5		      .byte.b	#%10100101	; 
   2340  fd04		       e7		      .byte.b	#%11100111	;	
   2341  fd05				   C1
   2342  fd05		       e7		      .byte.b	#%11100111	;
   2343  fd06		       42		      .byte.b	#%01000010	; 
   2344  fd07		       42		      .byte.b	#%01000010	; 
   2345  fd08		       42		      .byte.b	#%01000010	; 
   2346  fd09		       66		      .byte.b	#%01100110	;
   2347  fd0a				   C2
   2348  fd0a		       e7		      .byte.b	#%11100111	;
   2349  fd0b		       24		      .byte.b	#%00100100	; 
   2350  fd0c		       e7		      .byte.b	#%11100111	; 
   2351  fd0d		       81		      .byte.b	#%10000001	; 
   2352  fd0e		       e7		      .byte.b	#%11100111	;
   2353  fd0f				   C3
   2354  fd0f		       e7		      .byte.b	#%11100111	;
   2355  fd10		       81		      .byte.b	#%10000001	; 
   2356  fd11		       e7		      .byte.b	#%11100111	; 
   2357  fd12		       81		      .byte.b	#%10000001	; 
   2358  fd13		       e7		      .byte.b	#%11100111	;
   2359  fd14				   C4
   2360  fd14		       81		      .byte.b	#%10000001	;
   2361  fd15		       81		      .byte.b	#%10000001	; 
   2362  fd16		       e7		      .byte.b	#%11100111	; 
   2363  fd17		       a5		      .byte.b	#%10100101	; 
   2364  fd18		       a5		      .byte.b	#%10100101	;
   2365  fd19				   C5
   2366  fd19		       e7		      .byte.b	#%11100111	;
   2367  fd1a		       81		      .byte.b	#%10000001	; 
   2368  fd1b		       e7		      .byte.b	#%11100111	; 
   2369  fd1c		       24		      .byte.b	#%00100100	; 
   2370  fd1d		       e7		      .byte.b	#%11100111	;
   2371  fd1e				   C6
   2372  fd1e		       e7		      .byte.b	#%11100111	;
   2373  fd1f		       a5		      .byte.b	#%10100101	; 
   2374  fd20		       e7		      .byte.b	#%11100111	; 
   2375  fd21		       24		      .byte.b	#%00100100	; 
   2376  fd22		       e7		      .byte.b	#%11100111	;
   2377  fd23				   C7
   2378  fd23		       81		      .byte.b	#%10000001	;
   2379  fd24		       81		      .byte.b	#%10000001	; 
   2380  fd25		       81		      .byte.b	#%10000001	; 
   2381  fd26		       81		      .byte.b	#%10000001	; 
   2382  fd27		       e7		      .byte.b	#%11100111	;
   2383  fd28				   C8
   2384  fd28		       e7		      .byte.b	#%11100111	;
   2385  fd29		       a5		      .byte.b	#%10100101	; 
   2386  fd2a		       e7		      .byte.b	#%11100111	; 
   2387  fd2b		       a5		      .byte.b	#%10100101	; 
   2388  fd2c		       e7		      .byte.b	#%11100111	;
   2389  fd2d				   C9
   2390  fd2d		       e7		      .byte.b	#%11100111	;
   2391  fd2e		       81		      .byte.b	#%10000001	; 
   2392  fd2f		       e7		      .byte.b	#%11100111	; 
   2393  fd30		       a5		      .byte.b	#%10100101	; 
   2394  fd31		       e7		      .byte.b	#%11100111	;
   2395  fd32				   CA
   2396  fd32		       a5		      .byte.b	#%10100101	;
   2397  fd33		       a5		      .byte.b	#%10100101	; 
   2398  fd34		       e7		      .byte.b	#%11100111	; 
   2399  fd35		       a5		      .byte.b	#%10100101	; 
   2400  fd36		       e7		      .byte.b	#%11100111	;
   2401  fd37				   CB
   2402  fd37		       66		      .byte.b	#%01100110	;
   2403  fd38		       a5		      .byte.b	#%10100101	; 
   2404  fd39		       66		      .byte.b	#%01100110	; 
   2405  fd3a		       a5		      .byte.b	#%10100101	;
   2406  fd3b		       66		      .byte.b	#%01100110	;
   2407  fd3c				   CC
   2408  fd3c		       e7		      .byte.b	#%11100111	;
   2409  fd3d		       24		      .byte.b	#%00100100	; 
   2410  fd3e		       24		      .byte.b	#%00100100	; 
   2411  fd3f		       24		      .byte.b	#%00100100	;
   2412  fd40		       e7		      .byte.b	#%11100111	;
   2413  fd41
   2414  fd41				   CD
   2415  fd41		       66		      .byte.b	#%01100110	;
   2416  fd42		       a5		      .byte.b	#%10100101	; 
   2417  fd43		       a5		      .byte.b	#%10100101	; 
   2418  fd44		       a5		      .byte.b	#%10100101	;
   2419  fd45		       66		      .byte.b	#%01100110	;
   2420  fd46
   2421  fd46				   CE
   2422  fd46		       e7		      .byte.b	#%11100111	;
   2423  fd47		       24		      .byte.b	#%00100100	; 
   2424  fd48		       e7		      .byte.b	#%11100111	; 
   2425  fd49		       24		      .byte.b	#%00100100	; 
   2426  fd4a		       e7		      .byte.b	#%11100111	;
   2427  fd4b
   2428  fd4b				   CF
   2429  fd4b		       24		      .byte.b	#%00100100	;
   2430  fd4c		       24		      .byte.b	#%00100100	; 
   2431  fd4d		       e7		      .byte.b	#%11100111	; 
   2432  fd4e		       24		      .byte.b	#%00100100	; 
   2433  fd4f		       e7		      .byte.b	#%11100111	;
   2434  fd50
   2435  fd50				   CG
   2436  fd50		       c3		      .byte.b	#%11000011	;
   2437  fd51		       a5		      .byte.b	#%10100101	; 
   2438  fd52		       a5		      .byte.b	#%10100101	; 
   2439  fd53		       24		      .byte.b	#%00100100	; 
   2440  fd54		       c3		      .byte.b	#%11000011	;	
   2441  fd55
   2442  fd55				   CH
   2443  fd55		       a5		      .byte.b	#%10100101	;
   2444  fd56		       a5		      .byte.b	#%10100101	; 
   2445  fd57		       e7		      .byte.b	#%11100111	; 
   2446  fd58		       a5		      .byte.b	#%10100101	; 
   2447  fd59		       a5		      .byte.b	#%10100101	;
   2448  fd5a
   2449  fd5a				   CI
   2450  fd5a		       e7		      .byte.b	#%11100111	;
   2451  fd5b		       42		      .byte.b	#%01000010	; 
   2452  fd5c		       42		      .byte.b	#%01000010	; 
   2453  fd5d		       42		      .byte.b	#%01000010	; 
   2454  fd5e		       e7		      .byte.b	#%11100111	;
   2455  fd5f
   2456  fd5f				   CJ
   2457  fd5f		       e7		      .byte.b	#%11100111	;
   2458  fd60		       a5		      .byte.b	#%10100101	; 
   2459  fd61		       81		      .byte.b	#%10000001	; 
   2460  fd62		       81		      .byte.b	#%10000001	; 
   2461  fd63		       81		      .byte.b	#%10000001	;	
   2462  fd64
   2463  fd64				   CK
   2464  fd64		       a5		      .byte.b	#%10100101	;
   2465  fd65		       a5		      .byte.b	#%10100101	; 
   2466  fd66		       66		      .byte.b	#%01100110	; 
   2467  fd67		       a5		      .byte.b	#%10100101	; 
   2468  fd68		       a5		      .byte.b	#%10100101	;
   2469  fd69
   2470  fd69				   CL
   2471  fd69		       e7		      .byte.b	#%11100111	;
   2472  fd6a		       24		      .byte.b	#%00100100	; 
   2473  fd6b		       24		      .byte.b	#%00100100	; 
   2474  fd6c		       24		      .byte.b	#%00100100	; 
   2475  fd6d		       24		      .byte.b	#%00100100	;
   2476  fd6e
   2477  fd6e				   CM
   2478  fd6e		       a5		      .byte.b	#%10100101	;
   2479  fd6f		       a5		      .byte.b	#%10100101	; 
   2480  fd70		       a5		      .byte.b	#%10100101	; 
   2481  fd71		       e7		      .byte.b	#%11100111	; 
   2482  fd72		       a5		      .byte.b	#%10100101	;
   2483  fd73
   2484  fd73				   CN
   2485  fd73		       a5		      .byte.b	#%10100101	;
   2486  fd74		       a5		      .byte.b	#%10100101	; 
   2487  fd75		       a5		      .byte.b	#%10100101	; 
   2488  fd76		       a5		      .byte.b	#%10100101	; 
   2489  fd77		       66		      .byte.b	#%01100110	;	
   2490  fd78
   2491  fd78
   2492  fd78				   CO
   2493  fd78		       42		      .byte.b	#%01000010	;
   2494  fd79		       a5		      .byte.b	#%10100101	; 
   2495  fd7a		       a5		      .byte.b	#%10100101	; 
   2496  fd7b		       a5		      .byte.b	#%10100101	; 
   2497  fd7c		       42		      .byte.b	#%01000010	;	
   2498  fd7d
   2499  fd7d				   CP
   2500  fd7d		       24		      .byte.b	#%00100100	;
   2501  fd7e		       24		      .byte.b	#%00100100	; 
   2502  fd7f		       e7		      .byte.b	#%11100111	; 
   2503  fd80		       a5		      .byte.b	#%10100101	; 
   2504  fd81		       e7		      .byte.b	#%11100111	;
   2505  fd82
   2506  fd82				   CQ
   2507  fd82		       81		      .byte.b	#%10000001	;
   2508  fd83		       e5		      .byte.b	#%11100101	; 
   2509  fd84		       a5		      .byte.b	#%10100101	; 
   2510  fd85		       a5		      .byte.b	#%10100101	; 
   2511  fd86		       e7		      .byte.b	#%11100111	;	
   2512  fd87
   2513  fd87				   CR
   2514  fd87		       a5		      .byte.b	#%10100101	;
   2515  fd88		       a5		      .byte.b	#%10100101	; 
   2516  fd89		       66		      .byte.b	#%01100110	; 
   2517  fd8a		       a5		      .byte.b	#%10100101	; 
   2518  fd8b		       66		      .byte.b	#%01100110	;
   2519  fd8c
   2520  fd8c				   CS
   2521  fd8c		       66		      .byte.b	#%01100110	;
   2522  fd8d		       81		      .byte.b	#%10000001	; 
   2523  fd8e		       42		      .byte.b	#%01000010	; 
   2524  fd8f		       24		      .byte.b	#%00100100	; 
   2525  fd90		       c3		      .byte.b	#%11000011	;
   2526  fd91
   2527  fd91				   CT
   2528  fd91		       42		      .byte.b	#%01000010	;
   2529  fd92		       42		      .byte.b	#%01000010	; 
   2530  fd93		       42		      .byte.b	#%01000010	; 
   2531  fd94		       42		      .byte.b	#%01000010	; 
   2532  fd95		       e7		      .byte.b	#%11100111	;
   2533  fd96
   2534  fd96				   CU
   2535  fd96		       e7		      .byte.b	#%11100111	;
   2536  fd97		       a5		      .byte.b	#%10100101	; 
   2537  fd98		       a5		      .byte.b	#%10100101	; 
   2538  fd99		       a5		      .byte.b	#%10100101	; 
   2539  fd9a		       a5		      .byte.b	#%10100101	;	
   2540  fd9b
   2541  fd9b				   CW
   2542  fd9b		       a5		      .byte.b	#%10100101	;
   2543  fd9c		       e7		      .byte.b	#%11100111	; 
   2544  fd9d		       a5		      .byte.b	#%10100101	; 
   2545  fd9e		       a5		      .byte.b	#%10100101	; 
   2546  fd9f		       a5		      .byte.b	#%10100101	;
   2547  fda0
   2548  fda0				   CY
   2549  fda0		       42		      .byte.b	#%01000010	;
   2550  fda1		       42		      .byte.b	#%01000010	; 
   2551  fda2		       42		      .byte.b	#%01000010	; 
   2552  fda3		       a5		      .byte.b	#%10100101	; 
   2553  fda4		       a5		      .byte.b	#%10100101	;
   2554  fda5
   2555  fda5				   Exclamation
   2556  fda5		       42		      .byte.b	#%01000010	;
   2557  fda6		       00		      .byte.b	#%00000000	; 
   2558  fda7		       42		      .byte.b	#%01000010	; 
   2559  fda8		       42		      .byte.b	#%01000010	; 
   2560  fda9		       42		      .byte.b	#%01000010	;
   2561  fdaa
   2562  fdaa				   Pipe
   2563  fdaa				   Colon
   2564  fdaa		       42		      .byte.b	#%01000010	;
   2565  fdab		       42		      .byte.b	#%01000010	; 
   2566  fdac		       00		      .byte.b	#%00000000	; 
   2567  fdad		       42		      .byte.b	#%01000010	; 
   2568  fdae		       42		      .byte.b	#%01000010	;
   2569  fdaf
   2570  fdaf				   Space
   2571  fdaf				   C0B
   2572  fdaf		       00		      .byte.b	#%00000000	;
   2573  fdb0		       00		      .byte.b	#%00000000	; 
   2574  fdb1		       00		      .byte.b	#%00000000	; 
   2575  fdb2		       00		      .byte.b	#%00000000	; 
   2576  fdb3		       00		      .byte.b	#%00000000	;	
   2577  fdb4				   C1B
   2578  fdb4		       24		      .byte.b	#%00100100	;
   2579  fdb5		       00		      .byte.b	#%00000000	; 
   2580  fdb6		       00		      .byte.b	#%00000000	; 
   2581  fdb7		       00		      .byte.b	#%00000000	; 
   2582  fdb8		       00		      .byte.b	#%00000000	;
   2583  fdb9				   C2B
   2584  fdb9		       66		      .byte.b	#%01100110	;
   2585  fdba		       00		      .byte.b	#%00000000	; 
   2586  fdbb		       00		      .byte.b	#%00000000	; 
   2587  fdbc		       00		      .byte.b	#%00000000	; 
   2588  fdbd		       00		      .byte.b	#%00000000	;
   2589  fdbe				   C3B
   2590  fdbe		       e7		      .byte.b	#%11100111	;
   2591  fdbf		       00		      .byte.b	#%00000000	; 
   2592  fdc0		       00		      .byte.b	#%00000000	; 
   2593  fdc1		       00		      .byte.b	#%00000000	; 
   2594  fdc2		       00		      .byte.b	#%00000000	;
   2595  fdc3				   C4B
   2596  fdc3		       e7		      .byte.b	#%11100111	;
   2597  fdc4		       24		      .byte.b	#%00100100	; 
   2598  fdc5		       00		      .byte.b	#%00000000	; 
   2599  fdc6		       00		      .byte.b	#%00000000	; 
   2600  fdc7		       00		      .byte.b	#%00000000	;
   2601  fdc8				   C5B
   2602  fdc8		       e7		      .byte.b	#%11100111	;
   2603  fdc9		       66		      .byte.b	#%01100110	; 
   2604  fdca		       00		      .byte.b	#%00000000	; 
   2605  fdcb		       00		      .byte.b	#%00000000	; 
   2606  fdcc		       00		      .byte.b	#%00000000	;
   2607  fdcd				   C6B
   2608  fdcd		       e7		      .byte.b	#%11100111	;
   2609  fdce		       e7		      .byte.b	#%11100111	; 
   2610  fdcf		       00		      .byte.b	#%00000000	; 
   2611  fdd0		       00		      .byte.b	#%00000000	; 
   2612  fdd1		       00		      .byte.b	#%00000000	;
   2613  fdd2				   C7B
   2614  fdd2		       e7		      .byte.b	#%11100111	;
   2615  fdd3		       e7		      .byte.b	#%11100111	; 
   2616  fdd4		       24		      .byte.b	#%00100100	; 
   2617  fdd5		       00		      .byte.b	#%00000000	; 
   2618  fdd6		       00		      .byte.b	#%00000000	;
   2619  fdd7				   C8B
   2620  fdd7		       e7		      .byte.b	#%11100111	;
   2621  fdd8		       e7		      .byte.b	#%11100111	; 
   2622  fdd9		       66		      .byte.b	#%01100110	; 
   2623  fdda		       00		      .byte.b	#%00000000	; 
   2624  fddb		       00		      .byte.b	#%00000000	;
   2625  fddc				   C9B
   2626  fddc		       e7		      .byte.b	#%11100111	;
   2627  fddd		       e7		      .byte.b	#%11100111	; 
   2628  fdde		       e7		      .byte.b	#%11100111	; 
   2629  fddf		       00		      .byte.b	#%00000000	; 
   2630  fde0		       00		      .byte.b	#%00000000	;
   2631  fde1				   CAB
   2632  fde1		       e7		      .byte.b	#%11100111	;
   2633  fde2		       e7		      .byte.b	#%11100111	; 
   2634  fde3		       e7		      .byte.b	#%11100111	; 
   2635  fde4		       24		      .byte.b	#%00100100	; 
   2636  fde5		       00		      .byte.b	#%00000000	;
   2637  fde6				   CBB
   2638  fde6		       e7		      .byte.b	#%11100111	;
   2639  fde7		       e7		      .byte.b	#%11100111	; 
   2640  fde8		       e7		      .byte.b	#%11100111	; 
   2641  fde9		       66		      .byte.b	#%01100110	; 
   2642  fdea		       00		      .byte.b	#%00000000	;
   2643  fdeb				   CCB
   2644  fdeb		       e7		      .byte.b	#%11100111	;
   2645  fdec		       e7		      .byte.b	#%11100111	; 
   2646  fded		       e7		      .byte.b	#%11100111	; 
   2647  fdee		       e7		      .byte.b	#%11100111	; 
   2648  fdef		       00		      .byte.b	#%00000000	;
   2649  fdf0
   2650  fdf0				   CDB
   2651  fdf0		       e7		      .byte.b	#%11100111	;
   2652  fdf1		       e7		      .byte.b	#%11100111	; 
   2653  fdf2		       e7		      .byte.b	#%11100111	; 
   2654  fdf3		       e7		      .byte.b	#%11100111	; 
   2655  fdf4		       24		      .byte.b	#%00100100	;
   2656  fdf5
   2657  fdf5				   CEB
   2658  fdf5		       e7		      .byte.b	#%11100111	;
   2659  fdf6		       e7		      .byte.b	#%11100111	; 
   2660  fdf7		       e7		      .byte.b	#%11100111	; 
   2661  fdf8		       e7		      .byte.b	#%11100111	; 
   2662  fdf9		       66		      .byte.b	#%01100110	;
   2663  fdfa
   2664  fdfa				   CFB
   2665  fdfa		       e7		      .byte.b	#%11100111	;
   2666  fdfb		       e7		      .byte.b	#%11100111	; 
   2667  fdfc		       e7		      .byte.b	#%11100111	; 
   2668  fdfd		       e7		      .byte.b	#%11100111	; 
   2669  fdfe		       e7		      .byte.b	#%11100111	;
   2670  fdff
   2671  fe00					      org	$FE00
   2672  fe00				   AesTable
   2673  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2674  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2675  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2676  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2677  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2678  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2679  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2680  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2681  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2682  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2683  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2684  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2685  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2686  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2687  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2688  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2689  ff00
   2690  ff00					      org	$FF00
   2691  ff00				   StaticText		; All static text must be on the same MSB block. 
   2692  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2693  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2694  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2695  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2696  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2697  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2698  ff05
   2699  ff05				   HellwayLeftText
   2700  ff05		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2701  ff06		       59		      .byte.b	#<CH + #FONT_OFFSET
   2702  ff07		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2703  ff08		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2704  ff09
   2705  ff09				   HellwayRightText
   2706  ff09		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2707  ff0a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2708  ff0b		       81		      .byte.b	#<CP + #FONT_OFFSET
   2709  ff0c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2710  ff0d		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2711  ff0e
   2712  ff0e				   OpbText
   2713  ff0e		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2714  ff0f		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2715  ff10		       81		      .byte.b	#<CP + #FONT_OFFSET
   2716  ff11		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2717  ff12
   2718  ff12				   YearText
   2719  ff12		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2720  ff13		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2721  ff14		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2722  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2723  ff16		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2724  ff17
   2725  ff17				   GoText
   2726  ff17		       54		      .byte.b	#<CG + #FONT_OFFSET
   2727  ff18		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2728  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2729  ff1a		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2730  ff1b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2731  ff1c
   2732  ff1c				   ReadyText
   2733  ff1c		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2734  ff1d		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2735  ff1e		       36		      .byte.b	#<CA + #FONT_OFFSET
   2736  ff1f		       45		      .byte.b	#<CD + #FONT_OFFSET
   2737  ff20		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2738  ff21
   2739  ff21				   WinText
   2740  ff21		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2741  ff22		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2742  ff23		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2743  ff24
   2744  ff24				   LoseText
   2745  ff24		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2746  ff25		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2747  ff26		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2748  ff27
   2749  ff27				   EndStaticText
   2750  ff27
   2751  ff27				   TachometerSizeLookup1
   2752  ff27		       1f		      .byte.b	#%00011111
   2753  ff28		       3f		      .byte.b	#%00111111
   2754  ff29		       7f		      .byte.b	#%01111111
   2755  ff2a		       ff		      .byte.b	#%11111111
   2756  ff2b		       ff		      .byte.b	#%11111111
   2757  ff2c		       ff		      .byte.b	#%11111111
   2758  ff2d		       ff		      .byte.b	#%11111111
   2759  ff2e		       ff		      .byte.b	#%11111111
   2760  ff2f
   2761  ff2f				   TachometerSizeLookup2
   2762  ff2f		       00		      .byte.b	#%00000000
   2763  ff30		       00		      .byte.b	#%00000000
   2764  ff31		       00		      .byte.b	#%00000000
   2765  ff32		       00		      .byte.b	#%00000000
   2766  ff33		       80		      .byte.b	#%10000000
   2767  ff34		       c0		      .byte.b	#%11000000
   2768  ff35		       e0		      .byte.b	#%11100000
   2769  ff36		       f0		      .byte.b	#%11110000
   2770  ff37
   2771  ff37				   TachometerGearLookup
   2772  ff37		       01		      .byte.b	#%00000001
   2773  ff38		       02		      .byte.b	#%00000010
   2774  ff39		       04		      .byte.b	#%00000100
   2775  ff3a		       08		      .byte.b	#%00001000
   2776  ff3b		       10		      .byte.b	#%00010000
   2777  ff3c		       30		      .byte.b	#%00110000
   2778  ff3d
   2779  ff3d				   EngineSoundType
   2780  ff3d		       02		      .byte.b	#2
   2781  ff3e		       02		      .byte.b	#2
   2782  ff3f		       0e		      .byte.b	#14
   2783  ff40		       06		      .byte.b	#6
   2784  ff41		       06		      .byte.b	#6
   2785  ff42		       0e		      .byte.b	#14
   2786  ff43
   2787  ff43				   EngineBaseFrequence
   2788  ff43		       1f		      .byte.b	#31
   2789  ff44		       15		      .byte.b	#21
   2790  ff45		       14		      .byte.b	#20
   2791  ff46		       1f		      .byte.b	#31
   2792  ff47		       16		      .byte.b	#22
   2793  ff48		       03		      .byte.b	#3
   2794  ff49
   2795  ff49				   CarSprite0		; Upside down, Original Car
   2796  ff49		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2797  ff51				   CarSprite0NoPadding
   2798  ff51		       7e		      .byte.b	#%01111110
   2799  ff52		       24		      .byte.b	#%00100100
   2800  ff53		       bd		      .byte.b	#%10111101
   2801  ff54		       3c		      .byte.b	#%00111100
   2802  ff55		       bd		      .byte.b	#%10111101
   2803  ff56		       3c		      .byte.b	#%00111100
   2804  ff57
   2805  ff57				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2806  ff57		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2807  ff5f				   CarSprite1NoPadding
   2808  ff5f		       bd		      .byte.b	#%10111101
   2809  ff60		       7e		      .byte.b	#%01111110
   2810  ff61		       5a		      .byte.b	#%01011010
   2811  ff62		       66		      .byte.b	#%01100110
   2812  ff63		       bd		      .byte.b	#%10111101
   2813  ff64		       3c		      .byte.b	#%00111100
   2814  ff65
   2815  ff65				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2816  ff65		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2817  ff6d				   CarSprite2NoPadding
   2818  ff6d		       7e		      .byte.b	#%01111110
   2819  ff6e		       a5		      .byte.b	#%10100101
   2820  ff6f		       42		      .byte.b	#%01000010
   2821  ff70		       42		      .byte.b	#%01000010
   2822  ff71		       bd		      .byte.b	#%10111101
   2823  ff72		       7e		      .byte.b	#%01111110
   2824  ff73
   2825  ff73				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2826  ff73		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2827  ff7b				   CarSprite3NoPadding
   2828  ff7b		       3c		      .byte.b	#%00111100
   2829  ff7c		       db		      .byte.b	#%11011011
   2830  ff7d		       db		      .byte.b	#%11011011
   2831  ff7e		       3c		      .byte.b	#%00111100
   2832  ff7f		       5a		      .byte.b	#%01011010
   2833  ff80		       3c		      .byte.b	#%00111100
   2834  ff81
   2835  ff81				   TrafficSpeeds
   2836  ff81		       00		      .byte.b	#$00	;  Trafic0 L
   2837  ff82		       00		      .byte.b	#$00	;  Trafic0 H
   2838  ff83		       0a		      .byte.b	#$0A	;  Trafic1 L
   2839  ff84		       01		      .byte.b	#$01	;  Trafic1 H
   2840  ff85		       e6		      .byte.b	#$E6	;  Trafic2 L
   2841  ff86		       00		      .byte.b	#$00	;  Trafic2 H
   2842  ff87		       c2		      .byte.b	#$C2	;  Trafic3 L
   2843  ff88		       00		      .byte.b	#$00	;  Trafic3 H
   2844  ff89		       9e		      .byte.b	#$9E	;  Trafic4 L
   2845  ff8a		       00		      .byte.b	#$00	;  Trafic4 H
   2846  ff8b				   TrafficSpeedsHighDelta
   2847  ff8b		       00		      .byte.b	#$00	;  Trafic0 L
   2848  ff8c		       00		      .byte.b	#$00	;  Trafic0 H
   2849  ff8d		       0a		      .byte.b	#$0A	;  Trafic1 L
   2850  ff8e		       01		      .byte.b	#$01	;  Trafic1 H
   2851  ff8f		       c8		      .byte.b	#$C8	;  Trafic2 L
   2852  ff90		       00		      .byte.b	#$00	;  Trafic2 H
   2853  ff91		       86		      .byte.b	#$86	;  Trafic3 L
   2854  ff92		       00		      .byte.b	#$00	;  Trafic3 H
   2855  ff93		       44		      .byte.b	#$44	;  Trafic4 L
   2856  ff94		       00		      .byte.b	#$00	;  Trafic4 H
   2857  ff95
   2858  ff95				   CarIdToSpriteAddressL
   2859  ff95		       49		      .byte.b	#<CarSprite0
   2860  ff96		       57		      .byte.b	#<CarSprite1
   2861  ff97		       65		      .byte.b	#<CarSprite2
   2862  ff98		       73		      .byte.b	#<CarSprite3
   2863  ff99
   2864  ff99				   CarIdToSpriteAddressH
   2865  ff99		       ff		      .byte.b	#>CarSprite0
   2866  ff9a		       ff		      .byte.b	#>CarSprite1
   2867  ff9b		       ff		      .byte.b	#>CarSprite2
   2868  ff9c		       ff		      .byte.b	#>CarSprite3
   2869  ff9d
   2870  ff9d				   EnemyCarIdToSpriteAddressL
   2871  ff9d		       51		      .byte.b	#<CarSprite0NoPadding
   2872  ff9e		       5f		      .byte.b	#<CarSprite1NoPadding
   2873  ff9f		       6d		      .byte.b	#<CarSprite2NoPadding
   2874  ffa0		       7b		      .byte.b	#<CarSprite3NoPadding
   2875  ffa1
   2876  ffa1				   EnemyCarIdToSpriteAddressH
   2877  ffa1		       ff		      .byte.b	#>CarSprite0NoPadding
   2878  ffa2		       ff		      .byte.b	#>CarSprite1NoPadding
   2879  ffa3		       ff		      .byte.b	#>CarSprite2NoPadding
   2880  ffa4		       ff		      .byte.b	#>CarSprite3NoPadding
   2881  ffa5
   2882  ffa5				   CarIdToAccelerateSpeed
   2883  ffa5		       80		      .byte.b	#128
   2884  ffa6		       c0		      .byte.b	#192
   2885  ffa7		       60		      .byte.b	#96
   2886  ffa8		       c0		      .byte.b	#192
   2887  ffa9
   2888  ffa9				   CarIdToTimeoverBreakInterval 		; Glide
   2889  ffa9		       03		      .byte.b	#%00000011	;Every 4 frames
   2890  ffaa		       03		      .byte.b	#%00000011	;Every 4 frames
   2891  ffab		       0f		      .byte.b	#%00001111	;Every 16 frames
   2892  ffac		       03		      .byte.b	#%00000011	;Every 4 frames
   2893  ffad
   2894  ffad				   CarIdToMaxSpeedL
   2895  ffad		       80		      .byte.b	#$80
   2896  ffae		       00		      .byte.b	#$00	; One less gear
   2897  ffaf		       80		      .byte.b	#$80
   2898  ffb0		       80		      .byte.b	#$80
   2899  ffb1
   2900  ffb1				   CarIdToMaxGear
   2901  ffb1		       05		      .byte.b	#5
   2902  ffb2		       04		      .byte.b	#4	; One less gear
   2903  ffb3		       05		      .byte.b	#5
   2904  ffb4		       05		      .byte.b	#5
   2905  ffb5
   2906  ffb5				   GearToBreakSpeedTable
   2907  ffb5		       09		      .byte.b	#(BREAK_SPEED - 1)
   2908  ffb6		       09		      .byte.b	#(BREAK_SPEED - 1)
   2909  ffb7		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2910  ffb8		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2911  ffb9		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2912  ffba		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2913  ffbb
   2914  ffbb				   TrafficColorTable
   2915  ffbb		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2916  ffbc		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2917  ffbd		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2918  ffbe		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2919  ffbf
   2920  ffbf				   TrafficChanceTable
   2921  ffbf		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2922  ffc0		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2923  ffc1		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2924  ffc2		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2925  ffc3
   2926  ffc3				   TrafficTimeTable
   2927  ffc3		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2928  ffc4		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2929  ffc5		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2930  ffc6		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2931  ffc7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2932  ffc8
   2933  ffc8
   2934  fffc					      org	$FFFC
   2935  fffc		       00 f0		      .word.w	BeforeStart
   2936  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
