------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 80	   GRP0Cache  =	$80
    103  f000		       00 81	   PF0Cache   =	$81
    104  f000		       00 82	   PF1Cache   =	$82
    105  f000		       00 83	   PF2Cache   =	$83
    106  f000		       00 84	   GRP1Cache  =	$84
    107  f000		       00 85	   ENABLCache =	$85
    108  f000		       00 86	   ENAM0Cache =	$86
    109  f000		       00 87	   ENAM1Cache =	$87
    110  f000
    111  f000		       00 8c	   FrameCount0 =	$8C	;
    112  f000		       00 8d	   FrameCount1 =	$8D	;
    113  f000
    114  f000		       00 8e	   CollisionCounter =	$8E
    115  f000		       00 8f	   OpCollisionCounter =	$8F
    116  f000
    117  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    123  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    124  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    125  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    126  f000
    127  f000							;Temporary variables, multiple uses
    128  f000		       00 b0	   Tmp0       =	$B0
    129  f000		       00 b1	   Tmp1       =	$B1
    130  f000		       00 b2	   Tmp2       =	$B2
    131  f000		       00 b3	   Tmp3       =	$B3
    132  f000		       00 b4	   Tmp4       =	$B4
    133  f000		       00 b5	   Tmp5       =	$B5
    134  f000
    135  f000		       00 b6	   Player0X   =	$B6
    136  f000		       00 b7	   Player1X   =	$B7
    137  f000		       00 b8	   CountdownTimer =	$B8
    138  f000		       00 b9	   OpCountdownTimer =	$B9
    139  f000		       00 ba	   Traffic0Msb =	$BA
    140  f000		       00 bb	   OpTraffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    143  f000		       00 be	   TrafficChance =	$BE
    144  f000		       00 bf	   OpTrafficChance =	$BF
    145  f000
    146  f000		       00 c0	   CheckpointTime =	$C0
    147  f000		       00 c1	   OpCheckpointTime =	$C1
    148  f000		       00 c2	   TrafficColor =	$C2
    149  f000		       00 c3	   OpTrafficColor =	$C3
    150  f000		       00 c4	   CurrentDifficulty =	$C4
    151  f000		       00 c5	   OpCurrentDifficulty =	$C5
    152  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000		       00 c7	   CurrentCarId =	$C7
    156  f000		       00 c8	   OpCurrentCarId =	$C8
    157  f000
    158  f000		       00 c9	   ScoreFontColor =	$C9
    159  f000		       00 ca	   OpScoreFontColor =	$CA
    160  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    161  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    162  f000		       00 cd	   NextCheckpoint =	$CD
    163  f000		       00 ce	   OpNextCheckpoint =	$CE
    164  f000		       00 cf	   OpponentLine =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000
    172  f000		       00 d5	   Gear       =	$D5
    173  f000		       00 d6	   OpGear     =	$D6
    174  f000
    175  f000		       00 d7	   CarSpritePointerL =	$D7
    176  f000		       00 d8	   CarSpritePointerH =	$D8
    177  f000
    178  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    179  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    180  f000
    181  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    182  f000
    183  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    184  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    185  f000
    186  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    187  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    188  f000
    189  f000		       00 f0	   Player0SpeedL =	$F0
    190  f000		       00 f1	   Player1SpeedL =	$F1
    191  f000		       00 f2	   Player0SpeedH =	$F2
    192  f000		       00 f3	   Player1SpeedH =	$F3
    193  f000
    194  f000							;generic start up stuff, put zero in almost all...
    195  f000				   BeforeStart		;All variables that are kept on game reset or select
    196  f000		       a0 00		      LDY	#0
    197  f002		       84 bc		      STY	SwitchDebounceCounter
    198  f004		       84 c4		      STY	CurrentDifficulty
    199  f006		       84 bd		      STY	GameStatus
    200  f008		       84 c7		      STY	CurrentCarId
    201  f00a		       84 c8		      STY	OpCurrentCarId
    202  f00c		       a0 10		      LDY	#16
    203  f00e		       84 c6		      STY	GameMode
    204  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    205  f012
    206  f012				   Start
    207  f012		       a9 02		      LDA	#2
    208  f014		       85 00		      STA	VSYNC
    209  f016		       85 02		      STA	WSYNC
    210  f018		       85 02		      STA	WSYNC
    211  f01a		       85 02		      STA	WSYNC
    212  f01c		       a9 00		      LDA	#0	;2
    213  f01e		       85 00		      STA	VSYNC	;3
    214  f020
    215  f020		       78		      SEI
    216  f021		       d8		      CLD
    217  f022		       a2 ff		      LDX	#$FF
    218  f024		       9a		      TXS
    219  f025
    220  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    221  f027				   CleanMem
    222  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    223  f029		       f0 16		      BEQ	SkipClean
    224  f02b		       e0 c6		      CPX	#GameMode
    225  f02d		       f0 12		      BEQ	SkipClean
    226  f02f		       e0 c7		      CPX	#CurrentCarId
    227  f031		       f0 0e		      BEQ	SkipClean
    228  f033		       e0 c8		      CPX	#OpCurrentCarId
    229  f035		       f0 0a		      BEQ	SkipClean
    230  f037		       e0 c4		      CPX	#CurrentDifficulty
    231  f039		       f0 06		      BEQ	SkipClean
    232  f03b		       e0 bd		      CPX	#GameStatus
    233  f03d		       f0 02		      BEQ	SkipClean
    234  f03f		       95 00		      STA	0,X
    235  f041				   SkipClean
    236  f041		       e8		      INX
    237  f042		       d0 e3		      BNE	CleanMem
    238  f044
    239  f044		       a9 d5		      LDA	#213
    240  f046		       8d 96 02 	      STA	TIM64T	;3	
    241  f049
    242  f049							;Setting some variables...
    243  f049
    244  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    245  f049		       85 02		      STA	WSYNC	;We will set player position
    246  f04b		       20 ed f6 	      JSR	DefaultOffsets
    247  f04e
    248  f04e		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    249  f051		       85 f0		      STA	Player0SpeedL
    250  f053		       85 f1		      STA	Player1SpeedL
    251  f055
    252  f055							;SLEEP 11;18
    253  f055		       a2 00		      LDX	#0
    254  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    255  f05a		       85 db		      STA	StartSWCHB	; For game over
    256  f05c		       29 c0		      AND	#%11000000
    257  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    258  f060		       e8		      INX
    259  f061		       c9 80		      CMP	#%10000000
    260  f063		       f0 06		      BEQ	CallConfigureDifficulty
    261  f065		       e8		      INX
    262  f066		       c9 40		      CMP	#%01000000
    263  f068		       f0 01		      BEQ	CallConfigureDifficulty
    264  f06a		       e8		      INX
    265  f06b
    266  f06b				   CallConfigureDifficulty
    267  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    268  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    269  f06f		       a5 bd		      LDA	GameStatus
    270  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    271  f073				   StoreCurrentDifficulty
    272  f073		       86 c4		      STX	CurrentDifficulty
    273  f075		       20 c2 f6 	      JSR	ConfigureDifficulty
    274  f078
    275  f078				   SetGameNotRunning
    276  f078		       a9 00		      LDA	#0
    277  f07a		       85 bd		      STA	GameStatus
    278  f07c
    279  f07c				   ConfigureTimer
    280  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f07e		       85 b8		      STA	CountdownTimer	;3
    282  f080		       85 b9		      STA	OpCountdownTimer	;3
    283  f082
    284  f082				   ConfigurePlayer1XPosition
    285  f082		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    286  f084		       85 b7		      STA	Player1X	;3
    287  f086
    288  f086				   HPositioning 		; Avoid sleep doing needed stuff
    289  f086		       85 02		      STA	WSYNC
    290  f088
    291  f088				   ConfigurePlayer0XPosition
    292  f088		       a9 21		      LDA	#PLAYER_0_X_START	;2
    293  f08a		       85 b6		      STA	Player0X	;3
    294  f08c
    295  f08c				   ConfigureMissileSize
    296  f08c		       a9 30		      LDA	#%00110000	;2 Missile Size
    297  f08e		       85 04		      STA	NUSIZ0	;3
    298  f090		       85 05		      STA	NUSIZ1	;3
    299  f092
    300  f092				   ConfigureNextCheckpoint
    301  f092		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    302  f094		       85 cd		      STA	NextCheckpoint
    303  f096
    304  f096		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f098					      SLEEP	4	;
      1  f098				   .CYCLES    SET	4
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     19  f09a					      REPEND
    306  f09a		       85 12		      STA	RESM0
      0  f09c					      SLEEP	2	;
      1  f09c				   .CYCLES    SET	2
      2  f09c
      3  f09c				  -	      IF	.CYCLES < 2
      4  f09c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09c				  -	      ERR
      6  f09c					      ENDIF
      7  f09c
      8  f09c				  -	      IF	.CYCLES & 1
      9  f09c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09c				  -	      nop	0
     11  f09c				  -	      ELSE
     12  f09c				  -	      bit	VSYNC
     13  f09c				  -	      ENDIF
     14  f09c				  -.CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c					      REPEAT	.CYCLES / 2
     18  f09c		       ea		      nop
     19  f09d					      REPEND
    308  f09d		       85 14		      STA	RESBL
      0  f09f					      SLEEP	2
      1  f09f				   .CYCLES    SET	2
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f				  -	      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f				  -	      ELSE
     12  f09f				  -	      bit	VSYNC
     13  f09f				  -	      ENDIF
     14  f09f				  -.CYCLES    SET	.CYCLES - 3
     15  f09f					      ENDIF
     16  f09f
     17  f09f					      REPEAT	.CYCLES / 2
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    310  f0a0		       85 13		      STA	RESM1
      0  f0a2					      SLEEP	3
      1  f0a2				   .CYCLES    SET	3
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4				  -	      REPEAT	.CYCLES / 2
     18  f0a4				  -	      nop
     19  f0a4					      REPEND
    312  f0a4
    313  f0a4		       a9 e0		      LDA	#$E0
    314  f0a6		       85 24		      STA	HMBL
    315  f0a8		       85 22		      STA	HMM0
    316  f0aa		       85 23		      STA	HMM1
    317  f0ac		       85 02		      STA	WSYNC
    318  f0ae		       85 2a		      STA	HMOVE
    319  f0b0		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    320  f0b2		       85 2b		      STA	HMCLR
      0  f0b4					      SLEEP	30
      1  f0b4				   .CYCLES    SET	30
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     19  f0c3					      REPEND
    322  f0c3		       85 10		      STA	RESP0
    323  f0c5							;SLEEP 5 ; Temporarily move player 1 away.
    324  f0c5		       85 11		      STA	RESP1
    325  f0c7
    326  f0c7				   WaitResetToEnd
    327  f0c7		       ad 84 02 	      LDA	INTIM
    328  f0ca		       d0 fb		      BNE	WaitResetToEnd
    329  f0cc
    330  f0cc				   MainLoop
    331  f0cc		       a9 02		      LDA	#2
    332  f0ce		       85 00		      STA	VSYNC
    333  f0d0		       85 02		      STA	WSYNC
    334  f0d2		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    335  f0d4				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    336  f0d4		       a9 01		      LDA	#%00000001	;3
    337  f0d6		       24 df		      BIT	TextFlickerMode	;2
    338  f0d8		       f0 05		      BEQ	TextSideFrameZero	;2
    339  f0da		       25 8d		      AND	FrameCount1	;2
    340  f0dc		       4c e1 f0 	      JMP	StoreTextSize	;3
    341  f0df				   TextSideFrameZero
    342  f0df		       25 8c		      AND	FrameCount0	;2
    343  f0e1				   StoreTextSize
    344  f0e1		       85 de		      STA	TextSide	;3
    345  f0e3
    346  f0e3				   PrepareMaxHMove
      0  f0e3					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e3				   .CYCLES    SET	18
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     19  f0ec					      REPEND
    348  f0ec		       a9 80		      LDA	#$80
    349  f0ee		       85 24		      STA	HMBL
    350  f0f0		       85 22		      STA	HMM0
    351  f0f2		       85 23		      STA	HMM1
    352  f0f4		       85 20		      STA	HMP0
    353  f0f6		       85 21		      STA	HMP1
    354  f0f8		       85 02		      STA	WSYNC
    355  f0fa		       85 2a		      STA	HMOVE	; 1/10			
    356  f0fc
    357  f0fc				   ConfigVBlankTimer
    358  f0fc		       a5 c6		      LDA	GameMode
    359  f0fe		       c9 10		      CMP	#MAX_GAME_MODE
    360  f100		       f0 05		      BEQ	SetVblankTimerQrCode
    361  f102		       a9 29		      LDA	#VBLANK_TIMER
    362  f104		       4c 09 f1 	      JMP	SetVblankTimer
    363  f107				   SetVblankTimerQrCode
    364  f107		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    365  f109
    366  f109				   SetVblankTimer
    367  f109		       85 02		      STA	WSYNC	;3
    368  f10b		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    369  f10d		       8d 96 02 	      STA	TIM64T	;3	
    370  f110		       a9 00		      LDA	#0	;2
    371  f112		       85 00		      STA	VSYNC	;3	
    372  f114
    373  f114				   RandomizeGame
    374  f114		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    375  f116		       d0 2d		      BNE	EndRandomizeGame
    376  f118		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    377  f11a		       29 02		      AND	#%00000010
    378  f11c		       f0 24		      BEQ	DeterministicGame
    379  f11e		       a6 96		      LDX	TrafficOffset1 + 2
    380  f120		       bd 00 fe 	      LDA	AesTable,X
    381  f123		       45 8c		      EOR	FrameCount0
    382  f125		       85 96		      STA	TrafficOffset1 + 2
    383  f127		       85 a6		      STA	OpTrafficOffset1 + 2
    384  f129		       a6 9a		      LDX	TrafficOffset2 + 2
    385  f12b		       bd 00 fe 	      LDA	AesTable,X
    386  f12e		       45 8c		      EOR	FrameCount0
    387  f130		       85 9a		      STA	TrafficOffset2 + 2
    388  f132		       85 aa		      STA	OpTrafficOffset2 + 2
    389  f134		       a6 9e		      LDX	TrafficOffset3 + 2
    390  f136		       bd 00 fe 	      LDA	AesTable,X
    391  f139		       45 8c		      EOR	FrameCount0
    392  f13b		       85 9e		      STA	TrafficOffset3 + 2
    393  f13d		       85 ae		      STA	OpTrafficOffset3 + 2
    394  f13f		       4c 45 f1 	      JMP	EndRandomizeGame
    395  f142
    396  f142				   DeterministicGame
    397  f142		       20 ed f6 	      JSR	DefaultOffsets
    398  f145
    399  f145				   EndRandomizeGame
    400  f145
    401  f145
    402  f145							; Move this in the code and save cycles, for some reason spliting is breaking...
    403  f145		       a2 08		      LDX	#8
    404  f147				   BurnAllHMove
    405  f147		       85 02		      STA	WSYNC	;3
    406  f149		       85 2a		      STA	HMOVE	; 3/10 
    407  f14b		       ca		      DEX
    408  f14c		       d0 f9		      BNE	BurnAllHMove
    409  f14e		       85 02		      STA	WSYNC	;3
    410  f150		       85 2b		      STA	HMCLR	; 
    411  f152
    412  f152				   CountFrame
    413  f152		       e6 8c		      INC	FrameCount0	; 5
    414  f154		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    415  f156		       e6 8d		      INC	FrameCount1	; 5 
    416  f158				   SkipIncFC1
    417  f158
    418  f158				   CallDrawQrCode
    419  f158		       a5 c6		      LDA	GameMode
    420  f15a		       c9 10		      CMP	#MAX_GAME_MODE
    421  f15c		       d0 03		      BNE	TestIsGameRunning
    422  f15e		       4c 64 fc 	      JMP	DrawQrCode
    423  f161
    424  f161							;Does not update the game if not running
    425  f161				   TestIsGameRunning
    426  f161		       a5 bd		      LDA	GameStatus	;3
    427  f163		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    428  f165				   SelectCarWithDpadCall		; Only do it when game is stoped
    429  f165		       a2 00		      LDX	#0	; Player 0
    430  f167		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    431  f169		       85 b0		      STA	Tmp0
    432  f16b		       20 5c f9 	      JSR	SelectCarWithDpad
    433  f16e		       e8		      INX		; Player 1
    434  f16f		       20 5c f9 	      JSR	SelectCarWithDpad
    435  f172
    436  f172				   CallConfigureCarSprites
    437  f172		       20 2a f9 	      JSR	ConfigureCarSprites
    438  f175				   SkipUpdateLogicJump
    439  f175		       4c ef f1 	      JMP	SkipUpdateLogic
    440  f178				   ContinueWithGameLogic
    441  f178
    442  f178				   EverySecond		; 64 frames to be more precise
    443  f178		       a9 3f		      LDA	#%00111111
    444  f17a		       25 8c		      AND	FrameCount0
    445  f17c		       d0 08		      BNE	SkipEverySecondAction
    446  f17e		       c5 b8		      CMP	CountdownTimer
    447  f180		       f0 04		      BEQ	SkipEverySecondAction	; Stop at Zero
    448  f182		       c6 b8		      DEC	CountdownTimer
    449  f184		       c6 b9		      DEC	OpCountdownTimer
    450  f186				   SkipEverySecondAction
    451  f186
    452  f186				   ChangeTextFlickerMode
    453  f186		       a5 bc		      LDA	SwitchDebounceCounter
    454  f188		       d0 0d		      BNE	EndChangeTextFlickerMode
    455  f18a		       ad 82 02 	      LDA	SWCHB
    456  f18d		       29 02		      AND	#%00000010	;Game select
    457  f18f		       d0 06		      BNE	EndChangeTextFlickerMode
    458  f191		       e6 df		      INC	TextFlickerMode
    459  f193		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    460  f195		       85 bc		      STA	SwitchDebounceCounter
    461  f197				   EndChangeTextFlickerMode
    462  f197
    463  f197				   CallProcessSpeed
    464  f197		       a2 00		      LDX	#0
    465  f199		       20 43 fa 	      JSR	ProcessSpeed
    466  f19c
    467  f19c		       e8		      INX		; Player 1
    468  f19d		       20 43 fa 	      JSR	ProcessSpeed
    469  f1a0
    470  f1a0				   CallUpdateOffsets
    471  f1a0		       a2 00		      LDX	#0	; Player 0
    472  f1a2		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    473  f1a4		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    474  f1a6		       a5 f0		      LDA	Player0SpeedL
    475  f1a8		       85 b4		      STA	Tmp4
    476  f1aa		       a5 f2		      LDA	Player0SpeedH
    477  f1ac		       85 b5		      STA	Tmp5
    478  f1ae		       20 f0 f9 	      JSR	UpdateOffsets
    479  f1b1
    480  f1b1							;LDX Exits the call with correct value.
    481  f1b1		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    482  f1b3		       85 b3		      STA	Tmp3
    483  f1b5		       a5 f1		      LDA	Player1SpeedL
    484  f1b7		       85 b4		      STA	Tmp4
    485  f1b9		       a5 f3		      LDA	Player1SpeedH
    486  f1bb		       85 b5		      STA	Tmp5
    487  f1bd		       20 f0 f9 	      JSR	UpdateOffsets
    488  f1c0
    489  f1c0				   ConfigureOpponentLine		; Temporary
    490  f1c0		       a9 14		      LDA	#20	; Extract to constant
    491  f1c2		       85 cf		      STA	OpponentLine
    492  f1c4
    493  f1c4				   CallTestColisionAndMove
    494  f1c4		       a2 00		      LDX	#0	; Player 0
    495  f1c6							; Colision with traffic, each player check different flags,
    496  f1c6		       a5 8c		      LDA	FrameCount0
    497  f1c8		       29 01		      AND	#%00000001
    498  f1ca		       f0 07		      BEQ	SkipColisionPlayer0	; Test colision after draw frame
    499  f1cc		       a5 01		      LDA	CXM1P
    500  f1ce		       4a		      LSR
    501  f1cf		       05 00		      ORA	CXM0P
    502  f1d1		       05 02		      ORA	CXP0FB
    503  f1d3							; ORA CXPPMM ; Collision between players will have its own rules
    504  f1d3				   SkipColisionPlayer0		; Should not colide on opponent side.
    505  f1d3		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    506  f1d5		       85 b2		      STA	Tmp2
    507  f1d7		       20 6e f9 	      JSR	TestCollisionAndMove
    508  f1da
    509  f1da		       e8		      INX		; player 1
    510  f1db		       a5 8c		      LDA	FrameCount0
    511  f1dd		       29 01		      AND	#%00000001
    512  f1df		       d0 07		      BNE	SkipColisionPlayer1	; Test colision after draw frame
    513  f1e1		       a5 00		      LDA	CXM0P
    514  f1e3		       4a		      LSR
    515  f1e4		       05 01		      ORA	CXM1P
    516  f1e6		       05 03		      ORA	CXP1FB
    517  f1e8				   SkipColisionPlayer1
    518  f1e8		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
    519  f1ea		       85 b2		      STA	Tmp2
    520  f1ec		       20 6e f9 	      JSR	TestCollisionAndMove
    521  f1ef
    522  f1ef				   SkipUpdateLogic		; Continue here if not paused
    523  f1ef
    524  f1ef				   CalculateGear
    525  f1ef		       a5 f0		      LDA	Player0SpeedL	;3
    526  f1f1		       29 80		      AND	#%10000000	;2
    527  f1f3		       05 f2		      ORA	Player0SpeedH	;3
    528  f1f5		       18		      CLC		;2
    529  f1f6		       2a		      ROL		;2
    530  f1f7		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    531  f1f9		       85 d5		      STA	Gear
    532  f1fb
    533  f1fb				   EndProcessingBorder
    534  f1fb
    535  f1fb				   ProcessScoreFontColor
    536  f1fb		       a6 cb		      LDX	ScoreFontColorHoldChange
    537  f1fd		       f0 06		      BEQ	ResetScoreFontColor
    538  f1ff		       ca		      DEX
    539  f200		       86 cb		      STX	ScoreFontColorHoldChange
    540  f202		       4c 09 f2 	      JMP	SkipScoreFontColor
    541  f205				   ResetScoreFontColor
    542  f205		       a9 f9		      LDA	#SCORE_FONT_COLOR
    543  f207		       85 c9		      STA	ScoreFontColor
    544  f209				   SkipScoreFontColor
    545  f209
    546  f209				   IsGameOver
    547  f209		       a5 b8		      LDA	CountdownTimer
    548  f20b		       05 f0		      ORA	Player0SpeedL
    549  f20d		       05 f2		      ORA	Player0SpeedH
    550  f20f		       d0 0b		      BNE	IsCheckpoint
    551  f211		       a9 01		      LDA	#1
    552  f213		       85 cb		      STA	ScoreFontColorHoldChange
    553  f215		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    554  f217		       85 c9		      STA	ScoreFontColor
    555  f219		       4c 4e f2 	      JMP	SkipIsTimeOver
    556  f21c
    557  f21c				   IsCheckpoint
    558  f21c		       a5 cd		      LDA	NextCheckpoint
    559  f21e		       c5 92		      CMP	TrafficOffset0 + 2
    560  f220		       d0 20		      BNE	SkipIsCheckpoint
    561  f222		       18		      CLC
    562  f223		       69 10		      ADC	#CHECKPOINT_INTERVAL
    563  f225		       85 cd		      STA	NextCheckpoint
    564  f227		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    565  f229		       85 c9		      STA	ScoreFontColor
    566  f22b		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    567  f22d		       85 cb		      STA	ScoreFontColorHoldChange
    568  f22f		       a5 b8		      LDA	CountdownTimer
    569  f231		       18		      CLC
    570  f232		       65 c0		      ADC	CheckpointTime
    571  f234		       85 b8		      STA	CountdownTimer
    572  f236		       90 04		      BCC	JumpSkipTimeOver
    573  f238		       a9 ff		      LDA	#$FF
    574  f23a		       85 b8		      STA	CountdownTimer	; Does not overflow!
    575  f23c				   JumpSkipTimeOver
    576  f23c		       20 b3 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    577  f23f		       4c 4e f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    578  f242				   SkipIsCheckpoint
    579  f242
    580  f242				   IsTimeOver
    581  f242		       a5 b8		      LDA	CountdownTimer
    582  f244		       d0 08		      BNE	SkipIsTimeOver
    583  f246		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    584  f248		       85 cb		      STA	ScoreFontColorHoldChange
    585  f24a		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    586  f24c		       85 c9		      STA	ScoreFontColor
    587  f24e				   SkipIsTimeOver
    588  f24e
    589  f24e		       20 2a f9 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    590  f251
    591  f251				   PrintEasterEggCondition
    592  f251		       a5 8d		      LDA	FrameCount1
    593  f253		       29 38		      AND	#%00111000
    594  f255		       05 bd		      ORA	GameStatus
    595  f257		       c9 38		      CMP	#%00111000
    596  f259		       d0 06		      BNE	ChooseTextSide
    597  f25b		       20 20 f7 	      JSR	PrintEasterEgg
    598  f25e		       4c 50 f3 	      JMP	RightScoreWriteEnd
    599  f261
    600  f261							;Could be done during on vblank to save this comparisson time (before draw score), 
    601  f261							;but I am saving vblank cycles for now, in case of 2 players.
    602  f261				   ChooseTextSide		; 
    603  f261		       a5 de		      LDA	TextSide	;3
    604  f263		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    605  f265		       4c e6 f2 	      JMP	RightScoreWrite
    606  f268
    607  f268				   LeftScoreWrite
    608  f268		       a5 c9		      LDA	ScoreFontColor
    609  f26a		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    610  f26c		       f0 4e		      BEQ	PrintCheckpoint
    611  f26e		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    612  f270		       f0 52		      BEQ	PrintStartGame
    613  f272		       a5 bd		      LDA	GameStatus
    614  f274		       f0 56		      BEQ	PrintHellwayLeft
    615  f276				   WriteDistance		;Not optimized yet, ugly code.
    616  f276				   Digit0Distance
    617  f276		       a5 91		      LDA	TrafficOffset0 + 1	;3
    618  f278		       4a		      LSR		; 2
    619  f279		       4a		      LSR		; 2
    620  f27a		       4a		      LSR		; 2
    621  f27b		       4a		      LSR		; 2
    622  f27c		       aa		      TAX		; 2
    623  f27d		       bd be fd 	      LDA	FontLookup,X	;4
    624  f280		       85 d3		      STA	ScoreD3	;3
    625  f282
    626  f282				   Digit1Distance
    627  f282		       a5 92		      LDA	TrafficOffset0 + 2	;3
    628  f284		       29 0f		      AND	#%00001111	;2
    629  f286		       aa		      TAX		; 2
    630  f287		       bd be fd 	      LDA	FontLookup,X	;4 
    631  f28a		       85 d2		      STA	ScoreD2	;3
    632  f28c
    633  f28c				   Digit2Distance
    634  f28c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    635  f28e		       4a		      LSR		; 2
    636  f28f		       4a		      LSR		; 2
    637  f290		       4a		      LSR		; 2
    638  f291		       4a		      LSR		; 2
    639  f292		       aa		      TAX		; 2
    640  f293		       bd be fd 	      LDA	FontLookup,X	;4
    641  f296		       85 d1		      STA	ScoreD1	;3
    642  f298
    643  f298				   Digit3Distance
    644  f298		       a5 ba		      LDA	Traffic0Msb	;3
    645  f29a		       29 0f		      AND	#%00001111	;2
    646  f29c		       aa		      TAX		; 2
    647  f29d		       bd be fd 	      LDA	FontLookup,X	;4 
    648  f2a0		       85 d0		      STA	ScoreD0	;3
    649  f2a2
    650  f2a2				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    651  f2a2		       a5 ba		      LDA	Traffic0Msb
    652  f2a4		       29 f0		      AND	#%11110000	;2
    653  f2a6		       d0 07		      BNE	DrawDistanceExtraDigit
    654  f2a8		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    655  f2aa		       85 d4		      STA	ScoreD4	;3
    656  f2ac		       4c b9 f2 	      JMP	EndDrawDistance
    657  f2af				   DrawDistanceExtraDigit
    658  f2af		       4a		      LSR		; 2
    659  f2b0		       4a		      LSR		; 2
    660  f2b1		       4a		      LSR		; 2
    661  f2b2		       4a		      LSR		; 2
    662  f2b3		       aa		      TAX		; 2
    663  f2b4		       bd be fd 	      LDA	FontLookup,X	;4
    664  f2b7		       85 d4		      STA	ScoreD4	;3
    665  f2b9
    666  f2b9				   EndDrawDistance
    667  f2b9		       4c 50 f3 	      JMP	RightScoreWriteEnd	;3
    668  f2bc
    669  f2bc				   PrintCheckpoint
    670  f2bc		       a2 00		      LDX	#<CheckpointText
    671  f2be		       20 02 f7 	      JSR	PrintStaticText
    672  f2c1		       4c 50 f3 	      JMP	RightScoreWriteEnd	;3
    673  f2c4				   PrintStartGame
    674  f2c4		       a2 23		      LDX	#<GoText
    675  f2c6		       20 02 f7 	      JSR	PrintStaticText
    676  f2c9		       4c 50 f3 	      JMP	RightScoreWriteEnd	;3
    677  f2cc
    678  f2cc				   PrintHellwayLeft
    679  f2cc		       a5 8d		      LDA	FrameCount1
    680  f2ce		       29 01		      AND	#1
    681  f2d0		       d0 05		      BNE	PrintCreditsLeft
    682  f2d2		       a2 05		      LDX	#<HellwayLeftText
    683  f2d4		       4c d9 f2 	      JMP	PrintGameMode
    684  f2d7				   PrintCreditsLeft
    685  f2d7		       a2 0f		      LDX	#<OpbText
    686  f2d9
    687  f2d9				   PrintGameMode
    688  f2d9		       20 02 f7 	      JSR	PrintStaticText
    689  f2dc		       a6 c6		      LDX	GameMode
    690  f2de		       bd be fd 	      LDA	FontLookup,X	;4 
    691  f2e1		       85 d0		      STA	ScoreD0	;3
    692  f2e3		       4c 50 f3 	      JMP	RightScoreWriteEnd	;3
    693  f2e6
    694  f2e6				   RightScoreWrite
    695  f2e6		       a5 bd		      LDA	GameStatus
    696  f2e8		       f0 45		      BEQ	PrintHellwayRight
    697  f2ea		       a5 c9		      LDA	ScoreFontColor
    698  f2ec		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    699  f2ee		       f0 52		      BEQ	PrintGameOver
    700  f2f0				   Digit0Timer
    701  f2f0		       a5 b8		      LDA	CountdownTimer	;3
    702  f2f2		       29 0f		      AND	#%00001111	;2
    703  f2f4		       aa		      TAX		; 2
    704  f2f5		       bd be fd 	      LDA	FontLookup,X	;4 
    705  f2f8		       85 d1		      STA	ScoreD1	;3
    706  f2fa
    707  f2fa				   Digit1Timer
    708  f2fa		       a5 b8		      LDA	CountdownTimer	;3
    709  f2fc		       4a		      LSR		; 2
    710  f2fd		       4a		      LSR		; 2
    711  f2fe		       4a		      LSR		; 2
    712  f2ff		       4a		      LSR		; 2
    713  f300		       aa		      TAX		; 2
    714  f301		       bd be fd 	      LDA	FontLookup,X	;4
    715  f304		       85 d0		      STA	ScoreD0	;3
    716  f306
    717  f306		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    718  f308		       85 d2		      STA	ScoreD2	;3
    719  f30a
    720  f30a				   Digit0Speed
    721  f30a		       a5 f0		      LDA	Player0SpeedL
    722  f30c		       29 3c		      AND	#%00111100	;2 Discard the last bits
    723  f30e		       4a		      LSR		; 2
    724  f30f		       4a		      LSR		; 2
    725  f310		       aa		      TAX		; 2
    726  f311		       bd be fd 	      LDA	FontLookup,X	;4
    727  f314		       85 d4		      STA	ScoreD4	;3
    728  f316
    729  f316				   Digit1Speed
    730  f316		       a5 f0		      LDA	Player0SpeedL
    731  f318		       29 c0		      AND	#%11000000	;2 Discard the last bits
    732  f31a		       18		      CLC
    733  f31b		       2a		      ROL		;First goes into carry
    734  f31c		       2a		      ROL
    735  f31d		       2a		      ROL
    736  f31e		       85 b0		      STA	Tmp0
    737  f320		       a5 f2		      LDA	Player0SpeedH
    738  f322		       0a		      ASL
    739  f323		       0a		      ASL
    740  f324		       05 b0		      ORA	Tmp0
    741  f326		       aa		      TAX		; 2
    742  f327		       bd be fd 	      LDA	FontLookup,X	;4
    743  f32a		       85 d3		      STA	ScoreD3	;3
    744  f32c		       4c 50 f3 	      JMP	RightScoreWriteEnd
    745  f32f
    746  f32f				   PrintHellwayRight
    747  f32f		       a5 8d		      LDA	FrameCount1
    748  f331		       29 01		      AND	#1
    749  f333		       d0 05		      BNE	PrintCreditsRight
    750  f335		       a2 0a		      LDX	#<HellwayRightText
    751  f337		       4c 3c f3 	      JMP	PrintRightIntro
    752  f33a				   PrintCreditsRight
    753  f33a		       a2 14		      LDX	#<YearText
    754  f33c				   PrintRightIntro
    755  f33c		       20 02 f7 	      JSR	PrintStaticText
    756  f33f		       4c 50 f3 	      JMP	RightScoreWriteEnd
    757  f342				   PrintGameOver
    758  f342		       a5 8c		      LDA	FrameCount0
    759  f344		       30 05		      BMI	PrintOverText
    760  f346		       a2 19		      LDX	#<GameText
    761  f348		       4c 4d f3 	      JMP	StoreGameOverText
    762  f34b				   PrintOverText
    763  f34b		       a2 1e		      LDX	#<OverText
    764  f34d				   StoreGameOverText
    765  f34d		       20 02 f7 	      JSR	PrintStaticText
    766  f350				   RightScoreWriteEnd
    767  f350
    768  f350
    769  f350				   ScoreBackgroundColor
    770  f350		       a2 00		      LDX	#0
    771  f352		       ad 82 02 	      LDA	SWCHB
    772  f355		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    773  f357		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    774  f359		       f0 04		      BEQ	BlackAndWhiteScoreBg
    775  f35b		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    776  f35d		       a2 03		      LDX	#BACKGROUND_COLOR
    777  f35f				   BlackAndWhiteScoreBg
    778  f35f		       85 b2		      STA	Tmp2	; Score Background
    779  f361		       86 b3		      STX	Tmp3	; Traffic Background
    780  f363
    781  f363				   ConfigurePFForScore
    782  f363							;LDA #SCORE_BACKGROUND_COLOR; Done above
    783  f363		       85 09		      STA	COLUBK
    784  f365		       20 75 f6 	      JSR	ClearAll
    785  f368		       a9 02		      LDA	#%00000010	; Score mode
    786  f36a		       85 0a		      STA	CTRLPF
    787  f36c		       a5 de		      LDA	TextSide	;3
    788  f36e		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    789  f370				   LeftScoreOn
    790  f370		       a5 c9		      LDA	ScoreFontColor
    791  f372		       85 07		      STA	COLUP1
    792  f374		       a5 b2		      LDA	Tmp2
    793  f376		       85 06		      STA	COLUP0
    794  f378		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    795  f37a		       85 b1		      STA	Tmp1
    796  f37c		       4c 8b f3 	      JMP	CallWaitForVblankEnd
    797  f37f				   RightScoreOn
    798  f37f		       a5 c9		      LDA	ScoreFontColor
    799  f381		       85 06		      STA	COLUP0
    800  f383		       a5 b2		      LDA	Tmp2
    801  f385		       85 07		      STA	COLUP1
    802  f387		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    803  f389		       85 b1		      STA	Tmp1
    804  f38b
    805  f38b							; After here we are going to update the screen, No more heavy code
    806  f38b				   CallWaitForVblankEnd
    807  f38b		       20 03 f9 	      JSR	WaitForVblankEnd
    808  f38e
    809  f38e				   DrawScoreHud
    810  f38e		       20 92 f7 	      JSR	PrintScore
    811  f391
    812  f391		       85 02		      STA	WSYNC
    813  f393
    814  f393		       a5 0c		      LDA	INPT4	;3
    815  f395		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    816  f397		       a5 c9		      LDA	ScoreFontColor
    817  f399		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    818  f39b		       d0 0a		      BNE	WaitAnotherScoreLine
    819  f39d		       a5 de		      LDA	TextSide	;3
    820  f39f		       d0 03		      BNE	LeftScoreOnGameOver
    821  f3a1		       4c dd f8 	      JMP	DrawGameOverScreenRight
    822  f3a4				   LeftScoreOnGameOver
    823  f3a4		       4c 4f f8 	      JMP	DrawGameOverScreenLeft
    824  f3a7
    825  f3a7				   WaitAnotherScoreLine
    826  f3a7		       85 02		      STA	WSYNC
    827  f3a9
    828  f3a9				   PrepareForTraffic
    829  f3a9		       20 87 f6 	      JSR	ClearPF	; 32
    830  f3ac
    831  f3ac		       85 02		      STA	WSYNC
    832  f3ae		       85 02		      STA	WSYNC
    833  f3b0
    834  f3b0		       a9 30		      LDA	#%00110000	; 2 Score mode
    835  f3b2		       85 0a		      STA	CTRLPF	;3
    836  f3b4
    837  f3b4		       a5 c2		      LDA	TrafficColor	;3
    838  f3b6		       85 08		      STA	COLUPF	;3
    839  f3b8
    840  f3b8		       a9 96		      LDA	#PLAYER1_COLOR	;2
    841  f3ba		       85 07		      STA	COLUP1	;3
    842  f3bc
    843  f3bc		       a5 c9		      LDA	ScoreFontColor	;3
    844  f3be		       85 06		      STA	COLUP0	;3
    845  f3c0
    846  f3c0		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    847  f3c2
    848  f3c2		       20 87 f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    849  f3c5
    850  f3c5		       a6 b3		      LDX	Tmp3	; Background color.
    851  f3c7
      0  f3c7					      SLEEP	9	; Odd sleep destroys flags
      1  f3c7				   .CYCLES    SET	9
      2  f3c7
      3  f3c7				  -	      IF	.CYCLES < 2
      4  f3c7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3c7				  -	      ERR
      6  f3c7					      ENDIF
      7  f3c7
      8  f3c7					      IF	.CYCLES & 1
      9  f3c7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3c7				  -	      nop	0
     11  f3c7					      ELSE
     12  f3c7		       24 00		      bit	VSYNC
     13  f3c9					      ENDIF
     14  f3c9				   .CYCLES    SET	.CYCLES - 3
     15  f3c9					      ENDIF
     16  f3c9
     17  f3c9					      REPEAT	.CYCLES / 2
     18  f3c9		       ea		      nop
     17  f3c9					      REPEND
     18  f3ca		       ea		      nop
     17  f3ca					      REPEND
     18  f3cb		       ea		      nop
     19  f3cc					      REPEND
    853  f3cc
    854  f3cc		       a5 8c		      LDA	FrameCount0	;Brach flag
    855  f3ce		       29 01		      AND	#%00000001
    856  f3d0
    857  f3d0		       86 09		      STX	COLUBK	;3
    858  f3d2		       d0 05		      BNE	OpDrawCache	;2
    859  f3d4		       4c 93 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    860  f3d7							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    861  f3d7
    862  f3d7							;main scanline loop...
    863  f3d7				   OpScanLoop
    864  f3d7		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    865  f3d9
    866  f3d9							;Start of next line!			
    867  f3d9				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    868  f3d9
    869  f3d9		       a5 80		      LDA	GRP0Cache	;3
    870  f3db		       85 1b		      STA	GRP0	;3
    871  f3dd
    872  f3dd		       a5 84		      LDA	GRP1Cache	;3
    873  f3df		       85 1c		      STA	GRP1	;3
    874  f3e1
    875  f3e1		       a5 85		      LDA	ENABLCache	;3
    876  f3e3		       85 1f		      STA	ENABL	;3
    877  f3e5
    878  f3e5		       a5 86		      LDA	ENAM0Cache	;3
    879  f3e7		       85 1d		      STA	ENAM0	;3
    880  f3e9
    881  f3e9		       a5 87		      LDA	ENAM1Cache	;3
    882  f3eb		       85 1e		      STA	ENAM1	;3
    883  f3ed
    884  f3ed		       a5 81		      LDA	PF0Cache	;3
    885  f3ef		       85 0d		      STA	PF0	;3
    886  f3f1
    887  f3f1		       a9 00		      LDA	#0	;2
    888  f3f3							;STA PF0	     ;3
    889  f3f3		       85 80		      STA	GRP0Cache	;3
    890  f3f5		       85 86		      STA	ENAM0Cache	;3
    891  f3f7		       85 85		      STA	ENABLCache	;3
    892  f3f9		       85 87		      STA	ENAM1Cache	; 3
    893  f3fb							;STA GRP1Cache ;3
    894  f3fb		       85 0d		      STA	PF0	;3
    895  f3fd							;STA PF2	     ;3
    896  f3fd
    897  f3fd		       a5 83		      LDA	PF2Cache	;3
    898  f3ff		       85 0f		      STA	PF2	;3
    899  f401
    900  f401				   OpDrawCar0
    901  f401		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    902  f403		       b0 04		      BCS	OpSkipDrawCar	;2
    903  f405		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    904  f407		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    905  f409				   OpSkipDrawCar
    906  f409
    907  f409							;BEQ DrawTraffic3
    908  f409				   OpDrawTraffic1		; 33
    909  f409		       98		      TYA		; 2
    910  f40a		       18		      CLC		; 2 
    911  f40b		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    912  f40d		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    913  f40f		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    914  f411		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    915  f413		       4c 18 f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
    916  f416				   OpEorOffsetWithCarry
    917  f416		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    918  f418				   OpAfterEorOffsetWithCarry		;17
    919  f418		       aa		      TAX		;2
    920  f419		       bd 00 fe 	      LDA	AesTable,X	; 4
    921  f41c		       c5 be		      CMP	TrafficChance	;3
    922  f41e		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    923  f420		       a9 ff		      LDA	#$FF	;2
    924  f422		       85 86		      STA	ENAM0Cache	;3
    925  f424				   OpFinishDrawTraffic1
    926  f424
    927  f424				   OpErasePF2
    928  f424		       a9 00		      LDA	#0
    929  f426		       85 0f		      STA	PF2
    930  f428
    931  f428				   OpDrawTraffic2		; 33
    932  f428		       98		      TYA		; 2
    933  f429		       18		      CLC		; 2 
    934  f42a		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    935  f42c		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    936  f42e		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    937  f430		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    938  f432		       4c 37 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    939  f435				   OpEorOffsetWithCarry2
    940  f435		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    941  f437				   OpAfterEorOffsetWithCarry2		;17
    942  f437		       aa		      TAX		;2
    943  f438		       bd 00 fe 	      LDA	AesTable,X	; 4
    944  f43b		       c5 be		      CMP	TrafficChance	;3
    945  f43d		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    946  f43f		       a9 02		      LDA	#%00000010	;2
    947  f441		       85 85		      STA	ENABLCache	;3
    948  f443				   OpFinishDrawTraffic2
    949  f443
    950  f443							;STA WSYNC ;65 / 137
    951  f443
    952  f443							; LDA Tmp0 ; Flicker this line if drawing car
    953  f443							; BEQ FinishDrawTraffic4
    954  f443				   OpDrawTraffic3		; 33
    955  f443		       98		      TYA		; 2
    956  f444		       18		      CLC		; 2 
    957  f445		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    958  f447		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    959  f449		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    960  f44b		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    961  f44d		       4c 52 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    962  f450				   OpEorOffsetWithCarry3
    963  f450		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    964  f452				   OpAfterEorOffsetWithCarry3		;17
    965  f452		       aa		      TAX		;2
    966  f453		       bd 00 fe 	      LDA	AesTable,X	; 4
    967  f456		       c5 be		      CMP	TrafficChance	;3
    968  f458		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    969  f45a		       a9 02		      LDA	#%00000010	;2
    970  f45c		       85 87		      STA	ENAM1Cache
    971  f45e				   OpFinishDrawTraffic3
    972  f45e
    973  f45e				   OpDrawOponent		;26
    974  f45e		       84 b0		      STY	Tmp0	;3
    975  f460		       a4 cf		      LDY	OpponentLine	;3
    976  f462		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    977  f464		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    978  f466				   OpDrawOpponent
    979  f466		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    980  f468		       85 80		      STA	GRP0Cache	;3
    981  f46a		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    982  f46c		       a4 b0		      LDY	Tmp0	;3
    983  f46e		       4c 82 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    984  f471				   OpSkipDrawOpponent
    985  f471		       c6 cf		      DEC	OpponentLine	;5
    986  f473		       a4 b0		      LDY	Tmp0	;3
    987  f475
    988  f475
    989  f475				   OpDrawTraffic0		; 21 2pe
    990  f475		       98		      TYA		; 2
    991  f476		       18		      CLC		; 2 
    992  f477		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    993  f479		       29 08		      AND	#%00001000	;2
    994  f47b		       f0 05		      BEQ	OpHasNoBorderP0	;3
    995  f47d				   OpHasBorderP0
    996  f47d		       a9 70		      LDA	#%01110000	; 2
    997  f47f		       4c 84 f4 	      JMP	OpStoreBorderP0	; 3
    998  f482				   OpHasNoBorderP0
    999  f482		       a9 00		      LDA	#0	; 2
   1000  f484				   OpStoreBorderP0
   1001  f484		       85 81		      STA	PF0Cache	; 3
   1002  f486		       85 83		      STA	PF2Cache	; 3
   1003  f488
   1004  f488				   OpSkipDrawTraffic0
   1005  f488
   1006  f488				   OpWhileScanLoop
   1007  f488		       88		      DEY		;2
   1008  f489		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1009  f48b		       4c d7 f3 	      JMP	OpScanLoop	;3
   1010  f48e				   OpFinishScanLoop		; 7 209 of 222
   1011  f48e		       4c 46 f5 	      JMP	FinishScanLoop
   1012  f491
   1013  f491							;main scanline loop...
   1014  f491				   ScanLoop
   1015  f491		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1016  f493
   1017  f493							;Start of next line!			
   1018  f493				   DrawCache		;63 Is the last line going to the top of the next frame?
   1019  f493		       a5 81		      LDA	PF0Cache	;3
   1020  f495		       85 0d		      STA	PF0	;3
   1021  f497
   1022  f497		       a5 80		      LDA	GRP0Cache	;3
   1023  f499		       85 1b		      STA	GRP0	;3
   1024  f49b
   1025  f49b		       a5 84		      LDA	GRP1Cache	;3
   1026  f49d		       85 1c		      STA	GRP1	;3
   1027  f49f
   1028  f49f		       a5 86		      LDA	ENAM0Cache	;3
   1029  f4a1		       85 1d		      STA	ENAM0	;3
   1030  f4a3
   1031  f4a3		       a5 85		      LDA	ENABLCache	;3
   1032  f4a5		       85 1f		      STA	ENABL	;3
   1033  f4a7
   1034  f4a7		       a5 87		      LDA	ENAM1Cache	;3
   1035  f4a9		       85 1e		      STA	ENAM1	;3
   1036  f4ab
   1037  f4ab		       a5 83		      LDA	PF2Cache	;3
   1038  f4ad		       85 0f		      STA	PF2	;3
   1039  f4af
   1040  f4af		       a9 00		      LDA	#0	;2
   1041  f4b1		       85 0d		      STA	PF0	;3
   1042  f4b3		       85 84		      STA	GRP1Cache	;3
   1043  f4b5		       85 85		      STA	ENABLCache	;3
   1044  f4b7		       85 86		      STA	ENAM0Cache	;3
   1045  f4b9		       85 87		      STA	ENAM1Cache	; 3
   1046  f4bb							;STA GRP0Cache
   1047  f4bb		       85 0f		      STA	PF2	;3
   1048  f4bd
   1049  f4bd				   DrawCar0
   1050  f4bd		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1051  f4bf		       b0 04		      BCS	SkipDrawCar	;2
   1052  f4c1		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1053  f4c3		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1054  f4c5				   SkipDrawCar
   1055  f4c5
   1056  f4c5							;BEQ DrawTraffic3
   1057  f4c5				   DrawTraffic1 		; 33
   1058  f4c5		       98		      TYA		; 2
   1059  f4c6		       18		      CLC		; 2 
   1060  f4c7		       65 95		      ADC	TrafficOffset1 + 1	;3
   1061  f4c9		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1062  f4cb		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1063  f4cd		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1064  f4cf		       4c d4 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1065  f4d2				   EorOffsetWithCarry
   1066  f4d2		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1067  f4d4				   AfterEorOffsetWithCarry		;17
   1068  f4d4		       aa		      TAX		;2
   1069  f4d5		       bd 00 fe 	      LDA	AesTable,X	; 4
   1070  f4d8		       c5 be		      CMP	TrafficChance	;3
   1071  f4da		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1072  f4dc		       a9 ff		      LDA	#$FF	;2
   1073  f4de		       85 86		      STA	ENAM0Cache	;3
   1074  f4e0				   FinishDrawTraffic1
   1075  f4e0
   1076  f4e0				   DrawTraffic2 		; 33
   1077  f4e0		       98		      TYA		; 2
   1078  f4e1		       18		      CLC		; 2 
   1079  f4e2		       65 99		      ADC	TrafficOffset2 + 1	;3
   1080  f4e4		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1081  f4e6		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1082  f4e8		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1083  f4ea		       4c ef f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1084  f4ed				   EorOffsetWithCarry2
   1085  f4ed		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1086  f4ef				   AfterEorOffsetWithCarry2		;17
   1087  f4ef		       aa		      TAX		;2
   1088  f4f0		       bd 00 fe 	      LDA	AesTable,X	; 4
   1089  f4f3		       c5 be		      CMP	TrafficChance	;3
   1090  f4f5		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1091  f4f7		       a9 02		      LDA	#%00000010	;2
   1092  f4f9		       85 85		      STA	ENABLCache	;3
   1093  f4fb				   FinishDrawTraffic2
   1094  f4fb
   1095  f4fb							;STA WSYNC ;65 / 137
   1096  f4fb
   1097  f4fb							; LDA Tmp0 ; Flicker this line if drawing car
   1098  f4fb							; BEQ FinishDrawTraffic4
   1099  f4fb				   DrawTraffic3 		; 33
   1100  f4fb		       98		      TYA		; 2
   1101  f4fc		       18		      CLC		; 2 
   1102  f4fd		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1103  f4ff		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1104  f501		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1105  f503		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1106  f505		       4c 0a f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1107  f508				   EorOffsetWithCarry3
   1108  f508		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1109  f50a				   AfterEorOffsetWithCarry3		;17
   1110  f50a		       aa		      TAX		;2
   1111  f50b		       bd 00 fe 	      LDA	AesTable,X	; 4
   1112  f50e		       c5 be		      CMP	TrafficChance	;3
   1113  f510		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1114  f512		       a9 02		      LDA	#%00000010	;2
   1115  f514		       85 87		      STA	ENAM1Cache
   1116  f516				   FinishDrawTraffic3
   1117  f516
   1118  f516
   1119  f516				   DrawOponent		;26
   1120  f516		       84 b0		      STY	Tmp0	;3
   1121  f518		       a4 cf		      LDY	OpponentLine	;3
   1122  f51a		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1123  f51c		       b0 0b		      BCS	SkipDrawOpponent	;2
   1124  f51e				   DrawOpponent
   1125  f51e		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1126  f520		       85 84		      STA	GRP1Cache	;3
   1127  f522		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1128  f524		       a4 b0		      LDY	Tmp0	;3
   1129  f526		       4c 3a f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1130  f529				   SkipDrawOpponent
   1131  f529		       c6 cf		      DEC	OpponentLine	;5
   1132  f52b		       a4 b0		      LDY	Tmp0	;3
   1133  f52d
   1134  f52d				   DrawTraffic0 		; 21 2pe
   1135  f52d		       98		      TYA		; 2
   1136  f52e		       18		      CLC		; 2 
   1137  f52f		       65 91		      ADC	TrafficOffset0 + 1	;3
   1138  f531		       29 08		      AND	#%00001000	;2
   1139  f533		       f0 05		      BEQ	HasNoBorderP0	;3
   1140  f535				   HasBorderP0
   1141  f535		       a9 70		      LDA	#%01110000	; 2
   1142  f537		       4c 3c f5 	      JMP	StoreBorderP0	; 3
   1143  f53a				   HasNoBorderP0
   1144  f53a		       a9 00		      LDA	#0	; 2
   1145  f53c				   StoreBorderP0
   1146  f53c		       85 81		      STA	PF0Cache	; 3
   1147  f53e		       85 83		      STA	PF2Cache	; 3
   1148  f540
   1149  f540				   SkipDrawTraffic0
   1150  f540
   1151  f540				   WhileScanLoop
   1152  f540		       88		      DEY		;2
   1153  f541		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1154  f543		       4c 91 f4 	      JMP	ScanLoop	;3
   1155  f546				   FinishScanLoop		; 7 209 of 222
   1156  f546
   1157  f546		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1158  f548		       20 96 f6 	      JSR	LoadAll
   1159  f54b		       85 02		      STA	WSYNC	; do stuff!
   1160  f54d		       85 02		      STA	WSYNC
   1161  f54f		       85 02		      STA	WSYNC
   1162  f551							;42 cycles to use here
   1163  f551
   1164  f551				   PrepareOverscan
   1165  f551		       a9 02		      LDA	#2
   1166  f553		       85 02		      STA	WSYNC
   1167  f555		       85 01		      STA	VBLANK
   1168  f557
   1169  f557		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1170  f559		       8d 96 02 	      STA	TIM64T
   1171  f55c
   1172  f55c				   LeftSound		;41
   1173  f55c		       a5 b8		      LDA	CountdownTimer	;3
   1174  f55e		       f0 1b		      BEQ	EngineOff	;2
   1175  f560		       a6 d5		      LDX	Gear
   1176  f562		       a5 f0		      LDA	Player0SpeedL	;3
   1177  f564		       4a		      LSR		;2
   1178  f565		       4a		      LSR		;2
   1179  f566		       4a		      LSR		;2
   1180  f567		       29 0f		      AND	#%00001111	;2
   1181  f569		       85 b0		      STA	Tmp0	;3
   1182  f56b		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1183  f56e		       38		      SEC		;2
   1184  f56f		       e5 b0		      SBC	Tmp0	;3
   1185  f571		       85 17		      STA	AUDF0	;3
   1186  f573		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1187  f576		       85 15		      STA	AUDC0	;3
   1188  f578		       4c 7f f5 	      JMP	EndLeftSound	;3
   1189  f57b				   EngineOff
   1190  f57b		       a9 00		      LDA	#0
   1191  f57d		       85 15		      STA	AUDC0
   1192  f57f
   1193  f57f				   EndLeftSound
   1194  f57f
   1195  f57f
   1196  f57f				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1197  f57f		       a5 c9		      LDA	ScoreFontColor	;3
   1198  f581		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1199  f583		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1200  f585		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1201  f587		       f0 29		      BEQ	PlayCheckpoint	;2
   1202  f589		       a5 8e		      LDA	CollisionCounter	;3
   1203  f58b		       c9 e0		      CMP	#$E0	;2
   1204  f58d		       b0 14		      BCS	PlayColision	;2
   1205  f58f		       a5 cd		      LDA	NextCheckpoint	;3
   1206  f591		       38		      SEC		;2
   1207  f592		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1208  f594		       c9 02		      CMP	#$02	;2
   1209  f596		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1210  f598		       a5 b8		      LDA	CountdownTimer	; 3
   1211  f59a		       f0 53		      BEQ	MuteRightSound	;2
   1212  f59c		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1213  f59e		       90 37		      BCC	PlayWarnTimeEnding	;4
   1214  f5a0		       4c ef f5 	      JMP	MuteRightSound	;3
   1215  f5a3				   PlayColision
   1216  f5a3		       a9 1f		      LDA	#31
   1217  f5a5		       85 18		      STA	AUDF1
   1218  f5a7		       a9 08		      LDA	#8
   1219  f5a9		       85 16		      STA	AUDC1
   1220  f5ab		       a9 08		      LDA	#8
   1221  f5ad		       85 1a		      STA	AUDV1
   1222  f5af		       4c f3 f5 	      JMP	EndRightSound
   1223  f5b2
   1224  f5b2				   PlayCheckpoint
   1225  f5b2		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1226  f5b4		       4a		      LSR		;2
   1227  f5b5		       4a		      LSR		;2
   1228  f5b6		       4a		      LSR		;2
   1229  f5b7		       85 18		      STA	AUDF1	;3
   1230  f5b9		       a9 0c		      LDA	#12	;2
   1231  f5bb		       85 16		      STA	AUDC1	;3
   1232  f5bd		       a9 06		      LDA	#6	;2
   1233  f5bf		       85 1a		      STA	AUDV1	;3
   1234  f5c1		       4c f3 f5 	      JMP	EndRightSound	;3
   1235  f5c4
   1236  f5c4				   PlayBeforeCheckpoint
   1237  f5c4		       a5 8c		      LDA	FrameCount0	;3
   1238  f5c6		       29 1c		      AND	#%00011100	;2
   1239  f5c8		       09 03		      ORA	#%00000011	;2
   1240  f5ca		       85 18		      STA	AUDF1	;3
   1241  f5cc		       a9 0c		      LDA	#12	;2
   1242  f5ce		       85 16		      STA	AUDC1	;3
   1243  f5d0		       a9 03		      LDA	#3	;2
   1244  f5d2		       85 1a		      STA	AUDV1	;3
   1245  f5d4		       4c f3 f5 	      JMP	EndRightSound	;3
   1246  f5d7
   1247  f5d7				   PlayWarnTimeEnding
   1248  f5d7		       a5 8c		      LDA	FrameCount0	;3
   1249  f5d9		       29 04		      AND	#%00000100	;2
   1250  f5db		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1251  f5dd		       18		      CLC		;2
   1252  f5de		       a9 0a		      LDA	#10	;2
   1253  f5e0		       65 b8		      ADC	CountdownTimer	;2
   1254  f5e2		       85 18		      STA	AUDF1	;3
   1255  f5e4		       a9 0c		      LDA	#12	;2
   1256  f5e6		       85 16		      STA	AUDC1	;3
   1257  f5e8		       a9 03		      LDA	#3	;2
   1258  f5ea		       85 1a		      STA	AUDV1	;3
   1259  f5ec		       4c f3 f5 	      JMP	EndRightSound	;3
   1260  f5ef
   1261  f5ef				   MuteRightSound
   1262  f5ef		       a9 00		      LDA	#0
   1263  f5f1		       85 1a		      STA	AUDV1
   1264  f5f3				   EndRightSound
   1265  f5f3
   1266  f5f3							;Read Fire Button before, will make it start the game for now.
   1267  f5f3				   StartGame
   1268  f5f3		       a5 0c		      LDA	INPT4	;3
   1269  f5f5		       25 0d		      AND	INPT5	;3 player 
   1270  f5f7		       30 35		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1271  f5f9		       a5 8c		      LDA	FrameCount0
   1272  f5fb		       29 01		      AND	#%00000001
   1273  f5fd		       d0 2f		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1274  f5ff		       a5 bd		      LDA	GameStatus	;3
   1275  f601		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1276  f603		       d0 29		      BNE	SkipGameStart
   1277  f605		       a5 c6		      LDA	GameMode
   1278  f607		       c9 10		      CMP	#MAX_GAME_MODE
   1279  f609		       d0 0b		      BNE	SetGameRunning
   1280  f60b		       a9 00		      LDA	#0
   1281  f60d		       85 c6		      STA	GameMode
   1282  f60f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1283  f611		       85 bc		      STA	SwitchDebounceCounter
   1284  f613		       4c 2e f6 	      JMP	SkipGameStart
   1285  f616				   SetGameRunning
   1286  f616		       e6 bd		      INC	GameStatus
   1287  f618		       a9 00		      LDA	#0	;
   1288  f61a		       85 8c		      STA	FrameCount0
   1289  f61c		       85 8d		      STA	FrameCount1
   1290  f61e		       a9 0a		      LDA	#10
   1291  f620		       85 19		      STA	AUDV0
   1292  f622		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1293  f624		       85 c9		      STA	ScoreFontColor
   1294  f626		       85 ca		      STA	OpScoreFontColor
   1295  f628		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1296  f62a		       85 cb		      STA	ScoreFontColorHoldChange
   1297  f62c		       85 cc		      STA	OpScoreFontColorHoldChange
   1298  f62e				   SkipGameStart
   1299  f62e
   1300  f62e				   ReadSwitches
   1301  f62e		       a6 bc		      LDX	SwitchDebounceCounter
   1302  f630		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1303  f632		       a9 01		      LDA	#%00000001
   1304  f634		       2c 82 02 	      BIT	SWCHB
   1305  f637		       d0 07		      BNE	SkipReset
   1306  f639		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1307  f63b		       85 bc		      STA	SwitchDebounceCounter
   1308  f63d		       4c 6d f6 	      JMP	OverScanWaitBeforeReset
   1309  f640				   SkipReset
   1310  f640
   1311  f640				   GameModeSelect
   1312  f640		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1313  f642		       d0 1c		      BNE	SkipGameSelect
   1314  f644		       20 c2 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1315  f647				   ContinueGameSelect
   1316  f647		       a9 02		      LDA	#%00000010
   1317  f649		       2c 82 02 	      BIT	SWCHB
   1318  f64c		       d0 12		      BNE	SkipGameSelect
   1319  f64e		       a6 c6		      LDX	GameMode
   1320  f650		       e0 10		      CPX	#MAX_GAME_MODE
   1321  f652		       f0 04		      BEQ	ResetGameMode
   1322  f654		       e8		      INX
   1323  f655		       4c 5a f6 	      JMP	StoreGameMode
   1324  f658				   ResetGameMode
   1325  f658		       a2 00		      LDX	#0
   1326  f65a				   StoreGameMode
   1327  f65a		       86 c6		      STX	GameMode
   1328  f65c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1329  f65e		       85 bc		      STA	SwitchDebounceCounter
   1330  f660				   SkipGameSelect
   1331  f660		       4c 65 f6 	      JMP	EndReadSwitches
   1332  f663				   DecrementSwitchDebounceCounter
   1333  f663		       c6 bc		      DEC	SwitchDebounceCounter
   1334  f665				   EndReadSwitches
   1335  f665
   1336  f665				   OverScanWait
   1337  f665		       ad 84 02 	      LDA	INTIM
   1338  f668		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1339  f66a		       4c cc f0 	      JMP	MainLoop
   1340  f66d
   1341  f66d				   OverScanWaitBeforeReset
   1342  f66d		       ad 84 02 	      LDA	INTIM
   1343  f670		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1344  f672		       4c 12 f0 	      JMP	Start
   1345  f675
   1346  f675				   Subroutines
   1347  f675
   1348  f675				   ClearAll		; 52
   1349  f675		       a9 00		      LDA	#0	;2
   1350  f677		       85 1c		      STA	GRP1	;3
   1351  f679		       85 1f		      STA	ENABL	;3
   1352  f67b		       85 1d		      STA	ENAM0	;3
   1353  f67d		       85 1e		      STA	ENAM1	;3
   1354  f67f		       85 84		      STA	GRP1Cache	;3
   1355  f681		       85 85		      STA	ENABLCache	;3
   1356  f683		       85 86		      STA	ENAM0Cache	;3
   1357  f685		       85 87		      STA	ENAM1Cache	;3
   1358  f687
   1359  f687				   ClearPF		; 26
   1360  f687		       a9 00		      LDA	#0	;2
   1361  f689				   ClearPFSkipLDA0
   1362  f689		       85 0d		      STA	PF0	;3
   1363  f68b		       85 0e		      STA	PF1	;3
   1364  f68d		       85 0f		      STA	PF2	;3	
   1365  f68f		       85 81		      STA	PF0Cache	;3
   1366  f691		       85 82		      STA	PF1Cache	;3
   1367  f693		       85 83		      STA	PF2Cache	;3 
   1368  f695		       60		      RTS		;6
   1369  f696				   EndClearAll
   1370  f696
   1371  f696				   LoadAll		; 48
   1372  f696		       a5 81		      LDA	PF0Cache	;3
   1373  f698		       85 0d		      STA	PF0	;3
   1374  f69a
   1375  f69a		       a5 82		      LDA	PF1Cache	;3
   1376  f69c		       85 0e		      STA	PF1	;3
   1377  f69e
   1378  f69e		       a5 83		      LDA	PF2Cache	;3
   1379  f6a0		       85 0f		      STA	PF2	;3
   1380  f6a2
   1381  f6a2		       a5 84		      LDA	GRP1Cache	;3
   1382  f6a4		       85 1c		      STA	GRP1	;3
   1383  f6a6
   1384  f6a6		       a5 85		      LDA	ENABLCache	;3
   1385  f6a8		       85 1f		      STA	ENABL	;3
   1386  f6aa
   1387  f6aa		       a5 86		      LDA	ENAM0Cache	;3
   1388  f6ac		       85 1d		      STA	ENAM0	;3
   1389  f6ae
   1390  f6ae		       a5 87		      LDA	ENAM1Cache	;3
   1391  f6b0		       85 1e		      STA	ENAM1	;3
   1392  f6b2
   1393  f6b2		       60		      RTS		;6
   1394  f6b3				   EndLoadAll
   1395  f6b3
   1396  f6b3				   NextDifficulty
   1397  f6b3		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1398  f6b5		       29 01		      AND	#%00000001
   1399  f6b7		       d0 24		      BNE	CheckRandomDifficulty
   1400  f6b9
   1401  f6b9		       a5 c4		      LDA	CurrentDifficulty
   1402  f6bb		       18		      CLC
   1403  f6bc		       69 01		      ADC	#1
   1404  f6be		       29 03		      AND	#%00000011	; 0 to 3
   1405  f6c0		       85 c4		      STA	CurrentDifficulty
   1406  f6c2
   1407  f6c2				   ConfigureDifficulty
   1408  f6c2		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1409  f6c4		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1410  f6c7		       85 be		      STA	TrafficChance
   1411  f6c9		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1412  f6cc		       85 c2		      STA	TrafficColor
   1413  f6ce
   1414  f6ce		       a5 c6		      LDA	GameMode	;
   1415  f6d0		       29 01		      AND	#%00000001
   1416  f6d2		       f0 03		      BEQ	UseNextDifficultyTime
   1417  f6d4		       4c d8 f6 	      JMP	StoreDifficultyTime
   1418  f6d7				   UseNextDifficultyTime
   1419  f6d7		       c8		      INY
   1420  f6d8				   StoreDifficultyTime
   1421  f6d8		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1422  f6db		       85 c0		      STA	CheckpointTime
   1423  f6dd
   1424  f6dd				   CheckRandomDifficulty
   1425  f6dd		       a5 c6		      LDA	GameMode
   1426  f6df		       29 08		      AND	#%00001000	; Random difficulties
   1427  f6e1		       f0 09		      BEQ	ReturnFromNextDifficulty
   1428  f6e3				   RandomDifficulty
   1429  f6e3		       a6 8c		      LDX	FrameCount0
   1430  f6e5		       bd 00 fe 	      LDA	AesTable,X
   1431  f6e8							;EOR TrafficChance, no need, lets make life simple
   1432  f6e8		       29 3f		      AND	#%00111111
   1433  f6ea		       85 be		      STA	TrafficChance
   1434  f6ec
   1435  f6ec				   ReturnFromNextDifficulty
   1436  f6ec		       60		      RTS
   1437  f6ed				   EndNextDifficulty
   1438  f6ed
   1439  f6ed				   DefaultOffsets
   1440  f6ed		       a9 20		      LDA	#$20
   1441  f6ef		       85 96		      STA	TrafficOffset1 + 2
   1442  f6f1		       85 a6		      STA	OpTrafficOffset1 + 2
   1443  f6f3		       a9 40		      LDA	#$40
   1444  f6f5		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1445  f6f7		       85 aa		      STA	OpTrafficOffset2 + 2
   1446  f6f9		       a9 60		      LDA	#$60
   1447  f6fb		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1448  f6fd		       85 ae		      STA	OpTrafficOffset3 + 2
   1449  f6ff		       a9 80		      LDA	#$80
   1450  f701		       60		      RTS
   1451  f702
   1452  f702				   PrintStaticText		; Preload X with the offset referent to StaticText
   1453  f702		       bd 00 ff 	      LDA	StaticText,X
   1454  f705		       85 d0		      STA	ScoreD0
   1455  f707		       e8		      INX
   1456  f708		       bd 00 ff 	      LDA	StaticText,X
   1457  f70b		       85 d1		      STA	ScoreD1
   1458  f70d		       e8		      INX
   1459  f70e		       bd 00 ff 	      LDA	StaticText,X
   1460  f711		       85 d2		      STA	ScoreD2
   1461  f713		       e8		      INX
   1462  f714		       bd 00 ff 	      LDA	StaticText,X
   1463  f717		       85 d3		      STA	ScoreD3
   1464  f719		       e8		      INX
   1465  f71a		       bd 00 ff 	      LDA	StaticText,X
   1466  f71d		       85 d4		      STA	ScoreD4
   1467  f71f		       60		      RTS
   1468  f720
   1469  f720				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1470  f720		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1471  f722		       85 c9		      STA	ScoreFontColor
   1472  f724		       a9 01		      LDA	#1
   1473  f726		       85 cb		      STA	ScoreFontColorHoldChange
   1474  f728
   1475  f728		       a5 8d		      LDA	FrameCount1
   1476  f72a		       29 07		      AND	#%00000111
   1477  f72c		       85 b3		      STA	Tmp3
   1478  f72e							;0 is Zelda Name, (default)
   1479  f72e		       a9 01		      LDA	#1
   1480  f730		       c5 b3		      CMP	Tmp3
   1481  f732		       f0 38		      BEQ	PrintZeldaDateLeft
   1482  f734
   1483  f734		       a9 02		      LDA	#2
   1484  f736		       c5 b3		      CMP	Tmp3
   1485  f738		       f0 23		      BEQ	PrintPolvinhosLeft
   1486  f73a
   1487  f73a		       a9 03		      LDA	#3
   1488  f73c		       c5 b3		      CMP	Tmp3
   1489  f73e		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1490  f740
   1491  f740		       a9 04		      LDA	#4
   1492  f742		       c5 b3		      CMP	Tmp3
   1493  f744		       f0 1c		      BEQ	PrintIvonneLeft
   1494  f746
   1495  f746		       a9 05		      LDA	#5
   1496  f748		       c5 b3		      CMP	Tmp3
   1497  f74a		       f0 2a		      BEQ	PrintIvonneDateLeft
   1498  f74c
   1499  f74c		       a9 06		      LDA	#6
   1500  f74e		       c5 b3		      CMP	Tmp3
   1501  f750		       f0 15		      BEQ	PrintArtLeft
   1502  f752
   1503  f752		       a9 07		      LDA	#7
   1504  f754		       c5 b3		      CMP	Tmp3
   1505  f756		       f0 23		      BEQ	PrintLeonardoLeft
   1506  f758
   1507  f758				   PrintZeldaLeft
   1508  f758		       a2 28		      LDX	#<ZeldaTextLeft
   1509  f75a		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1510  f75d				   PrintPolvinhosLeft
   1511  f75d		       a2 3c		      LDX	#<PolvinhosTextLeft
   1512  f75f		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1513  f762				   PrintIvonneLeft
   1514  f762		       a2 50		      LDX	#<IvonneTextLeft
   1515  f764		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1516  f767				   PrintArtLeft
   1517  f767		       a2 64		      LDX	#<PaperArtTextLeft
   1518  f769		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1519  f76c
   1520  f76c				   PrintZeldaDateLeft
   1521  f76c		       a2 32		      LDX	#<ZeldaDateLeft
   1522  f76e		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1523  f771				   PrintPolvinhosDateLeft
   1524  f771		       a2 46		      LDX	#<PolvinhosDateLeft
   1525  f773		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1526  f776				   PrintIvonneDateLeft
   1527  f776		       a2 5a		      LDX	#<IvonneDateLeft
   1528  f778		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1529  f77b				   PrintLeonardoLeft
   1530  f77b		       a2 6e		      LDX	#<LeonardoTextLeft
   1531  f77d		       4c 80 f7 	      JMP	ProcessPrintEasterEgg
   1532  f780
   1533  f780				   ProcessPrintEasterEgg
   1534  f780		       a5 8c		      LDA	FrameCount0	;3
   1535  f782		       29 01		      AND	#%00000001	;2
   1536  f784		       d0 03		      BNE	TranformIntoRightText
   1537  f786		       4c 8e f7 	      JMP	PrintEasterEggText
   1538  f789				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1539  f789		       8a		      TXA
   1540  f78a		       18		      CLC
   1541  f78b		       69 05		      ADC	#HALF_TEXT_SIZE
   1542  f78d		       aa		      TAX
   1543  f78e
   1544  f78e				   PrintEasterEggText
   1545  f78e		       20 02 f7 	      JSR	PrintStaticText
   1546  f791		       60		      RTS
   1547  f792
   1548  f792				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1549  f792		       a2 00		      LDX	#0
   1550  f794		       a0 04		      LDY	#FONT_OFFSET
   1551  f796
   1552  f796				   ScoreLoop		; 20 
   1553  f796		       85 02		      STA	WSYNC	;2
   1554  f798
   1555  f798		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1556  f79a		       85 0d		      STA	PF0	;3
   1557  f79c
   1558  f79c		       a5 82		      LDA	PF1Cache	;3
   1559  f79e		       85 0e		      STA	PF1	;3
   1560  f7a0
   1561  f7a0		       a5 83		      LDA	PF2Cache	;3
   1562  f7a2		       85 0f		      STA	PF2	;3
   1563  f7a4
   1564  f7a4				   DrawScoreD0		; 15
   1565  f7a4		       a6 d0		      LDX	ScoreD0	; 3
   1566  f7a6		       bd 00 fd 	      LDA	Font,X	;4
   1567  f7a9		       85 81		      STA	PF0Cache	;3
   1568  f7ab		       c6 d0		      DEC	ScoreD0	;5
   1569  f7ad
   1570  f7ad				   DrawScoreD1		; 23	
   1571  f7ad		       a6 d1		      LDX	ScoreD1	; 3
   1572  f7af		       bd 00 fd 	      LDA	Font,X	;4
   1573  f7b2		       0a		      ASL		;2
   1574  f7b3		       0a		      ASL		;2
   1575  f7b4		       0a		      ASL		;2
   1576  f7b5		       0a		      ASL		;2
   1577  f7b6		       85 82		      STA	PF1Cache	;3
   1578  f7b8		       c6 d1		      DEC	ScoreD1	;5
   1579  f7ba
   1580  f7ba				   DrawScoreD2		; 20
   1581  f7ba		       a6 d2		      LDX	ScoreD2	; 3
   1582  f7bc		       bd 00 fd 	      LDA	Font,X	;4
   1583  f7bf		       29 0f		      AND	#%00001111	;2
   1584  f7c1		       05 82		      ORA	PF1Cache	;3
   1585  f7c3		       85 82		      STA	PF1Cache	;3
   1586  f7c5		       c6 d2		      DEC	ScoreD2	;5
   1587  f7c7
   1588  f7c7				   DrawScoreD3		; 23
   1589  f7c7		       a6 d3		      LDX	ScoreD3	; 3
   1590  f7c9		       bd 00 fd 	      LDA	Font,X	;4
   1591  f7cc		       4a		      LSR		;2
   1592  f7cd		       4a		      LSR		;2
   1593  f7ce		       4a		      LSR		;2
   1594  f7cf		       4a		      LSR		;2
   1595  f7d0		       85 83		      STA	PF2Cache	;3
   1596  f7d2		       c6 d3		      DEC	ScoreD3	;5
   1597  f7d4
   1598  f7d4				   DrawScoreD4		; 20
   1599  f7d4		       a6 d4		      LDX	ScoreD4	; 3
   1600  f7d6		       bd 00 fd 	      LDA	Font,X	;4
   1601  f7d9		       29 f0		      AND	#%11110000	;2
   1602  f7db		       05 83		      ORA	PF2Cache	;3
   1603  f7dd		       85 83		      STA	PF2Cache	;3
   1604  f7df		       c6 d4		      DEC	ScoreD4	;5
   1605  f7e1
   1606  f7e1
   1607  f7e1		       88		      DEY		;2
   1608  f7e2		       10 b2		      BPL	ScoreLoop	;4
   1609  f7e4
   1610  f7e4		       85 02		      STA	WSYNC
   1611  f7e6		       20 96 f6 	      JSR	LoadAll
   1612  f7e9		       60		      RTS		; 6
   1613  f7ea
   1614  f7ea				   PrintRightDecimalDigits
   1615  f7ea		       b9 00 00 	      LDA	0,Y
   1616  f7ed		       4a		      LSR
   1617  f7ee		       4a		      LSR
   1618  f7ef		       4a		      LSR
   1619  f7f0		       4a		      LSR
   1620  f7f1		       aa		      TAX
   1621  f7f2		       bd be fd 	      LDA	FontLookup,X	;4
   1622  f7f5		       85 d2		      STA	ScoreD2	;3
   1623  f7f7
   1624  f7f7		       b9 00 00 	      LDA	0,Y
   1625  f7fa		       29 0f		      AND	#%00001111
   1626  f7fc		       aa		      TAX
   1627  f7fd		       bd be fd 	      LDA	FontLookup,X	;4
   1628  f800		       85 d3		      STA	ScoreD3	;3
   1629  f802
   1630  f802		       c8		      INY
   1631  f803		       b9 00 00 	      LDA	0,Y
   1632  f806		       4a		      LSR
   1633  f807		       4a		      LSR
   1634  f808		       4a		      LSR
   1635  f809		       4a		      LSR
   1636  f80a		       aa		      TAX
   1637  f80b		       bd be fd 	      LDA	FontLookup,X	;4
   1638  f80e		       85 d0		      STA	ScoreD0	;3
   1639  f810
   1640  f810		       b9 00 00 	      LDA	0,Y
   1641  f813		       29 0f		      AND	#%00001111
   1642  f815		       aa		      TAX
   1643  f816		       bd be fd 	      LDA	FontLookup,X	;4
   1644  f819		       85 d1		      STA	ScoreD1	;3
   1645  f81b
   1646  f81b		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1647  f81d		       85 d4		      STA	ScoreD4
   1648  f81f		       60		      RTS
   1649  f820
   1650  f820				   PrintLastLeftDecimalDigits
   1651  f820		       b9 00 00 	      LDA	0,Y
   1652  f823		       4a		      LSR
   1653  f824		       4a		      LSR
   1654  f825		       4a		      LSR
   1655  f826		       4a		      LSR
   1656  f827		       aa		      TAX
   1657  f828		       bd be fd 	      LDA	FontLookup,X	;4
   1658  f82b		       85 d3		      STA	ScoreD3	;3
   1659  f82d		       b9 00 00 	      LDA	0,Y
   1660  f830		       29 0f		      AND	#%00001111
   1661  f832		       aa		      TAX
   1662  f833		       bd be fd 	      LDA	FontLookup,X	;4
   1663  f836		       85 d4		      STA	ScoreD4	;3
   1664  f838		       60		      RTS
   1665  f839
   1666  f839				   PrintZerosLeft
   1667  f839		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1668  f83b		       85 d2		      STA	ScoreD2
   1669  f83d		       85 d3		      STA	ScoreD3
   1670  f83f		       85 d4		      STA	ScoreD4
   1671  f841		       60		      RTS
   1672  f842
   1673  f842				   DrawGameOverScoreLine
   1674  f842		       85 02		      STA	WSYNC
   1675  f844		       20 92 f7 	      JSR	PrintScore
   1676  f847		       85 02		      STA	WSYNC
   1677  f849		       85 02		      STA	WSYNC
   1678  f84b		       20 87 f6 	      JSR	ClearPF
   1679  f84e		       60		      RTS
   1680  f84f
   1681  f84f				   DrawGameOverScreenLeft
   1682  f84f		       85 02		      STA	WSYNC
   1683  f851		       20 87 f6 	      JSR	ClearPF
   1684  f854
   1685  f854				   DrawGlideTimerLeft
   1686  f854		       20 16 f9 	      JSR	Sleep8Lines
   1687  f857		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1688  f859		       85 06		      STA	COLUP0
   1689  f85b		       85 02		      STA	WSYNC
   1690  f85d		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1691  f85f		       85 d0		      STA	ScoreD0
   1692  f861		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1693  f863		       85 d1		      STA	ScoreD1
   1694  f865		       20 39 f8 	      JSR	PrintZerosLeft
   1695  f868		       20 42 f8 	      JSR	DrawGameOverScoreLine
   1696  f86b
   1697  f86b				   DrawHitCountLeft
   1698  f86b		       20 16 f9 	      JSR	Sleep8Lines
   1699  f86e		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1700  f870		       85 06		      STA	COLUP0
   1701  f872		       85 02		      STA	WSYNC
   1702  f874		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1703  f876		       85 d0		      STA	ScoreD0
   1704  f878		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1705  f87a		       85 d1		      STA	ScoreD1
   1706  f87c		       20 39 f8 	      JSR	PrintZerosLeft
   1707  f87f		       20 42 f8 	      JSR	DrawGameOverScoreLine
   1708  f882
   1709  f882				   DrawCheckpointCountLeft
   1710  f882		       20 16 f9 	      JSR	Sleep8Lines
   1711  f885		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1712  f887		       85 06		      STA	COLUP0
   1713  f889		       85 02		      STA	WSYNC
   1714  f88b		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1715  f88d		       85 d0		      STA	ScoreD0
   1716  f88f		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1717  f891		       85 d1		      STA	ScoreD1
   1718  f893		       20 39 f8 	      JSR	PrintZerosLeft
   1719  f896		       20 42 f8 	      JSR	DrawGameOverScoreLine
   1720  f899
   1721  f899				   DrawGameVersionLeft
   1722  f899		       20 16 f9 	      JSR	Sleep8Lines
   1723  f89c		       a9 49		      LDA	#VERSION_COLOR
   1724  f89e		       85 06		      STA	COLUP0
   1725  f8a0
   1726  f8a0		       a5 c6		      LDA	GameMode
   1727  f8a2		       aa		      TAX
   1728  f8a3		       bd be fd 	      LDA	FontLookup,X	;4
   1729  f8a6		       85 d0		      STA	ScoreD0	;3
   1730  f8a8
   1731  f8a8		       a5 c7		      LDA	CurrentCarId
   1732  f8aa		       aa		      TAX
   1733  f8ab		       bd be fd 	      LDA	FontLookup,X	;4
   1734  f8ae		       85 d1		      STA	ScoreD1	;3
   1735  f8b0
   1736  f8b0		       a5 db		      LDA	StartSWCHB
   1737  f8b2		       29 40		      AND	#%01000000	; P0 difficulty
   1738  f8b4		       49 40		      EOR	#%01000000	; Reverse bytes
   1739  f8b6		       2a		      ROL
   1740  f8b7		       2a		      ROL
   1741  f8b8		       2a		      ROL
   1742  f8b9		       18		      CLC
   1743  f8ba		       69 0a		      ADC	#10
   1744  f8bc		       aa		      TAX
   1745  f8bd		       bd be fd 	      LDA	FontLookup,X	;4
   1746  f8c0		       85 d2		      STA	ScoreD2	;3
   1747  f8c2
   1748  f8c2		       a5 db		      LDA	StartSWCHB
   1749  f8c4		       29 80		      AND	#%10000000	; P0 difficulty
   1750  f8c6		       49 80		      EOR	#%10000000	; Reverse bytes
   1751  f8c8		       2a		      ROL
   1752  f8c9		       2a		      ROL
   1753  f8ca		       18		      CLC
   1754  f8cb		       69 0a		      ADC	#10
   1755  f8cd		       aa		      TAX
   1756  f8ce		       bd be fd 	      LDA	FontLookup,X	;4
   1757  f8d1		       85 d3		      STA	ScoreD3	;3
   1758  f8d3
   1759  f8d3		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1760  f8d5		       85 d4		      STA	ScoreD4
   1761  f8d7
   1762  f8d7		       20 42 f8 	      JSR	DrawGameOverScoreLine
   1763  f8da
   1764  f8da		       4c f3 f8 	      JMP	FinalizeDrawGameOver
   1765  f8dd
   1766  f8dd				   DrawGameOverScreenRight
   1767  f8dd		       85 02		      STA	WSYNC
   1768  f8df		       20 87 f6 	      JSR	ClearPF
   1769  f8e2
   1770  f8e2				   DrawVersionRight
   1771  f8e2		       20 16 f9 	      JSR	Sleep8Lines
   1772  f8e5		       a9 49		      LDA	#VERSION_COLOR
   1773  f8e7		       85 07		      STA	COLUP1
   1774  f8e9		       85 02		      STA	WSYNC
   1775  f8eb		       a2 78		      LDX	#<VersionText
   1776  f8ed		       20 02 f7 	      JSR	PrintStaticText
   1777  f8f0		       20 42 f8 	      JSR	DrawGameOverScoreLine
   1778  f8f3
   1779  f8f3				   FinalizeDrawGameOver
   1780  f8f3		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1781  f8f5		       85 c9		      STA	ScoreFontColor
   1782  f8f7		       20 0d f9 	      JSR	Sleep4Lines
   1783  f8fa		       20 1d f9 	      JSR	Sleep32Lines
   1784  f8fd		       20 1d f9 	      JSR	Sleep32Lines
   1785  f900		       4c 51 f5 	      JMP	PrepareOverscan
   1786  f903
   1787  f903				   WaitForVblankEnd
   1788  f903		       ad 84 02 	      LDA	INTIM
   1789  f906		       d0 fb		      BNE	WaitForVblankEnd
   1790  f908		       85 02		      STA	WSYNC
   1791  f90a		       85 01		      STA	VBLANK
   1792  f90c		       60		      RTS
   1793  f90d
   1794  f90d				   Sleep4Lines
   1795  f90d		       85 02		      STA	WSYNC
   1796  f90f		       85 02		      STA	WSYNC
   1797  f911		       85 02		      STA	WSYNC
   1798  f913		       85 02		      STA	WSYNC
   1799  f915		       60		      RTS
   1800  f916
   1801  f916				   Sleep8Lines
   1802  f916		       20 0d f9 	      JSR	Sleep4Lines
   1803  f919		       20 0d f9 	      JSR	Sleep4Lines
   1804  f91c		       60		      RTS
   1805  f91d
   1806  f91d				   Sleep32Lines
   1807  f91d		       20 16 f9 	      JSR	Sleep8Lines
   1808  f920		       20 16 f9 	      JSR	Sleep8Lines
   1809  f923		       20 16 f9 	      JSR	Sleep8Lines
   1810  f926		       20 16 f9 	      JSR	Sleep8Lines
   1811  f929		       60		      RTS
   1812  f92a
   1813  f92a				   ConfigureCarSprites
   1814  f92a		       a5 8c		      LDA	FrameCount0
   1815  f92c		       29 01		      AND	#%00000001
   1816  f92e		       d0 0b		      BNE	LoadForRightScreenSprites
   1817  f930				   LoadForLeftScreenSprites
   1818  f930		       a5 c7		      LDA	CurrentCarId
   1819  f932		       85 b0		      STA	Tmp0
   1820  f934		       a5 c8		      LDA	OpCurrentCarId
   1821  f936		       85 b1		      STA	Tmp1
   1822  f938		       4c 43 f9 	      JMP	LoadCarSpritesFromIds
   1823  f93b				   LoadForRightScreenSprites
   1824  f93b		       a5 c7		      LDA	CurrentCarId
   1825  f93d		       85 b1		      STA	Tmp1
   1826  f93f		       a5 c8		      LDA	OpCurrentCarId
   1827  f941		       85 b0		      STA	Tmp0
   1828  f943
   1829  f943				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1830  f943		       a4 b0		      LDY	Tmp0
   1831  f945		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
   1832  f948		       85 d7		      STA	CarSpritePointerL
   1833  f94a		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
   1834  f94d		       85 d8		      STA	CarSpritePointerH
   1835  f94f				   ConfigureOpponentCarSprite
   1836  f94f		       a4 b1		      LDY	Tmp1
   1837  f951		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1838  f954		       85 d9		      STA	EnemyCarSpritePointerL
   1839  f956		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1840  f959		       85 da		      STA	EnemyCarSpritePointerH
   1841  f95b		       60		      RTS
   1842  f95c
   1843  f95c							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1844  f95c							;X player 0 or 1
   1845  f95c				   SelectCarWithDpad
   1846  f95c		       a0 03		      LDY	#3
   1847  f95e				   SelectCarWithDpadLoop
   1848  f95e		       ad 80 02 	      LDA	SWCHA
   1849  f961		       25 b0		      AND	Tmp0
   1850  f963		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1851  f965		       98		      TYA
   1852  f966		       95 c7		      STA	CurrentCarId,X
   1853  f968				   ContinueSelectCarWithDpadLoop
   1854  f968		       46 b0		      LSR	Tmp0
   1855  f96a		       88		      DEY
   1856  f96b		       10 f1		      BPL	SelectCarWithDpadLoop
   1857  f96d		       60		      RTS
   1858  f96e
   1859  f96e							; Movement and colision are binded because the car must be moved after duplicate size.
   1860  f96e							; Use X for the player
   1861  f96e							; Tmp2 Traffic colision result
   1862  f96e							; Tmp3 Opponent Colision result (Not implemented)
   1863  f96e				   TestCollisionAndMove
   1864  f96e							; Until store the movemnt, Y contains the value to be stored.
   1865  f96e							; see if player0 colides with the rest
   1866  f96e		       a5 b2		      LDA	Tmp2
   1867  f970		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1868  f972		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1869  f974		       d0 25		      BNE	NoCollision
   1870  f976		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1871  f978		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1872  f97a		       f0 1f		      BEQ	NoCollision
   1873  f97c		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1874  f97e		       f0 1b		      BEQ	NoCollision
   1875  f980		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1876  f982		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1877  f984		       b5 f2		      LDA	Player0SpeedH,X
   1878  f986		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1879  f988		       a9 10		      LDA	#COLLISION_SPEED_L
   1880  f98a		       d5 f0		      CMP	Player0SpeedL,X
   1881  f98c		       b0 04		      BCS	SkipSetColisionSpeedL
   1882  f98e				   SetColisionSpeedL
   1883  f98e		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1884  f990		       95 f0		      STA	Player0SpeedL,X
   1885  f992				   SkipSetColisionSpeedL
   1886  f992		       a9 00		      LDA	#0
   1887  f994		       95 f2		      STA	Player0SpeedH,X
   1888  f996		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1889  f998		       4c eb f9 	      JMP	StoreHMove	; We keep position consistent
   1890  f99b				   NoCollision
   1891  f99b
   1892  f99b				   DecrementCollision
   1893  f99b		       b5 8e		      LDA	CollisionCounter,X
   1894  f99d		       f0 06		      BEQ	FinishDecrementCollision
   1895  f99f		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1896  f9a1		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1897  f9a3		       d6 8e		      DEC	CollisionCounter,X
   1898  f9a5				   FinishDecrementCollision
   1899  f9a5
   1900  f9a5				   ResetPlayerSize
   1901  f9a5		       d0 04		      BNE	FinishResetPlayerSize
   1902  f9a7		       a9 30		      LDA	#%00110000
   1903  f9a9		       95 04		      STA	NUSIZ0,X	;
   1904  f9ab				   FinishResetPlayerSize
   1905  f9ab
   1906  f9ab				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1907  f9ab		       b5 8e		      LDA	CollisionCounter,X
   1908  f9ad		       c9 01		      CMP	#1	; Last frame before reset
   1909  f9af		       d0 05		      BNE	SkipResetPlayerPosition
   1910  f9b1		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1911  f9b3		       4c eb f9 	      JMP	StoreHMove
   1912  f9b6				   SkipResetPlayerPosition
   1913  f9b6
   1914  f9b6				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1915  f9b6		       b5 c7		      LDA	CurrentCarId,X
   1916  f9b8		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1917  f9ba		       d0 08		      BNE	PrepareReadXAxis
   1918  f9bc		       a0 00		      LDY	#0
   1919  f9be		       a5 8c		      LDA	FrameCount0
   1920  f9c0		       29 01		      AND	#DRAGSTER_TURN_MASK
   1921  f9c2		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1922  f9c4
   1923  f9c4				   PrepareReadXAxis
   1924  f9c4		       a0 00		      LDY	#0
   1925  f9c6		       b5 b6		      LDA	Player0X,X
   1926  f9c8				   BeginReadLeft
   1927  f9c8		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1928  f9ca		       bd d1 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1929  f9cd		       2c 80 02 	      BIT	SWCHA
   1930  f9d0		       d0 07		      BNE	SkipMoveLeft
   1931  f9d2		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1932  f9d4		       d6 b6		      DEC	Player0X,X
   1933  f9d6		       4c eb f9 	      JMP	StoreHMove	; Cannot move left and right...
   1934  f9d9				   SkipMoveLeft
   1935  f9d9				   BeginReadRight
   1936  f9d9		       b5 b6		      LDA	Player0X,X
   1937  f9db		       c9 2c		      CMP	#PLAYER_MAX_X
   1938  f9dd		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1939  f9df		       bd d3 fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1940  f9e2		       2c 80 02 	      BIT	SWCHA
   1941  f9e5		       d0 04		      BNE	SkipMoveRight
   1942  f9e7		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1943  f9e9		       f6 b6		      INC	Player0X,X
   1944  f9eb				   SkipMoveRight
   1945  f9eb				   StoreHMove
   1946  f9eb		       94 20		      STY	HMP0,X	;set the move for player 0
   1947  f9ed
   1948  f9ed				   ClearCollision
   1949  f9ed		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1950  f9ef		       60		      RTS
   1951  f9f0
   1952  f9f0							; X Traffic offset 4 bits each lane, 4 lanes per player
   1953  f9f0							; Tmp3 Max X offset
   1954  f9f0							; Tmp4 Max Player Speed L
   1955  f9f0							; Tmp5 Max Player Speed H
   1956  f9f0				   UpdateOffsets
   1957  f9f0		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1958  f9f2		       a5 c6		      LDA	GameMode
   1959  f9f4		       29 04		      AND	#%00000100	; GameModes with high delta
   1960  f9f6		       f0 02		      BEQ	UpdateOffsetsLoop
   1961  f9f8		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1962  f9fa
   1963  f9fa				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1964  f9fa		       38		      SEC
   1965  f9fb		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1966  f9fd		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1967  fa00		       85 b0		      STA	Tmp0
   1968  fa02		       c8		      INY
   1969  fa03		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1970  fa05		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
   1971  fa08		       85 b1		      STA	Tmp1
   1972  fa0a		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1973  fa0c		       e9 00		      SBC	#0
   1974  fa0e		       85 b2		      STA	Tmp2
   1975  fa10
   1976  fa10				   AddsTheResult
   1977  fa10		       18		      CLC
   1978  fa11		       a5 b0		      LDA	Tmp0
   1979  fa13		       75 90		      ADC	TrafficOffset0,X
   1980  fa15		       95 90		      STA	TrafficOffset0,X
   1981  fa17		       e8		      INX
   1982  fa18		       a5 b1		      LDA	Tmp1
   1983  fa1a		       75 90		      ADC	TrafficOffset0,X
   1984  fa1c		       95 90		      STA	TrafficOffset0,X
   1985  fa1e		       e8		      INX
   1986  fa1f		       a5 b2		      LDA	Tmp2	; Carry
   1987  fa21		       75 90		      ADC	TrafficOffset0,X
   1988  fa23		       95 90		      STA	TrafficOffset0,X
   1989  fa25		       90 0f		      BCC	CalculateOffsetCache
   1990  fa27				   CalculatePlayer0Msb
   1991  fa27		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1992  fa29		       d0 05		      BNE	CalculatePlayer1Msb
   1993  fa2b		       e6 ba		      INC	Traffic0Msb
   1994  fa2d		       4c 36 fa 	      JMP	CalculateOffsetCache
   1995  fa30				   CalculatePlayer1Msb
   1996  fa30		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1997  fa32		       d0 02		      BNE	CalculateOffsetCache
   1998  fa34		       e6 bb		      INC	OpTraffic0Msb
   1999  fa36
   2000  fa36				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   2001  fa36		       e8		      INX
   2002  fa37		       38		      SEC
   2003  fa38		       69 00		      ADC	#0	;Increment by one
   2004  fa3a		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   2005  fa3c
   2006  fa3c				   PrepareNextUpdateLoop
   2007  fa3c		       c8		      INY
   2008  fa3d		       e8		      INX
   2009  fa3e		       e4 b3		      CPX	Tmp3	; Max X offset
   2010  fa40		       d0 b8		      BNE	UpdateOffsetsLoop
   2011  fa42		       60		      RTS
   2012  fa43
   2013  fa43							; X Player 0 or 1
   2014  fa43				   ProcessSpeed
   2015  fa43				   BreakOnTimeOver		; Uses LDX as the breaking speed
   2016  fa43		       a9 00		      LDA	#0
   2017  fa45		       85 b0		      STA	Tmp0	; Break speed
   2018  fa47		       b5 b8		      LDA	CountdownTimer,X
   2019  fa49		       d0 0d		      BNE	Break
   2020  fa4b		       b4 c7		      LDY	CurrentCarId,X
   2021  fa4d		       a5 8c		      LDA	FrameCount0
   2022  fa4f		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
   2023  fa52		       d0 04		      BNE	Break
   2024  fa54		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   2025  fa56		       85 b0		      STA	Tmp0
   2026  fa58
   2027  fa58				   Break
   2028  fa58		       bd cf fc 	      LDA	PlayerToDownMask,X	;Down in controller
   2029  fa5b		       2c 80 02 	      BIT	SWCHA
   2030  fa5e		       d0 12		      BNE	BreakNonZero
   2031  fa60		       b5 0c		      LDA	INPT4,X	;3
   2032  fa62		       10 0a		      BPL	BreakWhileAccelerating
   2033  fa64		       b4 d5		      LDY	Gear,X
   2034  fa66		       b9 e9 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2035  fa69		       85 b0		      STA	Tmp0
   2036  fa6b		       4c 72 fa 	      JMP	BreakNonZero
   2037  fa6e				   BreakWhileAccelerating		; Allow better control while breaking.
   2038  fa6e		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2039  fa70		       85 b0		      STA	Tmp0
   2040  fa72
   2041  fa72				   BreakNonZero
   2042  fa72		       a5 b0		      LDA	Tmp0
   2043  fa74		       f0 29		      BEQ	SkipBreak
   2044  fa76
   2045  fa76				   DecreaseSpeed
   2046  fa76		       38		      SEC
   2047  fa77		       b5 f0		      LDA	Player0SpeedL,X
   2048  fa79		       e5 b0		      SBC	Tmp0
   2049  fa7b		       95 f0		      STA	Player0SpeedL,X
   2050  fa7d		       b5 f2		      LDA	Player0SpeedH,X
   2051  fa7f		       e9 00		      SBC	#0
   2052  fa81		       95 f2		      STA	Player0SpeedH,X
   2053  fa83
   2054  fa83				   CheckMinSpeed
   2055  fa83		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2056  fa85		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2057  fa87		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2058  fa89		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2059  fa8b
   2060  fa8b				   CompareLBreakSpeed
   2061  fa8b		       b5 f0		      LDA	Player0SpeedL,X
   2062  fa8d		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2063  fa8f		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2064  fa91		       4c 9c fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2065  fa94
   2066  fa94				   ResetMinSpeed
   2067  fa94		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2068  fa96		       95 f2		      STA	Player0SpeedH,X
   2069  fa98		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2070  fa9a		       95 f0		      STA	Player0SpeedL,X
   2071  fa9c
   2072  fa9c				   SkipAccelerateIfBreaking
   2073  fa9c		       4c e5 fa 	      JMP	SkipAccelerate
   2074  fa9f				   SkipBreak
   2075  fa9f
   2076  fa9f				   Acelerates
   2077  fa9f		       b5 b8		      LDA	CountdownTimer,X
   2078  faa1		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2079  faa3
   2080  faa3				   ContinueAccelerateTest
   2081  faa3		       b5 0c		      LDA	INPT4,X	;3
   2082  faa5		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2083  faa7		       bd cd fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2084  faaa		       2c 80 02 	      BIT	SWCHA
   2085  faad		       d0 36		      BNE	SkipAccelerate
   2086  faaf
   2087  faaf				   IncreaseCarSpeed
   2088  faaf		       a9 02		      LDA	#2
   2089  fab1		       85 b0		      STA	Tmp0	; Loop control
   2090  fab3		       b4 c7		      LDY	CurrentCarId,X
   2091  fab5				   IncreaseCarSpeedLoop
   2092  fab5							;Adds speed
   2093  fab5		       18		      CLC
   2094  fab6		       b5 dc		      LDA	AccelerateBuffer,X
   2095  fab8		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
   2096  fabb		       95 dc		      STA	AccelerateBuffer,X
   2097  fabd		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2098  fabf		       f6 f0		      INC	Player0SpeedL,X
   2099  fac1		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2100  fac3		       f6 f2		      INC	Player0SpeedH,X
   2101  fac5				   ContinueIncreaseSpeedLoop
   2102  fac5		       c6 b0		      DEC	Tmp0
   2103  fac7		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2104  fac9				   SkipIncreaseCarSpeed
   2105  fac9
   2106  fac9				   CheckIfAlreadyMaxSpeed
   2107  fac9		       b5 f2		      LDA	Player0SpeedH,X
   2108  facb		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2109  facd		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2110  facf		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2111  fad1							;High bit is max, compare the low
   2112  fad1		       b4 c7		      LDY	CurrentCarId,X
   2113  fad3		       b5 f0		      LDA	Player0SpeedL,X
   2114  fad5		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
   2115  fad8		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2116  fada							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2117  fada
   2118  fada				   ResetToMaxSpeed		; Speed is more, or is already max
   2119  fada		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2120  fadc		       95 f2		      STA	Player0SpeedH,X
   2121  fade		       b4 c7		      LDY	CurrentCarId,X
   2122  fae0		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
   2123  fae3		       95 f0		      STA	Player0SpeedL,X
   2124  fae5				   SkipAccelerate
   2125  fae5		       60		      RTS
   2126  fae6
   2127  fae6							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2128  fc00					      org	$FC00
   2129  fc00				   QrCode1
   2130  fc00		       1f		      .byte.b	#%00011111
   2131  fc01		       10		      .byte.b	#%00010000
   2132  fc02		       17		      .byte.b	#%00010111
   2133  fc03		       17		      .byte.b	#%00010111
   2134  fc04		       17		      .byte.b	#%00010111
   2135  fc05		       10		      .byte.b	#%00010000
   2136  fc06		       1f		      .byte.b	#%00011111
   2137  fc07		       00		      .byte.b	#%00000000
   2138  fc08		       17		      .byte.b	#%00010111
   2139  fc09		       10		      .byte.b	#%00010000
   2140  fc0a		       1d		      .byte.b	#%00011101
   2141  fc0b		       16		      .byte.b	#%00010110
   2142  fc0c		       03		      .byte.b	#%00000011
   2143  fc0d		       19		      .byte.b	#%00011001
   2144  fc0e		       13		      .byte.b	#%00010011
   2145  fc0f		       1c		      .byte.b	#%00011100
   2146  fc10		       0b		      .byte.b	#%00001011
   2147  fc11		       00		      .byte.b	#%00000000
   2148  fc12		       1f		      .byte.b	#%00011111
   2149  fc13		       10		      .byte.b	#%00010000
   2150  fc14		       17		      .byte.b	#%00010111
   2151  fc15		       17		      .byte.b	#%00010111
   2152  fc16		       17		      .byte.b	#%00010111
   2153  fc17		       10		      .byte.b	#%00010000
   2154  fc18		       1f		      .byte.b	#%00011111
   2155  fc19
   2156  fc19				   QrCode2
   2157  fc19		       c3		      .byte.b	#%11000011
   2158  fc1a		       9a		      .byte.b	#%10011010
   2159  fc1b		       82		      .byte.b	#%10000010
   2160  fc1c		       da		      .byte.b	#%11011010
   2161  fc1d		       aa		      .byte.b	#%10101010
   2162  fc1e		       ca		      .byte.b	#%11001010
   2163  fc1f		       f3		      .byte.b	#%11110011
   2164  fc20		       78		      .byte.b	#%01111000
   2165  fc21		       df		      .byte.b	#%11011111
   2166  fc22		       fc		      .byte.b	#%11111100
   2167  fc23		       c7		      .byte.b	#%11000111
   2168  fc24		       98		      .byte.b	#%10011000
   2169  fc25		       23		      .byte.b	#%00100011
   2170  fc26		       b9		      .byte.b	#%10111001
   2171  fc27		       d2		      .byte.b	#%11010010
   2172  fc28		       30		      .byte.b	#%00110000
   2173  fc29		       eb		      .byte.b	#%11101011
   2174  fc2a		       28		      .byte.b	#%00101000
   2175  fc2b		       ab		      .byte.b	#%10101011
   2176  fc2c		       72		      .byte.b	#%01110010
   2177  fc2d		       fa		      .byte.b	#%11111010
   2178  fc2e		       7a		      .byte.b	#%01111010
   2179  fc2f		       32		      .byte.b	#%00110010
   2180  fc30		       3a		      .byte.b	#%00111010
   2181  fc31		       63		      .byte.b	#%01100011
   2182  fc32
   2183  fc32				   QrCode3
   2184  fc32		       98		      .byte.b	#%10011000
   2185  fc33		       c3		      .byte.b	#%11000011
   2186  fc34		       39		      .byte.b	#%00111001
   2187  fc35		       34		      .byte.b	#%00110100
   2188  fc36		       ff		      .byte.b	#%11111111
   2189  fc37		       71		      .byte.b	#%01110001
   2190  fc38		       d5		      .byte.b	#%11010101
   2191  fc39		       d1		      .byte.b	#%11010001
   2192  fc3a		       5f		      .byte.b	#%01011111
   2193  fc3b		       26		      .byte.b	#%00100110
   2194  fc3c		       2d		      .byte.b	#%00101101
   2195  fc3d		       e9		      .byte.b	#%11101001
   2196  fc3e		       d6		      .byte.b	#%11010110
   2197  fc3f		       26		      .byte.b	#%00100110
   2198  fc40		       ba		      .byte.b	#%10111010
   2199  fc41		       03		      .byte.b	#%00000011
   2200  fc42		       dd		      .byte.b	#%11011101
   2201  fc43		       e0		      .byte.b	#%11100000
   2202  fc44		       57		      .byte.b	#%01010111
   2203  fc45		       14		      .byte.b	#%00010100
   2204  fc46		       35		      .byte.b	#%00110101
   2205  fc47		       e5		      .byte.b	#%11100101
   2206  fc48		       b5		      .byte.b	#%10110101
   2207  fc49		       d4		      .byte.b	#%11010100
   2208  fc4a		       97		      .byte.b	#%10010111
   2209  fc4b
   2210  fc4b				   QrCode4
   2211  fc4b		       09		      .byte.b	#%00001001
   2212  fc4c		       0e		      .byte.b	#%00001110
   2213  fc4d		       0f		      .byte.b	#%00001111
   2214  fc4e		       0c		      .byte.b	#%00001100
   2215  fc4f		       0c		      .byte.b	#%00001100
   2216  fc50		       08		      .byte.b	#%00001000
   2217  fc51		       08		      .byte.b	#%00001000
   2218  fc52		       06		      .byte.b	#%00000110
   2219  fc53		       06		      .byte.b	#%00000110
   2220  fc54		       0b		      .byte.b	#%00001011
   2221  fc55		       0f		      .byte.b	#%00001111
   2222  fc56		       04		      .byte.b	#%00000100
   2223  fc57		       08		      .byte.b	#%00001000
   2224  fc58		       0f		      .byte.b	#%00001111
   2225  fc59		       09		      .byte.b	#%00001001
   2226  fc5a		       07		      .byte.b	#%00000111
   2227  fc5b		       05		      .byte.b	#%00000101
   2228  fc5c		       00		      .byte.b	#%00000000
   2229  fc5d		       0f		      .byte.b	#%00001111
   2230  fc5e		       08		      .byte.b	#%00001000
   2231  fc5f		       0b		      .byte.b	#%00001011
   2232  fc60		       0b		      .byte.b	#%00001011
   2233  fc61		       0b		      .byte.b	#%00001011
   2234  fc62		       08		      .byte.b	#%00001000
   2235  fc63		       0f		      .byte.b	#%00001111
   2236  fc64
   2237  fc64							; Moved here because of rom space.
   2238  fc64							; The only SBR in constants space
   2239  fc64				   DrawQrCode
   2240  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2241  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2242  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2243  fc6a		       85 0a		      STA	CTRLPF
   2244  fc6c		       20 75 f6 	      JSR	ClearAll	; To be 100 sure!
   2245  fc6f		       ad 82 02 	      LDA	SWCHB
   2246  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2247  fc74		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2248  fc76		       f0 07		      BEQ	StoreReversedQrCode
   2249  fc78		       86 09		      STX	COLUBK
   2250  fc7a		       84 08		      STY	COLUPF
   2251  fc7c		       4c 83 fc 	      JMP	ContinueQrCode
   2252  fc7f				   StoreReversedQrCode
   2253  fc7f		       86 08		      STX	COLUPF
   2254  fc81		       84 09		      STY	COLUBK
   2255  fc83
   2256  fc83				   ContinueQrCode
   2257  fc83		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2258  fc85		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2259  fc87		       20 03 f9 	      JSR	WaitForVblankEnd
   2260  fc8a		       20 16 f9 	      JSR	Sleep8Lines
   2261  fc8d		       20 16 f9 	      JSR	Sleep8Lines
   2262  fc90		       20 16 f9 	      JSR	Sleep8Lines
   2263  fc93
   2264  fc93				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2265  fc93		       85 02		      STA	WSYNC
   2266  fc95		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2267  fc98		       85 0e		      STA	PF1	;3
   2268  fc9a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2269  fc9d		       85 0f		      STA	PF2	;3
      0  fc9f					      SLEEP	27	; 
      1  fc9f				   .CYCLES    SET	27
      2  fc9f
      3  fc9f				  -	      IF	.CYCLES < 2
      4  fc9f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9f				  -	      ERR
      6  fc9f					      ENDIF
      7  fc9f
      8  fc9f					      IF	.CYCLES & 1
      9  fc9f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9f				  -	      nop	0
     11  fc9f					      ELSE
     12  fc9f		       24 00		      bit	VSYNC
     13  fca1					      ENDIF
     14  fca1				   .CYCLES    SET	.CYCLES - 3
     15  fca1					      ENDIF
     16  fca1
     17  fca1					      REPEAT	.CYCLES / 2
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     19  fcad					      REPEND
   2271  fcad		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2272  fcb0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2273  fcb2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2274  fcb5		       85 0e		      STA	PF1	;3
   2275  fcb7
   2276  fcb7		       ca		      DEX		;2
   2277  fcb8		       d0 d9		      BNE	QrCodeLoop	;2
   2278  fcba		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2279  fcbc		       88		      DEY		;2
   2280  fcbd		       10 d4		      BPL	QrCodeLoop	;4
   2281  fcbf
   2282  fcbf				   EndQrCodeLoop
   2283  fcbf		       85 02		      STA	WSYNC	;
   2284  fcc1		       a9 00		      LDA	#0
   2285  fcc3		       85 0e		      STA	PF1	;3
   2286  fcc5		       85 0f		      STA	PF2	;3
   2287  fcc7
   2288  fcc7		       20 1d f9 	      JSR	Sleep32Lines
   2289  fcca		       4c 51 f5 	      JMP	PrepareOverscan
   2290  fccd
   2291  fccd				   PlayerToUpMask
   2292  fccd		       10		      .byte.b	#%00010000	;
   2293  fcce		       01		      .byte.b	#%00000001	;
   2294  fccf
   2295  fccf				   PlayerToDownMask
   2296  fccf		       20		      .byte.b	#%00100000	;
   2297  fcd0		       02		      .byte.b	#%00000010	;
   2298  fcd1
   2299  fcd1
   2300  fcd1				   PlayerToLeftMask
   2301  fcd1		       40		      .byte.b	#%01000000	;
   2302  fcd2		       04		      .byte.b	#%00000100	;
   2303  fcd3
   2304  fcd3				   PlayerToRightMask
   2305  fcd3		       80		      .byte.b	#%10000000	;
   2306  fcd4		       08		      .byte.b	#%00001000	;
   2307  fcd5
   2308  fd00					      org	$FD00
   2309  fd00				   Font
   2310  fd00				   C0
   2311  fd00		       e7		      .byte.b	#%11100111	;
   2312  fd01		       a5		      .byte.b	#%10100101	; 
   2313  fd02		       a5		      .byte.b	#%10100101	; 
   2314  fd03		       a5		      .byte.b	#%10100101	; 
   2315  fd04		       e7		      .byte.b	#%11100111	;	
   2316  fd05				   C1
   2317  fd05		       e7		      .byte.b	#%11100111	;
   2318  fd06		       42		      .byte.b	#%01000010	; 
   2319  fd07		       42		      .byte.b	#%01000010	; 
   2320  fd08		       42		      .byte.b	#%01000010	; 
   2321  fd09		       66		      .byte.b	#%01100110	;
   2322  fd0a				   C2
   2323  fd0a		       e7		      .byte.b	#%11100111	;
   2324  fd0b		       24		      .byte.b	#%00100100	; 
   2325  fd0c		       e7		      .byte.b	#%11100111	; 
   2326  fd0d		       81		      .byte.b	#%10000001	; 
   2327  fd0e		       e7		      .byte.b	#%11100111	;
   2328  fd0f				   C3
   2329  fd0f		       e7		      .byte.b	#%11100111	;
   2330  fd10		       81		      .byte.b	#%10000001	; 
   2331  fd11		       e7		      .byte.b	#%11100111	; 
   2332  fd12		       81		      .byte.b	#%10000001	; 
   2333  fd13		       e7		      .byte.b	#%11100111	;
   2334  fd14				   C4
   2335  fd14		       81		      .byte.b	#%10000001	;
   2336  fd15		       81		      .byte.b	#%10000001	; 
   2337  fd16		       e7		      .byte.b	#%11100111	; 
   2338  fd17		       a5		      .byte.b	#%10100101	; 
   2339  fd18		       a5		      .byte.b	#%10100101	;
   2340  fd19				   C5
   2341  fd19		       e7		      .byte.b	#%11100111	;
   2342  fd1a		       81		      .byte.b	#%10000001	; 
   2343  fd1b		       e7		      .byte.b	#%11100111	; 
   2344  fd1c		       24		      .byte.b	#%00100100	; 
   2345  fd1d		       e7		      .byte.b	#%11100111	;
   2346  fd1e				   C6
   2347  fd1e		       e7		      .byte.b	#%11100111	;
   2348  fd1f		       a5		      .byte.b	#%10100101	; 
   2349  fd20		       e7		      .byte.b	#%11100111	; 
   2350  fd21		       24		      .byte.b	#%00100100	; 
   2351  fd22		       e7		      .byte.b	#%11100111	;
   2352  fd23				   C7
   2353  fd23		       81		      .byte.b	#%10000001	;
   2354  fd24		       81		      .byte.b	#%10000001	; 
   2355  fd25		       81		      .byte.b	#%10000001	; 
   2356  fd26		       81		      .byte.b	#%10000001	; 
   2357  fd27		       e7		      .byte.b	#%11100111	;
   2358  fd28				   C8
   2359  fd28		       e7		      .byte.b	#%11100111	;
   2360  fd29		       a5		      .byte.b	#%10100101	; 
   2361  fd2a		       e7		      .byte.b	#%11100111	; 
   2362  fd2b		       a5		      .byte.b	#%10100101	; 
   2363  fd2c		       e7		      .byte.b	#%11100111	;
   2364  fd2d				   C9
   2365  fd2d		       e7		      .byte.b	#%11100111	;
   2366  fd2e		       81		      .byte.b	#%10000001	; 
   2367  fd2f		       e7		      .byte.b	#%11100111	; 
   2368  fd30		       a5		      .byte.b	#%10100101	; 
   2369  fd31		       e7		      .byte.b	#%11100111	;
   2370  fd32				   CA
   2371  fd32		       a5		      .byte.b	#%10100101	;
   2372  fd33		       a5		      .byte.b	#%10100101	; 
   2373  fd34		       e7		      .byte.b	#%11100111	; 
   2374  fd35		       a5		      .byte.b	#%10100101	; 
   2375  fd36		       e7		      .byte.b	#%11100111	;
   2376  fd37				   CB
   2377  fd37		       66		      .byte.b	#%01100110	;
   2378  fd38		       a5		      .byte.b	#%10100101	; 
   2379  fd39		       66		      .byte.b	#%01100110	; 
   2380  fd3a		       a5		      .byte.b	#%10100101	;
   2381  fd3b		       66		      .byte.b	#%01100110	;
   2382  fd3c				   CC
   2383  fd3c		       e7		      .byte.b	#%11100111	;
   2384  fd3d		       24		      .byte.b	#%00100100	; 
   2385  fd3e		       24		      .byte.b	#%00100100	; 
   2386  fd3f		       24		      .byte.b	#%00100100	;
   2387  fd40		       e7		      .byte.b	#%11100111	;
   2388  fd41
   2389  fd41				   CD
   2390  fd41		       66		      .byte.b	#%01100110	;
   2391  fd42		       a5		      .byte.b	#%10100101	; 
   2392  fd43		       a5		      .byte.b	#%10100101	; 
   2393  fd44		       a5		      .byte.b	#%10100101	;
   2394  fd45		       66		      .byte.b	#%01100110	;
   2395  fd46
   2396  fd46				   CE
   2397  fd46		       e7		      .byte.b	#%11100111	;
   2398  fd47		       24		      .byte.b	#%00100100	; 
   2399  fd48		       e7		      .byte.b	#%11100111	; 
   2400  fd49		       24		      .byte.b	#%00100100	; 
   2401  fd4a		       e7		      .byte.b	#%11100111	;
   2402  fd4b
   2403  fd4b				   CF
   2404  fd4b		       24		      .byte.b	#%00100100	;
   2405  fd4c		       24		      .byte.b	#%00100100	; 
   2406  fd4d		       e7		      .byte.b	#%11100111	; 
   2407  fd4e		       24		      .byte.b	#%00100100	; 
   2408  fd4f		       e7		      .byte.b	#%11100111	;
   2409  fd50
   2410  fd50				   CG
   2411  fd50		       c3		      .byte.b	#%11000011	;
   2412  fd51		       a5		      .byte.b	#%10100101	; 
   2413  fd52		       a5		      .byte.b	#%10100101	; 
   2414  fd53		       24		      .byte.b	#%00100100	; 
   2415  fd54		       c3		      .byte.b	#%11000011	;	
   2416  fd55
   2417  fd55				   CH
   2418  fd55		       a5		      .byte.b	#%10100101	;
   2419  fd56		       a5		      .byte.b	#%10100101	; 
   2420  fd57		       e7		      .byte.b	#%11100111	; 
   2421  fd58		       a5		      .byte.b	#%10100101	; 
   2422  fd59		       a5		      .byte.b	#%10100101	;
   2423  fd5a
   2424  fd5a				   CK
   2425  fd5a		       a5		      .byte.b	#%10100101	;
   2426  fd5b		       a5		      .byte.b	#%10100101	; 
   2427  fd5c		       66		      .byte.b	#%01100110	; 
   2428  fd5d		       a5		      .byte.b	#%10100101	; 
   2429  fd5e		       a5		      .byte.b	#%10100101	;
   2430  fd5f
   2431  fd5f				   CL
   2432  fd5f		       e7		      .byte.b	#%11100111	;
   2433  fd60		       24		      .byte.b	#%00100100	; 
   2434  fd61		       24		      .byte.b	#%00100100	; 
   2435  fd62		       24		      .byte.b	#%00100100	; 
   2436  fd63		       24		      .byte.b	#%00100100	;
   2437  fd64
   2438  fd64				   CI
   2439  fd64		       42		      .byte.b	#%01000010	;
   2440  fd65		       42		      .byte.b	#%01000010	; 
   2441  fd66		       42		      .byte.b	#%01000010	; 
   2442  fd67		       42		      .byte.b	#%01000010	; 
   2443  fd68		       42		      .byte.b	#%01000010	;
   2444  fd69
   2445  fd69				   CM
   2446  fd69		       a5		      .byte.b	#%10100101	;
   2447  fd6a		       a5		      .byte.b	#%10100101	; 
   2448  fd6b		       a5		      .byte.b	#%10100101	; 
   2449  fd6c		       e7		      .byte.b	#%11100111	; 
   2450  fd6d		       a5		      .byte.b	#%10100101	;
   2451  fd6e
   2452  fd6e				   CN
   2453  fd6e		       a5		      .byte.b	#%10100101	;
   2454  fd6f		       a5		      .byte.b	#%10100101	; 
   2455  fd70		       a5		      .byte.b	#%10100101	; 
   2456  fd71		       a5		      .byte.b	#%10100101	; 
   2457  fd72		       66		      .byte.b	#%01100110	;	
   2458  fd73
   2459  fd73
   2460  fd73				   CO
   2461  fd73		       42		      .byte.b	#%01000010	;
   2462  fd74		       a5		      .byte.b	#%10100101	; 
   2463  fd75		       a5		      .byte.b	#%10100101	; 
   2464  fd76		       a5		      .byte.b	#%10100101	; 
   2465  fd77		       42		      .byte.b	#%01000010	;	
   2466  fd78
   2467  fd78				   CP
   2468  fd78		       24		      .byte.b	#%00100100	;
   2469  fd79		       24		      .byte.b	#%00100100	; 
   2470  fd7a		       e7		      .byte.b	#%11100111	; 
   2471  fd7b		       a5		      .byte.b	#%10100101	; 
   2472  fd7c		       e7		      .byte.b	#%11100111	;
   2473  fd7d
   2474  fd7d				   CR
   2475  fd7d		       a5		      .byte.b	#%10100101	;
   2476  fd7e		       a5		      .byte.b	#%10100101	; 
   2477  fd7f		       66		      .byte.b	#%01100110	; 
   2478  fd80		       a5		      .byte.b	#%10100101	; 
   2479  fd81		       66		      .byte.b	#%01100110	;
   2480  fd82
   2481  fd82				   CS
   2482  fd82		       66		      .byte.b	#%01100110	;
   2483  fd83		       81		      .byte.b	#%10000001	; 
   2484  fd84		       42		      .byte.b	#%01000010	; 
   2485  fd85		       24		      .byte.b	#%00100100	; 
   2486  fd86		       c3		      .byte.b	#%11000011	;
   2487  fd87
   2488  fd87				   CT
   2489  fd87		       42		      .byte.b	#%01000010	;
   2490  fd88		       42		      .byte.b	#%01000010	; 
   2491  fd89		       42		      .byte.b	#%01000010	; 
   2492  fd8a		       42		      .byte.b	#%01000010	; 
   2493  fd8b		       e7		      .byte.b	#%11100111	;
   2494  fd8c
   2495  fd8c				   CV
   2496  fd8c		       42		      .byte.b	#%01000010	;
   2497  fd8d		       a5		      .byte.b	#%10100101	; 
   2498  fd8e		       a5		      .byte.b	#%10100101	; 
   2499  fd8f		       a5		      .byte.b	#%10100101	; 
   2500  fd90		       a5		      .byte.b	#%10100101	;	
   2501  fd91
   2502  fd91				   CY
   2503  fd91		       42		      .byte.b	#%01000010	;
   2504  fd92		       42		      .byte.b	#%01000010	; 
   2505  fd93		       42		      .byte.b	#%01000010	; 
   2506  fd94		       a5		      .byte.b	#%10100101	; 
   2507  fd95		       a5		      .byte.b	#%10100101	;
   2508  fd96
   2509  fd96				   CW
   2510  fd96		       a5		      .byte.b	#%10100101	;
   2511  fd97		       e7		      .byte.b	#%11100111	; 
   2512  fd98		       a5		      .byte.b	#%10100101	; 
   2513  fd99		       a5		      .byte.b	#%10100101	; 
   2514  fd9a		       a5		      .byte.b	#%10100101	;
   2515  fd9b
   2516  fd9b				   CZ
   2517  fd9b		       e7		      .byte.b	#%11100111	;
   2518  fd9c		       24		      .byte.b	#%00100100	; 
   2519  fd9d		       42		      .byte.b	#%01000010	; 
   2520  fd9e		       81		      .byte.b	#%10000001	; 
   2521  fd9f		       e7		      .byte.b	#%11100111	;
   2522  fda0
   2523  fda0				   Pipe
   2524  fda0		       42		      .byte.b	#%01000010	;
   2525  fda1		       00		      .byte.b	#%00000000	; 
   2526  fda2		       42		      .byte.b	#%01000010	; 
   2527  fda3		       00		      .byte.b	#%00000000	; 
   2528  fda4		       42		      .byte.b	#%01000010	;
   2529  fda5
   2530  fda5				   Exclamation
   2531  fda5		       42		      .byte.b	#%01000010	;
   2532  fda6		       00		      .byte.b	#%00000000	; 
   2533  fda7		       42		      .byte.b	#%01000010	; 
   2534  fda8		       42		      .byte.b	#%01000010	; 
   2535  fda9		       42		      .byte.b	#%01000010	;
   2536  fdaa
   2537  fdaa				   Dot
   2538  fdaa		       42		      .byte.b	#%01000010	;
   2539  fdab		       42		      .byte.b	#%01000010	; 
   2540  fdac		       00		      .byte.b	#%00000000	; 
   2541  fdad		       00		      .byte.b	#%00000000	; 
   2542  fdae		       00		      .byte.b	#%00000000	;
   2543  fdaf
   2544  fdaf				   Colon
   2545  fdaf		       42		      .byte.b	#%01000010	;
   2546  fdb0		       42		      .byte.b	#%01000010	; 
   2547  fdb1		       00		      .byte.b	#%00000000	; 
   2548  fdb2		       42		      .byte.b	#%01000010	; 
   2549  fdb3		       42		      .byte.b	#%01000010	;
   2550  fdb4
   2551  fdb4				   Triangle
   2552  fdb4		       81		      .byte.b	#%10000001	;
   2553  fdb5		       c3		      .byte.b	#%11000011	; 
   2554  fdb6		       e7		      .byte.b	#%11100111	; 
   2555  fdb7		       c3		      .byte.b	#%11000011	; 
   2556  fdb8		       81		      .byte.b	#%10000001	;
   2557  fdb9
   2558  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2559  fdb9		       00		      .byte.b	#0	;
   2560  fdba		       00		      .byte.b	#0	;
   2561  fdbb		       00		      .byte.b	#0	;
   2562  fdbc		       00		      .byte.b	#0	;
   2563  fdbd		       00		      .byte.b	#0	;
   2564  fdbe
   2565  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2566  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2567  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2568  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2569  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2570  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2571  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2572  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2573  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2574  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2575  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2576  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2577  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2578  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2579  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2580  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2581  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2582  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2583  fdcf
   2584  fdcf				   EngineSoundType
   2585  fdcf		       02		      .byte.b	#2
   2586  fdd0		       02		      .byte.b	#2
   2587  fdd1		       0e		      .byte.b	#14
   2588  fdd2		       06		      .byte.b	#6
   2589  fdd3		       06		      .byte.b	#6
   2590  fdd4		       0e		      .byte.b	#14
   2591  fdd5
   2592  fdd5				   EngineBaseFrequence
   2593  fdd5		       1f		      .byte.b	#31
   2594  fdd6		       15		      .byte.b	#21
   2595  fdd7		       14		      .byte.b	#20
   2596  fdd8		       1f		      .byte.b	#31
   2597  fdd9		       16		      .byte.b	#22
   2598  fdda		       03		      .byte.b	#3
   2599  fddb
   2600  fddb				   TachometerSizeLookup1
   2601  fddb		       1f		      .byte.b	#%00011111
   2602  fddc		       3f		      .byte.b	#%00111111
   2603  fddd		       7f		      .byte.b	#%01111111
   2604  fdde		       ff		      .byte.b	#%11111111
   2605  fddf		       ff		      .byte.b	#%11111111
   2606  fde0		       ff		      .byte.b	#%11111111
   2607  fde1		       ff		      .byte.b	#%11111111
   2608  fde2		       ff		      .byte.b	#%11111111
   2609  fde3
   2610  fde3				   TachometerSizeLookup2
   2611  fde3		       00		      .byte.b	#%00000000
   2612  fde4		       00		      .byte.b	#%00000000
   2613  fde5		       00		      .byte.b	#%00000000
   2614  fde6		       00		      .byte.b	#%00000000
   2615  fde7		       80		      .byte.b	#%10000000
   2616  fde8		       c0		      .byte.b	#%11000000
   2617  fde9		       e0		      .byte.b	#%11100000
   2618  fdea		       f0		      .byte.b	#%11110000
   2619  fdeb
   2620  fdeb				   TachometerGearLookup
   2621  fdeb		       01		      .byte.b	#%00000001
   2622  fdec		       02		      .byte.b	#%00000010
   2623  fded		       04		      .byte.b	#%00000100
   2624  fdee		       08		      .byte.b	#%00001000
   2625  fdef		       10		      .byte.b	#%00010000
   2626  fdf0		       30		      .byte.b	#%00110000
   2627  fdf1
   2628  fe00					      org	$FE00
   2629  fe00				   AesTable
   2630  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2631  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2632  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2633  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2634  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2635  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2636  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2637  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2638  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2639  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2640  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2641  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2642  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2643  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2644  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2645  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2646  ff00
   2647  ff00							; From FF00 to FFFB (122 bytes) to use here
   2648  ff00
   2649  ff00				   StaticText		; All static text must be on the same MSB block. 
   2650  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2651  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2652  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2653  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2654  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2655  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2656  ff05
   2657  ff05				   HellwayLeftText
   2658  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2659  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2660  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2661  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2662  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2663  ff0a
   2664  ff0a				   HellwayRightText
   2665  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2666  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2667  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2668  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2669  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2670  ff0f
   2671  ff0f				   OpbText
   2672  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2673  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2674  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2675  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2676  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2677  ff14
   2678  ff14				   YearText
   2679  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2680  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2681  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2682  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2683  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2684  ff19
   2685  ff19				   GameText
   2686  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2687  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2688  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2689  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2690  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2691  ff1e
   2692  ff1e				   OverText
   2693  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2694  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2695  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2696  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2697  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2698  ff23				   GoText
   2699  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2700  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2701  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2702  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2703  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2704  ff28
   2705  ff28				   ZeldaTextLeft
   2706  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2707  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2708  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2709  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2710  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2711  ff2d
   2712  ff2d				   ZeldaTextRight
   2713  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2714  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2715  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2716  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2717  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2718  ff32
   2719  ff32				   ZeldaDateLeft
   2720  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2721  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2722  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2723  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2724  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2725  ff37
   2726  ff37				   ZeldaDateRight
   2727  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2728  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2729  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2730  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2731  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2732  ff3c
   2733  ff3c				   PolvinhosTextLeft
   2734  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2735  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2736  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2737  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2738  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2739  ff41
   2740  ff41				   PolvinhosTextRight
   2741  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2742  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2743  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2744  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2745  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2746  ff46
   2747  ff46				   PolvinhosDateLeft
   2748  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2749  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2750  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2751  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2752  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2753  ff4b
   2754  ff4b				   PolvinhosDateRight
   2755  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2756  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2757  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2758  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2759  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2760  ff50
   2761  ff50				   IvonneTextLeft
   2762  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2763  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2764  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2765  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2766  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2767  ff55
   2768  ff55				   IvonneTextRight
   2769  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2770  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2771  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2772  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2773  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2774  ff5a
   2775  ff5a				   IvonneDateLeft
   2776  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2777  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2778  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2779  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2780  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2781  ff5f
   2782  ff5f				   IvonneDateRight
   2783  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2784  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2785  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2786  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2787  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2788  ff64
   2789  ff64				   PaperArtTextLeft
   2790  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2791  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2792  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2793  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2794  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2795  ff69
   2796  ff69				   PaperArtTextRight
   2797  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2798  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2799  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2800  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2801  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2802  ff6e
   2803  ff6e				   LeonardoTextLeft
   2804  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2805  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2806  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2807  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2808  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2809  ff73
   2810  ff73				   LeonardoTextRight
   2811  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2812  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2813  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2814  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2815  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2816  ff78
   2817  ff78				   VersionText
   2818  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2819  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2820  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2821  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2822  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2823  ff7d
   2824  ff7d
   2825  ff7d				   EndStaticText
   2826  ff7d
   2827  ff7d				   CarSprite0		; Upside down, Original Car
   2828  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2829  ff85				   CarSprite0NoPadding
   2830  ff85		       7e		      .byte.b	#%01111110
   2831  ff86		       24		      .byte.b	#%00100100
   2832  ff87		       bd		      .byte.b	#%10111101
   2833  ff88		       3c		      .byte.b	#%00111100
   2834  ff89		       bd		      .byte.b	#%10111101
   2835  ff8a		       3c		      .byte.b	#%00111100
   2836  ff8b
   2837  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2838  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2839  ff93				   CarSprite1NoPadding
   2840  ff93		       bd		      .byte.b	#%10111101
   2841  ff94		       7e		      .byte.b	#%01111110
   2842  ff95		       5a		      .byte.b	#%01011010
   2843  ff96		       66		      .byte.b	#%01100110
   2844  ff97		       bd		      .byte.b	#%10111101
   2845  ff98		       3c		      .byte.b	#%00111100
   2846  ff99
   2847  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2848  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2849  ffa1				   CarSprite2NoPadding
   2850  ffa1		       7e		      .byte.b	#%01111110
   2851  ffa2		       a5		      .byte.b	#%10100101
   2852  ffa3		       42		      .byte.b	#%01000010
   2853  ffa4		       42		      .byte.b	#%01000010
   2854  ffa5		       bd		      .byte.b	#%10111101
   2855  ffa6		       7e		      .byte.b	#%01111110
   2856  ffa7
   2857  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2858  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2859  ffaf				   CarSprite3NoPadding
   2860  ffaf		       3c		      .byte.b	#%00111100
   2861  ffb0		       db		      .byte.b	#%11011011
   2862  ffb1		       db		      .byte.b	#%11011011
   2863  ffb2		       3c		      .byte.b	#%00111100
   2864  ffb3		       5a		      .byte.b	#%01011010
   2865  ffb4		       3c		      .byte.b	#%00111100
   2866  ffb5
   2867  ffb5				   TrafficSpeeds
   2868  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2869  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2870  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2871  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2872  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2873  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2874  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2875  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2876  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2877  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2878  ffbf				   TrafficSpeedsHighDelta
   2879  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2880  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2881  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2882  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2883  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2884  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2885  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2886  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2887  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2888  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2889  ffc9
   2890  ffc9				   CarIdToSpriteAddressL
   2891  ffc9		       7d		      .byte.b	#<CarSprite0
   2892  ffca		       8b		      .byte.b	#<CarSprite1
   2893  ffcb		       99		      .byte.b	#<CarSprite2
   2894  ffcc		       a7		      .byte.b	#<CarSprite3
   2895  ffcd
   2896  ffcd				   CarIdToSpriteAddressH
   2897  ffcd		       ff		      .byte.b	#>CarSprite0
   2898  ffce		       ff		      .byte.b	#>CarSprite1
   2899  ffcf		       ff		      .byte.b	#>CarSprite2
   2900  ffd0		       ff		      .byte.b	#>CarSprite3
   2901  ffd1
   2902  ffd1				   EnemyCarIdToSpriteAddressL
   2903  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2904  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2905  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2906  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2907  ffd5
   2908  ffd5				   EnemyCarIdToSpriteAddressH
   2909  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2910  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2911  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2912  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2913  ffd9
   2914  ffd9				   CarIdToAccelerateSpeed
   2915  ffd9		       80		      .byte.b	#128
   2916  ffda		       c0		      .byte.b	#192
   2917  ffdb		       60		      .byte.b	#96
   2918  ffdc		       c0		      .byte.b	#192
   2919  ffdd
   2920  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2921  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2922  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2923  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2924  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2925  ffe1
   2926  ffe1				   CarIdToMaxSpeedL
   2927  ffe1		       80		      .byte.b	#$80
   2928  ffe2		       00		      .byte.b	#$00	; One less gear
   2929  ffe3		       80		      .byte.b	#$80
   2930  ffe4		       80		      .byte.b	#$80
   2931  ffe5
   2932  ffe5				   CarIdToMaxGear
   2933  ffe5		       05		      .byte.b	#5
   2934  ffe6		       04		      .byte.b	#4	; One less gear
   2935  ffe7		       05		      .byte.b	#5
   2936  ffe8		       05		      .byte.b	#5
   2937  ffe9
   2938  ffe9				   GearToBreakSpeedTable
   2939  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2940  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2941  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2942  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2943  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2944  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2945  ffef
   2946  ffef				   TrafficColorTable
   2947  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2948  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2949  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2950  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2951  fff3
   2952  fff3				   TrafficChanceTable
   2953  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2954  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2955  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2956  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2957  fff7
   2958  fff7				   TrafficTimeTable
   2959  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2960  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2961  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2962  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2963  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2964  fffc
   2965  fffc
   2966  fffc					      org	$FFFC
   2967  fffc		       00 f0		      .word.w	BeforeStart
   2968  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
