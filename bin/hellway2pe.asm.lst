------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 09	   ENGINE_VOLUME =	9
    104  f000
    105  f000		       00 08	   CAR_SIZE   =	8
    106  f000
    107  f000		       00 80	   GRP0Cache  =	$80
    108  f000		       00 81	   PF0Cache   =	$81
    109  f000		       00 82	   PF1Cache   =	$82
    110  f000		       00 83	   PF2Cache   =	$83
    111  f000		       00 84	   GRP1Cache  =	$84
    112  f000		       00 85	   ENABLCache =	$85
    113  f000		       00 86	   ENAM0Cache =	$86
    114  f000		       00 87	   ENAM1Cache =	$87
    115  f000
    116  f000		       00 8c	   FrameCount0 =	$8C	;
    117  f000		       00 8d	   FrameCount1 =	$8D	;
    118  f000
    119  f000		       00 8e	   CollisionCounter =	$8E
    120  f000		       00 8f	   OpCollisionCounter =	$8F
    121  f000
    122  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    123  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    124  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    125  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    126  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    127  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    128  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    129  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    130  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    131  f000
    132  f000							;Temporary variables, multiple uses
    133  f000		       00 b0	   Tmp0       =	$B0
    134  f000		       00 b1	   Tmp1       =	$B1
    135  f000		       00 b2	   Tmp2       =	$B2
    136  f000		       00 b3	   Tmp3       =	$B3
    137  f000		       00 b4	   Tmp4       =	$B4
    138  f000		       00 b5	   Tmp5       =	$B5
    139  f000
    140  f000		       00 b6	   Player0X   =	$B6
    141  f000		       00 b7	   Player1X   =	$B7
    142  f000		       00 b8	   CountdownTimer =	$B8
    143  f000		       00 b9	   OpCountdownTimer =	$B9
    144  f000		       00 ba	   Traffic0Msb =	$BA
    145  f000		       00 bb	   OpTraffic0Msb =	$BB
    146  f000		       00 bc	   SwitchDebounceCounter =	$BC
    147  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    148  f000		       00 be	   TrafficChance =	$BE
    149  f000		       00 bf	   OpTrafficChance =	$BF
    150  f000
    151  f000		       00 c0	   CheckpointTime =	$C0
    152  f000		       00 c1	   OpCheckpointTime =	$C1
    153  f000		       00 c2	   TrafficColor =	$C2
    154  f000		       00 c3	   OpTrafficColor =	$C3
    155  f000		       00 c4	   CurrentDifficulty =	$C4
    156  f000		       00 c5	   OpCurrentDifficulty =	$C5
    157  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    158  f000
    159  f000		       00 c7	   CurrentCarId =	$C7
    160  f000		       00 c8	   OpCurrentCarId =	$C8
    161  f000
    162  f000		       00 c9	   ScoreFontColor =	$C9
    163  f000		       00 ca	   OpScoreFontColor =	$CA
    164  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    165  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    166  f000		       00 cd	   NextCheckpoint =	$CD
    167  f000		       00 ce	   OpNextCheckpoint =	$CE
    168  f000		       00 cf	   OpponentLine =	$CF
    169  f000
    170  f000		       00 d0	   ScoreD0    =	$D0
    171  f000		       00 d1	   ScoreD1    =	$D1
    172  f000		       00 d2	   ScoreD2    =	$D2
    173  f000		       00 d3	   ScoreD3    =	$D3
    174  f000		       00 d4	   ScoreD4    =	$D4
    175  f000
    176  f000		       00 d5	   Gear       =	$D5
    177  f000		       00 d6	   OpGear     =	$D6
    178  f000
    179  f000		       00 d7	   CarSpritePointerL =	$D7
    180  f000		       00 d8	   CarSpritePointerH =	$D8
    181  f000
    182  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    183  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    184  f000
    185  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    186  f000
    187  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    188  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    189  f000
    190  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    191  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    192  f000
    193  f000		       00 f0	   Player0SpeedL =	$F0
    194  f000		       00 f1	   Player1SpeedL =	$F1
    195  f000		       00 f2	   Player0SpeedH =	$F2
    196  f000		       00 f3	   Player1SpeedH =	$F3
    197  f000
    198  f000		       00 f4	   IsOpponentInFront =	$F4	; Bit 7 tells if negative or positive.
    199  f000
    200  f000							;generic start up stuff, put zero in almost all...
    201  f000				   BeforeStart		;All variables that are kept on game reset or select
    202  f000		       a0 00		      LDY	#0
    203  f002		       84 bc		      STY	SwitchDebounceCounter
    204  f004		       84 c4		      STY	CurrentDifficulty
    205  f006		       84 c5		      STY	OpCurrentDifficulty
    206  f008		       84 bd		      STY	GameStatus
    207  f00a		       84 c7		      STY	CurrentCarId
    208  f00c		       84 c8		      STY	OpCurrentCarId
    209  f00e		       a0 10		      LDY	#16
    210  f010		       84 c6		      STY	GameMode
    211  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    212  f014
    213  f014				   Start
    214  f014		       a9 02		      LDA	#2
    215  f016		       85 00		      STA	VSYNC
    216  f018		       85 02		      STA	WSYNC
    217  f01a		       85 02		      STA	WSYNC
    218  f01c		       85 02		      STA	WSYNC
    219  f01e		       a9 00		      LDA	#0	;2
    220  f020		       85 00		      STA	VSYNC	;3
    221  f022
    222  f022		       78		      SEI
    223  f023		       d8		      CLD
    224  f024		       a2 ff		      LDX	#$FF
    225  f026		       9a		      TXS
    226  f027
    227  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    228  f029				   CleanMem
    229  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    230  f02b		       f0 1a		      BEQ	SkipClean
    231  f02d		       e0 c6		      CPX	#GameMode
    232  f02f		       f0 16		      BEQ	SkipClean
    233  f031		       e0 c7		      CPX	#CurrentCarId
    234  f033		       f0 12		      BEQ	SkipClean
    235  f035		       e0 c8		      CPX	#OpCurrentCarId
    236  f037		       f0 0e		      BEQ	SkipClean
    237  f039		       e0 c4		      CPX	#CurrentDifficulty
    238  f03b		       f0 0a		      BEQ	SkipClean
    239  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    240  f03f		       f0 06		      BEQ	SkipClean
    241  f041		       e0 bd		      CPX	#GameStatus
    242  f043		       f0 02		      BEQ	SkipClean
    243  f045		       95 00		      STA	0,X
    244  f047				   SkipClean
    245  f047		       e8		      INX
    246  f048		       d0 df		      BNE	CleanMem
    247  f04a
    248  f04a		       a9 d5		      LDA	#213
    249  f04c		       8d 96 02 	      STA	TIM64T	;3	
    250  f04f
    251  f04f							;Setting some variables...
    252  f04f
    253  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    254  f04f		       85 02		      STA	WSYNC	;We will set player position
    255  f051		       20 1c f7 	      JSR	DefaultOffsets
    256  f054
    257  f054		       ad 85 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    258  f057		       85 f0		      STA	Player0SpeedL
    259  f059		       85 f1		      STA	Player1SpeedL
    260  f05b
    261  f05b							;SLEEP 11;18
    262  f05b		       a2 00		      LDX	#0
    263  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    264  f060		       85 db		      STA	StartSWCHB	; For game over
    265  f062		       29 c0		      AND	#%11000000
    266  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    267  f066		       e8		      INX
    268  f067		       c9 80		      CMP	#%10000000
    269  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    270  f06b		       e8		      INX
    271  f06c		       c9 40		      CMP	#%01000000
    272  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    273  f070		       e8		      INX
    274  f071
    275  f071				   StoreCurrentDifficulty
    276  f071		       86 c4		      STX	CurrentDifficulty
    277  f073		       86 c5		      STX	OpCurrentDifficulty
    278  f075		       a2 00		      LDX	#0
    279  f077		       20 d4 f6 	      JSR	ConfigureDifficulty
    280  f07a		       e8		      INX
    281  f07b		       20 d4 f6 	      JSR	ConfigureDifficulty
    282  f07e
    283  f07e				   SetGameNotRunning
    284  f07e		       a9 00		      LDA	#0
    285  f080		       85 bd		      STA	GameStatus
    286  f082
    287  f082				   ConfigureTimer
    288  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    289  f084		       85 b8		      STA	CountdownTimer	;3
    290  f086		       85 b9		      STA	OpCountdownTimer	;3
    291  f088
    292  f088				   ConfigurePlayer1XPosition
    293  f088		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    294  f08a		       85 b7		      STA	Player1X	;3
    295  f08c
    296  f08c				   ConfigureOpNextCheckpoint
    297  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    298  f08e		       85 ce		      STA	OpNextCheckpoint
    299  f090
    300  f090				   HPositioning 		; Avoid sleep doing needed stuff
    301  f090		       85 02		      STA	WSYNC
    302  f092
    303  f092				   ConfigurePlayer0XPosition
    304  f092		       a9 21		      LDA	#PLAYER_0_X_START	;2
    305  f094		       85 b6		      STA	Player0X	;3
    306  f096
    307  f096				   ConfigureMissileSize
    308  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    309  f098		       85 04		      STA	NUSIZ0	;3
    310  f09a		       85 05		      STA	NUSIZ1	;3
    311  f09c
    312  f09c				   ConfigureNextCheckpoint
    313  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    314  f09e		       85 cd		      STA	NextCheckpoint
    315  f0a0
    316  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    317  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	4	;
      1  f0a2				   .CYCLES    SET	4
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2				  -	      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2				  -	      ELSE
     12  f0a2				  -	      bit	VSYNC
     13  f0a2				  -	      ENDIF
     14  f0a2				  -.CYCLES    SET	.CYCLES - 3
     15  f0a2					      ENDIF
     16  f0a2
     17  f0a2					      REPEAT	.CYCLES / 2
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     19  f0a4					      REPEND
    319  f0a4		       85 12		      STA	RESM0
      0  f0a6					      SLEEP	2	;
      1  f0a6				   .CYCLES    SET	2
      2  f0a6
      3  f0a6				  -	      IF	.CYCLES < 2
      4  f0a6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a6				  -	      ERR
      6  f0a6					      ENDIF
      7  f0a6
      8  f0a6				  -	      IF	.CYCLES & 1
      9  f0a6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a6				  -	      nop	0
     11  f0a6				  -	      ELSE
     12  f0a6				  -	      bit	VSYNC
     13  f0a6				  -	      ENDIF
     14  f0a6				  -.CYCLES    SET	.CYCLES - 3
     15  f0a6					      ENDIF
     16  f0a6
     17  f0a6					      REPEAT	.CYCLES / 2
     18  f0a6		       ea		      nop
     19  f0a7					      REPEND
    321  f0a7		       85 14		      STA	RESBL
      0  f0a9					      SLEEP	2
      1  f0a9				   .CYCLES    SET	2
      2  f0a9
      3  f0a9				  -	      IF	.CYCLES < 2
      4  f0a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a9				  -	      ERR
      6  f0a9					      ENDIF
      7  f0a9
      8  f0a9				  -	      IF	.CYCLES & 1
      9  f0a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a9				  -	      nop	0
     11  f0a9				  -	      ELSE
     12  f0a9				  -	      bit	VSYNC
     13  f0a9				  -	      ENDIF
     14  f0a9				  -.CYCLES    SET	.CYCLES - 3
     15  f0a9					      ENDIF
     16  f0a9
     17  f0a9					      REPEAT	.CYCLES / 2
     18  f0a9		       ea		      nop
     19  f0aa					      REPEND
    323  f0aa		       85 13		      STA	RESM1
      0  f0ac					      SLEEP	3
      1  f0ac				   .CYCLES    SET	3
      2  f0ac
      3  f0ac				  -	      IF	.CYCLES < 2
      4  f0ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ac				  -	      ERR
      6  f0ac					      ENDIF
      7  f0ac
      8  f0ac					      IF	.CYCLES & 1
      9  f0ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ac				  -	      nop	0
     11  f0ac					      ELSE
     12  f0ac		       24 00		      bit	VSYNC
     13  f0ae					      ENDIF
     14  f0ae				   .CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae				  -	      REPEAT	.CYCLES / 2
     18  f0ae				  -	      nop
     19  f0ae					      REPEND
    325  f0ae
    326  f0ae		       a9 e0		      LDA	#$E0
    327  f0b0		       85 24		      STA	HMBL
    328  f0b2		       85 22		      STA	HMM0
    329  f0b4		       85 23		      STA	HMM1
    330  f0b6		       85 02		      STA	WSYNC
    331  f0b8		       85 2a		      STA	HMOVE
    332  f0ba		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    333  f0bc		       85 2b		      STA	HMCLR
      0  f0be					      SLEEP	30
      1  f0be				   .CYCLES    SET	30
      2  f0be
      3  f0be				  -	      IF	.CYCLES < 2
      4  f0be				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0be				  -	      ERR
      6  f0be					      ENDIF
      7  f0be
      8  f0be				  -	      IF	.CYCLES & 1
      9  f0be				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0be				  -	      nop	0
     11  f0be				  -	      ELSE
     12  f0be				  -	      bit	VSYNC
     13  f0be				  -	      ENDIF
     14  f0be				  -.CYCLES    SET	.CYCLES - 3
     15  f0be					      ENDIF
     16  f0be
     17  f0be					      REPEAT	.CYCLES / 2
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     19  f0cd					      REPEND
    335  f0cd		       85 10		      STA	RESP0
    336  f0cf							;SLEEP 5 ; Temporarily move player 1 away.
    337  f0cf		       85 11		      STA	RESP1
    338  f0d1
    339  f0d1				   WaitResetToEnd
    340  f0d1		       ad 84 02 	      LDA	INTIM
    341  f0d4		       d0 fb		      BNE	WaitResetToEnd
    342  f0d6
    343  f0d6				   MainLoop
    344  f0d6		       a9 02		      LDA	#2
    345  f0d8		       85 00		      STA	VSYNC
    346  f0da		       85 02		      STA	WSYNC
    347  f0dc		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    348  f0de				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    349  f0de		       a9 01		      LDA	#%00000001	;3
    350  f0e0		       24 df		      BIT	TextFlickerMode	;2
    351  f0e2		       f0 05		      BEQ	TextSideFrameZero	;2
    352  f0e4		       25 8d		      AND	FrameCount1	;2
    353  f0e6		       4c eb f0 	      JMP	StoreTextSize	;3
    354  f0e9				   TextSideFrameZero
    355  f0e9		       25 8c		      AND	FrameCount0	;2
    356  f0eb				   StoreTextSize
    357  f0eb		       85 de		      STA	TextSide	;3
    358  f0ed
    359  f0ed				   PrepareMaxHMove
      0  f0ed					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0ed				   .CYCLES    SET	18
      2  f0ed
      3  f0ed				  -	      IF	.CYCLES < 2
      4  f0ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ed				  -	      ERR
      6  f0ed					      ENDIF
      7  f0ed
      8  f0ed				  -	      IF	.CYCLES & 1
      9  f0ed				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ed				  -	      nop	0
     11  f0ed				  -	      ELSE
     12  f0ed				  -	      bit	VSYNC
     13  f0ed				  -	      ENDIF
     14  f0ed				  -.CYCLES    SET	.CYCLES - 3
     15  f0ed					      ENDIF
     16  f0ed
     17  f0ed					      REPEAT	.CYCLES / 2
     18  f0ed		       ea		      nop
     17  f0ed					      REPEND
     18  f0ee		       ea		      nop
     17  f0ee					      REPEND
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     17  f0f3					      REPEND
     18  f0f4		       ea		      nop
     17  f0f4					      REPEND
     18  f0f5		       ea		      nop
     19  f0f6					      REPEND
    361  f0f6		       a9 80		      LDA	#$80
    362  f0f8		       85 24		      STA	HMBL
    363  f0fa		       85 22		      STA	HMM0
    364  f0fc		       85 23		      STA	HMM1
    365  f0fe		       85 20		      STA	HMP0
    366  f100		       85 21		      STA	HMP1
    367  f102		       85 02		      STA	WSYNC
    368  f104		       85 2a		      STA	HMOVE	; 1/10			
    369  f106
    370  f106				   ConfigVBlankTimer
    371  f106		       a5 c6		      LDA	GameMode
    372  f108		       c9 10		      CMP	#MAX_GAME_MODE
    373  f10a		       f0 05		      BEQ	SetVblankTimerQrCode
    374  f10c		       a9 29		      LDA	#VBLANK_TIMER
    375  f10e		       4c 13 f1 	      JMP	SetVblankTimer
    376  f111				   SetVblankTimerQrCode
    377  f111		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    378  f113
    379  f113				   SetVblankTimer
    380  f113		       85 02		      STA	WSYNC	;3
    381  f115		       8d 96 02 	      STA	TIM64T	;3	
    382  f118		       a9 00		      LDA	#0	;2
    383  f11a		       85 00		      STA	VSYNC	;3	
    384  f11c
    385  f11c				   RandomizeGame
    386  f11c		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    387  f11e		       d0 2d		      BNE	EndRandomizeGame
    388  f120		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    389  f122		       29 02		      AND	#%00000010
    390  f124		       f0 24		      BEQ	DeterministicGame
    391  f126		       a6 96		      LDX	TrafficOffset1 + 2
    392  f128		       bd 00 fe 	      LDA	AesTable,X
    393  f12b		       45 8c		      EOR	FrameCount0
    394  f12d		       85 96		      STA	TrafficOffset1 + 2
    395  f12f		       85 a6		      STA	OpTrafficOffset1 + 2
    396  f131		       a6 9a		      LDX	TrafficOffset2 + 2
    397  f133		       bd 00 fe 	      LDA	AesTable,X
    398  f136		       45 8c		      EOR	FrameCount0
    399  f138		       85 9a		      STA	TrafficOffset2 + 2
    400  f13a		       85 aa		      STA	OpTrafficOffset2 + 2
    401  f13c		       a6 9e		      LDX	TrafficOffset3 + 2
    402  f13e		       bd 00 fe 	      LDA	AesTable,X
    403  f141		       45 8c		      EOR	FrameCount0
    404  f143		       85 9e		      STA	TrafficOffset3 + 2
    405  f145		       85 ae		      STA	OpTrafficOffset3 + 2
    406  f147		       4c 4d f1 	      JMP	EndRandomizeGame
    407  f14a
    408  f14a				   DeterministicGame
    409  f14a		       20 1c f7 	      JSR	DefaultOffsets
    410  f14d
    411  f14d				   EndRandomizeGame
    412  f14d
    413  f14d
    414  f14d				   CountFrame
    415  f14d		       e6 8c		      INC	FrameCount0	; 5
    416  f14f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    417  f151		       e6 8d		      INC	FrameCount1	; 5 
    418  f153				   SkipIncFC1
    419  f153
    420  f153				   CallDrawQrCode
    421  f153		       a5 c6		      LDA	GameMode
    422  f155		       c9 10		      CMP	#MAX_GAME_MODE
    423  f157		       d0 03		      BNE	TestIsGameRunning
    424  f159		       4c 7d fa 	      JMP	DrawQrCode
    425  f15c
    426  f15c							;Does not update the game if not running
    427  f15c				   TestIsGameRunning
    428  f15c		       a5 bd		      LDA	GameStatus	;3
    429  f15e		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    430  f160				   SelectCarWithDpadCall		; Only do it when game is stoped
    431  f160		       a2 00		      LDX	#0	; Player 0
    432  f162		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    433  f164		       85 b0		      STA	Tmp0
    434  f166		       20 20 f8 	      JSR	SelectCarWithDpad
    435  f169		       e8		      INX		; Player 1
    436  f16a		       20 20 f8 	      JSR	SelectCarWithDpad
    437  f16d
    438  f16d							; Needs to draw the opponent in the correct line even when game stoped  
    439  f16d							; Draeing is a destructive operation
    440  f16d		       20 32 f8 	      JSR	ProcessOpponentLine
    441  f170
    442  f170				   CallConfigureCarSprites
    443  f170		       20 da f7 	      JSR	ConfigureCarSprites
    444  f173				   SkipUpdateLogicJump
    445  f173		       4c bc f1 	      JMP	SkipUpdateLogic
    446  f176				   ContinueWithGameLogic
    447  f176
    448  f176				   CallEverySecond		; Timer for now
    449  f176		       a2 00		      LDX	#0
    450  f178		       20 53 fa 	      JSR	EverySecond
    451  f17b		       e8		      INX
    452  f17c		       20 53 fa 	      JSR	EverySecond
    453  f17f
    454  f17f				   ChangeTextFlickerMode
    455  f17f		       a5 bc		      LDA	SwitchDebounceCounter
    456  f181		       d0 0d		      BNE	EndChangeTextFlickerMode
    457  f183		       ad 82 02 	      LDA	SWCHB
    458  f186		       29 02		      AND	#%00000010	;Game select
    459  f188		       d0 06		      BNE	EndChangeTextFlickerMode
    460  f18a		       e6 df		      INC	TextFlickerMode
    461  f18c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    462  f18e		       85 bc		      STA	SwitchDebounceCounter
    463  f190				   EndChangeTextFlickerMode
    464  f190
    465  f190				   CallProcessSpeed
    466  f190		       a2 00		      LDX	#0
    467  f192		       20 6a f9 	      JSR	ProcessSpeed
    468  f195
    469  f195		       e8		      INX		; Player 1
    470  f196		       20 6a f9 	      JSR	ProcessSpeed
    471  f199
    472  f199				   CallUpdateOffsets
    473  f199		       a2 00		      LDX	#0	; Player 0
    474  f19b		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    475  f19d		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    476  f19f		       a5 f0		      LDA	Player0SpeedL
    477  f1a1		       85 b4		      STA	Tmp4
    478  f1a3		       a5 f2		      LDA	Player0SpeedH
    479  f1a5		       85 b5		      STA	Tmp5
    480  f1a7		       20 17 f9 	      JSR	UpdateOffsets
    481  f1aa
    482  f1aa							;LDX Exits the call with correct value.
    483  f1aa		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    484  f1ac		       85 b3		      STA	Tmp3
    485  f1ae		       a5 f1		      LDA	Player1SpeedL
    486  f1b0		       85 b4		      STA	Tmp4
    487  f1b2		       a5 f3		      LDA	Player1SpeedH
    488  f1b4		       85 b5		      STA	Tmp5
    489  f1b6		       20 17 f9 	      JSR	UpdateOffsets
    490  f1b9
    491  f1b9				   CallProcessOpponentLine
    492  f1b9		       20 32 f8 	      JSR	ProcessOpponentLine
    493  f1bc
    494  f1bc				   SkipUpdateLogic		; Continue here if not paused
    495  f1bc
    496  f1bc				   CallStatusUpdateSbr
    497  f1bc		       a2 00		      LDX	#0
    498  f1be		       20 60 fa 	      JSR	CalculateGear
    499  f1c1		       20 6d fa 	      JSR	ProcessScoreFontColor
    500  f1c4		       e8		      INX
    501  f1c5		       20 60 fa 	      JSR	CalculateGear
    502  f1c8		       20 6d fa 	      JSR	ProcessScoreFontColor
    503  f1cb
    504  f1cb				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    505  f1cb		       a5 8c		      LDA	FrameCount0
    506  f1cd		       29 01		      AND	#%00000001
    507  f1cf		       d0 0c		      BNE	CallProcessPlayer1Status
    508  f1d1				   CallProcessPlayer0Status
    509  f1d1		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    510  f1d3		       85 b0		      STA	Tmp0
    511  f1d5		       a2 00		      LDX	#0
    512  f1d7		       20 0d fa 	      JSR	ProcessPlayerStatus
    513  f1da		       4c e6 f1 	      JMP	EndCallProcessPlayerStatus
    514  f1dd				   CallProcessPlayer1Status
    515  f1dd		       a5 a2		      LDA	OpTrafficOffset0 + 2
    516  f1df		       85 b0		      STA	Tmp0
    517  f1e1		       a2 01		      LDX	#1
    518  f1e3		       20 0d fa 	      JSR	ProcessPlayerStatus
    519  f1e6				   EndCallProcessPlayerStatus
    520  f1e6
    521  f1e6				   CallProcessPlayerSprites
    522  f1e6		       20 da f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    523  f1e9
    524  f1e9				   CallProcessSound		; We might save cycles by updating one channel per frame.
    525  f1e9		       a2 00		      LDX	#0
    526  f1eb		       a5 92		      LDA	TrafficOffset0 + 2
    527  f1ed		       85 b1		      STA	Tmp1
    528  f1ef		       20 eb f5 	      JSR	ProcessSound
    529  f1f2		       e8		      INX		; Player 1
    530  f1f3		       a5 a2		      LDA	OpTrafficOffset0 + 2
    531  f1f5		       85 b1		      STA	Tmp1
    532  f1f7		       20 eb f5 	      JSR	ProcessSound
    533  f1fa
    534  f1fa							;Could be done during on vblank to save this comparisson time (before draw score), 
    535  f1fa							;but I am saving vblank cycles for now, in case of 2 players.
    536  f1fa				   ChooseTextSide		; 
    537  f1fa		       a5 de		      LDA	TextSide	;3
    538  f1fc		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    539  f1fe		       4c 9f f2 	      JMP	RightScoreWrite
    540  f201
    541  f201				   LeftScoreWrite
    542  f201		       a5 c9		      LDA	ScoreFontColor
    543  f203		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    544  f205		       f0 62		      BEQ	PrintCheckpoint
    545  f207		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    546  f209		       f0 66		      BEQ	PrintStartGame
    547  f20b		       a5 bd		      LDA	GameStatus
    548  f20d		       f0 6a		      BEQ	PrintHellwayLeft
    549  f20f				   WriteDistance		;Not optimized yet, ugly code.
    550  f20f				   Digit0Timer
    551  f20f		       a5 b8		      LDA	CountdownTimer	;3
    552  f211		       85 b0		      STA	Tmp0
    553  f213		       20 0c f8 	      JSR	BINBCD8
    554  f216							; LDA Tmp1 Also returned in A
    555  f216		       29 0f		      AND	#%00001111	;2
    556  f218		       aa		      TAX		; 2
    557  f219		       bd 6c fc 	      LDA	FontLookup,X	;4 
    558  f21c		       85 d1		      STA	ScoreD1	;3
    559  f21e
    560  f21e				   Digit1Timer
    561  f21e		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    562  f220		       4a		      LSR		; 2
    563  f221		       4a		      LSR		; 2
    564  f222		       4a		      LSR		; 2
    565  f223		       4a		      LSR		; 2
    566  f224		       aa		      TAX		; 2
    567  f225		       bd 6c fc 	      LDA	FontLookup,X	;4
    568  f228		       85 d0		      STA	ScoreD0	;3
    569  f22a
    570  f22a				   SpeedBar
    571  f22a		       a5 f0		      LDA	Player0SpeedL
    572  f22c		       29 e0		      AND	#%11100000	;2 Discard the last bits
    573  f22e		       18		      CLC
    574  f22f		       2a		      ROL		;First goes into carry
    575  f230		       2a		      ROL
    576  f231		       2a		      ROL
    577  f232		       2a		      ROL
    578  f233		       85 b0		      STA	Tmp0
    579  f235		       a5 f2		      LDA	Player0SpeedH
    580  f237		       0a		      ASL
    581  f238		       0a		      ASL
    582  f239		       0a		      ASL
    583  f23a		       05 b0		      ORA	Tmp0
    584  f23c		       aa		      TAX		; 2
    585  f23d		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    586  f240		       85 d2		      STA	ScoreD2	;3
    587  f242
    588  f242				   DistanceCheckpointCount		; Will run all letters in the future
    589  f242		       a5 ba		      LDA	Traffic0Msb
    590  f244		       29 01		      AND	#%00000001
    591  f246		       0a		      ASL
    592  f247		       0a		      ASL
    593  f248		       0a		      ASL
    594  f249		       0a		      ASL
    595  f24a		       85 b0		      STA	Tmp0
    596  f24c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    597  f24e		       29 f0		      AND	#%11110000	;2
    598  f250		       4a		      LSR
    599  f251		       4a		      LSR
    600  f252		       4a		      LSR
    601  f253		       4a		      LSR
    602  f254		       05 b0		      ORA	Tmp0
    603  f256		       aa		      TAX		; 2
    604  f257		       bd 6c fc 	      LDA	FontLookup,X	;4 
    605  f25a		       85 d3		      STA	ScoreD3	;3
    606  f25c
    607  f25c				   DistanceBar		; 16 subdivisions per checkpoint
    608  f25c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    609  f25e		       29 0f		      AND	#%00001111	;2
    610  f260		       aa		      TAX		; 2
    611  f261		       bd 8c fc 	      LDA	BarLookup,X	;4 
    612  f264		       85 d4		      STA	ScoreD4	;3
    613  f266
    614  f266				   EndDrawDistance
    615  f266		       4c 22 f3 	      JMP	RightScoreWriteEnd	;3
    616  f269
    617  f269				   PrintCheckpoint
    618  f269		       a2 00		      LDX	#<CheckpointText
    619  f26b		       20 31 f7 	      JSR	PrintStaticText
    620  f26e		       4c 22 f3 	      JMP	RightScoreWriteEnd	;3
    621  f271				   PrintStartGame
    622  f271		       a2 19		      LDX	#<GoText
    623  f273		       20 31 f7 	      JSR	PrintStaticText
    624  f276		       4c 22 f3 	      JMP	RightScoreWriteEnd	;3
    625  f279
    626  f279				   PrintHellwayLeft
    627  f279		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    628  f27b		       30 08		      BMI	ContinueWithDefaultLeftText
    629  f27d				   Player0IsReady
    630  f27d		       a2 1e		      LDX	#<ReadyText
    631  f27f		       20 31 f7 	      JSR	PrintStaticText
    632  f282		       4c 22 f3 	      JMP	RightScoreWriteEnd	;3
    633  f285				   ContinueWithDefaultLeftText
    634  f285		       a5 8d		      LDA	FrameCount1
    635  f287		       29 01		      AND	#1
    636  f289		       d0 05		      BNE	PrintCreditsLeft
    637  f28b		       a2 05		      LDX	#<HellwayLeftText
    638  f28d		       4c 92 f2 	      JMP	PrintGameMode
    639  f290				   PrintCreditsLeft
    640  f290		       a2 0f		      LDX	#<OpbText
    641  f292
    642  f292				   PrintGameMode
    643  f292		       20 31 f7 	      JSR	PrintStaticText
    644  f295		       a6 c6		      LDX	GameMode
    645  f297		       bd 6c fc 	      LDA	FontLookup,X	;4 
    646  f29a		       85 d0		      STA	ScoreD0	;3
    647  f29c		       4c 22 f3 	      JMP	RightScoreWriteEnd	;3
    648  f29f
    649  f29f				   RightScoreWrite
    650  f29f		       a5 bd		      LDA	GameStatus
    651  f2a1		       f0 60		      BEQ	PrintHellwayRight
    652  f2a3		       a5 c9		      LDA	ScoreFontColor
    653  f2a5		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    654  f2a7		       f0 c8		      BEQ	PrintStartGame
    655  f2a9
    656  f2a9				   OpDigit0Timer
    657  f2a9		       a5 b9		      LDA	OpCountdownTimer	;3
    658  f2ab		       85 b0		      STA	Tmp0
    659  f2ad		       20 0c f8 	      JSR	BINBCD8
    660  f2b0							; LDA Tmp1 Also returned in A
    661  f2b0		       29 0f		      AND	#%00001111	;2
    662  f2b2		       aa		      TAX		; 2
    663  f2b3		       bd 6c fc 	      LDA	FontLookup,X	;4 
    664  f2b6		       85 d4		      STA	ScoreD4	;3
    665  f2b8
    666  f2b8				   OpDigit1Timer
    667  f2b8		       a5 b1		      LDA	Tmp1	;3
    668  f2ba		       4a		      LSR		; 2
    669  f2bb		       4a		      LSR		; 2
    670  f2bc		       4a		      LSR		; 2
    671  f2bd		       4a		      LSR		; 2
    672  f2be		       aa		      TAX		; 2
    673  f2bf		       bd 6c fc 	      LDA	FontLookup,X	;4
    674  f2c2		       85 d3		      STA	ScoreD3	;3
    675  f2c4
    676  f2c4				   OpSpeedBar
    677  f2c4		       a5 f1		      LDA	Player1SpeedL
    678  f2c6		       29 e0		      AND	#%11100000	;2 Discard the last bits
    679  f2c8		       18		      CLC
    680  f2c9		       2a		      ROL		;First goes into carry
    681  f2ca		       2a		      ROL
    682  f2cb		       2a		      ROL
    683  f2cc		       2a		      ROL
    684  f2cd		       85 b0		      STA	Tmp0
    685  f2cf		       a5 f3		      LDA	Player1SpeedH
    686  f2d1		       0a		      ASL
    687  f2d2		       0a		      ASL
    688  f2d3		       0a		      ASL
    689  f2d4		       05 b0		      ORA	Tmp0
    690  f2d6		       aa		      TAX		; 2
    691  f2d7		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    692  f2da		       85 d2		      STA	ScoreD2	;3
    693  f2dc
    694  f2dc				   OpDistanceCheckpointCount
    695  f2dc		       a5 bb		      LDA	OpTraffic0Msb
    696  f2de		       29 01		      AND	#%00000001
    697  f2e0		       0a		      ASL
    698  f2e1		       0a		      ASL
    699  f2e2		       0a		      ASL
    700  f2e3		       0a		      ASL
    701  f2e4		       85 b0		      STA	Tmp0
    702  f2e6		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    703  f2e8		       29 f0		      AND	#%11110000	;2
    704  f2ea		       4a		      LSR
    705  f2eb		       4a		      LSR
    706  f2ec		       4a		      LSR
    707  f2ed		       4a		      LSR
    708  f2ee		       05 b0		      ORA	Tmp0
    709  f2f0		       aa		      TAX		; 2
    710  f2f1		       bd 6c fc 	      LDA	FontLookup,X	;4 
    711  f2f4		       85 d1		      STA	ScoreD1	;3
    712  f2f6
    713  f2f6				   OpDistanceBar		; 16 subdivisions per checkpoint
    714  f2f6		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    715  f2f8		       29 0f		      AND	#%00001111	;2
    716  f2fa		       aa		      TAX		; 2
    717  f2fb		       bd 8c fc 	      LDA	BarLookup,X	;4 
    718  f2fe		       85 d0		      STA	ScoreD0	;3
    719  f300		       4c 22 f3 	      JMP	RightScoreWriteEnd
    720  f303
    721  f303				   PrintHellwayRight
    722  f303		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    723  f305		       30 08		      BMI	ContinueWithDefaultRightText
    724  f307				   Player1IsReady
    725  f307		       a2 1e		      LDX	#<ReadyText
    726  f309		       20 31 f7 	      JSR	PrintStaticText
    727  f30c		       4c 22 f3 	      JMP	RightScoreWriteEnd	;3
    728  f30f				   ContinueWithDefaultRightText
    729  f30f		       a5 8d		      LDA	FrameCount1
    730  f311		       29 01		      AND	#1
    731  f313		       d0 05		      BNE	PrintCreditsRight
    732  f315		       a2 0a		      LDX	#<HellwayRightText
    733  f317		       4c 1c f3 	      JMP	PrintRightIntro
    734  f31a				   PrintCreditsRight
    735  f31a		       a2 14		      LDX	#<YearText
    736  f31c				   PrintRightIntro
    737  f31c		       20 31 f7 	      JSR	PrintStaticText
    738  f31f		       4c 22 f3 	      JMP	RightScoreWriteEnd
    739  f322				   RightScoreWriteEnd
    740  f322
    741  f322
    742  f322				   ScoreBackgroundColor
    743  f322		       a2 00		      LDX	#0
    744  f324		       ad 82 02 	      LDA	SWCHB
    745  f327		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    746  f329		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    747  f32b		       f0 04		      BEQ	BlackAndWhiteScoreBg
    748  f32d		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    749  f32f		       a2 03		      LDX	#BACKGROUND_COLOR
    750  f331				   BlackAndWhiteScoreBg
    751  f331		       85 b2		      STA	Tmp2	; Score Background
    752  f333		       86 b3		      STX	Tmp3	; Traffic Background
    753  f335
    754  f335				   ConfigurePFForScore
    755  f335							;LDA #SCORE_BACKGROUND_COLOR; Done above
    756  f335		       85 09		      STA	COLUBK
    757  f337		       20 83 f6 	      JSR	ClearAll
    758  f33a		       a9 02		      LDA	#%00000010	; Score mode
    759  f33c		       85 0a		      STA	CTRLPF
    760  f33e		       a5 de		      LDA	TextSide	;3
    761  f340		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    762  f342				   RightScoreOn
    763  f342		       a5 ca		      LDA	OpScoreFontColor
    764  f344		       85 07		      STA	COLUP1
    765  f346		       a5 b2		      LDA	Tmp2
    766  f348		       85 06		      STA	COLUP0
    767  f34a		       4c 55 f3 	      JMP	CallWaitForVblankEnd
    768  f34d				   LeftScoreOn
    769  f34d		       a5 c9		      LDA	ScoreFontColor
    770  f34f		       85 06		      STA	COLUP0
    771  f351		       a5 b2		      LDA	Tmp2
    772  f353		       85 07		      STA	COLUP1
    773  f355
    774  f355							; After here we are going to update the screen, No more heavy code
    775  f355				   CallWaitForVblankEnd
    776  f355		       20 ab f7 	      JSR	WaitForVblankEnd
    777  f358
    778  f358				   DrawScoreHud
    779  f358		       20 4f f7 	      JSR	PrintScore
    780  f35b
    781  f35b							; 4 lines to go crazy
    782  f35b		       85 02		      STA	WSYNC
    783  f35d							;STA HMOVE
    784  f35d
    785  f35d		       85 02		      STA	WSYNC
    786  f35f		       85 2a		      STA	HMOVE
    787  f361
    788  f361				   PrepareForTraffic
    789  f361		       20 99 f6 	      JSR	ClearPF	; 32
    790  f364
    791  f364		       85 02		      STA	WSYNC
    792  f366		       85 2a		      STA	HMOVE
    793  f368		       85 02		      STA	WSYNC
    794  f36a		       85 2a		      STA	HMOVE
    795  f36c
    796  f36c		       a9 30		      LDA	#%00110000	; 2 Score mode
    797  f36e		       85 0a		      STA	CTRLPF	;3
    798  f370
    799  f370		       a5 8c		      LDA	FrameCount0	;3
    800  f372		       29 01		      AND	#%00000001	;2
    801  f374		       aa		      TAX		;2
    802  f375		       b5 c2		      LDA	TrafficColor,X	;4
    803  f377		       85 08		      STA	COLUPF	;3
    804  f379
    805  f379		       a9 96		      LDA	#PLAYER1_COLOR	;2
    806  f37b		       85 07		      STA	COLUP1	;3
    807  f37d
    808  f37d		       a5 c9		      LDA	ScoreFontColor	;3
    809  f37f		       85 06		      STA	COLUP0	;3
    810  f381
    811  f381		       a5 ca		      LDA	OpScoreFontColor	;3
    812  f383		       85 07		      STA	COLUP1	;3
    813  f385
    814  f385		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    815  f387
      0  f387					      SLEEP	24	; Keep the backround color more time, only needed if still support non dark mode
      1  f387				   .CYCLES    SET	24
      2  f387
      3  f387				  -	      IF	.CYCLES < 2
      4  f387				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f387				  -	      ERR
      6  f387					      ENDIF
      7  f387
      8  f387				  -	      IF	.CYCLES & 1
      9  f387				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f387				  -	      nop	0
     11  f387				  -	      ELSE
     12  f387				  -	      bit	VSYNC
     13  f387				  -	      ENDIF
     14  f387				  -.CYCLES    SET	.CYCLES - 3
     15  f387					      ENDIF
     16  f387
     17  f387					      REPEAT	.CYCLES / 2
     18  f387		       ea		      nop
     17  f387					      REPEND
     18  f388		       ea		      nop
     17  f388					      REPEND
     18  f389		       ea		      nop
     17  f389					      REPEND
     18  f38a		       ea		      nop
     17  f38a					      REPEND
     18  f38b		       ea		      nop
     17  f38b					      REPEND
     18  f38c		       ea		      nop
     17  f38c					      REPEND
     18  f38d		       ea		      nop
     17  f38d					      REPEND
     18  f38e		       ea		      nop
     17  f38e					      REPEND
     18  f38f		       ea		      nop
     17  f38f					      REPEND
     18  f390		       ea		      nop
     17  f390					      REPEND
     18  f391		       ea		      nop
     17  f391					      REPEND
     18  f392		       ea		      nop
     19  f393					      REPEND
    817  f393
    818  f393		       a6 b3		      LDX	Tmp3	; Background color.
    819  f395
    820  f395		       a5 8c		      LDA	FrameCount0	;Brach flag
    821  f397		       29 01		      AND	#%00000001
    822  f399
    823  f399		       86 09		      STX	COLUBK	;3
    824  f39b		       d0 05		      BNE	OpDrawCache	;2
    825  f39d		       4c 5c f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    826  f3a0							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    827  f3a0
    828  f3a0							;main scanline loop...
    829  f3a0				   OpScanLoop
    830  f3a0		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    831  f3a2
    832  f3a2							;Start of next line!			
    833  f3a2				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    834  f3a2
    835  f3a2		       a5 80		      LDA	GRP0Cache	;3
    836  f3a4		       85 1b		      STA	GRP0	;3
    837  f3a6
    838  f3a6		       a5 84		      LDA	GRP1Cache	;3
    839  f3a8		       85 1c		      STA	GRP1	;3
    840  f3aa
    841  f3aa		       a5 85		      LDA	ENABLCache	;3
    842  f3ac		       85 1f		      STA	ENABL	;3
    843  f3ae
    844  f3ae		       a5 86		      LDA	ENAM0Cache	;3
    845  f3b0		       85 1d		      STA	ENAM0	;3
    846  f3b2
    847  f3b2		       a5 87		      LDA	ENAM1Cache	;3
    848  f3b4		       85 1e		      STA	ENAM1	;3
    849  f3b6
    850  f3b6		       a5 81		      LDA	PF0Cache	;3
    851  f3b8		       85 0d		      STA	PF0	;3
    852  f3ba
    853  f3ba		       a9 00		      LDA	#0	;2
    854  f3bc							;STA PF0	     ;3
    855  f3bc		       85 80		      STA	GRP0Cache	;3
    856  f3be		       85 86		      STA	ENAM0Cache	;3
    857  f3c0		       85 85		      STA	ENABLCache	;3
    858  f3c2		       85 87		      STA	ENAM1Cache	; 3
    859  f3c4							;STA GRP1Cache ;3
    860  f3c4		       85 0d		      STA	PF0	;3
    861  f3c6							;STA PF2	     ;3
    862  f3c6
    863  f3c6		       a5 83		      LDA	PF2Cache	;3
    864  f3c8		       85 0f		      STA	PF2	;3
    865  f3ca
    866  f3ca				   OpDrawCar0
    867  f3ca		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    868  f3cc		       b0 04		      BCS	OpSkipDrawCar	;2
    869  f3ce		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    870  f3d0		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    871  f3d2				   OpSkipDrawCar
    872  f3d2
    873  f3d2							;BEQ DrawTraffic3
    874  f3d2				   OpDrawTraffic1		; 33
    875  f3d2		       98		      TYA		; 2
    876  f3d3		       18		      CLC		; 2 
    877  f3d4		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    878  f3d6		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    879  f3d8		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    880  f3da		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    881  f3dc		       4c e1 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    882  f3df				   OpEorOffsetWithCarry
    883  f3df		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    884  f3e1				   OpAfterEorOffsetWithCarry		;17
    885  f3e1		       aa		      TAX		;2
    886  f3e2		       bd 00 fe 	      LDA	AesTable,X	; 4
    887  f3e5		       c5 bf		      CMP	OpTrafficChance	;3
    888  f3e7		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    889  f3e9		       a9 ff		      LDA	#$FF	;2
    890  f3eb		       85 86		      STA	ENAM0Cache	;3
    891  f3ed				   OpFinishDrawTraffic1
    892  f3ed
    893  f3ed				   OpErasePF2
    894  f3ed		       a9 00		      LDA	#0
    895  f3ef		       85 0f		      STA	PF2
    896  f3f1
    897  f3f1				   OpDrawTraffic2		; 33
    898  f3f1		       98		      TYA		; 2
    899  f3f2		       18		      CLC		; 2 
    900  f3f3		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    901  f3f5		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    902  f3f7		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    903  f3f9		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    904  f3fb		       4c 00 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    905  f3fe				   OpEorOffsetWithCarry2
    906  f3fe		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    907  f400				   OpAfterEorOffsetWithCarry2		;17
    908  f400		       aa		      TAX		;2
    909  f401		       bd 00 fe 	      LDA	AesTable,X	; 4
    910  f404		       c5 bf		      CMP	OpTrafficChance	;3
    911  f406		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    912  f408		       a9 02		      LDA	#%00000010	;2
    913  f40a		       85 85		      STA	ENABLCache	;3
    914  f40c				   OpFinishDrawTraffic2
    915  f40c
    916  f40c							;STA WSYNC ;65 / 137
    917  f40c
    918  f40c							; LDA Tmp0 ; Flicker this line if drawing car
    919  f40c							; BEQ FinishDrawTraffic4
    920  f40c				   OpDrawTraffic3		; 33
    921  f40c		       98		      TYA		; 2
    922  f40d		       18		      CLC		; 2 
    923  f40e		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    924  f410		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    925  f412		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    926  f414		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    927  f416		       4c 1b f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    928  f419				   OpEorOffsetWithCarry3
    929  f419		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    930  f41b				   OpAfterEorOffsetWithCarry3		;17
    931  f41b		       aa		      TAX		;2
    932  f41c		       bd 00 fe 	      LDA	AesTable,X	; 4
    933  f41f		       c5 bf		      CMP	OpTrafficChance	;3
    934  f421		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    935  f423		       a9 02		      LDA	#%00000010	;2
    936  f425		       85 87		      STA	ENAM1Cache
    937  f427				   OpFinishDrawTraffic3
    938  f427
    939  f427				   OpDrawOponent		;26
    940  f427		       84 b0		      STY	Tmp0	;3
    941  f429		       a4 cf		      LDY	OpponentLine	;3
    942  f42b		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    943  f42d		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    944  f42f				   OpDrawOpponent
    945  f42f		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    946  f431		       85 80		      STA	GRP0Cache	;3
    947  f433		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    948  f435		       a4 b0		      LDY	Tmp0	;3
    949  f437		       4c 4b f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    950  f43a				   OpSkipDrawOpponent
    951  f43a		       c6 cf		      DEC	OpponentLine	;5
    952  f43c		       a4 b0		      LDY	Tmp0	;3
    953  f43e
    954  f43e
    955  f43e				   OpDrawTraffic0		; 21 2pe
    956  f43e		       98		      TYA		; 2
    957  f43f		       18		      CLC		; 2 
    958  f440		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    959  f442		       29 08		      AND	#%00001000	;2
    960  f444		       f0 05		      BEQ	OpHasNoBorderP0	;3
    961  f446				   OpHasBorderP0
    962  f446		       a9 70		      LDA	#%01110000	; 2
    963  f448		       4c 4d f4 	      JMP	OpStoreBorderP0	; 3
    964  f44b				   OpHasNoBorderP0
    965  f44b		       a9 00		      LDA	#0	; 2
    966  f44d				   OpStoreBorderP0
    967  f44d		       85 81		      STA	PF0Cache	; 3
    968  f44f		       85 83		      STA	PF2Cache	; 3
    969  f451
    970  f451				   OpSkipDrawTraffic0
    971  f451
    972  f451				   OpWhileScanLoop
    973  f451		       88		      DEY		;2
    974  f452		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    975  f454		       4c a0 f3 	      JMP	OpScanLoop	;3
    976  f457				   OpFinishScanLoop		; 7 209 of 222
    977  f457		       4c 0f f5 	      JMP	FinishScanLoop
    978  f45a
    979  f45a							;main scanline loop...
    980  f45a				   ScanLoop
    981  f45a		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    982  f45c
    983  f45c							;Start of next line!			
    984  f45c				   DrawCache		;63 Is the last line going to the top of the next frame?
    985  f45c		       a5 81		      LDA	PF0Cache	;3
    986  f45e		       85 0d		      STA	PF0	;3
    987  f460
    988  f460		       a5 80		      LDA	GRP0Cache	;3
    989  f462		       85 1b		      STA	GRP0	;3
    990  f464
    991  f464		       a5 84		      LDA	GRP1Cache	;3
    992  f466		       85 1c		      STA	GRP1	;3
    993  f468
    994  f468		       a5 86		      LDA	ENAM0Cache	;3
    995  f46a		       85 1d		      STA	ENAM0	;3
    996  f46c
    997  f46c		       a5 85		      LDA	ENABLCache	;3
    998  f46e		       85 1f		      STA	ENABL	;3
    999  f470
   1000  f470		       a5 87		      LDA	ENAM1Cache	;3
   1001  f472		       85 1e		      STA	ENAM1	;3
   1002  f474
   1003  f474		       a5 83		      LDA	PF2Cache	;3
   1004  f476		       85 0f		      STA	PF2	;3
   1005  f478
   1006  f478		       a9 00		      LDA	#0	;2
   1007  f47a		       85 0d		      STA	PF0	;3
   1008  f47c		       85 84		      STA	GRP1Cache	;3
   1009  f47e		       85 85		      STA	ENABLCache	;3
   1010  f480		       85 86		      STA	ENAM0Cache	;3
   1011  f482		       85 87		      STA	ENAM1Cache	; 3
   1012  f484							;STA GRP0Cache
   1013  f484		       85 0f		      STA	PF2	;3
   1014  f486
   1015  f486				   DrawCar0
   1016  f486		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1017  f488		       b0 04		      BCS	SkipDrawCar	;2
   1018  f48a		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1019  f48c		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1020  f48e				   SkipDrawCar
   1021  f48e
   1022  f48e							;BEQ DrawTraffic3
   1023  f48e				   DrawTraffic1 		; 33
   1024  f48e		       98		      TYA		; 2
   1025  f48f		       18		      CLC		; 2 
   1026  f490		       65 95		      ADC	TrafficOffset1 + 1	;3
   1027  f492		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1028  f494		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1029  f496		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1030  f498		       4c 9d f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1031  f49b				   EorOffsetWithCarry
   1032  f49b		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1033  f49d				   AfterEorOffsetWithCarry		;17
   1034  f49d		       aa		      TAX		;2
   1035  f49e		       bd 00 fe 	      LDA	AesTable,X	; 4
   1036  f4a1		       c5 be		      CMP	TrafficChance	;3
   1037  f4a3		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1038  f4a5		       a9 ff		      LDA	#$FF	;2
   1039  f4a7		       85 86		      STA	ENAM0Cache	;3
   1040  f4a9				   FinishDrawTraffic1
   1041  f4a9
   1042  f4a9				   DrawTraffic2 		; 33
   1043  f4a9		       98		      TYA		; 2
   1044  f4aa		       18		      CLC		; 2 
   1045  f4ab		       65 99		      ADC	TrafficOffset2 + 1	;3
   1046  f4ad		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1047  f4af		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1048  f4b1		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1049  f4b3		       4c b8 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1050  f4b6				   EorOffsetWithCarry2
   1051  f4b6		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1052  f4b8				   AfterEorOffsetWithCarry2		;17
   1053  f4b8		       aa		      TAX		;2
   1054  f4b9		       bd 00 fe 	      LDA	AesTable,X	; 4
   1055  f4bc		       c5 be		      CMP	TrafficChance	;3
   1056  f4be		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1057  f4c0		       a9 02		      LDA	#%00000010	;2
   1058  f4c2		       85 85		      STA	ENABLCache	;3
   1059  f4c4				   FinishDrawTraffic2
   1060  f4c4
   1061  f4c4							;STA WSYNC ;65 / 137
   1062  f4c4
   1063  f4c4							; LDA Tmp0 ; Flicker this line if drawing car
   1064  f4c4							; BEQ FinishDrawTraffic4
   1065  f4c4				   DrawTraffic3 		; 33
   1066  f4c4		       98		      TYA		; 2
   1067  f4c5		       18		      CLC		; 2 
   1068  f4c6		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1069  f4c8		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1070  f4ca		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1071  f4cc		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1072  f4ce		       4c d3 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1073  f4d1				   EorOffsetWithCarry3
   1074  f4d1		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1075  f4d3				   AfterEorOffsetWithCarry3		;17
   1076  f4d3		       aa		      TAX		;2
   1077  f4d4		       bd 00 fe 	      LDA	AesTable,X	; 4
   1078  f4d7		       c5 be		      CMP	TrafficChance	;3
   1079  f4d9		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1080  f4db		       a9 02		      LDA	#%00000010	;2
   1081  f4dd		       85 87		      STA	ENAM1Cache
   1082  f4df				   FinishDrawTraffic3
   1083  f4df
   1084  f4df
   1085  f4df				   DrawOponent		;26
   1086  f4df		       84 b0		      STY	Tmp0	;3
   1087  f4e1		       a4 cf		      LDY	OpponentLine	;3
   1088  f4e3		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1089  f4e5		       b0 0b		      BCS	SkipDrawOpponent	;2
   1090  f4e7				   DrawOpponent
   1091  f4e7		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1092  f4e9		       85 84		      STA	GRP1Cache	;3
   1093  f4eb		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1094  f4ed		       a4 b0		      LDY	Tmp0	;3
   1095  f4ef		       4c 03 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1096  f4f2				   SkipDrawOpponent
   1097  f4f2		       c6 cf		      DEC	OpponentLine	;5
   1098  f4f4		       a4 b0		      LDY	Tmp0	;3
   1099  f4f6
   1100  f4f6				   DrawTraffic0 		; 21 2pe
   1101  f4f6		       98		      TYA		; 2
   1102  f4f7		       18		      CLC		; 2 
   1103  f4f8		       65 91		      ADC	TrafficOffset0 + 1	;3
   1104  f4fa		       29 08		      AND	#%00001000	;2
   1105  f4fc		       f0 05		      BEQ	HasNoBorderP0	;3
   1106  f4fe				   HasBorderP0
   1107  f4fe		       a9 70		      LDA	#%01110000	; 2
   1108  f500		       4c 05 f5 	      JMP	StoreBorderP0	; 3
   1109  f503				   HasNoBorderP0
   1110  f503		       a9 00		      LDA	#0	; 2
   1111  f505				   StoreBorderP0
   1112  f505		       85 81		      STA	PF0Cache	; 3
   1113  f507		       85 83		      STA	PF2Cache	; 3
   1114  f509
   1115  f509				   SkipDrawTraffic0
   1116  f509
   1117  f509				   WhileScanLoop
   1118  f509		       88		      DEY		;2
   1119  f50a		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1120  f50c		       4c 5a f4 	      JMP	ScanLoop	;3
   1121  f50f				   FinishScanLoop		; 7 209 of 222
   1122  f50f
   1123  f50f		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1124  f511		       20 a8 f6 	      JSR	LoadAll
   1125  f514		       85 02		      STA	WSYNC	; do stuff!
   1126  f516		       85 02		      STA	WSYNC
   1127  f518		       85 02		      STA	WSYNC
   1128  f51a
   1129  f51a				   PrepareOverscan
   1130  f51a		       a9 02		      LDA	#2
   1131  f51c		       85 02		      STA	WSYNC
   1132  f51e							;STA HMOVE	; HMOVE 10
   1133  f51e		       85 01		      STA	VBLANK
   1134  f520
   1135  f520		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1136  f522		       8d 96 02 	      STA	TIM64T
   1137  f525
   1138  f525		       85 2b		      STA	HMCLR	; Before we process car movement
   1139  f527							;Read Fire Button before, will make it start the game for now.
   1140  f527				   StartGame
   1141  f527		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1142  f529		       25 0d		      AND	INPT5	;3 player 1
   1143  f52b		       30 3a		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1144  f52d		       a5 8c		      LDA	FrameCount0
   1145  f52f		       29 01		      AND	#%00000001
   1146  f531		       d0 34		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1147  f533		       a5 bd		      LDA	GameStatus	;3
   1148  f535		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1149  f537		       d0 2e		      BNE	SkipGameStart
   1150  f539		       a5 c6		      LDA	GameMode
   1151  f53b		       c9 10		      CMP	#MAX_GAME_MODE
   1152  f53d		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1153  f53f		       a9 00		      LDA	#0
   1154  f541		       85 c6		      STA	GameMode
   1155  f543		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1156  f545		       85 bc		      STA	SwitchDebounceCounter
   1157  f547		       4c 67 f5 	      JMP	SkipGameStart
   1158  f54a				   SetGameRunningIfBothPressing
   1159  f54a		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1160  f54c		       05 0d		      ORA	INPT5	;3 player 1
   1161  f54e		       30 17		      BMI	SkipGameStart
   1162  f550				   SetGameRunning
   1163  f550		       e6 bd		      INC	GameStatus
   1164  f552		       a9 00		      LDA	#0	;
   1165  f554		       85 8c		      STA	FrameCount0
   1166  f556		       85 8d		      STA	FrameCount1
   1167  f558		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1168  f55a		       85 c9		      STA	ScoreFontColor
   1169  f55c		       85 ca		      STA	OpScoreFontColor
   1170  f55e		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1171  f560		       85 cb		      STA	ScoreFontColorHoldChange
   1172  f562		       85 cc		      STA	OpScoreFontColorHoldChange
   1173  f564		       4c db f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1174  f567				   SkipGameStart
   1175  f567
   1176  f567				   ReadSwitches
   1177  f567		       a6 bc		      LDX	SwitchDebounceCounter
   1178  f569		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1179  f56b		       a9 01		      LDA	#%00000001
   1180  f56d		       2c 82 02 	      BIT	SWCHB
   1181  f570		       d0 07		      BNE	SkipReset
   1182  f572		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1183  f574		       85 bc		      STA	SwitchDebounceCounter
   1184  f576		       4c e3 f5 	      JMP	OverScanWaitBeforeReset
   1185  f579				   SkipReset
   1186  f579
   1187  f579				   GameModeSelect
   1188  f579		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1189  f57b		       d0 22		      BNE	SkipGameSelect
   1190  f57d		       a2 00		      LDX	#0
   1191  f57f		       20 d4 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1192  f582		       e8		      INX
   1193  f583		       20 d4 f6 	      JSR	ConfigureDifficulty
   1194  f586				   ContinueGameSelect
   1195  f586		       a9 02		      LDA	#%00000010
   1196  f588		       2c 82 02 	      BIT	SWCHB
   1197  f58b		       d0 12		      BNE	SkipGameSelect
   1198  f58d		       a6 c6		      LDX	GameMode
   1199  f58f		       e0 10		      CPX	#MAX_GAME_MODE
   1200  f591		       f0 04		      BEQ	ResetGameMode
   1201  f593		       e8		      INX
   1202  f594		       4c 99 f5 	      JMP	StoreGameMode
   1203  f597				   ResetGameMode
   1204  f597		       a2 00		      LDX	#0
   1205  f599				   StoreGameMode
   1206  f599		       86 c6		      STX	GameMode
   1207  f59b		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1208  f59d		       85 bc		      STA	SwitchDebounceCounter
   1209  f59f				   SkipGameSelect
   1210  f59f		       4c a4 f5 	      JMP	EndReadSwitches
   1211  f5a2				   DecrementSwitchDebounceCounter
   1212  f5a2		       c6 bc		      DEC	SwitchDebounceCounter
   1213  f5a4				   EndReadSwitches
   1214  f5a4
   1215  f5a4				   DoNotTurnBeforeStart
   1216  f5a4							;STA HMCLR
   1217  f5a4		       a5 bd		      LDA	GameStatus
   1218  f5a6		       f0 33		      BEQ	OverScanWait
   1219  f5a8
   1220  f5a8							; Last thing, will overrride hmove
   1221  f5a8				   CallTestColisionAndMove
   1222  f5a8		       a2 00		      LDX	#0	; Player 0
   1223  f5aa							; Colision with traffic, each player check different flags,
   1224  f5aa		       a5 8c		      LDA	FrameCount0
   1225  f5ac		       29 01		      AND	#%00000001
   1226  f5ae		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1227  f5b0		       20 83 f8 	      JSR	IsOpponentColliding
   1228  f5b3		       05 01		      ORA	CXM1P
   1229  f5b5		       4a		      LSR
   1230  f5b6		       05 00		      ORA	CXM0P
   1231  f5b8		       05 02		      ORA	CXP0FB
   1232  f5ba							; ORA CXPPMM ; Collision between players will have its own rules
   1233  f5ba				   SkipColisionPlayer0		; Should not colide on opponent side.
   1234  f5ba		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1235  f5bc		       85 b2		      STA	Tmp2
   1236  f5be		       20 97 f8 	      JSR	TestCollisionAndMove
   1237  f5c1
   1238  f5c1		       e8		      INX		; player 1
   1239  f5c2		       a5 8c		      LDA	FrameCount0
   1240  f5c4		       29 01		      AND	#%00000001
   1241  f5c6		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1242  f5c8		       20 83 f8 	      JSR	IsOpponentColliding
   1243  f5cb		       05 00		      ORA	CXM0P
   1244  f5cd		       4a		      LSR
   1245  f5ce		       05 01		      ORA	CXM1P
   1246  f5d0		       05 03		      ORA	CXP1FB
   1247  f5d2				   SkipColisionPlayer1
   1248  f5d2		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1249  f5d4		       85 b2		      STA	Tmp2
   1250  f5d6		       20 97 f8 	      JSR	TestCollisionAndMove
   1251  f5d9
   1252  f5d9				   ClearCollision
   1253  f5d9		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1254  f5db
   1255  f5db				   OverScanWait
   1256  f5db		       ad 84 02 	      LDA	INTIM
   1257  f5de		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1258  f5e0		       4c d6 f0 	      JMP	MainLoop
   1259  f5e3
   1260  f5e3				   OverScanWaitBeforeReset
   1261  f5e3		       ad 84 02 	      LDA	INTIM
   1262  f5e6		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1263  f5e8		       4c 14 f0 	      JMP	Start
   1264  f5eb
   1265  f5eb				   Subroutines
   1266  f5eb
   1267  f5eb							;X Player
   1268  f5eb							;Tmp1 TrafficOffset 2
   1269  f5eb				   ProcessSound
   1270  f5eb				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1271  f5eb		       b5 c9		      LDA	ScoreFontColor,X	;3
   1272  f5ed		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1273  f5ef		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1274  f5f1		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1275  f5f3		       f0 29		      BEQ	PlayCheckpoint	;2
   1276  f5f5		       b5 8e		      LDA	CollisionCounter,X	;3
   1277  f5f7		       c9 e0		      CMP	#$E0	;2
   1278  f5f9		       b0 14		      BCS	PlayColision	;2
   1279  f5fb		       b5 cd		      LDA	NextCheckpoint,X	;3
   1280  f5fd		       38		      SEC		;2
   1281  f5fe		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1282  f600		       c9 02		      CMP	#$02	;2
   1283  f602		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1284  f604		       b5 b8		      LDA	CountdownTimer,X	; 3
   1285  f606		       f0 53		      BEQ	EngineSound	;2
   1286  f608		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1287  f60a		       90 37		      BCC	PlayWarnTimeEnding	;4
   1288  f60c		       4c 5b f6 	      JMP	EngineSound	;3
   1289  f60f				   PlayColision
   1290  f60f		       a9 1f		      LDA	#31
   1291  f611		       95 17		      STA	AUDF0,X
   1292  f613		       a9 08		      LDA	#8
   1293  f615		       95 15		      STA	AUDC0,X
   1294  f617		       a9 08		      LDA	#8
   1295  f619		       95 19		      STA	AUDV0,X
   1296  f61b		       4c 82 f6 	      JMP	EndSound
   1297  f61e
   1298  f61e				   PlayCheckpoint
   1299  f61e		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1300  f620		       4a		      LSR		;2
   1301  f621		       4a		      LSR		;2
   1302  f622		       4a		      LSR		;2
   1303  f623		       95 17		      STA	AUDF0,X	;3
   1304  f625		       a9 0c		      LDA	#12	;2
   1305  f627		       95 15		      STA	AUDC0,X	;3
   1306  f629		       a9 06		      LDA	#6	;2
   1307  f62b		       95 19		      STA	AUDV0,X	;3
   1308  f62d		       4c 82 f6 	      JMP	EndSound	;3
   1309  f630
   1310  f630				   PlayBeforeCheckpoint
   1311  f630		       a5 8c		      LDA	FrameCount0	;3
   1312  f632		       29 1c		      AND	#%00011100	;2
   1313  f634		       09 03		      ORA	#%00000011	;2
   1314  f636		       95 17		      STA	AUDF0,X	;3
   1315  f638		       a9 0c		      LDA	#12	;2
   1316  f63a		       95 15		      STA	AUDC0,X	;3
   1317  f63c		       a9 03		      LDA	#3	;2
   1318  f63e		       95 19		      STA	AUDV0,X	;3
   1319  f640		       4c 82 f6 	      JMP	EndSound	;3
   1320  f643
   1321  f643				   PlayWarnTimeEnding
   1322  f643		       a5 8c		      LDA	FrameCount0	;3
   1323  f645		       29 04		      AND	#%00000100	;2
   1324  f647		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1325  f649		       18		      CLC		;2
   1326  f64a		       a9 0a		      LDA	#10	;2
   1327  f64c		       75 b8		      ADC	CountdownTimer,X	;2
   1328  f64e		       95 17		      STA	AUDF0,X	;3
   1329  f650		       a9 0c		      LDA	#12	;2
   1330  f652		       95 15		      STA	AUDC0,X	;3
   1331  f654		       a9 03		      LDA	#3	;2
   1332  f656		       95 19		      STA	AUDV0,X	;3
   1333  f658		       4c 82 f6 	      JMP	EndSound	;3
   1334  f65b
   1335  f65b				   EngineSound		;41
   1336  f65b		       a9 09		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1337  f65d		       95 19		      STA	AUDV0,X
   1338  f65f		       b5 b8		      LDA	CountdownTimer,X	;3
   1339  f661		       f0 1b		      BEQ	EngineOff	;2
   1340  f663		       b4 d5		      LDY	Gear,X
   1341  f665		       b5 f0		      LDA	Player0SpeedL,X	;3
   1342  f667		       4a		      LSR		;2
   1343  f668		       4a		      LSR		;2
   1344  f669		       4a		      LSR		;2
   1345  f66a		       29 0f		      AND	#%00001111	;2
   1346  f66c		       85 b0		      STA	Tmp0	;3
   1347  f66e		       b9 3f ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1348  f671		       38		      SEC		;2
   1349  f672		       e5 b0		      SBC	Tmp0	;3
   1350  f674		       95 17		      STA	AUDF0,X	;3
   1351  f676		       b9 39 ff 	      LDA	EngineSoundType,Y	;4
   1352  f679		       95 15		      STA	AUDC0,X	;3
   1353  f67b		       4c 82 f6 	      JMP	EndEngineSound	;3
   1354  f67e				   EngineOff
   1355  f67e				   MuteSound
   1356  f67e		       a9 00		      LDA	#0
   1357  f680		       95 15		      STA	AUDC0,X
   1358  f682				   EndEngineSound
   1359  f682				   EndSound
   1360  f682		       60		      RTS
   1361  f683
   1362  f683				   ClearAll		; 58
   1363  f683		       a9 00		      LDA	#0	;2
   1364  f685		       85 1b		      STA	GRP0	;3
   1365  f687		       85 1c		      STA	GRP1	;3
   1366  f689		       85 1f		      STA	ENABL	;3
   1367  f68b		       85 1d		      STA	ENAM0	;3
   1368  f68d		       85 1e		      STA	ENAM1	;3
   1369  f68f		       85 80		      STA	GRP0Cache	;3
   1370  f691		       85 84		      STA	GRP1Cache	;3
   1371  f693		       85 85		      STA	ENABLCache	;3
   1372  f695		       85 86		      STA	ENAM0Cache	;3
   1373  f697		       85 87		      STA	ENAM1Cache	;3
   1374  f699
   1375  f699				   ClearPF		; 26
   1376  f699		       a9 00		      LDA	#0	;2
   1377  f69b				   ClearPFSkipLDA0
   1378  f69b		       85 0d		      STA	PF0	;3
   1379  f69d		       85 0e		      STA	PF1	;3
   1380  f69f		       85 0f		      STA	PF2	;3	
   1381  f6a1		       85 81		      STA	PF0Cache	;3
   1382  f6a3		       85 82		      STA	PF1Cache	;3
   1383  f6a5		       85 83		      STA	PF2Cache	;3 
   1384  f6a7		       60		      RTS		;6
   1385  f6a8				   EndClearAll
   1386  f6a8
   1387  f6a8				   LoadAll		; 48
   1388  f6a8		       a5 81		      LDA	PF0Cache	;3
   1389  f6aa		       85 0d		      STA	PF0	;3
   1390  f6ac
   1391  f6ac		       a5 82		      LDA	PF1Cache	;3
   1392  f6ae		       85 0e		      STA	PF1	;3
   1393  f6b0
   1394  f6b0		       a5 83		      LDA	PF2Cache	;3
   1395  f6b2		       85 0f		      STA	PF2	;3
   1396  f6b4
   1397  f6b4		       a5 84		      LDA	GRP1Cache	;3
   1398  f6b6		       85 1c		      STA	GRP1	;3
   1399  f6b8
   1400  f6b8		       a5 85		      LDA	ENABLCache	;3
   1401  f6ba		       85 1f		      STA	ENABL	;3
   1402  f6bc
   1403  f6bc		       a5 86		      LDA	ENAM0Cache	;3
   1404  f6be		       85 1d		      STA	ENAM0	;3
   1405  f6c0
   1406  f6c0		       a5 87		      LDA	ENAM1Cache	;3
   1407  f6c2		       85 1e		      STA	ENAM1	;3
   1408  f6c4
   1409  f6c4		       60		      RTS		;6
   1410  f6c5				   EndLoadAll
   1411  f6c5
   1412  f6c5				   NextDifficulty		;Is a SBR
   1413  f6c5		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1414  f6c7		       29 01		      AND	#%00000001
   1415  f6c9		       d0 24		      BNE	CheckRandomDifficulty
   1416  f6cb
   1417  f6cb		       b5 c4		      LDA	CurrentDifficulty,X
   1418  f6cd		       18		      CLC
   1419  f6ce		       69 01		      ADC	#1
   1420  f6d0		       29 03		      AND	#%00000011	; 0 to 3
   1421  f6d2		       95 c4		      STA	CurrentDifficulty,X
   1422  f6d4
   1423  f6d4				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1424  f6d4		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1425  f6d6		       b9 bb ff 	      LDA	TrafficChanceTable,Y
   1426  f6d9		       95 be		      STA	TrafficChance,X
   1427  f6db		       b9 b7 ff 	      LDA	TrafficColorTable,Y
   1428  f6de		       95 c2		      STA	TrafficColor,X
   1429  f6e0
   1430  f6e0		       a5 c6		      LDA	GameMode	;
   1431  f6e2		       29 01		      AND	#%00000001
   1432  f6e4		       f0 03		      BEQ	UseNextDifficultyTime
   1433  f6e6		       4c ea f6 	      JMP	StoreDifficultyTime
   1434  f6e9				   UseNextDifficultyTime
   1435  f6e9		       c8		      INY
   1436  f6ea				   StoreDifficultyTime
   1437  f6ea		       b9 bf ff 	      LDA	TrafficTimeTable,Y
   1438  f6ed		       95 c0		      STA	CheckpointTime,X
   1439  f6ef
   1440  f6ef				   CheckRandomDifficulty
   1441  f6ef		       a5 c6		      LDA	GameMode
   1442  f6f1		       29 08		      AND	#%00001000	; Random difficulties
   1443  f6f3		       f0 26		      BEQ	ReturnFromNextDifficulty
   1444  f6f5				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1445  f6f5		       a5 f4		      LDA	IsOpponentInFront
   1446  f6f7		       30 12		      BMI	UseOpponentChance
   1447  f6f9		       a5 cf		      LDA	OpponentLine	; Same line
   1448  f6fb		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1449  f6fd		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1450  f6ff		       a4 8c		      LDY	FrameCount0
   1451  f701		       b9 00 fe 	      LDA	AesTable,Y
   1452  f704							;EOR TrafficChance, no need, lets make life simple
   1453  f704		       29 3f		      AND	#%00111111
   1454  f706		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1455  f708		       4c 1b f7 	      JMP	ReturnFromNextDifficulty
   1456  f70b				   UseOpponentChance
   1457  f70b		       8a		      TXA
   1458  f70c		       49 01		      EOR	#%00000001	; Reverts the player
   1459  f70e		       aa		      TAX
   1460  f70f		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1461  f711		       85 b3		      STA	Tmp3
   1462  f713		       8a		      TXA
   1463  f714		       49 01		      EOR	#%00000001	; Restors the player
   1464  f716		       aa		      TAX
   1465  f717		       a5 b3		      LDA	Tmp3
   1466  f719		       95 be		      STA	TrafficChance,X
   1467  f71b
   1468  f71b				   ReturnFromNextDifficulty
   1469  f71b		       60		      RTS
   1470  f71c
   1471  f71c				   DefaultOffsets
   1472  f71c		       a9 20		      LDA	#$20
   1473  f71e		       85 96		      STA	TrafficOffset1 + 2
   1474  f720		       85 a6		      STA	OpTrafficOffset1 + 2
   1475  f722		       a9 40		      LDA	#$40
   1476  f724		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1477  f726		       85 aa		      STA	OpTrafficOffset2 + 2
   1478  f728		       a9 60		      LDA	#$60
   1479  f72a		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1480  f72c		       85 ae		      STA	OpTrafficOffset3 + 2
   1481  f72e		       a9 80		      LDA	#$80
   1482  f730		       60		      RTS
   1483  f731
   1484  f731				   PrintStaticText		; Preload X with the offset referent to StaticText
   1485  f731		       bd 00 ff 	      LDA	StaticText,X
   1486  f734		       85 d0		      STA	ScoreD0
   1487  f736		       e8		      INX
   1488  f737		       bd 00 ff 	      LDA	StaticText,X
   1489  f73a		       85 d1		      STA	ScoreD1
   1490  f73c		       e8		      INX
   1491  f73d		       bd 00 ff 	      LDA	StaticText,X
   1492  f740		       85 d2		      STA	ScoreD2
   1493  f742		       e8		      INX
   1494  f743		       bd 00 ff 	      LDA	StaticText,X
   1495  f746		       85 d3		      STA	ScoreD3
   1496  f748		       e8		      INX
   1497  f749		       bd 00 ff 	      LDA	StaticText,X
   1498  f74c		       85 d4		      STA	ScoreD4
   1499  f74e		       60		      RTS
   1500  f74f
   1501  f74f				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1502  f74f		       a2 00		      LDX	#0
   1503  f751		       a0 04		      LDY	#FONT_OFFSET
   1504  f753
   1505  f753				   ScoreLoop		; 20 
   1506  f753		       85 02		      STA	WSYNC	;2
   1507  f755		       85 2a		      STA	HMOVE
   1508  f757
   1509  f757		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1510  f759		       85 0d		      STA	PF0	;3
   1511  f75b
   1512  f75b		       a5 82		      LDA	PF1Cache	;3
   1513  f75d		       85 0e		      STA	PF1	;3
   1514  f75f
   1515  f75f		       a5 83		      LDA	PF2Cache	;3
   1516  f761		       85 0f		      STA	PF2	;3
   1517  f763
   1518  f763				   DrawScoreD0		; 15
   1519  f763		       a6 d0		      LDX	ScoreD0	; 3
   1520  f765		       bd 00 fd 	      LDA	Font,X	;4
   1521  f768		       85 81		      STA	PF0Cache	;3
   1522  f76a		       c6 d0		      DEC	ScoreD0	;5
   1523  f76c
   1524  f76c				   DrawScoreD1		; 23	
   1525  f76c		       a6 d1		      LDX	ScoreD1	; 3
   1526  f76e		       bd 00 fd 	      LDA	Font,X	;4
   1527  f771		       0a		      ASL		;2
   1528  f772		       0a		      ASL		;2
   1529  f773		       0a		      ASL		;2
   1530  f774		       0a		      ASL		;2
   1531  f775		       85 82		      STA	PF1Cache	;3
   1532  f777		       c6 d1		      DEC	ScoreD1	;5
   1533  f779
   1534  f779				   DrawScoreD2		; 20
   1535  f779		       a6 d2		      LDX	ScoreD2	; 3
   1536  f77b		       bd 00 fd 	      LDA	Font,X	;4
   1537  f77e		       29 0f		      AND	#%00001111	;2
   1538  f780		       05 82		      ORA	PF1Cache	;3
   1539  f782		       85 82		      STA	PF1Cache	;3
   1540  f784		       c6 d2		      DEC	ScoreD2	;5
   1541  f786
   1542  f786				   DrawScoreD3		; 23
   1543  f786		       a6 d3		      LDX	ScoreD3	; 3
   1544  f788		       bd 00 fd 	      LDA	Font,X	;4
   1545  f78b		       4a		      LSR		;2
   1546  f78c		       4a		      LSR		;2
   1547  f78d		       4a		      LSR		;2
   1548  f78e		       4a		      LSR		;2
   1549  f78f		       85 83		      STA	PF2Cache	;3
   1550  f791		       c6 d3		      DEC	ScoreD3	;5
   1551  f793
   1552  f793				   DrawScoreD4		; 20
   1553  f793		       a6 d4		      LDX	ScoreD4	; 3
   1554  f795		       bd 00 fd 	      LDA	Font,X	;4
   1555  f798		       29 f0		      AND	#%11110000	;2
   1556  f79a		       05 83		      ORA	PF2Cache	;3
   1557  f79c		       85 83		      STA	PF2Cache	;3
   1558  f79e		       c6 d4		      DEC	ScoreD4	;5
   1559  f7a0
   1560  f7a0
   1561  f7a0		       88		      DEY		;2
   1562  f7a1		       10 b0		      BPL	ScoreLoop	;4
   1563  f7a3
   1564  f7a3		       85 02		      STA	WSYNC
   1565  f7a5		       85 2a		      STA	HMOVE
   1566  f7a7		       20 a8 f6 	      JSR	LoadAll
   1567  f7aa		       60		      RTS		; 6
   1568  f7ab
   1569  f7ab				   WaitForVblankEnd
   1570  f7ab		       ad 84 02 	      LDA	INTIM
   1571  f7ae		       d0 fb		      BNE	WaitForVblankEnd
   1572  f7b0		       85 02		      STA	WSYNC
   1573  f7b2		       85 01		      STA	VBLANK
   1574  f7b4		       60		      RTS
   1575  f7b5
   1576  f7b5				   Sleep4Lines
   1577  f7b5		       85 02		      STA	WSYNC
   1578  f7b7		       85 02		      STA	WSYNC
   1579  f7b9		       85 02		      STA	WSYNC
   1580  f7bb		       85 02		      STA	WSYNC
   1581  f7bd		       60		      RTS
   1582  f7be
   1583  f7be				   Sleep8Lines
   1584  f7be		       20 b5 f7 	      JSR	Sleep4Lines
   1585  f7c1		       20 b5 f7 	      JSR	Sleep4Lines
   1586  f7c4		       60		      RTS
   1587  f7c5
   1588  f7c5				   Sleep32Lines
   1589  f7c5		       20 be f7 	      JSR	Sleep8Lines
   1590  f7c8		       20 be f7 	      JSR	Sleep8Lines
   1591  f7cb		       20 be f7 	      JSR	Sleep8Lines
   1592  f7ce		       20 be f7 	      JSR	Sleep8Lines
   1593  f7d1		       60		      RTS
   1594  f7d2
   1595  f7d2							;X = number of WSYNC HMOVE to run
   1596  f7d2				   HMoveXTimes
   1597  f7d2		       85 02		      STA	WSYNC	;3
   1598  f7d4		       85 2a		      STA	HMOVE	; 3/10 
   1599  f7d6		       ca		      DEX
   1600  f7d7		       d0 f9		      BNE	HMoveXTimes
   1601  f7d9		       60		      RTS
   1602  f7da
   1603  f7da				   ConfigureCarSprites
   1604  f7da		       a5 8c		      LDA	FrameCount0
   1605  f7dc		       29 01		      AND	#%00000001
   1606  f7de		       d0 0b		      BNE	LoadForRightScreenSprites
   1607  f7e0				   LoadForLeftScreenSprites
   1608  f7e0		       a5 c7		      LDA	CurrentCarId
   1609  f7e2		       85 b0		      STA	Tmp0
   1610  f7e4		       a5 c8		      LDA	OpCurrentCarId
   1611  f7e6		       85 b1		      STA	Tmp1
   1612  f7e8		       4c f3 f7 	      JMP	LoadCarSpritesFromIds
   1613  f7eb				   LoadForRightScreenSprites
   1614  f7eb		       a5 c7		      LDA	CurrentCarId
   1615  f7ed		       85 b1		      STA	Tmp1
   1616  f7ef		       a5 c8		      LDA	OpCurrentCarId
   1617  f7f1		       85 b0		      STA	Tmp0
   1618  f7f3
   1619  f7f3				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1620  f7f3		       a4 b0		      LDY	Tmp0
   1621  f7f5		       b9 91 ff 	      LDA	CarIdToSpriteAddressL,Y
   1622  f7f8		       85 d7		      STA	CarSpritePointerL
   1623  f7fa		       b9 95 ff 	      LDA	CarIdToSpriteAddressH,Y
   1624  f7fd		       85 d8		      STA	CarSpritePointerH
   1625  f7ff				   ConfigureOpponentCarSprite
   1626  f7ff		       a4 b1		      LDY	Tmp1
   1627  f801		       b9 99 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1628  f804		       85 d9		      STA	EnemyCarSpritePointerL
   1629  f806		       b9 9d ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1630  f809		       85 da		      STA	EnemyCarSpritePointerH
   1631  f80b		       60		      RTS
   1632  f80c
   1633  f80c							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1634  f80c							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1635  f80c							; Tmp0 Binary Number
   1636  f80c							; Result Returned in Tmp 1 and A
   1637  f80c				   BINBCD8
   1638  f80c		       f8		      SED		; Switch to decimal mode
   1639  f80d		       a9 00		      LDA	#0	; Ensure the result is clear
   1640  f80f		       85 b1		      STA	Tmp1+0
   1641  f811							;STA Tmp1+1
   1642  f811		       a2 08		      LDX	#8	; The number of source bits
   1643  f813
   1644  f813				   CNVBIT
   1645  f813		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1646  f815		       a5 b1		      LDA	Tmp1+0	; And add into result
   1647  f817		       65 b1		      ADC	Tmp1+0
   1648  f819		       85 b1		      STA	Tmp1+0
   1649  f81b							;Not needed now, 0 to 99 is enought for timer!
   1650  f81b							; LDA Tmp1+1	; propagating any carry
   1651  f81b							; ADC Tmp1+1
   1652  f81b							; STA Tmp1+1
   1653  f81b		       ca		      DEX		; And repeat for next bit
   1654  f81c		       d0 f5		      BNE	CNVBIT
   1655  f81e		       d8		      CLD		; Back to binary
   1656  f81f
   1657  f81f		       60		      RTS		; All Done.
   1658  f820
   1659  f820							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1660  f820							;X player 0 or 1
   1661  f820				   SelectCarWithDpad
   1662  f820		       a0 03		      LDY	#3
   1663  f822				   SelectCarWithDpadLoop
   1664  f822		       ad 80 02 	      LDA	SWCHA
   1665  f825		       25 b0		      AND	Tmp0
   1666  f827		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1667  f829		       98		      TYA
   1668  f82a		       95 c7		      STA	CurrentCarId,X
   1669  f82c				   ContinueSelectCarWithDpadLoop
   1670  f82c		       46 b0		      LSR	Tmp0
   1671  f82e		       88		      DEY
   1672  f82f		       10 f1		      BPL	SelectCarWithDpadLoop
   1673  f831		       60		      RTS
   1674  f832
   1675  f832				   ProcessOpponentLine
   1676  f832		       a5 8c		      LDA	FrameCount0
   1677  f834		       29 01		      AND	#%00000001
   1678  f836		       38		      SEC
   1679  f837		       d0 15		      BNE	Player0IsOpponent
   1680  f839				   Player1IsOpponent		; Code could be reused?
   1681  f839		       a5 91		      LDA	TrafficOffset0 + 1
   1682  f83b		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1683  f83d		       85 b0		      STA	Tmp0
   1684  f83f		       a5 92		      LDA	TrafficOffset0 + 2
   1685  f841		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1686  f843		       85 b1		      STA	Tmp1
   1687  f845		       a5 ba		      LDA	Traffic0Msb
   1688  f847		       e5 bb		      SBC	OpTraffic0Msb
   1689  f849		       85 b2		      STA	Tmp2
   1690  f84b		       4c 60 f8 	      JMP	StoreInFrontPlayer
   1691  f84e				   Player0IsOpponent
   1692  f84e		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1693  f850		       e5 91		      SBC	TrafficOffset0 + 1
   1694  f852		       85 b0		      STA	Tmp0
   1695  f854		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1696  f856		       e5 92		      SBC	TrafficOffset0 + 2
   1697  f858		       85 b1		      STA	Tmp1
   1698  f85a		       a5 bb		      LDA	OpTraffic0Msb
   1699  f85c		       e5 ba		      SBC	Traffic0Msb
   1700  f85e		       85 b2		      STA	Tmp2
   1701  f860
   1702  f860				   StoreInFrontPlayer
   1703  f860		       85 f4		      STA	IsOpponentInFront
   1704  f862
   1705  f862				   AddOffsetToOpponentLine
   1706  f862		       18		      CLC
   1707  f863		       a5 b0		      LDA	Tmp0
   1708  f865		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1709  f867		       85 b0		      STA	Tmp0
   1710  f869		       a5 b1		      LDA	Tmp1
   1711  f86b		       69 00		      ADC	#0
   1712  f86d		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1713  f86f		       a5 b2		      LDA	Tmp2
   1714  f871		       69 00		      ADC	#0
   1715  f873		       05 b1		      ORA	Tmp1
   1716  f875		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1717  f877				   OpponentNotVisible
   1718  f877		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1719  f879		       85 cf		      STA	OpponentLine
   1720  f87b		       4c 82 f8 	      JMP	ReturnFromProcessOpponentLine
   1721  f87e				   OpponentVisible
   1722  f87e		       a5 b0		      LDA	Tmp0
   1723  f880		       85 cf		      STA	OpponentLine
   1724  f882				   ReturnFromProcessOpponentLine
   1725  f882		       60		      RTS
   1726  f883
   1727  f883							; Value stored in A
   1728  f883				   IsOpponentColliding
   1729  f883							;Any non default state, opponent do not colide
   1730  f883		       a5 8e		      LDA	CollisionCounter
   1731  f885		       05 8f		      ORA	OpCollisionCounter
   1732  f887		       05 cb		      ORA	ScoreFontColorHoldChange
   1733  f889		       05 cc		      ORA	OpScoreFontColorHoldChange
   1734  f88b		       d0 07		      BNE	OpponentNotColliding
   1735  f88d		       a5 f4		      LDA	IsOpponentInFront
   1736  f88f		       25 07		      AND	CXPPMM
   1737  f891		       4c 96 f8 	      JMP	ReturnIsOpponentColliding
   1738  f894				   OpponentNotColliding
   1739  f894		       a9 00		      LDA	#0
   1740  f896				   ReturnIsOpponentColliding
   1741  f896		       60		      RTS
   1742  f897
   1743  f897
   1744  f897							; Movement and colision are binded because the car must be moved after duplicate size.
   1745  f897							; Use X for the player
   1746  f897							; Tmp2 Traffic colision result
   1747  f897				   TestCollisionAndMove
   1748  f897							; Until store the movemnt, Y contains the value to be stored.
   1749  f897							; see if player0 colides with the rest
   1750  f897		       a5 b2		      LDA	Tmp2
   1751  f899		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1752  f89b		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1753  f89d		       d0 25		      BNE	NoCollision
   1754  f89f		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1755  f8a1		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1756  f8a3		       f0 1f		      BEQ	NoCollision
   1757  f8a5		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1758  f8a7		       f0 1b		      BEQ	NoCollision
   1759  f8a9		       a9 ff		      LDA	#COLLISION_FRAMES
   1760  f8ab		       95 8e		      STA	CollisionCounter,X
   1761  f8ad		       b5 f2		      LDA	Player0SpeedH,X
   1762  f8af		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1763  f8b1		       a9 10		      LDA	#COLLISION_SPEED_L
   1764  f8b3		       d5 f0		      CMP	Player0SpeedL,X
   1765  f8b5		       b0 04		      BCS	SkipSetColisionSpeedL
   1766  f8b7				   SetColisionSpeedL
   1767  f8b7		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1768  f8b9		       95 f0		      STA	Player0SpeedL,X
   1769  f8bb				   SkipSetColisionSpeedL
   1770  f8bb		       a9 00		      LDA	#0
   1771  f8bd		       95 f2		      STA	Player0SpeedH,X
   1772  f8bf		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1773  f8c1		       4c 14 f9 	      JMP	StoreHMove	; We keep position consistent
   1774  f8c4				   NoCollision
   1775  f8c4
   1776  f8c4				   DecrementCollision
   1777  f8c4		       b5 8e		      LDA	CollisionCounter,X
   1778  f8c6		       f0 06		      BEQ	FinishDecrementCollision
   1779  f8c8		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1780  f8ca		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1781  f8cc		       d6 8e		      DEC	CollisionCounter,X
   1782  f8ce				   FinishDecrementCollision
   1783  f8ce
   1784  f8ce				   ResetPlayerSize
   1785  f8ce		       d0 04		      BNE	FinishResetPlayerSize
   1786  f8d0		       a9 30		      LDA	#%00110000
   1787  f8d2		       95 04		      STA	NUSIZ0,X	;
   1788  f8d4				   FinishResetPlayerSize
   1789  f8d4
   1790  f8d4				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1791  f8d4		       b5 8e		      LDA	CollisionCounter,X
   1792  f8d6		       c9 01		      CMP	#1	; Last frame before reset
   1793  f8d8		       d0 05		      BNE	SkipResetPlayerPosition
   1794  f8da		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1795  f8dc		       4c 14 f9 	      JMP	StoreHMove
   1796  f8df				   SkipResetPlayerPosition
   1797  f8df
   1798  f8df				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1799  f8df		       b5 c7		      LDA	CurrentCarId,X
   1800  f8e1		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1801  f8e3		       d0 08		      BNE	PrepareReadXAxis
   1802  f8e5		       a0 00		      LDY	#0
   1803  f8e7		       a5 8c		      LDA	FrameCount0
   1804  f8e9		       29 01		      AND	#DRAGSTER_TURN_MASK
   1805  f8eb		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1806  f8ed
   1807  f8ed				   PrepareReadXAxis
   1808  f8ed		       a0 00		      LDY	#0
   1809  f8ef		       b5 b6		      LDA	Player0X,X
   1810  f8f1				   BeginReadLeft
   1811  f8f1		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1812  f8f3		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1813  f8f6		       2c 80 02 	      BIT	SWCHA
   1814  f8f9		       d0 07		      BNE	SkipMoveLeft
   1815  f8fb		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1816  f8fd		       d6 b6		      DEC	Player0X,X
   1817  f8ff		       4c 14 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1818  f902				   SkipMoveLeft
   1819  f902				   BeginReadRight
   1820  f902		       b5 b6		      LDA	Player0X,X
   1821  f904		       c9 2c		      CMP	#PLAYER_MAX_X
   1822  f906		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1823  f908		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1824  f90b		       2c 80 02 	      BIT	SWCHA
   1825  f90e		       d0 04		      BNE	SkipMoveRight
   1826  f910		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1827  f912		       f6 b6		      INC	Player0X,X
   1828  f914				   SkipMoveRight
   1829  f914				   StoreHMove
   1830  f914		       94 20		      STY	HMP0,X	;set the move for player 0
   1831  f916
   1832  f916		       60		      RTS
   1833  f917
   1834  f917							; X Traffic offset 4 bits each lane, 4 lanes per player
   1835  f917							; Tmp3 Max X offset
   1836  f917							; Tmp4 Max Player Speed L
   1837  f917							; Tmp5 Max Player Speed H
   1838  f917				   UpdateOffsets
   1839  f917		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1840  f919		       a5 c6		      LDA	GameMode
   1841  f91b		       29 04		      AND	#%00000100	; GameModes with high delta
   1842  f91d		       f0 02		      BEQ	UpdateOffsetsLoop
   1843  f91f		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1844  f921
   1845  f921				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1846  f921		       38		      SEC
   1847  f922		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1848  f924		       f9 7d ff 	      SBC	TrafficSpeeds,Y
   1849  f927		       85 b0		      STA	Tmp0
   1850  f929		       c8		      INY
   1851  f92a		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1852  f92c		       f9 7d ff 	      SBC	TrafficSpeeds,Y
   1853  f92f		       85 b1		      STA	Tmp1
   1854  f931		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1855  f933		       e9 00		      SBC	#0
   1856  f935		       85 b2		      STA	Tmp2
   1857  f937
   1858  f937				   AddsTheResult
   1859  f937		       18		      CLC
   1860  f938		       a5 b0		      LDA	Tmp0
   1861  f93a		       75 90		      ADC	TrafficOffset0,X
   1862  f93c		       95 90		      STA	TrafficOffset0,X
   1863  f93e		       e8		      INX
   1864  f93f		       a5 b1		      LDA	Tmp1
   1865  f941		       75 90		      ADC	TrafficOffset0,X
   1866  f943		       95 90		      STA	TrafficOffset0,X
   1867  f945		       e8		      INX
   1868  f946		       a5 b2		      LDA	Tmp2	; Carry
   1869  f948		       75 90		      ADC	TrafficOffset0,X
   1870  f94a		       95 90		      STA	TrafficOffset0,X
   1871  f94c		       90 0f		      BCC	CalculateOffsetCache
   1872  f94e				   CalculatePlayer0Msb
   1873  f94e		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1874  f950		       d0 05		      BNE	CalculatePlayer1Msb
   1875  f952		       e6 ba		      INC	Traffic0Msb
   1876  f954		       4c 5d f9 	      JMP	CalculateOffsetCache
   1877  f957				   CalculatePlayer1Msb
   1878  f957		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1879  f959		       d0 02		      BNE	CalculateOffsetCache
   1880  f95b		       e6 bb		      INC	OpTraffic0Msb
   1881  f95d
   1882  f95d				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1883  f95d		       e8		      INX
   1884  f95e		       38		      SEC
   1885  f95f		       69 00		      ADC	#0	;Increment by one
   1886  f961		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1887  f963
   1888  f963				   PrepareNextUpdateLoop
   1889  f963		       c8		      INY
   1890  f964		       e8		      INX
   1891  f965		       e4 b3		      CPX	Tmp3	; Max X offset
   1892  f967		       d0 b8		      BNE	UpdateOffsetsLoop
   1893  f969		       60		      RTS
   1894  f96a
   1895  f96a							; X Player 0 or 1
   1896  f96a				   ProcessSpeed
   1897  f96a				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1898  f96a		       a9 00		      LDA	#0
   1899  f96c		       85 b0		      STA	Tmp0	; Break speed
   1900  f96e		       b5 b8		      LDA	CountdownTimer,X
   1901  f970		       d0 0d		      BNE	Break
   1902  f972		       b4 c7		      LDY	CurrentCarId,X
   1903  f974		       a5 8c		      LDA	FrameCount0
   1904  f976		       39 a5 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1905  f979		       d0 04		      BNE	Break
   1906  f97b		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1907  f97d		       85 b0		      STA	Tmp0
   1908  f97f
   1909  f97f				   Break
   1910  f97f		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1911  f982		       2c 80 02 	      BIT	SWCHA
   1912  f985		       d0 12		      BNE	BreakNonZero
   1913  f987		       b5 0c		      LDA	INPT4,X	;3
   1914  f989		       10 0a		      BPL	BreakWhileAccelerating
   1915  f98b		       b4 d5		      LDY	Gear,X
   1916  f98d		       b9 b1 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1917  f990		       85 b0		      STA	Tmp0
   1918  f992		       4c 99 f9 	      JMP	BreakNonZero
   1919  f995				   BreakWhileAccelerating		; Allow better control while breaking.
   1920  f995		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1921  f997		       85 b0		      STA	Tmp0
   1922  f999
   1923  f999				   BreakNonZero
   1924  f999		       a5 b0		      LDA	Tmp0
   1925  f99b		       f0 29		      BEQ	SkipBreak
   1926  f99d
   1927  f99d				   DecreaseSpeed
   1928  f99d		       38		      SEC
   1929  f99e		       b5 f0		      LDA	Player0SpeedL,X
   1930  f9a0		       e5 b0		      SBC	Tmp0
   1931  f9a2		       95 f0		      STA	Player0SpeedL,X
   1932  f9a4		       b5 f2		      LDA	Player0SpeedH,X
   1933  f9a6		       e9 00		      SBC	#0
   1934  f9a8		       95 f2		      STA	Player0SpeedH,X
   1935  f9aa
   1936  f9aa				   CheckMinSpeed
   1937  f9aa		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1938  f9ac		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1939  f9ae		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1940  f9b0		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1941  f9b2
   1942  f9b2				   CompareLBreakSpeed
   1943  f9b2		       b5 f0		      LDA	Player0SpeedL,X
   1944  f9b4		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1945  f9b6		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1946  f9b8		       4c c3 f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1947  f9bb
   1948  f9bb				   ResetMinSpeed
   1949  f9bb		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1950  f9bd		       95 f2		      STA	Player0SpeedH,X
   1951  f9bf		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1952  f9c1		       95 f0		      STA	Player0SpeedL,X
   1953  f9c3
   1954  f9c3				   SkipAccelerateIfBreaking
   1955  f9c3		       4c 0c fa 	      JMP	SkipAccelerate
   1956  f9c6				   SkipBreak
   1957  f9c6
   1958  f9c6				   Acelerates
   1959  f9c6		       b5 b8		      LDA	CountdownTimer,X
   1960  f9c8		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1961  f9ca
   1962  f9ca				   ContinueAccelerateTest
   1963  f9ca		       b5 0c		      LDA	INPT4,X	;3
   1964  f9cc		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1965  f9ce		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1966  f9d1		       2c 80 02 	      BIT	SWCHA
   1967  f9d4		       d0 36		      BNE	SkipAccelerate
   1968  f9d6
   1969  f9d6				   IncreaseCarSpeed
   1970  f9d6		       a9 02		      LDA	#2
   1971  f9d8		       85 b0		      STA	Tmp0	; Loop control
   1972  f9da		       b4 c7		      LDY	CurrentCarId,X
   1973  f9dc				   IncreaseCarSpeedLoop
   1974  f9dc							;Adds speed
   1975  f9dc		       18		      CLC
   1976  f9dd		       b5 dc		      LDA	AccelerateBuffer,X
   1977  f9df		       79 a1 ff 	      ADC	CarIdToAccelerateSpeed,Y
   1978  f9e2		       95 dc		      STA	AccelerateBuffer,X
   1979  f9e4		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1980  f9e6		       f6 f0		      INC	Player0SpeedL,X
   1981  f9e8		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1982  f9ea		       f6 f2		      INC	Player0SpeedH,X
   1983  f9ec				   ContinueIncreaseSpeedLoop
   1984  f9ec		       c6 b0		      DEC	Tmp0
   1985  f9ee		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1986  f9f0				   SkipIncreaseCarSpeed
   1987  f9f0
   1988  f9f0				   CheckIfAlreadyMaxSpeed
   1989  f9f0		       b5 f2		      LDA	Player0SpeedH,X
   1990  f9f2		       c9 02		      CMP	#CAR_MAX_SPEED_H
   1991  f9f4		       90 16		      BCC	SkipAccelerate	; less than my max speed
   1992  f9f6		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   1993  f9f8							;High bit is max, compare the low
   1994  f9f8		       b4 c7		      LDY	CurrentCarId,X
   1995  f9fa		       b5 f0		      LDA	Player0SpeedL,X
   1996  f9fc		       d9 a9 ff 	      CMP	CarIdToMaxSpeedL,Y
   1997  f9ff		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   1998  fa01							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   1999  fa01
   2000  fa01				   ResetToMaxSpeed		; Speed is more, or is already max
   2001  fa01		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2002  fa03		       95 f2		      STA	Player0SpeedH,X
   2003  fa05		       b4 c7		      LDY	CurrentCarId,X
   2004  fa07		       b9 a9 ff 	      LDA	CarIdToMaxSpeedL,Y
   2005  fa0a		       95 f0		      STA	Player0SpeedL,X
   2006  fa0c				   SkipAccelerate
   2007  fa0c		       60		      RTS
   2008  fa0d
   2009  fa0d							;Tmp0 Traffic Offset to compare with next checkpoint
   2010  fa0d				   ProcessPlayerStatus
   2011  fa0d				   IsGameOver
   2012  fa0d		       b5 b8		      LDA	CountdownTimer,X
   2013  fa0f		       15 f0		      ORA	Player0SpeedL,X
   2014  fa11		       15 f2		      ORA	Player0SpeedH,X
   2015  fa13		       d0 0b		      BNE	IsCheckpoint
   2016  fa15		       a9 01		      LDA	#1
   2017  fa17		       95 cb		      STA	ScoreFontColorHoldChange,X
   2018  fa19		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2019  fa1b		       95 c9		      STA	ScoreFontColor,X
   2020  fa1d		       4c 52 fa 	      JMP	SkipIsTimeOver
   2021  fa20
   2022  fa20				   IsCheckpoint
   2023  fa20		       b5 cd		      LDA	NextCheckpoint,X
   2024  fa22		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2025  fa24		       d0 20		      BNE	SkipIsCheckpoint
   2026  fa26		       18		      CLC
   2027  fa27		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2028  fa29		       95 cd		      STA	NextCheckpoint,X
   2029  fa2b		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2030  fa2d		       95 c9		      STA	ScoreFontColor,X
   2031  fa2f		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2032  fa31		       95 cb		      STA	ScoreFontColorHoldChange,X
   2033  fa33		       b5 b8		      LDA	CountdownTimer,X
   2034  fa35		       18		      CLC
   2035  fa36		       75 c0		      ADC	CheckpointTime,X
   2036  fa38		       95 b8		      STA	CountdownTimer,X
   2037  fa3a		       90 04		      BCC	JumpSkipTimeOver
   2038  fa3c		       a9 ff		      LDA	#$FF
   2039  fa3e		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2040  fa40				   JumpSkipTimeOver
   2041  fa40		       20 c5 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2042  fa43		       4c 52 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2043  fa46				   SkipIsCheckpoint
   2044  fa46
   2045  fa46				   IsTimeOver
   2046  fa46		       b5 b8		      LDA	CountdownTimer,X
   2047  fa48		       d0 08		      BNE	SkipIsTimeOver
   2048  fa4a		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2049  fa4c		       95 cb		      STA	ScoreFontColorHoldChange,X
   2050  fa4e		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2051  fa50		       95 c9		      STA	ScoreFontColor,X
   2052  fa52				   SkipIsTimeOver
   2053  fa52		       60		      RTS
   2054  fa53
   2055  fa53
   2056  fa53				   EverySecond		; 64 frames to be more precise
   2057  fa53		       a9 3f		      LDA	#%00111111
   2058  fa55		       25 8c		      AND	FrameCount0
   2059  fa57		       d0 06		      BNE	SkipEverySecondAction
   2060  fa59		       d5 b8		      CMP	CountdownTimer,X
   2061  fa5b		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2062  fa5d		       d6 b8		      DEC	CountdownTimer,X
   2063  fa5f				   SkipEverySecondAction
   2064  fa5f		       60		      RTS
   2065  fa60
   2066  fa60				   CalculateGear
   2067  fa60		       b5 f0		      LDA	Player0SpeedL,X	;3
   2068  fa62		       29 80		      AND	#%10000000	;2
   2069  fa64		       15 f2		      ORA	Player0SpeedH,X	;3
   2070  fa66		       18		      CLC		;2
   2071  fa67		       2a		      ROL		;2
   2072  fa68		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2073  fa6a		       95 d5		      STA	Gear,X
   2074  fa6c		       60		      RTS
   2075  fa6d
   2076  fa6d				   ProcessScoreFontColor
   2077  fa6d		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2078  fa6f		       f0 06		      BEQ	ResetScoreFontColor
   2079  fa71		       88		      DEY
   2080  fa72		       94 cb		      STY	ScoreFontColorHoldChange,X
   2081  fa74		       4c 7c fa 	      JMP	SkipScoreFontColor
   2082  fa77				   ResetScoreFontColor
   2083  fa77		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2084  fa7a		       95 c9		      STA	ScoreFontColor,X
   2085  fa7c				   SkipScoreFontColor
   2086  fa7c		       60		      RTS
   2087  fa7d
   2088  fa7d							; Moved here because of rom space.
   2089  fa7d							; The only SBR in constants space
   2090  fa7d				   DrawQrCode
   2091  fa7d		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2092  fa7f		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2093  fa81		       a9 01		      LDA	#%00000001	; Mirror playfield
   2094  fa83		       85 0a		      STA	CTRLPF
   2095  fa85		       20 83 f6 	      JSR	ClearAll	; To be 100 sure!
   2096  fa88		       ad 82 02 	      LDA	SWCHB
   2097  fa8b		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2098  fa8d		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2099  fa8f		       f0 07		      BEQ	StoreReversedQrCode
   2100  fa91		       86 09		      STX	COLUBK
   2101  fa93		       84 08		      STY	COLUPF
   2102  fa95		       4c 9c fa 	      JMP	ContinueQrCode
   2103  fa98				   StoreReversedQrCode
   2104  fa98		       86 08		      STX	COLUPF
   2105  fa9a		       84 09		      STY	COLUBK
   2106  fa9c
   2107  fa9c				   ContinueQrCode
   2108  fa9c		       a2 09		      LDX	#9
   2109  fa9e		       20 d2 f7 	      JSR	HMoveXTimes
   2110  faa1		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2111  faa3		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2112  faa5		       20 ab f7 	      JSR	WaitForVblankEnd
   2113  faa8		       20 be f7 	      JSR	Sleep8Lines
   2114  faab		       20 be f7 	      JSR	Sleep8Lines
   2115  faae		       20 be f7 	      JSR	Sleep8Lines
   2116  fab1
   2117  fab1				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2118  fab1		       85 02		      STA	WSYNC
   2119  fab3		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2120  fab6		       85 0e		      STA	PF1	;3
   2121  fab8		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2122  fabb		       85 0f		      STA	PF2	;3
      0  fabd					      SLEEP	27	; 
      1  fabd				   .CYCLES    SET	27
      2  fabd
      3  fabd				  -	      IF	.CYCLES < 2
      4  fabd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fabd				  -	      ERR
      6  fabd					      ENDIF
      7  fabd
      8  fabd					      IF	.CYCLES & 1
      9  fabd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fabd				  -	      nop	0
     11  fabd					      ELSE
     12  fabd		       24 00		      bit	VSYNC
     13  fabf					      ENDIF
     14  fabf				   .CYCLES    SET	.CYCLES - 3
     15  fabf					      ENDIF
     16  fabf
     17  fabf					      REPEAT	.CYCLES / 2
     18  fabf		       ea		      nop
     17  fabf					      REPEND
     18  fac0		       ea		      nop
     17  fac0					      REPEND
     18  fac1		       ea		      nop
     17  fac1					      REPEND
     18  fac2		       ea		      nop
     17  fac2					      REPEND
     18  fac3		       ea		      nop
     17  fac3					      REPEND
     18  fac4		       ea		      nop
     17  fac4					      REPEND
     18  fac5		       ea		      nop
     17  fac5					      REPEND
     18  fac6		       ea		      nop
     17  fac6					      REPEND
     18  fac7		       ea		      nop
     17  fac7					      REPEND
     18  fac8		       ea		      nop
     17  fac8					      REPEND
     18  fac9		       ea		      nop
     17  fac9					      REPEND
     18  faca		       ea		      nop
     19  facb					      REPEND
   2124  facb		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2125  face		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2126  fad0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2127  fad3		       85 0e		      STA	PF1	;3
   2128  fad5
   2129  fad5		       ca		      DEX		;2
   2130  fad6		       d0 d9		      BNE	QrCodeLoop	;2
   2131  fad8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2132  fada		       88		      DEY		;2
   2133  fadb		       10 d4		      BPL	QrCodeLoop	;4
   2134  fadd
   2135  fadd				   EndQrCodeLoop
   2136  fadd		       85 02		      STA	WSYNC	;
   2137  fadf		       a9 00		      LDA	#0
   2138  fae1		       85 0e		      STA	PF1	;3
   2139  fae3		       85 0f		      STA	PF2	;3
   2140  fae5
   2141  fae5		       20 c5 f7 	      JSR	Sleep32Lines
   2142  fae8		       4c 1a f5 	      JMP	PrepareOverscan
   2143  faeb
   2144  faeb							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2145  fc00					      org	$FC00
   2146  fc00				   QrCode1
   2147  fc00		       1f		      .byte.b	#%00011111
   2148  fc01		       10		      .byte.b	#%00010000
   2149  fc02		       17		      .byte.b	#%00010111
   2150  fc03		       17		      .byte.b	#%00010111
   2151  fc04		       17		      .byte.b	#%00010111
   2152  fc05		       10		      .byte.b	#%00010000
   2153  fc06		       1f		      .byte.b	#%00011111
   2154  fc07		       00		      .byte.b	#%00000000
   2155  fc08		       17		      .byte.b	#%00010111
   2156  fc09		       10		      .byte.b	#%00010000
   2157  fc0a		       1d		      .byte.b	#%00011101
   2158  fc0b		       16		      .byte.b	#%00010110
   2159  fc0c		       03		      .byte.b	#%00000011
   2160  fc0d		       19		      .byte.b	#%00011001
   2161  fc0e		       13		      .byte.b	#%00010011
   2162  fc0f		       1c		      .byte.b	#%00011100
   2163  fc10		       0b		      .byte.b	#%00001011
   2164  fc11		       00		      .byte.b	#%00000000
   2165  fc12		       1f		      .byte.b	#%00011111
   2166  fc13		       10		      .byte.b	#%00010000
   2167  fc14		       17		      .byte.b	#%00010111
   2168  fc15		       17		      .byte.b	#%00010111
   2169  fc16		       17		      .byte.b	#%00010111
   2170  fc17		       10		      .byte.b	#%00010000
   2171  fc18		       1f		      .byte.b	#%00011111
   2172  fc19
   2173  fc19				   QrCode2
   2174  fc19		       c3		      .byte.b	#%11000011
   2175  fc1a		       9a		      .byte.b	#%10011010
   2176  fc1b		       82		      .byte.b	#%10000010
   2177  fc1c		       da		      .byte.b	#%11011010
   2178  fc1d		       aa		      .byte.b	#%10101010
   2179  fc1e		       ca		      .byte.b	#%11001010
   2180  fc1f		       f3		      .byte.b	#%11110011
   2181  fc20		       78		      .byte.b	#%01111000
   2182  fc21		       df		      .byte.b	#%11011111
   2183  fc22		       fc		      .byte.b	#%11111100
   2184  fc23		       c7		      .byte.b	#%11000111
   2185  fc24		       98		      .byte.b	#%10011000
   2186  fc25		       23		      .byte.b	#%00100011
   2187  fc26		       b9		      .byte.b	#%10111001
   2188  fc27		       d2		      .byte.b	#%11010010
   2189  fc28		       30		      .byte.b	#%00110000
   2190  fc29		       eb		      .byte.b	#%11101011
   2191  fc2a		       28		      .byte.b	#%00101000
   2192  fc2b		       ab		      .byte.b	#%10101011
   2193  fc2c		       72		      .byte.b	#%01110010
   2194  fc2d		       fa		      .byte.b	#%11111010
   2195  fc2e		       7a		      .byte.b	#%01111010
   2196  fc2f		       32		      .byte.b	#%00110010
   2197  fc30		       3a		      .byte.b	#%00111010
   2198  fc31		       63		      .byte.b	#%01100011
   2199  fc32
   2200  fc32				   QrCode3
   2201  fc32		       98		      .byte.b	#%10011000
   2202  fc33		       c3		      .byte.b	#%11000011
   2203  fc34		       39		      .byte.b	#%00111001
   2204  fc35		       34		      .byte.b	#%00110100
   2205  fc36		       ff		      .byte.b	#%11111111
   2206  fc37		       71		      .byte.b	#%01110001
   2207  fc38		       d5		      .byte.b	#%11010101
   2208  fc39		       d1		      .byte.b	#%11010001
   2209  fc3a		       5f		      .byte.b	#%01011111
   2210  fc3b		       26		      .byte.b	#%00100110
   2211  fc3c		       2d		      .byte.b	#%00101101
   2212  fc3d		       e9		      .byte.b	#%11101001
   2213  fc3e		       d6		      .byte.b	#%11010110
   2214  fc3f		       26		      .byte.b	#%00100110
   2215  fc40		       ba		      .byte.b	#%10111010
   2216  fc41		       03		      .byte.b	#%00000011
   2217  fc42		       dd		      .byte.b	#%11011101
   2218  fc43		       e0		      .byte.b	#%11100000
   2219  fc44		       57		      .byte.b	#%01010111
   2220  fc45		       14		      .byte.b	#%00010100
   2221  fc46		       35		      .byte.b	#%00110101
   2222  fc47		       e5		      .byte.b	#%11100101
   2223  fc48		       b5		      .byte.b	#%10110101
   2224  fc49		       d4		      .byte.b	#%11010100
   2225  fc4a		       97		      .byte.b	#%10010111
   2226  fc4b
   2227  fc4b				   QrCode4
   2228  fc4b		       09		      .byte.b	#%00001001
   2229  fc4c		       0e		      .byte.b	#%00001110
   2230  fc4d		       0f		      .byte.b	#%00001111
   2231  fc4e		       0c		      .byte.b	#%00001100
   2232  fc4f		       0c		      .byte.b	#%00001100
   2233  fc50		       08		      .byte.b	#%00001000
   2234  fc51		       08		      .byte.b	#%00001000
   2235  fc52		       06		      .byte.b	#%00000110
   2236  fc53		       06		      .byte.b	#%00000110
   2237  fc54		       0b		      .byte.b	#%00001011
   2238  fc55		       0f		      .byte.b	#%00001111
   2239  fc56		       04		      .byte.b	#%00000100
   2240  fc57		       08		      .byte.b	#%00001000
   2241  fc58		       0f		      .byte.b	#%00001111
   2242  fc59		       09		      .byte.b	#%00001001
   2243  fc5a		       07		      .byte.b	#%00000111
   2244  fc5b		       05		      .byte.b	#%00000101
   2245  fc5c		       00		      .byte.b	#%00000000
   2246  fc5d		       0f		      .byte.b	#%00001111
   2247  fc5e		       08		      .byte.b	#%00001000
   2248  fc5f		       0b		      .byte.b	#%00001011
   2249  fc60		       0b		      .byte.b	#%00001011
   2250  fc61		       0b		      .byte.b	#%00001011
   2251  fc62		       08		      .byte.b	#%00001000
   2252  fc63		       0f		      .byte.b	#%00001111
   2253  fc64
   2254  fc64				   PlayerToUpMask
   2255  fc64		       10		      .byte.b	#%00010000	;
   2256  fc65		       01		      .byte.b	#%00000001	;
   2257  fc66
   2258  fc66				   PlayerToDownMask
   2259  fc66		       20		      .byte.b	#%00100000	;
   2260  fc67		       02		      .byte.b	#%00000010	;
   2261  fc68
   2262  fc68				   PlayerToLeftMask
   2263  fc68		       40		      .byte.b	#%01000000	;
   2264  fc69		       04		      .byte.b	#%00000100	;
   2265  fc6a
   2266  fc6a				   PlayerToRightMask
   2267  fc6a		       80		      .byte.b	#%10000000	;
   2268  fc6b		       08		      .byte.b	#%00001000	;
   2269  fc6c
   2270  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2271  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2272  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2273  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2274  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2275  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2276  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2277  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2278  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2279  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2280  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2281  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2282  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2283  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2284  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2285  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2286  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2287  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2288  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2289  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2290  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2291  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2292  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2293  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2294  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2295  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2296  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2297  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2298  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2299  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2300  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2301  fc8a		       9a		      .byte.b	#<CV + #FONT_OFFSET	; If game over text is gone, we can replace the v for u!
   2302  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2303  fc8c
   2304  fc8c
   2305  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2306  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2307  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2308  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2309  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2310  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2311  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2312  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2313  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2314  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2315  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2316  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2317  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2318  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2319  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2320  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2321  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2322  fc9c
   2323  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2324  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2325  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2326  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2327  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2328  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2329  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2330  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2331  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2332  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2333  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2334  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2335  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2336  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2337  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2338  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2339  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2340  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2341  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2342  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2343  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2344  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2345  fcb1
   2346  fcb1				   PlayerToDefaultColor
   2347  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2348  fcb2		       96		      .byte.b	#PLAYER1_COLOR
   2349  fcb3
   2350  fd00					      org	$FD00
   2351  fd00				   Font
   2352  fd00				   C0
   2353  fd00		       e7		      .byte.b	#%11100111	;
   2354  fd01		       a5		      .byte.b	#%10100101	; 
   2355  fd02		       a5		      .byte.b	#%10100101	; 
   2356  fd03		       a5		      .byte.b	#%10100101	; 
   2357  fd04		       e7		      .byte.b	#%11100111	;	
   2358  fd05				   C1
   2359  fd05		       e7		      .byte.b	#%11100111	;
   2360  fd06		       42		      .byte.b	#%01000010	; 
   2361  fd07		       42		      .byte.b	#%01000010	; 
   2362  fd08		       42		      .byte.b	#%01000010	; 
   2363  fd09		       66		      .byte.b	#%01100110	;
   2364  fd0a				   C2
   2365  fd0a		       e7		      .byte.b	#%11100111	;
   2366  fd0b		       24		      .byte.b	#%00100100	; 
   2367  fd0c		       e7		      .byte.b	#%11100111	; 
   2368  fd0d		       81		      .byte.b	#%10000001	; 
   2369  fd0e		       e7		      .byte.b	#%11100111	;
   2370  fd0f				   C3
   2371  fd0f		       e7		      .byte.b	#%11100111	;
   2372  fd10		       81		      .byte.b	#%10000001	; 
   2373  fd11		       e7		      .byte.b	#%11100111	; 
   2374  fd12		       81		      .byte.b	#%10000001	; 
   2375  fd13		       e7		      .byte.b	#%11100111	;
   2376  fd14				   C4
   2377  fd14		       81		      .byte.b	#%10000001	;
   2378  fd15		       81		      .byte.b	#%10000001	; 
   2379  fd16		       e7		      .byte.b	#%11100111	; 
   2380  fd17		       a5		      .byte.b	#%10100101	; 
   2381  fd18		       a5		      .byte.b	#%10100101	;
   2382  fd19				   C5
   2383  fd19		       e7		      .byte.b	#%11100111	;
   2384  fd1a		       81		      .byte.b	#%10000001	; 
   2385  fd1b		       e7		      .byte.b	#%11100111	; 
   2386  fd1c		       24		      .byte.b	#%00100100	; 
   2387  fd1d		       e7		      .byte.b	#%11100111	;
   2388  fd1e				   C6
   2389  fd1e		       e7		      .byte.b	#%11100111	;
   2390  fd1f		       a5		      .byte.b	#%10100101	; 
   2391  fd20		       e7		      .byte.b	#%11100111	; 
   2392  fd21		       24		      .byte.b	#%00100100	; 
   2393  fd22		       e7		      .byte.b	#%11100111	;
   2394  fd23				   C7
   2395  fd23		       81		      .byte.b	#%10000001	;
   2396  fd24		       81		      .byte.b	#%10000001	; 
   2397  fd25		       81		      .byte.b	#%10000001	; 
   2398  fd26		       81		      .byte.b	#%10000001	; 
   2399  fd27		       e7		      .byte.b	#%11100111	;
   2400  fd28				   C8
   2401  fd28		       e7		      .byte.b	#%11100111	;
   2402  fd29		       a5		      .byte.b	#%10100101	; 
   2403  fd2a		       e7		      .byte.b	#%11100111	; 
   2404  fd2b		       a5		      .byte.b	#%10100101	; 
   2405  fd2c		       e7		      .byte.b	#%11100111	;
   2406  fd2d				   C9
   2407  fd2d		       e7		      .byte.b	#%11100111	;
   2408  fd2e		       81		      .byte.b	#%10000001	; 
   2409  fd2f		       e7		      .byte.b	#%11100111	; 
   2410  fd30		       a5		      .byte.b	#%10100101	; 
   2411  fd31		       e7		      .byte.b	#%11100111	;
   2412  fd32				   CA
   2413  fd32		       a5		      .byte.b	#%10100101	;
   2414  fd33		       a5		      .byte.b	#%10100101	; 
   2415  fd34		       e7		      .byte.b	#%11100111	; 
   2416  fd35		       a5		      .byte.b	#%10100101	; 
   2417  fd36		       e7		      .byte.b	#%11100111	;
   2418  fd37				   CB
   2419  fd37		       66		      .byte.b	#%01100110	;
   2420  fd38		       a5		      .byte.b	#%10100101	; 
   2421  fd39		       66		      .byte.b	#%01100110	; 
   2422  fd3a		       a5		      .byte.b	#%10100101	;
   2423  fd3b		       66		      .byte.b	#%01100110	;
   2424  fd3c				   CC
   2425  fd3c		       e7		      .byte.b	#%11100111	;
   2426  fd3d		       24		      .byte.b	#%00100100	; 
   2427  fd3e		       24		      .byte.b	#%00100100	; 
   2428  fd3f		       24		      .byte.b	#%00100100	;
   2429  fd40		       e7		      .byte.b	#%11100111	;
   2430  fd41
   2431  fd41				   CD
   2432  fd41		       66		      .byte.b	#%01100110	;
   2433  fd42		       a5		      .byte.b	#%10100101	; 
   2434  fd43		       a5		      .byte.b	#%10100101	; 
   2435  fd44		       a5		      .byte.b	#%10100101	;
   2436  fd45		       66		      .byte.b	#%01100110	;
   2437  fd46
   2438  fd46				   CE
   2439  fd46		       e7		      .byte.b	#%11100111	;
   2440  fd47		       24		      .byte.b	#%00100100	; 
   2441  fd48		       e7		      .byte.b	#%11100111	; 
   2442  fd49		       24		      .byte.b	#%00100100	; 
   2443  fd4a		       e7		      .byte.b	#%11100111	;
   2444  fd4b
   2445  fd4b				   CF
   2446  fd4b		       24		      .byte.b	#%00100100	;
   2447  fd4c		       24		      .byte.b	#%00100100	; 
   2448  fd4d		       e7		      .byte.b	#%11100111	; 
   2449  fd4e		       24		      .byte.b	#%00100100	; 
   2450  fd4f		       e7		      .byte.b	#%11100111	;
   2451  fd50
   2452  fd50				   CG
   2453  fd50		       c3		      .byte.b	#%11000011	;
   2454  fd51		       a5		      .byte.b	#%10100101	; 
   2455  fd52		       a5		      .byte.b	#%10100101	; 
   2456  fd53		       24		      .byte.b	#%00100100	; 
   2457  fd54		       c3		      .byte.b	#%11000011	;	
   2458  fd55
   2459  fd55				   CH
   2460  fd55		       a5		      .byte.b	#%10100101	;
   2461  fd56		       a5		      .byte.b	#%10100101	; 
   2462  fd57		       e7		      .byte.b	#%11100111	; 
   2463  fd58		       a5		      .byte.b	#%10100101	; 
   2464  fd59		       a5		      .byte.b	#%10100101	;
   2465  fd5a
   2466  fd5a				   CI
   2467  fd5a		       e7		      .byte.b	#%11100111	;
   2468  fd5b		       42		      .byte.b	#%01000010	; 
   2469  fd5c		       42		      .byte.b	#%01000010	; 
   2470  fd5d		       42		      .byte.b	#%01000010	; 
   2471  fd5e		       e7		      .byte.b	#%11100111	;
   2472  fd5f
   2473  fd5f				   CJ
   2474  fd5f		       e7		      .byte.b	#%11100111	;
   2475  fd60		       a5		      .byte.b	#%10100101	; 
   2476  fd61		       81		      .byte.b	#%10000001	; 
   2477  fd62		       81		      .byte.b	#%10000001	; 
   2478  fd63		       81		      .byte.b	#%10000001	;	
   2479  fd64
   2480  fd64				   CK
   2481  fd64		       a5		      .byte.b	#%10100101	;
   2482  fd65		       a5		      .byte.b	#%10100101	; 
   2483  fd66		       66		      .byte.b	#%01100110	; 
   2484  fd67		       a5		      .byte.b	#%10100101	; 
   2485  fd68		       a5		      .byte.b	#%10100101	;
   2486  fd69
   2487  fd69				   CL
   2488  fd69		       e7		      .byte.b	#%11100111	;
   2489  fd6a		       24		      .byte.b	#%00100100	; 
   2490  fd6b		       24		      .byte.b	#%00100100	; 
   2491  fd6c		       24		      .byte.b	#%00100100	; 
   2492  fd6d		       24		      .byte.b	#%00100100	;
   2493  fd6e
   2494  fd6e				   CM
   2495  fd6e		       a5		      .byte.b	#%10100101	;
   2496  fd6f		       a5		      .byte.b	#%10100101	; 
   2497  fd70		       a5		      .byte.b	#%10100101	; 
   2498  fd71		       e7		      .byte.b	#%11100111	; 
   2499  fd72		       a5		      .byte.b	#%10100101	;
   2500  fd73
   2501  fd73				   CN
   2502  fd73		       a5		      .byte.b	#%10100101	;
   2503  fd74		       a5		      .byte.b	#%10100101	; 
   2504  fd75		       a5		      .byte.b	#%10100101	; 
   2505  fd76		       a5		      .byte.b	#%10100101	; 
   2506  fd77		       66		      .byte.b	#%01100110	;	
   2507  fd78
   2508  fd78
   2509  fd78				   CO
   2510  fd78		       42		      .byte.b	#%01000010	;
   2511  fd79		       a5		      .byte.b	#%10100101	; 
   2512  fd7a		       a5		      .byte.b	#%10100101	; 
   2513  fd7b		       a5		      .byte.b	#%10100101	; 
   2514  fd7c		       42		      .byte.b	#%01000010	;	
   2515  fd7d
   2516  fd7d				   CP
   2517  fd7d		       24		      .byte.b	#%00100100	;
   2518  fd7e		       24		      .byte.b	#%00100100	; 
   2519  fd7f		       e7		      .byte.b	#%11100111	; 
   2520  fd80		       a5		      .byte.b	#%10100101	; 
   2521  fd81		       e7		      .byte.b	#%11100111	;
   2522  fd82
   2523  fd82				   CQ
   2524  fd82		       81		      .byte.b	#%10000001	;
   2525  fd83		       e5		      .byte.b	#%11100101	; 
   2526  fd84		       a5		      .byte.b	#%10100101	; 
   2527  fd85		       a5		      .byte.b	#%10100101	; 
   2528  fd86		       e7		      .byte.b	#%11100111	;	
   2529  fd87
   2530  fd87				   CR
   2531  fd87		       a5		      .byte.b	#%10100101	;
   2532  fd88		       a5		      .byte.b	#%10100101	; 
   2533  fd89		       66		      .byte.b	#%01100110	; 
   2534  fd8a		       a5		      .byte.b	#%10100101	; 
   2535  fd8b		       66		      .byte.b	#%01100110	;
   2536  fd8c
   2537  fd8c				   CS
   2538  fd8c		       66		      .byte.b	#%01100110	;
   2539  fd8d		       81		      .byte.b	#%10000001	; 
   2540  fd8e		       42		      .byte.b	#%01000010	; 
   2541  fd8f		       24		      .byte.b	#%00100100	; 
   2542  fd90		       c3		      .byte.b	#%11000011	;
   2543  fd91
   2544  fd91				   CT
   2545  fd91		       42		      .byte.b	#%01000010	;
   2546  fd92		       42		      .byte.b	#%01000010	; 
   2547  fd93		       42		      .byte.b	#%01000010	; 
   2548  fd94		       42		      .byte.b	#%01000010	; 
   2549  fd95		       e7		      .byte.b	#%11100111	;
   2550  fd96
   2551  fd96				   CV
   2552  fd96		       42		      .byte.b	#%01000010	;
   2553  fd97		       a5		      .byte.b	#%10100101	; 
   2554  fd98		       a5		      .byte.b	#%10100101	; 
   2555  fd99		       a5		      .byte.b	#%10100101	; 
   2556  fd9a		       a5		      .byte.b	#%10100101	;	
   2557  fd9b
   2558  fd9b				   CW
   2559  fd9b		       a5		      .byte.b	#%10100101	;
   2560  fd9c		       e7		      .byte.b	#%11100111	; 
   2561  fd9d		       a5		      .byte.b	#%10100101	; 
   2562  fd9e		       a5		      .byte.b	#%10100101	; 
   2563  fd9f		       a5		      .byte.b	#%10100101	;
   2564  fda0
   2565  fda0				   CY
   2566  fda0		       42		      .byte.b	#%01000010	;
   2567  fda1		       42		      .byte.b	#%01000010	; 
   2568  fda2		       42		      .byte.b	#%01000010	; 
   2569  fda3		       a5		      .byte.b	#%10100101	; 
   2570  fda4		       a5		      .byte.b	#%10100101	;
   2571  fda5
   2572  fda5				   Exclamation
   2573  fda5		       42		      .byte.b	#%01000010	;
   2574  fda6		       00		      .byte.b	#%00000000	; 
   2575  fda7		       42		      .byte.b	#%01000010	; 
   2576  fda8		       42		      .byte.b	#%01000010	; 
   2577  fda9		       42		      .byte.b	#%01000010	;
   2578  fdaa
   2579  fdaa				   Pipe
   2580  fdaa				   Colon
   2581  fdaa		       42		      .byte.b	#%01000010	;
   2582  fdab		       42		      .byte.b	#%01000010	; 
   2583  fdac		       00		      .byte.b	#%00000000	; 
   2584  fdad		       42		      .byte.b	#%01000010	; 
   2585  fdae		       42		      .byte.b	#%01000010	;
   2586  fdaf
   2587  fdaf				   Space
   2588  fdaf				   C0B
   2589  fdaf		       00		      .byte.b	#%00000000	;
   2590  fdb0		       00		      .byte.b	#%00000000	; 
   2591  fdb1		       00		      .byte.b	#%00000000	; 
   2592  fdb2		       00		      .byte.b	#%00000000	; 
   2593  fdb3		       00		      .byte.b	#%00000000	;	
   2594  fdb4				   C1B
   2595  fdb4		       24		      .byte.b	#%00100100	;
   2596  fdb5		       00		      .byte.b	#%00000000	; 
   2597  fdb6		       00		      .byte.b	#%00000000	; 
   2598  fdb7		       00		      .byte.b	#%00000000	; 
   2599  fdb8		       00		      .byte.b	#%00000000	;
   2600  fdb9				   C2B
   2601  fdb9		       66		      .byte.b	#%01100110	;
   2602  fdba		       00		      .byte.b	#%00000000	; 
   2603  fdbb		       00		      .byte.b	#%00000000	; 
   2604  fdbc		       00		      .byte.b	#%00000000	; 
   2605  fdbd		       00		      .byte.b	#%00000000	;
   2606  fdbe				   C3B
   2607  fdbe		       e7		      .byte.b	#%11100111	;
   2608  fdbf		       00		      .byte.b	#%00000000	; 
   2609  fdc0		       00		      .byte.b	#%00000000	; 
   2610  fdc1		       00		      .byte.b	#%00000000	; 
   2611  fdc2		       00		      .byte.b	#%00000000	;
   2612  fdc3				   C4B
   2613  fdc3		       e7		      .byte.b	#%11100111	;
   2614  fdc4		       24		      .byte.b	#%00100100	; 
   2615  fdc5		       00		      .byte.b	#%00000000	; 
   2616  fdc6		       00		      .byte.b	#%00000000	; 
   2617  fdc7		       00		      .byte.b	#%00000000	;
   2618  fdc8				   C5B
   2619  fdc8		       e7		      .byte.b	#%11100111	;
   2620  fdc9		       66		      .byte.b	#%01100110	; 
   2621  fdca		       00		      .byte.b	#%00000000	; 
   2622  fdcb		       00		      .byte.b	#%00000000	; 
   2623  fdcc		       00		      .byte.b	#%00000000	;
   2624  fdcd				   C6B
   2625  fdcd		       e7		      .byte.b	#%11100111	;
   2626  fdce		       e7		      .byte.b	#%11100111	; 
   2627  fdcf		       00		      .byte.b	#%00000000	; 
   2628  fdd0		       00		      .byte.b	#%00000000	; 
   2629  fdd1		       00		      .byte.b	#%00000000	;
   2630  fdd2				   C7B
   2631  fdd2		       e7		      .byte.b	#%11100111	;
   2632  fdd3		       e7		      .byte.b	#%11100111	; 
   2633  fdd4		       24		      .byte.b	#%00100100	; 
   2634  fdd5		       00		      .byte.b	#%00000000	; 
   2635  fdd6		       00		      .byte.b	#%00000000	;
   2636  fdd7				   C8B
   2637  fdd7		       e7		      .byte.b	#%11100111	;
   2638  fdd8		       e7		      .byte.b	#%11100111	; 
   2639  fdd9		       66		      .byte.b	#%01100110	; 
   2640  fdda		       00		      .byte.b	#%00000000	; 
   2641  fddb		       00		      .byte.b	#%00000000	;
   2642  fddc				   C9B
   2643  fddc		       e7		      .byte.b	#%11100111	;
   2644  fddd		       e7		      .byte.b	#%11100111	; 
   2645  fdde		       e7		      .byte.b	#%11100111	; 
   2646  fddf		       00		      .byte.b	#%00000000	; 
   2647  fde0		       00		      .byte.b	#%00000000	;
   2648  fde1				   CAB
   2649  fde1		       e7		      .byte.b	#%11100111	;
   2650  fde2		       e7		      .byte.b	#%11100111	; 
   2651  fde3		       e7		      .byte.b	#%11100111	; 
   2652  fde4		       24		      .byte.b	#%00100100	; 
   2653  fde5		       00		      .byte.b	#%00000000	;
   2654  fde6				   CBB
   2655  fde6		       e7		      .byte.b	#%11100111	;
   2656  fde7		       e7		      .byte.b	#%11100111	; 
   2657  fde8		       e7		      .byte.b	#%11100111	; 
   2658  fde9		       66		      .byte.b	#%01100110	; 
   2659  fdea		       00		      .byte.b	#%00000000	;
   2660  fdeb				   CCB
   2661  fdeb		       e7		      .byte.b	#%11100111	;
   2662  fdec		       e7		      .byte.b	#%11100111	; 
   2663  fded		       e7		      .byte.b	#%11100111	; 
   2664  fdee		       e7		      .byte.b	#%11100111	; 
   2665  fdef		       00		      .byte.b	#%00000000	;
   2666  fdf0
   2667  fdf0				   CDB
   2668  fdf0		       e7		      .byte.b	#%11100111	;
   2669  fdf1		       e7		      .byte.b	#%11100111	; 
   2670  fdf2		       e7		      .byte.b	#%11100111	; 
   2671  fdf3		       e7		      .byte.b	#%11100111	; 
   2672  fdf4		       24		      .byte.b	#%00100100	;
   2673  fdf5
   2674  fdf5				   CEB
   2675  fdf5		       e7		      .byte.b	#%11100111	;
   2676  fdf6		       e7		      .byte.b	#%11100111	; 
   2677  fdf7		       e7		      .byte.b	#%11100111	; 
   2678  fdf8		       e7		      .byte.b	#%11100111	; 
   2679  fdf9		       66		      .byte.b	#%01100110	;
   2680  fdfa
   2681  fdfa				   CFB
   2682  fdfa		       e7		      .byte.b	#%11100111	;
   2683  fdfb		       e7		      .byte.b	#%11100111	; 
   2684  fdfc		       e7		      .byte.b	#%11100111	; 
   2685  fdfd		       e7		      .byte.b	#%11100111	; 
   2686  fdfe		       e7		      .byte.b	#%11100111	;
   2687  fdff
   2688  fe00					      org	$FE00
   2689  fe00				   AesTable
   2690  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2691  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2692  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2693  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2694  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2695  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2696  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2697  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2698  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2699  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2700  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2701  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2702  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2703  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2704  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2705  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2706  ff00
   2707  ff00					      org	$FF00
   2708  ff00				   StaticText		; All static text must be on the same MSB block. 
   2709  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2710  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2711  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2712  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2713  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2714  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2715  ff05
   2716  ff05				   HellwayLeftText
   2717  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2718  ff06		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2719  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2720  ff08		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2721  ff09		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2722  ff0a
   2723  ff0a				   HellwayRightText
   2724  ff0a		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2725  ff0b		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2726  ff0c		       81		      .byte.b	#<CP + #FONT_OFFSET
   2727  ff0d		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2728  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2729  ff0f
   2730  ff0f				   OpbText
   2731  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2732  ff10		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2733  ff11		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2734  ff12		       81		      .byte.b	#<CP + #FONT_OFFSET
   2735  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2736  ff14
   2737  ff14				   YearText
   2738  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2739  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2740  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2741  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2742  ff18		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2743  ff19
   2744  ff19				   GoText
   2745  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2746  ff1a		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2747  ff1b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2748  ff1c		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2749  ff1d		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2750  ff1e
   2751  ff1e				   ReadyText
   2752  ff1e		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2753  ff1f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2754  ff20		       36		      .byte.b	#<CA + #FONT_OFFSET
   2755  ff21		       45		      .byte.b	#<CD + #FONT_OFFSET
   2756  ff22		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2757  ff23
   2758  ff23				   EndStaticText
   2759  ff23
   2760  ff23				   TachometerSizeLookup1
   2761  ff23		       1f		      .byte.b	#%00011111
   2762  ff24		       3f		      .byte.b	#%00111111
   2763  ff25		       7f		      .byte.b	#%01111111
   2764  ff26		       ff		      .byte.b	#%11111111
   2765  ff27		       ff		      .byte.b	#%11111111
   2766  ff28		       ff		      .byte.b	#%11111111
   2767  ff29		       ff		      .byte.b	#%11111111
   2768  ff2a		       ff		      .byte.b	#%11111111
   2769  ff2b
   2770  ff2b				   TachometerSizeLookup2
   2771  ff2b		       00		      .byte.b	#%00000000
   2772  ff2c		       00		      .byte.b	#%00000000
   2773  ff2d		       00		      .byte.b	#%00000000
   2774  ff2e		       00		      .byte.b	#%00000000
   2775  ff2f		       80		      .byte.b	#%10000000
   2776  ff30		       c0		      .byte.b	#%11000000
   2777  ff31		       e0		      .byte.b	#%11100000
   2778  ff32		       f0		      .byte.b	#%11110000
   2779  ff33
   2780  ff33				   TachometerGearLookup
   2781  ff33		       01		      .byte.b	#%00000001
   2782  ff34		       02		      .byte.b	#%00000010
   2783  ff35		       04		      .byte.b	#%00000100
   2784  ff36		       08		      .byte.b	#%00001000
   2785  ff37		       10		      .byte.b	#%00010000
   2786  ff38		       30		      .byte.b	#%00110000
   2787  ff39
   2788  ff39				   EngineSoundType
   2789  ff39		       02		      .byte.b	#2
   2790  ff3a		       02		      .byte.b	#2
   2791  ff3b		       0e		      .byte.b	#14
   2792  ff3c		       06		      .byte.b	#6
   2793  ff3d		       06		      .byte.b	#6
   2794  ff3e		       0e		      .byte.b	#14
   2795  ff3f
   2796  ff3f				   EngineBaseFrequence
   2797  ff3f		       1f		      .byte.b	#31
   2798  ff40		       15		      .byte.b	#21
   2799  ff41		       14		      .byte.b	#20
   2800  ff42		       1f		      .byte.b	#31
   2801  ff43		       16		      .byte.b	#22
   2802  ff44		       03		      .byte.b	#3
   2803  ff45
   2804  ff45				   CarSprite0		; Upside down, Original Car
   2805  ff45		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2806  ff4d				   CarSprite0NoPadding
   2807  ff4d		       7e		      .byte.b	#%01111110
   2808  ff4e		       24		      .byte.b	#%00100100
   2809  ff4f		       bd		      .byte.b	#%10111101
   2810  ff50		       3c		      .byte.b	#%00111100
   2811  ff51		       bd		      .byte.b	#%10111101
   2812  ff52		       3c		      .byte.b	#%00111100
   2813  ff53
   2814  ff53				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2815  ff53		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2816  ff5b				   CarSprite1NoPadding
   2817  ff5b		       bd		      .byte.b	#%10111101
   2818  ff5c		       7e		      .byte.b	#%01111110
   2819  ff5d		       5a		      .byte.b	#%01011010
   2820  ff5e		       66		      .byte.b	#%01100110
   2821  ff5f		       bd		      .byte.b	#%10111101
   2822  ff60		       3c		      .byte.b	#%00111100
   2823  ff61
   2824  ff61				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2825  ff61		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2826  ff69				   CarSprite2NoPadding
   2827  ff69		       7e		      .byte.b	#%01111110
   2828  ff6a		       a5		      .byte.b	#%10100101
   2829  ff6b		       42		      .byte.b	#%01000010
   2830  ff6c		       42		      .byte.b	#%01000010
   2831  ff6d		       bd		      .byte.b	#%10111101
   2832  ff6e		       7e		      .byte.b	#%01111110
   2833  ff6f
   2834  ff6f				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2835  ff6f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2836  ff77				   CarSprite3NoPadding
   2837  ff77		       3c		      .byte.b	#%00111100
   2838  ff78		       db		      .byte.b	#%11011011
   2839  ff79		       db		      .byte.b	#%11011011
   2840  ff7a		       3c		      .byte.b	#%00111100
   2841  ff7b		       5a		      .byte.b	#%01011010
   2842  ff7c		       3c		      .byte.b	#%00111100
   2843  ff7d
   2844  ff7d				   TrafficSpeeds
   2845  ff7d		       00		      .byte.b	#$00	;  Trafic0 L
   2846  ff7e		       00		      .byte.b	#$00	;  Trafic0 H
   2847  ff7f		       0a		      .byte.b	#$0A	;  Trafic1 L
   2848  ff80		       01		      .byte.b	#$01	;  Trafic1 H
   2849  ff81		       e6		      .byte.b	#$E6	;  Trafic2 L
   2850  ff82		       00		      .byte.b	#$00	;  Trafic2 H
   2851  ff83		       c2		      .byte.b	#$C2	;  Trafic3 L
   2852  ff84		       00		      .byte.b	#$00	;  Trafic3 H
   2853  ff85		       9e		      .byte.b	#$9E	;  Trafic4 L
   2854  ff86		       00		      .byte.b	#$00	;  Trafic4 H
   2855  ff87				   TrafficSpeedsHighDelta
   2856  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2857  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2858  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2859  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2860  ff8b		       c8		      .byte.b	#$C8	;  Trafic2 L
   2861  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2862  ff8d		       86		      .byte.b	#$86	;  Trafic3 L
   2863  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2864  ff8f		       44		      .byte.b	#$44	;  Trafic4 L
   2865  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2866  ff91
   2867  ff91				   CarIdToSpriteAddressL
   2868  ff91		       45		      .byte.b	#<CarSprite0
   2869  ff92		       53		      .byte.b	#<CarSprite1
   2870  ff93		       61		      .byte.b	#<CarSprite2
   2871  ff94		       6f		      .byte.b	#<CarSprite3
   2872  ff95
   2873  ff95				   CarIdToSpriteAddressH
   2874  ff95		       ff		      .byte.b	#>CarSprite0
   2875  ff96		       ff		      .byte.b	#>CarSprite1
   2876  ff97		       ff		      .byte.b	#>CarSprite2
   2877  ff98		       ff		      .byte.b	#>CarSprite3
   2878  ff99
   2879  ff99				   EnemyCarIdToSpriteAddressL
   2880  ff99		       4d		      .byte.b	#<CarSprite0NoPadding
   2881  ff9a		       5b		      .byte.b	#<CarSprite1NoPadding
   2882  ff9b		       69		      .byte.b	#<CarSprite2NoPadding
   2883  ff9c		       77		      .byte.b	#<CarSprite3NoPadding
   2884  ff9d
   2885  ff9d				   EnemyCarIdToSpriteAddressH
   2886  ff9d		       ff		      .byte.b	#>CarSprite0NoPadding
   2887  ff9e		       ff		      .byte.b	#>CarSprite1NoPadding
   2888  ff9f		       ff		      .byte.b	#>CarSprite2NoPadding
   2889  ffa0		       ff		      .byte.b	#>CarSprite3NoPadding
   2890  ffa1
   2891  ffa1				   CarIdToAccelerateSpeed
   2892  ffa1		       80		      .byte.b	#128
   2893  ffa2		       c0		      .byte.b	#192
   2894  ffa3		       60		      .byte.b	#96
   2895  ffa4		       c0		      .byte.b	#192
   2896  ffa5
   2897  ffa5				   CarIdToTimeoverBreakInterval 		; Glide
   2898  ffa5		       03		      .byte.b	#%00000011	;Every 4 frames
   2899  ffa6		       03		      .byte.b	#%00000011	;Every 4 frames
   2900  ffa7		       0f		      .byte.b	#%00001111	;Every 16 frames
   2901  ffa8		       03		      .byte.b	#%00000011	;Every 4 frames
   2902  ffa9
   2903  ffa9				   CarIdToMaxSpeedL
   2904  ffa9		       80		      .byte.b	#$80
   2905  ffaa		       00		      .byte.b	#$00	; One less gear
   2906  ffab		       80		      .byte.b	#$80
   2907  ffac		       80		      .byte.b	#$80
   2908  ffad
   2909  ffad				   CarIdToMaxGear
   2910  ffad		       05		      .byte.b	#5
   2911  ffae		       04		      .byte.b	#4	; One less gear
   2912  ffaf		       05		      .byte.b	#5
   2913  ffb0		       05		      .byte.b	#5
   2914  ffb1
   2915  ffb1				   GearToBreakSpeedTable
   2916  ffb1		       09		      .byte.b	#(BREAK_SPEED - 1)
   2917  ffb2		       09		      .byte.b	#(BREAK_SPEED - 1)
   2918  ffb3		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2919  ffb4		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2920  ffb5		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2921  ffb6		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2922  ffb7
   2923  ffb7				   TrafficColorTable
   2924  ffb7		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2925  ffb8		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2926  ffb9		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2927  ffba		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2928  ffbb
   2929  ffbb				   TrafficChanceTable
   2930  ffbb		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2931  ffbc		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2932  ffbd		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2933  ffbe		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2934  ffbf
   2935  ffbf				   TrafficTimeTable
   2936  ffbf		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2937  ffc0		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2938  ffc1		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2939  ffc2		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2940  ffc3		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2941  ffc4
   2942  ffc4
   2943  fffc					      org	$FFFC
   2944  fffc		       00 f0		      .word.w	BeforeStart
   2945  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
