------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 8c	   FrameCount0 =	$8C	;
    111  f000		       00 8d	   FrameCount1 =	$8D	;
    112  f000
    113  f000		       00 8e	   Player0SpeedL =	$8E
    114  f000		       00 8f	   Player0SpeedH =	$8F
    115  f000
    116  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    117  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    118  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    119  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    120  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    121  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    122  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    123  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    124  f000
    125  f000
    126  f000							;Temporary variables, multiple uses
    127  f000		       00 b0	   Tmp0       =	$B0
    128  f000		       00 b1	   Tmp1       =	$B1
    129  f000		       00 b2	   Tmp2       =	$B2
    130  f000		       00 b3	   Tmp3       =	$B3
    131  f000
    132  f000		       00 b4	   ScoreBcd0  =	$B4
    133  f000		       00 b5	   ScoreBcd1  =	$B5
    134  f000		       00 b6	   ScoreBcd2  =	$B6
    135  f000		       00 b7	   ScoreBcd3  =	$B7
    136  f000
    137  f000		       00 b8	   CollisionCounter =	$B8
    138  f000		       00 b9	   Player0X   =	$B9
    139  f000		       00 ba	   CountdownTimer =	$BA
    140  f000		       00 bb	   Traffic0Msb =	$BB
    141  f000		       00 bc	   SwitchDebounceCounter =	$BC
    142  f000
    143  f000		       00 bd	   TimeBcd0   =	$BD
    144  f000		       00 be	   TimeBcd1   =	$BE
    145  f000		       00 bf	   TimeBcd2   =	$BF
    146  f000
    147  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    148  f000		       00 c1	   TrafficChance =	$C1
    149  f000		       00 c2	   CheckpointTime =	$C2
    150  f000		       00 c3	   TrafficColor =	$C3
    151  f000		       00 c4	   CurrentDifficulty =	$C4
    152  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    153  f000							;Bit 2 speed delta, Bit 3 random traffic 
    154  f000
    155  f000
    156  f000		       00 ca	   BorderType =	$CA
    157  f000
    158  f000		       00 cb	   HitCountBcd0 =	$CB
    159  f000		       00 cc	   HitCountBcd1 =	$CC
    160  f000
    161  f000		       00 cd	   GlideTimeBcd0 =	$CD
    162  f000		       00 ce	   GlideTimeBcd1 =	$CE
    163  f000
    164  f000		       00 cf	   OneSecondConter =	$CF
    165  f000
    166  f000		       00 d0	   ScoreD0    =	$D0
    167  f000		       00 d1	   ScoreD1    =	$D1
    168  f000		       00 d2	   ScoreD2    =	$D2
    169  f000		       00 d3	   ScoreD3    =	$D3
    170  f000		       00 d4	   ScoreD4    =	$D4
    171  f000		       00 d5	   ScoreFontColor =	$D5
    172  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    173  f000		       00 d7	   NextCheckpoint =	$D7
    174  f000
    175  f000		       00 d8	   OpponentLine =	$D8
    176  f000
    177  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    178  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    179  f000
    180  f000		       00 db	   CheckpointBcd0 =	$DB
    181  f000		       00 dc	   CheckpointBcd1 =	$DC
    182  f000		       00 dd	   StartSWCHB =	$DD	; Used for Score, so it cannot be cheated.
    183  f000		       00 de	   CarSpritePointerL =	$DE
    184  f000		       00 df	   CarSpritePointerH =	$DF
    185  f000		       00 f0	   CurrentCarId =	$F0
    186  f000		       00 f1	   AccelerateBuffer =	$F1	; Change speed on buffer overflow.
    187  f000		       00 f2	   TextSide   =	$F2
    188  f000		       00 f3	   TextFlickerMode =	$F3
    189  f000		       00 f4	   Gear       =	$F4
    190  f000
    191  f000
    192  f000							;generic start up stuff, put zero in almost all...
    193  f000				   BeforeStart		;All variables that are kept on game reset or select
    194  f000		       a0 00		      LDY	#0
    195  f002		       84 bc		      STY	SwitchDebounceCounter
    196  f004		       84 c4		      STY	CurrentDifficulty
    197  f006		       84 c0		      STY	GameStatus
    198  f008		       a0 10		      LDY	#16
    199  f00a		       84 c5		      STY	GameMode
    200  f00c		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    201  f00e		       84 f0		      STY	CurrentCarId
    202  f010
    203  f010				   Start
    204  f010		       a9 02		      LDA	#2
    205  f012		       85 00		      STA	VSYNC
    206  f014		       85 02		      STA	WSYNC
    207  f016		       85 02		      STA	WSYNC
    208  f018		       85 02		      STA	WSYNC
    209  f01a		       a9 00		      LDA	#0	;2
    210  f01c		       85 00		      STA	VSYNC	;3
    211  f01e
    212  f01e		       78		      SEI
    213  f01f		       d8		      CLD
    214  f020		       a2 ff		      LDX	#$FF
    215  f022		       9a		      TXS
    216  f023
    217  f023		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    218  f025				   CleanMem
    219  f025		       e0 bc		      CPX	#SwitchDebounceCounter
    220  f027		       f0 12		      BEQ	SkipClean
    221  f029		       e0 c5		      CPX	#GameMode
    222  f02b		       f0 0e		      BEQ	SkipClean
    223  f02d		       e0 f0		      CPX	#CurrentCarId
    224  f02f		       f0 0a		      BEQ	SkipClean
    225  f031		       e0 c4		      CPX	#CurrentDifficulty
    226  f033		       f0 06		      BEQ	SkipClean
    227  f035		       e0 c0		      CPX	#GameStatus
    228  f037		       f0 02		      BEQ	SkipClean
    229  f039		       95 00		      STA	0,X
    230  f03b				   SkipClean
    231  f03b		       e8		      INX
    232  f03c		       d0 e7		      BNE	CleanMem
    233  f03e
    234  f03e		       a9 d5		      LDA	#213
    235  f040		       8d 96 02 	      STA	TIM64T	;3	
    236  f043
    237  f043							;Setting some variables...
    238  f043
    239  f043				   SettingTrafficOffsets		; Time sensitive with player H position
    240  f043		       85 02		      STA	WSYNC	;We will set player position
    241  f045		       20 6b f8 	      JSR	DefaultOffsets
    242  f048
    243  f048		       85 10		      STA	RESP0	; Not Correct yet
    244  f04a
    245  f04a		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    246  f04d		       85 8e		      STA	Player0SpeedL
    247  f04f
    248  f04f							;SLEEP 11;18
    249  f04f
    250  f04f
    251  f04f		       a2 00		      LDX	#0
    252  f051		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    253  f054		       85 dd		      STA	StartSWCHB	; For game over
    254  f056		       29 c0		      AND	#%11000000
    255  f058		       f0 0b		      BEQ	CallConfigureDifficulty
    256  f05a		       e8		      INX
    257  f05b		       c9 80		      CMP	#%10000000
    258  f05d		       f0 06		      BEQ	CallConfigureDifficulty
    259  f05f		       e8		      INX
    260  f060		       c9 40		      CMP	#%01000000
    261  f062		       f0 01		      BEQ	CallConfigureDifficulty
    262  f064		       e8		      INX
    263  f065
    264  f065				   CallConfigureDifficulty
    265  f065		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    266  f067		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    267  f069		       a5 c0		      LDA	GameStatus
    268  f06b		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    269  f06d				   NextCar
    270  f06d		       a4 f0		      LDY	CurrentCarId
    271  f06f		       c8		      INY
    272  f070		       98		      TYA
    273  f071		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    274  f073		       85 f0		      STA	CurrentCarId
    275  f075				   StoreCurrentDifficulty
    276  f075		       86 c4		      STX	CurrentDifficulty
    277  f077		       20 40 f8 	      JSR	ConfigureDifficulty
    278  f07a
    279  f07a				   ConfigureCarSprite
    280  f07a		       a4 f0		      LDY	CurrentCarId
    281  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
    282  f07f		       85 de		      STA	CarSpritePointerL
    283  f081		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
    284  f084		       85 df		      STA	CarSpritePointerH
    285  f086
    286  f086				   ConfigureEnemyCarSprite
    287  f086		       a4 f0		      LDY	CurrentCarId
    288  f088		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
    289  f08b		       85 d9		      STA	EnemyCarSpritePointerL
    290  f08d		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
    291  f090		       85 da		      STA	EnemyCarSpritePointerH
    292  f092
    293  f092				   SetGameNotRunning
    294  f092		       a9 00		      LDA	#0
    295  f094		       85 c0		      STA	GameStatus
    296  f096
    297  f096				   ConfigureOneSecondTimer
    298  f096		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    299  f098		       85 cf		      STA	OneSecondConter
    300  f09a
    301  f09a				   ConfigureTimer
    302  f09a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    303  f09c		       85 ba		      STA	CountdownTimer	;3
    304  f09e
    305  f09e				   HPositioning 		; Avoid sleep doing needed stuff
    306  f09e		       85 02		      STA	WSYNC
    307  f0a0
    308  f0a0				   ConfigurePlayerXPosition
    309  f0a0		       a9 35		      LDA	#PLAYER_0_X_START	;2
    310  f0a2		       85 b9		      STA	Player0X	;3
    311  f0a4
    312  f0a4				   ConfigureMissileSize
    313  f0a4		       a9 30		      LDA	#%00110000	;2 Missile Size
    314  f0a6		       85 04		      STA	NUSIZ0	;3
    315  f0a8		       85 05		      STA	NUSIZ1	;3
    316  f0aa
    317  f0aa				   ConfigureNextCheckpoint
    318  f0aa		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    319  f0ac		       85 d7		      STA	NextCheckpoint
    320  f0ae
    321  f0ae		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0b0					      SLEEP	5	;
      1  f0b0				   .CYCLES    SET	5
      2  f0b0
      3  f0b0				  -	      IF	.CYCLES < 2
      4  f0b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b0				  -	      ERR
      6  f0b0					      ENDIF
      7  f0b0
      8  f0b0					      IF	.CYCLES & 1
      9  f0b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b0				  -	      nop	0
     11  f0b0					      ELSE
     12  f0b0		       24 00		      bit	VSYNC
     13  f0b2					      ENDIF
     14  f0b2				   .CYCLES    SET	.CYCLES - 3
     15  f0b2					      ENDIF
     16  f0b2
     17  f0b2					      REPEAT	.CYCLES / 2
     18  f0b2		       ea		      nop
     19  f0b3					      REPEND
    323  f0b3		       85 12		      STA	RESM0
      0  f0b5					      SLEEP	2	;
      1  f0b5				   .CYCLES    SET	2
      2  f0b5
      3  f0b5				  -	      IF	.CYCLES < 2
      4  f0b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b5				  -	      ERR
      6  f0b5					      ENDIF
      7  f0b5
      8  f0b5				  -	      IF	.CYCLES & 1
      9  f0b5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b5				  -	      nop	0
     11  f0b5				  -	      ELSE
     12  f0b5				  -	      bit	VSYNC
     13  f0b5				  -	      ENDIF
     14  f0b5				  -.CYCLES    SET	.CYCLES - 3
     15  f0b5					      ENDIF
     16  f0b5
     17  f0b5					      REPEAT	.CYCLES / 2
     18  f0b5		       ea		      nop
     19  f0b6					      REPEND
    325  f0b6		       85 14		      STA	RESBL
      0  f0b8					      SLEEP	2
      1  f0b8				   .CYCLES    SET	2
      2  f0b8
      3  f0b8				  -	      IF	.CYCLES < 2
      4  f0b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b8				  -	      ERR
      6  f0b8					      ENDIF
      7  f0b8
      8  f0b8				  -	      IF	.CYCLES & 1
      9  f0b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b8				  -	      nop	0
     11  f0b8				  -	      ELSE
     12  f0b8				  -	      bit	VSYNC
     13  f0b8				  -	      ENDIF
     14  f0b8				  -.CYCLES    SET	.CYCLES - 3
     15  f0b8					      ENDIF
     16  f0b8
     17  f0b8					      REPEAT	.CYCLES / 2
     18  f0b8		       ea		      nop
     19  f0b9					      REPEND
    327  f0b9		       85 13		      STA	RESM1
    328  f0bb		       85 11		      STA	RESP1
    329  f0bd
    330  f0bd		       a9 f0		      LDA	#$F0
    331  f0bf		       85 24		      STA	HMBL
    332  f0c1		       85 22		      STA	HMM0
    333  f0c3		       85 23		      STA	HMM1
    334  f0c5		       85 02		      STA	WSYNC
    335  f0c7		       85 2a		      STA	HMOVE
    336  f0c9		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    337  f0cb		       85 2b		      STA	HMCLR
    338  f0cd
    339  f0cd				   WaitResetToEnd
    340  f0cd		       ad 84 02 	      LDA	INTIM
    341  f0d0		       d0 fb		      BNE	WaitResetToEnd
    342  f0d2
    343  f0d2				   MainLoop
    344  f0d2		       a9 02		      LDA	#2
    345  f0d4		       85 00		      STA	VSYNC
    346  f0d6		       85 02		      STA	WSYNC
    347  f0d8		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    348  f0da				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    349  f0da		       a9 01		      LDA	#%00000001	;3
    350  f0dc		       24 f3		      BIT	TextFlickerMode	;2
    351  f0de		       f0 05		      BEQ	TextSideFrameZero	;2
    352  f0e0		       25 8d		      AND	FrameCount1	;2
    353  f0e2		       4c e7 f0 	      JMP	StoreTextSize	;3
    354  f0e5				   TextSideFrameZero
    355  f0e5		       25 8c		      AND	FrameCount0	;2
    356  f0e7				   StoreTextSize
    357  f0e7		       85 f2		      STA	TextSide	;3
    358  f0e9
    359  f0e9				   PrepareMaxHMove
      0  f0e9					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e9				   .CYCLES    SET	18
      2  f0e9
      3  f0e9				  -	      IF	.CYCLES < 2
      4  f0e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e9				  -	      ERR
      6  f0e9					      ENDIF
      7  f0e9
      8  f0e9				  -	      IF	.CYCLES & 1
      9  f0e9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e9				  -	      nop	0
     11  f0e9				  -	      ELSE
     12  f0e9				  -	      bit	VSYNC
     13  f0e9				  -	      ENDIF
     14  f0e9				  -.CYCLES    SET	.CYCLES - 3
     15  f0e9					      ENDIF
     16  f0e9
     17  f0e9					      REPEAT	.CYCLES / 2
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     17  f0eb					      REPEND
     18  f0ec		       ea		      nop
     17  f0ec					      REPEND
     18  f0ed		       ea		      nop
     17  f0ed					      REPEND
     18  f0ee		       ea		      nop
     17  f0ee					      REPEND
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     19  f0f2					      REPEND
    361  f0f2		       a9 80		      LDA	#$80
    362  f0f4		       85 24		      STA	HMBL
    363  f0f6		       85 22		      STA	HMM0
    364  f0f8		       85 23		      STA	HMM1
    365  f0fa		       85 20		      STA	HMP0
    366  f0fc		       85 21		      STA	HMP1
    367  f0fe		       85 02		      STA	WSYNC
    368  f100		       85 2a		      STA	HMOVE	; 1/10			
    369  f102
    370  f102				   ConfigVBlankTimer
    371  f102		       a5 c5		      LDA	GameMode
    372  f104		       c9 10		      CMP	#MAX_GAME_MODE
    373  f106		       f0 05		      BEQ	SetVblankTimerQrCode
    374  f108		       a9 29		      LDA	#VBLANK_TIMER
    375  f10a		       4c 0f f1 	      JMP	SetVblankTimer
    376  f10d				   SetVblankTimerQrCode
    377  f10d		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    378  f10f
    379  f10f				   SetVblankTimer
    380  f10f		       85 02		      STA	WSYNC	;3
    381  f111		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    382  f113		       8d 96 02 	      STA	TIM64T	;3	
    383  f116		       a9 00		      LDA	#0	;2
    384  f118		       85 00		      STA	VSYNC	;3	
    385  f11a
    386  f11a				   RandomizeGame
    387  f11a		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    388  f11c		       d0 2d		      BNE	EndRandomizeGame
    389  f11e		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    390  f120		       29 02		      AND	#%00000010
    391  f122		       f0 24		      BEQ	DeterministicGame
    392  f124		       a6 96		      LDX	TrafficOffset1 + 2
    393  f126		       bd 00 fe 	      LDA	AesTable,X
    394  f129		       45 8c		      EOR	FrameCount0
    395  f12b		       85 96		      STA	TrafficOffset1 + 2
    396  f12d		       85 a6		      STA	OpTrafficOffset1 + 2
    397  f12f		       a6 9a		      LDX	TrafficOffset2 + 2
    398  f131		       bd 00 fe 	      LDA	AesTable,X
    399  f134		       45 8c		      EOR	FrameCount0
    400  f136		       85 9a		      STA	TrafficOffset2 + 2
    401  f138		       85 aa		      STA	OpTrafficOffset2 + 2
    402  f13a		       a6 9e		      LDX	TrafficOffset3 + 2
    403  f13c		       bd 00 fe 	      LDA	AesTable,X
    404  f13f		       45 8c		      EOR	FrameCount0
    405  f141		       85 9e		      STA	TrafficOffset3 + 2
    406  f143		       85 ae		      STA	OpTrafficOffset3 + 2
    407  f145		       4c 4b f1 	      JMP	EndRandomizeGame
    408  f148
    409  f148				   DeterministicGame
    410  f148		       20 6b f8 	      JSR	DefaultOffsets
    411  f14b
    412  f14b				   EndRandomizeGame
    413  f14b
    414  f14b							; Move this in the code and save cycles, for some reason spliting is breaking...
    415  f14b		       a2 08		      LDX	#8
    416  f14d				   BurnAllHMove
    417  f14d		       85 02		      STA	WSYNC	;3
    418  f14f		       85 2a		      STA	HMOVE	; 3/10 
    419  f151		       ca		      DEX
    420  f152		       d0 f9		      BNE	BurnAllHMove
    421  f154		       85 02		      STA	WSYNC	;3
    422  f156		       85 2b		      STA	HMCLR	; 
    423  f158
    424  f158				   CountFrame
    425  f158		       e6 8c		      INC	FrameCount0	; 5
    426  f15a		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    427  f15c		       e6 8d		      INC	FrameCount1	; 5 
    428  f15e				   SkipIncFC1
    429  f15e
    430  f15e				   CallDrawQrCode
    431  f15e		       a5 c5		      LDA	GameMode
    432  f160		       c9 10		      CMP	#MAX_GAME_MODE
    433  f162		       d0 03		      BNE	TestIsGameRunning
    434  f164		       4c 64 fc 	      JMP	DrawQrCode
    435  f167
    436  f167							;Does not update the game if not running
    437  f167				   TestIsGameRunning
    438  f167		       a5 c0		      LDA	GameStatus	;3
    439  f169		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    440  f16b		       4c 33 f3 	      JMP	SkipUpdateLogic
    441  f16e				   ContinueWithGameLogic
    442  f16e
    443  f16e				   EverySecond		; 64 frames to be more precise
    444  f16e		       a9 3f		      LDA	#%00111111
    445  f170		       25 8c		      AND	FrameCount0
    446  f172		       d0 06		      BNE	SkipEverySecondAction
    447  f174		       c5 ba		      CMP	CountdownTimer
    448  f176		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    449  f178		       c6 ba		      DEC	CountdownTimer
    450  f17a				   SkipEverySecondAction
    451  f17a
    452  f17a				   ChangeTextFlickerMode
    453  f17a		       a5 bc		      LDA	SwitchDebounceCounter
    454  f17c		       d0 0d		      BNE	EndChangeTextFlickerMode
    455  f17e		       ad 82 02 	      LDA	SWCHB
    456  f181		       29 02		      AND	#%00000010	;Game select
    457  f183		       d0 06		      BNE	EndChangeTextFlickerMode
    458  f185		       e6 f3		      INC	TextFlickerMode
    459  f187		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    460  f189		       85 bc		      STA	SwitchDebounceCounter
    461  f18b				   EndChangeTextFlickerMode
    462  f18b
    463  f18b				   BreakOnTimeOver		; Uses LDX as the breaking speed
    464  f18b		       a2 00		      LDX	#0
    465  f18d		       a5 ba		      LDA	CountdownTimer
    466  f18f		       d0 0b		      BNE	Break
    467  f191		       a4 f0		      LDY	CurrentCarId
    468  f193		       a5 8c		      LDA	FrameCount0
    469  f195		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    470  f198		       d0 02		      BNE	Break
    471  f19a		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    472  f19c
    473  f19c				   Break
    474  f19c		       a9 20		      LDA	#%00100000	;Down in controller
    475  f19e		       2c 80 02 	      BIT	SWCHA
    476  f1a1		       d0 0e		      BNE	BreakNonZero
    477  f1a3		       a5 0c		      LDA	INPT4	;3
    478  f1a5		       10 08		      BPL	BreakWhileAccelerating
    479  f1a7		       a4 f4		      LDY	Gear
    480  f1a9		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    481  f1ac		       4c b1 f1 	      JMP	BreakNonZero
    482  f1af				   BreakWhileAccelerating		; Allow better control while breaking.
    483  f1af		       a2 05		      LDX	(#BREAK_SPEED / 2)
    484  f1b1
    485  f1b1				   BreakNonZero
    486  f1b1		       e0 00		      CPX	#0
    487  f1b3		       f0 2b		      BEQ	SkipBreak
    488  f1b5		       86 b0		      STX	Tmp0
    489  f1b7
    490  f1b7				   DecreaseSpeed
    491  f1b7		       38		      SEC
    492  f1b8		       a5 8e		      LDA	Player0SpeedL
    493  f1ba		       e5 b0		      SBC	Tmp0
    494  f1bc		       85 8e		      STA	Player0SpeedL
    495  f1be		       a5 8f		      LDA	Player0SpeedH
    496  f1c0		       e9 00		      SBC	#0
    497  f1c2		       85 8f		      STA	Player0SpeedH
    498  f1c4
    499  f1c4				   CheckMinSpeed
    500  f1c4		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    501  f1c6		       c9 00		      CMP	#CAR_MIN_SPEED_H
    502  f1c8		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    503  f1ca		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    504  f1cc
    505  f1cc				   CompareLBreakSpeed
    506  f1cc		       a5 8e		      LDA	Player0SpeedL
    507  f1ce		       c9 00		      CMP	#CAR_MIN_SPEED_L
    508  f1d0		       90 03		      BCC	ResetMinSpeed	; Less than memory
    509  f1d2		       4c dd f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    510  f1d5
    511  f1d5				   ResetMinSpeed
    512  f1d5		       a9 00		      LDA	#CAR_MIN_SPEED_H
    513  f1d7		       85 8f		      STA	Player0SpeedH
    514  f1d9		       a9 00		      LDA	#CAR_MIN_SPEED_L
    515  f1db		       85 8e		      STA	Player0SpeedL
    516  f1dd
    517  f1dd				   SkipAccelerateIfBreaking
    518  f1dd		       4c 22 f2 	      JMP	SkipAccelerate
    519  f1e0				   SkipBreak
    520  f1e0
    521  f1e0				   Acelerates
    522  f1e0		       a5 ba		      LDA	CountdownTimer
    523  f1e2		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    524  f1e4
    525  f1e4				   ContinueAccelerateTest
    526  f1e4		       a5 0c		      LDA	INPT4	;3
    527  f1e6		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    528  f1e8		       a9 10		      LDA	#%00010000	;UP in controller
    529  f1ea		       2c 80 02 	      BIT	SWCHA
    530  f1ed		       d0 33		      BNE	SkipAccelerate
    531  f1ef
    532  f1ef				   IncreaseCarSpeed
    533  f1ef		       a2 02		      LDX	#2
    534  f1f1		       a4 f0		      LDY	CurrentCarId
    535  f1f3				   IncreaseCarSpeedLoop
    536  f1f3							;Adds speed
    537  f1f3		       18		      CLC
    538  f1f4		       a5 f1		      LDA	AccelerateBuffer
    539  f1f6		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    540  f1f9		       85 f1		      STA	AccelerateBuffer
    541  f1fb		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    542  f1fd		       e6 8e		      INC	Player0SpeedL
    543  f1ff		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    544  f201		       e6 8f		      INC	Player0SpeedH
    545  f203				   ContinueIncreaseSpeedLoop
    546  f203		       ca		      DEX
    547  f204		       d0 ed		      BNE	IncreaseCarSpeedLoop
    548  f206				   SkipIncreaseCarSpeed
    549  f206
    550  f206				   CheckIfAlreadyMaxSpeed
    551  f206		       a5 8f		      LDA	Player0SpeedH
    552  f208		       c9 02		      CMP	#CAR_MAX_SPEED_H
    553  f20a		       90 16		      BCC	SkipAccelerate	; less than my max speed
    554  f20c		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    555  f20e							;High bit is max, compare the low
    556  f20e		       a4 f0		      LDY	CurrentCarId
    557  f210		       a5 8e		      LDA	Player0SpeedL
    558  f212		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    559  f215		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    560  f217							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    561  f217
    562  f217				   ResetToMaxSpeed		; Speed is more, or is already max
    563  f217		       a9 02		      LDA	#CAR_MAX_SPEED_H
    564  f219		       85 8f		      STA	Player0SpeedH
    565  f21b		       a4 f0		      LDY	CurrentCarId
    566  f21d		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    567  f220		       85 8e		      STA	Player0SpeedL
    568  f222				   SkipAccelerate
    569  f222
    570  f222				   InitUpdateOffsets
    571  f222		       a2 00		      LDX	#0	; Memory Offset 24 bit
    572  f224		       a0 00		      LDY	#0	; Line Speeds 16 bits
    573  f226		       a5 91		      LDA	TrafficOffset0 + 1	;
    574  f228		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    575  f22a		       a5 c5		      LDA	GameMode
    576  f22c		       29 04		      AND	#%00000100	; GameModes with high delta
    577  f22e		       f0 02		      BEQ	UpdateOffsets
    578  f230		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    579  f232
    580  f232				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    581  f232		       38		      SEC
    582  f233		       a5 8e		      LDA	Player0SpeedL
    583  f235		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    584  f238		       85 b0		      STA	Tmp0
    585  f23a		       c8		      INY
    586  f23b		       a5 8f		      LDA	Player0SpeedH
    587  f23d		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    588  f240		       85 b1		      STA	Tmp1
    589  f242		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    590  f244		       e9 00		      SBC	#0
    591  f246		       85 b2		      STA	Tmp2
    592  f248
    593  f248				   AddsTheResult
    594  f248		       18		      CLC
    595  f249		       a5 b0		      LDA	Tmp0
    596  f24b		       75 90		      ADC	TrafficOffset0,X
    597  f24d		       95 90		      STA	TrafficOffset0,X
    598  f24f		       e8		      INX
    599  f250		       a5 b1		      LDA	Tmp1
    600  f252		       75 90		      ADC	TrafficOffset0,X
    601  f254		       95 90		      STA	TrafficOffset0,X
    602  f256		       e8		      INX
    603  f257		       a5 b2		      LDA	Tmp2	; Carry
    604  f259		       75 90		      ADC	TrafficOffset0,X
    605  f25b		       95 90		      STA	TrafficOffset0,X
    606  f25d		       90 06		      BCC	CalculateOffsetCache
    607  f25f		       e0 02		      CPX	#2	;MSB offset 0
    608  f261		       d0 02		      BNE	CalculateOffsetCache
    609  f263		       e6 bb		      INC	Traffic0Msb
    610  f265
    611  f265				   CalculateOffsetCache
    612  f265		       e8		      INX
    613  f266		       38		      SEC
    614  f267		       69 00		      ADC	#0	;Increment by one
    615  f269		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    616  f26b
    617  f26b				   PrepareNextUpdateLoop
    618  f26b		       c8		      INY
    619  f26c		       e8		      INX
    620  f26d		       e0 10		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    621  f26f		       d0 c1		      BNE	UpdateOffsets
    622  f271
    623  f271				   ConfigureOpponentLine		; Temporary
    624  f271		       a9 05		      LDA	#5	; Extract to constant
    625  f273		       85 d8		      STA	OpponentLine
    626  f275
    627  f275				   BcdScore		; 48
    628  f275		       a5 91		      LDA	TrafficOffset0 + 1	;3
    629  f277		       45 b3		      EOR	Tmp3	;3
    630  f279		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    631  f27b		       f0 1b		      BEQ	FinishBcdScore	;2
    632  f27d
    633  f27d				   ContinueBcdScore
    634  f27d		       f8		      SED		;2
    635  f27e		       18		      CLC		;2
    636  f27f		       a5 b4		      LDA	ScoreBcd0	;3
    637  f281		       69 01		      ADC	#1	;2
    638  f283		       85 b4		      STA	ScoreBcd0	;3
    639  f285		       a5 b5		      LDA	ScoreBcd1	;3
    640  f287		       69 00		      ADC	#0	;2
    641  f289		       85 b5		      STA	ScoreBcd1	;3
    642  f28b		       a5 b6		      LDA	ScoreBcd2	;3
    643  f28d		       69 00		      ADC	#0	;2
    644  f28f		       85 b6		      STA	ScoreBcd2	;3
    645  f291		       a5 b7		      LDA	ScoreBcd3	;3
    646  f293		       69 00		      ADC	#0	;2
    647  f295		       85 b7		      STA	ScoreBcd3	;3
    648  f297		       d8		      CLD		;2
    649  f298				   FinishBcdScore
    650  f298
    651  f298							;Until store the movemnt, LDX contains the value to be stored.
    652  f298				   TestCollision		;
    653  f298							; see if player0 colides with the rest
    654  f298		       a5 00		      LDA	CXM0P
    655  f29a		       05 01		      ORA	CXM1P
    656  f29c		       05 01		      ORA	CXM1P
    657  f29e		       05 02		      ORA	CXP0FB
    658  f2a0		       05 07		      ORA	CXPPMM
    659  f2a2		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    660  f2a4		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    661  f2a6		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    662  f2a8		       d0 3a		      BNE	NoCollision
    663  f2aa		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    664  f2ac		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    665  f2ae		       f0 34		      BEQ	NoCollision
    666  f2b0		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    667  f2b2		       f0 30		      BEQ	NoCollision
    668  f2b4		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    669  f2b6		       85 b8		      STA	CollisionCounter	;and store as colision.
    670  f2b8				   CountBcdColision
    671  f2b8		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    672  f2ba		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    673  f2bc		       f0 1d		      BEQ	SkipSetColisionSpeedL
    674  f2be		       f8		      SED		;2
    675  f2bf		       18		      CLC		;2
    676  f2c0		       a5 cb		      LDA	HitCountBcd0	;3
    677  f2c2		       69 01		      ADC	#1	;3
    678  f2c4		       85 cb		      STA	HitCountBcd0	;3
    679  f2c6		       a5 cc		      LDA	HitCountBcd1	;3
    680  f2c8		       69 00		      ADC	#0	;2
    681  f2ca		       85 cc		      STA	HitCountBcd1	;3
    682  f2cc		       d8		      CLD		;2
    683  f2cd				   EndCountBcdColision
    684  f2cd		       a5 8f		      LDA	Player0SpeedH
    685  f2cf		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    686  f2d1		       a9 10		      LDA	#COLLISION_SPEED_L
    687  f2d3		       c5 8e		      CMP	Player0SpeedL
    688  f2d5		       b0 04		      BCS	SkipSetColisionSpeedL
    689  f2d7				   SetColisionSpeedL
    690  f2d7		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    691  f2d9		       85 8e		      STA	Player0SpeedL
    692  f2db				   SkipSetColisionSpeedL
    693  f2db		       a9 00		      LDA	#0
    694  f2dd		       85 8f		      STA	Player0SpeedH
    695  f2df		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    696  f2e1		       4c 2f f3 	      JMP	StoreHMove	; We keep position consistent
    697  f2e4				   NoCollision
    698  f2e4
    699  f2e4				   DecrementCollision
    700  f2e4		       a4 b8		      LDY	CollisionCounter
    701  f2e6		       f0 07		      BEQ	FinishDecrementCollision
    702  f2e8		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    703  f2ea		       85 04		      STA	NUSIZ0
    704  f2ec		       88		      DEY
    705  f2ed		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    706  f2ef				   FinishDecrementCollision
    707  f2ef
    708  f2ef				   ResetPlayerSize
    709  f2ef		       d0 04		      BNE	FinishResetPlayerSize
    710  f2f1		       a9 30		      LDA	#%00110000
    711  f2f3		       85 04		      STA	NUSIZ0	;
    712  f2f5				   FinishResetPlayerSize
    713  f2f5
    714  f2f5							;STA HMCLR ; Do not double move car.
    715  f2f5
    716  f2f5				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    717  f2f5		       c0 01		      CPY	#1	; Last frame before reset
    718  f2f7		       d0 05		      BNE	SkipResetPlayerPosition
    719  f2f9		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    720  f2fb		       4c 2f f3 	      JMP	StoreHMove
    721  f2fe				   SkipResetPlayerPosition
    722  f2fe
    723  f2fe				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    724  f2fe		       a5 f0		      LDA	CurrentCarId
    725  f300		       c9 03		      CMP	#CAR_ID_DRAGSTER
    726  f302		       d0 08		      BNE	PrepareReadXAxis
    727  f304		       a2 00		      LDX	#0
    728  f306		       a5 8c		      LDA	FrameCount0
    729  f308		       29 01		      AND	#DRAGSTER_TURN_MASK
    730  f30a		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    731  f30c
    732  f30c							; for left and right, we're gonna 
    733  f30c							; set the horizontal speed, and then do
    734  f30c							; a single HMOVE.  We'll use X to hold the
    735  f30c							; horizontal speed, then store it in the 
    736  f30c							; appropriate register
    737  f30c				   PrepareReadXAxis
    738  f30c		       a2 00		      LDX	#0
    739  f30e		       a4 b9		      LDY	Player0X
    740  f310				   BeginReadLeft
    741  f310		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    742  f312		       a9 40		      LDA	#%01000000	;Left
    743  f314		       2c 80 02 	      BIT	SWCHA
    744  f317		       d0 07		      BNE	SkipMoveLeft
    745  f319		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    746  f31b		       c6 b9		      DEC	Player0X
    747  f31d		       4c 2f f3 	      JMP	StoreHMove	; Cannot move left and right...
    748  f320				   SkipMoveLeft
    749  f320				   BeginReadRight
    750  f320		       c0 36		      CPY	#PLAYER_0_MAX_X
    751  f322		       f0 0b		      BEQ	SkipMoveRight	; At max already
    752  f324		       a9 80		      LDA	#%10000000	;Right
    753  f326		       2c 80 02 	      BIT	SWCHA
    754  f329		       d0 04		      BNE	SkipMoveRight
    755  f32b		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    756  f32d		       e6 b9		      INC	Player0X
    757  f32f				   SkipMoveRight
    758  f32f				   StoreHMove
    759  f32f		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    760  f331		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    761  f333
    762  f333				   SkipUpdateLogic		; Continue here if not paused
    763  f333
    764  f333				   CalculateGear
    765  f333		       a5 8e		      LDA	Player0SpeedL	;3
    766  f335		       29 80		      AND	#%10000000	;2
    767  f337		       05 8f		      ORA	Player0SpeedH	;3
    768  f339		       18		      CLC		;2
    769  f33a		       2a		      ROL		;2
    770  f33b		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    771  f33d		       85 f4		      STA	Gear
    772  f33f
    773  f33f				   EndProcessingBorder
    774  f33f
    775  f33f				   ProcessScoreFontColor
    776  f33f		       a6 d6		      LDX	ScoreFontColorHoldChange
    777  f341		       f0 06		      BEQ	ResetScoreFontColor
    778  f343		       ca		      DEX
    779  f344		       86 d6		      STX	ScoreFontColorHoldChange
    780  f346		       4c 4d f3 	      JMP	SkipScoreFontColor
    781  f349				   ResetScoreFontColor
    782  f349		       a9 f9		      LDA	#SCORE_FONT_COLOR
    783  f34b		       85 d5		      STA	ScoreFontColor
    784  f34d				   SkipScoreFontColor
    785  f34d
    786  f34d				   IsGameOver
    787  f34d		       a5 ba		      LDA	CountdownTimer
    788  f34f		       05 8e		      ORA	Player0SpeedL
    789  f351		       05 8f		      ORA	Player0SpeedH
    790  f353		       d0 0b		      BNE	IsCheckpoint
    791  f355		       a9 01		      LDA	#1
    792  f357		       85 d6		      STA	ScoreFontColorHoldChange
    793  f359		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    794  f35b		       85 d5		      STA	ScoreFontColor
    795  f35d		       4c a1 f3 	      JMP	SkipIsTimeOver
    796  f360
    797  f360				   IsCheckpoint
    798  f360		       a5 d7		      LDA	NextCheckpoint
    799  f362		       c5 92		      CMP	TrafficOffset0 + 2
    800  f364		       d0 2f		      BNE	SkipIsCheckpoint
    801  f366		       18		      CLC
    802  f367		       69 10		      ADC	#CHECKPOINT_INTERVAL
    803  f369		       85 d7		      STA	NextCheckpoint
    804  f36b		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    805  f36d		       85 d5		      STA	ScoreFontColor
    806  f36f		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    807  f371		       85 d6		      STA	ScoreFontColorHoldChange
    808  f373				   AddCheckpointBcd
    809  f373		       f8		      SED		;2
    810  f374		       18		      CLC		;2
    811  f375		       a5 db		      LDA	CheckpointBcd0	;3
    812  f377		       69 01		      ADC	#1	;3
    813  f379		       85 db		      STA	CheckpointBcd0	;3
    814  f37b		       a5 dc		      LDA	CheckpointBcd1	;3
    815  f37d		       69 00		      ADC	#0	;2
    816  f37f		       85 dc		      STA	CheckpointBcd1	;3
    817  f381		       d8		      CLD		;2
    818  f382				   EndCheckpointBcd
    819  f382		       a5 ba		      LDA	CountdownTimer
    820  f384		       18		      CLC
    821  f385		       65 c2		      ADC	CheckpointTime
    822  f387		       85 ba		      STA	CountdownTimer
    823  f389		       90 04		      BCC	JumpSkipTimeOver
    824  f38b		       a9 ff		      LDA	#$FF
    825  f38d		       85 ba		      STA	CountdownTimer	; Does not overflow!
    826  f38f				   JumpSkipTimeOver
    827  f38f		       20 31 f8 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    828  f392		       4c a1 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    829  f395				   SkipIsCheckpoint
    830  f395
    831  f395				   IsTimeOver
    832  f395		       a5 ba		      LDA	CountdownTimer
    833  f397		       d0 08		      BNE	SkipIsTimeOver
    834  f399		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    835  f39b		       85 d6		      STA	ScoreFontColorHoldChange
    836  f39d		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    837  f39f		       85 d5		      STA	ScoreFontColor
    838  f3a1				   SkipIsTimeOver
    839  f3a1
    840  f3a1				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
    841  f3a1		       a5 c0		      LDA	GameStatus	;3
    842  f3a3		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
    843  f3a5		       a5 d5		      LDA	ScoreFontColor	;3
    844  f3a7		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
    845  f3a9		       f0 30		      BEQ	EndExactlyEverySecond	;2
    846  f3ab		       c6 cf		      DEC	OneSecondConter	;5
    847  f3ad		       d0 2c		      BNE	EndExactlyEverySecond	;2
    848  f3af
    849  f3af		       f8		      SED		;2 BCD Operations after this point
    850  f3b0				   CountGlideTimeBcd
    851  f3b0		       a5 d5		      LDA	ScoreFontColor	;3
    852  f3b2		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
    853  f3b4		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
    854  f3b6		       18		      CLC		;2
    855  f3b7		       a5 cd		      LDA	GlideTimeBcd0	;3
    856  f3b9		       69 01		      ADC	#1	;3
    857  f3bb		       85 cd		      STA	GlideTimeBcd0	;3
    858  f3bd		       a5 ce		      LDA	GlideTimeBcd1	;3
    859  f3bf		       69 00		      ADC	#0	;2
    860  f3c1		       85 ce		      STA	GlideTimeBcd1	;3
    861  f3c3				   EndCountGlideTimeBcd
    862  f3c3				   IncreaseTotalTimerBcd
    863  f3c3		       18		      CLC		;2
    864  f3c4		       a5 bd		      LDA	TimeBcd0	;3
    865  f3c6		       69 01		      ADC	#1	;2
    866  f3c8		       85 bd		      STA	TimeBcd0	;3
    867  f3ca		       a5 be		      LDA	TimeBcd1	;3
    868  f3cc		       69 00		      ADC	#0	;2
    869  f3ce		       85 be		      STA	TimeBcd1	;3
    870  f3d0		       a5 bf		      LDA	TimeBcd2	;3
    871  f3d2		       69 00		      ADC	#0	;2
    872  f3d4		       85 bf		      STA	TimeBcd2	;3
    873  f3d6
    874  f3d6				   ResetOneSecondCounter
    875  f3d6		       d8		      CLD		;2
    876  f3d7		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
    877  f3d9		       85 cf		      STA	OneSecondConter	;3
    878  f3db
    879  f3db				   EndExactlyEverySecond
    880  f3db
    881  f3db				   PrintEasterEggCondition
    882  f3db		       a5 8d		      LDA	FrameCount1
    883  f3dd		       29 38		      AND	#%00111000
    884  f3df		       05 c0		      ORA	GameStatus
    885  f3e1		       c9 38		      CMP	#%00111000
    886  f3e3		       d0 06		      BNE	ChooseTextSide
    887  f3e5		       20 9e f8 	      JSR	PrintEasterEgg
    888  f3e8		       4c da f4 	      JMP	RightScoreWriteEnd
    889  f3eb
    890  f3eb							;Could be done during on vblank to save this comparisson time (before draw score), 
    891  f3eb							;but I am saving vblank cycles for now, in case of 2 players.
    892  f3eb				   ChooseTextSide		; 
    893  f3eb		       a5 f2		      LDA	TextSide	;3
    894  f3ed		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    895  f3ef		       4c 70 f4 	      JMP	RightScoreWrite
    896  f3f2
    897  f3f2				   LeftScoreWrite
    898  f3f2		       a5 d5		      LDA	ScoreFontColor
    899  f3f4		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    900  f3f6		       f0 4e		      BEQ	PrintCheckpoint
    901  f3f8		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    902  f3fa		       f0 52		      BEQ	PrintStartGame
    903  f3fc		       a5 c0		      LDA	GameStatus
    904  f3fe		       f0 56		      BEQ	PrintHellwayLeft
    905  f400				   WriteDistance		;Not optimized yet, ugly code.
    906  f400				   Digit0Distance
    907  f400		       a5 91		      LDA	TrafficOffset0 + 1	;3
    908  f402		       4a		      LSR		; 2
    909  f403		       4a		      LSR		; 2
    910  f404		       4a		      LSR		; 2
    911  f405		       4a		      LSR		; 2
    912  f406		       aa		      TAX		; 2
    913  f407		       bd be fd 	      LDA	FontLookup,X	;4
    914  f40a		       85 d3		      STA	ScoreD3	;3
    915  f40c
    916  f40c				   Digit1Distance
    917  f40c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    918  f40e		       29 0f		      AND	#%00001111	;2
    919  f410		       aa		      TAX		; 2
    920  f411		       bd be fd 	      LDA	FontLookup,X	;4 
    921  f414		       85 d2		      STA	ScoreD2	;3
    922  f416
    923  f416				   Digit2Distance
    924  f416		       a5 92		      LDA	TrafficOffset0 + 2	;3
    925  f418		       4a		      LSR		; 2
    926  f419		       4a		      LSR		; 2
    927  f41a		       4a		      LSR		; 2
    928  f41b		       4a		      LSR		; 2
    929  f41c		       aa		      TAX		; 2
    930  f41d		       bd be fd 	      LDA	FontLookup,X	;4
    931  f420		       85 d1		      STA	ScoreD1	;3
    932  f422
    933  f422				   Digit3Distance
    934  f422		       a5 bb		      LDA	Traffic0Msb	;3
    935  f424		       29 0f		      AND	#%00001111	;2
    936  f426		       aa		      TAX		; 2
    937  f427		       bd be fd 	      LDA	FontLookup,X	;4 
    938  f42a		       85 d0		      STA	ScoreD0	;3
    939  f42c
    940  f42c				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    941  f42c		       a5 bb		      LDA	Traffic0Msb
    942  f42e		       29 f0		      AND	#%11110000	;2
    943  f430		       d0 07		      BNE	DrawDistanceExtraDigit
    944  f432		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    945  f434		       85 d4		      STA	ScoreD4	;3
    946  f436		       4c 43 f4 	      JMP	EndDrawDistance
    947  f439				   DrawDistanceExtraDigit
    948  f439		       4a		      LSR		; 2
    949  f43a		       4a		      LSR		; 2
    950  f43b		       4a		      LSR		; 2
    951  f43c		       4a		      LSR		; 2
    952  f43d		       aa		      TAX		; 2
    953  f43e		       bd be fd 	      LDA	FontLookup,X	;4
    954  f441		       85 d4		      STA	ScoreD4	;3
    955  f443
    956  f443				   EndDrawDistance
    957  f443		       4c da f4 	      JMP	RightScoreWriteEnd	;3
    958  f446
    959  f446				   PrintCheckpoint
    960  f446		       a2 00		      LDX	#<CheckpointText
    961  f448		       20 80 f8 	      JSR	PrintStaticText
    962  f44b		       4c da f4 	      JMP	RightScoreWriteEnd	;3
    963  f44e				   PrintStartGame
    964  f44e		       a2 23		      LDX	#<GoText
    965  f450		       20 80 f8 	      JSR	PrintStaticText
    966  f453		       4c da f4 	      JMP	RightScoreWriteEnd	;3
    967  f456
    968  f456				   PrintHellwayLeft
    969  f456		       a5 8d		      LDA	FrameCount1
    970  f458		       29 01		      AND	#1
    971  f45a		       d0 05		      BNE	PrintCreditsLeft
    972  f45c		       a2 05		      LDX	#<HellwayLeftText
    973  f45e		       4c 63 f4 	      JMP	PrintGameMode
    974  f461				   PrintCreditsLeft
    975  f461		       a2 0f		      LDX	#<OpbText
    976  f463
    977  f463				   PrintGameMode
    978  f463		       20 80 f8 	      JSR	PrintStaticText
    979  f466		       a6 c5		      LDX	GameMode
    980  f468		       bd be fd 	      LDA	FontLookup,X	;4 
    981  f46b		       85 d0		      STA	ScoreD0	;3
    982  f46d		       4c da f4 	      JMP	RightScoreWriteEnd	;3
    983  f470
    984  f470				   RightScoreWrite
    985  f470		       a5 c0		      LDA	GameStatus
    986  f472		       f0 45		      BEQ	PrintHellwayRight
    987  f474		       a5 d5		      LDA	ScoreFontColor
    988  f476		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    989  f478		       f0 52		      BEQ	PrintGameOver
    990  f47a				   Digit0Timer
    991  f47a		       a5 ba		      LDA	CountdownTimer	;3
    992  f47c		       29 0f		      AND	#%00001111	;2
    993  f47e		       aa		      TAX		; 2
    994  f47f		       bd be fd 	      LDA	FontLookup,X	;4 
    995  f482		       85 d1		      STA	ScoreD1	;3
    996  f484
    997  f484				   Digit1Timer
    998  f484		       a5 ba		      LDA	CountdownTimer	;3
    999  f486		       4a		      LSR		; 2
   1000  f487		       4a		      LSR		; 2
   1001  f488		       4a		      LSR		; 2
   1002  f489		       4a		      LSR		; 2
   1003  f48a		       aa		      TAX		; 2
   1004  f48b		       bd be fd 	      LDA	FontLookup,X	;4
   1005  f48e		       85 d0		      STA	ScoreD0	;3
   1006  f490
   1007  f490		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1008  f492		       85 d2		      STA	ScoreD2	;3
   1009  f494
   1010  f494				   Digit0Speed
   1011  f494		       a5 8e		      LDA	Player0SpeedL
   1012  f496		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1013  f498		       4a		      LSR		; 2
   1014  f499		       4a		      LSR		; 2
   1015  f49a		       aa		      TAX		; 2
   1016  f49b		       bd be fd 	      LDA	FontLookup,X	;4
   1017  f49e		       85 d4		      STA	ScoreD4	;3
   1018  f4a0
   1019  f4a0				   Digit1Speed
   1020  f4a0		       a5 8e		      LDA	Player0SpeedL
   1021  f4a2		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1022  f4a4		       18		      CLC
   1023  f4a5		       2a		      ROL		;First goes into carry
   1024  f4a6		       2a		      ROL
   1025  f4a7		       2a		      ROL
   1026  f4a8		       85 b0		      STA	Tmp0
   1027  f4aa		       a5 8f		      LDA	Player0SpeedH
   1028  f4ac		       0a		      ASL
   1029  f4ad		       0a		      ASL
   1030  f4ae		       05 b0		      ORA	Tmp0
   1031  f4b0		       aa		      TAX		; 2
   1032  f4b1		       bd be fd 	      LDA	FontLookup,X	;4
   1033  f4b4		       85 d3		      STA	ScoreD3	;3
   1034  f4b6		       4c da f4 	      JMP	RightScoreWriteEnd
   1035  f4b9
   1036  f4b9				   PrintHellwayRight
   1037  f4b9		       a5 8d		      LDA	FrameCount1
   1038  f4bb		       29 01		      AND	#1
   1039  f4bd		       d0 05		      BNE	PrintCreditsRight
   1040  f4bf		       a2 0a		      LDX	#<HellwayRightText
   1041  f4c1		       4c c6 f4 	      JMP	PrintRightIntro
   1042  f4c4				   PrintCreditsRight
   1043  f4c4		       a2 14		      LDX	#<YearText
   1044  f4c6				   PrintRightIntro
   1045  f4c6		       20 80 f8 	      JSR	PrintStaticText
   1046  f4c9		       4c da f4 	      JMP	RightScoreWriteEnd
   1047  f4cc				   PrintGameOver
   1048  f4cc		       a5 8c		      LDA	FrameCount0
   1049  f4ce		       30 05		      BMI	PrintOverText
   1050  f4d0		       a2 19		      LDX	#<GameText
   1051  f4d2		       4c d7 f4 	      JMP	StoreGameOverText
   1052  f4d5				   PrintOverText
   1053  f4d5		       a2 1e		      LDX	#<OverText
   1054  f4d7				   StoreGameOverText
   1055  f4d7		       20 80 f8 	      JSR	PrintStaticText
   1056  f4da				   RightScoreWriteEnd
   1057  f4da
   1058  f4da
   1059  f4da				   ScoreBackgroundColor
   1060  f4da		       a2 00		      LDX	#0
   1061  f4dc		       ad 82 02 	      LDA	SWCHB
   1062  f4df		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1063  f4e1		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1064  f4e3		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1065  f4e5		       a2 03		      LDX	#BACKGROUND_COLOR
   1066  f4e7				   BlackAndWhiteScoreBg
   1067  f4e7		       85 b2		      STA	Tmp2	; Score Background
   1068  f4e9		       86 b3		      STX	Tmp3	; Traffic Background
   1069  f4eb
   1070  f4eb				   ConfigurePFForScore
   1071  f4eb							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1072  f4eb		       85 09		      STA	COLUBK
   1073  f4ed		       20 f3 f7 	      JSR	ClearAll
   1074  f4f0		       a9 02		      LDA	#%00000010	; Score mode
   1075  f4f2		       85 0a		      STA	CTRLPF
   1076  f4f4		       a5 f2		      LDA	TextSide	;3
   1077  f4f6		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1078  f4f8				   LeftScoreOn
   1079  f4f8		       a5 d5		      LDA	ScoreFontColor
   1080  f4fa		       85 07		      STA	COLUP1
   1081  f4fc		       a5 b2		      LDA	Tmp2
   1082  f4fe		       85 06		      STA	COLUP0
   1083  f500		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1084  f502		       85 b1		      STA	Tmp1
   1085  f504		       4c 13 f5 	      JMP	CallWaitForVblankEnd
   1086  f507				   RightScoreOn
   1087  f507		       a5 d5		      LDA	ScoreFontColor
   1088  f509		       85 06		      STA	COLUP0
   1089  f50b		       a5 b2		      LDA	Tmp2
   1090  f50d		       85 07		      STA	COLUP1
   1091  f50f		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1092  f511		       85 b1		      STA	Tmp1
   1093  f513
   1094  f513							; After here we are going to update the screen, No more heavy code
   1095  f513				   CallWaitForVblankEnd
   1096  f513		       20 0e fb 	      JSR	WaitForVblankEnd
   1097  f516
   1098  f516				   DrawScoreHud
   1099  f516		       20 10 f9 	      JSR	PrintScore
   1100  f519
   1101  f519		       85 02		      STA	WSYNC
   1102  f51b
   1103  f51b		       a5 0c		      LDA	INPT4	;3
   1104  f51d		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1105  f51f		       a5 d5		      LDA	ScoreFontColor
   1106  f521		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1107  f523		       d0 0a		      BNE	WaitAnotherScoreLine
   1108  f525		       a5 f2		      LDA	TextSide	;3
   1109  f527		       d0 03		      BNE	LeftScoreOnGameOver
   1110  f529		       4c 9b fa 	      JMP	DrawGameOverScreenRight
   1111  f52c				   LeftScoreOnGameOver
   1112  f52c		       4c cd f9 	      JMP	DrawGameOverScreenLeft
   1113  f52f
   1114  f52f				   WaitAnotherScoreLine
   1115  f52f		       85 02		      STA	WSYNC
   1116  f531
   1117  f531				   PrepareForTraffic
   1118  f531		       20 05 f8 	      JSR	ClearPF	; 32
   1119  f534
   1120  f534		       85 02		      STA	WSYNC
   1121  f536		       85 02		      STA	WSYNC
   1122  f538
   1123  f538		       a9 30		      LDA	#%00110000	; 2 Score mode
   1124  f53a		       85 0a		      STA	CTRLPF	;3
   1125  f53c
   1126  f53c		       a5 c3		      LDA	TrafficColor	;3
   1127  f53e		       85 08		      STA	COLUPF	;3
   1128  f540
   1129  f540		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1130  f542		       85 07		      STA	COLUP1	;3
   1131  f544
   1132  f544		       a5 d5		      LDA	ScoreFontColor	;3
   1133  f546		       85 06		      STA	COLUP0	;3
   1134  f548
   1135  f548		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1136  f54a
   1137  f54a		       20 05 f8 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1138  f54d
      0  f54d					      SLEEP	14
      1  f54d				   .CYCLES    SET	14
      2  f54d
      3  f54d				  -	      IF	.CYCLES < 2
      4  f54d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f54d				  -	      ERR
      6  f54d					      ENDIF
      7  f54d
      8  f54d				  -	      IF	.CYCLES & 1
      9  f54d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f54d				  -	      nop	0
     11  f54d				  -	      ELSE
     12  f54d				  -	      bit	VSYNC
     13  f54d				  -	      ENDIF
     14  f54d				  -.CYCLES    SET	.CYCLES - 3
     15  f54d					      ENDIF
     16  f54d
     17  f54d					      REPEAT	.CYCLES / 2
     18  f54d		       ea		      nop
     17  f54d					      REPEND
     18  f54e		       ea		      nop
     17  f54e					      REPEND
     18  f54f		       ea		      nop
     17  f54f					      REPEND
     18  f550		       ea		      nop
     17  f550					      REPEND
     18  f551		       ea		      nop
     17  f551					      REPEND
     18  f552		       ea		      nop
     17  f552					      REPEND
     18  f553		       ea		      nop
     19  f554					      REPEND
   1140  f554
   1141  f554		       a5 b3		      LDA	Tmp3	;3
   1142  f556		       85 09		      STA	COLUBK	;3
   1143  f558		       a5 8c		      LDA	FrameCount0
   1144  f55a		       29 01		      AND	#%00000001
   1145  f55c		       d0 05		      BNE	OpDrawCache
   1146  f55e		       4c 1d f6 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1147  f561							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1148  f561
   1149  f561							;main scanline loop...
   1150  f561				   OpScanLoop
   1151  f561		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1152  f563
   1153  f563							;Start of next line!			
   1154  f563				   OpDrawCache		;63 Is the last line going to the top of the next frame?
   1155  f563
   1156  f563		       a5 80		      LDA	GRP0Cache	;3
   1157  f565		       85 1b		      STA	GRP0	;3
   1158  f567
   1159  f567		       a5 84		      LDA	GRP1Cache	;3
   1160  f569		       85 1c		      STA	GRP1	;3
   1161  f56b
   1162  f56b		       a5 85		      LDA	ENABLCache	;3
   1163  f56d		       85 1f		      STA	ENABL	;3
   1164  f56f
   1165  f56f		       a5 86		      LDA	ENAM0Cache	;3
   1166  f571		       85 1d		      STA	ENAM0	;3
   1167  f573
   1168  f573		       a5 87		      LDA	ENAM1Cache	;3
   1169  f575		       85 1e		      STA	ENAM1	;3
   1170  f577
   1171  f577		       a5 81		      LDA	PF0Cache	;3
   1172  f579		       85 0d		      STA	PF0	;3
   1173  f57b
   1174  f57b		       a9 00		      LDA	#0	;2
   1175  f57d							;STA PF0	     ;3
   1176  f57d		       85 84		      STA	GRP1Cache	;3
   1177  f57f		       85 86		      STA	ENAM0Cache	;3
   1178  f581		       85 85		      STA	ENABLCache	;3
   1179  f583		       85 87		      STA	ENAM1Cache	; 3
   1180  f585		       85 0d		      STA	PF0	;3
   1181  f587							;STA PF2	     ;3
   1182  f587
   1183  f587		       a5 83		      LDA	PF2Cache	;3
   1184  f589		       85 0f		      STA	PF2	;3
   1185  f58b
   1186  f58b				   OpDrawCar0
   1187  f58b		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1188  f58d		       b0 04		      BCS	OpSkipDrawCar	;2
   1189  f58f		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1190  f591		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1191  f593				   OpSkipDrawCar
   1192  f593
   1193  f593							;BEQ DrawTraffic3
   1194  f593				   OpDrawTraffic1		; 33
   1195  f593		       98		      TYA		; 2
   1196  f594		       18		      CLC		; 2 
   1197  f595		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
   1198  f597		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1199  f599		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1200  f59b		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
   1201  f59d		       4c a2 f5 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1202  f5a0				   OpEorOffsetWithCarry
   1203  f5a0		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1204  f5a2				   OpAfterEorOffsetWithCarry		;17
   1205  f5a2		       aa		      TAX		;2
   1206  f5a3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1207  f5a6		       c5 c1		      CMP	TrafficChance	;3
   1208  f5a8		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1209  f5aa		       a9 ff		      LDA	#$FF	;2
   1210  f5ac		       85 86		      STA	ENAM0Cache	;3
   1211  f5ae				   OpFinishDrawTraffic1
   1212  f5ae
   1213  f5ae				   OpErasePF2
   1214  f5ae		       a9 00		      LDA	#0
   1215  f5b0		       85 0f		      STA	PF2
   1216  f5b2
   1217  f5b2				   OpDrawTraffic2		; 33
   1218  f5b2		       98		      TYA		; 2
   1219  f5b3		       18		      CLC		; 2 
   1220  f5b4		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
   1221  f5b6		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1222  f5b8		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1223  f5ba		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
   1224  f5bc		       4c c1 f5 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1225  f5bf				   OpEorOffsetWithCarry2
   1226  f5bf		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1227  f5c1				   OpAfterEorOffsetWithCarry2		;17
   1228  f5c1		       aa		      TAX		;2
   1229  f5c2		       bd 00 fe 	      LDA	AesTable,X	; 4
   1230  f5c5		       c5 c1		      CMP	TrafficChance	;3
   1231  f5c7		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1232  f5c9		       a9 02		      LDA	#%00000010	;2
   1233  f5cb		       85 85		      STA	ENABLCache	;3
   1234  f5cd				   OpFinishDrawTraffic2
   1235  f5cd
   1236  f5cd							;STA WSYNC ;65 / 137
   1237  f5cd
   1238  f5cd							; LDA Tmp0 ; Flicker this line if drawing car
   1239  f5cd							; BEQ FinishDrawTraffic4
   1240  f5cd				   OpDrawTraffic3		; 33
   1241  f5cd		       98		      TYA		; 2
   1242  f5ce		       18		      CLC		; 2 
   1243  f5cf		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
   1244  f5d1		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1245  f5d3		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1246  f5d5		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
   1247  f5d7		       4c dc f5 	      JMP	OpAfterEorOffsetWithCarry3	; 3
   1248  f5da				   OpEorOffsetWithCarry3
   1249  f5da		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1250  f5dc				   OpAfterEorOffsetWithCarry3		;17
   1251  f5dc		       aa		      TAX		;2
   1252  f5dd		       bd 00 fe 	      LDA	AesTable,X	; 4
   1253  f5e0		       c5 c1		      CMP	TrafficChance	;3
   1254  f5e2		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1255  f5e4		       a9 02		      LDA	#%00000010	;2
   1256  f5e6		       85 87		      STA	ENAM1Cache
   1257  f5e8				   OpFinishDrawTraffic3
   1258  f5e8
   1259  f5e8				   OpDrawOponent		;26
   1260  f5e8		       84 b0		      STY	Tmp0	;3
   1261  f5ea		       a4 d8		      LDY	OpponentLine	;3
   1262  f5ec		       c0 08		      CPY	#(CAR_START_LINE - 7)	;2
   1263  f5ee		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1264  f5f0				   OpDrawOpponent
   1265  f5f0		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1266  f5f2		       85 84		      STA	GRP1Cache	;3
   1267  f5f4		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1268  f5f6		       a4 b0		      LDY	Tmp0	;3
   1269  f5f8		       4c 12 f6 	      JMP	OpSkipDrawTraffic0	; Do not draw border to save cycles
   1270  f5fb				   OpSkipDrawOpponent
   1271  f5fb		       c6 d8		      DEC	OpponentLine	;5
   1272  f5fd		       a4 b0		      LDY	Tmp0	;3
   1273  f5ff
   1274  f5ff				   OpDrawTraffic0		; 21 2pe
   1275  f5ff		       98		      TYA		; 2
   1276  f600		       18		      CLC		; 2 
   1277  f601		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1278  f603		       29 08		      AND	#%00001000	;2
   1279  f605		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1280  f607				   OpHasBorderP0
   1281  f607		       a9 70		      LDA	#%01110000	; 2
   1282  f609		       4c 0e f6 	      JMP	OpStoreBorderP0	; 3
   1283  f60c				   OpHasNoBorderP0
   1284  f60c		       a9 00		      LDA	#0	; 2
   1285  f60e				   OpStoreBorderP0
   1286  f60e		       85 81		      STA	PF0Cache	; 3
   1287  f610		       85 83		      STA	PF2Cache	; 3
   1288  f612
   1289  f612				   OpSkipDrawTraffic0
   1290  f612
   1291  f612				   OpWhileScanLoop
   1292  f612		       88		      DEY		;2
   1293  f613		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1294  f615		       4c 61 f5 	      JMP	OpScanLoop	;3
   1295  f618				   OpFinishScanLoop		; 7 209 of 222
   1296  f618		       4c d0 f6 	      JMP	FinishScanLoop
   1297  f61b
   1298  f61b							;main scanline loop...
   1299  f61b				   ScanLoop
   1300  f61b		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1301  f61d
   1302  f61d							;Start of next line!			
   1303  f61d				   DrawCache		;63 Is the last line going to the top of the next frame?
   1304  f61d		       a5 81		      LDA	PF0Cache	;3
   1305  f61f		       85 0d		      STA	PF0	;3
   1306  f621
   1307  f621		       a5 80		      LDA	GRP0Cache	;3
   1308  f623		       85 1b		      STA	GRP0	;3
   1309  f625
   1310  f625		       a5 84		      LDA	GRP1Cache	;3
   1311  f627		       85 1c		      STA	GRP1	;3
   1312  f629
   1313  f629		       a5 86		      LDA	ENAM0Cache	;3
   1314  f62b		       85 1d		      STA	ENAM0	;3
   1315  f62d
   1316  f62d		       a5 85		      LDA	ENABLCache	;3
   1317  f62f		       85 1f		      STA	ENABL	;3
   1318  f631
   1319  f631		       a5 87		      LDA	ENAM1Cache	;3
   1320  f633		       85 1e		      STA	ENAM1	;3
   1321  f635
   1322  f635		       a5 83		      LDA	PF2Cache	;3
   1323  f637		       85 0f		      STA	PF2	;3
   1324  f639
   1325  f639		       a9 00		      LDA	#0	;2
   1326  f63b		       85 0d		      STA	PF0	;3
   1327  f63d		       85 84		      STA	GRP1Cache	;3
   1328  f63f		       85 85		      STA	ENABLCache	;3
   1329  f641		       85 86		      STA	ENAM0Cache	;3
   1330  f643		       85 87		      STA	ENAM1Cache	; 3
   1331  f645		       85 0f		      STA	PF2	;3
   1332  f647
   1333  f647				   DrawCar0
   1334  f647		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1335  f649		       b0 04		      BCS	SkipDrawCar	;2
   1336  f64b		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1337  f64d		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1338  f64f				   SkipDrawCar
   1339  f64f
   1340  f64f							;BEQ DrawTraffic3
   1341  f64f				   DrawTraffic1 		; 33
   1342  f64f		       98		      TYA		; 2
   1343  f650		       18		      CLC		; 2 
   1344  f651		       65 95		      ADC	TrafficOffset1 + 1	;3
   1345  f653		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1346  f655		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1347  f657		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1348  f659		       4c 5e f6 	      JMP	AfterEorOffsetWithCarry	; 3
   1349  f65c				   EorOffsetWithCarry
   1350  f65c		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1351  f65e				   AfterEorOffsetWithCarry		;17
   1352  f65e		       aa		      TAX		;2
   1353  f65f		       bd 00 fe 	      LDA	AesTable,X	; 4
   1354  f662		       c5 c1		      CMP	TrafficChance	;3
   1355  f664		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1356  f666		       a9 ff		      LDA	#$FF	;2
   1357  f668		       85 86		      STA	ENAM0Cache	;3
   1358  f66a				   FinishDrawTraffic1
   1359  f66a
   1360  f66a				   DrawTraffic2 		; 33
   1361  f66a		       98		      TYA		; 2
   1362  f66b		       18		      CLC		; 2 
   1363  f66c		       65 99		      ADC	TrafficOffset2 + 1	;3
   1364  f66e		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1365  f670		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1366  f672		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1367  f674		       4c 79 f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1368  f677				   EorOffsetWithCarry2
   1369  f677		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1370  f679				   AfterEorOffsetWithCarry2		;17
   1371  f679		       aa		      TAX		;2
   1372  f67a		       bd 00 fe 	      LDA	AesTable,X	; 4
   1373  f67d		       c5 c1		      CMP	TrafficChance	;3
   1374  f67f		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1375  f681		       a9 02		      LDA	#%00000010	;2
   1376  f683		       85 85		      STA	ENABLCache	;3
   1377  f685				   FinishDrawTraffic2
   1378  f685
   1379  f685							;STA WSYNC ;65 / 137
   1380  f685
   1381  f685							; LDA Tmp0 ; Flicker this line if drawing car
   1382  f685							; BEQ FinishDrawTraffic4
   1383  f685				   DrawTraffic3 		; 33
   1384  f685		       98		      TYA		; 2
   1385  f686		       18		      CLC		; 2 
   1386  f687		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1387  f689		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1388  f68b		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1389  f68d		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1390  f68f		       4c 94 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1391  f692				   EorOffsetWithCarry3
   1392  f692		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1393  f694				   AfterEorOffsetWithCarry3		;17
   1394  f694		       aa		      TAX		;2
   1395  f695		       bd 00 fe 	      LDA	AesTable,X	; 4
   1396  f698		       c5 c1		      CMP	TrafficChance	;3
   1397  f69a		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1398  f69c		       a9 02		      LDA	#%00000010	;2
   1399  f69e		       85 87		      STA	ENAM1Cache
   1400  f6a0				   FinishDrawTraffic3
   1401  f6a0
   1402  f6a0
   1403  f6a0				   DrawOponent		;26
   1404  f6a0		       84 b0		      STY	Tmp0	;3
   1405  f6a2		       a4 d8		      LDY	OpponentLine	;3
   1406  f6a4		       c0 08		      CPY	#(CAR_START_LINE - 7)	;2
   1407  f6a6		       b0 0b		      BCS	SkipDrawOpponent	;2
   1408  f6a8				   DrawOpponent
   1409  f6a8		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1410  f6aa		       85 84		      STA	GRP1Cache	;3
   1411  f6ac		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1412  f6ae		       a4 b0		      LDY	Tmp0	;3
   1413  f6b0		       4c ca f6 	      JMP	SkipDrawTraffic0	; Do not draw border to save cycles
   1414  f6b3				   SkipDrawOpponent
   1415  f6b3		       c6 d8		      DEC	OpponentLine	;5
   1416  f6b5		       a4 b0		      LDY	Tmp0	;3
   1417  f6b7
   1418  f6b7				   DrawTraffic0 		; 21 2pe
   1419  f6b7		       98		      TYA		; 2
   1420  f6b8		       18		      CLC		; 2 
   1421  f6b9		       65 91		      ADC	TrafficOffset0 + 1	;3
   1422  f6bb		       29 08		      AND	#%00001000	;2
   1423  f6bd		       f0 05		      BEQ	HasNoBorderP0	;3
   1424  f6bf				   HasBorderP0
   1425  f6bf		       a9 70		      LDA	#%01110000	; 2
   1426  f6c1		       4c c6 f6 	      JMP	StoreBorderP0	; 3
   1427  f6c4				   HasNoBorderP0
   1428  f6c4		       a9 00		      LDA	#0	; 2
   1429  f6c6				   StoreBorderP0
   1430  f6c6		       85 81		      STA	PF0Cache	; 3
   1431  f6c8		       85 83		      STA	PF2Cache	; 3
   1432  f6ca
   1433  f6ca				   SkipDrawTraffic0
   1434  f6ca
   1435  f6ca				   WhileScanLoop
   1436  f6ca		       88		      DEY		;2
   1437  f6cb		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1438  f6cd		       4c 1b f6 	      JMP	ScanLoop	;3
   1439  f6d0				   FinishScanLoop		; 7 209 of 222
   1440  f6d0
   1441  f6d0		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1442  f6d2		       20 14 f8 	      JSR	LoadAll
   1443  f6d5		       85 02		      STA	WSYNC	; do stuff!
   1444  f6d7		       85 02		      STA	WSYNC
   1445  f6d9		       85 02		      STA	WSYNC
   1446  f6db							;42 cycles to use here
   1447  f6db
   1448  f6db				   PrepareOverscan
   1449  f6db		       a9 02		      LDA	#2
   1450  f6dd		       85 02		      STA	WSYNC
   1451  f6df		       85 01		      STA	VBLANK
   1452  f6e1
   1453  f6e1		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1454  f6e3		       8d 96 02 	      STA	TIM64T
   1455  f6e6
   1456  f6e6				   LeftSound		;41
   1457  f6e6		       a5 ba		      LDA	CountdownTimer	;3
   1458  f6e8		       f0 1b		      BEQ	EngineOff	;2
   1459  f6ea		       a6 f4		      LDX	Gear
   1460  f6ec		       a5 8e		      LDA	Player0SpeedL	;3
   1461  f6ee		       4a		      LSR		;2
   1462  f6ef		       4a		      LSR		;2
   1463  f6f0		       4a		      LSR		;2
   1464  f6f1		       29 0f		      AND	#%00001111	;2
   1465  f6f3		       85 b0		      STA	Tmp0	;3
   1466  f6f5		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1467  f6f8		       38		      SEC		;2
   1468  f6f9		       e5 b0		      SBC	Tmp0	;3
   1469  f6fb		       85 17		      STA	AUDF0	;3
   1470  f6fd		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1471  f700		       85 15		      STA	AUDC0	;3
   1472  f702		       4c 09 f7 	      JMP	EndLeftSound	;3
   1473  f705				   EngineOff
   1474  f705		       a9 00		      LDA	#0
   1475  f707		       85 15		      STA	AUDC0
   1476  f709
   1477  f709				   EndLeftSound
   1478  f709
   1479  f709
   1480  f709				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1481  f709		       a5 d5		      LDA	ScoreFontColor	;3
   1482  f70b		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1483  f70d		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1484  f70f		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1485  f711		       f0 29		      BEQ	PlayCheckpoint	;2
   1486  f713		       a5 b8		      LDA	CollisionCounter	;3
   1487  f715		       c9 e0		      CMP	#$E0	;2
   1488  f717		       b0 14		      BCS	PlayColision	;2
   1489  f719		       a5 d7		      LDA	NextCheckpoint	;3
   1490  f71b		       38		      SEC		;2
   1491  f71c		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1492  f71e		       c9 02		      CMP	#$02	;2
   1493  f720		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1494  f722		       a5 ba		      LDA	CountdownTimer	; 3
   1495  f724		       f0 53		      BEQ	MuteRightSound	;2
   1496  f726		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1497  f728		       90 37		      BCC	PlayWarnTimeEnding	;4
   1498  f72a		       4c 79 f7 	      JMP	MuteRightSound	;3
   1499  f72d				   PlayColision
   1500  f72d		       a9 1f		      LDA	#31
   1501  f72f		       85 18		      STA	AUDF1
   1502  f731		       a9 08		      LDA	#8
   1503  f733		       85 16		      STA	AUDC1
   1504  f735		       a9 08		      LDA	#8
   1505  f737		       85 1a		      STA	AUDV1
   1506  f739		       4c 7d f7 	      JMP	EndRightSound
   1507  f73c
   1508  f73c				   PlayCheckpoint
   1509  f73c		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1510  f73e		       4a		      LSR		;2
   1511  f73f		       4a		      LSR		;2
   1512  f740		       4a		      LSR		;2
   1513  f741		       85 18		      STA	AUDF1	;3
   1514  f743		       a9 0c		      LDA	#12	;2
   1515  f745		       85 16		      STA	AUDC1	;3
   1516  f747		       a9 06		      LDA	#6	;2
   1517  f749		       85 1a		      STA	AUDV1	;3
   1518  f74b		       4c 7d f7 	      JMP	EndRightSound	;3
   1519  f74e
   1520  f74e				   PlayBeforeCheckpoint
   1521  f74e		       a5 8c		      LDA	FrameCount0	;3
   1522  f750		       29 1c		      AND	#%00011100	;2
   1523  f752		       09 03		      ORA	#%00000011	;2
   1524  f754		       85 18		      STA	AUDF1	;3
   1525  f756		       a9 0c		      LDA	#12	;2
   1526  f758		       85 16		      STA	AUDC1	;3
   1527  f75a		       a9 03		      LDA	#3	;2
   1528  f75c		       85 1a		      STA	AUDV1	;3
   1529  f75e		       4c 7d f7 	      JMP	EndRightSound	;3
   1530  f761
   1531  f761				   PlayWarnTimeEnding
   1532  f761		       a5 8c		      LDA	FrameCount0	;3
   1533  f763		       29 04		      AND	#%00000100	;2
   1534  f765		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1535  f767		       18		      CLC		;2
   1536  f768		       a9 0a		      LDA	#10	;2
   1537  f76a		       65 ba		      ADC	CountdownTimer	;2
   1538  f76c		       85 18		      STA	AUDF1	;3
   1539  f76e		       a9 0c		      LDA	#12	;2
   1540  f770		       85 16		      STA	AUDC1	;3
   1541  f772		       a9 03		      LDA	#3	;2
   1542  f774		       85 1a		      STA	AUDV1	;3
   1543  f776		       4c 7d f7 	      JMP	EndRightSound	;3
   1544  f779
   1545  f779				   MuteRightSound
   1546  f779		       a9 00		      LDA	#0
   1547  f77b		       85 1a		      STA	AUDV1
   1548  f77d				   EndRightSound
   1549  f77d
   1550  f77d							;Read Fire Button before, will make it start the game for now.
   1551  f77d				   StartGame
   1552  f77d		       a5 0c		      LDA	INPT4	;3
   1553  f77f		       30 2b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1554  f781		       a5 c0		      LDA	GameStatus	;3
   1555  f783		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1556  f785		       d0 25		      BNE	SkipGameStart
   1557  f787		       a5 c5		      LDA	GameMode
   1558  f789		       c9 10		      CMP	#MAX_GAME_MODE
   1559  f78b		       d0 0b		      BNE	SetGameRunning
   1560  f78d		       a9 00		      LDA	#0
   1561  f78f		       85 c5		      STA	GameMode
   1562  f791		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1563  f793		       85 bc		      STA	SwitchDebounceCounter
   1564  f795		       4c ac f7 	      JMP	SkipGameStart
   1565  f798				   SetGameRunning
   1566  f798		       e6 c0		      INC	GameStatus
   1567  f79a		       a9 00		      LDA	#0	;
   1568  f79c		       85 8c		      STA	FrameCount0
   1569  f79e		       85 8d		      STA	FrameCount1
   1570  f7a0		       a9 0a		      LDA	#10
   1571  f7a2		       85 19		      STA	AUDV0
   1572  f7a4		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1573  f7a6		       85 d5		      STA	ScoreFontColor
   1574  f7a8		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1575  f7aa		       85 d6		      STA	ScoreFontColorHoldChange
   1576  f7ac				   SkipGameStart
   1577  f7ac
   1578  f7ac				   ReadSwitches
   1579  f7ac		       a6 bc		      LDX	SwitchDebounceCounter
   1580  f7ae		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1581  f7b0		       a9 01		      LDA	#%00000001
   1582  f7b2		       2c 82 02 	      BIT	SWCHB
   1583  f7b5		       d0 07		      BNE	SkipReset
   1584  f7b7		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1585  f7b9		       85 bc		      STA	SwitchDebounceCounter
   1586  f7bb		       4c eb f7 	      JMP	OverScanWaitBeforeReset
   1587  f7be				   SkipReset
   1588  f7be
   1589  f7be				   GameModeSelect
   1590  f7be		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1591  f7c0		       d0 1c		      BNE	SkipGameSelect
   1592  f7c2		       20 40 f8 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1593  f7c5				   ContinueGameSelect
   1594  f7c5		       a9 02		      LDA	#%00000010
   1595  f7c7		       2c 82 02 	      BIT	SWCHB
   1596  f7ca		       d0 12		      BNE	SkipGameSelect
   1597  f7cc		       a6 c5		      LDX	GameMode
   1598  f7ce		       e0 10		      CPX	#MAX_GAME_MODE
   1599  f7d0		       f0 04		      BEQ	ResetGameMode
   1600  f7d2		       e8		      INX
   1601  f7d3		       4c d8 f7 	      JMP	StoreGameMode
   1602  f7d6				   ResetGameMode
   1603  f7d6		       a2 00		      LDX	#0
   1604  f7d8				   StoreGameMode
   1605  f7d8		       86 c5		      STX	GameMode
   1606  f7da		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1607  f7dc		       85 bc		      STA	SwitchDebounceCounter
   1608  f7de				   SkipGameSelect
   1609  f7de		       4c e3 f7 	      JMP	EndReadSwitches
   1610  f7e1				   DecrementSwitchDebounceCounter
   1611  f7e1		       c6 bc		      DEC	SwitchDebounceCounter
   1612  f7e3				   EndReadSwitches
   1613  f7e3
   1614  f7e3				   OverScanWait
   1615  f7e3		       ad 84 02 	      LDA	INTIM
   1616  f7e6		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1617  f7e8		       4c d2 f0 	      JMP	MainLoop
   1618  f7eb
   1619  f7eb				   OverScanWaitBeforeReset
   1620  f7eb		       ad 84 02 	      LDA	INTIM
   1621  f7ee		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1622  f7f0		       4c 10 f0 	      JMP	Start
   1623  f7f3
   1624  f7f3				   Subroutines
   1625  f7f3
   1626  f7f3				   ClearAll		; 52
   1627  f7f3		       a9 00		      LDA	#0	;2
   1628  f7f5		       85 1c		      STA	GRP1	;3
   1629  f7f7		       85 1f		      STA	ENABL	;3
   1630  f7f9		       85 1d		      STA	ENAM0	;3
   1631  f7fb		       85 1e		      STA	ENAM1	;3
   1632  f7fd		       85 84		      STA	GRP1Cache	;3
   1633  f7ff		       85 85		      STA	ENABLCache	;3
   1634  f801		       85 86		      STA	ENAM0Cache	;3
   1635  f803		       85 87		      STA	ENAM1Cache	;3
   1636  f805
   1637  f805				   ClearPF		; 26
   1638  f805		       a9 00		      LDA	#0	;2
   1639  f807				   ClearPFSkipLDA0
   1640  f807		       85 0d		      STA	PF0	;3
   1641  f809		       85 0e		      STA	PF1	;3
   1642  f80b		       85 0f		      STA	PF2	;3	
   1643  f80d		       85 81		      STA	PF0Cache	;3
   1644  f80f		       85 82		      STA	PF1Cache	;3
   1645  f811		       85 83		      STA	PF2Cache	;3 
   1646  f813		       60		      RTS		;6
   1647  f814				   EndClearAll
   1648  f814
   1649  f814				   LoadAll		; 48
   1650  f814		       a5 81		      LDA	PF0Cache	;3
   1651  f816		       85 0d		      STA	PF0	;3
   1652  f818
   1653  f818		       a5 82		      LDA	PF1Cache	;3
   1654  f81a		       85 0e		      STA	PF1	;3
   1655  f81c
   1656  f81c		       a5 83		      LDA	PF2Cache	;3
   1657  f81e		       85 0f		      STA	PF2	;3
   1658  f820
   1659  f820		       a5 84		      LDA	GRP1Cache	;3
   1660  f822		       85 1c		      STA	GRP1	;3
   1661  f824
   1662  f824		       a5 85		      LDA	ENABLCache	;3
   1663  f826		       85 1f		      STA	ENABL	;3
   1664  f828
   1665  f828		       a5 86		      LDA	ENAM0Cache	;3
   1666  f82a		       85 1d		      STA	ENAM0	;3
   1667  f82c
   1668  f82c		       a5 87		      LDA	ENAM1Cache	;3
   1669  f82e		       85 1e		      STA	ENAM1	;3
   1670  f830
   1671  f830		       60		      RTS		;6
   1672  f831				   EndLoadAll
   1673  f831
   1674  f831				   NextDifficulty
   1675  f831		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1676  f833		       29 01		      AND	#%00000001
   1677  f835		       d0 24		      BNE	CheckRandomDifficulty
   1678  f837
   1679  f837		       a5 c4		      LDA	CurrentDifficulty
   1680  f839		       18		      CLC
   1681  f83a		       69 01		      ADC	#1
   1682  f83c		       29 03		      AND	#%00000011	; 0 to 3
   1683  f83e		       85 c4		      STA	CurrentDifficulty
   1684  f840
   1685  f840				   ConfigureDifficulty
   1686  f840		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1687  f842		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1688  f845		       85 c1		      STA	TrafficChance
   1689  f847		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1690  f84a		       85 c3		      STA	TrafficColor
   1691  f84c
   1692  f84c		       a5 c5		      LDA	GameMode	;
   1693  f84e		       29 01		      AND	#%00000001
   1694  f850		       f0 03		      BEQ	UseNextDifficultyTime
   1695  f852		       4c 56 f8 	      JMP	StoreDifficultyTime
   1696  f855				   UseNextDifficultyTime
   1697  f855		       c8		      INY
   1698  f856				   StoreDifficultyTime
   1699  f856		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1700  f859		       85 c2		      STA	CheckpointTime
   1701  f85b
   1702  f85b				   CheckRandomDifficulty
   1703  f85b		       a5 c5		      LDA	GameMode
   1704  f85d		       29 08		      AND	#%00001000	; Random difficulties
   1705  f85f		       f0 09		      BEQ	ReturnFromNextDifficulty
   1706  f861				   RandomDifficulty
   1707  f861		       a6 8c		      LDX	FrameCount0
   1708  f863		       bd 00 fe 	      LDA	AesTable,X
   1709  f866							;EOR TrafficChance, no need, lets make life simple
   1710  f866		       29 3f		      AND	#%00111111
   1711  f868		       85 c1		      STA	TrafficChance
   1712  f86a
   1713  f86a				   ReturnFromNextDifficulty
   1714  f86a		       60		      RTS
   1715  f86b				   EndNextDifficulty
   1716  f86b
   1717  f86b				   DefaultOffsets
   1718  f86b		       a9 20		      LDA	#$20
   1719  f86d		       85 96		      STA	TrafficOffset1 + 2
   1720  f86f		       85 a6		      STA	OpTrafficOffset1 + 2
   1721  f871		       a9 40		      LDA	#$40
   1722  f873		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1723  f875		       85 aa		      STA	OpTrafficOffset2 + 2
   1724  f877		       a9 60		      LDA	#$60
   1725  f879		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1726  f87b		       85 ae		      STA	OpTrafficOffset3 + 2
   1727  f87d		       a9 80		      LDA	#$80
   1728  f87f		       60		      RTS
   1729  f880
   1730  f880				   PrintStaticText		; Preload X with the offset referent to StaticText
   1731  f880		       bd 00 ff 	      LDA	StaticText,X
   1732  f883		       85 d0		      STA	ScoreD0
   1733  f885		       e8		      INX
   1734  f886		       bd 00 ff 	      LDA	StaticText,X
   1735  f889		       85 d1		      STA	ScoreD1
   1736  f88b		       e8		      INX
   1737  f88c		       bd 00 ff 	      LDA	StaticText,X
   1738  f88f		       85 d2		      STA	ScoreD2
   1739  f891		       e8		      INX
   1740  f892		       bd 00 ff 	      LDA	StaticText,X
   1741  f895		       85 d3		      STA	ScoreD3
   1742  f897		       e8		      INX
   1743  f898		       bd 00 ff 	      LDA	StaticText,X
   1744  f89b		       85 d4		      STA	ScoreD4
   1745  f89d		       60		      RTS
   1746  f89e
   1747  f89e				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1748  f89e		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1749  f8a0		       85 d5		      STA	ScoreFontColor
   1750  f8a2		       a9 01		      LDA	#1
   1751  f8a4		       85 d6		      STA	ScoreFontColorHoldChange
   1752  f8a6
   1753  f8a6		       a5 8d		      LDA	FrameCount1
   1754  f8a8		       29 07		      AND	#%00000111
   1755  f8aa		       85 b3		      STA	Tmp3
   1756  f8ac							;0 is Zelda Name, (default)
   1757  f8ac		       a9 01		      LDA	#1
   1758  f8ae		       c5 b3		      CMP	Tmp3
   1759  f8b0		       f0 38		      BEQ	PrintZeldaDateLeft
   1760  f8b2
   1761  f8b2		       a9 02		      LDA	#2
   1762  f8b4		       c5 b3		      CMP	Tmp3
   1763  f8b6		       f0 23		      BEQ	PrintPolvinhosLeft
   1764  f8b8
   1765  f8b8		       a9 03		      LDA	#3
   1766  f8ba		       c5 b3		      CMP	Tmp3
   1767  f8bc		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1768  f8be
   1769  f8be		       a9 04		      LDA	#4
   1770  f8c0		       c5 b3		      CMP	Tmp3
   1771  f8c2		       f0 1c		      BEQ	PrintIvonneLeft
   1772  f8c4
   1773  f8c4		       a9 05		      LDA	#5
   1774  f8c6		       c5 b3		      CMP	Tmp3
   1775  f8c8		       f0 2a		      BEQ	PrintIvonneDateLeft
   1776  f8ca
   1777  f8ca		       a9 06		      LDA	#6
   1778  f8cc		       c5 b3		      CMP	Tmp3
   1779  f8ce		       f0 15		      BEQ	PrintArtLeft
   1780  f8d0
   1781  f8d0		       a9 07		      LDA	#7
   1782  f8d2		       c5 b3		      CMP	Tmp3
   1783  f8d4		       f0 23		      BEQ	PrintLeonardoLeft
   1784  f8d6
   1785  f8d6				   PrintZeldaLeft
   1786  f8d6		       a2 28		      LDX	#<ZeldaTextLeft
   1787  f8d8		       4c fe f8 	      JMP	ProcessPrintEasterEgg
   1788  f8db				   PrintPolvinhosLeft
   1789  f8db		       a2 3c		      LDX	#<PolvinhosTextLeft
   1790  f8dd		       4c fe f8 	      JMP	ProcessPrintEasterEgg
   1791  f8e0				   PrintIvonneLeft
   1792  f8e0		       a2 50		      LDX	#<IvonneTextLeft
   1793  f8e2		       4c fe f8 	      JMP	ProcessPrintEasterEgg
   1794  f8e5				   PrintArtLeft
   1795  f8e5		       a2 64		      LDX	#<PaperArtTextLeft
   1796  f8e7		       4c fe f8 	      JMP	ProcessPrintEasterEgg
   1797  f8ea
   1798  f8ea				   PrintZeldaDateLeft
   1799  f8ea		       a2 32		      LDX	#<ZeldaDateLeft
   1800  f8ec		       4c fe f8 	      JMP	ProcessPrintEasterEgg
   1801  f8ef				   PrintPolvinhosDateLeft
   1802  f8ef		       a2 46		      LDX	#<PolvinhosDateLeft
   1803  f8f1		       4c fe f8 	      JMP	ProcessPrintEasterEgg
   1804  f8f4				   PrintIvonneDateLeft
   1805  f8f4		       a2 5a		      LDX	#<IvonneDateLeft
   1806  f8f6		       4c fe f8 	      JMP	ProcessPrintEasterEgg
   1807  f8f9				   PrintLeonardoLeft
   1808  f8f9		       a2 6e		      LDX	#<LeonardoTextLeft
   1809  f8fb		       4c fe f8 	      JMP	ProcessPrintEasterEgg
   1810  f8fe
   1811  f8fe				   ProcessPrintEasterEgg
   1812  f8fe		       a5 8c		      LDA	FrameCount0	;3
   1813  f900		       29 01		      AND	#%00000001	;2
   1814  f902		       d0 03		      BNE	TranformIntoRightText
   1815  f904		       4c 0c f9 	      JMP	PrintEasterEggText
   1816  f907				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1817  f907		       8a		      TXA
   1818  f908		       18		      CLC
   1819  f909		       69 05		      ADC	#HALF_TEXT_SIZE
   1820  f90b		       aa		      TAX
   1821  f90c
   1822  f90c				   PrintEasterEggText
   1823  f90c		       20 80 f8 	      JSR	PrintStaticText
   1824  f90f		       60		      RTS
   1825  f910
   1826  f910				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1827  f910		       a2 00		      LDX	#0
   1828  f912		       a0 04		      LDY	#FONT_OFFSET
   1829  f914
   1830  f914				   ScoreLoop		; 20 
   1831  f914		       85 02		      STA	WSYNC	;2
   1832  f916
   1833  f916		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1834  f918		       85 0d		      STA	PF0	;3
   1835  f91a
   1836  f91a		       a5 82		      LDA	PF1Cache	;3
   1837  f91c		       85 0e		      STA	PF1	;3
   1838  f91e
   1839  f91e		       a5 83		      LDA	PF2Cache	;3
   1840  f920		       85 0f		      STA	PF2	;3
   1841  f922
   1842  f922				   DrawScoreD0		; 15
   1843  f922		       a6 d0		      LDX	ScoreD0	; 3
   1844  f924		       bd 00 fd 	      LDA	Font,X	;4
   1845  f927		       85 81		      STA	PF0Cache	;3
   1846  f929		       c6 d0		      DEC	ScoreD0	;5
   1847  f92b
   1848  f92b				   DrawScoreD1		; 23	
   1849  f92b		       a6 d1		      LDX	ScoreD1	; 3
   1850  f92d		       bd 00 fd 	      LDA	Font,X	;4
   1851  f930		       0a		      ASL		;2
   1852  f931		       0a		      ASL		;2
   1853  f932		       0a		      ASL		;2
   1854  f933		       0a		      ASL		;2
   1855  f934		       85 82		      STA	PF1Cache	;3
   1856  f936		       c6 d1		      DEC	ScoreD1	;5
   1857  f938
   1858  f938				   DrawScoreD2		; 20
   1859  f938		       a6 d2		      LDX	ScoreD2	; 3
   1860  f93a		       bd 00 fd 	      LDA	Font,X	;4
   1861  f93d		       29 0f		      AND	#%00001111	;2
   1862  f93f		       05 82		      ORA	PF1Cache	;3
   1863  f941		       85 82		      STA	PF1Cache	;3
   1864  f943		       c6 d2		      DEC	ScoreD2	;5
   1865  f945
   1866  f945				   DrawScoreD3		; 23
   1867  f945		       a6 d3		      LDX	ScoreD3	; 3
   1868  f947		       bd 00 fd 	      LDA	Font,X	;4
   1869  f94a		       4a		      LSR		;2
   1870  f94b		       4a		      LSR		;2
   1871  f94c		       4a		      LSR		;2
   1872  f94d		       4a		      LSR		;2
   1873  f94e		       85 83		      STA	PF2Cache	;3
   1874  f950		       c6 d3		      DEC	ScoreD3	;5
   1875  f952
   1876  f952				   DrawScoreD4		; 20
   1877  f952		       a6 d4		      LDX	ScoreD4	; 3
   1878  f954		       bd 00 fd 	      LDA	Font,X	;4
   1879  f957		       29 f0		      AND	#%11110000	;2
   1880  f959		       05 83		      ORA	PF2Cache	;3
   1881  f95b		       85 83		      STA	PF2Cache	;3
   1882  f95d		       c6 d4		      DEC	ScoreD4	;5
   1883  f95f
   1884  f95f
   1885  f95f		       88		      DEY		;2
   1886  f960		       10 b2		      BPL	ScoreLoop	;4
   1887  f962
   1888  f962		       85 02		      STA	WSYNC
   1889  f964		       20 14 f8 	      JSR	LoadAll
   1890  f967		       60		      RTS		; 6
   1891  f968
   1892  f968				   PrintRightDecimalDigits
   1893  f968		       b9 00 00 	      LDA	0,Y
   1894  f96b		       4a		      LSR
   1895  f96c		       4a		      LSR
   1896  f96d		       4a		      LSR
   1897  f96e		       4a		      LSR
   1898  f96f		       aa		      TAX
   1899  f970		       bd be fd 	      LDA	FontLookup,X	;4
   1900  f973		       85 d2		      STA	ScoreD2	;3
   1901  f975
   1902  f975		       b9 00 00 	      LDA	0,Y
   1903  f978		       29 0f		      AND	#%00001111
   1904  f97a		       aa		      TAX
   1905  f97b		       bd be fd 	      LDA	FontLookup,X	;4
   1906  f97e		       85 d3		      STA	ScoreD3	;3
   1907  f980
   1908  f980		       c8		      INY
   1909  f981		       b9 00 00 	      LDA	0,Y
   1910  f984		       4a		      LSR
   1911  f985		       4a		      LSR
   1912  f986		       4a		      LSR
   1913  f987		       4a		      LSR
   1914  f988		       aa		      TAX
   1915  f989		       bd be fd 	      LDA	FontLookup,X	;4
   1916  f98c		       85 d0		      STA	ScoreD0	;3
   1917  f98e
   1918  f98e		       b9 00 00 	      LDA	0,Y
   1919  f991		       29 0f		      AND	#%00001111
   1920  f993		       aa		      TAX
   1921  f994		       bd be fd 	      LDA	FontLookup,X	;4
   1922  f997		       85 d1		      STA	ScoreD1	;3
   1923  f999
   1924  f999		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1925  f99b		       85 d4		      STA	ScoreD4
   1926  f99d		       60		      RTS
   1927  f99e
   1928  f99e				   PrintLastLeftDecimalDigits
   1929  f99e		       b9 00 00 	      LDA	0,Y
   1930  f9a1		       4a		      LSR
   1931  f9a2		       4a		      LSR
   1932  f9a3		       4a		      LSR
   1933  f9a4		       4a		      LSR
   1934  f9a5		       aa		      TAX
   1935  f9a6		       bd be fd 	      LDA	FontLookup,X	;4
   1936  f9a9		       85 d3		      STA	ScoreD3	;3
   1937  f9ab		       b9 00 00 	      LDA	0,Y
   1938  f9ae		       29 0f		      AND	#%00001111
   1939  f9b0		       aa		      TAX
   1940  f9b1		       bd be fd 	      LDA	FontLookup,X	;4
   1941  f9b4		       85 d4		      STA	ScoreD4	;3
   1942  f9b6		       60		      RTS
   1943  f9b7
   1944  f9b7				   PrintZerosLeft
   1945  f9b7		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1946  f9b9		       85 d2		      STA	ScoreD2
   1947  f9bb		       85 d3		      STA	ScoreD3
   1948  f9bd		       85 d4		      STA	ScoreD4
   1949  f9bf		       60		      RTS
   1950  f9c0
   1951  f9c0				   DrawGameOverScoreLine
   1952  f9c0		       85 02		      STA	WSYNC
   1953  f9c2		       20 10 f9 	      JSR	PrintScore
   1954  f9c5		       85 02		      STA	WSYNC
   1955  f9c7		       85 02		      STA	WSYNC
   1956  f9c9		       20 05 f8 	      JSR	ClearPF
   1957  f9cc		       60		      RTS
   1958  f9cd
   1959  f9cd				   DrawGameOverScreenLeft
   1960  f9cd		       85 02		      STA	WSYNC
   1961  f9cf		       20 05 f8 	      JSR	ClearPF
   1962  f9d2
   1963  f9d2				   DrawBcdScoreLeft
   1964  f9d2		       20 21 fb 	      JSR	Sleep8Lines
   1965  f9d5		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1966  f9d7		       85 06		      STA	COLUP0
   1967  f9d9		       85 02		      STA	WSYNC
   1968  f9db		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1969  f9dd		       85 d0		      STA	ScoreD0
   1970  f9df
   1971  f9df		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1972  f9e1		       85 d1		      STA	ScoreD1
   1973  f9e3
   1974  f9e3		       a5 b7		      LDA	ScoreBcd3
   1975  f9e5		       29 0f		      AND	#%00001111
   1976  f9e7		       aa		      TAX
   1977  f9e8		       bd be fd 	      LDA	FontLookup,X	;4
   1978  f9eb		       85 d2		      STA	ScoreD2	;3
   1979  f9ed
   1980  f9ed		       a0 b6		      LDY	#ScoreBcd2
   1981  f9ef		       20 9e f9 	      JSR	PrintLastLeftDecimalDigits
   1982  f9f2
   1983  f9f2		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   1984  f9f5
   1985  f9f5				   DrawTimerLeft
   1986  f9f5		       20 21 fb 	      JSR	Sleep8Lines
   1987  f9f8		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1988  f9fa		       85 06		      STA	COLUP0
   1989  f9fc		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1990  f9fe		       85 d0		      STA	ScoreD0
   1991  fa00		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1992  fa02		       85 d1		      STA	ScoreD1
   1993  fa04		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1994  fa06		       85 d2		      STA	ScoreD2
   1995  fa08		       a0 bf		      LDY	#TimeBcd2
   1996  fa0a		       85 02		      STA	WSYNC
   1997  fa0c		       20 9e f9 	      JSR	PrintLastLeftDecimalDigits
   1998  fa0f		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   1999  fa12
   2000  fa12				   DrawGlideTimerLeft
   2001  fa12		       20 21 fb 	      JSR	Sleep8Lines
   2002  fa15		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2003  fa17		       85 06		      STA	COLUP0
   2004  fa19		       85 02		      STA	WSYNC
   2005  fa1b		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2006  fa1d		       85 d0		      STA	ScoreD0
   2007  fa1f		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2008  fa21		       85 d1		      STA	ScoreD1
   2009  fa23		       20 b7 f9 	      JSR	PrintZerosLeft
   2010  fa26		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   2011  fa29
   2012  fa29				   DrawHitCountLeft
   2013  fa29		       20 21 fb 	      JSR	Sleep8Lines
   2014  fa2c		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2015  fa2e		       85 06		      STA	COLUP0
   2016  fa30		       85 02		      STA	WSYNC
   2017  fa32		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2018  fa34		       85 d0		      STA	ScoreD0
   2019  fa36		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2020  fa38		       85 d1		      STA	ScoreD1
   2021  fa3a		       20 b7 f9 	      JSR	PrintZerosLeft
   2022  fa3d		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   2023  fa40
   2024  fa40				   DrawCheckpointCountLeft
   2025  fa40		       20 21 fb 	      JSR	Sleep8Lines
   2026  fa43		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2027  fa45		       85 06		      STA	COLUP0
   2028  fa47		       85 02		      STA	WSYNC
   2029  fa49		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2030  fa4b		       85 d0		      STA	ScoreD0
   2031  fa4d		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2032  fa4f		       85 d1		      STA	ScoreD1
   2033  fa51		       20 b7 f9 	      JSR	PrintZerosLeft
   2034  fa54		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   2035  fa57
   2036  fa57				   DrawGameVersionLeft
   2037  fa57		       20 21 fb 	      JSR	Sleep8Lines
   2038  fa5a		       a9 49		      LDA	#VERSION_COLOR
   2039  fa5c		       85 06		      STA	COLUP0
   2040  fa5e
   2041  fa5e		       a5 c5		      LDA	GameMode
   2042  fa60		       aa		      TAX
   2043  fa61		       bd be fd 	      LDA	FontLookup,X	;4
   2044  fa64		       85 d0		      STA	ScoreD0	;3
   2045  fa66
   2046  fa66		       a5 f0		      LDA	CurrentCarId
   2047  fa68		       aa		      TAX
   2048  fa69		       bd be fd 	      LDA	FontLookup,X	;4
   2049  fa6c		       85 d1		      STA	ScoreD1	;3
   2050  fa6e
   2051  fa6e		       a5 dd		      LDA	StartSWCHB
   2052  fa70		       29 40		      AND	#%01000000	; P0 difficulty
   2053  fa72		       49 40		      EOR	#%01000000	; Reverse bytes
   2054  fa74		       2a		      ROL
   2055  fa75		       2a		      ROL
   2056  fa76		       2a		      ROL
   2057  fa77		       18		      CLC
   2058  fa78		       69 0a		      ADC	#10
   2059  fa7a		       aa		      TAX
   2060  fa7b		       bd be fd 	      LDA	FontLookup,X	;4
   2061  fa7e		       85 d2		      STA	ScoreD2	;3
   2062  fa80
   2063  fa80		       a5 dd		      LDA	StartSWCHB
   2064  fa82		       29 80		      AND	#%10000000	; P0 difficulty
   2065  fa84		       49 80		      EOR	#%10000000	; Reverse bytes
   2066  fa86		       2a		      ROL
   2067  fa87		       2a		      ROL
   2068  fa88		       18		      CLC
   2069  fa89		       69 0a		      ADC	#10
   2070  fa8b		       aa		      TAX
   2071  fa8c		       bd be fd 	      LDA	FontLookup,X	;4
   2072  fa8f		       85 d3		      STA	ScoreD3	;3
   2073  fa91
   2074  fa91		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2075  fa93		       85 d4		      STA	ScoreD4
   2076  fa95
   2077  fa95		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   2078  fa98
   2079  fa98		       4c fe fa 	      JMP	FinalizeDrawGameOver
   2080  fa9b
   2081  fa9b				   DrawGameOverScreenRight
   2082  fa9b		       85 02		      STA	WSYNC
   2083  fa9d		       20 05 f8 	      JSR	ClearPF
   2084  faa0
   2085  faa0				   DrawBcdScoreRight
   2086  faa0		       20 21 fb 	      JSR	Sleep8Lines
   2087  faa3		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2088  faa5		       85 07		      STA	COLUP1
   2089  faa7		       85 02		      STA	WSYNC
   2090  faa9		       a0 b4		      LDY	#ScoreBcd0
   2091  faab		       20 68 f9 	      JSR	PrintRightDecimalDigits
   2092  faae
   2093  faae		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   2094  fab1
   2095  fab1				   DrawTimerRight
   2096  fab1		       20 21 fb 	      JSR	Sleep8Lines
   2097  fab4		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2098  fab6		       85 07		      STA	COLUP1
   2099  fab8		       a0 bd		      LDY	#TimeBcd0
   2100  faba		       20 68 f9 	      JSR	PrintRightDecimalDigits
   2101  fabd
   2102  fabd		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   2103  fac0				   DrawGlideTimeRight
   2104  fac0		       20 21 fb 	      JSR	Sleep8Lines
   2105  fac3		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2106  fac5		       85 07		      STA	COLUP1
   2107  fac7		       a0 cd		      LDY	#GlideTimeBcd0
   2108  fac9		       20 68 f9 	      JSR	PrintRightDecimalDigits
   2109  facc		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   2110  facf
   2111  facf				   DrawHitCountRight
   2112  facf		       20 21 fb 	      JSR	Sleep8Lines
   2113  fad2		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2114  fad4		       85 07		      STA	COLUP1
   2115  fad6		       a0 cb		      LDY	#HitCountBcd0
   2116  fad8		       20 68 f9 	      JSR	PrintRightDecimalDigits
   2117  fadb		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   2118  fade
   2119  fade				   DrawCheckpointCountRight
   2120  fade		       20 21 fb 	      JSR	Sleep8Lines
   2121  fae1		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2122  fae3		       85 07		      STA	COLUP1
   2123  fae5		       a0 db		      LDY	#CheckpointBcd0
   2124  fae7		       20 68 f9 	      JSR	PrintRightDecimalDigits
   2125  faea		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   2126  faed
   2127  faed				   DrawVersionRight
   2128  faed		       20 21 fb 	      JSR	Sleep8Lines
   2129  faf0		       a9 49		      LDA	#VERSION_COLOR
   2130  faf2		       85 07		      STA	COLUP1
   2131  faf4		       85 02		      STA	WSYNC
   2132  faf6		       a2 78		      LDX	#<VersionText
   2133  faf8		       20 80 f8 	      JSR	PrintStaticText
   2134  fafb		       20 c0 f9 	      JSR	DrawGameOverScoreLine
   2135  fafe
   2136  fafe				   FinalizeDrawGameOver
   2137  fafe		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2138  fb00		       85 d5		      STA	ScoreFontColor
   2139  fb02		       20 18 fb 	      JSR	Sleep4Lines
   2140  fb05		       20 28 fb 	      JSR	Sleep32Lines
   2141  fb08		       20 28 fb 	      JSR	Sleep32Lines
   2142  fb0b		       4c db f6 	      JMP	PrepareOverscan
   2143  fb0e
   2144  fb0e				   WaitForVblankEnd
   2145  fb0e		       ad 84 02 	      LDA	INTIM
   2146  fb11		       d0 fb		      BNE	WaitForVblankEnd
   2147  fb13		       85 02		      STA	WSYNC
   2148  fb15		       85 01		      STA	VBLANK
   2149  fb17		       60		      RTS
   2150  fb18
   2151  fb18				   Sleep4Lines
   2152  fb18		       85 02		      STA	WSYNC
   2153  fb1a		       85 02		      STA	WSYNC
   2154  fb1c		       85 02		      STA	WSYNC
   2155  fb1e		       85 02		      STA	WSYNC
   2156  fb20		       60		      RTS
   2157  fb21
   2158  fb21				   Sleep8Lines
   2159  fb21		       20 18 fb 	      JSR	Sleep4Lines
   2160  fb24		       20 18 fb 	      JSR	Sleep4Lines
   2161  fb27		       60		      RTS
   2162  fb28
   2163  fb28				   Sleep32Lines
   2164  fb28		       20 21 fb 	      JSR	Sleep8Lines
   2165  fb2b		       20 21 fb 	      JSR	Sleep8Lines
   2166  fb2e		       20 21 fb 	      JSR	Sleep8Lines
   2167  fb31		       20 21 fb 	      JSR	Sleep8Lines
   2168  fb34		       60		      RTS
   2169  fb35
   2170  fb35							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2171  fc00					      org	$FC00
   2172  fc00				   QrCode1
   2173  fc00		       1f		      .byte.b	#%00011111
   2174  fc01		       10		      .byte.b	#%00010000
   2175  fc02		       17		      .byte.b	#%00010111
   2176  fc03		       17		      .byte.b	#%00010111
   2177  fc04		       17		      .byte.b	#%00010111
   2178  fc05		       10		      .byte.b	#%00010000
   2179  fc06		       1f		      .byte.b	#%00011111
   2180  fc07		       00		      .byte.b	#%00000000
   2181  fc08		       17		      .byte.b	#%00010111
   2182  fc09		       10		      .byte.b	#%00010000
   2183  fc0a		       1d		      .byte.b	#%00011101
   2184  fc0b		       16		      .byte.b	#%00010110
   2185  fc0c		       03		      .byte.b	#%00000011
   2186  fc0d		       19		      .byte.b	#%00011001
   2187  fc0e		       13		      .byte.b	#%00010011
   2188  fc0f		       1c		      .byte.b	#%00011100
   2189  fc10		       0b		      .byte.b	#%00001011
   2190  fc11		       00		      .byte.b	#%00000000
   2191  fc12		       1f		      .byte.b	#%00011111
   2192  fc13		       10		      .byte.b	#%00010000
   2193  fc14		       17		      .byte.b	#%00010111
   2194  fc15		       17		      .byte.b	#%00010111
   2195  fc16		       17		      .byte.b	#%00010111
   2196  fc17		       10		      .byte.b	#%00010000
   2197  fc18		       1f		      .byte.b	#%00011111
   2198  fc19
   2199  fc19				   QrCode2
   2200  fc19		       c3		      .byte.b	#%11000011
   2201  fc1a		       9a		      .byte.b	#%10011010
   2202  fc1b		       82		      .byte.b	#%10000010
   2203  fc1c		       da		      .byte.b	#%11011010
   2204  fc1d		       aa		      .byte.b	#%10101010
   2205  fc1e		       ca		      .byte.b	#%11001010
   2206  fc1f		       f3		      .byte.b	#%11110011
   2207  fc20		       78		      .byte.b	#%01111000
   2208  fc21		       df		      .byte.b	#%11011111
   2209  fc22		       fc		      .byte.b	#%11111100
   2210  fc23		       c7		      .byte.b	#%11000111
   2211  fc24		       98		      .byte.b	#%10011000
   2212  fc25		       23		      .byte.b	#%00100011
   2213  fc26		       b9		      .byte.b	#%10111001
   2214  fc27		       d2		      .byte.b	#%11010010
   2215  fc28		       30		      .byte.b	#%00110000
   2216  fc29		       eb		      .byte.b	#%11101011
   2217  fc2a		       28		      .byte.b	#%00101000
   2218  fc2b		       ab		      .byte.b	#%10101011
   2219  fc2c		       72		      .byte.b	#%01110010
   2220  fc2d		       fa		      .byte.b	#%11111010
   2221  fc2e		       7a		      .byte.b	#%01111010
   2222  fc2f		       32		      .byte.b	#%00110010
   2223  fc30		       3a		      .byte.b	#%00111010
   2224  fc31		       63		      .byte.b	#%01100011
   2225  fc32
   2226  fc32				   QrCode3
   2227  fc32		       98		      .byte.b	#%10011000
   2228  fc33		       c3		      .byte.b	#%11000011
   2229  fc34		       39		      .byte.b	#%00111001
   2230  fc35		       34		      .byte.b	#%00110100
   2231  fc36		       ff		      .byte.b	#%11111111
   2232  fc37		       71		      .byte.b	#%01110001
   2233  fc38		       d5		      .byte.b	#%11010101
   2234  fc39		       d1		      .byte.b	#%11010001
   2235  fc3a		       5f		      .byte.b	#%01011111
   2236  fc3b		       26		      .byte.b	#%00100110
   2237  fc3c		       2d		      .byte.b	#%00101101
   2238  fc3d		       e9		      .byte.b	#%11101001
   2239  fc3e		       d6		      .byte.b	#%11010110
   2240  fc3f		       26		      .byte.b	#%00100110
   2241  fc40		       ba		      .byte.b	#%10111010
   2242  fc41		       03		      .byte.b	#%00000011
   2243  fc42		       dd		      .byte.b	#%11011101
   2244  fc43		       e0		      .byte.b	#%11100000
   2245  fc44		       57		      .byte.b	#%01010111
   2246  fc45		       14		      .byte.b	#%00010100
   2247  fc46		       35		      .byte.b	#%00110101
   2248  fc47		       e5		      .byte.b	#%11100101
   2249  fc48		       b5		      .byte.b	#%10110101
   2250  fc49		       d4		      .byte.b	#%11010100
   2251  fc4a		       97		      .byte.b	#%10010111
   2252  fc4b
   2253  fc4b				   QrCode4
   2254  fc4b		       09		      .byte.b	#%00001001
   2255  fc4c		       0e		      .byte.b	#%00001110
   2256  fc4d		       0f		      .byte.b	#%00001111
   2257  fc4e		       0c		      .byte.b	#%00001100
   2258  fc4f		       0c		      .byte.b	#%00001100
   2259  fc50		       08		      .byte.b	#%00001000
   2260  fc51		       08		      .byte.b	#%00001000
   2261  fc52		       06		      .byte.b	#%00000110
   2262  fc53		       06		      .byte.b	#%00000110
   2263  fc54		       0b		      .byte.b	#%00001011
   2264  fc55		       0f		      .byte.b	#%00001111
   2265  fc56		       04		      .byte.b	#%00000100
   2266  fc57		       08		      .byte.b	#%00001000
   2267  fc58		       0f		      .byte.b	#%00001111
   2268  fc59		       09		      .byte.b	#%00001001
   2269  fc5a		       07		      .byte.b	#%00000111
   2270  fc5b		       05		      .byte.b	#%00000101
   2271  fc5c		       00		      .byte.b	#%00000000
   2272  fc5d		       0f		      .byte.b	#%00001111
   2273  fc5e		       08		      .byte.b	#%00001000
   2274  fc5f		       0b		      .byte.b	#%00001011
   2275  fc60		       0b		      .byte.b	#%00001011
   2276  fc61		       0b		      .byte.b	#%00001011
   2277  fc62		       08		      .byte.b	#%00001000
   2278  fc63		       0f		      .byte.b	#%00001111
   2279  fc64
   2280  fc64							; Moved here because of rom space.
   2281  fc64							; The only SBR in constants space
   2282  fc64				   DrawQrCode
   2283  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2284  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2285  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2286  fc6a		       85 0a		      STA	CTRLPF
   2287  fc6c		       20 f3 f7 	      JSR	ClearAll	; To be 100 sure!
   2288  fc6f		       ad 82 02 	      LDA	SWCHB
   2289  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2290  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2291  fc76		       86 09		      STX	COLUBK
   2292  fc78		       84 08		      STY	COLUPF
   2293  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2294  fc7d				   StoreReversedQrCode
   2295  fc7d		       86 08		      STX	COLUPF
   2296  fc7f		       84 09		      STY	COLUBK
   2297  fc81
   2298  fc81				   ContinueQrCode
   2299  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2300  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2301  fc85		       20 0e fb 	      JSR	WaitForVblankEnd
   2302  fc88		       20 21 fb 	      JSR	Sleep8Lines
   2303  fc8b		       20 21 fb 	      JSR	Sleep8Lines
   2304  fc8e		       20 21 fb 	      JSR	Sleep8Lines
   2305  fc91
   2306  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2307  fc91		       85 02		      STA	WSYNC
   2308  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2309  fc96		       85 0e		      STA	PF1	;3
   2310  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2311  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2313  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2314  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2315  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2316  fcb3		       85 0e		      STA	PF1	;3
   2317  fcb5
   2318  fcb5		       ca		      DEX		;2
   2319  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2320  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2321  fcba		       88		      DEY		;2
   2322  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2323  fcbd
   2324  fcbd				   EndQrCodeLoop
   2325  fcbd		       85 02		      STA	WSYNC	;
   2326  fcbf		       a9 00		      LDA	#0
   2327  fcc1		       85 0e		      STA	PF1	;3
   2328  fcc3		       85 0f		      STA	PF2	;3
   2329  fcc5
   2330  fcc5		       20 28 fb 	      JSR	Sleep32Lines
   2331  fcc8		       4c db f6 	      JMP	PrepareOverscan
   2332  fccb
   2333  fd00					      org	$FD00
   2334  fd00				   Font
   2335  fd00				   C0
   2336  fd00		       e7		      .byte.b	#%11100111	;
   2337  fd01		       a5		      .byte.b	#%10100101	; 
   2338  fd02		       a5		      .byte.b	#%10100101	; 
   2339  fd03		       a5		      .byte.b	#%10100101	; 
   2340  fd04		       e7		      .byte.b	#%11100111	;	
   2341  fd05				   C1
   2342  fd05		       e7		      .byte.b	#%11100111	;
   2343  fd06		       42		      .byte.b	#%01000010	; 
   2344  fd07		       42		      .byte.b	#%01000010	; 
   2345  fd08		       42		      .byte.b	#%01000010	; 
   2346  fd09		       66		      .byte.b	#%01100110	;
   2347  fd0a				   C2
   2348  fd0a		       e7		      .byte.b	#%11100111	;
   2349  fd0b		       24		      .byte.b	#%00100100	; 
   2350  fd0c		       e7		      .byte.b	#%11100111	; 
   2351  fd0d		       81		      .byte.b	#%10000001	; 
   2352  fd0e		       e7		      .byte.b	#%11100111	;
   2353  fd0f				   C3
   2354  fd0f		       e7		      .byte.b	#%11100111	;
   2355  fd10		       81		      .byte.b	#%10000001	; 
   2356  fd11		       e7		      .byte.b	#%11100111	; 
   2357  fd12		       81		      .byte.b	#%10000001	; 
   2358  fd13		       e7		      .byte.b	#%11100111	;
   2359  fd14				   C4
   2360  fd14		       81		      .byte.b	#%10000001	;
   2361  fd15		       81		      .byte.b	#%10000001	; 
   2362  fd16		       e7		      .byte.b	#%11100111	; 
   2363  fd17		       a5		      .byte.b	#%10100101	; 
   2364  fd18		       a5		      .byte.b	#%10100101	;
   2365  fd19				   C5
   2366  fd19		       e7		      .byte.b	#%11100111	;
   2367  fd1a		       81		      .byte.b	#%10000001	; 
   2368  fd1b		       e7		      .byte.b	#%11100111	; 
   2369  fd1c		       24		      .byte.b	#%00100100	; 
   2370  fd1d		       e7		      .byte.b	#%11100111	;
   2371  fd1e				   C6
   2372  fd1e		       e7		      .byte.b	#%11100111	;
   2373  fd1f		       a5		      .byte.b	#%10100101	; 
   2374  fd20		       e7		      .byte.b	#%11100111	; 
   2375  fd21		       24		      .byte.b	#%00100100	; 
   2376  fd22		       e7		      .byte.b	#%11100111	;
   2377  fd23				   C7
   2378  fd23		       81		      .byte.b	#%10000001	;
   2379  fd24		       81		      .byte.b	#%10000001	; 
   2380  fd25		       81		      .byte.b	#%10000001	; 
   2381  fd26		       81		      .byte.b	#%10000001	; 
   2382  fd27		       e7		      .byte.b	#%11100111	;
   2383  fd28				   C8
   2384  fd28		       e7		      .byte.b	#%11100111	;
   2385  fd29		       a5		      .byte.b	#%10100101	; 
   2386  fd2a		       e7		      .byte.b	#%11100111	; 
   2387  fd2b		       a5		      .byte.b	#%10100101	; 
   2388  fd2c		       e7		      .byte.b	#%11100111	;
   2389  fd2d				   C9
   2390  fd2d		       e7		      .byte.b	#%11100111	;
   2391  fd2e		       81		      .byte.b	#%10000001	; 
   2392  fd2f		       e7		      .byte.b	#%11100111	; 
   2393  fd30		       a5		      .byte.b	#%10100101	; 
   2394  fd31		       e7		      .byte.b	#%11100111	;
   2395  fd32				   CA
   2396  fd32		       a5		      .byte.b	#%10100101	;
   2397  fd33		       a5		      .byte.b	#%10100101	; 
   2398  fd34		       e7		      .byte.b	#%11100111	; 
   2399  fd35		       a5		      .byte.b	#%10100101	; 
   2400  fd36		       e7		      .byte.b	#%11100111	;
   2401  fd37				   CB
   2402  fd37		       66		      .byte.b	#%01100110	;
   2403  fd38		       a5		      .byte.b	#%10100101	; 
   2404  fd39		       66		      .byte.b	#%01100110	; 
   2405  fd3a		       a5		      .byte.b	#%10100101	;
   2406  fd3b		       66		      .byte.b	#%01100110	;
   2407  fd3c				   CC
   2408  fd3c		       e7		      .byte.b	#%11100111	;
   2409  fd3d		       24		      .byte.b	#%00100100	; 
   2410  fd3e		       24		      .byte.b	#%00100100	; 
   2411  fd3f		       24		      .byte.b	#%00100100	;
   2412  fd40		       e7		      .byte.b	#%11100111	;
   2413  fd41
   2414  fd41				   CD
   2415  fd41		       66		      .byte.b	#%01100110	;
   2416  fd42		       a5		      .byte.b	#%10100101	; 
   2417  fd43		       a5		      .byte.b	#%10100101	; 
   2418  fd44		       a5		      .byte.b	#%10100101	;
   2419  fd45		       66		      .byte.b	#%01100110	;
   2420  fd46
   2421  fd46				   CE
   2422  fd46		       e7		      .byte.b	#%11100111	;
   2423  fd47		       24		      .byte.b	#%00100100	; 
   2424  fd48		       e7		      .byte.b	#%11100111	; 
   2425  fd49		       24		      .byte.b	#%00100100	; 
   2426  fd4a		       e7		      .byte.b	#%11100111	;
   2427  fd4b
   2428  fd4b				   CF
   2429  fd4b		       24		      .byte.b	#%00100100	;
   2430  fd4c		       24		      .byte.b	#%00100100	; 
   2431  fd4d		       e7		      .byte.b	#%11100111	; 
   2432  fd4e		       24		      .byte.b	#%00100100	; 
   2433  fd4f		       e7		      .byte.b	#%11100111	;
   2434  fd50
   2435  fd50				   CG
   2436  fd50		       c3		      .byte.b	#%11000011	;
   2437  fd51		       a5		      .byte.b	#%10100101	; 
   2438  fd52		       a5		      .byte.b	#%10100101	; 
   2439  fd53		       24		      .byte.b	#%00100100	; 
   2440  fd54		       c3		      .byte.b	#%11000011	;	
   2441  fd55
   2442  fd55				   CH
   2443  fd55		       a5		      .byte.b	#%10100101	;
   2444  fd56		       a5		      .byte.b	#%10100101	; 
   2445  fd57		       e7		      .byte.b	#%11100111	; 
   2446  fd58		       a5		      .byte.b	#%10100101	; 
   2447  fd59		       a5		      .byte.b	#%10100101	;
   2448  fd5a
   2449  fd5a				   CK
   2450  fd5a		       a5		      .byte.b	#%10100101	;
   2451  fd5b		       a5		      .byte.b	#%10100101	; 
   2452  fd5c		       66		      .byte.b	#%01100110	; 
   2453  fd5d		       a5		      .byte.b	#%10100101	; 
   2454  fd5e		       a5		      .byte.b	#%10100101	;
   2455  fd5f
   2456  fd5f				   CL
   2457  fd5f		       e7		      .byte.b	#%11100111	;
   2458  fd60		       24		      .byte.b	#%00100100	; 
   2459  fd61		       24		      .byte.b	#%00100100	; 
   2460  fd62		       24		      .byte.b	#%00100100	; 
   2461  fd63		       24		      .byte.b	#%00100100	;
   2462  fd64
   2463  fd64				   CI
   2464  fd64		       42		      .byte.b	#%01000010	;
   2465  fd65		       42		      .byte.b	#%01000010	; 
   2466  fd66		       42		      .byte.b	#%01000010	; 
   2467  fd67		       42		      .byte.b	#%01000010	; 
   2468  fd68		       42		      .byte.b	#%01000010	;
   2469  fd69
   2470  fd69				   CM
   2471  fd69		       a5		      .byte.b	#%10100101	;
   2472  fd6a		       a5		      .byte.b	#%10100101	; 
   2473  fd6b		       a5		      .byte.b	#%10100101	; 
   2474  fd6c		       e7		      .byte.b	#%11100111	; 
   2475  fd6d		       a5		      .byte.b	#%10100101	;
   2476  fd6e
   2477  fd6e				   CN
   2478  fd6e		       a5		      .byte.b	#%10100101	;
   2479  fd6f		       a5		      .byte.b	#%10100101	; 
   2480  fd70		       a5		      .byte.b	#%10100101	; 
   2481  fd71		       a5		      .byte.b	#%10100101	; 
   2482  fd72		       66		      .byte.b	#%01100110	;	
   2483  fd73
   2484  fd73
   2485  fd73				   CO
   2486  fd73		       42		      .byte.b	#%01000010	;
   2487  fd74		       a5		      .byte.b	#%10100101	; 
   2488  fd75		       a5		      .byte.b	#%10100101	; 
   2489  fd76		       a5		      .byte.b	#%10100101	; 
   2490  fd77		       42		      .byte.b	#%01000010	;	
   2491  fd78
   2492  fd78				   CP
   2493  fd78		       24		      .byte.b	#%00100100	;
   2494  fd79		       24		      .byte.b	#%00100100	; 
   2495  fd7a		       e7		      .byte.b	#%11100111	; 
   2496  fd7b		       a5		      .byte.b	#%10100101	; 
   2497  fd7c		       e7		      .byte.b	#%11100111	;
   2498  fd7d
   2499  fd7d				   CR
   2500  fd7d		       a5		      .byte.b	#%10100101	;
   2501  fd7e		       a5		      .byte.b	#%10100101	; 
   2502  fd7f		       66		      .byte.b	#%01100110	; 
   2503  fd80		       a5		      .byte.b	#%10100101	; 
   2504  fd81		       66		      .byte.b	#%01100110	;
   2505  fd82
   2506  fd82				   CS
   2507  fd82		       66		      .byte.b	#%01100110	;
   2508  fd83		       81		      .byte.b	#%10000001	; 
   2509  fd84		       42		      .byte.b	#%01000010	; 
   2510  fd85		       24		      .byte.b	#%00100100	; 
   2511  fd86		       c3		      .byte.b	#%11000011	;
   2512  fd87
   2513  fd87				   CT
   2514  fd87		       42		      .byte.b	#%01000010	;
   2515  fd88		       42		      .byte.b	#%01000010	; 
   2516  fd89		       42		      .byte.b	#%01000010	; 
   2517  fd8a		       42		      .byte.b	#%01000010	; 
   2518  fd8b		       e7		      .byte.b	#%11100111	;
   2519  fd8c
   2520  fd8c				   CV
   2521  fd8c		       42		      .byte.b	#%01000010	;
   2522  fd8d		       a5		      .byte.b	#%10100101	; 
   2523  fd8e		       a5		      .byte.b	#%10100101	; 
   2524  fd8f		       a5		      .byte.b	#%10100101	; 
   2525  fd90		       a5		      .byte.b	#%10100101	;	
   2526  fd91
   2527  fd91				   CY
   2528  fd91		       42		      .byte.b	#%01000010	;
   2529  fd92		       42		      .byte.b	#%01000010	; 
   2530  fd93		       42		      .byte.b	#%01000010	; 
   2531  fd94		       a5		      .byte.b	#%10100101	; 
   2532  fd95		       a5		      .byte.b	#%10100101	;
   2533  fd96
   2534  fd96				   CW
   2535  fd96		       a5		      .byte.b	#%10100101	;
   2536  fd97		       e7		      .byte.b	#%11100111	; 
   2537  fd98		       a5		      .byte.b	#%10100101	; 
   2538  fd99		       a5		      .byte.b	#%10100101	; 
   2539  fd9a		       a5		      .byte.b	#%10100101	;
   2540  fd9b
   2541  fd9b				   CZ
   2542  fd9b		       e7		      .byte.b	#%11100111	;
   2543  fd9c		       24		      .byte.b	#%00100100	; 
   2544  fd9d		       42		      .byte.b	#%01000010	; 
   2545  fd9e		       81		      .byte.b	#%10000001	; 
   2546  fd9f		       e7		      .byte.b	#%11100111	;
   2547  fda0
   2548  fda0				   Pipe
   2549  fda0		       42		      .byte.b	#%01000010	;
   2550  fda1		       00		      .byte.b	#%00000000	; 
   2551  fda2		       42		      .byte.b	#%01000010	; 
   2552  fda3		       00		      .byte.b	#%00000000	; 
   2553  fda4		       42		      .byte.b	#%01000010	;
   2554  fda5
   2555  fda5				   Exclamation
   2556  fda5		       42		      .byte.b	#%01000010	;
   2557  fda6		       00		      .byte.b	#%00000000	; 
   2558  fda7		       42		      .byte.b	#%01000010	; 
   2559  fda8		       42		      .byte.b	#%01000010	; 
   2560  fda9		       42		      .byte.b	#%01000010	;
   2561  fdaa
   2562  fdaa				   Dot
   2563  fdaa		       42		      .byte.b	#%01000010	;
   2564  fdab		       42		      .byte.b	#%01000010	; 
   2565  fdac		       00		      .byte.b	#%00000000	; 
   2566  fdad		       00		      .byte.b	#%00000000	; 
   2567  fdae		       00		      .byte.b	#%00000000	;
   2568  fdaf
   2569  fdaf				   Colon
   2570  fdaf		       42		      .byte.b	#%01000010	;
   2571  fdb0		       42		      .byte.b	#%01000010	; 
   2572  fdb1		       00		      .byte.b	#%00000000	; 
   2573  fdb2		       42		      .byte.b	#%01000010	; 
   2574  fdb3		       42		      .byte.b	#%01000010	;
   2575  fdb4
   2576  fdb4				   Triangle
   2577  fdb4		       81		      .byte.b	#%10000001	;
   2578  fdb5		       c3		      .byte.b	#%11000011	; 
   2579  fdb6		       e7		      .byte.b	#%11100111	; 
   2580  fdb7		       c3		      .byte.b	#%11000011	; 
   2581  fdb8		       81		      .byte.b	#%10000001	;
   2582  fdb9
   2583  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2584  fdb9		       00		      .byte.b	#0	;
   2585  fdba		       00		      .byte.b	#0	;
   2586  fdbb		       00		      .byte.b	#0	;
   2587  fdbc		       00		      .byte.b	#0	;
   2588  fdbd		       00		      .byte.b	#0	;
   2589  fdbe
   2590  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2591  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2592  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2593  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2594  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2595  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2596  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2597  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2598  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2599  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2600  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2601  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2602  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2603  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2604  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2605  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2606  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2607  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2608  fdcf
   2609  fdcf				   EngineSoundType
   2610  fdcf		       02		      .byte.b	#2
   2611  fdd0		       02		      .byte.b	#2
   2612  fdd1		       0e		      .byte.b	#14
   2613  fdd2		       06		      .byte.b	#6
   2614  fdd3		       06		      .byte.b	#6
   2615  fdd4		       0e		      .byte.b	#14
   2616  fdd5
   2617  fdd5				   EngineBaseFrequence
   2618  fdd5		       1f		      .byte.b	#31
   2619  fdd6		       15		      .byte.b	#21
   2620  fdd7		       14		      .byte.b	#20
   2621  fdd8		       1f		      .byte.b	#31
   2622  fdd9		       16		      .byte.b	#22
   2623  fdda		       03		      .byte.b	#3
   2624  fddb
   2625  fddb				   TachometerSizeLookup1
   2626  fddb		       1f		      .byte.b	#%00011111
   2627  fddc		       3f		      .byte.b	#%00111111
   2628  fddd		       7f		      .byte.b	#%01111111
   2629  fdde		       ff		      .byte.b	#%11111111
   2630  fddf		       ff		      .byte.b	#%11111111
   2631  fde0		       ff		      .byte.b	#%11111111
   2632  fde1		       ff		      .byte.b	#%11111111
   2633  fde2		       ff		      .byte.b	#%11111111
   2634  fde3
   2635  fde3				   TachometerSizeLookup2
   2636  fde3		       00		      .byte.b	#%00000000
   2637  fde4		       00		      .byte.b	#%00000000
   2638  fde5		       00		      .byte.b	#%00000000
   2639  fde6		       00		      .byte.b	#%00000000
   2640  fde7		       80		      .byte.b	#%10000000
   2641  fde8		       c0		      .byte.b	#%11000000
   2642  fde9		       e0		      .byte.b	#%11100000
   2643  fdea		       f0		      .byte.b	#%11110000
   2644  fdeb
   2645  fdeb				   TachometerGearLookup
   2646  fdeb		       01		      .byte.b	#%00000001
   2647  fdec		       02		      .byte.b	#%00000010
   2648  fded		       04		      .byte.b	#%00000100
   2649  fdee		       08		      .byte.b	#%00001000
   2650  fdef		       10		      .byte.b	#%00010000
   2651  fdf0		       30		      .byte.b	#%00110000
   2652  fdf1
   2653  fe00					      org	$FE00
   2654  fe00				   AesTable
   2655  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2656  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2657  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2658  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2659  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2660  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2661  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2662  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2663  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2664  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2665  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2666  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2667  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2668  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2669  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2670  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2671  ff00
   2672  ff00							; From FF00 to FFFB (122 bytes) to use here
   2673  ff00
   2674  ff00				   StaticText		; All static text must be on the same MSB block. 
   2675  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2676  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2677  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2678  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2679  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2680  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2681  ff05
   2682  ff05				   HellwayLeftText
   2683  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2684  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2685  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2686  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2687  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2688  ff0a
   2689  ff0a				   HellwayRightText
   2690  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2691  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2692  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2693  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2694  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2695  ff0f
   2696  ff0f				   OpbText
   2697  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2698  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2699  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2700  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2701  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2702  ff14
   2703  ff14				   YearText
   2704  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2705  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2706  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2707  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2708  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2709  ff19
   2710  ff19				   GameText
   2711  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2712  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2713  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2714  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2715  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2716  ff1e
   2717  ff1e				   OverText
   2718  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2719  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2720  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2721  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2722  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2723  ff23				   GoText
   2724  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2725  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2726  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2727  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2728  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2729  ff28
   2730  ff28				   ZeldaTextLeft
   2731  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2732  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2733  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2734  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2735  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2736  ff2d
   2737  ff2d				   ZeldaTextRight
   2738  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2739  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2740  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2741  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2742  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2743  ff32
   2744  ff32				   ZeldaDateLeft
   2745  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2746  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2747  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2748  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2749  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2750  ff37
   2751  ff37				   ZeldaDateRight
   2752  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2753  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2754  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2755  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2756  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2757  ff3c
   2758  ff3c				   PolvinhosTextLeft
   2759  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2760  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2761  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2762  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2763  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2764  ff41
   2765  ff41				   PolvinhosTextRight
   2766  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2767  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2768  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2769  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2770  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2771  ff46
   2772  ff46				   PolvinhosDateLeft
   2773  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2774  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2775  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2776  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2777  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2778  ff4b
   2779  ff4b				   PolvinhosDateRight
   2780  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2781  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2782  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2783  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2784  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2785  ff50
   2786  ff50				   IvonneTextLeft
   2787  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2788  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2789  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2790  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2791  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2792  ff55
   2793  ff55				   IvonneTextRight
   2794  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2795  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2796  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2797  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2798  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2799  ff5a
   2800  ff5a				   IvonneDateLeft
   2801  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2802  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2803  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2804  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2805  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2806  ff5f
   2807  ff5f				   IvonneDateRight
   2808  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2809  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2810  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2811  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2812  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2813  ff64
   2814  ff64				   PaperArtTextLeft
   2815  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2816  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2817  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2818  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2819  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2820  ff69
   2821  ff69				   PaperArtTextRight
   2822  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2823  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2824  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2825  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2826  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2827  ff6e
   2828  ff6e				   LeonardoTextLeft
   2829  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2830  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2831  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2832  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2833  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2834  ff73
   2835  ff73				   LeonardoTextRight
   2836  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2837  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2838  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2839  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2840  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2841  ff78
   2842  ff78				   VersionText
   2843  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2844  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2845  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2846  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2847  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2848  ff7d
   2849  ff7d
   2850  ff7d				   EndStaticText
   2851  ff7d
   2852  ff7d				   CarSprite0		; Upside down, Original Car
   2853  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2854  ff85				   CarSprite0NoPadding
   2855  ff85		       7e		      .byte.b	#%01111110
   2856  ff86		       24		      .byte.b	#%00100100
   2857  ff87		       bd		      .byte.b	#%10111101
   2858  ff88		       3c		      .byte.b	#%00111100
   2859  ff89		       bd		      .byte.b	#%10111101
   2860  ff8a		       3c		      .byte.b	#%00111100
   2861  ff8b
   2862  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2863  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2864  ff93				   CarSprite1NoPadding
   2865  ff93		       bd		      .byte.b	#%10111101
   2866  ff94		       7e		      .byte.b	#%01111110
   2867  ff95		       5a		      .byte.b	#%01011010
   2868  ff96		       66		      .byte.b	#%01100110
   2869  ff97		       bd		      .byte.b	#%10111101
   2870  ff98		       3c		      .byte.b	#%00111100
   2871  ff99
   2872  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2873  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2874  ffa1				   CarSprite2NoPadding
   2875  ffa1		       7e		      .byte.b	#%01111110
   2876  ffa2		       a5		      .byte.b	#%10100101
   2877  ffa3		       42		      .byte.b	#%01000010
   2878  ffa4		       42		      .byte.b	#%01000010
   2879  ffa5		       bd		      .byte.b	#%10111101
   2880  ffa6		       7e		      .byte.b	#%01111110
   2881  ffa7
   2882  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2883  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2884  ffaf				   CarSprite3NoPadding
   2885  ffaf		       3c		      .byte.b	#%00111100
   2886  ffb0		       db		      .byte.b	#%11011011
   2887  ffb1		       db		      .byte.b	#%11011011
   2888  ffb2		       3c		      .byte.b	#%00111100
   2889  ffb3		       5a		      .byte.b	#%01011010
   2890  ffb4		       3c		      .byte.b	#%00111100
   2891  ffb5
   2892  ffb5				   TrafficSpeeds
   2893  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2894  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2895  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2896  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2897  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2898  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2899  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2900  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2901  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2902  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2903  ffbf				   TrafficSpeedsHighDelta
   2904  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2905  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2906  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2907  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2908  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2909  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2910  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2911  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2912  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2913  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2914  ffc9
   2915  ffc9				   CarIdToSpriteAddressL
   2916  ffc9		       7d		      .byte.b	#<CarSprite0
   2917  ffca		       8b		      .byte.b	#<CarSprite1
   2918  ffcb		       99		      .byte.b	#<CarSprite2
   2919  ffcc		       a7		      .byte.b	#<CarSprite3
   2920  ffcd
   2921  ffcd				   CarIdToSpriteAddressH
   2922  ffcd		       ff		      .byte.b	#>CarSprite0
   2923  ffce		       ff		      .byte.b	#>CarSprite1
   2924  ffcf		       ff		      .byte.b	#>CarSprite2
   2925  ffd0		       ff		      .byte.b	#>CarSprite3
   2926  ffd1
   2927  ffd1				   EnemyCarIdToSpriteAddressL
   2928  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2929  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2930  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2931  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2932  ffd5
   2933  ffd5				   EnemyCarIdToSpriteAddressH
   2934  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2935  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2936  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2937  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2938  ffd9
   2939  ffd9				   CarIdToAccelerateSpeed
   2940  ffd9		       80		      .byte.b	#128
   2941  ffda		       c0		      .byte.b	#192
   2942  ffdb		       60		      .byte.b	#96
   2943  ffdc		       c0		      .byte.b	#192
   2944  ffdd
   2945  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2946  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2947  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2948  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2949  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2950  ffe1
   2951  ffe1				   CarIdToMaxSpeedL
   2952  ffe1		       80		      .byte.b	#$80
   2953  ffe2		       00		      .byte.b	#$00	; One less gear
   2954  ffe3		       80		      .byte.b	#$80
   2955  ffe4		       80		      .byte.b	#$80
   2956  ffe5
   2957  ffe5				   CarIdToMaxGear
   2958  ffe5		       05		      .byte.b	#5
   2959  ffe6		       04		      .byte.b	#4	; One less gear
   2960  ffe7		       05		      .byte.b	#5
   2961  ffe8		       05		      .byte.b	#5
   2962  ffe9
   2963  ffe9				   GearToBreakSpeedTable
   2964  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2965  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2966  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2967  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2968  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2969  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2970  ffef
   2971  ffef				   TrafficColorTable
   2972  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2973  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2974  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2975  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2976  fff3
   2977  fff3				   TrafficChanceTable
   2978  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2979  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2980  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2981  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2982  fff7
   2983  fff7				   TrafficTimeTable
   2984  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2985  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2986  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2987  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2988  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2989  fffc
   2990  fffc
   2991  fffc					      org	$FFFC
   2992  fffc		       00 f0		      .word.w	BeforeStart
   2993  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
