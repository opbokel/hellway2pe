------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2c	   PLAYER_0_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 8c	   FrameCount0 =	$8C	;
    111  f000		       00 8d	   FrameCount1 =	$8D	;
    112  f000
    113  f000		       00 8e	   Player0SpeedL =	$8E
    114  f000		       00 8f	   Player0SpeedH =	$8F
    115  f000
    116  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    117  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    118  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    119  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    120  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    121  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    122  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    123  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    124  f000
    125  f000
    126  f000							;Temporary variables, multiple uses
    127  f000		       00 b0	   Tmp0       =	$B0
    128  f000		       00 b1	   Tmp1       =	$B1
    129  f000		       00 b2	   Tmp2       =	$B2
    130  f000		       00 b3	   Tmp3       =	$B3
    131  f000
    132  f000
    133  f000		       00 b8	   CollisionCounter =	$B8
    134  f000		       00 b9	   Player0X   =	$B9
    135  f000		       00 ba	   CountdownTimer =	$BA
    136  f000		       00 bb	   Traffic0Msb =	$BB
    137  f000		       00 bc	   SwitchDebounceCounter =	$BC
    138  f000
    139  f000		       00 bd	   TimeBcd0   =	$BD
    140  f000		       00 be	   TimeBcd1   =	$BE
    141  f000		       00 bf	   TimeBcd2   =	$BF
    142  f000
    143  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    144  f000		       00 c1	   TrafficChance =	$C1
    145  f000		       00 c2	   CheckpointTime =	$C2
    146  f000		       00 c3	   TrafficColor =	$C3
    147  f000		       00 c4	   CurrentDifficulty =	$C4
    148  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    149  f000							;Bit 2 speed delta, Bit 3 random traffic 
    150  f000
    151  f000
    152  f000
    153  f000		       00 d0	   ScoreD0    =	$D0
    154  f000		       00 d1	   ScoreD1    =	$D1
    155  f000		       00 d2	   ScoreD2    =	$D2
    156  f000		       00 d3	   ScoreD3    =	$D3
    157  f000		       00 d4	   ScoreD4    =	$D4
    158  f000		       00 d5	   ScoreFontColor =	$D5
    159  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    160  f000		       00 d7	   NextCheckpoint =	$D7
    161  f000
    162  f000		       00 d8	   OpponentLine =	$D8
    163  f000
    164  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    165  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    166  f000
    167  f000		       00 dd	   StartSWCHB =	$DD	; Used for Score, so it cannot be cheated.
    168  f000		       00 de	   CarSpritePointerL =	$DE
    169  f000		       00 df	   CarSpritePointerH =	$DF
    170  f000		       00 f0	   CurrentCarId =	$F0
    171  f000		       00 f1	   AccelerateBuffer =	$F1	; Change speed on buffer overflow.
    172  f000		       00 f2	   TextSide   =	$F2
    173  f000		       00 f3	   TextFlickerMode =	$F3
    174  f000		       00 f4	   Gear       =	$F4
    175  f000
    176  f000
    177  f000							;generic start up stuff, put zero in almost all...
    178  f000				   BeforeStart		;All variables that are kept on game reset or select
    179  f000		       a0 00		      LDY	#0
    180  f002		       84 bc		      STY	SwitchDebounceCounter
    181  f004		       84 c4		      STY	CurrentDifficulty
    182  f006		       84 c0		      STY	GameStatus
    183  f008		       a0 10		      LDY	#16
    184  f00a		       84 c5		      STY	GameMode
    185  f00c		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    186  f00e		       84 f0		      STY	CurrentCarId
    187  f010
    188  f010				   Start
    189  f010		       a9 02		      LDA	#2
    190  f012		       85 00		      STA	VSYNC
    191  f014		       85 02		      STA	WSYNC
    192  f016		       85 02		      STA	WSYNC
    193  f018		       85 02		      STA	WSYNC
    194  f01a		       a9 00		      LDA	#0	;2
    195  f01c		       85 00		      STA	VSYNC	;3
    196  f01e
    197  f01e		       78		      SEI
    198  f01f		       d8		      CLD
    199  f020		       a2 ff		      LDX	#$FF
    200  f022		       9a		      TXS
    201  f023
    202  f023		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    203  f025				   CleanMem
    204  f025		       e0 bc		      CPX	#SwitchDebounceCounter
    205  f027		       f0 12		      BEQ	SkipClean
    206  f029		       e0 c5		      CPX	#GameMode
    207  f02b		       f0 0e		      BEQ	SkipClean
    208  f02d		       e0 f0		      CPX	#CurrentCarId
    209  f02f		       f0 0a		      BEQ	SkipClean
    210  f031		       e0 c4		      CPX	#CurrentDifficulty
    211  f033		       f0 06		      BEQ	SkipClean
    212  f035		       e0 c0		      CPX	#GameStatus
    213  f037		       f0 02		      BEQ	SkipClean
    214  f039		       95 00		      STA	0,X
    215  f03b				   SkipClean
    216  f03b		       e8		      INX
    217  f03c		       d0 e7		      BNE	CleanMem
    218  f03e
    219  f03e		       a9 d5		      LDA	#213
    220  f040		       8d 96 02 	      STA	TIM64T	;3	
    221  f043
    222  f043							;Setting some variables...
    223  f043
    224  f043				   SettingTrafficOffsets		; Time sensitive with player H position
    225  f043		       85 02		      STA	WSYNC	;We will set player position
    226  f045		       20 fd f7 	      JSR	DefaultOffsets
    227  f048
    228  f048		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    229  f04b		       85 8e		      STA	Player0SpeedL
    230  f04d
    231  f04d							;SLEEP 11;18
    232  f04d		       a2 00		      LDX	#0
    233  f04f		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    234  f052		       85 dd		      STA	StartSWCHB	; For game over
    235  f054		       29 c0		      AND	#%11000000
    236  f056		       f0 0b		      BEQ	CallConfigureDifficulty
    237  f058		       e8		      INX
    238  f059		       c9 80		      CMP	#%10000000
    239  f05b		       f0 06		      BEQ	CallConfigureDifficulty
    240  f05d		       e8		      INX
    241  f05e		       c9 40		      CMP	#%01000000
    242  f060		       f0 01		      BEQ	CallConfigureDifficulty
    243  f062		       e8		      INX
    244  f063
    245  f063				   CallConfigureDifficulty
    246  f063		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    247  f065		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    248  f067		       a5 c0		      LDA	GameStatus
    249  f069		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    250  f06b				   NextCar
    251  f06b		       a4 f0		      LDY	CurrentCarId
    252  f06d		       c8		      INY
    253  f06e		       98		      TYA
    254  f06f		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    255  f071		       85 f0		      STA	CurrentCarId
    256  f073				   StoreCurrentDifficulty
    257  f073		       86 c4		      STX	CurrentDifficulty
    258  f075		       20 d2 f7 	      JSR	ConfigureDifficulty
    259  f078
    260  f078				   ConfigureCarSprite
    261  f078		       a4 f0		      LDY	CurrentCarId
    262  f07a		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
    263  f07d		       85 de		      STA	CarSpritePointerL
    264  f07f		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
    265  f082		       85 df		      STA	CarSpritePointerH
    266  f084
    267  f084				   ConfigureEnemyCarSprite
    268  f084		       a4 f0		      LDY	CurrentCarId
    269  f086		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
    270  f089		       85 d9		      STA	EnemyCarSpritePointerL
    271  f08b		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
    272  f08e		       85 da		      STA	EnemyCarSpritePointerH
    273  f090
    274  f090				   SetGameNotRunning
    275  f090		       a9 00		      LDA	#0
    276  f092		       85 c0		      STA	GameStatus
    277  f094
    278  f094
    279  f094				   ConfigureTimer
    280  f094		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    281  f096		       85 ba		      STA	CountdownTimer	;3
    282  f098
    283  f098				   HPositioning 		; Avoid sleep doing needed stuff
    284  f098		       85 02		      STA	WSYNC
    285  f09a
    286  f09a				   ConfigurePlayerXPosition
    287  f09a		       a9 21		      LDA	#PLAYER_0_X_START	;2
    288  f09c		       85 b9		      STA	Player0X	;3
    289  f09e
    290  f09e				   ConfigureMissileSize
    291  f09e		       a9 30		      LDA	#%00110000	;2 Missile Size
    292  f0a0		       85 04		      STA	NUSIZ0	;3
    293  f0a2		       85 05		      STA	NUSIZ1	;3
    294  f0a4
    295  f0a4				   ConfigureNextCheckpoint
    296  f0a4		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    297  f0a6		       85 d7		      STA	NextCheckpoint
    298  f0a8
    299  f0a8		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0aa					      SLEEP	4	;
      1  f0aa				   .CYCLES    SET	4
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     17  f0aa					      REPEND
     18  f0ab		       ea		      nop
     19  f0ac					      REPEND
    301  f0ac		       85 12		      STA	RESM0
      0  f0ae					      SLEEP	2	;
      1  f0ae				   .CYCLES    SET	2
      2  f0ae
      3  f0ae				  -	      IF	.CYCLES < 2
      4  f0ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ae				  -	      ERR
      6  f0ae					      ENDIF
      7  f0ae
      8  f0ae				  -	      IF	.CYCLES & 1
      9  f0ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ae				  -	      nop	0
     11  f0ae				  -	      ELSE
     12  f0ae				  -	      bit	VSYNC
     13  f0ae				  -	      ENDIF
     14  f0ae				  -.CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae					      REPEAT	.CYCLES / 2
     18  f0ae		       ea		      nop
     19  f0af					      REPEND
    303  f0af		       85 14		      STA	RESBL
      0  f0b1					      SLEEP	2
      1  f0b1				   .CYCLES    SET	2
      2  f0b1
      3  f0b1				  -	      IF	.CYCLES < 2
      4  f0b1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b1				  -	      ERR
      6  f0b1					      ENDIF
      7  f0b1
      8  f0b1				  -	      IF	.CYCLES & 1
      9  f0b1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b1				  -	      nop	0
     11  f0b1				  -	      ELSE
     12  f0b1				  -	      bit	VSYNC
     13  f0b1				  -	      ENDIF
     14  f0b1				  -.CYCLES    SET	.CYCLES - 3
     15  f0b1					      ENDIF
     16  f0b1
     17  f0b1					      REPEAT	.CYCLES / 2
     18  f0b1		       ea		      nop
     19  f0b2					      REPEND
    305  f0b2		       85 13		      STA	RESM1
      0  f0b4					      SLEEP	3
      1  f0b4				   .CYCLES    SET	3
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4					      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4					      ELSE
     12  f0b4		       24 00		      bit	VSYNC
     13  f0b6					      ENDIF
     14  f0b6				   .CYCLES    SET	.CYCLES - 3
     15  f0b6					      ENDIF
     16  f0b6
     17  f0b6				  -	      REPEAT	.CYCLES / 2
     18  f0b6				  -	      nop
     19  f0b6					      REPEND
    307  f0b6
    308  f0b6		       a9 e0		      LDA	#$E0
    309  f0b8		       85 24		      STA	HMBL
    310  f0ba		       85 22		      STA	HMM0
    311  f0bc		       85 23		      STA	HMM1
    312  f0be		       85 02		      STA	WSYNC
    313  f0c0		       85 2a		      STA	HMOVE
    314  f0c2		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    315  f0c4		       85 2b		      STA	HMCLR
      0  f0c6					      SLEEP	30
      1  f0c6				   .CYCLES    SET	30
      2  f0c6
      3  f0c6				  -	      IF	.CYCLES < 2
      4  f0c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c6				  -	      ERR
      6  f0c6					      ENDIF
      7  f0c6
      8  f0c6				  -	      IF	.CYCLES & 1
      9  f0c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c6				  -	      nop	0
     11  f0c6				  -	      ELSE
     12  f0c6				  -	      bit	VSYNC
     13  f0c6				  -	      ENDIF
     14  f0c6				  -.CYCLES    SET	.CYCLES - 3
     15  f0c6					      ENDIF
     16  f0c6
     17  f0c6					      REPEAT	.CYCLES / 2
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     17  f0ce					      REPEND
     18  f0cf		       ea		      nop
     17  f0cf					      REPEND
     18  f0d0		       ea		      nop
     17  f0d0					      REPEND
     18  f0d1		       ea		      nop
     17  f0d1					      REPEND
     18  f0d2		       ea		      nop
     17  f0d2					      REPEND
     18  f0d3		       ea		      nop
     17  f0d3					      REPEND
     18  f0d4		       ea		      nop
     19  f0d5					      REPEND
    317  f0d5		       85 10		      STA	RESP0
      0  f0d7					      SLEEP	5	; Temporarily move player 1 away.
      1  f0d7				   .CYCLES    SET	5
      2  f0d7
      3  f0d7				  -	      IF	.CYCLES < 2
      4  f0d7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0d7				  -	      ERR
      6  f0d7					      ENDIF
      7  f0d7
      8  f0d7					      IF	.CYCLES & 1
      9  f0d7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0d7				  -	      nop	0
     11  f0d7					      ELSE
     12  f0d7		       24 00		      bit	VSYNC
     13  f0d9					      ENDIF
     14  f0d9				   .CYCLES    SET	.CYCLES - 3
     15  f0d9					      ENDIF
     16  f0d9
     17  f0d9					      REPEAT	.CYCLES / 2
     18  f0d9		       ea		      nop
     19  f0da					      REPEND
    319  f0da		       85 11		      STA	RESP1
    320  f0dc
    321  f0dc				   WaitResetToEnd
    322  f0dc		       ad 84 02 	      LDA	INTIM
    323  f0df		       d0 fb		      BNE	WaitResetToEnd
    324  f0e1
    325  f0e1				   MainLoop
    326  f0e1		       a9 02		      LDA	#2
    327  f0e3		       85 00		      STA	VSYNC
    328  f0e5		       85 02		      STA	WSYNC
    329  f0e7		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    330  f0e9				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    331  f0e9		       a9 01		      LDA	#%00000001	;3
    332  f0eb		       24 f3		      BIT	TextFlickerMode	;2
    333  f0ed		       f0 05		      BEQ	TextSideFrameZero	;2
    334  f0ef		       25 8d		      AND	FrameCount1	;2
    335  f0f1		       4c f6 f0 	      JMP	StoreTextSize	;3
    336  f0f4				   TextSideFrameZero
    337  f0f4		       25 8c		      AND	FrameCount0	;2
    338  f0f6				   StoreTextSize
    339  f0f6		       85 f2		      STA	TextSide	;3
    340  f0f8
    341  f0f8				   PrepareMaxHMove
      0  f0f8					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0f8				   .CYCLES    SET	18
      2  f0f8
      3  f0f8				  -	      IF	.CYCLES < 2
      4  f0f8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0f8				  -	      ERR
      6  f0f8					      ENDIF
      7  f0f8
      8  f0f8				  -	      IF	.CYCLES & 1
      9  f0f8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0f8				  -	      nop	0
     11  f0f8				  -	      ELSE
     12  f0f8				  -	      bit	VSYNC
     13  f0f8				  -	      ENDIF
     14  f0f8				  -.CYCLES    SET	.CYCLES - 3
     15  f0f8					      ENDIF
     16  f0f8
     17  f0f8					      REPEAT	.CYCLES / 2
     18  f0f8		       ea		      nop
     17  f0f8					      REPEND
     18  f0f9		       ea		      nop
     17  f0f9					      REPEND
     18  f0fa		       ea		      nop
     17  f0fa					      REPEND
     18  f0fb		       ea		      nop
     17  f0fb					      REPEND
     18  f0fc		       ea		      nop
     17  f0fc					      REPEND
     18  f0fd		       ea		      nop
     17  f0fd					      REPEND
     18  f0fe		       ea		      nop
     17  f0fe					      REPEND
     18  f0ff		       ea		      nop
     17  f0ff					      REPEND
     18  f100		       ea		      nop
     19  f101					      REPEND
    343  f101		       a9 80		      LDA	#$80
    344  f103		       85 24		      STA	HMBL
    345  f105		       85 22		      STA	HMM0
    346  f107		       85 23		      STA	HMM1
    347  f109		       85 20		      STA	HMP0
    348  f10b		       85 21		      STA	HMP1
    349  f10d		       85 02		      STA	WSYNC
    350  f10f		       85 2a		      STA	HMOVE	; 1/10			
    351  f111
    352  f111				   ConfigVBlankTimer
    353  f111		       a5 c5		      LDA	GameMode
    354  f113		       c9 10		      CMP	#MAX_GAME_MODE
    355  f115		       f0 05		      BEQ	SetVblankTimerQrCode
    356  f117		       a9 29		      LDA	#VBLANK_TIMER
    357  f119		       4c 1e f1 	      JMP	SetVblankTimer
    358  f11c				   SetVblankTimerQrCode
    359  f11c		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    360  f11e
    361  f11e				   SetVblankTimer
    362  f11e		       85 02		      STA	WSYNC	;3
    363  f120		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    364  f122		       8d 96 02 	      STA	TIM64T	;3	
    365  f125		       a9 00		      LDA	#0	;2
    366  f127		       85 00		      STA	VSYNC	;3	
    367  f129
    368  f129				   RandomizeGame
    369  f129		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    370  f12b		       d0 2d		      BNE	EndRandomizeGame
    371  f12d		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    372  f12f		       29 02		      AND	#%00000010
    373  f131		       f0 24		      BEQ	DeterministicGame
    374  f133		       a6 96		      LDX	TrafficOffset1 + 2
    375  f135		       bd 00 fe 	      LDA	AesTable,X
    376  f138		       45 8c		      EOR	FrameCount0
    377  f13a		       85 96		      STA	TrafficOffset1 + 2
    378  f13c		       85 a6		      STA	OpTrafficOffset1 + 2
    379  f13e		       a6 9a		      LDX	TrafficOffset2 + 2
    380  f140		       bd 00 fe 	      LDA	AesTable,X
    381  f143		       45 8c		      EOR	FrameCount0
    382  f145		       85 9a		      STA	TrafficOffset2 + 2
    383  f147		       85 aa		      STA	OpTrafficOffset2 + 2
    384  f149		       a6 9e		      LDX	TrafficOffset3 + 2
    385  f14b		       bd 00 fe 	      LDA	AesTable,X
    386  f14e		       45 8c		      EOR	FrameCount0
    387  f150		       85 9e		      STA	TrafficOffset3 + 2
    388  f152		       85 ae		      STA	OpTrafficOffset3 + 2
    389  f154		       4c 5a f1 	      JMP	EndRandomizeGame
    390  f157
    391  f157				   DeterministicGame
    392  f157		       20 fd f7 	      JSR	DefaultOffsets
    393  f15a
    394  f15a				   EndRandomizeGame
    395  f15a
    396  f15a							; Move this in the code and save cycles, for some reason spliting is breaking...
    397  f15a		       a2 08		      LDX	#8
    398  f15c				   BurnAllHMove
    399  f15c		       85 02		      STA	WSYNC	;3
    400  f15e		       85 2a		      STA	HMOVE	; 3/10 
    401  f160		       ca		      DEX
    402  f161		       d0 f9		      BNE	BurnAllHMove
    403  f163		       85 02		      STA	WSYNC	;3
    404  f165		       85 2b		      STA	HMCLR	; 
    405  f167
    406  f167				   CountFrame
    407  f167		       e6 8c		      INC	FrameCount0	; 5
    408  f169		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    409  f16b		       e6 8d		      INC	FrameCount1	; 5 
    410  f16d				   SkipIncFC1
    411  f16d
    412  f16d				   CallDrawQrCode
    413  f16d		       a5 c5		      LDA	GameMode
    414  f16f		       c9 10		      CMP	#MAX_GAME_MODE
    415  f171		       d0 03		      BNE	TestIsGameRunning
    416  f173		       4c 64 fc 	      JMP	DrawQrCode
    417  f176
    418  f176							;Does not update the game if not running
    419  f176				   TestIsGameRunning
    420  f176		       a5 c0		      LDA	GameStatus	;3
    421  f178		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    422  f17a		       4c 08 f3 	      JMP	SkipUpdateLogic
    423  f17d				   ContinueWithGameLogic
    424  f17d
    425  f17d				   EverySecond		; 64 frames to be more precise
    426  f17d		       a9 3f		      LDA	#%00111111
    427  f17f		       25 8c		      AND	FrameCount0
    428  f181		       d0 06		      BNE	SkipEverySecondAction
    429  f183		       c5 ba		      CMP	CountdownTimer
    430  f185		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    431  f187		       c6 ba		      DEC	CountdownTimer
    432  f189				   SkipEverySecondAction
    433  f189
    434  f189				   ChangeTextFlickerMode
    435  f189		       a5 bc		      LDA	SwitchDebounceCounter
    436  f18b		       d0 0d		      BNE	EndChangeTextFlickerMode
    437  f18d		       ad 82 02 	      LDA	SWCHB
    438  f190		       29 02		      AND	#%00000010	;Game select
    439  f192		       d0 06		      BNE	EndChangeTextFlickerMode
    440  f194		       e6 f3		      INC	TextFlickerMode
    441  f196		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    442  f198		       85 bc		      STA	SwitchDebounceCounter
    443  f19a				   EndChangeTextFlickerMode
    444  f19a
    445  f19a				   BreakOnTimeOver		; Uses LDX as the breaking speed
    446  f19a		       a2 00		      LDX	#0
    447  f19c		       a5 ba		      LDA	CountdownTimer
    448  f19e		       d0 0b		      BNE	Break
    449  f1a0		       a4 f0		      LDY	CurrentCarId
    450  f1a2		       a5 8c		      LDA	FrameCount0
    451  f1a4		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    452  f1a7		       d0 02		      BNE	Break
    453  f1a9		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    454  f1ab
    455  f1ab				   Break
    456  f1ab		       a9 20		      LDA	#%00100000	;Down in controller
    457  f1ad		       2c 80 02 	      BIT	SWCHA
    458  f1b0		       d0 0e		      BNE	BreakNonZero
    459  f1b2		       a5 0c		      LDA	INPT4	;3
    460  f1b4		       10 08		      BPL	BreakWhileAccelerating
    461  f1b6		       a4 f4		      LDY	Gear
    462  f1b8		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    463  f1bb		       4c c0 f1 	      JMP	BreakNonZero
    464  f1be				   BreakWhileAccelerating		; Allow better control while breaking.
    465  f1be		       a2 05		      LDX	(#BREAK_SPEED / 2)
    466  f1c0
    467  f1c0				   BreakNonZero
    468  f1c0		       e0 00		      CPX	#0
    469  f1c2		       f0 2b		      BEQ	SkipBreak
    470  f1c4		       86 b0		      STX	Tmp0
    471  f1c6
    472  f1c6				   DecreaseSpeed
    473  f1c6		       38		      SEC
    474  f1c7		       a5 8e		      LDA	Player0SpeedL
    475  f1c9		       e5 b0		      SBC	Tmp0
    476  f1cb		       85 8e		      STA	Player0SpeedL
    477  f1cd		       a5 8f		      LDA	Player0SpeedH
    478  f1cf		       e9 00		      SBC	#0
    479  f1d1		       85 8f		      STA	Player0SpeedH
    480  f1d3
    481  f1d3				   CheckMinSpeed
    482  f1d3		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    483  f1d5		       c9 00		      CMP	#CAR_MIN_SPEED_H
    484  f1d7		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    485  f1d9		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    486  f1db
    487  f1db				   CompareLBreakSpeed
    488  f1db		       a5 8e		      LDA	Player0SpeedL
    489  f1dd		       c9 00		      CMP	#CAR_MIN_SPEED_L
    490  f1df		       90 03		      BCC	ResetMinSpeed	; Less than memory
    491  f1e1		       4c ec f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    492  f1e4
    493  f1e4				   ResetMinSpeed
    494  f1e4		       a9 00		      LDA	#CAR_MIN_SPEED_H
    495  f1e6		       85 8f		      STA	Player0SpeedH
    496  f1e8		       a9 00		      LDA	#CAR_MIN_SPEED_L
    497  f1ea		       85 8e		      STA	Player0SpeedL
    498  f1ec
    499  f1ec				   SkipAccelerateIfBreaking
    500  f1ec		       4c 31 f2 	      JMP	SkipAccelerate
    501  f1ef				   SkipBreak
    502  f1ef
    503  f1ef				   Acelerates
    504  f1ef		       a5 ba		      LDA	CountdownTimer
    505  f1f1		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    506  f1f3
    507  f1f3				   ContinueAccelerateTest
    508  f1f3		       a5 0c		      LDA	INPT4	;3
    509  f1f5		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    510  f1f7		       a9 10		      LDA	#%00010000	;UP in controller
    511  f1f9		       2c 80 02 	      BIT	SWCHA
    512  f1fc		       d0 33		      BNE	SkipAccelerate
    513  f1fe
    514  f1fe				   IncreaseCarSpeed
    515  f1fe		       a2 02		      LDX	#2
    516  f200		       a4 f0		      LDY	CurrentCarId
    517  f202				   IncreaseCarSpeedLoop
    518  f202							;Adds speed
    519  f202		       18		      CLC
    520  f203		       a5 f1		      LDA	AccelerateBuffer
    521  f205		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    522  f208		       85 f1		      STA	AccelerateBuffer
    523  f20a		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    524  f20c		       e6 8e		      INC	Player0SpeedL
    525  f20e		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    526  f210		       e6 8f		      INC	Player0SpeedH
    527  f212				   ContinueIncreaseSpeedLoop
    528  f212		       ca		      DEX
    529  f213		       d0 ed		      BNE	IncreaseCarSpeedLoop
    530  f215				   SkipIncreaseCarSpeed
    531  f215
    532  f215				   CheckIfAlreadyMaxSpeed
    533  f215		       a5 8f		      LDA	Player0SpeedH
    534  f217		       c9 02		      CMP	#CAR_MAX_SPEED_H
    535  f219		       90 16		      BCC	SkipAccelerate	; less than my max speed
    536  f21b		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    537  f21d							;High bit is max, compare the low
    538  f21d		       a4 f0		      LDY	CurrentCarId
    539  f21f		       a5 8e		      LDA	Player0SpeedL
    540  f221		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    541  f224		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    542  f226							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    543  f226
    544  f226				   ResetToMaxSpeed		; Speed is more, or is already max
    545  f226		       a9 02		      LDA	#CAR_MAX_SPEED_H
    546  f228		       85 8f		      STA	Player0SpeedH
    547  f22a		       a4 f0		      LDY	CurrentCarId
    548  f22c		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    549  f22f		       85 8e		      STA	Player0SpeedL
    550  f231				   SkipAccelerate
    551  f231
    552  f231				   InitUpdateOffsets
    553  f231		       a2 00		      LDX	#0	; Memory Offset 24 bit
    554  f233		       a0 00		      LDY	#0	; Line Speeds 16 bits
    555  f235		       a5 91		      LDA	TrafficOffset0 + 1	;
    556  f237		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    557  f239		       a5 c5		      LDA	GameMode
    558  f23b		       29 04		      AND	#%00000100	; GameModes with high delta
    559  f23d		       f0 02		      BEQ	UpdateOffsets
    560  f23f		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    561  f241
    562  f241				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    563  f241		       38		      SEC
    564  f242		       a5 8e		      LDA	Player0SpeedL
    565  f244		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    566  f247		       85 b0		      STA	Tmp0
    567  f249		       c8		      INY
    568  f24a		       a5 8f		      LDA	Player0SpeedH
    569  f24c		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    570  f24f		       85 b1		      STA	Tmp1
    571  f251		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    572  f253		       e9 00		      SBC	#0
    573  f255		       85 b2		      STA	Tmp2
    574  f257
    575  f257				   AddsTheResult
    576  f257		       18		      CLC
    577  f258		       a5 b0		      LDA	Tmp0
    578  f25a		       75 90		      ADC	TrafficOffset0,X
    579  f25c		       95 90		      STA	TrafficOffset0,X
    580  f25e		       e8		      INX
    581  f25f		       a5 b1		      LDA	Tmp1
    582  f261		       75 90		      ADC	TrafficOffset0,X
    583  f263		       95 90		      STA	TrafficOffset0,X
    584  f265		       e8		      INX
    585  f266		       a5 b2		      LDA	Tmp2	; Carry
    586  f268		       75 90		      ADC	TrafficOffset0,X
    587  f26a		       95 90		      STA	TrafficOffset0,X
    588  f26c		       90 06		      BCC	CalculateOffsetCache
    589  f26e		       e0 02		      CPX	#2	;MSB offset 0
    590  f270		       d0 02		      BNE	CalculateOffsetCache
    591  f272		       e6 bb		      INC	Traffic0Msb
    592  f274
    593  f274				   CalculateOffsetCache
    594  f274		       e8		      INX
    595  f275		       38		      SEC
    596  f276		       69 00		      ADC	#0	;Increment by one
    597  f278		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    598  f27a
    599  f27a				   PrepareNextUpdateLoop
    600  f27a		       c8		      INY
    601  f27b		       e8		      INX
    602  f27c		       e0 10		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    603  f27e		       d0 c1		      BNE	UpdateOffsets
    604  f280
    605  f280				   ConfigureOpponentLine		; Temporary
    606  f280		       a9 14		      LDA	#20	; Extract to constant
    607  f282		       85 d8		      STA	OpponentLine
    608  f284
    609  f284
    610  f284							;Until store the movemnt, LDX contains the value to be stored.
    611  f284				   TestCollision		;
    612  f284							; see if player0 colides with the rest
    613  f284		       a5 00		      LDA	CXM0P
    614  f286		       05 01		      ORA	CXM1P
    615  f288		       05 02		      ORA	CXP0FB
    616  f28a		       05 07		      ORA	CXPPMM
    617  f28c		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    618  f28e		       f0 29		      BEQ	NoCollision	;skip if not hitting...
    619  f290		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    620  f292		       d0 25		      BNE	NoCollision
    621  f294		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    622  f296		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    623  f298		       f0 1f		      BEQ	NoCollision
    624  f29a		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    625  f29c		       f0 1b		      BEQ	NoCollision
    626  f29e		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    627  f2a0		       85 b8		      STA	CollisionCounter	;and store as colision.
    628  f2a2		       a5 8f		      LDA	Player0SpeedH
    629  f2a4		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    630  f2a6		       a9 10		      LDA	#COLLISION_SPEED_L
    631  f2a8		       c5 8e		      CMP	Player0SpeedL
    632  f2aa		       b0 04		      BCS	SkipSetColisionSpeedL
    633  f2ac				   SetColisionSpeedL
    634  f2ac		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    635  f2ae		       85 8e		      STA	Player0SpeedL
    636  f2b0				   SkipSetColisionSpeedL
    637  f2b0		       a9 00		      LDA	#0
    638  f2b2		       85 8f		      STA	Player0SpeedH
    639  f2b4		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    640  f2b6		       4c 04 f3 	      JMP	StoreHMove	; We keep position consistent
    641  f2b9				   NoCollision
    642  f2b9
    643  f2b9				   DecrementCollision
    644  f2b9		       a4 b8		      LDY	CollisionCounter
    645  f2bb		       f0 07		      BEQ	FinishDecrementCollision
    646  f2bd		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    647  f2bf		       85 04		      STA	NUSIZ0
    648  f2c1		       88		      DEY
    649  f2c2		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    650  f2c4				   FinishDecrementCollision
    651  f2c4
    652  f2c4				   ResetPlayerSize
    653  f2c4		       d0 04		      BNE	FinishResetPlayerSize
    654  f2c6		       a9 30		      LDA	#%00110000
    655  f2c8		       85 04		      STA	NUSIZ0	;
    656  f2ca				   FinishResetPlayerSize
    657  f2ca
    658  f2ca							;STA HMCLR ; Do not double move car.
    659  f2ca
    660  f2ca				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    661  f2ca		       c0 01		      CPY	#1	; Last frame before reset
    662  f2cc		       d0 05		      BNE	SkipResetPlayerPosition
    663  f2ce		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    664  f2d0		       4c 04 f3 	      JMP	StoreHMove
    665  f2d3				   SkipResetPlayerPosition
    666  f2d3
    667  f2d3				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    668  f2d3		       a5 f0		      LDA	CurrentCarId
    669  f2d5		       c9 03		      CMP	#CAR_ID_DRAGSTER
    670  f2d7		       d0 08		      BNE	PrepareReadXAxis
    671  f2d9		       a2 00		      LDX	#0
    672  f2db		       a5 8c		      LDA	FrameCount0
    673  f2dd		       29 01		      AND	#DRAGSTER_TURN_MASK
    674  f2df		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    675  f2e1
    676  f2e1							; for left and right, we're gonna 
    677  f2e1							; set the horizontal speed, and then do
    678  f2e1							; a single HMOVE.  We'll use X to hold the
    679  f2e1							; horizontal speed, then store it in the 
    680  f2e1							; appropriate register
    681  f2e1				   PrepareReadXAxis
    682  f2e1		       a2 00		      LDX	#0
    683  f2e3		       a4 b9		      LDY	Player0X
    684  f2e5				   BeginReadLeft
    685  f2e5		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    686  f2e7		       a9 40		      LDA	#%01000000	;Left
    687  f2e9		       2c 80 02 	      BIT	SWCHA
    688  f2ec		       d0 07		      BNE	SkipMoveLeft
    689  f2ee		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    690  f2f0		       c6 b9		      DEC	Player0X
    691  f2f2		       4c 04 f3 	      JMP	StoreHMove	; Cannot move left and right...
    692  f2f5				   SkipMoveLeft
    693  f2f5				   BeginReadRight
    694  f2f5		       c0 2c		      CPY	#PLAYER_0_MAX_X
    695  f2f7		       f0 0b		      BEQ	SkipMoveRight	; At max already
    696  f2f9		       a9 80		      LDA	#%10000000	;Right
    697  f2fb		       2c 80 02 	      BIT	SWCHA
    698  f2fe		       d0 04		      BNE	SkipMoveRight
    699  f300		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    700  f302		       e6 b9		      INC	Player0X
    701  f304				   SkipMoveRight
    702  f304				   StoreHMove
    703  f304		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    704  f306		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    705  f308
    706  f308				   SkipUpdateLogic		; Continue here if not paused
    707  f308
    708  f308				   CalculateGear
    709  f308		       a5 8e		      LDA	Player0SpeedL	;3
    710  f30a		       29 80		      AND	#%10000000	;2
    711  f30c		       05 8f		      ORA	Player0SpeedH	;3
    712  f30e		       18		      CLC		;2
    713  f30f		       2a		      ROL		;2
    714  f310		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    715  f312		       85 f4		      STA	Gear
    716  f314
    717  f314				   EndProcessingBorder
    718  f314
    719  f314				   ProcessScoreFontColor
    720  f314		       a6 d6		      LDX	ScoreFontColorHoldChange
    721  f316		       f0 06		      BEQ	ResetScoreFontColor
    722  f318		       ca		      DEX
    723  f319		       86 d6		      STX	ScoreFontColorHoldChange
    724  f31b		       4c 22 f3 	      JMP	SkipScoreFontColor
    725  f31e				   ResetScoreFontColor
    726  f31e		       a9 f9		      LDA	#SCORE_FONT_COLOR
    727  f320		       85 d5		      STA	ScoreFontColor
    728  f322				   SkipScoreFontColor
    729  f322
    730  f322				   IsGameOver
    731  f322		       a5 ba		      LDA	CountdownTimer
    732  f324		       05 8e		      ORA	Player0SpeedL
    733  f326		       05 8f		      ORA	Player0SpeedH
    734  f328		       d0 0b		      BNE	IsCheckpoint
    735  f32a		       a9 01		      LDA	#1
    736  f32c		       85 d6		      STA	ScoreFontColorHoldChange
    737  f32e		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    738  f330		       85 d5		      STA	ScoreFontColor
    739  f332		       4c 67 f3 	      JMP	SkipIsTimeOver
    740  f335
    741  f335				   IsCheckpoint
    742  f335		       a5 d7		      LDA	NextCheckpoint
    743  f337		       c5 92		      CMP	TrafficOffset0 + 2
    744  f339		       d0 20		      BNE	SkipIsCheckpoint
    745  f33b		       18		      CLC
    746  f33c		       69 10		      ADC	#CHECKPOINT_INTERVAL
    747  f33e		       85 d7		      STA	NextCheckpoint
    748  f340		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    749  f342		       85 d5		      STA	ScoreFontColor
    750  f344		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    751  f346		       85 d6		      STA	ScoreFontColorHoldChange
    752  f348		       a5 ba		      LDA	CountdownTimer
    753  f34a		       18		      CLC
    754  f34b		       65 c2		      ADC	CheckpointTime
    755  f34d		       85 ba		      STA	CountdownTimer
    756  f34f		       90 04		      BCC	JumpSkipTimeOver
    757  f351		       a9 ff		      LDA	#$FF
    758  f353		       85 ba		      STA	CountdownTimer	; Does not overflow!
    759  f355				   JumpSkipTimeOver
    760  f355		       20 c3 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    761  f358		       4c 67 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    762  f35b				   SkipIsCheckpoint
    763  f35b
    764  f35b				   IsTimeOver
    765  f35b		       a5 ba		      LDA	CountdownTimer
    766  f35d		       d0 08		      BNE	SkipIsTimeOver
    767  f35f		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    768  f361		       85 d6		      STA	ScoreFontColorHoldChange
    769  f363		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    770  f365		       85 d5		      STA	ScoreFontColor
    771  f367				   SkipIsTimeOver
    772  f367
    773  f367
    774  f367				   PrintEasterEggCondition
    775  f367		       a5 8d		      LDA	FrameCount1
    776  f369		       29 38		      AND	#%00111000
    777  f36b		       05 c0		      ORA	GameStatus
    778  f36d		       c9 38		      CMP	#%00111000
    779  f36f		       d0 06		      BNE	ChooseTextSide
    780  f371		       20 30 f8 	      JSR	PrintEasterEgg
    781  f374		       4c 66 f4 	      JMP	RightScoreWriteEnd
    782  f377
    783  f377							;Could be done during on vblank to save this comparisson time (before draw score), 
    784  f377							;but I am saving vblank cycles for now, in case of 2 players.
    785  f377				   ChooseTextSide		; 
    786  f377		       a5 f2		      LDA	TextSide	;3
    787  f379		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    788  f37b		       4c fc f3 	      JMP	RightScoreWrite
    789  f37e
    790  f37e				   LeftScoreWrite
    791  f37e		       a5 d5		      LDA	ScoreFontColor
    792  f380		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    793  f382		       f0 4e		      BEQ	PrintCheckpoint
    794  f384		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    795  f386		       f0 52		      BEQ	PrintStartGame
    796  f388		       a5 c0		      LDA	GameStatus
    797  f38a		       f0 56		      BEQ	PrintHellwayLeft
    798  f38c				   WriteDistance		;Not optimized yet, ugly code.
    799  f38c				   Digit0Distance
    800  f38c		       a5 91		      LDA	TrafficOffset0 + 1	;3
    801  f38e		       4a		      LSR		; 2
    802  f38f		       4a		      LSR		; 2
    803  f390		       4a		      LSR		; 2
    804  f391		       4a		      LSR		; 2
    805  f392		       aa		      TAX		; 2
    806  f393		       bd be fd 	      LDA	FontLookup,X	;4
    807  f396		       85 d3		      STA	ScoreD3	;3
    808  f398
    809  f398				   Digit1Distance
    810  f398		       a5 92		      LDA	TrafficOffset0 + 2	;3
    811  f39a		       29 0f		      AND	#%00001111	;2
    812  f39c		       aa		      TAX		; 2
    813  f39d		       bd be fd 	      LDA	FontLookup,X	;4 
    814  f3a0		       85 d2		      STA	ScoreD2	;3
    815  f3a2
    816  f3a2				   Digit2Distance
    817  f3a2		       a5 92		      LDA	TrafficOffset0 + 2	;3
    818  f3a4		       4a		      LSR		; 2
    819  f3a5		       4a		      LSR		; 2
    820  f3a6		       4a		      LSR		; 2
    821  f3a7		       4a		      LSR		; 2
    822  f3a8		       aa		      TAX		; 2
    823  f3a9		       bd be fd 	      LDA	FontLookup,X	;4
    824  f3ac		       85 d1		      STA	ScoreD1	;3
    825  f3ae
    826  f3ae				   Digit3Distance
    827  f3ae		       a5 bb		      LDA	Traffic0Msb	;3
    828  f3b0		       29 0f		      AND	#%00001111	;2
    829  f3b2		       aa		      TAX		; 2
    830  f3b3		       bd be fd 	      LDA	FontLookup,X	;4 
    831  f3b6		       85 d0		      STA	ScoreD0	;3
    832  f3b8
    833  f3b8				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    834  f3b8		       a5 bb		      LDA	Traffic0Msb
    835  f3ba		       29 f0		      AND	#%11110000	;2
    836  f3bc		       d0 07		      BNE	DrawDistanceExtraDigit
    837  f3be		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    838  f3c0		       85 d4		      STA	ScoreD4	;3
    839  f3c2		       4c cf f3 	      JMP	EndDrawDistance
    840  f3c5				   DrawDistanceExtraDigit
    841  f3c5		       4a		      LSR		; 2
    842  f3c6		       4a		      LSR		; 2
    843  f3c7		       4a		      LSR		; 2
    844  f3c8		       4a		      LSR		; 2
    845  f3c9		       aa		      TAX		; 2
    846  f3ca		       bd be fd 	      LDA	FontLookup,X	;4
    847  f3cd		       85 d4		      STA	ScoreD4	;3
    848  f3cf
    849  f3cf				   EndDrawDistance
    850  f3cf		       4c 66 f4 	      JMP	RightScoreWriteEnd	;3
    851  f3d2
    852  f3d2				   PrintCheckpoint
    853  f3d2		       a2 00		      LDX	#<CheckpointText
    854  f3d4		       20 12 f8 	      JSR	PrintStaticText
    855  f3d7		       4c 66 f4 	      JMP	RightScoreWriteEnd	;3
    856  f3da				   PrintStartGame
    857  f3da		       a2 23		      LDX	#<GoText
    858  f3dc		       20 12 f8 	      JSR	PrintStaticText
    859  f3df		       4c 66 f4 	      JMP	RightScoreWriteEnd	;3
    860  f3e2
    861  f3e2				   PrintHellwayLeft
    862  f3e2		       a5 8d		      LDA	FrameCount1
    863  f3e4		       29 01		      AND	#1
    864  f3e6		       d0 05		      BNE	PrintCreditsLeft
    865  f3e8		       a2 05		      LDX	#<HellwayLeftText
    866  f3ea		       4c ef f3 	      JMP	PrintGameMode
    867  f3ed				   PrintCreditsLeft
    868  f3ed		       a2 0f		      LDX	#<OpbText
    869  f3ef
    870  f3ef				   PrintGameMode
    871  f3ef		       20 12 f8 	      JSR	PrintStaticText
    872  f3f2		       a6 c5		      LDX	GameMode
    873  f3f4		       bd be fd 	      LDA	FontLookup,X	;4 
    874  f3f7		       85 d0		      STA	ScoreD0	;3
    875  f3f9		       4c 66 f4 	      JMP	RightScoreWriteEnd	;3
    876  f3fc
    877  f3fc				   RightScoreWrite
    878  f3fc		       a5 c0		      LDA	GameStatus
    879  f3fe		       f0 45		      BEQ	PrintHellwayRight
    880  f400		       a5 d5		      LDA	ScoreFontColor
    881  f402		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    882  f404		       f0 52		      BEQ	PrintGameOver
    883  f406				   Digit0Timer
    884  f406		       a5 ba		      LDA	CountdownTimer	;3
    885  f408		       29 0f		      AND	#%00001111	;2
    886  f40a		       aa		      TAX		; 2
    887  f40b		       bd be fd 	      LDA	FontLookup,X	;4 
    888  f40e		       85 d1		      STA	ScoreD1	;3
    889  f410
    890  f410				   Digit1Timer
    891  f410		       a5 ba		      LDA	CountdownTimer	;3
    892  f412		       4a		      LSR		; 2
    893  f413		       4a		      LSR		; 2
    894  f414		       4a		      LSR		; 2
    895  f415		       4a		      LSR		; 2
    896  f416		       aa		      TAX		; 2
    897  f417		       bd be fd 	      LDA	FontLookup,X	;4
    898  f41a		       85 d0		      STA	ScoreD0	;3
    899  f41c
    900  f41c		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    901  f41e		       85 d2		      STA	ScoreD2	;3
    902  f420
    903  f420				   Digit0Speed
    904  f420		       a5 8e		      LDA	Player0SpeedL
    905  f422		       29 3c		      AND	#%00111100	;2 Discard the last bits
    906  f424		       4a		      LSR		; 2
    907  f425		       4a		      LSR		; 2
    908  f426		       aa		      TAX		; 2
    909  f427		       bd be fd 	      LDA	FontLookup,X	;4
    910  f42a		       85 d4		      STA	ScoreD4	;3
    911  f42c
    912  f42c				   Digit1Speed
    913  f42c		       a5 8e		      LDA	Player0SpeedL
    914  f42e		       29 c0		      AND	#%11000000	;2 Discard the last bits
    915  f430		       18		      CLC
    916  f431		       2a		      ROL		;First goes into carry
    917  f432		       2a		      ROL
    918  f433		       2a		      ROL
    919  f434		       85 b0		      STA	Tmp0
    920  f436		       a5 8f		      LDA	Player0SpeedH
    921  f438		       0a		      ASL
    922  f439		       0a		      ASL
    923  f43a		       05 b0		      ORA	Tmp0
    924  f43c		       aa		      TAX		; 2
    925  f43d		       bd be fd 	      LDA	FontLookup,X	;4
    926  f440		       85 d3		      STA	ScoreD3	;3
    927  f442		       4c 66 f4 	      JMP	RightScoreWriteEnd
    928  f445
    929  f445				   PrintHellwayRight
    930  f445		       a5 8d		      LDA	FrameCount1
    931  f447		       29 01		      AND	#1
    932  f449		       d0 05		      BNE	PrintCreditsRight
    933  f44b		       a2 0a		      LDX	#<HellwayRightText
    934  f44d		       4c 52 f4 	      JMP	PrintRightIntro
    935  f450				   PrintCreditsRight
    936  f450		       a2 14		      LDX	#<YearText
    937  f452				   PrintRightIntro
    938  f452		       20 12 f8 	      JSR	PrintStaticText
    939  f455		       4c 66 f4 	      JMP	RightScoreWriteEnd
    940  f458				   PrintGameOver
    941  f458		       a5 8c		      LDA	FrameCount0
    942  f45a		       30 05		      BMI	PrintOverText
    943  f45c		       a2 19		      LDX	#<GameText
    944  f45e		       4c 63 f4 	      JMP	StoreGameOverText
    945  f461				   PrintOverText
    946  f461		       a2 1e		      LDX	#<OverText
    947  f463				   StoreGameOverText
    948  f463		       20 12 f8 	      JSR	PrintStaticText
    949  f466				   RightScoreWriteEnd
    950  f466
    951  f466
    952  f466				   ScoreBackgroundColor
    953  f466		       a2 00		      LDX	#0
    954  f468		       ad 82 02 	      LDA	SWCHB
    955  f46b		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    956  f46d		       f0 04		      BEQ	BlackAndWhiteScoreBg
    957  f46f		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    958  f471		       a2 03		      LDX	#BACKGROUND_COLOR
    959  f473				   BlackAndWhiteScoreBg
    960  f473		       85 b2		      STA	Tmp2	; Score Background
    961  f475		       86 b3		      STX	Tmp3	; Traffic Background
    962  f477
    963  f477				   ConfigurePFForScore
    964  f477							;LDA #SCORE_BACKGROUND_COLOR; Done above
    965  f477		       85 09		      STA	COLUBK
    966  f479		       20 85 f7 	      JSR	ClearAll
    967  f47c		       a9 02		      LDA	#%00000010	; Score mode
    968  f47e		       85 0a		      STA	CTRLPF
    969  f480		       a5 f2		      LDA	TextSide	;3
    970  f482		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    971  f484				   LeftScoreOn
    972  f484		       a5 d5		      LDA	ScoreFontColor
    973  f486		       85 07		      STA	COLUP1
    974  f488		       a5 b2		      LDA	Tmp2
    975  f48a		       85 06		      STA	COLUP0
    976  f48c		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    977  f48e		       85 b1		      STA	Tmp1
    978  f490		       4c 9f f4 	      JMP	CallWaitForVblankEnd
    979  f493				   RightScoreOn
    980  f493		       a5 d5		      LDA	ScoreFontColor
    981  f495		       85 06		      STA	COLUP0
    982  f497		       a5 b2		      LDA	Tmp2
    983  f499		       85 07		      STA	COLUP1
    984  f49b		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    985  f49d		       85 b1		      STA	Tmp1
    986  f49f
    987  f49f							; After here we are going to update the screen, No more heavy code
    988  f49f				   CallWaitForVblankEnd
    989  f49f		       20 30 fa 	      JSR	WaitForVblankEnd
    990  f4a2
    991  f4a2				   DrawScoreHud
    992  f4a2		       20 a2 f8 	      JSR	PrintScore
    993  f4a5
    994  f4a5		       85 02		      STA	WSYNC
    995  f4a7
    996  f4a7		       a5 0c		      LDA	INPT4	;3
    997  f4a9		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    998  f4ab		       a5 d5		      LDA	ScoreFontColor
    999  f4ad		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1000  f4af		       d0 0a		      BNE	WaitAnotherScoreLine
   1001  f4b1		       a5 f2		      LDA	TextSide	;3
   1002  f4b3		       d0 03		      BNE	LeftScoreOnGameOver
   1003  f4b5		       4c 0a fa 	      JMP	DrawGameOverScreenRight
   1004  f4b8				   LeftScoreOnGameOver
   1005  f4b8		       4c 5f f9 	      JMP	DrawGameOverScreenLeft
   1006  f4bb
   1007  f4bb				   WaitAnotherScoreLine
   1008  f4bb		       85 02		      STA	WSYNC
   1009  f4bd
   1010  f4bd				   PrepareForTraffic
   1011  f4bd		       20 97 f7 	      JSR	ClearPF	; 32
   1012  f4c0
   1013  f4c0		       85 02		      STA	WSYNC
   1014  f4c2		       85 02		      STA	WSYNC
   1015  f4c4
   1016  f4c4		       a9 30		      LDA	#%00110000	; 2 Score mode
   1017  f4c6		       85 0a		      STA	CTRLPF	;3
   1018  f4c8
   1019  f4c8		       a5 c3		      LDA	TrafficColor	;3
   1020  f4ca		       85 08		      STA	COLUPF	;3
   1021  f4cc
   1022  f4cc		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1023  f4ce		       85 07		      STA	COLUP1	;3
   1024  f4d0
   1025  f4d0		       a5 d5		      LDA	ScoreFontColor	;3
   1026  f4d2		       85 06		      STA	COLUP0	;3
   1027  f4d4
   1028  f4d4		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1029  f4d6
   1030  f4d6		       20 97 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1031  f4d9
      0  f4d9					      SLEEP	14
      1  f4d9				   .CYCLES    SET	14
      2  f4d9
      3  f4d9				  -	      IF	.CYCLES < 2
      4  f4d9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4d9				  -	      ERR
      6  f4d9					      ENDIF
      7  f4d9
      8  f4d9				  -	      IF	.CYCLES & 1
      9  f4d9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4d9				  -	      nop	0
     11  f4d9				  -	      ELSE
     12  f4d9				  -	      bit	VSYNC
     13  f4d9				  -	      ENDIF
     14  f4d9				  -.CYCLES    SET	.CYCLES - 3
     15  f4d9					      ENDIF
     16  f4d9
     17  f4d9					      REPEAT	.CYCLES / 2
     18  f4d9		       ea		      nop
     17  f4d9					      REPEND
     18  f4da		       ea		      nop
     17  f4da					      REPEND
     18  f4db		       ea		      nop
     17  f4db					      REPEND
     18  f4dc		       ea		      nop
     17  f4dc					      REPEND
     18  f4dd		       ea		      nop
     17  f4dd					      REPEND
     18  f4de		       ea		      nop
     17  f4de					      REPEND
     18  f4df		       ea		      nop
     19  f4e0					      REPEND
   1033  f4e0
   1034  f4e0		       a5 b3		      LDA	Tmp3	;3
   1035  f4e2		       85 09		      STA	COLUBK	;3
   1036  f4e4		       a5 8c		      LDA	FrameCount0
   1037  f4e6		       29 01		      AND	#%00000001
   1038  f4e8		       d0 05		      BNE	OpDrawCache
   1039  f4ea		       4c a9 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1040  f4ed							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1041  f4ed
   1042  f4ed							;main scanline loop...
   1043  f4ed				   OpScanLoop
   1044  f4ed		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1045  f4ef
   1046  f4ef							;Start of next line!			
   1047  f4ef				   OpDrawCache		;63 Is the last line going to the top of the next frame?
   1048  f4ef
   1049  f4ef		       a5 80		      LDA	GRP0Cache	;3
   1050  f4f1		       85 1b		      STA	GRP0	;3
   1051  f4f3
   1052  f4f3		       a5 84		      LDA	GRP1Cache	;3
   1053  f4f5		       85 1c		      STA	GRP1	;3
   1054  f4f7
   1055  f4f7		       a5 85		      LDA	ENABLCache	;3
   1056  f4f9		       85 1f		      STA	ENABL	;3
   1057  f4fb
   1058  f4fb		       a5 86		      LDA	ENAM0Cache	;3
   1059  f4fd		       85 1d		      STA	ENAM0	;3
   1060  f4ff
   1061  f4ff		       a5 87		      LDA	ENAM1Cache	;3
   1062  f501		       85 1e		      STA	ENAM1	;3
   1063  f503
   1064  f503		       a5 81		      LDA	PF0Cache	;3
   1065  f505		       85 0d		      STA	PF0	;3
   1066  f507
   1067  f507		       a9 00		      LDA	#0	;2
   1068  f509							;STA PF0	     ;3
   1069  f509		       85 80		      STA	GRP0Cache	;3
   1070  f50b		       85 86		      STA	ENAM0Cache	;3
   1071  f50d		       85 85		      STA	ENABLCache	;3
   1072  f50f		       85 87		      STA	ENAM1Cache	; 3
   1073  f511		       85 0d		      STA	PF0	;3
   1074  f513							;STA PF2	     ;3
   1075  f513
   1076  f513		       a5 83		      LDA	PF2Cache	;3
   1077  f515		       85 0f		      STA	PF2	;3
   1078  f517
   1079  f517				   OpDrawCar0
   1080  f517		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1081  f519		       b0 04		      BCS	OpSkipDrawCar	;2
   1082  f51b		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1083  f51d		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
   1084  f51f				   OpSkipDrawCar
   1085  f51f
   1086  f51f							;BEQ DrawTraffic3
   1087  f51f				   OpDrawTraffic1		; 33
   1088  f51f		       98		      TYA		; 2
   1089  f520		       18		      CLC		; 2 
   1090  f521		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
   1091  f523		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1092  f525		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1093  f527		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
   1094  f529		       4c 2e f5 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1095  f52c				   OpEorOffsetWithCarry
   1096  f52c		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1097  f52e				   OpAfterEorOffsetWithCarry		;17
   1098  f52e		       aa		      TAX		;2
   1099  f52f		       bd 00 fe 	      LDA	AesTable,X	; 4
   1100  f532		       c5 c1		      CMP	TrafficChance	;3
   1101  f534		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1102  f536		       a9 ff		      LDA	#$FF	;2
   1103  f538		       85 86		      STA	ENAM0Cache	;3
   1104  f53a				   OpFinishDrawTraffic1
   1105  f53a
   1106  f53a				   OpErasePF2
   1107  f53a		       a9 00		      LDA	#0
   1108  f53c		       85 0f		      STA	PF2
   1109  f53e
   1110  f53e				   OpDrawTraffic2		; 33
   1111  f53e		       98		      TYA		; 2
   1112  f53f		       18		      CLC		; 2 
   1113  f540		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
   1114  f542		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1115  f544		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1116  f546		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
   1117  f548		       4c 4d f5 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1118  f54b				   OpEorOffsetWithCarry2
   1119  f54b		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1120  f54d				   OpAfterEorOffsetWithCarry2		;17
   1121  f54d		       aa		      TAX		;2
   1122  f54e		       bd 00 fe 	      LDA	AesTable,X	; 4
   1123  f551		       c5 c1		      CMP	TrafficChance	;3
   1124  f553		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1125  f555		       a9 02		      LDA	#%00000010	;2
   1126  f557		       85 85		      STA	ENABLCache	;3
   1127  f559				   OpFinishDrawTraffic2
   1128  f559
   1129  f559							;STA WSYNC ;65 / 137
   1130  f559
   1131  f559							; LDA Tmp0 ; Flicker this line if drawing car
   1132  f559							; BEQ FinishDrawTraffic4
   1133  f559				   OpDrawTraffic3		; 33
   1134  f559		       98		      TYA		; 2
   1135  f55a		       18		      CLC		; 2 
   1136  f55b		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
   1137  f55d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1138  f55f		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1139  f561		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
   1140  f563		       4c 68 f5 	      JMP	OpAfterEorOffsetWithCarry3	; 3
   1141  f566				   OpEorOffsetWithCarry3
   1142  f566		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1143  f568				   OpAfterEorOffsetWithCarry3		;17
   1144  f568		       aa		      TAX		;2
   1145  f569		       bd 00 fe 	      LDA	AesTable,X	; 4
   1146  f56c		       c5 c1		      CMP	TrafficChance	;3
   1147  f56e		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1148  f570		       a9 02		      LDA	#%00000010	;2
   1149  f572		       85 87		      STA	ENAM1Cache
   1150  f574				   OpFinishDrawTraffic3
   1151  f574
   1152  f574				   OpDrawOponent		;26
   1153  f574		       84 b0		      STY	Tmp0	;3
   1154  f576		       a4 d8		      LDY	OpponentLine	;3
   1155  f578		       c0 08		      CPY	#(CAR_START_LINE - 7)	;2
   1156  f57a		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1157  f57c				   OpDrawOpponent
   1158  f57c		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1159  f57e		       85 80		      STA	GRP0Cache	;3
   1160  f580		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1161  f582		       a4 b0		      LDY	Tmp0	;3
   1162  f584		       4c 9e f5 	      JMP	OpSkipDrawTraffic0	; Do not draw border to save cycles
   1163  f587				   OpSkipDrawOpponent
   1164  f587		       c6 d8		      DEC	OpponentLine	;5
   1165  f589		       a4 b0		      LDY	Tmp0	;3
   1166  f58b
   1167  f58b				   OpDrawTraffic0		; 21 2pe
   1168  f58b		       98		      TYA		; 2
   1169  f58c		       18		      CLC		; 2 
   1170  f58d		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1171  f58f		       29 08		      AND	#%00001000	;2
   1172  f591		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1173  f593				   OpHasBorderP0
   1174  f593		       a9 70		      LDA	#%01110000	; 2
   1175  f595		       4c 9a f5 	      JMP	OpStoreBorderP0	; 3
   1176  f598				   OpHasNoBorderP0
   1177  f598		       a9 00		      LDA	#0	; 2
   1178  f59a				   OpStoreBorderP0
   1179  f59a		       85 81		      STA	PF0Cache	; 3
   1180  f59c		       85 83		      STA	PF2Cache	; 3
   1181  f59e
   1182  f59e				   OpSkipDrawTraffic0
   1183  f59e
   1184  f59e				   OpWhileScanLoop
   1185  f59e		       88		      DEY		;2
   1186  f59f		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1187  f5a1		       4c ed f4 	      JMP	OpScanLoop	;3
   1188  f5a4				   OpFinishScanLoop		; 7 209 of 222
   1189  f5a4		       4c 5c f6 	      JMP	FinishScanLoop
   1190  f5a7
   1191  f5a7							;main scanline loop...
   1192  f5a7				   ScanLoop
   1193  f5a7		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1194  f5a9
   1195  f5a9							;Start of next line!			
   1196  f5a9				   DrawCache		;63 Is the last line going to the top of the next frame?
   1197  f5a9		       a5 81		      LDA	PF0Cache	;3
   1198  f5ab		       85 0d		      STA	PF0	;3
   1199  f5ad
   1200  f5ad		       a5 80		      LDA	GRP0Cache	;3
   1201  f5af		       85 1b		      STA	GRP0	;3
   1202  f5b1
   1203  f5b1		       a5 84		      LDA	GRP1Cache	;3
   1204  f5b3		       85 1c		      STA	GRP1	;3
   1205  f5b5
   1206  f5b5		       a5 86		      LDA	ENAM0Cache	;3
   1207  f5b7		       85 1d		      STA	ENAM0	;3
   1208  f5b9
   1209  f5b9		       a5 85		      LDA	ENABLCache	;3
   1210  f5bb		       85 1f		      STA	ENABL	;3
   1211  f5bd
   1212  f5bd		       a5 87		      LDA	ENAM1Cache	;3
   1213  f5bf		       85 1e		      STA	ENAM1	;3
   1214  f5c1
   1215  f5c1		       a5 83		      LDA	PF2Cache	;3
   1216  f5c3		       85 0f		      STA	PF2	;3
   1217  f5c5
   1218  f5c5		       a9 00		      LDA	#0	;2
   1219  f5c7		       85 0d		      STA	PF0	;3
   1220  f5c9		       85 84		      STA	GRP1Cache	;3
   1221  f5cb		       85 85		      STA	ENABLCache	;3
   1222  f5cd		       85 86		      STA	ENAM0Cache	;3
   1223  f5cf		       85 87		      STA	ENAM1Cache	; 3
   1224  f5d1		       85 0f		      STA	PF2	;3
   1225  f5d3
   1226  f5d3				   DrawCar0
   1227  f5d3		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1228  f5d5		       b0 04		      BCS	SkipDrawCar	;2
   1229  f5d7		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1230  f5d9		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1231  f5db				   SkipDrawCar
   1232  f5db
   1233  f5db							;BEQ DrawTraffic3
   1234  f5db				   DrawTraffic1 		; 33
   1235  f5db		       98		      TYA		; 2
   1236  f5dc		       18		      CLC		; 2 
   1237  f5dd		       65 95		      ADC	TrafficOffset1 + 1	;3
   1238  f5df		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1239  f5e1		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1240  f5e3		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1241  f5e5		       4c ea f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1242  f5e8				   EorOffsetWithCarry
   1243  f5e8		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1244  f5ea				   AfterEorOffsetWithCarry		;17
   1245  f5ea		       aa		      TAX		;2
   1246  f5eb		       bd 00 fe 	      LDA	AesTable,X	; 4
   1247  f5ee		       c5 c1		      CMP	TrafficChance	;3
   1248  f5f0		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1249  f5f2		       a9 ff		      LDA	#$FF	;2
   1250  f5f4		       85 86		      STA	ENAM0Cache	;3
   1251  f5f6				   FinishDrawTraffic1
   1252  f5f6
   1253  f5f6				   DrawTraffic2 		; 33
   1254  f5f6		       98		      TYA		; 2
   1255  f5f7		       18		      CLC		; 2 
   1256  f5f8		       65 99		      ADC	TrafficOffset2 + 1	;3
   1257  f5fa		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1258  f5fc		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1259  f5fe		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1260  f600		       4c 05 f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1261  f603				   EorOffsetWithCarry2
   1262  f603		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1263  f605				   AfterEorOffsetWithCarry2		;17
   1264  f605		       aa		      TAX		;2
   1265  f606		       bd 00 fe 	      LDA	AesTable,X	; 4
   1266  f609		       c5 c1		      CMP	TrafficChance	;3
   1267  f60b		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1268  f60d		       a9 02		      LDA	#%00000010	;2
   1269  f60f		       85 85		      STA	ENABLCache	;3
   1270  f611				   FinishDrawTraffic2
   1271  f611
   1272  f611							;STA WSYNC ;65 / 137
   1273  f611
   1274  f611							; LDA Tmp0 ; Flicker this line if drawing car
   1275  f611							; BEQ FinishDrawTraffic4
   1276  f611				   DrawTraffic3 		; 33
   1277  f611		       98		      TYA		; 2
   1278  f612		       18		      CLC		; 2 
   1279  f613		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1280  f615		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1281  f617		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1282  f619		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1283  f61b		       4c 20 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1284  f61e				   EorOffsetWithCarry3
   1285  f61e		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1286  f620				   AfterEorOffsetWithCarry3		;17
   1287  f620		       aa		      TAX		;2
   1288  f621		       bd 00 fe 	      LDA	AesTable,X	; 4
   1289  f624		       c5 c1		      CMP	TrafficChance	;3
   1290  f626		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1291  f628		       a9 02		      LDA	#%00000010	;2
   1292  f62a		       85 87		      STA	ENAM1Cache
   1293  f62c				   FinishDrawTraffic3
   1294  f62c
   1295  f62c
   1296  f62c				   DrawOponent		;26
   1297  f62c		       84 b0		      STY	Tmp0	;3
   1298  f62e		       a4 d8		      LDY	OpponentLine	;3
   1299  f630		       c0 08		      CPY	#(CAR_START_LINE - 7)	;2
   1300  f632		       b0 0b		      BCS	SkipDrawOpponent	;2
   1301  f634				   DrawOpponent
   1302  f634		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1303  f636		       85 84		      STA	GRP1Cache	;3
   1304  f638		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1305  f63a		       a4 b0		      LDY	Tmp0	;3
   1306  f63c		       4c 56 f6 	      JMP	SkipDrawTraffic0	; Do not draw border to save cycles
   1307  f63f				   SkipDrawOpponent
   1308  f63f		       c6 d8		      DEC	OpponentLine	;5
   1309  f641		       a4 b0		      LDY	Tmp0	;3
   1310  f643
   1311  f643				   DrawTraffic0 		; 21 2pe
   1312  f643		       98		      TYA		; 2
   1313  f644		       18		      CLC		; 2 
   1314  f645		       65 91		      ADC	TrafficOffset0 + 1	;3
   1315  f647		       29 08		      AND	#%00001000	;2
   1316  f649		       f0 05		      BEQ	HasNoBorderP0	;3
   1317  f64b				   HasBorderP0
   1318  f64b		       a9 70		      LDA	#%01110000	; 2
   1319  f64d		       4c 52 f6 	      JMP	StoreBorderP0	; 3
   1320  f650				   HasNoBorderP0
   1321  f650		       a9 00		      LDA	#0	; 2
   1322  f652				   StoreBorderP0
   1323  f652		       85 81		      STA	PF0Cache	; 3
   1324  f654		       85 83		      STA	PF2Cache	; 3
   1325  f656
   1326  f656				   SkipDrawTraffic0
   1327  f656
   1328  f656				   WhileScanLoop
   1329  f656		       88		      DEY		;2
   1330  f657		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1331  f659		       4c a7 f5 	      JMP	ScanLoop	;3
   1332  f65c				   FinishScanLoop		; 7 209 of 222
   1333  f65c
   1334  f65c		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1335  f65e		       20 a6 f7 	      JSR	LoadAll
   1336  f661		       85 02		      STA	WSYNC	; do stuff!
   1337  f663		       85 02		      STA	WSYNC
   1338  f665		       85 02		      STA	WSYNC
   1339  f667							;42 cycles to use here
   1340  f667
   1341  f667				   PrepareOverscan
   1342  f667		       a9 02		      LDA	#2
   1343  f669		       85 02		      STA	WSYNC
   1344  f66b		       85 01		      STA	VBLANK
   1345  f66d
   1346  f66d		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1347  f66f		       8d 96 02 	      STA	TIM64T
   1348  f672
   1349  f672				   LeftSound		;41
   1350  f672		       a5 ba		      LDA	CountdownTimer	;3
   1351  f674		       f0 1b		      BEQ	EngineOff	;2
   1352  f676		       a6 f4		      LDX	Gear
   1353  f678		       a5 8e		      LDA	Player0SpeedL	;3
   1354  f67a		       4a		      LSR		;2
   1355  f67b		       4a		      LSR		;2
   1356  f67c		       4a		      LSR		;2
   1357  f67d		       29 0f		      AND	#%00001111	;2
   1358  f67f		       85 b0		      STA	Tmp0	;3
   1359  f681		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1360  f684		       38		      SEC		;2
   1361  f685		       e5 b0		      SBC	Tmp0	;3
   1362  f687		       85 17		      STA	AUDF0	;3
   1363  f689		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1364  f68c		       85 15		      STA	AUDC0	;3
   1365  f68e		       4c 95 f6 	      JMP	EndLeftSound	;3
   1366  f691				   EngineOff
   1367  f691		       a9 00		      LDA	#0
   1368  f693		       85 15		      STA	AUDC0
   1369  f695
   1370  f695				   EndLeftSound
   1371  f695
   1372  f695
   1373  f695				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1374  f695		       a5 d5		      LDA	ScoreFontColor	;3
   1375  f697		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1376  f699		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1377  f69b		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1378  f69d		       f0 29		      BEQ	PlayCheckpoint	;2
   1379  f69f		       a5 b8		      LDA	CollisionCounter	;3
   1380  f6a1		       c9 e0		      CMP	#$E0	;2
   1381  f6a3		       b0 14		      BCS	PlayColision	;2
   1382  f6a5		       a5 d7		      LDA	NextCheckpoint	;3
   1383  f6a7		       38		      SEC		;2
   1384  f6a8		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1385  f6aa		       c9 02		      CMP	#$02	;2
   1386  f6ac		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1387  f6ae		       a5 ba		      LDA	CountdownTimer	; 3
   1388  f6b0		       f0 53		      BEQ	MuteRightSound	;2
   1389  f6b2		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1390  f6b4		       90 37		      BCC	PlayWarnTimeEnding	;4
   1391  f6b6		       4c 05 f7 	      JMP	MuteRightSound	;3
   1392  f6b9				   PlayColision
   1393  f6b9		       a9 1f		      LDA	#31
   1394  f6bb		       85 18		      STA	AUDF1
   1395  f6bd		       a9 08		      LDA	#8
   1396  f6bf		       85 16		      STA	AUDC1
   1397  f6c1		       a9 08		      LDA	#8
   1398  f6c3		       85 1a		      STA	AUDV1
   1399  f6c5		       4c 09 f7 	      JMP	EndRightSound
   1400  f6c8
   1401  f6c8				   PlayCheckpoint
   1402  f6c8		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1403  f6ca		       4a		      LSR		;2
   1404  f6cb		       4a		      LSR		;2
   1405  f6cc		       4a		      LSR		;2
   1406  f6cd		       85 18		      STA	AUDF1	;3
   1407  f6cf		       a9 0c		      LDA	#12	;2
   1408  f6d1		       85 16		      STA	AUDC1	;3
   1409  f6d3		       a9 06		      LDA	#6	;2
   1410  f6d5		       85 1a		      STA	AUDV1	;3
   1411  f6d7		       4c 09 f7 	      JMP	EndRightSound	;3
   1412  f6da
   1413  f6da				   PlayBeforeCheckpoint
   1414  f6da		       a5 8c		      LDA	FrameCount0	;3
   1415  f6dc		       29 1c		      AND	#%00011100	;2
   1416  f6de		       09 03		      ORA	#%00000011	;2
   1417  f6e0		       85 18		      STA	AUDF1	;3
   1418  f6e2		       a9 0c		      LDA	#12	;2
   1419  f6e4		       85 16		      STA	AUDC1	;3
   1420  f6e6		       a9 03		      LDA	#3	;2
   1421  f6e8		       85 1a		      STA	AUDV1	;3
   1422  f6ea		       4c 09 f7 	      JMP	EndRightSound	;3
   1423  f6ed
   1424  f6ed				   PlayWarnTimeEnding
   1425  f6ed		       a5 8c		      LDA	FrameCount0	;3
   1426  f6ef		       29 04		      AND	#%00000100	;2
   1427  f6f1		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1428  f6f3		       18		      CLC		;2
   1429  f6f4		       a9 0a		      LDA	#10	;2
   1430  f6f6		       65 ba		      ADC	CountdownTimer	;2
   1431  f6f8		       85 18		      STA	AUDF1	;3
   1432  f6fa		       a9 0c		      LDA	#12	;2
   1433  f6fc		       85 16		      STA	AUDC1	;3
   1434  f6fe		       a9 03		      LDA	#3	;2
   1435  f700		       85 1a		      STA	AUDV1	;3
   1436  f702		       4c 09 f7 	      JMP	EndRightSound	;3
   1437  f705
   1438  f705				   MuteRightSound
   1439  f705		       a9 00		      LDA	#0
   1440  f707		       85 1a		      STA	AUDV1
   1441  f709				   EndRightSound
   1442  f709
   1443  f709							;Read Fire Button before, will make it start the game for now.
   1444  f709				   StartGame
   1445  f709		       a5 0c		      LDA	INPT4	;3
   1446  f70b		       30 31		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1447  f70d		       a5 8c		      LDA	FrameCount0
   1448  f70f		       29 01		      AND	#%00000001
   1449  f711		       d0 2b		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped.
   1450  f713		       a5 c0		      LDA	GameStatus	;3
   1451  f715		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1452  f717		       d0 25		      BNE	SkipGameStart
   1453  f719		       a5 c5		      LDA	GameMode
   1454  f71b		       c9 10		      CMP	#MAX_GAME_MODE
   1455  f71d		       d0 0b		      BNE	SetGameRunning
   1456  f71f		       a9 00		      LDA	#0
   1457  f721		       85 c5		      STA	GameMode
   1458  f723		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1459  f725		       85 bc		      STA	SwitchDebounceCounter
   1460  f727		       4c 3e f7 	      JMP	SkipGameStart
   1461  f72a				   SetGameRunning
   1462  f72a		       e6 c0		      INC	GameStatus
   1463  f72c		       a9 00		      LDA	#0	;
   1464  f72e		       85 8c		      STA	FrameCount0
   1465  f730		       85 8d		      STA	FrameCount1
   1466  f732		       a9 0a		      LDA	#10
   1467  f734		       85 19		      STA	AUDV0
   1468  f736		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1469  f738		       85 d5		      STA	ScoreFontColor
   1470  f73a		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1471  f73c		       85 d6		      STA	ScoreFontColorHoldChange
   1472  f73e				   SkipGameStart
   1473  f73e
   1474  f73e				   ReadSwitches
   1475  f73e		       a6 bc		      LDX	SwitchDebounceCounter
   1476  f740		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1477  f742		       a9 01		      LDA	#%00000001
   1478  f744		       2c 82 02 	      BIT	SWCHB
   1479  f747		       d0 07		      BNE	SkipReset
   1480  f749		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1481  f74b		       85 bc		      STA	SwitchDebounceCounter
   1482  f74d		       4c 7d f7 	      JMP	OverScanWaitBeforeReset
   1483  f750				   SkipReset
   1484  f750
   1485  f750				   GameModeSelect
   1486  f750		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1487  f752		       d0 1c		      BNE	SkipGameSelect
   1488  f754		       20 d2 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1489  f757				   ContinueGameSelect
   1490  f757		       a9 02		      LDA	#%00000010
   1491  f759		       2c 82 02 	      BIT	SWCHB
   1492  f75c		       d0 12		      BNE	SkipGameSelect
   1493  f75e		       a6 c5		      LDX	GameMode
   1494  f760		       e0 10		      CPX	#MAX_GAME_MODE
   1495  f762		       f0 04		      BEQ	ResetGameMode
   1496  f764		       e8		      INX
   1497  f765		       4c 6a f7 	      JMP	StoreGameMode
   1498  f768				   ResetGameMode
   1499  f768		       a2 00		      LDX	#0
   1500  f76a				   StoreGameMode
   1501  f76a		       86 c5		      STX	GameMode
   1502  f76c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1503  f76e		       85 bc		      STA	SwitchDebounceCounter
   1504  f770				   SkipGameSelect
   1505  f770		       4c 75 f7 	      JMP	EndReadSwitches
   1506  f773				   DecrementSwitchDebounceCounter
   1507  f773		       c6 bc		      DEC	SwitchDebounceCounter
   1508  f775				   EndReadSwitches
   1509  f775
   1510  f775				   OverScanWait
   1511  f775		       ad 84 02 	      LDA	INTIM
   1512  f778		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1513  f77a		       4c e1 f0 	      JMP	MainLoop
   1514  f77d
   1515  f77d				   OverScanWaitBeforeReset
   1516  f77d		       ad 84 02 	      LDA	INTIM
   1517  f780		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1518  f782		       4c 10 f0 	      JMP	Start
   1519  f785
   1520  f785				   Subroutines
   1521  f785
   1522  f785				   ClearAll		; 52
   1523  f785		       a9 00		      LDA	#0	;2
   1524  f787		       85 1c		      STA	GRP1	;3
   1525  f789		       85 1f		      STA	ENABL	;3
   1526  f78b		       85 1d		      STA	ENAM0	;3
   1527  f78d		       85 1e		      STA	ENAM1	;3
   1528  f78f		       85 84		      STA	GRP1Cache	;3
   1529  f791		       85 85		      STA	ENABLCache	;3
   1530  f793		       85 86		      STA	ENAM0Cache	;3
   1531  f795		       85 87		      STA	ENAM1Cache	;3
   1532  f797
   1533  f797				   ClearPF		; 26
   1534  f797		       a9 00		      LDA	#0	;2
   1535  f799				   ClearPFSkipLDA0
   1536  f799		       85 0d		      STA	PF0	;3
   1537  f79b		       85 0e		      STA	PF1	;3
   1538  f79d		       85 0f		      STA	PF2	;3	
   1539  f79f		       85 81		      STA	PF0Cache	;3
   1540  f7a1		       85 82		      STA	PF1Cache	;3
   1541  f7a3		       85 83		      STA	PF2Cache	;3 
   1542  f7a5		       60		      RTS		;6
   1543  f7a6				   EndClearAll
   1544  f7a6
   1545  f7a6				   LoadAll		; 48
   1546  f7a6		       a5 81		      LDA	PF0Cache	;3
   1547  f7a8		       85 0d		      STA	PF0	;3
   1548  f7aa
   1549  f7aa		       a5 82		      LDA	PF1Cache	;3
   1550  f7ac		       85 0e		      STA	PF1	;3
   1551  f7ae
   1552  f7ae		       a5 83		      LDA	PF2Cache	;3
   1553  f7b0		       85 0f		      STA	PF2	;3
   1554  f7b2
   1555  f7b2		       a5 84		      LDA	GRP1Cache	;3
   1556  f7b4		       85 1c		      STA	GRP1	;3
   1557  f7b6
   1558  f7b6		       a5 85		      LDA	ENABLCache	;3
   1559  f7b8		       85 1f		      STA	ENABL	;3
   1560  f7ba
   1561  f7ba		       a5 86		      LDA	ENAM0Cache	;3
   1562  f7bc		       85 1d		      STA	ENAM0	;3
   1563  f7be
   1564  f7be		       a5 87		      LDA	ENAM1Cache	;3
   1565  f7c0		       85 1e		      STA	ENAM1	;3
   1566  f7c2
   1567  f7c2		       60		      RTS		;6
   1568  f7c3				   EndLoadAll
   1569  f7c3
   1570  f7c3				   NextDifficulty
   1571  f7c3		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1572  f7c5		       29 01		      AND	#%00000001
   1573  f7c7		       d0 24		      BNE	CheckRandomDifficulty
   1574  f7c9
   1575  f7c9		       a5 c4		      LDA	CurrentDifficulty
   1576  f7cb		       18		      CLC
   1577  f7cc		       69 01		      ADC	#1
   1578  f7ce		       29 03		      AND	#%00000011	; 0 to 3
   1579  f7d0		       85 c4		      STA	CurrentDifficulty
   1580  f7d2
   1581  f7d2				   ConfigureDifficulty
   1582  f7d2		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1583  f7d4		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1584  f7d7		       85 c1		      STA	TrafficChance
   1585  f7d9		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1586  f7dc		       85 c3		      STA	TrafficColor
   1587  f7de
   1588  f7de		       a5 c5		      LDA	GameMode	;
   1589  f7e0		       29 01		      AND	#%00000001
   1590  f7e2		       f0 03		      BEQ	UseNextDifficultyTime
   1591  f7e4		       4c e8 f7 	      JMP	StoreDifficultyTime
   1592  f7e7				   UseNextDifficultyTime
   1593  f7e7		       c8		      INY
   1594  f7e8				   StoreDifficultyTime
   1595  f7e8		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1596  f7eb		       85 c2		      STA	CheckpointTime
   1597  f7ed
   1598  f7ed				   CheckRandomDifficulty
   1599  f7ed		       a5 c5		      LDA	GameMode
   1600  f7ef		       29 08		      AND	#%00001000	; Random difficulties
   1601  f7f1		       f0 09		      BEQ	ReturnFromNextDifficulty
   1602  f7f3				   RandomDifficulty
   1603  f7f3		       a6 8c		      LDX	FrameCount0
   1604  f7f5		       bd 00 fe 	      LDA	AesTable,X
   1605  f7f8							;EOR TrafficChance, no need, lets make life simple
   1606  f7f8		       29 3f		      AND	#%00111111
   1607  f7fa		       85 c1		      STA	TrafficChance
   1608  f7fc
   1609  f7fc				   ReturnFromNextDifficulty
   1610  f7fc		       60		      RTS
   1611  f7fd				   EndNextDifficulty
   1612  f7fd
   1613  f7fd				   DefaultOffsets
   1614  f7fd		       a9 20		      LDA	#$20
   1615  f7ff		       85 96		      STA	TrafficOffset1 + 2
   1616  f801		       85 a6		      STA	OpTrafficOffset1 + 2
   1617  f803		       a9 40		      LDA	#$40
   1618  f805		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1619  f807		       85 aa		      STA	OpTrafficOffset2 + 2
   1620  f809		       a9 60		      LDA	#$60
   1621  f80b		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1622  f80d		       85 ae		      STA	OpTrafficOffset3 + 2
   1623  f80f		       a9 80		      LDA	#$80
   1624  f811		       60		      RTS
   1625  f812
   1626  f812				   PrintStaticText		; Preload X with the offset referent to StaticText
   1627  f812		       bd 00 ff 	      LDA	StaticText,X
   1628  f815		       85 d0		      STA	ScoreD0
   1629  f817		       e8		      INX
   1630  f818		       bd 00 ff 	      LDA	StaticText,X
   1631  f81b		       85 d1		      STA	ScoreD1
   1632  f81d		       e8		      INX
   1633  f81e		       bd 00 ff 	      LDA	StaticText,X
   1634  f821		       85 d2		      STA	ScoreD2
   1635  f823		       e8		      INX
   1636  f824		       bd 00 ff 	      LDA	StaticText,X
   1637  f827		       85 d3		      STA	ScoreD3
   1638  f829		       e8		      INX
   1639  f82a		       bd 00 ff 	      LDA	StaticText,X
   1640  f82d		       85 d4		      STA	ScoreD4
   1641  f82f		       60		      RTS
   1642  f830
   1643  f830				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1644  f830		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1645  f832		       85 d5		      STA	ScoreFontColor
   1646  f834		       a9 01		      LDA	#1
   1647  f836		       85 d6		      STA	ScoreFontColorHoldChange
   1648  f838
   1649  f838		       a5 8d		      LDA	FrameCount1
   1650  f83a		       29 07		      AND	#%00000111
   1651  f83c		       85 b3		      STA	Tmp3
   1652  f83e							;0 is Zelda Name, (default)
   1653  f83e		       a9 01		      LDA	#1
   1654  f840		       c5 b3		      CMP	Tmp3
   1655  f842		       f0 38		      BEQ	PrintZeldaDateLeft
   1656  f844
   1657  f844		       a9 02		      LDA	#2
   1658  f846		       c5 b3		      CMP	Tmp3
   1659  f848		       f0 23		      BEQ	PrintPolvinhosLeft
   1660  f84a
   1661  f84a		       a9 03		      LDA	#3
   1662  f84c		       c5 b3		      CMP	Tmp3
   1663  f84e		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1664  f850
   1665  f850		       a9 04		      LDA	#4
   1666  f852		       c5 b3		      CMP	Tmp3
   1667  f854		       f0 1c		      BEQ	PrintIvonneLeft
   1668  f856
   1669  f856		       a9 05		      LDA	#5
   1670  f858		       c5 b3		      CMP	Tmp3
   1671  f85a		       f0 2a		      BEQ	PrintIvonneDateLeft
   1672  f85c
   1673  f85c		       a9 06		      LDA	#6
   1674  f85e		       c5 b3		      CMP	Tmp3
   1675  f860		       f0 15		      BEQ	PrintArtLeft
   1676  f862
   1677  f862		       a9 07		      LDA	#7
   1678  f864		       c5 b3		      CMP	Tmp3
   1679  f866		       f0 23		      BEQ	PrintLeonardoLeft
   1680  f868
   1681  f868				   PrintZeldaLeft
   1682  f868		       a2 28		      LDX	#<ZeldaTextLeft
   1683  f86a		       4c 90 f8 	      JMP	ProcessPrintEasterEgg
   1684  f86d				   PrintPolvinhosLeft
   1685  f86d		       a2 3c		      LDX	#<PolvinhosTextLeft
   1686  f86f		       4c 90 f8 	      JMP	ProcessPrintEasterEgg
   1687  f872				   PrintIvonneLeft
   1688  f872		       a2 50		      LDX	#<IvonneTextLeft
   1689  f874		       4c 90 f8 	      JMP	ProcessPrintEasterEgg
   1690  f877				   PrintArtLeft
   1691  f877		       a2 64		      LDX	#<PaperArtTextLeft
   1692  f879		       4c 90 f8 	      JMP	ProcessPrintEasterEgg
   1693  f87c
   1694  f87c				   PrintZeldaDateLeft
   1695  f87c		       a2 32		      LDX	#<ZeldaDateLeft
   1696  f87e		       4c 90 f8 	      JMP	ProcessPrintEasterEgg
   1697  f881				   PrintPolvinhosDateLeft
   1698  f881		       a2 46		      LDX	#<PolvinhosDateLeft
   1699  f883		       4c 90 f8 	      JMP	ProcessPrintEasterEgg
   1700  f886				   PrintIvonneDateLeft
   1701  f886		       a2 5a		      LDX	#<IvonneDateLeft
   1702  f888		       4c 90 f8 	      JMP	ProcessPrintEasterEgg
   1703  f88b				   PrintLeonardoLeft
   1704  f88b		       a2 6e		      LDX	#<LeonardoTextLeft
   1705  f88d		       4c 90 f8 	      JMP	ProcessPrintEasterEgg
   1706  f890
   1707  f890				   ProcessPrintEasterEgg
   1708  f890		       a5 8c		      LDA	FrameCount0	;3
   1709  f892		       29 01		      AND	#%00000001	;2
   1710  f894		       d0 03		      BNE	TranformIntoRightText
   1711  f896		       4c 9e f8 	      JMP	PrintEasterEggText
   1712  f899				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1713  f899		       8a		      TXA
   1714  f89a		       18		      CLC
   1715  f89b		       69 05		      ADC	#HALF_TEXT_SIZE
   1716  f89d		       aa		      TAX
   1717  f89e
   1718  f89e				   PrintEasterEggText
   1719  f89e		       20 12 f8 	      JSR	PrintStaticText
   1720  f8a1		       60		      RTS
   1721  f8a2
   1722  f8a2				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1723  f8a2		       a2 00		      LDX	#0
   1724  f8a4		       a0 04		      LDY	#FONT_OFFSET
   1725  f8a6
   1726  f8a6				   ScoreLoop		; 20 
   1727  f8a6		       85 02		      STA	WSYNC	;2
   1728  f8a8
   1729  f8a8		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1730  f8aa		       85 0d		      STA	PF0	;3
   1731  f8ac
   1732  f8ac		       a5 82		      LDA	PF1Cache	;3
   1733  f8ae		       85 0e		      STA	PF1	;3
   1734  f8b0
   1735  f8b0		       a5 83		      LDA	PF2Cache	;3
   1736  f8b2		       85 0f		      STA	PF2	;3
   1737  f8b4
   1738  f8b4				   DrawScoreD0		; 15
   1739  f8b4		       a6 d0		      LDX	ScoreD0	; 3
   1740  f8b6		       bd 00 fd 	      LDA	Font,X	;4
   1741  f8b9		       85 81		      STA	PF0Cache	;3
   1742  f8bb		       c6 d0		      DEC	ScoreD0	;5
   1743  f8bd
   1744  f8bd				   DrawScoreD1		; 23	
   1745  f8bd		       a6 d1		      LDX	ScoreD1	; 3
   1746  f8bf		       bd 00 fd 	      LDA	Font,X	;4
   1747  f8c2		       0a		      ASL		;2
   1748  f8c3		       0a		      ASL		;2
   1749  f8c4		       0a		      ASL		;2
   1750  f8c5		       0a		      ASL		;2
   1751  f8c6		       85 82		      STA	PF1Cache	;3
   1752  f8c8		       c6 d1		      DEC	ScoreD1	;5
   1753  f8ca
   1754  f8ca				   DrawScoreD2		; 20
   1755  f8ca		       a6 d2		      LDX	ScoreD2	; 3
   1756  f8cc		       bd 00 fd 	      LDA	Font,X	;4
   1757  f8cf		       29 0f		      AND	#%00001111	;2
   1758  f8d1		       05 82		      ORA	PF1Cache	;3
   1759  f8d3		       85 82		      STA	PF1Cache	;3
   1760  f8d5		       c6 d2		      DEC	ScoreD2	;5
   1761  f8d7
   1762  f8d7				   DrawScoreD3		; 23
   1763  f8d7		       a6 d3		      LDX	ScoreD3	; 3
   1764  f8d9		       bd 00 fd 	      LDA	Font,X	;4
   1765  f8dc		       4a		      LSR		;2
   1766  f8dd		       4a		      LSR		;2
   1767  f8de		       4a		      LSR		;2
   1768  f8df		       4a		      LSR		;2
   1769  f8e0		       85 83		      STA	PF2Cache	;3
   1770  f8e2		       c6 d3		      DEC	ScoreD3	;5
   1771  f8e4
   1772  f8e4				   DrawScoreD4		; 20
   1773  f8e4		       a6 d4		      LDX	ScoreD4	; 3
   1774  f8e6		       bd 00 fd 	      LDA	Font,X	;4
   1775  f8e9		       29 f0		      AND	#%11110000	;2
   1776  f8eb		       05 83		      ORA	PF2Cache	;3
   1777  f8ed		       85 83		      STA	PF2Cache	;3
   1778  f8ef		       c6 d4		      DEC	ScoreD4	;5
   1779  f8f1
   1780  f8f1
   1781  f8f1		       88		      DEY		;2
   1782  f8f2		       10 b2		      BPL	ScoreLoop	;4
   1783  f8f4
   1784  f8f4		       85 02		      STA	WSYNC
   1785  f8f6		       20 a6 f7 	      JSR	LoadAll
   1786  f8f9		       60		      RTS		; 6
   1787  f8fa
   1788  f8fa				   PrintRightDecimalDigits
   1789  f8fa		       b9 00 00 	      LDA	0,Y
   1790  f8fd		       4a		      LSR
   1791  f8fe		       4a		      LSR
   1792  f8ff		       4a		      LSR
   1793  f900		       4a		      LSR
   1794  f901		       aa		      TAX
   1795  f902		       bd be fd 	      LDA	FontLookup,X	;4
   1796  f905		       85 d2		      STA	ScoreD2	;3
   1797  f907
   1798  f907		       b9 00 00 	      LDA	0,Y
   1799  f90a		       29 0f		      AND	#%00001111
   1800  f90c		       aa		      TAX
   1801  f90d		       bd be fd 	      LDA	FontLookup,X	;4
   1802  f910		       85 d3		      STA	ScoreD3	;3
   1803  f912
   1804  f912		       c8		      INY
   1805  f913		       b9 00 00 	      LDA	0,Y
   1806  f916		       4a		      LSR
   1807  f917		       4a		      LSR
   1808  f918		       4a		      LSR
   1809  f919		       4a		      LSR
   1810  f91a		       aa		      TAX
   1811  f91b		       bd be fd 	      LDA	FontLookup,X	;4
   1812  f91e		       85 d0		      STA	ScoreD0	;3
   1813  f920
   1814  f920		       b9 00 00 	      LDA	0,Y
   1815  f923		       29 0f		      AND	#%00001111
   1816  f925		       aa		      TAX
   1817  f926		       bd be fd 	      LDA	FontLookup,X	;4
   1818  f929		       85 d1		      STA	ScoreD1	;3
   1819  f92b
   1820  f92b		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1821  f92d		       85 d4		      STA	ScoreD4
   1822  f92f		       60		      RTS
   1823  f930
   1824  f930				   PrintLastLeftDecimalDigits
   1825  f930		       b9 00 00 	      LDA	0,Y
   1826  f933		       4a		      LSR
   1827  f934		       4a		      LSR
   1828  f935		       4a		      LSR
   1829  f936		       4a		      LSR
   1830  f937		       aa		      TAX
   1831  f938		       bd be fd 	      LDA	FontLookup,X	;4
   1832  f93b		       85 d3		      STA	ScoreD3	;3
   1833  f93d		       b9 00 00 	      LDA	0,Y
   1834  f940		       29 0f		      AND	#%00001111
   1835  f942		       aa		      TAX
   1836  f943		       bd be fd 	      LDA	FontLookup,X	;4
   1837  f946		       85 d4		      STA	ScoreD4	;3
   1838  f948		       60		      RTS
   1839  f949
   1840  f949				   PrintZerosLeft
   1841  f949		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1842  f94b		       85 d2		      STA	ScoreD2
   1843  f94d		       85 d3		      STA	ScoreD3
   1844  f94f		       85 d4		      STA	ScoreD4
   1845  f951		       60		      RTS
   1846  f952
   1847  f952				   DrawGameOverScoreLine
   1848  f952		       85 02		      STA	WSYNC
   1849  f954		       20 a2 f8 	      JSR	PrintScore
   1850  f957		       85 02		      STA	WSYNC
   1851  f959		       85 02		      STA	WSYNC
   1852  f95b		       20 97 f7 	      JSR	ClearPF
   1853  f95e		       60		      RTS
   1854  f95f
   1855  f95f				   DrawGameOverScreenLeft
   1856  f95f		       85 02		      STA	WSYNC
   1857  f961		       20 97 f7 	      JSR	ClearPF
   1858  f964
   1859  f964				   DrawTimerLeft
   1860  f964		       20 43 fa 	      JSR	Sleep8Lines
   1861  f967		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1862  f969		       85 06		      STA	COLUP0
   1863  f96b		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1864  f96d		       85 d0		      STA	ScoreD0
   1865  f96f		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1866  f971		       85 d1		      STA	ScoreD1
   1867  f973		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1868  f975		       85 d2		      STA	ScoreD2
   1869  f977		       a0 bf		      LDY	#TimeBcd2
   1870  f979		       85 02		      STA	WSYNC
   1871  f97b		       20 30 f9 	      JSR	PrintLastLeftDecimalDigits
   1872  f97e		       20 52 f9 	      JSR	DrawGameOverScoreLine
   1873  f981
   1874  f981				   DrawGlideTimerLeft
   1875  f981		       20 43 fa 	      JSR	Sleep8Lines
   1876  f984		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1877  f986		       85 06		      STA	COLUP0
   1878  f988		       85 02		      STA	WSYNC
   1879  f98a		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1880  f98c		       85 d0		      STA	ScoreD0
   1881  f98e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1882  f990		       85 d1		      STA	ScoreD1
   1883  f992		       20 49 f9 	      JSR	PrintZerosLeft
   1884  f995		       20 52 f9 	      JSR	DrawGameOverScoreLine
   1885  f998
   1886  f998				   DrawHitCountLeft
   1887  f998		       20 43 fa 	      JSR	Sleep8Lines
   1888  f99b		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1889  f99d		       85 06		      STA	COLUP0
   1890  f99f		       85 02		      STA	WSYNC
   1891  f9a1		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1892  f9a3		       85 d0		      STA	ScoreD0
   1893  f9a5		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1894  f9a7		       85 d1		      STA	ScoreD1
   1895  f9a9		       20 49 f9 	      JSR	PrintZerosLeft
   1896  f9ac		       20 52 f9 	      JSR	DrawGameOverScoreLine
   1897  f9af
   1898  f9af				   DrawCheckpointCountLeft
   1899  f9af		       20 43 fa 	      JSR	Sleep8Lines
   1900  f9b2		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1901  f9b4		       85 06		      STA	COLUP0
   1902  f9b6		       85 02		      STA	WSYNC
   1903  f9b8		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1904  f9ba		       85 d0		      STA	ScoreD0
   1905  f9bc		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1906  f9be		       85 d1		      STA	ScoreD1
   1907  f9c0		       20 49 f9 	      JSR	PrintZerosLeft
   1908  f9c3		       20 52 f9 	      JSR	DrawGameOverScoreLine
   1909  f9c6
   1910  f9c6				   DrawGameVersionLeft
   1911  f9c6		       20 43 fa 	      JSR	Sleep8Lines
   1912  f9c9		       a9 49		      LDA	#VERSION_COLOR
   1913  f9cb		       85 06		      STA	COLUP0
   1914  f9cd
   1915  f9cd		       a5 c5		      LDA	GameMode
   1916  f9cf		       aa		      TAX
   1917  f9d0		       bd be fd 	      LDA	FontLookup,X	;4
   1918  f9d3		       85 d0		      STA	ScoreD0	;3
   1919  f9d5
   1920  f9d5		       a5 f0		      LDA	CurrentCarId
   1921  f9d7		       aa		      TAX
   1922  f9d8		       bd be fd 	      LDA	FontLookup,X	;4
   1923  f9db		       85 d1		      STA	ScoreD1	;3
   1924  f9dd
   1925  f9dd		       a5 dd		      LDA	StartSWCHB
   1926  f9df		       29 40		      AND	#%01000000	; P0 difficulty
   1927  f9e1		       49 40		      EOR	#%01000000	; Reverse bytes
   1928  f9e3		       2a		      ROL
   1929  f9e4		       2a		      ROL
   1930  f9e5		       2a		      ROL
   1931  f9e6		       18		      CLC
   1932  f9e7		       69 0a		      ADC	#10
   1933  f9e9		       aa		      TAX
   1934  f9ea		       bd be fd 	      LDA	FontLookup,X	;4
   1935  f9ed		       85 d2		      STA	ScoreD2	;3
   1936  f9ef
   1937  f9ef		       a5 dd		      LDA	StartSWCHB
   1938  f9f1		       29 80		      AND	#%10000000	; P0 difficulty
   1939  f9f3		       49 80		      EOR	#%10000000	; Reverse bytes
   1940  f9f5		       2a		      ROL
   1941  f9f6		       2a		      ROL
   1942  f9f7		       18		      CLC
   1943  f9f8		       69 0a		      ADC	#10
   1944  f9fa		       aa		      TAX
   1945  f9fb		       bd be fd 	      LDA	FontLookup,X	;4
   1946  f9fe		       85 d3		      STA	ScoreD3	;3
   1947  fa00
   1948  fa00		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1949  fa02		       85 d4		      STA	ScoreD4
   1950  fa04
   1951  fa04		       20 52 f9 	      JSR	DrawGameOverScoreLine
   1952  fa07
   1953  fa07		       4c 20 fa 	      JMP	FinalizeDrawGameOver
   1954  fa0a
   1955  fa0a				   DrawGameOverScreenRight
   1956  fa0a		       85 02		      STA	WSYNC
   1957  fa0c		       20 97 f7 	      JSR	ClearPF
   1958  fa0f
   1959  fa0f				   DrawVersionRight
   1960  fa0f		       20 43 fa 	      JSR	Sleep8Lines
   1961  fa12		       a9 49		      LDA	#VERSION_COLOR
   1962  fa14		       85 07		      STA	COLUP1
   1963  fa16		       85 02		      STA	WSYNC
   1964  fa18		       a2 78		      LDX	#<VersionText
   1965  fa1a		       20 12 f8 	      JSR	PrintStaticText
   1966  fa1d		       20 52 f9 	      JSR	DrawGameOverScoreLine
   1967  fa20
   1968  fa20				   FinalizeDrawGameOver
   1969  fa20		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1970  fa22		       85 d5		      STA	ScoreFontColor
   1971  fa24		       20 3a fa 	      JSR	Sleep4Lines
   1972  fa27		       20 4a fa 	      JSR	Sleep32Lines
   1973  fa2a		       20 4a fa 	      JSR	Sleep32Lines
   1974  fa2d		       4c 67 f6 	      JMP	PrepareOverscan
   1975  fa30
   1976  fa30				   WaitForVblankEnd
   1977  fa30		       ad 84 02 	      LDA	INTIM
   1978  fa33		       d0 fb		      BNE	WaitForVblankEnd
   1979  fa35		       85 02		      STA	WSYNC
   1980  fa37		       85 01		      STA	VBLANK
   1981  fa39		       60		      RTS
   1982  fa3a
   1983  fa3a				   Sleep4Lines
   1984  fa3a		       85 02		      STA	WSYNC
   1985  fa3c		       85 02		      STA	WSYNC
   1986  fa3e		       85 02		      STA	WSYNC
   1987  fa40		       85 02		      STA	WSYNC
   1988  fa42		       60		      RTS
   1989  fa43
   1990  fa43				   Sleep8Lines
   1991  fa43		       20 3a fa 	      JSR	Sleep4Lines
   1992  fa46		       20 3a fa 	      JSR	Sleep4Lines
   1993  fa49		       60		      RTS
   1994  fa4a
   1995  fa4a				   Sleep32Lines
   1996  fa4a		       20 43 fa 	      JSR	Sleep8Lines
   1997  fa4d		       20 43 fa 	      JSR	Sleep8Lines
   1998  fa50		       20 43 fa 	      JSR	Sleep8Lines
   1999  fa53		       20 43 fa 	      JSR	Sleep8Lines
   2000  fa56		       60		      RTS
   2001  fa57
   2002  fa57							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2003  fc00					      org	$FC00
   2004  fc00				   QrCode1
   2005  fc00		       1f		      .byte.b	#%00011111
   2006  fc01		       10		      .byte.b	#%00010000
   2007  fc02		       17		      .byte.b	#%00010111
   2008  fc03		       17		      .byte.b	#%00010111
   2009  fc04		       17		      .byte.b	#%00010111
   2010  fc05		       10		      .byte.b	#%00010000
   2011  fc06		       1f		      .byte.b	#%00011111
   2012  fc07		       00		      .byte.b	#%00000000
   2013  fc08		       17		      .byte.b	#%00010111
   2014  fc09		       10		      .byte.b	#%00010000
   2015  fc0a		       1d		      .byte.b	#%00011101
   2016  fc0b		       16		      .byte.b	#%00010110
   2017  fc0c		       03		      .byte.b	#%00000011
   2018  fc0d		       19		      .byte.b	#%00011001
   2019  fc0e		       13		      .byte.b	#%00010011
   2020  fc0f		       1c		      .byte.b	#%00011100
   2021  fc10		       0b		      .byte.b	#%00001011
   2022  fc11		       00		      .byte.b	#%00000000
   2023  fc12		       1f		      .byte.b	#%00011111
   2024  fc13		       10		      .byte.b	#%00010000
   2025  fc14		       17		      .byte.b	#%00010111
   2026  fc15		       17		      .byte.b	#%00010111
   2027  fc16		       17		      .byte.b	#%00010111
   2028  fc17		       10		      .byte.b	#%00010000
   2029  fc18		       1f		      .byte.b	#%00011111
   2030  fc19
   2031  fc19				   QrCode2
   2032  fc19		       c3		      .byte.b	#%11000011
   2033  fc1a		       9a		      .byte.b	#%10011010
   2034  fc1b		       82		      .byte.b	#%10000010
   2035  fc1c		       da		      .byte.b	#%11011010
   2036  fc1d		       aa		      .byte.b	#%10101010
   2037  fc1e		       ca		      .byte.b	#%11001010
   2038  fc1f		       f3		      .byte.b	#%11110011
   2039  fc20		       78		      .byte.b	#%01111000
   2040  fc21		       df		      .byte.b	#%11011111
   2041  fc22		       fc		      .byte.b	#%11111100
   2042  fc23		       c7		      .byte.b	#%11000111
   2043  fc24		       98		      .byte.b	#%10011000
   2044  fc25		       23		      .byte.b	#%00100011
   2045  fc26		       b9		      .byte.b	#%10111001
   2046  fc27		       d2		      .byte.b	#%11010010
   2047  fc28		       30		      .byte.b	#%00110000
   2048  fc29		       eb		      .byte.b	#%11101011
   2049  fc2a		       28		      .byte.b	#%00101000
   2050  fc2b		       ab		      .byte.b	#%10101011
   2051  fc2c		       72		      .byte.b	#%01110010
   2052  fc2d		       fa		      .byte.b	#%11111010
   2053  fc2e		       7a		      .byte.b	#%01111010
   2054  fc2f		       32		      .byte.b	#%00110010
   2055  fc30		       3a		      .byte.b	#%00111010
   2056  fc31		       63		      .byte.b	#%01100011
   2057  fc32
   2058  fc32				   QrCode3
   2059  fc32		       98		      .byte.b	#%10011000
   2060  fc33		       c3		      .byte.b	#%11000011
   2061  fc34		       39		      .byte.b	#%00111001
   2062  fc35		       34		      .byte.b	#%00110100
   2063  fc36		       ff		      .byte.b	#%11111111
   2064  fc37		       71		      .byte.b	#%01110001
   2065  fc38		       d5		      .byte.b	#%11010101
   2066  fc39		       d1		      .byte.b	#%11010001
   2067  fc3a		       5f		      .byte.b	#%01011111
   2068  fc3b		       26		      .byte.b	#%00100110
   2069  fc3c		       2d		      .byte.b	#%00101101
   2070  fc3d		       e9		      .byte.b	#%11101001
   2071  fc3e		       d6		      .byte.b	#%11010110
   2072  fc3f		       26		      .byte.b	#%00100110
   2073  fc40		       ba		      .byte.b	#%10111010
   2074  fc41		       03		      .byte.b	#%00000011
   2075  fc42		       dd		      .byte.b	#%11011101
   2076  fc43		       e0		      .byte.b	#%11100000
   2077  fc44		       57		      .byte.b	#%01010111
   2078  fc45		       14		      .byte.b	#%00010100
   2079  fc46		       35		      .byte.b	#%00110101
   2080  fc47		       e5		      .byte.b	#%11100101
   2081  fc48		       b5		      .byte.b	#%10110101
   2082  fc49		       d4		      .byte.b	#%11010100
   2083  fc4a		       97		      .byte.b	#%10010111
   2084  fc4b
   2085  fc4b				   QrCode4
   2086  fc4b		       09		      .byte.b	#%00001001
   2087  fc4c		       0e		      .byte.b	#%00001110
   2088  fc4d		       0f		      .byte.b	#%00001111
   2089  fc4e		       0c		      .byte.b	#%00001100
   2090  fc4f		       0c		      .byte.b	#%00001100
   2091  fc50		       08		      .byte.b	#%00001000
   2092  fc51		       08		      .byte.b	#%00001000
   2093  fc52		       06		      .byte.b	#%00000110
   2094  fc53		       06		      .byte.b	#%00000110
   2095  fc54		       0b		      .byte.b	#%00001011
   2096  fc55		       0f		      .byte.b	#%00001111
   2097  fc56		       04		      .byte.b	#%00000100
   2098  fc57		       08		      .byte.b	#%00001000
   2099  fc58		       0f		      .byte.b	#%00001111
   2100  fc59		       09		      .byte.b	#%00001001
   2101  fc5a		       07		      .byte.b	#%00000111
   2102  fc5b		       05		      .byte.b	#%00000101
   2103  fc5c		       00		      .byte.b	#%00000000
   2104  fc5d		       0f		      .byte.b	#%00001111
   2105  fc5e		       08		      .byte.b	#%00001000
   2106  fc5f		       0b		      .byte.b	#%00001011
   2107  fc60		       0b		      .byte.b	#%00001011
   2108  fc61		       0b		      .byte.b	#%00001011
   2109  fc62		       08		      .byte.b	#%00001000
   2110  fc63		       0f		      .byte.b	#%00001111
   2111  fc64
   2112  fc64							; Moved here because of rom space.
   2113  fc64							; The only SBR in constants space
   2114  fc64				   DrawQrCode
   2115  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2116  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2117  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2118  fc6a		       85 0a		      STA	CTRLPF
   2119  fc6c		       20 85 f7 	      JSR	ClearAll	; To be 100 sure!
   2120  fc6f		       ad 82 02 	      LDA	SWCHB
   2121  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2122  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2123  fc76		       86 09		      STX	COLUBK
   2124  fc78		       84 08		      STY	COLUPF
   2125  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2126  fc7d				   StoreReversedQrCode
   2127  fc7d		       86 08		      STX	COLUPF
   2128  fc7f		       84 09		      STY	COLUBK
   2129  fc81
   2130  fc81				   ContinueQrCode
   2131  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2132  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2133  fc85		       20 30 fa 	      JSR	WaitForVblankEnd
   2134  fc88		       20 43 fa 	      JSR	Sleep8Lines
   2135  fc8b		       20 43 fa 	      JSR	Sleep8Lines
   2136  fc8e		       20 43 fa 	      JSR	Sleep8Lines
   2137  fc91
   2138  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2139  fc91		       85 02		      STA	WSYNC
   2140  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2141  fc96		       85 0e		      STA	PF1	;3
   2142  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2143  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2145  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2146  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2147  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2148  fcb3		       85 0e		      STA	PF1	;3
   2149  fcb5
   2150  fcb5		       ca		      DEX		;2
   2151  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2152  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2153  fcba		       88		      DEY		;2
   2154  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2155  fcbd
   2156  fcbd				   EndQrCodeLoop
   2157  fcbd		       85 02		      STA	WSYNC	;
   2158  fcbf		       a9 00		      LDA	#0
   2159  fcc1		       85 0e		      STA	PF1	;3
   2160  fcc3		       85 0f		      STA	PF2	;3
   2161  fcc5
   2162  fcc5		       20 4a fa 	      JSR	Sleep32Lines
   2163  fcc8		       4c 67 f6 	      JMP	PrepareOverscan
   2164  fccb
   2165  fd00					      org	$FD00
   2166  fd00				   Font
   2167  fd00				   C0
   2168  fd00		       e7		      .byte.b	#%11100111	;
   2169  fd01		       a5		      .byte.b	#%10100101	; 
   2170  fd02		       a5		      .byte.b	#%10100101	; 
   2171  fd03		       a5		      .byte.b	#%10100101	; 
   2172  fd04		       e7		      .byte.b	#%11100111	;	
   2173  fd05				   C1
   2174  fd05		       e7		      .byte.b	#%11100111	;
   2175  fd06		       42		      .byte.b	#%01000010	; 
   2176  fd07		       42		      .byte.b	#%01000010	; 
   2177  fd08		       42		      .byte.b	#%01000010	; 
   2178  fd09		       66		      .byte.b	#%01100110	;
   2179  fd0a				   C2
   2180  fd0a		       e7		      .byte.b	#%11100111	;
   2181  fd0b		       24		      .byte.b	#%00100100	; 
   2182  fd0c		       e7		      .byte.b	#%11100111	; 
   2183  fd0d		       81		      .byte.b	#%10000001	; 
   2184  fd0e		       e7		      .byte.b	#%11100111	;
   2185  fd0f				   C3
   2186  fd0f		       e7		      .byte.b	#%11100111	;
   2187  fd10		       81		      .byte.b	#%10000001	; 
   2188  fd11		       e7		      .byte.b	#%11100111	; 
   2189  fd12		       81		      .byte.b	#%10000001	; 
   2190  fd13		       e7		      .byte.b	#%11100111	;
   2191  fd14				   C4
   2192  fd14		       81		      .byte.b	#%10000001	;
   2193  fd15		       81		      .byte.b	#%10000001	; 
   2194  fd16		       e7		      .byte.b	#%11100111	; 
   2195  fd17		       a5		      .byte.b	#%10100101	; 
   2196  fd18		       a5		      .byte.b	#%10100101	;
   2197  fd19				   C5
   2198  fd19		       e7		      .byte.b	#%11100111	;
   2199  fd1a		       81		      .byte.b	#%10000001	; 
   2200  fd1b		       e7		      .byte.b	#%11100111	; 
   2201  fd1c		       24		      .byte.b	#%00100100	; 
   2202  fd1d		       e7		      .byte.b	#%11100111	;
   2203  fd1e				   C6
   2204  fd1e		       e7		      .byte.b	#%11100111	;
   2205  fd1f		       a5		      .byte.b	#%10100101	; 
   2206  fd20		       e7		      .byte.b	#%11100111	; 
   2207  fd21		       24		      .byte.b	#%00100100	; 
   2208  fd22		       e7		      .byte.b	#%11100111	;
   2209  fd23				   C7
   2210  fd23		       81		      .byte.b	#%10000001	;
   2211  fd24		       81		      .byte.b	#%10000001	; 
   2212  fd25		       81		      .byte.b	#%10000001	; 
   2213  fd26		       81		      .byte.b	#%10000001	; 
   2214  fd27		       e7		      .byte.b	#%11100111	;
   2215  fd28				   C8
   2216  fd28		       e7		      .byte.b	#%11100111	;
   2217  fd29		       a5		      .byte.b	#%10100101	; 
   2218  fd2a		       e7		      .byte.b	#%11100111	; 
   2219  fd2b		       a5		      .byte.b	#%10100101	; 
   2220  fd2c		       e7		      .byte.b	#%11100111	;
   2221  fd2d				   C9
   2222  fd2d		       e7		      .byte.b	#%11100111	;
   2223  fd2e		       81		      .byte.b	#%10000001	; 
   2224  fd2f		       e7		      .byte.b	#%11100111	; 
   2225  fd30		       a5		      .byte.b	#%10100101	; 
   2226  fd31		       e7		      .byte.b	#%11100111	;
   2227  fd32				   CA
   2228  fd32		       a5		      .byte.b	#%10100101	;
   2229  fd33		       a5		      .byte.b	#%10100101	; 
   2230  fd34		       e7		      .byte.b	#%11100111	; 
   2231  fd35		       a5		      .byte.b	#%10100101	; 
   2232  fd36		       e7		      .byte.b	#%11100111	;
   2233  fd37				   CB
   2234  fd37		       66		      .byte.b	#%01100110	;
   2235  fd38		       a5		      .byte.b	#%10100101	; 
   2236  fd39		       66		      .byte.b	#%01100110	; 
   2237  fd3a		       a5		      .byte.b	#%10100101	;
   2238  fd3b		       66		      .byte.b	#%01100110	;
   2239  fd3c				   CC
   2240  fd3c		       e7		      .byte.b	#%11100111	;
   2241  fd3d		       24		      .byte.b	#%00100100	; 
   2242  fd3e		       24		      .byte.b	#%00100100	; 
   2243  fd3f		       24		      .byte.b	#%00100100	;
   2244  fd40		       e7		      .byte.b	#%11100111	;
   2245  fd41
   2246  fd41				   CD
   2247  fd41		       66		      .byte.b	#%01100110	;
   2248  fd42		       a5		      .byte.b	#%10100101	; 
   2249  fd43		       a5		      .byte.b	#%10100101	; 
   2250  fd44		       a5		      .byte.b	#%10100101	;
   2251  fd45		       66		      .byte.b	#%01100110	;
   2252  fd46
   2253  fd46				   CE
   2254  fd46		       e7		      .byte.b	#%11100111	;
   2255  fd47		       24		      .byte.b	#%00100100	; 
   2256  fd48		       e7		      .byte.b	#%11100111	; 
   2257  fd49		       24		      .byte.b	#%00100100	; 
   2258  fd4a		       e7		      .byte.b	#%11100111	;
   2259  fd4b
   2260  fd4b				   CF
   2261  fd4b		       24		      .byte.b	#%00100100	;
   2262  fd4c		       24		      .byte.b	#%00100100	; 
   2263  fd4d		       e7		      .byte.b	#%11100111	; 
   2264  fd4e		       24		      .byte.b	#%00100100	; 
   2265  fd4f		       e7		      .byte.b	#%11100111	;
   2266  fd50
   2267  fd50				   CG
   2268  fd50		       c3		      .byte.b	#%11000011	;
   2269  fd51		       a5		      .byte.b	#%10100101	; 
   2270  fd52		       a5		      .byte.b	#%10100101	; 
   2271  fd53		       24		      .byte.b	#%00100100	; 
   2272  fd54		       c3		      .byte.b	#%11000011	;	
   2273  fd55
   2274  fd55				   CH
   2275  fd55		       a5		      .byte.b	#%10100101	;
   2276  fd56		       a5		      .byte.b	#%10100101	; 
   2277  fd57		       e7		      .byte.b	#%11100111	; 
   2278  fd58		       a5		      .byte.b	#%10100101	; 
   2279  fd59		       a5		      .byte.b	#%10100101	;
   2280  fd5a
   2281  fd5a				   CK
   2282  fd5a		       a5		      .byte.b	#%10100101	;
   2283  fd5b		       a5		      .byte.b	#%10100101	; 
   2284  fd5c		       66		      .byte.b	#%01100110	; 
   2285  fd5d		       a5		      .byte.b	#%10100101	; 
   2286  fd5e		       a5		      .byte.b	#%10100101	;
   2287  fd5f
   2288  fd5f				   CL
   2289  fd5f		       e7		      .byte.b	#%11100111	;
   2290  fd60		       24		      .byte.b	#%00100100	; 
   2291  fd61		       24		      .byte.b	#%00100100	; 
   2292  fd62		       24		      .byte.b	#%00100100	; 
   2293  fd63		       24		      .byte.b	#%00100100	;
   2294  fd64
   2295  fd64				   CI
   2296  fd64		       42		      .byte.b	#%01000010	;
   2297  fd65		       42		      .byte.b	#%01000010	; 
   2298  fd66		       42		      .byte.b	#%01000010	; 
   2299  fd67		       42		      .byte.b	#%01000010	; 
   2300  fd68		       42		      .byte.b	#%01000010	;
   2301  fd69
   2302  fd69				   CM
   2303  fd69		       a5		      .byte.b	#%10100101	;
   2304  fd6a		       a5		      .byte.b	#%10100101	; 
   2305  fd6b		       a5		      .byte.b	#%10100101	; 
   2306  fd6c		       e7		      .byte.b	#%11100111	; 
   2307  fd6d		       a5		      .byte.b	#%10100101	;
   2308  fd6e
   2309  fd6e				   CN
   2310  fd6e		       a5		      .byte.b	#%10100101	;
   2311  fd6f		       a5		      .byte.b	#%10100101	; 
   2312  fd70		       a5		      .byte.b	#%10100101	; 
   2313  fd71		       a5		      .byte.b	#%10100101	; 
   2314  fd72		       66		      .byte.b	#%01100110	;	
   2315  fd73
   2316  fd73
   2317  fd73				   CO
   2318  fd73		       42		      .byte.b	#%01000010	;
   2319  fd74		       a5		      .byte.b	#%10100101	; 
   2320  fd75		       a5		      .byte.b	#%10100101	; 
   2321  fd76		       a5		      .byte.b	#%10100101	; 
   2322  fd77		       42		      .byte.b	#%01000010	;	
   2323  fd78
   2324  fd78				   CP
   2325  fd78		       24		      .byte.b	#%00100100	;
   2326  fd79		       24		      .byte.b	#%00100100	; 
   2327  fd7a		       e7		      .byte.b	#%11100111	; 
   2328  fd7b		       a5		      .byte.b	#%10100101	; 
   2329  fd7c		       e7		      .byte.b	#%11100111	;
   2330  fd7d
   2331  fd7d				   CR
   2332  fd7d		       a5		      .byte.b	#%10100101	;
   2333  fd7e		       a5		      .byte.b	#%10100101	; 
   2334  fd7f		       66		      .byte.b	#%01100110	; 
   2335  fd80		       a5		      .byte.b	#%10100101	; 
   2336  fd81		       66		      .byte.b	#%01100110	;
   2337  fd82
   2338  fd82				   CS
   2339  fd82		       66		      .byte.b	#%01100110	;
   2340  fd83		       81		      .byte.b	#%10000001	; 
   2341  fd84		       42		      .byte.b	#%01000010	; 
   2342  fd85		       24		      .byte.b	#%00100100	; 
   2343  fd86		       c3		      .byte.b	#%11000011	;
   2344  fd87
   2345  fd87				   CT
   2346  fd87		       42		      .byte.b	#%01000010	;
   2347  fd88		       42		      .byte.b	#%01000010	; 
   2348  fd89		       42		      .byte.b	#%01000010	; 
   2349  fd8a		       42		      .byte.b	#%01000010	; 
   2350  fd8b		       e7		      .byte.b	#%11100111	;
   2351  fd8c
   2352  fd8c				   CV
   2353  fd8c		       42		      .byte.b	#%01000010	;
   2354  fd8d		       a5		      .byte.b	#%10100101	; 
   2355  fd8e		       a5		      .byte.b	#%10100101	; 
   2356  fd8f		       a5		      .byte.b	#%10100101	; 
   2357  fd90		       a5		      .byte.b	#%10100101	;	
   2358  fd91
   2359  fd91				   CY
   2360  fd91		       42		      .byte.b	#%01000010	;
   2361  fd92		       42		      .byte.b	#%01000010	; 
   2362  fd93		       42		      .byte.b	#%01000010	; 
   2363  fd94		       a5		      .byte.b	#%10100101	; 
   2364  fd95		       a5		      .byte.b	#%10100101	;
   2365  fd96
   2366  fd96				   CW
   2367  fd96		       a5		      .byte.b	#%10100101	;
   2368  fd97		       e7		      .byte.b	#%11100111	; 
   2369  fd98		       a5		      .byte.b	#%10100101	; 
   2370  fd99		       a5		      .byte.b	#%10100101	; 
   2371  fd9a		       a5		      .byte.b	#%10100101	;
   2372  fd9b
   2373  fd9b				   CZ
   2374  fd9b		       e7		      .byte.b	#%11100111	;
   2375  fd9c		       24		      .byte.b	#%00100100	; 
   2376  fd9d		       42		      .byte.b	#%01000010	; 
   2377  fd9e		       81		      .byte.b	#%10000001	; 
   2378  fd9f		       e7		      .byte.b	#%11100111	;
   2379  fda0
   2380  fda0				   Pipe
   2381  fda0		       42		      .byte.b	#%01000010	;
   2382  fda1		       00		      .byte.b	#%00000000	; 
   2383  fda2		       42		      .byte.b	#%01000010	; 
   2384  fda3		       00		      .byte.b	#%00000000	; 
   2385  fda4		       42		      .byte.b	#%01000010	;
   2386  fda5
   2387  fda5				   Exclamation
   2388  fda5		       42		      .byte.b	#%01000010	;
   2389  fda6		       00		      .byte.b	#%00000000	; 
   2390  fda7		       42		      .byte.b	#%01000010	; 
   2391  fda8		       42		      .byte.b	#%01000010	; 
   2392  fda9		       42		      .byte.b	#%01000010	;
   2393  fdaa
   2394  fdaa				   Dot
   2395  fdaa		       42		      .byte.b	#%01000010	;
   2396  fdab		       42		      .byte.b	#%01000010	; 
   2397  fdac		       00		      .byte.b	#%00000000	; 
   2398  fdad		       00		      .byte.b	#%00000000	; 
   2399  fdae		       00		      .byte.b	#%00000000	;
   2400  fdaf
   2401  fdaf				   Colon
   2402  fdaf		       42		      .byte.b	#%01000010	;
   2403  fdb0		       42		      .byte.b	#%01000010	; 
   2404  fdb1		       00		      .byte.b	#%00000000	; 
   2405  fdb2		       42		      .byte.b	#%01000010	; 
   2406  fdb3		       42		      .byte.b	#%01000010	;
   2407  fdb4
   2408  fdb4				   Triangle
   2409  fdb4		       81		      .byte.b	#%10000001	;
   2410  fdb5		       c3		      .byte.b	#%11000011	; 
   2411  fdb6		       e7		      .byte.b	#%11100111	; 
   2412  fdb7		       c3		      .byte.b	#%11000011	; 
   2413  fdb8		       81		      .byte.b	#%10000001	;
   2414  fdb9
   2415  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2416  fdb9		       00		      .byte.b	#0	;
   2417  fdba		       00		      .byte.b	#0	;
   2418  fdbb		       00		      .byte.b	#0	;
   2419  fdbc		       00		      .byte.b	#0	;
   2420  fdbd		       00		      .byte.b	#0	;
   2421  fdbe
   2422  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2423  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2424  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2425  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2426  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2427  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2428  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2429  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2430  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2431  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2432  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2433  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2434  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2435  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2436  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2437  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2438  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2439  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2440  fdcf
   2441  fdcf				   EngineSoundType
   2442  fdcf		       02		      .byte.b	#2
   2443  fdd0		       02		      .byte.b	#2
   2444  fdd1		       0e		      .byte.b	#14
   2445  fdd2		       06		      .byte.b	#6
   2446  fdd3		       06		      .byte.b	#6
   2447  fdd4		       0e		      .byte.b	#14
   2448  fdd5
   2449  fdd5				   EngineBaseFrequence
   2450  fdd5		       1f		      .byte.b	#31
   2451  fdd6		       15		      .byte.b	#21
   2452  fdd7		       14		      .byte.b	#20
   2453  fdd8		       1f		      .byte.b	#31
   2454  fdd9		       16		      .byte.b	#22
   2455  fdda		       03		      .byte.b	#3
   2456  fddb
   2457  fddb				   TachometerSizeLookup1
   2458  fddb		       1f		      .byte.b	#%00011111
   2459  fddc		       3f		      .byte.b	#%00111111
   2460  fddd		       7f		      .byte.b	#%01111111
   2461  fdde		       ff		      .byte.b	#%11111111
   2462  fddf		       ff		      .byte.b	#%11111111
   2463  fde0		       ff		      .byte.b	#%11111111
   2464  fde1		       ff		      .byte.b	#%11111111
   2465  fde2		       ff		      .byte.b	#%11111111
   2466  fde3
   2467  fde3				   TachometerSizeLookup2
   2468  fde3		       00		      .byte.b	#%00000000
   2469  fde4		       00		      .byte.b	#%00000000
   2470  fde5		       00		      .byte.b	#%00000000
   2471  fde6		       00		      .byte.b	#%00000000
   2472  fde7		       80		      .byte.b	#%10000000
   2473  fde8		       c0		      .byte.b	#%11000000
   2474  fde9		       e0		      .byte.b	#%11100000
   2475  fdea		       f0		      .byte.b	#%11110000
   2476  fdeb
   2477  fdeb				   TachometerGearLookup
   2478  fdeb		       01		      .byte.b	#%00000001
   2479  fdec		       02		      .byte.b	#%00000010
   2480  fded		       04		      .byte.b	#%00000100
   2481  fdee		       08		      .byte.b	#%00001000
   2482  fdef		       10		      .byte.b	#%00010000
   2483  fdf0		       30		      .byte.b	#%00110000
   2484  fdf1
   2485  fe00					      org	$FE00
   2486  fe00				   AesTable
   2487  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2488  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2489  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2490  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2491  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2492  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2493  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2494  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2495  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2496  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2497  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2498  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2499  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2500  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2501  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2502  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2503  ff00
   2504  ff00							; From FF00 to FFFB (122 bytes) to use here
   2505  ff00
   2506  ff00				   StaticText		; All static text must be on the same MSB block. 
   2507  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2508  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2509  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2510  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2511  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2512  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2513  ff05
   2514  ff05				   HellwayLeftText
   2515  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2516  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2517  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2518  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2519  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2520  ff0a
   2521  ff0a				   HellwayRightText
   2522  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2523  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2524  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2525  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2526  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2527  ff0f
   2528  ff0f				   OpbText
   2529  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2530  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2531  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2532  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2533  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2534  ff14
   2535  ff14				   YearText
   2536  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2537  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2538  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2539  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2540  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2541  ff19
   2542  ff19				   GameText
   2543  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2544  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2545  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2546  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2547  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2548  ff1e
   2549  ff1e				   OverText
   2550  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2551  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2552  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2553  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2554  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2555  ff23				   GoText
   2556  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2557  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2558  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2559  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2560  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2561  ff28
   2562  ff28				   ZeldaTextLeft
   2563  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2564  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2565  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2566  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2567  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2568  ff2d
   2569  ff2d				   ZeldaTextRight
   2570  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2571  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2572  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2573  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2574  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2575  ff32
   2576  ff32				   ZeldaDateLeft
   2577  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2578  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2579  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2580  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2581  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2582  ff37
   2583  ff37				   ZeldaDateRight
   2584  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2585  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2586  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2587  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2588  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2589  ff3c
   2590  ff3c				   PolvinhosTextLeft
   2591  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2592  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2593  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2594  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2595  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2596  ff41
   2597  ff41				   PolvinhosTextRight
   2598  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2599  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2600  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2601  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2602  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2603  ff46
   2604  ff46				   PolvinhosDateLeft
   2605  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2606  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2607  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2608  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2609  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2610  ff4b
   2611  ff4b				   PolvinhosDateRight
   2612  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2613  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2614  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2615  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2616  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2617  ff50
   2618  ff50				   IvonneTextLeft
   2619  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2620  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2621  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2622  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2623  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2624  ff55
   2625  ff55				   IvonneTextRight
   2626  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2627  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2628  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2629  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2630  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2631  ff5a
   2632  ff5a				   IvonneDateLeft
   2633  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2634  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2635  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2636  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2637  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2638  ff5f
   2639  ff5f				   IvonneDateRight
   2640  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2641  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2642  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2643  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2644  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2645  ff64
   2646  ff64				   PaperArtTextLeft
   2647  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2648  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2649  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2650  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2651  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2652  ff69
   2653  ff69				   PaperArtTextRight
   2654  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2655  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2656  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2657  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2658  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2659  ff6e
   2660  ff6e				   LeonardoTextLeft
   2661  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2662  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2663  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2664  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2665  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2666  ff73
   2667  ff73				   LeonardoTextRight
   2668  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2669  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2670  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2671  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2672  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2673  ff78
   2674  ff78				   VersionText
   2675  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2676  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2677  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2678  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2679  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2680  ff7d
   2681  ff7d
   2682  ff7d				   EndStaticText
   2683  ff7d
   2684  ff7d				   CarSprite0		; Upside down, Original Car
   2685  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2686  ff85				   CarSprite0NoPadding
   2687  ff85		       7e		      .byte.b	#%01111110
   2688  ff86		       24		      .byte.b	#%00100100
   2689  ff87		       bd		      .byte.b	#%10111101
   2690  ff88		       3c		      .byte.b	#%00111100
   2691  ff89		       bd		      .byte.b	#%10111101
   2692  ff8a		       3c		      .byte.b	#%00111100
   2693  ff8b
   2694  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2695  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2696  ff93				   CarSprite1NoPadding
   2697  ff93		       bd		      .byte.b	#%10111101
   2698  ff94		       7e		      .byte.b	#%01111110
   2699  ff95		       5a		      .byte.b	#%01011010
   2700  ff96		       66		      .byte.b	#%01100110
   2701  ff97		       bd		      .byte.b	#%10111101
   2702  ff98		       3c		      .byte.b	#%00111100
   2703  ff99
   2704  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2705  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2706  ffa1				   CarSprite2NoPadding
   2707  ffa1		       7e		      .byte.b	#%01111110
   2708  ffa2		       a5		      .byte.b	#%10100101
   2709  ffa3		       42		      .byte.b	#%01000010
   2710  ffa4		       42		      .byte.b	#%01000010
   2711  ffa5		       bd		      .byte.b	#%10111101
   2712  ffa6		       7e		      .byte.b	#%01111110
   2713  ffa7
   2714  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2715  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2716  ffaf				   CarSprite3NoPadding
   2717  ffaf		       3c		      .byte.b	#%00111100
   2718  ffb0		       db		      .byte.b	#%11011011
   2719  ffb1		       db		      .byte.b	#%11011011
   2720  ffb2		       3c		      .byte.b	#%00111100
   2721  ffb3		       5a		      .byte.b	#%01011010
   2722  ffb4		       3c		      .byte.b	#%00111100
   2723  ffb5
   2724  ffb5				   TrafficSpeeds
   2725  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2726  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2727  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2728  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2729  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2730  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2731  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2732  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2733  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2734  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2735  ffbf				   TrafficSpeedsHighDelta
   2736  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2737  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2738  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2739  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2740  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2741  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2742  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2743  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2744  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2745  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2746  ffc9
   2747  ffc9				   CarIdToSpriteAddressL
   2748  ffc9		       7d		      .byte.b	#<CarSprite0
   2749  ffca		       8b		      .byte.b	#<CarSprite1
   2750  ffcb		       99		      .byte.b	#<CarSprite2
   2751  ffcc		       a7		      .byte.b	#<CarSprite3
   2752  ffcd
   2753  ffcd				   CarIdToSpriteAddressH
   2754  ffcd		       ff		      .byte.b	#>CarSprite0
   2755  ffce		       ff		      .byte.b	#>CarSprite1
   2756  ffcf		       ff		      .byte.b	#>CarSprite2
   2757  ffd0		       ff		      .byte.b	#>CarSprite3
   2758  ffd1
   2759  ffd1				   EnemyCarIdToSpriteAddressL
   2760  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2761  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2762  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2763  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2764  ffd5
   2765  ffd5				   EnemyCarIdToSpriteAddressH
   2766  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2767  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2768  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2769  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2770  ffd9
   2771  ffd9				   CarIdToAccelerateSpeed
   2772  ffd9		       80		      .byte.b	#128
   2773  ffda		       c0		      .byte.b	#192
   2774  ffdb		       60		      .byte.b	#96
   2775  ffdc		       c0		      .byte.b	#192
   2776  ffdd
   2777  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2778  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2779  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2780  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2781  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2782  ffe1
   2783  ffe1				   CarIdToMaxSpeedL
   2784  ffe1		       80		      .byte.b	#$80
   2785  ffe2		       00		      .byte.b	#$00	; One less gear
   2786  ffe3		       80		      .byte.b	#$80
   2787  ffe4		       80		      .byte.b	#$80
   2788  ffe5
   2789  ffe5				   CarIdToMaxGear
   2790  ffe5		       05		      .byte.b	#5
   2791  ffe6		       04		      .byte.b	#4	; One less gear
   2792  ffe7		       05		      .byte.b	#5
   2793  ffe8		       05		      .byte.b	#5
   2794  ffe9
   2795  ffe9				   GearToBreakSpeedTable
   2796  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2797  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2798  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2799  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2800  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2801  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2802  ffef
   2803  ffef				   TrafficColorTable
   2804  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2805  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2806  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2807  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2808  fff3
   2809  fff3				   TrafficChanceTable
   2810  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2811  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2812  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2813  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2814  fff7
   2815  fff7				   TrafficTimeTable
   2816  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2817  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2818  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2819  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2820  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2821  fffc
   2822  fffc
   2823  fffc					      org	$FFFC
   2824  fffc		       00 f0		      .word.w	BeforeStart
   2825  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
