------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 37	   SCORE_FONT_COLOR_GOOD =	$37
     58  f000		       00 d8	   OP_SCORE_FONT_COLOR_GOOD =	$D8
     59  f000
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 56	   OP_SCORE_FONT_COLOR_BAD =	$56
     62  f000
     63  f000		       00 38	   SCORE_FONT_COLOR_START =	$38	;Cannot be the same as good, font colors = game state
     64  f000		       00 c8	   OP_SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     65  f000
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000		       00 ab	   OP_SCORE_FONT_COLOR_OVER =	$AB
     68  f000
     69  f000		       00 f9	   PLAYER0_COLOR =	$F9
     70  f000		       00 98	   PLAYER1_COLOR =	$98
     71  f000
     72  f000		       00 20	   PLAYER_0_X_START =	32	;
     73  f000		       00 29	   PLAYER_1_X_START =	41	;
     74  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     75  f000
     76  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     77  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     78  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     79  f000
     80  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     81  f000
     82  f000		       00 00	   BLACK      =	$00	;
     83  f000
     84  f000		       00 10	   MAX_GAME_MODE =	16
     85  f000
     86  f000		       00 08	   PARALLAX_SIZE =	8
     87  f000
     88  f000		       00 05	   HALF_TEXT_SIZE =	5
     89  f000
     90  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     91  f000
     92  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     93  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     94  f000		       00 00	   QR_CODE_COLOR =	$00
     95  f000		       00 19	   QR_CODE_SIZE =	25
     96  f000
     97  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     98  f000
     99  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    100  f000		       00 29	   VBLANK_TIMER =	41
    101  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    102  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    103  f000
    104  f000		       00 08	   ENGINE_VOLUME =	8
    105  f000
    106  f000		       00 08	   CAR_SIZE   =	8
    107  f000
    108  f000		       00 80	   GRP0Cache  =	$80
    109  f000		       00 81	   PF0Cache   =	$81
    110  f000		       00 82	   PF1Cache   =	$82
    111  f000		       00 83	   PF2Cache   =	$83
    112  f000		       00 84	   GRP1Cache  =	$84
    113  f000		       00 85	   ENABLCache =	$85
    114  f000		       00 86	   ENAM0Cache =	$86
    115  f000		       00 87	   ENAM1Cache =	$87
    116  f000
    117  f000		       00 8c	   FrameCount0 =	$8C	;
    118  f000		       00 8d	   FrameCount1 =	$8D	;
    119  f000
    120  f000		       00 8e	   CollisionCounter =	$8E
    121  f000		       00 8f	   OpCollisionCounter =	$8F
    122  f000
    123  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    124  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    125  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    126  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    127  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    128  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    129  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    130  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    131  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000		       00 b4	   Tmp4       =	$B4
    139  f000		       00 b5	   Tmp5       =	$B5
    140  f000
    141  f000		       00 b6	   Player0X   =	$B6
    142  f000		       00 b7	   Player1X   =	$B7
    143  f000		       00 b8	   CountdownTimer =	$B8
    144  f000		       00 b9	   OpCountdownTimer =	$B9
    145  f000		       00 ba	   Traffic0Msb =	$BA
    146  f000		       00 bb	   OpTraffic0Msb =	$BB
    147  f000		       00 bc	   SwitchDebounceCounter =	$BC
    148  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    149  f000		       00 be	   TrafficChance =	$BE
    150  f000		       00 bf	   OpTrafficChance =	$BF
    151  f000
    152  f000		       00 c0	   CheckpointTime =	$C0
    153  f000		       00 c1	   OpCheckpointTime =	$C1
    154  f000		       00 c2	   TrafficColor =	$C2
    155  f000		       00 c3	   OpTrafficColor =	$C3
    156  f000		       00 c4	   CurrentDifficulty =	$C4
    157  f000		       00 c5	   OpCurrentDifficulty =	$C5
    158  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    159  f000
    160  f000		       00 c7	   CurrentCarId =	$C7
    161  f000		       00 c8	   OpCurrentCarId =	$C8
    162  f000
    163  f000		       00 c9	   ScoreFontColor =	$C9
    164  f000		       00 ca	   OpScoreFontColor =	$CA
    165  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    166  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    167  f000		       00 cd	   NextCheckpoint =	$CD
    168  f000		       00 ce	   OpNextCheckpoint =	$CE
    169  f000		       00 cf	   OpponentLine =	$CF
    170  f000
    171  f000		       00 d0	   ScoreD0    =	$D0
    172  f000		       00 d1	   ScoreD1    =	$D1
    173  f000		       00 d2	   ScoreD2    =	$D2
    174  f000		       00 d3	   ScoreD3    =	$D3
    175  f000		       00 d4	   ScoreD4    =	$D4
    176  f000
    177  f000		       00 d5	   Gear       =	$D5
    178  f000		       00 d6	   OpGear     =	$D6
    179  f000
    180  f000		       00 d7	   CarSpritePointerL =	$D7
    181  f000		       00 d8	   CarSpritePointerH =	$D8
    182  f000
    183  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    184  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    185  f000
    186  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    187  f000
    188  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    189  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    190  f000
    191  f000		       00 de	   Player0SpeedL =	$DE
    192  f000		       00 df	   Player1SpeedL =	$DF
    193  f000		       00 f0	   Player0SpeedH =	$F0
    194  f000		       00 f1	   Player1SpeedH =	$F1
    195  f000
    196  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 53 f7 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 76 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 de		      STA	Player0SpeedL
    257  f059		       85 df		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   StoreCurrentDifficulty
    274  f071		       86 c4		      STX	CurrentDifficulty
    275  f073		       86 c5		      STX	OpCurrentDifficulty
    276  f075		       a2 00		      LDX	#0
    277  f077		       20 0b f7 	      JSR	ConfigureDifficulty
    278  f07a		       e8		      INX
    279  f07b		       20 0b f7 	      JSR	ConfigureDifficulty
    280  f07e
    281  f07e				   SetGameNotRunning
    282  f07e		       a9 00		      LDA	#0
    283  f080		       85 bd		      STA	GameStatus
    284  f082
    285  f082				   ConfigureTimer
    286  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    287  f084		       85 b8		      STA	CountdownTimer	;3
    288  f086		       85 b9		      STA	OpCountdownTimer	;3
    289  f088
    290  f088				   ConfigurePlayer1XPosition
    291  f088		       a9 29		      LDA	#PLAYER_1_X_START	;2
    292  f08a		       85 b7		      STA	Player1X	;3
    293  f08c
    294  f08c				   ConfigureOpNextCheckpoint
    295  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    296  f08e		       85 ce		      STA	OpNextCheckpoint
    297  f090
    298  f090				   HPositioning 		; Avoid sleep doing needed stuff
    299  f090		       85 02		      STA	WSYNC
    300  f092
    301  f092				   ConfigurePlayer0XPosition
    302  f092		       a9 20		      LDA	#PLAYER_0_X_START	;2
    303  f094		       85 b6		      STA	Player0X	;3
    304  f096
    305  f096				   ConfigureMissileSize
    306  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    307  f098		       85 04		      STA	NUSIZ0	;3
    308  f09a		       85 05		      STA	NUSIZ1	;3
    309  f09c
    310  f09c				   ConfigureNextCheckpoint
    311  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    312  f09e		       85 cd		      STA	NextCheckpoint
    313  f0a0
    314  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    315  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	5	;
      1  f0a2				   .CYCLES    SET	5
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    317  f0a5		       85 12		      STA	RESM0
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    319  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    321  f0ab		       85 13		      STA	RESM1
      0  f0ad					      SLEEP	3
      1  f0ad				   .CYCLES    SET	3
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad					      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad					      ELSE
     12  f0ad		       24 00		      bit	VSYNC
     13  f0af					      ENDIF
     14  f0af				   .CYCLES    SET	.CYCLES - 3
     15  f0af					      ENDIF
     16  f0af
     17  f0af				  -	      REPEAT	.CYCLES / 2
     18  f0af				  -	      nop
     19  f0af					      REPEND
    323  f0af
    324  f0af		       a9 d0		      LDA	#$D0
    325  f0b1		       85 24		      STA	HMBL
    326  f0b3		       85 22		      STA	HMM0
    327  f0b5		       85 23		      STA	HMM1
    328  f0b7		       85 02		      STA	WSYNC
    329  f0b9		       85 2a		      STA	HMOVE
    330  f0bb		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    331  f0bd		       85 2b		      STA	HMCLR
      0  f0bf					      SLEEP	31
      1  f0bf				   .CYCLES    SET	31
      2  f0bf
      3  f0bf				  -	      IF	.CYCLES < 2
      4  f0bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bf				  -	      ERR
      6  f0bf					      ENDIF
      7  f0bf
      8  f0bf					      IF	.CYCLES & 1
      9  f0bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bf				  -	      nop	0
     11  f0bf					      ELSE
     12  f0bf		       24 00		      bit	VSYNC
     13  f0c1					      ENDIF
     14  f0c1				   .CYCLES    SET	.CYCLES - 3
     15  f0c1					      ENDIF
     16  f0c1
     17  f0c1					      REPEAT	.CYCLES / 2
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     19  f0cf					      REPEND
    333  f0cf		       85 10		      STA	RESP0
    334  f0d1		       85 11		      STA	RESP1
    335  f0d3
    336  f0d3				   WaitResetToEnd
    337  f0d3		       ad 84 02 	      LDA	INTIM
    338  f0d6		       d0 fb		      BNE	WaitResetToEnd
    339  f0d8
    340  f0d8				   MainLoop
    341  f0d8		       a9 02		      LDA	#2
    342  f0da		       85 00		      STA	VSYNC
    343  f0dc		       85 02		      STA	WSYNC
    344  f0de		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    345  f0e0							;Some free cycles here!
    346  f0e0				   PrepareMaxHMove
    347  f0e0		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    348  f0e2		       85 09		      STA	COLUBK
      0  f0e4					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e4				   .CYCLES    SET	24 - 11
      2  f0e4
      3  f0e4				  -	      IF	.CYCLES < 2
      4  f0e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e4				  -	      ERR
      6  f0e4					      ENDIF
      7  f0e4
      8  f0e4					      IF	.CYCLES & 1
      9  f0e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e4				  -	      nop	0
     11  f0e4					      ELSE
     12  f0e4		       24 00		      bit	VSYNC
     13  f0e6					      ENDIF
     14  f0e6				   .CYCLES    SET	.CYCLES - 3
     15  f0e6					      ENDIF
     16  f0e6
     17  f0e6					      REPEAT	.CYCLES / 2
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    350  f0eb		       a9 80		      LDA	#$80
    351  f0ed		       85 24		      STA	HMBL
    352  f0ef		       85 22		      STA	HMM0
    353  f0f1		       85 23		      STA	HMM1
    354  f0f3		       85 20		      STA	HMP0
    355  f0f5		       85 21		      STA	HMP1
    356  f0f7		       85 02		      STA	WSYNC
    357  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    358  f0fb
    359  f0fb				   ConfigVBlankTimer
    360  f0fb		       a5 c6		      LDA	GameMode
    361  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    362  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    363  f101		       a9 29		      LDA	#VBLANK_TIMER
    364  f103		       4c 08 f1 	      JMP	SetVblankTimer
    365  f106				   SetVblankTimerQrCode
    366  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    367  f108
    368  f108				   SetVblankTimer
    369  f108		       85 02		      STA	WSYNC	;3
    370  f10a		       8d 96 02 	      STA	TIM64T	;3	
    371  f10d		       a9 00		      LDA	#0	;2
    372  f10f		       85 00		      STA	VSYNC	;3	
    373  f111
    374  f111				   RandomizeGame
    375  f111		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f113		       d0 2d		      BNE	EndRandomizeGame
    377  f115		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f117		       29 02		      AND	#%00000010
    379  f119		       f0 24		      BEQ	DeterministicGame
    380  f11b		       a6 96		      LDX	TrafficOffset1 + 2
    381  f11d		       bd 00 fe 	      LDA	AesTable,X
    382  f120		       45 8c		      EOR	FrameCount0
    383  f122		       85 96		      STA	TrafficOffset1 + 2
    384  f124		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f126		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f128		       bd 00 fe 	      LDA	AesTable,X
    387  f12b		       45 8c		      EOR	FrameCount0
    388  f12d		       85 9a		      STA	TrafficOffset2 + 2
    389  f12f		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f131		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f133		       bd 00 fe 	      LDA	AesTable,X
    392  f136		       45 8c		      EOR	FrameCount0
    393  f138		       85 9e		      STA	TrafficOffset3 + 2
    394  f13a		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13c		       4c 42 f1 	      JMP	EndRandomizeGame
    396  f13f
    397  f13f				   DeterministicGame
    398  f13f		       20 53 f7 	      JSR	DefaultOffsets
    399  f142
    400  f142				   EndRandomizeGame
    401  f142
    402  f142				   CountFrame
    403  f142		       e6 8c		      INC	FrameCount0	; 5
    404  f144		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    405  f146		       e6 8d		      INC	FrameCount1	; 5 
    406  f148				   SkipIncFC1
    407  f148
    408  f148				   CallDrawQrCode
    409  f148		       a5 c6		      LDA	GameMode
    410  f14a		       c9 10		      CMP	#MAX_GAME_MODE
    411  f14c		       d0 03		      BNE	TestIsGameRunning
    412  f14e		       4c dd fa 	      JMP	DrawQrCode
    413  f151
    414  f151							;Does not update the game if not running
    415  f151				   TestIsGameRunning
    416  f151		       a5 bd		      LDA	GameStatus	;3
    417  f153		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    418  f155				   SelectCarWithDpadCall		; Only do it when game is stoped
    419  f155		       a2 00		      LDX	#0	; Player 0
    420  f157		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    421  f159		       85 b0		      STA	Tmp0
    422  f15b		       20 57 f8 	      JSR	SelectCarWithDpad
    423  f15e		       e8		      INX		; Player 1
    424  f15f		       20 57 f8 	      JSR	SelectCarWithDpad
    425  f162
    426  f162							; Needs to draw the opponent in the correct line even when game stoped  
    427  f162							; Draeing is a destructive operation
    428  f162		       20 69 f8 	      JSR	ProcessOpponentLine
    429  f165
    430  f165				   CallConfigureCarSprites
    431  f165		       20 11 f8 	      JSR	ConfigureCarSprites
    432  f168				   SkipUpdateLogicJump
    433  f168		       4c a0 f1 	      JMP	SkipUpdateLogic
    434  f16b				   ContinueWithGameLogic
    435  f16b
    436  f16b				   CallEverySecond		; Timer for now
    437  f16b		       a2 00		      LDX	#0
    438  f16d		       20 8f fa 	      JSR	EverySecond
    439  f170		       e8		      INX
    440  f171		       20 8f fa 	      JSR	EverySecond
    441  f174
    442  f174				   CallProcessSpeed
    443  f174		       a2 00		      LDX	#0
    444  f176		       20 a3 f9 	      JSR	ProcessSpeed
    445  f179
    446  f179		       e8		      INX		; Player 1
    447  f17a		       20 a3 f9 	      JSR	ProcessSpeed
    448  f17d
    449  f17d				   CallUpdateOffsets
    450  f17d		       a2 00		      LDX	#0	; Player 0
    451  f17f		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    452  f181		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    453  f183		       a5 de		      LDA	Player0SpeedL
    454  f185		       85 b4		      STA	Tmp4
    455  f187		       a5 f0		      LDA	Player0SpeedH
    456  f189		       85 b5		      STA	Tmp5
    457  f18b		       20 50 f9 	      JSR	UpdateOffsets
    458  f18e
    459  f18e							;LDX Exits the call with correct value.
    460  f18e		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    461  f190		       85 b3		      STA	Tmp3
    462  f192		       a5 df		      LDA	Player1SpeedL
    463  f194		       85 b4		      STA	Tmp4
    464  f196		       a5 f1		      LDA	Player1SpeedH
    465  f198		       85 b5		      STA	Tmp5
    466  f19a		       20 50 f9 	      JSR	UpdateOffsets
    467  f19d
    468  f19d				   CallProcessOpponentLine
    469  f19d		       20 69 f8 	      JSR	ProcessOpponentLine
    470  f1a0
    471  f1a0				   SkipUpdateLogic		; Continue here if not paused
    472  f1a0
    473  f1a0				   CallCalculateGear
    474  f1a0		       a2 00		      LDX	#0
    475  f1a2		       20 9c fa 	      JSR	CalculateGear
    476  f1a5		       e8		      INX
    477  f1a6		       20 9c fa 	      JSR	CalculateGear
    478  f1a9
    479  f1a9				   CallProcessFontColor
    480  f1a9		       a5 8c		      LDA	FrameCount0
    481  f1ab		       29 01		      AND	#%00000001
    482  f1ad		       d0 11		      BNE	ContinueProcessFontColorPlayer0	; Not my frame, always process!
    483  f1af		       ad 82 02 	      LDA	SWCHB	; Rubber Band Switch
    484  f1b2		       29 08		      AND	#%00001000
    485  f1b4		       f0 0a		      BEQ	ContinueProcessFontColorPlayer0
    486  f1b6		       a5 f2		      LDA	IsOpponentInFront
    487  f1b8		       f0 06		      BEQ	ContinueProcessFontColorPlayer0	; Oponent not in front
    488  f1ba		       a5 c9		      LDA	ScoreFontColor
    489  f1bc		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    490  f1be		       f0 1c		      BEQ	ContinueProcessFontColorPlayer1	; Opponent is in front! Skip counting checkpoint for the frame (double time)
    491  f1c0				   ContinueProcessFontColorPlayer0
    492  f1c0		       a2 00		      LDX	#0
    493  f1c2		       20 a9 fa 	      JSR	ProcessScoreFontColor
    494  f1c5				   ContinueProcessIsToUpdateColorPlayer1
    495  f1c5		       a5 8c		      LDA	FrameCount0
    496  f1c7		       29 01		      AND	#%00000001
    497  f1c9		       f0 11		      BEQ	ContinueProcessFontColorPlayer1	; Not my frame, always process!
    498  f1cb		       ad 82 02 	      LDA	SWCHB	; Rubber Band Switch
    499  f1ce		       29 08		      AND	#%00001000
    500  f1d0		       f0 0a		      BEQ	ContinueProcessFontColorPlayer1
    501  f1d2		       a5 f2		      LDA	IsOpponentInFront
    502  f1d4		       f0 06		      BEQ	ContinueProcessFontColorPlayer1	; Oponent not in front
    503  f1d6		       a5 ca		      LDA	OpScoreFontColor
    504  f1d8		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    505  f1da		       f0 05		      BEQ	SkipProcessFontColor	; Opponent is in front and is checkpoint Skip counting checkpoint for the frame (double time)
    506  f1dc				   ContinueProcessFontColorPlayer1
    507  f1dc		       a2 01		      LDX	#1
    508  f1de		       20 a9 fa 	      JSR	ProcessScoreFontColor
    509  f1e1				   SkipProcessFontColor
    510  f1e1
    511  f1e1				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    512  f1e1		       a5 8c		      LDA	FrameCount0
    513  f1e3		       29 01		      AND	#%00000001
    514  f1e5		       d0 0c		      BNE	CallProcessPlayer1Status
    515  f1e7				   CallProcessPlayer0Status
    516  f1e7		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    517  f1e9		       85 b0		      STA	Tmp0
    518  f1eb		       a2 00		      LDX	#0
    519  f1ed		       20 46 fa 	      JSR	ProcessPlayerStatus
    520  f1f0		       4c fc f1 	      JMP	EndCallProcessPlayerStatus
    521  f1f3				   CallProcessPlayer1Status
    522  f1f3		       a5 a2		      LDA	OpTrafficOffset0 + 2
    523  f1f5		       85 b0		      STA	Tmp0
    524  f1f7		       a2 01		      LDX	#1
    525  f1f9		       20 46 fa 	      JSR	ProcessPlayerStatus
    526  f1fc				   EndCallProcessPlayerStatus
    527  f1fc
    528  f1fc				   CallProcessPlayerSprites
    529  f1fc		       20 11 f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    530  f1ff
    531  f1ff				   CallProcessSound		; We might save cycles by updating one channel per frame.
    532  f1ff		       a2 00		      LDX	#0
    533  f201		       a5 92		      LDA	TrafficOffset0 + 2
    534  f203		       85 b1		      STA	Tmp1
    535  f205		       20 20 f6 	      JSR	ProcessSound
    536  f208		       e8		      INX		; Player 1
    537  f209		       a5 a2		      LDA	OpTrafficOffset0 + 2
    538  f20b		       85 b1		      STA	Tmp1
    539  f20d		       20 20 f6 	      JSR	ProcessSound
    540  f210
    541  f210				   ChooseTextSide		; 
    542  f210		       a5 8c		      LDA	FrameCount0	;3
    543  f212		       29 01		      AND	#%00000001
    544  f214		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    545  f216		       4c c3 f2 	      JMP	RightScoreWrite
    546  f219
    547  f219				   LeftScoreWrite
    548  f219		       a5 bd		      LDA	GameStatus
    549  f21b		       f0 11		      BEQ	PrintHellwayLeft
    550  f21d		       a5 c9		      LDA	ScoreFontColor
    551  f21f		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    552  f221		       f0 42		      BEQ	PrintPlayer0Checkpoint
    553  f223		       c9 38		      CMP	#SCORE_FONT_COLOR_START
    554  f225		       f0 46		      BEQ	PrintPlayer0StartGame
    555  f227		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    556  f229		       f0 29		      BEQ	ProcessPlayer0OverText
    557  f22b				   ContinueP0Score
    558  f22b		       4c 7c f2 	      JMP	Digit0Timer
    559  f22e
    560  f22e				   PrintHellwayLeft
    561  f22e		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    562  f230		       30 08		      BMI	ContinueWithDefaultLeftText
    563  f232				   Player0IsReady
    564  f232		       a2 25		      LDX	#<ReadyText
    565  f234		       20 68 f7 	      JSR	PrintStaticText
    566  f237		       4c 78 f3 	      JMP	RightScoreWriteEnd	;3
    567  f23a				   ContinueWithDefaultLeftText
    568  f23a		       a5 8d		      LDA	FrameCount1
    569  f23c		       29 01		      AND	#1
    570  f23e		       d0 05		      BNE	PrintCreditsLeft
    571  f240		       a2 03		      LDX	#<HellwayLeftText - 1	; Padding
    572  f242		       4c 47 f2 	      JMP	PrintGameMode
    573  f245				   PrintCreditsLeft
    574  f245		       a2 0c		      LDX	#<OpbText - 1	; Padding
    575  f247
    576  f247				   PrintGameMode
    577  f247		       20 68 f7 	      JSR	PrintStaticText
    578  f24a		       a6 c6		      LDX	GameMode
    579  f24c		       bd 6c fc 	      LDA	FontLookup,X	;4 
    580  f24f		       85 d0		      STA	ScoreD0	;3
    581  f251		       4c 78 f3 	      JMP	RightScoreWriteEnd	;3
    582  f254
    583  f254				   ProcessPlayer0OverText
    584  f254		       a5 f2		      LDA	IsOpponentInFront
    585  f256		       30 05		      BMI	PrintPlayer0Lose
    586  f258				   PrintPlayer0Win
    587  f258		       a2 1a		      LDX	#<WinText
    588  f25a		       4c 5f f2 	      JMP	PrintPlayer0Status
    589  f25d				   PrintPlayer0Lose
    590  f25d		       a2 1d		      LDX	#<LoseText
    591  f25f				   PrintPlayer0Status
    592  f25f		       20 68 f7 	      JSR	PrintStaticText
    593  f262		       4c 9c f2 	      JMP	DistanceCheckpointCount	;3
    594  f265
    595  f265				   PrintPlayer0Checkpoint
    596  f265		       a2 00		      LDX	#<CheckpointText
    597  f267		       20 68 f7 	      JSR	PrintStaticText
    598  f26a		       4c 72 f2 	      JMP	PrintPlayer0ScoreHoldChange	;3
    599  f26d
    600  f26d				   PrintPlayer0StartGame
    601  f26d		       a2 16		      LDX	#<GoText
    602  f26f		       20 68 f7 	      JSR	PrintStaticText
    603  f272
    604  f272				   PrintPlayer0ScoreHoldChange
    605  f272		       a2 00		      LDX	#0
    606  f274		       20 b9 fa 	      JSR	PrintScoreHoldChange
    607  f277		       85 d4		      STA	ScoreD4
    608  f279		       4c 78 f3 	      JMP	RightScoreWriteEnd	;3
    609  f27c
    610  f27c				   Digit0Timer
    611  f27c		       a5 b8		      LDA	CountdownTimer	;3
    612  f27e		       85 b0		      STA	Tmp0
    613  f280		       20 43 f8 	      JSR	BINBCD8
    614  f283							; LDA Tmp1 Also returned in A
    615  f283		       29 0f		      AND	#%00001111	;2
    616  f285		       aa		      TAX		; 2
    617  f286		       bd 6c fc 	      LDA	FontLookup,X	;4 
    618  f289		       85 d1		      STA	ScoreD1	;3
    619  f28b
    620  f28b				   Digit1Timer
    621  f28b		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    622  f28d		       4a		      LSR		; 2
    623  f28e		       4a		      LSR		; 2
    624  f28f		       4a		      LSR		; 2
    625  f290		       4a		      LSR		; 2
    626  f291		       aa		      TAX		; 2
    627  f292		       bd 6c fc 	      LDA	FontLookup,X	;4
    628  f295		       85 d0		      STA	ScoreD0	;3
    629  f297
    630  f297				   SpeedBar
    631  f297		       a2 00		      LDX	#0
    632  f299		       20 c4 fa 	      JSR	PrintSpeedBar
    633  f29c
    634  f29c				   DistanceCheckpointCount		; Will run all letters in the future
    635  f29c		       a5 ba		      LDA	Traffic0Msb
    636  f29e		       29 01		      AND	#%00000001
    637  f2a0		       0a		      ASL
    638  f2a1		       0a		      ASL
    639  f2a2		       0a		      ASL
    640  f2a3		       0a		      ASL
    641  f2a4		       85 b0		      STA	Tmp0
    642  f2a6		       a5 92		      LDA	TrafficOffset0 + 2	;3
    643  f2a8		       29 f0		      AND	#%11110000	;2
    644  f2aa		       4a		      LSR
    645  f2ab		       4a		      LSR
    646  f2ac		       4a		      LSR
    647  f2ad		       4a		      LSR
    648  f2ae		       05 b0		      ORA	Tmp0
    649  f2b0		       aa		      TAX		; 2
    650  f2b1		       bd 6c fc 	      LDA	FontLookup,X	;4 
    651  f2b4		       85 d3		      STA	ScoreD3	;3
    652  f2b6
    653  f2b6				   DistanceBar		; 16 subdivisions per checkpoint
    654  f2b6		       a5 92		      LDA	TrafficOffset0 + 2	;3
    655  f2b8		       29 0f		      AND	#%00001111	;2
    656  f2ba		       aa		      TAX		; 2
    657  f2bb		       bd 8c fc 	      LDA	BarLookup,X	;4 
    658  f2be		       85 d4		      STA	ScoreD4	;3
    659  f2c0
    660  f2c0				   EndDrawDistance
    661  f2c0		       4c 78 f3 	      JMP	RightScoreWriteEnd	;3
    662  f2c3
    663  f2c3				   RightScoreWrite
    664  f2c3		       a5 bd		      LDA	GameStatus
    665  f2c5		       f0 11		      BEQ	PrintHellwayRight
    666  f2c7		       a5 ca		      LDA	OpScoreFontColor
    667  f2c9		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    668  f2cb		       f0 50		      BEQ	PrintPlayer1Checkpoint
    669  f2cd		       c9 c8		      CMP	#OP_SCORE_FONT_COLOR_START
    670  f2cf		       f0 54		      BEQ	PrintPlayer1StartGame
    671  f2d1		       c9 ab		      CMP	#OP_SCORE_FONT_COLOR_OVER
    672  f2d3		       f0 37		      BEQ	ProcessPlayer1OverText
    673  f2d5				   ContinueP1Score
    674  f2d5		       4c 34 f3 	      JMP	OpDigit0Timer
    675  f2d8
    676  f2d8				   PrintHellwayRight
    677  f2d8		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    678  f2da		       30 08		      BMI	ContinueWithDefaultRightText
    679  f2dc				   Player1IsReady
    680  f2dc		       a2 25		      LDX	#<ReadyText
    681  f2de		       20 68 f7 	      JSR	PrintStaticText
    682  f2e1		       4c 78 f3 	      JMP	RightScoreWriteEnd	;3
    683  f2e4				   ContinueWithDefaultRightText
    684  f2e4		       a5 8d		      LDA	FrameCount1
    685  f2e6		       29 01		      AND	#1
    686  f2e8		       d0 05		      BNE	PrintCreditsRight
    687  f2ea		       a2 08		      LDX	#<HellwayRightText
    688  f2ec		       4c fb f2 	      JMP	PrintRightIntro
    689  f2ef				   PrintCreditsRight
    690  f2ef		       a5 8d		      LDA	FrameCount1
    691  f2f1		       29 02		      AND	#%00000010
    692  f2f3		       f0 04		      BEQ	PrintYearText
    693  f2f5				   PrintBuildNumberText
    694  f2f5		       a2 20		      LDX	#<BuildNumberText
    695  f2f7		       d0 02		      BNE	PrintRightIntro	; Save one byte, it will neve be equal in not first text constant...
    696  f2f9				   PrintYearText
    697  f2f9		       a2 11		      LDX	#<YearText
    698  f2fb				   PrintRightIntro
    699  f2fb		       20 68 f7 	      JSR	PrintStaticText
    700  f2fe				   PipeOnRuberBandOff
    701  f2fe		       ad 82 02 	      LDA	SWCHB
    702  f301		       29 08		      AND	#%00001000
    703  f303		       d0 04		      BNE	EndPrintHellwayRight
    704  f305		       a9 ae		      LDA	#<Pipe + FONT_OFFSET
    705  f307		       85 d0		      STA	ScoreD0
    706  f309				   EndPrintHellwayRight
    707  f309		       4c 78 f3 	      JMP	RightScoreWriteEnd
    708  f30c
    709  f30c				   ProcessPlayer1OverText
    710  f30c		       a5 f2		      LDA	IsOpponentInFront
    711  f30e		       30 05		      BMI	PrintPlayer1Lose
    712  f310				   PrintPlayer1Win
    713  f310		       a2 18		      LDX	#<WinText - 2
    714  f312		       4c 17 f3 	      JMP	PrintPlayer1Status
    715  f315				   PrintPlayer1Lose
    716  f315		       a2 1b		      LDX	#<LoseText - 2
    717  f317				   PrintPlayer1Status
    718  f317		       20 68 f7 	      JSR	PrintStaticText
    719  f31a		       4c 54 f3 	      JMP	OpDistanceCheckpointCount
    720  f31d
    721  f31d				   PrintPlayer1Checkpoint
    722  f31d		       a2 ff		      LDX	#<CheckpointText - 1
    723  f31f		       20 68 f7 	      JSR	PrintStaticText
    724  f322		       4c 2a f3 	      JMP	PrintPlayer1ScoreHoldChange	;3
    725  f325
    726  f325				   PrintPlayer1StartGame
    727  f325		       a2 15		      LDX	#<GoText - 1
    728  f327		       20 68 f7 	      JSR	PrintStaticText
    729  f32a
    730  f32a				   PrintPlayer1ScoreHoldChange
    731  f32a		       a2 01		      LDX	#1
    732  f32c		       20 b9 fa 	      JSR	PrintScoreHoldChange
    733  f32f		       85 d0		      STA	ScoreD0
    734  f331		       4c 78 f3 	      JMP	RightScoreWriteEnd	;3
    735  f334
    736  f334				   OpDigit0Timer
    737  f334		       a5 b9		      LDA	OpCountdownTimer	;3
    738  f336		       85 b0		      STA	Tmp0
    739  f338		       20 43 f8 	      JSR	BINBCD8
    740  f33b							; LDA Tmp1 Also returned in A
    741  f33b		       29 0f		      AND	#%00001111	;2
    742  f33d		       aa		      TAX		; 2
    743  f33e		       bd 6c fc 	      LDA	FontLookup,X	;4 
    744  f341		       85 d4		      STA	ScoreD4	;3
    745  f343
    746  f343				   OpDigit1Timer
    747  f343		       a5 b1		      LDA	Tmp1	;3
    748  f345		       4a		      LSR		; 2
    749  f346		       4a		      LSR		; 2
    750  f347		       4a		      LSR		; 2
    751  f348		       4a		      LSR		; 2
    752  f349		       aa		      TAX		; 2
    753  f34a		       bd 6c fc 	      LDA	FontLookup,X	;4
    754  f34d		       85 d3		      STA	ScoreD3	;3
    755  f34f
    756  f34f				   OpSpeedBar
    757  f34f		       a2 01		      LDX	#1
    758  f351		       20 c4 fa 	      JSR	PrintSpeedBar
    759  f354
    760  f354				   OpDistanceCheckpointCount
    761  f354		       a5 bb		      LDA	OpTraffic0Msb
    762  f356		       29 01		      AND	#%00000001
    763  f358		       0a		      ASL
    764  f359		       0a		      ASL
    765  f35a		       0a		      ASL
    766  f35b		       0a		      ASL
    767  f35c		       85 b0		      STA	Tmp0
    768  f35e		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    769  f360		       29 f0		      AND	#%11110000	;2
    770  f362		       4a		      LSR
    771  f363		       4a		      LSR
    772  f364		       4a		      LSR
    773  f365		       4a		      LSR
    774  f366		       05 b0		      ORA	Tmp0
    775  f368		       aa		      TAX		; 2
    776  f369		       bd 6c fc 	      LDA	FontLookup,X	;4 
    777  f36c		       85 d1		      STA	ScoreD1	;3
    778  f36e
    779  f36e				   OpDistanceBar		; 16 subdivisions per checkpoint
    780  f36e		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    781  f370		       29 0f		      AND	#%00001111	;2
    782  f372		       aa		      TAX		; 2
    783  f373		       bd 8c fc 	      LDA	BarLookup,X	;4 
    784  f376		       85 d0		      STA	ScoreD0	;3
    785  f378
    786  f378				   ScoreWriteEnd
    787  f378				   RightScoreWriteEnd
    788  f378
    789  f378				   ConfigurePFForScore
    790  f378		       20 ba f6 	      JSR	ClearAll
    791  f37b		       a9 02		      LDA	#%00000010	; Score mode
    792  f37d		       85 0a		      STA	CTRLPF
    793  f37f		       a5 8c		      LDA	FrameCount0	;3
    794  f381		       29 01		      AND	#%00000001
    795  f383		       f0 0b		      BEQ	LeftScoreOn	; Half of the screen with the correct colors.
    796  f385				   RightScoreOn
    797  f385		       a5 ca		      LDA	OpScoreFontColor
    798  f387		       85 07		      STA	COLUP1
    799  f389		       a9 00		      LDA	#BACKGROUND_COLOR
    800  f38b		       85 06		      STA	COLUP0
    801  f38d		       4c 98 f3 	      JMP	CallWaitForVblankEnd
    802  f390				   LeftScoreOn
    803  f390		       a5 c9		      LDA	ScoreFontColor
    804  f392		       85 06		      STA	COLUP0
    805  f394		       a9 00		      LDA	#BACKGROUND_COLOR
    806  f396		       85 07		      STA	COLUP1
    807  f398
    808  f398							; After here we are going to update the screen, No more heavy code
    809  f398				   CallWaitForVblankEnd
    810  f398		       20 e2 f7 	      JSR	WaitForVblankEnd
    811  f39b
    812  f39b				   DrawScoreHud
    813  f39b		       20 86 f7 	      JSR	PrintScore
    814  f39e
    815  f39e							; 4 lines to go crazy
    816  f39e		       85 02		      STA	WSYNC
    817  f3a0							;STA HMOVE
    818  f3a0
    819  f3a0		       85 02		      STA	WSYNC
    820  f3a2		       85 2a		      STA	HMOVE
    821  f3a4
    822  f3a4				   PrepareForTraffic
    823  f3a4		       20 d0 f6 	      JSR	ClearPF	; 32
    824  f3a7
    825  f3a7		       85 02		      STA	WSYNC
    826  f3a9		       85 2a		      STA	HMOVE
    827  f3ab		       85 02		      STA	WSYNC
    828  f3ad		       85 2a		      STA	HMOVE
    829  f3af
    830  f3af		       a9 30		      LDA	#%00110000	; 2 Score mode
    831  f3b1		       85 0a		      STA	CTRLPF	;3
    832  f3b3
    833  f3b3		       a5 8c		      LDA	FrameCount0	;3
    834  f3b5		       29 01		      AND	#%00000001	;2
    835  f3b7		       aa		      TAX		;2
    836  f3b8		       b5 c2		      LDA	TrafficColor,X	;4
    837  f3ba		       85 08		      STA	COLUPF	;3
    838  f3bc
    839  f3bc		       a9 98		      LDA	#PLAYER1_COLOR	;2
    840  f3be		       85 07		      STA	COLUP1	;3
    841  f3c0
    842  f3c0		       a5 c9		      LDA	ScoreFontColor	;3
    843  f3c2		       85 06		      STA	COLUP0	;3
    844  f3c4
    845  f3c4		       a5 ca		      LDA	OpScoreFontColor	;3
    846  f3c6		       85 07		      STA	COLUP1	;3
    847  f3c8
    848  f3c8		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    849  f3ca
    850  f3ca		       a5 8c		      LDA	FrameCount0	;Brach flag
    851  f3cc		       29 01		      AND	#%00000001
    852  f3ce
    853  f3ce		       d0 03		      BNE	OpScanLoop	;2
    854  f3d0		       4c 8d f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    855  f3d3							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    856  f3d3
    857  f3d3							;main scanline loop...
    858  f3d3				   OpScanLoop
    859  f3d3		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    860  f3d5
    861  f3d5		       a5 80		      LDA	GRP0Cache	;3
    862  f3d7		       85 1b		      STA	GRP0	;3
    863  f3d9
    864  f3d9		       a5 84		      LDA	GRP1Cache	;3
    865  f3db		       85 1c		      STA	GRP1	;3
    866  f3dd
    867  f3dd		       a5 85		      LDA	ENABLCache	;3
    868  f3df		       85 1f		      STA	ENABL	;3
    869  f3e1
    870  f3e1		       a5 86		      LDA	ENAM0Cache	;3
    871  f3e3		       85 1d		      STA	ENAM0	;3
    872  f3e5
    873  f3e5		       a5 87		      LDA	ENAM1Cache	;3
    874  f3e7		       85 1e		      STA	ENAM1	;3
    875  f3e9
    876  f3e9		       a5 81		      LDA	PF0Cache	;3
    877  f3eb		       85 0d		      STA	PF0	;3
    878  f3ed
    879  f3ed		       a9 00		      LDA	#0	;2
    880  f3ef							;STA PF0	     ;3
    881  f3ef		       85 80		      STA	GRP0Cache	;3
    882  f3f1		       85 86		      STA	ENAM0Cache	;3
    883  f3f3		       85 85		      STA	ENABLCache	;3
    884  f3f5		       85 87		      STA	ENAM1Cache	; 3
    885  f3f7							;STA GRP1Cache ;3
    886  f3f7		       85 0d		      STA	PF0	;3
    887  f3f9							;STA PF2	     ;3
    888  f3f9
    889  f3f9		       a5 83		      LDA	PF2Cache	;3
    890  f3fb		       85 0f		      STA	PF2	;3
    891  f3fd
    892  f3fd				   OpDrawCar0
    893  f3fd		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    894  f3ff		       b0 04		      BCS	OpSkipDrawCar	;2
    895  f401		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    896  f403		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    897  f405				   OpSkipDrawCar
    898  f405
    899  f405							;BEQ DrawTraffic3
    900  f405				   OpDrawTraffic1		; 33
    901  f405		       98		      TYA		; 2
    902  f406		       18		      CLC		; 2 
    903  f407		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    904  f409		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    905  f40b		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    906  f40d		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    907  f40f		       4c 14 f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
    908  f412				   OpEorOffsetWithCarry
    909  f412		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    910  f414				   OpAfterEorOffsetWithCarry		;17
    911  f414		       aa		      TAX		;2
    912  f415		       bd 00 fe 	      LDA	AesTable,X	; 4
    913  f418		       c5 bf		      CMP	OpTrafficChance	;3
    914  f41a		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    915  f41c		       a9 ff		      LDA	#$FF	;2
    916  f41e		       85 86		      STA	ENAM0Cache	;3
    917  f420				   OpFinishDrawTraffic1
    918  f420
    919  f420				   OpErasePF2
    920  f420		       a9 00		      LDA	#0
    921  f422		       85 0f		      STA	PF2
    922  f424
    923  f424				   OpDrawTraffic2		; 33
    924  f424		       98		      TYA		; 2
    925  f425		       18		      CLC		; 2 
    926  f426		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    927  f428		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    928  f42a		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    929  f42c		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    930  f42e		       4c 33 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    931  f431				   OpEorOffsetWithCarry2
    932  f431		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    933  f433				   OpAfterEorOffsetWithCarry2		;17
    934  f433		       aa		      TAX		;2
    935  f434		       bd 00 fe 	      LDA	AesTable,X	; 4
    936  f437		       c5 bf		      CMP	OpTrafficChance	;3
    937  f439		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    938  f43b		       a9 02		      LDA	#%00000010	;2
    939  f43d		       85 85		      STA	ENABLCache	;3
    940  f43f				   OpFinishDrawTraffic2
    941  f43f
    942  f43f							;STA WSYNC ;65 / 137
    943  f43f
    944  f43f							; LDA Tmp0 ; Flicker this line if drawing car
    945  f43f							; BEQ FinishDrawTraffic4
    946  f43f				   OpDrawTraffic3		; 33
    947  f43f		       98		      TYA		; 2
    948  f440		       18		      CLC		; 2 
    949  f441		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    950  f443		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    951  f445		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    952  f447		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    953  f449		       4c 4e f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    954  f44c				   OpEorOffsetWithCarry3
    955  f44c		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    956  f44e				   OpAfterEorOffsetWithCarry3		;17
    957  f44e		       aa		      TAX		;2
    958  f44f		       bd 00 fe 	      LDA	AesTable,X	; 4
    959  f452		       c5 bf		      CMP	OpTrafficChance	;3
    960  f454		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    961  f456		       a9 02		      LDA	#%00000010	;2
    962  f458		       85 87		      STA	ENAM1Cache
    963  f45a				   OpFinishDrawTraffic3
    964  f45a
    965  f45a				   OpDrawOponent		;26
    966  f45a		       84 b0		      STY	Tmp0	;3
    967  f45c		       a4 cf		      LDY	OpponentLine	;3
    968  f45e		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    969  f460		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    970  f462				   OpDrawOpponent
    971  f462		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    972  f464		       85 80		      STA	GRP0Cache	;3
    973  f466		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    974  f468		       a4 b0		      LDY	Tmp0	;3
    975  f46a		       4c 7e f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    976  f46d				   OpSkipDrawOpponent
    977  f46d		       c6 cf		      DEC	OpponentLine	;5
    978  f46f		       a4 b0		      LDY	Tmp0	;3
    979  f471
    980  f471
    981  f471				   OpDrawTraffic0		; 21 2pe
    982  f471		       98		      TYA		; 2
    983  f472		       18		      CLC		; 2 
    984  f473		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    985  f475		       29 08		      AND	#%00001000	;2
    986  f477		       f0 05		      BEQ	OpHasNoBorderP0	;3
    987  f479				   OpHasBorderP0
    988  f479		       a9 e0		      LDA	#%11100000	; 2
    989  f47b		       4c 80 f4 	      JMP	OpStoreBorderP0	; 3
    990  f47e				   OpHasNoBorderP0
    991  f47e		       a9 00		      LDA	#0	; 2
    992  f480				   OpStoreBorderP0
    993  f480		       85 81		      STA	PF0Cache	; 3
    994  f482		       85 83		      STA	PF2Cache	; 3
    995  f484
    996  f484				   OpSkipDrawTraffic0
    997  f484
    998  f484				   OpWhileScanLoop
    999  f484		       88		      DEY		;2
   1000  f485		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1001  f487		       4c d3 f3 	      JMP	OpScanLoop	;3
   1002  f48a				   OpFinishScanLoop		; 7 209 of 222
   1003  f48a		       4c 42 f5 	      JMP	FinishScanLoop
   1004  f48d
   1005  f48d							;main scanline loop...
   1006  f48d				   ScanLoop
   1007  f48d		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
   1008  f48f
   1009  f48f		       a5 81		      LDA	PF0Cache	;3
   1010  f491		       85 0d		      STA	PF0	;3
   1011  f493
   1012  f493		       a5 80		      LDA	GRP0Cache	;3
   1013  f495		       85 1b		      STA	GRP0	;3
   1014  f497
   1015  f497		       a5 84		      LDA	GRP1Cache	;3
   1016  f499		       85 1c		      STA	GRP1	;3
   1017  f49b
   1018  f49b		       a5 86		      LDA	ENAM0Cache	;3
   1019  f49d		       85 1d		      STA	ENAM0	;3
   1020  f49f
   1021  f49f		       a5 85		      LDA	ENABLCache	;3
   1022  f4a1		       85 1f		      STA	ENABL	;3
   1023  f4a3
   1024  f4a3		       a5 87		      LDA	ENAM1Cache	;3
   1025  f4a5		       85 1e		      STA	ENAM1	;3
   1026  f4a7
   1027  f4a7		       a5 83		      LDA	PF2Cache	;3
   1028  f4a9		       85 0f		      STA	PF2	;3
   1029  f4ab
   1030  f4ab		       a9 00		      LDA	#0	;2
   1031  f4ad		       85 0d		      STA	PF0	;3
   1032  f4af		       85 84		      STA	GRP1Cache	;3
   1033  f4b1		       85 85		      STA	ENABLCache	;3
   1034  f4b3		       85 86		      STA	ENAM0Cache	;3
   1035  f4b5		       85 87		      STA	ENAM1Cache	; 3
   1036  f4b7							;STA GRP0Cache
   1037  f4b7		       85 0f		      STA	PF2	;3
   1038  f4b9
   1039  f4b9				   DrawCar0
   1040  f4b9		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1041  f4bb		       b0 04		      BCS	SkipDrawCar	;2
   1042  f4bd		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1043  f4bf		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1044  f4c1				   SkipDrawCar
   1045  f4c1
   1046  f4c1							;BEQ DrawTraffic3
   1047  f4c1				   DrawTraffic1 		; 33
   1048  f4c1		       98		      TYA		; 2
   1049  f4c2		       18		      CLC		; 2 
   1050  f4c3		       65 95		      ADC	TrafficOffset1 + 1	;3
   1051  f4c5		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1052  f4c7		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1053  f4c9		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1054  f4cb		       4c d0 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1055  f4ce				   EorOffsetWithCarry
   1056  f4ce		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1057  f4d0				   AfterEorOffsetWithCarry		;17
   1058  f4d0		       aa		      TAX		;2
   1059  f4d1		       bd 00 fe 	      LDA	AesTable,X	; 4
   1060  f4d4		       c5 be		      CMP	TrafficChance	;3
   1061  f4d6		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1062  f4d8		       a9 ff		      LDA	#$FF	;2
   1063  f4da		       85 86		      STA	ENAM0Cache	;3
   1064  f4dc				   FinishDrawTraffic1
   1065  f4dc
   1066  f4dc				   DrawTraffic2 		; 33
   1067  f4dc		       98		      TYA		; 2
   1068  f4dd		       18		      CLC		; 2 
   1069  f4de		       65 99		      ADC	TrafficOffset2 + 1	;3
   1070  f4e0		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1071  f4e2		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1072  f4e4		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1073  f4e6		       4c eb f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1074  f4e9				   EorOffsetWithCarry2
   1075  f4e9		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1076  f4eb				   AfterEorOffsetWithCarry2		;17
   1077  f4eb		       aa		      TAX		;2
   1078  f4ec		       bd 00 fe 	      LDA	AesTable,X	; 4
   1079  f4ef		       c5 be		      CMP	TrafficChance	;3
   1080  f4f1		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1081  f4f3		       a9 02		      LDA	#%00000010	;2
   1082  f4f5		       85 85		      STA	ENABLCache	;3
   1083  f4f7				   FinishDrawTraffic2
   1084  f4f7
   1085  f4f7							;STA WSYNC ;65 / 137
   1086  f4f7
   1087  f4f7							; LDA Tmp0 ; Flicker this line if drawing car
   1088  f4f7							; BEQ FinishDrawTraffic4
   1089  f4f7				   DrawTraffic3 		; 33
   1090  f4f7		       98		      TYA		; 2
   1091  f4f8		       18		      CLC		; 2 
   1092  f4f9		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1093  f4fb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1094  f4fd		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1095  f4ff		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1096  f501		       4c 06 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1097  f504				   EorOffsetWithCarry3
   1098  f504		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1099  f506				   AfterEorOffsetWithCarry3		;17
   1100  f506		       aa		      TAX		;2
   1101  f507		       bd 00 fe 	      LDA	AesTable,X	; 4
   1102  f50a		       c5 be		      CMP	TrafficChance	;3
   1103  f50c		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1104  f50e		       a9 02		      LDA	#%00000010	;2
   1105  f510		       85 87		      STA	ENAM1Cache
   1106  f512				   FinishDrawTraffic3
   1107  f512
   1108  f512
   1109  f512				   DrawOponent		;26
   1110  f512		       84 b0		      STY	Tmp0	;3
   1111  f514		       a4 cf		      LDY	OpponentLine	;3
   1112  f516		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1113  f518		       b0 0b		      BCS	SkipDrawOpponent	;2
   1114  f51a				   DrawOpponent
   1115  f51a		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1116  f51c		       85 84		      STA	GRP1Cache	;3
   1117  f51e		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1118  f520		       a4 b0		      LDY	Tmp0	;3
   1119  f522		       4c 36 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1120  f525				   SkipDrawOpponent
   1121  f525		       c6 cf		      DEC	OpponentLine	;5
   1122  f527		       a4 b0		      LDY	Tmp0	;3
   1123  f529
   1124  f529				   DrawTraffic0 		; 21 2pe
   1125  f529		       98		      TYA		; 2
   1126  f52a		       18		      CLC		; 2 
   1127  f52b		       65 91		      ADC	TrafficOffset0 + 1	;3
   1128  f52d		       29 08		      AND	#%00001000	;2
   1129  f52f		       f0 05		      BEQ	HasNoBorderP0	;3
   1130  f531				   HasBorderP0
   1131  f531		       a9 e0		      LDA	#%11100000	; 2
   1132  f533		       4c 38 f5 	      JMP	StoreBorderP0	; 3
   1133  f536				   HasNoBorderP0
   1134  f536		       a9 00		      LDA	#0	; 2
   1135  f538				   StoreBorderP0
   1136  f538		       85 81		      STA	PF0Cache	; 3
   1137  f53a		       85 83		      STA	PF2Cache	; 3
   1138  f53c
   1139  f53c				   SkipDrawTraffic0
   1140  f53c
   1141  f53c				   WhileScanLoop
   1142  f53c		       88		      DEY		;2
   1143  f53d		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1144  f53f		       4c 8d f4 	      JMP	ScanLoop	;3
   1145  f542				   FinishScanLoop		; 7 209 of 222
   1146  f542
   1147  f542		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1148  f544		       20 df f6 	      JSR	LoadAll
   1149  f547		       85 02		      STA	WSYNC	; do stuff!
   1150  f549		       85 02		      STA	WSYNC
   1151  f54b		       85 02		      STA	WSYNC
   1152  f54d
   1153  f54d				   PrepareOverscan
   1154  f54d		       a9 02		      LDA	#2
   1155  f54f		       85 02		      STA	WSYNC
   1156  f551							;STA HMOVE	; HMOVE 10
   1157  f551		       85 01		      STA	VBLANK
   1158  f553
   1159  f553		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1160  f555		       8d 96 02 	      STA	TIM64T
   1161  f558
   1162  f558		       85 2b		      STA	HMCLR	; Before we process car movement
   1163  f55a							;Read Fire Button before, will make it start the game for now.
   1164  f55a				   StartGame
   1165  f55a		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1166  f55c		       25 0d		      AND	INPT5	;3 player 1
   1167  f55e		       30 3c		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1168  f560		       a5 8c		      LDA	FrameCount0
   1169  f562		       29 01		      AND	#%00000001
   1170  f564		       d0 36		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1171  f566		       a5 bd		      LDA	GameStatus	;3
   1172  f568		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1173  f56a		       d0 30		      BNE	SkipGameStart
   1174  f56c		       a5 c6		      LDA	GameMode
   1175  f56e		       c9 10		      CMP	#MAX_GAME_MODE
   1176  f570		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1177  f572		       a9 00		      LDA	#0
   1178  f574		       85 c6		      STA	GameMode
   1179  f576		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1180  f578		       85 bc		      STA	SwitchDebounceCounter
   1181  f57a		       4c 9c f5 	      JMP	SkipGameStart
   1182  f57d				   SetGameRunningIfBothPressing
   1183  f57d		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1184  f57f		       05 0d		      ORA	INPT5	;3 player 1
   1185  f581		       30 19		      BMI	SkipGameStart
   1186  f583				   SetGameRunning
   1187  f583		       e6 bd		      INC	GameStatus
   1188  f585		       a9 00		      LDA	#0	;
   1189  f587		       85 8c		      STA	FrameCount0
   1190  f589		       85 8d		      STA	FrameCount1
   1191  f58b		       a9 38		      LDA	#SCORE_FONT_COLOR_START
   1192  f58d		       85 c9		      STA	ScoreFontColor
   1193  f58f		       a9 c8		      LDA	#OP_SCORE_FONT_COLOR_START
   1194  f591		       85 ca		      STA	OpScoreFontColor
   1195  f593		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1196  f595		       85 cb		      STA	ScoreFontColorHoldChange
   1197  f597		       85 cc		      STA	OpScoreFontColorHoldChange
   1198  f599		       4c 10 f6 	      JMP	OverScanWait	; Do not process player movement and also start
   1199  f59c				   SkipGameStart
   1200  f59c
   1201  f59c				   ReadSwitches
   1202  f59c		       a6 bc		      LDX	SwitchDebounceCounter
   1203  f59e		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1204  f5a0		       a9 01		      LDA	#%00000001
   1205  f5a2		       2c 82 02 	      BIT	SWCHB
   1206  f5a5		       d0 07		      BNE	SkipReset
   1207  f5a7		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1208  f5a9		       85 bc		      STA	SwitchDebounceCounter
   1209  f5ab		       4c 18 f6 	      JMP	OverScanWaitBeforeReset
   1210  f5ae				   SkipReset
   1211  f5ae
   1212  f5ae				   GameModeSelect
   1213  f5ae		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1214  f5b0		       d0 22		      BNE	SkipGameSelect
   1215  f5b2		       a2 00		      LDX	#0
   1216  f5b4		       20 0b f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1217  f5b7		       e8		      INX
   1218  f5b8		       20 0b f7 	      JSR	ConfigureDifficulty
   1219  f5bb				   ContinueGameSelect
   1220  f5bb		       a9 02		      LDA	#%00000010
   1221  f5bd		       2c 82 02 	      BIT	SWCHB
   1222  f5c0		       d0 12		      BNE	SkipGameSelect
   1223  f5c2		       a6 c6		      LDX	GameMode
   1224  f5c4		       e0 10		      CPX	#MAX_GAME_MODE
   1225  f5c6		       f0 04		      BEQ	ResetGameMode
   1226  f5c8		       e8		      INX
   1227  f5c9		       4c ce f5 	      JMP	StoreGameMode
   1228  f5cc				   ResetGameMode
   1229  f5cc		       a2 00		      LDX	#0
   1230  f5ce				   StoreGameMode
   1231  f5ce		       86 c6		      STX	GameMode
   1232  f5d0		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1233  f5d2		       85 bc		      STA	SwitchDebounceCounter
   1234  f5d4				   SkipGameSelect
   1235  f5d4		       4c d9 f5 	      JMP	EndReadSwitches
   1236  f5d7				   DecrementSwitchDebounceCounter
   1237  f5d7		       c6 bc		      DEC	SwitchDebounceCounter
   1238  f5d9				   EndReadSwitches
   1239  f5d9
   1240  f5d9				   DoNotTurnBeforeStart
   1241  f5d9							;STA HMCLR
   1242  f5d9		       a5 bd		      LDA	GameStatus
   1243  f5db		       f0 33		      BEQ	OverScanWait
   1244  f5dd
   1245  f5dd							; Last thing, will overrride hmove
   1246  f5dd				   CallTestColisionAndMove
   1247  f5dd		       a2 00		      LDX	#0	; Player 0
   1248  f5df							; Colision with traffic, each player check different flags,
   1249  f5df		       a5 8c		      LDA	FrameCount0
   1250  f5e1		       29 01		      AND	#%00000001
   1251  f5e3		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1252  f5e5		       20 ba f8 	      JSR	IsOpponentColliding
   1253  f5e8		       05 01		      ORA	CXM1P
   1254  f5ea		       4a		      LSR
   1255  f5eb		       05 00		      ORA	CXM0P
   1256  f5ed		       05 02		      ORA	CXP0FB
   1257  f5ef							; ORA CXPPMM ; Collision between players will have its own rules
   1258  f5ef				   SkipColisionPlayer0		; Should not colide on opponent side.
   1259  f5ef		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1260  f5f1		       85 b2		      STA	Tmp2
   1261  f5f3		       20 ce f8 	      JSR	TestCollisionAndMove
   1262  f5f6
   1263  f5f6		       e8		      INX		; player 1
   1264  f5f7		       a5 8c		      LDA	FrameCount0
   1265  f5f9		       29 01		      AND	#%00000001
   1266  f5fb		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1267  f5fd		       20 ba f8 	      JSR	IsOpponentColliding
   1268  f600		       05 00		      ORA	CXM0P
   1269  f602		       4a		      LSR
   1270  f603		       05 01		      ORA	CXM1P
   1271  f605		       05 03		      ORA	CXP1FB
   1272  f607				   SkipColisionPlayer1
   1273  f607		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1274  f609		       85 b2		      STA	Tmp2
   1275  f60b		       20 ce f8 	      JSR	TestCollisionAndMove
   1276  f60e
   1277  f60e				   ClearCollision
   1278  f60e		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1279  f610
   1280  f610				   OverScanWait
   1281  f610		       ad 84 02 	      LDA	INTIM
   1282  f613		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1283  f615		       4c d8 f0 	      JMP	MainLoop
   1284  f618
   1285  f618				   OverScanWaitBeforeReset
   1286  f618		       ad 84 02 	      LDA	INTIM
   1287  f61b		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1288  f61d		       4c 14 f0 	      JMP	Start
   1289  f620
   1290  f620				   Subroutines
   1291  f620
   1292  f620							;X Player
   1293  f620							;Tmp1 TrafficOffset 2
   1294  f620				   ProcessSound
   1295  f620				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1296  f620		       b5 c9		      LDA	ScoreFontColor,X	;3
   1297  f622		       dd b7 fc 	      CMP	PlayerToScoreOverColor,X	;2
   1298  f625		       f0 6b		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1299  f627		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X	;2
   1300  f62a		       f0 29		      BEQ	PlayCheckpoint	;2
   1301  f62c		       b5 8e		      LDA	CollisionCounter,X	;3
   1302  f62e		       c9 e0		      CMP	#$E0	;2
   1303  f630		       b0 14		      BCS	PlayColision	;2
   1304  f632		       b5 cd		      LDA	NextCheckpoint,X	;3
   1305  f634		       38		      SEC		;2
   1306  f635		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1307  f637		       c9 02		      CMP	#$02	;2
   1308  f639		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1309  f63b		       b5 b8		      LDA	CountdownTimer,X	; 3
   1310  f63d		       f0 53		      BEQ	EngineSound	;2
   1311  f63f		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1312  f641		       90 37		      BCC	PlayWarnTimeEnding	;4
   1313  f643		       4c 92 f6 	      JMP	EngineSound	;3
   1314  f646				   PlayColision
   1315  f646		       a9 1f		      LDA	#31
   1316  f648		       95 17		      STA	AUDF0,X
   1317  f64a		       a9 08		      LDA	#8
   1318  f64c		       95 15		      STA	AUDC0,X
   1319  f64e		       a9 08		      LDA	#8
   1320  f650		       95 19		      STA	AUDV0,X
   1321  f652		       4c b9 f6 	      JMP	EndSound
   1322  f655
   1323  f655				   PlayCheckpoint
   1324  f655		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1325  f657		       4a		      LSR		;2
   1326  f658		       4a		      LSR		;2
   1327  f659		       4a		      LSR		;2
   1328  f65a		       95 17		      STA	AUDF0,X	;3
   1329  f65c		       a9 0c		      LDA	#12	;2
   1330  f65e		       95 15		      STA	AUDC0,X	;3
   1331  f660		       a9 06		      LDA	#6	;2
   1332  f662		       95 19		      STA	AUDV0,X	;3
   1333  f664		       4c b9 f6 	      JMP	EndSound	;3
   1334  f667
   1335  f667				   PlayBeforeCheckpoint
   1336  f667		       a5 8c		      LDA	FrameCount0	;3
   1337  f669		       29 1c		      AND	#%00011100	;2
   1338  f66b		       09 03		      ORA	#%00000011	;2
   1339  f66d		       95 17		      STA	AUDF0,X	;3
   1340  f66f		       a9 0c		      LDA	#12	;2
   1341  f671		       95 15		      STA	AUDC0,X	;3
   1342  f673		       a9 03		      LDA	#3	;2
   1343  f675		       95 19		      STA	AUDV0,X	;3
   1344  f677		       4c b9 f6 	      JMP	EndSound	;3
   1345  f67a
   1346  f67a				   PlayWarnTimeEnding
   1347  f67a		       a5 8c		      LDA	FrameCount0	;3
   1348  f67c		       29 04		      AND	#%00000100	;2
   1349  f67e		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1350  f680		       18		      CLC		;2
   1351  f681		       a9 0a		      LDA	#10	;2
   1352  f683		       75 b8		      ADC	CountdownTimer,X	;2
   1353  f685		       95 17		      STA	AUDF0,X	;3
   1354  f687		       a9 0c		      LDA	#12	;2
   1355  f689		       95 15		      STA	AUDC0,X	;3
   1356  f68b		       a9 03		      LDA	#3	;2
   1357  f68d		       95 19		      STA	AUDV0,X	;3
   1358  f68f		       4c b9 f6 	      JMP	EndSound	;3
   1359  f692
   1360  f692				   EngineSound		;41
   1361  f692		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1362  f694		       95 19		      STA	AUDV0,X
   1363  f696		       b5 b8		      LDA	CountdownTimer,X	;3
   1364  f698		       f0 1b		      BEQ	EngineOff	;2
   1365  f69a		       b4 d5		      LDY	Gear,X
   1366  f69c		       b5 de		      LDA	Player0SpeedL,X	;3
   1367  f69e		       4a		      LSR		;2
   1368  f69f		       4a		      LSR		;2
   1369  f6a0		       4a		      LSR		;2
   1370  f6a1		       29 0f		      AND	#%00001111	;2
   1371  f6a3		       85 b0		      STA	Tmp0	;3
   1372  f6a5		       b9 30 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1373  f6a8		       38		      SEC		;2
   1374  f6a9		       e5 b0		      SBC	Tmp0	;3
   1375  f6ab		       95 17		      STA	AUDF0,X	;3
   1376  f6ad		       b9 2a ff 	      LDA	EngineSoundType,Y	;4
   1377  f6b0		       95 15		      STA	AUDC0,X	;3
   1378  f6b2		       4c b9 f6 	      JMP	EndEngineSound	;3
   1379  f6b5				   EngineOff
   1380  f6b5				   MuteSound
   1381  f6b5		       a9 00		      LDA	#0
   1382  f6b7		       95 15		      STA	AUDC0,X
   1383  f6b9				   EndEngineSound
   1384  f6b9				   EndSound
   1385  f6b9		       60		      RTS
   1386  f6ba
   1387  f6ba				   ClearAll		; 58
   1388  f6ba		       a9 00		      LDA	#0	;2
   1389  f6bc		       85 1b		      STA	GRP0	;3
   1390  f6be		       85 1c		      STA	GRP1	;3
   1391  f6c0		       85 1f		      STA	ENABL	;3
   1392  f6c2		       85 1d		      STA	ENAM0	;3
   1393  f6c4		       85 1e		      STA	ENAM1	;3
   1394  f6c6		       85 80		      STA	GRP0Cache	;3
   1395  f6c8		       85 84		      STA	GRP1Cache	;3
   1396  f6ca		       85 85		      STA	ENABLCache	;3
   1397  f6cc		       85 86		      STA	ENAM0Cache	;3
   1398  f6ce		       85 87		      STA	ENAM1Cache	;3
   1399  f6d0
   1400  f6d0				   ClearPF		; 26
   1401  f6d0		       a9 00		      LDA	#0	;2
   1402  f6d2				   ClearPFSkipLDA0
   1403  f6d2		       85 0d		      STA	PF0	;3
   1404  f6d4		       85 0e		      STA	PF1	;3
   1405  f6d6		       85 0f		      STA	PF2	;3	
   1406  f6d8		       85 81		      STA	PF0Cache	;3
   1407  f6da		       85 82		      STA	PF1Cache	;3
   1408  f6dc		       85 83		      STA	PF2Cache	;3 
   1409  f6de		       60		      RTS		;6
   1410  f6df				   EndClearAll
   1411  f6df
   1412  f6df				   LoadAll		; 48
   1413  f6df		       a5 81		      LDA	PF0Cache	;3
   1414  f6e1		       85 0d		      STA	PF0	;3
   1415  f6e3
   1416  f6e3		       a5 82		      LDA	PF1Cache	;3
   1417  f6e5		       85 0e		      STA	PF1	;3
   1418  f6e7
   1419  f6e7		       a5 83		      LDA	PF2Cache	;3
   1420  f6e9		       85 0f		      STA	PF2	;3
   1421  f6eb
   1422  f6eb		       a5 84		      LDA	GRP1Cache	;3
   1423  f6ed		       85 1c		      STA	GRP1	;3
   1424  f6ef
   1425  f6ef		       a5 85		      LDA	ENABLCache	;3
   1426  f6f1		       85 1f		      STA	ENABL	;3
   1427  f6f3
   1428  f6f3		       a5 86		      LDA	ENAM0Cache	;3
   1429  f6f5		       85 1d		      STA	ENAM0	;3
   1430  f6f7
   1431  f6f7		       a5 87		      LDA	ENAM1Cache	;3
   1432  f6f9		       85 1e		      STA	ENAM1	;3
   1433  f6fb
   1434  f6fb		       60		      RTS		;6
   1435  f6fc				   EndLoadAll
   1436  f6fc
   1437  f6fc				   NextDifficulty		;Is a SBR
   1438  f6fc		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1439  f6fe		       29 01		      AND	#%00000001
   1440  f700		       d0 24		      BNE	CheckRandomDifficulty
   1441  f702
   1442  f702		       b5 c4		      LDA	CurrentDifficulty,X
   1443  f704		       18		      CLC
   1444  f705		       69 01		      ADC	#1
   1445  f707		       29 03		      AND	#%00000011	; 0 to 3
   1446  f709		       95 c4		      STA	CurrentDifficulty,X
   1447  f70b
   1448  f70b				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1449  f70b		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1450  f70d		       b9 ac ff 	      LDA	TrafficChanceTable,Y
   1451  f710		       95 be		      STA	TrafficChance,X
   1452  f712		       b9 a8 ff 	      LDA	TrafficColorTable,Y
   1453  f715		       95 c2		      STA	TrafficColor,X
   1454  f717
   1455  f717		       a5 c6		      LDA	GameMode	;
   1456  f719		       29 01		      AND	#%00000001
   1457  f71b		       f0 03		      BEQ	UseNextDifficultyTime
   1458  f71d		       4c 21 f7 	      JMP	StoreDifficultyTime
   1459  f720				   UseNextDifficultyTime
   1460  f720		       c8		      INY
   1461  f721				   StoreDifficultyTime
   1462  f721		       b9 b0 ff 	      LDA	TrafficTimeTable,Y
   1463  f724		       95 c0		      STA	CheckpointTime,X
   1464  f726
   1465  f726				   CheckRandomDifficulty
   1466  f726		       a5 c6		      LDA	GameMode
   1467  f728		       29 08		      AND	#%00001000	; Random difficulties
   1468  f72a		       f0 26		      BEQ	ReturnFromNextDifficulty
   1469  f72c				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1470  f72c		       a5 f2		      LDA	IsOpponentInFront
   1471  f72e		       30 12		      BMI	UseOpponentChance
   1472  f730		       a5 cf		      LDA	OpponentLine	; Same line
   1473  f732		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1474  f734		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1475  f736		       a4 8c		      LDY	FrameCount0
   1476  f738		       b9 00 fe 	      LDA	AesTable,Y
   1477  f73b							;EOR TrafficChance, no need, lets make life simple
   1478  f73b		       29 3f		      AND	#%00111111
   1479  f73d		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1480  f73f		       4c 52 f7 	      JMP	ReturnFromNextDifficulty
   1481  f742				   UseOpponentChance
   1482  f742		       8a		      TXA
   1483  f743		       49 01		      EOR	#%00000001	; Reverts the player
   1484  f745		       aa		      TAX
   1485  f746		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1486  f748		       85 b3		      STA	Tmp3
   1487  f74a		       8a		      TXA
   1488  f74b		       49 01		      EOR	#%00000001	; Restors the player
   1489  f74d		       aa		      TAX
   1490  f74e		       a5 b3		      LDA	Tmp3
   1491  f750		       95 be		      STA	TrafficChance,X
   1492  f752
   1493  f752				   ReturnFromNextDifficulty
   1494  f752		       60		      RTS
   1495  f753
   1496  f753				   DefaultOffsets
   1497  f753		       a9 20		      LDA	#$20
   1498  f755		       85 96		      STA	TrafficOffset1 + 2
   1499  f757		       85 a6		      STA	OpTrafficOffset1 + 2
   1500  f759		       a9 40		      LDA	#$40
   1501  f75b		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1502  f75d		       85 aa		      STA	OpTrafficOffset2 + 2
   1503  f75f		       a9 60		      LDA	#$60
   1504  f761		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1505  f763		       85 ae		      STA	OpTrafficOffset3 + 2
   1506  f765		       a9 80		      LDA	#$80
   1507  f767		       60		      RTS
   1508  f768
   1509  f768				   PrintStaticText		; Preload X with the offset referent to StaticText
   1510  f768		       bd 00 ff 	      LDA	StaticText,X
   1511  f76b		       85 d0		      STA	ScoreD0
   1512  f76d		       e8		      INX
   1513  f76e		       bd 00 ff 	      LDA	StaticText,X
   1514  f771		       85 d1		      STA	ScoreD1
   1515  f773		       e8		      INX
   1516  f774		       bd 00 ff 	      LDA	StaticText,X
   1517  f777		       85 d2		      STA	ScoreD2
   1518  f779		       e8		      INX
   1519  f77a		       bd 00 ff 	      LDA	StaticText,X
   1520  f77d		       85 d3		      STA	ScoreD3
   1521  f77f		       e8		      INX
   1522  f780		       bd 00 ff 	      LDA	StaticText,X
   1523  f783		       85 d4		      STA	ScoreD4
   1524  f785		       60		      RTS
   1525  f786
   1526  f786				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1527  f786		       a2 00		      LDX	#0
   1528  f788		       a0 04		      LDY	#FONT_OFFSET
   1529  f78a
   1530  f78a				   ScoreLoop		; 20 
   1531  f78a		       85 02		      STA	WSYNC	;2
   1532  f78c		       85 2a		      STA	HMOVE
   1533  f78e
   1534  f78e		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1535  f790		       85 0d		      STA	PF0	;3
   1536  f792
   1537  f792		       a5 82		      LDA	PF1Cache	;3
   1538  f794		       85 0e		      STA	PF1	;3
   1539  f796
   1540  f796		       a5 83		      LDA	PF2Cache	;3
   1541  f798		       85 0f		      STA	PF2	;3
   1542  f79a
   1543  f79a				   DrawScoreD0		; 15
   1544  f79a		       a6 d0		      LDX	ScoreD0	; 3
   1545  f79c		       bd 00 fd 	      LDA	Font,X	;4
   1546  f79f		       85 81		      STA	PF0Cache	;3
   1547  f7a1		       c6 d0		      DEC	ScoreD0	;5
   1548  f7a3
   1549  f7a3				   DrawScoreD1		; 23	
   1550  f7a3		       a6 d1		      LDX	ScoreD1	; 3
   1551  f7a5		       bd 00 fd 	      LDA	Font,X	;4
   1552  f7a8		       0a		      ASL		;2
   1553  f7a9		       0a		      ASL		;2
   1554  f7aa		       0a		      ASL		;2
   1555  f7ab		       0a		      ASL		;2
   1556  f7ac		       85 82		      STA	PF1Cache	;3
   1557  f7ae		       c6 d1		      DEC	ScoreD1	;5
   1558  f7b0
   1559  f7b0				   DrawScoreD2		; 20
   1560  f7b0		       a6 d2		      LDX	ScoreD2	; 3
   1561  f7b2		       bd 00 fd 	      LDA	Font,X	;4
   1562  f7b5		       29 0f		      AND	#%00001111	;2
   1563  f7b7		       05 82		      ORA	PF1Cache	;3
   1564  f7b9		       85 82		      STA	PF1Cache	;3
   1565  f7bb		       c6 d2		      DEC	ScoreD2	;5
   1566  f7bd
   1567  f7bd				   DrawScoreD3		; 23
   1568  f7bd		       a6 d3		      LDX	ScoreD3	; 3
   1569  f7bf		       bd 00 fd 	      LDA	Font,X	;4
   1570  f7c2		       4a		      LSR		;2
   1571  f7c3		       4a		      LSR		;2
   1572  f7c4		       4a		      LSR		;2
   1573  f7c5		       4a		      LSR		;2
   1574  f7c6		       85 83		      STA	PF2Cache	;3
   1575  f7c8		       c6 d3		      DEC	ScoreD3	;5
   1576  f7ca
   1577  f7ca				   DrawScoreD4		; 20
   1578  f7ca		       a6 d4		      LDX	ScoreD4	; 3
   1579  f7cc		       bd 00 fd 	      LDA	Font,X	;4
   1580  f7cf		       29 f0		      AND	#%11110000	;2
   1581  f7d1		       05 83		      ORA	PF2Cache	;3
   1582  f7d3		       85 83		      STA	PF2Cache	;3
   1583  f7d5		       c6 d4		      DEC	ScoreD4	;5
   1584  f7d7
   1585  f7d7
   1586  f7d7		       88		      DEY		;2
   1587  f7d8		       10 b0		      BPL	ScoreLoop	;4
   1588  f7da
   1589  f7da		       85 02		      STA	WSYNC
   1590  f7dc		       85 2a		      STA	HMOVE
   1591  f7de		       20 df f6 	      JSR	LoadAll
   1592  f7e1		       60		      RTS		; 6
   1593  f7e2
   1594  f7e2				   WaitForVblankEnd
   1595  f7e2		       ad 84 02 	      LDA	INTIM
   1596  f7e5		       d0 fb		      BNE	WaitForVblankEnd
   1597  f7e7		       85 02		      STA	WSYNC
   1598  f7e9		       85 01		      STA	VBLANK
   1599  f7eb		       60		      RTS
   1600  f7ec
   1601  f7ec				   Sleep4Lines
   1602  f7ec		       85 02		      STA	WSYNC
   1603  f7ee		       85 02		      STA	WSYNC
   1604  f7f0		       85 02		      STA	WSYNC
   1605  f7f2		       85 02		      STA	WSYNC
   1606  f7f4		       60		      RTS
   1607  f7f5
   1608  f7f5				   Sleep8Lines
   1609  f7f5		       20 ec f7 	      JSR	Sleep4Lines
   1610  f7f8		       20 ec f7 	      JSR	Sleep4Lines
   1611  f7fb		       60		      RTS
   1612  f7fc
   1613  f7fc				   Sleep32Lines
   1614  f7fc		       20 f5 f7 	      JSR	Sleep8Lines
   1615  f7ff		       20 f5 f7 	      JSR	Sleep8Lines
   1616  f802		       20 f5 f7 	      JSR	Sleep8Lines
   1617  f805		       20 f5 f7 	      JSR	Sleep8Lines
   1618  f808		       60		      RTS
   1619  f809
   1620  f809							;X = number of WSYNC HMOVE to run
   1621  f809				   HMoveXTimes
   1622  f809		       85 02		      STA	WSYNC	;3
   1623  f80b		       85 2a		      STA	HMOVE	; 3/10 
   1624  f80d		       ca		      DEX
   1625  f80e		       d0 f9		      BNE	HMoveXTimes
   1626  f810		       60		      RTS
   1627  f811
   1628  f811				   ConfigureCarSprites
   1629  f811		       a5 8c		      LDA	FrameCount0
   1630  f813		       29 01		      AND	#%00000001
   1631  f815		       d0 0b		      BNE	LoadForRightScreenSprites
   1632  f817				   LoadForLeftScreenSprites
   1633  f817		       a5 c7		      LDA	CurrentCarId
   1634  f819		       85 b0		      STA	Tmp0
   1635  f81b		       a5 c8		      LDA	OpCurrentCarId
   1636  f81d		       85 b1		      STA	Tmp1
   1637  f81f		       4c 2a f8 	      JMP	LoadCarSpritesFromIds
   1638  f822				   LoadForRightScreenSprites
   1639  f822		       a5 c7		      LDA	CurrentCarId
   1640  f824		       85 b1		      STA	Tmp1
   1641  f826		       a5 c8		      LDA	OpCurrentCarId
   1642  f828		       85 b0		      STA	Tmp0
   1643  f82a
   1644  f82a				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1645  f82a		       a4 b0		      LDY	Tmp0
   1646  f82c		       b9 82 ff 	      LDA	CarIdToSpriteAddressL,Y
   1647  f82f		       85 d7		      STA	CarSpritePointerL
   1648  f831		       b9 86 ff 	      LDA	CarIdToSpriteAddressH,Y
   1649  f834		       85 d8		      STA	CarSpritePointerH
   1650  f836				   ConfigureOpponentCarSprite
   1651  f836		       a4 b1		      LDY	Tmp1
   1652  f838		       b9 8a ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1653  f83b		       85 d9		      STA	EnemyCarSpritePointerL
   1654  f83d		       b9 8e ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1655  f840		       85 da		      STA	EnemyCarSpritePointerH
   1656  f842		       60		      RTS
   1657  f843
   1658  f843							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1659  f843							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1660  f843							; Tmp0 Binary Number
   1661  f843							; Result Returned in Tmp 1 and A
   1662  f843				   BINBCD8
   1663  f843		       f8		      SED		; Switch to decimal mode
   1664  f844		       a9 00		      LDA	#0	; Ensure the result is clear
   1665  f846		       85 b1		      STA	Tmp1+0
   1666  f848							;STA Tmp1+1
   1667  f848		       a2 08		      LDX	#8	; The number of source bits
   1668  f84a
   1669  f84a				   CNVBIT
   1670  f84a		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1671  f84c		       a5 b1		      LDA	Tmp1+0	; And add into result
   1672  f84e		       65 b1		      ADC	Tmp1+0
   1673  f850		       85 b1		      STA	Tmp1+0
   1674  f852							;Not needed now, 0 to 99 is enought for timer!
   1675  f852							; LDA Tmp1+1	; propagating any carry
   1676  f852							; ADC Tmp1+1
   1677  f852							; STA Tmp1+1
   1678  f852		       ca		      DEX		; And repeat for next bit
   1679  f853		       d0 f5		      BNE	CNVBIT
   1680  f855		       d8		      CLD		; Back to binary
   1681  f856
   1682  f856		       60		      RTS		; All Done.
   1683  f857
   1684  f857							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1685  f857							;X player 0 or 1
   1686  f857				   SelectCarWithDpad
   1687  f857		       a0 03		      LDY	#3
   1688  f859				   SelectCarWithDpadLoop
   1689  f859		       ad 80 02 	      LDA	SWCHA
   1690  f85c		       25 b0		      AND	Tmp0
   1691  f85e		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1692  f860		       98		      TYA
   1693  f861		       95 c7		      STA	CurrentCarId,X
   1694  f863				   ContinueSelectCarWithDpadLoop
   1695  f863		       46 b0		      LSR	Tmp0
   1696  f865		       88		      DEY
   1697  f866		       10 f1		      BPL	SelectCarWithDpadLoop
   1698  f868		       60		      RTS
   1699  f869
   1700  f869				   ProcessOpponentLine
   1701  f869		       a5 8c		      LDA	FrameCount0
   1702  f86b		       29 01		      AND	#%00000001
   1703  f86d		       38		      SEC
   1704  f86e		       d0 15		      BNE	Player0IsOpponent
   1705  f870				   Player1IsOpponent		; Code could be reused?
   1706  f870		       a5 91		      LDA	TrafficOffset0 + 1
   1707  f872		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1708  f874		       85 b0		      STA	Tmp0
   1709  f876		       a5 92		      LDA	TrafficOffset0 + 2
   1710  f878		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1711  f87a		       85 b1		      STA	Tmp1
   1712  f87c		       a5 ba		      LDA	Traffic0Msb
   1713  f87e		       e5 bb		      SBC	OpTraffic0Msb
   1714  f880		       85 b2		      STA	Tmp2
   1715  f882		       4c 97 f8 	      JMP	StoreInFrontPlayer
   1716  f885				   Player0IsOpponent
   1717  f885		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1718  f887		       e5 91		      SBC	TrafficOffset0 + 1
   1719  f889		       85 b0		      STA	Tmp0
   1720  f88b		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1721  f88d		       e5 92		      SBC	TrafficOffset0 + 2
   1722  f88f		       85 b1		      STA	Tmp1
   1723  f891		       a5 bb		      LDA	OpTraffic0Msb
   1724  f893		       e5 ba		      SBC	Traffic0Msb
   1725  f895		       85 b2		      STA	Tmp2
   1726  f897
   1727  f897				   StoreInFrontPlayer
   1728  f897		       85 f2		      STA	IsOpponentInFront
   1729  f899
   1730  f899				   AddOffsetToOpponentLine
   1731  f899		       18		      CLC
   1732  f89a		       a5 b0		      LDA	Tmp0
   1733  f89c		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1734  f89e		       85 b0		      STA	Tmp0
   1735  f8a0		       a5 b1		      LDA	Tmp1
   1736  f8a2		       69 00		      ADC	#0
   1737  f8a4		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1738  f8a6		       a5 b2		      LDA	Tmp2
   1739  f8a8		       69 00		      ADC	#0
   1740  f8aa		       05 b1		      ORA	Tmp1
   1741  f8ac		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1742  f8ae				   OpponentNotVisible
   1743  f8ae		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1744  f8b0		       85 cf		      STA	OpponentLine
   1745  f8b2		       4c b9 f8 	      JMP	ReturnFromProcessOpponentLine
   1746  f8b5				   OpponentVisible
   1747  f8b5		       a5 b0		      LDA	Tmp0
   1748  f8b7		       85 cf		      STA	OpponentLine
   1749  f8b9				   ReturnFromProcessOpponentLine
   1750  f8b9		       60		      RTS
   1751  f8ba
   1752  f8ba							; Value stored in A
   1753  f8ba				   IsOpponentColliding
   1754  f8ba							;Any non default state, opponent do not colide
   1755  f8ba		       a5 8e		      LDA	CollisionCounter
   1756  f8bc		       05 8f		      ORA	OpCollisionCounter
   1757  f8be		       05 cb		      ORA	ScoreFontColorHoldChange
   1758  f8c0		       05 cc		      ORA	OpScoreFontColorHoldChange
   1759  f8c2		       d0 07		      BNE	OpponentNotColliding
   1760  f8c4		       a5 f2		      LDA	IsOpponentInFront
   1761  f8c6		       25 07		      AND	CXPPMM
   1762  f8c8		       4c cd f8 	      JMP	ReturnIsOpponentColliding
   1763  f8cb				   OpponentNotColliding
   1764  f8cb		       a9 00		      LDA	#0
   1765  f8cd				   ReturnIsOpponentColliding
   1766  f8cd		       60		      RTS
   1767  f8ce
   1768  f8ce
   1769  f8ce							; Movement and colision are binded because the car must be moved after duplicate size.
   1770  f8ce							; Use X for the player
   1771  f8ce							; Tmp2 Traffic colision result
   1772  f8ce				   TestCollisionAndMove
   1773  f8ce							; Until store the movemnt, Y contains the value to be stored.
   1774  f8ce							; see if player0 colides with the rest
   1775  f8ce		       a5 b2		      LDA	Tmp2
   1776  f8d0		       f0 2b		      BEQ	NoCollision	;skip if not hitting...
   1777  f8d2		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1778  f8d4		       d0 27		      BNE	NoCollision
   1779  f8d6		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1780  f8d8		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X
   1781  f8db		       f0 20		      BEQ	NoCollision
   1782  f8dd		       dd b5 fc 	      CMP	PlayerToScoreStartColor,X
   1783  f8e0		       f0 1b		      BEQ	NoCollision
   1784  f8e2		       a9 ff		      LDA	#COLLISION_FRAMES
   1785  f8e4		       95 8e		      STA	CollisionCounter,X
   1786  f8e6		       b5 f0		      LDA	Player0SpeedH,X
   1787  f8e8		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1788  f8ea		       a9 10		      LDA	#COLLISION_SPEED_L
   1789  f8ec		       d5 de		      CMP	Player0SpeedL,X
   1790  f8ee		       b0 04		      BCS	SkipSetColisionSpeedL
   1791  f8f0				   SetColisionSpeedL
   1792  f8f0		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1793  f8f2		       95 de		      STA	Player0SpeedL,X
   1794  f8f4				   SkipSetColisionSpeedL
   1795  f8f4		       a9 00		      LDA	#0
   1796  f8f6		       95 f0		      STA	Player0SpeedH,X
   1797  f8f8		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1798  f8fa		       4c 4d f9 	      JMP	StoreHMove	; We keep position consistent
   1799  f8fd				   NoCollision
   1800  f8fd
   1801  f8fd				   DecrementCollision
   1802  f8fd		       b5 8e		      LDA	CollisionCounter,X
   1803  f8ff		       f0 06		      BEQ	FinishDecrementCollision
   1804  f901		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1805  f903		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1806  f905		       d6 8e		      DEC	CollisionCounter,X
   1807  f907				   FinishDecrementCollision
   1808  f907
   1809  f907				   ResetPlayerSize
   1810  f907		       d0 04		      BNE	FinishResetPlayerSize
   1811  f909		       a9 30		      LDA	#%00110000
   1812  f90b		       95 04		      STA	NUSIZ0,X	;
   1813  f90d				   FinishResetPlayerSize
   1814  f90d
   1815  f90d				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1816  f90d		       b5 8e		      LDA	CollisionCounter,X
   1817  f90f		       c9 01		      CMP	#1	; Last frame before reset
   1818  f911		       d0 05		      BNE	SkipResetPlayerPosition
   1819  f913		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1820  f915		       4c 4d f9 	      JMP	StoreHMove
   1821  f918				   SkipResetPlayerPosition
   1822  f918
   1823  f918				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1824  f918		       b5 c7		      LDA	CurrentCarId,X
   1825  f91a		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1826  f91c		       d0 08		      BNE	PrepareReadXAxis
   1827  f91e		       a0 00		      LDY	#0
   1828  f920		       a5 8c		      LDA	FrameCount0
   1829  f922		       29 01		      AND	#DRAGSTER_TURN_MASK
   1830  f924		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1831  f926
   1832  f926				   PrepareReadXAxis
   1833  f926		       a0 00		      LDY	#0
   1834  f928		       b5 b6		      LDA	Player0X,X
   1835  f92a				   BeginReadLeft
   1836  f92a		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1837  f92c		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1838  f92f		       2c 80 02 	      BIT	SWCHA
   1839  f932		       d0 07		      BNE	SkipMoveLeft
   1840  f934		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1841  f936		       d6 b6		      DEC	Player0X,X
   1842  f938		       4c 4d f9 	      JMP	StoreHMove	; Cannot move left and right...
   1843  f93b				   SkipMoveLeft
   1844  f93b				   BeginReadRight
   1845  f93b		       b5 b6		      LDA	Player0X,X
   1846  f93d		       c9 2c		      CMP	#PLAYER_MAX_X
   1847  f93f		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1848  f941		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1849  f944		       2c 80 02 	      BIT	SWCHA
   1850  f947		       d0 04		      BNE	SkipMoveRight
   1851  f949		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1852  f94b		       f6 b6		      INC	Player0X,X
   1853  f94d				   SkipMoveRight
   1854  f94d				   StoreHMove
   1855  f94d		       94 20		      STY	HMP0,X	;set the move for player 0
   1856  f94f
   1857  f94f		       60		      RTS
   1858  f950
   1859  f950							; X Traffic offset 4 bits each lane, 4 lanes per player
   1860  f950							; Tmp3 Max X offset
   1861  f950							; Tmp4 Max Player Speed L
   1862  f950							; Tmp5 Max Player Speed H
   1863  f950				   UpdateOffsets
   1864  f950		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1865  f952		       a5 c6		      LDA	GameMode
   1866  f954		       29 04		      AND	#%00000100	; GameModes with high delta
   1867  f956		       f0 02		      BEQ	UpdateOffsetsLoop
   1868  f958		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1869  f95a
   1870  f95a				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1871  f95a		       38		      SEC
   1872  f95b		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1873  f95d		       f9 6e ff 	      SBC	TrafficSpeeds,Y
   1874  f960		       85 b0		      STA	Tmp0
   1875  f962		       c8		      INY
   1876  f963		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1877  f965		       f9 6e ff 	      SBC	TrafficSpeeds,Y
   1878  f968		       85 b1		      STA	Tmp1
   1879  f96a		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1880  f96c		       e9 00		      SBC	#0
   1881  f96e		       85 b2		      STA	Tmp2
   1882  f970
   1883  f970				   AddsTheResult
   1884  f970		       18		      CLC
   1885  f971		       a5 b0		      LDA	Tmp0
   1886  f973		       75 90		      ADC	TrafficOffset0,X
   1887  f975		       95 90		      STA	TrafficOffset0,X
   1888  f977		       e8		      INX
   1889  f978		       a5 b1		      LDA	Tmp1
   1890  f97a		       75 90		      ADC	TrafficOffset0,X
   1891  f97c		       95 90		      STA	TrafficOffset0,X
   1892  f97e		       e8		      INX
   1893  f97f		       a5 b2		      LDA	Tmp2	; Carry
   1894  f981		       75 90		      ADC	TrafficOffset0,X
   1895  f983		       95 90		      STA	TrafficOffset0,X
   1896  f985		       90 0f		      BCC	CalculateOffsetCache
   1897  f987				   CalculatePlayer0Msb
   1898  f987		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1899  f989		       d0 05		      BNE	CalculatePlayer1Msb
   1900  f98b		       e6 ba		      INC	Traffic0Msb
   1901  f98d		       4c 96 f9 	      JMP	CalculateOffsetCache
   1902  f990				   CalculatePlayer1Msb
   1903  f990		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1904  f992		       d0 02		      BNE	CalculateOffsetCache
   1905  f994		       e6 bb		      INC	OpTraffic0Msb
   1906  f996
   1907  f996				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1908  f996		       e8		      INX
   1909  f997		       38		      SEC
   1910  f998		       69 00		      ADC	#0	;Increment by one
   1911  f99a		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1912  f99c
   1913  f99c				   PrepareNextUpdateLoop
   1914  f99c		       c8		      INY
   1915  f99d		       e8		      INX
   1916  f99e		       e4 b3		      CPX	Tmp3	; Max X offset
   1917  f9a0		       d0 b8		      BNE	UpdateOffsetsLoop
   1918  f9a2		       60		      RTS
   1919  f9a3
   1920  f9a3							; X Player 0 or 1
   1921  f9a3				   ProcessSpeed
   1922  f9a3				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1923  f9a3		       a9 00		      LDA	#0
   1924  f9a5		       85 b0		      STA	Tmp0	; Break speed
   1925  f9a7		       b5 b8		      LDA	CountdownTimer,X
   1926  f9a9		       d0 0d		      BNE	Break
   1927  f9ab		       b4 c7		      LDY	CurrentCarId,X
   1928  f9ad		       a5 8c		      LDA	FrameCount0
   1929  f9af		       39 96 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1930  f9b2		       d0 04		      BNE	Break
   1931  f9b4		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1932  f9b6		       85 b0		      STA	Tmp0
   1933  f9b8
   1934  f9b8				   Break
   1935  f9b8		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1936  f9bb		       2c 80 02 	      BIT	SWCHA
   1937  f9be		       d0 12		      BNE	BreakNonZero
   1938  f9c0		       b5 0c		      LDA	INPT4,X	;3
   1939  f9c2		       10 0a		      BPL	BreakWhileAccelerating
   1940  f9c4		       b4 d5		      LDY	Gear,X
   1941  f9c6		       b9 a2 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1942  f9c9		       85 b0		      STA	Tmp0
   1943  f9cb		       4c d2 f9 	      JMP	BreakNonZero
   1944  f9ce				   BreakWhileAccelerating		; Allow better control while breaking.
   1945  f9ce		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1946  f9d0		       85 b0		      STA	Tmp0
   1947  f9d2
   1948  f9d2				   BreakNonZero
   1949  f9d2		       a5 b0		      LDA	Tmp0
   1950  f9d4		       f0 29		      BEQ	SkipBreak
   1951  f9d6
   1952  f9d6				   DecreaseSpeed
   1953  f9d6		       38		      SEC
   1954  f9d7		       b5 de		      LDA	Player0SpeedL,X
   1955  f9d9		       e5 b0		      SBC	Tmp0
   1956  f9db		       95 de		      STA	Player0SpeedL,X
   1957  f9dd		       b5 f0		      LDA	Player0SpeedH,X
   1958  f9df		       e9 00		      SBC	#0
   1959  f9e1		       95 f0		      STA	Player0SpeedH,X
   1960  f9e3
   1961  f9e3				   CheckMinSpeed
   1962  f9e3		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1963  f9e5		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1964  f9e7		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1965  f9e9		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1966  f9eb
   1967  f9eb				   CompareLBreakSpeed
   1968  f9eb		       b5 de		      LDA	Player0SpeedL,X
   1969  f9ed		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1970  f9ef		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1971  f9f1		       4c fc f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1972  f9f4
   1973  f9f4				   ResetMinSpeed
   1974  f9f4		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1975  f9f6		       95 f0		      STA	Player0SpeedH,X
   1976  f9f8		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1977  f9fa		       95 de		      STA	Player0SpeedL,X
   1978  f9fc
   1979  f9fc				   SkipAccelerateIfBreaking
   1980  f9fc		       4c 45 fa 	      JMP	SkipAccelerate
   1981  f9ff				   SkipBreak
   1982  f9ff
   1983  f9ff				   Acelerates
   1984  f9ff		       b5 b8		      LDA	CountdownTimer,X
   1985  fa01		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1986  fa03
   1987  fa03				   ContinueAccelerateTest
   1988  fa03		       b5 0c		      LDA	INPT4,X	;3
   1989  fa05		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1990  fa07		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1991  fa0a		       2c 80 02 	      BIT	SWCHA
   1992  fa0d		       d0 36		      BNE	SkipAccelerate
   1993  fa0f
   1994  fa0f				   IncreaseCarSpeed
   1995  fa0f		       a9 02		      LDA	#2
   1996  fa11		       85 b0		      STA	Tmp0	; Loop control
   1997  fa13		       b4 c7		      LDY	CurrentCarId,X
   1998  fa15				   IncreaseCarSpeedLoop
   1999  fa15							;Adds speed
   2000  fa15		       18		      CLC
   2001  fa16		       b5 dc		      LDA	AccelerateBuffer,X
   2002  fa18		       79 92 ff 	      ADC	CarIdToAccelerateSpeed,Y
   2003  fa1b		       95 dc		      STA	AccelerateBuffer,X
   2004  fa1d		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2005  fa1f		       f6 de		      INC	Player0SpeedL,X
   2006  fa21		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2007  fa23		       f6 f0		      INC	Player0SpeedH,X
   2008  fa25				   ContinueIncreaseSpeedLoop
   2009  fa25		       c6 b0		      DEC	Tmp0
   2010  fa27		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2011  fa29				   SkipIncreaseCarSpeed
   2012  fa29
   2013  fa29				   CheckIfAlreadyMaxSpeed
   2014  fa29		       b5 f0		      LDA	Player0SpeedH,X
   2015  fa2b		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2016  fa2d		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2017  fa2f		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2018  fa31							;High bit is max, compare the low
   2019  fa31		       b4 c7		      LDY	CurrentCarId,X
   2020  fa33		       b5 de		      LDA	Player0SpeedL,X
   2021  fa35		       d9 9a ff 	      CMP	CarIdToMaxSpeedL,Y
   2022  fa38		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2023  fa3a							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2024  fa3a
   2025  fa3a				   ResetToMaxSpeed		; Speed is more, or is already max
   2026  fa3a		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2027  fa3c		       95 f0		      STA	Player0SpeedH,X
   2028  fa3e		       b4 c7		      LDY	CurrentCarId,X
   2029  fa40		       b9 9a ff 	      LDA	CarIdToMaxSpeedL,Y
   2030  fa43		       95 de		      STA	Player0SpeedL,X
   2031  fa45				   SkipAccelerate
   2032  fa45		       60		      RTS
   2033  fa46
   2034  fa46							;Tmp0 Traffic Offset to compare with next checkpoint
   2035  fa46				   ProcessPlayerStatus
   2036  fa46				   IsGameOver
   2037  fa46		       b5 b8		      LDA	CountdownTimer,X
   2038  fa48		       15 de		      ORA	Player0SpeedL,X
   2039  fa4a		       15 f0		      ORA	Player0SpeedH,X
   2040  fa4c		       d0 0c		      BNE	IsCheckpoint
   2041  fa4e		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2042  fa50		       95 cb		      STA	ScoreFontColorHoldChange,X
   2043  fa52		       bd b7 fc 	      LDA	PlayerToScoreOverColor,X
   2044  fa55		       95 c9		      STA	ScoreFontColor,X
   2045  fa57		       4c 8e fa 	      JMP	SkipIsTimeOver
   2046  fa5a
   2047  fa5a				   IsCheckpoint
   2048  fa5a		       b5 cd		      LDA	NextCheckpoint,X
   2049  fa5c		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2050  fa5e		       d0 21		      BNE	SkipIsCheckpoint
   2051  fa60		       18		      CLC
   2052  fa61		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2053  fa63		       95 cd		      STA	NextCheckpoint,X
   2054  fa65		       bd b3 fc 	      LDA	PlayerToScoreGoodColor,X
   2055  fa68		       95 c9		      STA	ScoreFontColor,X
   2056  fa6a		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2057  fa6c		       95 cb		      STA	ScoreFontColorHoldChange,X
   2058  fa6e		       b5 b8		      LDA	CountdownTimer,X
   2059  fa70		       18		      CLC
   2060  fa71		       75 c0		      ADC	CheckpointTime,X
   2061  fa73		       95 b8		      STA	CountdownTimer,X
   2062  fa75		       90 04		      BCC	JumpSkipTimeOver
   2063  fa77		       a9 ff		      LDA	#$FF
   2064  fa79		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2065  fa7b				   JumpSkipTimeOver
   2066  fa7b		       20 fc f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2067  fa7e		       4c 8e fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2068  fa81				   SkipIsCheckpoint
   2069  fa81
   2070  fa81				   IsTimeOver
   2071  fa81		       b5 b8		      LDA	CountdownTimer,X
   2072  fa83		       d0 09		      BNE	SkipIsTimeOver
   2073  fa85		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2074  fa87		       95 cb		      STA	ScoreFontColorHoldChange,X
   2075  fa89		       bd b9 fc 	      LDA	PlayerToScoreBadColor,X
   2076  fa8c		       95 c9		      STA	ScoreFontColor,X
   2077  fa8e				   SkipIsTimeOver
   2078  fa8e		       60		      RTS
   2079  fa8f
   2080  fa8f
   2081  fa8f				   EverySecond		; 64 frames to be more precise
   2082  fa8f		       a9 3f		      LDA	#%00111111
   2083  fa91		       25 8c		      AND	FrameCount0
   2084  fa93		       d0 06		      BNE	SkipEverySecondAction
   2085  fa95		       d5 b8		      CMP	CountdownTimer,X
   2086  fa97		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2087  fa99		       d6 b8		      DEC	CountdownTimer,X
   2088  fa9b				   SkipEverySecondAction
   2089  fa9b		       60		      RTS
   2090  fa9c
   2091  fa9c				   CalculateGear
   2092  fa9c		       b5 de		      LDA	Player0SpeedL,X	;3
   2093  fa9e		       29 80		      AND	#%10000000	;2
   2094  faa0		       15 f0		      ORA	Player0SpeedH,X	;3
   2095  faa2		       18		      CLC		;2
   2096  faa3		       2a		      ROL		;2
   2097  faa4		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2098  faa6		       95 d5		      STA	Gear,X
   2099  faa8		       60		      RTS
   2100  faa9
   2101  faa9				   ProcessScoreFontColor
   2102  faa9		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2103  faab		       f0 06		      BEQ	ResetScoreFontColor
   2104  faad		       88		      DEY
   2105  faae		       94 cb		      STY	ScoreFontColorHoldChange,X
   2106  fab0		       4c b8 fa 	      JMP	SkipScoreFontColor
   2107  fab3				   ResetScoreFontColor
   2108  fab3		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2109  fab6		       95 c9		      STA	ScoreFontColor,X
   2110  fab8				   SkipScoreFontColor
   2111  fab8		       60		      RTS
   2112  fab9
   2113  fab9							; X = Player
   2114  fab9							; A Returns result to be sotored in the proper digit
   2115  fab9				   PrintScoreHoldChange
   2116  fab9		       b5 cb		      LDA	ScoreFontColorHoldChange,X
   2117  fabb		       4a		      LSR
   2118  fabc		       4a		      LSR
   2119  fabd		       4a		      LSR
   2120  fabe		       4a		      LSR
   2121  fabf		       a8		      TAY
   2122  fac0		       b9 8c fc 	      LDA	BarLookup,Y
   2123  fac3		       60		      RTS
   2124  fac4
   2125  fac4				   PrintSpeedBar
   2126  fac4		       b5 de		      LDA	Player0SpeedL,X
   2127  fac6		       29 e0		      AND	#%11100000	;2 Discard the last bits
   2128  fac8		       18		      CLC
   2129  fac9		       2a		      ROL		;First goes into carry
   2130  faca		       2a		      ROL
   2131  facb		       2a		      ROL
   2132  facc		       2a		      ROL
   2133  facd		       85 b0		      STA	Tmp0
   2134  facf		       b5 f0		      LDA	Player0SpeedH,X
   2135  fad1		       0a		      ASL
   2136  fad2		       0a		      ASL
   2137  fad3		       0a		      ASL
   2138  fad4		       05 b0		      ORA	Tmp0
   2139  fad6		       a8		      TAY		; 2
   2140  fad7		       b9 9c fc 	      LDA	SpeedToBarLookup,Y	;4
   2141  fada		       85 d2		      STA	ScoreD2	;3
   2142  fadc		       60		      RTS
   2143  fadd
   2144  fadd							; Moved here because of rom space.
   2145  fadd							; The only SBR in constants space
   2146  fadd				   DrawQrCode
   2147  fadd		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2148  fadf		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2149  fae1		       a9 01		      LDA	#%00000001	; Mirror playfield
   2150  fae3		       85 0a		      STA	CTRLPF
   2151  fae5		       20 ba f6 	      JSR	ClearAll	; To be 100 sure!
   2152  fae8		       ad 82 02 	      LDA	SWCHB
   2153  faeb		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2154  faed		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2155  faef		       f0 07		      BEQ	StoreReversedQrCode
   2156  faf1		       86 09		      STX	COLUBK
   2157  faf3		       84 08		      STY	COLUPF
   2158  faf5		       4c fc fa 	      JMP	ContinueQrCode
   2159  faf8				   StoreReversedQrCode
   2160  faf8		       86 08		      STX	COLUPF
   2161  fafa		       84 09		      STY	COLUBK
   2162  fafc
   2163  fafc				   ContinueQrCode
   2164  fafc		       a2 09		      LDX	#9
   2165  fafe		       20 09 f8 	      JSR	HMoveXTimes
   2166  fb01		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2167  fb03		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2168  fb05		       20 e2 f7 	      JSR	WaitForVblankEnd
   2169  fb08		       20 f5 f7 	      JSR	Sleep8Lines
   2170  fb0b		       20 f5 f7 	      JSR	Sleep8Lines
   2171  fb0e		       20 f5 f7 	      JSR	Sleep8Lines
   2172  fb11
   2173  fb11				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2174  fb11		       85 02		      STA	WSYNC
   2175  fb13		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2176  fb16		       85 0e		      STA	PF1	;3
   2177  fb18		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2178  fb1b		       85 0f		      STA	PF2	;3
      0  fb1d					      SLEEP	27	; 
      1  fb1d				   .CYCLES    SET	27
      2  fb1d
      3  fb1d				  -	      IF	.CYCLES < 2
      4  fb1d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb1d				  -	      ERR
      6  fb1d					      ENDIF
      7  fb1d
      8  fb1d					      IF	.CYCLES & 1
      9  fb1d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb1d				  -	      nop	0
     11  fb1d					      ELSE
     12  fb1d		       24 00		      bit	VSYNC
     13  fb1f					      ENDIF
     14  fb1f				   .CYCLES    SET	.CYCLES - 3
     15  fb1f					      ENDIF
     16  fb1f
     17  fb1f					      REPEAT	.CYCLES / 2
     18  fb1f		       ea		      nop
     17  fb1f					      REPEND
     18  fb20		       ea		      nop
     17  fb20					      REPEND
     18  fb21		       ea		      nop
     17  fb21					      REPEND
     18  fb22		       ea		      nop
     17  fb22					      REPEND
     18  fb23		       ea		      nop
     17  fb23					      REPEND
     18  fb24		       ea		      nop
     17  fb24					      REPEND
     18  fb25		       ea		      nop
     17  fb25					      REPEND
     18  fb26		       ea		      nop
     17  fb26					      REPEND
     18  fb27		       ea		      nop
     17  fb27					      REPEND
     18  fb28		       ea		      nop
     17  fb28					      REPEND
     18  fb29		       ea		      nop
     17  fb29					      REPEND
     18  fb2a		       ea		      nop
     19  fb2b					      REPEND
   2180  fb2b		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2181  fb2e		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2182  fb30		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2183  fb33		       85 0e		      STA	PF1	;3
   2184  fb35
   2185  fb35		       ca		      DEX		;2
   2186  fb36		       d0 d9		      BNE	QrCodeLoop	;2
   2187  fb38		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2188  fb3a		       88		      DEY		;2
   2189  fb3b		       10 d4		      BPL	QrCodeLoop	;4
   2190  fb3d
   2191  fb3d				   EndQrCodeLoop
   2192  fb3d		       85 02		      STA	WSYNC	;
   2193  fb3f		       a9 00		      LDA	#0
   2194  fb41		       85 0e		      STA	PF1	;3
   2195  fb43		       85 0f		      STA	PF2	;3
   2196  fb45
   2197  fb45		       20 fc f7 	      JSR	Sleep32Lines
   2198  fb48		       4c 4d f5 	      JMP	PrepareOverscan
   2199  fb4b
   2200  fb4b							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2201  fc00					      org	$FC00
   2202  fc00				   QrCode1
   2203  fc00		       1f		      .byte.b	#%00011111
   2204  fc01		       10		      .byte.b	#%00010000
   2205  fc02		       17		      .byte.b	#%00010111
   2206  fc03		       17		      .byte.b	#%00010111
   2207  fc04		       17		      .byte.b	#%00010111
   2208  fc05		       10		      .byte.b	#%00010000
   2209  fc06		       1f		      .byte.b	#%00011111
   2210  fc07		       00		      .byte.b	#%00000000
   2211  fc08		       17		      .byte.b	#%00010111
   2212  fc09		       10		      .byte.b	#%00010000
   2213  fc0a		       1d		      .byte.b	#%00011101
   2214  fc0b		       16		      .byte.b	#%00010110
   2215  fc0c		       03		      .byte.b	#%00000011
   2216  fc0d		       19		      .byte.b	#%00011001
   2217  fc0e		       13		      .byte.b	#%00010011
   2218  fc0f		       1c		      .byte.b	#%00011100
   2219  fc10		       0b		      .byte.b	#%00001011
   2220  fc11		       00		      .byte.b	#%00000000
   2221  fc12		       1f		      .byte.b	#%00011111
   2222  fc13		       10		      .byte.b	#%00010000
   2223  fc14		       17		      .byte.b	#%00010111
   2224  fc15		       17		      .byte.b	#%00010111
   2225  fc16		       17		      .byte.b	#%00010111
   2226  fc17		       10		      .byte.b	#%00010000
   2227  fc18		       1f		      .byte.b	#%00011111
   2228  fc19
   2229  fc19				   QrCode2
   2230  fc19		       c3		      .byte.b	#%11000011
   2231  fc1a		       9a		      .byte.b	#%10011010
   2232  fc1b		       82		      .byte.b	#%10000010
   2233  fc1c		       da		      .byte.b	#%11011010
   2234  fc1d		       aa		      .byte.b	#%10101010
   2235  fc1e		       ca		      .byte.b	#%11001010
   2236  fc1f		       f3		      .byte.b	#%11110011
   2237  fc20		       78		      .byte.b	#%01111000
   2238  fc21		       df		      .byte.b	#%11011111
   2239  fc22		       fc		      .byte.b	#%11111100
   2240  fc23		       c7		      .byte.b	#%11000111
   2241  fc24		       98		      .byte.b	#%10011000
   2242  fc25		       23		      .byte.b	#%00100011
   2243  fc26		       b9		      .byte.b	#%10111001
   2244  fc27		       d2		      .byte.b	#%11010010
   2245  fc28		       30		      .byte.b	#%00110000
   2246  fc29		       eb		      .byte.b	#%11101011
   2247  fc2a		       28		      .byte.b	#%00101000
   2248  fc2b		       ab		      .byte.b	#%10101011
   2249  fc2c		       72		      .byte.b	#%01110010
   2250  fc2d		       fa		      .byte.b	#%11111010
   2251  fc2e		       7a		      .byte.b	#%01111010
   2252  fc2f		       32		      .byte.b	#%00110010
   2253  fc30		       3a		      .byte.b	#%00111010
   2254  fc31		       63		      .byte.b	#%01100011
   2255  fc32
   2256  fc32				   QrCode3
   2257  fc32		       98		      .byte.b	#%10011000
   2258  fc33		       c3		      .byte.b	#%11000011
   2259  fc34		       39		      .byte.b	#%00111001
   2260  fc35		       34		      .byte.b	#%00110100
   2261  fc36		       ff		      .byte.b	#%11111111
   2262  fc37		       71		      .byte.b	#%01110001
   2263  fc38		       d5		      .byte.b	#%11010101
   2264  fc39		       d1		      .byte.b	#%11010001
   2265  fc3a		       5f		      .byte.b	#%01011111
   2266  fc3b		       26		      .byte.b	#%00100110
   2267  fc3c		       2d		      .byte.b	#%00101101
   2268  fc3d		       e9		      .byte.b	#%11101001
   2269  fc3e		       d6		      .byte.b	#%11010110
   2270  fc3f		       26		      .byte.b	#%00100110
   2271  fc40		       ba		      .byte.b	#%10111010
   2272  fc41		       03		      .byte.b	#%00000011
   2273  fc42		       dd		      .byte.b	#%11011101
   2274  fc43		       e0		      .byte.b	#%11100000
   2275  fc44		       57		      .byte.b	#%01010111
   2276  fc45		       14		      .byte.b	#%00010100
   2277  fc46		       35		      .byte.b	#%00110101
   2278  fc47		       e5		      .byte.b	#%11100101
   2279  fc48		       b5		      .byte.b	#%10110101
   2280  fc49		       d4		      .byte.b	#%11010100
   2281  fc4a		       97		      .byte.b	#%10010111
   2282  fc4b
   2283  fc4b				   QrCode4
   2284  fc4b		       09		      .byte.b	#%00001001
   2285  fc4c		       0e		      .byte.b	#%00001110
   2286  fc4d		       0f		      .byte.b	#%00001111
   2287  fc4e		       0c		      .byte.b	#%00001100
   2288  fc4f		       0c		      .byte.b	#%00001100
   2289  fc50		       08		      .byte.b	#%00001000
   2290  fc51		       08		      .byte.b	#%00001000
   2291  fc52		       06		      .byte.b	#%00000110
   2292  fc53		       06		      .byte.b	#%00000110
   2293  fc54		       0b		      .byte.b	#%00001011
   2294  fc55		       0f		      .byte.b	#%00001111
   2295  fc56		       04		      .byte.b	#%00000100
   2296  fc57		       08		      .byte.b	#%00001000
   2297  fc58		       0f		      .byte.b	#%00001111
   2298  fc59		       09		      .byte.b	#%00001001
   2299  fc5a		       07		      .byte.b	#%00000111
   2300  fc5b		       05		      .byte.b	#%00000101
   2301  fc5c		       00		      .byte.b	#%00000000
   2302  fc5d		       0f		      .byte.b	#%00001111
   2303  fc5e		       08		      .byte.b	#%00001000
   2304  fc5f		       0b		      .byte.b	#%00001011
   2305  fc60		       0b		      .byte.b	#%00001011
   2306  fc61		       0b		      .byte.b	#%00001011
   2307  fc62		       08		      .byte.b	#%00001000
   2308  fc63		       0f		      .byte.b	#%00001111
   2309  fc64
   2310  fc64				   PlayerToUpMask
   2311  fc64		       10		      .byte.b	#%00010000	;
   2312  fc65		       01		      .byte.b	#%00000001	;
   2313  fc66
   2314  fc66				   PlayerToDownMask
   2315  fc66		       20		      .byte.b	#%00100000	;
   2316  fc67		       02		      .byte.b	#%00000010	;
   2317  fc68
   2318  fc68				   PlayerToLeftMask
   2319  fc68		       40		      .byte.b	#%01000000	;
   2320  fc69		       04		      .byte.b	#%00000100	;
   2321  fc6a
   2322  fc6a				   PlayerToRightMask
   2323  fc6a		       80		      .byte.b	#%10000000	;
   2324  fc6b		       08		      .byte.b	#%00001000	;
   2325  fc6c
   2326  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2327  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2328  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2329  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2330  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2331  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2332  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2333  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2334  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2335  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2336  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2337  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2338  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2339  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2340  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2341  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2342  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2343  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2344  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2345  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2346  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2347  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2348  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2349  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2350  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2351  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2352  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2353  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2354  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2355  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2356  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2357  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2358  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2359  fc8c
   2360  fc8c
   2361  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2362  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2363  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2364  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2365  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2366  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2367  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2368  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2369  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2370  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2371  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2372  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2373  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2374  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2375  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2376  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2377  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2378  fc9c
   2379  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2380  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2381  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2382  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2383  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2384  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2385  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2386  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2387  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2388  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2389  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2390  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2391  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2392  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2393  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2394  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2395  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2396  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2397  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2398  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2399  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2400  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2401  fcb1
   2402  fcb1				   PlayerToDefaultColor
   2403  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2404  fcb2		       98		      .byte.b	#PLAYER1_COLOR
   2405  fcb3
   2406  fcb3				   PlayerToScoreGoodColor
   2407  fcb3		       37		      .byte.b	#SCORE_FONT_COLOR_GOOD
   2408  fcb4		       d8		      .byte.b	#OP_SCORE_FONT_COLOR_GOOD
   2409  fcb5
   2410  fcb5				   PlayerToScoreStartColor
   2411  fcb5		       38		      .byte.b	#SCORE_FONT_COLOR_START
   2412  fcb6		       c8		      .byte.b	#OP_SCORE_FONT_COLOR_START
   2413  fcb7
   2414  fcb7				   PlayerToScoreOverColor
   2415  fcb7		       0c		      .byte.b	#SCORE_FONT_COLOR_OVER
   2416  fcb8		       ab		      .byte.b	#OP_SCORE_FONT_COLOR_OVER
   2417  fcb9
   2418  fcb9				   PlayerToScoreBadColor
   2419  fcb9		       44		      .byte.b	#SCORE_FONT_COLOR_BAD
   2420  fcba		       56		      .byte.b	#OP_SCORE_FONT_COLOR_BAD
   2421  fcbb
   2422  fd00					      org	$FD00
   2423  fd00				   Font
   2424  fd00				   C0
   2425  fd00		       e7		      .byte.b	#%11100111	;
   2426  fd01		       a5		      .byte.b	#%10100101	; 
   2427  fd02		       a5		      .byte.b	#%10100101	; 
   2428  fd03		       a5		      .byte.b	#%10100101	; 
   2429  fd04		       e7		      .byte.b	#%11100111	;	
   2430  fd05				   C1
   2431  fd05		       e7		      .byte.b	#%11100111	;
   2432  fd06		       42		      .byte.b	#%01000010	; 
   2433  fd07		       42		      .byte.b	#%01000010	; 
   2434  fd08		       42		      .byte.b	#%01000010	; 
   2435  fd09		       66		      .byte.b	#%01100110	;
   2436  fd0a				   C2
   2437  fd0a		       e7		      .byte.b	#%11100111	;
   2438  fd0b		       24		      .byte.b	#%00100100	; 
   2439  fd0c		       e7		      .byte.b	#%11100111	; 
   2440  fd0d		       81		      .byte.b	#%10000001	; 
   2441  fd0e		       e7		      .byte.b	#%11100111	;
   2442  fd0f				   C3
   2443  fd0f		       e7		      .byte.b	#%11100111	;
   2444  fd10		       81		      .byte.b	#%10000001	; 
   2445  fd11		       e7		      .byte.b	#%11100111	; 
   2446  fd12		       81		      .byte.b	#%10000001	; 
   2447  fd13		       e7		      .byte.b	#%11100111	;
   2448  fd14				   C4
   2449  fd14		       81		      .byte.b	#%10000001	;
   2450  fd15		       81		      .byte.b	#%10000001	; 
   2451  fd16		       e7		      .byte.b	#%11100111	; 
   2452  fd17		       a5		      .byte.b	#%10100101	; 
   2453  fd18		       a5		      .byte.b	#%10100101	;
   2454  fd19				   C5
   2455  fd19		       e7		      .byte.b	#%11100111	;
   2456  fd1a		       81		      .byte.b	#%10000001	; 
   2457  fd1b		       e7		      .byte.b	#%11100111	; 
   2458  fd1c		       24		      .byte.b	#%00100100	; 
   2459  fd1d		       e7		      .byte.b	#%11100111	;
   2460  fd1e				   C6
   2461  fd1e		       e7		      .byte.b	#%11100111	;
   2462  fd1f		       a5		      .byte.b	#%10100101	; 
   2463  fd20		       e7		      .byte.b	#%11100111	; 
   2464  fd21		       24		      .byte.b	#%00100100	; 
   2465  fd22		       e7		      .byte.b	#%11100111	;
   2466  fd23				   C7
   2467  fd23		       81		      .byte.b	#%10000001	;
   2468  fd24		       81		      .byte.b	#%10000001	; 
   2469  fd25		       81		      .byte.b	#%10000001	; 
   2470  fd26		       81		      .byte.b	#%10000001	; 
   2471  fd27		       e7		      .byte.b	#%11100111	;
   2472  fd28				   C8
   2473  fd28		       e7		      .byte.b	#%11100111	;
   2474  fd29		       a5		      .byte.b	#%10100101	; 
   2475  fd2a		       e7		      .byte.b	#%11100111	; 
   2476  fd2b		       a5		      .byte.b	#%10100101	; 
   2477  fd2c		       e7		      .byte.b	#%11100111	;
   2478  fd2d				   C9
   2479  fd2d		       e7		      .byte.b	#%11100111	;
   2480  fd2e		       81		      .byte.b	#%10000001	; 
   2481  fd2f		       e7		      .byte.b	#%11100111	; 
   2482  fd30		       a5		      .byte.b	#%10100101	; 
   2483  fd31		       e7		      .byte.b	#%11100111	;
   2484  fd32				   CA
   2485  fd32		       a5		      .byte.b	#%10100101	;
   2486  fd33		       a5		      .byte.b	#%10100101	; 
   2487  fd34		       e7		      .byte.b	#%11100111	; 
   2488  fd35		       a5		      .byte.b	#%10100101	; 
   2489  fd36		       e7		      .byte.b	#%11100111	;
   2490  fd37				   CB
   2491  fd37		       66		      .byte.b	#%01100110	;
   2492  fd38		       a5		      .byte.b	#%10100101	; 
   2493  fd39		       66		      .byte.b	#%01100110	; 
   2494  fd3a		       a5		      .byte.b	#%10100101	;
   2495  fd3b		       66		      .byte.b	#%01100110	;
   2496  fd3c				   CC
   2497  fd3c		       e7		      .byte.b	#%11100111	;
   2498  fd3d		       24		      .byte.b	#%00100100	; 
   2499  fd3e		       24		      .byte.b	#%00100100	; 
   2500  fd3f		       24		      .byte.b	#%00100100	;
   2501  fd40		       e7		      .byte.b	#%11100111	;
   2502  fd41
   2503  fd41				   CD
   2504  fd41		       66		      .byte.b	#%01100110	;
   2505  fd42		       a5		      .byte.b	#%10100101	; 
   2506  fd43		       a5		      .byte.b	#%10100101	; 
   2507  fd44		       a5		      .byte.b	#%10100101	;
   2508  fd45		       66		      .byte.b	#%01100110	;
   2509  fd46
   2510  fd46				   CE
   2511  fd46		       e7		      .byte.b	#%11100111	;
   2512  fd47		       24		      .byte.b	#%00100100	; 
   2513  fd48		       e7		      .byte.b	#%11100111	; 
   2514  fd49		       24		      .byte.b	#%00100100	; 
   2515  fd4a		       e7		      .byte.b	#%11100111	;
   2516  fd4b
   2517  fd4b				   CF
   2518  fd4b		       24		      .byte.b	#%00100100	;
   2519  fd4c		       24		      .byte.b	#%00100100	; 
   2520  fd4d		       e7		      .byte.b	#%11100111	; 
   2521  fd4e		       24		      .byte.b	#%00100100	; 
   2522  fd4f		       e7		      .byte.b	#%11100111	;
   2523  fd50
   2524  fd50				   CG
   2525  fd50		       c3		      .byte.b	#%11000011	;
   2526  fd51		       a5		      .byte.b	#%10100101	; 
   2527  fd52		       a5		      .byte.b	#%10100101	; 
   2528  fd53		       24		      .byte.b	#%00100100	; 
   2529  fd54		       c3		      .byte.b	#%11000011	;	
   2530  fd55
   2531  fd55				   CH
   2532  fd55		       a5		      .byte.b	#%10100101	;
   2533  fd56		       a5		      .byte.b	#%10100101	; 
   2534  fd57		       e7		      .byte.b	#%11100111	; 
   2535  fd58		       a5		      .byte.b	#%10100101	; 
   2536  fd59		       a5		      .byte.b	#%10100101	;
   2537  fd5a
   2538  fd5a				   CI
   2539  fd5a		       e7		      .byte.b	#%11100111	;
   2540  fd5b		       42		      .byte.b	#%01000010	; 
   2541  fd5c		       42		      .byte.b	#%01000010	; 
   2542  fd5d		       42		      .byte.b	#%01000010	; 
   2543  fd5e		       e7		      .byte.b	#%11100111	;
   2544  fd5f
   2545  fd5f				   CJ
   2546  fd5f		       e7		      .byte.b	#%11100111	;
   2547  fd60		       a5		      .byte.b	#%10100101	; 
   2548  fd61		       81		      .byte.b	#%10000001	; 
   2549  fd62		       81		      .byte.b	#%10000001	; 
   2550  fd63		       81		      .byte.b	#%10000001	;	
   2551  fd64
   2552  fd64				   CK
   2553  fd64		       a5		      .byte.b	#%10100101	;
   2554  fd65		       a5		      .byte.b	#%10100101	; 
   2555  fd66		       66		      .byte.b	#%01100110	; 
   2556  fd67		       a5		      .byte.b	#%10100101	; 
   2557  fd68		       a5		      .byte.b	#%10100101	;
   2558  fd69
   2559  fd69				   CL
   2560  fd69		       e7		      .byte.b	#%11100111	;
   2561  fd6a		       24		      .byte.b	#%00100100	; 
   2562  fd6b		       24		      .byte.b	#%00100100	; 
   2563  fd6c		       24		      .byte.b	#%00100100	; 
   2564  fd6d		       24		      .byte.b	#%00100100	;
   2565  fd6e
   2566  fd6e				   CM
   2567  fd6e		       a5		      .byte.b	#%10100101	;
   2568  fd6f		       a5		      .byte.b	#%10100101	; 
   2569  fd70		       a5		      .byte.b	#%10100101	; 
   2570  fd71		       e7		      .byte.b	#%11100111	; 
   2571  fd72		       a5		      .byte.b	#%10100101	;
   2572  fd73
   2573  fd73				   CN
   2574  fd73		       a5		      .byte.b	#%10100101	;
   2575  fd74		       a5		      .byte.b	#%10100101	; 
   2576  fd75		       a5		      .byte.b	#%10100101	; 
   2577  fd76		       a5		      .byte.b	#%10100101	; 
   2578  fd77		       66		      .byte.b	#%01100110	;	
   2579  fd78
   2580  fd78
   2581  fd78				   CO
   2582  fd78		       42		      .byte.b	#%01000010	;
   2583  fd79		       a5		      .byte.b	#%10100101	; 
   2584  fd7a		       a5		      .byte.b	#%10100101	; 
   2585  fd7b		       a5		      .byte.b	#%10100101	; 
   2586  fd7c		       42		      .byte.b	#%01000010	;	
   2587  fd7d
   2588  fd7d				   CP
   2589  fd7d		       24		      .byte.b	#%00100100	;
   2590  fd7e		       24		      .byte.b	#%00100100	; 
   2591  fd7f		       e7		      .byte.b	#%11100111	; 
   2592  fd80		       a5		      .byte.b	#%10100101	; 
   2593  fd81		       e7		      .byte.b	#%11100111	;
   2594  fd82
   2595  fd82				   CQ
   2596  fd82		       81		      .byte.b	#%10000001	;
   2597  fd83		       e5		      .byte.b	#%11100101	; 
   2598  fd84		       a5		      .byte.b	#%10100101	; 
   2599  fd85		       a5		      .byte.b	#%10100101	; 
   2600  fd86		       e7		      .byte.b	#%11100111	;	
   2601  fd87
   2602  fd87				   CR
   2603  fd87		       a5		      .byte.b	#%10100101	;
   2604  fd88		       a5		      .byte.b	#%10100101	; 
   2605  fd89		       66		      .byte.b	#%01100110	; 
   2606  fd8a		       a5		      .byte.b	#%10100101	; 
   2607  fd8b		       66		      .byte.b	#%01100110	;
   2608  fd8c
   2609  fd8c				   CS
   2610  fd8c		       66		      .byte.b	#%01100110	;
   2611  fd8d		       81		      .byte.b	#%10000001	; 
   2612  fd8e		       42		      .byte.b	#%01000010	; 
   2613  fd8f		       24		      .byte.b	#%00100100	; 
   2614  fd90		       c3		      .byte.b	#%11000011	;
   2615  fd91
   2616  fd91				   CT
   2617  fd91		       42		      .byte.b	#%01000010	;
   2618  fd92		       42		      .byte.b	#%01000010	; 
   2619  fd93		       42		      .byte.b	#%01000010	; 
   2620  fd94		       42		      .byte.b	#%01000010	; 
   2621  fd95		       e7		      .byte.b	#%11100111	;
   2622  fd96
   2623  fd96				   CU
   2624  fd96		       e7		      .byte.b	#%11100111	;
   2625  fd97		       a5		      .byte.b	#%10100101	; 
   2626  fd98		       a5		      .byte.b	#%10100101	; 
   2627  fd99		       a5		      .byte.b	#%10100101	; 
   2628  fd9a		       a5		      .byte.b	#%10100101	;	
   2629  fd9b
   2630  fd9b				   CW
   2631  fd9b		       a5		      .byte.b	#%10100101	;
   2632  fd9c		       e7		      .byte.b	#%11100111	; 
   2633  fd9d		       a5		      .byte.b	#%10100101	; 
   2634  fd9e		       a5		      .byte.b	#%10100101	; 
   2635  fd9f		       a5		      .byte.b	#%10100101	;
   2636  fda0
   2637  fda0				   CY
   2638  fda0		       42		      .byte.b	#%01000010	;
   2639  fda1		       42		      .byte.b	#%01000010	; 
   2640  fda2		       42		      .byte.b	#%01000010	; 
   2641  fda3		       a5		      .byte.b	#%10100101	; 
   2642  fda4		       a5		      .byte.b	#%10100101	;
   2643  fda5
   2644  fda5				   Exclamation
   2645  fda5		       42		      .byte.b	#%01000010	;
   2646  fda6		       00		      .byte.b	#%00000000	; 
   2647  fda7		       42		      .byte.b	#%01000010	; 
   2648  fda8		       42		      .byte.b	#%01000010	; 
   2649  fda9		       42		      .byte.b	#%01000010	;
   2650  fdaa
   2651  fdaa				   Pipe
   2652  fdaa				   Colon
   2653  fdaa		       42		      .byte.b	#%01000010	;
   2654  fdab		       42		      .byte.b	#%01000010	; 
   2655  fdac		       00		      .byte.b	#%00000000	; 
   2656  fdad		       42		      .byte.b	#%01000010	; 
   2657  fdae		       42		      .byte.b	#%01000010	;
   2658  fdaf
   2659  fdaf				   Space
   2660  fdaf				   C0B
   2661  fdaf		       00		      .byte.b	#%00000000	;
   2662  fdb0		       00		      .byte.b	#%00000000	; 
   2663  fdb1		       00		      .byte.b	#%00000000	; 
   2664  fdb2		       00		      .byte.b	#%00000000	; 
   2665  fdb3		       00		      .byte.b	#%00000000	;	
   2666  fdb4				   C1B
   2667  fdb4		       24		      .byte.b	#%00100100	;
   2668  fdb5		       00		      .byte.b	#%00000000	; 
   2669  fdb6		       00		      .byte.b	#%00000000	; 
   2670  fdb7		       00		      .byte.b	#%00000000	; 
   2671  fdb8		       00		      .byte.b	#%00000000	;
   2672  fdb9				   C2B
   2673  fdb9		       66		      .byte.b	#%01100110	;
   2674  fdba		       00		      .byte.b	#%00000000	; 
   2675  fdbb		       00		      .byte.b	#%00000000	; 
   2676  fdbc		       00		      .byte.b	#%00000000	; 
   2677  fdbd		       00		      .byte.b	#%00000000	;
   2678  fdbe				   C3B
   2679  fdbe		       e7		      .byte.b	#%11100111	;
   2680  fdbf		       00		      .byte.b	#%00000000	; 
   2681  fdc0		       00		      .byte.b	#%00000000	; 
   2682  fdc1		       00		      .byte.b	#%00000000	; 
   2683  fdc2		       00		      .byte.b	#%00000000	;
   2684  fdc3				   C4B
   2685  fdc3		       e7		      .byte.b	#%11100111	;
   2686  fdc4		       24		      .byte.b	#%00100100	; 
   2687  fdc5		       00		      .byte.b	#%00000000	; 
   2688  fdc6		       00		      .byte.b	#%00000000	; 
   2689  fdc7		       00		      .byte.b	#%00000000	;
   2690  fdc8				   C5B
   2691  fdc8		       e7		      .byte.b	#%11100111	;
   2692  fdc9		       66		      .byte.b	#%01100110	; 
   2693  fdca		       00		      .byte.b	#%00000000	; 
   2694  fdcb		       00		      .byte.b	#%00000000	; 
   2695  fdcc		       00		      .byte.b	#%00000000	;
   2696  fdcd				   C6B
   2697  fdcd		       e7		      .byte.b	#%11100111	;
   2698  fdce		       e7		      .byte.b	#%11100111	; 
   2699  fdcf		       00		      .byte.b	#%00000000	; 
   2700  fdd0		       00		      .byte.b	#%00000000	; 
   2701  fdd1		       00		      .byte.b	#%00000000	;
   2702  fdd2				   C7B
   2703  fdd2		       e7		      .byte.b	#%11100111	;
   2704  fdd3		       e7		      .byte.b	#%11100111	; 
   2705  fdd4		       24		      .byte.b	#%00100100	; 
   2706  fdd5		       00		      .byte.b	#%00000000	; 
   2707  fdd6		       00		      .byte.b	#%00000000	;
   2708  fdd7				   C8B
   2709  fdd7		       e7		      .byte.b	#%11100111	;
   2710  fdd8		       e7		      .byte.b	#%11100111	; 
   2711  fdd9		       66		      .byte.b	#%01100110	; 
   2712  fdda		       00		      .byte.b	#%00000000	; 
   2713  fddb		       00		      .byte.b	#%00000000	;
   2714  fddc				   C9B
   2715  fddc		       e7		      .byte.b	#%11100111	;
   2716  fddd		       e7		      .byte.b	#%11100111	; 
   2717  fdde		       e7		      .byte.b	#%11100111	; 
   2718  fddf		       00		      .byte.b	#%00000000	; 
   2719  fde0		       00		      .byte.b	#%00000000	;
   2720  fde1				   CAB
   2721  fde1		       e7		      .byte.b	#%11100111	;
   2722  fde2		       e7		      .byte.b	#%11100111	; 
   2723  fde3		       e7		      .byte.b	#%11100111	; 
   2724  fde4		       24		      .byte.b	#%00100100	; 
   2725  fde5		       00		      .byte.b	#%00000000	;
   2726  fde6				   CBB
   2727  fde6		       e7		      .byte.b	#%11100111	;
   2728  fde7		       e7		      .byte.b	#%11100111	; 
   2729  fde8		       e7		      .byte.b	#%11100111	; 
   2730  fde9		       66		      .byte.b	#%01100110	; 
   2731  fdea		       00		      .byte.b	#%00000000	;
   2732  fdeb				   CCB
   2733  fdeb		       e7		      .byte.b	#%11100111	;
   2734  fdec		       e7		      .byte.b	#%11100111	; 
   2735  fded		       e7		      .byte.b	#%11100111	; 
   2736  fdee		       e7		      .byte.b	#%11100111	; 
   2737  fdef		       00		      .byte.b	#%00000000	;
   2738  fdf0
   2739  fdf0				   CDB
   2740  fdf0		       e7		      .byte.b	#%11100111	;
   2741  fdf1		       e7		      .byte.b	#%11100111	; 
   2742  fdf2		       e7		      .byte.b	#%11100111	; 
   2743  fdf3		       e7		      .byte.b	#%11100111	; 
   2744  fdf4		       24		      .byte.b	#%00100100	;
   2745  fdf5
   2746  fdf5				   CEB
   2747  fdf5		       e7		      .byte.b	#%11100111	;
   2748  fdf6		       e7		      .byte.b	#%11100111	; 
   2749  fdf7		       e7		      .byte.b	#%11100111	; 
   2750  fdf8		       e7		      .byte.b	#%11100111	; 
   2751  fdf9		       66		      .byte.b	#%01100110	;
   2752  fdfa
   2753  fdfa				   CFB
   2754  fdfa		       e7		      .byte.b	#%11100111	;
   2755  fdfb		       e7		      .byte.b	#%11100111	; 
   2756  fdfc		       e7		      .byte.b	#%11100111	; 
   2757  fdfd		       e7		      .byte.b	#%11100111	; 
   2758  fdfe		       e7		      .byte.b	#%11100111	;
   2759  fdff
   2760  fe00					      org	$FE00
   2761  fe00				   AesTable
   2762  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2763  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2764  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2765  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2766  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2767  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2768  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2769  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2770  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2771  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2772  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2773  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2774  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2775  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2776  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2777  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2778  ff00
   2779  ff00					      org	$FF00
   2780  ff00				   StaticText		; All static text must be on the same MSB block. 
   2781  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2782  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2783  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2784  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2785  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2786  ff04
   2787  ff04				   HellwayLeftText
   2788  ff04		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2789  ff05		       59		      .byte.b	#<CH + #FONT_OFFSET
   2790  ff06		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2791  ff07		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2792  ff08
   2793  ff08				   HellwayRightText
   2794  ff08		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2795  ff09		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2796  ff0a		       81		      .byte.b	#<CP + #FONT_OFFSET
   2797  ff0b		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2798  ff0c		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2799  ff0d
   2800  ff0d				   OpbText
   2801  ff0d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2802  ff0e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2803  ff0f		       81		      .byte.b	#<CP + #FONT_OFFSET
   2804  ff10		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2805  ff11
   2806  ff11				   YearText
   2807  ff11		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2808  ff12		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2809  ff13		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2810  ff14		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2811  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2812  ff16
   2813  ff16				   GoText
   2814  ff16		       54		      .byte.b	#<CG + #FONT_OFFSET
   2815  ff17		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2816  ff18		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2817  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2818  ff1a
   2819  ff1a				   WinText
   2820  ff1a		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2821  ff1b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2822  ff1c		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2823  ff1d
   2824  ff1d				   LoseText
   2825  ff1d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2826  ff1e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2827  ff1f		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2828  ff20
   2829  ff20				   BuildNumberText
   2830  ff20		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2831  ff21		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2832  ff22		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2833  ff23		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2834  ff24		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2835  ff25
   2836  ff25				   ReadyText
   2837  ff25		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2838  ff26		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2839  ff27		       36		      .byte.b	#<CA + #FONT_OFFSET
   2840  ff28		       45		      .byte.b	#<CD + #FONT_OFFSET
   2841  ff29		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2842  ff2a
   2843  ff2a				   EndStaticText
   2844  ff2a
   2845  ff2a				   EngineSoundType
   2846  ff2a		       02		      .byte.b	#2
   2847  ff2b		       02		      .byte.b	#2
   2848  ff2c		       0e		      .byte.b	#14
   2849  ff2d		       06		      .byte.b	#6
   2850  ff2e		       06		      .byte.b	#6
   2851  ff2f		       0e		      .byte.b	#14
   2852  ff30
   2853  ff30				   EngineBaseFrequence
   2854  ff30		       1f		      .byte.b	#31
   2855  ff31		       15		      .byte.b	#21
   2856  ff32		       14		      .byte.b	#20
   2857  ff33		       1f		      .byte.b	#31
   2858  ff34		       16		      .byte.b	#22
   2859  ff35		       03		      .byte.b	#3
   2860  ff36
   2861  ff36				   CarSprite0		; Upside down, Original Car
   2862  ff36		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2863  ff3e				   CarSprite0NoPadding
   2864  ff3e		       7e		      .byte.b	#%01111110
   2865  ff3f		       24		      .byte.b	#%00100100
   2866  ff40		       bd		      .byte.b	#%10111101
   2867  ff41		       3c		      .byte.b	#%00111100
   2868  ff42		       bd		      .byte.b	#%10111101
   2869  ff43		       3c		      .byte.b	#%00111100
   2870  ff44
   2871  ff44				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2872  ff44		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2873  ff4c				   CarSprite1NoPadding
   2874  ff4c		       bd		      .byte.b	#%10111101
   2875  ff4d		       7e		      .byte.b	#%01111110
   2876  ff4e		       5a		      .byte.b	#%01011010
   2877  ff4f		       66		      .byte.b	#%01100110
   2878  ff50		       bd		      .byte.b	#%10111101
   2879  ff51		       3c		      .byte.b	#%00111100
   2880  ff52
   2881  ff52				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2882  ff52		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2883  ff5a				   CarSprite2NoPadding
   2884  ff5a		       7e		      .byte.b	#%01111110
   2885  ff5b		       a5		      .byte.b	#%10100101
   2886  ff5c		       42		      .byte.b	#%01000010
   2887  ff5d		       42		      .byte.b	#%01000010
   2888  ff5e		       bd		      .byte.b	#%10111101
   2889  ff5f		       7e		      .byte.b	#%01111110
   2890  ff60
   2891  ff60				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2892  ff60		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2893  ff68				   CarSprite3NoPadding
   2894  ff68		       3c		      .byte.b	#%00111100
   2895  ff69		       db		      .byte.b	#%11011011
   2896  ff6a		       db		      .byte.b	#%11011011
   2897  ff6b		       3c		      .byte.b	#%00111100
   2898  ff6c		       5a		      .byte.b	#%01011010
   2899  ff6d		       3c		      .byte.b	#%00111100
   2900  ff6e
   2901  ff6e				   TrafficSpeeds
   2902  ff6e		       00		      .byte.b	#$00	;  Trafic0 L
   2903  ff6f		       00		      .byte.b	#$00	;  Trafic0 H
   2904  ff70		       0a		      .byte.b	#$0A	;  Trafic1 L
   2905  ff71		       01		      .byte.b	#$01	;  Trafic1 H
   2906  ff72		       e6		      .byte.b	#$E6	;  Trafic2 L
   2907  ff73		       00		      .byte.b	#$00	;  Trafic2 H
   2908  ff74		       c2		      .byte.b	#$C2	;  Trafic3 L
   2909  ff75		       00		      .byte.b	#$00	;  Trafic3 H
   2910  ff76		       9e		      .byte.b	#$9E	;  Trafic4 L
   2911  ff77		       00		      .byte.b	#$00	;  Trafic4 H
   2912  ff78				   TrafficSpeedsHighDelta
   2913  ff78		       00		      .byte.b	#$00	;  Trafic0 L
   2914  ff79		       00		      .byte.b	#$00	;  Trafic0 H
   2915  ff7a		       0a		      .byte.b	#$0A	;  Trafic1 L
   2916  ff7b		       01		      .byte.b	#$01	;  Trafic1 H
   2917  ff7c		       c8		      .byte.b	#$C8	;  Trafic2 L
   2918  ff7d		       00		      .byte.b	#$00	;  Trafic2 H
   2919  ff7e		       86		      .byte.b	#$86	;  Trafic3 L
   2920  ff7f		       00		      .byte.b	#$00	;  Trafic3 H
   2921  ff80		       44		      .byte.b	#$44	;  Trafic4 L
   2922  ff81		       00		      .byte.b	#$00	;  Trafic4 H
   2923  ff82
   2924  ff82				   CarIdToSpriteAddressL
   2925  ff82		       36		      .byte.b	#<CarSprite0
   2926  ff83		       44		      .byte.b	#<CarSprite1
   2927  ff84		       52		      .byte.b	#<CarSprite2
   2928  ff85		       60		      .byte.b	#<CarSprite3
   2929  ff86
   2930  ff86				   CarIdToSpriteAddressH
   2931  ff86		       ff		      .byte.b	#>CarSprite0
   2932  ff87		       ff		      .byte.b	#>CarSprite1
   2933  ff88		       ff		      .byte.b	#>CarSprite2
   2934  ff89		       ff		      .byte.b	#>CarSprite3
   2935  ff8a
   2936  ff8a				   EnemyCarIdToSpriteAddressL
   2937  ff8a		       3e		      .byte.b	#<CarSprite0NoPadding
   2938  ff8b		       4c		      .byte.b	#<CarSprite1NoPadding
   2939  ff8c		       5a		      .byte.b	#<CarSprite2NoPadding
   2940  ff8d		       68		      .byte.b	#<CarSprite3NoPadding
   2941  ff8e
   2942  ff8e				   EnemyCarIdToSpriteAddressH
   2943  ff8e		       ff		      .byte.b	#>CarSprite0NoPadding
   2944  ff8f		       ff		      .byte.b	#>CarSprite1NoPadding
   2945  ff90		       ff		      .byte.b	#>CarSprite2NoPadding
   2946  ff91		       ff		      .byte.b	#>CarSprite3NoPadding
   2947  ff92
   2948  ff92				   CarIdToAccelerateSpeed
   2949  ff92		       80		      .byte.b	#128
   2950  ff93		       c0		      .byte.b	#192
   2951  ff94		       60		      .byte.b	#96
   2952  ff95		       c0		      .byte.b	#192
   2953  ff96
   2954  ff96				   CarIdToTimeoverBreakInterval 		; Glide
   2955  ff96		       03		      .byte.b	#%00000011	;Every 4 frames
   2956  ff97		       03		      .byte.b	#%00000011	;Every 4 frames
   2957  ff98		       0f		      .byte.b	#%00001111	;Every 16 frames
   2958  ff99		       03		      .byte.b	#%00000011	;Every 4 frames
   2959  ff9a
   2960  ff9a				   CarIdToMaxSpeedL
   2961  ff9a		       80		      .byte.b	#$80
   2962  ff9b		       00		      .byte.b	#$00	; One less gear
   2963  ff9c		       80		      .byte.b	#$80
   2964  ff9d		       80		      .byte.b	#$80
   2965  ff9e
   2966  ff9e				   CarIdToMaxGear
   2967  ff9e		       05		      .byte.b	#5
   2968  ff9f		       04		      .byte.b	#4	; One less gear
   2969  ffa0		       05		      .byte.b	#5
   2970  ffa1		       05		      .byte.b	#5
   2971  ffa2
   2972  ffa2				   GearToBreakSpeedTable
   2973  ffa2		       09		      .byte.b	#(BREAK_SPEED - 1)
   2974  ffa3		       09		      .byte.b	#(BREAK_SPEED - 1)
   2975  ffa4		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2976  ffa5		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2977  ffa6		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2978  ffa7		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2979  ffa8
   2980  ffa8				   TrafficColorTable
   2981  ffa8		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2982  ffa9		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2983  ffaa		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2984  ffab		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2985  ffac
   2986  ffac				   TrafficChanceTable
   2987  ffac		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2988  ffad		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2989  ffae		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2990  ffaf		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2991  ffb0
   2992  ffb0				   TrafficTimeTable
   2993  ffb0		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2994  ffb1		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2995  ffb2		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2996  ffb3		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2997  ffb4		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2998  ffb5
   2999  ffb5
   3000  fffc					      org	$FFFC
   3001  fffc		       00 f0		      .word.w	BeforeStart
   3002  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
