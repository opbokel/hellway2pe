------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 09	   ENGINE_VOLUME =	9
    104  f000
    105  f000		       00 80	   GRP0Cache  =	$80
    106  f000		       00 81	   PF0Cache   =	$81
    107  f000		       00 82	   PF1Cache   =	$82
    108  f000		       00 83	   PF2Cache   =	$83
    109  f000		       00 84	   GRP1Cache  =	$84
    110  f000		       00 85	   ENABLCache =	$85
    111  f000		       00 86	   ENAM0Cache =	$86
    112  f000		       00 87	   ENAM1Cache =	$87
    113  f000
    114  f000		       00 8c	   FrameCount0 =	$8C	;
    115  f000		       00 8d	   FrameCount1 =	$8D	;
    116  f000
    117  f000		       00 8e	   CollisionCounter =	$8E
    118  f000		       00 8f	   OpCollisionCounter =	$8F
    119  f000
    120  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    121  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    122  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    123  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    124  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    125  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    126  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    127  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    128  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    129  f000
    130  f000							;Temporary variables, multiple uses
    131  f000		       00 b0	   Tmp0       =	$B0
    132  f000		       00 b1	   Tmp1       =	$B1
    133  f000		       00 b2	   Tmp2       =	$B2
    134  f000		       00 b3	   Tmp3       =	$B3
    135  f000		       00 b4	   Tmp4       =	$B4
    136  f000		       00 b5	   Tmp5       =	$B5
    137  f000
    138  f000		       00 b6	   Player0X   =	$B6
    139  f000		       00 b7	   Player1X   =	$B7
    140  f000		       00 b8	   CountdownTimer =	$B8
    141  f000		       00 b9	   OpCountdownTimer =	$B9
    142  f000		       00 ba	   Traffic0Msb =	$BA
    143  f000		       00 bb	   OpTraffic0Msb =	$BB
    144  f000		       00 bc	   SwitchDebounceCounter =	$BC
    145  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    146  f000		       00 be	   TrafficChance =	$BE
    147  f000		       00 bf	   OpTrafficChance =	$BF
    148  f000
    149  f000		       00 c0	   CheckpointTime =	$C0
    150  f000		       00 c1	   OpCheckpointTime =	$C1
    151  f000		       00 c2	   TrafficColor =	$C2
    152  f000		       00 c3	   OpTrafficColor =	$C3
    153  f000		       00 c4	   CurrentDifficulty =	$C4
    154  f000		       00 c5	   OpCurrentDifficulty =	$C5
    155  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    156  f000
    157  f000		       00 c7	   CurrentCarId =	$C7
    158  f000		       00 c8	   OpCurrentCarId =	$C8
    159  f000
    160  f000		       00 c9	   ScoreFontColor =	$C9
    161  f000		       00 ca	   OpScoreFontColor =	$CA
    162  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    163  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    164  f000		       00 cd	   NextCheckpoint =	$CD
    165  f000		       00 ce	   OpNextCheckpoint =	$CE
    166  f000		       00 cf	   OpponentLine =	$CF
    167  f000
    168  f000		       00 d0	   ScoreD0    =	$D0
    169  f000		       00 d1	   ScoreD1    =	$D1
    170  f000		       00 d2	   ScoreD2    =	$D2
    171  f000		       00 d3	   ScoreD3    =	$D3
    172  f000		       00 d4	   ScoreD4    =	$D4
    173  f000
    174  f000		       00 d5	   Gear       =	$D5
    175  f000		       00 d6	   OpGear     =	$D6
    176  f000
    177  f000		       00 d7	   CarSpritePointerL =	$D7
    178  f000		       00 d8	   CarSpritePointerH =	$D8
    179  f000
    180  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    181  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    182  f000
    183  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    184  f000
    185  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    186  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    187  f000
    188  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    189  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    190  f000
    191  f000		       00 f0	   Player0SpeedL =	$F0
    192  f000		       00 f1	   Player1SpeedL =	$F1
    193  f000		       00 f2	   Player0SpeedH =	$F2
    194  f000		       00 f3	   Player1SpeedH =	$F3
    195  f000
    196  f000		       00 f4	   IsOpponentInFront =	$F4	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 0a f7 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 8f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 f0		      STA	Player0SpeedL
    257  f059		       85 f1		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   StoreCurrentDifficulty
    274  f071		       86 c4		      STX	CurrentDifficulty
    275  f073		       86 c5		      STX	OpCurrentDifficulty
    276  f075		       a2 00		      LDX	#0
    277  f077		       20 c8 f6 	      JSR	ConfigureDifficulty
    278  f07a		       e8		      INX
    279  f07b		       20 c8 f6 	      JSR	ConfigureDifficulty
    280  f07e
    281  f07e				   SetGameNotRunning
    282  f07e		       a9 00		      LDA	#0
    283  f080		       85 bd		      STA	GameStatus
    284  f082
    285  f082				   ConfigureTimer
    286  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    287  f084		       85 b8		      STA	CountdownTimer	;3
    288  f086		       85 b9		      STA	OpCountdownTimer	;3
    289  f088
    290  f088				   ConfigurePlayer1XPosition
    291  f088		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    292  f08a		       85 b7		      STA	Player1X	;3
    293  f08c
    294  f08c				   ConfigureOpNextCheckpoint
    295  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    296  f08e		       85 ce		      STA	OpNextCheckpoint
    297  f090
    298  f090				   HPositioning 		; Avoid sleep doing needed stuff
    299  f090		       85 02		      STA	WSYNC
    300  f092
    301  f092				   ConfigurePlayer0XPosition
    302  f092		       a9 21		      LDA	#PLAYER_0_X_START	;2
    303  f094		       85 b6		      STA	Player0X	;3
    304  f096
    305  f096				   ConfigureMissileSize
    306  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    307  f098		       85 04		      STA	NUSIZ0	;3
    308  f09a		       85 05		      STA	NUSIZ1	;3
    309  f09c
    310  f09c				   ConfigureNextCheckpoint
    311  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    312  f09e		       85 cd		      STA	NextCheckpoint
    313  f0a0
    314  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    315  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	4	;
      1  f0a2				   .CYCLES    SET	4
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2				  -	      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2				  -	      ELSE
     12  f0a2				  -	      bit	VSYNC
     13  f0a2				  -	      ENDIF
     14  f0a2				  -.CYCLES    SET	.CYCLES - 3
     15  f0a2					      ENDIF
     16  f0a2
     17  f0a2					      REPEAT	.CYCLES / 2
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     19  f0a4					      REPEND
    317  f0a4		       85 12		      STA	RESM0
      0  f0a6					      SLEEP	2	;
      1  f0a6				   .CYCLES    SET	2
      2  f0a6
      3  f0a6				  -	      IF	.CYCLES < 2
      4  f0a6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a6				  -	      ERR
      6  f0a6					      ENDIF
      7  f0a6
      8  f0a6				  -	      IF	.CYCLES & 1
      9  f0a6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a6				  -	      nop	0
     11  f0a6				  -	      ELSE
     12  f0a6				  -	      bit	VSYNC
     13  f0a6				  -	      ENDIF
     14  f0a6				  -.CYCLES    SET	.CYCLES - 3
     15  f0a6					      ENDIF
     16  f0a6
     17  f0a6					      REPEAT	.CYCLES / 2
     18  f0a6		       ea		      nop
     19  f0a7					      REPEND
    319  f0a7		       85 14		      STA	RESBL
      0  f0a9					      SLEEP	2
      1  f0a9				   .CYCLES    SET	2
      2  f0a9
      3  f0a9				  -	      IF	.CYCLES < 2
      4  f0a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a9				  -	      ERR
      6  f0a9					      ENDIF
      7  f0a9
      8  f0a9				  -	      IF	.CYCLES & 1
      9  f0a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a9				  -	      nop	0
     11  f0a9				  -	      ELSE
     12  f0a9				  -	      bit	VSYNC
     13  f0a9				  -	      ENDIF
     14  f0a9				  -.CYCLES    SET	.CYCLES - 3
     15  f0a9					      ENDIF
     16  f0a9
     17  f0a9					      REPEAT	.CYCLES / 2
     18  f0a9		       ea		      nop
     19  f0aa					      REPEND
    321  f0aa		       85 13		      STA	RESM1
      0  f0ac					      SLEEP	3
      1  f0ac				   .CYCLES    SET	3
      2  f0ac
      3  f0ac				  -	      IF	.CYCLES < 2
      4  f0ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ac				  -	      ERR
      6  f0ac					      ENDIF
      7  f0ac
      8  f0ac					      IF	.CYCLES & 1
      9  f0ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ac				  -	      nop	0
     11  f0ac					      ELSE
     12  f0ac		       24 00		      bit	VSYNC
     13  f0ae					      ENDIF
     14  f0ae				   .CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae				  -	      REPEAT	.CYCLES / 2
     18  f0ae				  -	      nop
     19  f0ae					      REPEND
    323  f0ae
    324  f0ae		       a9 e0		      LDA	#$E0
    325  f0b0		       85 24		      STA	HMBL
    326  f0b2		       85 22		      STA	HMM0
    327  f0b4		       85 23		      STA	HMM1
    328  f0b6		       85 02		      STA	WSYNC
    329  f0b8		       85 2a		      STA	HMOVE
    330  f0ba		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    331  f0bc		       85 2b		      STA	HMCLR
      0  f0be					      SLEEP	30
      1  f0be				   .CYCLES    SET	30
      2  f0be
      3  f0be				  -	      IF	.CYCLES < 2
      4  f0be				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0be				  -	      ERR
      6  f0be					      ENDIF
      7  f0be
      8  f0be				  -	      IF	.CYCLES & 1
      9  f0be				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0be				  -	      nop	0
     11  f0be				  -	      ELSE
     12  f0be				  -	      bit	VSYNC
     13  f0be				  -	      ENDIF
     14  f0be				  -.CYCLES    SET	.CYCLES - 3
     15  f0be					      ENDIF
     16  f0be
     17  f0be					      REPEAT	.CYCLES / 2
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     19  f0cd					      REPEND
    333  f0cd		       85 10		      STA	RESP0
    334  f0cf							;SLEEP 5 ; Temporarily move player 1 away.
    335  f0cf		       85 11		      STA	RESP1
    336  f0d1
    337  f0d1				   WaitResetToEnd
    338  f0d1		       ad 84 02 	      LDA	INTIM
    339  f0d4		       d0 fb		      BNE	WaitResetToEnd
    340  f0d6
    341  f0d6				   MainLoop
    342  f0d6		       a9 02		      LDA	#2
    343  f0d8		       85 00		      STA	VSYNC
    344  f0da		       85 02		      STA	WSYNC
    345  f0dc		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    346  f0de				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    347  f0de		       a9 01		      LDA	#%00000001	;3
    348  f0e0		       24 df		      BIT	TextFlickerMode	;2
    349  f0e2		       f0 05		      BEQ	TextSideFrameZero	;2
    350  f0e4		       25 8d		      AND	FrameCount1	;2
    351  f0e6		       4c eb f0 	      JMP	StoreTextSize	;3
    352  f0e9				   TextSideFrameZero
    353  f0e9		       25 8c		      AND	FrameCount0	;2
    354  f0eb				   StoreTextSize
    355  f0eb		       85 de		      STA	TextSide	;3
    356  f0ed
    357  f0ed				   PrepareMaxHMove
      0  f0ed					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0ed				   .CYCLES    SET	18
      2  f0ed
      3  f0ed				  -	      IF	.CYCLES < 2
      4  f0ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ed				  -	      ERR
      6  f0ed					      ENDIF
      7  f0ed
      8  f0ed				  -	      IF	.CYCLES & 1
      9  f0ed				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ed				  -	      nop	0
     11  f0ed				  -	      ELSE
     12  f0ed				  -	      bit	VSYNC
     13  f0ed				  -	      ENDIF
     14  f0ed				  -.CYCLES    SET	.CYCLES - 3
     15  f0ed					      ENDIF
     16  f0ed
     17  f0ed					      REPEAT	.CYCLES / 2
     18  f0ed		       ea		      nop
     17  f0ed					      REPEND
     18  f0ee		       ea		      nop
     17  f0ee					      REPEND
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     17  f0f3					      REPEND
     18  f0f4		       ea		      nop
     17  f0f4					      REPEND
     18  f0f5		       ea		      nop
     19  f0f6					      REPEND
    359  f0f6		       a9 80		      LDA	#$80
    360  f0f8		       85 24		      STA	HMBL
    361  f0fa		       85 22		      STA	HMM0
    362  f0fc		       85 23		      STA	HMM1
    363  f0fe		       85 20		      STA	HMP0
    364  f100		       85 21		      STA	HMP1
    365  f102		       85 02		      STA	WSYNC
    366  f104		       85 2a		      STA	HMOVE	; 1/10			
    367  f106
    368  f106				   ConfigVBlankTimer
    369  f106		       a5 c6		      LDA	GameMode
    370  f108		       c9 10		      CMP	#MAX_GAME_MODE
    371  f10a		       f0 05		      BEQ	SetVblankTimerQrCode
    372  f10c		       a9 29		      LDA	#VBLANK_TIMER
    373  f10e		       4c 13 f1 	      JMP	SetVblankTimer
    374  f111				   SetVblankTimerQrCode
    375  f111		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    376  f113
    377  f113				   SetVblankTimer
    378  f113		       85 02		      STA	WSYNC	;3
    379  f115		       8d 96 02 	      STA	TIM64T	;3	
    380  f118		       a9 00		      LDA	#0	;2
    381  f11a		       85 00		      STA	VSYNC	;3	
    382  f11c
    383  f11c				   RandomizeGame
    384  f11c		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    385  f11e		       d0 2d		      BNE	EndRandomizeGame
    386  f120		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    387  f122		       29 02		      AND	#%00000010
    388  f124		       f0 24		      BEQ	DeterministicGame
    389  f126		       a6 96		      LDX	TrafficOffset1 + 2
    390  f128		       bd 00 fe 	      LDA	AesTable,X
    391  f12b		       45 8c		      EOR	FrameCount0
    392  f12d		       85 96		      STA	TrafficOffset1 + 2
    393  f12f		       85 a6		      STA	OpTrafficOffset1 + 2
    394  f131		       a6 9a		      LDX	TrafficOffset2 + 2
    395  f133		       bd 00 fe 	      LDA	AesTable,X
    396  f136		       45 8c		      EOR	FrameCount0
    397  f138		       85 9a		      STA	TrafficOffset2 + 2
    398  f13a		       85 aa		      STA	OpTrafficOffset2 + 2
    399  f13c		       a6 9e		      LDX	TrafficOffset3 + 2
    400  f13e		       bd 00 fe 	      LDA	AesTable,X
    401  f141		       45 8c		      EOR	FrameCount0
    402  f143		       85 9e		      STA	TrafficOffset3 + 2
    403  f145		       85 ae		      STA	OpTrafficOffset3 + 2
    404  f147		       4c 4d f1 	      JMP	EndRandomizeGame
    405  f14a
    406  f14a				   DeterministicGame
    407  f14a		       20 0a f7 	      JSR	DefaultOffsets
    408  f14d
    409  f14d				   EndRandomizeGame
    410  f14d
    411  f14d
    412  f14d				   CountFrame
    413  f14d		       e6 8c		      INC	FrameCount0	; 5
    414  f14f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    415  f151		       e6 8d		      INC	FrameCount1	; 5 
    416  f153				   SkipIncFC1
    417  f153
    418  f153				   CallDrawQrCode
    419  f153		       a5 c6		      LDA	GameMode
    420  f155		       c9 10		      CMP	#MAX_GAME_MODE
    421  f157		       d0 03		      BNE	TestIsGameRunning
    422  f159		       4c 6b fa 	      JMP	DrawQrCode
    423  f15c
    424  f15c							;Does not update the game if not running
    425  f15c				   TestIsGameRunning
    426  f15c		       a5 bd		      LDA	GameStatus	;3
    427  f15e		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    428  f160				   SelectCarWithDpadCall		; Only do it when game is stoped
    429  f160		       a2 00		      LDX	#0	; Player 0
    430  f162		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    431  f164		       85 b0		      STA	Tmp0
    432  f166		       20 0e f8 	      JSR	SelectCarWithDpad
    433  f169		       e8		      INX		; Player 1
    434  f16a		       20 0e f8 	      JSR	SelectCarWithDpad
    435  f16d
    436  f16d							; Needs to draw the opponent in the correct line even when game stoped  
    437  f16d							; Draeing is a destructive operation
    438  f16d		       20 20 f8 	      JSR	ProcessOpponentLine
    439  f170
    440  f170				   CallConfigureCarSprites
    441  f170		       20 c8 f7 	      JSR	ConfigureCarSprites
    442  f173				   SkipUpdateLogicJump
    443  f173		       4c bc f1 	      JMP	SkipUpdateLogic
    444  f176				   ContinueWithGameLogic
    445  f176
    446  f176				   CallEverySecond		; Timer for now
    447  f176		       a2 00		      LDX	#0
    448  f178		       20 41 fa 	      JSR	EverySecond
    449  f17b		       e8		      INX
    450  f17c		       20 41 fa 	      JSR	EverySecond
    451  f17f
    452  f17f				   ChangeTextFlickerMode
    453  f17f		       a5 bc		      LDA	SwitchDebounceCounter
    454  f181		       d0 0d		      BNE	EndChangeTextFlickerMode
    455  f183		       ad 82 02 	      LDA	SWCHB
    456  f186		       29 02		      AND	#%00000010	;Game select
    457  f188		       d0 06		      BNE	EndChangeTextFlickerMode
    458  f18a		       e6 df		      INC	TextFlickerMode
    459  f18c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    460  f18e		       85 bc		      STA	SwitchDebounceCounter
    461  f190				   EndChangeTextFlickerMode
    462  f190
    463  f190				   CallProcessSpeed
    464  f190		       a2 00		      LDX	#0
    465  f192		       20 58 f9 	      JSR	ProcessSpeed
    466  f195
    467  f195		       e8		      INX		; Player 1
    468  f196		       20 58 f9 	      JSR	ProcessSpeed
    469  f199
    470  f199				   CallUpdateOffsets
    471  f199		       a2 00		      LDX	#0	; Player 0
    472  f19b		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    473  f19d		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    474  f19f		       a5 f0		      LDA	Player0SpeedL
    475  f1a1		       85 b4		      STA	Tmp4
    476  f1a3		       a5 f2		      LDA	Player0SpeedH
    477  f1a5		       85 b5		      STA	Tmp5
    478  f1a7		       20 05 f9 	      JSR	UpdateOffsets
    479  f1aa
    480  f1aa							;LDX Exits the call with correct value.
    481  f1aa		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    482  f1ac		       85 b3		      STA	Tmp3
    483  f1ae		       a5 f1		      LDA	Player1SpeedL
    484  f1b0		       85 b4		      STA	Tmp4
    485  f1b2		       a5 f3		      LDA	Player1SpeedH
    486  f1b4		       85 b5		      STA	Tmp5
    487  f1b6		       20 05 f9 	      JSR	UpdateOffsets
    488  f1b9
    489  f1b9				   CallProcessOpponentLine
    490  f1b9		       20 20 f8 	      JSR	ProcessOpponentLine
    491  f1bc
    492  f1bc				   SkipUpdateLogic		; Continue here if not paused
    493  f1bc
    494  f1bc				   CallStatusUpdateSbr
    495  f1bc		       a2 00		      LDX	#0
    496  f1be		       20 4e fa 	      JSR	CalculateGear
    497  f1c1		       20 5b fa 	      JSR	ProcessScoreFontColor
    498  f1c4		       e8		      INX
    499  f1c5		       20 4e fa 	      JSR	CalculateGear
    500  f1c8		       20 5b fa 	      JSR	ProcessScoreFontColor
    501  f1cb
    502  f1cb				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    503  f1cb		       a5 8c		      LDA	FrameCount0
    504  f1cd		       29 01		      AND	#%00000001
    505  f1cf		       d0 0c		      BNE	CallProcessPlayer1Status
    506  f1d1				   CallProcessPlayer0Status
    507  f1d1		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    508  f1d3		       85 b0		      STA	Tmp0
    509  f1d5		       a2 00		      LDX	#0
    510  f1d7		       20 fb f9 	      JSR	ProcessPlayerStatus
    511  f1da		       4c e6 f1 	      JMP	EndCallProcessPlayerStatus
    512  f1dd				   CallProcessPlayer1Status
    513  f1dd		       a5 a2		      LDA	OpTrafficOffset0 + 2
    514  f1df		       85 b0		      STA	Tmp0
    515  f1e1		       a2 01		      LDX	#1
    516  f1e3		       20 fb f9 	      JSR	ProcessPlayerStatus
    517  f1e6				   EndCallProcessPlayerStatus
    518  f1e6
    519  f1e6				   CallProcessPlayerSprites
    520  f1e6		       20 c8 f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    521  f1e9
    522  f1e9				   CallProcessSound		; We might save cycles by updating one channel per frame.
    523  f1e9		       a2 00		      LDX	#0
    524  f1eb		       a5 92		      LDA	TrafficOffset0 + 2
    525  f1ed		       85 b1		      STA	Tmp1
    526  f1ef		       20 df f5 	      JSR	ProcessSound
    527  f1f2		       e8		      INX		; Player 1
    528  f1f3		       a5 a2		      LDA	OpTrafficOffset0 + 2
    529  f1f5		       85 b1		      STA	Tmp1
    530  f1f7		       20 df f5 	      JSR	ProcessSound
    531  f1fa
    532  f1fa							;Could be done during on vblank to save this comparisson time (before draw score), 
    533  f1fa							;but I am saving vblank cycles for now, in case of 2 players.
    534  f1fa				   ChooseTextSide		; 
    535  f1fa		       a5 de		      LDA	TextSide	;3
    536  f1fc		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    537  f1fe		       4c 93 f2 	      JMP	RightScoreWrite
    538  f201
    539  f201				   LeftScoreWrite
    540  f201		       a5 c9		      LDA	ScoreFontColor
    541  f203		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    542  f205		       f0 62		      BEQ	PrintCheckpoint
    543  f207		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    544  f209		       f0 66		      BEQ	PrintStartGame
    545  f20b		       a5 bd		      LDA	GameStatus
    546  f20d		       f0 6a		      BEQ	PrintHellwayLeft
    547  f20f				   WriteDistance		;Not optimized yet, ugly code.
    548  f20f				   Digit0Timer
    549  f20f		       a5 b8		      LDA	CountdownTimer	;3
    550  f211		       85 b0		      STA	Tmp0
    551  f213		       20 fa f7 	      JSR	BINBCD8
    552  f216							; LDA Tmp1 Also returned in A
    553  f216		       29 0f		      AND	#%00001111	;2
    554  f218		       aa		      TAX		; 2
    555  f219		       bd 6c fc 	      LDA	FontLookup,X	;4 
    556  f21c		       85 d1		      STA	ScoreD1	;3
    557  f21e
    558  f21e				   Digit1Timer
    559  f21e		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    560  f220		       4a		      LSR		; 2
    561  f221		       4a		      LSR		; 2
    562  f222		       4a		      LSR		; 2
    563  f223		       4a		      LSR		; 2
    564  f224		       aa		      TAX		; 2
    565  f225		       bd 6c fc 	      LDA	FontLookup,X	;4
    566  f228		       85 d0		      STA	ScoreD0	;3
    567  f22a
    568  f22a				   SpeedBar
    569  f22a		       a5 f0		      LDA	Player0SpeedL
    570  f22c		       29 e0		      AND	#%11100000	;2 Discard the last bits
    571  f22e		       18		      CLC
    572  f22f		       2a		      ROL		;First goes into carry
    573  f230		       2a		      ROL
    574  f231		       2a		      ROL
    575  f232		       2a		      ROL
    576  f233		       85 b0		      STA	Tmp0
    577  f235		       a5 f2		      LDA	Player0SpeedH
    578  f237		       0a		      ASL
    579  f238		       0a		      ASL
    580  f239		       0a		      ASL
    581  f23a		       05 b0		      ORA	Tmp0
    582  f23c		       aa		      TAX		; 2
    583  f23d		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    584  f240		       85 d2		      STA	ScoreD2	;3
    585  f242
    586  f242				   DistanceCheckpointCount		; Will run all letters in the future
    587  f242		       a5 ba		      LDA	Traffic0Msb
    588  f244		       29 01		      AND	#%00000001
    589  f246		       0a		      ASL
    590  f247		       0a		      ASL
    591  f248		       0a		      ASL
    592  f249		       0a		      ASL
    593  f24a		       85 b0		      STA	Tmp0
    594  f24c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    595  f24e		       29 f0		      AND	#%11110000	;2
    596  f250		       4a		      LSR
    597  f251		       4a		      LSR
    598  f252		       4a		      LSR
    599  f253		       4a		      LSR
    600  f254		       05 b0		      ORA	Tmp0
    601  f256		       aa		      TAX		; 2
    602  f257		       bd 6c fc 	      LDA	FontLookup,X	;4 
    603  f25a		       85 d3		      STA	ScoreD3	;3
    604  f25c
    605  f25c				   DistanceBar		; 16 subdivisions per checkpoint
    606  f25c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    607  f25e		       29 0f		      AND	#%00001111	;2
    608  f260		       aa		      TAX		; 2
    609  f261		       bd 8c fc 	      LDA	BarLookup,X	;4 
    610  f264		       85 d4		      STA	ScoreD4	;3
    611  f266
    612  f266				   EndDrawDistance
    613  f266		       4c 1c f3 	      JMP	RightScoreWriteEnd	;3
    614  f269
    615  f269				   PrintCheckpoint
    616  f269		       a2 00		      LDX	#<CheckpointText
    617  f26b		       20 1f f7 	      JSR	PrintStaticText
    618  f26e		       4c 1c f3 	      JMP	RightScoreWriteEnd	;3
    619  f271				   PrintStartGame
    620  f271		       a2 23		      LDX	#<GoText
    621  f273		       20 1f f7 	      JSR	PrintStaticText
    622  f276		       4c 1c f3 	      JMP	RightScoreWriteEnd	;3
    623  f279
    624  f279				   PrintHellwayLeft
    625  f279		       a5 8d		      LDA	FrameCount1
    626  f27b		       29 01		      AND	#1
    627  f27d		       d0 05		      BNE	PrintCreditsLeft
    628  f27f		       a2 05		      LDX	#<HellwayLeftText
    629  f281		       4c 86 f2 	      JMP	PrintGameMode
    630  f284				   PrintCreditsLeft
    631  f284		       a2 0f		      LDX	#<OpbText
    632  f286
    633  f286				   PrintGameMode
    634  f286		       20 1f f7 	      JSR	PrintStaticText
    635  f289		       a6 c6		      LDX	GameMode
    636  f28b		       bd 6c fc 	      LDA	FontLookup,X	;4 
    637  f28e		       85 d0		      STA	ScoreD0	;3
    638  f290		       4c 1c f3 	      JMP	RightScoreWriteEnd	;3
    639  f293
    640  f293				   RightScoreWrite
    641  f293		       a5 bd		      LDA	GameStatus
    642  f295		       f0 64		      BEQ	PrintHellwayRight
    643  f297		       a5 c9		      LDA	ScoreFontColor
    644  f299		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    645  f29b		       f0 d4		      BEQ	PrintStartGame
    646  f29d		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    647  f29f		       f0 6d		      BEQ	PrintGameOver
    648  f2a1
    649  f2a1				   OpDigit0Timer
    650  f2a1		       a5 b9		      LDA	OpCountdownTimer	;3
    651  f2a3		       85 b0		      STA	Tmp0
    652  f2a5		       20 fa f7 	      JSR	BINBCD8
    653  f2a8							; LDA Tmp1 Also returned in A
    654  f2a8		       29 0f		      AND	#%00001111	;2
    655  f2aa		       aa		      TAX		; 2
    656  f2ab		       bd 6c fc 	      LDA	FontLookup,X	;4 
    657  f2ae		       85 d4		      STA	ScoreD4	;3
    658  f2b0
    659  f2b0				   OpDigit1Timer
    660  f2b0		       a5 b1		      LDA	Tmp1	;3
    661  f2b2		       4a		      LSR		; 2
    662  f2b3		       4a		      LSR		; 2
    663  f2b4		       4a		      LSR		; 2
    664  f2b5		       4a		      LSR		; 2
    665  f2b6		       aa		      TAX		; 2
    666  f2b7		       bd 6c fc 	      LDA	FontLookup,X	;4
    667  f2ba		       85 d3		      STA	ScoreD3	;3
    668  f2bc
    669  f2bc				   OpSpeedBar
    670  f2bc		       a5 f1		      LDA	Player1SpeedL
    671  f2be		       29 e0		      AND	#%11100000	;2 Discard the last bits
    672  f2c0		       18		      CLC
    673  f2c1		       2a		      ROL		;First goes into carry
    674  f2c2		       2a		      ROL
    675  f2c3		       2a		      ROL
    676  f2c4		       2a		      ROL
    677  f2c5		       85 b0		      STA	Tmp0
    678  f2c7		       a5 f3		      LDA	Player1SpeedH
    679  f2c9		       0a		      ASL
    680  f2ca		       0a		      ASL
    681  f2cb		       0a		      ASL
    682  f2cc		       05 b0		      ORA	Tmp0
    683  f2ce		       aa		      TAX		; 2
    684  f2cf		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    685  f2d2		       85 d2		      STA	ScoreD2	;3
    686  f2d4
    687  f2d4				   OpDistanceCheckpointCount
    688  f2d4		       a5 bb		      LDA	OpTraffic0Msb
    689  f2d6		       29 01		      AND	#%00000001
    690  f2d8		       0a		      ASL
    691  f2d9		       0a		      ASL
    692  f2da		       0a		      ASL
    693  f2db		       0a		      ASL
    694  f2dc		       85 b0		      STA	Tmp0
    695  f2de		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    696  f2e0		       29 f0		      AND	#%11110000	;2
    697  f2e2		       4a		      LSR
    698  f2e3		       4a		      LSR
    699  f2e4		       4a		      LSR
    700  f2e5		       4a		      LSR
    701  f2e6		       05 b0		      ORA	Tmp0
    702  f2e8		       aa		      TAX		; 2
    703  f2e9		       bd 6c fc 	      LDA	FontLookup,X	;4 
    704  f2ec		       85 d1		      STA	ScoreD1	;3
    705  f2ee
    706  f2ee				   OpDistanceBar		; 16 subdivisions per checkpoint
    707  f2ee		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    708  f2f0		       29 0f		      AND	#%00001111	;2
    709  f2f2		       aa		      TAX		; 2
    710  f2f3		       bd 8c fc 	      LDA	BarLookup,X	;4 
    711  f2f6		       85 d0		      STA	ScoreD0	;3
    712  f2f8		       4c 1c f3 	      JMP	RightScoreWriteEnd
    713  f2fb
    714  f2fb				   PrintHellwayRight
    715  f2fb		       a5 8d		      LDA	FrameCount1
    716  f2fd		       29 01		      AND	#1
    717  f2ff		       d0 05		      BNE	PrintCreditsRight
    718  f301		       a2 0a		      LDX	#<HellwayRightText
    719  f303		       4c 08 f3 	      JMP	PrintRightIntro
    720  f306				   PrintCreditsRight
    721  f306		       a2 14		      LDX	#<YearText
    722  f308				   PrintRightIntro
    723  f308		       20 1f f7 	      JSR	PrintStaticText
    724  f30b		       4c 1c f3 	      JMP	RightScoreWriteEnd
    725  f30e				   PrintGameOver
    726  f30e		       a5 8c		      LDA	FrameCount0
    727  f310		       30 05		      BMI	PrintOverText
    728  f312		       a2 19		      LDX	#<GameText
    729  f314		       4c 19 f3 	      JMP	StoreGameOverText
    730  f317				   PrintOverText
    731  f317		       a2 1e		      LDX	#<OverText
    732  f319				   StoreGameOverText
    733  f319		       20 1f f7 	      JSR	PrintStaticText
    734  f31c				   RightScoreWriteEnd
    735  f31c
    736  f31c
    737  f31c				   ScoreBackgroundColor
    738  f31c		       a2 00		      LDX	#0
    739  f31e		       ad 82 02 	      LDA	SWCHB
    740  f321		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    741  f323		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    742  f325		       f0 04		      BEQ	BlackAndWhiteScoreBg
    743  f327		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    744  f329		       a2 03		      LDX	#BACKGROUND_COLOR
    745  f32b				   BlackAndWhiteScoreBg
    746  f32b		       85 b2		      STA	Tmp2	; Score Background
    747  f32d		       86 b3		      STX	Tmp3	; Traffic Background
    748  f32f
    749  f32f				   ConfigurePFForScore
    750  f32f							;LDA #SCORE_BACKGROUND_COLOR; Done above
    751  f32f		       85 09		      STA	COLUBK
    752  f331		       20 77 f6 	      JSR	ClearAll
    753  f334		       a9 02		      LDA	#%00000010	; Score mode
    754  f336		       85 0a		      STA	CTRLPF
    755  f338		       a5 de		      LDA	TextSide	;3
    756  f33a		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    757  f33c				   RightScoreOn
    758  f33c		       a5 ca		      LDA	OpScoreFontColor
    759  f33e		       85 07		      STA	COLUP1
    760  f340		       a5 b2		      LDA	Tmp2
    761  f342		       85 06		      STA	COLUP0
    762  f344		       4c 4f f3 	      JMP	CallWaitForVblankEnd
    763  f347				   LeftScoreOn
    764  f347		       a5 c9		      LDA	ScoreFontColor
    765  f349		       85 06		      STA	COLUP0
    766  f34b		       a5 b2		      LDA	Tmp2
    767  f34d		       85 07		      STA	COLUP1
    768  f34f
    769  f34f							; After here we are going to update the screen, No more heavy code
    770  f34f				   CallWaitForVblankEnd
    771  f34f		       20 99 f7 	      JSR	WaitForVblankEnd
    772  f352
    773  f352				   DrawScoreHud
    774  f352		       20 3d f7 	      JSR	PrintScore
    775  f355
    776  f355							; 4 lines to go crazy
    777  f355		       85 02		      STA	WSYNC
    778  f357							;STA HMOVE
    779  f357
    780  f357		       85 02		      STA	WSYNC
    781  f359		       85 2a		      STA	HMOVE
    782  f35b
    783  f35b				   PrepareForTraffic
    784  f35b		       20 8d f6 	      JSR	ClearPF	; 32
    785  f35e
    786  f35e		       85 02		      STA	WSYNC
    787  f360		       85 2a		      STA	HMOVE
    788  f362		       85 02		      STA	WSYNC
    789  f364		       85 2a		      STA	HMOVE
    790  f366
    791  f366		       a9 30		      LDA	#%00110000	; 2 Score mode
    792  f368		       85 0a		      STA	CTRLPF	;3
    793  f36a
    794  f36a		       a5 8c		      LDA	FrameCount0	;3
    795  f36c		       29 01		      AND	#%00000001	;2
    796  f36e		       aa		      TAX		;2
    797  f36f		       b5 c2		      LDA	TrafficColor,X	;4
    798  f371		       85 08		      STA	COLUPF	;3
    799  f373
    800  f373		       a9 96		      LDA	#PLAYER1_COLOR	;2
    801  f375		       85 07		      STA	COLUP1	;3
    802  f377
    803  f377		       a5 c9		      LDA	ScoreFontColor	;3
    804  f379		       85 06		      STA	COLUP0	;3
    805  f37b
    806  f37b		       a5 ca		      LDA	OpScoreFontColor	;3
    807  f37d		       85 07		      STA	COLUP1	;3
    808  f37f
    809  f37f		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    810  f381
      0  f381					      SLEEP	24	; Keep the backround color more time, only needed if still support non dark mode
      1  f381				   .CYCLES    SET	24
      2  f381
      3  f381				  -	      IF	.CYCLES < 2
      4  f381				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f381				  -	      ERR
      6  f381					      ENDIF
      7  f381
      8  f381				  -	      IF	.CYCLES & 1
      9  f381				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f381				  -	      nop	0
     11  f381				  -	      ELSE
     12  f381				  -	      bit	VSYNC
     13  f381				  -	      ENDIF
     14  f381				  -.CYCLES    SET	.CYCLES - 3
     15  f381					      ENDIF
     16  f381
     17  f381					      REPEAT	.CYCLES / 2
     18  f381		       ea		      nop
     17  f381					      REPEND
     18  f382		       ea		      nop
     17  f382					      REPEND
     18  f383		       ea		      nop
     17  f383					      REPEND
     18  f384		       ea		      nop
     17  f384					      REPEND
     18  f385		       ea		      nop
     17  f385					      REPEND
     18  f386		       ea		      nop
     17  f386					      REPEND
     18  f387		       ea		      nop
     17  f387					      REPEND
     18  f388		       ea		      nop
     17  f388					      REPEND
     18  f389		       ea		      nop
     17  f389					      REPEND
     18  f38a		       ea		      nop
     17  f38a					      REPEND
     18  f38b		       ea		      nop
     17  f38b					      REPEND
     18  f38c		       ea		      nop
     19  f38d					      REPEND
    812  f38d
    813  f38d		       a6 b3		      LDX	Tmp3	; Background color.
    814  f38f
    815  f38f		       a5 8c		      LDA	FrameCount0	;Brach flag
    816  f391		       29 01		      AND	#%00000001
    817  f393
    818  f393		       86 09		      STX	COLUBK	;3
    819  f395		       d0 05		      BNE	OpDrawCache	;2
    820  f397		       4c 56 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    821  f39a							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    822  f39a
    823  f39a							;main scanline loop...
    824  f39a				   OpScanLoop
    825  f39a		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    826  f39c
    827  f39c							;Start of next line!			
    828  f39c				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    829  f39c
    830  f39c		       a5 80		      LDA	GRP0Cache	;3
    831  f39e		       85 1b		      STA	GRP0	;3
    832  f3a0
    833  f3a0		       a5 84		      LDA	GRP1Cache	;3
    834  f3a2		       85 1c		      STA	GRP1	;3
    835  f3a4
    836  f3a4		       a5 85		      LDA	ENABLCache	;3
    837  f3a6		       85 1f		      STA	ENABL	;3
    838  f3a8
    839  f3a8		       a5 86		      LDA	ENAM0Cache	;3
    840  f3aa		       85 1d		      STA	ENAM0	;3
    841  f3ac
    842  f3ac		       a5 87		      LDA	ENAM1Cache	;3
    843  f3ae		       85 1e		      STA	ENAM1	;3
    844  f3b0
    845  f3b0		       a5 81		      LDA	PF0Cache	;3
    846  f3b2		       85 0d		      STA	PF0	;3
    847  f3b4
    848  f3b4		       a9 00		      LDA	#0	;2
    849  f3b6							;STA PF0	     ;3
    850  f3b6		       85 80		      STA	GRP0Cache	;3
    851  f3b8		       85 86		      STA	ENAM0Cache	;3
    852  f3ba		       85 85		      STA	ENABLCache	;3
    853  f3bc		       85 87		      STA	ENAM1Cache	; 3
    854  f3be							;STA GRP1Cache ;3
    855  f3be		       85 0d		      STA	PF0	;3
    856  f3c0							;STA PF2	     ;3
    857  f3c0
    858  f3c0		       a5 83		      LDA	PF2Cache	;3
    859  f3c2		       85 0f		      STA	PF2	;3
    860  f3c4
    861  f3c4				   OpDrawCar0
    862  f3c4		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    863  f3c6		       b0 04		      BCS	OpSkipDrawCar	;2
    864  f3c8		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    865  f3ca		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    866  f3cc				   OpSkipDrawCar
    867  f3cc
    868  f3cc							;BEQ DrawTraffic3
    869  f3cc				   OpDrawTraffic1		; 33
    870  f3cc		       98		      TYA		; 2
    871  f3cd		       18		      CLC		; 2 
    872  f3ce		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    873  f3d0		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    874  f3d2		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    875  f3d4		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    876  f3d6		       4c db f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    877  f3d9				   OpEorOffsetWithCarry
    878  f3d9		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    879  f3db				   OpAfterEorOffsetWithCarry		;17
    880  f3db		       aa		      TAX		;2
    881  f3dc		       bd 00 fe 	      LDA	AesTable,X	; 4
    882  f3df		       c5 bf		      CMP	OpTrafficChance	;3
    883  f3e1		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    884  f3e3		       a9 ff		      LDA	#$FF	;2
    885  f3e5		       85 86		      STA	ENAM0Cache	;3
    886  f3e7				   OpFinishDrawTraffic1
    887  f3e7
    888  f3e7				   OpErasePF2
    889  f3e7		       a9 00		      LDA	#0
    890  f3e9		       85 0f		      STA	PF2
    891  f3eb
    892  f3eb				   OpDrawTraffic2		; 33
    893  f3eb		       98		      TYA		; 2
    894  f3ec		       18		      CLC		; 2 
    895  f3ed		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    896  f3ef		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    897  f3f1		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    898  f3f3		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    899  f3f5		       4c fa f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    900  f3f8				   OpEorOffsetWithCarry2
    901  f3f8		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    902  f3fa				   OpAfterEorOffsetWithCarry2		;17
    903  f3fa		       aa		      TAX		;2
    904  f3fb		       bd 00 fe 	      LDA	AesTable,X	; 4
    905  f3fe		       c5 bf		      CMP	OpTrafficChance	;3
    906  f400		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    907  f402		       a9 02		      LDA	#%00000010	;2
    908  f404		       85 85		      STA	ENABLCache	;3
    909  f406				   OpFinishDrawTraffic2
    910  f406
    911  f406							;STA WSYNC ;65 / 137
    912  f406
    913  f406							; LDA Tmp0 ; Flicker this line if drawing car
    914  f406							; BEQ FinishDrawTraffic4
    915  f406				   OpDrawTraffic3		; 33
    916  f406		       98		      TYA		; 2
    917  f407		       18		      CLC		; 2 
    918  f408		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    919  f40a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    920  f40c		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    921  f40e		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    922  f410		       4c 15 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    923  f413				   OpEorOffsetWithCarry3
    924  f413		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    925  f415				   OpAfterEorOffsetWithCarry3		;17
    926  f415		       aa		      TAX		;2
    927  f416		       bd 00 fe 	      LDA	AesTable,X	; 4
    928  f419		       c5 bf		      CMP	OpTrafficChance	;3
    929  f41b		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    930  f41d		       a9 02		      LDA	#%00000010	;2
    931  f41f		       85 87		      STA	ENAM1Cache
    932  f421				   OpFinishDrawTraffic3
    933  f421
    934  f421				   OpDrawOponent		;26
    935  f421		       84 b0		      STY	Tmp0	;3
    936  f423		       a4 cf		      LDY	OpponentLine	;3
    937  f425		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    938  f427		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    939  f429				   OpDrawOpponent
    940  f429		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    941  f42b		       85 80		      STA	GRP0Cache	;3
    942  f42d		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    943  f42f		       a4 b0		      LDY	Tmp0	;3
    944  f431		       4c 45 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    945  f434				   OpSkipDrawOpponent
    946  f434		       c6 cf		      DEC	OpponentLine	;5
    947  f436		       a4 b0		      LDY	Tmp0	;3
    948  f438
    949  f438
    950  f438				   OpDrawTraffic0		; 21 2pe
    951  f438		       98		      TYA		; 2
    952  f439		       18		      CLC		; 2 
    953  f43a		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    954  f43c		       29 08		      AND	#%00001000	;2
    955  f43e		       f0 05		      BEQ	OpHasNoBorderP0	;3
    956  f440				   OpHasBorderP0
    957  f440		       a9 70		      LDA	#%01110000	; 2
    958  f442		       4c 47 f4 	      JMP	OpStoreBorderP0	; 3
    959  f445				   OpHasNoBorderP0
    960  f445		       a9 00		      LDA	#0	; 2
    961  f447				   OpStoreBorderP0
    962  f447		       85 81		      STA	PF0Cache	; 3
    963  f449		       85 83		      STA	PF2Cache	; 3
    964  f44b
    965  f44b				   OpSkipDrawTraffic0
    966  f44b
    967  f44b				   OpWhileScanLoop
    968  f44b		       88		      DEY		;2
    969  f44c		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    970  f44e		       4c 9a f3 	      JMP	OpScanLoop	;3
    971  f451				   OpFinishScanLoop		; 7 209 of 222
    972  f451		       4c 09 f5 	      JMP	FinishScanLoop
    973  f454
    974  f454							;main scanline loop...
    975  f454				   ScanLoop
    976  f454		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    977  f456
    978  f456							;Start of next line!			
    979  f456				   DrawCache		;63 Is the last line going to the top of the next frame?
    980  f456		       a5 81		      LDA	PF0Cache	;3
    981  f458		       85 0d		      STA	PF0	;3
    982  f45a
    983  f45a		       a5 80		      LDA	GRP0Cache	;3
    984  f45c		       85 1b		      STA	GRP0	;3
    985  f45e
    986  f45e		       a5 84		      LDA	GRP1Cache	;3
    987  f460		       85 1c		      STA	GRP1	;3
    988  f462
    989  f462		       a5 86		      LDA	ENAM0Cache	;3
    990  f464		       85 1d		      STA	ENAM0	;3
    991  f466
    992  f466		       a5 85		      LDA	ENABLCache	;3
    993  f468		       85 1f		      STA	ENABL	;3
    994  f46a
    995  f46a		       a5 87		      LDA	ENAM1Cache	;3
    996  f46c		       85 1e		      STA	ENAM1	;3
    997  f46e
    998  f46e		       a5 83		      LDA	PF2Cache	;3
    999  f470		       85 0f		      STA	PF2	;3
   1000  f472
   1001  f472		       a9 00		      LDA	#0	;2
   1002  f474		       85 0d		      STA	PF0	;3
   1003  f476		       85 84		      STA	GRP1Cache	;3
   1004  f478		       85 85		      STA	ENABLCache	;3
   1005  f47a		       85 86		      STA	ENAM0Cache	;3
   1006  f47c		       85 87		      STA	ENAM1Cache	; 3
   1007  f47e							;STA GRP0Cache
   1008  f47e		       85 0f		      STA	PF2	;3
   1009  f480
   1010  f480				   DrawCar0
   1011  f480		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1012  f482		       b0 04		      BCS	SkipDrawCar	;2
   1013  f484		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1014  f486		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1015  f488				   SkipDrawCar
   1016  f488
   1017  f488							;BEQ DrawTraffic3
   1018  f488				   DrawTraffic1 		; 33
   1019  f488		       98		      TYA		; 2
   1020  f489		       18		      CLC		; 2 
   1021  f48a		       65 95		      ADC	TrafficOffset1 + 1	;3
   1022  f48c		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1023  f48e		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1024  f490		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1025  f492		       4c 97 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1026  f495				   EorOffsetWithCarry
   1027  f495		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1028  f497				   AfterEorOffsetWithCarry		;17
   1029  f497		       aa		      TAX		;2
   1030  f498		       bd 00 fe 	      LDA	AesTable,X	; 4
   1031  f49b		       c5 be		      CMP	TrafficChance	;3
   1032  f49d		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1033  f49f		       a9 ff		      LDA	#$FF	;2
   1034  f4a1		       85 86		      STA	ENAM0Cache	;3
   1035  f4a3				   FinishDrawTraffic1
   1036  f4a3
   1037  f4a3				   DrawTraffic2 		; 33
   1038  f4a3		       98		      TYA		; 2
   1039  f4a4		       18		      CLC		; 2 
   1040  f4a5		       65 99		      ADC	TrafficOffset2 + 1	;3
   1041  f4a7		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1042  f4a9		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1043  f4ab		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1044  f4ad		       4c b2 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1045  f4b0				   EorOffsetWithCarry2
   1046  f4b0		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1047  f4b2				   AfterEorOffsetWithCarry2		;17
   1048  f4b2		       aa		      TAX		;2
   1049  f4b3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1050  f4b6		       c5 be		      CMP	TrafficChance	;3
   1051  f4b8		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1052  f4ba		       a9 02		      LDA	#%00000010	;2
   1053  f4bc		       85 85		      STA	ENABLCache	;3
   1054  f4be				   FinishDrawTraffic2
   1055  f4be
   1056  f4be							;STA WSYNC ;65 / 137
   1057  f4be
   1058  f4be							; LDA Tmp0 ; Flicker this line if drawing car
   1059  f4be							; BEQ FinishDrawTraffic4
   1060  f4be				   DrawTraffic3 		; 33
   1061  f4be		       98		      TYA		; 2
   1062  f4bf		       18		      CLC		; 2 
   1063  f4c0		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1064  f4c2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1065  f4c4		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1066  f4c6		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1067  f4c8		       4c cd f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1068  f4cb				   EorOffsetWithCarry3
   1069  f4cb		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1070  f4cd				   AfterEorOffsetWithCarry3		;17
   1071  f4cd		       aa		      TAX		;2
   1072  f4ce		       bd 00 fe 	      LDA	AesTable,X	; 4
   1073  f4d1		       c5 be		      CMP	TrafficChance	;3
   1074  f4d3		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1075  f4d5		       a9 02		      LDA	#%00000010	;2
   1076  f4d7		       85 87		      STA	ENAM1Cache
   1077  f4d9				   FinishDrawTraffic3
   1078  f4d9
   1079  f4d9
   1080  f4d9				   DrawOponent		;26
   1081  f4d9		       84 b0		      STY	Tmp0	;3
   1082  f4db		       a4 cf		      LDY	OpponentLine	;3
   1083  f4dd		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1084  f4df		       b0 0b		      BCS	SkipDrawOpponent	;2
   1085  f4e1				   DrawOpponent
   1086  f4e1		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1087  f4e3		       85 84		      STA	GRP1Cache	;3
   1088  f4e5		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1089  f4e7		       a4 b0		      LDY	Tmp0	;3
   1090  f4e9		       4c fd f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1091  f4ec				   SkipDrawOpponent
   1092  f4ec		       c6 cf		      DEC	OpponentLine	;5
   1093  f4ee		       a4 b0		      LDY	Tmp0	;3
   1094  f4f0
   1095  f4f0				   DrawTraffic0 		; 21 2pe
   1096  f4f0		       98		      TYA		; 2
   1097  f4f1		       18		      CLC		; 2 
   1098  f4f2		       65 91		      ADC	TrafficOffset0 + 1	;3
   1099  f4f4		       29 08		      AND	#%00001000	;2
   1100  f4f6		       f0 05		      BEQ	HasNoBorderP0	;3
   1101  f4f8				   HasBorderP0
   1102  f4f8		       a9 70		      LDA	#%01110000	; 2
   1103  f4fa		       4c ff f4 	      JMP	StoreBorderP0	; 3
   1104  f4fd				   HasNoBorderP0
   1105  f4fd		       a9 00		      LDA	#0	; 2
   1106  f4ff				   StoreBorderP0
   1107  f4ff		       85 81		      STA	PF0Cache	; 3
   1108  f501		       85 83		      STA	PF2Cache	; 3
   1109  f503
   1110  f503				   SkipDrawTraffic0
   1111  f503
   1112  f503				   WhileScanLoop
   1113  f503		       88		      DEY		;2
   1114  f504		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1115  f506		       4c 54 f4 	      JMP	ScanLoop	;3
   1116  f509				   FinishScanLoop		; 7 209 of 222
   1117  f509
   1118  f509		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1119  f50b		       20 9c f6 	      JSR	LoadAll
   1120  f50e		       85 02		      STA	WSYNC	; do stuff!
   1121  f510		       85 02		      STA	WSYNC
   1122  f512		       85 02		      STA	WSYNC
   1123  f514
   1124  f514				   PrepareOverscan
   1125  f514		       a9 02		      LDA	#2
   1126  f516		       85 02		      STA	WSYNC
   1127  f518							;STA HMOVE	; HMOVE 10
   1128  f518		       85 01		      STA	VBLANK
   1129  f51a
   1130  f51a		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1131  f51c		       8d 96 02 	      STA	TIM64T
   1132  f51f
   1133  f51f		       85 2b		      STA	HMCLR	; Before we process car movement
   1134  f521							;Read Fire Button before, will make it start the game for now.
   1135  f521				   StartGame
   1136  f521		       a5 0c		      LDA	INPT4	;3
   1137  f523		       25 0d		      AND	INPT5	;3 player 
   1138  f525		       30 34		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1139  f527		       a5 8c		      LDA	FrameCount0
   1140  f529		       29 01		      AND	#%00000001
   1141  f52b		       d0 2e		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1142  f52d		       a5 bd		      LDA	GameStatus	;3
   1143  f52f		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1144  f531		       d0 28		      BNE	SkipGameStart
   1145  f533		       a5 c6		      LDA	GameMode
   1146  f535		       c9 10		      CMP	#MAX_GAME_MODE
   1147  f537		       d0 0b		      BNE	SetGameRunning
   1148  f539		       a9 00		      LDA	#0
   1149  f53b		       85 c6		      STA	GameMode
   1150  f53d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1151  f53f		       85 bc		      STA	SwitchDebounceCounter
   1152  f541		       4c 5b f5 	      JMP	SkipGameStart
   1153  f544				   SetGameRunning
   1154  f544		       e6 bd		      INC	GameStatus
   1155  f546		       a9 00		      LDA	#0	;
   1156  f548		       85 8c		      STA	FrameCount0
   1157  f54a		       85 8d		      STA	FrameCount1
   1158  f54c		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1159  f54e		       85 c9		      STA	ScoreFontColor
   1160  f550		       85 ca		      STA	OpScoreFontColor
   1161  f552		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1162  f554		       85 cb		      STA	ScoreFontColorHoldChange
   1163  f556		       85 cc		      STA	OpScoreFontColorHoldChange
   1164  f558		       4c cf f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1165  f55b				   SkipGameStart
   1166  f55b
   1167  f55b				   ReadSwitches
   1168  f55b		       a6 bc		      LDX	SwitchDebounceCounter
   1169  f55d		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1170  f55f		       a9 01		      LDA	#%00000001
   1171  f561		       2c 82 02 	      BIT	SWCHB
   1172  f564		       d0 07		      BNE	SkipReset
   1173  f566		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1174  f568		       85 bc		      STA	SwitchDebounceCounter
   1175  f56a		       4c d7 f5 	      JMP	OverScanWaitBeforeReset
   1176  f56d				   SkipReset
   1177  f56d
   1178  f56d				   GameModeSelect
   1179  f56d		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1180  f56f		       d0 22		      BNE	SkipGameSelect
   1181  f571		       a2 00		      LDX	#0
   1182  f573		       20 c8 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1183  f576		       e8		      INX
   1184  f577		       20 c8 f6 	      JSR	ConfigureDifficulty
   1185  f57a				   ContinueGameSelect
   1186  f57a		       a9 02		      LDA	#%00000010
   1187  f57c		       2c 82 02 	      BIT	SWCHB
   1188  f57f		       d0 12		      BNE	SkipGameSelect
   1189  f581		       a6 c6		      LDX	GameMode
   1190  f583		       e0 10		      CPX	#MAX_GAME_MODE
   1191  f585		       f0 04		      BEQ	ResetGameMode
   1192  f587		       e8		      INX
   1193  f588		       4c 8d f5 	      JMP	StoreGameMode
   1194  f58b				   ResetGameMode
   1195  f58b		       a2 00		      LDX	#0
   1196  f58d				   StoreGameMode
   1197  f58d		       86 c6		      STX	GameMode
   1198  f58f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1199  f591		       85 bc		      STA	SwitchDebounceCounter
   1200  f593				   SkipGameSelect
   1201  f593		       4c 98 f5 	      JMP	EndReadSwitches
   1202  f596				   DecrementSwitchDebounceCounter
   1203  f596		       c6 bc		      DEC	SwitchDebounceCounter
   1204  f598				   EndReadSwitches
   1205  f598
   1206  f598				   DoNotTurnBeforeStart
   1207  f598							;STA HMCLR
   1208  f598		       a5 bd		      LDA	GameStatus
   1209  f59a		       f0 33		      BEQ	OverScanWait
   1210  f59c
   1211  f59c							; Last thing, will overrride hmove
   1212  f59c				   CallTestColisionAndMove
   1213  f59c		       a2 00		      LDX	#0	; Player 0
   1214  f59e							; Colision with traffic, each player check different flags,
   1215  f59e		       a5 8c		      LDA	FrameCount0
   1216  f5a0		       29 01		      AND	#%00000001
   1217  f5a2		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1218  f5a4		       20 71 f8 	      JSR	IsOpponentColliding
   1219  f5a7		       05 01		      ORA	CXM1P
   1220  f5a9		       4a		      LSR
   1221  f5aa		       05 00		      ORA	CXM0P
   1222  f5ac		       05 02		      ORA	CXP0FB
   1223  f5ae							; ORA CXPPMM ; Collision between players will have its own rules
   1224  f5ae				   SkipColisionPlayer0		; Should not colide on opponent side.
   1225  f5ae		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1226  f5b0		       85 b2		      STA	Tmp2
   1227  f5b2		       20 85 f8 	      JSR	TestCollisionAndMove
   1228  f5b5
   1229  f5b5		       e8		      INX		; player 1
   1230  f5b6		       a5 8c		      LDA	FrameCount0
   1231  f5b8		       29 01		      AND	#%00000001
   1232  f5ba		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1233  f5bc		       20 71 f8 	      JSR	IsOpponentColliding
   1234  f5bf		       05 00		      ORA	CXM0P
   1235  f5c1		       4a		      LSR
   1236  f5c2		       05 01		      ORA	CXM1P
   1237  f5c4		       05 03		      ORA	CXP1FB
   1238  f5c6				   SkipColisionPlayer1
   1239  f5c6		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1240  f5c8		       85 b2		      STA	Tmp2
   1241  f5ca		       20 85 f8 	      JSR	TestCollisionAndMove
   1242  f5cd
   1243  f5cd				   ClearCollision
   1244  f5cd		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1245  f5cf
   1246  f5cf				   OverScanWait
   1247  f5cf		       ad 84 02 	      LDA	INTIM
   1248  f5d2		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1249  f5d4		       4c d6 f0 	      JMP	MainLoop
   1250  f5d7
   1251  f5d7				   OverScanWaitBeforeReset
   1252  f5d7		       ad 84 02 	      LDA	INTIM
   1253  f5da		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1254  f5dc		       4c 14 f0 	      JMP	Start
   1255  f5df
   1256  f5df				   Subroutines
   1257  f5df
   1258  f5df							;X Player
   1259  f5df							;Tmp1 TrafficOffset 2
   1260  f5df				   ProcessSound
   1261  f5df				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1262  f5df		       b5 c9		      LDA	ScoreFontColor,X	;3
   1263  f5e1		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1264  f5e3		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1265  f5e5		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1266  f5e7		       f0 29		      BEQ	PlayCheckpoint	;2
   1267  f5e9		       b5 8e		      LDA	CollisionCounter,X	;3
   1268  f5eb		       c9 e0		      CMP	#$E0	;2
   1269  f5ed		       b0 14		      BCS	PlayColision	;2
   1270  f5ef		       b5 cd		      LDA	NextCheckpoint,X	;3
   1271  f5f1		       38		      SEC		;2
   1272  f5f2		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1273  f5f4		       c9 02		      CMP	#$02	;2
   1274  f5f6		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1275  f5f8		       b5 b8		      LDA	CountdownTimer,X	; 3
   1276  f5fa		       f0 53		      BEQ	EngineSound	;2
   1277  f5fc		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1278  f5fe		       90 37		      BCC	PlayWarnTimeEnding	;4
   1279  f600		       4c 4f f6 	      JMP	EngineSound	;3
   1280  f603				   PlayColision
   1281  f603		       a9 1f		      LDA	#31
   1282  f605		       95 17		      STA	AUDF0,X
   1283  f607		       a9 08		      LDA	#8
   1284  f609		       95 15		      STA	AUDC0,X
   1285  f60b		       a9 08		      LDA	#8
   1286  f60d		       95 19		      STA	AUDV0,X
   1287  f60f		       4c 76 f6 	      JMP	EndSound
   1288  f612
   1289  f612				   PlayCheckpoint
   1290  f612		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1291  f614		       4a		      LSR		;2
   1292  f615		       4a		      LSR		;2
   1293  f616		       4a		      LSR		;2
   1294  f617		       95 17		      STA	AUDF0,X	;3
   1295  f619		       a9 0c		      LDA	#12	;2
   1296  f61b		       95 15		      STA	AUDC0,X	;3
   1297  f61d		       a9 06		      LDA	#6	;2
   1298  f61f		       95 19		      STA	AUDV0,X	;3
   1299  f621		       4c 76 f6 	      JMP	EndSound	;3
   1300  f624
   1301  f624				   PlayBeforeCheckpoint
   1302  f624		       a5 8c		      LDA	FrameCount0	;3
   1303  f626		       29 1c		      AND	#%00011100	;2
   1304  f628		       09 03		      ORA	#%00000011	;2
   1305  f62a		       95 17		      STA	AUDF0,X	;3
   1306  f62c		       a9 0c		      LDA	#12	;2
   1307  f62e		       95 15		      STA	AUDC0,X	;3
   1308  f630		       a9 03		      LDA	#3	;2
   1309  f632		       95 19		      STA	AUDV0,X	;3
   1310  f634		       4c 76 f6 	      JMP	EndSound	;3
   1311  f637
   1312  f637				   PlayWarnTimeEnding
   1313  f637		       a5 8c		      LDA	FrameCount0	;3
   1314  f639		       29 04		      AND	#%00000100	;2
   1315  f63b		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1316  f63d		       18		      CLC		;2
   1317  f63e		       a9 0a		      LDA	#10	;2
   1318  f640		       75 b8		      ADC	CountdownTimer,X	;2
   1319  f642		       95 17		      STA	AUDF0,X	;3
   1320  f644		       a9 0c		      LDA	#12	;2
   1321  f646		       95 15		      STA	AUDC0,X	;3
   1322  f648		       a9 03		      LDA	#3	;2
   1323  f64a		       95 19		      STA	AUDV0,X	;3
   1324  f64c		       4c 76 f6 	      JMP	EndSound	;3
   1325  f64f
   1326  f64f				   EngineSound		;41
   1327  f64f		       a9 09		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1328  f651		       95 19		      STA	AUDV0,X
   1329  f653		       b5 b8		      LDA	CountdownTimer,X	;3
   1330  f655		       f0 1b		      BEQ	EngineOff	;2
   1331  f657		       b4 d5		      LDY	Gear,X
   1332  f659		       b5 f0		      LDA	Player0SpeedL,X	;3
   1333  f65b		       4a		      LSR		;2
   1334  f65c		       4a		      LSR		;2
   1335  f65d		       4a		      LSR		;2
   1336  f65e		       29 0f		      AND	#%00001111	;2
   1337  f660		       85 b0		      STA	Tmp0	;3
   1338  f662		       b9 49 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1339  f665		       38		      SEC		;2
   1340  f666		       e5 b0		      SBC	Tmp0	;3
   1341  f668		       95 17		      STA	AUDF0,X	;3
   1342  f66a		       b9 43 ff 	      LDA	EngineSoundType,Y	;4
   1343  f66d		       95 15		      STA	AUDC0,X	;3
   1344  f66f		       4c 76 f6 	      JMP	EndEngineSound	;3
   1345  f672				   EngineOff
   1346  f672				   MuteSound
   1347  f672		       a9 00		      LDA	#0
   1348  f674		       95 15		      STA	AUDC0,X
   1349  f676				   EndEngineSound
   1350  f676				   EndSound
   1351  f676		       60		      RTS
   1352  f677
   1353  f677				   ClearAll		; 58
   1354  f677		       a9 00		      LDA	#0	;2
   1355  f679		       85 1b		      STA	GRP0	;3
   1356  f67b		       85 1c		      STA	GRP1	;3
   1357  f67d		       85 1f		      STA	ENABL	;3
   1358  f67f		       85 1d		      STA	ENAM0	;3
   1359  f681		       85 1e		      STA	ENAM1	;3
   1360  f683		       85 80		      STA	GRP0Cache	;3
   1361  f685		       85 84		      STA	GRP1Cache	;3
   1362  f687		       85 85		      STA	ENABLCache	;3
   1363  f689		       85 86		      STA	ENAM0Cache	;3
   1364  f68b		       85 87		      STA	ENAM1Cache	;3
   1365  f68d
   1366  f68d				   ClearPF		; 26
   1367  f68d		       a9 00		      LDA	#0	;2
   1368  f68f				   ClearPFSkipLDA0
   1369  f68f		       85 0d		      STA	PF0	;3
   1370  f691		       85 0e		      STA	PF1	;3
   1371  f693		       85 0f		      STA	PF2	;3	
   1372  f695		       85 81		      STA	PF0Cache	;3
   1373  f697		       85 82		      STA	PF1Cache	;3
   1374  f699		       85 83		      STA	PF2Cache	;3 
   1375  f69b		       60		      RTS		;6
   1376  f69c				   EndClearAll
   1377  f69c
   1378  f69c				   LoadAll		; 48
   1379  f69c		       a5 81		      LDA	PF0Cache	;3
   1380  f69e		       85 0d		      STA	PF0	;3
   1381  f6a0
   1382  f6a0		       a5 82		      LDA	PF1Cache	;3
   1383  f6a2		       85 0e		      STA	PF1	;3
   1384  f6a4
   1385  f6a4		       a5 83		      LDA	PF2Cache	;3
   1386  f6a6		       85 0f		      STA	PF2	;3
   1387  f6a8
   1388  f6a8		       a5 84		      LDA	GRP1Cache	;3
   1389  f6aa		       85 1c		      STA	GRP1	;3
   1390  f6ac
   1391  f6ac		       a5 85		      LDA	ENABLCache	;3
   1392  f6ae		       85 1f		      STA	ENABL	;3
   1393  f6b0
   1394  f6b0		       a5 86		      LDA	ENAM0Cache	;3
   1395  f6b2		       85 1d		      STA	ENAM0	;3
   1396  f6b4
   1397  f6b4		       a5 87		      LDA	ENAM1Cache	;3
   1398  f6b6		       85 1e		      STA	ENAM1	;3
   1399  f6b8
   1400  f6b8		       60		      RTS		;6
   1401  f6b9				   EndLoadAll
   1402  f6b9
   1403  f6b9				   NextDifficulty		;Is a SBR
   1404  f6b9		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1405  f6bb		       29 01		      AND	#%00000001
   1406  f6bd		       d0 24		      BNE	CheckRandomDifficulty
   1407  f6bf
   1408  f6bf		       b5 c4		      LDA	CurrentDifficulty,X
   1409  f6c1		       18		      CLC
   1410  f6c2		       69 01		      ADC	#1
   1411  f6c4		       29 03		      AND	#%00000011	; 0 to 3
   1412  f6c6		       95 c4		      STA	CurrentDifficulty,X
   1413  f6c8
   1414  f6c8				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1415  f6c8		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1416  f6ca		       b9 c5 ff 	      LDA	TrafficChanceTable,Y
   1417  f6cd		       95 be		      STA	TrafficChance,X
   1418  f6cf		       b9 c1 ff 	      LDA	TrafficColorTable,Y
   1419  f6d2		       95 c2		      STA	TrafficColor,X
   1420  f6d4
   1421  f6d4		       a5 c6		      LDA	GameMode	;
   1422  f6d6		       29 01		      AND	#%00000001
   1423  f6d8		       f0 03		      BEQ	UseNextDifficultyTime
   1424  f6da		       4c de f6 	      JMP	StoreDifficultyTime
   1425  f6dd				   UseNextDifficultyTime
   1426  f6dd		       c8		      INY
   1427  f6de				   StoreDifficultyTime
   1428  f6de		       b9 c9 ff 	      LDA	TrafficTimeTable,Y
   1429  f6e1		       95 c0		      STA	CheckpointTime,X
   1430  f6e3
   1431  f6e3				   CheckRandomDifficulty
   1432  f6e3		       a5 c6		      LDA	GameMode
   1433  f6e5		       29 08		      AND	#%00001000	; Random difficulties
   1434  f6e7		       f0 20		      BEQ	ReturnFromNextDifficulty
   1435  f6e9				   RandomDifficulty		; need work to make 2 players compatible
   1436  f6e9		       a5 f4		      LDA	IsOpponentInFront
   1437  f6eb		       30 0c		      BMI	UseOpponentChance
   1438  f6ed		       a4 8c		      LDY	FrameCount0
   1439  f6ef		       b9 00 fe 	      LDA	AesTable,Y
   1440  f6f2							;EOR TrafficChance, no need, lets make life simple
   1441  f6f2		       29 3f		      AND	#%00111111
   1442  f6f4		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1443  f6f6		       4c 09 f7 	      JMP	ReturnFromNextDifficulty
   1444  f6f9				   UseOpponentChance
   1445  f6f9		       8a		      TXA
   1446  f6fa		       49 01		      EOR	#%00000001	; Reverts the player
   1447  f6fc		       aa		      TAX
   1448  f6fd		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1449  f6ff		       85 b3		      STA	Tmp3
   1450  f701		       8a		      TXA
   1451  f702		       49 01		      EOR	#%00000001	; Restors the player
   1452  f704		       aa		      TAX
   1453  f705		       a5 b3		      LDA	Tmp3
   1454  f707		       95 be		      STA	TrafficChance,X
   1455  f709
   1456  f709				   ReturnFromNextDifficulty
   1457  f709		       60		      RTS
   1458  f70a
   1459  f70a				   DefaultOffsets
   1460  f70a		       a9 20		      LDA	#$20
   1461  f70c		       85 96		      STA	TrafficOffset1 + 2
   1462  f70e		       85 a6		      STA	OpTrafficOffset1 + 2
   1463  f710		       a9 40		      LDA	#$40
   1464  f712		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1465  f714		       85 aa		      STA	OpTrafficOffset2 + 2
   1466  f716		       a9 60		      LDA	#$60
   1467  f718		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1468  f71a		       85 ae		      STA	OpTrafficOffset3 + 2
   1469  f71c		       a9 80		      LDA	#$80
   1470  f71e		       60		      RTS
   1471  f71f
   1472  f71f				   PrintStaticText		; Preload X with the offset referent to StaticText
   1473  f71f		       bd 00 ff 	      LDA	StaticText,X
   1474  f722		       85 d0		      STA	ScoreD0
   1475  f724		       e8		      INX
   1476  f725		       bd 00 ff 	      LDA	StaticText,X
   1477  f728		       85 d1		      STA	ScoreD1
   1478  f72a		       e8		      INX
   1479  f72b		       bd 00 ff 	      LDA	StaticText,X
   1480  f72e		       85 d2		      STA	ScoreD2
   1481  f730		       e8		      INX
   1482  f731		       bd 00 ff 	      LDA	StaticText,X
   1483  f734		       85 d3		      STA	ScoreD3
   1484  f736		       e8		      INX
   1485  f737		       bd 00 ff 	      LDA	StaticText,X
   1486  f73a		       85 d4		      STA	ScoreD4
   1487  f73c		       60		      RTS
   1488  f73d
   1489  f73d				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1490  f73d		       a2 00		      LDX	#0
   1491  f73f		       a0 04		      LDY	#FONT_OFFSET
   1492  f741
   1493  f741				   ScoreLoop		; 20 
   1494  f741		       85 02		      STA	WSYNC	;2
   1495  f743		       85 2a		      STA	HMOVE
   1496  f745
   1497  f745		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1498  f747		       85 0d		      STA	PF0	;3
   1499  f749
   1500  f749		       a5 82		      LDA	PF1Cache	;3
   1501  f74b		       85 0e		      STA	PF1	;3
   1502  f74d
   1503  f74d		       a5 83		      LDA	PF2Cache	;3
   1504  f74f		       85 0f		      STA	PF2	;3
   1505  f751
   1506  f751				   DrawScoreD0		; 15
   1507  f751		       a6 d0		      LDX	ScoreD0	; 3
   1508  f753		       bd 00 fd 	      LDA	Font,X	;4
   1509  f756		       85 81		      STA	PF0Cache	;3
   1510  f758		       c6 d0		      DEC	ScoreD0	;5
   1511  f75a
   1512  f75a				   DrawScoreD1		; 23	
   1513  f75a		       a6 d1		      LDX	ScoreD1	; 3
   1514  f75c		       bd 00 fd 	      LDA	Font,X	;4
   1515  f75f		       0a		      ASL		;2
   1516  f760		       0a		      ASL		;2
   1517  f761		       0a		      ASL		;2
   1518  f762		       0a		      ASL		;2
   1519  f763		       85 82		      STA	PF1Cache	;3
   1520  f765		       c6 d1		      DEC	ScoreD1	;5
   1521  f767
   1522  f767				   DrawScoreD2		; 20
   1523  f767		       a6 d2		      LDX	ScoreD2	; 3
   1524  f769		       bd 00 fd 	      LDA	Font,X	;4
   1525  f76c		       29 0f		      AND	#%00001111	;2
   1526  f76e		       05 82		      ORA	PF1Cache	;3
   1527  f770		       85 82		      STA	PF1Cache	;3
   1528  f772		       c6 d2		      DEC	ScoreD2	;5
   1529  f774
   1530  f774				   DrawScoreD3		; 23
   1531  f774		       a6 d3		      LDX	ScoreD3	; 3
   1532  f776		       bd 00 fd 	      LDA	Font,X	;4
   1533  f779		       4a		      LSR		;2
   1534  f77a		       4a		      LSR		;2
   1535  f77b		       4a		      LSR		;2
   1536  f77c		       4a		      LSR		;2
   1537  f77d		       85 83		      STA	PF2Cache	;3
   1538  f77f		       c6 d3		      DEC	ScoreD3	;5
   1539  f781
   1540  f781				   DrawScoreD4		; 20
   1541  f781		       a6 d4		      LDX	ScoreD4	; 3
   1542  f783		       bd 00 fd 	      LDA	Font,X	;4
   1543  f786		       29 f0		      AND	#%11110000	;2
   1544  f788		       05 83		      ORA	PF2Cache	;3
   1545  f78a		       85 83		      STA	PF2Cache	;3
   1546  f78c		       c6 d4		      DEC	ScoreD4	;5
   1547  f78e
   1548  f78e
   1549  f78e		       88		      DEY		;2
   1550  f78f		       10 b0		      BPL	ScoreLoop	;4
   1551  f791
   1552  f791		       85 02		      STA	WSYNC
   1553  f793		       85 2a		      STA	HMOVE
   1554  f795		       20 9c f6 	      JSR	LoadAll
   1555  f798		       60		      RTS		; 6
   1556  f799
   1557  f799				   WaitForVblankEnd
   1558  f799		       ad 84 02 	      LDA	INTIM
   1559  f79c		       d0 fb		      BNE	WaitForVblankEnd
   1560  f79e		       85 02		      STA	WSYNC
   1561  f7a0		       85 01		      STA	VBLANK
   1562  f7a2		       60		      RTS
   1563  f7a3
   1564  f7a3				   Sleep4Lines
   1565  f7a3		       85 02		      STA	WSYNC
   1566  f7a5		       85 02		      STA	WSYNC
   1567  f7a7		       85 02		      STA	WSYNC
   1568  f7a9		       85 02		      STA	WSYNC
   1569  f7ab		       60		      RTS
   1570  f7ac
   1571  f7ac				   Sleep8Lines
   1572  f7ac		       20 a3 f7 	      JSR	Sleep4Lines
   1573  f7af		       20 a3 f7 	      JSR	Sleep4Lines
   1574  f7b2		       60		      RTS
   1575  f7b3
   1576  f7b3				   Sleep32Lines
   1577  f7b3		       20 ac f7 	      JSR	Sleep8Lines
   1578  f7b6		       20 ac f7 	      JSR	Sleep8Lines
   1579  f7b9		       20 ac f7 	      JSR	Sleep8Lines
   1580  f7bc		       20 ac f7 	      JSR	Sleep8Lines
   1581  f7bf		       60		      RTS
   1582  f7c0
   1583  f7c0							;X = number of WSYNC HMOVE to run
   1584  f7c0				   HMoveXTimes
   1585  f7c0		       85 02		      STA	WSYNC	;3
   1586  f7c2		       85 2a		      STA	HMOVE	; 3/10 
   1587  f7c4		       ca		      DEX
   1588  f7c5		       d0 f9		      BNE	HMoveXTimes
   1589  f7c7		       60		      RTS
   1590  f7c8
   1591  f7c8				   ConfigureCarSprites
   1592  f7c8		       a5 8c		      LDA	FrameCount0
   1593  f7ca		       29 01		      AND	#%00000001
   1594  f7cc		       d0 0b		      BNE	LoadForRightScreenSprites
   1595  f7ce				   LoadForLeftScreenSprites
   1596  f7ce		       a5 c7		      LDA	CurrentCarId
   1597  f7d0		       85 b0		      STA	Tmp0
   1598  f7d2		       a5 c8		      LDA	OpCurrentCarId
   1599  f7d4		       85 b1		      STA	Tmp1
   1600  f7d6		       4c e1 f7 	      JMP	LoadCarSpritesFromIds
   1601  f7d9				   LoadForRightScreenSprites
   1602  f7d9		       a5 c7		      LDA	CurrentCarId
   1603  f7db		       85 b1		      STA	Tmp1
   1604  f7dd		       a5 c8		      LDA	OpCurrentCarId
   1605  f7df		       85 b0		      STA	Tmp0
   1606  f7e1
   1607  f7e1				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1608  f7e1		       a4 b0		      LDY	Tmp0
   1609  f7e3		       b9 9b ff 	      LDA	CarIdToSpriteAddressL,Y
   1610  f7e6		       85 d7		      STA	CarSpritePointerL
   1611  f7e8		       b9 9f ff 	      LDA	CarIdToSpriteAddressH,Y
   1612  f7eb		       85 d8		      STA	CarSpritePointerH
   1613  f7ed				   ConfigureOpponentCarSprite
   1614  f7ed		       a4 b1		      LDY	Tmp1
   1615  f7ef		       b9 a3 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1616  f7f2		       85 d9		      STA	EnemyCarSpritePointerL
   1617  f7f4		       b9 a7 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1618  f7f7		       85 da		      STA	EnemyCarSpritePointerH
   1619  f7f9		       60		      RTS
   1620  f7fa
   1621  f7fa							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1622  f7fa							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1623  f7fa							; Tmp0 Binary Number
   1624  f7fa							; Result Returned in Tmp 1 and A
   1625  f7fa				   BINBCD8
   1626  f7fa		       f8		      SED		; Switch to decimal mode
   1627  f7fb		       a9 00		      LDA	#0	; Ensure the result is clear
   1628  f7fd		       85 b1		      STA	Tmp1+0
   1629  f7ff							;STA Tmp1+1
   1630  f7ff		       a2 08		      LDX	#8	; The number of source bits
   1631  f801
   1632  f801				   CNVBIT
   1633  f801		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1634  f803		       a5 b1		      LDA	Tmp1+0	; And add into result
   1635  f805		       65 b1		      ADC	Tmp1+0
   1636  f807		       85 b1		      STA	Tmp1+0
   1637  f809							;Not needed now, 0 to 99 is enought for timer!
   1638  f809							; LDA Tmp1+1	; propagating any carry
   1639  f809							; ADC Tmp1+1
   1640  f809							; STA Tmp1+1
   1641  f809		       ca		      DEX		; And repeat for next bit
   1642  f80a		       d0 f5		      BNE	CNVBIT
   1643  f80c		       d8		      CLD		; Back to binary
   1644  f80d
   1645  f80d		       60		      RTS		; All Done.
   1646  f80e
   1647  f80e							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1648  f80e							;X player 0 or 1
   1649  f80e				   SelectCarWithDpad
   1650  f80e		       a0 03		      LDY	#3
   1651  f810				   SelectCarWithDpadLoop
   1652  f810		       ad 80 02 	      LDA	SWCHA
   1653  f813		       25 b0		      AND	Tmp0
   1654  f815		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1655  f817		       98		      TYA
   1656  f818		       95 c7		      STA	CurrentCarId,X
   1657  f81a				   ContinueSelectCarWithDpadLoop
   1658  f81a		       46 b0		      LSR	Tmp0
   1659  f81c		       88		      DEY
   1660  f81d		       10 f1		      BPL	SelectCarWithDpadLoop
   1661  f81f		       60		      RTS
   1662  f820
   1663  f820				   ProcessOpponentLine
   1664  f820		       a5 8c		      LDA	FrameCount0
   1665  f822		       29 01		      AND	#%00000001
   1666  f824		       38		      SEC
   1667  f825		       d0 15		      BNE	Player0IsOpponent
   1668  f827				   Player1IsOpponent		; Code could be reused?
   1669  f827		       a5 91		      LDA	TrafficOffset0 + 1
   1670  f829		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1671  f82b		       85 b0		      STA	Tmp0
   1672  f82d		       a5 92		      LDA	TrafficOffset0 + 2
   1673  f82f		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1674  f831		       85 b1		      STA	Tmp1
   1675  f833		       a5 ba		      LDA	Traffic0Msb
   1676  f835		       e5 bb		      SBC	OpTraffic0Msb
   1677  f837		       85 b2		      STA	Tmp2
   1678  f839		       4c 4e f8 	      JMP	StoreInFrontPlayer
   1679  f83c				   Player0IsOpponent
   1680  f83c		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1681  f83e		       e5 91		      SBC	TrafficOffset0 + 1
   1682  f840		       85 b0		      STA	Tmp0
   1683  f842		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1684  f844		       e5 92		      SBC	TrafficOffset0 + 2
   1685  f846		       85 b1		      STA	Tmp1
   1686  f848		       a5 bb		      LDA	OpTraffic0Msb
   1687  f84a		       e5 ba		      SBC	Traffic0Msb
   1688  f84c		       85 b2		      STA	Tmp2
   1689  f84e
   1690  f84e				   StoreInFrontPlayer
   1691  f84e		       85 f4		      STA	IsOpponentInFront
   1692  f850
   1693  f850				   AddOffsetToOpponentLine
   1694  f850		       18		      CLC
   1695  f851		       a5 b0		      LDA	Tmp0
   1696  f853		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1697  f855		       85 b0		      STA	Tmp0
   1698  f857		       a5 b1		      LDA	Tmp1
   1699  f859		       69 00		      ADC	#0
   1700  f85b		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1701  f85d		       a5 b2		      LDA	Tmp2
   1702  f85f		       69 00		      ADC	#0
   1703  f861		       05 b1		      ORA	Tmp1
   1704  f863		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1705  f865				   OpponentNotVisible
   1706  f865		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1707  f867		       85 cf		      STA	OpponentLine
   1708  f869		       4c 70 f8 	      JMP	ReturnFromProcessOpponentLine
   1709  f86c				   OpponentVisible
   1710  f86c		       a5 b0		      LDA	Tmp0
   1711  f86e		       85 cf		      STA	OpponentLine
   1712  f870				   ReturnFromProcessOpponentLine
   1713  f870		       60		      RTS
   1714  f871
   1715  f871							; Value stored in A
   1716  f871				   IsOpponentColliding
   1717  f871							;Any non default state, opponent do not colide
   1718  f871		       a5 8e		      LDA	CollisionCounter
   1719  f873		       05 8f		      ORA	OpCollisionCounter
   1720  f875		       05 cb		      ORA	ScoreFontColorHoldChange
   1721  f877		       05 cc		      ORA	OpScoreFontColorHoldChange
   1722  f879		       d0 07		      BNE	OpponentNotColliding
   1723  f87b		       a5 f4		      LDA	IsOpponentInFront
   1724  f87d		       25 07		      AND	CXPPMM
   1725  f87f		       4c 84 f8 	      JMP	ReturnIsOpponentColliding
   1726  f882				   OpponentNotColliding
   1727  f882		       a9 00		      LDA	#0
   1728  f884				   ReturnIsOpponentColliding
   1729  f884		       60		      RTS
   1730  f885
   1731  f885
   1732  f885							; Movement and colision are binded because the car must be moved after duplicate size.
   1733  f885							; Use X for the player
   1734  f885							; Tmp2 Traffic colision result
   1735  f885				   TestCollisionAndMove
   1736  f885							; Until store the movemnt, Y contains the value to be stored.
   1737  f885							; see if player0 colides with the rest
   1738  f885		       a5 b2		      LDA	Tmp2
   1739  f887		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1740  f889		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1741  f88b		       d0 25		      BNE	NoCollision
   1742  f88d		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1743  f88f		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1744  f891		       f0 1f		      BEQ	NoCollision
   1745  f893		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1746  f895		       f0 1b		      BEQ	NoCollision
   1747  f897		       a9 ff		      LDA	#COLLISION_FRAMES
   1748  f899		       95 8e		      STA	CollisionCounter,X
   1749  f89b		       b5 f2		      LDA	Player0SpeedH,X
   1750  f89d		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1751  f89f		       a9 10		      LDA	#COLLISION_SPEED_L
   1752  f8a1		       d5 f0		      CMP	Player0SpeedL,X
   1753  f8a3		       b0 04		      BCS	SkipSetColisionSpeedL
   1754  f8a5				   SetColisionSpeedL
   1755  f8a5		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1756  f8a7		       95 f0		      STA	Player0SpeedL,X
   1757  f8a9				   SkipSetColisionSpeedL
   1758  f8a9		       a9 00		      LDA	#0
   1759  f8ab		       95 f2		      STA	Player0SpeedH,X
   1760  f8ad		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1761  f8af		       4c 02 f9 	      JMP	StoreHMove	; We keep position consistent
   1762  f8b2				   NoCollision
   1763  f8b2
   1764  f8b2				   DecrementCollision
   1765  f8b2		       b5 8e		      LDA	CollisionCounter,X
   1766  f8b4		       f0 06		      BEQ	FinishDecrementCollision
   1767  f8b6		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1768  f8b8		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1769  f8ba		       d6 8e		      DEC	CollisionCounter,X
   1770  f8bc				   FinishDecrementCollision
   1771  f8bc
   1772  f8bc				   ResetPlayerSize
   1773  f8bc		       d0 04		      BNE	FinishResetPlayerSize
   1774  f8be		       a9 30		      LDA	#%00110000
   1775  f8c0		       95 04		      STA	NUSIZ0,X	;
   1776  f8c2				   FinishResetPlayerSize
   1777  f8c2
   1778  f8c2				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1779  f8c2		       b5 8e		      LDA	CollisionCounter,X
   1780  f8c4		       c9 01		      CMP	#1	; Last frame before reset
   1781  f8c6		       d0 05		      BNE	SkipResetPlayerPosition
   1782  f8c8		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1783  f8ca		       4c 02 f9 	      JMP	StoreHMove
   1784  f8cd				   SkipResetPlayerPosition
   1785  f8cd
   1786  f8cd				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1787  f8cd		       b5 c7		      LDA	CurrentCarId,X
   1788  f8cf		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1789  f8d1		       d0 08		      BNE	PrepareReadXAxis
   1790  f8d3		       a0 00		      LDY	#0
   1791  f8d5		       a5 8c		      LDA	FrameCount0
   1792  f8d7		       29 01		      AND	#DRAGSTER_TURN_MASK
   1793  f8d9		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1794  f8db
   1795  f8db				   PrepareReadXAxis
   1796  f8db		       a0 00		      LDY	#0
   1797  f8dd		       b5 b6		      LDA	Player0X,X
   1798  f8df				   BeginReadLeft
   1799  f8df		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1800  f8e1		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1801  f8e4		       2c 80 02 	      BIT	SWCHA
   1802  f8e7		       d0 07		      BNE	SkipMoveLeft
   1803  f8e9		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1804  f8eb		       d6 b6		      DEC	Player0X,X
   1805  f8ed		       4c 02 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1806  f8f0				   SkipMoveLeft
   1807  f8f0				   BeginReadRight
   1808  f8f0		       b5 b6		      LDA	Player0X,X
   1809  f8f2		       c9 2c		      CMP	#PLAYER_MAX_X
   1810  f8f4		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1811  f8f6		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1812  f8f9		       2c 80 02 	      BIT	SWCHA
   1813  f8fc		       d0 04		      BNE	SkipMoveRight
   1814  f8fe		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1815  f900		       f6 b6		      INC	Player0X,X
   1816  f902				   SkipMoveRight
   1817  f902				   StoreHMove
   1818  f902		       94 20		      STY	HMP0,X	;set the move for player 0
   1819  f904
   1820  f904		       60		      RTS
   1821  f905
   1822  f905							; X Traffic offset 4 bits each lane, 4 lanes per player
   1823  f905							; Tmp3 Max X offset
   1824  f905							; Tmp4 Max Player Speed L
   1825  f905							; Tmp5 Max Player Speed H
   1826  f905				   UpdateOffsets
   1827  f905		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1828  f907		       a5 c6		      LDA	GameMode
   1829  f909		       29 04		      AND	#%00000100	; GameModes with high delta
   1830  f90b		       f0 02		      BEQ	UpdateOffsetsLoop
   1831  f90d		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1832  f90f
   1833  f90f				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1834  f90f		       38		      SEC
   1835  f910		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1836  f912		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1837  f915		       85 b0		      STA	Tmp0
   1838  f917		       c8		      INY
   1839  f918		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1840  f91a		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1841  f91d		       85 b1		      STA	Tmp1
   1842  f91f		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1843  f921		       e9 00		      SBC	#0
   1844  f923		       85 b2		      STA	Tmp2
   1845  f925
   1846  f925				   AddsTheResult
   1847  f925		       18		      CLC
   1848  f926		       a5 b0		      LDA	Tmp0
   1849  f928		       75 90		      ADC	TrafficOffset0,X
   1850  f92a		       95 90		      STA	TrafficOffset0,X
   1851  f92c		       e8		      INX
   1852  f92d		       a5 b1		      LDA	Tmp1
   1853  f92f		       75 90		      ADC	TrafficOffset0,X
   1854  f931		       95 90		      STA	TrafficOffset0,X
   1855  f933		       e8		      INX
   1856  f934		       a5 b2		      LDA	Tmp2	; Carry
   1857  f936		       75 90		      ADC	TrafficOffset0,X
   1858  f938		       95 90		      STA	TrafficOffset0,X
   1859  f93a		       90 0f		      BCC	CalculateOffsetCache
   1860  f93c				   CalculatePlayer0Msb
   1861  f93c		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1862  f93e		       d0 05		      BNE	CalculatePlayer1Msb
   1863  f940		       e6 ba		      INC	Traffic0Msb
   1864  f942		       4c 4b f9 	      JMP	CalculateOffsetCache
   1865  f945				   CalculatePlayer1Msb
   1866  f945		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1867  f947		       d0 02		      BNE	CalculateOffsetCache
   1868  f949		       e6 bb		      INC	OpTraffic0Msb
   1869  f94b
   1870  f94b				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1871  f94b		       e8		      INX
   1872  f94c		       38		      SEC
   1873  f94d		       69 00		      ADC	#0	;Increment by one
   1874  f94f		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1875  f951
   1876  f951				   PrepareNextUpdateLoop
   1877  f951		       c8		      INY
   1878  f952		       e8		      INX
   1879  f953		       e4 b3		      CPX	Tmp3	; Max X offset
   1880  f955		       d0 b8		      BNE	UpdateOffsetsLoop
   1881  f957		       60		      RTS
   1882  f958
   1883  f958							; X Player 0 or 1
   1884  f958				   ProcessSpeed
   1885  f958				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1886  f958		       a9 00		      LDA	#0
   1887  f95a		       85 b0		      STA	Tmp0	; Break speed
   1888  f95c		       b5 b8		      LDA	CountdownTimer,X
   1889  f95e		       d0 0d		      BNE	Break
   1890  f960		       b4 c7		      LDY	CurrentCarId,X
   1891  f962		       a5 8c		      LDA	FrameCount0
   1892  f964		       39 af ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1893  f967		       d0 04		      BNE	Break
   1894  f969		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1895  f96b		       85 b0		      STA	Tmp0
   1896  f96d
   1897  f96d				   Break
   1898  f96d		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1899  f970		       2c 80 02 	      BIT	SWCHA
   1900  f973		       d0 12		      BNE	BreakNonZero
   1901  f975		       b5 0c		      LDA	INPT4,X	;3
   1902  f977		       10 0a		      BPL	BreakWhileAccelerating
   1903  f979		       b4 d5		      LDY	Gear,X
   1904  f97b		       b9 bb ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1905  f97e		       85 b0		      STA	Tmp0
   1906  f980		       4c 87 f9 	      JMP	BreakNonZero
   1907  f983				   BreakWhileAccelerating		; Allow better control while breaking.
   1908  f983		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1909  f985		       85 b0		      STA	Tmp0
   1910  f987
   1911  f987				   BreakNonZero
   1912  f987		       a5 b0		      LDA	Tmp0
   1913  f989		       f0 29		      BEQ	SkipBreak
   1914  f98b
   1915  f98b				   DecreaseSpeed
   1916  f98b		       38		      SEC
   1917  f98c		       b5 f0		      LDA	Player0SpeedL,X
   1918  f98e		       e5 b0		      SBC	Tmp0
   1919  f990		       95 f0		      STA	Player0SpeedL,X
   1920  f992		       b5 f2		      LDA	Player0SpeedH,X
   1921  f994		       e9 00		      SBC	#0
   1922  f996		       95 f2		      STA	Player0SpeedH,X
   1923  f998
   1924  f998				   CheckMinSpeed
   1925  f998		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1926  f99a		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1927  f99c		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1928  f99e		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1929  f9a0
   1930  f9a0				   CompareLBreakSpeed
   1931  f9a0		       b5 f0		      LDA	Player0SpeedL,X
   1932  f9a2		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1933  f9a4		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1934  f9a6		       4c b1 f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1935  f9a9
   1936  f9a9				   ResetMinSpeed
   1937  f9a9		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1938  f9ab		       95 f2		      STA	Player0SpeedH,X
   1939  f9ad		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1940  f9af		       95 f0		      STA	Player0SpeedL,X
   1941  f9b1
   1942  f9b1				   SkipAccelerateIfBreaking
   1943  f9b1		       4c fa f9 	      JMP	SkipAccelerate
   1944  f9b4				   SkipBreak
   1945  f9b4
   1946  f9b4				   Acelerates
   1947  f9b4		       b5 b8		      LDA	CountdownTimer,X
   1948  f9b6		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1949  f9b8
   1950  f9b8				   ContinueAccelerateTest
   1951  f9b8		       b5 0c		      LDA	INPT4,X	;3
   1952  f9ba		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1953  f9bc		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1954  f9bf		       2c 80 02 	      BIT	SWCHA
   1955  f9c2		       d0 36		      BNE	SkipAccelerate
   1956  f9c4
   1957  f9c4				   IncreaseCarSpeed
   1958  f9c4		       a9 02		      LDA	#2
   1959  f9c6		       85 b0		      STA	Tmp0	; Loop control
   1960  f9c8		       b4 c7		      LDY	CurrentCarId,X
   1961  f9ca				   IncreaseCarSpeedLoop
   1962  f9ca							;Adds speed
   1963  f9ca		       18		      CLC
   1964  f9cb		       b5 dc		      LDA	AccelerateBuffer,X
   1965  f9cd		       79 ab ff 	      ADC	CarIdToAccelerateSpeed,Y
   1966  f9d0		       95 dc		      STA	AccelerateBuffer,X
   1967  f9d2		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1968  f9d4		       f6 f0		      INC	Player0SpeedL,X
   1969  f9d6		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1970  f9d8		       f6 f2		      INC	Player0SpeedH,X
   1971  f9da				   ContinueIncreaseSpeedLoop
   1972  f9da		       c6 b0		      DEC	Tmp0
   1973  f9dc		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1974  f9de				   SkipIncreaseCarSpeed
   1975  f9de
   1976  f9de				   CheckIfAlreadyMaxSpeed
   1977  f9de		       b5 f2		      LDA	Player0SpeedH,X
   1978  f9e0		       c9 02		      CMP	#CAR_MAX_SPEED_H
   1979  f9e2		       90 16		      BCC	SkipAccelerate	; less than my max speed
   1980  f9e4		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   1981  f9e6							;High bit is max, compare the low
   1982  f9e6		       b4 c7		      LDY	CurrentCarId,X
   1983  f9e8		       b5 f0		      LDA	Player0SpeedL,X
   1984  f9ea		       d9 b3 ff 	      CMP	CarIdToMaxSpeedL,Y
   1985  f9ed		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   1986  f9ef							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   1987  f9ef
   1988  f9ef				   ResetToMaxSpeed		; Speed is more, or is already max
   1989  f9ef		       a9 02		      LDA	#CAR_MAX_SPEED_H
   1990  f9f1		       95 f2		      STA	Player0SpeedH,X
   1991  f9f3		       b4 c7		      LDY	CurrentCarId,X
   1992  f9f5		       b9 b3 ff 	      LDA	CarIdToMaxSpeedL,Y
   1993  f9f8		       95 f0		      STA	Player0SpeedL,X
   1994  f9fa				   SkipAccelerate
   1995  f9fa		       60		      RTS
   1996  f9fb
   1997  f9fb							;Tmp0 Traffic Offset to compare with next checkpoint
   1998  f9fb				   ProcessPlayerStatus
   1999  f9fb				   IsGameOver
   2000  f9fb		       b5 b8		      LDA	CountdownTimer,X
   2001  f9fd		       15 f0		      ORA	Player0SpeedL,X
   2002  f9ff		       15 f2		      ORA	Player0SpeedH,X
   2003  fa01		       d0 0b		      BNE	IsCheckpoint
   2004  fa03		       a9 01		      LDA	#1
   2005  fa05		       95 cb		      STA	ScoreFontColorHoldChange,X
   2006  fa07		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2007  fa09		       95 c9		      STA	ScoreFontColor,X
   2008  fa0b		       4c 40 fa 	      JMP	SkipIsTimeOver
   2009  fa0e
   2010  fa0e				   IsCheckpoint
   2011  fa0e		       b5 cd		      LDA	NextCheckpoint,X
   2012  fa10		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2013  fa12		       d0 20		      BNE	SkipIsCheckpoint
   2014  fa14		       18		      CLC
   2015  fa15		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2016  fa17		       95 cd		      STA	NextCheckpoint,X
   2017  fa19		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2018  fa1b		       95 c9		      STA	ScoreFontColor,X
   2019  fa1d		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2020  fa1f		       95 cb		      STA	ScoreFontColorHoldChange,X
   2021  fa21		       b5 b8		      LDA	CountdownTimer,X
   2022  fa23		       18		      CLC
   2023  fa24		       75 c0		      ADC	CheckpointTime,X
   2024  fa26		       95 b8		      STA	CountdownTimer,X
   2025  fa28		       90 04		      BCC	JumpSkipTimeOver
   2026  fa2a		       a9 ff		      LDA	#$FF
   2027  fa2c		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2028  fa2e				   JumpSkipTimeOver
   2029  fa2e		       20 b9 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2030  fa31		       4c 40 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2031  fa34				   SkipIsCheckpoint
   2032  fa34
   2033  fa34				   IsTimeOver
   2034  fa34		       b5 b8		      LDA	CountdownTimer,X
   2035  fa36		       d0 08		      BNE	SkipIsTimeOver
   2036  fa38		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2037  fa3a		       95 cb		      STA	ScoreFontColorHoldChange,X
   2038  fa3c		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2039  fa3e		       95 c9		      STA	ScoreFontColor,X
   2040  fa40				   SkipIsTimeOver
   2041  fa40		       60		      RTS
   2042  fa41
   2043  fa41
   2044  fa41				   EverySecond		; 64 frames to be more precise
   2045  fa41		       a9 3f		      LDA	#%00111111
   2046  fa43		       25 8c		      AND	FrameCount0
   2047  fa45		       d0 06		      BNE	SkipEverySecondAction
   2048  fa47		       d5 b8		      CMP	CountdownTimer,X
   2049  fa49		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2050  fa4b		       d6 b8		      DEC	CountdownTimer,X
   2051  fa4d				   SkipEverySecondAction
   2052  fa4d		       60		      RTS
   2053  fa4e
   2054  fa4e				   CalculateGear
   2055  fa4e		       b5 f0		      LDA	Player0SpeedL,X	;3
   2056  fa50		       29 80		      AND	#%10000000	;2
   2057  fa52		       15 f2		      ORA	Player0SpeedH,X	;3
   2058  fa54		       18		      CLC		;2
   2059  fa55		       2a		      ROL		;2
   2060  fa56		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2061  fa58		       95 d5		      STA	Gear,X
   2062  fa5a		       60		      RTS
   2063  fa5b
   2064  fa5b				   ProcessScoreFontColor
   2065  fa5b		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2066  fa5d		       f0 06		      BEQ	ResetScoreFontColor
   2067  fa5f		       88		      DEY
   2068  fa60		       94 cb		      STY	ScoreFontColorHoldChange,X
   2069  fa62		       4c 6a fa 	      JMP	SkipScoreFontColor
   2070  fa65				   ResetScoreFontColor
   2071  fa65		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2072  fa68		       95 c9		      STA	ScoreFontColor,X
   2073  fa6a				   SkipScoreFontColor
   2074  fa6a		       60		      RTS
   2075  fa6b
   2076  fa6b							; Moved here because of rom space.
   2077  fa6b							; The only SBR in constants space
   2078  fa6b				   DrawQrCode
   2079  fa6b		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2080  fa6d		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2081  fa6f		       a9 01		      LDA	#%00000001	; Mirror playfield
   2082  fa71		       85 0a		      STA	CTRLPF
   2083  fa73		       20 77 f6 	      JSR	ClearAll	; To be 100 sure!
   2084  fa76		       ad 82 02 	      LDA	SWCHB
   2085  fa79		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2086  fa7b		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2087  fa7d		       f0 07		      BEQ	StoreReversedQrCode
   2088  fa7f		       86 09		      STX	COLUBK
   2089  fa81		       84 08		      STY	COLUPF
   2090  fa83		       4c 8a fa 	      JMP	ContinueQrCode
   2091  fa86				   StoreReversedQrCode
   2092  fa86		       86 08		      STX	COLUPF
   2093  fa88		       84 09		      STY	COLUBK
   2094  fa8a
   2095  fa8a				   ContinueQrCode
   2096  fa8a		       a2 09		      LDX	#9
   2097  fa8c		       20 c0 f7 	      JSR	HMoveXTimes
   2098  fa8f		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2099  fa91		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2100  fa93		       20 99 f7 	      JSR	WaitForVblankEnd
   2101  fa96		       20 ac f7 	      JSR	Sleep8Lines
   2102  fa99		       20 ac f7 	      JSR	Sleep8Lines
   2103  fa9c		       20 ac f7 	      JSR	Sleep8Lines
   2104  fa9f
   2105  fa9f				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2106  fa9f		       85 02		      STA	WSYNC
   2107  faa1		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2108  faa4		       85 0e		      STA	PF1	;3
   2109  faa6		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2110  faa9		       85 0f		      STA	PF2	;3
      0  faab					      SLEEP	27	; 
      1  faab				   .CYCLES    SET	27
      2  faab
      3  faab				  -	      IF	.CYCLES < 2
      4  faab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  faab				  -	      ERR
      6  faab					      ENDIF
      7  faab
      8  faab					      IF	.CYCLES & 1
      9  faab				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  faab				  -	      nop	0
     11  faab					      ELSE
     12  faab		       24 00		      bit	VSYNC
     13  faad					      ENDIF
     14  faad				   .CYCLES    SET	.CYCLES - 3
     15  faad					      ENDIF
     16  faad
     17  faad					      REPEAT	.CYCLES / 2
     18  faad		       ea		      nop
     17  faad					      REPEND
     18  faae		       ea		      nop
     17  faae					      REPEND
     18  faaf		       ea		      nop
     17  faaf					      REPEND
     18  fab0		       ea		      nop
     17  fab0					      REPEND
     18  fab1		       ea		      nop
     17  fab1					      REPEND
     18  fab2		       ea		      nop
     17  fab2					      REPEND
     18  fab3		       ea		      nop
     17  fab3					      REPEND
     18  fab4		       ea		      nop
     17  fab4					      REPEND
     18  fab5		       ea		      nop
     17  fab5					      REPEND
     18  fab6		       ea		      nop
     17  fab6					      REPEND
     18  fab7		       ea		      nop
     17  fab7					      REPEND
     18  fab8		       ea		      nop
     19  fab9					      REPEND
   2112  fab9		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2113  fabc		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2114  fabe		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2115  fac1		       85 0e		      STA	PF1	;3
   2116  fac3
   2117  fac3		       ca		      DEX		;2
   2118  fac4		       d0 d9		      BNE	QrCodeLoop	;2
   2119  fac6		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2120  fac8		       88		      DEY		;2
   2121  fac9		       10 d4		      BPL	QrCodeLoop	;4
   2122  facb
   2123  facb				   EndQrCodeLoop
   2124  facb		       85 02		      STA	WSYNC	;
   2125  facd		       a9 00		      LDA	#0
   2126  facf		       85 0e		      STA	PF1	;3
   2127  fad1		       85 0f		      STA	PF2	;3
   2128  fad3
   2129  fad3		       20 b3 f7 	      JSR	Sleep32Lines
   2130  fad6		       4c 14 f5 	      JMP	PrepareOverscan
   2131  fad9
   2132  fad9							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2133  fc00					      org	$FC00
   2134  fc00				   QrCode1
   2135  fc00		       1f		      .byte.b	#%00011111
   2136  fc01		       10		      .byte.b	#%00010000
   2137  fc02		       17		      .byte.b	#%00010111
   2138  fc03		       17		      .byte.b	#%00010111
   2139  fc04		       17		      .byte.b	#%00010111
   2140  fc05		       10		      .byte.b	#%00010000
   2141  fc06		       1f		      .byte.b	#%00011111
   2142  fc07		       00		      .byte.b	#%00000000
   2143  fc08		       17		      .byte.b	#%00010111
   2144  fc09		       10		      .byte.b	#%00010000
   2145  fc0a		       1d		      .byte.b	#%00011101
   2146  fc0b		       16		      .byte.b	#%00010110
   2147  fc0c		       03		      .byte.b	#%00000011
   2148  fc0d		       19		      .byte.b	#%00011001
   2149  fc0e		       13		      .byte.b	#%00010011
   2150  fc0f		       1c		      .byte.b	#%00011100
   2151  fc10		       0b		      .byte.b	#%00001011
   2152  fc11		       00		      .byte.b	#%00000000
   2153  fc12		       1f		      .byte.b	#%00011111
   2154  fc13		       10		      .byte.b	#%00010000
   2155  fc14		       17		      .byte.b	#%00010111
   2156  fc15		       17		      .byte.b	#%00010111
   2157  fc16		       17		      .byte.b	#%00010111
   2158  fc17		       10		      .byte.b	#%00010000
   2159  fc18		       1f		      .byte.b	#%00011111
   2160  fc19
   2161  fc19				   QrCode2
   2162  fc19		       c3		      .byte.b	#%11000011
   2163  fc1a		       9a		      .byte.b	#%10011010
   2164  fc1b		       82		      .byte.b	#%10000010
   2165  fc1c		       da		      .byte.b	#%11011010
   2166  fc1d		       aa		      .byte.b	#%10101010
   2167  fc1e		       ca		      .byte.b	#%11001010
   2168  fc1f		       f3		      .byte.b	#%11110011
   2169  fc20		       78		      .byte.b	#%01111000
   2170  fc21		       df		      .byte.b	#%11011111
   2171  fc22		       fc		      .byte.b	#%11111100
   2172  fc23		       c7		      .byte.b	#%11000111
   2173  fc24		       98		      .byte.b	#%10011000
   2174  fc25		       23		      .byte.b	#%00100011
   2175  fc26		       b9		      .byte.b	#%10111001
   2176  fc27		       d2		      .byte.b	#%11010010
   2177  fc28		       30		      .byte.b	#%00110000
   2178  fc29		       eb		      .byte.b	#%11101011
   2179  fc2a		       28		      .byte.b	#%00101000
   2180  fc2b		       ab		      .byte.b	#%10101011
   2181  fc2c		       72		      .byte.b	#%01110010
   2182  fc2d		       fa		      .byte.b	#%11111010
   2183  fc2e		       7a		      .byte.b	#%01111010
   2184  fc2f		       32		      .byte.b	#%00110010
   2185  fc30		       3a		      .byte.b	#%00111010
   2186  fc31		       63		      .byte.b	#%01100011
   2187  fc32
   2188  fc32				   QrCode3
   2189  fc32		       98		      .byte.b	#%10011000
   2190  fc33		       c3		      .byte.b	#%11000011
   2191  fc34		       39		      .byte.b	#%00111001
   2192  fc35		       34		      .byte.b	#%00110100
   2193  fc36		       ff		      .byte.b	#%11111111
   2194  fc37		       71		      .byte.b	#%01110001
   2195  fc38		       d5		      .byte.b	#%11010101
   2196  fc39		       d1		      .byte.b	#%11010001
   2197  fc3a		       5f		      .byte.b	#%01011111
   2198  fc3b		       26		      .byte.b	#%00100110
   2199  fc3c		       2d		      .byte.b	#%00101101
   2200  fc3d		       e9		      .byte.b	#%11101001
   2201  fc3e		       d6		      .byte.b	#%11010110
   2202  fc3f		       26		      .byte.b	#%00100110
   2203  fc40		       ba		      .byte.b	#%10111010
   2204  fc41		       03		      .byte.b	#%00000011
   2205  fc42		       dd		      .byte.b	#%11011101
   2206  fc43		       e0		      .byte.b	#%11100000
   2207  fc44		       57		      .byte.b	#%01010111
   2208  fc45		       14		      .byte.b	#%00010100
   2209  fc46		       35		      .byte.b	#%00110101
   2210  fc47		       e5		      .byte.b	#%11100101
   2211  fc48		       b5		      .byte.b	#%10110101
   2212  fc49		       d4		      .byte.b	#%11010100
   2213  fc4a		       97		      .byte.b	#%10010111
   2214  fc4b
   2215  fc4b				   QrCode4
   2216  fc4b		       09		      .byte.b	#%00001001
   2217  fc4c		       0e		      .byte.b	#%00001110
   2218  fc4d		       0f		      .byte.b	#%00001111
   2219  fc4e		       0c		      .byte.b	#%00001100
   2220  fc4f		       0c		      .byte.b	#%00001100
   2221  fc50		       08		      .byte.b	#%00001000
   2222  fc51		       08		      .byte.b	#%00001000
   2223  fc52		       06		      .byte.b	#%00000110
   2224  fc53		       06		      .byte.b	#%00000110
   2225  fc54		       0b		      .byte.b	#%00001011
   2226  fc55		       0f		      .byte.b	#%00001111
   2227  fc56		       04		      .byte.b	#%00000100
   2228  fc57		       08		      .byte.b	#%00001000
   2229  fc58		       0f		      .byte.b	#%00001111
   2230  fc59		       09		      .byte.b	#%00001001
   2231  fc5a		       07		      .byte.b	#%00000111
   2232  fc5b		       05		      .byte.b	#%00000101
   2233  fc5c		       00		      .byte.b	#%00000000
   2234  fc5d		       0f		      .byte.b	#%00001111
   2235  fc5e		       08		      .byte.b	#%00001000
   2236  fc5f		       0b		      .byte.b	#%00001011
   2237  fc60		       0b		      .byte.b	#%00001011
   2238  fc61		       0b		      .byte.b	#%00001011
   2239  fc62		       08		      .byte.b	#%00001000
   2240  fc63		       0f		      .byte.b	#%00001111
   2241  fc64
   2242  fc64				   PlayerToUpMask
   2243  fc64		       10		      .byte.b	#%00010000	;
   2244  fc65		       01		      .byte.b	#%00000001	;
   2245  fc66
   2246  fc66				   PlayerToDownMask
   2247  fc66		       20		      .byte.b	#%00100000	;
   2248  fc67		       02		      .byte.b	#%00000010	;
   2249  fc68
   2250  fc68				   PlayerToLeftMask
   2251  fc68		       40		      .byte.b	#%01000000	;
   2252  fc69		       04		      .byte.b	#%00000100	;
   2253  fc6a
   2254  fc6a				   PlayerToRightMask
   2255  fc6a		       80		      .byte.b	#%10000000	;
   2256  fc6b		       08		      .byte.b	#%00001000	;
   2257  fc6c
   2258  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2259  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2260  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2261  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2262  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2263  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2264  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2265  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2266  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2267  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2268  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2269  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2270  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2271  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2272  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2273  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2274  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2275  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2276  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2277  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2278  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2279  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2280  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2281  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2282  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2283  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2284  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2285  fc86		       86		      .byte.b	#<CR + #FONT_OFFSET	; Last point that is continuos
   2286  fc87		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2287  fc88		       90		      .byte.b	#<CV + #FONT_OFFSET
   2288  fc89		       95		      .byte.b	#<CW + #FONT_OFFSET
   2289  fc8a		       9a		      .byte.b	#<CY + #FONT_OFFSET
   2290  fc8b		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2291  fc8c
   2292  fc8c
   2293  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2294  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2295  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2296  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2297  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2298  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2299  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2300  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2301  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2302  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2303  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2304  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2305  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2306  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2307  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2308  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2309  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2310  fc9c
   2311  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2312  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2313  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2314  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2315  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2316  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2317  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2318  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2319  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2320  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2321  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2322  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2323  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2324  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2325  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2326  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2327  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2328  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2329  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2330  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2331  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2332  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2333  fcb1
   2334  fcb1				   PlayerToDefaultColor
   2335  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2336  fcb2		       96		      .byte.b	#PLAYER1_COLOR
   2337  fcb3
   2338  fd00					      org	$FD00
   2339  fd00				   Font
   2340  fd00				   C0
   2341  fd00		       e7		      .byte.b	#%11100111	;
   2342  fd01		       a5		      .byte.b	#%10100101	; 
   2343  fd02		       a5		      .byte.b	#%10100101	; 
   2344  fd03		       a5		      .byte.b	#%10100101	; 
   2345  fd04		       e7		      .byte.b	#%11100111	;	
   2346  fd05				   C1
   2347  fd05		       e7		      .byte.b	#%11100111	;
   2348  fd06		       42		      .byte.b	#%01000010	; 
   2349  fd07		       42		      .byte.b	#%01000010	; 
   2350  fd08		       42		      .byte.b	#%01000010	; 
   2351  fd09		       66		      .byte.b	#%01100110	;
   2352  fd0a				   C2
   2353  fd0a		       e7		      .byte.b	#%11100111	;
   2354  fd0b		       24		      .byte.b	#%00100100	; 
   2355  fd0c		       e7		      .byte.b	#%11100111	; 
   2356  fd0d		       81		      .byte.b	#%10000001	; 
   2357  fd0e		       e7		      .byte.b	#%11100111	;
   2358  fd0f				   C3
   2359  fd0f		       e7		      .byte.b	#%11100111	;
   2360  fd10		       81		      .byte.b	#%10000001	; 
   2361  fd11		       e7		      .byte.b	#%11100111	; 
   2362  fd12		       81		      .byte.b	#%10000001	; 
   2363  fd13		       e7		      .byte.b	#%11100111	;
   2364  fd14				   C4
   2365  fd14		       81		      .byte.b	#%10000001	;
   2366  fd15		       81		      .byte.b	#%10000001	; 
   2367  fd16		       e7		      .byte.b	#%11100111	; 
   2368  fd17		       a5		      .byte.b	#%10100101	; 
   2369  fd18		       a5		      .byte.b	#%10100101	;
   2370  fd19				   C5
   2371  fd19		       e7		      .byte.b	#%11100111	;
   2372  fd1a		       81		      .byte.b	#%10000001	; 
   2373  fd1b		       e7		      .byte.b	#%11100111	; 
   2374  fd1c		       24		      .byte.b	#%00100100	; 
   2375  fd1d		       e7		      .byte.b	#%11100111	;
   2376  fd1e				   C6
   2377  fd1e		       e7		      .byte.b	#%11100111	;
   2378  fd1f		       a5		      .byte.b	#%10100101	; 
   2379  fd20		       e7		      .byte.b	#%11100111	; 
   2380  fd21		       24		      .byte.b	#%00100100	; 
   2381  fd22		       e7		      .byte.b	#%11100111	;
   2382  fd23				   C7
   2383  fd23		       81		      .byte.b	#%10000001	;
   2384  fd24		       81		      .byte.b	#%10000001	; 
   2385  fd25		       81		      .byte.b	#%10000001	; 
   2386  fd26		       81		      .byte.b	#%10000001	; 
   2387  fd27		       e7		      .byte.b	#%11100111	;
   2388  fd28				   C8
   2389  fd28		       e7		      .byte.b	#%11100111	;
   2390  fd29		       a5		      .byte.b	#%10100101	; 
   2391  fd2a		       e7		      .byte.b	#%11100111	; 
   2392  fd2b		       a5		      .byte.b	#%10100101	; 
   2393  fd2c		       e7		      .byte.b	#%11100111	;
   2394  fd2d				   C9
   2395  fd2d		       e7		      .byte.b	#%11100111	;
   2396  fd2e		       81		      .byte.b	#%10000001	; 
   2397  fd2f		       e7		      .byte.b	#%11100111	; 
   2398  fd30		       a5		      .byte.b	#%10100101	; 
   2399  fd31		       e7		      .byte.b	#%11100111	;
   2400  fd32				   CA
   2401  fd32		       a5		      .byte.b	#%10100101	;
   2402  fd33		       a5		      .byte.b	#%10100101	; 
   2403  fd34		       e7		      .byte.b	#%11100111	; 
   2404  fd35		       a5		      .byte.b	#%10100101	; 
   2405  fd36		       e7		      .byte.b	#%11100111	;
   2406  fd37				   CB
   2407  fd37		       66		      .byte.b	#%01100110	;
   2408  fd38		       a5		      .byte.b	#%10100101	; 
   2409  fd39		       66		      .byte.b	#%01100110	; 
   2410  fd3a		       a5		      .byte.b	#%10100101	;
   2411  fd3b		       66		      .byte.b	#%01100110	;
   2412  fd3c				   CC
   2413  fd3c		       e7		      .byte.b	#%11100111	;
   2414  fd3d		       24		      .byte.b	#%00100100	; 
   2415  fd3e		       24		      .byte.b	#%00100100	; 
   2416  fd3f		       24		      .byte.b	#%00100100	;
   2417  fd40		       e7		      .byte.b	#%11100111	;
   2418  fd41
   2419  fd41				   CD
   2420  fd41		       66		      .byte.b	#%01100110	;
   2421  fd42		       a5		      .byte.b	#%10100101	; 
   2422  fd43		       a5		      .byte.b	#%10100101	; 
   2423  fd44		       a5		      .byte.b	#%10100101	;
   2424  fd45		       66		      .byte.b	#%01100110	;
   2425  fd46
   2426  fd46				   CE
   2427  fd46		       e7		      .byte.b	#%11100111	;
   2428  fd47		       24		      .byte.b	#%00100100	; 
   2429  fd48		       e7		      .byte.b	#%11100111	; 
   2430  fd49		       24		      .byte.b	#%00100100	; 
   2431  fd4a		       e7		      .byte.b	#%11100111	;
   2432  fd4b
   2433  fd4b				   CF
   2434  fd4b		       24		      .byte.b	#%00100100	;
   2435  fd4c		       24		      .byte.b	#%00100100	; 
   2436  fd4d		       e7		      .byte.b	#%11100111	; 
   2437  fd4e		       24		      .byte.b	#%00100100	; 
   2438  fd4f		       e7		      .byte.b	#%11100111	;
   2439  fd50
   2440  fd50				   CG
   2441  fd50		       c3		      .byte.b	#%11000011	;
   2442  fd51		       a5		      .byte.b	#%10100101	; 
   2443  fd52		       a5		      .byte.b	#%10100101	; 
   2444  fd53		       24		      .byte.b	#%00100100	; 
   2445  fd54		       c3		      .byte.b	#%11000011	;	
   2446  fd55
   2447  fd55				   CH
   2448  fd55		       a5		      .byte.b	#%10100101	;
   2449  fd56		       a5		      .byte.b	#%10100101	; 
   2450  fd57		       e7		      .byte.b	#%11100111	; 
   2451  fd58		       a5		      .byte.b	#%10100101	; 
   2452  fd59		       a5		      .byte.b	#%10100101	;
   2453  fd5a
   2454  fd5a				   CI
   2455  fd5a		       e7		      .byte.b	#%11100111	;
   2456  fd5b		       42		      .byte.b	#%01000010	; 
   2457  fd5c		       42		      .byte.b	#%01000010	; 
   2458  fd5d		       42		      .byte.b	#%01000010	; 
   2459  fd5e		       e7		      .byte.b	#%11100111	;
   2460  fd5f
   2461  fd5f				   CJ
   2462  fd5f		       e7		      .byte.b	#%11100111	;
   2463  fd60		       a5		      .byte.b	#%10100101	; 
   2464  fd61		       81		      .byte.b	#%10000001	; 
   2465  fd62		       81		      .byte.b	#%10000001	; 
   2466  fd63		       81		      .byte.b	#%10000001	;	
   2467  fd64
   2468  fd64				   CK
   2469  fd64		       a5		      .byte.b	#%10100101	;
   2470  fd65		       a5		      .byte.b	#%10100101	; 
   2471  fd66		       66		      .byte.b	#%01100110	; 
   2472  fd67		       a5		      .byte.b	#%10100101	; 
   2473  fd68		       a5		      .byte.b	#%10100101	;
   2474  fd69
   2475  fd69				   CL
   2476  fd69		       e7		      .byte.b	#%11100111	;
   2477  fd6a		       24		      .byte.b	#%00100100	; 
   2478  fd6b		       24		      .byte.b	#%00100100	; 
   2479  fd6c		       24		      .byte.b	#%00100100	; 
   2480  fd6d		       24		      .byte.b	#%00100100	;
   2481  fd6e
   2482  fd6e				   CM
   2483  fd6e		       a5		      .byte.b	#%10100101	;
   2484  fd6f		       a5		      .byte.b	#%10100101	; 
   2485  fd70		       a5		      .byte.b	#%10100101	; 
   2486  fd71		       e7		      .byte.b	#%11100111	; 
   2487  fd72		       a5		      .byte.b	#%10100101	;
   2488  fd73
   2489  fd73				   CN
   2490  fd73		       a5		      .byte.b	#%10100101	;
   2491  fd74		       a5		      .byte.b	#%10100101	; 
   2492  fd75		       a5		      .byte.b	#%10100101	; 
   2493  fd76		       a5		      .byte.b	#%10100101	; 
   2494  fd77		       66		      .byte.b	#%01100110	;	
   2495  fd78
   2496  fd78
   2497  fd78				   CO
   2498  fd78		       42		      .byte.b	#%01000010	;
   2499  fd79		       a5		      .byte.b	#%10100101	; 
   2500  fd7a		       a5		      .byte.b	#%10100101	; 
   2501  fd7b		       a5		      .byte.b	#%10100101	; 
   2502  fd7c		       42		      .byte.b	#%01000010	;	
   2503  fd7d
   2504  fd7d				   CP
   2505  fd7d		       24		      .byte.b	#%00100100	;
   2506  fd7e		       24		      .byte.b	#%00100100	; 
   2507  fd7f		       e7		      .byte.b	#%11100111	; 
   2508  fd80		       a5		      .byte.b	#%10100101	; 
   2509  fd81		       e7		      .byte.b	#%11100111	;
   2510  fd82
   2511  fd82				   CR
   2512  fd82		       a5		      .byte.b	#%10100101	;
   2513  fd83		       a5		      .byte.b	#%10100101	; 
   2514  fd84		       66		      .byte.b	#%01100110	; 
   2515  fd85		       a5		      .byte.b	#%10100101	; 
   2516  fd86		       66		      .byte.b	#%01100110	;
   2517  fd87
   2518  fd87				   CT
   2519  fd87		       42		      .byte.b	#%01000010	;
   2520  fd88		       42		      .byte.b	#%01000010	; 
   2521  fd89		       42		      .byte.b	#%01000010	; 
   2522  fd8a		       42		      .byte.b	#%01000010	; 
   2523  fd8b		       e7		      .byte.b	#%11100111	;
   2524  fd8c
   2525  fd8c				   CV
   2526  fd8c		       42		      .byte.b	#%01000010	;
   2527  fd8d		       a5		      .byte.b	#%10100101	; 
   2528  fd8e		       a5		      .byte.b	#%10100101	; 
   2529  fd8f		       a5		      .byte.b	#%10100101	; 
   2530  fd90		       a5		      .byte.b	#%10100101	;	
   2531  fd91
   2532  fd91				   CW
   2533  fd91		       a5		      .byte.b	#%10100101	;
   2534  fd92		       e7		      .byte.b	#%11100111	; 
   2535  fd93		       a5		      .byte.b	#%10100101	; 
   2536  fd94		       a5		      .byte.b	#%10100101	; 
   2537  fd95		       a5		      .byte.b	#%10100101	;
   2538  fd96
   2539  fd96				   CY
   2540  fd96		       42		      .byte.b	#%01000010	;
   2541  fd97		       42		      .byte.b	#%01000010	; 
   2542  fd98		       42		      .byte.b	#%01000010	; 
   2543  fd99		       a5		      .byte.b	#%10100101	; 
   2544  fd9a		       a5		      .byte.b	#%10100101	;
   2545  fd9b
   2546  fd9b				   Exclamation
   2547  fd9b		       42		      .byte.b	#%01000010	;
   2548  fd9c		       00		      .byte.b	#%00000000	; 
   2549  fd9d		       42		      .byte.b	#%01000010	; 
   2550  fd9e		       42		      .byte.b	#%01000010	; 
   2551  fd9f		       42		      .byte.b	#%01000010	;
   2552  fda0
   2553  fda0				   Dot
   2554  fda0		       42		      .byte.b	#%01000010	;
   2555  fda1		       42		      .byte.b	#%01000010	; 
   2556  fda2		       00		      .byte.b	#%00000000	; 
   2557  fda3		       00		      .byte.b	#%00000000	; 
   2558  fda4		       00		      .byte.b	#%00000000	;
   2559  fda5
   2560  fda5				   Pipe
   2561  fda5				   Colon
   2562  fda5		       42		      .byte.b	#%01000010	;
   2563  fda6		       42		      .byte.b	#%01000010	; 
   2564  fda7		       00		      .byte.b	#%00000000	; 
   2565  fda8		       42		      .byte.b	#%01000010	; 
   2566  fda9		       42		      .byte.b	#%01000010	;
   2567  fdaa
   2568  fdaa				   Triangle
   2569  fdaa		       81		      .byte.b	#%10000001	;
   2570  fdab		       c3		      .byte.b	#%11000011	; 
   2571  fdac		       e7		      .byte.b	#%11100111	; 
   2572  fdad		       c3		      .byte.b	#%11000011	; 
   2573  fdae		       81		      .byte.b	#%10000001	;
   2574  fdaf
   2575  fdaf				   Space
   2576  fdaf				   C0B
   2577  fdaf		       00		      .byte.b	#%00000000	;
   2578  fdb0		       00		      .byte.b	#%00000000	; 
   2579  fdb1		       00		      .byte.b	#%00000000	; 
   2580  fdb2		       00		      .byte.b	#%00000000	; 
   2581  fdb3		       00		      .byte.b	#%00000000	;	
   2582  fdb4				   C1B
   2583  fdb4		       24		      .byte.b	#%00100100	;
   2584  fdb5		       00		      .byte.b	#%00000000	; 
   2585  fdb6		       00		      .byte.b	#%00000000	; 
   2586  fdb7		       00		      .byte.b	#%00000000	; 
   2587  fdb8		       00		      .byte.b	#%00000000	;
   2588  fdb9				   C2B
   2589  fdb9		       66		      .byte.b	#%01100110	;
   2590  fdba		       00		      .byte.b	#%00000000	; 
   2591  fdbb		       00		      .byte.b	#%00000000	; 
   2592  fdbc		       00		      .byte.b	#%00000000	; 
   2593  fdbd		       00		      .byte.b	#%00000000	;
   2594  fdbe				   C3B
   2595  fdbe		       e7		      .byte.b	#%11100111	;
   2596  fdbf		       00		      .byte.b	#%00000000	; 
   2597  fdc0		       00		      .byte.b	#%00000000	; 
   2598  fdc1		       00		      .byte.b	#%00000000	; 
   2599  fdc2		       00		      .byte.b	#%00000000	;
   2600  fdc3				   C4B
   2601  fdc3		       e7		      .byte.b	#%11100111	;
   2602  fdc4		       24		      .byte.b	#%00100100	; 
   2603  fdc5		       00		      .byte.b	#%00000000	; 
   2604  fdc6		       00		      .byte.b	#%00000000	; 
   2605  fdc7		       00		      .byte.b	#%00000000	;
   2606  fdc8				   C5B
   2607  fdc8		       e7		      .byte.b	#%11100111	;
   2608  fdc9		       66		      .byte.b	#%01100110	; 
   2609  fdca		       00		      .byte.b	#%00000000	; 
   2610  fdcb		       00		      .byte.b	#%00000000	; 
   2611  fdcc		       00		      .byte.b	#%00000000	;
   2612  fdcd				   C6B
   2613  fdcd		       e7		      .byte.b	#%11100111	;
   2614  fdce		       e7		      .byte.b	#%11100111	; 
   2615  fdcf		       00		      .byte.b	#%00000000	; 
   2616  fdd0		       00		      .byte.b	#%00000000	; 
   2617  fdd1		       00		      .byte.b	#%00000000	;
   2618  fdd2				   C7B
   2619  fdd2		       e7		      .byte.b	#%11100111	;
   2620  fdd3		       e7		      .byte.b	#%11100111	; 
   2621  fdd4		       24		      .byte.b	#%00100100	; 
   2622  fdd5		       00		      .byte.b	#%00000000	; 
   2623  fdd6		       00		      .byte.b	#%00000000	;
   2624  fdd7				   C8B
   2625  fdd7		       e7		      .byte.b	#%11100111	;
   2626  fdd8		       e7		      .byte.b	#%11100111	; 
   2627  fdd9		       66		      .byte.b	#%01100110	; 
   2628  fdda		       00		      .byte.b	#%00000000	; 
   2629  fddb		       00		      .byte.b	#%00000000	;
   2630  fddc				   C9B
   2631  fddc		       e7		      .byte.b	#%11100111	;
   2632  fddd		       e7		      .byte.b	#%11100111	; 
   2633  fdde		       e7		      .byte.b	#%11100111	; 
   2634  fddf		       00		      .byte.b	#%00000000	; 
   2635  fde0		       00		      .byte.b	#%00000000	;
   2636  fde1				   CAB
   2637  fde1		       e7		      .byte.b	#%11100111	;
   2638  fde2		       e7		      .byte.b	#%11100111	; 
   2639  fde3		       e7		      .byte.b	#%11100111	; 
   2640  fde4		       24		      .byte.b	#%00100100	; 
   2641  fde5		       00		      .byte.b	#%00000000	;
   2642  fde6				   CBB
   2643  fde6		       e7		      .byte.b	#%11100111	;
   2644  fde7		       e7		      .byte.b	#%11100111	; 
   2645  fde8		       e7		      .byte.b	#%11100111	; 
   2646  fde9		       66		      .byte.b	#%01100110	; 
   2647  fdea		       00		      .byte.b	#%00000000	;
   2648  fdeb				   CCB
   2649  fdeb		       e7		      .byte.b	#%11100111	;
   2650  fdec		       e7		      .byte.b	#%11100111	; 
   2651  fded		       e7		      .byte.b	#%11100111	; 
   2652  fdee		       e7		      .byte.b	#%11100111	; 
   2653  fdef		       00		      .byte.b	#%00000000	;
   2654  fdf0
   2655  fdf0				   CDB
   2656  fdf0		       e7		      .byte.b	#%11100111	;
   2657  fdf1		       e7		      .byte.b	#%11100111	; 
   2658  fdf2		       e7		      .byte.b	#%11100111	; 
   2659  fdf3		       e7		      .byte.b	#%11100111	; 
   2660  fdf4		       24		      .byte.b	#%00100100	;
   2661  fdf5
   2662  fdf5				   CEB
   2663  fdf5		       e7		      .byte.b	#%11100111	;
   2664  fdf6		       e7		      .byte.b	#%11100111	; 
   2665  fdf7		       e7		      .byte.b	#%11100111	; 
   2666  fdf8		       e7		      .byte.b	#%11100111	; 
   2667  fdf9		       66		      .byte.b	#%01100110	;
   2668  fdfa
   2669  fdfa				   CFB
   2670  fdfa		       e7		      .byte.b	#%11100111	;
   2671  fdfb		       e7		      .byte.b	#%11100111	; 
   2672  fdfc		       e7		      .byte.b	#%11100111	; 
   2673  fdfd		       e7		      .byte.b	#%11100111	; 
   2674  fdfe		       e7		      .byte.b	#%11100111	;
   2675  fdff
   2676  fe00					      org	$FE00
   2677  fe00				   AesTable
   2678  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2679  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2680  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2681  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2682  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2683  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2684  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2685  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2686  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2687  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2688  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2689  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2690  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2691  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2692  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2693  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2694  ff00
   2695  ff00							; From FF00 to FFFB (122 bytes) to use here
   2696  ff00
   2697  ff00				   StaticText		; All static text must be on the same MSB block. 
   2698  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2699  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2700  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2701  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2702  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2703  ff04		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2704  ff05
   2705  ff05				   HellwayLeftText
   2706  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2707  ff06		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2708  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2709  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2710  ff09		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2711  ff0a
   2712  ff0a				   HellwayRightText
   2713  ff0a		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2714  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2715  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2716  ff0d		       9a		      .byte.b	#<CY + #FONT_OFFSET
   2717  ff0e		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2718  ff0f
   2719  ff0f				   OpbText
   2720  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2721  ff10		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2722  ff11		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2723  ff12		       81		      .byte.b	#<CP + #FONT_OFFSET
   2724  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2725  ff14
   2726  ff14				   YearText
   2727  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2728  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2729  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2730  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2731  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2732  ff19
   2733  ff19				   GameText
   2734  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2735  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2736  ff1b		       72		      .byte.b	#<CM + #FONT_OFFSET
   2737  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2738  ff1d		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2739  ff1e
   2740  ff1e				   OverText
   2741  ff1e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2742  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2743  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2744  ff21		       86		      .byte.b	#<CR + #FONT_OFFSET
   2745  ff22		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2746  ff23				   GoText
   2747  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2748  ff24		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2749  ff25		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2750  ff26		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2751  ff27		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2752  ff28
   2753  ff28				   VersionText
   2754  ff28		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2755  ff29		       a4		      .byte.b	#<Dot + #FONT_OFFSET
   2756  ff2a		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2757  ff2b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2758  ff2c		       ae		      .byte.b	#<Triangle + #FONT_OFFSET
   2759  ff2d				   EndStaticText
   2760  ff2d
   2761  ff2d				   TachometerSizeLookup1
   2762  ff2d		       1f		      .byte.b	#%00011111
   2763  ff2e		       3f		      .byte.b	#%00111111
   2764  ff2f		       7f		      .byte.b	#%01111111
   2765  ff30		       ff		      .byte.b	#%11111111
   2766  ff31		       ff		      .byte.b	#%11111111
   2767  ff32		       ff		      .byte.b	#%11111111
   2768  ff33		       ff		      .byte.b	#%11111111
   2769  ff34		       ff		      .byte.b	#%11111111
   2770  ff35
   2771  ff35				   TachometerSizeLookup2
   2772  ff35		       00		      .byte.b	#%00000000
   2773  ff36		       00		      .byte.b	#%00000000
   2774  ff37		       00		      .byte.b	#%00000000
   2775  ff38		       00		      .byte.b	#%00000000
   2776  ff39		       80		      .byte.b	#%10000000
   2777  ff3a		       c0		      .byte.b	#%11000000
   2778  ff3b		       e0		      .byte.b	#%11100000
   2779  ff3c		       f0		      .byte.b	#%11110000
   2780  ff3d
   2781  ff3d				   TachometerGearLookup
   2782  ff3d		       01		      .byte.b	#%00000001
   2783  ff3e		       02		      .byte.b	#%00000010
   2784  ff3f		       04		      .byte.b	#%00000100
   2785  ff40		       08		      .byte.b	#%00001000
   2786  ff41		       10		      .byte.b	#%00010000
   2787  ff42		       30		      .byte.b	#%00110000
   2788  ff43
   2789  ff43				   EngineSoundType
   2790  ff43		       02		      .byte.b	#2
   2791  ff44		       02		      .byte.b	#2
   2792  ff45		       0e		      .byte.b	#14
   2793  ff46		       06		      .byte.b	#6
   2794  ff47		       06		      .byte.b	#6
   2795  ff48		       0e		      .byte.b	#14
   2796  ff49
   2797  ff49				   EngineBaseFrequence
   2798  ff49		       1f		      .byte.b	#31
   2799  ff4a		       15		      .byte.b	#21
   2800  ff4b		       14		      .byte.b	#20
   2801  ff4c		       1f		      .byte.b	#31
   2802  ff4d		       16		      .byte.b	#22
   2803  ff4e		       03		      .byte.b	#3
   2804  ff4f
   2805  ff4f				   CarSprite0		; Upside down, Original Car
   2806  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2807  ff57				   CarSprite0NoPadding
   2808  ff57		       7e		      .byte.b	#%01111110
   2809  ff58		       24		      .byte.b	#%00100100
   2810  ff59		       bd		      .byte.b	#%10111101
   2811  ff5a		       3c		      .byte.b	#%00111100
   2812  ff5b		       bd		      .byte.b	#%10111101
   2813  ff5c		       3c		      .byte.b	#%00111100
   2814  ff5d
   2815  ff5d				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2816  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2817  ff65				   CarSprite1NoPadding
   2818  ff65		       bd		      .byte.b	#%10111101
   2819  ff66		       7e		      .byte.b	#%01111110
   2820  ff67		       5a		      .byte.b	#%01011010
   2821  ff68		       66		      .byte.b	#%01100110
   2822  ff69		       bd		      .byte.b	#%10111101
   2823  ff6a		       3c		      .byte.b	#%00111100
   2824  ff6b
   2825  ff6b				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2826  ff6b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2827  ff73				   CarSprite2NoPadding
   2828  ff73		       7e		      .byte.b	#%01111110
   2829  ff74		       a5		      .byte.b	#%10100101
   2830  ff75		       42		      .byte.b	#%01000010
   2831  ff76		       42		      .byte.b	#%01000010
   2832  ff77		       bd		      .byte.b	#%10111101
   2833  ff78		       7e		      .byte.b	#%01111110
   2834  ff79
   2835  ff79				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2836  ff79		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2837  ff81				   CarSprite3NoPadding
   2838  ff81		       3c		      .byte.b	#%00111100
   2839  ff82		       db		      .byte.b	#%11011011
   2840  ff83		       db		      .byte.b	#%11011011
   2841  ff84		       3c		      .byte.b	#%00111100
   2842  ff85		       5a		      .byte.b	#%01011010
   2843  ff86		       3c		      .byte.b	#%00111100
   2844  ff87
   2845  ff87				   TrafficSpeeds
   2846  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2847  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2848  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2849  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2850  ff8b		       e6		      .byte.b	#$E6	;  Trafic2 L
   2851  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2852  ff8d		       c2		      .byte.b	#$C2	;  Trafic3 L
   2853  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2854  ff8f		       9e		      .byte.b	#$9E	;  Trafic4 L
   2855  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2856  ff91				   TrafficSpeedsHighDelta
   2857  ff91		       00		      .byte.b	#$00	;  Trafic0 L
   2858  ff92		       00		      .byte.b	#$00	;  Trafic0 H
   2859  ff93		       0a		      .byte.b	#$0A	;  Trafic1 L
   2860  ff94		       01		      .byte.b	#$01	;  Trafic1 H
   2861  ff95		       c8		      .byte.b	#$C8	;  Trafic2 L
   2862  ff96		       00		      .byte.b	#$00	;  Trafic2 H
   2863  ff97		       86		      .byte.b	#$86	;  Trafic3 L
   2864  ff98		       00		      .byte.b	#$00	;  Trafic3 H
   2865  ff99		       44		      .byte.b	#$44	;  Trafic4 L
   2866  ff9a		       00		      .byte.b	#$00	;  Trafic4 H
   2867  ff9b
   2868  ff9b				   CarIdToSpriteAddressL
   2869  ff9b		       4f		      .byte.b	#<CarSprite0
   2870  ff9c		       5d		      .byte.b	#<CarSprite1
   2871  ff9d		       6b		      .byte.b	#<CarSprite2
   2872  ff9e		       79		      .byte.b	#<CarSprite3
   2873  ff9f
   2874  ff9f				   CarIdToSpriteAddressH
   2875  ff9f		       ff		      .byte.b	#>CarSprite0
   2876  ffa0		       ff		      .byte.b	#>CarSprite1
   2877  ffa1		       ff		      .byte.b	#>CarSprite2
   2878  ffa2		       ff		      .byte.b	#>CarSprite3
   2879  ffa3
   2880  ffa3				   EnemyCarIdToSpriteAddressL
   2881  ffa3		       57		      .byte.b	#<CarSprite0NoPadding
   2882  ffa4		       65		      .byte.b	#<CarSprite1NoPadding
   2883  ffa5		       73		      .byte.b	#<CarSprite2NoPadding
   2884  ffa6		       81		      .byte.b	#<CarSprite3NoPadding
   2885  ffa7
   2886  ffa7				   EnemyCarIdToSpriteAddressH
   2887  ffa7		       ff		      .byte.b	#>CarSprite0NoPadding
   2888  ffa8		       ff		      .byte.b	#>CarSprite1NoPadding
   2889  ffa9		       ff		      .byte.b	#>CarSprite2NoPadding
   2890  ffaa		       ff		      .byte.b	#>CarSprite3NoPadding
   2891  ffab
   2892  ffab				   CarIdToAccelerateSpeed
   2893  ffab		       80		      .byte.b	#128
   2894  ffac		       c0		      .byte.b	#192
   2895  ffad		       60		      .byte.b	#96
   2896  ffae		       c0		      .byte.b	#192
   2897  ffaf
   2898  ffaf				   CarIdToTimeoverBreakInterval 		; Glide
   2899  ffaf		       03		      .byte.b	#%00000011	;Every 4 frames
   2900  ffb0		       03		      .byte.b	#%00000011	;Every 4 frames
   2901  ffb1		       0f		      .byte.b	#%00001111	;Every 16 frames
   2902  ffb2		       03		      .byte.b	#%00000011	;Every 4 frames
   2903  ffb3
   2904  ffb3				   CarIdToMaxSpeedL
   2905  ffb3		       80		      .byte.b	#$80
   2906  ffb4		       00		      .byte.b	#$00	; One less gear
   2907  ffb5		       80		      .byte.b	#$80
   2908  ffb6		       80		      .byte.b	#$80
   2909  ffb7
   2910  ffb7				   CarIdToMaxGear
   2911  ffb7		       05		      .byte.b	#5
   2912  ffb8		       04		      .byte.b	#4	; One less gear
   2913  ffb9		       05		      .byte.b	#5
   2914  ffba		       05		      .byte.b	#5
   2915  ffbb
   2916  ffbb				   GearToBreakSpeedTable
   2917  ffbb		       09		      .byte.b	#(BREAK_SPEED - 1)
   2918  ffbc		       09		      .byte.b	#(BREAK_SPEED - 1)
   2919  ffbd		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2920  ffbe		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2921  ffbf		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2922  ffc0		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2923  ffc1
   2924  ffc1				   TrafficColorTable
   2925  ffc1		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2926  ffc2		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2927  ffc3		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2928  ffc4		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2929  ffc5
   2930  ffc5				   TrafficChanceTable
   2931  ffc5		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2932  ffc6		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2933  ffc7		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2934  ffc8		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2935  ffc9
   2936  ffc9				   TrafficTimeTable
   2937  ffc9		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2938  ffca		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2939  ffcb		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2940  ffcc		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2941  ffcd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2942  ffce
   2943  ffce
   2944  fffc					      org	$FFFC
   2945  fffc		       00 f0		      .word.w	BeforeStart
   2946  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
