------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 09	   ENGINE_VOLUME =	9
    104  f000
    105  f000		       00 08	   CAR_SIZE   =	8
    106  f000
    107  f000		       00 80	   GRP0Cache  =	$80
    108  f000		       00 81	   PF0Cache   =	$81
    109  f000		       00 82	   PF1Cache   =	$82
    110  f000		       00 83	   PF2Cache   =	$83
    111  f000		       00 84	   GRP1Cache  =	$84
    112  f000		       00 85	   ENABLCache =	$85
    113  f000		       00 86	   ENAM0Cache =	$86
    114  f000		       00 87	   ENAM1Cache =	$87
    115  f000
    116  f000		       00 8c	   FrameCount0 =	$8C	;
    117  f000		       00 8d	   FrameCount1 =	$8D	;
    118  f000
    119  f000		       00 8e	   CollisionCounter =	$8E
    120  f000		       00 8f	   OpCollisionCounter =	$8F
    121  f000
    122  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    123  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    124  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    125  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    126  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    127  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    128  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    129  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    130  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    131  f000
    132  f000							;Temporary variables, multiple uses
    133  f000		       00 b0	   Tmp0       =	$B0
    134  f000		       00 b1	   Tmp1       =	$B1
    135  f000		       00 b2	   Tmp2       =	$B2
    136  f000		       00 b3	   Tmp3       =	$B3
    137  f000		       00 b4	   Tmp4       =	$B4
    138  f000		       00 b5	   Tmp5       =	$B5
    139  f000
    140  f000		       00 b6	   Player0X   =	$B6
    141  f000		       00 b7	   Player1X   =	$B7
    142  f000		       00 b8	   CountdownTimer =	$B8
    143  f000		       00 b9	   OpCountdownTimer =	$B9
    144  f000		       00 ba	   Traffic0Msb =	$BA
    145  f000		       00 bb	   OpTraffic0Msb =	$BB
    146  f000		       00 bc	   SwitchDebounceCounter =	$BC
    147  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    148  f000		       00 be	   TrafficChance =	$BE
    149  f000		       00 bf	   OpTrafficChance =	$BF
    150  f000
    151  f000		       00 c0	   CheckpointTime =	$C0
    152  f000		       00 c1	   OpCheckpointTime =	$C1
    153  f000		       00 c2	   TrafficColor =	$C2
    154  f000		       00 c3	   OpTrafficColor =	$C3
    155  f000		       00 c4	   CurrentDifficulty =	$C4
    156  f000		       00 c5	   OpCurrentDifficulty =	$C5
    157  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    158  f000
    159  f000		       00 c7	   CurrentCarId =	$C7
    160  f000		       00 c8	   OpCurrentCarId =	$C8
    161  f000
    162  f000		       00 c9	   ScoreFontColor =	$C9
    163  f000		       00 ca	   OpScoreFontColor =	$CA
    164  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    165  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    166  f000		       00 cd	   NextCheckpoint =	$CD
    167  f000		       00 ce	   OpNextCheckpoint =	$CE
    168  f000		       00 cf	   OpponentLine =	$CF
    169  f000
    170  f000		       00 d0	   ScoreD0    =	$D0
    171  f000		       00 d1	   ScoreD1    =	$D1
    172  f000		       00 d2	   ScoreD2    =	$D2
    173  f000		       00 d3	   ScoreD3    =	$D3
    174  f000		       00 d4	   ScoreD4    =	$D4
    175  f000
    176  f000		       00 d5	   Gear       =	$D5
    177  f000		       00 d6	   OpGear     =	$D6
    178  f000
    179  f000		       00 d7	   CarSpritePointerL =	$D7
    180  f000		       00 d8	   CarSpritePointerH =	$D8
    181  f000
    182  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    183  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    184  f000
    185  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    186  f000
    187  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    188  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    189  f000
    190  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    191  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    192  f000
    193  f000		       00 f0	   Player0SpeedL =	$F0
    194  f000		       00 f1	   Player1SpeedL =	$F1
    195  f000		       00 f2	   Player0SpeedH =	$F2
    196  f000		       00 f3	   Player1SpeedH =	$F3
    197  f000
    198  f000		       00 f4	   IsOpponentInFront =	$F4	; Bit 7 tells if negative or positive.
    199  f000
    200  f000							;generic start up stuff, put zero in almost all...
    201  f000				   BeforeStart		;All variables that are kept on game reset or select
    202  f000		       a0 00		      LDY	#0
    203  f002		       84 bc		      STY	SwitchDebounceCounter
    204  f004		       84 c4		      STY	CurrentDifficulty
    205  f006		       84 c5		      STY	OpCurrentDifficulty
    206  f008		       84 bd		      STY	GameStatus
    207  f00a		       84 c7		      STY	CurrentCarId
    208  f00c		       84 c8		      STY	OpCurrentCarId
    209  f00e		       a0 10		      LDY	#16
    210  f010		       84 c6		      STY	GameMode
    211  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    212  f014
    213  f014				   Start
    214  f014		       a9 02		      LDA	#2
    215  f016		       85 00		      STA	VSYNC
    216  f018		       85 02		      STA	WSYNC
    217  f01a		       85 02		      STA	WSYNC
    218  f01c		       85 02		      STA	WSYNC
    219  f01e		       a9 00		      LDA	#0	;2
    220  f020		       85 00		      STA	VSYNC	;3
    221  f022
    222  f022		       78		      SEI
    223  f023		       d8		      CLD
    224  f024		       a2 ff		      LDX	#$FF
    225  f026		       9a		      TXS
    226  f027
    227  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    228  f029				   CleanMem
    229  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    230  f02b		       f0 1a		      BEQ	SkipClean
    231  f02d		       e0 c6		      CPX	#GameMode
    232  f02f		       f0 16		      BEQ	SkipClean
    233  f031		       e0 c7		      CPX	#CurrentCarId
    234  f033		       f0 12		      BEQ	SkipClean
    235  f035		       e0 c8		      CPX	#OpCurrentCarId
    236  f037		       f0 0e		      BEQ	SkipClean
    237  f039		       e0 c4		      CPX	#CurrentDifficulty
    238  f03b		       f0 0a		      BEQ	SkipClean
    239  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    240  f03f		       f0 06		      BEQ	SkipClean
    241  f041		       e0 bd		      CPX	#GameStatus
    242  f043		       f0 02		      BEQ	SkipClean
    243  f045		       95 00		      STA	0,X
    244  f047				   SkipClean
    245  f047		       e8		      INX
    246  f048		       d0 df		      BNE	CleanMem
    247  f04a
    248  f04a		       a9 d5		      LDA	#213
    249  f04c		       8d 96 02 	      STA	TIM64T	;3	
    250  f04f
    251  f04f							;Setting some variables...
    252  f04f
    253  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    254  f04f		       85 02		      STA	WSYNC	;We will set player position
    255  f051		       20 2e f7 	      JSR	DefaultOffsets
    256  f054
    257  f054		       ad 8f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    258  f057		       85 f0		      STA	Player0SpeedL
    259  f059		       85 f1		      STA	Player1SpeedL
    260  f05b
    261  f05b							;SLEEP 11;18
    262  f05b		       a2 00		      LDX	#0
    263  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    264  f060		       85 db		      STA	StartSWCHB	; For game over
    265  f062		       29 c0		      AND	#%11000000
    266  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    267  f066		       e8		      INX
    268  f067		       c9 80		      CMP	#%10000000
    269  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    270  f06b		       e8		      INX
    271  f06c		       c9 40		      CMP	#%01000000
    272  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    273  f070		       e8		      INX
    274  f071
    275  f071				   StoreCurrentDifficulty
    276  f071		       86 c4		      STX	CurrentDifficulty
    277  f073		       86 c5		      STX	OpCurrentDifficulty
    278  f075		       a2 00		      LDX	#0
    279  f077		       20 e6 f6 	      JSR	ConfigureDifficulty
    280  f07a		       e8		      INX
    281  f07b		       20 e6 f6 	      JSR	ConfigureDifficulty
    282  f07e
    283  f07e				   SetGameNotRunning
    284  f07e		       a9 00		      LDA	#0
    285  f080		       85 bd		      STA	GameStatus
    286  f082
    287  f082				   ConfigureTimer
    288  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    289  f084		       85 b8		      STA	CountdownTimer	;3
    290  f086		       85 b9		      STA	OpCountdownTimer	;3
    291  f088
    292  f088				   ConfigurePlayer1XPosition
    293  f088		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    294  f08a		       85 b7		      STA	Player1X	;3
    295  f08c
    296  f08c				   ConfigureOpNextCheckpoint
    297  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    298  f08e		       85 ce		      STA	OpNextCheckpoint
    299  f090
    300  f090				   HPositioning 		; Avoid sleep doing needed stuff
    301  f090		       85 02		      STA	WSYNC
    302  f092
    303  f092				   ConfigurePlayer0XPosition
    304  f092		       a9 21		      LDA	#PLAYER_0_X_START	;2
    305  f094		       85 b6		      STA	Player0X	;3
    306  f096
    307  f096				   ConfigureMissileSize
    308  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    309  f098		       85 04		      STA	NUSIZ0	;3
    310  f09a		       85 05		      STA	NUSIZ1	;3
    311  f09c
    312  f09c				   ConfigureNextCheckpoint
    313  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    314  f09e		       85 cd		      STA	NextCheckpoint
    315  f0a0
    316  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    317  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	4	;
      1  f0a2				   .CYCLES    SET	4
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2				  -	      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2				  -	      ELSE
     12  f0a2				  -	      bit	VSYNC
     13  f0a2				  -	      ENDIF
     14  f0a2				  -.CYCLES    SET	.CYCLES - 3
     15  f0a2					      ENDIF
     16  f0a2
     17  f0a2					      REPEAT	.CYCLES / 2
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     19  f0a4					      REPEND
    319  f0a4		       85 12		      STA	RESM0
      0  f0a6					      SLEEP	2	;
      1  f0a6				   .CYCLES    SET	2
      2  f0a6
      3  f0a6				  -	      IF	.CYCLES < 2
      4  f0a6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a6				  -	      ERR
      6  f0a6					      ENDIF
      7  f0a6
      8  f0a6				  -	      IF	.CYCLES & 1
      9  f0a6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a6				  -	      nop	0
     11  f0a6				  -	      ELSE
     12  f0a6				  -	      bit	VSYNC
     13  f0a6				  -	      ENDIF
     14  f0a6				  -.CYCLES    SET	.CYCLES - 3
     15  f0a6					      ENDIF
     16  f0a6
     17  f0a6					      REPEAT	.CYCLES / 2
     18  f0a6		       ea		      nop
     19  f0a7					      REPEND
    321  f0a7		       85 14		      STA	RESBL
      0  f0a9					      SLEEP	2
      1  f0a9				   .CYCLES    SET	2
      2  f0a9
      3  f0a9				  -	      IF	.CYCLES < 2
      4  f0a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a9				  -	      ERR
      6  f0a9					      ENDIF
      7  f0a9
      8  f0a9				  -	      IF	.CYCLES & 1
      9  f0a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a9				  -	      nop	0
     11  f0a9				  -	      ELSE
     12  f0a9				  -	      bit	VSYNC
     13  f0a9				  -	      ENDIF
     14  f0a9				  -.CYCLES    SET	.CYCLES - 3
     15  f0a9					      ENDIF
     16  f0a9
     17  f0a9					      REPEAT	.CYCLES / 2
     18  f0a9		       ea		      nop
     19  f0aa					      REPEND
    323  f0aa		       85 13		      STA	RESM1
      0  f0ac					      SLEEP	3
      1  f0ac				   .CYCLES    SET	3
      2  f0ac
      3  f0ac				  -	      IF	.CYCLES < 2
      4  f0ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ac				  -	      ERR
      6  f0ac					      ENDIF
      7  f0ac
      8  f0ac					      IF	.CYCLES & 1
      9  f0ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ac				  -	      nop	0
     11  f0ac					      ELSE
     12  f0ac		       24 00		      bit	VSYNC
     13  f0ae					      ENDIF
     14  f0ae				   .CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae				  -	      REPEAT	.CYCLES / 2
     18  f0ae				  -	      nop
     19  f0ae					      REPEND
    325  f0ae
    326  f0ae		       a9 e0		      LDA	#$E0
    327  f0b0		       85 24		      STA	HMBL
    328  f0b2		       85 22		      STA	HMM0
    329  f0b4		       85 23		      STA	HMM1
    330  f0b6		       85 02		      STA	WSYNC
    331  f0b8		       85 2a		      STA	HMOVE
    332  f0ba		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    333  f0bc		       85 2b		      STA	HMCLR
      0  f0be					      SLEEP	30
      1  f0be				   .CYCLES    SET	30
      2  f0be
      3  f0be				  -	      IF	.CYCLES < 2
      4  f0be				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0be				  -	      ERR
      6  f0be					      ENDIF
      7  f0be
      8  f0be				  -	      IF	.CYCLES & 1
      9  f0be				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0be				  -	      nop	0
     11  f0be				  -	      ELSE
     12  f0be				  -	      bit	VSYNC
     13  f0be				  -	      ENDIF
     14  f0be				  -.CYCLES    SET	.CYCLES - 3
     15  f0be					      ENDIF
     16  f0be
     17  f0be					      REPEAT	.CYCLES / 2
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     19  f0cd					      REPEND
    335  f0cd		       85 10		      STA	RESP0
    336  f0cf							;SLEEP 5 ; Temporarily move player 1 away.
    337  f0cf		       85 11		      STA	RESP1
    338  f0d1
    339  f0d1				   WaitResetToEnd
    340  f0d1		       ad 84 02 	      LDA	INTIM
    341  f0d4		       d0 fb		      BNE	WaitResetToEnd
    342  f0d6
    343  f0d6				   MainLoop
    344  f0d6		       a9 02		      LDA	#2
    345  f0d8		       85 00		      STA	VSYNC
    346  f0da		       85 02		      STA	WSYNC
    347  f0dc		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    348  f0de				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    349  f0de		       a9 01		      LDA	#%00000001	;3
    350  f0e0		       24 df		      BIT	TextFlickerMode	;2
    351  f0e2		       f0 05		      BEQ	TextSideFrameZero	;2
    352  f0e4		       25 8d		      AND	FrameCount1	;2
    353  f0e6		       4c eb f0 	      JMP	StoreTextSize	;3
    354  f0e9				   TextSideFrameZero
    355  f0e9		       25 8c		      AND	FrameCount0	;2
    356  f0eb				   StoreTextSize
    357  f0eb		       85 de		      STA	TextSide	;3
    358  f0ed
    359  f0ed				   PrepareMaxHMove
      0  f0ed					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0ed				   .CYCLES    SET	18
      2  f0ed
      3  f0ed				  -	      IF	.CYCLES < 2
      4  f0ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ed				  -	      ERR
      6  f0ed					      ENDIF
      7  f0ed
      8  f0ed				  -	      IF	.CYCLES & 1
      9  f0ed				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ed				  -	      nop	0
     11  f0ed				  -	      ELSE
     12  f0ed				  -	      bit	VSYNC
     13  f0ed				  -	      ENDIF
     14  f0ed				  -.CYCLES    SET	.CYCLES - 3
     15  f0ed					      ENDIF
     16  f0ed
     17  f0ed					      REPEAT	.CYCLES / 2
     18  f0ed		       ea		      nop
     17  f0ed					      REPEND
     18  f0ee		       ea		      nop
     17  f0ee					      REPEND
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     17  f0f3					      REPEND
     18  f0f4		       ea		      nop
     17  f0f4					      REPEND
     18  f0f5		       ea		      nop
     19  f0f6					      REPEND
    361  f0f6		       a9 80		      LDA	#$80
    362  f0f8		       85 24		      STA	HMBL
    363  f0fa		       85 22		      STA	HMM0
    364  f0fc		       85 23		      STA	HMM1
    365  f0fe		       85 20		      STA	HMP0
    366  f100		       85 21		      STA	HMP1
    367  f102		       85 02		      STA	WSYNC
    368  f104		       85 2a		      STA	HMOVE	; 1/10			
    369  f106
    370  f106				   ConfigVBlankTimer
    371  f106		       a5 c6		      LDA	GameMode
    372  f108		       c9 10		      CMP	#MAX_GAME_MODE
    373  f10a		       f0 05		      BEQ	SetVblankTimerQrCode
    374  f10c		       a9 29		      LDA	#VBLANK_TIMER
    375  f10e		       4c 13 f1 	      JMP	SetVblankTimer
    376  f111				   SetVblankTimerQrCode
    377  f111		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    378  f113
    379  f113				   SetVblankTimer
    380  f113		       85 02		      STA	WSYNC	;3
    381  f115		       8d 96 02 	      STA	TIM64T	;3	
    382  f118		       a9 00		      LDA	#0	;2
    383  f11a		       85 00		      STA	VSYNC	;3	
    384  f11c
    385  f11c				   RandomizeGame
    386  f11c		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    387  f11e		       d0 2d		      BNE	EndRandomizeGame
    388  f120		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    389  f122		       29 02		      AND	#%00000010
    390  f124		       f0 24		      BEQ	DeterministicGame
    391  f126		       a6 96		      LDX	TrafficOffset1 + 2
    392  f128		       bd 00 fe 	      LDA	AesTable,X
    393  f12b		       45 8c		      EOR	FrameCount0
    394  f12d		       85 96		      STA	TrafficOffset1 + 2
    395  f12f		       85 a6		      STA	OpTrafficOffset1 + 2
    396  f131		       a6 9a		      LDX	TrafficOffset2 + 2
    397  f133		       bd 00 fe 	      LDA	AesTable,X
    398  f136		       45 8c		      EOR	FrameCount0
    399  f138		       85 9a		      STA	TrafficOffset2 + 2
    400  f13a		       85 aa		      STA	OpTrafficOffset2 + 2
    401  f13c		       a6 9e		      LDX	TrafficOffset3 + 2
    402  f13e		       bd 00 fe 	      LDA	AesTable,X
    403  f141		       45 8c		      EOR	FrameCount0
    404  f143		       85 9e		      STA	TrafficOffset3 + 2
    405  f145		       85 ae		      STA	OpTrafficOffset3 + 2
    406  f147		       4c 4d f1 	      JMP	EndRandomizeGame
    407  f14a
    408  f14a				   DeterministicGame
    409  f14a		       20 2e f7 	      JSR	DefaultOffsets
    410  f14d
    411  f14d				   EndRandomizeGame
    412  f14d
    413  f14d
    414  f14d				   CountFrame
    415  f14d		       e6 8c		      INC	FrameCount0	; 5
    416  f14f		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    417  f151		       e6 8d		      INC	FrameCount1	; 5 
    418  f153				   SkipIncFC1
    419  f153
    420  f153				   CallDrawQrCode
    421  f153		       a5 c6		      LDA	GameMode
    422  f155		       c9 10		      CMP	#MAX_GAME_MODE
    423  f157		       d0 03		      BNE	TestIsGameRunning
    424  f159		       4c 8f fa 	      JMP	DrawQrCode
    425  f15c
    426  f15c							;Does not update the game if not running
    427  f15c				   TestIsGameRunning
    428  f15c		       a5 bd		      LDA	GameStatus	;3
    429  f15e		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    430  f160				   SelectCarWithDpadCall		; Only do it when game is stoped
    431  f160		       a2 00		      LDX	#0	; Player 0
    432  f162		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    433  f164		       85 b0		      STA	Tmp0
    434  f166		       20 32 f8 	      JSR	SelectCarWithDpad
    435  f169		       e8		      INX		; Player 1
    436  f16a		       20 32 f8 	      JSR	SelectCarWithDpad
    437  f16d
    438  f16d							; Needs to draw the opponent in the correct line even when game stoped  
    439  f16d							; Draeing is a destructive operation
    440  f16d		       20 44 f8 	      JSR	ProcessOpponentLine
    441  f170
    442  f170				   CallConfigureCarSprites
    443  f170		       20 ec f7 	      JSR	ConfigureCarSprites
    444  f173				   SkipUpdateLogicJump
    445  f173		       4c bc f1 	      JMP	SkipUpdateLogic
    446  f176				   ContinueWithGameLogic
    447  f176
    448  f176				   CallEverySecond		; Timer for now
    449  f176		       a2 00		      LDX	#0
    450  f178		       20 65 fa 	      JSR	EverySecond
    451  f17b		       e8		      INX
    452  f17c		       20 65 fa 	      JSR	EverySecond
    453  f17f
    454  f17f				   ChangeTextFlickerMode
    455  f17f		       a5 bc		      LDA	SwitchDebounceCounter
    456  f181		       d0 0d		      BNE	EndChangeTextFlickerMode
    457  f183		       ad 82 02 	      LDA	SWCHB
    458  f186		       29 02		      AND	#%00000010	;Game select
    459  f188		       d0 06		      BNE	EndChangeTextFlickerMode
    460  f18a		       e6 df		      INC	TextFlickerMode
    461  f18c		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    462  f18e		       85 bc		      STA	SwitchDebounceCounter
    463  f190				   EndChangeTextFlickerMode
    464  f190
    465  f190				   CallProcessSpeed
    466  f190		       a2 00		      LDX	#0
    467  f192		       20 7c f9 	      JSR	ProcessSpeed
    468  f195
    469  f195		       e8		      INX		; Player 1
    470  f196		       20 7c f9 	      JSR	ProcessSpeed
    471  f199
    472  f199				   CallUpdateOffsets
    473  f199		       a2 00		      LDX	#0	; Player 0
    474  f19b		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    475  f19d		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    476  f19f		       a5 f0		      LDA	Player0SpeedL
    477  f1a1		       85 b4		      STA	Tmp4
    478  f1a3		       a5 f2		      LDA	Player0SpeedH
    479  f1a5		       85 b5		      STA	Tmp5
    480  f1a7		       20 29 f9 	      JSR	UpdateOffsets
    481  f1aa
    482  f1aa							;LDX Exits the call with correct value.
    483  f1aa		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    484  f1ac		       85 b3		      STA	Tmp3
    485  f1ae		       a5 f1		      LDA	Player1SpeedL
    486  f1b0		       85 b4		      STA	Tmp4
    487  f1b2		       a5 f3		      LDA	Player1SpeedH
    488  f1b4		       85 b5		      STA	Tmp5
    489  f1b6		       20 29 f9 	      JSR	UpdateOffsets
    490  f1b9
    491  f1b9				   CallProcessOpponentLine
    492  f1b9		       20 44 f8 	      JSR	ProcessOpponentLine
    493  f1bc
    494  f1bc				   SkipUpdateLogic		; Continue here if not paused
    495  f1bc
    496  f1bc				   CallStatusUpdateSbr
    497  f1bc		       a2 00		      LDX	#0
    498  f1be		       20 72 fa 	      JSR	CalculateGear
    499  f1c1		       20 7f fa 	      JSR	ProcessScoreFontColor
    500  f1c4		       e8		      INX
    501  f1c5		       20 72 fa 	      JSR	CalculateGear
    502  f1c8		       20 7f fa 	      JSR	ProcessScoreFontColor
    503  f1cb
    504  f1cb				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    505  f1cb		       a5 8c		      LDA	FrameCount0
    506  f1cd		       29 01		      AND	#%00000001
    507  f1cf		       d0 0c		      BNE	CallProcessPlayer1Status
    508  f1d1				   CallProcessPlayer0Status
    509  f1d1		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    510  f1d3		       85 b0		      STA	Tmp0
    511  f1d5		       a2 00		      LDX	#0
    512  f1d7		       20 1f fa 	      JSR	ProcessPlayerStatus
    513  f1da		       4c e6 f1 	      JMP	EndCallProcessPlayerStatus
    514  f1dd				   CallProcessPlayer1Status
    515  f1dd		       a5 a2		      LDA	OpTrafficOffset0 + 2
    516  f1df		       85 b0		      STA	Tmp0
    517  f1e1		       a2 01		      LDX	#1
    518  f1e3		       20 1f fa 	      JSR	ProcessPlayerStatus
    519  f1e6				   EndCallProcessPlayerStatus
    520  f1e6
    521  f1e6				   CallProcessPlayerSprites
    522  f1e6		       20 ec f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    523  f1e9
    524  f1e9				   CallProcessSound		; We might save cycles by updating one channel per frame.
    525  f1e9		       a2 00		      LDX	#0
    526  f1eb		       a5 92		      LDA	TrafficOffset0 + 2
    527  f1ed		       85 b1		      STA	Tmp1
    528  f1ef		       20 fd f5 	      JSR	ProcessSound
    529  f1f2		       e8		      INX		; Player 1
    530  f1f3		       a5 a2		      LDA	OpTrafficOffset0 + 2
    531  f1f5		       85 b1		      STA	Tmp1
    532  f1f7		       20 fd f5 	      JSR	ProcessSound
    533  f1fa
    534  f1fa							;Could be done during on vblank to save this comparisson time (before draw score), 
    535  f1fa							;but I am saving vblank cycles for now, in case of 2 players.
    536  f1fa				   ChooseTextSide		; 
    537  f1fa		       a5 de		      LDA	TextSide	;3
    538  f1fc		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    539  f1fe		       4c 9f f2 	      JMP	RightScoreWrite
    540  f201
    541  f201				   LeftScoreWrite
    542  f201		       a5 c9		      LDA	ScoreFontColor
    543  f203		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    544  f205		       f0 62		      BEQ	PrintCheckpoint
    545  f207		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    546  f209		       f0 66		      BEQ	PrintStartGame
    547  f20b		       a5 bd		      LDA	GameStatus
    548  f20d		       f0 6a		      BEQ	PrintHellwayLeft
    549  f20f				   WriteDistance		;Not optimized yet, ugly code.
    550  f20f				   Digit0Timer
    551  f20f		       a5 b8		      LDA	CountdownTimer	;3
    552  f211		       85 b0		      STA	Tmp0
    553  f213		       20 1e f8 	      JSR	BINBCD8
    554  f216							; LDA Tmp1 Also returned in A
    555  f216		       29 0f		      AND	#%00001111	;2
    556  f218		       aa		      TAX		; 2
    557  f219		       bd 6c fc 	      LDA	FontLookup,X	;4 
    558  f21c		       85 d1		      STA	ScoreD1	;3
    559  f21e
    560  f21e				   Digit1Timer
    561  f21e		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    562  f220		       4a		      LSR		; 2
    563  f221		       4a		      LSR		; 2
    564  f222		       4a		      LSR		; 2
    565  f223		       4a		      LSR		; 2
    566  f224		       aa		      TAX		; 2
    567  f225		       bd 6c fc 	      LDA	FontLookup,X	;4
    568  f228		       85 d0		      STA	ScoreD0	;3
    569  f22a
    570  f22a				   SpeedBar
    571  f22a		       a5 f0		      LDA	Player0SpeedL
    572  f22c		       29 e0		      AND	#%11100000	;2 Discard the last bits
    573  f22e		       18		      CLC
    574  f22f		       2a		      ROL		;First goes into carry
    575  f230		       2a		      ROL
    576  f231		       2a		      ROL
    577  f232		       2a		      ROL
    578  f233		       85 b0		      STA	Tmp0
    579  f235		       a5 f2		      LDA	Player0SpeedH
    580  f237		       0a		      ASL
    581  f238		       0a		      ASL
    582  f239		       0a		      ASL
    583  f23a		       05 b0		      ORA	Tmp0
    584  f23c		       aa		      TAX		; 2
    585  f23d		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    586  f240		       85 d2		      STA	ScoreD2	;3
    587  f242
    588  f242				   DistanceCheckpointCount		; Will run all letters in the future
    589  f242		       a5 ba		      LDA	Traffic0Msb
    590  f244		       29 01		      AND	#%00000001
    591  f246		       0a		      ASL
    592  f247		       0a		      ASL
    593  f248		       0a		      ASL
    594  f249		       0a		      ASL
    595  f24a		       85 b0		      STA	Tmp0
    596  f24c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    597  f24e		       29 f0		      AND	#%11110000	;2
    598  f250		       4a		      LSR
    599  f251		       4a		      LSR
    600  f252		       4a		      LSR
    601  f253		       4a		      LSR
    602  f254		       05 b0		      ORA	Tmp0
    603  f256		       aa		      TAX		; 2
    604  f257		       bd 6c fc 	      LDA	FontLookup,X	;4 
    605  f25a		       85 d3		      STA	ScoreD3	;3
    606  f25c
    607  f25c				   DistanceBar		; 16 subdivisions per checkpoint
    608  f25c		       a5 92		      LDA	TrafficOffset0 + 2	;3
    609  f25e		       29 0f		      AND	#%00001111	;2
    610  f260		       aa		      TAX		; 2
    611  f261		       bd 8c fc 	      LDA	BarLookup,X	;4 
    612  f264		       85 d4		      STA	ScoreD4	;3
    613  f266
    614  f266				   EndDrawDistance
    615  f266		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    616  f269
    617  f269				   PrintCheckpoint
    618  f269		       a2 00		      LDX	#<CheckpointText
    619  f26b		       20 43 f7 	      JSR	PrintStaticText
    620  f26e		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    621  f271				   PrintStartGame
    622  f271		       a2 23		      LDX	#<GoText
    623  f273		       20 43 f7 	      JSR	PrintStaticText
    624  f276		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    625  f279
    626  f279				   PrintHellwayLeft
    627  f279		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    628  f27b		       30 08		      BMI	ContinueWithDefaultLeftText
    629  f27d				   Player0IsReady
    630  f27d		       a2 28		      LDX	#<ReadyText
    631  f27f		       20 43 f7 	      JSR	PrintStaticText
    632  f282		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    633  f285				   ContinueWithDefaultLeftText
    634  f285		       a5 8d		      LDA	FrameCount1
    635  f287		       29 01		      AND	#1
    636  f289		       d0 05		      BNE	PrintCreditsLeft
    637  f28b		       a2 05		      LDX	#<HellwayLeftText
    638  f28d		       4c 92 f2 	      JMP	PrintGameMode
    639  f290				   PrintCreditsLeft
    640  f290		       a2 0f		      LDX	#<OpbText
    641  f292
    642  f292				   PrintGameMode
    643  f292		       20 43 f7 	      JSR	PrintStaticText
    644  f295		       a6 c6		      LDX	GameMode
    645  f297		       bd 6c fc 	      LDA	FontLookup,X	;4 
    646  f29a		       85 d0		      STA	ScoreD0	;3
    647  f29c		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    648  f29f
    649  f29f				   RightScoreWrite
    650  f29f		       a5 bd		      LDA	GameStatus
    651  f2a1		       f0 64		      BEQ	PrintHellwayRight
    652  f2a3		       a5 c9		      LDA	ScoreFontColor
    653  f2a5		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    654  f2a7		       f0 c8		      BEQ	PrintStartGame
    655  f2a9		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    656  f2ab		       f0 79		      BEQ	PrintGameOver
    657  f2ad
    658  f2ad				   OpDigit0Timer
    659  f2ad		       a5 b9		      LDA	OpCountdownTimer	;3
    660  f2af		       85 b0		      STA	Tmp0
    661  f2b1		       20 1e f8 	      JSR	BINBCD8
    662  f2b4							; LDA Tmp1 Also returned in A
    663  f2b4		       29 0f		      AND	#%00001111	;2
    664  f2b6		       aa		      TAX		; 2
    665  f2b7		       bd 6c fc 	      LDA	FontLookup,X	;4 
    666  f2ba		       85 d4		      STA	ScoreD4	;3
    667  f2bc
    668  f2bc				   OpDigit1Timer
    669  f2bc		       a5 b1		      LDA	Tmp1	;3
    670  f2be		       4a		      LSR		; 2
    671  f2bf		       4a		      LSR		; 2
    672  f2c0		       4a		      LSR		; 2
    673  f2c1		       4a		      LSR		; 2
    674  f2c2		       aa		      TAX		; 2
    675  f2c3		       bd 6c fc 	      LDA	FontLookup,X	;4
    676  f2c6		       85 d3		      STA	ScoreD3	;3
    677  f2c8
    678  f2c8				   OpSpeedBar
    679  f2c8		       a5 f1		      LDA	Player1SpeedL
    680  f2ca		       29 e0		      AND	#%11100000	;2 Discard the last bits
    681  f2cc		       18		      CLC
    682  f2cd		       2a		      ROL		;First goes into carry
    683  f2ce		       2a		      ROL
    684  f2cf		       2a		      ROL
    685  f2d0		       2a		      ROL
    686  f2d1		       85 b0		      STA	Tmp0
    687  f2d3		       a5 f3		      LDA	Player1SpeedH
    688  f2d5		       0a		      ASL
    689  f2d6		       0a		      ASL
    690  f2d7		       0a		      ASL
    691  f2d8		       05 b0		      ORA	Tmp0
    692  f2da		       aa		      TAX		; 2
    693  f2db		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    694  f2de		       85 d2		      STA	ScoreD2	;3
    695  f2e0
    696  f2e0				   OpDistanceCheckpointCount
    697  f2e0		       a5 bb		      LDA	OpTraffic0Msb
    698  f2e2		       29 01		      AND	#%00000001
    699  f2e4		       0a		      ASL
    700  f2e5		       0a		      ASL
    701  f2e6		       0a		      ASL
    702  f2e7		       0a		      ASL
    703  f2e8		       85 b0		      STA	Tmp0
    704  f2ea		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    705  f2ec		       29 f0		      AND	#%11110000	;2
    706  f2ee		       4a		      LSR
    707  f2ef		       4a		      LSR
    708  f2f0		       4a		      LSR
    709  f2f1		       4a		      LSR
    710  f2f2		       05 b0		      ORA	Tmp0
    711  f2f4		       aa		      TAX		; 2
    712  f2f5		       bd 6c fc 	      LDA	FontLookup,X	;4 
    713  f2f8		       85 d1		      STA	ScoreD1	;3
    714  f2fa
    715  f2fa				   OpDistanceBar		; 16 subdivisions per checkpoint
    716  f2fa		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    717  f2fc		       29 0f		      AND	#%00001111	;2
    718  f2fe		       aa		      TAX		; 2
    719  f2ff		       bd 8c fc 	      LDA	BarLookup,X	;4 
    720  f302		       85 d0		      STA	ScoreD0	;3
    721  f304		       4c 34 f3 	      JMP	RightScoreWriteEnd
    722  f307
    723  f307				   PrintHellwayRight
    724  f307		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    725  f309		       30 08		      BMI	ContinueWithDefaultRightText
    726  f30b				   Player1IsReady
    727  f30b		       a2 28		      LDX	#<ReadyText
    728  f30d		       20 43 f7 	      JSR	PrintStaticText
    729  f310		       4c 34 f3 	      JMP	RightScoreWriteEnd	;3
    730  f313				   ContinueWithDefaultRightText
    731  f313		       a5 8d		      LDA	FrameCount1
    732  f315		       29 01		      AND	#1
    733  f317		       d0 05		      BNE	PrintCreditsRight
    734  f319		       a2 0a		      LDX	#<HellwayRightText
    735  f31b		       4c 20 f3 	      JMP	PrintRightIntro
    736  f31e				   PrintCreditsRight
    737  f31e		       a2 14		      LDX	#<YearText
    738  f320				   PrintRightIntro
    739  f320		       20 43 f7 	      JSR	PrintStaticText
    740  f323		       4c 34 f3 	      JMP	RightScoreWriteEnd
    741  f326				   PrintGameOver
    742  f326		       a5 8c		      LDA	FrameCount0
    743  f328		       30 05		      BMI	PrintOverText
    744  f32a		       a2 19		      LDX	#<GameText
    745  f32c		       4c 31 f3 	      JMP	StoreGameOverText
    746  f32f				   PrintOverText
    747  f32f		       a2 1e		      LDX	#<OverText
    748  f331				   StoreGameOverText
    749  f331		       20 43 f7 	      JSR	PrintStaticText
    750  f334				   RightScoreWriteEnd
    751  f334
    752  f334
    753  f334				   ScoreBackgroundColor
    754  f334		       a2 00		      LDX	#0
    755  f336		       ad 82 02 	      LDA	SWCHB
    756  f339		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    757  f33b		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    758  f33d		       f0 04		      BEQ	BlackAndWhiteScoreBg
    759  f33f		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    760  f341		       a2 03		      LDX	#BACKGROUND_COLOR
    761  f343				   BlackAndWhiteScoreBg
    762  f343		       85 b2		      STA	Tmp2	; Score Background
    763  f345		       86 b3		      STX	Tmp3	; Traffic Background
    764  f347
    765  f347				   ConfigurePFForScore
    766  f347							;LDA #SCORE_BACKGROUND_COLOR; Done above
    767  f347		       85 09		      STA	COLUBK
    768  f349		       20 95 f6 	      JSR	ClearAll
    769  f34c		       a9 02		      LDA	#%00000010	; Score mode
    770  f34e		       85 0a		      STA	CTRLPF
    771  f350		       a5 de		      LDA	TextSide	;3
    772  f352		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    773  f354				   RightScoreOn
    774  f354		       a5 ca		      LDA	OpScoreFontColor
    775  f356		       85 07		      STA	COLUP1
    776  f358		       a5 b2		      LDA	Tmp2
    777  f35a		       85 06		      STA	COLUP0
    778  f35c		       4c 67 f3 	      JMP	CallWaitForVblankEnd
    779  f35f				   LeftScoreOn
    780  f35f		       a5 c9		      LDA	ScoreFontColor
    781  f361		       85 06		      STA	COLUP0
    782  f363		       a5 b2		      LDA	Tmp2
    783  f365		       85 07		      STA	COLUP1
    784  f367
    785  f367							; After here we are going to update the screen, No more heavy code
    786  f367				   CallWaitForVblankEnd
    787  f367		       20 bd f7 	      JSR	WaitForVblankEnd
    788  f36a
    789  f36a				   DrawScoreHud
    790  f36a		       20 61 f7 	      JSR	PrintScore
    791  f36d
    792  f36d							; 4 lines to go crazy
    793  f36d		       85 02		      STA	WSYNC
    794  f36f							;STA HMOVE
    795  f36f
    796  f36f		       85 02		      STA	WSYNC
    797  f371		       85 2a		      STA	HMOVE
    798  f373
    799  f373				   PrepareForTraffic
    800  f373		       20 ab f6 	      JSR	ClearPF	; 32
    801  f376
    802  f376		       85 02		      STA	WSYNC
    803  f378		       85 2a		      STA	HMOVE
    804  f37a		       85 02		      STA	WSYNC
    805  f37c		       85 2a		      STA	HMOVE
    806  f37e
    807  f37e		       a9 30		      LDA	#%00110000	; 2 Score mode
    808  f380		       85 0a		      STA	CTRLPF	;3
    809  f382
    810  f382		       a5 8c		      LDA	FrameCount0	;3
    811  f384		       29 01		      AND	#%00000001	;2
    812  f386		       aa		      TAX		;2
    813  f387		       b5 c2		      LDA	TrafficColor,X	;4
    814  f389		       85 08		      STA	COLUPF	;3
    815  f38b
    816  f38b		       a9 96		      LDA	#PLAYER1_COLOR	;2
    817  f38d		       85 07		      STA	COLUP1	;3
    818  f38f
    819  f38f		       a5 c9		      LDA	ScoreFontColor	;3
    820  f391		       85 06		      STA	COLUP0	;3
    821  f393
    822  f393		       a5 ca		      LDA	OpScoreFontColor	;3
    823  f395		       85 07		      STA	COLUP1	;3
    824  f397
    825  f397		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    826  f399
      0  f399					      SLEEP	24	; Keep the backround color more time, only needed if still support non dark mode
      1  f399				   .CYCLES    SET	24
      2  f399
      3  f399				  -	      IF	.CYCLES < 2
      4  f399				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f399				  -	      ERR
      6  f399					      ENDIF
      7  f399
      8  f399				  -	      IF	.CYCLES & 1
      9  f399				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f399				  -	      nop	0
     11  f399				  -	      ELSE
     12  f399				  -	      bit	VSYNC
     13  f399				  -	      ENDIF
     14  f399				  -.CYCLES    SET	.CYCLES - 3
     15  f399					      ENDIF
     16  f399
     17  f399					      REPEAT	.CYCLES / 2
     18  f399		       ea		      nop
     17  f399					      REPEND
     18  f39a		       ea		      nop
     17  f39a					      REPEND
     18  f39b		       ea		      nop
     17  f39b					      REPEND
     18  f39c		       ea		      nop
     17  f39c					      REPEND
     18  f39d		       ea		      nop
     17  f39d					      REPEND
     18  f39e		       ea		      nop
     17  f39e					      REPEND
     18  f39f		       ea		      nop
     17  f39f					      REPEND
     18  f3a0		       ea		      nop
     17  f3a0					      REPEND
     18  f3a1		       ea		      nop
     17  f3a1					      REPEND
     18  f3a2		       ea		      nop
     17  f3a2					      REPEND
     18  f3a3		       ea		      nop
     17  f3a3					      REPEND
     18  f3a4		       ea		      nop
     19  f3a5					      REPEND
    828  f3a5
    829  f3a5		       a6 b3		      LDX	Tmp3	; Background color.
    830  f3a7
    831  f3a7		       a5 8c		      LDA	FrameCount0	;Brach flag
    832  f3a9		       29 01		      AND	#%00000001
    833  f3ab
    834  f3ab		       86 09		      STX	COLUBK	;3
    835  f3ad		       d0 05		      BNE	OpDrawCache	;2
    836  f3af		       4c 6e f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    837  f3b2							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    838  f3b2
    839  f3b2							;main scanline loop...
    840  f3b2				   OpScanLoop
    841  f3b2		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    842  f3b4
    843  f3b4							;Start of next line!			
    844  f3b4				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    845  f3b4
    846  f3b4		       a5 80		      LDA	GRP0Cache	;3
    847  f3b6		       85 1b		      STA	GRP0	;3
    848  f3b8
    849  f3b8		       a5 84		      LDA	GRP1Cache	;3
    850  f3ba		       85 1c		      STA	GRP1	;3
    851  f3bc
    852  f3bc		       a5 85		      LDA	ENABLCache	;3
    853  f3be		       85 1f		      STA	ENABL	;3
    854  f3c0
    855  f3c0		       a5 86		      LDA	ENAM0Cache	;3
    856  f3c2		       85 1d		      STA	ENAM0	;3
    857  f3c4
    858  f3c4		       a5 87		      LDA	ENAM1Cache	;3
    859  f3c6		       85 1e		      STA	ENAM1	;3
    860  f3c8
    861  f3c8		       a5 81		      LDA	PF0Cache	;3
    862  f3ca		       85 0d		      STA	PF0	;3
    863  f3cc
    864  f3cc		       a9 00		      LDA	#0	;2
    865  f3ce							;STA PF0	     ;3
    866  f3ce		       85 80		      STA	GRP0Cache	;3
    867  f3d0		       85 86		      STA	ENAM0Cache	;3
    868  f3d2		       85 85		      STA	ENABLCache	;3
    869  f3d4		       85 87		      STA	ENAM1Cache	; 3
    870  f3d6							;STA GRP1Cache ;3
    871  f3d6		       85 0d		      STA	PF0	;3
    872  f3d8							;STA PF2	     ;3
    873  f3d8
    874  f3d8		       a5 83		      LDA	PF2Cache	;3
    875  f3da		       85 0f		      STA	PF2	;3
    876  f3dc
    877  f3dc				   OpDrawCar0
    878  f3dc		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    879  f3de		       b0 04		      BCS	OpSkipDrawCar	;2
    880  f3e0		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    881  f3e2		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    882  f3e4				   OpSkipDrawCar
    883  f3e4
    884  f3e4							;BEQ DrawTraffic3
    885  f3e4				   OpDrawTraffic1		; 33
    886  f3e4		       98		      TYA		; 2
    887  f3e5		       18		      CLC		; 2 
    888  f3e6		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    889  f3e8		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    890  f3ea		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    891  f3ec		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    892  f3ee		       4c f3 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    893  f3f1				   OpEorOffsetWithCarry
    894  f3f1		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    895  f3f3				   OpAfterEorOffsetWithCarry		;17
    896  f3f3		       aa		      TAX		;2
    897  f3f4		       bd 00 fe 	      LDA	AesTable,X	; 4
    898  f3f7		       c5 bf		      CMP	OpTrafficChance	;3
    899  f3f9		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    900  f3fb		       a9 ff		      LDA	#$FF	;2
    901  f3fd		       85 86		      STA	ENAM0Cache	;3
    902  f3ff				   OpFinishDrawTraffic1
    903  f3ff
    904  f3ff				   OpErasePF2
    905  f3ff		       a9 00		      LDA	#0
    906  f401		       85 0f		      STA	PF2
    907  f403
    908  f403				   OpDrawTraffic2		; 33
    909  f403		       98		      TYA		; 2
    910  f404		       18		      CLC		; 2 
    911  f405		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    912  f407		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    913  f409		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    914  f40b		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    915  f40d		       4c 12 f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    916  f410				   OpEorOffsetWithCarry2
    917  f410		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    918  f412				   OpAfterEorOffsetWithCarry2		;17
    919  f412		       aa		      TAX		;2
    920  f413		       bd 00 fe 	      LDA	AesTable,X	; 4
    921  f416		       c5 bf		      CMP	OpTrafficChance	;3
    922  f418		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    923  f41a		       a9 02		      LDA	#%00000010	;2
    924  f41c		       85 85		      STA	ENABLCache	;3
    925  f41e				   OpFinishDrawTraffic2
    926  f41e
    927  f41e							;STA WSYNC ;65 / 137
    928  f41e
    929  f41e							; LDA Tmp0 ; Flicker this line if drawing car
    930  f41e							; BEQ FinishDrawTraffic4
    931  f41e				   OpDrawTraffic3		; 33
    932  f41e		       98		      TYA		; 2
    933  f41f		       18		      CLC		; 2 
    934  f420		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    935  f422		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    936  f424		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    937  f426		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    938  f428		       4c 2d f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    939  f42b				   OpEorOffsetWithCarry3
    940  f42b		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    941  f42d				   OpAfterEorOffsetWithCarry3		;17
    942  f42d		       aa		      TAX		;2
    943  f42e		       bd 00 fe 	      LDA	AesTable,X	; 4
    944  f431		       c5 bf		      CMP	OpTrafficChance	;3
    945  f433		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    946  f435		       a9 02		      LDA	#%00000010	;2
    947  f437		       85 87		      STA	ENAM1Cache
    948  f439				   OpFinishDrawTraffic3
    949  f439
    950  f439				   OpDrawOponent		;26
    951  f439		       84 b0		      STY	Tmp0	;3
    952  f43b		       a4 cf		      LDY	OpponentLine	;3
    953  f43d		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    954  f43f		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    955  f441				   OpDrawOpponent
    956  f441		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    957  f443		       85 80		      STA	GRP0Cache	;3
    958  f445		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    959  f447		       a4 b0		      LDY	Tmp0	;3
    960  f449		       4c 5d f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    961  f44c				   OpSkipDrawOpponent
    962  f44c		       c6 cf		      DEC	OpponentLine	;5
    963  f44e		       a4 b0		      LDY	Tmp0	;3
    964  f450
    965  f450
    966  f450				   OpDrawTraffic0		; 21 2pe
    967  f450		       98		      TYA		; 2
    968  f451		       18		      CLC		; 2 
    969  f452		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    970  f454		       29 08		      AND	#%00001000	;2
    971  f456		       f0 05		      BEQ	OpHasNoBorderP0	;3
    972  f458				   OpHasBorderP0
    973  f458		       a9 70		      LDA	#%01110000	; 2
    974  f45a		       4c 5f f4 	      JMP	OpStoreBorderP0	; 3
    975  f45d				   OpHasNoBorderP0
    976  f45d		       a9 00		      LDA	#0	; 2
    977  f45f				   OpStoreBorderP0
    978  f45f		       85 81		      STA	PF0Cache	; 3
    979  f461		       85 83		      STA	PF2Cache	; 3
    980  f463
    981  f463				   OpSkipDrawTraffic0
    982  f463
    983  f463				   OpWhileScanLoop
    984  f463		       88		      DEY		;2
    985  f464		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    986  f466		       4c b2 f3 	      JMP	OpScanLoop	;3
    987  f469				   OpFinishScanLoop		; 7 209 of 222
    988  f469		       4c 21 f5 	      JMP	FinishScanLoop
    989  f46c
    990  f46c							;main scanline loop...
    991  f46c				   ScanLoop
    992  f46c		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    993  f46e
    994  f46e							;Start of next line!			
    995  f46e				   DrawCache		;63 Is the last line going to the top of the next frame?
    996  f46e		       a5 81		      LDA	PF0Cache	;3
    997  f470		       85 0d		      STA	PF0	;3
    998  f472
    999  f472		       a5 80		      LDA	GRP0Cache	;3
   1000  f474		       85 1b		      STA	GRP0	;3
   1001  f476
   1002  f476		       a5 84		      LDA	GRP1Cache	;3
   1003  f478		       85 1c		      STA	GRP1	;3
   1004  f47a
   1005  f47a		       a5 86		      LDA	ENAM0Cache	;3
   1006  f47c		       85 1d		      STA	ENAM0	;3
   1007  f47e
   1008  f47e		       a5 85		      LDA	ENABLCache	;3
   1009  f480		       85 1f		      STA	ENABL	;3
   1010  f482
   1011  f482		       a5 87		      LDA	ENAM1Cache	;3
   1012  f484		       85 1e		      STA	ENAM1	;3
   1013  f486
   1014  f486		       a5 83		      LDA	PF2Cache	;3
   1015  f488		       85 0f		      STA	PF2	;3
   1016  f48a
   1017  f48a		       a9 00		      LDA	#0	;2
   1018  f48c		       85 0d		      STA	PF0	;3
   1019  f48e		       85 84		      STA	GRP1Cache	;3
   1020  f490		       85 85		      STA	ENABLCache	;3
   1021  f492		       85 86		      STA	ENAM0Cache	;3
   1022  f494		       85 87		      STA	ENAM1Cache	; 3
   1023  f496							;STA GRP0Cache
   1024  f496		       85 0f		      STA	PF2	;3
   1025  f498
   1026  f498				   DrawCar0
   1027  f498		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1028  f49a		       b0 04		      BCS	SkipDrawCar	;2
   1029  f49c		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1030  f49e		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1031  f4a0				   SkipDrawCar
   1032  f4a0
   1033  f4a0							;BEQ DrawTraffic3
   1034  f4a0				   DrawTraffic1 		; 33
   1035  f4a0		       98		      TYA		; 2
   1036  f4a1		       18		      CLC		; 2 
   1037  f4a2		       65 95		      ADC	TrafficOffset1 + 1	;3
   1038  f4a4		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1039  f4a6		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1040  f4a8		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1041  f4aa		       4c af f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1042  f4ad				   EorOffsetWithCarry
   1043  f4ad		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1044  f4af				   AfterEorOffsetWithCarry		;17
   1045  f4af		       aa		      TAX		;2
   1046  f4b0		       bd 00 fe 	      LDA	AesTable,X	; 4
   1047  f4b3		       c5 be		      CMP	TrafficChance	;3
   1048  f4b5		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1049  f4b7		       a9 ff		      LDA	#$FF	;2
   1050  f4b9		       85 86		      STA	ENAM0Cache	;3
   1051  f4bb				   FinishDrawTraffic1
   1052  f4bb
   1053  f4bb				   DrawTraffic2 		; 33
   1054  f4bb		       98		      TYA		; 2
   1055  f4bc		       18		      CLC		; 2 
   1056  f4bd		       65 99		      ADC	TrafficOffset2 + 1	;3
   1057  f4bf		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1058  f4c1		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1059  f4c3		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1060  f4c5		       4c ca f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1061  f4c8				   EorOffsetWithCarry2
   1062  f4c8		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1063  f4ca				   AfterEorOffsetWithCarry2		;17
   1064  f4ca		       aa		      TAX		;2
   1065  f4cb		       bd 00 fe 	      LDA	AesTable,X	; 4
   1066  f4ce		       c5 be		      CMP	TrafficChance	;3
   1067  f4d0		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1068  f4d2		       a9 02		      LDA	#%00000010	;2
   1069  f4d4		       85 85		      STA	ENABLCache	;3
   1070  f4d6				   FinishDrawTraffic2
   1071  f4d6
   1072  f4d6							;STA WSYNC ;65 / 137
   1073  f4d6
   1074  f4d6							; LDA Tmp0 ; Flicker this line if drawing car
   1075  f4d6							; BEQ FinishDrawTraffic4
   1076  f4d6				   DrawTraffic3 		; 33
   1077  f4d6		       98		      TYA		; 2
   1078  f4d7		       18		      CLC		; 2 
   1079  f4d8		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1080  f4da		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1081  f4dc		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1082  f4de		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1083  f4e0		       4c e5 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1084  f4e3				   EorOffsetWithCarry3
   1085  f4e3		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1086  f4e5				   AfterEorOffsetWithCarry3		;17
   1087  f4e5		       aa		      TAX		;2
   1088  f4e6		       bd 00 fe 	      LDA	AesTable,X	; 4
   1089  f4e9		       c5 be		      CMP	TrafficChance	;3
   1090  f4eb		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1091  f4ed		       a9 02		      LDA	#%00000010	;2
   1092  f4ef		       85 87		      STA	ENAM1Cache
   1093  f4f1				   FinishDrawTraffic3
   1094  f4f1
   1095  f4f1
   1096  f4f1				   DrawOponent		;26
   1097  f4f1		       84 b0		      STY	Tmp0	;3
   1098  f4f3		       a4 cf		      LDY	OpponentLine	;3
   1099  f4f5		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1100  f4f7		       b0 0b		      BCS	SkipDrawOpponent	;2
   1101  f4f9				   DrawOpponent
   1102  f4f9		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1103  f4fb		       85 84		      STA	GRP1Cache	;3
   1104  f4fd		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1105  f4ff		       a4 b0		      LDY	Tmp0	;3
   1106  f501		       4c 15 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1107  f504				   SkipDrawOpponent
   1108  f504		       c6 cf		      DEC	OpponentLine	;5
   1109  f506		       a4 b0		      LDY	Tmp0	;3
   1110  f508
   1111  f508				   DrawTraffic0 		; 21 2pe
   1112  f508		       98		      TYA		; 2
   1113  f509		       18		      CLC		; 2 
   1114  f50a		       65 91		      ADC	TrafficOffset0 + 1	;3
   1115  f50c		       29 08		      AND	#%00001000	;2
   1116  f50e		       f0 05		      BEQ	HasNoBorderP0	;3
   1117  f510				   HasBorderP0
   1118  f510		       a9 70		      LDA	#%01110000	; 2
   1119  f512		       4c 17 f5 	      JMP	StoreBorderP0	; 3
   1120  f515				   HasNoBorderP0
   1121  f515		       a9 00		      LDA	#0	; 2
   1122  f517				   StoreBorderP0
   1123  f517		       85 81		      STA	PF0Cache	; 3
   1124  f519		       85 83		      STA	PF2Cache	; 3
   1125  f51b
   1126  f51b				   SkipDrawTraffic0
   1127  f51b
   1128  f51b				   WhileScanLoop
   1129  f51b		       88		      DEY		;2
   1130  f51c		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1131  f51e		       4c 6c f4 	      JMP	ScanLoop	;3
   1132  f521				   FinishScanLoop		; 7 209 of 222
   1133  f521
   1134  f521		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1135  f523		       20 ba f6 	      JSR	LoadAll
   1136  f526		       85 02		      STA	WSYNC	; do stuff!
   1137  f528		       85 02		      STA	WSYNC
   1138  f52a		       85 02		      STA	WSYNC
   1139  f52c
   1140  f52c				   PrepareOverscan
   1141  f52c		       a9 02		      LDA	#2
   1142  f52e		       85 02		      STA	WSYNC
   1143  f530							;STA HMOVE	; HMOVE 10
   1144  f530		       85 01		      STA	VBLANK
   1145  f532
   1146  f532		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1147  f534		       8d 96 02 	      STA	TIM64T
   1148  f537
   1149  f537		       85 2b		      STA	HMCLR	; Before we process car movement
   1150  f539							;Read Fire Button before, will make it start the game for now.
   1151  f539				   StartGame
   1152  f539		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1153  f53b		       25 0d		      AND	INPT5	;3 player 1
   1154  f53d		       30 3a		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1155  f53f		       a5 8c		      LDA	FrameCount0
   1156  f541		       29 01		      AND	#%00000001
   1157  f543		       d0 34		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1158  f545		       a5 bd		      LDA	GameStatus	;3
   1159  f547		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1160  f549		       d0 2e		      BNE	SkipGameStart
   1161  f54b		       a5 c6		      LDA	GameMode
   1162  f54d		       c9 10		      CMP	#MAX_GAME_MODE
   1163  f54f		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1164  f551		       a9 00		      LDA	#0
   1165  f553		       85 c6		      STA	GameMode
   1166  f555		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1167  f557		       85 bc		      STA	SwitchDebounceCounter
   1168  f559		       4c 79 f5 	      JMP	SkipGameStart
   1169  f55c				   SetGameRunningIfBothPressing
   1170  f55c		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1171  f55e		       05 0d		      ORA	INPT5	;3 player 1
   1172  f560		       30 17		      BMI	SkipGameStart
   1173  f562				   SetGameRunning
   1174  f562		       e6 bd		      INC	GameStatus
   1175  f564		       a9 00		      LDA	#0	;
   1176  f566		       85 8c		      STA	FrameCount0
   1177  f568		       85 8d		      STA	FrameCount1
   1178  f56a		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1179  f56c		       85 c9		      STA	ScoreFontColor
   1180  f56e		       85 ca		      STA	OpScoreFontColor
   1181  f570		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1182  f572		       85 cb		      STA	ScoreFontColorHoldChange
   1183  f574		       85 cc		      STA	OpScoreFontColorHoldChange
   1184  f576		       4c ed f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1185  f579				   SkipGameStart
   1186  f579
   1187  f579				   ReadSwitches
   1188  f579		       a6 bc		      LDX	SwitchDebounceCounter
   1189  f57b		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1190  f57d		       a9 01		      LDA	#%00000001
   1191  f57f		       2c 82 02 	      BIT	SWCHB
   1192  f582		       d0 07		      BNE	SkipReset
   1193  f584		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1194  f586		       85 bc		      STA	SwitchDebounceCounter
   1195  f588		       4c f5 f5 	      JMP	OverScanWaitBeforeReset
   1196  f58b				   SkipReset
   1197  f58b
   1198  f58b				   GameModeSelect
   1199  f58b		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1200  f58d		       d0 22		      BNE	SkipGameSelect
   1201  f58f		       a2 00		      LDX	#0
   1202  f591		       20 e6 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1203  f594		       e8		      INX
   1204  f595		       20 e6 f6 	      JSR	ConfigureDifficulty
   1205  f598				   ContinueGameSelect
   1206  f598		       a9 02		      LDA	#%00000010
   1207  f59a		       2c 82 02 	      BIT	SWCHB
   1208  f59d		       d0 12		      BNE	SkipGameSelect
   1209  f59f		       a6 c6		      LDX	GameMode
   1210  f5a1		       e0 10		      CPX	#MAX_GAME_MODE
   1211  f5a3		       f0 04		      BEQ	ResetGameMode
   1212  f5a5		       e8		      INX
   1213  f5a6		       4c ab f5 	      JMP	StoreGameMode
   1214  f5a9				   ResetGameMode
   1215  f5a9		       a2 00		      LDX	#0
   1216  f5ab				   StoreGameMode
   1217  f5ab		       86 c6		      STX	GameMode
   1218  f5ad		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1219  f5af		       85 bc		      STA	SwitchDebounceCounter
   1220  f5b1				   SkipGameSelect
   1221  f5b1		       4c b6 f5 	      JMP	EndReadSwitches
   1222  f5b4				   DecrementSwitchDebounceCounter
   1223  f5b4		       c6 bc		      DEC	SwitchDebounceCounter
   1224  f5b6				   EndReadSwitches
   1225  f5b6
   1226  f5b6				   DoNotTurnBeforeStart
   1227  f5b6							;STA HMCLR
   1228  f5b6		       a5 bd		      LDA	GameStatus
   1229  f5b8		       f0 33		      BEQ	OverScanWait
   1230  f5ba
   1231  f5ba							; Last thing, will overrride hmove
   1232  f5ba				   CallTestColisionAndMove
   1233  f5ba		       a2 00		      LDX	#0	; Player 0
   1234  f5bc							; Colision with traffic, each player check different flags,
   1235  f5bc		       a5 8c		      LDA	FrameCount0
   1236  f5be		       29 01		      AND	#%00000001
   1237  f5c0		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1238  f5c2		       20 95 f8 	      JSR	IsOpponentColliding
   1239  f5c5		       05 01		      ORA	CXM1P
   1240  f5c7		       4a		      LSR
   1241  f5c8		       05 00		      ORA	CXM0P
   1242  f5ca		       05 02		      ORA	CXP0FB
   1243  f5cc							; ORA CXPPMM ; Collision between players will have its own rules
   1244  f5cc				   SkipColisionPlayer0		; Should not colide on opponent side.
   1245  f5cc		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1246  f5ce		       85 b2		      STA	Tmp2
   1247  f5d0		       20 a9 f8 	      JSR	TestCollisionAndMove
   1248  f5d3
   1249  f5d3		       e8		      INX		; player 1
   1250  f5d4		       a5 8c		      LDA	FrameCount0
   1251  f5d6		       29 01		      AND	#%00000001
   1252  f5d8		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1253  f5da		       20 95 f8 	      JSR	IsOpponentColliding
   1254  f5dd		       05 00		      ORA	CXM0P
   1255  f5df		       4a		      LSR
   1256  f5e0		       05 01		      ORA	CXM1P
   1257  f5e2		       05 03		      ORA	CXP1FB
   1258  f5e4				   SkipColisionPlayer1
   1259  f5e4		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1260  f5e6		       85 b2		      STA	Tmp2
   1261  f5e8		       20 a9 f8 	      JSR	TestCollisionAndMove
   1262  f5eb
   1263  f5eb				   ClearCollision
   1264  f5eb		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1265  f5ed
   1266  f5ed				   OverScanWait
   1267  f5ed		       ad 84 02 	      LDA	INTIM
   1268  f5f0		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1269  f5f2		       4c d6 f0 	      JMP	MainLoop
   1270  f5f5
   1271  f5f5				   OverScanWaitBeforeReset
   1272  f5f5		       ad 84 02 	      LDA	INTIM
   1273  f5f8		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1274  f5fa		       4c 14 f0 	      JMP	Start
   1275  f5fd
   1276  f5fd				   Subroutines
   1277  f5fd
   1278  f5fd							;X Player
   1279  f5fd							;Tmp1 TrafficOffset 2
   1280  f5fd				   ProcessSound
   1281  f5fd				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1282  f5fd		       b5 c9		      LDA	ScoreFontColor,X	;3
   1283  f5ff		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1284  f601		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1285  f603		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1286  f605		       f0 29		      BEQ	PlayCheckpoint	;2
   1287  f607		       b5 8e		      LDA	CollisionCounter,X	;3
   1288  f609		       c9 e0		      CMP	#$E0	;2
   1289  f60b		       b0 14		      BCS	PlayColision	;2
   1290  f60d		       b5 cd		      LDA	NextCheckpoint,X	;3
   1291  f60f		       38		      SEC		;2
   1292  f610		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1293  f612		       c9 02		      CMP	#$02	;2
   1294  f614		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1295  f616		       b5 b8		      LDA	CountdownTimer,X	; 3
   1296  f618		       f0 53		      BEQ	EngineSound	;2
   1297  f61a		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1298  f61c		       90 37		      BCC	PlayWarnTimeEnding	;4
   1299  f61e		       4c 6d f6 	      JMP	EngineSound	;3
   1300  f621				   PlayColision
   1301  f621		       a9 1f		      LDA	#31
   1302  f623		       95 17		      STA	AUDF0,X
   1303  f625		       a9 08		      LDA	#8
   1304  f627		       95 15		      STA	AUDC0,X
   1305  f629		       a9 08		      LDA	#8
   1306  f62b		       95 19		      STA	AUDV0,X
   1307  f62d		       4c 94 f6 	      JMP	EndSound
   1308  f630
   1309  f630				   PlayCheckpoint
   1310  f630		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1311  f632		       4a		      LSR		;2
   1312  f633		       4a		      LSR		;2
   1313  f634		       4a		      LSR		;2
   1314  f635		       95 17		      STA	AUDF0,X	;3
   1315  f637		       a9 0c		      LDA	#12	;2
   1316  f639		       95 15		      STA	AUDC0,X	;3
   1317  f63b		       a9 06		      LDA	#6	;2
   1318  f63d		       95 19		      STA	AUDV0,X	;3
   1319  f63f		       4c 94 f6 	      JMP	EndSound	;3
   1320  f642
   1321  f642				   PlayBeforeCheckpoint
   1322  f642		       a5 8c		      LDA	FrameCount0	;3
   1323  f644		       29 1c		      AND	#%00011100	;2
   1324  f646		       09 03		      ORA	#%00000011	;2
   1325  f648		       95 17		      STA	AUDF0,X	;3
   1326  f64a		       a9 0c		      LDA	#12	;2
   1327  f64c		       95 15		      STA	AUDC0,X	;3
   1328  f64e		       a9 03		      LDA	#3	;2
   1329  f650		       95 19		      STA	AUDV0,X	;3
   1330  f652		       4c 94 f6 	      JMP	EndSound	;3
   1331  f655
   1332  f655				   PlayWarnTimeEnding
   1333  f655		       a5 8c		      LDA	FrameCount0	;3
   1334  f657		       29 04		      AND	#%00000100	;2
   1335  f659		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1336  f65b		       18		      CLC		;2
   1337  f65c		       a9 0a		      LDA	#10	;2
   1338  f65e		       75 b8		      ADC	CountdownTimer,X	;2
   1339  f660		       95 17		      STA	AUDF0,X	;3
   1340  f662		       a9 0c		      LDA	#12	;2
   1341  f664		       95 15		      STA	AUDC0,X	;3
   1342  f666		       a9 03		      LDA	#3	;2
   1343  f668		       95 19		      STA	AUDV0,X	;3
   1344  f66a		       4c 94 f6 	      JMP	EndSound	;3
   1345  f66d
   1346  f66d				   EngineSound		;41
   1347  f66d		       a9 09		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1348  f66f		       95 19		      STA	AUDV0,X
   1349  f671		       b5 b8		      LDA	CountdownTimer,X	;3
   1350  f673		       f0 1b		      BEQ	EngineOff	;2
   1351  f675		       b4 d5		      LDY	Gear,X
   1352  f677		       b5 f0		      LDA	Player0SpeedL,X	;3
   1353  f679		       4a		      LSR		;2
   1354  f67a		       4a		      LSR		;2
   1355  f67b		       4a		      LSR		;2
   1356  f67c		       29 0f		      AND	#%00001111	;2
   1357  f67e		       85 b0		      STA	Tmp0	;3
   1358  f680		       b9 49 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1359  f683		       38		      SEC		;2
   1360  f684		       e5 b0		      SBC	Tmp0	;3
   1361  f686		       95 17		      STA	AUDF0,X	;3
   1362  f688		       b9 43 ff 	      LDA	EngineSoundType,Y	;4
   1363  f68b		       95 15		      STA	AUDC0,X	;3
   1364  f68d		       4c 94 f6 	      JMP	EndEngineSound	;3
   1365  f690				   EngineOff
   1366  f690				   MuteSound
   1367  f690		       a9 00		      LDA	#0
   1368  f692		       95 15		      STA	AUDC0,X
   1369  f694				   EndEngineSound
   1370  f694				   EndSound
   1371  f694		       60		      RTS
   1372  f695
   1373  f695				   ClearAll		; 58
   1374  f695		       a9 00		      LDA	#0	;2
   1375  f697		       85 1b		      STA	GRP0	;3
   1376  f699		       85 1c		      STA	GRP1	;3
   1377  f69b		       85 1f		      STA	ENABL	;3
   1378  f69d		       85 1d		      STA	ENAM0	;3
   1379  f69f		       85 1e		      STA	ENAM1	;3
   1380  f6a1		       85 80		      STA	GRP0Cache	;3
   1381  f6a3		       85 84		      STA	GRP1Cache	;3
   1382  f6a5		       85 85		      STA	ENABLCache	;3
   1383  f6a7		       85 86		      STA	ENAM0Cache	;3
   1384  f6a9		       85 87		      STA	ENAM1Cache	;3
   1385  f6ab
   1386  f6ab				   ClearPF		; 26
   1387  f6ab		       a9 00		      LDA	#0	;2
   1388  f6ad				   ClearPFSkipLDA0
   1389  f6ad		       85 0d		      STA	PF0	;3
   1390  f6af		       85 0e		      STA	PF1	;3
   1391  f6b1		       85 0f		      STA	PF2	;3	
   1392  f6b3		       85 81		      STA	PF0Cache	;3
   1393  f6b5		       85 82		      STA	PF1Cache	;3
   1394  f6b7		       85 83		      STA	PF2Cache	;3 
   1395  f6b9		       60		      RTS		;6
   1396  f6ba				   EndClearAll
   1397  f6ba
   1398  f6ba				   LoadAll		; 48
   1399  f6ba		       a5 81		      LDA	PF0Cache	;3
   1400  f6bc		       85 0d		      STA	PF0	;3
   1401  f6be
   1402  f6be		       a5 82		      LDA	PF1Cache	;3
   1403  f6c0		       85 0e		      STA	PF1	;3
   1404  f6c2
   1405  f6c2		       a5 83		      LDA	PF2Cache	;3
   1406  f6c4		       85 0f		      STA	PF2	;3
   1407  f6c6
   1408  f6c6		       a5 84		      LDA	GRP1Cache	;3
   1409  f6c8		       85 1c		      STA	GRP1	;3
   1410  f6ca
   1411  f6ca		       a5 85		      LDA	ENABLCache	;3
   1412  f6cc		       85 1f		      STA	ENABL	;3
   1413  f6ce
   1414  f6ce		       a5 86		      LDA	ENAM0Cache	;3
   1415  f6d0		       85 1d		      STA	ENAM0	;3
   1416  f6d2
   1417  f6d2		       a5 87		      LDA	ENAM1Cache	;3
   1418  f6d4		       85 1e		      STA	ENAM1	;3
   1419  f6d6
   1420  f6d6		       60		      RTS		;6
   1421  f6d7				   EndLoadAll
   1422  f6d7
   1423  f6d7				   NextDifficulty		;Is a SBR
   1424  f6d7		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1425  f6d9		       29 01		      AND	#%00000001
   1426  f6db		       d0 24		      BNE	CheckRandomDifficulty
   1427  f6dd
   1428  f6dd		       b5 c4		      LDA	CurrentDifficulty,X
   1429  f6df		       18		      CLC
   1430  f6e0		       69 01		      ADC	#1
   1431  f6e2		       29 03		      AND	#%00000011	; 0 to 3
   1432  f6e4		       95 c4		      STA	CurrentDifficulty,X
   1433  f6e6
   1434  f6e6				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1435  f6e6		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1436  f6e8		       b9 c5 ff 	      LDA	TrafficChanceTable,Y
   1437  f6eb		       95 be		      STA	TrafficChance,X
   1438  f6ed		       b9 c1 ff 	      LDA	TrafficColorTable,Y
   1439  f6f0		       95 c2		      STA	TrafficColor,X
   1440  f6f2
   1441  f6f2		       a5 c6		      LDA	GameMode	;
   1442  f6f4		       29 01		      AND	#%00000001
   1443  f6f6		       f0 03		      BEQ	UseNextDifficultyTime
   1444  f6f8		       4c fc f6 	      JMP	StoreDifficultyTime
   1445  f6fb				   UseNextDifficultyTime
   1446  f6fb		       c8		      INY
   1447  f6fc				   StoreDifficultyTime
   1448  f6fc		       b9 c9 ff 	      LDA	TrafficTimeTable,Y
   1449  f6ff		       95 c0		      STA	CheckpointTime,X
   1450  f701
   1451  f701				   CheckRandomDifficulty
   1452  f701		       a5 c6		      LDA	GameMode
   1453  f703		       29 08		      AND	#%00001000	; Random difficulties
   1454  f705		       f0 26		      BEQ	ReturnFromNextDifficulty
   1455  f707				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1456  f707		       a5 f4		      LDA	IsOpponentInFront
   1457  f709		       30 12		      BMI	UseOpponentChance
   1458  f70b		       a5 cf		      LDA	OpponentLine	; Same line
   1459  f70d		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1460  f70f		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1461  f711		       a4 8c		      LDY	FrameCount0
   1462  f713		       b9 00 fe 	      LDA	AesTable,Y
   1463  f716							;EOR TrafficChance, no need, lets make life simple
   1464  f716		       29 3f		      AND	#%00111111
   1465  f718		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1466  f71a		       4c 2d f7 	      JMP	ReturnFromNextDifficulty
   1467  f71d				   UseOpponentChance
   1468  f71d		       8a		      TXA
   1469  f71e		       49 01		      EOR	#%00000001	; Reverts the player
   1470  f720		       aa		      TAX
   1471  f721		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1472  f723		       85 b3		      STA	Tmp3
   1473  f725		       8a		      TXA
   1474  f726		       49 01		      EOR	#%00000001	; Restors the player
   1475  f728		       aa		      TAX
   1476  f729		       a5 b3		      LDA	Tmp3
   1477  f72b		       95 be		      STA	TrafficChance,X
   1478  f72d
   1479  f72d				   ReturnFromNextDifficulty
   1480  f72d		       60		      RTS
   1481  f72e
   1482  f72e				   DefaultOffsets
   1483  f72e		       a9 20		      LDA	#$20
   1484  f730		       85 96		      STA	TrafficOffset1 + 2
   1485  f732		       85 a6		      STA	OpTrafficOffset1 + 2
   1486  f734		       a9 40		      LDA	#$40
   1487  f736		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1488  f738		       85 aa		      STA	OpTrafficOffset2 + 2
   1489  f73a		       a9 60		      LDA	#$60
   1490  f73c		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1491  f73e		       85 ae		      STA	OpTrafficOffset3 + 2
   1492  f740		       a9 80		      LDA	#$80
   1493  f742		       60		      RTS
   1494  f743
   1495  f743				   PrintStaticText		; Preload X with the offset referent to StaticText
   1496  f743		       bd 00 ff 	      LDA	StaticText,X
   1497  f746		       85 d0		      STA	ScoreD0
   1498  f748		       e8		      INX
   1499  f749		       bd 00 ff 	      LDA	StaticText,X
   1500  f74c		       85 d1		      STA	ScoreD1
   1501  f74e		       e8		      INX
   1502  f74f		       bd 00 ff 	      LDA	StaticText,X
   1503  f752		       85 d2		      STA	ScoreD2
   1504  f754		       e8		      INX
   1505  f755		       bd 00 ff 	      LDA	StaticText,X
   1506  f758		       85 d3		      STA	ScoreD3
   1507  f75a		       e8		      INX
   1508  f75b		       bd 00 ff 	      LDA	StaticText,X
   1509  f75e		       85 d4		      STA	ScoreD4
   1510  f760		       60		      RTS
   1511  f761
   1512  f761				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1513  f761		       a2 00		      LDX	#0
   1514  f763		       a0 04		      LDY	#FONT_OFFSET
   1515  f765
   1516  f765				   ScoreLoop		; 20 
   1517  f765		       85 02		      STA	WSYNC	;2
   1518  f767		       85 2a		      STA	HMOVE
   1519  f769
   1520  f769		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1521  f76b		       85 0d		      STA	PF0	;3
   1522  f76d
   1523  f76d		       a5 82		      LDA	PF1Cache	;3
   1524  f76f		       85 0e		      STA	PF1	;3
   1525  f771
   1526  f771		       a5 83		      LDA	PF2Cache	;3
   1527  f773		       85 0f		      STA	PF2	;3
   1528  f775
   1529  f775				   DrawScoreD0		; 15
   1530  f775		       a6 d0		      LDX	ScoreD0	; 3
   1531  f777		       bd 00 fd 	      LDA	Font,X	;4
   1532  f77a		       85 81		      STA	PF0Cache	;3
   1533  f77c		       c6 d0		      DEC	ScoreD0	;5
   1534  f77e
   1535  f77e				   DrawScoreD1		; 23	
   1536  f77e		       a6 d1		      LDX	ScoreD1	; 3
   1537  f780		       bd 00 fd 	      LDA	Font,X	;4
   1538  f783		       0a		      ASL		;2
   1539  f784		       0a		      ASL		;2
   1540  f785		       0a		      ASL		;2
   1541  f786		       0a		      ASL		;2
   1542  f787		       85 82		      STA	PF1Cache	;3
   1543  f789		       c6 d1		      DEC	ScoreD1	;5
   1544  f78b
   1545  f78b				   DrawScoreD2		; 20
   1546  f78b		       a6 d2		      LDX	ScoreD2	; 3
   1547  f78d		       bd 00 fd 	      LDA	Font,X	;4
   1548  f790		       29 0f		      AND	#%00001111	;2
   1549  f792		       05 82		      ORA	PF1Cache	;3
   1550  f794		       85 82		      STA	PF1Cache	;3
   1551  f796		       c6 d2		      DEC	ScoreD2	;5
   1552  f798
   1553  f798				   DrawScoreD3		; 23
   1554  f798		       a6 d3		      LDX	ScoreD3	; 3
   1555  f79a		       bd 00 fd 	      LDA	Font,X	;4
   1556  f79d		       4a		      LSR		;2
   1557  f79e		       4a		      LSR		;2
   1558  f79f		       4a		      LSR		;2
   1559  f7a0		       4a		      LSR		;2
   1560  f7a1		       85 83		      STA	PF2Cache	;3
   1561  f7a3		       c6 d3		      DEC	ScoreD3	;5
   1562  f7a5
   1563  f7a5				   DrawScoreD4		; 20
   1564  f7a5		       a6 d4		      LDX	ScoreD4	; 3
   1565  f7a7		       bd 00 fd 	      LDA	Font,X	;4
   1566  f7aa		       29 f0		      AND	#%11110000	;2
   1567  f7ac		       05 83		      ORA	PF2Cache	;3
   1568  f7ae		       85 83		      STA	PF2Cache	;3
   1569  f7b0		       c6 d4		      DEC	ScoreD4	;5
   1570  f7b2
   1571  f7b2
   1572  f7b2		       88		      DEY		;2
   1573  f7b3		       10 b0		      BPL	ScoreLoop	;4
   1574  f7b5
   1575  f7b5		       85 02		      STA	WSYNC
   1576  f7b7		       85 2a		      STA	HMOVE
   1577  f7b9		       20 ba f6 	      JSR	LoadAll
   1578  f7bc		       60		      RTS		; 6
   1579  f7bd
   1580  f7bd				   WaitForVblankEnd
   1581  f7bd		       ad 84 02 	      LDA	INTIM
   1582  f7c0		       d0 fb		      BNE	WaitForVblankEnd
   1583  f7c2		       85 02		      STA	WSYNC
   1584  f7c4		       85 01		      STA	VBLANK
   1585  f7c6		       60		      RTS
   1586  f7c7
   1587  f7c7				   Sleep4Lines
   1588  f7c7		       85 02		      STA	WSYNC
   1589  f7c9		       85 02		      STA	WSYNC
   1590  f7cb		       85 02		      STA	WSYNC
   1591  f7cd		       85 02		      STA	WSYNC
   1592  f7cf		       60		      RTS
   1593  f7d0
   1594  f7d0				   Sleep8Lines
   1595  f7d0		       20 c7 f7 	      JSR	Sleep4Lines
   1596  f7d3		       20 c7 f7 	      JSR	Sleep4Lines
   1597  f7d6		       60		      RTS
   1598  f7d7
   1599  f7d7				   Sleep32Lines
   1600  f7d7		       20 d0 f7 	      JSR	Sleep8Lines
   1601  f7da		       20 d0 f7 	      JSR	Sleep8Lines
   1602  f7dd		       20 d0 f7 	      JSR	Sleep8Lines
   1603  f7e0		       20 d0 f7 	      JSR	Sleep8Lines
   1604  f7e3		       60		      RTS
   1605  f7e4
   1606  f7e4							;X = number of WSYNC HMOVE to run
   1607  f7e4				   HMoveXTimes
   1608  f7e4		       85 02		      STA	WSYNC	;3
   1609  f7e6		       85 2a		      STA	HMOVE	; 3/10 
   1610  f7e8		       ca		      DEX
   1611  f7e9		       d0 f9		      BNE	HMoveXTimes
   1612  f7eb		       60		      RTS
   1613  f7ec
   1614  f7ec				   ConfigureCarSprites
   1615  f7ec		       a5 8c		      LDA	FrameCount0
   1616  f7ee		       29 01		      AND	#%00000001
   1617  f7f0		       d0 0b		      BNE	LoadForRightScreenSprites
   1618  f7f2				   LoadForLeftScreenSprites
   1619  f7f2		       a5 c7		      LDA	CurrentCarId
   1620  f7f4		       85 b0		      STA	Tmp0
   1621  f7f6		       a5 c8		      LDA	OpCurrentCarId
   1622  f7f8		       85 b1		      STA	Tmp1
   1623  f7fa		       4c 05 f8 	      JMP	LoadCarSpritesFromIds
   1624  f7fd				   LoadForRightScreenSprites
   1625  f7fd		       a5 c7		      LDA	CurrentCarId
   1626  f7ff		       85 b1		      STA	Tmp1
   1627  f801		       a5 c8		      LDA	OpCurrentCarId
   1628  f803		       85 b0		      STA	Tmp0
   1629  f805
   1630  f805				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1631  f805		       a4 b0		      LDY	Tmp0
   1632  f807		       b9 9b ff 	      LDA	CarIdToSpriteAddressL,Y
   1633  f80a		       85 d7		      STA	CarSpritePointerL
   1634  f80c		       b9 9f ff 	      LDA	CarIdToSpriteAddressH,Y
   1635  f80f		       85 d8		      STA	CarSpritePointerH
   1636  f811				   ConfigureOpponentCarSprite
   1637  f811		       a4 b1		      LDY	Tmp1
   1638  f813		       b9 a3 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1639  f816		       85 d9		      STA	EnemyCarSpritePointerL
   1640  f818		       b9 a7 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1641  f81b		       85 da		      STA	EnemyCarSpritePointerH
   1642  f81d		       60		      RTS
   1643  f81e
   1644  f81e							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1645  f81e							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1646  f81e							; Tmp0 Binary Number
   1647  f81e							; Result Returned in Tmp 1 and A
   1648  f81e				   BINBCD8
   1649  f81e		       f8		      SED		; Switch to decimal mode
   1650  f81f		       a9 00		      LDA	#0	; Ensure the result is clear
   1651  f821		       85 b1		      STA	Tmp1+0
   1652  f823							;STA Tmp1+1
   1653  f823		       a2 08		      LDX	#8	; The number of source bits
   1654  f825
   1655  f825				   CNVBIT
   1656  f825		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1657  f827		       a5 b1		      LDA	Tmp1+0	; And add into result
   1658  f829		       65 b1		      ADC	Tmp1+0
   1659  f82b		       85 b1		      STA	Tmp1+0
   1660  f82d							;Not needed now, 0 to 99 is enought for timer!
   1661  f82d							; LDA Tmp1+1	; propagating any carry
   1662  f82d							; ADC Tmp1+1
   1663  f82d							; STA Tmp1+1
   1664  f82d		       ca		      DEX		; And repeat for next bit
   1665  f82e		       d0 f5		      BNE	CNVBIT
   1666  f830		       d8		      CLD		; Back to binary
   1667  f831
   1668  f831		       60		      RTS		; All Done.
   1669  f832
   1670  f832							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1671  f832							;X player 0 or 1
   1672  f832				   SelectCarWithDpad
   1673  f832		       a0 03		      LDY	#3
   1674  f834				   SelectCarWithDpadLoop
   1675  f834		       ad 80 02 	      LDA	SWCHA
   1676  f837		       25 b0		      AND	Tmp0
   1677  f839		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1678  f83b		       98		      TYA
   1679  f83c		       95 c7		      STA	CurrentCarId,X
   1680  f83e				   ContinueSelectCarWithDpadLoop
   1681  f83e		       46 b0		      LSR	Tmp0
   1682  f840		       88		      DEY
   1683  f841		       10 f1		      BPL	SelectCarWithDpadLoop
   1684  f843		       60		      RTS
   1685  f844
   1686  f844				   ProcessOpponentLine
   1687  f844		       a5 8c		      LDA	FrameCount0
   1688  f846		       29 01		      AND	#%00000001
   1689  f848		       38		      SEC
   1690  f849		       d0 15		      BNE	Player0IsOpponent
   1691  f84b				   Player1IsOpponent		; Code could be reused?
   1692  f84b		       a5 91		      LDA	TrafficOffset0 + 1
   1693  f84d		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1694  f84f		       85 b0		      STA	Tmp0
   1695  f851		       a5 92		      LDA	TrafficOffset0 + 2
   1696  f853		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1697  f855		       85 b1		      STA	Tmp1
   1698  f857		       a5 ba		      LDA	Traffic0Msb
   1699  f859		       e5 bb		      SBC	OpTraffic0Msb
   1700  f85b		       85 b2		      STA	Tmp2
   1701  f85d		       4c 72 f8 	      JMP	StoreInFrontPlayer
   1702  f860				   Player0IsOpponent
   1703  f860		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1704  f862		       e5 91		      SBC	TrafficOffset0 + 1
   1705  f864		       85 b0		      STA	Tmp0
   1706  f866		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1707  f868		       e5 92		      SBC	TrafficOffset0 + 2
   1708  f86a		       85 b1		      STA	Tmp1
   1709  f86c		       a5 bb		      LDA	OpTraffic0Msb
   1710  f86e		       e5 ba		      SBC	Traffic0Msb
   1711  f870		       85 b2		      STA	Tmp2
   1712  f872
   1713  f872				   StoreInFrontPlayer
   1714  f872		       85 f4		      STA	IsOpponentInFront
   1715  f874
   1716  f874				   AddOffsetToOpponentLine
   1717  f874		       18		      CLC
   1718  f875		       a5 b0		      LDA	Tmp0
   1719  f877		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1720  f879		       85 b0		      STA	Tmp0
   1721  f87b		       a5 b1		      LDA	Tmp1
   1722  f87d		       69 00		      ADC	#0
   1723  f87f		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1724  f881		       a5 b2		      LDA	Tmp2
   1725  f883		       69 00		      ADC	#0
   1726  f885		       05 b1		      ORA	Tmp1
   1727  f887		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1728  f889				   OpponentNotVisible
   1729  f889		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1730  f88b		       85 cf		      STA	OpponentLine
   1731  f88d		       4c 94 f8 	      JMP	ReturnFromProcessOpponentLine
   1732  f890				   OpponentVisible
   1733  f890		       a5 b0		      LDA	Tmp0
   1734  f892		       85 cf		      STA	OpponentLine
   1735  f894				   ReturnFromProcessOpponentLine
   1736  f894		       60		      RTS
   1737  f895
   1738  f895							; Value stored in A
   1739  f895				   IsOpponentColliding
   1740  f895							;Any non default state, opponent do not colide
   1741  f895		       a5 8e		      LDA	CollisionCounter
   1742  f897		       05 8f		      ORA	OpCollisionCounter
   1743  f899		       05 cb		      ORA	ScoreFontColorHoldChange
   1744  f89b		       05 cc		      ORA	OpScoreFontColorHoldChange
   1745  f89d		       d0 07		      BNE	OpponentNotColliding
   1746  f89f		       a5 f4		      LDA	IsOpponentInFront
   1747  f8a1		       25 07		      AND	CXPPMM
   1748  f8a3		       4c a8 f8 	      JMP	ReturnIsOpponentColliding
   1749  f8a6				   OpponentNotColliding
   1750  f8a6		       a9 00		      LDA	#0
   1751  f8a8				   ReturnIsOpponentColliding
   1752  f8a8		       60		      RTS
   1753  f8a9
   1754  f8a9
   1755  f8a9							; Movement and colision are binded because the car must be moved after duplicate size.
   1756  f8a9							; Use X for the player
   1757  f8a9							; Tmp2 Traffic colision result
   1758  f8a9				   TestCollisionAndMove
   1759  f8a9							; Until store the movemnt, Y contains the value to be stored.
   1760  f8a9							; see if player0 colides with the rest
   1761  f8a9		       a5 b2		      LDA	Tmp2
   1762  f8ab		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1763  f8ad		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1764  f8af		       d0 25		      BNE	NoCollision
   1765  f8b1		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1766  f8b3		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1767  f8b5		       f0 1f		      BEQ	NoCollision
   1768  f8b7		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1769  f8b9		       f0 1b		      BEQ	NoCollision
   1770  f8bb		       a9 ff		      LDA	#COLLISION_FRAMES
   1771  f8bd		       95 8e		      STA	CollisionCounter,X
   1772  f8bf		       b5 f2		      LDA	Player0SpeedH,X
   1773  f8c1		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1774  f8c3		       a9 10		      LDA	#COLLISION_SPEED_L
   1775  f8c5		       d5 f0		      CMP	Player0SpeedL,X
   1776  f8c7		       b0 04		      BCS	SkipSetColisionSpeedL
   1777  f8c9				   SetColisionSpeedL
   1778  f8c9		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1779  f8cb		       95 f0		      STA	Player0SpeedL,X
   1780  f8cd				   SkipSetColisionSpeedL
   1781  f8cd		       a9 00		      LDA	#0
   1782  f8cf		       95 f2		      STA	Player0SpeedH,X
   1783  f8d1		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1784  f8d3		       4c 26 f9 	      JMP	StoreHMove	; We keep position consistent
   1785  f8d6				   NoCollision
   1786  f8d6
   1787  f8d6				   DecrementCollision
   1788  f8d6		       b5 8e		      LDA	CollisionCounter,X
   1789  f8d8		       f0 06		      BEQ	FinishDecrementCollision
   1790  f8da		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1791  f8dc		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1792  f8de		       d6 8e		      DEC	CollisionCounter,X
   1793  f8e0				   FinishDecrementCollision
   1794  f8e0
   1795  f8e0				   ResetPlayerSize
   1796  f8e0		       d0 04		      BNE	FinishResetPlayerSize
   1797  f8e2		       a9 30		      LDA	#%00110000
   1798  f8e4		       95 04		      STA	NUSIZ0,X	;
   1799  f8e6				   FinishResetPlayerSize
   1800  f8e6
   1801  f8e6				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1802  f8e6		       b5 8e		      LDA	CollisionCounter,X
   1803  f8e8		       c9 01		      CMP	#1	; Last frame before reset
   1804  f8ea		       d0 05		      BNE	SkipResetPlayerPosition
   1805  f8ec		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1806  f8ee		       4c 26 f9 	      JMP	StoreHMove
   1807  f8f1				   SkipResetPlayerPosition
   1808  f8f1
   1809  f8f1				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1810  f8f1		       b5 c7		      LDA	CurrentCarId,X
   1811  f8f3		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1812  f8f5		       d0 08		      BNE	PrepareReadXAxis
   1813  f8f7		       a0 00		      LDY	#0
   1814  f8f9		       a5 8c		      LDA	FrameCount0
   1815  f8fb		       29 01		      AND	#DRAGSTER_TURN_MASK
   1816  f8fd		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1817  f8ff
   1818  f8ff				   PrepareReadXAxis
   1819  f8ff		       a0 00		      LDY	#0
   1820  f901		       b5 b6		      LDA	Player0X,X
   1821  f903				   BeginReadLeft
   1822  f903		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1823  f905		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1824  f908		       2c 80 02 	      BIT	SWCHA
   1825  f90b		       d0 07		      BNE	SkipMoveLeft
   1826  f90d		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1827  f90f		       d6 b6		      DEC	Player0X,X
   1828  f911		       4c 26 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1829  f914				   SkipMoveLeft
   1830  f914				   BeginReadRight
   1831  f914		       b5 b6		      LDA	Player0X,X
   1832  f916		       c9 2c		      CMP	#PLAYER_MAX_X
   1833  f918		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1834  f91a		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1835  f91d		       2c 80 02 	      BIT	SWCHA
   1836  f920		       d0 04		      BNE	SkipMoveRight
   1837  f922		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1838  f924		       f6 b6		      INC	Player0X,X
   1839  f926				   SkipMoveRight
   1840  f926				   StoreHMove
   1841  f926		       94 20		      STY	HMP0,X	;set the move for player 0
   1842  f928
   1843  f928		       60		      RTS
   1844  f929
   1845  f929							; X Traffic offset 4 bits each lane, 4 lanes per player
   1846  f929							; Tmp3 Max X offset
   1847  f929							; Tmp4 Max Player Speed L
   1848  f929							; Tmp5 Max Player Speed H
   1849  f929				   UpdateOffsets
   1850  f929		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1851  f92b		       a5 c6		      LDA	GameMode
   1852  f92d		       29 04		      AND	#%00000100	; GameModes with high delta
   1853  f92f		       f0 02		      BEQ	UpdateOffsetsLoop
   1854  f931		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1855  f933
   1856  f933				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1857  f933		       38		      SEC
   1858  f934		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1859  f936		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1860  f939		       85 b0		      STA	Tmp0
   1861  f93b		       c8		      INY
   1862  f93c		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1863  f93e		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1864  f941		       85 b1		      STA	Tmp1
   1865  f943		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1866  f945		       e9 00		      SBC	#0
   1867  f947		       85 b2		      STA	Tmp2
   1868  f949
   1869  f949				   AddsTheResult
   1870  f949		       18		      CLC
   1871  f94a		       a5 b0		      LDA	Tmp0
   1872  f94c		       75 90		      ADC	TrafficOffset0,X
   1873  f94e		       95 90		      STA	TrafficOffset0,X
   1874  f950		       e8		      INX
   1875  f951		       a5 b1		      LDA	Tmp1
   1876  f953		       75 90		      ADC	TrafficOffset0,X
   1877  f955		       95 90		      STA	TrafficOffset0,X
   1878  f957		       e8		      INX
   1879  f958		       a5 b2		      LDA	Tmp2	; Carry
   1880  f95a		       75 90		      ADC	TrafficOffset0,X
   1881  f95c		       95 90		      STA	TrafficOffset0,X
   1882  f95e		       90 0f		      BCC	CalculateOffsetCache
   1883  f960				   CalculatePlayer0Msb
   1884  f960		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1885  f962		       d0 05		      BNE	CalculatePlayer1Msb
   1886  f964		       e6 ba		      INC	Traffic0Msb
   1887  f966		       4c 6f f9 	      JMP	CalculateOffsetCache
   1888  f969				   CalculatePlayer1Msb
   1889  f969		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1890  f96b		       d0 02		      BNE	CalculateOffsetCache
   1891  f96d		       e6 bb		      INC	OpTraffic0Msb
   1892  f96f
   1893  f96f				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1894  f96f		       e8		      INX
   1895  f970		       38		      SEC
   1896  f971		       69 00		      ADC	#0	;Increment by one
   1897  f973		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1898  f975
   1899  f975				   PrepareNextUpdateLoop
   1900  f975		       c8		      INY
   1901  f976		       e8		      INX
   1902  f977		       e4 b3		      CPX	Tmp3	; Max X offset
   1903  f979		       d0 b8		      BNE	UpdateOffsetsLoop
   1904  f97b		       60		      RTS
   1905  f97c
   1906  f97c							; X Player 0 or 1
   1907  f97c				   ProcessSpeed
   1908  f97c				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1909  f97c		       a9 00		      LDA	#0
   1910  f97e		       85 b0		      STA	Tmp0	; Break speed
   1911  f980		       b5 b8		      LDA	CountdownTimer,X
   1912  f982		       d0 0d		      BNE	Break
   1913  f984		       b4 c7		      LDY	CurrentCarId,X
   1914  f986		       a5 8c		      LDA	FrameCount0
   1915  f988		       39 af ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1916  f98b		       d0 04		      BNE	Break
   1917  f98d		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1918  f98f		       85 b0		      STA	Tmp0
   1919  f991
   1920  f991				   Break
   1921  f991		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1922  f994		       2c 80 02 	      BIT	SWCHA
   1923  f997		       d0 12		      BNE	BreakNonZero
   1924  f999		       b5 0c		      LDA	INPT4,X	;3
   1925  f99b		       10 0a		      BPL	BreakWhileAccelerating
   1926  f99d		       b4 d5		      LDY	Gear,X
   1927  f99f		       b9 bb ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1928  f9a2		       85 b0		      STA	Tmp0
   1929  f9a4		       4c ab f9 	      JMP	BreakNonZero
   1930  f9a7				   BreakWhileAccelerating		; Allow better control while breaking.
   1931  f9a7		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1932  f9a9		       85 b0		      STA	Tmp0
   1933  f9ab
   1934  f9ab				   BreakNonZero
   1935  f9ab		       a5 b0		      LDA	Tmp0
   1936  f9ad		       f0 29		      BEQ	SkipBreak
   1937  f9af
   1938  f9af				   DecreaseSpeed
   1939  f9af		       38		      SEC
   1940  f9b0		       b5 f0		      LDA	Player0SpeedL,X
   1941  f9b2		       e5 b0		      SBC	Tmp0
   1942  f9b4		       95 f0		      STA	Player0SpeedL,X
   1943  f9b6		       b5 f2		      LDA	Player0SpeedH,X
   1944  f9b8		       e9 00		      SBC	#0
   1945  f9ba		       95 f2		      STA	Player0SpeedH,X
   1946  f9bc
   1947  f9bc				   CheckMinSpeed
   1948  f9bc		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1949  f9be		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1950  f9c0		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1951  f9c2		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1952  f9c4
   1953  f9c4				   CompareLBreakSpeed
   1954  f9c4		       b5 f0		      LDA	Player0SpeedL,X
   1955  f9c6		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1956  f9c8		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1957  f9ca		       4c d5 f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1958  f9cd
   1959  f9cd				   ResetMinSpeed
   1960  f9cd		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1961  f9cf		       95 f2		      STA	Player0SpeedH,X
   1962  f9d1		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1963  f9d3		       95 f0		      STA	Player0SpeedL,X
   1964  f9d5
   1965  f9d5				   SkipAccelerateIfBreaking
   1966  f9d5		       4c 1e fa 	      JMP	SkipAccelerate
   1967  f9d8				   SkipBreak
   1968  f9d8
   1969  f9d8				   Acelerates
   1970  f9d8		       b5 b8		      LDA	CountdownTimer,X
   1971  f9da		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1972  f9dc
   1973  f9dc				   ContinueAccelerateTest
   1974  f9dc		       b5 0c		      LDA	INPT4,X	;3
   1975  f9de		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1976  f9e0		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1977  f9e3		       2c 80 02 	      BIT	SWCHA
   1978  f9e6		       d0 36		      BNE	SkipAccelerate
   1979  f9e8
   1980  f9e8				   IncreaseCarSpeed
   1981  f9e8		       a9 02		      LDA	#2
   1982  f9ea		       85 b0		      STA	Tmp0	; Loop control
   1983  f9ec		       b4 c7		      LDY	CurrentCarId,X
   1984  f9ee				   IncreaseCarSpeedLoop
   1985  f9ee							;Adds speed
   1986  f9ee		       18		      CLC
   1987  f9ef		       b5 dc		      LDA	AccelerateBuffer,X
   1988  f9f1		       79 ab ff 	      ADC	CarIdToAccelerateSpeed,Y
   1989  f9f4		       95 dc		      STA	AccelerateBuffer,X
   1990  f9f6		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1991  f9f8		       f6 f0		      INC	Player0SpeedL,X
   1992  f9fa		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1993  f9fc		       f6 f2		      INC	Player0SpeedH,X
   1994  f9fe				   ContinueIncreaseSpeedLoop
   1995  f9fe		       c6 b0		      DEC	Tmp0
   1996  fa00		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1997  fa02				   SkipIncreaseCarSpeed
   1998  fa02
   1999  fa02				   CheckIfAlreadyMaxSpeed
   2000  fa02		       b5 f2		      LDA	Player0SpeedH,X
   2001  fa04		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2002  fa06		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2003  fa08		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2004  fa0a							;High bit is max, compare the low
   2005  fa0a		       b4 c7		      LDY	CurrentCarId,X
   2006  fa0c		       b5 f0		      LDA	Player0SpeedL,X
   2007  fa0e		       d9 b3 ff 	      CMP	CarIdToMaxSpeedL,Y
   2008  fa11		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2009  fa13							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2010  fa13
   2011  fa13				   ResetToMaxSpeed		; Speed is more, or is already max
   2012  fa13		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2013  fa15		       95 f2		      STA	Player0SpeedH,X
   2014  fa17		       b4 c7		      LDY	CurrentCarId,X
   2015  fa19		       b9 b3 ff 	      LDA	CarIdToMaxSpeedL,Y
   2016  fa1c		       95 f0		      STA	Player0SpeedL,X
   2017  fa1e				   SkipAccelerate
   2018  fa1e		       60		      RTS
   2019  fa1f
   2020  fa1f							;Tmp0 Traffic Offset to compare with next checkpoint
   2021  fa1f				   ProcessPlayerStatus
   2022  fa1f				   IsGameOver
   2023  fa1f		       b5 b8		      LDA	CountdownTimer,X
   2024  fa21		       15 f0		      ORA	Player0SpeedL,X
   2025  fa23		       15 f2		      ORA	Player0SpeedH,X
   2026  fa25		       d0 0b		      BNE	IsCheckpoint
   2027  fa27		       a9 01		      LDA	#1
   2028  fa29		       95 cb		      STA	ScoreFontColorHoldChange,X
   2029  fa2b		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2030  fa2d		       95 c9		      STA	ScoreFontColor,X
   2031  fa2f		       4c 64 fa 	      JMP	SkipIsTimeOver
   2032  fa32
   2033  fa32				   IsCheckpoint
   2034  fa32		       b5 cd		      LDA	NextCheckpoint,X
   2035  fa34		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2036  fa36		       d0 20		      BNE	SkipIsCheckpoint
   2037  fa38		       18		      CLC
   2038  fa39		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2039  fa3b		       95 cd		      STA	NextCheckpoint,X
   2040  fa3d		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2041  fa3f		       95 c9		      STA	ScoreFontColor,X
   2042  fa41		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2043  fa43		       95 cb		      STA	ScoreFontColorHoldChange,X
   2044  fa45		       b5 b8		      LDA	CountdownTimer,X
   2045  fa47		       18		      CLC
   2046  fa48		       75 c0		      ADC	CheckpointTime,X
   2047  fa4a		       95 b8		      STA	CountdownTimer,X
   2048  fa4c		       90 04		      BCC	JumpSkipTimeOver
   2049  fa4e		       a9 ff		      LDA	#$FF
   2050  fa50		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2051  fa52				   JumpSkipTimeOver
   2052  fa52		       20 d7 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2053  fa55		       4c 64 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2054  fa58				   SkipIsCheckpoint
   2055  fa58
   2056  fa58				   IsTimeOver
   2057  fa58		       b5 b8		      LDA	CountdownTimer,X
   2058  fa5a		       d0 08		      BNE	SkipIsTimeOver
   2059  fa5c		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2060  fa5e		       95 cb		      STA	ScoreFontColorHoldChange,X
   2061  fa60		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2062  fa62		       95 c9		      STA	ScoreFontColor,X
   2063  fa64				   SkipIsTimeOver
   2064  fa64		       60		      RTS
   2065  fa65
   2066  fa65
   2067  fa65				   EverySecond		; 64 frames to be more precise
   2068  fa65		       a9 3f		      LDA	#%00111111
   2069  fa67		       25 8c		      AND	FrameCount0
   2070  fa69		       d0 06		      BNE	SkipEverySecondAction
   2071  fa6b		       d5 b8		      CMP	CountdownTimer,X
   2072  fa6d		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2073  fa6f		       d6 b8		      DEC	CountdownTimer,X
   2074  fa71				   SkipEverySecondAction
   2075  fa71		       60		      RTS
   2076  fa72
   2077  fa72				   CalculateGear
   2078  fa72		       b5 f0		      LDA	Player0SpeedL,X	;3
   2079  fa74		       29 80		      AND	#%10000000	;2
   2080  fa76		       15 f2		      ORA	Player0SpeedH,X	;3
   2081  fa78		       18		      CLC		;2
   2082  fa79		       2a		      ROL		;2
   2083  fa7a		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2084  fa7c		       95 d5		      STA	Gear,X
   2085  fa7e		       60		      RTS
   2086  fa7f
   2087  fa7f				   ProcessScoreFontColor
   2088  fa7f		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2089  fa81		       f0 06		      BEQ	ResetScoreFontColor
   2090  fa83		       88		      DEY
   2091  fa84		       94 cb		      STY	ScoreFontColorHoldChange,X
   2092  fa86		       4c 8e fa 	      JMP	SkipScoreFontColor
   2093  fa89				   ResetScoreFontColor
   2094  fa89		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2095  fa8c		       95 c9		      STA	ScoreFontColor,X
   2096  fa8e				   SkipScoreFontColor
   2097  fa8e		       60		      RTS
   2098  fa8f
   2099  fa8f							; Moved here because of rom space.
   2100  fa8f							; The only SBR in constants space
   2101  fa8f				   DrawQrCode
   2102  fa8f		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2103  fa91		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2104  fa93		       a9 01		      LDA	#%00000001	; Mirror playfield
   2105  fa95		       85 0a		      STA	CTRLPF
   2106  fa97		       20 95 f6 	      JSR	ClearAll	; To be 100 sure!
   2107  fa9a		       ad 82 02 	      LDA	SWCHB
   2108  fa9d		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2109  fa9f		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2110  faa1		       f0 07		      BEQ	StoreReversedQrCode
   2111  faa3		       86 09		      STX	COLUBK
   2112  faa5		       84 08		      STY	COLUPF
   2113  faa7		       4c ae fa 	      JMP	ContinueQrCode
   2114  faaa				   StoreReversedQrCode
   2115  faaa		       86 08		      STX	COLUPF
   2116  faac		       84 09		      STY	COLUBK
   2117  faae
   2118  faae				   ContinueQrCode
   2119  faae		       a2 09		      LDX	#9
   2120  fab0		       20 e4 f7 	      JSR	HMoveXTimes
   2121  fab3		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2122  fab5		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2123  fab7		       20 bd f7 	      JSR	WaitForVblankEnd
   2124  faba		       20 d0 f7 	      JSR	Sleep8Lines
   2125  fabd		       20 d0 f7 	      JSR	Sleep8Lines
   2126  fac0		       20 d0 f7 	      JSR	Sleep8Lines
   2127  fac3
   2128  fac3				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2129  fac3		       85 02		      STA	WSYNC
   2130  fac5		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2131  fac8		       85 0e		      STA	PF1	;3
   2132  faca		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2133  facd		       85 0f		      STA	PF2	;3
      0  facf					      SLEEP	27	; 
      1  facf				   .CYCLES    SET	27
      2  facf
      3  facf				  -	      IF	.CYCLES < 2
      4  facf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  facf				  -	      ERR
      6  facf					      ENDIF
      7  facf
      8  facf					      IF	.CYCLES & 1
      9  facf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  facf				  -	      nop	0
     11  facf					      ELSE
     12  facf		       24 00		      bit	VSYNC
     13  fad1					      ENDIF
     14  fad1				   .CYCLES    SET	.CYCLES - 3
     15  fad1					      ENDIF
     16  fad1
     17  fad1					      REPEAT	.CYCLES / 2
     18  fad1		       ea		      nop
     17  fad1					      REPEND
     18  fad2		       ea		      nop
     17  fad2					      REPEND
     18  fad3		       ea		      nop
     17  fad3					      REPEND
     18  fad4		       ea		      nop
     17  fad4					      REPEND
     18  fad5		       ea		      nop
     17  fad5					      REPEND
     18  fad6		       ea		      nop
     17  fad6					      REPEND
     18  fad7		       ea		      nop
     17  fad7					      REPEND
     18  fad8		       ea		      nop
     17  fad8					      REPEND
     18  fad9		       ea		      nop
     17  fad9					      REPEND
     18  fada		       ea		      nop
     17  fada					      REPEND
     18  fadb		       ea		      nop
     17  fadb					      REPEND
     18  fadc		       ea		      nop
     19  fadd					      REPEND
   2135  fadd		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2136  fae0		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2137  fae2		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2138  fae5		       85 0e		      STA	PF1	;3
   2139  fae7
   2140  fae7		       ca		      DEX		;2
   2141  fae8		       d0 d9		      BNE	QrCodeLoop	;2
   2142  faea		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2143  faec		       88		      DEY		;2
   2144  faed		       10 d4		      BPL	QrCodeLoop	;4
   2145  faef
   2146  faef				   EndQrCodeLoop
   2147  faef		       85 02		      STA	WSYNC	;
   2148  faf1		       a9 00		      LDA	#0
   2149  faf3		       85 0e		      STA	PF1	;3
   2150  faf5		       85 0f		      STA	PF2	;3
   2151  faf7
   2152  faf7		       20 d7 f7 	      JSR	Sleep32Lines
   2153  fafa		       4c 2c f5 	      JMP	PrepareOverscan
   2154  fafd
   2155  fafd							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2156  fc00					      org	$FC00
   2157  fc00				   QrCode1
   2158  fc00		       1f		      .byte.b	#%00011111
   2159  fc01		       10		      .byte.b	#%00010000
   2160  fc02		       17		      .byte.b	#%00010111
   2161  fc03		       17		      .byte.b	#%00010111
   2162  fc04		       17		      .byte.b	#%00010111
   2163  fc05		       10		      .byte.b	#%00010000
   2164  fc06		       1f		      .byte.b	#%00011111
   2165  fc07		       00		      .byte.b	#%00000000
   2166  fc08		       17		      .byte.b	#%00010111
   2167  fc09		       10		      .byte.b	#%00010000
   2168  fc0a		       1d		      .byte.b	#%00011101
   2169  fc0b		       16		      .byte.b	#%00010110
   2170  fc0c		       03		      .byte.b	#%00000011
   2171  fc0d		       19		      .byte.b	#%00011001
   2172  fc0e		       13		      .byte.b	#%00010011
   2173  fc0f		       1c		      .byte.b	#%00011100
   2174  fc10		       0b		      .byte.b	#%00001011
   2175  fc11		       00		      .byte.b	#%00000000
   2176  fc12		       1f		      .byte.b	#%00011111
   2177  fc13		       10		      .byte.b	#%00010000
   2178  fc14		       17		      .byte.b	#%00010111
   2179  fc15		       17		      .byte.b	#%00010111
   2180  fc16		       17		      .byte.b	#%00010111
   2181  fc17		       10		      .byte.b	#%00010000
   2182  fc18		       1f		      .byte.b	#%00011111
   2183  fc19
   2184  fc19				   QrCode2
   2185  fc19		       c3		      .byte.b	#%11000011
   2186  fc1a		       9a		      .byte.b	#%10011010
   2187  fc1b		       82		      .byte.b	#%10000010
   2188  fc1c		       da		      .byte.b	#%11011010
   2189  fc1d		       aa		      .byte.b	#%10101010
   2190  fc1e		       ca		      .byte.b	#%11001010
   2191  fc1f		       f3		      .byte.b	#%11110011
   2192  fc20		       78		      .byte.b	#%01111000
   2193  fc21		       df		      .byte.b	#%11011111
   2194  fc22		       fc		      .byte.b	#%11111100
   2195  fc23		       c7		      .byte.b	#%11000111
   2196  fc24		       98		      .byte.b	#%10011000
   2197  fc25		       23		      .byte.b	#%00100011
   2198  fc26		       b9		      .byte.b	#%10111001
   2199  fc27		       d2		      .byte.b	#%11010010
   2200  fc28		       30		      .byte.b	#%00110000
   2201  fc29		       eb		      .byte.b	#%11101011
   2202  fc2a		       28		      .byte.b	#%00101000
   2203  fc2b		       ab		      .byte.b	#%10101011
   2204  fc2c		       72		      .byte.b	#%01110010
   2205  fc2d		       fa		      .byte.b	#%11111010
   2206  fc2e		       7a		      .byte.b	#%01111010
   2207  fc2f		       32		      .byte.b	#%00110010
   2208  fc30		       3a		      .byte.b	#%00111010
   2209  fc31		       63		      .byte.b	#%01100011
   2210  fc32
   2211  fc32				   QrCode3
   2212  fc32		       98		      .byte.b	#%10011000
   2213  fc33		       c3		      .byte.b	#%11000011
   2214  fc34		       39		      .byte.b	#%00111001
   2215  fc35		       34		      .byte.b	#%00110100
   2216  fc36		       ff		      .byte.b	#%11111111
   2217  fc37		       71		      .byte.b	#%01110001
   2218  fc38		       d5		      .byte.b	#%11010101
   2219  fc39		       d1		      .byte.b	#%11010001
   2220  fc3a		       5f		      .byte.b	#%01011111
   2221  fc3b		       26		      .byte.b	#%00100110
   2222  fc3c		       2d		      .byte.b	#%00101101
   2223  fc3d		       e9		      .byte.b	#%11101001
   2224  fc3e		       d6		      .byte.b	#%11010110
   2225  fc3f		       26		      .byte.b	#%00100110
   2226  fc40		       ba		      .byte.b	#%10111010
   2227  fc41		       03		      .byte.b	#%00000011
   2228  fc42		       dd		      .byte.b	#%11011101
   2229  fc43		       e0		      .byte.b	#%11100000
   2230  fc44		       57		      .byte.b	#%01010111
   2231  fc45		       14		      .byte.b	#%00010100
   2232  fc46		       35		      .byte.b	#%00110101
   2233  fc47		       e5		      .byte.b	#%11100101
   2234  fc48		       b5		      .byte.b	#%10110101
   2235  fc49		       d4		      .byte.b	#%11010100
   2236  fc4a		       97		      .byte.b	#%10010111
   2237  fc4b
   2238  fc4b				   QrCode4
   2239  fc4b		       09		      .byte.b	#%00001001
   2240  fc4c		       0e		      .byte.b	#%00001110
   2241  fc4d		       0f		      .byte.b	#%00001111
   2242  fc4e		       0c		      .byte.b	#%00001100
   2243  fc4f		       0c		      .byte.b	#%00001100
   2244  fc50		       08		      .byte.b	#%00001000
   2245  fc51		       08		      .byte.b	#%00001000
   2246  fc52		       06		      .byte.b	#%00000110
   2247  fc53		       06		      .byte.b	#%00000110
   2248  fc54		       0b		      .byte.b	#%00001011
   2249  fc55		       0f		      .byte.b	#%00001111
   2250  fc56		       04		      .byte.b	#%00000100
   2251  fc57		       08		      .byte.b	#%00001000
   2252  fc58		       0f		      .byte.b	#%00001111
   2253  fc59		       09		      .byte.b	#%00001001
   2254  fc5a		       07		      .byte.b	#%00000111
   2255  fc5b		       05		      .byte.b	#%00000101
   2256  fc5c		       00		      .byte.b	#%00000000
   2257  fc5d		       0f		      .byte.b	#%00001111
   2258  fc5e		       08		      .byte.b	#%00001000
   2259  fc5f		       0b		      .byte.b	#%00001011
   2260  fc60		       0b		      .byte.b	#%00001011
   2261  fc61		       0b		      .byte.b	#%00001011
   2262  fc62		       08		      .byte.b	#%00001000
   2263  fc63		       0f		      .byte.b	#%00001111
   2264  fc64
   2265  fc64				   PlayerToUpMask
   2266  fc64		       10		      .byte.b	#%00010000	;
   2267  fc65		       01		      .byte.b	#%00000001	;
   2268  fc66
   2269  fc66				   PlayerToDownMask
   2270  fc66		       20		      .byte.b	#%00100000	;
   2271  fc67		       02		      .byte.b	#%00000010	;
   2272  fc68
   2273  fc68				   PlayerToLeftMask
   2274  fc68		       40		      .byte.b	#%01000000	;
   2275  fc69		       04		      .byte.b	#%00000100	;
   2276  fc6a
   2277  fc6a				   PlayerToRightMask
   2278  fc6a		       80		      .byte.b	#%10000000	;
   2279  fc6b		       08		      .byte.b	#%00001000	;
   2280  fc6c
   2281  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2282  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2283  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2284  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2285  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2286  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2287  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2288  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2289  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2290  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2291  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2292  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2293  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2294  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2295  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2296  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2297  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2298  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2299  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2300  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2301  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2302  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2303  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2304  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2305  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2306  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2307  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2308  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2309  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2310  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2311  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2312  fc8a		       9a		      .byte.b	#<CV + #FONT_OFFSET	; If game over text is gone, we can replace the v for u!
   2313  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2314  fc8c
   2315  fc8c
   2316  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2317  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2318  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2319  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2320  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2321  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2322  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2323  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2324  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2325  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2326  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2327  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2328  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2329  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2330  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2331  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2332  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2333  fc9c
   2334  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2335  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2336  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2337  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2338  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2339  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2340  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2341  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2342  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2343  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2344  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2345  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2346  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2347  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2348  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2349  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2350  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2351  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2352  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2353  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2354  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2355  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2356  fcb1
   2357  fcb1				   PlayerToDefaultColor
   2358  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2359  fcb2		       96		      .byte.b	#PLAYER1_COLOR
   2360  fcb3
   2361  fd00					      org	$FD00
   2362  fd00				   Font
   2363  fd00				   C0
   2364  fd00		       e7		      .byte.b	#%11100111	;
   2365  fd01		       a5		      .byte.b	#%10100101	; 
   2366  fd02		       a5		      .byte.b	#%10100101	; 
   2367  fd03		       a5		      .byte.b	#%10100101	; 
   2368  fd04		       e7		      .byte.b	#%11100111	;	
   2369  fd05				   C1
   2370  fd05		       e7		      .byte.b	#%11100111	;
   2371  fd06		       42		      .byte.b	#%01000010	; 
   2372  fd07		       42		      .byte.b	#%01000010	; 
   2373  fd08		       42		      .byte.b	#%01000010	; 
   2374  fd09		       66		      .byte.b	#%01100110	;
   2375  fd0a				   C2
   2376  fd0a		       e7		      .byte.b	#%11100111	;
   2377  fd0b		       24		      .byte.b	#%00100100	; 
   2378  fd0c		       e7		      .byte.b	#%11100111	; 
   2379  fd0d		       81		      .byte.b	#%10000001	; 
   2380  fd0e		       e7		      .byte.b	#%11100111	;
   2381  fd0f				   C3
   2382  fd0f		       e7		      .byte.b	#%11100111	;
   2383  fd10		       81		      .byte.b	#%10000001	; 
   2384  fd11		       e7		      .byte.b	#%11100111	; 
   2385  fd12		       81		      .byte.b	#%10000001	; 
   2386  fd13		       e7		      .byte.b	#%11100111	;
   2387  fd14				   C4
   2388  fd14		       81		      .byte.b	#%10000001	;
   2389  fd15		       81		      .byte.b	#%10000001	; 
   2390  fd16		       e7		      .byte.b	#%11100111	; 
   2391  fd17		       a5		      .byte.b	#%10100101	; 
   2392  fd18		       a5		      .byte.b	#%10100101	;
   2393  fd19				   C5
   2394  fd19		       e7		      .byte.b	#%11100111	;
   2395  fd1a		       81		      .byte.b	#%10000001	; 
   2396  fd1b		       e7		      .byte.b	#%11100111	; 
   2397  fd1c		       24		      .byte.b	#%00100100	; 
   2398  fd1d		       e7		      .byte.b	#%11100111	;
   2399  fd1e				   C6
   2400  fd1e		       e7		      .byte.b	#%11100111	;
   2401  fd1f		       a5		      .byte.b	#%10100101	; 
   2402  fd20		       e7		      .byte.b	#%11100111	; 
   2403  fd21		       24		      .byte.b	#%00100100	; 
   2404  fd22		       e7		      .byte.b	#%11100111	;
   2405  fd23				   C7
   2406  fd23		       81		      .byte.b	#%10000001	;
   2407  fd24		       81		      .byte.b	#%10000001	; 
   2408  fd25		       81		      .byte.b	#%10000001	; 
   2409  fd26		       81		      .byte.b	#%10000001	; 
   2410  fd27		       e7		      .byte.b	#%11100111	;
   2411  fd28				   C8
   2412  fd28		       e7		      .byte.b	#%11100111	;
   2413  fd29		       a5		      .byte.b	#%10100101	; 
   2414  fd2a		       e7		      .byte.b	#%11100111	; 
   2415  fd2b		       a5		      .byte.b	#%10100101	; 
   2416  fd2c		       e7		      .byte.b	#%11100111	;
   2417  fd2d				   C9
   2418  fd2d		       e7		      .byte.b	#%11100111	;
   2419  fd2e		       81		      .byte.b	#%10000001	; 
   2420  fd2f		       e7		      .byte.b	#%11100111	; 
   2421  fd30		       a5		      .byte.b	#%10100101	; 
   2422  fd31		       e7		      .byte.b	#%11100111	;
   2423  fd32				   CA
   2424  fd32		       a5		      .byte.b	#%10100101	;
   2425  fd33		       a5		      .byte.b	#%10100101	; 
   2426  fd34		       e7		      .byte.b	#%11100111	; 
   2427  fd35		       a5		      .byte.b	#%10100101	; 
   2428  fd36		       e7		      .byte.b	#%11100111	;
   2429  fd37				   CB
   2430  fd37		       66		      .byte.b	#%01100110	;
   2431  fd38		       a5		      .byte.b	#%10100101	; 
   2432  fd39		       66		      .byte.b	#%01100110	; 
   2433  fd3a		       a5		      .byte.b	#%10100101	;
   2434  fd3b		       66		      .byte.b	#%01100110	;
   2435  fd3c				   CC
   2436  fd3c		       e7		      .byte.b	#%11100111	;
   2437  fd3d		       24		      .byte.b	#%00100100	; 
   2438  fd3e		       24		      .byte.b	#%00100100	; 
   2439  fd3f		       24		      .byte.b	#%00100100	;
   2440  fd40		       e7		      .byte.b	#%11100111	;
   2441  fd41
   2442  fd41				   CD
   2443  fd41		       66		      .byte.b	#%01100110	;
   2444  fd42		       a5		      .byte.b	#%10100101	; 
   2445  fd43		       a5		      .byte.b	#%10100101	; 
   2446  fd44		       a5		      .byte.b	#%10100101	;
   2447  fd45		       66		      .byte.b	#%01100110	;
   2448  fd46
   2449  fd46				   CE
   2450  fd46		       e7		      .byte.b	#%11100111	;
   2451  fd47		       24		      .byte.b	#%00100100	; 
   2452  fd48		       e7		      .byte.b	#%11100111	; 
   2453  fd49		       24		      .byte.b	#%00100100	; 
   2454  fd4a		       e7		      .byte.b	#%11100111	;
   2455  fd4b
   2456  fd4b				   CF
   2457  fd4b		       24		      .byte.b	#%00100100	;
   2458  fd4c		       24		      .byte.b	#%00100100	; 
   2459  fd4d		       e7		      .byte.b	#%11100111	; 
   2460  fd4e		       24		      .byte.b	#%00100100	; 
   2461  fd4f		       e7		      .byte.b	#%11100111	;
   2462  fd50
   2463  fd50				   CG
   2464  fd50		       c3		      .byte.b	#%11000011	;
   2465  fd51		       a5		      .byte.b	#%10100101	; 
   2466  fd52		       a5		      .byte.b	#%10100101	; 
   2467  fd53		       24		      .byte.b	#%00100100	; 
   2468  fd54		       c3		      .byte.b	#%11000011	;	
   2469  fd55
   2470  fd55				   CH
   2471  fd55		       a5		      .byte.b	#%10100101	;
   2472  fd56		       a5		      .byte.b	#%10100101	; 
   2473  fd57		       e7		      .byte.b	#%11100111	; 
   2474  fd58		       a5		      .byte.b	#%10100101	; 
   2475  fd59		       a5		      .byte.b	#%10100101	;
   2476  fd5a
   2477  fd5a				   CI
   2478  fd5a		       e7		      .byte.b	#%11100111	;
   2479  fd5b		       42		      .byte.b	#%01000010	; 
   2480  fd5c		       42		      .byte.b	#%01000010	; 
   2481  fd5d		       42		      .byte.b	#%01000010	; 
   2482  fd5e		       e7		      .byte.b	#%11100111	;
   2483  fd5f
   2484  fd5f				   CJ
   2485  fd5f		       e7		      .byte.b	#%11100111	;
   2486  fd60		       a5		      .byte.b	#%10100101	; 
   2487  fd61		       81		      .byte.b	#%10000001	; 
   2488  fd62		       81		      .byte.b	#%10000001	; 
   2489  fd63		       81		      .byte.b	#%10000001	;	
   2490  fd64
   2491  fd64				   CK
   2492  fd64		       a5		      .byte.b	#%10100101	;
   2493  fd65		       a5		      .byte.b	#%10100101	; 
   2494  fd66		       66		      .byte.b	#%01100110	; 
   2495  fd67		       a5		      .byte.b	#%10100101	; 
   2496  fd68		       a5		      .byte.b	#%10100101	;
   2497  fd69
   2498  fd69				   CL
   2499  fd69		       e7		      .byte.b	#%11100111	;
   2500  fd6a		       24		      .byte.b	#%00100100	; 
   2501  fd6b		       24		      .byte.b	#%00100100	; 
   2502  fd6c		       24		      .byte.b	#%00100100	; 
   2503  fd6d		       24		      .byte.b	#%00100100	;
   2504  fd6e
   2505  fd6e				   CM
   2506  fd6e		       a5		      .byte.b	#%10100101	;
   2507  fd6f		       a5		      .byte.b	#%10100101	; 
   2508  fd70		       a5		      .byte.b	#%10100101	; 
   2509  fd71		       e7		      .byte.b	#%11100111	; 
   2510  fd72		       a5		      .byte.b	#%10100101	;
   2511  fd73
   2512  fd73				   CN
   2513  fd73		       a5		      .byte.b	#%10100101	;
   2514  fd74		       a5		      .byte.b	#%10100101	; 
   2515  fd75		       a5		      .byte.b	#%10100101	; 
   2516  fd76		       a5		      .byte.b	#%10100101	; 
   2517  fd77		       66		      .byte.b	#%01100110	;	
   2518  fd78
   2519  fd78
   2520  fd78				   CO
   2521  fd78		       42		      .byte.b	#%01000010	;
   2522  fd79		       a5		      .byte.b	#%10100101	; 
   2523  fd7a		       a5		      .byte.b	#%10100101	; 
   2524  fd7b		       a5		      .byte.b	#%10100101	; 
   2525  fd7c		       42		      .byte.b	#%01000010	;	
   2526  fd7d
   2527  fd7d				   CP
   2528  fd7d		       24		      .byte.b	#%00100100	;
   2529  fd7e		       24		      .byte.b	#%00100100	; 
   2530  fd7f		       e7		      .byte.b	#%11100111	; 
   2531  fd80		       a5		      .byte.b	#%10100101	; 
   2532  fd81		       e7		      .byte.b	#%11100111	;
   2533  fd82
   2534  fd82				   CQ
   2535  fd82		       81		      .byte.b	#%10000001	;
   2536  fd83		       e5		      .byte.b	#%11100101	; 
   2537  fd84		       a5		      .byte.b	#%10100101	; 
   2538  fd85		       a5		      .byte.b	#%10100101	; 
   2539  fd86		       e7		      .byte.b	#%11100111	;	
   2540  fd87
   2541  fd87				   CR
   2542  fd87		       a5		      .byte.b	#%10100101	;
   2543  fd88		       a5		      .byte.b	#%10100101	; 
   2544  fd89		       66		      .byte.b	#%01100110	; 
   2545  fd8a		       a5		      .byte.b	#%10100101	; 
   2546  fd8b		       66		      .byte.b	#%01100110	;
   2547  fd8c
   2548  fd8c				   CS
   2549  fd8c		       66		      .byte.b	#%01100110	;
   2550  fd8d		       81		      .byte.b	#%10000001	; 
   2551  fd8e		       42		      .byte.b	#%01000010	; 
   2552  fd8f		       24		      .byte.b	#%00100100	; 
   2553  fd90		       c3		      .byte.b	#%11000011	;
   2554  fd91
   2555  fd91				   CT
   2556  fd91		       42		      .byte.b	#%01000010	;
   2557  fd92		       42		      .byte.b	#%01000010	; 
   2558  fd93		       42		      .byte.b	#%01000010	; 
   2559  fd94		       42		      .byte.b	#%01000010	; 
   2560  fd95		       e7		      .byte.b	#%11100111	;
   2561  fd96
   2562  fd96				   CV
   2563  fd96		       42		      .byte.b	#%01000010	;
   2564  fd97		       a5		      .byte.b	#%10100101	; 
   2565  fd98		       a5		      .byte.b	#%10100101	; 
   2566  fd99		       a5		      .byte.b	#%10100101	; 
   2567  fd9a		       a5		      .byte.b	#%10100101	;	
   2568  fd9b
   2569  fd9b				   CW
   2570  fd9b		       a5		      .byte.b	#%10100101	;
   2571  fd9c		       e7		      .byte.b	#%11100111	; 
   2572  fd9d		       a5		      .byte.b	#%10100101	; 
   2573  fd9e		       a5		      .byte.b	#%10100101	; 
   2574  fd9f		       a5		      .byte.b	#%10100101	;
   2575  fda0
   2576  fda0				   CY
   2577  fda0		       42		      .byte.b	#%01000010	;
   2578  fda1		       42		      .byte.b	#%01000010	; 
   2579  fda2		       42		      .byte.b	#%01000010	; 
   2580  fda3		       a5		      .byte.b	#%10100101	; 
   2581  fda4		       a5		      .byte.b	#%10100101	;
   2582  fda5
   2583  fda5				   Exclamation
   2584  fda5		       42		      .byte.b	#%01000010	;
   2585  fda6		       00		      .byte.b	#%00000000	; 
   2586  fda7		       42		      .byte.b	#%01000010	; 
   2587  fda8		       42		      .byte.b	#%01000010	; 
   2588  fda9		       42		      .byte.b	#%01000010	;
   2589  fdaa
   2590  fdaa				   Pipe
   2591  fdaa				   Colon
   2592  fdaa		       42		      .byte.b	#%01000010	;
   2593  fdab		       42		      .byte.b	#%01000010	; 
   2594  fdac		       00		      .byte.b	#%00000000	; 
   2595  fdad		       42		      .byte.b	#%01000010	; 
   2596  fdae		       42		      .byte.b	#%01000010	;
   2597  fdaf
   2598  fdaf				   Space
   2599  fdaf				   C0B
   2600  fdaf		       00		      .byte.b	#%00000000	;
   2601  fdb0		       00		      .byte.b	#%00000000	; 
   2602  fdb1		       00		      .byte.b	#%00000000	; 
   2603  fdb2		       00		      .byte.b	#%00000000	; 
   2604  fdb3		       00		      .byte.b	#%00000000	;	
   2605  fdb4				   C1B
   2606  fdb4		       24		      .byte.b	#%00100100	;
   2607  fdb5		       00		      .byte.b	#%00000000	; 
   2608  fdb6		       00		      .byte.b	#%00000000	; 
   2609  fdb7		       00		      .byte.b	#%00000000	; 
   2610  fdb8		       00		      .byte.b	#%00000000	;
   2611  fdb9				   C2B
   2612  fdb9		       66		      .byte.b	#%01100110	;
   2613  fdba		       00		      .byte.b	#%00000000	; 
   2614  fdbb		       00		      .byte.b	#%00000000	; 
   2615  fdbc		       00		      .byte.b	#%00000000	; 
   2616  fdbd		       00		      .byte.b	#%00000000	;
   2617  fdbe				   C3B
   2618  fdbe		       e7		      .byte.b	#%11100111	;
   2619  fdbf		       00		      .byte.b	#%00000000	; 
   2620  fdc0		       00		      .byte.b	#%00000000	; 
   2621  fdc1		       00		      .byte.b	#%00000000	; 
   2622  fdc2		       00		      .byte.b	#%00000000	;
   2623  fdc3				   C4B
   2624  fdc3		       e7		      .byte.b	#%11100111	;
   2625  fdc4		       24		      .byte.b	#%00100100	; 
   2626  fdc5		       00		      .byte.b	#%00000000	; 
   2627  fdc6		       00		      .byte.b	#%00000000	; 
   2628  fdc7		       00		      .byte.b	#%00000000	;
   2629  fdc8				   C5B
   2630  fdc8		       e7		      .byte.b	#%11100111	;
   2631  fdc9		       66		      .byte.b	#%01100110	; 
   2632  fdca		       00		      .byte.b	#%00000000	; 
   2633  fdcb		       00		      .byte.b	#%00000000	; 
   2634  fdcc		       00		      .byte.b	#%00000000	;
   2635  fdcd				   C6B
   2636  fdcd		       e7		      .byte.b	#%11100111	;
   2637  fdce		       e7		      .byte.b	#%11100111	; 
   2638  fdcf		       00		      .byte.b	#%00000000	; 
   2639  fdd0		       00		      .byte.b	#%00000000	; 
   2640  fdd1		       00		      .byte.b	#%00000000	;
   2641  fdd2				   C7B
   2642  fdd2		       e7		      .byte.b	#%11100111	;
   2643  fdd3		       e7		      .byte.b	#%11100111	; 
   2644  fdd4		       24		      .byte.b	#%00100100	; 
   2645  fdd5		       00		      .byte.b	#%00000000	; 
   2646  fdd6		       00		      .byte.b	#%00000000	;
   2647  fdd7				   C8B
   2648  fdd7		       e7		      .byte.b	#%11100111	;
   2649  fdd8		       e7		      .byte.b	#%11100111	; 
   2650  fdd9		       66		      .byte.b	#%01100110	; 
   2651  fdda		       00		      .byte.b	#%00000000	; 
   2652  fddb		       00		      .byte.b	#%00000000	;
   2653  fddc				   C9B
   2654  fddc		       e7		      .byte.b	#%11100111	;
   2655  fddd		       e7		      .byte.b	#%11100111	; 
   2656  fdde		       e7		      .byte.b	#%11100111	; 
   2657  fddf		       00		      .byte.b	#%00000000	; 
   2658  fde0		       00		      .byte.b	#%00000000	;
   2659  fde1				   CAB
   2660  fde1		       e7		      .byte.b	#%11100111	;
   2661  fde2		       e7		      .byte.b	#%11100111	; 
   2662  fde3		       e7		      .byte.b	#%11100111	; 
   2663  fde4		       24		      .byte.b	#%00100100	; 
   2664  fde5		       00		      .byte.b	#%00000000	;
   2665  fde6				   CBB
   2666  fde6		       e7		      .byte.b	#%11100111	;
   2667  fde7		       e7		      .byte.b	#%11100111	; 
   2668  fde8		       e7		      .byte.b	#%11100111	; 
   2669  fde9		       66		      .byte.b	#%01100110	; 
   2670  fdea		       00		      .byte.b	#%00000000	;
   2671  fdeb				   CCB
   2672  fdeb		       e7		      .byte.b	#%11100111	;
   2673  fdec		       e7		      .byte.b	#%11100111	; 
   2674  fded		       e7		      .byte.b	#%11100111	; 
   2675  fdee		       e7		      .byte.b	#%11100111	; 
   2676  fdef		       00		      .byte.b	#%00000000	;
   2677  fdf0
   2678  fdf0				   CDB
   2679  fdf0		       e7		      .byte.b	#%11100111	;
   2680  fdf1		       e7		      .byte.b	#%11100111	; 
   2681  fdf2		       e7		      .byte.b	#%11100111	; 
   2682  fdf3		       e7		      .byte.b	#%11100111	; 
   2683  fdf4		       24		      .byte.b	#%00100100	;
   2684  fdf5
   2685  fdf5				   CEB
   2686  fdf5		       e7		      .byte.b	#%11100111	;
   2687  fdf6		       e7		      .byte.b	#%11100111	; 
   2688  fdf7		       e7		      .byte.b	#%11100111	; 
   2689  fdf8		       e7		      .byte.b	#%11100111	; 
   2690  fdf9		       66		      .byte.b	#%01100110	;
   2691  fdfa
   2692  fdfa				   CFB
   2693  fdfa		       e7		      .byte.b	#%11100111	;
   2694  fdfb		       e7		      .byte.b	#%11100111	; 
   2695  fdfc		       e7		      .byte.b	#%11100111	; 
   2696  fdfd		       e7		      .byte.b	#%11100111	; 
   2697  fdfe		       e7		      .byte.b	#%11100111	;
   2698  fdff
   2699  fe00					      org	$FE00
   2700  fe00				   AesTable
   2701  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2702  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2703  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2704  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2705  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2706  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2707  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2708  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2709  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2710  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2711  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2712  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2713  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2714  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2715  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2716  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2717  ff00
   2718  ff00					      org	$FF00
   2719  ff00				   StaticText		; All static text must be on the same MSB block. 
   2720  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2721  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2722  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2723  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2724  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2725  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2726  ff05
   2727  ff05				   HellwayLeftText
   2728  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2729  ff06		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2730  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2731  ff08		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2732  ff09		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2733  ff0a
   2734  ff0a				   HellwayRightText
   2735  ff0a		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2736  ff0b		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2737  ff0c		       81		      .byte.b	#<CP + #FONT_OFFSET
   2738  ff0d		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2739  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2740  ff0f
   2741  ff0f				   OpbText
   2742  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2743  ff10		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2744  ff11		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2745  ff12		       81		      .byte.b	#<CP + #FONT_OFFSET
   2746  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2747  ff14
   2748  ff14				   YearText
   2749  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2750  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2751  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2752  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2753  ff18		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2754  ff19
   2755  ff19				   GameText
   2756  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2757  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2758  ff1b		       72		      .byte.b	#<CM + #FONT_OFFSET
   2759  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2760  ff1d		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2761  ff1e
   2762  ff1e				   OverText
   2763  ff1e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2764  ff1f		       9a		      .byte.b	#<CV + #FONT_OFFSET
   2765  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2766  ff21		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2767  ff22		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2768  ff23
   2769  ff23				   GoText
   2770  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2771  ff24		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2772  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2773  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2774  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2775  ff28
   2776  ff28				   ReadyText
   2777  ff28		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2778  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2779  ff2a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2780  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2781  ff2c		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2782  ff2d
   2783  ff2d				   EndStaticText
   2784  ff2d
   2785  ff2d				   TachometerSizeLookup1
   2786  ff2d		       1f		      .byte.b	#%00011111
   2787  ff2e		       3f		      .byte.b	#%00111111
   2788  ff2f		       7f		      .byte.b	#%01111111
   2789  ff30		       ff		      .byte.b	#%11111111
   2790  ff31		       ff		      .byte.b	#%11111111
   2791  ff32		       ff		      .byte.b	#%11111111
   2792  ff33		       ff		      .byte.b	#%11111111
   2793  ff34		       ff		      .byte.b	#%11111111
   2794  ff35
   2795  ff35				   TachometerSizeLookup2
   2796  ff35		       00		      .byte.b	#%00000000
   2797  ff36		       00		      .byte.b	#%00000000
   2798  ff37		       00		      .byte.b	#%00000000
   2799  ff38		       00		      .byte.b	#%00000000
   2800  ff39		       80		      .byte.b	#%10000000
   2801  ff3a		       c0		      .byte.b	#%11000000
   2802  ff3b		       e0		      .byte.b	#%11100000
   2803  ff3c		       f0		      .byte.b	#%11110000
   2804  ff3d
   2805  ff3d				   TachometerGearLookup
   2806  ff3d		       01		      .byte.b	#%00000001
   2807  ff3e		       02		      .byte.b	#%00000010
   2808  ff3f		       04		      .byte.b	#%00000100
   2809  ff40		       08		      .byte.b	#%00001000
   2810  ff41		       10		      .byte.b	#%00010000
   2811  ff42		       30		      .byte.b	#%00110000
   2812  ff43
   2813  ff43				   EngineSoundType
   2814  ff43		       02		      .byte.b	#2
   2815  ff44		       02		      .byte.b	#2
   2816  ff45		       0e		      .byte.b	#14
   2817  ff46		       06		      .byte.b	#6
   2818  ff47		       06		      .byte.b	#6
   2819  ff48		       0e		      .byte.b	#14
   2820  ff49
   2821  ff49				   EngineBaseFrequence
   2822  ff49		       1f		      .byte.b	#31
   2823  ff4a		       15		      .byte.b	#21
   2824  ff4b		       14		      .byte.b	#20
   2825  ff4c		       1f		      .byte.b	#31
   2826  ff4d		       16		      .byte.b	#22
   2827  ff4e		       03		      .byte.b	#3
   2828  ff4f
   2829  ff4f				   CarSprite0		; Upside down, Original Car
   2830  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2831  ff57				   CarSprite0NoPadding
   2832  ff57		       7e		      .byte.b	#%01111110
   2833  ff58		       24		      .byte.b	#%00100100
   2834  ff59		       bd		      .byte.b	#%10111101
   2835  ff5a		       3c		      .byte.b	#%00111100
   2836  ff5b		       bd		      .byte.b	#%10111101
   2837  ff5c		       3c		      .byte.b	#%00111100
   2838  ff5d
   2839  ff5d				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2840  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2841  ff65				   CarSprite1NoPadding
   2842  ff65		       bd		      .byte.b	#%10111101
   2843  ff66		       7e		      .byte.b	#%01111110
   2844  ff67		       5a		      .byte.b	#%01011010
   2845  ff68		       66		      .byte.b	#%01100110
   2846  ff69		       bd		      .byte.b	#%10111101
   2847  ff6a		       3c		      .byte.b	#%00111100
   2848  ff6b
   2849  ff6b				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2850  ff6b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2851  ff73				   CarSprite2NoPadding
   2852  ff73		       7e		      .byte.b	#%01111110
   2853  ff74		       a5		      .byte.b	#%10100101
   2854  ff75		       42		      .byte.b	#%01000010
   2855  ff76		       42		      .byte.b	#%01000010
   2856  ff77		       bd		      .byte.b	#%10111101
   2857  ff78		       7e		      .byte.b	#%01111110
   2858  ff79
   2859  ff79				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2860  ff79		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2861  ff81				   CarSprite3NoPadding
   2862  ff81		       3c		      .byte.b	#%00111100
   2863  ff82		       db		      .byte.b	#%11011011
   2864  ff83		       db		      .byte.b	#%11011011
   2865  ff84		       3c		      .byte.b	#%00111100
   2866  ff85		       5a		      .byte.b	#%01011010
   2867  ff86		       3c		      .byte.b	#%00111100
   2868  ff87
   2869  ff87				   TrafficSpeeds
   2870  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2871  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2872  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2873  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2874  ff8b		       e6		      .byte.b	#$E6	;  Trafic2 L
   2875  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2876  ff8d		       c2		      .byte.b	#$C2	;  Trafic3 L
   2877  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2878  ff8f		       9e		      .byte.b	#$9E	;  Trafic4 L
   2879  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2880  ff91				   TrafficSpeedsHighDelta
   2881  ff91		       00		      .byte.b	#$00	;  Trafic0 L
   2882  ff92		       00		      .byte.b	#$00	;  Trafic0 H
   2883  ff93		       0a		      .byte.b	#$0A	;  Trafic1 L
   2884  ff94		       01		      .byte.b	#$01	;  Trafic1 H
   2885  ff95		       c8		      .byte.b	#$C8	;  Trafic2 L
   2886  ff96		       00		      .byte.b	#$00	;  Trafic2 H
   2887  ff97		       86		      .byte.b	#$86	;  Trafic3 L
   2888  ff98		       00		      .byte.b	#$00	;  Trafic3 H
   2889  ff99		       44		      .byte.b	#$44	;  Trafic4 L
   2890  ff9a		       00		      .byte.b	#$00	;  Trafic4 H
   2891  ff9b
   2892  ff9b				   CarIdToSpriteAddressL
   2893  ff9b		       4f		      .byte.b	#<CarSprite0
   2894  ff9c		       5d		      .byte.b	#<CarSprite1
   2895  ff9d		       6b		      .byte.b	#<CarSprite2
   2896  ff9e		       79		      .byte.b	#<CarSprite3
   2897  ff9f
   2898  ff9f				   CarIdToSpriteAddressH
   2899  ff9f		       ff		      .byte.b	#>CarSprite0
   2900  ffa0		       ff		      .byte.b	#>CarSprite1
   2901  ffa1		       ff		      .byte.b	#>CarSprite2
   2902  ffa2		       ff		      .byte.b	#>CarSprite3
   2903  ffa3
   2904  ffa3				   EnemyCarIdToSpriteAddressL
   2905  ffa3		       57		      .byte.b	#<CarSprite0NoPadding
   2906  ffa4		       65		      .byte.b	#<CarSprite1NoPadding
   2907  ffa5		       73		      .byte.b	#<CarSprite2NoPadding
   2908  ffa6		       81		      .byte.b	#<CarSprite3NoPadding
   2909  ffa7
   2910  ffa7				   EnemyCarIdToSpriteAddressH
   2911  ffa7		       ff		      .byte.b	#>CarSprite0NoPadding
   2912  ffa8		       ff		      .byte.b	#>CarSprite1NoPadding
   2913  ffa9		       ff		      .byte.b	#>CarSprite2NoPadding
   2914  ffaa		       ff		      .byte.b	#>CarSprite3NoPadding
   2915  ffab
   2916  ffab				   CarIdToAccelerateSpeed
   2917  ffab		       80		      .byte.b	#128
   2918  ffac		       c0		      .byte.b	#192
   2919  ffad		       60		      .byte.b	#96
   2920  ffae		       c0		      .byte.b	#192
   2921  ffaf
   2922  ffaf				   CarIdToTimeoverBreakInterval 		; Glide
   2923  ffaf		       03		      .byte.b	#%00000011	;Every 4 frames
   2924  ffb0		       03		      .byte.b	#%00000011	;Every 4 frames
   2925  ffb1		       0f		      .byte.b	#%00001111	;Every 16 frames
   2926  ffb2		       03		      .byte.b	#%00000011	;Every 4 frames
   2927  ffb3
   2928  ffb3				   CarIdToMaxSpeedL
   2929  ffb3		       80		      .byte.b	#$80
   2930  ffb4		       00		      .byte.b	#$00	; One less gear
   2931  ffb5		       80		      .byte.b	#$80
   2932  ffb6		       80		      .byte.b	#$80
   2933  ffb7
   2934  ffb7				   CarIdToMaxGear
   2935  ffb7		       05		      .byte.b	#5
   2936  ffb8		       04		      .byte.b	#4	; One less gear
   2937  ffb9		       05		      .byte.b	#5
   2938  ffba		       05		      .byte.b	#5
   2939  ffbb
   2940  ffbb				   GearToBreakSpeedTable
   2941  ffbb		       09		      .byte.b	#(BREAK_SPEED - 1)
   2942  ffbc		       09		      .byte.b	#(BREAK_SPEED - 1)
   2943  ffbd		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2944  ffbe		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2945  ffbf		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2946  ffc0		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2947  ffc1
   2948  ffc1				   TrafficColorTable
   2949  ffc1		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2950  ffc2		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2951  ffc3		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2952  ffc4		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2953  ffc5
   2954  ffc5				   TrafficChanceTable
   2955  ffc5		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2956  ffc6		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2957  ffc7		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2958  ffc8		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2959  ffc9
   2960  ffc9				   TrafficTimeTable
   2961  ffc9		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2962  ffca		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2963  ffcb		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2964  ffcc		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2965  ffcd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2966  ffce
   2967  ffce
   2968  fffc					      org	$FFFC
   2969  fffc		       00 f0		      .word.w	BeforeStart
   2970  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
