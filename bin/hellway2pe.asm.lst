------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 8c	   FrameCount0 =	$8C	;
    111  f000		       00 8d	   FrameCount1 =	$8D	;
    112  f000
    113  f000		       00 8e	   Player0SpeedL =	$8E
    114  f000		       00 8f	   Player0SpeedH =	$8F
    115  f000
    116  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    117  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    118  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    119  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    120  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    121  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    122  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    123  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    124  f000
    125  f000
    126  f000							;Temporary variables, multiple uses
    127  f000		       00 b0	   Tmp0       =	$B0
    128  f000		       00 b1	   Tmp1       =	$B1
    129  f000		       00 b2	   Tmp2       =	$B2
    130  f000		       00 b3	   Tmp3       =	$B3
    131  f000
    132  f000
    133  f000		       00 b8	   CollisionCounter =	$B8
    134  f000		       00 b9	   Player0X   =	$B9
    135  f000		       00 ba	   CountdownTimer =	$BA
    136  f000		       00 bb	   Traffic0Msb =	$BB
    137  f000		       00 bc	   SwitchDebounceCounter =	$BC
    138  f000
    139  f000		       00 bd	   TimeBcd0   =	$BD
    140  f000		       00 be	   TimeBcd1   =	$BE
    141  f000		       00 bf	   TimeBcd2   =	$BF
    142  f000
    143  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    144  f000		       00 c1	   TrafficChance =	$C1
    145  f000		       00 c2	   CheckpointTime =	$C2
    146  f000		       00 c3	   TrafficColor =	$C3
    147  f000		       00 c4	   CurrentDifficulty =	$C4
    148  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    149  f000							;Bit 2 speed delta, Bit 3 random traffic 
    150  f000
    151  f000
    152  f000
    153  f000		       00 d0	   ScoreD0    =	$D0
    154  f000		       00 d1	   ScoreD1    =	$D1
    155  f000		       00 d2	   ScoreD2    =	$D2
    156  f000		       00 d3	   ScoreD3    =	$D3
    157  f000		       00 d4	   ScoreD4    =	$D4
    158  f000		       00 d5	   ScoreFontColor =	$D5
    159  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    160  f000		       00 d7	   NextCheckpoint =	$D7
    161  f000
    162  f000		       00 d8	   OpponentLine =	$D8
    163  f000
    164  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    165  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    166  f000
    167  f000		       00 dd	   StartSWCHB =	$DD	; Used for Score, so it cannot be cheated.
    168  f000		       00 de	   CarSpritePointerL =	$DE
    169  f000		       00 df	   CarSpritePointerH =	$DF
    170  f000		       00 f0	   CurrentCarId =	$F0
    171  f000		       00 f1	   AccelerateBuffer =	$F1	; Change speed on buffer overflow.
    172  f000		       00 f2	   TextSide   =	$F2
    173  f000		       00 f3	   TextFlickerMode =	$F3
    174  f000		       00 f4	   Gear       =	$F4
    175  f000
    176  f000
    177  f000							;generic start up stuff, put zero in almost all...
    178  f000				   BeforeStart		;All variables that are kept on game reset or select
    179  f000		       a0 00		      LDY	#0
    180  f002		       84 bc		      STY	SwitchDebounceCounter
    181  f004		       84 c4		      STY	CurrentDifficulty
    182  f006		       84 c0		      STY	GameStatus
    183  f008		       a0 10		      LDY	#16
    184  f00a		       84 c5		      STY	GameMode
    185  f00c		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    186  f00e		       84 f0		      STY	CurrentCarId
    187  f010
    188  f010				   Start
    189  f010		       a9 02		      LDA	#2
    190  f012		       85 00		      STA	VSYNC
    191  f014		       85 02		      STA	WSYNC
    192  f016		       85 02		      STA	WSYNC
    193  f018		       85 02		      STA	WSYNC
    194  f01a		       a9 00		      LDA	#0	;2
    195  f01c		       85 00		      STA	VSYNC	;3
    196  f01e
    197  f01e		       78		      SEI
    198  f01f		       d8		      CLD
    199  f020		       a2 ff		      LDX	#$FF
    200  f022		       9a		      TXS
    201  f023
    202  f023		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    203  f025				   CleanMem
    204  f025		       e0 bc		      CPX	#SwitchDebounceCounter
    205  f027		       f0 12		      BEQ	SkipClean
    206  f029		       e0 c5		      CPX	#GameMode
    207  f02b		       f0 0e		      BEQ	SkipClean
    208  f02d		       e0 f0		      CPX	#CurrentCarId
    209  f02f		       f0 0a		      BEQ	SkipClean
    210  f031		       e0 c4		      CPX	#CurrentDifficulty
    211  f033		       f0 06		      BEQ	SkipClean
    212  f035		       e0 c0		      CPX	#GameStatus
    213  f037		       f0 02		      BEQ	SkipClean
    214  f039		       95 00		      STA	0,X
    215  f03b				   SkipClean
    216  f03b		       e8		      INX
    217  f03c		       d0 e7		      BNE	CleanMem
    218  f03e
    219  f03e		       a9 d5		      LDA	#213
    220  f040		       8d 96 02 	      STA	TIM64T	;3	
    221  f043
    222  f043							;Setting some variables...
    223  f043
    224  f043				   SettingTrafficOffsets		; Time sensitive with player H position
    225  f043		       85 02		      STA	WSYNC	;We will set player position
    226  f045		       20 ec f7 	      JSR	DefaultOffsets
    227  f048
    228  f048		       85 10		      STA	RESP0	; Not Correct yet
    229  f04a
    230  f04a		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    231  f04d		       85 8e		      STA	Player0SpeedL
    232  f04f
    233  f04f							;SLEEP 11;18
    234  f04f
    235  f04f
    236  f04f		       a2 00		      LDX	#0
    237  f051		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    238  f054		       85 dd		      STA	StartSWCHB	; For game over
    239  f056		       29 c0		      AND	#%11000000
    240  f058		       f0 0b		      BEQ	CallConfigureDifficulty
    241  f05a		       e8		      INX
    242  f05b		       c9 80		      CMP	#%10000000
    243  f05d		       f0 06		      BEQ	CallConfigureDifficulty
    244  f05f		       e8		      INX
    245  f060		       c9 40		      CMP	#%01000000
    246  f062		       f0 01		      BEQ	CallConfigureDifficulty
    247  f064		       e8		      INX
    248  f065
    249  f065				   CallConfigureDifficulty
    250  f065		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    251  f067		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    252  f069		       a5 c0		      LDA	GameStatus
    253  f06b		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    254  f06d				   NextCar
    255  f06d		       a4 f0		      LDY	CurrentCarId
    256  f06f		       c8		      INY
    257  f070		       98		      TYA
    258  f071		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    259  f073		       85 f0		      STA	CurrentCarId
    260  f075				   StoreCurrentDifficulty
    261  f075		       86 c4		      STX	CurrentDifficulty
    262  f077		       20 c1 f7 	      JSR	ConfigureDifficulty
    263  f07a
    264  f07a				   ConfigureCarSprite
    265  f07a		       a4 f0		      LDY	CurrentCarId
    266  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
    267  f07f		       85 de		      STA	CarSpritePointerL
    268  f081		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
    269  f084		       85 df		      STA	CarSpritePointerH
    270  f086
    271  f086				   ConfigureEnemyCarSprite
    272  f086		       a4 f0		      LDY	CurrentCarId
    273  f088		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
    274  f08b		       85 d9		      STA	EnemyCarSpritePointerL
    275  f08d		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
    276  f090		       85 da		      STA	EnemyCarSpritePointerH
    277  f092
    278  f092				   SetGameNotRunning
    279  f092		       a9 00		      LDA	#0
    280  f094		       85 c0		      STA	GameStatus
    281  f096
    282  f096
    283  f096				   ConfigureTimer
    284  f096		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    285  f098		       85 ba		      STA	CountdownTimer	;3
    286  f09a
    287  f09a				   HPositioning 		; Avoid sleep doing needed stuff
    288  f09a		       85 02		      STA	WSYNC
    289  f09c
    290  f09c				   ConfigurePlayerXPosition
    291  f09c		       a9 35		      LDA	#PLAYER_0_X_START	;2
    292  f09e		       85 b9		      STA	Player0X	;3
    293  f0a0
    294  f0a0				   ConfigureMissileSize
    295  f0a0		       a9 30		      LDA	#%00110000	;2 Missile Size
    296  f0a2		       85 04		      STA	NUSIZ0	;3
    297  f0a4		       85 05		      STA	NUSIZ1	;3
    298  f0a6
    299  f0a6				   ConfigureNextCheckpoint
    300  f0a6		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    301  f0a8		       85 d7		      STA	NextCheckpoint
    302  f0aa
    303  f0aa		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0ac					      SLEEP	5	;
      1  f0ac				   .CYCLES    SET	5
      2  f0ac
      3  f0ac				  -	      IF	.CYCLES < 2
      4  f0ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ac				  -	      ERR
      6  f0ac					      ENDIF
      7  f0ac
      8  f0ac					      IF	.CYCLES & 1
      9  f0ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ac				  -	      nop	0
     11  f0ac					      ELSE
     12  f0ac		       24 00		      bit	VSYNC
     13  f0ae					      ENDIF
     14  f0ae				   .CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae					      REPEAT	.CYCLES / 2
     18  f0ae		       ea		      nop
     19  f0af					      REPEND
    305  f0af		       85 12		      STA	RESM0
      0  f0b1					      SLEEP	2	;
      1  f0b1				   .CYCLES    SET	2
      2  f0b1
      3  f0b1				  -	      IF	.CYCLES < 2
      4  f0b1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b1				  -	      ERR
      6  f0b1					      ENDIF
      7  f0b1
      8  f0b1				  -	      IF	.CYCLES & 1
      9  f0b1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b1				  -	      nop	0
     11  f0b1				  -	      ELSE
     12  f0b1				  -	      bit	VSYNC
     13  f0b1				  -	      ENDIF
     14  f0b1				  -.CYCLES    SET	.CYCLES - 3
     15  f0b1					      ENDIF
     16  f0b1
     17  f0b1					      REPEAT	.CYCLES / 2
     18  f0b1		       ea		      nop
     19  f0b2					      REPEND
    307  f0b2		       85 14		      STA	RESBL
      0  f0b4					      SLEEP	2
      1  f0b4				   .CYCLES    SET	2
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     19  f0b5					      REPEND
    309  f0b5		       85 13		      STA	RESM1
    310  f0b7		       85 11		      STA	RESP1
    311  f0b9
    312  f0b9		       a9 f0		      LDA	#$F0
    313  f0bb		       85 24		      STA	HMBL
    314  f0bd		       85 22		      STA	HMM0
    315  f0bf		       85 23		      STA	HMM1
    316  f0c1		       85 02		      STA	WSYNC
    317  f0c3		       85 2a		      STA	HMOVE
    318  f0c5		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    319  f0c7		       85 2b		      STA	HMCLR
    320  f0c9
    321  f0c9				   WaitResetToEnd
    322  f0c9		       ad 84 02 	      LDA	INTIM
    323  f0cc		       d0 fb		      BNE	WaitResetToEnd
    324  f0ce
    325  f0ce				   MainLoop
    326  f0ce		       a9 02		      LDA	#2
    327  f0d0		       85 00		      STA	VSYNC
    328  f0d2		       85 02		      STA	WSYNC
    329  f0d4		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    330  f0d6				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    331  f0d6		       a9 01		      LDA	#%00000001	;3
    332  f0d8		       24 f3		      BIT	TextFlickerMode	;2
    333  f0da		       f0 05		      BEQ	TextSideFrameZero	;2
    334  f0dc		       25 8d		      AND	FrameCount1	;2
    335  f0de		       4c e3 f0 	      JMP	StoreTextSize	;3
    336  f0e1				   TextSideFrameZero
    337  f0e1		       25 8c		      AND	FrameCount0	;2
    338  f0e3				   StoreTextSize
    339  f0e3		       85 f2		      STA	TextSide	;3
    340  f0e5
    341  f0e5				   PrepareMaxHMove
      0  f0e5					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e5				   .CYCLES    SET	18
      2  f0e5
      3  f0e5				  -	      IF	.CYCLES < 2
      4  f0e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e5				  -	      ERR
      6  f0e5					      ENDIF
      7  f0e5
      8  f0e5				  -	      IF	.CYCLES & 1
      9  f0e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e5				  -	      nop	0
     11  f0e5				  -	      ELSE
     12  f0e5				  -	      bit	VSYNC
     13  f0e5				  -	      ENDIF
     14  f0e5				  -.CYCLES    SET	.CYCLES - 3
     15  f0e5					      ENDIF
     16  f0e5
     17  f0e5					      REPEAT	.CYCLES / 2
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     17  f0eb					      REPEND
     18  f0ec		       ea		      nop
     17  f0ec					      REPEND
     18  f0ed		       ea		      nop
     19  f0ee					      REPEND
    343  f0ee		       a9 80		      LDA	#$80
    344  f0f0		       85 24		      STA	HMBL
    345  f0f2		       85 22		      STA	HMM0
    346  f0f4		       85 23		      STA	HMM1
    347  f0f6		       85 20		      STA	HMP0
    348  f0f8		       85 21		      STA	HMP1
    349  f0fa		       85 02		      STA	WSYNC
    350  f0fc		       85 2a		      STA	HMOVE	; 1/10			
    351  f0fe
    352  f0fe				   ConfigVBlankTimer
    353  f0fe		       a5 c5		      LDA	GameMode
    354  f100		       c9 10		      CMP	#MAX_GAME_MODE
    355  f102		       f0 05		      BEQ	SetVblankTimerQrCode
    356  f104		       a9 29		      LDA	#VBLANK_TIMER
    357  f106		       4c 0b f1 	      JMP	SetVblankTimer
    358  f109				   SetVblankTimerQrCode
    359  f109		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    360  f10b
    361  f10b				   SetVblankTimer
    362  f10b		       85 02		      STA	WSYNC	;3
    363  f10d		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    364  f10f		       8d 96 02 	      STA	TIM64T	;3	
    365  f112		       a9 00		      LDA	#0	;2
    366  f114		       85 00		      STA	VSYNC	;3	
    367  f116
    368  f116				   RandomizeGame
    369  f116		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    370  f118		       d0 2d		      BNE	EndRandomizeGame
    371  f11a		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    372  f11c		       29 02		      AND	#%00000010
    373  f11e		       f0 24		      BEQ	DeterministicGame
    374  f120		       a6 96		      LDX	TrafficOffset1 + 2
    375  f122		       bd 00 fe 	      LDA	AesTable,X
    376  f125		       45 8c		      EOR	FrameCount0
    377  f127		       85 96		      STA	TrafficOffset1 + 2
    378  f129		       85 a6		      STA	OpTrafficOffset1 + 2
    379  f12b		       a6 9a		      LDX	TrafficOffset2 + 2
    380  f12d		       bd 00 fe 	      LDA	AesTable,X
    381  f130		       45 8c		      EOR	FrameCount0
    382  f132		       85 9a		      STA	TrafficOffset2 + 2
    383  f134		       85 aa		      STA	OpTrafficOffset2 + 2
    384  f136		       a6 9e		      LDX	TrafficOffset3 + 2
    385  f138		       bd 00 fe 	      LDA	AesTable,X
    386  f13b		       45 8c		      EOR	FrameCount0
    387  f13d		       85 9e		      STA	TrafficOffset3 + 2
    388  f13f		       85 ae		      STA	OpTrafficOffset3 + 2
    389  f141		       4c 47 f1 	      JMP	EndRandomizeGame
    390  f144
    391  f144				   DeterministicGame
    392  f144		       20 ec f7 	      JSR	DefaultOffsets
    393  f147
    394  f147				   EndRandomizeGame
    395  f147
    396  f147							; Move this in the code and save cycles, for some reason spliting is breaking...
    397  f147		       a2 08		      LDX	#8
    398  f149				   BurnAllHMove
    399  f149		       85 02		      STA	WSYNC	;3
    400  f14b		       85 2a		      STA	HMOVE	; 3/10 
    401  f14d		       ca		      DEX
    402  f14e		       d0 f9		      BNE	BurnAllHMove
    403  f150		       85 02		      STA	WSYNC	;3
    404  f152		       85 2b		      STA	HMCLR	; 
    405  f154
    406  f154				   CountFrame
    407  f154		       e6 8c		      INC	FrameCount0	; 5
    408  f156		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    409  f158		       e6 8d		      INC	FrameCount1	; 5 
    410  f15a				   SkipIncFC1
    411  f15a
    412  f15a				   CallDrawQrCode
    413  f15a		       a5 c5		      LDA	GameMode
    414  f15c		       c9 10		      CMP	#MAX_GAME_MODE
    415  f15e		       d0 03		      BNE	TestIsGameRunning
    416  f160		       4c 64 fc 	      JMP	DrawQrCode
    417  f163
    418  f163							;Does not update the game if not running
    419  f163				   TestIsGameRunning
    420  f163		       a5 c0		      LDA	GameStatus	;3
    421  f165		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    422  f167		       4c f7 f2 	      JMP	SkipUpdateLogic
    423  f16a				   ContinueWithGameLogic
    424  f16a
    425  f16a				   EverySecond		; 64 frames to be more precise
    426  f16a		       a9 3f		      LDA	#%00111111
    427  f16c		       25 8c		      AND	FrameCount0
    428  f16e		       d0 06		      BNE	SkipEverySecondAction
    429  f170		       c5 ba		      CMP	CountdownTimer
    430  f172		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    431  f174		       c6 ba		      DEC	CountdownTimer
    432  f176				   SkipEverySecondAction
    433  f176
    434  f176				   ChangeTextFlickerMode
    435  f176		       a5 bc		      LDA	SwitchDebounceCounter
    436  f178		       d0 0d		      BNE	EndChangeTextFlickerMode
    437  f17a		       ad 82 02 	      LDA	SWCHB
    438  f17d		       29 02		      AND	#%00000010	;Game select
    439  f17f		       d0 06		      BNE	EndChangeTextFlickerMode
    440  f181		       e6 f3		      INC	TextFlickerMode
    441  f183		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    442  f185		       85 bc		      STA	SwitchDebounceCounter
    443  f187				   EndChangeTextFlickerMode
    444  f187
    445  f187				   BreakOnTimeOver		; Uses LDX as the breaking speed
    446  f187		       a2 00		      LDX	#0
    447  f189		       a5 ba		      LDA	CountdownTimer
    448  f18b		       d0 0b		      BNE	Break
    449  f18d		       a4 f0		      LDY	CurrentCarId
    450  f18f		       a5 8c		      LDA	FrameCount0
    451  f191		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    452  f194		       d0 02		      BNE	Break
    453  f196		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    454  f198
    455  f198				   Break
    456  f198		       a9 20		      LDA	#%00100000	;Down in controller
    457  f19a		       2c 80 02 	      BIT	SWCHA
    458  f19d		       d0 0e		      BNE	BreakNonZero
    459  f19f		       a5 0c		      LDA	INPT4	;3
    460  f1a1		       10 08		      BPL	BreakWhileAccelerating
    461  f1a3		       a4 f4		      LDY	Gear
    462  f1a5		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    463  f1a8		       4c ad f1 	      JMP	BreakNonZero
    464  f1ab				   BreakWhileAccelerating		; Allow better control while breaking.
    465  f1ab		       a2 05		      LDX	(#BREAK_SPEED / 2)
    466  f1ad
    467  f1ad				   BreakNonZero
    468  f1ad		       e0 00		      CPX	#0
    469  f1af		       f0 2b		      BEQ	SkipBreak
    470  f1b1		       86 b0		      STX	Tmp0
    471  f1b3
    472  f1b3				   DecreaseSpeed
    473  f1b3		       38		      SEC
    474  f1b4		       a5 8e		      LDA	Player0SpeedL
    475  f1b6		       e5 b0		      SBC	Tmp0
    476  f1b8		       85 8e		      STA	Player0SpeedL
    477  f1ba		       a5 8f		      LDA	Player0SpeedH
    478  f1bc		       e9 00		      SBC	#0
    479  f1be		       85 8f		      STA	Player0SpeedH
    480  f1c0
    481  f1c0				   CheckMinSpeed
    482  f1c0		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    483  f1c2		       c9 00		      CMP	#CAR_MIN_SPEED_H
    484  f1c4		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    485  f1c6		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    486  f1c8
    487  f1c8				   CompareLBreakSpeed
    488  f1c8		       a5 8e		      LDA	Player0SpeedL
    489  f1ca		       c9 00		      CMP	#CAR_MIN_SPEED_L
    490  f1cc		       90 03		      BCC	ResetMinSpeed	; Less than memory
    491  f1ce		       4c d9 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    492  f1d1
    493  f1d1				   ResetMinSpeed
    494  f1d1		       a9 00		      LDA	#CAR_MIN_SPEED_H
    495  f1d3		       85 8f		      STA	Player0SpeedH
    496  f1d5		       a9 00		      LDA	#CAR_MIN_SPEED_L
    497  f1d7		       85 8e		      STA	Player0SpeedL
    498  f1d9
    499  f1d9				   SkipAccelerateIfBreaking
    500  f1d9		       4c 1e f2 	      JMP	SkipAccelerate
    501  f1dc				   SkipBreak
    502  f1dc
    503  f1dc				   Acelerates
    504  f1dc		       a5 ba		      LDA	CountdownTimer
    505  f1de		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    506  f1e0
    507  f1e0				   ContinueAccelerateTest
    508  f1e0		       a5 0c		      LDA	INPT4	;3
    509  f1e2		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    510  f1e4		       a9 10		      LDA	#%00010000	;UP in controller
    511  f1e6		       2c 80 02 	      BIT	SWCHA
    512  f1e9		       d0 33		      BNE	SkipAccelerate
    513  f1eb
    514  f1eb				   IncreaseCarSpeed
    515  f1eb		       a2 02		      LDX	#2
    516  f1ed		       a4 f0		      LDY	CurrentCarId
    517  f1ef				   IncreaseCarSpeedLoop
    518  f1ef							;Adds speed
    519  f1ef		       18		      CLC
    520  f1f0		       a5 f1		      LDA	AccelerateBuffer
    521  f1f2		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    522  f1f5		       85 f1		      STA	AccelerateBuffer
    523  f1f7		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    524  f1f9		       e6 8e		      INC	Player0SpeedL
    525  f1fb		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    526  f1fd		       e6 8f		      INC	Player0SpeedH
    527  f1ff				   ContinueIncreaseSpeedLoop
    528  f1ff		       ca		      DEX
    529  f200		       d0 ed		      BNE	IncreaseCarSpeedLoop
    530  f202				   SkipIncreaseCarSpeed
    531  f202
    532  f202				   CheckIfAlreadyMaxSpeed
    533  f202		       a5 8f		      LDA	Player0SpeedH
    534  f204		       c9 02		      CMP	#CAR_MAX_SPEED_H
    535  f206		       90 16		      BCC	SkipAccelerate	; less than my max speed
    536  f208		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    537  f20a							;High bit is max, compare the low
    538  f20a		       a4 f0		      LDY	CurrentCarId
    539  f20c		       a5 8e		      LDA	Player0SpeedL
    540  f20e		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    541  f211		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    542  f213							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    543  f213
    544  f213				   ResetToMaxSpeed		; Speed is more, or is already max
    545  f213		       a9 02		      LDA	#CAR_MAX_SPEED_H
    546  f215		       85 8f		      STA	Player0SpeedH
    547  f217		       a4 f0		      LDY	CurrentCarId
    548  f219		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    549  f21c		       85 8e		      STA	Player0SpeedL
    550  f21e				   SkipAccelerate
    551  f21e
    552  f21e				   InitUpdateOffsets
    553  f21e		       a2 00		      LDX	#0	; Memory Offset 24 bit
    554  f220		       a0 00		      LDY	#0	; Line Speeds 16 bits
    555  f222		       a5 91		      LDA	TrafficOffset0 + 1	;
    556  f224		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    557  f226		       a5 c5		      LDA	GameMode
    558  f228		       29 04		      AND	#%00000100	; GameModes with high delta
    559  f22a		       f0 02		      BEQ	UpdateOffsets
    560  f22c		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    561  f22e
    562  f22e				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    563  f22e		       38		      SEC
    564  f22f		       a5 8e		      LDA	Player0SpeedL
    565  f231		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    566  f234		       85 b0		      STA	Tmp0
    567  f236		       c8		      INY
    568  f237		       a5 8f		      LDA	Player0SpeedH
    569  f239		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    570  f23c		       85 b1		      STA	Tmp1
    571  f23e		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    572  f240		       e9 00		      SBC	#0
    573  f242		       85 b2		      STA	Tmp2
    574  f244
    575  f244				   AddsTheResult
    576  f244		       18		      CLC
    577  f245		       a5 b0		      LDA	Tmp0
    578  f247		       75 90		      ADC	TrafficOffset0,X
    579  f249		       95 90		      STA	TrafficOffset0,X
    580  f24b		       e8		      INX
    581  f24c		       a5 b1		      LDA	Tmp1
    582  f24e		       75 90		      ADC	TrafficOffset0,X
    583  f250		       95 90		      STA	TrafficOffset0,X
    584  f252		       e8		      INX
    585  f253		       a5 b2		      LDA	Tmp2	; Carry
    586  f255		       75 90		      ADC	TrafficOffset0,X
    587  f257		       95 90		      STA	TrafficOffset0,X
    588  f259		       90 06		      BCC	CalculateOffsetCache
    589  f25b		       e0 02		      CPX	#2	;MSB offset 0
    590  f25d		       d0 02		      BNE	CalculateOffsetCache
    591  f25f		       e6 bb		      INC	Traffic0Msb
    592  f261
    593  f261				   CalculateOffsetCache
    594  f261		       e8		      INX
    595  f262		       38		      SEC
    596  f263		       69 00		      ADC	#0	;Increment by one
    597  f265		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    598  f267
    599  f267				   PrepareNextUpdateLoop
    600  f267		       c8		      INY
    601  f268		       e8		      INX
    602  f269		       e0 10		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    603  f26b		       d0 c1		      BNE	UpdateOffsets
    604  f26d
    605  f26d				   ConfigureOpponentLine		; Temporary
    606  f26d		       a9 05		      LDA	#5	; Extract to constant
    607  f26f		       85 d8		      STA	OpponentLine
    608  f271
    609  f271
    610  f271							;Until store the movemnt, LDX contains the value to be stored.
    611  f271				   TestCollision		;
    612  f271							; see if player0 colides with the rest
    613  f271		       a5 00		      LDA	CXM0P
    614  f273		       05 01		      ORA	CXM1P
    615  f275		       05 01		      ORA	CXM1P
    616  f277		       05 02		      ORA	CXP0FB
    617  f279		       05 07		      ORA	CXPPMM
    618  f27b		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    619  f27d		       f0 29		      BEQ	NoCollision	;skip if not hitting...
    620  f27f		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    621  f281		       d0 25		      BNE	NoCollision
    622  f283		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    623  f285		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    624  f287		       f0 1f		      BEQ	NoCollision
    625  f289		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    626  f28b		       f0 1b		      BEQ	NoCollision
    627  f28d		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    628  f28f		       85 b8		      STA	CollisionCounter	;and store as colision.
    629  f291		       a5 8f		      LDA	Player0SpeedH
    630  f293		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    631  f295		       a9 10		      LDA	#COLLISION_SPEED_L
    632  f297		       c5 8e		      CMP	Player0SpeedL
    633  f299		       b0 04		      BCS	SkipSetColisionSpeedL
    634  f29b				   SetColisionSpeedL
    635  f29b		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    636  f29d		       85 8e		      STA	Player0SpeedL
    637  f29f				   SkipSetColisionSpeedL
    638  f29f		       a9 00		      LDA	#0
    639  f2a1		       85 8f		      STA	Player0SpeedH
    640  f2a3		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    641  f2a5		       4c f3 f2 	      JMP	StoreHMove	; We keep position consistent
    642  f2a8				   NoCollision
    643  f2a8
    644  f2a8				   DecrementCollision
    645  f2a8		       a4 b8		      LDY	CollisionCounter
    646  f2aa		       f0 07		      BEQ	FinishDecrementCollision
    647  f2ac		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    648  f2ae		       85 04		      STA	NUSIZ0
    649  f2b0		       88		      DEY
    650  f2b1		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    651  f2b3				   FinishDecrementCollision
    652  f2b3
    653  f2b3				   ResetPlayerSize
    654  f2b3		       d0 04		      BNE	FinishResetPlayerSize
    655  f2b5		       a9 30		      LDA	#%00110000
    656  f2b7		       85 04		      STA	NUSIZ0	;
    657  f2b9				   FinishResetPlayerSize
    658  f2b9
    659  f2b9							;STA HMCLR ; Do not double move car.
    660  f2b9
    661  f2b9				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    662  f2b9		       c0 01		      CPY	#1	; Last frame before reset
    663  f2bb		       d0 05		      BNE	SkipResetPlayerPosition
    664  f2bd		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    665  f2bf		       4c f3 f2 	      JMP	StoreHMove
    666  f2c2				   SkipResetPlayerPosition
    667  f2c2
    668  f2c2				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    669  f2c2		       a5 f0		      LDA	CurrentCarId
    670  f2c4		       c9 03		      CMP	#CAR_ID_DRAGSTER
    671  f2c6		       d0 08		      BNE	PrepareReadXAxis
    672  f2c8		       a2 00		      LDX	#0
    673  f2ca		       a5 8c		      LDA	FrameCount0
    674  f2cc		       29 01		      AND	#DRAGSTER_TURN_MASK
    675  f2ce		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    676  f2d0
    677  f2d0							; for left and right, we're gonna 
    678  f2d0							; set the horizontal speed, and then do
    679  f2d0							; a single HMOVE.  We'll use X to hold the
    680  f2d0							; horizontal speed, then store it in the 
    681  f2d0							; appropriate register
    682  f2d0				   PrepareReadXAxis
    683  f2d0		       a2 00		      LDX	#0
    684  f2d2		       a4 b9		      LDY	Player0X
    685  f2d4				   BeginReadLeft
    686  f2d4		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    687  f2d6		       a9 40		      LDA	#%01000000	;Left
    688  f2d8		       2c 80 02 	      BIT	SWCHA
    689  f2db		       d0 07		      BNE	SkipMoveLeft
    690  f2dd		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    691  f2df		       c6 b9		      DEC	Player0X
    692  f2e1		       4c f3 f2 	      JMP	StoreHMove	; Cannot move left and right...
    693  f2e4				   SkipMoveLeft
    694  f2e4				   BeginReadRight
    695  f2e4		       c0 36		      CPY	#PLAYER_0_MAX_X
    696  f2e6		       f0 0b		      BEQ	SkipMoveRight	; At max already
    697  f2e8		       a9 80		      LDA	#%10000000	;Right
    698  f2ea		       2c 80 02 	      BIT	SWCHA
    699  f2ed		       d0 04		      BNE	SkipMoveRight
    700  f2ef		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    701  f2f1		       e6 b9		      INC	Player0X
    702  f2f3				   SkipMoveRight
    703  f2f3				   StoreHMove
    704  f2f3		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    705  f2f5		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    706  f2f7
    707  f2f7				   SkipUpdateLogic		; Continue here if not paused
    708  f2f7
    709  f2f7				   CalculateGear
    710  f2f7		       a5 8e		      LDA	Player0SpeedL	;3
    711  f2f9		       29 80		      AND	#%10000000	;2
    712  f2fb		       05 8f		      ORA	Player0SpeedH	;3
    713  f2fd		       18		      CLC		;2
    714  f2fe		       2a		      ROL		;2
    715  f2ff		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    716  f301		       85 f4		      STA	Gear
    717  f303
    718  f303				   EndProcessingBorder
    719  f303
    720  f303				   ProcessScoreFontColor
    721  f303		       a6 d6		      LDX	ScoreFontColorHoldChange
    722  f305		       f0 06		      BEQ	ResetScoreFontColor
    723  f307		       ca		      DEX
    724  f308		       86 d6		      STX	ScoreFontColorHoldChange
    725  f30a		       4c 11 f3 	      JMP	SkipScoreFontColor
    726  f30d				   ResetScoreFontColor
    727  f30d		       a9 f9		      LDA	#SCORE_FONT_COLOR
    728  f30f		       85 d5		      STA	ScoreFontColor
    729  f311				   SkipScoreFontColor
    730  f311
    731  f311				   IsGameOver
    732  f311		       a5 ba		      LDA	CountdownTimer
    733  f313		       05 8e		      ORA	Player0SpeedL
    734  f315		       05 8f		      ORA	Player0SpeedH
    735  f317		       d0 0b		      BNE	IsCheckpoint
    736  f319		       a9 01		      LDA	#1
    737  f31b		       85 d6		      STA	ScoreFontColorHoldChange
    738  f31d		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    739  f31f		       85 d5		      STA	ScoreFontColor
    740  f321		       4c 56 f3 	      JMP	SkipIsTimeOver
    741  f324
    742  f324				   IsCheckpoint
    743  f324		       a5 d7		      LDA	NextCheckpoint
    744  f326		       c5 92		      CMP	TrafficOffset0 + 2
    745  f328		       d0 20		      BNE	SkipIsCheckpoint
    746  f32a		       18		      CLC
    747  f32b		       69 10		      ADC	#CHECKPOINT_INTERVAL
    748  f32d		       85 d7		      STA	NextCheckpoint
    749  f32f		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    750  f331		       85 d5		      STA	ScoreFontColor
    751  f333		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    752  f335		       85 d6		      STA	ScoreFontColorHoldChange
    753  f337		       a5 ba		      LDA	CountdownTimer
    754  f339		       18		      CLC
    755  f33a		       65 c2		      ADC	CheckpointTime
    756  f33c		       85 ba		      STA	CountdownTimer
    757  f33e		       90 04		      BCC	JumpSkipTimeOver
    758  f340		       a9 ff		      LDA	#$FF
    759  f342		       85 ba		      STA	CountdownTimer	; Does not overflow!
    760  f344				   JumpSkipTimeOver
    761  f344		       20 b2 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    762  f347		       4c 56 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    763  f34a				   SkipIsCheckpoint
    764  f34a
    765  f34a				   IsTimeOver
    766  f34a		       a5 ba		      LDA	CountdownTimer
    767  f34c		       d0 08		      BNE	SkipIsTimeOver
    768  f34e		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    769  f350		       85 d6		      STA	ScoreFontColorHoldChange
    770  f352		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    771  f354		       85 d5		      STA	ScoreFontColor
    772  f356				   SkipIsTimeOver
    773  f356
    774  f356
    775  f356				   PrintEasterEggCondition
    776  f356		       a5 8d		      LDA	FrameCount1
    777  f358		       29 38		      AND	#%00111000
    778  f35a		       05 c0		      ORA	GameStatus
    779  f35c		       c9 38		      CMP	#%00111000
    780  f35e		       d0 06		      BNE	ChooseTextSide
    781  f360		       20 1f f8 	      JSR	PrintEasterEgg
    782  f363		       4c 55 f4 	      JMP	RightScoreWriteEnd
    783  f366
    784  f366							;Could be done during on vblank to save this comparisson time (before draw score), 
    785  f366							;but I am saving vblank cycles for now, in case of 2 players.
    786  f366				   ChooseTextSide		; 
    787  f366		       a5 f2		      LDA	TextSide	;3
    788  f368		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    789  f36a		       4c eb f3 	      JMP	RightScoreWrite
    790  f36d
    791  f36d				   LeftScoreWrite
    792  f36d		       a5 d5		      LDA	ScoreFontColor
    793  f36f		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    794  f371		       f0 4e		      BEQ	PrintCheckpoint
    795  f373		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    796  f375		       f0 52		      BEQ	PrintStartGame
    797  f377		       a5 c0		      LDA	GameStatus
    798  f379		       f0 56		      BEQ	PrintHellwayLeft
    799  f37b				   WriteDistance		;Not optimized yet, ugly code.
    800  f37b				   Digit0Distance
    801  f37b		       a5 91		      LDA	TrafficOffset0 + 1	;3
    802  f37d		       4a		      LSR		; 2
    803  f37e		       4a		      LSR		; 2
    804  f37f		       4a		      LSR		; 2
    805  f380		       4a		      LSR		; 2
    806  f381		       aa		      TAX		; 2
    807  f382		       bd be fd 	      LDA	FontLookup,X	;4
    808  f385		       85 d3		      STA	ScoreD3	;3
    809  f387
    810  f387				   Digit1Distance
    811  f387		       a5 92		      LDA	TrafficOffset0 + 2	;3
    812  f389		       29 0f		      AND	#%00001111	;2
    813  f38b		       aa		      TAX		; 2
    814  f38c		       bd be fd 	      LDA	FontLookup,X	;4 
    815  f38f		       85 d2		      STA	ScoreD2	;3
    816  f391
    817  f391				   Digit2Distance
    818  f391		       a5 92		      LDA	TrafficOffset0 + 2	;3
    819  f393		       4a		      LSR		; 2
    820  f394		       4a		      LSR		; 2
    821  f395		       4a		      LSR		; 2
    822  f396		       4a		      LSR		; 2
    823  f397		       aa		      TAX		; 2
    824  f398		       bd be fd 	      LDA	FontLookup,X	;4
    825  f39b		       85 d1		      STA	ScoreD1	;3
    826  f39d
    827  f39d				   Digit3Distance
    828  f39d		       a5 bb		      LDA	Traffic0Msb	;3
    829  f39f		       29 0f		      AND	#%00001111	;2
    830  f3a1		       aa		      TAX		; 2
    831  f3a2		       bd be fd 	      LDA	FontLookup,X	;4 
    832  f3a5		       85 d0		      STA	ScoreD0	;3
    833  f3a7
    834  f3a7				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    835  f3a7		       a5 bb		      LDA	Traffic0Msb
    836  f3a9		       29 f0		      AND	#%11110000	;2
    837  f3ab		       d0 07		      BNE	DrawDistanceExtraDigit
    838  f3ad		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    839  f3af		       85 d4		      STA	ScoreD4	;3
    840  f3b1		       4c be f3 	      JMP	EndDrawDistance
    841  f3b4				   DrawDistanceExtraDigit
    842  f3b4		       4a		      LSR		; 2
    843  f3b5		       4a		      LSR		; 2
    844  f3b6		       4a		      LSR		; 2
    845  f3b7		       4a		      LSR		; 2
    846  f3b8		       aa		      TAX		; 2
    847  f3b9		       bd be fd 	      LDA	FontLookup,X	;4
    848  f3bc		       85 d4		      STA	ScoreD4	;3
    849  f3be
    850  f3be				   EndDrawDistance
    851  f3be		       4c 55 f4 	      JMP	RightScoreWriteEnd	;3
    852  f3c1
    853  f3c1				   PrintCheckpoint
    854  f3c1		       a2 00		      LDX	#<CheckpointText
    855  f3c3		       20 01 f8 	      JSR	PrintStaticText
    856  f3c6		       4c 55 f4 	      JMP	RightScoreWriteEnd	;3
    857  f3c9				   PrintStartGame
    858  f3c9		       a2 23		      LDX	#<GoText
    859  f3cb		       20 01 f8 	      JSR	PrintStaticText
    860  f3ce		       4c 55 f4 	      JMP	RightScoreWriteEnd	;3
    861  f3d1
    862  f3d1				   PrintHellwayLeft
    863  f3d1		       a5 8d		      LDA	FrameCount1
    864  f3d3		       29 01		      AND	#1
    865  f3d5		       d0 05		      BNE	PrintCreditsLeft
    866  f3d7		       a2 05		      LDX	#<HellwayLeftText
    867  f3d9		       4c de f3 	      JMP	PrintGameMode
    868  f3dc				   PrintCreditsLeft
    869  f3dc		       a2 0f		      LDX	#<OpbText
    870  f3de
    871  f3de				   PrintGameMode
    872  f3de		       20 01 f8 	      JSR	PrintStaticText
    873  f3e1		       a6 c5		      LDX	GameMode
    874  f3e3		       bd be fd 	      LDA	FontLookup,X	;4 
    875  f3e6		       85 d0		      STA	ScoreD0	;3
    876  f3e8		       4c 55 f4 	      JMP	RightScoreWriteEnd	;3
    877  f3eb
    878  f3eb				   RightScoreWrite
    879  f3eb		       a5 c0		      LDA	GameStatus
    880  f3ed		       f0 45		      BEQ	PrintHellwayRight
    881  f3ef		       a5 d5		      LDA	ScoreFontColor
    882  f3f1		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    883  f3f3		       f0 52		      BEQ	PrintGameOver
    884  f3f5				   Digit0Timer
    885  f3f5		       a5 ba		      LDA	CountdownTimer	;3
    886  f3f7		       29 0f		      AND	#%00001111	;2
    887  f3f9		       aa		      TAX		; 2
    888  f3fa		       bd be fd 	      LDA	FontLookup,X	;4 
    889  f3fd		       85 d1		      STA	ScoreD1	;3
    890  f3ff
    891  f3ff				   Digit1Timer
    892  f3ff		       a5 ba		      LDA	CountdownTimer	;3
    893  f401		       4a		      LSR		; 2
    894  f402		       4a		      LSR		; 2
    895  f403		       4a		      LSR		; 2
    896  f404		       4a		      LSR		; 2
    897  f405		       aa		      TAX		; 2
    898  f406		       bd be fd 	      LDA	FontLookup,X	;4
    899  f409		       85 d0		      STA	ScoreD0	;3
    900  f40b
    901  f40b		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    902  f40d		       85 d2		      STA	ScoreD2	;3
    903  f40f
    904  f40f				   Digit0Speed
    905  f40f		       a5 8e		      LDA	Player0SpeedL
    906  f411		       29 3c		      AND	#%00111100	;2 Discard the last bits
    907  f413		       4a		      LSR		; 2
    908  f414		       4a		      LSR		; 2
    909  f415		       aa		      TAX		; 2
    910  f416		       bd be fd 	      LDA	FontLookup,X	;4
    911  f419		       85 d4		      STA	ScoreD4	;3
    912  f41b
    913  f41b				   Digit1Speed
    914  f41b		       a5 8e		      LDA	Player0SpeedL
    915  f41d		       29 c0		      AND	#%11000000	;2 Discard the last bits
    916  f41f		       18		      CLC
    917  f420		       2a		      ROL		;First goes into carry
    918  f421		       2a		      ROL
    919  f422		       2a		      ROL
    920  f423		       85 b0		      STA	Tmp0
    921  f425		       a5 8f		      LDA	Player0SpeedH
    922  f427		       0a		      ASL
    923  f428		       0a		      ASL
    924  f429		       05 b0		      ORA	Tmp0
    925  f42b		       aa		      TAX		; 2
    926  f42c		       bd be fd 	      LDA	FontLookup,X	;4
    927  f42f		       85 d3		      STA	ScoreD3	;3
    928  f431		       4c 55 f4 	      JMP	RightScoreWriteEnd
    929  f434
    930  f434				   PrintHellwayRight
    931  f434		       a5 8d		      LDA	FrameCount1
    932  f436		       29 01		      AND	#1
    933  f438		       d0 05		      BNE	PrintCreditsRight
    934  f43a		       a2 0a		      LDX	#<HellwayRightText
    935  f43c		       4c 41 f4 	      JMP	PrintRightIntro
    936  f43f				   PrintCreditsRight
    937  f43f		       a2 14		      LDX	#<YearText
    938  f441				   PrintRightIntro
    939  f441		       20 01 f8 	      JSR	PrintStaticText
    940  f444		       4c 55 f4 	      JMP	RightScoreWriteEnd
    941  f447				   PrintGameOver
    942  f447		       a5 8c		      LDA	FrameCount0
    943  f449		       30 05		      BMI	PrintOverText
    944  f44b		       a2 19		      LDX	#<GameText
    945  f44d		       4c 52 f4 	      JMP	StoreGameOverText
    946  f450				   PrintOverText
    947  f450		       a2 1e		      LDX	#<OverText
    948  f452				   StoreGameOverText
    949  f452		       20 01 f8 	      JSR	PrintStaticText
    950  f455				   RightScoreWriteEnd
    951  f455
    952  f455
    953  f455				   ScoreBackgroundColor
    954  f455		       a2 00		      LDX	#0
    955  f457		       ad 82 02 	      LDA	SWCHB
    956  f45a		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    957  f45c		       f0 04		      BEQ	BlackAndWhiteScoreBg
    958  f45e		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    959  f460		       a2 03		      LDX	#BACKGROUND_COLOR
    960  f462				   BlackAndWhiteScoreBg
    961  f462		       85 b2		      STA	Tmp2	; Score Background
    962  f464		       86 b3		      STX	Tmp3	; Traffic Background
    963  f466
    964  f466				   ConfigurePFForScore
    965  f466							;LDA #SCORE_BACKGROUND_COLOR; Done above
    966  f466		       85 09		      STA	COLUBK
    967  f468		       20 74 f7 	      JSR	ClearAll
    968  f46b		       a9 02		      LDA	#%00000010	; Score mode
    969  f46d		       85 0a		      STA	CTRLPF
    970  f46f		       a5 f2		      LDA	TextSide	;3
    971  f471		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
    972  f473				   LeftScoreOn
    973  f473		       a5 d5		      LDA	ScoreFontColor
    974  f475		       85 07		      STA	COLUP1
    975  f477		       a5 b2		      LDA	Tmp2
    976  f479		       85 06		      STA	COLUP0
    977  f47b		       a9 01		      LDA	#1	;Jumps faster in the draw loop
    978  f47d		       85 b1		      STA	Tmp1
    979  f47f		       4c 8e f4 	      JMP	CallWaitForVblankEnd
    980  f482				   RightScoreOn
    981  f482		       a5 d5		      LDA	ScoreFontColor
    982  f484		       85 06		      STA	COLUP0
    983  f486		       a5 b2		      LDA	Tmp2
    984  f488		       85 07		      STA	COLUP1
    985  f48a		       a9 00		      LDA	#0	;Jumps faster in the draw loop
    986  f48c		       85 b1		      STA	Tmp1
    987  f48e
    988  f48e							; After here we are going to update the screen, No more heavy code
    989  f48e				   CallWaitForVblankEnd
    990  f48e		       20 1f fa 	      JSR	WaitForVblankEnd
    991  f491
    992  f491				   DrawScoreHud
    993  f491		       20 91 f8 	      JSR	PrintScore
    994  f494
    995  f494		       85 02		      STA	WSYNC
    996  f496
    997  f496		       a5 0c		      LDA	INPT4	;3
    998  f498		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    999  f49a		       a5 d5		      LDA	ScoreFontColor
   1000  f49c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1001  f49e		       d0 0a		      BNE	WaitAnotherScoreLine
   1002  f4a0		       a5 f2		      LDA	TextSide	;3
   1003  f4a2		       d0 03		      BNE	LeftScoreOnGameOver
   1004  f4a4		       4c f9 f9 	      JMP	DrawGameOverScreenRight
   1005  f4a7				   LeftScoreOnGameOver
   1006  f4a7		       4c 4e f9 	      JMP	DrawGameOverScreenLeft
   1007  f4aa
   1008  f4aa				   WaitAnotherScoreLine
   1009  f4aa		       85 02		      STA	WSYNC
   1010  f4ac
   1011  f4ac				   PrepareForTraffic
   1012  f4ac		       20 86 f7 	      JSR	ClearPF	; 32
   1013  f4af
   1014  f4af		       85 02		      STA	WSYNC
   1015  f4b1		       85 02		      STA	WSYNC
   1016  f4b3
   1017  f4b3		       a9 30		      LDA	#%00110000	; 2 Score mode
   1018  f4b5		       85 0a		      STA	CTRLPF	;3
   1019  f4b7
   1020  f4b7		       a5 c3		      LDA	TrafficColor	;3
   1021  f4b9		       85 08		      STA	COLUPF	;3
   1022  f4bb
   1023  f4bb		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1024  f4bd		       85 07		      STA	COLUP1	;3
   1025  f4bf
   1026  f4bf		       a5 d5		      LDA	ScoreFontColor	;3
   1027  f4c1		       85 06		      STA	COLUP0	;3
   1028  f4c3
   1029  f4c3		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1030  f4c5
   1031  f4c5		       20 86 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1032  f4c8
      0  f4c8					      SLEEP	14
      1  f4c8				   .CYCLES    SET	14
      2  f4c8
      3  f4c8				  -	      IF	.CYCLES < 2
      4  f4c8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4c8				  -	      ERR
      6  f4c8					      ENDIF
      7  f4c8
      8  f4c8				  -	      IF	.CYCLES & 1
      9  f4c8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4c8				  -	      nop	0
     11  f4c8				  -	      ELSE
     12  f4c8				  -	      bit	VSYNC
     13  f4c8				  -	      ENDIF
     14  f4c8				  -.CYCLES    SET	.CYCLES - 3
     15  f4c8					      ENDIF
     16  f4c8
     17  f4c8					      REPEAT	.CYCLES / 2
     18  f4c8		       ea		      nop
     17  f4c8					      REPEND
     18  f4c9		       ea		      nop
     17  f4c9					      REPEND
     18  f4ca		       ea		      nop
     17  f4ca					      REPEND
     18  f4cb		       ea		      nop
     17  f4cb					      REPEND
     18  f4cc		       ea		      nop
     17  f4cc					      REPEND
     18  f4cd		       ea		      nop
     17  f4cd					      REPEND
     18  f4ce		       ea		      nop
     19  f4cf					      REPEND
   1034  f4cf
   1035  f4cf		       a5 b3		      LDA	Tmp3	;3
   1036  f4d1		       85 09		      STA	COLUBK	;3
   1037  f4d3		       a5 8c		      LDA	FrameCount0
   1038  f4d5		       29 01		      AND	#%00000001
   1039  f4d7		       d0 05		      BNE	OpDrawCache
   1040  f4d9		       4c 98 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1041  f4dc							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1042  f4dc
   1043  f4dc							;main scanline loop...
   1044  f4dc				   OpScanLoop
   1045  f4dc		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1046  f4de
   1047  f4de							;Start of next line!			
   1048  f4de				   OpDrawCache		;63 Is the last line going to the top of the next frame?
   1049  f4de
   1050  f4de		       a5 80		      LDA	GRP0Cache	;3
   1051  f4e0		       85 1b		      STA	GRP0	;3
   1052  f4e2
   1053  f4e2		       a5 84		      LDA	GRP1Cache	;3
   1054  f4e4		       85 1c		      STA	GRP1	;3
   1055  f4e6
   1056  f4e6		       a5 85		      LDA	ENABLCache	;3
   1057  f4e8		       85 1f		      STA	ENABL	;3
   1058  f4ea
   1059  f4ea		       a5 86		      LDA	ENAM0Cache	;3
   1060  f4ec		       85 1d		      STA	ENAM0	;3
   1061  f4ee
   1062  f4ee		       a5 87		      LDA	ENAM1Cache	;3
   1063  f4f0		       85 1e		      STA	ENAM1	;3
   1064  f4f2
   1065  f4f2		       a5 81		      LDA	PF0Cache	;3
   1066  f4f4		       85 0d		      STA	PF0	;3
   1067  f4f6
   1068  f4f6		       a9 00		      LDA	#0	;2
   1069  f4f8							;STA PF0	     ;3
   1070  f4f8		       85 84		      STA	GRP1Cache	;3
   1071  f4fa		       85 86		      STA	ENAM0Cache	;3
   1072  f4fc		       85 85		      STA	ENABLCache	;3
   1073  f4fe		       85 87		      STA	ENAM1Cache	; 3
   1074  f500		       85 0d		      STA	PF0	;3
   1075  f502							;STA PF2	     ;3
   1076  f502
   1077  f502		       a5 83		      LDA	PF2Cache	;3
   1078  f504		       85 0f		      STA	PF2	;3
   1079  f506
   1080  f506				   OpDrawCar0
   1081  f506		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1082  f508		       b0 04		      BCS	OpSkipDrawCar	;2
   1083  f50a		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1084  f50c		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1085  f50e				   OpSkipDrawCar
   1086  f50e
   1087  f50e							;BEQ DrawTraffic3
   1088  f50e				   OpDrawTraffic1		; 33
   1089  f50e		       98		      TYA		; 2
   1090  f50f		       18		      CLC		; 2 
   1091  f510		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
   1092  f512		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1093  f514		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1094  f516		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
   1095  f518		       4c 1d f5 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1096  f51b				   OpEorOffsetWithCarry
   1097  f51b		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1098  f51d				   OpAfterEorOffsetWithCarry		;17
   1099  f51d		       aa		      TAX		;2
   1100  f51e		       bd 00 fe 	      LDA	AesTable,X	; 4
   1101  f521		       c5 c1		      CMP	TrafficChance	;3
   1102  f523		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1103  f525		       a9 ff		      LDA	#$FF	;2
   1104  f527		       85 86		      STA	ENAM0Cache	;3
   1105  f529				   OpFinishDrawTraffic1
   1106  f529
   1107  f529				   OpErasePF2
   1108  f529		       a9 00		      LDA	#0
   1109  f52b		       85 0f		      STA	PF2
   1110  f52d
   1111  f52d				   OpDrawTraffic2		; 33
   1112  f52d		       98		      TYA		; 2
   1113  f52e		       18		      CLC		; 2 
   1114  f52f		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
   1115  f531		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1116  f533		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1117  f535		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
   1118  f537		       4c 3c f5 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1119  f53a				   OpEorOffsetWithCarry2
   1120  f53a		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1121  f53c				   OpAfterEorOffsetWithCarry2		;17
   1122  f53c		       aa		      TAX		;2
   1123  f53d		       bd 00 fe 	      LDA	AesTable,X	; 4
   1124  f540		       c5 c1		      CMP	TrafficChance	;3
   1125  f542		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1126  f544		       a9 02		      LDA	#%00000010	;2
   1127  f546		       85 85		      STA	ENABLCache	;3
   1128  f548				   OpFinishDrawTraffic2
   1129  f548
   1130  f548							;STA WSYNC ;65 / 137
   1131  f548
   1132  f548							; LDA Tmp0 ; Flicker this line if drawing car
   1133  f548							; BEQ FinishDrawTraffic4
   1134  f548				   OpDrawTraffic3		; 33
   1135  f548		       98		      TYA		; 2
   1136  f549		       18		      CLC		; 2 
   1137  f54a		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
   1138  f54c		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1139  f54e		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1140  f550		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
   1141  f552		       4c 57 f5 	      JMP	OpAfterEorOffsetWithCarry3	; 3
   1142  f555				   OpEorOffsetWithCarry3
   1143  f555		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1144  f557				   OpAfterEorOffsetWithCarry3		;17
   1145  f557		       aa		      TAX		;2
   1146  f558		       bd 00 fe 	      LDA	AesTable,X	; 4
   1147  f55b		       c5 c1		      CMP	TrafficChance	;3
   1148  f55d		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1149  f55f		       a9 02		      LDA	#%00000010	;2
   1150  f561		       85 87		      STA	ENAM1Cache
   1151  f563				   OpFinishDrawTraffic3
   1152  f563
   1153  f563				   OpDrawOponent		;26
   1154  f563		       84 b0		      STY	Tmp0	;3
   1155  f565		       a4 d8		      LDY	OpponentLine	;3
   1156  f567		       c0 08		      CPY	#(CAR_START_LINE - 7)	;2
   1157  f569		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1158  f56b				   OpDrawOpponent
   1159  f56b		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1160  f56d		       85 84		      STA	GRP1Cache	;3
   1161  f56f		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1162  f571		       a4 b0		      LDY	Tmp0	;3
   1163  f573		       4c 8d f5 	      JMP	OpSkipDrawTraffic0	; Do not draw border to save cycles
   1164  f576				   OpSkipDrawOpponent
   1165  f576		       c6 d8		      DEC	OpponentLine	;5
   1166  f578		       a4 b0		      LDY	Tmp0	;3
   1167  f57a
   1168  f57a				   OpDrawTraffic0		; 21 2pe
   1169  f57a		       98		      TYA		; 2
   1170  f57b		       18		      CLC		; 2 
   1171  f57c		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
   1172  f57e		       29 08		      AND	#%00001000	;2
   1173  f580		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1174  f582				   OpHasBorderP0
   1175  f582		       a9 70		      LDA	#%01110000	; 2
   1176  f584		       4c 89 f5 	      JMP	OpStoreBorderP0	; 3
   1177  f587				   OpHasNoBorderP0
   1178  f587		       a9 00		      LDA	#0	; 2
   1179  f589				   OpStoreBorderP0
   1180  f589		       85 81		      STA	PF0Cache	; 3
   1181  f58b		       85 83		      STA	PF2Cache	; 3
   1182  f58d
   1183  f58d				   OpSkipDrawTraffic0
   1184  f58d
   1185  f58d				   OpWhileScanLoop
   1186  f58d		       88		      DEY		;2
   1187  f58e		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1188  f590		       4c dc f4 	      JMP	OpScanLoop	;3
   1189  f593				   OpFinishScanLoop		; 7 209 of 222
   1190  f593		       4c 4b f6 	      JMP	FinishScanLoop
   1191  f596
   1192  f596							;main scanline loop...
   1193  f596				   ScanLoop
   1194  f596		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1195  f598
   1196  f598							;Start of next line!			
   1197  f598				   DrawCache		;63 Is the last line going to the top of the next frame?
   1198  f598		       a5 81		      LDA	PF0Cache	;3
   1199  f59a		       85 0d		      STA	PF0	;3
   1200  f59c
   1201  f59c		       a5 80		      LDA	GRP0Cache	;3
   1202  f59e		       85 1b		      STA	GRP0	;3
   1203  f5a0
   1204  f5a0		       a5 84		      LDA	GRP1Cache	;3
   1205  f5a2		       85 1c		      STA	GRP1	;3
   1206  f5a4
   1207  f5a4		       a5 86		      LDA	ENAM0Cache	;3
   1208  f5a6		       85 1d		      STA	ENAM0	;3
   1209  f5a8
   1210  f5a8		       a5 85		      LDA	ENABLCache	;3
   1211  f5aa		       85 1f		      STA	ENABL	;3
   1212  f5ac
   1213  f5ac		       a5 87		      LDA	ENAM1Cache	;3
   1214  f5ae		       85 1e		      STA	ENAM1	;3
   1215  f5b0
   1216  f5b0		       a5 83		      LDA	PF2Cache	;3
   1217  f5b2		       85 0f		      STA	PF2	;3
   1218  f5b4
   1219  f5b4		       a9 00		      LDA	#0	;2
   1220  f5b6		       85 0d		      STA	PF0	;3
   1221  f5b8		       85 84		      STA	GRP1Cache	;3
   1222  f5ba		       85 85		      STA	ENABLCache	;3
   1223  f5bc		       85 86		      STA	ENAM0Cache	;3
   1224  f5be		       85 87		      STA	ENAM1Cache	; 3
   1225  f5c0		       85 0f		      STA	PF2	;3
   1226  f5c2
   1227  f5c2				   DrawCar0
   1228  f5c2		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1229  f5c4		       b0 04		      BCS	SkipDrawCar	;2
   1230  f5c6		       b1 de		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1231  f5c8		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1232  f5ca				   SkipDrawCar
   1233  f5ca
   1234  f5ca							;BEQ DrawTraffic3
   1235  f5ca				   DrawTraffic1 		; 33
   1236  f5ca		       98		      TYA		; 2
   1237  f5cb		       18		      CLC		; 2 
   1238  f5cc		       65 95		      ADC	TrafficOffset1 + 1	;3
   1239  f5ce		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1240  f5d0		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1241  f5d2		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1242  f5d4		       4c d9 f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1243  f5d7				   EorOffsetWithCarry
   1244  f5d7		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1245  f5d9				   AfterEorOffsetWithCarry		;17
   1246  f5d9		       aa		      TAX		;2
   1247  f5da		       bd 00 fe 	      LDA	AesTable,X	; 4
   1248  f5dd		       c5 c1		      CMP	TrafficChance	;3
   1249  f5df		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1250  f5e1		       a9 ff		      LDA	#$FF	;2
   1251  f5e3		       85 86		      STA	ENAM0Cache	;3
   1252  f5e5				   FinishDrawTraffic1
   1253  f5e5
   1254  f5e5				   DrawTraffic2 		; 33
   1255  f5e5		       98		      TYA		; 2
   1256  f5e6		       18		      CLC		; 2 
   1257  f5e7		       65 99		      ADC	TrafficOffset2 + 1	;3
   1258  f5e9		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1259  f5eb		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1260  f5ed		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1261  f5ef		       4c f4 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1262  f5f2				   EorOffsetWithCarry2
   1263  f5f2		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1264  f5f4				   AfterEorOffsetWithCarry2		;17
   1265  f5f4		       aa		      TAX		;2
   1266  f5f5		       bd 00 fe 	      LDA	AesTable,X	; 4
   1267  f5f8		       c5 c1		      CMP	TrafficChance	;3
   1268  f5fa		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1269  f5fc		       a9 02		      LDA	#%00000010	;2
   1270  f5fe		       85 85		      STA	ENABLCache	;3
   1271  f600				   FinishDrawTraffic2
   1272  f600
   1273  f600							;STA WSYNC ;65 / 137
   1274  f600
   1275  f600							; LDA Tmp0 ; Flicker this line if drawing car
   1276  f600							; BEQ FinishDrawTraffic4
   1277  f600				   DrawTraffic3 		; 33
   1278  f600		       98		      TYA		; 2
   1279  f601		       18		      CLC		; 2 
   1280  f602		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1281  f604		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1282  f606		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1283  f608		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1284  f60a		       4c 0f f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1285  f60d				   EorOffsetWithCarry3
   1286  f60d		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1287  f60f				   AfterEorOffsetWithCarry3		;17
   1288  f60f		       aa		      TAX		;2
   1289  f610		       bd 00 fe 	      LDA	AesTable,X	; 4
   1290  f613		       c5 c1		      CMP	TrafficChance	;3
   1291  f615		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1292  f617		       a9 02		      LDA	#%00000010	;2
   1293  f619		       85 87		      STA	ENAM1Cache
   1294  f61b				   FinishDrawTraffic3
   1295  f61b
   1296  f61b
   1297  f61b				   DrawOponent		;26
   1298  f61b		       84 b0		      STY	Tmp0	;3
   1299  f61d		       a4 d8		      LDY	OpponentLine	;3
   1300  f61f		       c0 08		      CPY	#(CAR_START_LINE - 7)	;2
   1301  f621		       b0 0b		      BCS	SkipDrawOpponent	;2
   1302  f623				   DrawOpponent
   1303  f623		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1304  f625		       85 84		      STA	GRP1Cache	;3
   1305  f627		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1306  f629		       a4 b0		      LDY	Tmp0	;3
   1307  f62b		       4c 45 f6 	      JMP	SkipDrawTraffic0	; Do not draw border to save cycles
   1308  f62e				   SkipDrawOpponent
   1309  f62e		       c6 d8		      DEC	OpponentLine	;5
   1310  f630		       a4 b0		      LDY	Tmp0	;3
   1311  f632
   1312  f632				   DrawTraffic0 		; 21 2pe
   1313  f632		       98		      TYA		; 2
   1314  f633		       18		      CLC		; 2 
   1315  f634		       65 91		      ADC	TrafficOffset0 + 1	;3
   1316  f636		       29 08		      AND	#%00001000	;2
   1317  f638		       f0 05		      BEQ	HasNoBorderP0	;3
   1318  f63a				   HasBorderP0
   1319  f63a		       a9 70		      LDA	#%01110000	; 2
   1320  f63c		       4c 41 f6 	      JMP	StoreBorderP0	; 3
   1321  f63f				   HasNoBorderP0
   1322  f63f		       a9 00		      LDA	#0	; 2
   1323  f641				   StoreBorderP0
   1324  f641		       85 81		      STA	PF0Cache	; 3
   1325  f643		       85 83		      STA	PF2Cache	; 3
   1326  f645
   1327  f645				   SkipDrawTraffic0
   1328  f645
   1329  f645				   WhileScanLoop
   1330  f645		       88		      DEY		;2
   1331  f646		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1332  f648		       4c 96 f5 	      JMP	ScanLoop	;3
   1333  f64b				   FinishScanLoop		; 7 209 of 222
   1334  f64b
   1335  f64b		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1336  f64d		       20 95 f7 	      JSR	LoadAll
   1337  f650		       85 02		      STA	WSYNC	; do stuff!
   1338  f652		       85 02		      STA	WSYNC
   1339  f654		       85 02		      STA	WSYNC
   1340  f656							;42 cycles to use here
   1341  f656
   1342  f656				   PrepareOverscan
   1343  f656		       a9 02		      LDA	#2
   1344  f658		       85 02		      STA	WSYNC
   1345  f65a		       85 01		      STA	VBLANK
   1346  f65c
   1347  f65c		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1348  f65e		       8d 96 02 	      STA	TIM64T
   1349  f661
   1350  f661				   LeftSound		;41
   1351  f661		       a5 ba		      LDA	CountdownTimer	;3
   1352  f663		       f0 1b		      BEQ	EngineOff	;2
   1353  f665		       a6 f4		      LDX	Gear
   1354  f667		       a5 8e		      LDA	Player0SpeedL	;3
   1355  f669		       4a		      LSR		;2
   1356  f66a		       4a		      LSR		;2
   1357  f66b		       4a		      LSR		;2
   1358  f66c		       29 0f		      AND	#%00001111	;2
   1359  f66e		       85 b0		      STA	Tmp0	;3
   1360  f670		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1361  f673		       38		      SEC		;2
   1362  f674		       e5 b0		      SBC	Tmp0	;3
   1363  f676		       85 17		      STA	AUDF0	;3
   1364  f678		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1365  f67b		       85 15		      STA	AUDC0	;3
   1366  f67d		       4c 84 f6 	      JMP	EndLeftSound	;3
   1367  f680				   EngineOff
   1368  f680		       a9 00		      LDA	#0
   1369  f682		       85 15		      STA	AUDC0
   1370  f684
   1371  f684				   EndLeftSound
   1372  f684
   1373  f684
   1374  f684				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1375  f684		       a5 d5		      LDA	ScoreFontColor	;3
   1376  f686		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1377  f688		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1378  f68a		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1379  f68c		       f0 29		      BEQ	PlayCheckpoint	;2
   1380  f68e		       a5 b8		      LDA	CollisionCounter	;3
   1381  f690		       c9 e0		      CMP	#$E0	;2
   1382  f692		       b0 14		      BCS	PlayColision	;2
   1383  f694		       a5 d7		      LDA	NextCheckpoint	;3
   1384  f696		       38		      SEC		;2
   1385  f697		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1386  f699		       c9 02		      CMP	#$02	;2
   1387  f69b		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1388  f69d		       a5 ba		      LDA	CountdownTimer	; 3
   1389  f69f		       f0 53		      BEQ	MuteRightSound	;2
   1390  f6a1		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1391  f6a3		       90 37		      BCC	PlayWarnTimeEnding	;4
   1392  f6a5		       4c f4 f6 	      JMP	MuteRightSound	;3
   1393  f6a8				   PlayColision
   1394  f6a8		       a9 1f		      LDA	#31
   1395  f6aa		       85 18		      STA	AUDF1
   1396  f6ac		       a9 08		      LDA	#8
   1397  f6ae		       85 16		      STA	AUDC1
   1398  f6b0		       a9 08		      LDA	#8
   1399  f6b2		       85 1a		      STA	AUDV1
   1400  f6b4		       4c f8 f6 	      JMP	EndRightSound
   1401  f6b7
   1402  f6b7				   PlayCheckpoint
   1403  f6b7		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1404  f6b9		       4a		      LSR		;2
   1405  f6ba		       4a		      LSR		;2
   1406  f6bb		       4a		      LSR		;2
   1407  f6bc		       85 18		      STA	AUDF1	;3
   1408  f6be		       a9 0c		      LDA	#12	;2
   1409  f6c0		       85 16		      STA	AUDC1	;3
   1410  f6c2		       a9 06		      LDA	#6	;2
   1411  f6c4		       85 1a		      STA	AUDV1	;3
   1412  f6c6		       4c f8 f6 	      JMP	EndRightSound	;3
   1413  f6c9
   1414  f6c9				   PlayBeforeCheckpoint
   1415  f6c9		       a5 8c		      LDA	FrameCount0	;3
   1416  f6cb		       29 1c		      AND	#%00011100	;2
   1417  f6cd		       09 03		      ORA	#%00000011	;2
   1418  f6cf		       85 18		      STA	AUDF1	;3
   1419  f6d1		       a9 0c		      LDA	#12	;2
   1420  f6d3		       85 16		      STA	AUDC1	;3
   1421  f6d5		       a9 03		      LDA	#3	;2
   1422  f6d7		       85 1a		      STA	AUDV1	;3
   1423  f6d9		       4c f8 f6 	      JMP	EndRightSound	;3
   1424  f6dc
   1425  f6dc				   PlayWarnTimeEnding
   1426  f6dc		       a5 8c		      LDA	FrameCount0	;3
   1427  f6de		       29 04		      AND	#%00000100	;2
   1428  f6e0		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1429  f6e2		       18		      CLC		;2
   1430  f6e3		       a9 0a		      LDA	#10	;2
   1431  f6e5		       65 ba		      ADC	CountdownTimer	;2
   1432  f6e7		       85 18		      STA	AUDF1	;3
   1433  f6e9		       a9 0c		      LDA	#12	;2
   1434  f6eb		       85 16		      STA	AUDC1	;3
   1435  f6ed		       a9 03		      LDA	#3	;2
   1436  f6ef		       85 1a		      STA	AUDV1	;3
   1437  f6f1		       4c f8 f6 	      JMP	EndRightSound	;3
   1438  f6f4
   1439  f6f4				   MuteRightSound
   1440  f6f4		       a9 00		      LDA	#0
   1441  f6f6		       85 1a		      STA	AUDV1
   1442  f6f8				   EndRightSound
   1443  f6f8
   1444  f6f8							;Read Fire Button before, will make it start the game for now.
   1445  f6f8				   StartGame
   1446  f6f8		       a5 0c		      LDA	INPT4	;3
   1447  f6fa		       30 31		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1448  f6fc		       a5 8c		      LDA	FrameCount0
   1449  f6fe		       29 01		      AND	#%00000001
   1450  f700		       d0 2b		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped.
   1451  f702		       a5 c0		      LDA	GameStatus	;3
   1452  f704		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1453  f706		       d0 25		      BNE	SkipGameStart
   1454  f708		       a5 c5		      LDA	GameMode
   1455  f70a		       c9 10		      CMP	#MAX_GAME_MODE
   1456  f70c		       d0 0b		      BNE	SetGameRunning
   1457  f70e		       a9 00		      LDA	#0
   1458  f710		       85 c5		      STA	GameMode
   1459  f712		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1460  f714		       85 bc		      STA	SwitchDebounceCounter
   1461  f716		       4c 2d f7 	      JMP	SkipGameStart
   1462  f719				   SetGameRunning
   1463  f719		       e6 c0		      INC	GameStatus
   1464  f71b		       a9 00		      LDA	#0	;
   1465  f71d		       85 8c		      STA	FrameCount0
   1466  f71f		       85 8d		      STA	FrameCount1
   1467  f721		       a9 0a		      LDA	#10
   1468  f723		       85 19		      STA	AUDV0
   1469  f725		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1470  f727		       85 d5		      STA	ScoreFontColor
   1471  f729		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1472  f72b		       85 d6		      STA	ScoreFontColorHoldChange
   1473  f72d				   SkipGameStart
   1474  f72d
   1475  f72d				   ReadSwitches
   1476  f72d		       a6 bc		      LDX	SwitchDebounceCounter
   1477  f72f		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1478  f731		       a9 01		      LDA	#%00000001
   1479  f733		       2c 82 02 	      BIT	SWCHB
   1480  f736		       d0 07		      BNE	SkipReset
   1481  f738		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1482  f73a		       85 bc		      STA	SwitchDebounceCounter
   1483  f73c		       4c 6c f7 	      JMP	OverScanWaitBeforeReset
   1484  f73f				   SkipReset
   1485  f73f
   1486  f73f				   GameModeSelect
   1487  f73f		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1488  f741		       d0 1c		      BNE	SkipGameSelect
   1489  f743		       20 c1 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1490  f746				   ContinueGameSelect
   1491  f746		       a9 02		      LDA	#%00000010
   1492  f748		       2c 82 02 	      BIT	SWCHB
   1493  f74b		       d0 12		      BNE	SkipGameSelect
   1494  f74d		       a6 c5		      LDX	GameMode
   1495  f74f		       e0 10		      CPX	#MAX_GAME_MODE
   1496  f751		       f0 04		      BEQ	ResetGameMode
   1497  f753		       e8		      INX
   1498  f754		       4c 59 f7 	      JMP	StoreGameMode
   1499  f757				   ResetGameMode
   1500  f757		       a2 00		      LDX	#0
   1501  f759				   StoreGameMode
   1502  f759		       86 c5		      STX	GameMode
   1503  f75b		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1504  f75d		       85 bc		      STA	SwitchDebounceCounter
   1505  f75f				   SkipGameSelect
   1506  f75f		       4c 64 f7 	      JMP	EndReadSwitches
   1507  f762				   DecrementSwitchDebounceCounter
   1508  f762		       c6 bc		      DEC	SwitchDebounceCounter
   1509  f764				   EndReadSwitches
   1510  f764
   1511  f764				   OverScanWait
   1512  f764		       ad 84 02 	      LDA	INTIM
   1513  f767		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1514  f769		       4c ce f0 	      JMP	MainLoop
   1515  f76c
   1516  f76c				   OverScanWaitBeforeReset
   1517  f76c		       ad 84 02 	      LDA	INTIM
   1518  f76f		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1519  f771		       4c 10 f0 	      JMP	Start
   1520  f774
   1521  f774				   Subroutines
   1522  f774
   1523  f774				   ClearAll		; 52
   1524  f774		       a9 00		      LDA	#0	;2
   1525  f776		       85 1c		      STA	GRP1	;3
   1526  f778		       85 1f		      STA	ENABL	;3
   1527  f77a		       85 1d		      STA	ENAM0	;3
   1528  f77c		       85 1e		      STA	ENAM1	;3
   1529  f77e		       85 84		      STA	GRP1Cache	;3
   1530  f780		       85 85		      STA	ENABLCache	;3
   1531  f782		       85 86		      STA	ENAM0Cache	;3
   1532  f784		       85 87		      STA	ENAM1Cache	;3
   1533  f786
   1534  f786				   ClearPF		; 26
   1535  f786		       a9 00		      LDA	#0	;2
   1536  f788				   ClearPFSkipLDA0
   1537  f788		       85 0d		      STA	PF0	;3
   1538  f78a		       85 0e		      STA	PF1	;3
   1539  f78c		       85 0f		      STA	PF2	;3	
   1540  f78e		       85 81		      STA	PF0Cache	;3
   1541  f790		       85 82		      STA	PF1Cache	;3
   1542  f792		       85 83		      STA	PF2Cache	;3 
   1543  f794		       60		      RTS		;6
   1544  f795				   EndClearAll
   1545  f795
   1546  f795				   LoadAll		; 48
   1547  f795		       a5 81		      LDA	PF0Cache	;3
   1548  f797		       85 0d		      STA	PF0	;3
   1549  f799
   1550  f799		       a5 82		      LDA	PF1Cache	;3
   1551  f79b		       85 0e		      STA	PF1	;3
   1552  f79d
   1553  f79d		       a5 83		      LDA	PF2Cache	;3
   1554  f79f		       85 0f		      STA	PF2	;3
   1555  f7a1
   1556  f7a1		       a5 84		      LDA	GRP1Cache	;3
   1557  f7a3		       85 1c		      STA	GRP1	;3
   1558  f7a5
   1559  f7a5		       a5 85		      LDA	ENABLCache	;3
   1560  f7a7		       85 1f		      STA	ENABL	;3
   1561  f7a9
   1562  f7a9		       a5 86		      LDA	ENAM0Cache	;3
   1563  f7ab		       85 1d		      STA	ENAM0	;3
   1564  f7ad
   1565  f7ad		       a5 87		      LDA	ENAM1Cache	;3
   1566  f7af		       85 1e		      STA	ENAM1	;3
   1567  f7b1
   1568  f7b1		       60		      RTS		;6
   1569  f7b2				   EndLoadAll
   1570  f7b2
   1571  f7b2				   NextDifficulty
   1572  f7b2		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1573  f7b4		       29 01		      AND	#%00000001
   1574  f7b6		       d0 24		      BNE	CheckRandomDifficulty
   1575  f7b8
   1576  f7b8		       a5 c4		      LDA	CurrentDifficulty
   1577  f7ba		       18		      CLC
   1578  f7bb		       69 01		      ADC	#1
   1579  f7bd		       29 03		      AND	#%00000011	; 0 to 3
   1580  f7bf		       85 c4		      STA	CurrentDifficulty
   1581  f7c1
   1582  f7c1				   ConfigureDifficulty
   1583  f7c1		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1584  f7c3		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1585  f7c6		       85 c1		      STA	TrafficChance
   1586  f7c8		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1587  f7cb		       85 c3		      STA	TrafficColor
   1588  f7cd
   1589  f7cd		       a5 c5		      LDA	GameMode	;
   1590  f7cf		       29 01		      AND	#%00000001
   1591  f7d1		       f0 03		      BEQ	UseNextDifficultyTime
   1592  f7d3		       4c d7 f7 	      JMP	StoreDifficultyTime
   1593  f7d6				   UseNextDifficultyTime
   1594  f7d6		       c8		      INY
   1595  f7d7				   StoreDifficultyTime
   1596  f7d7		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1597  f7da		       85 c2		      STA	CheckpointTime
   1598  f7dc
   1599  f7dc				   CheckRandomDifficulty
   1600  f7dc		       a5 c5		      LDA	GameMode
   1601  f7de		       29 08		      AND	#%00001000	; Random difficulties
   1602  f7e0		       f0 09		      BEQ	ReturnFromNextDifficulty
   1603  f7e2				   RandomDifficulty
   1604  f7e2		       a6 8c		      LDX	FrameCount0
   1605  f7e4		       bd 00 fe 	      LDA	AesTable,X
   1606  f7e7							;EOR TrafficChance, no need, lets make life simple
   1607  f7e7		       29 3f		      AND	#%00111111
   1608  f7e9		       85 c1		      STA	TrafficChance
   1609  f7eb
   1610  f7eb				   ReturnFromNextDifficulty
   1611  f7eb		       60		      RTS
   1612  f7ec				   EndNextDifficulty
   1613  f7ec
   1614  f7ec				   DefaultOffsets
   1615  f7ec		       a9 20		      LDA	#$20
   1616  f7ee		       85 96		      STA	TrafficOffset1 + 2
   1617  f7f0		       85 a6		      STA	OpTrafficOffset1 + 2
   1618  f7f2		       a9 40		      LDA	#$40
   1619  f7f4		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1620  f7f6		       85 aa		      STA	OpTrafficOffset2 + 2
   1621  f7f8		       a9 60		      LDA	#$60
   1622  f7fa		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1623  f7fc		       85 ae		      STA	OpTrafficOffset3 + 2
   1624  f7fe		       a9 80		      LDA	#$80
   1625  f800		       60		      RTS
   1626  f801
   1627  f801				   PrintStaticText		; Preload X with the offset referent to StaticText
   1628  f801		       bd 00 ff 	      LDA	StaticText,X
   1629  f804		       85 d0		      STA	ScoreD0
   1630  f806		       e8		      INX
   1631  f807		       bd 00 ff 	      LDA	StaticText,X
   1632  f80a		       85 d1		      STA	ScoreD1
   1633  f80c		       e8		      INX
   1634  f80d		       bd 00 ff 	      LDA	StaticText,X
   1635  f810		       85 d2		      STA	ScoreD2
   1636  f812		       e8		      INX
   1637  f813		       bd 00 ff 	      LDA	StaticText,X
   1638  f816		       85 d3		      STA	ScoreD3
   1639  f818		       e8		      INX
   1640  f819		       bd 00 ff 	      LDA	StaticText,X
   1641  f81c		       85 d4		      STA	ScoreD4
   1642  f81e		       60		      RTS
   1643  f81f
   1644  f81f				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1645  f81f		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1646  f821		       85 d5		      STA	ScoreFontColor
   1647  f823		       a9 01		      LDA	#1
   1648  f825		       85 d6		      STA	ScoreFontColorHoldChange
   1649  f827
   1650  f827		       a5 8d		      LDA	FrameCount1
   1651  f829		       29 07		      AND	#%00000111
   1652  f82b		       85 b3		      STA	Tmp3
   1653  f82d							;0 is Zelda Name, (default)
   1654  f82d		       a9 01		      LDA	#1
   1655  f82f		       c5 b3		      CMP	Tmp3
   1656  f831		       f0 38		      BEQ	PrintZeldaDateLeft
   1657  f833
   1658  f833		       a9 02		      LDA	#2
   1659  f835		       c5 b3		      CMP	Tmp3
   1660  f837		       f0 23		      BEQ	PrintPolvinhosLeft
   1661  f839
   1662  f839		       a9 03		      LDA	#3
   1663  f83b		       c5 b3		      CMP	Tmp3
   1664  f83d		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1665  f83f
   1666  f83f		       a9 04		      LDA	#4
   1667  f841		       c5 b3		      CMP	Tmp3
   1668  f843		       f0 1c		      BEQ	PrintIvonneLeft
   1669  f845
   1670  f845		       a9 05		      LDA	#5
   1671  f847		       c5 b3		      CMP	Tmp3
   1672  f849		       f0 2a		      BEQ	PrintIvonneDateLeft
   1673  f84b
   1674  f84b		       a9 06		      LDA	#6
   1675  f84d		       c5 b3		      CMP	Tmp3
   1676  f84f		       f0 15		      BEQ	PrintArtLeft
   1677  f851
   1678  f851		       a9 07		      LDA	#7
   1679  f853		       c5 b3		      CMP	Tmp3
   1680  f855		       f0 23		      BEQ	PrintLeonardoLeft
   1681  f857
   1682  f857				   PrintZeldaLeft
   1683  f857		       a2 28		      LDX	#<ZeldaTextLeft
   1684  f859		       4c 7f f8 	      JMP	ProcessPrintEasterEgg
   1685  f85c				   PrintPolvinhosLeft
   1686  f85c		       a2 3c		      LDX	#<PolvinhosTextLeft
   1687  f85e		       4c 7f f8 	      JMP	ProcessPrintEasterEgg
   1688  f861				   PrintIvonneLeft
   1689  f861		       a2 50		      LDX	#<IvonneTextLeft
   1690  f863		       4c 7f f8 	      JMP	ProcessPrintEasterEgg
   1691  f866				   PrintArtLeft
   1692  f866		       a2 64		      LDX	#<PaperArtTextLeft
   1693  f868		       4c 7f f8 	      JMP	ProcessPrintEasterEgg
   1694  f86b
   1695  f86b				   PrintZeldaDateLeft
   1696  f86b		       a2 32		      LDX	#<ZeldaDateLeft
   1697  f86d		       4c 7f f8 	      JMP	ProcessPrintEasterEgg
   1698  f870				   PrintPolvinhosDateLeft
   1699  f870		       a2 46		      LDX	#<PolvinhosDateLeft
   1700  f872		       4c 7f f8 	      JMP	ProcessPrintEasterEgg
   1701  f875				   PrintIvonneDateLeft
   1702  f875		       a2 5a		      LDX	#<IvonneDateLeft
   1703  f877		       4c 7f f8 	      JMP	ProcessPrintEasterEgg
   1704  f87a				   PrintLeonardoLeft
   1705  f87a		       a2 6e		      LDX	#<LeonardoTextLeft
   1706  f87c		       4c 7f f8 	      JMP	ProcessPrintEasterEgg
   1707  f87f
   1708  f87f				   ProcessPrintEasterEgg
   1709  f87f		       a5 8c		      LDA	FrameCount0	;3
   1710  f881		       29 01		      AND	#%00000001	;2
   1711  f883		       d0 03		      BNE	TranformIntoRightText
   1712  f885		       4c 8d f8 	      JMP	PrintEasterEggText
   1713  f888				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1714  f888		       8a		      TXA
   1715  f889		       18		      CLC
   1716  f88a		       69 05		      ADC	#HALF_TEXT_SIZE
   1717  f88c		       aa		      TAX
   1718  f88d
   1719  f88d				   PrintEasterEggText
   1720  f88d		       20 01 f8 	      JSR	PrintStaticText
   1721  f890		       60		      RTS
   1722  f891
   1723  f891				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1724  f891		       a2 00		      LDX	#0
   1725  f893		       a0 04		      LDY	#FONT_OFFSET
   1726  f895
   1727  f895				   ScoreLoop		; 20 
   1728  f895		       85 02		      STA	WSYNC	;2
   1729  f897
   1730  f897		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1731  f899		       85 0d		      STA	PF0	;3
   1732  f89b
   1733  f89b		       a5 82		      LDA	PF1Cache	;3
   1734  f89d		       85 0e		      STA	PF1	;3
   1735  f89f
   1736  f89f		       a5 83		      LDA	PF2Cache	;3
   1737  f8a1		       85 0f		      STA	PF2	;3
   1738  f8a3
   1739  f8a3				   DrawScoreD0		; 15
   1740  f8a3		       a6 d0		      LDX	ScoreD0	; 3
   1741  f8a5		       bd 00 fd 	      LDA	Font,X	;4
   1742  f8a8		       85 81		      STA	PF0Cache	;3
   1743  f8aa		       c6 d0		      DEC	ScoreD0	;5
   1744  f8ac
   1745  f8ac				   DrawScoreD1		; 23	
   1746  f8ac		       a6 d1		      LDX	ScoreD1	; 3
   1747  f8ae		       bd 00 fd 	      LDA	Font,X	;4
   1748  f8b1		       0a		      ASL		;2
   1749  f8b2		       0a		      ASL		;2
   1750  f8b3		       0a		      ASL		;2
   1751  f8b4		       0a		      ASL		;2
   1752  f8b5		       85 82		      STA	PF1Cache	;3
   1753  f8b7		       c6 d1		      DEC	ScoreD1	;5
   1754  f8b9
   1755  f8b9				   DrawScoreD2		; 20
   1756  f8b9		       a6 d2		      LDX	ScoreD2	; 3
   1757  f8bb		       bd 00 fd 	      LDA	Font,X	;4
   1758  f8be		       29 0f		      AND	#%00001111	;2
   1759  f8c0		       05 82		      ORA	PF1Cache	;3
   1760  f8c2		       85 82		      STA	PF1Cache	;3
   1761  f8c4		       c6 d2		      DEC	ScoreD2	;5
   1762  f8c6
   1763  f8c6				   DrawScoreD3		; 23
   1764  f8c6		       a6 d3		      LDX	ScoreD3	; 3
   1765  f8c8		       bd 00 fd 	      LDA	Font,X	;4
   1766  f8cb		       4a		      LSR		;2
   1767  f8cc		       4a		      LSR		;2
   1768  f8cd		       4a		      LSR		;2
   1769  f8ce		       4a		      LSR		;2
   1770  f8cf		       85 83		      STA	PF2Cache	;3
   1771  f8d1		       c6 d3		      DEC	ScoreD3	;5
   1772  f8d3
   1773  f8d3				   DrawScoreD4		; 20
   1774  f8d3		       a6 d4		      LDX	ScoreD4	; 3
   1775  f8d5		       bd 00 fd 	      LDA	Font,X	;4
   1776  f8d8		       29 f0		      AND	#%11110000	;2
   1777  f8da		       05 83		      ORA	PF2Cache	;3
   1778  f8dc		       85 83		      STA	PF2Cache	;3
   1779  f8de		       c6 d4		      DEC	ScoreD4	;5
   1780  f8e0
   1781  f8e0
   1782  f8e0		       88		      DEY		;2
   1783  f8e1		       10 b2		      BPL	ScoreLoop	;4
   1784  f8e3
   1785  f8e3		       85 02		      STA	WSYNC
   1786  f8e5		       20 95 f7 	      JSR	LoadAll
   1787  f8e8		       60		      RTS		; 6
   1788  f8e9
   1789  f8e9				   PrintRightDecimalDigits
   1790  f8e9		       b9 00 00 	      LDA	0,Y
   1791  f8ec		       4a		      LSR
   1792  f8ed		       4a		      LSR
   1793  f8ee		       4a		      LSR
   1794  f8ef		       4a		      LSR
   1795  f8f0		       aa		      TAX
   1796  f8f1		       bd be fd 	      LDA	FontLookup,X	;4
   1797  f8f4		       85 d2		      STA	ScoreD2	;3
   1798  f8f6
   1799  f8f6		       b9 00 00 	      LDA	0,Y
   1800  f8f9		       29 0f		      AND	#%00001111
   1801  f8fb		       aa		      TAX
   1802  f8fc		       bd be fd 	      LDA	FontLookup,X	;4
   1803  f8ff		       85 d3		      STA	ScoreD3	;3
   1804  f901
   1805  f901		       c8		      INY
   1806  f902		       b9 00 00 	      LDA	0,Y
   1807  f905		       4a		      LSR
   1808  f906		       4a		      LSR
   1809  f907		       4a		      LSR
   1810  f908		       4a		      LSR
   1811  f909		       aa		      TAX
   1812  f90a		       bd be fd 	      LDA	FontLookup,X	;4
   1813  f90d		       85 d0		      STA	ScoreD0	;3
   1814  f90f
   1815  f90f		       b9 00 00 	      LDA	0,Y
   1816  f912		       29 0f		      AND	#%00001111
   1817  f914		       aa		      TAX
   1818  f915		       bd be fd 	      LDA	FontLookup,X	;4
   1819  f918		       85 d1		      STA	ScoreD1	;3
   1820  f91a
   1821  f91a		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1822  f91c		       85 d4		      STA	ScoreD4
   1823  f91e		       60		      RTS
   1824  f91f
   1825  f91f				   PrintLastLeftDecimalDigits
   1826  f91f		       b9 00 00 	      LDA	0,Y
   1827  f922		       4a		      LSR
   1828  f923		       4a		      LSR
   1829  f924		       4a		      LSR
   1830  f925		       4a		      LSR
   1831  f926		       aa		      TAX
   1832  f927		       bd be fd 	      LDA	FontLookup,X	;4
   1833  f92a		       85 d3		      STA	ScoreD3	;3
   1834  f92c		       b9 00 00 	      LDA	0,Y
   1835  f92f		       29 0f		      AND	#%00001111
   1836  f931		       aa		      TAX
   1837  f932		       bd be fd 	      LDA	FontLookup,X	;4
   1838  f935		       85 d4		      STA	ScoreD4	;3
   1839  f937		       60		      RTS
   1840  f938
   1841  f938				   PrintZerosLeft
   1842  f938		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1843  f93a		       85 d2		      STA	ScoreD2
   1844  f93c		       85 d3		      STA	ScoreD3
   1845  f93e		       85 d4		      STA	ScoreD4
   1846  f940		       60		      RTS
   1847  f941
   1848  f941				   DrawGameOverScoreLine
   1849  f941		       85 02		      STA	WSYNC
   1850  f943		       20 91 f8 	      JSR	PrintScore
   1851  f946		       85 02		      STA	WSYNC
   1852  f948		       85 02		      STA	WSYNC
   1853  f94a		       20 86 f7 	      JSR	ClearPF
   1854  f94d		       60		      RTS
   1855  f94e
   1856  f94e				   DrawGameOverScreenLeft
   1857  f94e		       85 02		      STA	WSYNC
   1858  f950		       20 86 f7 	      JSR	ClearPF
   1859  f953
   1860  f953				   DrawTimerLeft
   1861  f953		       20 32 fa 	      JSR	Sleep8Lines
   1862  f956		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1863  f958		       85 06		      STA	COLUP0
   1864  f95a		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1865  f95c		       85 d0		      STA	ScoreD0
   1866  f95e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1867  f960		       85 d1		      STA	ScoreD1
   1868  f962		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1869  f964		       85 d2		      STA	ScoreD2
   1870  f966		       a0 bf		      LDY	#TimeBcd2
   1871  f968		       85 02		      STA	WSYNC
   1872  f96a		       20 1f f9 	      JSR	PrintLastLeftDecimalDigits
   1873  f96d		       20 41 f9 	      JSR	DrawGameOverScoreLine
   1874  f970
   1875  f970				   DrawGlideTimerLeft
   1876  f970		       20 32 fa 	      JSR	Sleep8Lines
   1877  f973		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1878  f975		       85 06		      STA	COLUP0
   1879  f977		       85 02		      STA	WSYNC
   1880  f979		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1881  f97b		       85 d0		      STA	ScoreD0
   1882  f97d		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1883  f97f		       85 d1		      STA	ScoreD1
   1884  f981		       20 38 f9 	      JSR	PrintZerosLeft
   1885  f984		       20 41 f9 	      JSR	DrawGameOverScoreLine
   1886  f987
   1887  f987				   DrawHitCountLeft
   1888  f987		       20 32 fa 	      JSR	Sleep8Lines
   1889  f98a		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1890  f98c		       85 06		      STA	COLUP0
   1891  f98e		       85 02		      STA	WSYNC
   1892  f990		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1893  f992		       85 d0		      STA	ScoreD0
   1894  f994		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1895  f996		       85 d1		      STA	ScoreD1
   1896  f998		       20 38 f9 	      JSR	PrintZerosLeft
   1897  f99b		       20 41 f9 	      JSR	DrawGameOverScoreLine
   1898  f99e
   1899  f99e				   DrawCheckpointCountLeft
   1900  f99e		       20 32 fa 	      JSR	Sleep8Lines
   1901  f9a1		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1902  f9a3		       85 06		      STA	COLUP0
   1903  f9a5		       85 02		      STA	WSYNC
   1904  f9a7		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1905  f9a9		       85 d0		      STA	ScoreD0
   1906  f9ab		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1907  f9ad		       85 d1		      STA	ScoreD1
   1908  f9af		       20 38 f9 	      JSR	PrintZerosLeft
   1909  f9b2		       20 41 f9 	      JSR	DrawGameOverScoreLine
   1910  f9b5
   1911  f9b5				   DrawGameVersionLeft
   1912  f9b5		       20 32 fa 	      JSR	Sleep8Lines
   1913  f9b8		       a9 49		      LDA	#VERSION_COLOR
   1914  f9ba		       85 06		      STA	COLUP0
   1915  f9bc
   1916  f9bc		       a5 c5		      LDA	GameMode
   1917  f9be		       aa		      TAX
   1918  f9bf		       bd be fd 	      LDA	FontLookup,X	;4
   1919  f9c2		       85 d0		      STA	ScoreD0	;3
   1920  f9c4
   1921  f9c4		       a5 f0		      LDA	CurrentCarId
   1922  f9c6		       aa		      TAX
   1923  f9c7		       bd be fd 	      LDA	FontLookup,X	;4
   1924  f9ca		       85 d1		      STA	ScoreD1	;3
   1925  f9cc
   1926  f9cc		       a5 dd		      LDA	StartSWCHB
   1927  f9ce		       29 40		      AND	#%01000000	; P0 difficulty
   1928  f9d0		       49 40		      EOR	#%01000000	; Reverse bytes
   1929  f9d2		       2a		      ROL
   1930  f9d3		       2a		      ROL
   1931  f9d4		       2a		      ROL
   1932  f9d5		       18		      CLC
   1933  f9d6		       69 0a		      ADC	#10
   1934  f9d8		       aa		      TAX
   1935  f9d9		       bd be fd 	      LDA	FontLookup,X	;4
   1936  f9dc		       85 d2		      STA	ScoreD2	;3
   1937  f9de
   1938  f9de		       a5 dd		      LDA	StartSWCHB
   1939  f9e0		       29 80		      AND	#%10000000	; P0 difficulty
   1940  f9e2		       49 80		      EOR	#%10000000	; Reverse bytes
   1941  f9e4		       2a		      ROL
   1942  f9e5		       2a		      ROL
   1943  f9e6		       18		      CLC
   1944  f9e7		       69 0a		      ADC	#10
   1945  f9e9		       aa		      TAX
   1946  f9ea		       bd be fd 	      LDA	FontLookup,X	;4
   1947  f9ed		       85 d3		      STA	ScoreD3	;3
   1948  f9ef
   1949  f9ef		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1950  f9f1		       85 d4		      STA	ScoreD4
   1951  f9f3
   1952  f9f3		       20 41 f9 	      JSR	DrawGameOverScoreLine
   1953  f9f6
   1954  f9f6		       4c 0f fa 	      JMP	FinalizeDrawGameOver
   1955  f9f9
   1956  f9f9				   DrawGameOverScreenRight
   1957  f9f9		       85 02		      STA	WSYNC
   1958  f9fb		       20 86 f7 	      JSR	ClearPF
   1959  f9fe
   1960  f9fe				   DrawVersionRight
   1961  f9fe		       20 32 fa 	      JSR	Sleep8Lines
   1962  fa01		       a9 49		      LDA	#VERSION_COLOR
   1963  fa03		       85 07		      STA	COLUP1
   1964  fa05		       85 02		      STA	WSYNC
   1965  fa07		       a2 78		      LDX	#<VersionText
   1966  fa09		       20 01 f8 	      JSR	PrintStaticText
   1967  fa0c		       20 41 f9 	      JSR	DrawGameOverScoreLine
   1968  fa0f
   1969  fa0f				   FinalizeDrawGameOver
   1970  fa0f		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1971  fa11		       85 d5		      STA	ScoreFontColor
   1972  fa13		       20 29 fa 	      JSR	Sleep4Lines
   1973  fa16		       20 39 fa 	      JSR	Sleep32Lines
   1974  fa19		       20 39 fa 	      JSR	Sleep32Lines
   1975  fa1c		       4c 56 f6 	      JMP	PrepareOverscan
   1976  fa1f
   1977  fa1f				   WaitForVblankEnd
   1978  fa1f		       ad 84 02 	      LDA	INTIM
   1979  fa22		       d0 fb		      BNE	WaitForVblankEnd
   1980  fa24		       85 02		      STA	WSYNC
   1981  fa26		       85 01		      STA	VBLANK
   1982  fa28		       60		      RTS
   1983  fa29
   1984  fa29				   Sleep4Lines
   1985  fa29		       85 02		      STA	WSYNC
   1986  fa2b		       85 02		      STA	WSYNC
   1987  fa2d		       85 02		      STA	WSYNC
   1988  fa2f		       85 02		      STA	WSYNC
   1989  fa31		       60		      RTS
   1990  fa32
   1991  fa32				   Sleep8Lines
   1992  fa32		       20 29 fa 	      JSR	Sleep4Lines
   1993  fa35		       20 29 fa 	      JSR	Sleep4Lines
   1994  fa38		       60		      RTS
   1995  fa39
   1996  fa39				   Sleep32Lines
   1997  fa39		       20 32 fa 	      JSR	Sleep8Lines
   1998  fa3c		       20 32 fa 	      JSR	Sleep8Lines
   1999  fa3f		       20 32 fa 	      JSR	Sleep8Lines
   2000  fa42		       20 32 fa 	      JSR	Sleep8Lines
   2001  fa45		       60		      RTS
   2002  fa46
   2003  fa46							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2004  fc00					      org	$FC00
   2005  fc00				   QrCode1
   2006  fc00		       1f		      .byte.b	#%00011111
   2007  fc01		       10		      .byte.b	#%00010000
   2008  fc02		       17		      .byte.b	#%00010111
   2009  fc03		       17		      .byte.b	#%00010111
   2010  fc04		       17		      .byte.b	#%00010111
   2011  fc05		       10		      .byte.b	#%00010000
   2012  fc06		       1f		      .byte.b	#%00011111
   2013  fc07		       00		      .byte.b	#%00000000
   2014  fc08		       17		      .byte.b	#%00010111
   2015  fc09		       10		      .byte.b	#%00010000
   2016  fc0a		       1d		      .byte.b	#%00011101
   2017  fc0b		       16		      .byte.b	#%00010110
   2018  fc0c		       03		      .byte.b	#%00000011
   2019  fc0d		       19		      .byte.b	#%00011001
   2020  fc0e		       13		      .byte.b	#%00010011
   2021  fc0f		       1c		      .byte.b	#%00011100
   2022  fc10		       0b		      .byte.b	#%00001011
   2023  fc11		       00		      .byte.b	#%00000000
   2024  fc12		       1f		      .byte.b	#%00011111
   2025  fc13		       10		      .byte.b	#%00010000
   2026  fc14		       17		      .byte.b	#%00010111
   2027  fc15		       17		      .byte.b	#%00010111
   2028  fc16		       17		      .byte.b	#%00010111
   2029  fc17		       10		      .byte.b	#%00010000
   2030  fc18		       1f		      .byte.b	#%00011111
   2031  fc19
   2032  fc19				   QrCode2
   2033  fc19		       c3		      .byte.b	#%11000011
   2034  fc1a		       9a		      .byte.b	#%10011010
   2035  fc1b		       82		      .byte.b	#%10000010
   2036  fc1c		       da		      .byte.b	#%11011010
   2037  fc1d		       aa		      .byte.b	#%10101010
   2038  fc1e		       ca		      .byte.b	#%11001010
   2039  fc1f		       f3		      .byte.b	#%11110011
   2040  fc20		       78		      .byte.b	#%01111000
   2041  fc21		       df		      .byte.b	#%11011111
   2042  fc22		       fc		      .byte.b	#%11111100
   2043  fc23		       c7		      .byte.b	#%11000111
   2044  fc24		       98		      .byte.b	#%10011000
   2045  fc25		       23		      .byte.b	#%00100011
   2046  fc26		       b9		      .byte.b	#%10111001
   2047  fc27		       d2		      .byte.b	#%11010010
   2048  fc28		       30		      .byte.b	#%00110000
   2049  fc29		       eb		      .byte.b	#%11101011
   2050  fc2a		       28		      .byte.b	#%00101000
   2051  fc2b		       ab		      .byte.b	#%10101011
   2052  fc2c		       72		      .byte.b	#%01110010
   2053  fc2d		       fa		      .byte.b	#%11111010
   2054  fc2e		       7a		      .byte.b	#%01111010
   2055  fc2f		       32		      .byte.b	#%00110010
   2056  fc30		       3a		      .byte.b	#%00111010
   2057  fc31		       63		      .byte.b	#%01100011
   2058  fc32
   2059  fc32				   QrCode3
   2060  fc32		       98		      .byte.b	#%10011000
   2061  fc33		       c3		      .byte.b	#%11000011
   2062  fc34		       39		      .byte.b	#%00111001
   2063  fc35		       34		      .byte.b	#%00110100
   2064  fc36		       ff		      .byte.b	#%11111111
   2065  fc37		       71		      .byte.b	#%01110001
   2066  fc38		       d5		      .byte.b	#%11010101
   2067  fc39		       d1		      .byte.b	#%11010001
   2068  fc3a		       5f		      .byte.b	#%01011111
   2069  fc3b		       26		      .byte.b	#%00100110
   2070  fc3c		       2d		      .byte.b	#%00101101
   2071  fc3d		       e9		      .byte.b	#%11101001
   2072  fc3e		       d6		      .byte.b	#%11010110
   2073  fc3f		       26		      .byte.b	#%00100110
   2074  fc40		       ba		      .byte.b	#%10111010
   2075  fc41		       03		      .byte.b	#%00000011
   2076  fc42		       dd		      .byte.b	#%11011101
   2077  fc43		       e0		      .byte.b	#%11100000
   2078  fc44		       57		      .byte.b	#%01010111
   2079  fc45		       14		      .byte.b	#%00010100
   2080  fc46		       35		      .byte.b	#%00110101
   2081  fc47		       e5		      .byte.b	#%11100101
   2082  fc48		       b5		      .byte.b	#%10110101
   2083  fc49		       d4		      .byte.b	#%11010100
   2084  fc4a		       97		      .byte.b	#%10010111
   2085  fc4b
   2086  fc4b				   QrCode4
   2087  fc4b		       09		      .byte.b	#%00001001
   2088  fc4c		       0e		      .byte.b	#%00001110
   2089  fc4d		       0f		      .byte.b	#%00001111
   2090  fc4e		       0c		      .byte.b	#%00001100
   2091  fc4f		       0c		      .byte.b	#%00001100
   2092  fc50		       08		      .byte.b	#%00001000
   2093  fc51		       08		      .byte.b	#%00001000
   2094  fc52		       06		      .byte.b	#%00000110
   2095  fc53		       06		      .byte.b	#%00000110
   2096  fc54		       0b		      .byte.b	#%00001011
   2097  fc55		       0f		      .byte.b	#%00001111
   2098  fc56		       04		      .byte.b	#%00000100
   2099  fc57		       08		      .byte.b	#%00001000
   2100  fc58		       0f		      .byte.b	#%00001111
   2101  fc59		       09		      .byte.b	#%00001001
   2102  fc5a		       07		      .byte.b	#%00000111
   2103  fc5b		       05		      .byte.b	#%00000101
   2104  fc5c		       00		      .byte.b	#%00000000
   2105  fc5d		       0f		      .byte.b	#%00001111
   2106  fc5e		       08		      .byte.b	#%00001000
   2107  fc5f		       0b		      .byte.b	#%00001011
   2108  fc60		       0b		      .byte.b	#%00001011
   2109  fc61		       0b		      .byte.b	#%00001011
   2110  fc62		       08		      .byte.b	#%00001000
   2111  fc63		       0f		      .byte.b	#%00001111
   2112  fc64
   2113  fc64							; Moved here because of rom space.
   2114  fc64							; The only SBR in constants space
   2115  fc64				   DrawQrCode
   2116  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2117  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2118  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2119  fc6a		       85 0a		      STA	CTRLPF
   2120  fc6c		       20 74 f7 	      JSR	ClearAll	; To be 100 sure!
   2121  fc6f		       ad 82 02 	      LDA	SWCHB
   2122  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2123  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2124  fc76		       86 09		      STX	COLUBK
   2125  fc78		       84 08		      STY	COLUPF
   2126  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2127  fc7d				   StoreReversedQrCode
   2128  fc7d		       86 08		      STX	COLUPF
   2129  fc7f		       84 09		      STY	COLUBK
   2130  fc81
   2131  fc81				   ContinueQrCode
   2132  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2133  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2134  fc85		       20 1f fa 	      JSR	WaitForVblankEnd
   2135  fc88		       20 32 fa 	      JSR	Sleep8Lines
   2136  fc8b		       20 32 fa 	      JSR	Sleep8Lines
   2137  fc8e		       20 32 fa 	      JSR	Sleep8Lines
   2138  fc91
   2139  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2140  fc91		       85 02		      STA	WSYNC
   2141  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2142  fc96		       85 0e		      STA	PF1	;3
   2143  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2144  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2146  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2147  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2148  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2149  fcb3		       85 0e		      STA	PF1	;3
   2150  fcb5
   2151  fcb5		       ca		      DEX		;2
   2152  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2153  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2154  fcba		       88		      DEY		;2
   2155  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2156  fcbd
   2157  fcbd				   EndQrCodeLoop
   2158  fcbd		       85 02		      STA	WSYNC	;
   2159  fcbf		       a9 00		      LDA	#0
   2160  fcc1		       85 0e		      STA	PF1	;3
   2161  fcc3		       85 0f		      STA	PF2	;3
   2162  fcc5
   2163  fcc5		       20 39 fa 	      JSR	Sleep32Lines
   2164  fcc8		       4c 56 f6 	      JMP	PrepareOverscan
   2165  fccb
   2166  fd00					      org	$FD00
   2167  fd00				   Font
   2168  fd00				   C0
   2169  fd00		       e7		      .byte.b	#%11100111	;
   2170  fd01		       a5		      .byte.b	#%10100101	; 
   2171  fd02		       a5		      .byte.b	#%10100101	; 
   2172  fd03		       a5		      .byte.b	#%10100101	; 
   2173  fd04		       e7		      .byte.b	#%11100111	;	
   2174  fd05				   C1
   2175  fd05		       e7		      .byte.b	#%11100111	;
   2176  fd06		       42		      .byte.b	#%01000010	; 
   2177  fd07		       42		      .byte.b	#%01000010	; 
   2178  fd08		       42		      .byte.b	#%01000010	; 
   2179  fd09		       66		      .byte.b	#%01100110	;
   2180  fd0a				   C2
   2181  fd0a		       e7		      .byte.b	#%11100111	;
   2182  fd0b		       24		      .byte.b	#%00100100	; 
   2183  fd0c		       e7		      .byte.b	#%11100111	; 
   2184  fd0d		       81		      .byte.b	#%10000001	; 
   2185  fd0e		       e7		      .byte.b	#%11100111	;
   2186  fd0f				   C3
   2187  fd0f		       e7		      .byte.b	#%11100111	;
   2188  fd10		       81		      .byte.b	#%10000001	; 
   2189  fd11		       e7		      .byte.b	#%11100111	; 
   2190  fd12		       81		      .byte.b	#%10000001	; 
   2191  fd13		       e7		      .byte.b	#%11100111	;
   2192  fd14				   C4
   2193  fd14		       81		      .byte.b	#%10000001	;
   2194  fd15		       81		      .byte.b	#%10000001	; 
   2195  fd16		       e7		      .byte.b	#%11100111	; 
   2196  fd17		       a5		      .byte.b	#%10100101	; 
   2197  fd18		       a5		      .byte.b	#%10100101	;
   2198  fd19				   C5
   2199  fd19		       e7		      .byte.b	#%11100111	;
   2200  fd1a		       81		      .byte.b	#%10000001	; 
   2201  fd1b		       e7		      .byte.b	#%11100111	; 
   2202  fd1c		       24		      .byte.b	#%00100100	; 
   2203  fd1d		       e7		      .byte.b	#%11100111	;
   2204  fd1e				   C6
   2205  fd1e		       e7		      .byte.b	#%11100111	;
   2206  fd1f		       a5		      .byte.b	#%10100101	; 
   2207  fd20		       e7		      .byte.b	#%11100111	; 
   2208  fd21		       24		      .byte.b	#%00100100	; 
   2209  fd22		       e7		      .byte.b	#%11100111	;
   2210  fd23				   C7
   2211  fd23		       81		      .byte.b	#%10000001	;
   2212  fd24		       81		      .byte.b	#%10000001	; 
   2213  fd25		       81		      .byte.b	#%10000001	; 
   2214  fd26		       81		      .byte.b	#%10000001	; 
   2215  fd27		       e7		      .byte.b	#%11100111	;
   2216  fd28				   C8
   2217  fd28		       e7		      .byte.b	#%11100111	;
   2218  fd29		       a5		      .byte.b	#%10100101	; 
   2219  fd2a		       e7		      .byte.b	#%11100111	; 
   2220  fd2b		       a5		      .byte.b	#%10100101	; 
   2221  fd2c		       e7		      .byte.b	#%11100111	;
   2222  fd2d				   C9
   2223  fd2d		       e7		      .byte.b	#%11100111	;
   2224  fd2e		       81		      .byte.b	#%10000001	; 
   2225  fd2f		       e7		      .byte.b	#%11100111	; 
   2226  fd30		       a5		      .byte.b	#%10100101	; 
   2227  fd31		       e7		      .byte.b	#%11100111	;
   2228  fd32				   CA
   2229  fd32		       a5		      .byte.b	#%10100101	;
   2230  fd33		       a5		      .byte.b	#%10100101	; 
   2231  fd34		       e7		      .byte.b	#%11100111	; 
   2232  fd35		       a5		      .byte.b	#%10100101	; 
   2233  fd36		       e7		      .byte.b	#%11100111	;
   2234  fd37				   CB
   2235  fd37		       66		      .byte.b	#%01100110	;
   2236  fd38		       a5		      .byte.b	#%10100101	; 
   2237  fd39		       66		      .byte.b	#%01100110	; 
   2238  fd3a		       a5		      .byte.b	#%10100101	;
   2239  fd3b		       66		      .byte.b	#%01100110	;
   2240  fd3c				   CC
   2241  fd3c		       e7		      .byte.b	#%11100111	;
   2242  fd3d		       24		      .byte.b	#%00100100	; 
   2243  fd3e		       24		      .byte.b	#%00100100	; 
   2244  fd3f		       24		      .byte.b	#%00100100	;
   2245  fd40		       e7		      .byte.b	#%11100111	;
   2246  fd41
   2247  fd41				   CD
   2248  fd41		       66		      .byte.b	#%01100110	;
   2249  fd42		       a5		      .byte.b	#%10100101	; 
   2250  fd43		       a5		      .byte.b	#%10100101	; 
   2251  fd44		       a5		      .byte.b	#%10100101	;
   2252  fd45		       66		      .byte.b	#%01100110	;
   2253  fd46
   2254  fd46				   CE
   2255  fd46		       e7		      .byte.b	#%11100111	;
   2256  fd47		       24		      .byte.b	#%00100100	; 
   2257  fd48		       e7		      .byte.b	#%11100111	; 
   2258  fd49		       24		      .byte.b	#%00100100	; 
   2259  fd4a		       e7		      .byte.b	#%11100111	;
   2260  fd4b
   2261  fd4b				   CF
   2262  fd4b		       24		      .byte.b	#%00100100	;
   2263  fd4c		       24		      .byte.b	#%00100100	; 
   2264  fd4d		       e7		      .byte.b	#%11100111	; 
   2265  fd4e		       24		      .byte.b	#%00100100	; 
   2266  fd4f		       e7		      .byte.b	#%11100111	;
   2267  fd50
   2268  fd50				   CG
   2269  fd50		       c3		      .byte.b	#%11000011	;
   2270  fd51		       a5		      .byte.b	#%10100101	; 
   2271  fd52		       a5		      .byte.b	#%10100101	; 
   2272  fd53		       24		      .byte.b	#%00100100	; 
   2273  fd54		       c3		      .byte.b	#%11000011	;	
   2274  fd55
   2275  fd55				   CH
   2276  fd55		       a5		      .byte.b	#%10100101	;
   2277  fd56		       a5		      .byte.b	#%10100101	; 
   2278  fd57		       e7		      .byte.b	#%11100111	; 
   2279  fd58		       a5		      .byte.b	#%10100101	; 
   2280  fd59		       a5		      .byte.b	#%10100101	;
   2281  fd5a
   2282  fd5a				   CK
   2283  fd5a		       a5		      .byte.b	#%10100101	;
   2284  fd5b		       a5		      .byte.b	#%10100101	; 
   2285  fd5c		       66		      .byte.b	#%01100110	; 
   2286  fd5d		       a5		      .byte.b	#%10100101	; 
   2287  fd5e		       a5		      .byte.b	#%10100101	;
   2288  fd5f
   2289  fd5f				   CL
   2290  fd5f		       e7		      .byte.b	#%11100111	;
   2291  fd60		       24		      .byte.b	#%00100100	; 
   2292  fd61		       24		      .byte.b	#%00100100	; 
   2293  fd62		       24		      .byte.b	#%00100100	; 
   2294  fd63		       24		      .byte.b	#%00100100	;
   2295  fd64
   2296  fd64				   CI
   2297  fd64		       42		      .byte.b	#%01000010	;
   2298  fd65		       42		      .byte.b	#%01000010	; 
   2299  fd66		       42		      .byte.b	#%01000010	; 
   2300  fd67		       42		      .byte.b	#%01000010	; 
   2301  fd68		       42		      .byte.b	#%01000010	;
   2302  fd69
   2303  fd69				   CM
   2304  fd69		       a5		      .byte.b	#%10100101	;
   2305  fd6a		       a5		      .byte.b	#%10100101	; 
   2306  fd6b		       a5		      .byte.b	#%10100101	; 
   2307  fd6c		       e7		      .byte.b	#%11100111	; 
   2308  fd6d		       a5		      .byte.b	#%10100101	;
   2309  fd6e
   2310  fd6e				   CN
   2311  fd6e		       a5		      .byte.b	#%10100101	;
   2312  fd6f		       a5		      .byte.b	#%10100101	; 
   2313  fd70		       a5		      .byte.b	#%10100101	; 
   2314  fd71		       a5		      .byte.b	#%10100101	; 
   2315  fd72		       66		      .byte.b	#%01100110	;	
   2316  fd73
   2317  fd73
   2318  fd73				   CO
   2319  fd73		       42		      .byte.b	#%01000010	;
   2320  fd74		       a5		      .byte.b	#%10100101	; 
   2321  fd75		       a5		      .byte.b	#%10100101	; 
   2322  fd76		       a5		      .byte.b	#%10100101	; 
   2323  fd77		       42		      .byte.b	#%01000010	;	
   2324  fd78
   2325  fd78				   CP
   2326  fd78		       24		      .byte.b	#%00100100	;
   2327  fd79		       24		      .byte.b	#%00100100	; 
   2328  fd7a		       e7		      .byte.b	#%11100111	; 
   2329  fd7b		       a5		      .byte.b	#%10100101	; 
   2330  fd7c		       e7		      .byte.b	#%11100111	;
   2331  fd7d
   2332  fd7d				   CR
   2333  fd7d		       a5		      .byte.b	#%10100101	;
   2334  fd7e		       a5		      .byte.b	#%10100101	; 
   2335  fd7f		       66		      .byte.b	#%01100110	; 
   2336  fd80		       a5		      .byte.b	#%10100101	; 
   2337  fd81		       66		      .byte.b	#%01100110	;
   2338  fd82
   2339  fd82				   CS
   2340  fd82		       66		      .byte.b	#%01100110	;
   2341  fd83		       81		      .byte.b	#%10000001	; 
   2342  fd84		       42		      .byte.b	#%01000010	; 
   2343  fd85		       24		      .byte.b	#%00100100	; 
   2344  fd86		       c3		      .byte.b	#%11000011	;
   2345  fd87
   2346  fd87				   CT
   2347  fd87		       42		      .byte.b	#%01000010	;
   2348  fd88		       42		      .byte.b	#%01000010	; 
   2349  fd89		       42		      .byte.b	#%01000010	; 
   2350  fd8a		       42		      .byte.b	#%01000010	; 
   2351  fd8b		       e7		      .byte.b	#%11100111	;
   2352  fd8c
   2353  fd8c				   CV
   2354  fd8c		       42		      .byte.b	#%01000010	;
   2355  fd8d		       a5		      .byte.b	#%10100101	; 
   2356  fd8e		       a5		      .byte.b	#%10100101	; 
   2357  fd8f		       a5		      .byte.b	#%10100101	; 
   2358  fd90		       a5		      .byte.b	#%10100101	;	
   2359  fd91
   2360  fd91				   CY
   2361  fd91		       42		      .byte.b	#%01000010	;
   2362  fd92		       42		      .byte.b	#%01000010	; 
   2363  fd93		       42		      .byte.b	#%01000010	; 
   2364  fd94		       a5		      .byte.b	#%10100101	; 
   2365  fd95		       a5		      .byte.b	#%10100101	;
   2366  fd96
   2367  fd96				   CW
   2368  fd96		       a5		      .byte.b	#%10100101	;
   2369  fd97		       e7		      .byte.b	#%11100111	; 
   2370  fd98		       a5		      .byte.b	#%10100101	; 
   2371  fd99		       a5		      .byte.b	#%10100101	; 
   2372  fd9a		       a5		      .byte.b	#%10100101	;
   2373  fd9b
   2374  fd9b				   CZ
   2375  fd9b		       e7		      .byte.b	#%11100111	;
   2376  fd9c		       24		      .byte.b	#%00100100	; 
   2377  fd9d		       42		      .byte.b	#%01000010	; 
   2378  fd9e		       81		      .byte.b	#%10000001	; 
   2379  fd9f		       e7		      .byte.b	#%11100111	;
   2380  fda0
   2381  fda0				   Pipe
   2382  fda0		       42		      .byte.b	#%01000010	;
   2383  fda1		       00		      .byte.b	#%00000000	; 
   2384  fda2		       42		      .byte.b	#%01000010	; 
   2385  fda3		       00		      .byte.b	#%00000000	; 
   2386  fda4		       42		      .byte.b	#%01000010	;
   2387  fda5
   2388  fda5				   Exclamation
   2389  fda5		       42		      .byte.b	#%01000010	;
   2390  fda6		       00		      .byte.b	#%00000000	; 
   2391  fda7		       42		      .byte.b	#%01000010	; 
   2392  fda8		       42		      .byte.b	#%01000010	; 
   2393  fda9		       42		      .byte.b	#%01000010	;
   2394  fdaa
   2395  fdaa				   Dot
   2396  fdaa		       42		      .byte.b	#%01000010	;
   2397  fdab		       42		      .byte.b	#%01000010	; 
   2398  fdac		       00		      .byte.b	#%00000000	; 
   2399  fdad		       00		      .byte.b	#%00000000	; 
   2400  fdae		       00		      .byte.b	#%00000000	;
   2401  fdaf
   2402  fdaf				   Colon
   2403  fdaf		       42		      .byte.b	#%01000010	;
   2404  fdb0		       42		      .byte.b	#%01000010	; 
   2405  fdb1		       00		      .byte.b	#%00000000	; 
   2406  fdb2		       42		      .byte.b	#%01000010	; 
   2407  fdb3		       42		      .byte.b	#%01000010	;
   2408  fdb4
   2409  fdb4				   Triangle
   2410  fdb4		       81		      .byte.b	#%10000001	;
   2411  fdb5		       c3		      .byte.b	#%11000011	; 
   2412  fdb6		       e7		      .byte.b	#%11100111	; 
   2413  fdb7		       c3		      .byte.b	#%11000011	; 
   2414  fdb8		       81		      .byte.b	#%10000001	;
   2415  fdb9
   2416  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2417  fdb9		       00		      .byte.b	#0	;
   2418  fdba		       00		      .byte.b	#0	;
   2419  fdbb		       00		      .byte.b	#0	;
   2420  fdbc		       00		      .byte.b	#0	;
   2421  fdbd		       00		      .byte.b	#0	;
   2422  fdbe
   2423  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2424  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2425  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2426  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2427  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2428  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2429  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2430  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2431  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2432  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2433  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2434  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2435  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2436  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2437  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2438  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2439  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2440  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2441  fdcf
   2442  fdcf				   EngineSoundType
   2443  fdcf		       02		      .byte.b	#2
   2444  fdd0		       02		      .byte.b	#2
   2445  fdd1		       0e		      .byte.b	#14
   2446  fdd2		       06		      .byte.b	#6
   2447  fdd3		       06		      .byte.b	#6
   2448  fdd4		       0e		      .byte.b	#14
   2449  fdd5
   2450  fdd5				   EngineBaseFrequence
   2451  fdd5		       1f		      .byte.b	#31
   2452  fdd6		       15		      .byte.b	#21
   2453  fdd7		       14		      .byte.b	#20
   2454  fdd8		       1f		      .byte.b	#31
   2455  fdd9		       16		      .byte.b	#22
   2456  fdda		       03		      .byte.b	#3
   2457  fddb
   2458  fddb				   TachometerSizeLookup1
   2459  fddb		       1f		      .byte.b	#%00011111
   2460  fddc		       3f		      .byte.b	#%00111111
   2461  fddd		       7f		      .byte.b	#%01111111
   2462  fdde		       ff		      .byte.b	#%11111111
   2463  fddf		       ff		      .byte.b	#%11111111
   2464  fde0		       ff		      .byte.b	#%11111111
   2465  fde1		       ff		      .byte.b	#%11111111
   2466  fde2		       ff		      .byte.b	#%11111111
   2467  fde3
   2468  fde3				   TachometerSizeLookup2
   2469  fde3		       00		      .byte.b	#%00000000
   2470  fde4		       00		      .byte.b	#%00000000
   2471  fde5		       00		      .byte.b	#%00000000
   2472  fde6		       00		      .byte.b	#%00000000
   2473  fde7		       80		      .byte.b	#%10000000
   2474  fde8		       c0		      .byte.b	#%11000000
   2475  fde9		       e0		      .byte.b	#%11100000
   2476  fdea		       f0		      .byte.b	#%11110000
   2477  fdeb
   2478  fdeb				   TachometerGearLookup
   2479  fdeb		       01		      .byte.b	#%00000001
   2480  fdec		       02		      .byte.b	#%00000010
   2481  fded		       04		      .byte.b	#%00000100
   2482  fdee		       08		      .byte.b	#%00001000
   2483  fdef		       10		      .byte.b	#%00010000
   2484  fdf0		       30		      .byte.b	#%00110000
   2485  fdf1
   2486  fe00					      org	$FE00
   2487  fe00				   AesTable
   2488  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2489  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2490  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2491  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2492  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2493  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2494  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2495  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2496  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2497  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2498  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2499  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2500  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2501  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2502  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2503  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2504  ff00
   2505  ff00							; From FF00 to FFFB (122 bytes) to use here
   2506  ff00
   2507  ff00				   StaticText		; All static text must be on the same MSB block. 
   2508  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2509  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2510  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2511  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2512  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2513  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2514  ff05
   2515  ff05				   HellwayLeftText
   2516  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2517  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2518  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2519  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2520  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2521  ff0a
   2522  ff0a				   HellwayRightText
   2523  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2524  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2525  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2526  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2527  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2528  ff0f
   2529  ff0f				   OpbText
   2530  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2531  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2532  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2533  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2534  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2535  ff14
   2536  ff14				   YearText
   2537  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2538  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2539  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2540  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2541  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2542  ff19
   2543  ff19				   GameText
   2544  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2545  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2546  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2547  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2548  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2549  ff1e
   2550  ff1e				   OverText
   2551  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2552  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2553  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2554  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2555  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2556  ff23				   GoText
   2557  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2558  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2559  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2560  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2561  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2562  ff28
   2563  ff28				   ZeldaTextLeft
   2564  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2565  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2566  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2567  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2568  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2569  ff2d
   2570  ff2d				   ZeldaTextRight
   2571  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2572  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2573  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2574  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2575  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2576  ff32
   2577  ff32				   ZeldaDateLeft
   2578  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2579  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2580  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2581  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2582  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2583  ff37
   2584  ff37				   ZeldaDateRight
   2585  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2586  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2587  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2588  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2589  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2590  ff3c
   2591  ff3c				   PolvinhosTextLeft
   2592  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2593  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2594  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2595  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2596  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2597  ff41
   2598  ff41				   PolvinhosTextRight
   2599  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2600  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2601  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2602  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2603  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2604  ff46
   2605  ff46				   PolvinhosDateLeft
   2606  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2607  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2608  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2609  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2610  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2611  ff4b
   2612  ff4b				   PolvinhosDateRight
   2613  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2614  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2615  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2616  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2617  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2618  ff50
   2619  ff50				   IvonneTextLeft
   2620  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2621  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2622  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2623  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2624  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2625  ff55
   2626  ff55				   IvonneTextRight
   2627  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2628  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2629  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2630  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2631  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2632  ff5a
   2633  ff5a				   IvonneDateLeft
   2634  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2635  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2636  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2637  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2638  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2639  ff5f
   2640  ff5f				   IvonneDateRight
   2641  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2642  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2643  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2644  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2645  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2646  ff64
   2647  ff64				   PaperArtTextLeft
   2648  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2649  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2650  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2651  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2652  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2653  ff69
   2654  ff69				   PaperArtTextRight
   2655  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2656  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2657  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2658  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2659  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2660  ff6e
   2661  ff6e				   LeonardoTextLeft
   2662  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2663  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2664  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2665  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2666  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2667  ff73
   2668  ff73				   LeonardoTextRight
   2669  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2670  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2671  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2672  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2673  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2674  ff78
   2675  ff78				   VersionText
   2676  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2677  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2678  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2679  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2680  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2681  ff7d
   2682  ff7d
   2683  ff7d				   EndStaticText
   2684  ff7d
   2685  ff7d				   CarSprite0		; Upside down, Original Car
   2686  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2687  ff85				   CarSprite0NoPadding
   2688  ff85		       7e		      .byte.b	#%01111110
   2689  ff86		       24		      .byte.b	#%00100100
   2690  ff87		       bd		      .byte.b	#%10111101
   2691  ff88		       3c		      .byte.b	#%00111100
   2692  ff89		       bd		      .byte.b	#%10111101
   2693  ff8a		       3c		      .byte.b	#%00111100
   2694  ff8b
   2695  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2696  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2697  ff93				   CarSprite1NoPadding
   2698  ff93		       bd		      .byte.b	#%10111101
   2699  ff94		       7e		      .byte.b	#%01111110
   2700  ff95		       5a		      .byte.b	#%01011010
   2701  ff96		       66		      .byte.b	#%01100110
   2702  ff97		       bd		      .byte.b	#%10111101
   2703  ff98		       3c		      .byte.b	#%00111100
   2704  ff99
   2705  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2706  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2707  ffa1				   CarSprite2NoPadding
   2708  ffa1		       7e		      .byte.b	#%01111110
   2709  ffa2		       a5		      .byte.b	#%10100101
   2710  ffa3		       42		      .byte.b	#%01000010
   2711  ffa4		       42		      .byte.b	#%01000010
   2712  ffa5		       bd		      .byte.b	#%10111101
   2713  ffa6		       7e		      .byte.b	#%01111110
   2714  ffa7
   2715  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2716  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2717  ffaf				   CarSprite3NoPadding
   2718  ffaf		       3c		      .byte.b	#%00111100
   2719  ffb0		       db		      .byte.b	#%11011011
   2720  ffb1		       db		      .byte.b	#%11011011
   2721  ffb2		       3c		      .byte.b	#%00111100
   2722  ffb3		       5a		      .byte.b	#%01011010
   2723  ffb4		       3c		      .byte.b	#%00111100
   2724  ffb5
   2725  ffb5				   TrafficSpeeds
   2726  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2727  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2728  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2729  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2730  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2731  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2732  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2733  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2734  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2735  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2736  ffbf				   TrafficSpeedsHighDelta
   2737  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2738  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2739  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2740  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2741  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2742  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2743  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2744  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2745  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2746  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2747  ffc9
   2748  ffc9				   CarIdToSpriteAddressL
   2749  ffc9		       7d		      .byte.b	#<CarSprite0
   2750  ffca		       8b		      .byte.b	#<CarSprite1
   2751  ffcb		       99		      .byte.b	#<CarSprite2
   2752  ffcc		       a7		      .byte.b	#<CarSprite3
   2753  ffcd
   2754  ffcd				   CarIdToSpriteAddressH
   2755  ffcd		       ff		      .byte.b	#>CarSprite0
   2756  ffce		       ff		      .byte.b	#>CarSprite1
   2757  ffcf		       ff		      .byte.b	#>CarSprite2
   2758  ffd0		       ff		      .byte.b	#>CarSprite3
   2759  ffd1
   2760  ffd1				   EnemyCarIdToSpriteAddressL
   2761  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2762  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2763  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2764  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2765  ffd5
   2766  ffd5				   EnemyCarIdToSpriteAddressH
   2767  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2768  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2769  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2770  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2771  ffd9
   2772  ffd9				   CarIdToAccelerateSpeed
   2773  ffd9		       80		      .byte.b	#128
   2774  ffda		       c0		      .byte.b	#192
   2775  ffdb		       60		      .byte.b	#96
   2776  ffdc		       c0		      .byte.b	#192
   2777  ffdd
   2778  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2779  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2780  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2781  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2782  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2783  ffe1
   2784  ffe1				   CarIdToMaxSpeedL
   2785  ffe1		       80		      .byte.b	#$80
   2786  ffe2		       00		      .byte.b	#$00	; One less gear
   2787  ffe3		       80		      .byte.b	#$80
   2788  ffe4		       80		      .byte.b	#$80
   2789  ffe5
   2790  ffe5				   CarIdToMaxGear
   2791  ffe5		       05		      .byte.b	#5
   2792  ffe6		       04		      .byte.b	#4	; One less gear
   2793  ffe7		       05		      .byte.b	#5
   2794  ffe8		       05		      .byte.b	#5
   2795  ffe9
   2796  ffe9				   GearToBreakSpeedTable
   2797  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2798  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2799  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2800  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2801  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2802  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2803  ffef
   2804  ffef				   TrafficColorTable
   2805  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2806  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2807  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2808  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2809  fff3
   2810  fff3				   TrafficChanceTable
   2811  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2812  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2813  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2814  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2815  fff7
   2816  fff7				   TrafficTimeTable
   2817  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2818  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2819  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2820  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2821  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2822  fffc
   2823  fffc
   2824  fffc					      org	$FFFC
   2825  fffc		       00 f0		      .word.w	BeforeStart
   2826  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
