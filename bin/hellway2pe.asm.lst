------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 37	   SCORE_FONT_COLOR_GOOD =	$37
     58  f000		       00 d8	   OP_SCORE_FONT_COLOR_GOOD =	$D8
     59  f000
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 56	   OP_SCORE_FONT_COLOR_BAD =	$56
     62  f000
     63  f000		       00 38	   SCORE_FONT_COLOR_START =	$38	;Cannot be the same as good, font colors = game state
     64  f000		       00 c8	   OP_SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     65  f000
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000		       00 ab	   OP_SCORE_FONT_COLOR_OVER =	$AB
     68  f000
     69  f000		       00 f9	   PLAYER0_COLOR =	$F9
     70  f000		       00 98	   PLAYER1_COLOR =	$98
     71  f000
     72  f000		       00 20	   PLAYER_0_X_START =	32	;
     73  f000		       00 29	   PLAYER_1_X_START =	41	;
     74  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     75  f000
     76  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     77  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     78  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     79  f000
     80  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     81  f000
     82  f000		       00 00	   BLACK      =	$00	;
     83  f000
     84  f000		       00 10	   MAX_GAME_MODE =	16
     85  f000
     86  f000		       00 08	   PARALLAX_SIZE =	8
     87  f000
     88  f000		       00 05	   HALF_TEXT_SIZE =	5
     89  f000
     90  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     91  f000
     92  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     93  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     94  f000		       00 00	   QR_CODE_COLOR =	$00
     95  f000		       00 19	   QR_CODE_SIZE =	25
     96  f000
     97  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     98  f000
     99  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    100  f000		       00 29	   VBLANK_TIMER =	41
    101  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    102  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    103  f000
    104  f000		       00 08	   ENGINE_VOLUME =	8
    105  f000
    106  f000		       00 08	   CAR_SIZE   =	8
    107  f000
    108  f000		       00 80	   GRP0Cache  =	$80
    109  f000		       00 81	   PF0Cache   =	$81
    110  f000		       00 82	   PF1Cache   =	$82
    111  f000		       00 83	   PF2Cache   =	$83
    112  f000		       00 84	   GRP1Cache  =	$84
    113  f000		       00 85	   ENABLCache =	$85
    114  f000		       00 86	   ENAM0Cache =	$86
    115  f000		       00 87	   ENAM1Cache =	$87
    116  f000
    117  f000		       00 8c	   FrameCount0 =	$8C	;
    118  f000		       00 8d	   FrameCount1 =	$8D	;
    119  f000
    120  f000		       00 8e	   CollisionCounter =	$8E
    121  f000		       00 8f	   OpCollisionCounter =	$8F
    122  f000
    123  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    124  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    125  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    126  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    127  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    128  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    129  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    130  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    131  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000		       00 b4	   Tmp4       =	$B4
    139  f000		       00 b5	   Tmp5       =	$B5
    140  f000
    141  f000		       00 b6	   Player0X   =	$B6
    142  f000		       00 b7	   Player1X   =	$B7
    143  f000		       00 b8	   CountdownTimer =	$B8
    144  f000		       00 b9	   OpCountdownTimer =	$B9
    145  f000		       00 ba	   Traffic0Msb =	$BA
    146  f000		       00 bb	   OpTraffic0Msb =	$BB
    147  f000		       00 bc	   SwitchDebounceCounter =	$BC
    148  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    149  f000		       00 be	   TrafficChance =	$BE
    150  f000		       00 bf	   OpTrafficChance =	$BF
    151  f000
    152  f000		       00 c0	   CheckpointTime =	$C0
    153  f000		       00 c1	   OpCheckpointTime =	$C1
    154  f000		       00 c2	   TrafficColor =	$C2
    155  f000		       00 c3	   OpTrafficColor =	$C3
    156  f000		       00 c4	   CurrentDifficulty =	$C4
    157  f000		       00 c5	   OpCurrentDifficulty =	$C5
    158  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    159  f000
    160  f000		       00 c7	   CurrentCarId =	$C7
    161  f000		       00 c8	   OpCurrentCarId =	$C8
    162  f000
    163  f000		       00 c9	   ScoreFontColor =	$C9
    164  f000		       00 ca	   OpScoreFontColor =	$CA
    165  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    166  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    167  f000		       00 cd	   NextCheckpoint =	$CD
    168  f000		       00 ce	   OpNextCheckpoint =	$CE
    169  f000		       00 cf	   OpponentLine =	$CF
    170  f000
    171  f000		       00 d0	   ScoreD0    =	$D0
    172  f000		       00 d1	   ScoreD1    =	$D1
    173  f000		       00 d2	   ScoreD2    =	$D2
    174  f000		       00 d3	   ScoreD3    =	$D3
    175  f000		       00 d4	   ScoreD4    =	$D4
    176  f000
    177  f000		       00 d5	   Gear       =	$D5
    178  f000		       00 d6	   OpGear     =	$D6
    179  f000
    180  f000		       00 d7	   CarSpritePointerL =	$D7
    181  f000		       00 d8	   CarSpritePointerH =	$D8
    182  f000
    183  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    184  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    185  f000
    186  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    187  f000
    188  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    189  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    190  f000
    191  f000		       00 de	   Player0SpeedL =	$DE
    192  f000		       00 df	   Player1SpeedL =	$DF
    193  f000		       00 f0	   Player0SpeedH =	$F0
    194  f000		       00 f1	   Player1SpeedH =	$F1
    195  f000
    196  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 ca		      LDA	#202	; needs change if memory clean routine changes
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 51 f7 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 83 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 de		      STA	Player0SpeedL
    257  f059		       85 df		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   StoreCurrentDifficulty
    274  f071		       86 c4		      STX	CurrentDifficulty
    275  f073		       86 c5		      STX	OpCurrentDifficulty
    276  f075		       a2 00		      LDX	#0
    277  f077		       20 09 f7 	      JSR	ConfigureDifficulty
    278  f07a		       e8		      INX
    279  f07b		       20 09 f7 	      JSR	ConfigureDifficulty
    280  f07e
    281  f07e				   SetGameNotRunning
    282  f07e		       a9 00		      LDA	#0
    283  f080		       85 bd		      STA	GameStatus
    284  f082
    285  f082				   ConfigureTimer
    286  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    287  f084		       85 b8		      STA	CountdownTimer	;3
    288  f086		       85 b9		      STA	OpCountdownTimer	;3
    289  f088
    290  f088				   ConfigurePlayer1XPosition
    291  f088		       a9 29		      LDA	#PLAYER_1_X_START	;2
    292  f08a		       85 b7		      STA	Player1X	;3
    293  f08c
    294  f08c				   ConfigureOpNextCheckpoint
    295  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    296  f08e		       85 ce		      STA	OpNextCheckpoint
    297  f090
    298  f090				   HPositioning 		; Avoid sleep doing needed stuff
    299  f090		       85 02		      STA	WSYNC
    300  f092
    301  f092				   ConfigurePlayer0XPosition
    302  f092		       a9 20		      LDA	#PLAYER_0_X_START	;2
    303  f094		       85 b6		      STA	Player0X	;3
    304  f096
    305  f096				   ConfigureMissileSize
    306  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    307  f098		       85 04		      STA	NUSIZ0	;3
    308  f09a		       85 05		      STA	NUSIZ1	;3
    309  f09c
    310  f09c				   ConfigureNextCheckpoint
    311  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    312  f09e		       85 cd		      STA	NextCheckpoint
    313  f0a0
    314  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    315  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	5	;
      1  f0a2				   .CYCLES    SET	5
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    317  f0a5		       85 12		      STA	RESM0
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    319  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    321  f0ab		       85 13		      STA	RESM1
      0  f0ad					      SLEEP	3
      1  f0ad				   .CYCLES    SET	3
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad					      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad					      ELSE
     12  f0ad		       24 00		      bit	VSYNC
     13  f0af					      ENDIF
     14  f0af				   .CYCLES    SET	.CYCLES - 3
     15  f0af					      ENDIF
     16  f0af
     17  f0af				  -	      REPEAT	.CYCLES / 2
     18  f0af				  -	      nop
     19  f0af					      REPEND
    323  f0af
    324  f0af		       a9 d0		      LDA	#$D0
    325  f0b1		       85 24		      STA	HMBL
    326  f0b3		       85 22		      STA	HMM0
    327  f0b5		       85 23		      STA	HMM1
    328  f0b7		       85 02		      STA	WSYNC
    329  f0b9		       85 2a		      STA	HMOVE
    330  f0bb		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    331  f0bd		       85 2b		      STA	HMCLR
      0  f0bf					      SLEEP	31
      1  f0bf				   .CYCLES    SET	31
      2  f0bf
      3  f0bf				  -	      IF	.CYCLES < 2
      4  f0bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bf				  -	      ERR
      6  f0bf					      ENDIF
      7  f0bf
      8  f0bf					      IF	.CYCLES & 1
      9  f0bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bf				  -	      nop	0
     11  f0bf					      ELSE
     12  f0bf		       24 00		      bit	VSYNC
     13  f0c1					      ENDIF
     14  f0c1				   .CYCLES    SET	.CYCLES - 3
     15  f0c1					      ENDIF
     16  f0c1
     17  f0c1					      REPEAT	.CYCLES / 2
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     19  f0cf					      REPEND
    333  f0cf		       85 10		      STA	RESP0
    334  f0d1		       85 11		      STA	RESP1
    335  f0d3
    336  f0d3				   WaitResetToEnd
    337  f0d3		       ad 84 02 	      LDA	INTIM
    338  f0d6		       d0 fb		      BNE	WaitResetToEnd
    339  f0d8
    340  f0d8				   MainLoop
    341  f0d8		       a9 02		      LDA	#2
    342  f0da		       85 00		      STA	VSYNC
    343  f0dc		       85 02		      STA	WSYNC
    344  f0de		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    345  f0e0							;Some free cycles here!
    346  f0e0				   PrepareMaxHMove
    347  f0e0		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    348  f0e2		       85 09		      STA	COLUBK
      0  f0e4					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e4				   .CYCLES    SET	24 - 11
      2  f0e4
      3  f0e4				  -	      IF	.CYCLES < 2
      4  f0e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e4				  -	      ERR
      6  f0e4					      ENDIF
      7  f0e4
      8  f0e4					      IF	.CYCLES & 1
      9  f0e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e4				  -	      nop	0
     11  f0e4					      ELSE
     12  f0e4		       24 00		      bit	VSYNC
     13  f0e6					      ENDIF
     14  f0e6				   .CYCLES    SET	.CYCLES - 3
     15  f0e6					      ENDIF
     16  f0e6
     17  f0e6					      REPEAT	.CYCLES / 2
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    350  f0eb		       a9 80		      LDA	#$80
    351  f0ed		       85 24		      STA	HMBL
    352  f0ef		       85 22		      STA	HMM0
    353  f0f1		       85 23		      STA	HMM1
    354  f0f3		       85 20		      STA	HMP0
    355  f0f5		       85 21		      STA	HMP1
    356  f0f7		       85 02		      STA	WSYNC
    357  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    358  f0fb
    359  f0fb				   ConfigVBlankTimer
    360  f0fb		       a5 c6		      LDA	GameMode
    361  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    362  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    363  f101		       a9 29		      LDA	#VBLANK_TIMER
    364  f103		       4c 08 f1 	      JMP	SetVblankTimer
    365  f106				   SetVblankTimerQrCode
    366  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    367  f108
    368  f108				   SetVblankTimer
    369  f108		       85 02		      STA	WSYNC	;3
    370  f10a		       8d 96 02 	      STA	TIM64T	;3	
    371  f10d		       a9 00		      LDA	#0	;2
    372  f10f		       85 00		      STA	VSYNC	;3	
    373  f111
    374  f111				   RandomizeGame
    375  f111		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f113		       d0 2d		      BNE	EndRandomizeGame
    377  f115		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f117		       29 02		      AND	#%00000010
    379  f119		       f0 24		      BEQ	DeterministicGame
    380  f11b		       a6 96		      LDX	TrafficOffset1 + 2
    381  f11d		       bd 00 fe 	      LDA	AesTable,X
    382  f120		       45 8c		      EOR	FrameCount0
    383  f122		       85 96		      STA	TrafficOffset1 + 2
    384  f124		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f126		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f128		       bd 00 fe 	      LDA	AesTable,X
    387  f12b		       45 8c		      EOR	FrameCount0
    388  f12d		       85 9a		      STA	TrafficOffset2 + 2
    389  f12f		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f131		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f133		       bd 00 fe 	      LDA	AesTable,X
    392  f136		       45 8c		      EOR	FrameCount0
    393  f138		       85 9e		      STA	TrafficOffset3 + 2
    394  f13a		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13c		       4c 42 f1 	      JMP	EndRandomizeGame
    396  f13f
    397  f13f				   DeterministicGame
    398  f13f		       20 51 f7 	      JSR	DefaultOffsets
    399  f142
    400  f142				   EndRandomizeGame
    401  f142
    402  f142				   CountFrame
    403  f142		       e6 8c		      INC	FrameCount0	; 5
    404  f144		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    405  f146		       e6 8d		      INC	FrameCount1	; 5 
    406  f148				   SkipIncFC1
    407  f148
    408  f148				   CallDrawQrCode
    409  f148		       a5 c6		      LDA	GameMode
    410  f14a		       c9 10		      CMP	#MAX_GAME_MODE
    411  f14c		       d0 03		      BNE	TestIsGameRunning
    412  f14e		       4c 0f fb 	      JMP	DrawQrCode
    413  f151
    414  f151							;Does not update the game if not running
    415  f151				   TestIsGameRunning
    416  f151		       a5 bd		      LDA	GameStatus	;3
    417  f153		       d0 13		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    418  f155				   SelectCarWithDpadCall		; Only do it when game is stoped
    419  f155		       a2 00		      LDX	#0	; Player 0
    420  f157		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    421  f159		       85 b0		      STA	Tmp0
    422  f15b		       20 23 f8 	      JSR	SelectCarWithDpad
    423  f15e		       e8		      INX		; Player 1
    424  f15f		       20 23 f8 	      JSR	SelectCarWithDpad
    425  f162
    426  f162							; Needs to draw the opponent in the correct line even when game stoped  
    427  f162							; Draeing is a destructive operation
    428  f162		       20 35 f8 	      JSR	ProcessOpponentLineAndPlayerSprite
    429  f165
    430  f165				   SkipUpdateLogicJump
    431  f165		       4c 9d f1 	      JMP	SkipUpdateLogic
    432  f168				   ContinueWithGameLogic
    433  f168
    434  f168				   CallEverySecond		; Timer for now
    435  f168		       a2 00		      LDX	#0
    436  f16a		       20 c1 fa 	      JSR	EverySecond
    437  f16d		       e8		      INX
    438  f16e		       20 c1 fa 	      JSR	EverySecond
    439  f171
    440  f171				   CallProcessSpeed
    441  f171		       a2 00		      LDX	#0
    442  f173		       20 d5 f9 	      JSR	ProcessSpeed
    443  f176
    444  f176		       e8		      INX		; Player 1
    445  f177		       20 d5 f9 	      JSR	ProcessSpeed
    446  f17a
    447  f17a				   CallUpdateOffsets
    448  f17a		       a2 00		      LDX	#0	; Player 0
    449  f17c		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    450  f17e		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    451  f180		       a5 de		      LDA	Player0SpeedL
    452  f182		       85 b4		      STA	Tmp4
    453  f184		       a5 f0		      LDA	Player0SpeedH
    454  f186		       85 b5		      STA	Tmp5
    455  f188		       20 82 f9 	      JSR	UpdateOffsets
    456  f18b
    457  f18b							;LDX Exits the call with correct value.
    458  f18b		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    459  f18d		       85 b3		      STA	Tmp3
    460  f18f		       a5 df		      LDA	Player1SpeedL
    461  f191		       85 b4		      STA	Tmp4
    462  f193		       a5 f1		      LDA	Player1SpeedH
    463  f195		       85 b5		      STA	Tmp5
    464  f197		       20 82 f9 	      JSR	UpdateOffsets
    465  f19a
    466  f19a				   CallProcessOpponentLine
    467  f19a		       20 35 f8 	      JSR	ProcessOpponentLineAndPlayerSprite
    468  f19d
    469  f19d				   SkipUpdateLogic		; Continue here if not paused
    470  f19d
    471  f19d				   CallCalculateGear
    472  f19d		       a2 00		      LDX	#0
    473  f19f		       20 ce fa 	      JSR	CalculateGear
    474  f1a2		       e8		      INX
    475  f1a3		       20 ce fa 	      JSR	CalculateGear
    476  f1a6
    477  f1a6				   CallProcessFontColor
    478  f1a6		       a5 8c		      LDA	FrameCount0
    479  f1a8		       29 01		      AND	#%00000001
    480  f1aa		       d0 11		      BNE	ContinueProcessFontColorPlayer0	; Not my frame, always process!
    481  f1ac		       ad 82 02 	      LDA	SWCHB	; Rubber Band Switch
    482  f1af		       29 08		      AND	#%00001000
    483  f1b1		       f0 0a		      BEQ	ContinueProcessFontColorPlayer0
    484  f1b3		       a5 f2		      LDA	IsOpponentInFront
    485  f1b5		       f0 06		      BEQ	ContinueProcessFontColorPlayer0	; Oponent not in front
    486  f1b7		       a5 c9		      LDA	ScoreFontColor
    487  f1b9		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    488  f1bb		       f0 1c		      BEQ	ContinueProcessFontColorPlayer1	; Opponent is in front! Skip counting checkpoint for the frame (double time)
    489  f1bd				   ContinueProcessFontColorPlayer0
    490  f1bd		       a2 00		      LDX	#0
    491  f1bf		       20 db fa 	      JSR	ProcessScoreFontColor
    492  f1c2				   ContinueProcessIsToUpdateColorPlayer1
    493  f1c2		       a5 8c		      LDA	FrameCount0
    494  f1c4		       29 01		      AND	#%00000001
    495  f1c6		       f0 11		      BEQ	ContinueProcessFontColorPlayer1	; Not my frame, always process!
    496  f1c8		       ad 82 02 	      LDA	SWCHB	; Rubber Band Switch
    497  f1cb		       29 08		      AND	#%00001000
    498  f1cd		       f0 0a		      BEQ	ContinueProcessFontColorPlayer1
    499  f1cf		       a5 f2		      LDA	IsOpponentInFront
    500  f1d1		       f0 06		      BEQ	ContinueProcessFontColorPlayer1	; Oponent not in front
    501  f1d3		       a5 ca		      LDA	OpScoreFontColor
    502  f1d5		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    503  f1d7		       f0 05		      BEQ	SkipProcessFontColor	; Opponent is in front and is checkpoint Skip counting checkpoint for the frame (double time)
    504  f1d9				   ContinueProcessFontColorPlayer1
    505  f1d9		       a2 01		      LDX	#1
    506  f1db		       20 db fa 	      JSR	ProcessScoreFontColor
    507  f1de				   SkipProcessFontColor
    508  f1de
    509  f1de				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    510  f1de		       a5 8c		      LDA	FrameCount0
    511  f1e0		       29 01		      AND	#%00000001
    512  f1e2		       d0 0c		      BNE	CallProcessPlayer1Status
    513  f1e4				   CallProcessPlayer0Status
    514  f1e4		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    515  f1e6		       85 b0		      STA	Tmp0
    516  f1e8		       a2 00		      LDX	#0
    517  f1ea		       20 78 fa 	      JSR	ProcessPlayerStatus
    518  f1ed		       4c f9 f1 	      JMP	EndCallProcessPlayerStatus
    519  f1f0				   CallProcessPlayer1Status
    520  f1f0		       a5 a2		      LDA	OpTrafficOffset0 + 2
    521  f1f2		       85 b0		      STA	Tmp0
    522  f1f4		       a2 01		      LDX	#1
    523  f1f6		       20 78 fa 	      JSR	ProcessPlayerStatus
    524  f1f9				   EndCallProcessPlayerStatus
    525  f1f9
    526  f1f9				   CallProcessSound		; We might save cycles by updating one channel per frame.
    527  f1f9		       a2 00		      LDX	#0
    528  f1fb		       a5 92		      LDA	TrafficOffset0 + 2
    529  f1fd		       85 b1		      STA	Tmp1
    530  f1ff		       20 1a f6 	      JSR	ProcessSound
    531  f202		       e8		      INX		; Player 1
    532  f203		       a5 a2		      LDA	OpTrafficOffset0 + 2
    533  f205		       85 b1		      STA	Tmp1
    534  f207		       20 1a f6 	      JSR	ProcessSound
    535  f20a
    536  f20a				   ChooseTextSide		; 
    537  f20a		       a5 8c		      LDA	FrameCount0	;3
    538  f20c		       29 01		      AND	#%00000001
    539  f20e		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    540  f210		       4c bd f2 	      JMP	RightScoreWrite
    541  f213
    542  f213				   LeftScoreWrite
    543  f213		       a5 bd		      LDA	GameStatus
    544  f215		       f0 11		      BEQ	PrintHellwayLeft
    545  f217		       a5 c9		      LDA	ScoreFontColor
    546  f219		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    547  f21b		       f0 42		      BEQ	PrintPlayer0Checkpoint
    548  f21d		       c9 38		      CMP	#SCORE_FONT_COLOR_START
    549  f21f		       f0 46		      BEQ	PrintPlayer0StartGame
    550  f221		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    551  f223		       f0 29		      BEQ	ProcessPlayer0OverText
    552  f225				   ContinueP0Score
    553  f225		       4c 76 f2 	      JMP	Digit0Timer
    554  f228
    555  f228				   PrintHellwayLeft
    556  f228		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    557  f22a		       30 08		      BMI	ContinueWithDefaultLeftText
    558  f22c				   Player0IsReady
    559  f22c		       a2 25		      LDX	#<ReadyText
    560  f22e		       20 66 f7 	      JSR	PrintStaticText
    561  f231		       4c 72 f3 	      JMP	RightScoreWriteEnd	;3
    562  f234				   ContinueWithDefaultLeftText
    563  f234		       a5 8d		      LDA	FrameCount1
    564  f236		       29 01		      AND	#1
    565  f238		       d0 05		      BNE	PrintCreditsLeft
    566  f23a		       a2 03		      LDX	#<HellwayLeftText - 1	; Padding
    567  f23c		       4c 41 f2 	      JMP	PrintGameMode
    568  f23f				   PrintCreditsLeft
    569  f23f		       a2 0c		      LDX	#<OpbText - 1	; Padding
    570  f241
    571  f241				   PrintGameMode
    572  f241		       20 66 f7 	      JSR	PrintStaticText
    573  f244		       a6 c6		      LDX	GameMode
    574  f246		       bd 6c fc 	      LDA	FontLookup,X	;4 
    575  f249		       85 d0		      STA	ScoreD0	;3
    576  f24b		       4c 72 f3 	      JMP	RightScoreWriteEnd	;3
    577  f24e
    578  f24e				   ProcessPlayer0OverText
    579  f24e		       a5 f2		      LDA	IsOpponentInFront
    580  f250		       30 05		      BMI	PrintPlayer0Lose
    581  f252				   PrintPlayer0Win
    582  f252		       a2 1a		      LDX	#<WinText
    583  f254		       4c 59 f2 	      JMP	PrintPlayer0Status
    584  f257				   PrintPlayer0Lose
    585  f257		       a2 1d		      LDX	#<LoseText
    586  f259				   PrintPlayer0Status
    587  f259		       20 66 f7 	      JSR	PrintStaticText
    588  f25c		       4c 96 f2 	      JMP	DistanceCheckpointCount	;3
    589  f25f
    590  f25f				   PrintPlayer0Checkpoint
    591  f25f		       a2 00		      LDX	#<CheckpointText
    592  f261		       20 66 f7 	      JSR	PrintStaticText
    593  f264		       4c 6c f2 	      JMP	PrintPlayer0ScoreHoldChange	;3
    594  f267
    595  f267				   PrintPlayer0StartGame
    596  f267		       a2 16		      LDX	#<GoText
    597  f269		       20 66 f7 	      JSR	PrintStaticText
    598  f26c
    599  f26c				   PrintPlayer0ScoreHoldChange
    600  f26c		       a2 00		      LDX	#0
    601  f26e		       20 eb fa 	      JSR	PrintScoreHoldChange
    602  f271		       85 d4		      STA	ScoreD4
    603  f273		       4c 72 f3 	      JMP	RightScoreWriteEnd	;3
    604  f276
    605  f276				   Digit0Timer
    606  f276		       a5 b8		      LDA	CountdownTimer	;3
    607  f278		       85 b0		      STA	Tmp0
    608  f27a		       20 0f f8 	      JSR	BINBCD8
    609  f27d							; LDA Tmp1 Also returned in A
    610  f27d		       29 0f		      AND	#%00001111	;2
    611  f27f		       aa		      TAX		; 2
    612  f280		       bd 6c fc 	      LDA	FontLookup,X	;4 
    613  f283		       85 d1		      STA	ScoreD1	;3
    614  f285
    615  f285				   Digit1Timer
    616  f285		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    617  f287		       4a		      LSR		; 2
    618  f288		       4a		      LSR		; 2
    619  f289		       4a		      LSR		; 2
    620  f28a		       4a		      LSR		; 2
    621  f28b		       aa		      TAX		; 2
    622  f28c		       bd 6c fc 	      LDA	FontLookup,X	;4
    623  f28f		       85 d0		      STA	ScoreD0	;3
    624  f291
    625  f291				   SpeedBar
    626  f291		       a2 00		      LDX	#0
    627  f293		       20 f6 fa 	      JSR	PrintSpeedBar
    628  f296
    629  f296				   DistanceCheckpointCount		; Will run all letters in the future
    630  f296		       a5 ba		      LDA	Traffic0Msb
    631  f298		       29 01		      AND	#%00000001
    632  f29a		       0a		      ASL
    633  f29b		       0a		      ASL
    634  f29c		       0a		      ASL
    635  f29d		       0a		      ASL
    636  f29e		       85 b0		      STA	Tmp0
    637  f2a0		       a5 92		      LDA	TrafficOffset0 + 2	;3
    638  f2a2		       29 f0		      AND	#%11110000	;2
    639  f2a4		       4a		      LSR
    640  f2a5		       4a		      LSR
    641  f2a6		       4a		      LSR
    642  f2a7		       4a		      LSR
    643  f2a8		       05 b0		      ORA	Tmp0
    644  f2aa		       aa		      TAX		; 2
    645  f2ab		       bd 6c fc 	      LDA	FontLookup,X	;4 
    646  f2ae		       85 d3		      STA	ScoreD3	;3
    647  f2b0
    648  f2b0				   DistanceBar		; 16 subdivisions per checkpoint
    649  f2b0		       a5 92		      LDA	TrafficOffset0 + 2	;3
    650  f2b2		       29 0f		      AND	#%00001111	;2
    651  f2b4		       aa		      TAX		; 2
    652  f2b5		       bd 8c fc 	      LDA	BarLookup,X	;4 
    653  f2b8		       85 d4		      STA	ScoreD4	;3
    654  f2ba
    655  f2ba				   EndDrawDistance
    656  f2ba		       4c 72 f3 	      JMP	RightScoreWriteEnd	;3
    657  f2bd
    658  f2bd				   RightScoreWrite
    659  f2bd		       a5 bd		      LDA	GameStatus
    660  f2bf		       f0 11		      BEQ	PrintHellwayRight
    661  f2c1		       a5 ca		      LDA	OpScoreFontColor
    662  f2c3		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    663  f2c5		       f0 50		      BEQ	PrintPlayer1Checkpoint
    664  f2c7		       c9 c8		      CMP	#OP_SCORE_FONT_COLOR_START
    665  f2c9		       f0 54		      BEQ	PrintPlayer1StartGame
    666  f2cb		       c9 ab		      CMP	#OP_SCORE_FONT_COLOR_OVER
    667  f2cd		       f0 37		      BEQ	ProcessPlayer1OverText
    668  f2cf				   ContinueP1Score
    669  f2cf		       4c 2e f3 	      JMP	OpDigit0Timer
    670  f2d2
    671  f2d2				   PrintHellwayRight
    672  f2d2		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    673  f2d4		       30 08		      BMI	ContinueWithDefaultRightText
    674  f2d6				   Player1IsReady
    675  f2d6		       a2 25		      LDX	#<ReadyText
    676  f2d8		       20 66 f7 	      JSR	PrintStaticText
    677  f2db		       4c 72 f3 	      JMP	RightScoreWriteEnd	;3
    678  f2de				   ContinueWithDefaultRightText
    679  f2de		       a5 8d		      LDA	FrameCount1
    680  f2e0		       29 01		      AND	#1
    681  f2e2		       d0 05		      BNE	PrintCreditsRight
    682  f2e4		       a2 08		      LDX	#<HellwayRightText
    683  f2e6		       4c f5 f2 	      JMP	PrintRightIntro
    684  f2e9				   PrintCreditsRight
    685  f2e9		       a5 8d		      LDA	FrameCount1
    686  f2eb		       29 02		      AND	#%00000010
    687  f2ed		       f0 04		      BEQ	PrintYearText
    688  f2ef				   PrintBuildNumberText
    689  f2ef		       a2 20		      LDX	#<BuildNumberText
    690  f2f1		       d0 02		      BNE	PrintRightIntro	; Save one byte, it will neve be equal in not first text constant...
    691  f2f3				   PrintYearText
    692  f2f3		       a2 11		      LDX	#<YearText
    693  f2f5				   PrintRightIntro
    694  f2f5		       20 66 f7 	      JSR	PrintStaticText
    695  f2f8				   PipeOnRuberBandOff
    696  f2f8		       ad 82 02 	      LDA	SWCHB
    697  f2fb		       29 08		      AND	#%00001000
    698  f2fd		       d0 04		      BNE	EndPrintHellwayRight
    699  f2ff		       a9 ae		      LDA	#<Pipe + FONT_OFFSET
    700  f301		       85 d0		      STA	ScoreD0
    701  f303				   EndPrintHellwayRight
    702  f303		       4c 72 f3 	      JMP	RightScoreWriteEnd
    703  f306
    704  f306				   ProcessPlayer1OverText
    705  f306		       a5 f2		      LDA	IsOpponentInFront
    706  f308		       30 05		      BMI	PrintPlayer1Lose
    707  f30a				   PrintPlayer1Win
    708  f30a		       a2 18		      LDX	#<WinText - 2
    709  f30c		       4c 11 f3 	      JMP	PrintPlayer1Status
    710  f30f				   PrintPlayer1Lose
    711  f30f		       a2 1b		      LDX	#<LoseText - 2
    712  f311				   PrintPlayer1Status
    713  f311		       20 66 f7 	      JSR	PrintStaticText
    714  f314		       4c 4e f3 	      JMP	OpDistanceCheckpointCount
    715  f317
    716  f317				   PrintPlayer1Checkpoint
    717  f317		       a2 ff		      LDX	#<CheckpointText - 1
    718  f319		       20 66 f7 	      JSR	PrintStaticText
    719  f31c		       4c 24 f3 	      JMP	PrintPlayer1ScoreHoldChange	;3
    720  f31f
    721  f31f				   PrintPlayer1StartGame
    722  f31f		       a2 15		      LDX	#<GoText - 1
    723  f321		       20 66 f7 	      JSR	PrintStaticText
    724  f324
    725  f324				   PrintPlayer1ScoreHoldChange
    726  f324		       a2 01		      LDX	#1
    727  f326		       20 eb fa 	      JSR	PrintScoreHoldChange
    728  f329		       85 d0		      STA	ScoreD0
    729  f32b		       4c 72 f3 	      JMP	RightScoreWriteEnd	;3
    730  f32e
    731  f32e				   OpDigit0Timer
    732  f32e		       a5 b9		      LDA	OpCountdownTimer	;3
    733  f330		       85 b0		      STA	Tmp0
    734  f332		       20 0f f8 	      JSR	BINBCD8
    735  f335							; LDA Tmp1 Also returned in A
    736  f335		       29 0f		      AND	#%00001111	;2
    737  f337		       aa		      TAX		; 2
    738  f338		       bd 6c fc 	      LDA	FontLookup,X	;4 
    739  f33b		       85 d4		      STA	ScoreD4	;3
    740  f33d
    741  f33d				   OpDigit1Timer
    742  f33d		       a5 b1		      LDA	Tmp1	;3
    743  f33f		       4a		      LSR		; 2
    744  f340		       4a		      LSR		; 2
    745  f341		       4a		      LSR		; 2
    746  f342		       4a		      LSR		; 2
    747  f343		       aa		      TAX		; 2
    748  f344		       bd 6c fc 	      LDA	FontLookup,X	;4
    749  f347		       85 d3		      STA	ScoreD3	;3
    750  f349
    751  f349				   OpSpeedBar
    752  f349		       a2 01		      LDX	#1
    753  f34b		       20 f6 fa 	      JSR	PrintSpeedBar
    754  f34e
    755  f34e				   OpDistanceCheckpointCount
    756  f34e		       a5 bb		      LDA	OpTraffic0Msb
    757  f350		       29 01		      AND	#%00000001
    758  f352		       0a		      ASL
    759  f353		       0a		      ASL
    760  f354		       0a		      ASL
    761  f355		       0a		      ASL
    762  f356		       85 b0		      STA	Tmp0
    763  f358		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    764  f35a		       29 f0		      AND	#%11110000	;2
    765  f35c		       4a		      LSR
    766  f35d		       4a		      LSR
    767  f35e		       4a		      LSR
    768  f35f		       4a		      LSR
    769  f360		       05 b0		      ORA	Tmp0
    770  f362		       aa		      TAX		; 2
    771  f363		       bd 6c fc 	      LDA	FontLookup,X	;4 
    772  f366		       85 d1		      STA	ScoreD1	;3
    773  f368
    774  f368				   OpDistanceBar		; 16 subdivisions per checkpoint
    775  f368		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    776  f36a		       29 0f		      AND	#%00001111	;2
    777  f36c		       aa		      TAX		; 2
    778  f36d		       bd 8c fc 	      LDA	BarLookup,X	;4 
    779  f370		       85 d0		      STA	ScoreD0	;3
    780  f372
    781  f372				   ScoreWriteEnd
    782  f372				   RightScoreWriteEnd
    783  f372
    784  f372				   ConfigurePFForScore
    785  f372		       20 b8 f6 	      JSR	ClearAll
    786  f375		       a9 02		      LDA	#%00000010	; Score mode
    787  f377		       85 0a		      STA	CTRLPF
    788  f379		       a5 8c		      LDA	FrameCount0	;3
    789  f37b		       29 01		      AND	#%00000001
    790  f37d		       f0 0b		      BEQ	LeftScoreOn	; Half of the screen with the correct colors.
    791  f37f				   RightScoreOn
    792  f37f		       a5 ca		      LDA	OpScoreFontColor
    793  f381		       85 07		      STA	COLUP1
    794  f383		       a9 00		      LDA	#BACKGROUND_COLOR
    795  f385		       85 06		      STA	COLUP0
    796  f387		       4c 92 f3 	      JMP	CallWaitForVblankEnd
    797  f38a				   LeftScoreOn
    798  f38a		       a5 c9		      LDA	ScoreFontColor
    799  f38c		       85 06		      STA	COLUP0
    800  f38e		       a9 00		      LDA	#BACKGROUND_COLOR
    801  f390		       85 07		      STA	COLUP1
    802  f392
    803  f392							; After here we are going to update the screen, No more heavy code
    804  f392				   CallWaitForVblankEnd
    805  f392							;SLEEP 222 ;Force the game to its limits and check if no line count issue.
    806  f392		       20 e0 f7 	      JSR	WaitForVblankEnd
    807  f395
    808  f395				   DrawScoreHud
    809  f395		       20 84 f7 	      JSR	PrintScore
    810  f398
    811  f398							; 4 lines to go crazy
    812  f398		       85 02		      STA	WSYNC
    813  f39a							;STA HMOVE
    814  f39a
    815  f39a		       85 02		      STA	WSYNC
    816  f39c		       85 2a		      STA	HMOVE
    817  f39e
    818  f39e				   PrepareForTraffic
    819  f39e		       20 ce f6 	      JSR	ClearPF	; 32
    820  f3a1
    821  f3a1		       85 02		      STA	WSYNC
    822  f3a3		       85 2a		      STA	HMOVE
    823  f3a5		       85 02		      STA	WSYNC
    824  f3a7		       85 2a		      STA	HMOVE
    825  f3a9
    826  f3a9		       a9 30		      LDA	#%00110000	; 2 Score mode
    827  f3ab		       85 0a		      STA	CTRLPF	;3
    828  f3ad
    829  f3ad		       a5 8c		      LDA	FrameCount0	;3
    830  f3af		       29 01		      AND	#%00000001	;2
    831  f3b1		       aa		      TAX		;2
    832  f3b2		       b5 c2		      LDA	TrafficColor,X	;4
    833  f3b4		       85 08		      STA	COLUPF	;3
    834  f3b6
    835  f3b6		       a9 98		      LDA	#PLAYER1_COLOR	;2
    836  f3b8		       85 07		      STA	COLUP1	;3
    837  f3ba
    838  f3ba		       a5 c9		      LDA	ScoreFontColor	;3
    839  f3bc		       85 06		      STA	COLUP0	;3
    840  f3be
    841  f3be		       a5 ca		      LDA	OpScoreFontColor	;3
    842  f3c0		       85 07		      STA	COLUP1	;3
    843  f3c2
    844  f3c2		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    845  f3c4
    846  f3c4		       a5 8c		      LDA	FrameCount0	;Brach flag
    847  f3c6		       29 01		      AND	#%00000001
    848  f3c8
    849  f3c8		       d0 03		      BNE	OpScanLoop	;2
    850  f3ca		       4c 87 f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    851  f3cd							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    852  f3cd
    853  f3cd							;main scanline loop...
    854  f3cd				   OpScanLoop
    855  f3cd		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    856  f3cf
    857  f3cf		       a5 80		      LDA	GRP0Cache	;3
    858  f3d1		       85 1b		      STA	GRP0	;3
    859  f3d3
    860  f3d3		       a5 84		      LDA	GRP1Cache	;3
    861  f3d5		       85 1c		      STA	GRP1	;3
    862  f3d7
    863  f3d7		       a5 85		      LDA	ENABLCache	;3
    864  f3d9		       85 1f		      STA	ENABL	;3
    865  f3db
    866  f3db		       a5 86		      LDA	ENAM0Cache	;3
    867  f3dd		       85 1d		      STA	ENAM0	;3
    868  f3df
    869  f3df		       a5 87		      LDA	ENAM1Cache	;3
    870  f3e1		       85 1e		      STA	ENAM1	;3
    871  f3e3
    872  f3e3		       a5 81		      LDA	PF0Cache	;3
    873  f3e5		       85 0d		      STA	PF0	;3
    874  f3e7
    875  f3e7		       a9 00		      LDA	#0	;2
    876  f3e9							;STA PF0	     ;3
    877  f3e9		       85 80		      STA	GRP0Cache	;3
    878  f3eb		       85 86		      STA	ENAM0Cache	;3
    879  f3ed		       85 85		      STA	ENABLCache	;3
    880  f3ef		       85 87		      STA	ENAM1Cache	; 3
    881  f3f1							;STA GRP1Cache ;3
    882  f3f1		       85 0d		      STA	PF0	;3
    883  f3f3							;STA PF2	     ;3
    884  f3f3
    885  f3f3		       a5 83		      LDA	PF2Cache	;3
    886  f3f5		       85 0f		      STA	PF2	;3
    887  f3f7
    888  f3f7				   OpDrawCar0
    889  f3f7		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    890  f3f9		       b0 04		      BCS	OpSkipDrawCar	;2
    891  f3fb		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    892  f3fd		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    893  f3ff				   OpSkipDrawCar
    894  f3ff
    895  f3ff							;BEQ DrawTraffic3
    896  f3ff				   OpDrawTraffic1		; 33
    897  f3ff		       98		      TYA		; 2
    898  f400		       18		      CLC		; 2 
    899  f401		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    900  f403		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    901  f405		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    902  f407		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    903  f409		       4c 0e f4 	      JMP	OpAfterEorOffsetWithCarry	; 3
    904  f40c				   OpEorOffsetWithCarry
    905  f40c		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    906  f40e				   OpAfterEorOffsetWithCarry		;17
    907  f40e		       aa		      TAX		;2
    908  f40f		       bd 00 fe 	      LDA	AesTable,X	; 4
    909  f412		       c5 bf		      CMP	OpTrafficChance	;3
    910  f414		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    911  f416		       a9 ff		      LDA	#$FF	;2
    912  f418		       85 86		      STA	ENAM0Cache	;3
    913  f41a				   OpFinishDrawTraffic1
    914  f41a
    915  f41a				   OpErasePF2
    916  f41a		       a9 00		      LDA	#0
    917  f41c		       85 0f		      STA	PF2
    918  f41e
    919  f41e				   OpDrawTraffic2		; 33
    920  f41e		       98		      TYA		; 2
    921  f41f		       18		      CLC		; 2 
    922  f420		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    923  f422		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    924  f424		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    925  f426		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    926  f428		       4c 2d f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    927  f42b				   OpEorOffsetWithCarry2
    928  f42b		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    929  f42d				   OpAfterEorOffsetWithCarry2		;17
    930  f42d		       aa		      TAX		;2
    931  f42e		       bd 00 fe 	      LDA	AesTable,X	; 4
    932  f431		       c5 bf		      CMP	OpTrafficChance	;3
    933  f433		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    934  f435		       a9 02		      LDA	#%00000010	;2
    935  f437		       85 85		      STA	ENABLCache	;3
    936  f439				   OpFinishDrawTraffic2
    937  f439
    938  f439							;STA WSYNC ;65 / 137
    939  f439
    940  f439							; LDA Tmp0 ; Flicker this line if drawing car
    941  f439							; BEQ FinishDrawTraffic4
    942  f439				   OpDrawTraffic3		; 33
    943  f439		       98		      TYA		; 2
    944  f43a		       18		      CLC		; 2 
    945  f43b		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    946  f43d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    947  f43f		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    948  f441		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    949  f443		       4c 48 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    950  f446				   OpEorOffsetWithCarry3
    951  f446		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    952  f448				   OpAfterEorOffsetWithCarry3		;17
    953  f448		       aa		      TAX		;2
    954  f449		       bd 00 fe 	      LDA	AesTable,X	; 4
    955  f44c		       c5 bf		      CMP	OpTrafficChance	;3
    956  f44e		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    957  f450		       a9 02		      LDA	#%00000010	;2
    958  f452		       85 87		      STA	ENAM1Cache
    959  f454				   OpFinishDrawTraffic3
    960  f454
    961  f454				   OpDrawOpponent		;26
    962  f454		       84 b0		      STY	Tmp0	;3
    963  f456		       a4 cf		      LDY	OpponentLine	;3
    964  f458		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    965  f45a		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    966  f45c				   OpDrawOpponentVisible
    967  f45c		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    968  f45e		       85 80		      STA	GRP0Cache	;3
    969  f460		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    970  f462		       a4 b0		      LDY	Tmp0	;3
    971  f464		       4c 78 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    972  f467				   OpSkipDrawOpponent
    973  f467		       c6 cf		      DEC	OpponentLine	;5
    974  f469		       a4 b0		      LDY	Tmp0	;3
    975  f46b
    976  f46b
    977  f46b				   OpDrawTraffic0		; 21 2pe
    978  f46b		       98		      TYA		; 2
    979  f46c		       18		      CLC		; 2 
    980  f46d		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    981  f46f		       29 08		      AND	#%00001000	;2
    982  f471		       f0 05		      BEQ	OpHasNoBorderP0	;3
    983  f473				   OpHasBorderP0
    984  f473		       a9 e0		      LDA	#%11100000	; 2
    985  f475		       4c 7a f4 	      JMP	OpStoreBorderP0	; 3
    986  f478				   OpHasNoBorderP0
    987  f478		       a9 00		      LDA	#0	; 2
    988  f47a				   OpStoreBorderP0
    989  f47a		       85 81		      STA	PF0Cache	; 3
    990  f47c		       85 83		      STA	PF2Cache	; 3
    991  f47e
    992  f47e				   OpSkipDrawTraffic0
    993  f47e
    994  f47e				   OpWhileScanLoop
    995  f47e		       88		      DEY		;2
    996  f47f		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    997  f481		       4c cd f3 	      JMP	OpScanLoop	;3
    998  f484				   OpFinishScanLoop		; 7 209 of 222
    999  f484		       4c 3c f5 	      JMP	FinishScanLoop
   1000  f487
   1001  f487							;main scanline loop...
   1002  f487				   ScanLoop
   1003  f487		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
   1004  f489
   1005  f489		       a5 81		      LDA	PF0Cache	;3
   1006  f48b		       85 0d		      STA	PF0	;3
   1007  f48d
   1008  f48d		       a5 80		      LDA	GRP0Cache	;3
   1009  f48f		       85 1b		      STA	GRP0	;3
   1010  f491
   1011  f491		       a5 84		      LDA	GRP1Cache	;3
   1012  f493		       85 1c		      STA	GRP1	;3
   1013  f495
   1014  f495		       a5 86		      LDA	ENAM0Cache	;3
   1015  f497		       85 1d		      STA	ENAM0	;3
   1016  f499
   1017  f499		       a5 85		      LDA	ENABLCache	;3
   1018  f49b		       85 1f		      STA	ENABL	;3
   1019  f49d
   1020  f49d		       a5 87		      LDA	ENAM1Cache	;3
   1021  f49f		       85 1e		      STA	ENAM1	;3
   1022  f4a1
   1023  f4a1		       a5 83		      LDA	PF2Cache	;3
   1024  f4a3		       85 0f		      STA	PF2	;3
   1025  f4a5
   1026  f4a5		       a9 00		      LDA	#0	;2
   1027  f4a7		       85 0d		      STA	PF0	;3
   1028  f4a9		       85 84		      STA	GRP1Cache	;3
   1029  f4ab		       85 85		      STA	ENABLCache	;3
   1030  f4ad		       85 86		      STA	ENAM0Cache	;3
   1031  f4af		       85 87		      STA	ENAM1Cache	; 3
   1032  f4b1							;STA GRP0Cache
   1033  f4b1		       85 0f		      STA	PF2	;3
   1034  f4b3
   1035  f4b3				   DrawCar0
   1036  f4b3		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1037  f4b5		       b0 04		      BCS	SkipDrawCar	;2
   1038  f4b7		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1039  f4b9		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1040  f4bb				   SkipDrawCar
   1041  f4bb
   1042  f4bb							;BEQ DrawTraffic3
   1043  f4bb				   DrawTraffic1 		; 33
   1044  f4bb		       98		      TYA		; 2
   1045  f4bc		       18		      CLC		; 2 
   1046  f4bd		       65 95		      ADC	TrafficOffset1 + 1	;3
   1047  f4bf		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1048  f4c1		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1049  f4c3		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1050  f4c5		       4c ca f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1051  f4c8				   EorOffsetWithCarry
   1052  f4c8		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1053  f4ca				   AfterEorOffsetWithCarry		;17
   1054  f4ca		       aa		      TAX		;2
   1055  f4cb		       bd 00 fe 	      LDA	AesTable,X	; 4
   1056  f4ce		       c5 be		      CMP	TrafficChance	;3
   1057  f4d0		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1058  f4d2		       a9 ff		      LDA	#$FF	;2
   1059  f4d4		       85 86		      STA	ENAM0Cache	;3
   1060  f4d6				   FinishDrawTraffic1
   1061  f4d6
   1062  f4d6				   DrawTraffic2 		; 33
   1063  f4d6		       98		      TYA		; 2
   1064  f4d7		       18		      CLC		; 2 
   1065  f4d8		       65 99		      ADC	TrafficOffset2 + 1	;3
   1066  f4da		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1067  f4dc		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1068  f4de		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1069  f4e0		       4c e5 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1070  f4e3				   EorOffsetWithCarry2
   1071  f4e3		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1072  f4e5				   AfterEorOffsetWithCarry2		;17
   1073  f4e5		       aa		      TAX		;2
   1074  f4e6		       bd 00 fe 	      LDA	AesTable,X	; 4
   1075  f4e9		       c5 be		      CMP	TrafficChance	;3
   1076  f4eb		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1077  f4ed		       a9 02		      LDA	#%00000010	;2
   1078  f4ef		       85 85		      STA	ENABLCache	;3
   1079  f4f1				   FinishDrawTraffic2
   1080  f4f1
   1081  f4f1							;STA WSYNC ;65 / 137
   1082  f4f1
   1083  f4f1							; LDA Tmp0 ; Flicker this line if drawing car
   1084  f4f1							; BEQ FinishDrawTraffic4
   1085  f4f1				   DrawTraffic3 		; 33
   1086  f4f1		       98		      TYA		; 2
   1087  f4f2		       18		      CLC		; 2 
   1088  f4f3		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1089  f4f5		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1090  f4f7		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1091  f4f9		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1092  f4fb		       4c 00 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1093  f4fe				   EorOffsetWithCarry3
   1094  f4fe		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1095  f500				   AfterEorOffsetWithCarry3		;17
   1096  f500		       aa		      TAX		;2
   1097  f501		       bd 00 fe 	      LDA	AesTable,X	; 4
   1098  f504		       c5 be		      CMP	TrafficChance	;3
   1099  f506		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1100  f508		       a9 02		      LDA	#%00000010	;2
   1101  f50a		       85 87		      STA	ENAM1Cache
   1102  f50c				   FinishDrawTraffic3
   1103  f50c
   1104  f50c
   1105  f50c				   DrawOpponent 		;26
   1106  f50c		       84 b0		      STY	Tmp0	;3
   1107  f50e		       a4 cf		      LDY	OpponentLine	;3
   1108  f510		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1109  f512		       b0 0b		      BCS	SkipDrawOpponent	;2
   1110  f514				   DrawOpponentVisible
   1111  f514		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1112  f516		       85 84		      STA	GRP1Cache	;3
   1113  f518		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1114  f51a		       a4 b0		      LDY	Tmp0	;3
   1115  f51c		       4c 30 f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1116  f51f				   SkipDrawOpponent
   1117  f51f		       c6 cf		      DEC	OpponentLine	;5
   1118  f521		       a4 b0		      LDY	Tmp0	;3
   1119  f523
   1120  f523				   DrawTraffic0 		; 21 2pe
   1121  f523		       98		      TYA		; 2
   1122  f524		       18		      CLC		; 2 
   1123  f525		       65 91		      ADC	TrafficOffset0 + 1	;3
   1124  f527		       29 08		      AND	#%00001000	;2
   1125  f529		       f0 05		      BEQ	HasNoBorderP0	;3
   1126  f52b				   HasBorderP0
   1127  f52b		       a9 e0		      LDA	#%11100000	; 2
   1128  f52d		       4c 32 f5 	      JMP	StoreBorderP0	; 3
   1129  f530				   HasNoBorderP0
   1130  f530		       a9 00		      LDA	#0	; 2
   1131  f532				   StoreBorderP0
   1132  f532		       85 81		      STA	PF0Cache	; 3
   1133  f534		       85 83		      STA	PF2Cache	; 3
   1134  f536
   1135  f536				   SkipDrawTraffic0
   1136  f536
   1137  f536				   WhileScanLoop
   1138  f536		       88		      DEY		;2
   1139  f537		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1140  f539		       4c 87 f4 	      JMP	ScanLoop	;3
   1141  f53c				   FinishScanLoop		; 7 209 of 222
   1142  f53c
   1143  f53c		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1144  f53e		       20 dd f6 	      JSR	LoadAll
   1145  f541		       85 02		      STA	WSYNC	; do stuff!
   1146  f543		       85 02		      STA	WSYNC
   1147  f545		       85 02		      STA	WSYNC
   1148  f547
   1149  f547				   PrepareOverscan
   1150  f547		       a9 02		      LDA	#2
   1151  f549		       85 02		      STA	WSYNC
   1152  f54b							;STA HMOVE	; HMOVE 10
   1153  f54b		       85 01		      STA	VBLANK
   1154  f54d
   1155  f54d		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1156  f54f		       8d 96 02 	      STA	TIM64T
   1157  f552
   1158  f552		       85 2b		      STA	HMCLR	; Before we process car movement
   1159  f554							;Read Fire Button before, will make it start the game for now.
   1160  f554				   StartGame
   1161  f554		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1162  f556		       25 0d		      AND	INPT5	;3 player 1
   1163  f558		       30 3c		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1164  f55a		       a5 8c		      LDA	FrameCount0
   1165  f55c		       29 01		      AND	#%00000001
   1166  f55e		       d0 36		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1167  f560		       a5 bd		      LDA	GameStatus	;3
   1168  f562		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1169  f564		       d0 30		      BNE	SkipGameStart
   1170  f566		       a5 c6		      LDA	GameMode
   1171  f568		       c9 10		      CMP	#MAX_GAME_MODE
   1172  f56a		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1173  f56c		       a9 00		      LDA	#0
   1174  f56e		       85 c6		      STA	GameMode
   1175  f570		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1176  f572		       85 bc		      STA	SwitchDebounceCounter
   1177  f574		       4c 96 f5 	      JMP	SkipGameStart
   1178  f577				   SetGameRunningIfBothPressing
   1179  f577		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1180  f579		       05 0d		      ORA	INPT5	;3 player 1
   1181  f57b		       30 19		      BMI	SkipGameStart
   1182  f57d				   SetGameRunning
   1183  f57d		       e6 bd		      INC	GameStatus
   1184  f57f		       a9 00		      LDA	#0	;
   1185  f581		       85 8c		      STA	FrameCount0
   1186  f583		       85 8d		      STA	FrameCount1
   1187  f585		       a9 38		      LDA	#SCORE_FONT_COLOR_START
   1188  f587		       85 c9		      STA	ScoreFontColor
   1189  f589		       a9 c8		      LDA	#OP_SCORE_FONT_COLOR_START
   1190  f58b		       85 ca		      STA	OpScoreFontColor
   1191  f58d		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1192  f58f		       85 cb		      STA	ScoreFontColorHoldChange
   1193  f591		       85 cc		      STA	OpScoreFontColorHoldChange
   1194  f593		       4c 0a f6 	      JMP	OverScanWait	; Do not process player movement and also start
   1195  f596				   SkipGameStart
   1196  f596
   1197  f596				   ReadSwitches
   1198  f596		       a6 bc		      LDX	SwitchDebounceCounter
   1199  f598		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1200  f59a		       a9 01		      LDA	#%00000001
   1201  f59c		       2c 82 02 	      BIT	SWCHB
   1202  f59f		       d0 07		      BNE	SkipReset
   1203  f5a1		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1204  f5a3		       85 bc		      STA	SwitchDebounceCounter
   1205  f5a5		       4c 12 f6 	      JMP	OverScanWaitBeforeReset
   1206  f5a8				   SkipReset
   1207  f5a8
   1208  f5a8				   GameModeSelect
   1209  f5a8		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1210  f5aa		       d0 22		      BNE	SkipGameSelect
   1211  f5ac		       a2 00		      LDX	#0
   1212  f5ae		       20 09 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1213  f5b1		       e8		      INX
   1214  f5b2		       20 09 f7 	      JSR	ConfigureDifficulty
   1215  f5b5				   ContinueGameSelect
   1216  f5b5		       a9 02		      LDA	#%00000010
   1217  f5b7		       2c 82 02 	      BIT	SWCHB
   1218  f5ba		       d0 12		      BNE	SkipGameSelect
   1219  f5bc		       a6 c6		      LDX	GameMode
   1220  f5be		       e0 10		      CPX	#MAX_GAME_MODE
   1221  f5c0		       f0 04		      BEQ	ResetGameMode
   1222  f5c2		       e8		      INX
   1223  f5c3		       4c c8 f5 	      JMP	StoreGameMode
   1224  f5c6				   ResetGameMode
   1225  f5c6		       a2 00		      LDX	#0
   1226  f5c8				   StoreGameMode
   1227  f5c8		       86 c6		      STX	GameMode
   1228  f5ca		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1229  f5cc		       85 bc		      STA	SwitchDebounceCounter
   1230  f5ce				   SkipGameSelect
   1231  f5ce		       4c d3 f5 	      JMP	EndReadSwitches
   1232  f5d1				   DecrementSwitchDebounceCounter
   1233  f5d1		       c6 bc		      DEC	SwitchDebounceCounter
   1234  f5d3				   EndReadSwitches
   1235  f5d3
   1236  f5d3				   DoNotTurnBeforeStart
   1237  f5d3							;STA HMCLR
   1238  f5d3		       a5 bd		      LDA	GameStatus
   1239  f5d5		       f0 33		      BEQ	OverScanWait
   1240  f5d7
   1241  f5d7							; Last thing, will overrride hmove
   1242  f5d7				   CallTestColisionAndMove
   1243  f5d7		       a2 00		      LDX	#0	; Player 0
   1244  f5d9							; Colision with traffic, each player check different flags,
   1245  f5d9		       a5 8c		      LDA	FrameCount0
   1246  f5db		       29 01		      AND	#%00000001
   1247  f5dd		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1248  f5df		       20 ec f8 	      JSR	IsOpponentColliding
   1249  f5e2		       05 01		      ORA	CXM1P
   1250  f5e4		       4a		      LSR
   1251  f5e5		       05 00		      ORA	CXM0P
   1252  f5e7		       05 02		      ORA	CXP0FB
   1253  f5e9							; ORA CXPPMM ; Collision between players will have its own rules
   1254  f5e9				   SkipColisionPlayer0		; Should not colide on opponent side.
   1255  f5e9		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1256  f5eb		       85 b2		      STA	Tmp2
   1257  f5ed		       20 00 f9 	      JSR	TestCollisionAndMove
   1258  f5f0
   1259  f5f0		       e8		      INX		; player 1
   1260  f5f1		       a5 8c		      LDA	FrameCount0
   1261  f5f3		       29 01		      AND	#%00000001
   1262  f5f5		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1263  f5f7		       20 ec f8 	      JSR	IsOpponentColliding
   1264  f5fa		       05 00		      ORA	CXM0P
   1265  f5fc		       4a		      LSR
   1266  f5fd		       05 01		      ORA	CXM1P
   1267  f5ff		       05 03		      ORA	CXP1FB
   1268  f601				   SkipColisionPlayer1
   1269  f601		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1270  f603		       85 b2		      STA	Tmp2
   1271  f605		       20 00 f9 	      JSR	TestCollisionAndMove
   1272  f608
   1273  f608				   ClearCollision
   1274  f608		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1275  f60a
   1276  f60a				   OverScanWait
   1277  f60a		       ad 84 02 	      LDA	INTIM
   1278  f60d		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1279  f60f		       4c d8 f0 	      JMP	MainLoop
   1280  f612
   1281  f612				   OverScanWaitBeforeReset
   1282  f612		       ad 84 02 	      LDA	INTIM
   1283  f615		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1284  f617		       4c 14 f0 	      JMP	Start
   1285  f61a
   1286  f61a				   Subroutines
   1287  f61a
   1288  f61a							;X Player
   1289  f61a							;Tmp1 TrafficOffset 2
   1290  f61a				   ProcessSound
   1291  f61a				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1292  f61a		       b5 c9		      LDA	ScoreFontColor,X	;3
   1293  f61c		       dd b7 fc 	      CMP	PlayerToScoreOverColor,X	;2
   1294  f61f		       f0 6f		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1295  f621		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X	;2
   1296  f624		       f0 2d		      BEQ	PlayCheckpoint	;2
   1297  f626		       b5 8e		      LDA	CollisionCounter,X	;3
   1298  f628		       c9 e0		      CMP	#$E0	;2
   1299  f62a		       b0 18		      BCS	PlayColision	;2
   1300  f62c		       b5 cd		      LDA	NextCheckpoint,X	;3
   1301  f62e		       38		      SEC		;2
   1302  f62f		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1303  f631		       c9 02		      CMP	#$02	;2
   1304  f633		       90 30		      BCC	PlayBeforeCheckpoint	;4
   1305  f635		       b5 b8		      LDA	CountdownTimer,X	; 3
   1306  f637		       f0 57		      BEQ	EngineSound	;2
   1307  f639		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1308  f63b		       90 3b		      BCC	PlayWarnTimeEnding	;4
   1309  f63d		       a5 bd		      LDA	GameStatus	; Mute while game not running
   1310  f63f		       d0 4f		      BNE	EngineSound
   1311  f641		       4c b3 f6 	      JMP	MuteSound	;3
   1312  f644				   PlayColision
   1313  f644		       a9 1f		      LDA	#31
   1314  f646		       95 17		      STA	AUDF0,X
   1315  f648		       a9 08		      LDA	#8
   1316  f64a		       95 15		      STA	AUDC0,X
   1317  f64c		       a9 08		      LDA	#8
   1318  f64e		       95 19		      STA	AUDV0,X
   1319  f650		       4c b7 f6 	      JMP	EndSound
   1320  f653
   1321  f653				   PlayCheckpoint
   1322  f653		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1323  f655		       4a		      LSR		;2
   1324  f656		       4a		      LSR		;2
   1325  f657		       4a		      LSR		;2
   1326  f658		       95 17		      STA	AUDF0,X	;3
   1327  f65a		       a9 0c		      LDA	#12	;2
   1328  f65c		       95 15		      STA	AUDC0,X	;3
   1329  f65e		       a9 06		      LDA	#6	;2
   1330  f660		       95 19		      STA	AUDV0,X	;3
   1331  f662		       4c b7 f6 	      JMP	EndSound	;3
   1332  f665
   1333  f665				   PlayBeforeCheckpoint
   1334  f665		       a5 8c		      LDA	FrameCount0	;3
   1335  f667		       29 1c		      AND	#%00011100	;2
   1336  f669		       09 03		      ORA	#%00000011	;2
   1337  f66b		       95 17		      STA	AUDF0,X	;3
   1338  f66d		       a9 0c		      LDA	#12	;2
   1339  f66f		       95 15		      STA	AUDC0,X	;3
   1340  f671		       a9 03		      LDA	#3	;2
   1341  f673		       95 19		      STA	AUDV0,X	;3
   1342  f675		       4c b7 f6 	      JMP	EndSound	;3
   1343  f678
   1344  f678				   PlayWarnTimeEnding
   1345  f678		       a5 8c		      LDA	FrameCount0	;3
   1346  f67a		       29 04		      AND	#%00000100	;2
   1347  f67c		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1348  f67e		       18		      CLC		;2
   1349  f67f		       a9 0a		      LDA	#10	;2
   1350  f681		       75 b8		      ADC	CountdownTimer,X	;2
   1351  f683		       95 17		      STA	AUDF0,X	;3
   1352  f685		       a9 0c		      LDA	#12	;2
   1353  f687		       95 15		      STA	AUDC0,X	;3
   1354  f689		       a9 03		      LDA	#3	;2
   1355  f68b		       95 19		      STA	AUDV0,X	;3
   1356  f68d		       4c b7 f6 	      JMP	EndSound	;3
   1357  f690
   1358  f690				   EngineSound		;41
   1359  f690		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1360  f692		       95 19		      STA	AUDV0,X
   1361  f694		       b5 b8		      LDA	CountdownTimer,X	;3
   1362  f696		       f0 1b		      BEQ	EngineOff	;2
   1363  f698		       b4 d5		      LDY	Gear,X
   1364  f69a		       b5 de		      LDA	Player0SpeedL,X	;3
   1365  f69c		       4a		      LSR		;2
   1366  f69d		       4a		      LSR		;2
   1367  f69e		       4a		      LSR		;2
   1368  f69f		       29 0f		      AND	#%00001111	;2
   1369  f6a1		       85 b0		      STA	Tmp0	;3
   1370  f6a3		       b9 30 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1371  f6a6		       38		      SEC		;2
   1372  f6a7		       e5 b0		      SBC	Tmp0	;3
   1373  f6a9		       95 17		      STA	AUDF0,X	;3
   1374  f6ab		       b9 2a ff 	      LDA	EngineSoundType,Y	;4
   1375  f6ae		       95 15		      STA	AUDC0,X	;3
   1376  f6b0		       4c b7 f6 	      JMP	EndEngineSound	;3
   1377  f6b3				   EngineOff
   1378  f6b3				   MuteSound
   1379  f6b3		       a9 00		      LDA	#0
   1380  f6b5		       95 15		      STA	AUDC0,X
   1381  f6b7				   EndEngineSound
   1382  f6b7				   EndSound
   1383  f6b7		       60		      RTS
   1384  f6b8
   1385  f6b8				   ClearAll		; 58
   1386  f6b8		       a9 00		      LDA	#0	;2
   1387  f6ba		       85 1b		      STA	GRP0	;3
   1388  f6bc		       85 1c		      STA	GRP1	;3
   1389  f6be		       85 1f		      STA	ENABL	;3
   1390  f6c0		       85 1d		      STA	ENAM0	;3
   1391  f6c2		       85 1e		      STA	ENAM1	;3
   1392  f6c4		       85 80		      STA	GRP0Cache	;3
   1393  f6c6		       85 84		      STA	GRP1Cache	;3
   1394  f6c8		       85 85		      STA	ENABLCache	;3
   1395  f6ca		       85 86		      STA	ENAM0Cache	;3
   1396  f6cc		       85 87		      STA	ENAM1Cache	;3
   1397  f6ce
   1398  f6ce				   ClearPF		; 26
   1399  f6ce		       a9 00		      LDA	#0	;2
   1400  f6d0				   ClearPFSkipLDA0
   1401  f6d0		       85 0d		      STA	PF0	;3
   1402  f6d2		       85 0e		      STA	PF1	;3
   1403  f6d4		       85 0f		      STA	PF2	;3	
   1404  f6d6		       85 81		      STA	PF0Cache	;3
   1405  f6d8		       85 82		      STA	PF1Cache	;3
   1406  f6da		       85 83		      STA	PF2Cache	;3 
   1407  f6dc		       60		      RTS		;6
   1408  f6dd				   EndClearAll
   1409  f6dd
   1410  f6dd				   LoadAll		; 48
   1411  f6dd		       a5 81		      LDA	PF0Cache	;3
   1412  f6df		       85 0d		      STA	PF0	;3
   1413  f6e1
   1414  f6e1		       a5 82		      LDA	PF1Cache	;3
   1415  f6e3		       85 0e		      STA	PF1	;3
   1416  f6e5
   1417  f6e5		       a5 83		      LDA	PF2Cache	;3
   1418  f6e7		       85 0f		      STA	PF2	;3
   1419  f6e9
   1420  f6e9		       a5 84		      LDA	GRP1Cache	;3
   1421  f6eb		       85 1c		      STA	GRP1	;3
   1422  f6ed
   1423  f6ed		       a5 85		      LDA	ENABLCache	;3
   1424  f6ef		       85 1f		      STA	ENABL	;3
   1425  f6f1
   1426  f6f1		       a5 86		      LDA	ENAM0Cache	;3
   1427  f6f3		       85 1d		      STA	ENAM0	;3
   1428  f6f5
   1429  f6f5		       a5 87		      LDA	ENAM1Cache	;3
   1430  f6f7		       85 1e		      STA	ENAM1	;3
   1431  f6f9
   1432  f6f9		       60		      RTS		;6
   1433  f6fa				   EndLoadAll
   1434  f6fa
   1435  f6fa				   NextDifficulty		;Is a SBR
   1436  f6fa		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1437  f6fc		       29 01		      AND	#%00000001
   1438  f6fe		       d0 24		      BNE	CheckRandomDifficulty
   1439  f700
   1440  f700		       b5 c4		      LDA	CurrentDifficulty,X
   1441  f702		       18		      CLC
   1442  f703		       69 01		      ADC	#1
   1443  f705		       29 03		      AND	#%00000011	; 0 to 3
   1444  f707		       95 c4		      STA	CurrentDifficulty,X
   1445  f709
   1446  f709				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1447  f709		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1448  f70b		       b9 b9 ff 	      LDA	TrafficChanceTable,Y
   1449  f70e		       95 be		      STA	TrafficChance,X
   1450  f710		       b9 b5 ff 	      LDA	TrafficColorTable,Y
   1451  f713		       95 c2		      STA	TrafficColor,X
   1452  f715
   1453  f715		       a5 c6		      LDA	GameMode	;
   1454  f717		       29 01		      AND	#%00000001
   1455  f719		       f0 03		      BEQ	UseNextDifficultyTime
   1456  f71b		       4c 1f f7 	      JMP	StoreDifficultyTime
   1457  f71e				   UseNextDifficultyTime
   1458  f71e		       c8		      INY
   1459  f71f				   StoreDifficultyTime
   1460  f71f		       b9 bd ff 	      LDA	TrafficTimeTable,Y
   1461  f722		       95 c0		      STA	CheckpointTime,X
   1462  f724
   1463  f724				   CheckRandomDifficulty
   1464  f724		       a5 c6		      LDA	GameMode
   1465  f726		       29 08		      AND	#%00001000	; Random difficulties
   1466  f728		       f0 26		      BEQ	ReturnFromNextDifficulty
   1467  f72a				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1468  f72a		       a5 f2		      LDA	IsOpponentInFront
   1469  f72c		       30 12		      BMI	UseOpponentChance
   1470  f72e		       a5 cf		      LDA	OpponentLine	; Same line
   1471  f730		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1472  f732		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1473  f734		       a4 8c		      LDY	FrameCount0
   1474  f736		       b9 00 fe 	      LDA	AesTable,Y
   1475  f739							;EOR TrafficChance, no need, lets make life simple
   1476  f739		       29 3f		      AND	#%00111111
   1477  f73b		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1478  f73d		       4c 50 f7 	      JMP	ReturnFromNextDifficulty
   1479  f740				   UseOpponentChance
   1480  f740		       8a		      TXA
   1481  f741		       49 01		      EOR	#%00000001	; Reverts the player
   1482  f743		       aa		      TAX
   1483  f744		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1484  f746		       85 b3		      STA	Tmp3
   1485  f748		       8a		      TXA
   1486  f749		       49 01		      EOR	#%00000001	; Restors the player
   1487  f74b		       aa		      TAX
   1488  f74c		       a5 b3		      LDA	Tmp3
   1489  f74e		       95 be		      STA	TrafficChance,X
   1490  f750
   1491  f750				   ReturnFromNextDifficulty
   1492  f750		       60		      RTS
   1493  f751
   1494  f751				   DefaultOffsets
   1495  f751		       a9 20		      LDA	#$20
   1496  f753		       85 96		      STA	TrafficOffset1 + 2
   1497  f755		       85 a6		      STA	OpTrafficOffset1 + 2
   1498  f757		       a9 40		      LDA	#$40
   1499  f759		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1500  f75b		       85 aa		      STA	OpTrafficOffset2 + 2
   1501  f75d		       a9 60		      LDA	#$60
   1502  f75f		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1503  f761		       85 ae		      STA	OpTrafficOffset3 + 2
   1504  f763		       a9 80		      LDA	#$80
   1505  f765		       60		      RTS
   1506  f766
   1507  f766				   PrintStaticText		; Preload X with the offset referent to StaticText
   1508  f766		       bd 00 ff 	      LDA	StaticText,X
   1509  f769		       85 d0		      STA	ScoreD0
   1510  f76b		       e8		      INX
   1511  f76c		       bd 00 ff 	      LDA	StaticText,X
   1512  f76f		       85 d1		      STA	ScoreD1
   1513  f771		       e8		      INX
   1514  f772		       bd 00 ff 	      LDA	StaticText,X
   1515  f775		       85 d2		      STA	ScoreD2
   1516  f777		       e8		      INX
   1517  f778		       bd 00 ff 	      LDA	StaticText,X
   1518  f77b		       85 d3		      STA	ScoreD3
   1519  f77d		       e8		      INX
   1520  f77e		       bd 00 ff 	      LDA	StaticText,X
   1521  f781		       85 d4		      STA	ScoreD4
   1522  f783		       60		      RTS
   1523  f784
   1524  f784				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1525  f784		       a2 00		      LDX	#0
   1526  f786		       a0 04		      LDY	#FONT_OFFSET
   1527  f788
   1528  f788				   ScoreLoop		; 20 
   1529  f788		       85 02		      STA	WSYNC	;2
   1530  f78a		       85 2a		      STA	HMOVE
   1531  f78c
   1532  f78c		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1533  f78e		       85 0d		      STA	PF0	;3
   1534  f790
   1535  f790		       a5 82		      LDA	PF1Cache	;3
   1536  f792		       85 0e		      STA	PF1	;3
   1537  f794
   1538  f794		       a5 83		      LDA	PF2Cache	;3
   1539  f796		       85 0f		      STA	PF2	;3
   1540  f798
   1541  f798				   DrawScoreD0		; 15
   1542  f798		       a6 d0		      LDX	ScoreD0	; 3
   1543  f79a		       bd 00 fd 	      LDA	Font,X	;4
   1544  f79d		       85 81		      STA	PF0Cache	;3
   1545  f79f		       c6 d0		      DEC	ScoreD0	;5
   1546  f7a1
   1547  f7a1				   DrawScoreD1		; 23	
   1548  f7a1		       a6 d1		      LDX	ScoreD1	; 3
   1549  f7a3		       bd 00 fd 	      LDA	Font,X	;4
   1550  f7a6		       0a		      ASL		;2
   1551  f7a7		       0a		      ASL		;2
   1552  f7a8		       0a		      ASL		;2
   1553  f7a9		       0a		      ASL		;2
   1554  f7aa		       85 82		      STA	PF1Cache	;3
   1555  f7ac		       c6 d1		      DEC	ScoreD1	;5
   1556  f7ae
   1557  f7ae				   DrawScoreD2		; 20
   1558  f7ae		       a6 d2		      LDX	ScoreD2	; 3
   1559  f7b0		       bd 00 fd 	      LDA	Font,X	;4
   1560  f7b3		       29 0f		      AND	#%00001111	;2
   1561  f7b5		       05 82		      ORA	PF1Cache	;3
   1562  f7b7		       85 82		      STA	PF1Cache	;3
   1563  f7b9		       c6 d2		      DEC	ScoreD2	;5
   1564  f7bb
   1565  f7bb				   DrawScoreD3		; 23
   1566  f7bb		       a6 d3		      LDX	ScoreD3	; 3
   1567  f7bd		       bd 00 fd 	      LDA	Font,X	;4
   1568  f7c0		       4a		      LSR		;2
   1569  f7c1		       4a		      LSR		;2
   1570  f7c2		       4a		      LSR		;2
   1571  f7c3		       4a		      LSR		;2
   1572  f7c4		       85 83		      STA	PF2Cache	;3
   1573  f7c6		       c6 d3		      DEC	ScoreD3	;5
   1574  f7c8
   1575  f7c8				   DrawScoreD4		; 20
   1576  f7c8		       a6 d4		      LDX	ScoreD4	; 3
   1577  f7ca		       bd 00 fd 	      LDA	Font,X	;4
   1578  f7cd		       29 f0		      AND	#%11110000	;2
   1579  f7cf		       05 83		      ORA	PF2Cache	;3
   1580  f7d1		       85 83		      STA	PF2Cache	;3
   1581  f7d3		       c6 d4		      DEC	ScoreD4	;5
   1582  f7d5
   1583  f7d5
   1584  f7d5		       88		      DEY		;2
   1585  f7d6		       10 b0		      BPL	ScoreLoop	;4
   1586  f7d8
   1587  f7d8		       85 02		      STA	WSYNC
   1588  f7da		       85 2a		      STA	HMOVE
   1589  f7dc		       20 dd f6 	      JSR	LoadAll
   1590  f7df		       60		      RTS		; 6
   1591  f7e0
   1592  f7e0				   WaitForVblankEnd
   1593  f7e0		       ad 84 02 	      LDA	INTIM
   1594  f7e3		       d0 fb		      BNE	WaitForVblankEnd
   1595  f7e5		       85 02		      STA	WSYNC
   1596  f7e7		       85 01		      STA	VBLANK
   1597  f7e9		       60		      RTS
   1598  f7ea
   1599  f7ea				   Sleep4Lines
   1600  f7ea		       85 02		      STA	WSYNC
   1601  f7ec		       85 02		      STA	WSYNC
   1602  f7ee		       85 02		      STA	WSYNC
   1603  f7f0		       85 02		      STA	WSYNC
   1604  f7f2		       60		      RTS
   1605  f7f3
   1606  f7f3				   Sleep8Lines
   1607  f7f3		       20 ea f7 	      JSR	Sleep4Lines
   1608  f7f6		       20 ea f7 	      JSR	Sleep4Lines
   1609  f7f9		       60		      RTS
   1610  f7fa
   1611  f7fa				   Sleep32Lines
   1612  f7fa		       20 f3 f7 	      JSR	Sleep8Lines
   1613  f7fd		       20 f3 f7 	      JSR	Sleep8Lines
   1614  f800		       20 f3 f7 	      JSR	Sleep8Lines
   1615  f803		       20 f3 f7 	      JSR	Sleep8Lines
   1616  f806		       60		      RTS
   1617  f807
   1618  f807							;X = number of WSYNC HMOVE to run
   1619  f807				   HMoveXTimes
   1620  f807		       85 02		      STA	WSYNC	;3
   1621  f809		       85 2a		      STA	HMOVE	; 3/10 
   1622  f80b		       ca		      DEX
   1623  f80c		       d0 f9		      BNE	HMoveXTimes
   1624  f80e		       60		      RTS
   1625  f80f
   1626  f80f							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1627  f80f							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1628  f80f							; Tmp0 Binary Number
   1629  f80f							; Result Returned in Tmp 1 and A
   1630  f80f				   BINBCD8
   1631  f80f		       f8		      SED		; Switch to decimal mode
   1632  f810		       a9 00		      LDA	#0	; Ensure the result is clear
   1633  f812		       85 b1		      STA	Tmp1+0
   1634  f814							;STA Tmp1+1
   1635  f814		       a2 08		      LDX	#8	; The number of source bits
   1636  f816
   1637  f816				   CNVBIT
   1638  f816		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1639  f818		       a5 b1		      LDA	Tmp1+0	; And add into result
   1640  f81a		       65 b1		      ADC	Tmp1+0
   1641  f81c		       85 b1		      STA	Tmp1+0
   1642  f81e							;Not needed now, 0 to 99 is enought for timer!
   1643  f81e							; LDA Tmp1+1	; propagating any carry
   1644  f81e							; ADC Tmp1+1
   1645  f81e							; STA Tmp1+1
   1646  f81e		       ca		      DEX		; And repeat for next bit
   1647  f81f		       d0 f5		      BNE	CNVBIT
   1648  f821		       d8		      CLD		; Back to binary
   1649  f822		       60		      RTS		; All Done.
   1650  f823
   1651  f823							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1652  f823							;X player 0 or 1
   1653  f823				   SelectCarWithDpad
   1654  f823		       a0 03		      LDY	#3
   1655  f825				   SelectCarWithDpadLoop
   1656  f825		       ad 80 02 	      LDA	SWCHA
   1657  f828		       25 b0		      AND	Tmp0
   1658  f82a		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1659  f82c		       98		      TYA
   1660  f82d		       95 c7		      STA	CurrentCarId,X
   1661  f82f				   ContinueSelectCarWithDpadLoop
   1662  f82f		       46 b0		      LSR	Tmp0
   1663  f831		       88		      DEY
   1664  f832		       10 f1		      BPL	SelectCarWithDpadLoop
   1665  f834		       60		      RTS
   1666  f835
   1667  f835				   ProcessOpponentLineAndPlayerSprite		; The sprite might depend on the line, the SBRs are connected
   1668  f835		       a5 8c		      LDA	FrameCount0
   1669  f837		       29 01		      AND	#%00000001
   1670  f839		       38		      SEC
   1671  f83a		       d0 15		      BNE	Player0IsOpponent
   1672  f83c				   Player1IsOpponent		; Code could be reused?
   1673  f83c		       a5 91		      LDA	TrafficOffset0 + 1
   1674  f83e		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1675  f840		       85 b0		      STA	Tmp0
   1676  f842		       a5 92		      LDA	TrafficOffset0 + 2
   1677  f844		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1678  f846		       85 b1		      STA	Tmp1
   1679  f848		       a5 ba		      LDA	Traffic0Msb
   1680  f84a		       e5 bb		      SBC	OpTraffic0Msb
   1681  f84c		       85 f2		      STA	IsOpponentInFront
   1682  f84e		       4c 63 f8 	      JMP	CalculateOpponentVisibility
   1683  f851				   Player0IsOpponent
   1684  f851		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1685  f853		       e5 91		      SBC	TrafficOffset0 + 1
   1686  f855		       85 b0		      STA	Tmp0
   1687  f857		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1688  f859		       e5 92		      SBC	TrafficOffset0 + 2
   1689  f85b		       85 b1		      STA	Tmp1
   1690  f85d		       a5 bb		      LDA	OpTraffic0Msb
   1691  f85f		       e5 ba		      SBC	Traffic0Msb
   1692  f861		       85 f2		      STA	IsOpponentInFront
   1693  f863
   1694  f863				   CalculateOpponentVisibility
   1695  f863		       a5 b1		      LDA	Tmp1
   1696  f865		       05 f2		      ORA	IsOpponentInFront
   1697  f867		       f0 12		      BEQ	OpponentVisibleBehind	; 2 MSB are all zero
   1698  f869
   1699  f869		       a5 b1		      LDA	Tmp1
   1700  f86b		       25 f2		      AND	IsOpponentInFront
   1701  f86d		       c9 ff		      CMP	#%11111111
   1702  f86f		       f0 22		      BEQ	OpponentVisibleInFront	; 2 MSB are all one
   1703  f871
   1704  f871				   OpponentNotVisible
   1705  f871		       a9 00		      LDA	#0
   1706  f873		       85 b4		      STA	Tmp4
   1707  f875		       a9 ff		      LDA	#$FF
   1708  f877		       85 cf		      STA	OpponentLine
   1709  f879		       d0 3b		      BNE	ConfigureCarSprites
   1710  f87b
   1711  f87b				   OpponentVisibleBehind
   1712  f87b		       a5 b0		      LDA	Tmp0
   1713  f87d		       30 04		      BMI	OpponentVisibleBehindNegativeNumber
   1714  f87f		       c9 0d		      CMP	#13
   1715  f881		       90 28		      BCC	OpponentFullyVisible	; A is Greater or equal
   1716  f883				   OpponentVisibleBehindNegativeNumber
   1717  f883		       a9 33		      LDA	#51
   1718  f885		       85 cf		      STA	OpponentLine
   1719  f887		       85 b4		      STA	Tmp4	; Use sprite override
   1720  f889		       a9 74		      LDA	#<ArrowDownSprite
   1721  f88b		       85 d9		      STA	EnemyCarSpritePointerL
   1722  f88d		       a9 ff		      LDA	#>ArrowDownSprite
   1723  f88f		       85 da		      STA	EnemyCarSpritePointerH
   1724  f891		       d0 23		      BNE	ConfigureCarSprites	; Always jump
   1725  f893
   1726  f893				   OpponentVisibleInFront
   1727  f893		       a5 b0		      LDA	Tmp0
   1728  f895		       10 04		      BPL	OpponentVisibleInFrontPositiveNumber
   1729  f897		       c9 c6		      CMP	#-58
   1730  f899		       10 10		      BPL	OpponentFullyVisible	; A more than
   1731  f89b				   OpponentVisibleInFrontPositiveNumber
   1732  f89b		       a9 04		      LDA	#4
   1733  f89d		       85 cf		      STA	OpponentLine
   1734  f89f		       85 b4		      STA	Tmp4	; Use sprite override
   1735  f8a1		       a9 6f		      LDA	#<ArrowUpSprite
   1736  f8a3		       85 d9		      STA	EnemyCarSpritePointerL
   1737  f8a5		       a9 ff		      LDA	#>ArrowUpSprite
   1738  f8a7		       85 da		      STA	EnemyCarSpritePointerH
   1739  f8a9		       d0 0b		      BNE	ConfigureCarSprites	; Alwys jump
   1740  f8ab
   1741  f8ab				   OpponentFullyVisible
   1742  f8ab		       a9 00		      LDA	#0
   1743  f8ad		       85 b4		      STA	Tmp4
   1744  f8af		       18		      CLC
   1745  f8b0		       a5 b0		      LDA	Tmp0
   1746  f8b2		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1747  f8b4		       85 cf		      STA	OpponentLine
   1748  f8b6
   1749  f8b6				   ConfigureCarSprites
   1750  f8b6		       a5 8c		      LDA	FrameCount0
   1751  f8b8		       29 01		      AND	#%00000001
   1752  f8ba		       d0 0b		      BNE	LoadForRightScreenSprites
   1753  f8bc				   LoadForLeftScreenSprites
   1754  f8bc		       a5 c7		      LDA	CurrentCarId
   1755  f8be		       85 b0		      STA	Tmp0
   1756  f8c0		       a5 c8		      LDA	OpCurrentCarId
   1757  f8c2		       85 b1		      STA	Tmp1
   1758  f8c4		       4c cf f8 	      JMP	LoadCarSpritesFromIds
   1759  f8c7				   LoadForRightScreenSprites
   1760  f8c7		       a5 c7		      LDA	CurrentCarId
   1761  f8c9		       85 b1		      STA	Tmp1
   1762  f8cb		       a5 c8		      LDA	OpCurrentCarId
   1763  f8cd		       85 b0		      STA	Tmp0
   1764  f8cf
   1765  f8cf				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1766  f8cf		       a4 b0		      LDY	Tmp0
   1767  f8d1		       b9 8f ff 	      LDA	CarIdToSpriteAddressL,Y
   1768  f8d4		       85 d7		      STA	CarSpritePointerL
   1769  f8d6		       b9 93 ff 	      LDA	CarIdToSpriteAddressH,Y
   1770  f8d9		       85 d8		      STA	CarSpritePointerH
   1771  f8db				   ConfigureOpponentCarSprite
   1772  f8db		       a5 b4		      LDA	Tmp4
   1773  f8dd		       d0 0c		      BNE	ReturnFromConfigureCarSprite	; Using override!
   1774  f8df				   OpponentCarSprite
   1775  f8df		       a4 b1		      LDY	Tmp1
   1776  f8e1		       b9 97 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1777  f8e4		       85 d9		      STA	EnemyCarSpritePointerL
   1778  f8e6		       b9 9b ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1779  f8e9		       85 da		      STA	EnemyCarSpritePointerH
   1780  f8eb				   ReturnFromConfigureCarSprite
   1781  f8eb		       60		      RTS
   1782  f8ec
   1783  f8ec							; Value stored in A
   1784  f8ec				   IsOpponentColliding
   1785  f8ec							;Any non default state, opponent do not colide
   1786  f8ec		       a5 8e		      LDA	CollisionCounter
   1787  f8ee		       05 8f		      ORA	OpCollisionCounter
   1788  f8f0		       05 cb		      ORA	ScoreFontColorHoldChange
   1789  f8f2		       05 cc		      ORA	OpScoreFontColorHoldChange
   1790  f8f4		       d0 07		      BNE	OpponentNotColliding
   1791  f8f6		       a5 f2		      LDA	IsOpponentInFront
   1792  f8f8		       25 07		      AND	CXPPMM
   1793  f8fa		       4c ff f8 	      JMP	ReturnIsOpponentColliding
   1794  f8fd				   OpponentNotColliding
   1795  f8fd		       a9 00		      LDA	#0
   1796  f8ff				   ReturnIsOpponentColliding
   1797  f8ff		       60		      RTS
   1798  f900
   1799  f900
   1800  f900							; Movement and colision are binded because the car must be moved after duplicate size.
   1801  f900							; Use X for the player
   1802  f900							; Tmp2 Traffic colision result
   1803  f900				   TestCollisionAndMove
   1804  f900							; Until store the movemnt, Y contains the value to be stored.
   1805  f900							; see if player0 colides with the rest
   1806  f900		       a5 b2		      LDA	Tmp2
   1807  f902		       f0 2b		      BEQ	NoCollision	;skip if not hitting...
   1808  f904		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1809  f906		       d0 27		      BNE	NoCollision
   1810  f908		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1811  f90a		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X
   1812  f90d		       f0 20		      BEQ	NoCollision
   1813  f90f		       dd b5 fc 	      CMP	PlayerToScoreStartColor,X
   1814  f912		       f0 1b		      BEQ	NoCollision
   1815  f914		       a9 ff		      LDA	#COLLISION_FRAMES
   1816  f916		       95 8e		      STA	CollisionCounter,X
   1817  f918		       b5 f0		      LDA	Player0SpeedH,X
   1818  f91a		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1819  f91c		       a9 10		      LDA	#COLLISION_SPEED_L
   1820  f91e		       d5 de		      CMP	Player0SpeedL,X
   1821  f920		       b0 04		      BCS	SkipSetColisionSpeedL
   1822  f922				   SetColisionSpeedL
   1823  f922		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1824  f924		       95 de		      STA	Player0SpeedL,X
   1825  f926				   SkipSetColisionSpeedL
   1826  f926		       a9 00		      LDA	#0
   1827  f928		       95 f0		      STA	Player0SpeedH,X
   1828  f92a		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1829  f92c		       4c 7f f9 	      JMP	StoreHMove	; We keep position consistent
   1830  f92f				   NoCollision
   1831  f92f
   1832  f92f				   DecrementCollision
   1833  f92f		       b5 8e		      LDA	CollisionCounter,X
   1834  f931		       f0 06		      BEQ	FinishDecrementCollision
   1835  f933		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1836  f935		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1837  f937		       d6 8e		      DEC	CollisionCounter,X
   1838  f939				   FinishDecrementCollision
   1839  f939
   1840  f939				   ResetPlayerSize
   1841  f939		       d0 04		      BNE	FinishResetPlayerSize
   1842  f93b		       a9 30		      LDA	#%00110000
   1843  f93d		       95 04		      STA	NUSIZ0,X	;
   1844  f93f				   FinishResetPlayerSize
   1845  f93f
   1846  f93f				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1847  f93f		       b5 8e		      LDA	CollisionCounter,X
   1848  f941		       c9 01		      CMP	#1	; Last frame before reset
   1849  f943		       d0 05		      BNE	SkipResetPlayerPosition
   1850  f945		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1851  f947		       4c 7f f9 	      JMP	StoreHMove
   1852  f94a				   SkipResetPlayerPosition
   1853  f94a
   1854  f94a				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1855  f94a		       b5 c7		      LDA	CurrentCarId,X
   1856  f94c		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1857  f94e		       d0 08		      BNE	PrepareReadXAxis
   1858  f950		       a0 00		      LDY	#0
   1859  f952		       a5 8c		      LDA	FrameCount0
   1860  f954		       29 01		      AND	#DRAGSTER_TURN_MASK
   1861  f956		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1862  f958
   1863  f958				   PrepareReadXAxis
   1864  f958		       a0 00		      LDY	#0
   1865  f95a		       b5 b6		      LDA	Player0X,X
   1866  f95c				   BeginReadLeft
   1867  f95c		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1868  f95e		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1869  f961		       2c 80 02 	      BIT	SWCHA
   1870  f964		       d0 07		      BNE	SkipMoveLeft
   1871  f966		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1872  f968		       d6 b6		      DEC	Player0X,X
   1873  f96a		       4c 7f f9 	      JMP	StoreHMove	; Cannot move left and right...
   1874  f96d				   SkipMoveLeft
   1875  f96d				   BeginReadRight
   1876  f96d		       b5 b6		      LDA	Player0X,X
   1877  f96f		       c9 2c		      CMP	#PLAYER_MAX_X
   1878  f971		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1879  f973		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1880  f976		       2c 80 02 	      BIT	SWCHA
   1881  f979		       d0 04		      BNE	SkipMoveRight
   1882  f97b		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1883  f97d		       f6 b6		      INC	Player0X,X
   1884  f97f				   SkipMoveRight
   1885  f97f				   StoreHMove
   1886  f97f		       94 20		      STY	HMP0,X	;set the move for player 0
   1887  f981
   1888  f981		       60		      RTS
   1889  f982
   1890  f982							; X Traffic offset 4 bits each lane, 4 lanes per player
   1891  f982							; Tmp3 Max X offset
   1892  f982							; Tmp4 Max Player Speed L
   1893  f982							; Tmp5 Max Player Speed H
   1894  f982				   UpdateOffsets
   1895  f982		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1896  f984		       a5 c6		      LDA	GameMode
   1897  f986		       29 04		      AND	#%00000100	; GameModes with high delta
   1898  f988		       f0 02		      BEQ	UpdateOffsetsLoop
   1899  f98a		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1900  f98c
   1901  f98c				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1902  f98c		       38		      SEC
   1903  f98d		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1904  f98f		       f9 7b ff 	      SBC	TrafficSpeeds,Y
   1905  f992		       85 b0		      STA	Tmp0
   1906  f994		       c8		      INY
   1907  f995		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1908  f997		       f9 7b ff 	      SBC	TrafficSpeeds,Y
   1909  f99a		       85 b1		      STA	Tmp1
   1910  f99c		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1911  f99e		       e9 00		      SBC	#0
   1912  f9a0		       85 b2		      STA	Tmp2
   1913  f9a2
   1914  f9a2				   AddsTheResult
   1915  f9a2		       18		      CLC
   1916  f9a3		       a5 b0		      LDA	Tmp0
   1917  f9a5		       75 90		      ADC	TrafficOffset0,X
   1918  f9a7		       95 90		      STA	TrafficOffset0,X
   1919  f9a9		       e8		      INX
   1920  f9aa		       a5 b1		      LDA	Tmp1
   1921  f9ac		       75 90		      ADC	TrafficOffset0,X
   1922  f9ae		       95 90		      STA	TrafficOffset0,X
   1923  f9b0		       e8		      INX
   1924  f9b1		       a5 b2		      LDA	Tmp2	; Carry
   1925  f9b3		       75 90		      ADC	TrafficOffset0,X
   1926  f9b5		       95 90		      STA	TrafficOffset0,X
   1927  f9b7		       90 0f		      BCC	CalculateOffsetCache
   1928  f9b9				   CalculatePlayer0Msb
   1929  f9b9		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1930  f9bb		       d0 05		      BNE	CalculatePlayer1Msb
   1931  f9bd		       e6 ba		      INC	Traffic0Msb
   1932  f9bf		       4c c8 f9 	      JMP	CalculateOffsetCache
   1933  f9c2				   CalculatePlayer1Msb
   1934  f9c2		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1935  f9c4		       d0 02		      BNE	CalculateOffsetCache
   1936  f9c6		       e6 bb		      INC	OpTraffic0Msb
   1937  f9c8
   1938  f9c8				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1939  f9c8		       e8		      INX
   1940  f9c9		       38		      SEC
   1941  f9ca		       69 00		      ADC	#0	;Increment by one
   1942  f9cc		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1943  f9ce
   1944  f9ce				   PrepareNextUpdateLoop
   1945  f9ce		       c8		      INY
   1946  f9cf		       e8		      INX
   1947  f9d0		       e4 b3		      CPX	Tmp3	; Max X offset
   1948  f9d2		       d0 b8		      BNE	UpdateOffsetsLoop
   1949  f9d4		       60		      RTS
   1950  f9d5
   1951  f9d5							; X Player 0 or 1
   1952  f9d5				   ProcessSpeed
   1953  f9d5				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1954  f9d5		       a9 00		      LDA	#0
   1955  f9d7		       85 b0		      STA	Tmp0	; Break speed
   1956  f9d9		       b5 b8		      LDA	CountdownTimer,X
   1957  f9db		       d0 0d		      BNE	Break
   1958  f9dd		       b4 c7		      LDY	CurrentCarId,X
   1959  f9df		       a5 8c		      LDA	FrameCount0
   1960  f9e1		       39 a3 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1961  f9e4		       d0 04		      BNE	Break
   1962  f9e6		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1963  f9e8		       85 b0		      STA	Tmp0
   1964  f9ea
   1965  f9ea				   Break
   1966  f9ea		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1967  f9ed		       2c 80 02 	      BIT	SWCHA
   1968  f9f0		       d0 12		      BNE	BreakNonZero
   1969  f9f2		       b5 0c		      LDA	INPT4,X	;3
   1970  f9f4		       10 0a		      BPL	BreakWhileAccelerating
   1971  f9f6		       b4 d5		      LDY	Gear,X
   1972  f9f8		       b9 af ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1973  f9fb		       85 b0		      STA	Tmp0
   1974  f9fd		       4c 04 fa 	      JMP	BreakNonZero
   1975  fa00				   BreakWhileAccelerating		; Allow better control while breaking.
   1976  fa00		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1977  fa02		       85 b0		      STA	Tmp0
   1978  fa04
   1979  fa04				   BreakNonZero
   1980  fa04		       a5 b0		      LDA	Tmp0
   1981  fa06		       f0 29		      BEQ	SkipBreak
   1982  fa08
   1983  fa08				   DecreaseSpeed
   1984  fa08		       38		      SEC
   1985  fa09		       b5 de		      LDA	Player0SpeedL,X
   1986  fa0b		       e5 b0		      SBC	Tmp0
   1987  fa0d		       95 de		      STA	Player0SpeedL,X
   1988  fa0f		       b5 f0		      LDA	Player0SpeedH,X
   1989  fa11		       e9 00		      SBC	#0
   1990  fa13		       95 f0		      STA	Player0SpeedH,X
   1991  fa15
   1992  fa15				   CheckMinSpeed
   1993  fa15		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1994  fa17		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1995  fa19		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1996  fa1b		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1997  fa1d
   1998  fa1d				   CompareLBreakSpeed
   1999  fa1d		       b5 de		      LDA	Player0SpeedL,X
   2000  fa1f		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2001  fa21		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2002  fa23		       4c 2e fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2003  fa26
   2004  fa26				   ResetMinSpeed
   2005  fa26		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2006  fa28		       95 f0		      STA	Player0SpeedH,X
   2007  fa2a		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2008  fa2c		       95 de		      STA	Player0SpeedL,X
   2009  fa2e
   2010  fa2e				   SkipAccelerateIfBreaking
   2011  fa2e		       4c 77 fa 	      JMP	SkipAccelerate
   2012  fa31				   SkipBreak
   2013  fa31
   2014  fa31				   Acelerates
   2015  fa31		       b5 b8		      LDA	CountdownTimer,X
   2016  fa33		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2017  fa35
   2018  fa35				   ContinueAccelerateTest
   2019  fa35		       b5 0c		      LDA	INPT4,X	;3
   2020  fa37		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2021  fa39		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2022  fa3c		       2c 80 02 	      BIT	SWCHA
   2023  fa3f		       d0 36		      BNE	SkipAccelerate
   2024  fa41
   2025  fa41				   IncreaseCarSpeed
   2026  fa41		       a9 02		      LDA	#2
   2027  fa43		       85 b0		      STA	Tmp0	; Loop control
   2028  fa45		       b4 c7		      LDY	CurrentCarId,X
   2029  fa47				   IncreaseCarSpeedLoop
   2030  fa47							;Adds speed
   2031  fa47		       18		      CLC
   2032  fa48		       b5 dc		      LDA	AccelerateBuffer,X
   2033  fa4a		       79 9f ff 	      ADC	CarIdToAccelerateSpeed,Y
   2034  fa4d		       95 dc		      STA	AccelerateBuffer,X
   2035  fa4f		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2036  fa51		       f6 de		      INC	Player0SpeedL,X
   2037  fa53		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2038  fa55		       f6 f0		      INC	Player0SpeedH,X
   2039  fa57				   ContinueIncreaseSpeedLoop
   2040  fa57		       c6 b0		      DEC	Tmp0
   2041  fa59		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2042  fa5b				   SkipIncreaseCarSpeed
   2043  fa5b
   2044  fa5b				   CheckIfAlreadyMaxSpeed
   2045  fa5b		       b5 f0		      LDA	Player0SpeedH,X
   2046  fa5d		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2047  fa5f		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2048  fa61		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2049  fa63							;High bit is max, compare the low
   2050  fa63		       b4 c7		      LDY	CurrentCarId,X
   2051  fa65		       b5 de		      LDA	Player0SpeedL,X
   2052  fa67		       d9 a7 ff 	      CMP	CarIdToMaxSpeedL,Y
   2053  fa6a		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2054  fa6c							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2055  fa6c
   2056  fa6c				   ResetToMaxSpeed		; Speed is more, or is already max
   2057  fa6c		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2058  fa6e		       95 f0		      STA	Player0SpeedH,X
   2059  fa70		       b4 c7		      LDY	CurrentCarId,X
   2060  fa72		       b9 a7 ff 	      LDA	CarIdToMaxSpeedL,Y
   2061  fa75		       95 de		      STA	Player0SpeedL,X
   2062  fa77				   SkipAccelerate
   2063  fa77		       60		      RTS
   2064  fa78
   2065  fa78							;Tmp0 Traffic Offset to compare with next checkpoint
   2066  fa78				   ProcessPlayerStatus
   2067  fa78				   IsGameOver
   2068  fa78		       b5 b8		      LDA	CountdownTimer,X
   2069  fa7a		       15 de		      ORA	Player0SpeedL,X
   2070  fa7c		       15 f0		      ORA	Player0SpeedH,X
   2071  fa7e		       d0 0c		      BNE	IsCheckpoint
   2072  fa80		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2073  fa82		       95 cb		      STA	ScoreFontColorHoldChange,X
   2074  fa84		       bd b7 fc 	      LDA	PlayerToScoreOverColor,X
   2075  fa87		       95 c9		      STA	ScoreFontColor,X
   2076  fa89		       4c c0 fa 	      JMP	SkipIsTimeOver
   2077  fa8c
   2078  fa8c				   IsCheckpoint
   2079  fa8c		       b5 cd		      LDA	NextCheckpoint,X
   2080  fa8e		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2081  fa90		       d0 21		      BNE	SkipIsCheckpoint
   2082  fa92		       18		      CLC
   2083  fa93		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2084  fa95		       95 cd		      STA	NextCheckpoint,X
   2085  fa97		       bd b3 fc 	      LDA	PlayerToScoreGoodColor,X
   2086  fa9a		       95 c9		      STA	ScoreFontColor,X
   2087  fa9c		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2088  fa9e		       95 cb		      STA	ScoreFontColorHoldChange,X
   2089  faa0		       b5 b8		      LDA	CountdownTimer,X
   2090  faa2		       18		      CLC
   2091  faa3		       75 c0		      ADC	CheckpointTime,X
   2092  faa5		       95 b8		      STA	CountdownTimer,X
   2093  faa7		       90 04		      BCC	JumpSkipTimeOver
   2094  faa9		       a9 ff		      LDA	#$FF
   2095  faab		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2096  faad				   JumpSkipTimeOver
   2097  faad		       20 fa f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2098  fab0		       4c c0 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2099  fab3				   SkipIsCheckpoint
   2100  fab3
   2101  fab3				   IsTimeOver
   2102  fab3		       b5 b8		      LDA	CountdownTimer,X
   2103  fab5		       d0 09		      BNE	SkipIsTimeOver
   2104  fab7		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2105  fab9		       95 cb		      STA	ScoreFontColorHoldChange,X
   2106  fabb		       bd b9 fc 	      LDA	PlayerToScoreBadColor,X
   2107  fabe		       95 c9		      STA	ScoreFontColor,X
   2108  fac0				   SkipIsTimeOver
   2109  fac0		       60		      RTS
   2110  fac1
   2111  fac1
   2112  fac1				   EverySecond		; 64 frames to be more precise
   2113  fac1		       a9 3f		      LDA	#%00111111
   2114  fac3		       25 8c		      AND	FrameCount0
   2115  fac5		       d0 06		      BNE	SkipEverySecondAction
   2116  fac7		       d5 b8		      CMP	CountdownTimer,X
   2117  fac9		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2118  facb		       d6 b8		      DEC	CountdownTimer,X
   2119  facd				   SkipEverySecondAction
   2120  facd		       60		      RTS
   2121  face
   2122  face				   CalculateGear
   2123  face		       b5 de		      LDA	Player0SpeedL,X	;3
   2124  fad0		       29 80		      AND	#%10000000	;2
   2125  fad2		       15 f0		      ORA	Player0SpeedH,X	;3
   2126  fad4		       18		      CLC		;2
   2127  fad5		       2a		      ROL		;2
   2128  fad6		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2129  fad8		       95 d5		      STA	Gear,X
   2130  fada		       60		      RTS
   2131  fadb
   2132  fadb				   ProcessScoreFontColor
   2133  fadb		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2134  fadd		       f0 06		      BEQ	ResetScoreFontColor
   2135  fadf		       88		      DEY
   2136  fae0		       94 cb		      STY	ScoreFontColorHoldChange,X
   2137  fae2		       4c ea fa 	      JMP	SkipScoreFontColor
   2138  fae5				   ResetScoreFontColor
   2139  fae5		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2140  fae8		       95 c9		      STA	ScoreFontColor,X
   2141  faea				   SkipScoreFontColor
   2142  faea		       60		      RTS
   2143  faeb
   2144  faeb							; X = Player
   2145  faeb							; A Returns result to be sotored in the proper digit
   2146  faeb				   PrintScoreHoldChange
   2147  faeb		       b5 cb		      LDA	ScoreFontColorHoldChange,X
   2148  faed		       4a		      LSR
   2149  faee		       4a		      LSR
   2150  faef		       4a		      LSR
   2151  faf0		       4a		      LSR
   2152  faf1		       a8		      TAY
   2153  faf2		       b9 8c fc 	      LDA	BarLookup,Y
   2154  faf5		       60		      RTS
   2155  faf6
   2156  faf6				   PrintSpeedBar
   2157  faf6		       b5 de		      LDA	Player0SpeedL,X
   2158  faf8		       29 e0		      AND	#%11100000	;2 Discard the last bits
   2159  fafa		       18		      CLC
   2160  fafb		       2a		      ROL		;First goes into carry
   2161  fafc		       2a		      ROL
   2162  fafd		       2a		      ROL
   2163  fafe		       2a		      ROL
   2164  faff		       85 b0		      STA	Tmp0
   2165  fb01		       b5 f0		      LDA	Player0SpeedH,X
   2166  fb03		       0a		      ASL
   2167  fb04		       0a		      ASL
   2168  fb05		       0a		      ASL
   2169  fb06		       05 b0		      ORA	Tmp0
   2170  fb08		       a8		      TAY		; 2
   2171  fb09		       b9 9c fc 	      LDA	SpeedToBarLookup,Y	;4
   2172  fb0c		       85 d2		      STA	ScoreD2	;3
   2173  fb0e		       60		      RTS
   2174  fb0f
   2175  fb0f							; Moved here because of rom space.
   2176  fb0f							; The only SBR in constants space
   2177  fb0f				   DrawQrCode
   2178  fb0f		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2179  fb11		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2180  fb13		       a9 01		      LDA	#%00000001	; Mirror playfield
   2181  fb15		       85 0a		      STA	CTRLPF
   2182  fb17		       20 b8 f6 	      JSR	ClearAll	; To be 100 sure!
   2183  fb1a		       ad 82 02 	      LDA	SWCHB
   2184  fb1d		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2185  fb1f		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2186  fb21		       f0 07		      BEQ	StoreReversedQrCode
   2187  fb23		       86 09		      STX	COLUBK
   2188  fb25		       84 08		      STY	COLUPF
   2189  fb27		       4c 2e fb 	      JMP	ContinueQrCode
   2190  fb2a				   StoreReversedQrCode
   2191  fb2a		       86 08		      STX	COLUPF
   2192  fb2c		       84 09		      STY	COLUBK
   2193  fb2e
   2194  fb2e				   ContinueQrCode
   2195  fb2e		       a2 09		      LDX	#9
   2196  fb30		       20 07 f8 	      JSR	HMoveXTimes
   2197  fb33		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2198  fb35		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2199  fb37		       20 e0 f7 	      JSR	WaitForVblankEnd
   2200  fb3a		       20 f3 f7 	      JSR	Sleep8Lines
   2201  fb3d		       20 f3 f7 	      JSR	Sleep8Lines
   2202  fb40		       20 f3 f7 	      JSR	Sleep8Lines
   2203  fb43
   2204  fb43				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2205  fb43		       85 02		      STA	WSYNC
   2206  fb45		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2207  fb48		       85 0e		      STA	PF1	;3
   2208  fb4a		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2209  fb4d		       85 0f		      STA	PF2	;3
      0  fb4f					      SLEEP	27	; 
      1  fb4f				   .CYCLES    SET	27
      2  fb4f
      3  fb4f				  -	      IF	.CYCLES < 2
      4  fb4f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb4f				  -	      ERR
      6  fb4f					      ENDIF
      7  fb4f
      8  fb4f					      IF	.CYCLES & 1
      9  fb4f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb4f				  -	      nop	0
     11  fb4f					      ELSE
     12  fb4f		       24 00		      bit	VSYNC
     13  fb51					      ENDIF
     14  fb51				   .CYCLES    SET	.CYCLES - 3
     15  fb51					      ENDIF
     16  fb51
     17  fb51					      REPEAT	.CYCLES / 2
     18  fb51		       ea		      nop
     17  fb51					      REPEND
     18  fb52		       ea		      nop
     17  fb52					      REPEND
     18  fb53		       ea		      nop
     17  fb53					      REPEND
     18  fb54		       ea		      nop
     17  fb54					      REPEND
     18  fb55		       ea		      nop
     17  fb55					      REPEND
     18  fb56		       ea		      nop
     17  fb56					      REPEND
     18  fb57		       ea		      nop
     17  fb57					      REPEND
     18  fb58		       ea		      nop
     17  fb58					      REPEND
     18  fb59		       ea		      nop
     17  fb59					      REPEND
     18  fb5a		       ea		      nop
     17  fb5a					      REPEND
     18  fb5b		       ea		      nop
     17  fb5b					      REPEND
     18  fb5c		       ea		      nop
     19  fb5d					      REPEND
   2211  fb5d		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2212  fb60		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2213  fb62		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2214  fb65		       85 0e		      STA	PF1	;3
   2215  fb67
   2216  fb67		       ca		      DEX		;2
   2217  fb68		       d0 d9		      BNE	QrCodeLoop	;2
   2218  fb6a		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2219  fb6c		       88		      DEY		;2
   2220  fb6d		       10 d4		      BPL	QrCodeLoop	;4
   2221  fb6f
   2222  fb6f				   EndQrCodeLoop
   2223  fb6f		       85 02		      STA	WSYNC	;
   2224  fb71		       a9 00		      LDA	#0
   2225  fb73		       85 0e		      STA	PF1	;3
   2226  fb75		       85 0f		      STA	PF2	;3
   2227  fb77
   2228  fb77		       20 fa f7 	      JSR	Sleep32Lines
   2229  fb7a		       4c 47 f5 	      JMP	PrepareOverscan
   2230  fb7d
   2231  fb7d							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2232  fc00					      org	$FC00
   2233  fc00				   QrCode1
   2234  fc00		       1f		      .byte.b	#%00011111
   2235  fc01		       10		      .byte.b	#%00010000
   2236  fc02		       17		      .byte.b	#%00010111
   2237  fc03		       17		      .byte.b	#%00010111
   2238  fc04		       17		      .byte.b	#%00010111
   2239  fc05		       10		      .byte.b	#%00010000
   2240  fc06		       1f		      .byte.b	#%00011111
   2241  fc07		       00		      .byte.b	#%00000000
   2242  fc08		       17		      .byte.b	#%00010111
   2243  fc09		       10		      .byte.b	#%00010000
   2244  fc0a		       1d		      .byte.b	#%00011101
   2245  fc0b		       16		      .byte.b	#%00010110
   2246  fc0c		       03		      .byte.b	#%00000011
   2247  fc0d		       19		      .byte.b	#%00011001
   2248  fc0e		       13		      .byte.b	#%00010011
   2249  fc0f		       1c		      .byte.b	#%00011100
   2250  fc10		       0b		      .byte.b	#%00001011
   2251  fc11		       00		      .byte.b	#%00000000
   2252  fc12		       1f		      .byte.b	#%00011111
   2253  fc13		       10		      .byte.b	#%00010000
   2254  fc14		       17		      .byte.b	#%00010111
   2255  fc15		       17		      .byte.b	#%00010111
   2256  fc16		       17		      .byte.b	#%00010111
   2257  fc17		       10		      .byte.b	#%00010000
   2258  fc18		       1f		      .byte.b	#%00011111
   2259  fc19
   2260  fc19				   QrCode2
   2261  fc19		       c3		      .byte.b	#%11000011
   2262  fc1a		       9a		      .byte.b	#%10011010
   2263  fc1b		       82		      .byte.b	#%10000010
   2264  fc1c		       da		      .byte.b	#%11011010
   2265  fc1d		       aa		      .byte.b	#%10101010
   2266  fc1e		       ca		      .byte.b	#%11001010
   2267  fc1f		       f3		      .byte.b	#%11110011
   2268  fc20		       78		      .byte.b	#%01111000
   2269  fc21		       df		      .byte.b	#%11011111
   2270  fc22		       fc		      .byte.b	#%11111100
   2271  fc23		       c7		      .byte.b	#%11000111
   2272  fc24		       98		      .byte.b	#%10011000
   2273  fc25		       23		      .byte.b	#%00100011
   2274  fc26		       b9		      .byte.b	#%10111001
   2275  fc27		       d2		      .byte.b	#%11010010
   2276  fc28		       30		      .byte.b	#%00110000
   2277  fc29		       eb		      .byte.b	#%11101011
   2278  fc2a		       28		      .byte.b	#%00101000
   2279  fc2b		       ab		      .byte.b	#%10101011
   2280  fc2c		       72		      .byte.b	#%01110010
   2281  fc2d		       fa		      .byte.b	#%11111010
   2282  fc2e		       7a		      .byte.b	#%01111010
   2283  fc2f		       32		      .byte.b	#%00110010
   2284  fc30		       3a		      .byte.b	#%00111010
   2285  fc31		       63		      .byte.b	#%01100011
   2286  fc32
   2287  fc32				   QrCode3
   2288  fc32		       98		      .byte.b	#%10011000
   2289  fc33		       c3		      .byte.b	#%11000011
   2290  fc34		       39		      .byte.b	#%00111001
   2291  fc35		       34		      .byte.b	#%00110100
   2292  fc36		       ff		      .byte.b	#%11111111
   2293  fc37		       71		      .byte.b	#%01110001
   2294  fc38		       d5		      .byte.b	#%11010101
   2295  fc39		       d1		      .byte.b	#%11010001
   2296  fc3a		       5f		      .byte.b	#%01011111
   2297  fc3b		       26		      .byte.b	#%00100110
   2298  fc3c		       2d		      .byte.b	#%00101101
   2299  fc3d		       e9		      .byte.b	#%11101001
   2300  fc3e		       d6		      .byte.b	#%11010110
   2301  fc3f		       26		      .byte.b	#%00100110
   2302  fc40		       ba		      .byte.b	#%10111010
   2303  fc41		       03		      .byte.b	#%00000011
   2304  fc42		       dd		      .byte.b	#%11011101
   2305  fc43		       e0		      .byte.b	#%11100000
   2306  fc44		       57		      .byte.b	#%01010111
   2307  fc45		       14		      .byte.b	#%00010100
   2308  fc46		       35		      .byte.b	#%00110101
   2309  fc47		       e5		      .byte.b	#%11100101
   2310  fc48		       b5		      .byte.b	#%10110101
   2311  fc49		       d4		      .byte.b	#%11010100
   2312  fc4a		       97		      .byte.b	#%10010111
   2313  fc4b
   2314  fc4b				   QrCode4
   2315  fc4b		       09		      .byte.b	#%00001001
   2316  fc4c		       0e		      .byte.b	#%00001110
   2317  fc4d		       0f		      .byte.b	#%00001111
   2318  fc4e		       0c		      .byte.b	#%00001100
   2319  fc4f		       0c		      .byte.b	#%00001100
   2320  fc50		       08		      .byte.b	#%00001000
   2321  fc51		       08		      .byte.b	#%00001000
   2322  fc52		       06		      .byte.b	#%00000110
   2323  fc53		       06		      .byte.b	#%00000110
   2324  fc54		       0b		      .byte.b	#%00001011
   2325  fc55		       0f		      .byte.b	#%00001111
   2326  fc56		       04		      .byte.b	#%00000100
   2327  fc57		       08		      .byte.b	#%00001000
   2328  fc58		       0f		      .byte.b	#%00001111
   2329  fc59		       09		      .byte.b	#%00001001
   2330  fc5a		       07		      .byte.b	#%00000111
   2331  fc5b		       05		      .byte.b	#%00000101
   2332  fc5c		       00		      .byte.b	#%00000000
   2333  fc5d		       0f		      .byte.b	#%00001111
   2334  fc5e		       08		      .byte.b	#%00001000
   2335  fc5f		       0b		      .byte.b	#%00001011
   2336  fc60		       0b		      .byte.b	#%00001011
   2337  fc61		       0b		      .byte.b	#%00001011
   2338  fc62		       08		      .byte.b	#%00001000
   2339  fc63		       0f		      .byte.b	#%00001111
   2340  fc64
   2341  fc64				   PlayerToUpMask
   2342  fc64		       10		      .byte.b	#%00010000	;
   2343  fc65		       01		      .byte.b	#%00000001	;
   2344  fc66
   2345  fc66				   PlayerToDownMask
   2346  fc66		       20		      .byte.b	#%00100000	;
   2347  fc67		       02		      .byte.b	#%00000010	;
   2348  fc68
   2349  fc68				   PlayerToLeftMask
   2350  fc68		       40		      .byte.b	#%01000000	;
   2351  fc69		       04		      .byte.b	#%00000100	;
   2352  fc6a
   2353  fc6a				   PlayerToRightMask
   2354  fc6a		       80		      .byte.b	#%10000000	;
   2355  fc6b		       08		      .byte.b	#%00001000	;
   2356  fc6c
   2357  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2358  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2359  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2360  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2361  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2362  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2363  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2364  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2365  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2366  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2367  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2368  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2369  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2370  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2371  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2372  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2373  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2374  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2375  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2376  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2377  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2378  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2379  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2380  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2381  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2382  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2383  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2384  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2385  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2386  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2387  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2388  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2389  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2390  fc8c
   2391  fc8c
   2392  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2393  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2394  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2395  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2396  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2397  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2398  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2399  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2400  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2401  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2402  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2403  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2404  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2405  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2406  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2407  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2408  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2409  fc9c
   2410  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2411  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2412  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2413  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2414  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2415  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2416  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2417  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2418  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2419  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2420  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2421  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2422  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2423  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2424  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2425  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2426  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2427  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2428  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2429  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2430  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2431  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2432  fcb1
   2433  fcb1				   PlayerToDefaultColor
   2434  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2435  fcb2		       98		      .byte.b	#PLAYER1_COLOR
   2436  fcb3
   2437  fcb3				   PlayerToScoreGoodColor
   2438  fcb3		       37		      .byte.b	#SCORE_FONT_COLOR_GOOD
   2439  fcb4		       d8		      .byte.b	#OP_SCORE_FONT_COLOR_GOOD
   2440  fcb5
   2441  fcb5				   PlayerToScoreStartColor
   2442  fcb5		       38		      .byte.b	#SCORE_FONT_COLOR_START
   2443  fcb6		       c8		      .byte.b	#OP_SCORE_FONT_COLOR_START
   2444  fcb7
   2445  fcb7				   PlayerToScoreOverColor
   2446  fcb7		       0c		      .byte.b	#SCORE_FONT_COLOR_OVER
   2447  fcb8		       ab		      .byte.b	#OP_SCORE_FONT_COLOR_OVER
   2448  fcb9
   2449  fcb9				   PlayerToScoreBadColor
   2450  fcb9		       44		      .byte.b	#SCORE_FONT_COLOR_BAD
   2451  fcba		       56		      .byte.b	#OP_SCORE_FONT_COLOR_BAD
   2452  fcbb
   2453  fd00					      org	$FD00
   2454  fd00				   Font
   2455  fd00				   C0
   2456  fd00		       e7		      .byte.b	#%11100111	;
   2457  fd01		       a5		      .byte.b	#%10100101	; 
   2458  fd02		       a5		      .byte.b	#%10100101	; 
   2459  fd03		       a5		      .byte.b	#%10100101	; 
   2460  fd04		       e7		      .byte.b	#%11100111	;	
   2461  fd05				   C1
   2462  fd05		       e7		      .byte.b	#%11100111	;
   2463  fd06		       42		      .byte.b	#%01000010	; 
   2464  fd07		       42		      .byte.b	#%01000010	; 
   2465  fd08		       42		      .byte.b	#%01000010	; 
   2466  fd09		       66		      .byte.b	#%01100110	;
   2467  fd0a				   C2
   2468  fd0a		       e7		      .byte.b	#%11100111	;
   2469  fd0b		       24		      .byte.b	#%00100100	; 
   2470  fd0c		       e7		      .byte.b	#%11100111	; 
   2471  fd0d		       81		      .byte.b	#%10000001	; 
   2472  fd0e		       e7		      .byte.b	#%11100111	;
   2473  fd0f				   C3
   2474  fd0f		       e7		      .byte.b	#%11100111	;
   2475  fd10		       81		      .byte.b	#%10000001	; 
   2476  fd11		       e7		      .byte.b	#%11100111	; 
   2477  fd12		       81		      .byte.b	#%10000001	; 
   2478  fd13		       e7		      .byte.b	#%11100111	;
   2479  fd14				   C4
   2480  fd14		       81		      .byte.b	#%10000001	;
   2481  fd15		       81		      .byte.b	#%10000001	; 
   2482  fd16		       e7		      .byte.b	#%11100111	; 
   2483  fd17		       a5		      .byte.b	#%10100101	; 
   2484  fd18		       a5		      .byte.b	#%10100101	;
   2485  fd19				   C5
   2486  fd19		       e7		      .byte.b	#%11100111	;
   2487  fd1a		       81		      .byte.b	#%10000001	; 
   2488  fd1b		       e7		      .byte.b	#%11100111	; 
   2489  fd1c		       24		      .byte.b	#%00100100	; 
   2490  fd1d		       e7		      .byte.b	#%11100111	;
   2491  fd1e				   C6
   2492  fd1e		       e7		      .byte.b	#%11100111	;
   2493  fd1f		       a5		      .byte.b	#%10100101	; 
   2494  fd20		       e7		      .byte.b	#%11100111	; 
   2495  fd21		       24		      .byte.b	#%00100100	; 
   2496  fd22		       e7		      .byte.b	#%11100111	;
   2497  fd23				   C7
   2498  fd23		       81		      .byte.b	#%10000001	;
   2499  fd24		       81		      .byte.b	#%10000001	; 
   2500  fd25		       81		      .byte.b	#%10000001	; 
   2501  fd26		       81		      .byte.b	#%10000001	; 
   2502  fd27		       e7		      .byte.b	#%11100111	;
   2503  fd28				   C8
   2504  fd28		       e7		      .byte.b	#%11100111	;
   2505  fd29		       a5		      .byte.b	#%10100101	; 
   2506  fd2a		       e7		      .byte.b	#%11100111	; 
   2507  fd2b		       a5		      .byte.b	#%10100101	; 
   2508  fd2c		       e7		      .byte.b	#%11100111	;
   2509  fd2d				   C9
   2510  fd2d		       e7		      .byte.b	#%11100111	;
   2511  fd2e		       81		      .byte.b	#%10000001	; 
   2512  fd2f		       e7		      .byte.b	#%11100111	; 
   2513  fd30		       a5		      .byte.b	#%10100101	; 
   2514  fd31		       e7		      .byte.b	#%11100111	;
   2515  fd32				   CA
   2516  fd32		       a5		      .byte.b	#%10100101	;
   2517  fd33		       a5		      .byte.b	#%10100101	; 
   2518  fd34		       e7		      .byte.b	#%11100111	; 
   2519  fd35		       a5		      .byte.b	#%10100101	; 
   2520  fd36		       e7		      .byte.b	#%11100111	;
   2521  fd37				   CB
   2522  fd37		       66		      .byte.b	#%01100110	;
   2523  fd38		       a5		      .byte.b	#%10100101	; 
   2524  fd39		       66		      .byte.b	#%01100110	; 
   2525  fd3a		       a5		      .byte.b	#%10100101	;
   2526  fd3b		       66		      .byte.b	#%01100110	;
   2527  fd3c				   CC
   2528  fd3c		       e7		      .byte.b	#%11100111	;
   2529  fd3d		       24		      .byte.b	#%00100100	; 
   2530  fd3e		       24		      .byte.b	#%00100100	; 
   2531  fd3f		       24		      .byte.b	#%00100100	;
   2532  fd40		       e7		      .byte.b	#%11100111	;
   2533  fd41
   2534  fd41				   CD
   2535  fd41		       66		      .byte.b	#%01100110	;
   2536  fd42		       a5		      .byte.b	#%10100101	; 
   2537  fd43		       a5		      .byte.b	#%10100101	; 
   2538  fd44		       a5		      .byte.b	#%10100101	;
   2539  fd45		       66		      .byte.b	#%01100110	;
   2540  fd46
   2541  fd46				   CE
   2542  fd46		       e7		      .byte.b	#%11100111	;
   2543  fd47		       24		      .byte.b	#%00100100	; 
   2544  fd48		       e7		      .byte.b	#%11100111	; 
   2545  fd49		       24		      .byte.b	#%00100100	; 
   2546  fd4a		       e7		      .byte.b	#%11100111	;
   2547  fd4b
   2548  fd4b				   CF
   2549  fd4b		       24		      .byte.b	#%00100100	;
   2550  fd4c		       24		      .byte.b	#%00100100	; 
   2551  fd4d		       e7		      .byte.b	#%11100111	; 
   2552  fd4e		       24		      .byte.b	#%00100100	; 
   2553  fd4f		       e7		      .byte.b	#%11100111	;
   2554  fd50
   2555  fd50				   CG
   2556  fd50		       c3		      .byte.b	#%11000011	;
   2557  fd51		       a5		      .byte.b	#%10100101	; 
   2558  fd52		       a5		      .byte.b	#%10100101	; 
   2559  fd53		       24		      .byte.b	#%00100100	; 
   2560  fd54		       c3		      .byte.b	#%11000011	;	
   2561  fd55
   2562  fd55				   CH
   2563  fd55		       a5		      .byte.b	#%10100101	;
   2564  fd56		       a5		      .byte.b	#%10100101	; 
   2565  fd57		       e7		      .byte.b	#%11100111	; 
   2566  fd58		       a5		      .byte.b	#%10100101	; 
   2567  fd59		       a5		      .byte.b	#%10100101	;
   2568  fd5a
   2569  fd5a				   CI
   2570  fd5a		       e7		      .byte.b	#%11100111	;
   2571  fd5b		       42		      .byte.b	#%01000010	; 
   2572  fd5c		       42		      .byte.b	#%01000010	; 
   2573  fd5d		       42		      .byte.b	#%01000010	; 
   2574  fd5e		       e7		      .byte.b	#%11100111	;
   2575  fd5f
   2576  fd5f				   CJ
   2577  fd5f		       e7		      .byte.b	#%11100111	;
   2578  fd60		       a5		      .byte.b	#%10100101	; 
   2579  fd61		       81		      .byte.b	#%10000001	; 
   2580  fd62		       81		      .byte.b	#%10000001	; 
   2581  fd63		       81		      .byte.b	#%10000001	;	
   2582  fd64
   2583  fd64				   CK
   2584  fd64		       a5		      .byte.b	#%10100101	;
   2585  fd65		       a5		      .byte.b	#%10100101	; 
   2586  fd66		       66		      .byte.b	#%01100110	; 
   2587  fd67		       a5		      .byte.b	#%10100101	; 
   2588  fd68		       a5		      .byte.b	#%10100101	;
   2589  fd69
   2590  fd69				   CL
   2591  fd69		       e7		      .byte.b	#%11100111	;
   2592  fd6a		       24		      .byte.b	#%00100100	; 
   2593  fd6b		       24		      .byte.b	#%00100100	; 
   2594  fd6c		       24		      .byte.b	#%00100100	; 
   2595  fd6d		       24		      .byte.b	#%00100100	;
   2596  fd6e
   2597  fd6e				   CM
   2598  fd6e		       a5		      .byte.b	#%10100101	;
   2599  fd6f		       a5		      .byte.b	#%10100101	; 
   2600  fd70		       a5		      .byte.b	#%10100101	; 
   2601  fd71		       e7		      .byte.b	#%11100111	; 
   2602  fd72		       a5		      .byte.b	#%10100101	;
   2603  fd73
   2604  fd73				   CN
   2605  fd73		       a5		      .byte.b	#%10100101	;
   2606  fd74		       a5		      .byte.b	#%10100101	; 
   2607  fd75		       a5		      .byte.b	#%10100101	; 
   2608  fd76		       a5		      .byte.b	#%10100101	; 
   2609  fd77		       66		      .byte.b	#%01100110	;	
   2610  fd78
   2611  fd78
   2612  fd78				   CO
   2613  fd78		       42		      .byte.b	#%01000010	;
   2614  fd79		       a5		      .byte.b	#%10100101	; 
   2615  fd7a		       a5		      .byte.b	#%10100101	; 
   2616  fd7b		       a5		      .byte.b	#%10100101	; 
   2617  fd7c		       42		      .byte.b	#%01000010	;	
   2618  fd7d
   2619  fd7d				   CP
   2620  fd7d		       24		      .byte.b	#%00100100	;
   2621  fd7e		       24		      .byte.b	#%00100100	; 
   2622  fd7f		       e7		      .byte.b	#%11100111	; 
   2623  fd80		       a5		      .byte.b	#%10100101	; 
   2624  fd81		       e7		      .byte.b	#%11100111	;
   2625  fd82
   2626  fd82				   CQ
   2627  fd82		       81		      .byte.b	#%10000001	;
   2628  fd83		       e5		      .byte.b	#%11100101	; 
   2629  fd84		       a5		      .byte.b	#%10100101	; 
   2630  fd85		       a5		      .byte.b	#%10100101	; 
   2631  fd86		       e7		      .byte.b	#%11100111	;	
   2632  fd87
   2633  fd87				   CR
   2634  fd87		       a5		      .byte.b	#%10100101	;
   2635  fd88		       a5		      .byte.b	#%10100101	; 
   2636  fd89		       66		      .byte.b	#%01100110	; 
   2637  fd8a		       a5		      .byte.b	#%10100101	; 
   2638  fd8b		       66		      .byte.b	#%01100110	;
   2639  fd8c
   2640  fd8c				   CS
   2641  fd8c		       66		      .byte.b	#%01100110	;
   2642  fd8d		       81		      .byte.b	#%10000001	; 
   2643  fd8e		       42		      .byte.b	#%01000010	; 
   2644  fd8f		       24		      .byte.b	#%00100100	; 
   2645  fd90		       c3		      .byte.b	#%11000011	;
   2646  fd91
   2647  fd91				   CT
   2648  fd91		       42		      .byte.b	#%01000010	;
   2649  fd92		       42		      .byte.b	#%01000010	; 
   2650  fd93		       42		      .byte.b	#%01000010	; 
   2651  fd94		       42		      .byte.b	#%01000010	; 
   2652  fd95		       e7		      .byte.b	#%11100111	;
   2653  fd96
   2654  fd96				   CU
   2655  fd96		       e7		      .byte.b	#%11100111	;
   2656  fd97		       a5		      .byte.b	#%10100101	; 
   2657  fd98		       a5		      .byte.b	#%10100101	; 
   2658  fd99		       a5		      .byte.b	#%10100101	; 
   2659  fd9a		       a5		      .byte.b	#%10100101	;	
   2660  fd9b
   2661  fd9b				   CW
   2662  fd9b		       a5		      .byte.b	#%10100101	;
   2663  fd9c		       e7		      .byte.b	#%11100111	; 
   2664  fd9d		       a5		      .byte.b	#%10100101	; 
   2665  fd9e		       a5		      .byte.b	#%10100101	; 
   2666  fd9f		       a5		      .byte.b	#%10100101	;
   2667  fda0
   2668  fda0				   CY
   2669  fda0		       42		      .byte.b	#%01000010	;
   2670  fda1		       42		      .byte.b	#%01000010	; 
   2671  fda2		       42		      .byte.b	#%01000010	; 
   2672  fda3		       a5		      .byte.b	#%10100101	; 
   2673  fda4		       a5		      .byte.b	#%10100101	;
   2674  fda5
   2675  fda5				   Exclamation
   2676  fda5		       42		      .byte.b	#%01000010	;
   2677  fda6		       00		      .byte.b	#%00000000	; 
   2678  fda7		       42		      .byte.b	#%01000010	; 
   2679  fda8		       42		      .byte.b	#%01000010	; 
   2680  fda9		       42		      .byte.b	#%01000010	;
   2681  fdaa
   2682  fdaa				   Pipe
   2683  fdaa				   Colon
   2684  fdaa		       42		      .byte.b	#%01000010	;
   2685  fdab		       42		      .byte.b	#%01000010	; 
   2686  fdac		       00		      .byte.b	#%00000000	; 
   2687  fdad		       42		      .byte.b	#%01000010	; 
   2688  fdae		       42		      .byte.b	#%01000010	;
   2689  fdaf
   2690  fdaf				   Space
   2691  fdaf				   C0B
   2692  fdaf		       00		      .byte.b	#%00000000	;
   2693  fdb0		       00		      .byte.b	#%00000000	; 
   2694  fdb1		       00		      .byte.b	#%00000000	; 
   2695  fdb2		       00		      .byte.b	#%00000000	; 
   2696  fdb3		       00		      .byte.b	#%00000000	;	
   2697  fdb4				   C1B
   2698  fdb4		       24		      .byte.b	#%00100100	;
   2699  fdb5		       00		      .byte.b	#%00000000	; 
   2700  fdb6		       00		      .byte.b	#%00000000	; 
   2701  fdb7		       00		      .byte.b	#%00000000	; 
   2702  fdb8		       00		      .byte.b	#%00000000	;
   2703  fdb9				   C2B
   2704  fdb9		       66		      .byte.b	#%01100110	;
   2705  fdba		       00		      .byte.b	#%00000000	; 
   2706  fdbb		       00		      .byte.b	#%00000000	; 
   2707  fdbc		       00		      .byte.b	#%00000000	; 
   2708  fdbd		       00		      .byte.b	#%00000000	;
   2709  fdbe				   C3B
   2710  fdbe		       e7		      .byte.b	#%11100111	;
   2711  fdbf		       00		      .byte.b	#%00000000	; 
   2712  fdc0		       00		      .byte.b	#%00000000	; 
   2713  fdc1		       00		      .byte.b	#%00000000	; 
   2714  fdc2		       00		      .byte.b	#%00000000	;
   2715  fdc3				   C4B
   2716  fdc3		       e7		      .byte.b	#%11100111	;
   2717  fdc4		       24		      .byte.b	#%00100100	; 
   2718  fdc5		       00		      .byte.b	#%00000000	; 
   2719  fdc6		       00		      .byte.b	#%00000000	; 
   2720  fdc7		       00		      .byte.b	#%00000000	;
   2721  fdc8				   C5B
   2722  fdc8		       e7		      .byte.b	#%11100111	;
   2723  fdc9		       66		      .byte.b	#%01100110	; 
   2724  fdca		       00		      .byte.b	#%00000000	; 
   2725  fdcb		       00		      .byte.b	#%00000000	; 
   2726  fdcc		       00		      .byte.b	#%00000000	;
   2727  fdcd				   C6B
   2728  fdcd		       e7		      .byte.b	#%11100111	;
   2729  fdce		       e7		      .byte.b	#%11100111	; 
   2730  fdcf		       00		      .byte.b	#%00000000	; 
   2731  fdd0		       00		      .byte.b	#%00000000	; 
   2732  fdd1		       00		      .byte.b	#%00000000	;
   2733  fdd2				   C7B
   2734  fdd2		       e7		      .byte.b	#%11100111	;
   2735  fdd3		       e7		      .byte.b	#%11100111	; 
   2736  fdd4		       24		      .byte.b	#%00100100	; 
   2737  fdd5		       00		      .byte.b	#%00000000	; 
   2738  fdd6		       00		      .byte.b	#%00000000	;
   2739  fdd7				   C8B
   2740  fdd7		       e7		      .byte.b	#%11100111	;
   2741  fdd8		       e7		      .byte.b	#%11100111	; 
   2742  fdd9		       66		      .byte.b	#%01100110	; 
   2743  fdda		       00		      .byte.b	#%00000000	; 
   2744  fddb		       00		      .byte.b	#%00000000	;
   2745  fddc				   C9B
   2746  fddc		       e7		      .byte.b	#%11100111	;
   2747  fddd		       e7		      .byte.b	#%11100111	; 
   2748  fdde		       e7		      .byte.b	#%11100111	; 
   2749  fddf		       00		      .byte.b	#%00000000	; 
   2750  fde0		       00		      .byte.b	#%00000000	;
   2751  fde1				   CAB
   2752  fde1		       e7		      .byte.b	#%11100111	;
   2753  fde2		       e7		      .byte.b	#%11100111	; 
   2754  fde3		       e7		      .byte.b	#%11100111	; 
   2755  fde4		       24		      .byte.b	#%00100100	; 
   2756  fde5		       00		      .byte.b	#%00000000	;
   2757  fde6				   CBB
   2758  fde6		       e7		      .byte.b	#%11100111	;
   2759  fde7		       e7		      .byte.b	#%11100111	; 
   2760  fde8		       e7		      .byte.b	#%11100111	; 
   2761  fde9		       66		      .byte.b	#%01100110	; 
   2762  fdea		       00		      .byte.b	#%00000000	;
   2763  fdeb				   CCB
   2764  fdeb		       e7		      .byte.b	#%11100111	;
   2765  fdec		       e7		      .byte.b	#%11100111	; 
   2766  fded		       e7		      .byte.b	#%11100111	; 
   2767  fdee		       e7		      .byte.b	#%11100111	; 
   2768  fdef		       00		      .byte.b	#%00000000	;
   2769  fdf0
   2770  fdf0				   CDB
   2771  fdf0		       e7		      .byte.b	#%11100111	;
   2772  fdf1		       e7		      .byte.b	#%11100111	; 
   2773  fdf2		       e7		      .byte.b	#%11100111	; 
   2774  fdf3		       e7		      .byte.b	#%11100111	; 
   2775  fdf4		       24		      .byte.b	#%00100100	;
   2776  fdf5
   2777  fdf5				   CEB
   2778  fdf5		       e7		      .byte.b	#%11100111	;
   2779  fdf6		       e7		      .byte.b	#%11100111	; 
   2780  fdf7		       e7		      .byte.b	#%11100111	; 
   2781  fdf8		       e7		      .byte.b	#%11100111	; 
   2782  fdf9		       66		      .byte.b	#%01100110	;
   2783  fdfa
   2784  fdfa				   CFB
   2785  fdfa		       e7		      .byte.b	#%11100111	;
   2786  fdfb		       e7		      .byte.b	#%11100111	; 
   2787  fdfc		       e7		      .byte.b	#%11100111	; 
   2788  fdfd		       e7		      .byte.b	#%11100111	; 
   2789  fdfe		       e7		      .byte.b	#%11100111	;
   2790  fdff
   2791  fe00					      org	$FE00
   2792  fe00				   AesTable
   2793  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2794  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2795  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2796  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2797  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2798  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2799  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2800  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2801  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2802  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2803  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2804  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2805  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2806  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2807  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2808  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2809  ff00
   2810  ff00					      org	$FF00
   2811  ff00				   StaticText		; All static text must be on the same MSB block. 
   2812  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2813  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2814  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2815  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2816  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2817  ff04
   2818  ff04				   HellwayLeftText
   2819  ff04		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2820  ff05		       59		      .byte.b	#<CH + #FONT_OFFSET
   2821  ff06		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2822  ff07		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2823  ff08
   2824  ff08				   HellwayRightText
   2825  ff08		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2826  ff09		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2827  ff0a		       81		      .byte.b	#<CP + #FONT_OFFSET
   2828  ff0b		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2829  ff0c		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2830  ff0d
   2831  ff0d				   OpbText
   2832  ff0d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2833  ff0e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2834  ff0f		       81		      .byte.b	#<CP + #FONT_OFFSET
   2835  ff10		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2836  ff11
   2837  ff11				   YearText
   2838  ff11		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2839  ff12		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2840  ff13		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2841  ff14		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2842  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2843  ff16
   2844  ff16				   GoText
   2845  ff16		       54		      .byte.b	#<CG + #FONT_OFFSET
   2846  ff17		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2847  ff18		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2848  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2849  ff1a
   2850  ff1a				   WinText
   2851  ff1a		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2852  ff1b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2853  ff1c		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2854  ff1d
   2855  ff1d				   LoseText
   2856  ff1d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2857  ff1e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2858  ff1f		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2859  ff20
   2860  ff20				   BuildNumberText
   2861  ff20		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2862  ff21		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2863  ff22		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2864  ff23		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2865  ff24		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2866  ff25
   2867  ff25				   ReadyText
   2868  ff25		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2869  ff26		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2870  ff27		       36		      .byte.b	#<CA + #FONT_OFFSET
   2871  ff28		       45		      .byte.b	#<CD + #FONT_OFFSET
   2872  ff29		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2873  ff2a
   2874  ff2a				   EndStaticText
   2875  ff2a
   2876  ff2a				   EngineSoundType
   2877  ff2a		       02		      .byte.b	#2
   2878  ff2b		       02		      .byte.b	#2
   2879  ff2c		       0e		      .byte.b	#14
   2880  ff2d		       06		      .byte.b	#6
   2881  ff2e		       06		      .byte.b	#6
   2882  ff2f		       0e		      .byte.b	#14
   2883  ff30
   2884  ff30				   EngineBaseFrequence
   2885  ff30		       1f		      .byte.b	#31
   2886  ff31		       15		      .byte.b	#21
   2887  ff32		       14		      .byte.b	#20
   2888  ff33		       1f		      .byte.b	#31
   2889  ff34		       16		      .byte.b	#22
   2890  ff35		       03		      .byte.b	#3
   2891  ff36
   2892  ff36				   CarSprite0		; Upside down, Original Car
   2893  ff36		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2894  ff3e				   CarSprite0NoPadding
   2895  ff3e		       7e		      .byte.b	#%01111110
   2896  ff3f		       24		      .byte.b	#%00100100
   2897  ff40		       bd		      .byte.b	#%10111101
   2898  ff41		       3c		      .byte.b	#%00111100
   2899  ff42		       bd		      .byte.b	#%10111101
   2900  ff43		       3c		      .byte.b	#%00111100
   2901  ff44
   2902  ff44				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2903  ff44		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2904  ff4c				   CarSprite1NoPadding
   2905  ff4c		       bd		      .byte.b	#%10111101
   2906  ff4d		       7e		      .byte.b	#%01111110
   2907  ff4e		       5a		      .byte.b	#%01011010
   2908  ff4f		       66		      .byte.b	#%01100110
   2909  ff50		       bd		      .byte.b	#%10111101
   2910  ff51		       3c		      .byte.b	#%00111100
   2911  ff52
   2912  ff52				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2913  ff52		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2914  ff5a				   CarSprite2NoPadding
   2915  ff5a		       7e		      .byte.b	#%01111110
   2916  ff5b		       a5		      .byte.b	#%10100101
   2917  ff5c		       42		      .byte.b	#%01000010
   2918  ff5d		       42		      .byte.b	#%01000010
   2919  ff5e		       bd		      .byte.b	#%10111101
   2920  ff5f		       7e		      .byte.b	#%01111110
   2921  ff60
   2922  ff60				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2923  ff60		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2924  ff68				   CarSprite3NoPadding
   2925  ff68		       3c		      .byte.b	#%00111100
   2926  ff69		       db		      .byte.b	#%11011011
   2927  ff6a		       db		      .byte.b	#%11011011
   2928  ff6b		       3c		      .byte.b	#%00111100
   2929  ff6c		       5a		      .byte.b	#%01011010
   2930  ff6d		       3c		      .byte.b	#%00111100
   2931  ff6e
   2932  ff6e		       00		      ds	1	; Car start line is wrong, I would have to change all constants, for the others the existing padding solves. Waste 1 byte, save sanity!
   2933  ff6f
   2934  ff6f				   ArrowUpSprite
   2935  ff6f		       18		      .byte.b	#%00011000
   2936  ff70		       18		      .byte.b	#%00011000
   2937  ff71		       7e		      .byte.b	#%01111110
   2938  ff72		       3c		      .byte.b	#%00111100
   2939  ff73		       18		      .byte.b	#%00011000
   2940  ff74
   2941  ff74				   ArrowDownSprite
   2942  ff74		       00 00		      ds	2
   2943  ff76		       18		      .byte.b	#%00011000
   2944  ff77		       3c		      .byte.b	#%00111100
   2945  ff78		       7e		      .byte.b	#%01111110
   2946  ff79		       18		      .byte.b	#%00011000
   2947  ff7a		       18		      .byte.b	#%00011000
   2948  ff7b
   2949  ff7b
   2950  ff7b				   TrafficSpeeds
   2951  ff7b		       00		      .byte.b	#$00	;  Trafic0 L
   2952  ff7c		       00		      .byte.b	#$00	;  Trafic0 H
   2953  ff7d		       0a		      .byte.b	#$0A	;  Trafic1 L
   2954  ff7e		       01		      .byte.b	#$01	;  Trafic1 H
   2955  ff7f		       e6		      .byte.b	#$E6	;  Trafic2 L
   2956  ff80		       00		      .byte.b	#$00	;  Trafic2 H
   2957  ff81		       c2		      .byte.b	#$C2	;  Trafic3 L
   2958  ff82		       00		      .byte.b	#$00	;  Trafic3 H
   2959  ff83		       9e		      .byte.b	#$9E	;  Trafic4 L
   2960  ff84		       00		      .byte.b	#$00	;  Trafic4 H
   2961  ff85				   TrafficSpeedsHighDelta
   2962  ff85		       00		      .byte.b	#$00	;  Trafic0 L
   2963  ff86		       00		      .byte.b	#$00	;  Trafic0 H
   2964  ff87		       0a		      .byte.b	#$0A	;  Trafic1 L
   2965  ff88		       01		      .byte.b	#$01	;  Trafic1 H
   2966  ff89		       c8		      .byte.b	#$C8	;  Trafic2 L
   2967  ff8a		       00		      .byte.b	#$00	;  Trafic2 H
   2968  ff8b		       86		      .byte.b	#$86	;  Trafic3 L
   2969  ff8c		       00		      .byte.b	#$00	;  Trafic3 H
   2970  ff8d		       44		      .byte.b	#$44	;  Trafic4 L
   2971  ff8e		       00		      .byte.b	#$00	;  Trafic4 H
   2972  ff8f
   2973  ff8f				   CarIdToSpriteAddressL
   2974  ff8f		       36		      .byte.b	#<CarSprite0
   2975  ff90		       44		      .byte.b	#<CarSprite1
   2976  ff91		       52		      .byte.b	#<CarSprite2
   2977  ff92		       60		      .byte.b	#<CarSprite3
   2978  ff93
   2979  ff93				   CarIdToSpriteAddressH
   2980  ff93		       ff		      .byte.b	#>CarSprite0
   2981  ff94		       ff		      .byte.b	#>CarSprite1
   2982  ff95		       ff		      .byte.b	#>CarSprite2
   2983  ff96		       ff		      .byte.b	#>CarSprite3
   2984  ff97
   2985  ff97				   EnemyCarIdToSpriteAddressL
   2986  ff97		       3e		      .byte.b	#<CarSprite0NoPadding
   2987  ff98		       4c		      .byte.b	#<CarSprite1NoPadding
   2988  ff99		       5a		      .byte.b	#<CarSprite2NoPadding
   2989  ff9a		       68		      .byte.b	#<CarSprite3NoPadding
   2990  ff9b
   2991  ff9b				   EnemyCarIdToSpriteAddressH
   2992  ff9b		       ff		      .byte.b	#>CarSprite0NoPadding
   2993  ff9c		       ff		      .byte.b	#>CarSprite1NoPadding
   2994  ff9d		       ff		      .byte.b	#>CarSprite2NoPadding
   2995  ff9e		       ff		      .byte.b	#>CarSprite3NoPadding
   2996  ff9f
   2997  ff9f				   CarIdToAccelerateSpeed
   2998  ff9f		       80		      .byte.b	#128
   2999  ffa0		       c0		      .byte.b	#192
   3000  ffa1		       60		      .byte.b	#96
   3001  ffa2		       c0		      .byte.b	#192
   3002  ffa3
   3003  ffa3				   CarIdToTimeoverBreakInterval 		; Glide
   3004  ffa3		       03		      .byte.b	#%00000011	;Every 4 frames
   3005  ffa4		       03		      .byte.b	#%00000011	;Every 4 frames
   3006  ffa5		       0f		      .byte.b	#%00001111	;Every 16 frames
   3007  ffa6		       03		      .byte.b	#%00000011	;Every 4 frames
   3008  ffa7
   3009  ffa7				   CarIdToMaxSpeedL
   3010  ffa7		       80		      .byte.b	#$80
   3011  ffa8		       00		      .byte.b	#$00	; One less gear
   3012  ffa9		       80		      .byte.b	#$80
   3013  ffaa		       80		      .byte.b	#$80
   3014  ffab
   3015  ffab				   CarIdToMaxGear
   3016  ffab		       05		      .byte.b	#5
   3017  ffac		       04		      .byte.b	#4	; One less gear
   3018  ffad		       05		      .byte.b	#5
   3019  ffae		       05		      .byte.b	#5
   3020  ffaf
   3021  ffaf				   GearToBreakSpeedTable
   3022  ffaf		       09		      .byte.b	#(BREAK_SPEED - 1)
   3023  ffb0		       09		      .byte.b	#(BREAK_SPEED - 1)
   3024  ffb1		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3025  ffb2		       0b		      .byte.b	#(BREAK_SPEED + 1)
   3026  ffb3		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3027  ffb4		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3028  ffb5
   3029  ffb5				   TrafficColorTable
   3030  ffb5		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3031  ffb6		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3032  ffb7		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3033  ffb8		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3034  ffb9
   3035  ffb9				   TrafficChanceTable
   3036  ffb9		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3037  ffba		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3038  ffbb		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3039  ffbc		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3040  ffbd
   3041  ffbd				   TrafficTimeTable
   3042  ffbd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3043  ffbe		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3044  ffbf		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3045  ffc0		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3046  ffc1		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3047  ffc2
   3048  ffc2
   3049  fffc					      org	$FFFC
   3050  fffc		       00 f0		      .word.w	BeforeStart
   3051  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
