------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     58  f000
     59  f000		       00 f9	   PLAYER0_COLOR =	$F9
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 21	   PLAYER_0_X_START =	33	;
     69  f000		       00 2a	   PLAYER_1_X_START =	42	;
     70  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     71  f000
     72  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     73  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     74  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     75  f000
     76  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     77  f000
     78  f000		       00 00	   BLACK      =	$00	;
     79  f000
     80  f000		       00 10	   MAX_GAME_MODE =	16
     81  f000
     82  f000		       00 08	   PARALLAX_SIZE =	8
     83  f000
     84  f000		       00 05	   HALF_TEXT_SIZE =	5
     85  f000
     86  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     87  f000
     88  f000		       00 49	   VERSION_COLOR =	$49
     89  f000
     90  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     91  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     92  f000		       00 00	   QR_CODE_COLOR =	$00
     93  f000		       00 19	   QR_CODE_SIZE =	25
     94  f000
     95  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     96  f000
     97  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     98  f000		       00 29	   VBLANK_TIMER =	41
     99  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    100  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    101  f000
    102  f000		       00 08	   ENGINE_VOLUME =	8
    103  f000
    104  f000		       00 08	   CAR_SIZE   =	8
    105  f000
    106  f000		       00 80	   GRP0Cache  =	$80
    107  f000		       00 81	   PF0Cache   =	$81
    108  f000		       00 82	   PF1Cache   =	$82
    109  f000		       00 83	   PF2Cache   =	$83
    110  f000		       00 84	   GRP1Cache  =	$84
    111  f000		       00 85	   ENABLCache =	$85
    112  f000		       00 86	   ENAM0Cache =	$86
    113  f000		       00 87	   ENAM1Cache =	$87
    114  f000
    115  f000		       00 8c	   FrameCount0 =	$8C	;
    116  f000		       00 8d	   FrameCount1 =	$8D	;
    117  f000
    118  f000		       00 8e	   CollisionCounter =	$8E
    119  f000		       00 8f	   OpCollisionCounter =	$8F
    120  f000
    121  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    122  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    123  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    124  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    125  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    126  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    127  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    128  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    129  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    130  f000
    131  f000							;Temporary variables, multiple uses
    132  f000		       00 b0	   Tmp0       =	$B0
    133  f000		       00 b1	   Tmp1       =	$B1
    134  f000		       00 b2	   Tmp2       =	$B2
    135  f000		       00 b3	   Tmp3       =	$B3
    136  f000		       00 b4	   Tmp4       =	$B4
    137  f000		       00 b5	   Tmp5       =	$B5
    138  f000
    139  f000		       00 b6	   Player0X   =	$B6
    140  f000		       00 b7	   Player1X   =	$B7
    141  f000		       00 b8	   CountdownTimer =	$B8
    142  f000		       00 b9	   OpCountdownTimer =	$B9
    143  f000		       00 ba	   Traffic0Msb =	$BA
    144  f000		       00 bb	   OpTraffic0Msb =	$BB
    145  f000		       00 bc	   SwitchDebounceCounter =	$BC
    146  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    147  f000		       00 be	   TrafficChance =	$BE
    148  f000		       00 bf	   OpTrafficChance =	$BF
    149  f000
    150  f000		       00 c0	   CheckpointTime =	$C0
    151  f000		       00 c1	   OpCheckpointTime =	$C1
    152  f000		       00 c2	   TrafficColor =	$C2
    153  f000		       00 c3	   OpTrafficColor =	$C3
    154  f000		       00 c4	   CurrentDifficulty =	$C4
    155  f000		       00 c5	   OpCurrentDifficulty =	$C5
    156  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    157  f000
    158  f000		       00 c7	   CurrentCarId =	$C7
    159  f000		       00 c8	   OpCurrentCarId =	$C8
    160  f000
    161  f000		       00 c9	   ScoreFontColor =	$C9
    162  f000		       00 ca	   OpScoreFontColor =	$CA
    163  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    164  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    165  f000		       00 cd	   NextCheckpoint =	$CD
    166  f000		       00 ce	   OpNextCheckpoint =	$CE
    167  f000		       00 cf	   OpponentLine =	$CF
    168  f000
    169  f000		       00 d0	   ScoreD0    =	$D0
    170  f000		       00 d1	   ScoreD1    =	$D1
    171  f000		       00 d2	   ScoreD2    =	$D2
    172  f000		       00 d3	   ScoreD3    =	$D3
    173  f000		       00 d4	   ScoreD4    =	$D4
    174  f000
    175  f000		       00 d5	   Gear       =	$D5
    176  f000		       00 d6	   OpGear     =	$D6
    177  f000
    178  f000		       00 d7	   CarSpritePointerL =	$D7
    179  f000		       00 d8	   CarSpritePointerH =	$D8
    180  f000
    181  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    182  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    183  f000
    184  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    185  f000
    186  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    187  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    188  f000
    189  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    190  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    191  f000
    192  f000		       00 f0	   Player0SpeedL =	$F0
    193  f000		       00 f1	   Player1SpeedL =	$F1
    194  f000		       00 f2	   Player0SpeedH =	$F2
    195  f000		       00 f3	   Player1SpeedH =	$F3
    196  f000
    197  f000		       00 f4	   IsOpponentInFront =	$F4	; Bit 7 tells if negative or positive.
    198  f000
    199  f000							;generic start up stuff, put zero in almost all...
    200  f000				   BeforeStart		;All variables that are kept on game reset or select
    201  f000		       a0 00		      LDY	#0
    202  f002		       84 bc		      STY	SwitchDebounceCounter
    203  f004		       84 c4		      STY	CurrentDifficulty
    204  f006		       84 c5		      STY	OpCurrentDifficulty
    205  f008		       84 bd		      STY	GameStatus
    206  f00a		       84 c7		      STY	CurrentCarId
    207  f00c		       84 c8		      STY	OpCurrentCarId
    208  f00e		       a0 10		      LDY	#16
    209  f010		       84 c6		      STY	GameMode
    210  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    211  f014
    212  f014				   Start
    213  f014		       a9 02		      LDA	#2
    214  f016		       85 00		      STA	VSYNC
    215  f018		       85 02		      STA	WSYNC
    216  f01a		       85 02		      STA	WSYNC
    217  f01c		       85 02		      STA	WSYNC
    218  f01e		       a9 00		      LDA	#0	;2
    219  f020		       85 00		      STA	VSYNC	;3
    220  f022
    221  f022		       78		      SEI
    222  f023		       d8		      CLD
    223  f024		       a2 ff		      LDX	#$FF
    224  f026		       9a		      TXS
    225  f027
    226  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    227  f029				   CleanMem
    228  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    229  f02b		       f0 1a		      BEQ	SkipClean
    230  f02d		       e0 c6		      CPX	#GameMode
    231  f02f		       f0 16		      BEQ	SkipClean
    232  f031		       e0 c7		      CPX	#CurrentCarId
    233  f033		       f0 12		      BEQ	SkipClean
    234  f035		       e0 c8		      CPX	#OpCurrentCarId
    235  f037		       f0 0e		      BEQ	SkipClean
    236  f039		       e0 c4		      CPX	#CurrentDifficulty
    237  f03b		       f0 0a		      BEQ	SkipClean
    238  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    239  f03f		       f0 06		      BEQ	SkipClean
    240  f041		       e0 bd		      CPX	#GameStatus
    241  f043		       f0 02		      BEQ	SkipClean
    242  f045		       95 00		      STA	0,X
    243  f047				   SkipClean
    244  f047		       e8		      INX
    245  f048		       d0 df		      BNE	CleanMem
    246  f04a
    247  f04a		       a9 d5		      LDA	#213
    248  f04c		       8d 96 02 	      STA	TIM64T	;3	
    249  f04f
    250  f04f							;Setting some variables...
    251  f04f
    252  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    253  f04f		       85 02		      STA	WSYNC	;We will set player position
    254  f051		       20 27 f7 	      JSR	DefaultOffsets
    255  f054
    256  f054		       ad 89 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    257  f057		       85 f0		      STA	Player0SpeedL
    258  f059		       85 f1		      STA	Player1SpeedL
    259  f05b
    260  f05b							;SLEEP 11;18
    261  f05b		       a2 00		      LDX	#0
    262  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    263  f060		       85 db		      STA	StartSWCHB	; For game over
    264  f062		       29 c0		      AND	#%11000000
    265  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    266  f066		       e8		      INX
    267  f067		       c9 80		      CMP	#%10000000
    268  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    269  f06b		       e8		      INX
    270  f06c		       c9 40		      CMP	#%01000000
    271  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    272  f070		       e8		      INX
    273  f071
    274  f071				   StoreCurrentDifficulty
    275  f071		       86 c4		      STX	CurrentDifficulty
    276  f073		       86 c5		      STX	OpCurrentDifficulty
    277  f075		       a2 00		      LDX	#0
    278  f077		       20 df f6 	      JSR	ConfigureDifficulty
    279  f07a		       e8		      INX
    280  f07b		       20 df f6 	      JSR	ConfigureDifficulty
    281  f07e
    282  f07e				   SetGameNotRunning
    283  f07e		       a9 00		      LDA	#0
    284  f080		       85 bd		      STA	GameStatus
    285  f082
    286  f082				   ConfigureTimer
    287  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    288  f084		       85 b8		      STA	CountdownTimer	;3
    289  f086		       85 b9		      STA	OpCountdownTimer	;3
    290  f088
    291  f088				   ConfigurePlayer1XPosition
    292  f088		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    293  f08a		       85 b7		      STA	Player1X	;3
    294  f08c
    295  f08c				   ConfigureOpNextCheckpoint
    296  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    297  f08e		       85 ce		      STA	OpNextCheckpoint
    298  f090
    299  f090				   HPositioning 		; Avoid sleep doing needed stuff
    300  f090		       85 02		      STA	WSYNC
    301  f092
    302  f092				   ConfigurePlayer0XPosition
    303  f092		       a9 21		      LDA	#PLAYER_0_X_START	;2
    304  f094		       85 b6		      STA	Player0X	;3
    305  f096
    306  f096				   ConfigureMissileSize
    307  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    308  f098		       85 04		      STA	NUSIZ0	;3
    309  f09a		       85 05		      STA	NUSIZ1	;3
    310  f09c
    311  f09c				   ConfigureNextCheckpoint
    312  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    313  f09e		       85 cd		      STA	NextCheckpoint
    314  f0a0
    315  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    316  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	4	;
      1  f0a2				   .CYCLES    SET	4
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2				  -	      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2				  -	      ELSE
     12  f0a2				  -	      bit	VSYNC
     13  f0a2				  -	      ENDIF
     14  f0a2				  -.CYCLES    SET	.CYCLES - 3
     15  f0a2					      ENDIF
     16  f0a2
     17  f0a2					      REPEAT	.CYCLES / 2
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     19  f0a4					      REPEND
    318  f0a4		       85 12		      STA	RESM0
      0  f0a6					      SLEEP	2	;
      1  f0a6				   .CYCLES    SET	2
      2  f0a6
      3  f0a6				  -	      IF	.CYCLES < 2
      4  f0a6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a6				  -	      ERR
      6  f0a6					      ENDIF
      7  f0a6
      8  f0a6				  -	      IF	.CYCLES & 1
      9  f0a6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a6				  -	      nop	0
     11  f0a6				  -	      ELSE
     12  f0a6				  -	      bit	VSYNC
     13  f0a6				  -	      ENDIF
     14  f0a6				  -.CYCLES    SET	.CYCLES - 3
     15  f0a6					      ENDIF
     16  f0a6
     17  f0a6					      REPEAT	.CYCLES / 2
     18  f0a6		       ea		      nop
     19  f0a7					      REPEND
    320  f0a7		       85 14		      STA	RESBL
      0  f0a9					      SLEEP	2
      1  f0a9				   .CYCLES    SET	2
      2  f0a9
      3  f0a9				  -	      IF	.CYCLES < 2
      4  f0a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a9				  -	      ERR
      6  f0a9					      ENDIF
      7  f0a9
      8  f0a9				  -	      IF	.CYCLES & 1
      9  f0a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a9				  -	      nop	0
     11  f0a9				  -	      ELSE
     12  f0a9				  -	      bit	VSYNC
     13  f0a9				  -	      ENDIF
     14  f0a9				  -.CYCLES    SET	.CYCLES - 3
     15  f0a9					      ENDIF
     16  f0a9
     17  f0a9					      REPEAT	.CYCLES / 2
     18  f0a9		       ea		      nop
     19  f0aa					      REPEND
    322  f0aa		       85 13		      STA	RESM1
      0  f0ac					      SLEEP	3
      1  f0ac				   .CYCLES    SET	3
      2  f0ac
      3  f0ac				  -	      IF	.CYCLES < 2
      4  f0ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ac				  -	      ERR
      6  f0ac					      ENDIF
      7  f0ac
      8  f0ac					      IF	.CYCLES & 1
      9  f0ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ac				  -	      nop	0
     11  f0ac					      ELSE
     12  f0ac		       24 00		      bit	VSYNC
     13  f0ae					      ENDIF
     14  f0ae				   .CYCLES    SET	.CYCLES - 3
     15  f0ae					      ENDIF
     16  f0ae
     17  f0ae				  -	      REPEAT	.CYCLES / 2
     18  f0ae				  -	      nop
     19  f0ae					      REPEND
    324  f0ae
    325  f0ae		       a9 e0		      LDA	#$E0
    326  f0b0		       85 24		      STA	HMBL
    327  f0b2		       85 22		      STA	HMM0
    328  f0b4		       85 23		      STA	HMM1
    329  f0b6		       85 02		      STA	WSYNC
    330  f0b8		       85 2a		      STA	HMOVE
    331  f0ba		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    332  f0bc		       85 2b		      STA	HMCLR
      0  f0be					      SLEEP	30
      1  f0be				   .CYCLES    SET	30
      2  f0be
      3  f0be				  -	      IF	.CYCLES < 2
      4  f0be				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0be				  -	      ERR
      6  f0be					      ENDIF
      7  f0be
      8  f0be				  -	      IF	.CYCLES & 1
      9  f0be				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0be				  -	      nop	0
     11  f0be				  -	      ELSE
     12  f0be				  -	      bit	VSYNC
     13  f0be				  -	      ENDIF
     14  f0be				  -.CYCLES    SET	.CYCLES - 3
     15  f0be					      ENDIF
     16  f0be
     17  f0be					      REPEAT	.CYCLES / 2
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     19  f0cd					      REPEND
    334  f0cd		       85 10		      STA	RESP0
    335  f0cf							;SLEEP 5 ; Temporarily move player 1 away.
    336  f0cf		       85 11		      STA	RESP1
    337  f0d1
    338  f0d1				   WaitResetToEnd
    339  f0d1		       ad 84 02 	      LDA	INTIM
    340  f0d4		       d0 fb		      BNE	WaitResetToEnd
    341  f0d6
    342  f0d6				   MainLoop
    343  f0d6		       a9 02		      LDA	#2
    344  f0d8		       85 00		      STA	VSYNC
    345  f0da		       85 02		      STA	WSYNC
    346  f0dc		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    347  f0de				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    348  f0de		       a9 01		      LDA	#%00000001	;3
    349  f0e0		       24 df		      BIT	TextFlickerMode	;2
    350  f0e2		       f0 05		      BEQ	TextSideFrameZero	;2
    351  f0e4		       25 8d		      AND	FrameCount1	;2
    352  f0e6		       4c eb f0 	      JMP	StoreTextSize	;3
    353  f0e9				   TextSideFrameZero
    354  f0e9		       25 8c		      AND	FrameCount0	;2
    355  f0eb				   StoreTextSize
    356  f0eb		       85 de		      STA	TextSide	;3
    357  f0ed
    358  f0ed				   PrepareMaxHMove
    359  f0ed		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    360  f0ef		       85 09		      STA	COLUBK
      0  f0f1					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0f1				   .CYCLES    SET	24 - 11
      2  f0f1
      3  f0f1				  -	      IF	.CYCLES < 2
      4  f0f1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0f1				  -	      ERR
      6  f0f1					      ENDIF
      7  f0f1
      8  f0f1					      IF	.CYCLES & 1
      9  f0f1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0f1				  -	      nop	0
     11  f0f1					      ELSE
     12  f0f1		       24 00		      bit	VSYNC
     13  f0f3					      ENDIF
     14  f0f3				   .CYCLES    SET	.CYCLES - 3
     15  f0f3					      ENDIF
     16  f0f3
     17  f0f3					      REPEAT	.CYCLES / 2
     18  f0f3		       ea		      nop
     17  f0f3					      REPEND
     18  f0f4		       ea		      nop
     17  f0f4					      REPEND
     18  f0f5		       ea		      nop
     17  f0f5					      REPEND
     18  f0f6		       ea		      nop
     17  f0f6					      REPEND
     18  f0f7		       ea		      nop
     19  f0f8					      REPEND
    362  f0f8		       a9 80		      LDA	#$80
    363  f0fa		       85 24		      STA	HMBL
    364  f0fc		       85 22		      STA	HMM0
    365  f0fe		       85 23		      STA	HMM1
    366  f100		       85 20		      STA	HMP0
    367  f102		       85 21		      STA	HMP1
    368  f104		       85 02		      STA	WSYNC
    369  f106		       85 2a		      STA	HMOVE	; 1/10			
    370  f108
    371  f108				   ConfigVBlankTimer
    372  f108		       a5 c6		      LDA	GameMode
    373  f10a		       c9 10		      CMP	#MAX_GAME_MODE
    374  f10c		       f0 05		      BEQ	SetVblankTimerQrCode
    375  f10e		       a9 29		      LDA	#VBLANK_TIMER
    376  f110		       4c 15 f1 	      JMP	SetVblankTimer
    377  f113				   SetVblankTimerQrCode
    378  f113		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    379  f115
    380  f115				   SetVblankTimer
    381  f115		       85 02		      STA	WSYNC	;3
    382  f117		       8d 96 02 	      STA	TIM64T	;3	
    383  f11a		       a9 00		      LDA	#0	;2
    384  f11c		       85 00		      STA	VSYNC	;3	
    385  f11e
    386  f11e				   RandomizeGame
    387  f11e		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    388  f120		       d0 2d		      BNE	EndRandomizeGame
    389  f122		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    390  f124		       29 02		      AND	#%00000010
    391  f126		       f0 24		      BEQ	DeterministicGame
    392  f128		       a6 96		      LDX	TrafficOffset1 + 2
    393  f12a		       bd 00 fe 	      LDA	AesTable,X
    394  f12d		       45 8c		      EOR	FrameCount0
    395  f12f		       85 96		      STA	TrafficOffset1 + 2
    396  f131		       85 a6		      STA	OpTrafficOffset1 + 2
    397  f133		       a6 9a		      LDX	TrafficOffset2 + 2
    398  f135		       bd 00 fe 	      LDA	AesTable,X
    399  f138		       45 8c		      EOR	FrameCount0
    400  f13a		       85 9a		      STA	TrafficOffset2 + 2
    401  f13c		       85 aa		      STA	OpTrafficOffset2 + 2
    402  f13e		       a6 9e		      LDX	TrafficOffset3 + 2
    403  f140		       bd 00 fe 	      LDA	AesTable,X
    404  f143		       45 8c		      EOR	FrameCount0
    405  f145		       85 9e		      STA	TrafficOffset3 + 2
    406  f147		       85 ae		      STA	OpTrafficOffset3 + 2
    407  f149		       4c 4f f1 	      JMP	EndRandomizeGame
    408  f14c
    409  f14c				   DeterministicGame
    410  f14c		       20 27 f7 	      JSR	DefaultOffsets
    411  f14f
    412  f14f				   EndRandomizeGame
    413  f14f
    414  f14f
    415  f14f				   CountFrame
    416  f14f		       e6 8c		      INC	FrameCount0	; 5
    417  f151		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    418  f153		       e6 8d		      INC	FrameCount1	; 5 
    419  f155				   SkipIncFC1
    420  f155
    421  f155				   CallDrawQrCode
    422  f155		       a5 c6		      LDA	GameMode
    423  f157		       c9 10		      CMP	#MAX_GAME_MODE
    424  f159		       d0 03		      BNE	TestIsGameRunning
    425  f15b		       4c 88 fa 	      JMP	DrawQrCode
    426  f15e
    427  f15e							;Does not update the game if not running
    428  f15e				   TestIsGameRunning
    429  f15e		       a5 bd		      LDA	GameStatus	;3
    430  f160		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    431  f162				   SelectCarWithDpadCall		; Only do it when game is stoped
    432  f162		       a2 00		      LDX	#0	; Player 0
    433  f164		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    434  f166		       85 b0		      STA	Tmp0
    435  f168		       20 2b f8 	      JSR	SelectCarWithDpad
    436  f16b		       e8		      INX		; Player 1
    437  f16c		       20 2b f8 	      JSR	SelectCarWithDpad
    438  f16f
    439  f16f							; Needs to draw the opponent in the correct line even when game stoped  
    440  f16f							; Draeing is a destructive operation
    441  f16f		       20 3d f8 	      JSR	ProcessOpponentLine
    442  f172
    443  f172				   CallConfigureCarSprites
    444  f172		       20 e5 f7 	      JSR	ConfigureCarSprites
    445  f175				   SkipUpdateLogicJump
    446  f175		       4c be f1 	      JMP	SkipUpdateLogic
    447  f178				   ContinueWithGameLogic
    448  f178
    449  f178				   CallEverySecond		; Timer for now
    450  f178		       a2 00		      LDX	#0
    451  f17a		       20 5e fa 	      JSR	EverySecond
    452  f17d		       e8		      INX
    453  f17e		       20 5e fa 	      JSR	EverySecond
    454  f181
    455  f181				   ChangeTextFlickerMode
    456  f181		       a5 bc		      LDA	SwitchDebounceCounter
    457  f183		       d0 0d		      BNE	EndChangeTextFlickerMode
    458  f185		       ad 82 02 	      LDA	SWCHB
    459  f188		       29 02		      AND	#%00000010	;Game select
    460  f18a		       d0 06		      BNE	EndChangeTextFlickerMode
    461  f18c		       e6 df		      INC	TextFlickerMode
    462  f18e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    463  f190		       85 bc		      STA	SwitchDebounceCounter
    464  f192				   EndChangeTextFlickerMode
    465  f192
    466  f192				   CallProcessSpeed
    467  f192		       a2 00		      LDX	#0
    468  f194		       20 75 f9 	      JSR	ProcessSpeed
    469  f197
    470  f197		       e8		      INX		; Player 1
    471  f198		       20 75 f9 	      JSR	ProcessSpeed
    472  f19b
    473  f19b				   CallUpdateOffsets
    474  f19b		       a2 00		      LDX	#0	; Player 0
    475  f19d		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    476  f19f		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    477  f1a1		       a5 f0		      LDA	Player0SpeedL
    478  f1a3		       85 b4		      STA	Tmp4
    479  f1a5		       a5 f2		      LDA	Player0SpeedH
    480  f1a7		       85 b5		      STA	Tmp5
    481  f1a9		       20 22 f9 	      JSR	UpdateOffsets
    482  f1ac
    483  f1ac							;LDX Exits the call with correct value.
    484  f1ac		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    485  f1ae		       85 b3		      STA	Tmp3
    486  f1b0		       a5 f1		      LDA	Player1SpeedL
    487  f1b2		       85 b4		      STA	Tmp4
    488  f1b4		       a5 f3		      LDA	Player1SpeedH
    489  f1b6		       85 b5		      STA	Tmp5
    490  f1b8		       20 22 f9 	      JSR	UpdateOffsets
    491  f1bb
    492  f1bb				   CallProcessOpponentLine
    493  f1bb		       20 3d f8 	      JSR	ProcessOpponentLine
    494  f1be
    495  f1be				   SkipUpdateLogic		; Continue here if not paused
    496  f1be
    497  f1be				   CallStatusUpdateSbr
    498  f1be		       a2 00		      LDX	#0
    499  f1c0		       20 6b fa 	      JSR	CalculateGear
    500  f1c3		       20 78 fa 	      JSR	ProcessScoreFontColor
    501  f1c6		       e8		      INX
    502  f1c7		       20 6b fa 	      JSR	CalculateGear
    503  f1ca		       20 78 fa 	      JSR	ProcessScoreFontColor
    504  f1cd
    505  f1cd				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    506  f1cd		       a5 8c		      LDA	FrameCount0
    507  f1cf		       29 01		      AND	#%00000001
    508  f1d1		       d0 0c		      BNE	CallProcessPlayer1Status
    509  f1d3				   CallProcessPlayer0Status
    510  f1d3		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    511  f1d5		       85 b0		      STA	Tmp0
    512  f1d7		       a2 00		      LDX	#0
    513  f1d9		       20 18 fa 	      JSR	ProcessPlayerStatus
    514  f1dc		       4c e8 f1 	      JMP	EndCallProcessPlayerStatus
    515  f1df				   CallProcessPlayer1Status
    516  f1df		       a5 a2		      LDA	OpTrafficOffset0 + 2
    517  f1e1		       85 b0		      STA	Tmp0
    518  f1e3		       a2 01		      LDX	#1
    519  f1e5		       20 18 fa 	      JSR	ProcessPlayerStatus
    520  f1e8				   EndCallProcessPlayerStatus
    521  f1e8
    522  f1e8				   CallProcessPlayerSprites
    523  f1e8		       20 e5 f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    524  f1eb
    525  f1eb				   CallProcessSound		; We might save cycles by updating one channel per frame.
    526  f1eb		       a2 00		      LDX	#0
    527  f1ed		       a5 92		      LDA	TrafficOffset0 + 2
    528  f1ef		       85 b1		      STA	Tmp1
    529  f1f1		       20 f6 f5 	      JSR	ProcessSound
    530  f1f4		       e8		      INX		; Player 1
    531  f1f5		       a5 a2		      LDA	OpTrafficOffset0 + 2
    532  f1f7		       85 b1		      STA	Tmp1
    533  f1f9		       20 f6 f5 	      JSR	ProcessSound
    534  f1fc
    535  f1fc							;Could be done during on vblank to save this comparisson time (before draw score), 
    536  f1fc							;but I am saving vblank cycles for now, in case of 2 players.
    537  f1fc				   ChooseTextSide		; 
    538  f1fc		       a5 de		      LDA	TextSide	;3
    539  f1fe		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    540  f200		       4c b6 f2 	      JMP	RightScoreWrite
    541  f203
    542  f203				   LeftScoreWrite
    543  f203		       a5 c9		      LDA	ScoreFontColor
    544  f205		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    545  f207		       f0 77		      BEQ	PrintCheckpoint
    546  f209		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    547  f20b		       f0 7b		      BEQ	PrintStartGame
    548  f20d		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    549  f20f		       f0 3a		      BEQ	ProcessPlayer0OverText
    550  f211		       a5 bd		      LDA	GameStatus
    551  f213		       f0 7b		      BEQ	PrintHellwayLeft
    552  f215
    553  f215				   Digit0Timer
    554  f215		       a5 b8		      LDA	CountdownTimer	;3
    555  f217		       85 b0		      STA	Tmp0
    556  f219		       20 17 f8 	      JSR	BINBCD8
    557  f21c							; LDA Tmp1 Also returned in A
    558  f21c		       29 0f		      AND	#%00001111	;2
    559  f21e		       aa		      TAX		; 2
    560  f21f		       bd 6c fc 	      LDA	FontLookup,X	;4 
    561  f222		       85 d1		      STA	ScoreD1	;3
    562  f224
    563  f224				   Digit1Timer
    564  f224		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    565  f226		       4a		      LSR		; 2
    566  f227		       4a		      LSR		; 2
    567  f228		       4a		      LSR		; 2
    568  f229		       4a		      LSR		; 2
    569  f22a		       aa		      TAX		; 2
    570  f22b		       bd 6c fc 	      LDA	FontLookup,X	;4
    571  f22e		       85 d0		      STA	ScoreD0	;3
    572  f230
    573  f230				   SpeedBar
    574  f230		       a5 f0		      LDA	Player0SpeedL
    575  f232		       29 e0		      AND	#%11100000	;2 Discard the last bits
    576  f234		       18		      CLC
    577  f235		       2a		      ROL		;First goes into carry
    578  f236		       2a		      ROL
    579  f237		       2a		      ROL
    580  f238		       2a		      ROL
    581  f239		       85 b0		      STA	Tmp0
    582  f23b		       a5 f2		      LDA	Player0SpeedH
    583  f23d		       0a		      ASL
    584  f23e		       0a		      ASL
    585  f23f		       0a		      ASL
    586  f240		       05 b0		      ORA	Tmp0
    587  f242		       aa		      TAX		; 2
    588  f243		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    589  f246		       85 d2		      STA	ScoreD2	;3
    590  f248		       4c 59 f2 	      JMP	DistanceCheckpointCount
    591  f24b
    592  f24b				   ProcessPlayer0OverText
    593  f24b		       a5 f4		      LDA	IsOpponentInFront
    594  f24d		       30 05		      BMI	PrintPlayer0Lose
    595  f24f				   PrintPlayer0Win
    596  f24f		       a2 21		      LDX	#<WinText
    597  f251		       4c 56 f2 	      JMP	PrintPlayer0Status
    598  f254				   PrintPlayer0Lose
    599  f254		       a2 24		      LDX	#<LoseText
    600  f256				   PrintPlayer0Status
    601  f256		       20 3c f7 	      JSR	PrintStaticText
    602  f259
    603  f259				   DistanceCheckpointCount		; Will run all letters in the future
    604  f259		       a5 ba		      LDA	Traffic0Msb
    605  f25b		       29 01		      AND	#%00000001
    606  f25d		       0a		      ASL
    607  f25e		       0a		      ASL
    608  f25f		       0a		      ASL
    609  f260		       0a		      ASL
    610  f261		       85 b0		      STA	Tmp0
    611  f263		       a5 92		      LDA	TrafficOffset0 + 2	;3
    612  f265		       29 f0		      AND	#%11110000	;2
    613  f267		       4a		      LSR
    614  f268		       4a		      LSR
    615  f269		       4a		      LSR
    616  f26a		       4a		      LSR
    617  f26b		       05 b0		      ORA	Tmp0
    618  f26d		       aa		      TAX		; 2
    619  f26e		       bd 6c fc 	      LDA	FontLookup,X	;4 
    620  f271		       85 d3		      STA	ScoreD3	;3
    621  f273
    622  f273				   DistanceBar		; 16 subdivisions per checkpoint
    623  f273		       a5 92		      LDA	TrafficOffset0 + 2	;3
    624  f275		       29 0f		      AND	#%00001111	;2
    625  f277		       aa		      TAX		; 2
    626  f278		       bd 8c fc 	      LDA	BarLookup,X	;4 
    627  f27b		       85 d4		      STA	ScoreD4	;3
    628  f27d
    629  f27d				   EndDrawDistance
    630  f27d		       4c 52 f3 	      JMP	RightScoreWriteEnd	;3
    631  f280
    632  f280				   PrintCheckpoint
    633  f280		       a2 00		      LDX	#<CheckpointText
    634  f282		       20 3c f7 	      JSR	PrintStaticText
    635  f285		       4c 52 f3 	      JMP	RightScoreWriteEnd	;3
    636  f288				   PrintStartGame
    637  f288		       a2 17		      LDX	#<GoText
    638  f28a		       20 3c f7 	      JSR	PrintStaticText
    639  f28d		       4c 52 f3 	      JMP	RightScoreWriteEnd	;3
    640  f290
    641  f290				   PrintHellwayLeft
    642  f290		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    643  f292		       30 08		      BMI	ContinueWithDefaultLeftText
    644  f294				   Player0IsReady
    645  f294		       a2 1c		      LDX	#<ReadyText
    646  f296		       20 3c f7 	      JSR	PrintStaticText
    647  f299		       4c 52 f3 	      JMP	RightScoreWriteEnd	;3
    648  f29c				   ContinueWithDefaultLeftText
    649  f29c		       a5 8d		      LDA	FrameCount1
    650  f29e		       29 01		      AND	#1
    651  f2a0		       d0 05		      BNE	PrintCreditsLeft
    652  f2a2		       a2 04		      LDX	#<HellwayLeftText - 1	; Padding
    653  f2a4		       4c a9 f2 	      JMP	PrintGameMode
    654  f2a7				   PrintCreditsLeft
    655  f2a7		       a2 0d		      LDX	#<OpbText - 1	; Padding
    656  f2a9
    657  f2a9				   PrintGameMode
    658  f2a9		       20 3c f7 	      JSR	PrintStaticText
    659  f2ac		       a6 c6		      LDX	GameMode
    660  f2ae		       bd 6c fc 	      LDA	FontLookup,X	;4 
    661  f2b1		       85 d0		      STA	ScoreD0	;3
    662  f2b3		       4c 52 f3 	      JMP	RightScoreWriteEnd	;3
    663  f2b6
    664  f2b6				   RightScoreWrite
    665  f2b6		       a5 bd		      LDA	GameStatus
    666  f2b8		       f0 79		      BEQ	PrintHellwayRight
    667  f2ba		       a5 ca		      LDA	OpScoreFontColor
    668  f2bc		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    669  f2be		       f0 c0		      BEQ	PrintCheckpoint
    670  f2c0		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    671  f2c2		       f0 c4		      BEQ	PrintStartGame
    672  f2c4		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    673  f2c6		       f0 36		      BEQ	ProcessPlayer1OverText
    674  f2c8
    675  f2c8				   OpDigit0Timer
    676  f2c8		       a5 b9		      LDA	OpCountdownTimer	;3
    677  f2ca		       85 b0		      STA	Tmp0
    678  f2cc		       20 17 f8 	      JSR	BINBCD8
    679  f2cf							; LDA Tmp1 Also returned in A
    680  f2cf		       29 0f		      AND	#%00001111	;2
    681  f2d1		       aa		      TAX		; 2
    682  f2d2		       bd 6c fc 	      LDA	FontLookup,X	;4 
    683  f2d5		       85 d4		      STA	ScoreD4	;3
    684  f2d7
    685  f2d7				   OpDigit1Timer
    686  f2d7		       a5 b1		      LDA	Tmp1	;3
    687  f2d9		       4a		      LSR		; 2
    688  f2da		       4a		      LSR		; 2
    689  f2db		       4a		      LSR		; 2
    690  f2dc		       4a		      LSR		; 2
    691  f2dd		       aa		      TAX		; 2
    692  f2de		       bd 6c fc 	      LDA	FontLookup,X	;4
    693  f2e1		       85 d3		      STA	ScoreD3	;3
    694  f2e3
    695  f2e3				   OpSpeedBar
    696  f2e3		       a5 f1		      LDA	Player1SpeedL
    697  f2e5		       29 e0		      AND	#%11100000	;2 Discard the last bits
    698  f2e7		       18		      CLC
    699  f2e8		       2a		      ROL		;First goes into carry
    700  f2e9		       2a		      ROL
    701  f2ea		       2a		      ROL
    702  f2eb		       2a		      ROL
    703  f2ec		       85 b0		      STA	Tmp0
    704  f2ee		       a5 f3		      LDA	Player1SpeedH
    705  f2f0		       0a		      ASL
    706  f2f1		       0a		      ASL
    707  f2f2		       0a		      ASL
    708  f2f3		       05 b0		      ORA	Tmp0
    709  f2f5		       aa		      TAX		; 2
    710  f2f6		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    711  f2f9		       85 d2		      STA	ScoreD2	;3
    712  f2fb		       4c 0c f3 	      JMP	OpDistanceCheckpointCount
    713  f2fe
    714  f2fe				   ProcessPlayer1OverText
    715  f2fe		       a5 f4		      LDA	IsOpponentInFront
    716  f300		       30 05		      BMI	PrintPlayer1Lose
    717  f302				   PrintPlayer1Win
    718  f302		       a2 1f		      LDX	#<WinText - 2
    719  f304		       4c 0c f3 	      JMP	OpDistanceCheckpointCount
    720  f307				   PrintPlayer1Lose
    721  f307		       a2 22		      LDX	#<LoseText - 2
    722  f309				   PrintPlayer1Status
    723  f309		       20 3c f7 	      JSR	PrintStaticText
    724  f30c
    725  f30c				   OpDistanceCheckpointCount
    726  f30c		       a5 bb		      LDA	OpTraffic0Msb
    727  f30e		       29 01		      AND	#%00000001
    728  f310		       0a		      ASL
    729  f311		       0a		      ASL
    730  f312		       0a		      ASL
    731  f313		       0a		      ASL
    732  f314		       85 b0		      STA	Tmp0
    733  f316		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    734  f318		       29 f0		      AND	#%11110000	;2
    735  f31a		       4a		      LSR
    736  f31b		       4a		      LSR
    737  f31c		       4a		      LSR
    738  f31d		       4a		      LSR
    739  f31e		       05 b0		      ORA	Tmp0
    740  f320		       aa		      TAX		; 2
    741  f321		       bd 6c fc 	      LDA	FontLookup,X	;4 
    742  f324		       85 d1		      STA	ScoreD1	;3
    743  f326
    744  f326				   OpDistanceBar		; 16 subdivisions per checkpoint
    745  f326		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    746  f328		       29 0f		      AND	#%00001111	;2
    747  f32a		       aa		      TAX		; 2
    748  f32b		       bd 8c fc 	      LDA	BarLookup,X	;4 
    749  f32e		       85 d0		      STA	ScoreD0	;3
    750  f330		       4c 52 f3 	      JMP	RightScoreWriteEnd
    751  f333
    752  f333				   PrintHellwayRight
    753  f333		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    754  f335		       30 08		      BMI	ContinueWithDefaultRightText
    755  f337				   Player1IsReady
    756  f337		       a2 1c		      LDX	#<ReadyText
    757  f339		       20 3c f7 	      JSR	PrintStaticText
    758  f33c		       4c 52 f3 	      JMP	RightScoreWriteEnd	;3
    759  f33f				   ContinueWithDefaultRightText
    760  f33f		       a5 8d		      LDA	FrameCount1
    761  f341		       29 01		      AND	#1
    762  f343		       d0 05		      BNE	PrintCreditsRight
    763  f345		       a2 09		      LDX	#<HellwayRightText
    764  f347		       4c 4c f3 	      JMP	PrintRightIntro
    765  f34a				   PrintCreditsRight
    766  f34a		       a2 12		      LDX	#<YearText
    767  f34c				   PrintRightIntro
    768  f34c		       20 3c f7 	      JSR	PrintStaticText
    769  f34f		       4c 52 f3 	      JMP	RightScoreWriteEnd
    770  f352				   RightScoreWriteEnd
    771  f352
    772  f352
    773  f352				   ConfigurePFForScore
    774  f352		       20 8e f6 	      JSR	ClearAll
    775  f355		       a9 02		      LDA	#%00000010	; Score mode
    776  f357		       85 0a		      STA	CTRLPF
    777  f359		       a5 de		      LDA	TextSide	;3
    778  f35b		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    779  f35d				   RightScoreOn
    780  f35d		       a5 ca		      LDA	OpScoreFontColor
    781  f35f		       85 07		      STA	COLUP1
    782  f361		       a9 00		      LDA	#BACKGROUND_COLOR
    783  f363		       85 06		      STA	COLUP0
    784  f365		       4c 70 f3 	      JMP	CallWaitForVblankEnd
    785  f368				   LeftScoreOn
    786  f368		       a5 c9		      LDA	ScoreFontColor
    787  f36a		       85 06		      STA	COLUP0
    788  f36c		       a9 00		      LDA	#BACKGROUND_COLOR
    789  f36e		       85 07		      STA	COLUP1
    790  f370
    791  f370							; After here we are going to update the screen, No more heavy code
    792  f370				   CallWaitForVblankEnd
    793  f370		       20 b6 f7 	      JSR	WaitForVblankEnd
    794  f373
    795  f373				   DrawScoreHud
    796  f373		       20 5a f7 	      JSR	PrintScore
    797  f376
    798  f376							; 4 lines to go crazy
    799  f376		       85 02		      STA	WSYNC
    800  f378							;STA HMOVE
    801  f378
    802  f378		       85 02		      STA	WSYNC
    803  f37a		       85 2a		      STA	HMOVE
    804  f37c
    805  f37c				   PrepareForTraffic
    806  f37c		       20 a4 f6 	      JSR	ClearPF	; 32
    807  f37f
    808  f37f		       85 02		      STA	WSYNC
    809  f381		       85 2a		      STA	HMOVE
    810  f383		       85 02		      STA	WSYNC
    811  f385		       85 2a		      STA	HMOVE
    812  f387
    813  f387		       a9 30		      LDA	#%00110000	; 2 Score mode
    814  f389		       85 0a		      STA	CTRLPF	;3
    815  f38b
    816  f38b		       a5 8c		      LDA	FrameCount0	;3
    817  f38d		       29 01		      AND	#%00000001	;2
    818  f38f		       aa		      TAX		;2
    819  f390		       b5 c2		      LDA	TrafficColor,X	;4
    820  f392		       85 08		      STA	COLUPF	;3
    821  f394
    822  f394		       a9 96		      LDA	#PLAYER1_COLOR	;2
    823  f396		       85 07		      STA	COLUP1	;3
    824  f398
    825  f398		       a5 c9		      LDA	ScoreFontColor	;3
    826  f39a		       85 06		      STA	COLUP0	;3
    827  f39c
    828  f39c		       a5 ca		      LDA	OpScoreFontColor	;3
    829  f39e		       85 07		      STA	COLUP1	;3
    830  f3a0
    831  f3a0		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    832  f3a2
    833  f3a2		       a5 8c		      LDA	FrameCount0	;Brach flag
    834  f3a4		       29 01		      AND	#%00000001
    835  f3a6
    836  f3a6		       d0 03		      BNE	OpScanLoop	;2
    837  f3a8		       4c 65 f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    838  f3ab							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    839  f3ab
    840  f3ab							;main scanline loop...
    841  f3ab				   OpScanLoop
    842  f3ab		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    843  f3ad
    844  f3ad		       a5 80		      LDA	GRP0Cache	;3
    845  f3af		       85 1b		      STA	GRP0	;3
    846  f3b1
    847  f3b1		       a5 84		      LDA	GRP1Cache	;3
    848  f3b3		       85 1c		      STA	GRP1	;3
    849  f3b5
    850  f3b5		       a5 85		      LDA	ENABLCache	;3
    851  f3b7		       85 1f		      STA	ENABL	;3
    852  f3b9
    853  f3b9		       a5 86		      LDA	ENAM0Cache	;3
    854  f3bb		       85 1d		      STA	ENAM0	;3
    855  f3bd
    856  f3bd		       a5 87		      LDA	ENAM1Cache	;3
    857  f3bf		       85 1e		      STA	ENAM1	;3
    858  f3c1
    859  f3c1		       a5 81		      LDA	PF0Cache	;3
    860  f3c3		       85 0d		      STA	PF0	;3
    861  f3c5
    862  f3c5		       a9 00		      LDA	#0	;2
    863  f3c7							;STA PF0	     ;3
    864  f3c7		       85 80		      STA	GRP0Cache	;3
    865  f3c9		       85 86		      STA	ENAM0Cache	;3
    866  f3cb		       85 85		      STA	ENABLCache	;3
    867  f3cd		       85 87		      STA	ENAM1Cache	; 3
    868  f3cf							;STA GRP1Cache ;3
    869  f3cf		       85 0d		      STA	PF0	;3
    870  f3d1							;STA PF2	     ;3
    871  f3d1
    872  f3d1		       a5 83		      LDA	PF2Cache	;3
    873  f3d3		       85 0f		      STA	PF2	;3
    874  f3d5
    875  f3d5				   OpDrawCar0
    876  f3d5		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    877  f3d7		       b0 04		      BCS	OpSkipDrawCar	;2
    878  f3d9		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    879  f3db		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    880  f3dd				   OpSkipDrawCar
    881  f3dd
    882  f3dd							;BEQ DrawTraffic3
    883  f3dd				   OpDrawTraffic1		; 33
    884  f3dd		       98		      TYA		; 2
    885  f3de		       18		      CLC		; 2 
    886  f3df		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    887  f3e1		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    888  f3e3		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    889  f3e5		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    890  f3e7		       4c ec f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    891  f3ea				   OpEorOffsetWithCarry
    892  f3ea		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    893  f3ec				   OpAfterEorOffsetWithCarry		;17
    894  f3ec		       aa		      TAX		;2
    895  f3ed		       bd 00 fe 	      LDA	AesTable,X	; 4
    896  f3f0		       c5 bf		      CMP	OpTrafficChance	;3
    897  f3f2		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    898  f3f4		       a9 ff		      LDA	#$FF	;2
    899  f3f6		       85 86		      STA	ENAM0Cache	;3
    900  f3f8				   OpFinishDrawTraffic1
    901  f3f8
    902  f3f8				   OpErasePF2
    903  f3f8		       a9 00		      LDA	#0
    904  f3fa		       85 0f		      STA	PF2
    905  f3fc
    906  f3fc				   OpDrawTraffic2		; 33
    907  f3fc		       98		      TYA		; 2
    908  f3fd		       18		      CLC		; 2 
    909  f3fe		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    910  f400		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    911  f402		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    912  f404		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    913  f406		       4c 0b f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    914  f409				   OpEorOffsetWithCarry2
    915  f409		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    916  f40b				   OpAfterEorOffsetWithCarry2		;17
    917  f40b		       aa		      TAX		;2
    918  f40c		       bd 00 fe 	      LDA	AesTable,X	; 4
    919  f40f		       c5 bf		      CMP	OpTrafficChance	;3
    920  f411		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    921  f413		       a9 02		      LDA	#%00000010	;2
    922  f415		       85 85		      STA	ENABLCache	;3
    923  f417				   OpFinishDrawTraffic2
    924  f417
    925  f417							;STA WSYNC ;65 / 137
    926  f417
    927  f417							; LDA Tmp0 ; Flicker this line if drawing car
    928  f417							; BEQ FinishDrawTraffic4
    929  f417				   OpDrawTraffic3		; 33
    930  f417		       98		      TYA		; 2
    931  f418		       18		      CLC		; 2 
    932  f419		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    933  f41b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    934  f41d		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    935  f41f		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    936  f421		       4c 26 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    937  f424				   OpEorOffsetWithCarry3
    938  f424		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    939  f426				   OpAfterEorOffsetWithCarry3		;17
    940  f426		       aa		      TAX		;2
    941  f427		       bd 00 fe 	      LDA	AesTable,X	; 4
    942  f42a		       c5 bf		      CMP	OpTrafficChance	;3
    943  f42c		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    944  f42e		       a9 02		      LDA	#%00000010	;2
    945  f430		       85 87		      STA	ENAM1Cache
    946  f432				   OpFinishDrawTraffic3
    947  f432
    948  f432				   OpDrawOponent		;26
    949  f432		       84 b0		      STY	Tmp0	;3
    950  f434		       a4 cf		      LDY	OpponentLine	;3
    951  f436		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    952  f438		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    953  f43a				   OpDrawOpponent
    954  f43a		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    955  f43c		       85 80		      STA	GRP0Cache	;3
    956  f43e		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    957  f440		       a4 b0		      LDY	Tmp0	;3
    958  f442		       4c 56 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    959  f445				   OpSkipDrawOpponent
    960  f445		       c6 cf		      DEC	OpponentLine	;5
    961  f447		       a4 b0		      LDY	Tmp0	;3
    962  f449
    963  f449
    964  f449				   OpDrawTraffic0		; 21 2pe
    965  f449		       98		      TYA		; 2
    966  f44a		       18		      CLC		; 2 
    967  f44b		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    968  f44d		       29 08		      AND	#%00001000	;2
    969  f44f		       f0 05		      BEQ	OpHasNoBorderP0	;3
    970  f451				   OpHasBorderP0
    971  f451		       a9 70		      LDA	#%01110000	; 2
    972  f453		       4c 58 f4 	      JMP	OpStoreBorderP0	; 3
    973  f456				   OpHasNoBorderP0
    974  f456		       a9 00		      LDA	#0	; 2
    975  f458				   OpStoreBorderP0
    976  f458		       85 81		      STA	PF0Cache	; 3
    977  f45a		       85 83		      STA	PF2Cache	; 3
    978  f45c
    979  f45c				   OpSkipDrawTraffic0
    980  f45c
    981  f45c				   OpWhileScanLoop
    982  f45c		       88		      DEY		;2
    983  f45d		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    984  f45f		       4c ab f3 	      JMP	OpScanLoop	;3
    985  f462				   OpFinishScanLoop		; 7 209 of 222
    986  f462		       4c 1a f5 	      JMP	FinishScanLoop
    987  f465
    988  f465							;main scanline loop...
    989  f465				   ScanLoop
    990  f465		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    991  f467
    992  f467		       a5 81		      LDA	PF0Cache	;3
    993  f469		       85 0d		      STA	PF0	;3
    994  f46b
    995  f46b		       a5 80		      LDA	GRP0Cache	;3
    996  f46d		       85 1b		      STA	GRP0	;3
    997  f46f
    998  f46f		       a5 84		      LDA	GRP1Cache	;3
    999  f471		       85 1c		      STA	GRP1	;3
   1000  f473
   1001  f473		       a5 86		      LDA	ENAM0Cache	;3
   1002  f475		       85 1d		      STA	ENAM0	;3
   1003  f477
   1004  f477		       a5 85		      LDA	ENABLCache	;3
   1005  f479		       85 1f		      STA	ENABL	;3
   1006  f47b
   1007  f47b		       a5 87		      LDA	ENAM1Cache	;3
   1008  f47d		       85 1e		      STA	ENAM1	;3
   1009  f47f
   1010  f47f		       a5 83		      LDA	PF2Cache	;3
   1011  f481		       85 0f		      STA	PF2	;3
   1012  f483
   1013  f483		       a9 00		      LDA	#0	;2
   1014  f485		       85 0d		      STA	PF0	;3
   1015  f487		       85 84		      STA	GRP1Cache	;3
   1016  f489		       85 85		      STA	ENABLCache	;3
   1017  f48b		       85 86		      STA	ENAM0Cache	;3
   1018  f48d		       85 87		      STA	ENAM1Cache	; 3
   1019  f48f							;STA GRP0Cache
   1020  f48f		       85 0f		      STA	PF2	;3
   1021  f491
   1022  f491				   DrawCar0
   1023  f491		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1024  f493		       b0 04		      BCS	SkipDrawCar	;2
   1025  f495		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1026  f497		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1027  f499				   SkipDrawCar
   1028  f499
   1029  f499							;BEQ DrawTraffic3
   1030  f499				   DrawTraffic1 		; 33
   1031  f499		       98		      TYA		; 2
   1032  f49a		       18		      CLC		; 2 
   1033  f49b		       65 95		      ADC	TrafficOffset1 + 1	;3
   1034  f49d		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1035  f49f		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1036  f4a1		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1037  f4a3		       4c a8 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1038  f4a6				   EorOffsetWithCarry
   1039  f4a6		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1040  f4a8				   AfterEorOffsetWithCarry		;17
   1041  f4a8		       aa		      TAX		;2
   1042  f4a9		       bd 00 fe 	      LDA	AesTable,X	; 4
   1043  f4ac		       c5 be		      CMP	TrafficChance	;3
   1044  f4ae		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1045  f4b0		       a9 ff		      LDA	#$FF	;2
   1046  f4b2		       85 86		      STA	ENAM0Cache	;3
   1047  f4b4				   FinishDrawTraffic1
   1048  f4b4
   1049  f4b4				   DrawTraffic2 		; 33
   1050  f4b4		       98		      TYA		; 2
   1051  f4b5		       18		      CLC		; 2 
   1052  f4b6		       65 99		      ADC	TrafficOffset2 + 1	;3
   1053  f4b8		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1054  f4ba		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1055  f4bc		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1056  f4be		       4c c3 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1057  f4c1				   EorOffsetWithCarry2
   1058  f4c1		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1059  f4c3				   AfterEorOffsetWithCarry2		;17
   1060  f4c3		       aa		      TAX		;2
   1061  f4c4		       bd 00 fe 	      LDA	AesTable,X	; 4
   1062  f4c7		       c5 be		      CMP	TrafficChance	;3
   1063  f4c9		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1064  f4cb		       a9 02		      LDA	#%00000010	;2
   1065  f4cd		       85 85		      STA	ENABLCache	;3
   1066  f4cf				   FinishDrawTraffic2
   1067  f4cf
   1068  f4cf							;STA WSYNC ;65 / 137
   1069  f4cf
   1070  f4cf							; LDA Tmp0 ; Flicker this line if drawing car
   1071  f4cf							; BEQ FinishDrawTraffic4
   1072  f4cf				   DrawTraffic3 		; 33
   1073  f4cf		       98		      TYA		; 2
   1074  f4d0		       18		      CLC		; 2 
   1075  f4d1		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1076  f4d3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1077  f4d5		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1078  f4d7		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1079  f4d9		       4c de f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1080  f4dc				   EorOffsetWithCarry3
   1081  f4dc		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1082  f4de				   AfterEorOffsetWithCarry3		;17
   1083  f4de		       aa		      TAX		;2
   1084  f4df		       bd 00 fe 	      LDA	AesTable,X	; 4
   1085  f4e2		       c5 be		      CMP	TrafficChance	;3
   1086  f4e4		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1087  f4e6		       a9 02		      LDA	#%00000010	;2
   1088  f4e8		       85 87		      STA	ENAM1Cache
   1089  f4ea				   FinishDrawTraffic3
   1090  f4ea
   1091  f4ea
   1092  f4ea				   DrawOponent		;26
   1093  f4ea		       84 b0		      STY	Tmp0	;3
   1094  f4ec		       a4 cf		      LDY	OpponentLine	;3
   1095  f4ee		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1096  f4f0		       b0 0b		      BCS	SkipDrawOpponent	;2
   1097  f4f2				   DrawOpponent
   1098  f4f2		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1099  f4f4		       85 84		      STA	GRP1Cache	;3
   1100  f4f6		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1101  f4f8		       a4 b0		      LDY	Tmp0	;3
   1102  f4fa		       4c 0e f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1103  f4fd				   SkipDrawOpponent
   1104  f4fd		       c6 cf		      DEC	OpponentLine	;5
   1105  f4ff		       a4 b0		      LDY	Tmp0	;3
   1106  f501
   1107  f501				   DrawTraffic0 		; 21 2pe
   1108  f501		       98		      TYA		; 2
   1109  f502		       18		      CLC		; 2 
   1110  f503		       65 91		      ADC	TrafficOffset0 + 1	;3
   1111  f505		       29 08		      AND	#%00001000	;2
   1112  f507		       f0 05		      BEQ	HasNoBorderP0	;3
   1113  f509				   HasBorderP0
   1114  f509		       a9 70		      LDA	#%01110000	; 2
   1115  f50b		       4c 10 f5 	      JMP	StoreBorderP0	; 3
   1116  f50e				   HasNoBorderP0
   1117  f50e		       a9 00		      LDA	#0	; 2
   1118  f510				   StoreBorderP0
   1119  f510		       85 81		      STA	PF0Cache	; 3
   1120  f512		       85 83		      STA	PF2Cache	; 3
   1121  f514
   1122  f514				   SkipDrawTraffic0
   1123  f514
   1124  f514				   WhileScanLoop
   1125  f514		       88		      DEY		;2
   1126  f515		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1127  f517		       4c 65 f4 	      JMP	ScanLoop	;3
   1128  f51a				   FinishScanLoop		; 7 209 of 222
   1129  f51a
   1130  f51a		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1131  f51c		       20 b3 f6 	      JSR	LoadAll
   1132  f51f		       85 02		      STA	WSYNC	; do stuff!
   1133  f521		       85 02		      STA	WSYNC
   1134  f523		       85 02		      STA	WSYNC
   1135  f525
   1136  f525				   PrepareOverscan
   1137  f525		       a9 02		      LDA	#2
   1138  f527		       85 02		      STA	WSYNC
   1139  f529							;STA HMOVE	; HMOVE 10
   1140  f529		       85 01		      STA	VBLANK
   1141  f52b
   1142  f52b		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1143  f52d		       8d 96 02 	      STA	TIM64T
   1144  f530
   1145  f530		       85 2b		      STA	HMCLR	; Before we process car movement
   1146  f532							;Read Fire Button before, will make it start the game for now.
   1147  f532				   StartGame
   1148  f532		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1149  f534		       25 0d		      AND	INPT5	;3 player 1
   1150  f536		       30 3a		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1151  f538		       a5 8c		      LDA	FrameCount0
   1152  f53a		       29 01		      AND	#%00000001
   1153  f53c		       d0 34		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1154  f53e		       a5 bd		      LDA	GameStatus	;3
   1155  f540		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1156  f542		       d0 2e		      BNE	SkipGameStart
   1157  f544		       a5 c6		      LDA	GameMode
   1158  f546		       c9 10		      CMP	#MAX_GAME_MODE
   1159  f548		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1160  f54a		       a9 00		      LDA	#0
   1161  f54c		       85 c6		      STA	GameMode
   1162  f54e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1163  f550		       85 bc		      STA	SwitchDebounceCounter
   1164  f552		       4c 72 f5 	      JMP	SkipGameStart
   1165  f555				   SetGameRunningIfBothPressing
   1166  f555		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1167  f557		       05 0d		      ORA	INPT5	;3 player 1
   1168  f559		       30 17		      BMI	SkipGameStart
   1169  f55b				   SetGameRunning
   1170  f55b		       e6 bd		      INC	GameStatus
   1171  f55d		       a9 00		      LDA	#0	;
   1172  f55f		       85 8c		      STA	FrameCount0
   1173  f561		       85 8d		      STA	FrameCount1
   1174  f563		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1175  f565		       85 c9		      STA	ScoreFontColor
   1176  f567		       85 ca		      STA	OpScoreFontColor
   1177  f569		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1178  f56b		       85 cb		      STA	ScoreFontColorHoldChange
   1179  f56d		       85 cc		      STA	OpScoreFontColorHoldChange
   1180  f56f		       4c e6 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1181  f572				   SkipGameStart
   1182  f572
   1183  f572				   ReadSwitches
   1184  f572		       a6 bc		      LDX	SwitchDebounceCounter
   1185  f574		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1186  f576		       a9 01		      LDA	#%00000001
   1187  f578		       2c 82 02 	      BIT	SWCHB
   1188  f57b		       d0 07		      BNE	SkipReset
   1189  f57d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1190  f57f		       85 bc		      STA	SwitchDebounceCounter
   1191  f581		       4c ee f5 	      JMP	OverScanWaitBeforeReset
   1192  f584				   SkipReset
   1193  f584
   1194  f584				   GameModeSelect
   1195  f584		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1196  f586		       d0 22		      BNE	SkipGameSelect
   1197  f588		       a2 00		      LDX	#0
   1198  f58a		       20 df f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1199  f58d		       e8		      INX
   1200  f58e		       20 df f6 	      JSR	ConfigureDifficulty
   1201  f591				   ContinueGameSelect
   1202  f591		       a9 02		      LDA	#%00000010
   1203  f593		       2c 82 02 	      BIT	SWCHB
   1204  f596		       d0 12		      BNE	SkipGameSelect
   1205  f598		       a6 c6		      LDX	GameMode
   1206  f59a		       e0 10		      CPX	#MAX_GAME_MODE
   1207  f59c		       f0 04		      BEQ	ResetGameMode
   1208  f59e		       e8		      INX
   1209  f59f		       4c a4 f5 	      JMP	StoreGameMode
   1210  f5a2				   ResetGameMode
   1211  f5a2		       a2 00		      LDX	#0
   1212  f5a4				   StoreGameMode
   1213  f5a4		       86 c6		      STX	GameMode
   1214  f5a6		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1215  f5a8		       85 bc		      STA	SwitchDebounceCounter
   1216  f5aa				   SkipGameSelect
   1217  f5aa		       4c af f5 	      JMP	EndReadSwitches
   1218  f5ad				   DecrementSwitchDebounceCounter
   1219  f5ad		       c6 bc		      DEC	SwitchDebounceCounter
   1220  f5af				   EndReadSwitches
   1221  f5af
   1222  f5af				   DoNotTurnBeforeStart
   1223  f5af							;STA HMCLR
   1224  f5af		       a5 bd		      LDA	GameStatus
   1225  f5b1		       f0 33		      BEQ	OverScanWait
   1226  f5b3
   1227  f5b3							; Last thing, will overrride hmove
   1228  f5b3				   CallTestColisionAndMove
   1229  f5b3		       a2 00		      LDX	#0	; Player 0
   1230  f5b5							; Colision with traffic, each player check different flags,
   1231  f5b5		       a5 8c		      LDA	FrameCount0
   1232  f5b7		       29 01		      AND	#%00000001
   1233  f5b9		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1234  f5bb		       20 8e f8 	      JSR	IsOpponentColliding
   1235  f5be		       05 01		      ORA	CXM1P
   1236  f5c0		       4a		      LSR
   1237  f5c1		       05 00		      ORA	CXM0P
   1238  f5c3		       05 02		      ORA	CXP0FB
   1239  f5c5							; ORA CXPPMM ; Collision between players will have its own rules
   1240  f5c5				   SkipColisionPlayer0		; Should not colide on opponent side.
   1241  f5c5		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1242  f5c7		       85 b2		      STA	Tmp2
   1243  f5c9		       20 a2 f8 	      JSR	TestCollisionAndMove
   1244  f5cc
   1245  f5cc		       e8		      INX		; player 1
   1246  f5cd		       a5 8c		      LDA	FrameCount0
   1247  f5cf		       29 01		      AND	#%00000001
   1248  f5d1		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1249  f5d3		       20 8e f8 	      JSR	IsOpponentColliding
   1250  f5d6		       05 00		      ORA	CXM0P
   1251  f5d8		       4a		      LSR
   1252  f5d9		       05 01		      ORA	CXM1P
   1253  f5db		       05 03		      ORA	CXP1FB
   1254  f5dd				   SkipColisionPlayer1
   1255  f5dd		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1256  f5df		       85 b2		      STA	Tmp2
   1257  f5e1		       20 a2 f8 	      JSR	TestCollisionAndMove
   1258  f5e4
   1259  f5e4				   ClearCollision
   1260  f5e4		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1261  f5e6
   1262  f5e6				   OverScanWait
   1263  f5e6		       ad 84 02 	      LDA	INTIM
   1264  f5e9		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1265  f5eb		       4c d6 f0 	      JMP	MainLoop
   1266  f5ee
   1267  f5ee				   OverScanWaitBeforeReset
   1268  f5ee		       ad 84 02 	      LDA	INTIM
   1269  f5f1		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1270  f5f3		       4c 14 f0 	      JMP	Start
   1271  f5f6
   1272  f5f6				   Subroutines
   1273  f5f6
   1274  f5f6							;X Player
   1275  f5f6							;Tmp1 TrafficOffset 2
   1276  f5f6				   ProcessSound
   1277  f5f6				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1278  f5f6		       b5 c9		      LDA	ScoreFontColor,X	;3
   1279  f5f8		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1280  f5fa		       f0 6a		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1281  f5fc		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1282  f5fe		       f0 29		      BEQ	PlayCheckpoint	;2
   1283  f600		       b5 8e		      LDA	CollisionCounter,X	;3
   1284  f602		       c9 e0		      CMP	#$E0	;2
   1285  f604		       b0 14		      BCS	PlayColision	;2
   1286  f606		       b5 cd		      LDA	NextCheckpoint,X	;3
   1287  f608		       38		      SEC		;2
   1288  f609		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1289  f60b		       c9 02		      CMP	#$02	;2
   1290  f60d		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1291  f60f		       b5 b8		      LDA	CountdownTimer,X	; 3
   1292  f611		       f0 53		      BEQ	EngineSound	;2
   1293  f613		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1294  f615		       90 37		      BCC	PlayWarnTimeEnding	;4
   1295  f617		       4c 66 f6 	      JMP	EngineSound	;3
   1296  f61a				   PlayColision
   1297  f61a		       a9 1f		      LDA	#31
   1298  f61c		       95 17		      STA	AUDF0,X
   1299  f61e		       a9 08		      LDA	#8
   1300  f620		       95 15		      STA	AUDC0,X
   1301  f622		       a9 08		      LDA	#8
   1302  f624		       95 19		      STA	AUDV0,X
   1303  f626		       4c 8d f6 	      JMP	EndSound
   1304  f629
   1305  f629				   PlayCheckpoint
   1306  f629		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1307  f62b		       4a		      LSR		;2
   1308  f62c		       4a		      LSR		;2
   1309  f62d		       4a		      LSR		;2
   1310  f62e		       95 17		      STA	AUDF0,X	;3
   1311  f630		       a9 0c		      LDA	#12	;2
   1312  f632		       95 15		      STA	AUDC0,X	;3
   1313  f634		       a9 06		      LDA	#6	;2
   1314  f636		       95 19		      STA	AUDV0,X	;3
   1315  f638		       4c 8d f6 	      JMP	EndSound	;3
   1316  f63b
   1317  f63b				   PlayBeforeCheckpoint
   1318  f63b		       a5 8c		      LDA	FrameCount0	;3
   1319  f63d		       29 1c		      AND	#%00011100	;2
   1320  f63f		       09 03		      ORA	#%00000011	;2
   1321  f641		       95 17		      STA	AUDF0,X	;3
   1322  f643		       a9 0c		      LDA	#12	;2
   1323  f645		       95 15		      STA	AUDC0,X	;3
   1324  f647		       a9 03		      LDA	#3	;2
   1325  f649		       95 19		      STA	AUDV0,X	;3
   1326  f64b		       4c 8d f6 	      JMP	EndSound	;3
   1327  f64e
   1328  f64e				   PlayWarnTimeEnding
   1329  f64e		       a5 8c		      LDA	FrameCount0	;3
   1330  f650		       29 04		      AND	#%00000100	;2
   1331  f652		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1332  f654		       18		      CLC		;2
   1333  f655		       a9 0a		      LDA	#10	;2
   1334  f657		       75 b8		      ADC	CountdownTimer,X	;2
   1335  f659		       95 17		      STA	AUDF0,X	;3
   1336  f65b		       a9 0c		      LDA	#12	;2
   1337  f65d		       95 15		      STA	AUDC0,X	;3
   1338  f65f		       a9 03		      LDA	#3	;2
   1339  f661		       95 19		      STA	AUDV0,X	;3
   1340  f663		       4c 8d f6 	      JMP	EndSound	;3
   1341  f666
   1342  f666				   EngineSound		;41
   1343  f666		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1344  f668		       95 19		      STA	AUDV0,X
   1345  f66a		       b5 b8		      LDA	CountdownTimer,X	;3
   1346  f66c		       f0 1b		      BEQ	EngineOff	;2
   1347  f66e		       b4 d5		      LDY	Gear,X
   1348  f670		       b5 f0		      LDA	Player0SpeedL,X	;3
   1349  f672		       4a		      LSR		;2
   1350  f673		       4a		      LSR		;2
   1351  f674		       4a		      LSR		;2
   1352  f675		       29 0f		      AND	#%00001111	;2
   1353  f677		       85 b0		      STA	Tmp0	;3
   1354  f679		       b9 43 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1355  f67c		       38		      SEC		;2
   1356  f67d		       e5 b0		      SBC	Tmp0	;3
   1357  f67f		       95 17		      STA	AUDF0,X	;3
   1358  f681		       b9 3d ff 	      LDA	EngineSoundType,Y	;4
   1359  f684		       95 15		      STA	AUDC0,X	;3
   1360  f686		       4c 8d f6 	      JMP	EndEngineSound	;3
   1361  f689				   EngineOff
   1362  f689				   MuteSound
   1363  f689		       a9 00		      LDA	#0
   1364  f68b		       95 15		      STA	AUDC0,X
   1365  f68d				   EndEngineSound
   1366  f68d				   EndSound
   1367  f68d		       60		      RTS
   1368  f68e
   1369  f68e				   ClearAll		; 58
   1370  f68e		       a9 00		      LDA	#0	;2
   1371  f690		       85 1b		      STA	GRP0	;3
   1372  f692		       85 1c		      STA	GRP1	;3
   1373  f694		       85 1f		      STA	ENABL	;3
   1374  f696		       85 1d		      STA	ENAM0	;3
   1375  f698		       85 1e		      STA	ENAM1	;3
   1376  f69a		       85 80		      STA	GRP0Cache	;3
   1377  f69c		       85 84		      STA	GRP1Cache	;3
   1378  f69e		       85 85		      STA	ENABLCache	;3
   1379  f6a0		       85 86		      STA	ENAM0Cache	;3
   1380  f6a2		       85 87		      STA	ENAM1Cache	;3
   1381  f6a4
   1382  f6a4				   ClearPF		; 26
   1383  f6a4		       a9 00		      LDA	#0	;2
   1384  f6a6				   ClearPFSkipLDA0
   1385  f6a6		       85 0d		      STA	PF0	;3
   1386  f6a8		       85 0e		      STA	PF1	;3
   1387  f6aa		       85 0f		      STA	PF2	;3	
   1388  f6ac		       85 81		      STA	PF0Cache	;3
   1389  f6ae		       85 82		      STA	PF1Cache	;3
   1390  f6b0		       85 83		      STA	PF2Cache	;3 
   1391  f6b2		       60		      RTS		;6
   1392  f6b3				   EndClearAll
   1393  f6b3
   1394  f6b3				   LoadAll		; 48
   1395  f6b3		       a5 81		      LDA	PF0Cache	;3
   1396  f6b5		       85 0d		      STA	PF0	;3
   1397  f6b7
   1398  f6b7		       a5 82		      LDA	PF1Cache	;3
   1399  f6b9		       85 0e		      STA	PF1	;3
   1400  f6bb
   1401  f6bb		       a5 83		      LDA	PF2Cache	;3
   1402  f6bd		       85 0f		      STA	PF2	;3
   1403  f6bf
   1404  f6bf		       a5 84		      LDA	GRP1Cache	;3
   1405  f6c1		       85 1c		      STA	GRP1	;3
   1406  f6c3
   1407  f6c3		       a5 85		      LDA	ENABLCache	;3
   1408  f6c5		       85 1f		      STA	ENABL	;3
   1409  f6c7
   1410  f6c7		       a5 86		      LDA	ENAM0Cache	;3
   1411  f6c9		       85 1d		      STA	ENAM0	;3
   1412  f6cb
   1413  f6cb		       a5 87		      LDA	ENAM1Cache	;3
   1414  f6cd		       85 1e		      STA	ENAM1	;3
   1415  f6cf
   1416  f6cf		       60		      RTS		;6
   1417  f6d0				   EndLoadAll
   1418  f6d0
   1419  f6d0				   NextDifficulty		;Is a SBR
   1420  f6d0		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1421  f6d2		       29 01		      AND	#%00000001
   1422  f6d4		       d0 24		      BNE	CheckRandomDifficulty
   1423  f6d6
   1424  f6d6		       b5 c4		      LDA	CurrentDifficulty,X
   1425  f6d8		       18		      CLC
   1426  f6d9		       69 01		      ADC	#1
   1427  f6db		       29 03		      AND	#%00000011	; 0 to 3
   1428  f6dd		       95 c4		      STA	CurrentDifficulty,X
   1429  f6df
   1430  f6df				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1431  f6df		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1432  f6e1		       b9 bf ff 	      LDA	TrafficChanceTable,Y
   1433  f6e4		       95 be		      STA	TrafficChance,X
   1434  f6e6		       b9 bb ff 	      LDA	TrafficColorTable,Y
   1435  f6e9		       95 c2		      STA	TrafficColor,X
   1436  f6eb
   1437  f6eb		       a5 c6		      LDA	GameMode	;
   1438  f6ed		       29 01		      AND	#%00000001
   1439  f6ef		       f0 03		      BEQ	UseNextDifficultyTime
   1440  f6f1		       4c f5 f6 	      JMP	StoreDifficultyTime
   1441  f6f4				   UseNextDifficultyTime
   1442  f6f4		       c8		      INY
   1443  f6f5				   StoreDifficultyTime
   1444  f6f5		       b9 c3 ff 	      LDA	TrafficTimeTable,Y
   1445  f6f8		       95 c0		      STA	CheckpointTime,X
   1446  f6fa
   1447  f6fa				   CheckRandomDifficulty
   1448  f6fa		       a5 c6		      LDA	GameMode
   1449  f6fc		       29 08		      AND	#%00001000	; Random difficulties
   1450  f6fe		       f0 26		      BEQ	ReturnFromNextDifficulty
   1451  f700				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1452  f700		       a5 f4		      LDA	IsOpponentInFront
   1453  f702		       30 12		      BMI	UseOpponentChance
   1454  f704		       a5 cf		      LDA	OpponentLine	; Same line
   1455  f706		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1456  f708		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1457  f70a		       a4 8c		      LDY	FrameCount0
   1458  f70c		       b9 00 fe 	      LDA	AesTable,Y
   1459  f70f							;EOR TrafficChance, no need, lets make life simple
   1460  f70f		       29 3f		      AND	#%00111111
   1461  f711		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1462  f713		       4c 26 f7 	      JMP	ReturnFromNextDifficulty
   1463  f716				   UseOpponentChance
   1464  f716		       8a		      TXA
   1465  f717		       49 01		      EOR	#%00000001	; Reverts the player
   1466  f719		       aa		      TAX
   1467  f71a		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1468  f71c		       85 b3		      STA	Tmp3
   1469  f71e		       8a		      TXA
   1470  f71f		       49 01		      EOR	#%00000001	; Restors the player
   1471  f721		       aa		      TAX
   1472  f722		       a5 b3		      LDA	Tmp3
   1473  f724		       95 be		      STA	TrafficChance,X
   1474  f726
   1475  f726				   ReturnFromNextDifficulty
   1476  f726		       60		      RTS
   1477  f727
   1478  f727				   DefaultOffsets
   1479  f727		       a9 20		      LDA	#$20
   1480  f729		       85 96		      STA	TrafficOffset1 + 2
   1481  f72b		       85 a6		      STA	OpTrafficOffset1 + 2
   1482  f72d		       a9 40		      LDA	#$40
   1483  f72f		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1484  f731		       85 aa		      STA	OpTrafficOffset2 + 2
   1485  f733		       a9 60		      LDA	#$60
   1486  f735		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1487  f737		       85 ae		      STA	OpTrafficOffset3 + 2
   1488  f739		       a9 80		      LDA	#$80
   1489  f73b		       60		      RTS
   1490  f73c
   1491  f73c				   PrintStaticText		; Preload X with the offset referent to StaticText
   1492  f73c		       bd 00 ff 	      LDA	StaticText,X
   1493  f73f		       85 d0		      STA	ScoreD0
   1494  f741		       e8		      INX
   1495  f742		       bd 00 ff 	      LDA	StaticText,X
   1496  f745		       85 d1		      STA	ScoreD1
   1497  f747		       e8		      INX
   1498  f748		       bd 00 ff 	      LDA	StaticText,X
   1499  f74b		       85 d2		      STA	ScoreD2
   1500  f74d		       e8		      INX
   1501  f74e		       bd 00 ff 	      LDA	StaticText,X
   1502  f751		       85 d3		      STA	ScoreD3
   1503  f753		       e8		      INX
   1504  f754		       bd 00 ff 	      LDA	StaticText,X
   1505  f757		       85 d4		      STA	ScoreD4
   1506  f759		       60		      RTS
   1507  f75a
   1508  f75a				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1509  f75a		       a2 00		      LDX	#0
   1510  f75c		       a0 04		      LDY	#FONT_OFFSET
   1511  f75e
   1512  f75e				   ScoreLoop		; 20 
   1513  f75e		       85 02		      STA	WSYNC	;2
   1514  f760		       85 2a		      STA	HMOVE
   1515  f762
   1516  f762		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1517  f764		       85 0d		      STA	PF0	;3
   1518  f766
   1519  f766		       a5 82		      LDA	PF1Cache	;3
   1520  f768		       85 0e		      STA	PF1	;3
   1521  f76a
   1522  f76a		       a5 83		      LDA	PF2Cache	;3
   1523  f76c		       85 0f		      STA	PF2	;3
   1524  f76e
   1525  f76e				   DrawScoreD0		; 15
   1526  f76e		       a6 d0		      LDX	ScoreD0	; 3
   1527  f770		       bd 00 fd 	      LDA	Font,X	;4
   1528  f773		       85 81		      STA	PF0Cache	;3
   1529  f775		       c6 d0		      DEC	ScoreD0	;5
   1530  f777
   1531  f777				   DrawScoreD1		; 23	
   1532  f777		       a6 d1		      LDX	ScoreD1	; 3
   1533  f779		       bd 00 fd 	      LDA	Font,X	;4
   1534  f77c		       0a		      ASL		;2
   1535  f77d		       0a		      ASL		;2
   1536  f77e		       0a		      ASL		;2
   1537  f77f		       0a		      ASL		;2
   1538  f780		       85 82		      STA	PF1Cache	;3
   1539  f782		       c6 d1		      DEC	ScoreD1	;5
   1540  f784
   1541  f784				   DrawScoreD2		; 20
   1542  f784		       a6 d2		      LDX	ScoreD2	; 3
   1543  f786		       bd 00 fd 	      LDA	Font,X	;4
   1544  f789		       29 0f		      AND	#%00001111	;2
   1545  f78b		       05 82		      ORA	PF1Cache	;3
   1546  f78d		       85 82		      STA	PF1Cache	;3
   1547  f78f		       c6 d2		      DEC	ScoreD2	;5
   1548  f791
   1549  f791				   DrawScoreD3		; 23
   1550  f791		       a6 d3		      LDX	ScoreD3	; 3
   1551  f793		       bd 00 fd 	      LDA	Font,X	;4
   1552  f796		       4a		      LSR		;2
   1553  f797		       4a		      LSR		;2
   1554  f798		       4a		      LSR		;2
   1555  f799		       4a		      LSR		;2
   1556  f79a		       85 83		      STA	PF2Cache	;3
   1557  f79c		       c6 d3		      DEC	ScoreD3	;5
   1558  f79e
   1559  f79e				   DrawScoreD4		; 20
   1560  f79e		       a6 d4		      LDX	ScoreD4	; 3
   1561  f7a0		       bd 00 fd 	      LDA	Font,X	;4
   1562  f7a3		       29 f0		      AND	#%11110000	;2
   1563  f7a5		       05 83		      ORA	PF2Cache	;3
   1564  f7a7		       85 83		      STA	PF2Cache	;3
   1565  f7a9		       c6 d4		      DEC	ScoreD4	;5
   1566  f7ab
   1567  f7ab
   1568  f7ab		       88		      DEY		;2
   1569  f7ac		       10 b0		      BPL	ScoreLoop	;4
   1570  f7ae
   1571  f7ae		       85 02		      STA	WSYNC
   1572  f7b0		       85 2a		      STA	HMOVE
   1573  f7b2		       20 b3 f6 	      JSR	LoadAll
   1574  f7b5		       60		      RTS		; 6
   1575  f7b6
   1576  f7b6				   WaitForVblankEnd
   1577  f7b6		       ad 84 02 	      LDA	INTIM
   1578  f7b9		       d0 fb		      BNE	WaitForVblankEnd
   1579  f7bb		       85 02		      STA	WSYNC
   1580  f7bd		       85 01		      STA	VBLANK
   1581  f7bf		       60		      RTS
   1582  f7c0
   1583  f7c0				   Sleep4Lines
   1584  f7c0		       85 02		      STA	WSYNC
   1585  f7c2		       85 02		      STA	WSYNC
   1586  f7c4		       85 02		      STA	WSYNC
   1587  f7c6		       85 02		      STA	WSYNC
   1588  f7c8		       60		      RTS
   1589  f7c9
   1590  f7c9				   Sleep8Lines
   1591  f7c9		       20 c0 f7 	      JSR	Sleep4Lines
   1592  f7cc		       20 c0 f7 	      JSR	Sleep4Lines
   1593  f7cf		       60		      RTS
   1594  f7d0
   1595  f7d0				   Sleep32Lines
   1596  f7d0		       20 c9 f7 	      JSR	Sleep8Lines
   1597  f7d3		       20 c9 f7 	      JSR	Sleep8Lines
   1598  f7d6		       20 c9 f7 	      JSR	Sleep8Lines
   1599  f7d9		       20 c9 f7 	      JSR	Sleep8Lines
   1600  f7dc		       60		      RTS
   1601  f7dd
   1602  f7dd							;X = number of WSYNC HMOVE to run
   1603  f7dd				   HMoveXTimes
   1604  f7dd		       85 02		      STA	WSYNC	;3
   1605  f7df		       85 2a		      STA	HMOVE	; 3/10 
   1606  f7e1		       ca		      DEX
   1607  f7e2		       d0 f9		      BNE	HMoveXTimes
   1608  f7e4		       60		      RTS
   1609  f7e5
   1610  f7e5				   ConfigureCarSprites
   1611  f7e5		       a5 8c		      LDA	FrameCount0
   1612  f7e7		       29 01		      AND	#%00000001
   1613  f7e9		       d0 0b		      BNE	LoadForRightScreenSprites
   1614  f7eb				   LoadForLeftScreenSprites
   1615  f7eb		       a5 c7		      LDA	CurrentCarId
   1616  f7ed		       85 b0		      STA	Tmp0
   1617  f7ef		       a5 c8		      LDA	OpCurrentCarId
   1618  f7f1		       85 b1		      STA	Tmp1
   1619  f7f3		       4c fe f7 	      JMP	LoadCarSpritesFromIds
   1620  f7f6				   LoadForRightScreenSprites
   1621  f7f6		       a5 c7		      LDA	CurrentCarId
   1622  f7f8		       85 b1		      STA	Tmp1
   1623  f7fa		       a5 c8		      LDA	OpCurrentCarId
   1624  f7fc		       85 b0		      STA	Tmp0
   1625  f7fe
   1626  f7fe				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1627  f7fe		       a4 b0		      LDY	Tmp0
   1628  f800		       b9 95 ff 	      LDA	CarIdToSpriteAddressL,Y
   1629  f803		       85 d7		      STA	CarSpritePointerL
   1630  f805		       b9 99 ff 	      LDA	CarIdToSpriteAddressH,Y
   1631  f808		       85 d8		      STA	CarSpritePointerH
   1632  f80a				   ConfigureOpponentCarSprite
   1633  f80a		       a4 b1		      LDY	Tmp1
   1634  f80c		       b9 9d ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1635  f80f		       85 d9		      STA	EnemyCarSpritePointerL
   1636  f811		       b9 a1 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1637  f814		       85 da		      STA	EnemyCarSpritePointerH
   1638  f816		       60		      RTS
   1639  f817
   1640  f817							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1641  f817							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1642  f817							; Tmp0 Binary Number
   1643  f817							; Result Returned in Tmp 1 and A
   1644  f817				   BINBCD8
   1645  f817		       f8		      SED		; Switch to decimal mode
   1646  f818		       a9 00		      LDA	#0	; Ensure the result is clear
   1647  f81a		       85 b1		      STA	Tmp1+0
   1648  f81c							;STA Tmp1+1
   1649  f81c		       a2 08		      LDX	#8	; The number of source bits
   1650  f81e
   1651  f81e				   CNVBIT
   1652  f81e		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1653  f820		       a5 b1		      LDA	Tmp1+0	; And add into result
   1654  f822		       65 b1		      ADC	Tmp1+0
   1655  f824		       85 b1		      STA	Tmp1+0
   1656  f826							;Not needed now, 0 to 99 is enought for timer!
   1657  f826							; LDA Tmp1+1	; propagating any carry
   1658  f826							; ADC Tmp1+1
   1659  f826							; STA Tmp1+1
   1660  f826		       ca		      DEX		; And repeat for next bit
   1661  f827		       d0 f5		      BNE	CNVBIT
   1662  f829		       d8		      CLD		; Back to binary
   1663  f82a
   1664  f82a		       60		      RTS		; All Done.
   1665  f82b
   1666  f82b							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1667  f82b							;X player 0 or 1
   1668  f82b				   SelectCarWithDpad
   1669  f82b		       a0 03		      LDY	#3
   1670  f82d				   SelectCarWithDpadLoop
   1671  f82d		       ad 80 02 	      LDA	SWCHA
   1672  f830		       25 b0		      AND	Tmp0
   1673  f832		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1674  f834		       98		      TYA
   1675  f835		       95 c7		      STA	CurrentCarId,X
   1676  f837				   ContinueSelectCarWithDpadLoop
   1677  f837		       46 b0		      LSR	Tmp0
   1678  f839		       88		      DEY
   1679  f83a		       10 f1		      BPL	SelectCarWithDpadLoop
   1680  f83c		       60		      RTS
   1681  f83d
   1682  f83d				   ProcessOpponentLine
   1683  f83d		       a5 8c		      LDA	FrameCount0
   1684  f83f		       29 01		      AND	#%00000001
   1685  f841		       38		      SEC
   1686  f842		       d0 15		      BNE	Player0IsOpponent
   1687  f844				   Player1IsOpponent		; Code could be reused?
   1688  f844		       a5 91		      LDA	TrafficOffset0 + 1
   1689  f846		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1690  f848		       85 b0		      STA	Tmp0
   1691  f84a		       a5 92		      LDA	TrafficOffset0 + 2
   1692  f84c		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1693  f84e		       85 b1		      STA	Tmp1
   1694  f850		       a5 ba		      LDA	Traffic0Msb
   1695  f852		       e5 bb		      SBC	OpTraffic0Msb
   1696  f854		       85 b2		      STA	Tmp2
   1697  f856		       4c 6b f8 	      JMP	StoreInFrontPlayer
   1698  f859				   Player0IsOpponent
   1699  f859		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1700  f85b		       e5 91		      SBC	TrafficOffset0 + 1
   1701  f85d		       85 b0		      STA	Tmp0
   1702  f85f		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1703  f861		       e5 92		      SBC	TrafficOffset0 + 2
   1704  f863		       85 b1		      STA	Tmp1
   1705  f865		       a5 bb		      LDA	OpTraffic0Msb
   1706  f867		       e5 ba		      SBC	Traffic0Msb
   1707  f869		       85 b2		      STA	Tmp2
   1708  f86b
   1709  f86b				   StoreInFrontPlayer
   1710  f86b		       85 f4		      STA	IsOpponentInFront
   1711  f86d
   1712  f86d				   AddOffsetToOpponentLine
   1713  f86d		       18		      CLC
   1714  f86e		       a5 b0		      LDA	Tmp0
   1715  f870		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1716  f872		       85 b0		      STA	Tmp0
   1717  f874		       a5 b1		      LDA	Tmp1
   1718  f876		       69 00		      ADC	#0
   1719  f878		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1720  f87a		       a5 b2		      LDA	Tmp2
   1721  f87c		       69 00		      ADC	#0
   1722  f87e		       05 b1		      ORA	Tmp1
   1723  f880		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1724  f882				   OpponentNotVisible
   1725  f882		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1726  f884		       85 cf		      STA	OpponentLine
   1727  f886		       4c 8d f8 	      JMP	ReturnFromProcessOpponentLine
   1728  f889				   OpponentVisible
   1729  f889		       a5 b0		      LDA	Tmp0
   1730  f88b		       85 cf		      STA	OpponentLine
   1731  f88d				   ReturnFromProcessOpponentLine
   1732  f88d		       60		      RTS
   1733  f88e
   1734  f88e							; Value stored in A
   1735  f88e				   IsOpponentColliding
   1736  f88e							;Any non default state, opponent do not colide
   1737  f88e		       a5 8e		      LDA	CollisionCounter
   1738  f890		       05 8f		      ORA	OpCollisionCounter
   1739  f892		       05 cb		      ORA	ScoreFontColorHoldChange
   1740  f894		       05 cc		      ORA	OpScoreFontColorHoldChange
   1741  f896		       d0 07		      BNE	OpponentNotColliding
   1742  f898		       a5 f4		      LDA	IsOpponentInFront
   1743  f89a		       25 07		      AND	CXPPMM
   1744  f89c		       4c a1 f8 	      JMP	ReturnIsOpponentColliding
   1745  f89f				   OpponentNotColliding
   1746  f89f		       a9 00		      LDA	#0
   1747  f8a1				   ReturnIsOpponentColliding
   1748  f8a1		       60		      RTS
   1749  f8a2
   1750  f8a2
   1751  f8a2							; Movement and colision are binded because the car must be moved after duplicate size.
   1752  f8a2							; Use X for the player
   1753  f8a2							; Tmp2 Traffic colision result
   1754  f8a2				   TestCollisionAndMove
   1755  f8a2							; Until store the movemnt, Y contains the value to be stored.
   1756  f8a2							; see if player0 colides with the rest
   1757  f8a2		       a5 b2		      LDA	Tmp2
   1758  f8a4		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1759  f8a6		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1760  f8a8		       d0 25		      BNE	NoCollision
   1761  f8aa		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1762  f8ac		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1763  f8ae		       f0 1f		      BEQ	NoCollision
   1764  f8b0		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1765  f8b2		       f0 1b		      BEQ	NoCollision
   1766  f8b4		       a9 ff		      LDA	#COLLISION_FRAMES
   1767  f8b6		       95 8e		      STA	CollisionCounter,X
   1768  f8b8		       b5 f2		      LDA	Player0SpeedH,X
   1769  f8ba		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1770  f8bc		       a9 10		      LDA	#COLLISION_SPEED_L
   1771  f8be		       d5 f0		      CMP	Player0SpeedL,X
   1772  f8c0		       b0 04		      BCS	SkipSetColisionSpeedL
   1773  f8c2				   SetColisionSpeedL
   1774  f8c2		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1775  f8c4		       95 f0		      STA	Player0SpeedL,X
   1776  f8c6				   SkipSetColisionSpeedL
   1777  f8c6		       a9 00		      LDA	#0
   1778  f8c8		       95 f2		      STA	Player0SpeedH,X
   1779  f8ca		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1780  f8cc		       4c 1f f9 	      JMP	StoreHMove	; We keep position consistent
   1781  f8cf				   NoCollision
   1782  f8cf
   1783  f8cf				   DecrementCollision
   1784  f8cf		       b5 8e		      LDA	CollisionCounter,X
   1785  f8d1		       f0 06		      BEQ	FinishDecrementCollision
   1786  f8d3		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1787  f8d5		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1788  f8d7		       d6 8e		      DEC	CollisionCounter,X
   1789  f8d9				   FinishDecrementCollision
   1790  f8d9
   1791  f8d9				   ResetPlayerSize
   1792  f8d9		       d0 04		      BNE	FinishResetPlayerSize
   1793  f8db		       a9 30		      LDA	#%00110000
   1794  f8dd		       95 04		      STA	NUSIZ0,X	;
   1795  f8df				   FinishResetPlayerSize
   1796  f8df
   1797  f8df				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1798  f8df		       b5 8e		      LDA	CollisionCounter,X
   1799  f8e1		       c9 01		      CMP	#1	; Last frame before reset
   1800  f8e3		       d0 05		      BNE	SkipResetPlayerPosition
   1801  f8e5		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1802  f8e7		       4c 1f f9 	      JMP	StoreHMove
   1803  f8ea				   SkipResetPlayerPosition
   1804  f8ea
   1805  f8ea				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1806  f8ea		       b5 c7		      LDA	CurrentCarId,X
   1807  f8ec		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1808  f8ee		       d0 08		      BNE	PrepareReadXAxis
   1809  f8f0		       a0 00		      LDY	#0
   1810  f8f2		       a5 8c		      LDA	FrameCount0
   1811  f8f4		       29 01		      AND	#DRAGSTER_TURN_MASK
   1812  f8f6		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1813  f8f8
   1814  f8f8				   PrepareReadXAxis
   1815  f8f8		       a0 00		      LDY	#0
   1816  f8fa		       b5 b6		      LDA	Player0X,X
   1817  f8fc				   BeginReadLeft
   1818  f8fc		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1819  f8fe		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1820  f901		       2c 80 02 	      BIT	SWCHA
   1821  f904		       d0 07		      BNE	SkipMoveLeft
   1822  f906		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1823  f908		       d6 b6		      DEC	Player0X,X
   1824  f90a		       4c 1f f9 	      JMP	StoreHMove	; Cannot move left and right...
   1825  f90d				   SkipMoveLeft
   1826  f90d				   BeginReadRight
   1827  f90d		       b5 b6		      LDA	Player0X,X
   1828  f90f		       c9 2c		      CMP	#PLAYER_MAX_X
   1829  f911		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1830  f913		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1831  f916		       2c 80 02 	      BIT	SWCHA
   1832  f919		       d0 04		      BNE	SkipMoveRight
   1833  f91b		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1834  f91d		       f6 b6		      INC	Player0X,X
   1835  f91f				   SkipMoveRight
   1836  f91f				   StoreHMove
   1837  f91f		       94 20		      STY	HMP0,X	;set the move for player 0
   1838  f921
   1839  f921		       60		      RTS
   1840  f922
   1841  f922							; X Traffic offset 4 bits each lane, 4 lanes per player
   1842  f922							; Tmp3 Max X offset
   1843  f922							; Tmp4 Max Player Speed L
   1844  f922							; Tmp5 Max Player Speed H
   1845  f922				   UpdateOffsets
   1846  f922		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1847  f924		       a5 c6		      LDA	GameMode
   1848  f926		       29 04		      AND	#%00000100	; GameModes with high delta
   1849  f928		       f0 02		      BEQ	UpdateOffsetsLoop
   1850  f92a		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1851  f92c
   1852  f92c				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1853  f92c		       38		      SEC
   1854  f92d		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1855  f92f		       f9 81 ff 	      SBC	TrafficSpeeds,Y
   1856  f932		       85 b0		      STA	Tmp0
   1857  f934		       c8		      INY
   1858  f935		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1859  f937		       f9 81 ff 	      SBC	TrafficSpeeds,Y
   1860  f93a		       85 b1		      STA	Tmp1
   1861  f93c		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1862  f93e		       e9 00		      SBC	#0
   1863  f940		       85 b2		      STA	Tmp2
   1864  f942
   1865  f942				   AddsTheResult
   1866  f942		       18		      CLC
   1867  f943		       a5 b0		      LDA	Tmp0
   1868  f945		       75 90		      ADC	TrafficOffset0,X
   1869  f947		       95 90		      STA	TrafficOffset0,X
   1870  f949		       e8		      INX
   1871  f94a		       a5 b1		      LDA	Tmp1
   1872  f94c		       75 90		      ADC	TrafficOffset0,X
   1873  f94e		       95 90		      STA	TrafficOffset0,X
   1874  f950		       e8		      INX
   1875  f951		       a5 b2		      LDA	Tmp2	; Carry
   1876  f953		       75 90		      ADC	TrafficOffset0,X
   1877  f955		       95 90		      STA	TrafficOffset0,X
   1878  f957		       90 0f		      BCC	CalculateOffsetCache
   1879  f959				   CalculatePlayer0Msb
   1880  f959		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1881  f95b		       d0 05		      BNE	CalculatePlayer1Msb
   1882  f95d		       e6 ba		      INC	Traffic0Msb
   1883  f95f		       4c 68 f9 	      JMP	CalculateOffsetCache
   1884  f962				   CalculatePlayer1Msb
   1885  f962		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1886  f964		       d0 02		      BNE	CalculateOffsetCache
   1887  f966		       e6 bb		      INC	OpTraffic0Msb
   1888  f968
   1889  f968				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1890  f968		       e8		      INX
   1891  f969		       38		      SEC
   1892  f96a		       69 00		      ADC	#0	;Increment by one
   1893  f96c		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1894  f96e
   1895  f96e				   PrepareNextUpdateLoop
   1896  f96e		       c8		      INY
   1897  f96f		       e8		      INX
   1898  f970		       e4 b3		      CPX	Tmp3	; Max X offset
   1899  f972		       d0 b8		      BNE	UpdateOffsetsLoop
   1900  f974		       60		      RTS
   1901  f975
   1902  f975							; X Player 0 or 1
   1903  f975				   ProcessSpeed
   1904  f975				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1905  f975		       a9 00		      LDA	#0
   1906  f977		       85 b0		      STA	Tmp0	; Break speed
   1907  f979		       b5 b8		      LDA	CountdownTimer,X
   1908  f97b		       d0 0d		      BNE	Break
   1909  f97d		       b4 c7		      LDY	CurrentCarId,X
   1910  f97f		       a5 8c		      LDA	FrameCount0
   1911  f981		       39 a9 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1912  f984		       d0 04		      BNE	Break
   1913  f986		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1914  f988		       85 b0		      STA	Tmp0
   1915  f98a
   1916  f98a				   Break
   1917  f98a		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1918  f98d		       2c 80 02 	      BIT	SWCHA
   1919  f990		       d0 12		      BNE	BreakNonZero
   1920  f992		       b5 0c		      LDA	INPT4,X	;3
   1921  f994		       10 0a		      BPL	BreakWhileAccelerating
   1922  f996		       b4 d5		      LDY	Gear,X
   1923  f998		       b9 b5 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1924  f99b		       85 b0		      STA	Tmp0
   1925  f99d		       4c a4 f9 	      JMP	BreakNonZero
   1926  f9a0				   BreakWhileAccelerating		; Allow better control while breaking.
   1927  f9a0		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1928  f9a2		       85 b0		      STA	Tmp0
   1929  f9a4
   1930  f9a4				   BreakNonZero
   1931  f9a4		       a5 b0		      LDA	Tmp0
   1932  f9a6		       f0 29		      BEQ	SkipBreak
   1933  f9a8
   1934  f9a8				   DecreaseSpeed
   1935  f9a8		       38		      SEC
   1936  f9a9		       b5 f0		      LDA	Player0SpeedL,X
   1937  f9ab		       e5 b0		      SBC	Tmp0
   1938  f9ad		       95 f0		      STA	Player0SpeedL,X
   1939  f9af		       b5 f2		      LDA	Player0SpeedH,X
   1940  f9b1		       e9 00		      SBC	#0
   1941  f9b3		       95 f2		      STA	Player0SpeedH,X
   1942  f9b5
   1943  f9b5				   CheckMinSpeed
   1944  f9b5		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1945  f9b7		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1946  f9b9		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1947  f9bb		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1948  f9bd
   1949  f9bd				   CompareLBreakSpeed
   1950  f9bd		       b5 f0		      LDA	Player0SpeedL,X
   1951  f9bf		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1952  f9c1		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1953  f9c3		       4c ce f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1954  f9c6
   1955  f9c6				   ResetMinSpeed
   1956  f9c6		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1957  f9c8		       95 f2		      STA	Player0SpeedH,X
   1958  f9ca		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1959  f9cc		       95 f0		      STA	Player0SpeedL,X
   1960  f9ce
   1961  f9ce				   SkipAccelerateIfBreaking
   1962  f9ce		       4c 17 fa 	      JMP	SkipAccelerate
   1963  f9d1				   SkipBreak
   1964  f9d1
   1965  f9d1				   Acelerates
   1966  f9d1		       b5 b8		      LDA	CountdownTimer,X
   1967  f9d3		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1968  f9d5
   1969  f9d5				   ContinueAccelerateTest
   1970  f9d5		       b5 0c		      LDA	INPT4,X	;3
   1971  f9d7		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1972  f9d9		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1973  f9dc		       2c 80 02 	      BIT	SWCHA
   1974  f9df		       d0 36		      BNE	SkipAccelerate
   1975  f9e1
   1976  f9e1				   IncreaseCarSpeed
   1977  f9e1		       a9 02		      LDA	#2
   1978  f9e3		       85 b0		      STA	Tmp0	; Loop control
   1979  f9e5		       b4 c7		      LDY	CurrentCarId,X
   1980  f9e7				   IncreaseCarSpeedLoop
   1981  f9e7							;Adds speed
   1982  f9e7		       18		      CLC
   1983  f9e8		       b5 dc		      LDA	AccelerateBuffer,X
   1984  f9ea		       79 a5 ff 	      ADC	CarIdToAccelerateSpeed,Y
   1985  f9ed		       95 dc		      STA	AccelerateBuffer,X
   1986  f9ef		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1987  f9f1		       f6 f0		      INC	Player0SpeedL,X
   1988  f9f3		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1989  f9f5		       f6 f2		      INC	Player0SpeedH,X
   1990  f9f7				   ContinueIncreaseSpeedLoop
   1991  f9f7		       c6 b0		      DEC	Tmp0
   1992  f9f9		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1993  f9fb				   SkipIncreaseCarSpeed
   1994  f9fb
   1995  f9fb				   CheckIfAlreadyMaxSpeed
   1996  f9fb		       b5 f2		      LDA	Player0SpeedH,X
   1997  f9fd		       c9 02		      CMP	#CAR_MAX_SPEED_H
   1998  f9ff		       90 16		      BCC	SkipAccelerate	; less than my max speed
   1999  fa01		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2000  fa03							;High bit is max, compare the low
   2001  fa03		       b4 c7		      LDY	CurrentCarId,X
   2002  fa05		       b5 f0		      LDA	Player0SpeedL,X
   2003  fa07		       d9 ad ff 	      CMP	CarIdToMaxSpeedL,Y
   2004  fa0a		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2005  fa0c							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2006  fa0c
   2007  fa0c				   ResetToMaxSpeed		; Speed is more, or is already max
   2008  fa0c		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2009  fa0e		       95 f2		      STA	Player0SpeedH,X
   2010  fa10		       b4 c7		      LDY	CurrentCarId,X
   2011  fa12		       b9 ad ff 	      LDA	CarIdToMaxSpeedL,Y
   2012  fa15		       95 f0		      STA	Player0SpeedL,X
   2013  fa17				   SkipAccelerate
   2014  fa17		       60		      RTS
   2015  fa18
   2016  fa18							;Tmp0 Traffic Offset to compare with next checkpoint
   2017  fa18				   ProcessPlayerStatus
   2018  fa18				   IsGameOver
   2019  fa18		       b5 b8		      LDA	CountdownTimer,X
   2020  fa1a		       15 f0		      ORA	Player0SpeedL,X
   2021  fa1c		       15 f2		      ORA	Player0SpeedH,X
   2022  fa1e		       d0 0b		      BNE	IsCheckpoint
   2023  fa20		       a9 01		      LDA	#1
   2024  fa22		       95 cb		      STA	ScoreFontColorHoldChange,X
   2025  fa24		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
   2026  fa26		       95 c9		      STA	ScoreFontColor,X
   2027  fa28		       4c 5d fa 	      JMP	SkipIsTimeOver
   2028  fa2b
   2029  fa2b				   IsCheckpoint
   2030  fa2b		       b5 cd		      LDA	NextCheckpoint,X
   2031  fa2d		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2032  fa2f		       d0 20		      BNE	SkipIsCheckpoint
   2033  fa31		       18		      CLC
   2034  fa32		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2035  fa34		       95 cd		      STA	NextCheckpoint,X
   2036  fa36		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2037  fa38		       95 c9		      STA	ScoreFontColor,X
   2038  fa3a		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2039  fa3c		       95 cb		      STA	ScoreFontColorHoldChange,X
   2040  fa3e		       b5 b8		      LDA	CountdownTimer,X
   2041  fa40		       18		      CLC
   2042  fa41		       75 c0		      ADC	CheckpointTime,X
   2043  fa43		       95 b8		      STA	CountdownTimer,X
   2044  fa45		       90 04		      BCC	JumpSkipTimeOver
   2045  fa47		       a9 ff		      LDA	#$FF
   2046  fa49		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2047  fa4b				   JumpSkipTimeOver
   2048  fa4b		       20 d0 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2049  fa4e		       4c 5d fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2050  fa51				   SkipIsCheckpoint
   2051  fa51
   2052  fa51				   IsTimeOver
   2053  fa51		       b5 b8		      LDA	CountdownTimer,X
   2054  fa53		       d0 08		      BNE	SkipIsTimeOver
   2055  fa55		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
   2056  fa57		       95 cb		      STA	ScoreFontColorHoldChange,X
   2057  fa59		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2058  fa5b		       95 c9		      STA	ScoreFontColor,X
   2059  fa5d				   SkipIsTimeOver
   2060  fa5d		       60		      RTS
   2061  fa5e
   2062  fa5e
   2063  fa5e				   EverySecond		; 64 frames to be more precise
   2064  fa5e		       a9 3f		      LDA	#%00111111
   2065  fa60		       25 8c		      AND	FrameCount0
   2066  fa62		       d0 06		      BNE	SkipEverySecondAction
   2067  fa64		       d5 b8		      CMP	CountdownTimer,X
   2068  fa66		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2069  fa68		       d6 b8		      DEC	CountdownTimer,X
   2070  fa6a				   SkipEverySecondAction
   2071  fa6a		       60		      RTS
   2072  fa6b
   2073  fa6b				   CalculateGear
   2074  fa6b		       b5 f0		      LDA	Player0SpeedL,X	;3
   2075  fa6d		       29 80		      AND	#%10000000	;2
   2076  fa6f		       15 f2		      ORA	Player0SpeedH,X	;3
   2077  fa71		       18		      CLC		;2
   2078  fa72		       2a		      ROL		;2
   2079  fa73		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2080  fa75		       95 d5		      STA	Gear,X
   2081  fa77		       60		      RTS
   2082  fa78
   2083  fa78				   ProcessScoreFontColor
   2084  fa78		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2085  fa7a		       f0 06		      BEQ	ResetScoreFontColor
   2086  fa7c		       88		      DEY
   2087  fa7d		       94 cb		      STY	ScoreFontColorHoldChange,X
   2088  fa7f		       4c 87 fa 	      JMP	SkipScoreFontColor
   2089  fa82				   ResetScoreFontColor
   2090  fa82		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2091  fa85		       95 c9		      STA	ScoreFontColor,X
   2092  fa87				   SkipScoreFontColor
   2093  fa87		       60		      RTS
   2094  fa88
   2095  fa88							; Moved here because of rom space.
   2096  fa88							; The only SBR in constants space
   2097  fa88				   DrawQrCode
   2098  fa88		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2099  fa8a		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2100  fa8c		       a9 01		      LDA	#%00000001	; Mirror playfield
   2101  fa8e		       85 0a		      STA	CTRLPF
   2102  fa90		       20 8e f6 	      JSR	ClearAll	; To be 100 sure!
   2103  fa93		       ad 82 02 	      LDA	SWCHB
   2104  fa96		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2105  fa98		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2106  fa9a		       f0 07		      BEQ	StoreReversedQrCode
   2107  fa9c		       86 09		      STX	COLUBK
   2108  fa9e		       84 08		      STY	COLUPF
   2109  faa0		       4c a7 fa 	      JMP	ContinueQrCode
   2110  faa3				   StoreReversedQrCode
   2111  faa3		       86 08		      STX	COLUPF
   2112  faa5		       84 09		      STY	COLUBK
   2113  faa7
   2114  faa7				   ContinueQrCode
   2115  faa7		       a2 09		      LDX	#9
   2116  faa9		       20 dd f7 	      JSR	HMoveXTimes
   2117  faac		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2118  faae		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2119  fab0		       20 b6 f7 	      JSR	WaitForVblankEnd
   2120  fab3		       20 c9 f7 	      JSR	Sleep8Lines
   2121  fab6		       20 c9 f7 	      JSR	Sleep8Lines
   2122  fab9		       20 c9 f7 	      JSR	Sleep8Lines
   2123  fabc
   2124  fabc				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2125  fabc		       85 02		      STA	WSYNC
   2126  fabe		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2127  fac1		       85 0e		      STA	PF1	;3
   2128  fac3		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2129  fac6		       85 0f		      STA	PF2	;3
      0  fac8					      SLEEP	27	; 
      1  fac8				   .CYCLES    SET	27
      2  fac8
      3  fac8				  -	      IF	.CYCLES < 2
      4  fac8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fac8				  -	      ERR
      6  fac8					      ENDIF
      7  fac8
      8  fac8					      IF	.CYCLES & 1
      9  fac8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fac8				  -	      nop	0
     11  fac8					      ELSE
     12  fac8		       24 00		      bit	VSYNC
     13  faca					      ENDIF
     14  faca				   .CYCLES    SET	.CYCLES - 3
     15  faca					      ENDIF
     16  faca
     17  faca					      REPEAT	.CYCLES / 2
     18  faca		       ea		      nop
     17  faca					      REPEND
     18  facb		       ea		      nop
     17  facb					      REPEND
     18  facc		       ea		      nop
     17  facc					      REPEND
     18  facd		       ea		      nop
     17  facd					      REPEND
     18  face		       ea		      nop
     17  face					      REPEND
     18  facf		       ea		      nop
     17  facf					      REPEND
     18  fad0		       ea		      nop
     17  fad0					      REPEND
     18  fad1		       ea		      nop
     17  fad1					      REPEND
     18  fad2		       ea		      nop
     17  fad2					      REPEND
     18  fad3		       ea		      nop
     17  fad3					      REPEND
     18  fad4		       ea		      nop
     17  fad4					      REPEND
     18  fad5		       ea		      nop
     19  fad6					      REPEND
   2131  fad6		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2132  fad9		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2133  fadb		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2134  fade		       85 0e		      STA	PF1	;3
   2135  fae0
   2136  fae0		       ca		      DEX		;2
   2137  fae1		       d0 d9		      BNE	QrCodeLoop	;2
   2138  fae3		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2139  fae5		       88		      DEY		;2
   2140  fae6		       10 d4		      BPL	QrCodeLoop	;4
   2141  fae8
   2142  fae8				   EndQrCodeLoop
   2143  fae8		       85 02		      STA	WSYNC	;
   2144  faea		       a9 00		      LDA	#0
   2145  faec		       85 0e		      STA	PF1	;3
   2146  faee		       85 0f		      STA	PF2	;3
   2147  faf0
   2148  faf0		       20 d0 f7 	      JSR	Sleep32Lines
   2149  faf3		       4c 25 f5 	      JMP	PrepareOverscan
   2150  faf6
   2151  faf6							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2152  fc00					      org	$FC00
   2153  fc00				   QrCode1
   2154  fc00		       1f		      .byte.b	#%00011111
   2155  fc01		       10		      .byte.b	#%00010000
   2156  fc02		       17		      .byte.b	#%00010111
   2157  fc03		       17		      .byte.b	#%00010111
   2158  fc04		       17		      .byte.b	#%00010111
   2159  fc05		       10		      .byte.b	#%00010000
   2160  fc06		       1f		      .byte.b	#%00011111
   2161  fc07		       00		      .byte.b	#%00000000
   2162  fc08		       17		      .byte.b	#%00010111
   2163  fc09		       10		      .byte.b	#%00010000
   2164  fc0a		       1d		      .byte.b	#%00011101
   2165  fc0b		       16		      .byte.b	#%00010110
   2166  fc0c		       03		      .byte.b	#%00000011
   2167  fc0d		       19		      .byte.b	#%00011001
   2168  fc0e		       13		      .byte.b	#%00010011
   2169  fc0f		       1c		      .byte.b	#%00011100
   2170  fc10		       0b		      .byte.b	#%00001011
   2171  fc11		       00		      .byte.b	#%00000000
   2172  fc12		       1f		      .byte.b	#%00011111
   2173  fc13		       10		      .byte.b	#%00010000
   2174  fc14		       17		      .byte.b	#%00010111
   2175  fc15		       17		      .byte.b	#%00010111
   2176  fc16		       17		      .byte.b	#%00010111
   2177  fc17		       10		      .byte.b	#%00010000
   2178  fc18		       1f		      .byte.b	#%00011111
   2179  fc19
   2180  fc19				   QrCode2
   2181  fc19		       c3		      .byte.b	#%11000011
   2182  fc1a		       9a		      .byte.b	#%10011010
   2183  fc1b		       82		      .byte.b	#%10000010
   2184  fc1c		       da		      .byte.b	#%11011010
   2185  fc1d		       aa		      .byte.b	#%10101010
   2186  fc1e		       ca		      .byte.b	#%11001010
   2187  fc1f		       f3		      .byte.b	#%11110011
   2188  fc20		       78		      .byte.b	#%01111000
   2189  fc21		       df		      .byte.b	#%11011111
   2190  fc22		       fc		      .byte.b	#%11111100
   2191  fc23		       c7		      .byte.b	#%11000111
   2192  fc24		       98		      .byte.b	#%10011000
   2193  fc25		       23		      .byte.b	#%00100011
   2194  fc26		       b9		      .byte.b	#%10111001
   2195  fc27		       d2		      .byte.b	#%11010010
   2196  fc28		       30		      .byte.b	#%00110000
   2197  fc29		       eb		      .byte.b	#%11101011
   2198  fc2a		       28		      .byte.b	#%00101000
   2199  fc2b		       ab		      .byte.b	#%10101011
   2200  fc2c		       72		      .byte.b	#%01110010
   2201  fc2d		       fa		      .byte.b	#%11111010
   2202  fc2e		       7a		      .byte.b	#%01111010
   2203  fc2f		       32		      .byte.b	#%00110010
   2204  fc30		       3a		      .byte.b	#%00111010
   2205  fc31		       63		      .byte.b	#%01100011
   2206  fc32
   2207  fc32				   QrCode3
   2208  fc32		       98		      .byte.b	#%10011000
   2209  fc33		       c3		      .byte.b	#%11000011
   2210  fc34		       39		      .byte.b	#%00111001
   2211  fc35		       34		      .byte.b	#%00110100
   2212  fc36		       ff		      .byte.b	#%11111111
   2213  fc37		       71		      .byte.b	#%01110001
   2214  fc38		       d5		      .byte.b	#%11010101
   2215  fc39		       d1		      .byte.b	#%11010001
   2216  fc3a		       5f		      .byte.b	#%01011111
   2217  fc3b		       26		      .byte.b	#%00100110
   2218  fc3c		       2d		      .byte.b	#%00101101
   2219  fc3d		       e9		      .byte.b	#%11101001
   2220  fc3e		       d6		      .byte.b	#%11010110
   2221  fc3f		       26		      .byte.b	#%00100110
   2222  fc40		       ba		      .byte.b	#%10111010
   2223  fc41		       03		      .byte.b	#%00000011
   2224  fc42		       dd		      .byte.b	#%11011101
   2225  fc43		       e0		      .byte.b	#%11100000
   2226  fc44		       57		      .byte.b	#%01010111
   2227  fc45		       14		      .byte.b	#%00010100
   2228  fc46		       35		      .byte.b	#%00110101
   2229  fc47		       e5		      .byte.b	#%11100101
   2230  fc48		       b5		      .byte.b	#%10110101
   2231  fc49		       d4		      .byte.b	#%11010100
   2232  fc4a		       97		      .byte.b	#%10010111
   2233  fc4b
   2234  fc4b				   QrCode4
   2235  fc4b		       09		      .byte.b	#%00001001
   2236  fc4c		       0e		      .byte.b	#%00001110
   2237  fc4d		       0f		      .byte.b	#%00001111
   2238  fc4e		       0c		      .byte.b	#%00001100
   2239  fc4f		       0c		      .byte.b	#%00001100
   2240  fc50		       08		      .byte.b	#%00001000
   2241  fc51		       08		      .byte.b	#%00001000
   2242  fc52		       06		      .byte.b	#%00000110
   2243  fc53		       06		      .byte.b	#%00000110
   2244  fc54		       0b		      .byte.b	#%00001011
   2245  fc55		       0f		      .byte.b	#%00001111
   2246  fc56		       04		      .byte.b	#%00000100
   2247  fc57		       08		      .byte.b	#%00001000
   2248  fc58		       0f		      .byte.b	#%00001111
   2249  fc59		       09		      .byte.b	#%00001001
   2250  fc5a		       07		      .byte.b	#%00000111
   2251  fc5b		       05		      .byte.b	#%00000101
   2252  fc5c		       00		      .byte.b	#%00000000
   2253  fc5d		       0f		      .byte.b	#%00001111
   2254  fc5e		       08		      .byte.b	#%00001000
   2255  fc5f		       0b		      .byte.b	#%00001011
   2256  fc60		       0b		      .byte.b	#%00001011
   2257  fc61		       0b		      .byte.b	#%00001011
   2258  fc62		       08		      .byte.b	#%00001000
   2259  fc63		       0f		      .byte.b	#%00001111
   2260  fc64
   2261  fc64				   PlayerToUpMask
   2262  fc64		       10		      .byte.b	#%00010000	;
   2263  fc65		       01		      .byte.b	#%00000001	;
   2264  fc66
   2265  fc66				   PlayerToDownMask
   2266  fc66		       20		      .byte.b	#%00100000	;
   2267  fc67		       02		      .byte.b	#%00000010	;
   2268  fc68
   2269  fc68				   PlayerToLeftMask
   2270  fc68		       40		      .byte.b	#%01000000	;
   2271  fc69		       04		      .byte.b	#%00000100	;
   2272  fc6a
   2273  fc6a				   PlayerToRightMask
   2274  fc6a		       80		      .byte.b	#%10000000	;
   2275  fc6b		       08		      .byte.b	#%00001000	;
   2276  fc6c
   2277  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2278  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2279  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2280  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2281  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2282  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2283  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2284  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2285  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2286  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2287  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2288  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2289  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2290  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2291  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2292  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2293  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2294  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2295  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2296  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2297  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2298  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2299  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2300  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2301  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2302  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2303  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2304  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2305  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2306  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2307  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2308  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2309  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2310  fc8c
   2311  fc8c
   2312  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2313  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2314  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2315  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2316  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2317  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2318  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2319  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2320  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2321  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2322  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2323  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2324  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2325  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2326  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2327  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2328  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2329  fc9c
   2330  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2331  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2332  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2333  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2334  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2335  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2336  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2337  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2338  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2339  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2340  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2341  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2342  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2343  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2344  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2345  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2346  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2347  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2348  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2349  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2350  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2351  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2352  fcb1
   2353  fcb1				   PlayerToDefaultColor
   2354  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2355  fcb2		       96		      .byte.b	#PLAYER1_COLOR
   2356  fcb3
   2357  fd00					      org	$FD00
   2358  fd00				   Font
   2359  fd00				   C0
   2360  fd00		       e7		      .byte.b	#%11100111	;
   2361  fd01		       a5		      .byte.b	#%10100101	; 
   2362  fd02		       a5		      .byte.b	#%10100101	; 
   2363  fd03		       a5		      .byte.b	#%10100101	; 
   2364  fd04		       e7		      .byte.b	#%11100111	;	
   2365  fd05				   C1
   2366  fd05		       e7		      .byte.b	#%11100111	;
   2367  fd06		       42		      .byte.b	#%01000010	; 
   2368  fd07		       42		      .byte.b	#%01000010	; 
   2369  fd08		       42		      .byte.b	#%01000010	; 
   2370  fd09		       66		      .byte.b	#%01100110	;
   2371  fd0a				   C2
   2372  fd0a		       e7		      .byte.b	#%11100111	;
   2373  fd0b		       24		      .byte.b	#%00100100	; 
   2374  fd0c		       e7		      .byte.b	#%11100111	; 
   2375  fd0d		       81		      .byte.b	#%10000001	; 
   2376  fd0e		       e7		      .byte.b	#%11100111	;
   2377  fd0f				   C3
   2378  fd0f		       e7		      .byte.b	#%11100111	;
   2379  fd10		       81		      .byte.b	#%10000001	; 
   2380  fd11		       e7		      .byte.b	#%11100111	; 
   2381  fd12		       81		      .byte.b	#%10000001	; 
   2382  fd13		       e7		      .byte.b	#%11100111	;
   2383  fd14				   C4
   2384  fd14		       81		      .byte.b	#%10000001	;
   2385  fd15		       81		      .byte.b	#%10000001	; 
   2386  fd16		       e7		      .byte.b	#%11100111	; 
   2387  fd17		       a5		      .byte.b	#%10100101	; 
   2388  fd18		       a5		      .byte.b	#%10100101	;
   2389  fd19				   C5
   2390  fd19		       e7		      .byte.b	#%11100111	;
   2391  fd1a		       81		      .byte.b	#%10000001	; 
   2392  fd1b		       e7		      .byte.b	#%11100111	; 
   2393  fd1c		       24		      .byte.b	#%00100100	; 
   2394  fd1d		       e7		      .byte.b	#%11100111	;
   2395  fd1e				   C6
   2396  fd1e		       e7		      .byte.b	#%11100111	;
   2397  fd1f		       a5		      .byte.b	#%10100101	; 
   2398  fd20		       e7		      .byte.b	#%11100111	; 
   2399  fd21		       24		      .byte.b	#%00100100	; 
   2400  fd22		       e7		      .byte.b	#%11100111	;
   2401  fd23				   C7
   2402  fd23		       81		      .byte.b	#%10000001	;
   2403  fd24		       81		      .byte.b	#%10000001	; 
   2404  fd25		       81		      .byte.b	#%10000001	; 
   2405  fd26		       81		      .byte.b	#%10000001	; 
   2406  fd27		       e7		      .byte.b	#%11100111	;
   2407  fd28				   C8
   2408  fd28		       e7		      .byte.b	#%11100111	;
   2409  fd29		       a5		      .byte.b	#%10100101	; 
   2410  fd2a		       e7		      .byte.b	#%11100111	; 
   2411  fd2b		       a5		      .byte.b	#%10100101	; 
   2412  fd2c		       e7		      .byte.b	#%11100111	;
   2413  fd2d				   C9
   2414  fd2d		       e7		      .byte.b	#%11100111	;
   2415  fd2e		       81		      .byte.b	#%10000001	; 
   2416  fd2f		       e7		      .byte.b	#%11100111	; 
   2417  fd30		       a5		      .byte.b	#%10100101	; 
   2418  fd31		       e7		      .byte.b	#%11100111	;
   2419  fd32				   CA
   2420  fd32		       a5		      .byte.b	#%10100101	;
   2421  fd33		       a5		      .byte.b	#%10100101	; 
   2422  fd34		       e7		      .byte.b	#%11100111	; 
   2423  fd35		       a5		      .byte.b	#%10100101	; 
   2424  fd36		       e7		      .byte.b	#%11100111	;
   2425  fd37				   CB
   2426  fd37		       66		      .byte.b	#%01100110	;
   2427  fd38		       a5		      .byte.b	#%10100101	; 
   2428  fd39		       66		      .byte.b	#%01100110	; 
   2429  fd3a		       a5		      .byte.b	#%10100101	;
   2430  fd3b		       66		      .byte.b	#%01100110	;
   2431  fd3c				   CC
   2432  fd3c		       e7		      .byte.b	#%11100111	;
   2433  fd3d		       24		      .byte.b	#%00100100	; 
   2434  fd3e		       24		      .byte.b	#%00100100	; 
   2435  fd3f		       24		      .byte.b	#%00100100	;
   2436  fd40		       e7		      .byte.b	#%11100111	;
   2437  fd41
   2438  fd41				   CD
   2439  fd41		       66		      .byte.b	#%01100110	;
   2440  fd42		       a5		      .byte.b	#%10100101	; 
   2441  fd43		       a5		      .byte.b	#%10100101	; 
   2442  fd44		       a5		      .byte.b	#%10100101	;
   2443  fd45		       66		      .byte.b	#%01100110	;
   2444  fd46
   2445  fd46				   CE
   2446  fd46		       e7		      .byte.b	#%11100111	;
   2447  fd47		       24		      .byte.b	#%00100100	; 
   2448  fd48		       e7		      .byte.b	#%11100111	; 
   2449  fd49		       24		      .byte.b	#%00100100	; 
   2450  fd4a		       e7		      .byte.b	#%11100111	;
   2451  fd4b
   2452  fd4b				   CF
   2453  fd4b		       24		      .byte.b	#%00100100	;
   2454  fd4c		       24		      .byte.b	#%00100100	; 
   2455  fd4d		       e7		      .byte.b	#%11100111	; 
   2456  fd4e		       24		      .byte.b	#%00100100	; 
   2457  fd4f		       e7		      .byte.b	#%11100111	;
   2458  fd50
   2459  fd50				   CG
   2460  fd50		       c3		      .byte.b	#%11000011	;
   2461  fd51		       a5		      .byte.b	#%10100101	; 
   2462  fd52		       a5		      .byte.b	#%10100101	; 
   2463  fd53		       24		      .byte.b	#%00100100	; 
   2464  fd54		       c3		      .byte.b	#%11000011	;	
   2465  fd55
   2466  fd55				   CH
   2467  fd55		       a5		      .byte.b	#%10100101	;
   2468  fd56		       a5		      .byte.b	#%10100101	; 
   2469  fd57		       e7		      .byte.b	#%11100111	; 
   2470  fd58		       a5		      .byte.b	#%10100101	; 
   2471  fd59		       a5		      .byte.b	#%10100101	;
   2472  fd5a
   2473  fd5a				   CI
   2474  fd5a		       e7		      .byte.b	#%11100111	;
   2475  fd5b		       42		      .byte.b	#%01000010	; 
   2476  fd5c		       42		      .byte.b	#%01000010	; 
   2477  fd5d		       42		      .byte.b	#%01000010	; 
   2478  fd5e		       e7		      .byte.b	#%11100111	;
   2479  fd5f
   2480  fd5f				   CJ
   2481  fd5f		       e7		      .byte.b	#%11100111	;
   2482  fd60		       a5		      .byte.b	#%10100101	; 
   2483  fd61		       81		      .byte.b	#%10000001	; 
   2484  fd62		       81		      .byte.b	#%10000001	; 
   2485  fd63		       81		      .byte.b	#%10000001	;	
   2486  fd64
   2487  fd64				   CK
   2488  fd64		       a5		      .byte.b	#%10100101	;
   2489  fd65		       a5		      .byte.b	#%10100101	; 
   2490  fd66		       66		      .byte.b	#%01100110	; 
   2491  fd67		       a5		      .byte.b	#%10100101	; 
   2492  fd68		       a5		      .byte.b	#%10100101	;
   2493  fd69
   2494  fd69				   CL
   2495  fd69		       e7		      .byte.b	#%11100111	;
   2496  fd6a		       24		      .byte.b	#%00100100	; 
   2497  fd6b		       24		      .byte.b	#%00100100	; 
   2498  fd6c		       24		      .byte.b	#%00100100	; 
   2499  fd6d		       24		      .byte.b	#%00100100	;
   2500  fd6e
   2501  fd6e				   CM
   2502  fd6e		       a5		      .byte.b	#%10100101	;
   2503  fd6f		       a5		      .byte.b	#%10100101	; 
   2504  fd70		       a5		      .byte.b	#%10100101	; 
   2505  fd71		       e7		      .byte.b	#%11100111	; 
   2506  fd72		       a5		      .byte.b	#%10100101	;
   2507  fd73
   2508  fd73				   CN
   2509  fd73		       a5		      .byte.b	#%10100101	;
   2510  fd74		       a5		      .byte.b	#%10100101	; 
   2511  fd75		       a5		      .byte.b	#%10100101	; 
   2512  fd76		       a5		      .byte.b	#%10100101	; 
   2513  fd77		       66		      .byte.b	#%01100110	;	
   2514  fd78
   2515  fd78
   2516  fd78				   CO
   2517  fd78		       42		      .byte.b	#%01000010	;
   2518  fd79		       a5		      .byte.b	#%10100101	; 
   2519  fd7a		       a5		      .byte.b	#%10100101	; 
   2520  fd7b		       a5		      .byte.b	#%10100101	; 
   2521  fd7c		       42		      .byte.b	#%01000010	;	
   2522  fd7d
   2523  fd7d				   CP
   2524  fd7d		       24		      .byte.b	#%00100100	;
   2525  fd7e		       24		      .byte.b	#%00100100	; 
   2526  fd7f		       e7		      .byte.b	#%11100111	; 
   2527  fd80		       a5		      .byte.b	#%10100101	; 
   2528  fd81		       e7		      .byte.b	#%11100111	;
   2529  fd82
   2530  fd82				   CQ
   2531  fd82		       81		      .byte.b	#%10000001	;
   2532  fd83		       e5		      .byte.b	#%11100101	; 
   2533  fd84		       a5		      .byte.b	#%10100101	; 
   2534  fd85		       a5		      .byte.b	#%10100101	; 
   2535  fd86		       e7		      .byte.b	#%11100111	;	
   2536  fd87
   2537  fd87				   CR
   2538  fd87		       a5		      .byte.b	#%10100101	;
   2539  fd88		       a5		      .byte.b	#%10100101	; 
   2540  fd89		       66		      .byte.b	#%01100110	; 
   2541  fd8a		       a5		      .byte.b	#%10100101	; 
   2542  fd8b		       66		      .byte.b	#%01100110	;
   2543  fd8c
   2544  fd8c				   CS
   2545  fd8c		       66		      .byte.b	#%01100110	;
   2546  fd8d		       81		      .byte.b	#%10000001	; 
   2547  fd8e		       42		      .byte.b	#%01000010	; 
   2548  fd8f		       24		      .byte.b	#%00100100	; 
   2549  fd90		       c3		      .byte.b	#%11000011	;
   2550  fd91
   2551  fd91				   CT
   2552  fd91		       42		      .byte.b	#%01000010	;
   2553  fd92		       42		      .byte.b	#%01000010	; 
   2554  fd93		       42		      .byte.b	#%01000010	; 
   2555  fd94		       42		      .byte.b	#%01000010	; 
   2556  fd95		       e7		      .byte.b	#%11100111	;
   2557  fd96
   2558  fd96				   CU
   2559  fd96		       e7		      .byte.b	#%11100111	;
   2560  fd97		       a5		      .byte.b	#%10100101	; 
   2561  fd98		       a5		      .byte.b	#%10100101	; 
   2562  fd99		       a5		      .byte.b	#%10100101	; 
   2563  fd9a		       a5		      .byte.b	#%10100101	;	
   2564  fd9b
   2565  fd9b				   CW
   2566  fd9b		       a5		      .byte.b	#%10100101	;
   2567  fd9c		       e7		      .byte.b	#%11100111	; 
   2568  fd9d		       a5		      .byte.b	#%10100101	; 
   2569  fd9e		       a5		      .byte.b	#%10100101	; 
   2570  fd9f		       a5		      .byte.b	#%10100101	;
   2571  fda0
   2572  fda0				   CY
   2573  fda0		       42		      .byte.b	#%01000010	;
   2574  fda1		       42		      .byte.b	#%01000010	; 
   2575  fda2		       42		      .byte.b	#%01000010	; 
   2576  fda3		       a5		      .byte.b	#%10100101	; 
   2577  fda4		       a5		      .byte.b	#%10100101	;
   2578  fda5
   2579  fda5				   Exclamation
   2580  fda5		       42		      .byte.b	#%01000010	;
   2581  fda6		       00		      .byte.b	#%00000000	; 
   2582  fda7		       42		      .byte.b	#%01000010	; 
   2583  fda8		       42		      .byte.b	#%01000010	; 
   2584  fda9		       42		      .byte.b	#%01000010	;
   2585  fdaa
   2586  fdaa				   Pipe
   2587  fdaa				   Colon
   2588  fdaa		       42		      .byte.b	#%01000010	;
   2589  fdab		       42		      .byte.b	#%01000010	; 
   2590  fdac		       00		      .byte.b	#%00000000	; 
   2591  fdad		       42		      .byte.b	#%01000010	; 
   2592  fdae		       42		      .byte.b	#%01000010	;
   2593  fdaf
   2594  fdaf				   Space
   2595  fdaf				   C0B
   2596  fdaf		       00		      .byte.b	#%00000000	;
   2597  fdb0		       00		      .byte.b	#%00000000	; 
   2598  fdb1		       00		      .byte.b	#%00000000	; 
   2599  fdb2		       00		      .byte.b	#%00000000	; 
   2600  fdb3		       00		      .byte.b	#%00000000	;	
   2601  fdb4				   C1B
   2602  fdb4		       24		      .byte.b	#%00100100	;
   2603  fdb5		       00		      .byte.b	#%00000000	; 
   2604  fdb6		       00		      .byte.b	#%00000000	; 
   2605  fdb7		       00		      .byte.b	#%00000000	; 
   2606  fdb8		       00		      .byte.b	#%00000000	;
   2607  fdb9				   C2B
   2608  fdb9		       66		      .byte.b	#%01100110	;
   2609  fdba		       00		      .byte.b	#%00000000	; 
   2610  fdbb		       00		      .byte.b	#%00000000	; 
   2611  fdbc		       00		      .byte.b	#%00000000	; 
   2612  fdbd		       00		      .byte.b	#%00000000	;
   2613  fdbe				   C3B
   2614  fdbe		       e7		      .byte.b	#%11100111	;
   2615  fdbf		       00		      .byte.b	#%00000000	; 
   2616  fdc0		       00		      .byte.b	#%00000000	; 
   2617  fdc1		       00		      .byte.b	#%00000000	; 
   2618  fdc2		       00		      .byte.b	#%00000000	;
   2619  fdc3				   C4B
   2620  fdc3		       e7		      .byte.b	#%11100111	;
   2621  fdc4		       24		      .byte.b	#%00100100	; 
   2622  fdc5		       00		      .byte.b	#%00000000	; 
   2623  fdc6		       00		      .byte.b	#%00000000	; 
   2624  fdc7		       00		      .byte.b	#%00000000	;
   2625  fdc8				   C5B
   2626  fdc8		       e7		      .byte.b	#%11100111	;
   2627  fdc9		       66		      .byte.b	#%01100110	; 
   2628  fdca		       00		      .byte.b	#%00000000	; 
   2629  fdcb		       00		      .byte.b	#%00000000	; 
   2630  fdcc		       00		      .byte.b	#%00000000	;
   2631  fdcd				   C6B
   2632  fdcd		       e7		      .byte.b	#%11100111	;
   2633  fdce		       e7		      .byte.b	#%11100111	; 
   2634  fdcf		       00		      .byte.b	#%00000000	; 
   2635  fdd0		       00		      .byte.b	#%00000000	; 
   2636  fdd1		       00		      .byte.b	#%00000000	;
   2637  fdd2				   C7B
   2638  fdd2		       e7		      .byte.b	#%11100111	;
   2639  fdd3		       e7		      .byte.b	#%11100111	; 
   2640  fdd4		       24		      .byte.b	#%00100100	; 
   2641  fdd5		       00		      .byte.b	#%00000000	; 
   2642  fdd6		       00		      .byte.b	#%00000000	;
   2643  fdd7				   C8B
   2644  fdd7		       e7		      .byte.b	#%11100111	;
   2645  fdd8		       e7		      .byte.b	#%11100111	; 
   2646  fdd9		       66		      .byte.b	#%01100110	; 
   2647  fdda		       00		      .byte.b	#%00000000	; 
   2648  fddb		       00		      .byte.b	#%00000000	;
   2649  fddc				   C9B
   2650  fddc		       e7		      .byte.b	#%11100111	;
   2651  fddd		       e7		      .byte.b	#%11100111	; 
   2652  fdde		       e7		      .byte.b	#%11100111	; 
   2653  fddf		       00		      .byte.b	#%00000000	; 
   2654  fde0		       00		      .byte.b	#%00000000	;
   2655  fde1				   CAB
   2656  fde1		       e7		      .byte.b	#%11100111	;
   2657  fde2		       e7		      .byte.b	#%11100111	; 
   2658  fde3		       e7		      .byte.b	#%11100111	; 
   2659  fde4		       24		      .byte.b	#%00100100	; 
   2660  fde5		       00		      .byte.b	#%00000000	;
   2661  fde6				   CBB
   2662  fde6		       e7		      .byte.b	#%11100111	;
   2663  fde7		       e7		      .byte.b	#%11100111	; 
   2664  fde8		       e7		      .byte.b	#%11100111	; 
   2665  fde9		       66		      .byte.b	#%01100110	; 
   2666  fdea		       00		      .byte.b	#%00000000	;
   2667  fdeb				   CCB
   2668  fdeb		       e7		      .byte.b	#%11100111	;
   2669  fdec		       e7		      .byte.b	#%11100111	; 
   2670  fded		       e7		      .byte.b	#%11100111	; 
   2671  fdee		       e7		      .byte.b	#%11100111	; 
   2672  fdef		       00		      .byte.b	#%00000000	;
   2673  fdf0
   2674  fdf0				   CDB
   2675  fdf0		       e7		      .byte.b	#%11100111	;
   2676  fdf1		       e7		      .byte.b	#%11100111	; 
   2677  fdf2		       e7		      .byte.b	#%11100111	; 
   2678  fdf3		       e7		      .byte.b	#%11100111	; 
   2679  fdf4		       24		      .byte.b	#%00100100	;
   2680  fdf5
   2681  fdf5				   CEB
   2682  fdf5		       e7		      .byte.b	#%11100111	;
   2683  fdf6		       e7		      .byte.b	#%11100111	; 
   2684  fdf7		       e7		      .byte.b	#%11100111	; 
   2685  fdf8		       e7		      .byte.b	#%11100111	; 
   2686  fdf9		       66		      .byte.b	#%01100110	;
   2687  fdfa
   2688  fdfa				   CFB
   2689  fdfa		       e7		      .byte.b	#%11100111	;
   2690  fdfb		       e7		      .byte.b	#%11100111	; 
   2691  fdfc		       e7		      .byte.b	#%11100111	; 
   2692  fdfd		       e7		      .byte.b	#%11100111	; 
   2693  fdfe		       e7		      .byte.b	#%11100111	;
   2694  fdff
   2695  fe00					      org	$FE00
   2696  fe00				   AesTable
   2697  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2698  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2699  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2700  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2701  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2702  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2703  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2704  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2705  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2706  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2707  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2708  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2709  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2710  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2711  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2712  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2713  ff00
   2714  ff00					      org	$FF00
   2715  ff00				   StaticText		; All static text must be on the same MSB block. 
   2716  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2717  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2718  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2719  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2720  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2721  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2722  ff05
   2723  ff05				   HellwayLeftText
   2724  ff05		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2725  ff06		       59		      .byte.b	#<CH + #FONT_OFFSET
   2726  ff07		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2727  ff08		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2728  ff09
   2729  ff09				   HellwayRightText
   2730  ff09		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2731  ff0a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2732  ff0b		       81		      .byte.b	#<CP + #FONT_OFFSET
   2733  ff0c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2734  ff0d		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2735  ff0e
   2736  ff0e				   OpbText
   2737  ff0e		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2738  ff0f		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2739  ff10		       81		      .byte.b	#<CP + #FONT_OFFSET
   2740  ff11		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2741  ff12
   2742  ff12				   YearText
   2743  ff12		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2744  ff13		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2745  ff14		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2746  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2747  ff16		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2748  ff17
   2749  ff17				   GoText
   2750  ff17		       54		      .byte.b	#<CG + #FONT_OFFSET
   2751  ff18		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2752  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2753  ff1a		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2754  ff1b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2755  ff1c
   2756  ff1c				   ReadyText
   2757  ff1c		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2758  ff1d		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2759  ff1e		       36		      .byte.b	#<CA + #FONT_OFFSET
   2760  ff1f		       45		      .byte.b	#<CD + #FONT_OFFSET
   2761  ff20		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2762  ff21
   2763  ff21				   WinText
   2764  ff21		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2765  ff22		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2766  ff23		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2767  ff24
   2768  ff24				   LoseText
   2769  ff24		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2770  ff25		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2771  ff26		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2772  ff27
   2773  ff27				   EndStaticText
   2774  ff27
   2775  ff27				   TachometerSizeLookup1
   2776  ff27		       1f		      .byte.b	#%00011111
   2777  ff28		       3f		      .byte.b	#%00111111
   2778  ff29		       7f		      .byte.b	#%01111111
   2779  ff2a		       ff		      .byte.b	#%11111111
   2780  ff2b		       ff		      .byte.b	#%11111111
   2781  ff2c		       ff		      .byte.b	#%11111111
   2782  ff2d		       ff		      .byte.b	#%11111111
   2783  ff2e		       ff		      .byte.b	#%11111111
   2784  ff2f
   2785  ff2f				   TachometerSizeLookup2
   2786  ff2f		       00		      .byte.b	#%00000000
   2787  ff30		       00		      .byte.b	#%00000000
   2788  ff31		       00		      .byte.b	#%00000000
   2789  ff32		       00		      .byte.b	#%00000000
   2790  ff33		       80		      .byte.b	#%10000000
   2791  ff34		       c0		      .byte.b	#%11000000
   2792  ff35		       e0		      .byte.b	#%11100000
   2793  ff36		       f0		      .byte.b	#%11110000
   2794  ff37
   2795  ff37				   TachometerGearLookup
   2796  ff37		       01		      .byte.b	#%00000001
   2797  ff38		       02		      .byte.b	#%00000010
   2798  ff39		       04		      .byte.b	#%00000100
   2799  ff3a		       08		      .byte.b	#%00001000
   2800  ff3b		       10		      .byte.b	#%00010000
   2801  ff3c		       30		      .byte.b	#%00110000
   2802  ff3d
   2803  ff3d				   EngineSoundType
   2804  ff3d		       02		      .byte.b	#2
   2805  ff3e		       02		      .byte.b	#2
   2806  ff3f		       0e		      .byte.b	#14
   2807  ff40		       06		      .byte.b	#6
   2808  ff41		       06		      .byte.b	#6
   2809  ff42		       0e		      .byte.b	#14
   2810  ff43
   2811  ff43				   EngineBaseFrequence
   2812  ff43		       1f		      .byte.b	#31
   2813  ff44		       15		      .byte.b	#21
   2814  ff45		       14		      .byte.b	#20
   2815  ff46		       1f		      .byte.b	#31
   2816  ff47		       16		      .byte.b	#22
   2817  ff48		       03		      .byte.b	#3
   2818  ff49
   2819  ff49				   CarSprite0		; Upside down, Original Car
   2820  ff49		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2821  ff51				   CarSprite0NoPadding
   2822  ff51		       7e		      .byte.b	#%01111110
   2823  ff52		       24		      .byte.b	#%00100100
   2824  ff53		       bd		      .byte.b	#%10111101
   2825  ff54		       3c		      .byte.b	#%00111100
   2826  ff55		       bd		      .byte.b	#%10111101
   2827  ff56		       3c		      .byte.b	#%00111100
   2828  ff57
   2829  ff57				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2830  ff57		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2831  ff5f				   CarSprite1NoPadding
   2832  ff5f		       bd		      .byte.b	#%10111101
   2833  ff60		       7e		      .byte.b	#%01111110
   2834  ff61		       5a		      .byte.b	#%01011010
   2835  ff62		       66		      .byte.b	#%01100110
   2836  ff63		       bd		      .byte.b	#%10111101
   2837  ff64		       3c		      .byte.b	#%00111100
   2838  ff65
   2839  ff65				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2840  ff65		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2841  ff6d				   CarSprite2NoPadding
   2842  ff6d		       7e		      .byte.b	#%01111110
   2843  ff6e		       a5		      .byte.b	#%10100101
   2844  ff6f		       42		      .byte.b	#%01000010
   2845  ff70		       42		      .byte.b	#%01000010
   2846  ff71		       bd		      .byte.b	#%10111101
   2847  ff72		       7e		      .byte.b	#%01111110
   2848  ff73
   2849  ff73				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2850  ff73		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2851  ff7b				   CarSprite3NoPadding
   2852  ff7b		       3c		      .byte.b	#%00111100
   2853  ff7c		       db		      .byte.b	#%11011011
   2854  ff7d		       db		      .byte.b	#%11011011
   2855  ff7e		       3c		      .byte.b	#%00111100
   2856  ff7f		       5a		      .byte.b	#%01011010
   2857  ff80		       3c		      .byte.b	#%00111100
   2858  ff81
   2859  ff81				   TrafficSpeeds
   2860  ff81		       00		      .byte.b	#$00	;  Trafic0 L
   2861  ff82		       00		      .byte.b	#$00	;  Trafic0 H
   2862  ff83		       0a		      .byte.b	#$0A	;  Trafic1 L
   2863  ff84		       01		      .byte.b	#$01	;  Trafic1 H
   2864  ff85		       e6		      .byte.b	#$E6	;  Trafic2 L
   2865  ff86		       00		      .byte.b	#$00	;  Trafic2 H
   2866  ff87		       c2		      .byte.b	#$C2	;  Trafic3 L
   2867  ff88		       00		      .byte.b	#$00	;  Trafic3 H
   2868  ff89		       9e		      .byte.b	#$9E	;  Trafic4 L
   2869  ff8a		       00		      .byte.b	#$00	;  Trafic4 H
   2870  ff8b				   TrafficSpeedsHighDelta
   2871  ff8b		       00		      .byte.b	#$00	;  Trafic0 L
   2872  ff8c		       00		      .byte.b	#$00	;  Trafic0 H
   2873  ff8d		       0a		      .byte.b	#$0A	;  Trafic1 L
   2874  ff8e		       01		      .byte.b	#$01	;  Trafic1 H
   2875  ff8f		       c8		      .byte.b	#$C8	;  Trafic2 L
   2876  ff90		       00		      .byte.b	#$00	;  Trafic2 H
   2877  ff91		       86		      .byte.b	#$86	;  Trafic3 L
   2878  ff92		       00		      .byte.b	#$00	;  Trafic3 H
   2879  ff93		       44		      .byte.b	#$44	;  Trafic4 L
   2880  ff94		       00		      .byte.b	#$00	;  Trafic4 H
   2881  ff95
   2882  ff95				   CarIdToSpriteAddressL
   2883  ff95		       49		      .byte.b	#<CarSprite0
   2884  ff96		       57		      .byte.b	#<CarSprite1
   2885  ff97		       65		      .byte.b	#<CarSprite2
   2886  ff98		       73		      .byte.b	#<CarSprite3
   2887  ff99
   2888  ff99				   CarIdToSpriteAddressH
   2889  ff99		       ff		      .byte.b	#>CarSprite0
   2890  ff9a		       ff		      .byte.b	#>CarSprite1
   2891  ff9b		       ff		      .byte.b	#>CarSprite2
   2892  ff9c		       ff		      .byte.b	#>CarSprite3
   2893  ff9d
   2894  ff9d				   EnemyCarIdToSpriteAddressL
   2895  ff9d		       51		      .byte.b	#<CarSprite0NoPadding
   2896  ff9e		       5f		      .byte.b	#<CarSprite1NoPadding
   2897  ff9f		       6d		      .byte.b	#<CarSprite2NoPadding
   2898  ffa0		       7b		      .byte.b	#<CarSprite3NoPadding
   2899  ffa1
   2900  ffa1				   EnemyCarIdToSpriteAddressH
   2901  ffa1		       ff		      .byte.b	#>CarSprite0NoPadding
   2902  ffa2		       ff		      .byte.b	#>CarSprite1NoPadding
   2903  ffa3		       ff		      .byte.b	#>CarSprite2NoPadding
   2904  ffa4		       ff		      .byte.b	#>CarSprite3NoPadding
   2905  ffa5
   2906  ffa5				   CarIdToAccelerateSpeed
   2907  ffa5		       80		      .byte.b	#128
   2908  ffa6		       c0		      .byte.b	#192
   2909  ffa7		       60		      .byte.b	#96
   2910  ffa8		       c0		      .byte.b	#192
   2911  ffa9
   2912  ffa9				   CarIdToTimeoverBreakInterval 		; Glide
   2913  ffa9		       03		      .byte.b	#%00000011	;Every 4 frames
   2914  ffaa		       03		      .byte.b	#%00000011	;Every 4 frames
   2915  ffab		       0f		      .byte.b	#%00001111	;Every 16 frames
   2916  ffac		       03		      .byte.b	#%00000011	;Every 4 frames
   2917  ffad
   2918  ffad				   CarIdToMaxSpeedL
   2919  ffad		       80		      .byte.b	#$80
   2920  ffae		       00		      .byte.b	#$00	; One less gear
   2921  ffaf		       80		      .byte.b	#$80
   2922  ffb0		       80		      .byte.b	#$80
   2923  ffb1
   2924  ffb1				   CarIdToMaxGear
   2925  ffb1		       05		      .byte.b	#5
   2926  ffb2		       04		      .byte.b	#4	; One less gear
   2927  ffb3		       05		      .byte.b	#5
   2928  ffb4		       05		      .byte.b	#5
   2929  ffb5
   2930  ffb5				   GearToBreakSpeedTable
   2931  ffb5		       09		      .byte.b	#(BREAK_SPEED - 1)
   2932  ffb6		       09		      .byte.b	#(BREAK_SPEED - 1)
   2933  ffb7		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2934  ffb8		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2935  ffb9		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2936  ffba		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2937  ffbb
   2938  ffbb				   TrafficColorTable
   2939  ffbb		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2940  ffbc		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2941  ffbd		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2942  ffbe		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2943  ffbf
   2944  ffbf				   TrafficChanceTable
   2945  ffbf		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2946  ffc0		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2947  ffc1		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2948  ffc2		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2949  ffc3
   2950  ffc3				   TrafficTimeTable
   2951  ffc3		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2952  ffc4		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2953  ffc5		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2954  ffc6		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2955  ffc7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2956  ffc8
   2957  ffc8
   2958  fffc					      org	$FFFC
   2959  fffc		       00 f0		      .word.w	BeforeStart
   2960  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
