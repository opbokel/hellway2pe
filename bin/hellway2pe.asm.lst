------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 37	   SCORE_FONT_COLOR_GOOD =	$37
     58  f000		       00 d8	   OP_SCORE_FONT_COLOR_GOOD =	$D8
     59  f000
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 56	   OP_SCORE_FONT_COLOR_BAD =	$56
     62  f000
     63  f000		       00 38	   SCORE_FONT_COLOR_START =	$38	;Cannot be the same as good, font colors = game state
     64  f000		       00 c8	   OP_SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     65  f000
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000		       00 ab	   OP_SCORE_FONT_COLOR_OVER =	$AB
     68  f000
     69  f000		       00 f9	   PLAYER0_COLOR =	$F9
     70  f000		       00 98	   PLAYER1_COLOR =	$98
     71  f000
     72  f000		       00 20	   PLAYER_0_X_START =	32	;
     73  f000		       00 29	   PLAYER_1_X_START =	41	;
     74  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     75  f000
     76  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     77  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     78  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     79  f000
     80  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     81  f000
     82  f000		       00 00	   BLACK      =	$00	;
     83  f000
     84  f000		       00 10	   MAX_GAME_MODE =	16
     85  f000
     86  f000		       00 08	   PARALLAX_SIZE =	8
     87  f000
     88  f000		       00 05	   HALF_TEXT_SIZE =	5
     89  f000
     90  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     91  f000
     92  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     93  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     94  f000		       00 00	   QR_CODE_COLOR =	$00
     95  f000		       00 19	   QR_CODE_SIZE =	25
     96  f000
     97  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     98  f000
     99  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    100  f000		       00 29	   VBLANK_TIMER =	41
    101  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    102  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    103  f000
    104  f000		       00 08	   ENGINE_VOLUME =	8
    105  f000
    106  f000		       00 08	   CAR_SIZE   =	8
    107  f000
    108  f000		       00 80	   GRP0Cache  =	$80
    109  f000		       00 81	   PF0Cache   =	$81
    110  f000		       00 82	   PF1Cache   =	$82
    111  f000		       00 83	   PF2Cache   =	$83
    112  f000		       00 84	   GRP1Cache  =	$84
    113  f000		       00 85	   ENABLCache =	$85
    114  f000		       00 86	   ENAM0Cache =	$86
    115  f000		       00 87	   ENAM1Cache =	$87
    116  f000
    117  f000		       00 8c	   FrameCount0 =	$8C	;
    118  f000		       00 8d	   FrameCount1 =	$8D	;
    119  f000
    120  f000		       00 8e	   CollisionCounter =	$8E
    121  f000		       00 8f	   OpCollisionCounter =	$8F
    122  f000
    123  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    124  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    125  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    126  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    127  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    128  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    129  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    130  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    131  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000		       00 b4	   Tmp4       =	$B4
    139  f000		       00 b5	   Tmp5       =	$B5
    140  f000
    141  f000		       00 b6	   Player0X   =	$B6
    142  f000		       00 b7	   Player1X   =	$B7
    143  f000		       00 b8	   CountdownTimer =	$B8
    144  f000		       00 b9	   OpCountdownTimer =	$B9
    145  f000		       00 ba	   Traffic0Msb =	$BA
    146  f000		       00 bb	   OpTraffic0Msb =	$BB
    147  f000		       00 bc	   SwitchDebounceCounter =	$BC
    148  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    149  f000		       00 be	   TrafficChance =	$BE
    150  f000		       00 bf	   OpTrafficChance =	$BF
    151  f000
    152  f000		       00 c0	   CheckpointTime =	$C0
    153  f000		       00 c1	   OpCheckpointTime =	$C1
    154  f000		       00 c2	   TrafficColor =	$C2
    155  f000		       00 c3	   OpTrafficColor =	$C3
    156  f000		       00 c4	   CurrentDifficulty =	$C4
    157  f000		       00 c5	   OpCurrentDifficulty =	$C5
    158  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    159  f000
    160  f000		       00 c7	   CurrentCarId =	$C7
    161  f000		       00 c8	   OpCurrentCarId =	$C8
    162  f000
    163  f000		       00 c9	   ScoreFontColor =	$C9
    164  f000		       00 ca	   OpScoreFontColor =	$CA
    165  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    166  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    167  f000		       00 cd	   NextCheckpoint =	$CD
    168  f000		       00 ce	   OpNextCheckpoint =	$CE
    169  f000		       00 cf	   OpponentLine =	$CF
    170  f000
    171  f000		       00 d0	   ScoreD0    =	$D0
    172  f000		       00 d1	   ScoreD1    =	$D1
    173  f000		       00 d2	   ScoreD2    =	$D2
    174  f000		       00 d3	   ScoreD3    =	$D3
    175  f000		       00 d4	   ScoreD4    =	$D4
    176  f000
    177  f000		       00 d5	   Gear       =	$D5
    178  f000		       00 d6	   OpGear     =	$D6
    179  f000
    180  f000		       00 d7	   CarSpritePointerL =	$D7
    181  f000		       00 d8	   CarSpritePointerH =	$D8
    182  f000
    183  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    184  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    185  f000
    186  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    187  f000
    188  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    189  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    190  f000
    191  f000		       00 de	   Player0SpeedL =	$DE
    192  f000		       00 df	   Player1SpeedL =	$DF
    193  f000		       00 f0	   Player0SpeedH =	$F0
    194  f000		       00 f1	   Player1SpeedH =	$F1
    195  f000
    196  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 3a f7 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 76 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 de		      STA	Player0SpeedL
    257  f059		       85 df		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   StoreCurrentDifficulty
    274  f071		       86 c4		      STX	CurrentDifficulty
    275  f073		       86 c5		      STX	OpCurrentDifficulty
    276  f075		       a2 00		      LDX	#0
    277  f077		       20 f2 f6 	      JSR	ConfigureDifficulty
    278  f07a		       e8		      INX
    279  f07b		       20 f2 f6 	      JSR	ConfigureDifficulty
    280  f07e
    281  f07e				   SetGameNotRunning
    282  f07e		       a9 00		      LDA	#0
    283  f080		       85 bd		      STA	GameStatus
    284  f082
    285  f082				   ConfigureTimer
    286  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    287  f084		       85 b8		      STA	CountdownTimer	;3
    288  f086		       85 b9		      STA	OpCountdownTimer	;3
    289  f088
    290  f088				   ConfigurePlayer1XPosition
    291  f088		       a9 29		      LDA	#PLAYER_1_X_START	;2
    292  f08a		       85 b7		      STA	Player1X	;3
    293  f08c
    294  f08c				   ConfigureOpNextCheckpoint
    295  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    296  f08e		       85 ce		      STA	OpNextCheckpoint
    297  f090
    298  f090				   HPositioning 		; Avoid sleep doing needed stuff
    299  f090		       85 02		      STA	WSYNC
    300  f092
    301  f092				   ConfigurePlayer0XPosition
    302  f092		       a9 20		      LDA	#PLAYER_0_X_START	;2
    303  f094		       85 b6		      STA	Player0X	;3
    304  f096
    305  f096				   ConfigureMissileSize
    306  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    307  f098		       85 04		      STA	NUSIZ0	;3
    308  f09a		       85 05		      STA	NUSIZ1	;3
    309  f09c
    310  f09c				   ConfigureNextCheckpoint
    311  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    312  f09e		       85 cd		      STA	NextCheckpoint
    313  f0a0
    314  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    315  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	5	;
      1  f0a2				   .CYCLES    SET	5
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    317  f0a5		       85 12		      STA	RESM0
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    319  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    321  f0ab		       85 13		      STA	RESM1
      0  f0ad					      SLEEP	3
      1  f0ad				   .CYCLES    SET	3
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad					      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad					      ELSE
     12  f0ad		       24 00		      bit	VSYNC
     13  f0af					      ENDIF
     14  f0af				   .CYCLES    SET	.CYCLES - 3
     15  f0af					      ENDIF
     16  f0af
     17  f0af				  -	      REPEAT	.CYCLES / 2
     18  f0af				  -	      nop
     19  f0af					      REPEND
    323  f0af
    324  f0af		       a9 d0		      LDA	#$D0
    325  f0b1		       85 24		      STA	HMBL
    326  f0b3		       85 22		      STA	HMM0
    327  f0b5		       85 23		      STA	HMM1
    328  f0b7		       85 02		      STA	WSYNC
    329  f0b9		       85 2a		      STA	HMOVE
    330  f0bb		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    331  f0bd		       85 2b		      STA	HMCLR
      0  f0bf					      SLEEP	31
      1  f0bf				   .CYCLES    SET	31
      2  f0bf
      3  f0bf				  -	      IF	.CYCLES < 2
      4  f0bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bf				  -	      ERR
      6  f0bf					      ENDIF
      7  f0bf
      8  f0bf					      IF	.CYCLES & 1
      9  f0bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bf				  -	      nop	0
     11  f0bf					      ELSE
     12  f0bf		       24 00		      bit	VSYNC
     13  f0c1					      ENDIF
     14  f0c1				   .CYCLES    SET	.CYCLES - 3
     15  f0c1					      ENDIF
     16  f0c1
     17  f0c1					      REPEAT	.CYCLES / 2
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     19  f0cf					      REPEND
    333  f0cf		       85 10		      STA	RESP0
    334  f0d1		       85 11		      STA	RESP1
    335  f0d3
    336  f0d3				   WaitResetToEnd
    337  f0d3		       ad 84 02 	      LDA	INTIM
    338  f0d6		       d0 fb		      BNE	WaitResetToEnd
    339  f0d8
    340  f0d8				   MainLoop
    341  f0d8		       a9 02		      LDA	#2
    342  f0da		       85 00		      STA	VSYNC
    343  f0dc		       85 02		      STA	WSYNC
    344  f0de		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    345  f0e0							;Some free cycles here!
    346  f0e0				   PrepareMaxHMove
    347  f0e0		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    348  f0e2		       85 09		      STA	COLUBK
      0  f0e4					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e4				   .CYCLES    SET	24 - 11
      2  f0e4
      3  f0e4				  -	      IF	.CYCLES < 2
      4  f0e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e4				  -	      ERR
      6  f0e4					      ENDIF
      7  f0e4
      8  f0e4					      IF	.CYCLES & 1
      9  f0e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e4				  -	      nop	0
     11  f0e4					      ELSE
     12  f0e4		       24 00		      bit	VSYNC
     13  f0e6					      ENDIF
     14  f0e6				   .CYCLES    SET	.CYCLES - 3
     15  f0e6					      ENDIF
     16  f0e6
     17  f0e6					      REPEAT	.CYCLES / 2
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    350  f0eb		       a9 80		      LDA	#$80
    351  f0ed		       85 24		      STA	HMBL
    352  f0ef		       85 22		      STA	HMM0
    353  f0f1		       85 23		      STA	HMM1
    354  f0f3		       85 20		      STA	HMP0
    355  f0f5		       85 21		      STA	HMP1
    356  f0f7		       85 02		      STA	WSYNC
    357  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    358  f0fb
    359  f0fb				   ConfigVBlankTimer
    360  f0fb		       a5 c6		      LDA	GameMode
    361  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    362  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    363  f101		       a9 29		      LDA	#VBLANK_TIMER
    364  f103		       4c 08 f1 	      JMP	SetVblankTimer
    365  f106				   SetVblankTimerQrCode
    366  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    367  f108
    368  f108				   SetVblankTimer
    369  f108		       85 02		      STA	WSYNC	;3
    370  f10a		       8d 96 02 	      STA	TIM64T	;3	
    371  f10d		       a9 00		      LDA	#0	;2
    372  f10f		       85 00		      STA	VSYNC	;3	
    373  f111
    374  f111				   RandomizeGame
    375  f111		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f113		       d0 2d		      BNE	EndRandomizeGame
    377  f115		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f117		       29 02		      AND	#%00000010
    379  f119		       f0 24		      BEQ	DeterministicGame
    380  f11b		       a6 96		      LDX	TrafficOffset1 + 2
    381  f11d		       bd 00 fe 	      LDA	AesTable,X
    382  f120		       45 8c		      EOR	FrameCount0
    383  f122		       85 96		      STA	TrafficOffset1 + 2
    384  f124		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f126		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f128		       bd 00 fe 	      LDA	AesTable,X
    387  f12b		       45 8c		      EOR	FrameCount0
    388  f12d		       85 9a		      STA	TrafficOffset2 + 2
    389  f12f		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f131		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f133		       bd 00 fe 	      LDA	AesTable,X
    392  f136		       45 8c		      EOR	FrameCount0
    393  f138		       85 9e		      STA	TrafficOffset3 + 2
    394  f13a		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13c		       4c 42 f1 	      JMP	EndRandomizeGame
    396  f13f
    397  f13f				   DeterministicGame
    398  f13f		       20 3a f7 	      JSR	DefaultOffsets
    399  f142
    400  f142				   EndRandomizeGame
    401  f142
    402  f142				   CountFrame
    403  f142		       e6 8c		      INC	FrameCount0	; 5
    404  f144		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    405  f146		       e6 8d		      INC	FrameCount1	; 5 
    406  f148				   SkipIncFC1
    407  f148
    408  f148				   CallDrawQrCode
    409  f148		       a5 c6		      LDA	GameMode
    410  f14a		       c9 10		      CMP	#MAX_GAME_MODE
    411  f14c		       d0 03		      BNE	TestIsGameRunning
    412  f14e		       4c c4 fa 	      JMP	DrawQrCode
    413  f151
    414  f151							;Does not update the game if not running
    415  f151				   TestIsGameRunning
    416  f151		       a5 bd		      LDA	GameStatus	;3
    417  f153		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    418  f155				   SelectCarWithDpadCall		; Only do it when game is stoped
    419  f155		       a2 00		      LDX	#0	; Player 0
    420  f157		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    421  f159		       85 b0		      STA	Tmp0
    422  f15b		       20 3e f8 	      JSR	SelectCarWithDpad
    423  f15e		       e8		      INX		; Player 1
    424  f15f		       20 3e f8 	      JSR	SelectCarWithDpad
    425  f162
    426  f162							; Needs to draw the opponent in the correct line even when game stoped  
    427  f162							; Draeing is a destructive operation
    428  f162		       20 50 f8 	      JSR	ProcessOpponentLine
    429  f165
    430  f165				   CallConfigureCarSprites
    431  f165		       20 f8 f7 	      JSR	ConfigureCarSprites
    432  f168				   SkipUpdateLogicJump
    433  f168		       4c a0 f1 	      JMP	SkipUpdateLogic
    434  f16b				   ContinueWithGameLogic
    435  f16b
    436  f16b				   CallEverySecond		; Timer for now
    437  f16b		       a2 00		      LDX	#0
    438  f16d		       20 76 fa 	      JSR	EverySecond
    439  f170		       e8		      INX
    440  f171		       20 76 fa 	      JSR	EverySecond
    441  f174
    442  f174				   CallProcessSpeed
    443  f174		       a2 00		      LDX	#0
    444  f176		       20 8a f9 	      JSR	ProcessSpeed
    445  f179
    446  f179		       e8		      INX		; Player 1
    447  f17a		       20 8a f9 	      JSR	ProcessSpeed
    448  f17d
    449  f17d				   CallUpdateOffsets
    450  f17d		       a2 00		      LDX	#0	; Player 0
    451  f17f		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    452  f181		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    453  f183		       a5 de		      LDA	Player0SpeedL
    454  f185		       85 b4		      STA	Tmp4
    455  f187		       a5 f0		      LDA	Player0SpeedH
    456  f189		       85 b5		      STA	Tmp5
    457  f18b		       20 37 f9 	      JSR	UpdateOffsets
    458  f18e
    459  f18e							;LDX Exits the call with correct value.
    460  f18e		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    461  f190		       85 b3		      STA	Tmp3
    462  f192		       a5 df		      LDA	Player1SpeedL
    463  f194		       85 b4		      STA	Tmp4
    464  f196		       a5 f1		      LDA	Player1SpeedH
    465  f198		       85 b5		      STA	Tmp5
    466  f19a		       20 37 f9 	      JSR	UpdateOffsets
    467  f19d
    468  f19d				   CallProcessOpponentLine
    469  f19d		       20 50 f8 	      JSR	ProcessOpponentLine
    470  f1a0
    471  f1a0				   SkipUpdateLogic		; Continue here if not paused
    472  f1a0
    473  f1a0				   CallCalculateGear
    474  f1a0		       a2 00		      LDX	#0
    475  f1a2		       20 83 fa 	      JSR	CalculateGear
    476  f1a5		       e8		      INX
    477  f1a6		       20 83 fa 	      JSR	CalculateGear
    478  f1a9
    479  f1a9				   CallProcessFontColor
    480  f1a9		       a5 8c		      LDA	FrameCount0
    481  f1ab		       29 01		      AND	#%00000001
    482  f1ad		       d0 0a		      BNE	ContinueProcessFontColorPlayer0	; Not my frame, always process!
    483  f1af		       a5 f2		      LDA	IsOpponentInFront
    484  f1b1		       f0 06		      BEQ	ContinueProcessFontColorPlayer0	; Oponent not in front
    485  f1b3		       a5 c9		      LDA	ScoreFontColor
    486  f1b5		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    487  f1b7		       f0 15		      BEQ	ContinueProcessFontColorPlayer1	; Opponent is in front! Skip counting checkpoint for the frame (double time)
    488  f1b9				   ContinueProcessFontColorPlayer0
    489  f1b9		       a2 00		      LDX	#0
    490  f1bb		       20 90 fa 	      JSR	ProcessScoreFontColor
    491  f1be				   ContinueProcessIsToUpdateColorPlayer1
    492  f1be		       a5 8c		      LDA	FrameCount0
    493  f1c0		       29 01		      AND	#%00000001
    494  f1c2		       f0 0a		      BEQ	ContinueProcessFontColorPlayer1	; Not my frame, always process!
    495  f1c4		       a5 f2		      LDA	IsOpponentInFront
    496  f1c6		       f0 06		      BEQ	ContinueProcessFontColorPlayer1	; Oponent not in front
    497  f1c8		       a5 ca		      LDA	OpScoreFontColor
    498  f1ca		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    499  f1cc		       f0 05		      BEQ	SkipProcessFontColor	; Opponent is in front and is checkpoint Skip counting checkpoint for the frame (double time)
    500  f1ce				   ContinueProcessFontColorPlayer1
    501  f1ce		       a2 01		      LDX	#1
    502  f1d0		       20 90 fa 	      JSR	ProcessScoreFontColor
    503  f1d3				   SkipProcessFontColor
    504  f1d3
    505  f1d3				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    506  f1d3		       a5 8c		      LDA	FrameCount0
    507  f1d5		       29 01		      AND	#%00000001
    508  f1d7		       d0 0c		      BNE	CallProcessPlayer1Status
    509  f1d9				   CallProcessPlayer0Status
    510  f1d9		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    511  f1db		       85 b0		      STA	Tmp0
    512  f1dd		       a2 00		      LDX	#0
    513  f1df		       20 2d fa 	      JSR	ProcessPlayerStatus
    514  f1e2		       4c ee f1 	      JMP	EndCallProcessPlayerStatus
    515  f1e5				   CallProcessPlayer1Status
    516  f1e5		       a5 a2		      LDA	OpTrafficOffset0 + 2
    517  f1e7		       85 b0		      STA	Tmp0
    518  f1e9		       a2 01		      LDX	#1
    519  f1eb		       20 2d fa 	      JSR	ProcessPlayerStatus
    520  f1ee				   EndCallProcessPlayerStatus
    521  f1ee
    522  f1ee				   CallProcessPlayerSprites
    523  f1ee		       20 f8 f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    524  f1f1
    525  f1f1				   CallProcessSound		; We might save cycles by updating one channel per frame.
    526  f1f1		       a2 00		      LDX	#0
    527  f1f3		       a5 92		      LDA	TrafficOffset0 + 2
    528  f1f5		       85 b1		      STA	Tmp1
    529  f1f7		       20 07 f6 	      JSR	ProcessSound
    530  f1fa		       e8		      INX		; Player 1
    531  f1fb		       a5 a2		      LDA	OpTrafficOffset0 + 2
    532  f1fd		       85 b1		      STA	Tmp1
    533  f1ff		       20 07 f6 	      JSR	ProcessSound
    534  f202
    535  f202				   ChooseTextSide		; 
    536  f202		       a5 8c		      LDA	FrameCount0	;3
    537  f204		       29 01		      AND	#%00000001
    538  f206		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    539  f208		       4c b5 f2 	      JMP	RightScoreWrite
    540  f20b
    541  f20b				   LeftScoreWrite
    542  f20b		       a5 bd		      LDA	GameStatus
    543  f20d		       f0 11		      BEQ	PrintHellwayLeft
    544  f20f		       a5 c9		      LDA	ScoreFontColor
    545  f211		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    546  f213		       f0 42		      BEQ	PrintPlayer0Checkpoint
    547  f215		       c9 38		      CMP	#SCORE_FONT_COLOR_START
    548  f217		       f0 46		      BEQ	PrintPlayer0StartGame
    549  f219		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    550  f21b		       f0 29		      BEQ	ProcessPlayer0OverText
    551  f21d				   ContinueP0Score
    552  f21d		       4c 6e f2 	      JMP	Digit0Timer
    553  f220
    554  f220				   PrintHellwayLeft
    555  f220		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    556  f222		       30 08		      BMI	ContinueWithDefaultLeftText
    557  f224				   Player0IsReady
    558  f224		       a2 25		      LDX	#<ReadyText
    559  f226		       20 4f f7 	      JSR	PrintStaticText
    560  f229		       4c 5f f3 	      JMP	RightScoreWriteEnd	;3
    561  f22c				   ContinueWithDefaultLeftText
    562  f22c		       a5 8d		      LDA	FrameCount1
    563  f22e		       29 01		      AND	#1
    564  f230		       d0 05		      BNE	PrintCreditsLeft
    565  f232		       a2 03		      LDX	#<HellwayLeftText - 1	; Padding
    566  f234		       4c 39 f2 	      JMP	PrintGameMode
    567  f237				   PrintCreditsLeft
    568  f237		       a2 0c		      LDX	#<OpbText - 1	; Padding
    569  f239
    570  f239				   PrintGameMode
    571  f239		       20 4f f7 	      JSR	PrintStaticText
    572  f23c		       a6 c6		      LDX	GameMode
    573  f23e		       bd 6c fc 	      LDA	FontLookup,X	;4 
    574  f241		       85 d0		      STA	ScoreD0	;3
    575  f243		       4c 5f f3 	      JMP	RightScoreWriteEnd	;3
    576  f246
    577  f246				   ProcessPlayer0OverText
    578  f246		       a5 f2		      LDA	IsOpponentInFront
    579  f248		       30 05		      BMI	PrintPlayer0Lose
    580  f24a				   PrintPlayer0Win
    581  f24a		       a2 1a		      LDX	#<WinText
    582  f24c		       4c 51 f2 	      JMP	PrintPlayer0Status
    583  f24f				   PrintPlayer0Lose
    584  f24f		       a2 1d		      LDX	#<LoseText
    585  f251				   PrintPlayer0Status
    586  f251		       20 4f f7 	      JSR	PrintStaticText
    587  f254		       4c 8e f2 	      JMP	DistanceCheckpointCount	;3
    588  f257
    589  f257				   PrintPlayer0Checkpoint
    590  f257		       a2 00		      LDX	#<CheckpointText
    591  f259		       20 4f f7 	      JSR	PrintStaticText
    592  f25c		       4c 64 f2 	      JMP	PrintPlayer0ScoreHoldChange	;3
    593  f25f
    594  f25f				   PrintPlayer0StartGame
    595  f25f		       a2 16		      LDX	#<GoText
    596  f261		       20 4f f7 	      JSR	PrintStaticText
    597  f264
    598  f264				   PrintPlayer0ScoreHoldChange
    599  f264		       a2 00		      LDX	#0
    600  f266		       20 a0 fa 	      JSR	PrintScoreHoldChange
    601  f269		       85 d4		      STA	ScoreD4
    602  f26b		       4c 5f f3 	      JMP	RightScoreWriteEnd	;3
    603  f26e
    604  f26e				   Digit0Timer
    605  f26e		       a5 b8		      LDA	CountdownTimer	;3
    606  f270		       85 b0		      STA	Tmp0
    607  f272		       20 2a f8 	      JSR	BINBCD8
    608  f275							; LDA Tmp1 Also returned in A
    609  f275		       29 0f		      AND	#%00001111	;2
    610  f277		       aa		      TAX		; 2
    611  f278		       bd 6c fc 	      LDA	FontLookup,X	;4 
    612  f27b		       85 d1		      STA	ScoreD1	;3
    613  f27d
    614  f27d				   Digit1Timer
    615  f27d		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    616  f27f		       4a		      LSR		; 2
    617  f280		       4a		      LSR		; 2
    618  f281		       4a		      LSR		; 2
    619  f282		       4a		      LSR		; 2
    620  f283		       aa		      TAX		; 2
    621  f284		       bd 6c fc 	      LDA	FontLookup,X	;4
    622  f287		       85 d0		      STA	ScoreD0	;3
    623  f289
    624  f289				   SpeedBar
    625  f289		       a2 00		      LDX	#0
    626  f28b		       20 ab fa 	      JSR	PrintSpeedBar
    627  f28e
    628  f28e				   DistanceCheckpointCount		; Will run all letters in the future
    629  f28e		       a5 ba		      LDA	Traffic0Msb
    630  f290		       29 01		      AND	#%00000001
    631  f292		       0a		      ASL
    632  f293		       0a		      ASL
    633  f294		       0a		      ASL
    634  f295		       0a		      ASL
    635  f296		       85 b0		      STA	Tmp0
    636  f298		       a5 92		      LDA	TrafficOffset0 + 2	;3
    637  f29a		       29 f0		      AND	#%11110000	;2
    638  f29c		       4a		      LSR
    639  f29d		       4a		      LSR
    640  f29e		       4a		      LSR
    641  f29f		       4a		      LSR
    642  f2a0		       05 b0		      ORA	Tmp0
    643  f2a2		       aa		      TAX		; 2
    644  f2a3		       bd 6c fc 	      LDA	FontLookup,X	;4 
    645  f2a6		       85 d3		      STA	ScoreD3	;3
    646  f2a8
    647  f2a8				   DistanceBar		; 16 subdivisions per checkpoint
    648  f2a8		       a5 92		      LDA	TrafficOffset0 + 2	;3
    649  f2aa		       29 0f		      AND	#%00001111	;2
    650  f2ac		       aa		      TAX		; 2
    651  f2ad		       bd 8c fc 	      LDA	BarLookup,X	;4 
    652  f2b0		       85 d4		      STA	ScoreD4	;3
    653  f2b2
    654  f2b2				   EndDrawDistance
    655  f2b2		       4c 5f f3 	      JMP	RightScoreWriteEnd	;3
    656  f2b5
    657  f2b5				   RightScoreWrite
    658  f2b5		       a5 bd		      LDA	GameStatus
    659  f2b7		       f0 11		      BEQ	PrintHellwayRight
    660  f2b9		       a5 ca		      LDA	OpScoreFontColor
    661  f2bb		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    662  f2bd		       f0 45		      BEQ	PrintPlayer1Checkpoint
    663  f2bf		       c9 c8		      CMP	#OP_SCORE_FONT_COLOR_START
    664  f2c1		       f0 49		      BEQ	PrintPlayer1StartGame
    665  f2c3		       c9 ab		      CMP	#OP_SCORE_FONT_COLOR_OVER
    666  f2c5		       f0 2c		      BEQ	ProcessPlayer1OverText
    667  f2c7				   ContinueP1Score
    668  f2c7		       4c 1b f3 	      JMP	OpDigit0Timer
    669  f2ca
    670  f2ca				   PrintHellwayRight
    671  f2ca		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    672  f2cc		       30 08		      BMI	ContinueWithDefaultRightText
    673  f2ce				   Player1IsReady
    674  f2ce		       a2 25		      LDX	#<ReadyText
    675  f2d0		       20 4f f7 	      JSR	PrintStaticText
    676  f2d3		       4c 5f f3 	      JMP	RightScoreWriteEnd	;3
    677  f2d6				   ContinueWithDefaultRightText
    678  f2d6		       a5 8d		      LDA	FrameCount1
    679  f2d8		       29 01		      AND	#1
    680  f2da		       d0 05		      BNE	PrintCreditsRight
    681  f2dc		       a2 08		      LDX	#<HellwayRightText
    682  f2de		       4c ed f2 	      JMP	PrintRightIntro
    683  f2e1				   PrintCreditsRight
    684  f2e1		       a5 8d		      LDA	FrameCount1
    685  f2e3		       29 02		      AND	#%00000010
    686  f2e5		       f0 04		      BEQ	PrintYearText
    687  f2e7				   PrintBuildNumberText
    688  f2e7		       a2 20		      LDX	#<BuildNumberText
    689  f2e9		       d0 02		      BNE	PrintRightIntro	; Save one byte, it will neve be equal in not first text constant...
    690  f2eb				   PrintYearText
    691  f2eb		       a2 11		      LDX	#<YearText
    692  f2ed				   PrintRightIntro
    693  f2ed		       20 4f f7 	      JSR	PrintStaticText
    694  f2f0		       4c 5f f3 	      JMP	RightScoreWriteEnd
    695  f2f3
    696  f2f3				   ProcessPlayer1OverText
    697  f2f3		       a5 f2		      LDA	IsOpponentInFront
    698  f2f5		       30 05		      BMI	PrintPlayer1Lose
    699  f2f7				   PrintPlayer1Win
    700  f2f7		       a2 18		      LDX	#<WinText - 2
    701  f2f9		       4c fe f2 	      JMP	PrintPlayer1Status
    702  f2fc				   PrintPlayer1Lose
    703  f2fc		       a2 1b		      LDX	#<LoseText - 2
    704  f2fe				   PrintPlayer1Status
    705  f2fe		       20 4f f7 	      JSR	PrintStaticText
    706  f301		       4c 3b f3 	      JMP	OpDistanceCheckpointCount
    707  f304
    708  f304				   PrintPlayer1Checkpoint
    709  f304		       a2 ff		      LDX	#<CheckpointText - 1
    710  f306		       20 4f f7 	      JSR	PrintStaticText
    711  f309		       4c 11 f3 	      JMP	PrintPlayer1ScoreHoldChange	;3
    712  f30c
    713  f30c				   PrintPlayer1StartGame
    714  f30c		       a2 15		      LDX	#<GoText - 1
    715  f30e		       20 4f f7 	      JSR	PrintStaticText
    716  f311
    717  f311				   PrintPlayer1ScoreHoldChange
    718  f311		       a2 01		      LDX	#1
    719  f313		       20 a0 fa 	      JSR	PrintScoreHoldChange
    720  f316		       85 d0		      STA	ScoreD0
    721  f318		       4c 5f f3 	      JMP	RightScoreWriteEnd	;3
    722  f31b
    723  f31b				   OpDigit0Timer
    724  f31b		       a5 b9		      LDA	OpCountdownTimer	;3
    725  f31d		       85 b0		      STA	Tmp0
    726  f31f		       20 2a f8 	      JSR	BINBCD8
    727  f322							; LDA Tmp1 Also returned in A
    728  f322		       29 0f		      AND	#%00001111	;2
    729  f324		       aa		      TAX		; 2
    730  f325		       bd 6c fc 	      LDA	FontLookup,X	;4 
    731  f328		       85 d4		      STA	ScoreD4	;3
    732  f32a
    733  f32a				   OpDigit1Timer
    734  f32a		       a5 b1		      LDA	Tmp1	;3
    735  f32c		       4a		      LSR		; 2
    736  f32d		       4a		      LSR		; 2
    737  f32e		       4a		      LSR		; 2
    738  f32f		       4a		      LSR		; 2
    739  f330		       aa		      TAX		; 2
    740  f331		       bd 6c fc 	      LDA	FontLookup,X	;4
    741  f334		       85 d3		      STA	ScoreD3	;3
    742  f336
    743  f336				   OpSpeedBar
    744  f336		       a2 01		      LDX	#1
    745  f338		       20 ab fa 	      JSR	PrintSpeedBar
    746  f33b
    747  f33b				   OpDistanceCheckpointCount
    748  f33b		       a5 bb		      LDA	OpTraffic0Msb
    749  f33d		       29 01		      AND	#%00000001
    750  f33f		       0a		      ASL
    751  f340		       0a		      ASL
    752  f341		       0a		      ASL
    753  f342		       0a		      ASL
    754  f343		       85 b0		      STA	Tmp0
    755  f345		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    756  f347		       29 f0		      AND	#%11110000	;2
    757  f349		       4a		      LSR
    758  f34a		       4a		      LSR
    759  f34b		       4a		      LSR
    760  f34c		       4a		      LSR
    761  f34d		       05 b0		      ORA	Tmp0
    762  f34f		       aa		      TAX		; 2
    763  f350		       bd 6c fc 	      LDA	FontLookup,X	;4 
    764  f353		       85 d1		      STA	ScoreD1	;3
    765  f355
    766  f355				   OpDistanceBar		; 16 subdivisions per checkpoint
    767  f355		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    768  f357		       29 0f		      AND	#%00001111	;2
    769  f359		       aa		      TAX		; 2
    770  f35a		       bd 8c fc 	      LDA	BarLookup,X	;4 
    771  f35d		       85 d0		      STA	ScoreD0	;3
    772  f35f
    773  f35f				   ScoreWriteEnd
    774  f35f				   RightScoreWriteEnd
    775  f35f
    776  f35f				   ConfigurePFForScore
    777  f35f		       20 a1 f6 	      JSR	ClearAll
    778  f362		       a9 02		      LDA	#%00000010	; Score mode
    779  f364		       85 0a		      STA	CTRLPF
    780  f366		       a5 8c		      LDA	FrameCount0	;3
    781  f368		       29 01		      AND	#%00000001
    782  f36a		       f0 0b		      BEQ	LeftScoreOn	; Half of the screen with the correct colors.
    783  f36c				   RightScoreOn
    784  f36c		       a5 ca		      LDA	OpScoreFontColor
    785  f36e		       85 07		      STA	COLUP1
    786  f370		       a9 00		      LDA	#BACKGROUND_COLOR
    787  f372		       85 06		      STA	COLUP0
    788  f374		       4c 7f f3 	      JMP	CallWaitForVblankEnd
    789  f377				   LeftScoreOn
    790  f377		       a5 c9		      LDA	ScoreFontColor
    791  f379		       85 06		      STA	COLUP0
    792  f37b		       a9 00		      LDA	#BACKGROUND_COLOR
    793  f37d		       85 07		      STA	COLUP1
    794  f37f
    795  f37f							; After here we are going to update the screen, No more heavy code
    796  f37f				   CallWaitForVblankEnd
    797  f37f		       20 c9 f7 	      JSR	WaitForVblankEnd
    798  f382
    799  f382				   DrawScoreHud
    800  f382		       20 6d f7 	      JSR	PrintScore
    801  f385
    802  f385							; 4 lines to go crazy
    803  f385		       85 02		      STA	WSYNC
    804  f387							;STA HMOVE
    805  f387
    806  f387		       85 02		      STA	WSYNC
    807  f389		       85 2a		      STA	HMOVE
    808  f38b
    809  f38b				   PrepareForTraffic
    810  f38b		       20 b7 f6 	      JSR	ClearPF	; 32
    811  f38e
    812  f38e		       85 02		      STA	WSYNC
    813  f390		       85 2a		      STA	HMOVE
    814  f392		       85 02		      STA	WSYNC
    815  f394		       85 2a		      STA	HMOVE
    816  f396
    817  f396		       a9 30		      LDA	#%00110000	; 2 Score mode
    818  f398		       85 0a		      STA	CTRLPF	;3
    819  f39a
    820  f39a		       a5 8c		      LDA	FrameCount0	;3
    821  f39c		       29 01		      AND	#%00000001	;2
    822  f39e		       aa		      TAX		;2
    823  f39f		       b5 c2		      LDA	TrafficColor,X	;4
    824  f3a1		       85 08		      STA	COLUPF	;3
    825  f3a3
    826  f3a3		       a9 98		      LDA	#PLAYER1_COLOR	;2
    827  f3a5		       85 07		      STA	COLUP1	;3
    828  f3a7
    829  f3a7		       a5 c9		      LDA	ScoreFontColor	;3
    830  f3a9		       85 06		      STA	COLUP0	;3
    831  f3ab
    832  f3ab		       a5 ca		      LDA	OpScoreFontColor	;3
    833  f3ad		       85 07		      STA	COLUP1	;3
    834  f3af
    835  f3af		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    836  f3b1
    837  f3b1		       a5 8c		      LDA	FrameCount0	;Brach flag
    838  f3b3		       29 01		      AND	#%00000001
    839  f3b5
    840  f3b5		       d0 03		      BNE	OpScanLoop	;2
    841  f3b7		       4c 74 f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    842  f3ba							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    843  f3ba
    844  f3ba							;main scanline loop...
    845  f3ba				   OpScanLoop
    846  f3ba		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    847  f3bc
    848  f3bc		       a5 80		      LDA	GRP0Cache	;3
    849  f3be		       85 1b		      STA	GRP0	;3
    850  f3c0
    851  f3c0		       a5 84		      LDA	GRP1Cache	;3
    852  f3c2		       85 1c		      STA	GRP1	;3
    853  f3c4
    854  f3c4		       a5 85		      LDA	ENABLCache	;3
    855  f3c6		       85 1f		      STA	ENABL	;3
    856  f3c8
    857  f3c8		       a5 86		      LDA	ENAM0Cache	;3
    858  f3ca		       85 1d		      STA	ENAM0	;3
    859  f3cc
    860  f3cc		       a5 87		      LDA	ENAM1Cache	;3
    861  f3ce		       85 1e		      STA	ENAM1	;3
    862  f3d0
    863  f3d0		       a5 81		      LDA	PF0Cache	;3
    864  f3d2		       85 0d		      STA	PF0	;3
    865  f3d4
    866  f3d4		       a9 00		      LDA	#0	;2
    867  f3d6							;STA PF0	     ;3
    868  f3d6		       85 80		      STA	GRP0Cache	;3
    869  f3d8		       85 86		      STA	ENAM0Cache	;3
    870  f3da		       85 85		      STA	ENABLCache	;3
    871  f3dc		       85 87		      STA	ENAM1Cache	; 3
    872  f3de							;STA GRP1Cache ;3
    873  f3de		       85 0d		      STA	PF0	;3
    874  f3e0							;STA PF2	     ;3
    875  f3e0
    876  f3e0		       a5 83		      LDA	PF2Cache	;3
    877  f3e2		       85 0f		      STA	PF2	;3
    878  f3e4
    879  f3e4				   OpDrawCar0
    880  f3e4		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    881  f3e6		       b0 04		      BCS	OpSkipDrawCar	;2
    882  f3e8		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    883  f3ea		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    884  f3ec				   OpSkipDrawCar
    885  f3ec
    886  f3ec							;BEQ DrawTraffic3
    887  f3ec				   OpDrawTraffic1		; 33
    888  f3ec		       98		      TYA		; 2
    889  f3ed		       18		      CLC		; 2 
    890  f3ee		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    891  f3f0		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    892  f3f2		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    893  f3f4		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    894  f3f6		       4c fb f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    895  f3f9				   OpEorOffsetWithCarry
    896  f3f9		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    897  f3fb				   OpAfterEorOffsetWithCarry		;17
    898  f3fb		       aa		      TAX		;2
    899  f3fc		       bd 00 fe 	      LDA	AesTable,X	; 4
    900  f3ff		       c5 bf		      CMP	OpTrafficChance	;3
    901  f401		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    902  f403		       a9 ff		      LDA	#$FF	;2
    903  f405		       85 86		      STA	ENAM0Cache	;3
    904  f407				   OpFinishDrawTraffic1
    905  f407
    906  f407				   OpErasePF2
    907  f407		       a9 00		      LDA	#0
    908  f409		       85 0f		      STA	PF2
    909  f40b
    910  f40b				   OpDrawTraffic2		; 33
    911  f40b		       98		      TYA		; 2
    912  f40c		       18		      CLC		; 2 
    913  f40d		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    914  f40f		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    915  f411		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    916  f413		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    917  f415		       4c 1a f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    918  f418				   OpEorOffsetWithCarry2
    919  f418		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    920  f41a				   OpAfterEorOffsetWithCarry2		;17
    921  f41a		       aa		      TAX		;2
    922  f41b		       bd 00 fe 	      LDA	AesTable,X	; 4
    923  f41e		       c5 bf		      CMP	OpTrafficChance	;3
    924  f420		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    925  f422		       a9 02		      LDA	#%00000010	;2
    926  f424		       85 85		      STA	ENABLCache	;3
    927  f426				   OpFinishDrawTraffic2
    928  f426
    929  f426							;STA WSYNC ;65 / 137
    930  f426
    931  f426							; LDA Tmp0 ; Flicker this line if drawing car
    932  f426							; BEQ FinishDrawTraffic4
    933  f426				   OpDrawTraffic3		; 33
    934  f426		       98		      TYA		; 2
    935  f427		       18		      CLC		; 2 
    936  f428		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    937  f42a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    938  f42c		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    939  f42e		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    940  f430		       4c 35 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    941  f433				   OpEorOffsetWithCarry3
    942  f433		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    943  f435				   OpAfterEorOffsetWithCarry3		;17
    944  f435		       aa		      TAX		;2
    945  f436		       bd 00 fe 	      LDA	AesTable,X	; 4
    946  f439		       c5 bf		      CMP	OpTrafficChance	;3
    947  f43b		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    948  f43d		       a9 02		      LDA	#%00000010	;2
    949  f43f		       85 87		      STA	ENAM1Cache
    950  f441				   OpFinishDrawTraffic3
    951  f441
    952  f441				   OpDrawOponent		;26
    953  f441		       84 b0		      STY	Tmp0	;3
    954  f443		       a4 cf		      LDY	OpponentLine	;3
    955  f445		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    956  f447		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    957  f449				   OpDrawOpponent
    958  f449		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    959  f44b		       85 80		      STA	GRP0Cache	;3
    960  f44d		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    961  f44f		       a4 b0		      LDY	Tmp0	;3
    962  f451		       4c 65 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    963  f454				   OpSkipDrawOpponent
    964  f454		       c6 cf		      DEC	OpponentLine	;5
    965  f456		       a4 b0		      LDY	Tmp0	;3
    966  f458
    967  f458
    968  f458				   OpDrawTraffic0		; 21 2pe
    969  f458		       98		      TYA		; 2
    970  f459		       18		      CLC		; 2 
    971  f45a		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    972  f45c		       29 08		      AND	#%00001000	;2
    973  f45e		       f0 05		      BEQ	OpHasNoBorderP0	;3
    974  f460				   OpHasBorderP0
    975  f460		       a9 e0		      LDA	#%11100000	; 2
    976  f462		       4c 67 f4 	      JMP	OpStoreBorderP0	; 3
    977  f465				   OpHasNoBorderP0
    978  f465		       a9 00		      LDA	#0	; 2
    979  f467				   OpStoreBorderP0
    980  f467		       85 81		      STA	PF0Cache	; 3
    981  f469		       85 83		      STA	PF2Cache	; 3
    982  f46b
    983  f46b				   OpSkipDrawTraffic0
    984  f46b
    985  f46b				   OpWhileScanLoop
    986  f46b		       88		      DEY		;2
    987  f46c		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    988  f46e		       4c ba f3 	      JMP	OpScanLoop	;3
    989  f471				   OpFinishScanLoop		; 7 209 of 222
    990  f471		       4c 29 f5 	      JMP	FinishScanLoop
    991  f474
    992  f474							;main scanline loop...
    993  f474				   ScanLoop
    994  f474		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    995  f476
    996  f476		       a5 81		      LDA	PF0Cache	;3
    997  f478		       85 0d		      STA	PF0	;3
    998  f47a
    999  f47a		       a5 80		      LDA	GRP0Cache	;3
   1000  f47c		       85 1b		      STA	GRP0	;3
   1001  f47e
   1002  f47e		       a5 84		      LDA	GRP1Cache	;3
   1003  f480		       85 1c		      STA	GRP1	;3
   1004  f482
   1005  f482		       a5 86		      LDA	ENAM0Cache	;3
   1006  f484		       85 1d		      STA	ENAM0	;3
   1007  f486
   1008  f486		       a5 85		      LDA	ENABLCache	;3
   1009  f488		       85 1f		      STA	ENABL	;3
   1010  f48a
   1011  f48a		       a5 87		      LDA	ENAM1Cache	;3
   1012  f48c		       85 1e		      STA	ENAM1	;3
   1013  f48e
   1014  f48e		       a5 83		      LDA	PF2Cache	;3
   1015  f490		       85 0f		      STA	PF2	;3
   1016  f492
   1017  f492		       a9 00		      LDA	#0	;2
   1018  f494		       85 0d		      STA	PF0	;3
   1019  f496		       85 84		      STA	GRP1Cache	;3
   1020  f498		       85 85		      STA	ENABLCache	;3
   1021  f49a		       85 86		      STA	ENAM0Cache	;3
   1022  f49c		       85 87		      STA	ENAM1Cache	; 3
   1023  f49e							;STA GRP0Cache
   1024  f49e		       85 0f		      STA	PF2	;3
   1025  f4a0
   1026  f4a0				   DrawCar0
   1027  f4a0		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1028  f4a2		       b0 04		      BCS	SkipDrawCar	;2
   1029  f4a4		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1030  f4a6		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1031  f4a8				   SkipDrawCar
   1032  f4a8
   1033  f4a8							;BEQ DrawTraffic3
   1034  f4a8				   DrawTraffic1 		; 33
   1035  f4a8		       98		      TYA		; 2
   1036  f4a9		       18		      CLC		; 2 
   1037  f4aa		       65 95		      ADC	TrafficOffset1 + 1	;3
   1038  f4ac		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1039  f4ae		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1040  f4b0		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1041  f4b2		       4c b7 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1042  f4b5				   EorOffsetWithCarry
   1043  f4b5		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1044  f4b7				   AfterEorOffsetWithCarry		;17
   1045  f4b7		       aa		      TAX		;2
   1046  f4b8		       bd 00 fe 	      LDA	AesTable,X	; 4
   1047  f4bb		       c5 be		      CMP	TrafficChance	;3
   1048  f4bd		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1049  f4bf		       a9 ff		      LDA	#$FF	;2
   1050  f4c1		       85 86		      STA	ENAM0Cache	;3
   1051  f4c3				   FinishDrawTraffic1
   1052  f4c3
   1053  f4c3				   DrawTraffic2 		; 33
   1054  f4c3		       98		      TYA		; 2
   1055  f4c4		       18		      CLC		; 2 
   1056  f4c5		       65 99		      ADC	TrafficOffset2 + 1	;3
   1057  f4c7		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1058  f4c9		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1059  f4cb		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1060  f4cd		       4c d2 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1061  f4d0				   EorOffsetWithCarry2
   1062  f4d0		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1063  f4d2				   AfterEorOffsetWithCarry2		;17
   1064  f4d2		       aa		      TAX		;2
   1065  f4d3		       bd 00 fe 	      LDA	AesTable,X	; 4
   1066  f4d6		       c5 be		      CMP	TrafficChance	;3
   1067  f4d8		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1068  f4da		       a9 02		      LDA	#%00000010	;2
   1069  f4dc		       85 85		      STA	ENABLCache	;3
   1070  f4de				   FinishDrawTraffic2
   1071  f4de
   1072  f4de							;STA WSYNC ;65 / 137
   1073  f4de
   1074  f4de							; LDA Tmp0 ; Flicker this line if drawing car
   1075  f4de							; BEQ FinishDrawTraffic4
   1076  f4de				   DrawTraffic3 		; 33
   1077  f4de		       98		      TYA		; 2
   1078  f4df		       18		      CLC		; 2 
   1079  f4e0		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1080  f4e2		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1081  f4e4		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1082  f4e6		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1083  f4e8		       4c ed f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1084  f4eb				   EorOffsetWithCarry3
   1085  f4eb		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1086  f4ed				   AfterEorOffsetWithCarry3		;17
   1087  f4ed		       aa		      TAX		;2
   1088  f4ee		       bd 00 fe 	      LDA	AesTable,X	; 4
   1089  f4f1		       c5 be		      CMP	TrafficChance	;3
   1090  f4f3		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1091  f4f5		       a9 02		      LDA	#%00000010	;2
   1092  f4f7		       85 87		      STA	ENAM1Cache
   1093  f4f9				   FinishDrawTraffic3
   1094  f4f9
   1095  f4f9
   1096  f4f9				   DrawOponent		;26
   1097  f4f9		       84 b0		      STY	Tmp0	;3
   1098  f4fb		       a4 cf		      LDY	OpponentLine	;3
   1099  f4fd		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1100  f4ff		       b0 0b		      BCS	SkipDrawOpponent	;2
   1101  f501				   DrawOpponent
   1102  f501		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1103  f503		       85 84		      STA	GRP1Cache	;3
   1104  f505		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1105  f507		       a4 b0		      LDY	Tmp0	;3
   1106  f509		       4c 1d f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1107  f50c				   SkipDrawOpponent
   1108  f50c		       c6 cf		      DEC	OpponentLine	;5
   1109  f50e		       a4 b0		      LDY	Tmp0	;3
   1110  f510
   1111  f510				   DrawTraffic0 		; 21 2pe
   1112  f510		       98		      TYA		; 2
   1113  f511		       18		      CLC		; 2 
   1114  f512		       65 91		      ADC	TrafficOffset0 + 1	;3
   1115  f514		       29 08		      AND	#%00001000	;2
   1116  f516		       f0 05		      BEQ	HasNoBorderP0	;3
   1117  f518				   HasBorderP0
   1118  f518		       a9 e0		      LDA	#%11100000	; 2
   1119  f51a		       4c 1f f5 	      JMP	StoreBorderP0	; 3
   1120  f51d				   HasNoBorderP0
   1121  f51d		       a9 00		      LDA	#0	; 2
   1122  f51f				   StoreBorderP0
   1123  f51f		       85 81		      STA	PF0Cache	; 3
   1124  f521		       85 83		      STA	PF2Cache	; 3
   1125  f523
   1126  f523				   SkipDrawTraffic0
   1127  f523
   1128  f523				   WhileScanLoop
   1129  f523		       88		      DEY		;2
   1130  f524		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1131  f526		       4c 74 f4 	      JMP	ScanLoop	;3
   1132  f529				   FinishScanLoop		; 7 209 of 222
   1133  f529
   1134  f529		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1135  f52b		       20 c6 f6 	      JSR	LoadAll
   1136  f52e		       85 02		      STA	WSYNC	; do stuff!
   1137  f530		       85 02		      STA	WSYNC
   1138  f532		       85 02		      STA	WSYNC
   1139  f534
   1140  f534				   PrepareOverscan
   1141  f534		       a9 02		      LDA	#2
   1142  f536		       85 02		      STA	WSYNC
   1143  f538							;STA HMOVE	; HMOVE 10
   1144  f538		       85 01		      STA	VBLANK
   1145  f53a
   1146  f53a		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1147  f53c		       8d 96 02 	      STA	TIM64T
   1148  f53f
   1149  f53f		       85 2b		      STA	HMCLR	; Before we process car movement
   1150  f541							;Read Fire Button before, will make it start the game for now.
   1151  f541				   StartGame
   1152  f541		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1153  f543		       25 0d		      AND	INPT5	;3 player 1
   1154  f545		       30 3c		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1155  f547		       a5 8c		      LDA	FrameCount0
   1156  f549		       29 01		      AND	#%00000001
   1157  f54b		       d0 36		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1158  f54d		       a5 bd		      LDA	GameStatus	;3
   1159  f54f		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1160  f551		       d0 30		      BNE	SkipGameStart
   1161  f553		       a5 c6		      LDA	GameMode
   1162  f555		       c9 10		      CMP	#MAX_GAME_MODE
   1163  f557		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1164  f559		       a9 00		      LDA	#0
   1165  f55b		       85 c6		      STA	GameMode
   1166  f55d		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1167  f55f		       85 bc		      STA	SwitchDebounceCounter
   1168  f561		       4c 83 f5 	      JMP	SkipGameStart
   1169  f564				   SetGameRunningIfBothPressing
   1170  f564		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1171  f566		       05 0d		      ORA	INPT5	;3 player 1
   1172  f568		       30 19		      BMI	SkipGameStart
   1173  f56a				   SetGameRunning
   1174  f56a		       e6 bd		      INC	GameStatus
   1175  f56c		       a9 00		      LDA	#0	;
   1176  f56e		       85 8c		      STA	FrameCount0
   1177  f570		       85 8d		      STA	FrameCount1
   1178  f572		       a9 38		      LDA	#SCORE_FONT_COLOR_START
   1179  f574		       85 c9		      STA	ScoreFontColor
   1180  f576		       a9 c8		      LDA	#OP_SCORE_FONT_COLOR_START
   1181  f578		       85 ca		      STA	OpScoreFontColor
   1182  f57a		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1183  f57c		       85 cb		      STA	ScoreFontColorHoldChange
   1184  f57e		       85 cc		      STA	OpScoreFontColorHoldChange
   1185  f580		       4c f7 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1186  f583				   SkipGameStart
   1187  f583
   1188  f583				   ReadSwitches
   1189  f583		       a6 bc		      LDX	SwitchDebounceCounter
   1190  f585		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1191  f587		       a9 01		      LDA	#%00000001
   1192  f589		       2c 82 02 	      BIT	SWCHB
   1193  f58c		       d0 07		      BNE	SkipReset
   1194  f58e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1195  f590		       85 bc		      STA	SwitchDebounceCounter
   1196  f592		       4c ff f5 	      JMP	OverScanWaitBeforeReset
   1197  f595				   SkipReset
   1198  f595
   1199  f595				   GameModeSelect
   1200  f595		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1201  f597		       d0 22		      BNE	SkipGameSelect
   1202  f599		       a2 00		      LDX	#0
   1203  f59b		       20 f2 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1204  f59e		       e8		      INX
   1205  f59f		       20 f2 f6 	      JSR	ConfigureDifficulty
   1206  f5a2				   ContinueGameSelect
   1207  f5a2		       a9 02		      LDA	#%00000010
   1208  f5a4		       2c 82 02 	      BIT	SWCHB
   1209  f5a7		       d0 12		      BNE	SkipGameSelect
   1210  f5a9		       a6 c6		      LDX	GameMode
   1211  f5ab		       e0 10		      CPX	#MAX_GAME_MODE
   1212  f5ad		       f0 04		      BEQ	ResetGameMode
   1213  f5af		       e8		      INX
   1214  f5b0		       4c b5 f5 	      JMP	StoreGameMode
   1215  f5b3				   ResetGameMode
   1216  f5b3		       a2 00		      LDX	#0
   1217  f5b5				   StoreGameMode
   1218  f5b5		       86 c6		      STX	GameMode
   1219  f5b7		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1220  f5b9		       85 bc		      STA	SwitchDebounceCounter
   1221  f5bb				   SkipGameSelect
   1222  f5bb		       4c c0 f5 	      JMP	EndReadSwitches
   1223  f5be				   DecrementSwitchDebounceCounter
   1224  f5be		       c6 bc		      DEC	SwitchDebounceCounter
   1225  f5c0				   EndReadSwitches
   1226  f5c0
   1227  f5c0				   DoNotTurnBeforeStart
   1228  f5c0							;STA HMCLR
   1229  f5c0		       a5 bd		      LDA	GameStatus
   1230  f5c2		       f0 33		      BEQ	OverScanWait
   1231  f5c4
   1232  f5c4							; Last thing, will overrride hmove
   1233  f5c4				   CallTestColisionAndMove
   1234  f5c4		       a2 00		      LDX	#0	; Player 0
   1235  f5c6							; Colision with traffic, each player check different flags,
   1236  f5c6		       a5 8c		      LDA	FrameCount0
   1237  f5c8		       29 01		      AND	#%00000001
   1238  f5ca		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1239  f5cc		       20 a1 f8 	      JSR	IsOpponentColliding
   1240  f5cf		       05 01		      ORA	CXM1P
   1241  f5d1		       4a		      LSR
   1242  f5d2		       05 00		      ORA	CXM0P
   1243  f5d4		       05 02		      ORA	CXP0FB
   1244  f5d6							; ORA CXPPMM ; Collision between players will have its own rules
   1245  f5d6				   SkipColisionPlayer0		; Should not colide on opponent side.
   1246  f5d6		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1247  f5d8		       85 b2		      STA	Tmp2
   1248  f5da		       20 b5 f8 	      JSR	TestCollisionAndMove
   1249  f5dd
   1250  f5dd		       e8		      INX		; player 1
   1251  f5de		       a5 8c		      LDA	FrameCount0
   1252  f5e0		       29 01		      AND	#%00000001
   1253  f5e2		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1254  f5e4		       20 a1 f8 	      JSR	IsOpponentColliding
   1255  f5e7		       05 00		      ORA	CXM0P
   1256  f5e9		       4a		      LSR
   1257  f5ea		       05 01		      ORA	CXM1P
   1258  f5ec		       05 03		      ORA	CXP1FB
   1259  f5ee				   SkipColisionPlayer1
   1260  f5ee		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1261  f5f0		       85 b2		      STA	Tmp2
   1262  f5f2		       20 b5 f8 	      JSR	TestCollisionAndMove
   1263  f5f5
   1264  f5f5				   ClearCollision
   1265  f5f5		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1266  f5f7
   1267  f5f7				   OverScanWait
   1268  f5f7		       ad 84 02 	      LDA	INTIM
   1269  f5fa		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1270  f5fc		       4c d8 f0 	      JMP	MainLoop
   1271  f5ff
   1272  f5ff				   OverScanWaitBeforeReset
   1273  f5ff		       ad 84 02 	      LDA	INTIM
   1274  f602		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1275  f604		       4c 14 f0 	      JMP	Start
   1276  f607
   1277  f607				   Subroutines
   1278  f607
   1279  f607							;X Player
   1280  f607							;Tmp1 TrafficOffset 2
   1281  f607				   ProcessSound
   1282  f607				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1283  f607		       b5 c9		      LDA	ScoreFontColor,X	;3
   1284  f609		       dd b7 fc 	      CMP	PlayerToScoreOverColor,X	;2
   1285  f60c		       f0 6b		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1286  f60e		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X	;2
   1287  f611		       f0 29		      BEQ	PlayCheckpoint	;2
   1288  f613		       b5 8e		      LDA	CollisionCounter,X	;3
   1289  f615		       c9 e0		      CMP	#$E0	;2
   1290  f617		       b0 14		      BCS	PlayColision	;2
   1291  f619		       b5 cd		      LDA	NextCheckpoint,X	;3
   1292  f61b		       38		      SEC		;2
   1293  f61c		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1294  f61e		       c9 02		      CMP	#$02	;2
   1295  f620		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1296  f622		       b5 b8		      LDA	CountdownTimer,X	; 3
   1297  f624		       f0 53		      BEQ	EngineSound	;2
   1298  f626		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1299  f628		       90 37		      BCC	PlayWarnTimeEnding	;4
   1300  f62a		       4c 79 f6 	      JMP	EngineSound	;3
   1301  f62d				   PlayColision
   1302  f62d		       a9 1f		      LDA	#31
   1303  f62f		       95 17		      STA	AUDF0,X
   1304  f631		       a9 08		      LDA	#8
   1305  f633		       95 15		      STA	AUDC0,X
   1306  f635		       a9 08		      LDA	#8
   1307  f637		       95 19		      STA	AUDV0,X
   1308  f639		       4c a0 f6 	      JMP	EndSound
   1309  f63c
   1310  f63c				   PlayCheckpoint
   1311  f63c		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1312  f63e		       4a		      LSR		;2
   1313  f63f		       4a		      LSR		;2
   1314  f640		       4a		      LSR		;2
   1315  f641		       95 17		      STA	AUDF0,X	;3
   1316  f643		       a9 0c		      LDA	#12	;2
   1317  f645		       95 15		      STA	AUDC0,X	;3
   1318  f647		       a9 06		      LDA	#6	;2
   1319  f649		       95 19		      STA	AUDV0,X	;3
   1320  f64b		       4c a0 f6 	      JMP	EndSound	;3
   1321  f64e
   1322  f64e				   PlayBeforeCheckpoint
   1323  f64e		       a5 8c		      LDA	FrameCount0	;3
   1324  f650		       29 1c		      AND	#%00011100	;2
   1325  f652		       09 03		      ORA	#%00000011	;2
   1326  f654		       95 17		      STA	AUDF0,X	;3
   1327  f656		       a9 0c		      LDA	#12	;2
   1328  f658		       95 15		      STA	AUDC0,X	;3
   1329  f65a		       a9 03		      LDA	#3	;2
   1330  f65c		       95 19		      STA	AUDV0,X	;3
   1331  f65e		       4c a0 f6 	      JMP	EndSound	;3
   1332  f661
   1333  f661				   PlayWarnTimeEnding
   1334  f661		       a5 8c		      LDA	FrameCount0	;3
   1335  f663		       29 04		      AND	#%00000100	;2
   1336  f665		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1337  f667		       18		      CLC		;2
   1338  f668		       a9 0a		      LDA	#10	;2
   1339  f66a		       75 b8		      ADC	CountdownTimer,X	;2
   1340  f66c		       95 17		      STA	AUDF0,X	;3
   1341  f66e		       a9 0c		      LDA	#12	;2
   1342  f670		       95 15		      STA	AUDC0,X	;3
   1343  f672		       a9 03		      LDA	#3	;2
   1344  f674		       95 19		      STA	AUDV0,X	;3
   1345  f676		       4c a0 f6 	      JMP	EndSound	;3
   1346  f679
   1347  f679				   EngineSound		;41
   1348  f679		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1349  f67b		       95 19		      STA	AUDV0,X
   1350  f67d		       b5 b8		      LDA	CountdownTimer,X	;3
   1351  f67f		       f0 1b		      BEQ	EngineOff	;2
   1352  f681		       b4 d5		      LDY	Gear,X
   1353  f683		       b5 de		      LDA	Player0SpeedL,X	;3
   1354  f685		       4a		      LSR		;2
   1355  f686		       4a		      LSR		;2
   1356  f687		       4a		      LSR		;2
   1357  f688		       29 0f		      AND	#%00001111	;2
   1358  f68a		       85 b0		      STA	Tmp0	;3
   1359  f68c		       b9 30 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1360  f68f		       38		      SEC		;2
   1361  f690		       e5 b0		      SBC	Tmp0	;3
   1362  f692		       95 17		      STA	AUDF0,X	;3
   1363  f694		       b9 2a ff 	      LDA	EngineSoundType,Y	;4
   1364  f697		       95 15		      STA	AUDC0,X	;3
   1365  f699		       4c a0 f6 	      JMP	EndEngineSound	;3
   1366  f69c				   EngineOff
   1367  f69c				   MuteSound
   1368  f69c		       a9 00		      LDA	#0
   1369  f69e		       95 15		      STA	AUDC0,X
   1370  f6a0				   EndEngineSound
   1371  f6a0				   EndSound
   1372  f6a0		       60		      RTS
   1373  f6a1
   1374  f6a1				   ClearAll		; 58
   1375  f6a1		       a9 00		      LDA	#0	;2
   1376  f6a3		       85 1b		      STA	GRP0	;3
   1377  f6a5		       85 1c		      STA	GRP1	;3
   1378  f6a7		       85 1f		      STA	ENABL	;3
   1379  f6a9		       85 1d		      STA	ENAM0	;3
   1380  f6ab		       85 1e		      STA	ENAM1	;3
   1381  f6ad		       85 80		      STA	GRP0Cache	;3
   1382  f6af		       85 84		      STA	GRP1Cache	;3
   1383  f6b1		       85 85		      STA	ENABLCache	;3
   1384  f6b3		       85 86		      STA	ENAM0Cache	;3
   1385  f6b5		       85 87		      STA	ENAM1Cache	;3
   1386  f6b7
   1387  f6b7				   ClearPF		; 26
   1388  f6b7		       a9 00		      LDA	#0	;2
   1389  f6b9				   ClearPFSkipLDA0
   1390  f6b9		       85 0d		      STA	PF0	;3
   1391  f6bb		       85 0e		      STA	PF1	;3
   1392  f6bd		       85 0f		      STA	PF2	;3	
   1393  f6bf		       85 81		      STA	PF0Cache	;3
   1394  f6c1		       85 82		      STA	PF1Cache	;3
   1395  f6c3		       85 83		      STA	PF2Cache	;3 
   1396  f6c5		       60		      RTS		;6
   1397  f6c6				   EndClearAll
   1398  f6c6
   1399  f6c6				   LoadAll		; 48
   1400  f6c6		       a5 81		      LDA	PF0Cache	;3
   1401  f6c8		       85 0d		      STA	PF0	;3
   1402  f6ca
   1403  f6ca		       a5 82		      LDA	PF1Cache	;3
   1404  f6cc		       85 0e		      STA	PF1	;3
   1405  f6ce
   1406  f6ce		       a5 83		      LDA	PF2Cache	;3
   1407  f6d0		       85 0f		      STA	PF2	;3
   1408  f6d2
   1409  f6d2		       a5 84		      LDA	GRP1Cache	;3
   1410  f6d4		       85 1c		      STA	GRP1	;3
   1411  f6d6
   1412  f6d6		       a5 85		      LDA	ENABLCache	;3
   1413  f6d8		       85 1f		      STA	ENABL	;3
   1414  f6da
   1415  f6da		       a5 86		      LDA	ENAM0Cache	;3
   1416  f6dc		       85 1d		      STA	ENAM0	;3
   1417  f6de
   1418  f6de		       a5 87		      LDA	ENAM1Cache	;3
   1419  f6e0		       85 1e		      STA	ENAM1	;3
   1420  f6e2
   1421  f6e2		       60		      RTS		;6
   1422  f6e3				   EndLoadAll
   1423  f6e3
   1424  f6e3				   NextDifficulty		;Is a SBR
   1425  f6e3		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1426  f6e5		       29 01		      AND	#%00000001
   1427  f6e7		       d0 24		      BNE	CheckRandomDifficulty
   1428  f6e9
   1429  f6e9		       b5 c4		      LDA	CurrentDifficulty,X
   1430  f6eb		       18		      CLC
   1431  f6ec		       69 01		      ADC	#1
   1432  f6ee		       29 03		      AND	#%00000011	; 0 to 3
   1433  f6f0		       95 c4		      STA	CurrentDifficulty,X
   1434  f6f2
   1435  f6f2				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1436  f6f2		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1437  f6f4		       b9 ac ff 	      LDA	TrafficChanceTable,Y
   1438  f6f7		       95 be		      STA	TrafficChance,X
   1439  f6f9		       b9 a8 ff 	      LDA	TrafficColorTable,Y
   1440  f6fc		       95 c2		      STA	TrafficColor,X
   1441  f6fe
   1442  f6fe		       a5 c6		      LDA	GameMode	;
   1443  f700		       29 01		      AND	#%00000001
   1444  f702		       f0 03		      BEQ	UseNextDifficultyTime
   1445  f704		       4c 08 f7 	      JMP	StoreDifficultyTime
   1446  f707				   UseNextDifficultyTime
   1447  f707		       c8		      INY
   1448  f708				   StoreDifficultyTime
   1449  f708		       b9 b0 ff 	      LDA	TrafficTimeTable,Y
   1450  f70b		       95 c0		      STA	CheckpointTime,X
   1451  f70d
   1452  f70d				   CheckRandomDifficulty
   1453  f70d		       a5 c6		      LDA	GameMode
   1454  f70f		       29 08		      AND	#%00001000	; Random difficulties
   1455  f711		       f0 26		      BEQ	ReturnFromNextDifficulty
   1456  f713				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1457  f713		       a5 f2		      LDA	IsOpponentInFront
   1458  f715		       30 12		      BMI	UseOpponentChance
   1459  f717		       a5 cf		      LDA	OpponentLine	; Same line
   1460  f719		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1461  f71b		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1462  f71d		       a4 8c		      LDY	FrameCount0
   1463  f71f		       b9 00 fe 	      LDA	AesTable,Y
   1464  f722							;EOR TrafficChance, no need, lets make life simple
   1465  f722		       29 3f		      AND	#%00111111
   1466  f724		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1467  f726		       4c 39 f7 	      JMP	ReturnFromNextDifficulty
   1468  f729				   UseOpponentChance
   1469  f729		       8a		      TXA
   1470  f72a		       49 01		      EOR	#%00000001	; Reverts the player
   1471  f72c		       aa		      TAX
   1472  f72d		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1473  f72f		       85 b3		      STA	Tmp3
   1474  f731		       8a		      TXA
   1475  f732		       49 01		      EOR	#%00000001	; Restors the player
   1476  f734		       aa		      TAX
   1477  f735		       a5 b3		      LDA	Tmp3
   1478  f737		       95 be		      STA	TrafficChance,X
   1479  f739
   1480  f739				   ReturnFromNextDifficulty
   1481  f739		       60		      RTS
   1482  f73a
   1483  f73a				   DefaultOffsets
   1484  f73a		       a9 20		      LDA	#$20
   1485  f73c		       85 96		      STA	TrafficOffset1 + 2
   1486  f73e		       85 a6		      STA	OpTrafficOffset1 + 2
   1487  f740		       a9 40		      LDA	#$40
   1488  f742		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1489  f744		       85 aa		      STA	OpTrafficOffset2 + 2
   1490  f746		       a9 60		      LDA	#$60
   1491  f748		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1492  f74a		       85 ae		      STA	OpTrafficOffset3 + 2
   1493  f74c		       a9 80		      LDA	#$80
   1494  f74e		       60		      RTS
   1495  f74f
   1496  f74f				   PrintStaticText		; Preload X with the offset referent to StaticText
   1497  f74f		       bd 00 ff 	      LDA	StaticText,X
   1498  f752		       85 d0		      STA	ScoreD0
   1499  f754		       e8		      INX
   1500  f755		       bd 00 ff 	      LDA	StaticText,X
   1501  f758		       85 d1		      STA	ScoreD1
   1502  f75a		       e8		      INX
   1503  f75b		       bd 00 ff 	      LDA	StaticText,X
   1504  f75e		       85 d2		      STA	ScoreD2
   1505  f760		       e8		      INX
   1506  f761		       bd 00 ff 	      LDA	StaticText,X
   1507  f764		       85 d3		      STA	ScoreD3
   1508  f766		       e8		      INX
   1509  f767		       bd 00 ff 	      LDA	StaticText,X
   1510  f76a		       85 d4		      STA	ScoreD4
   1511  f76c		       60		      RTS
   1512  f76d
   1513  f76d				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1514  f76d		       a2 00		      LDX	#0
   1515  f76f		       a0 04		      LDY	#FONT_OFFSET
   1516  f771
   1517  f771				   ScoreLoop		; 20 
   1518  f771		       85 02		      STA	WSYNC	;2
   1519  f773		       85 2a		      STA	HMOVE
   1520  f775
   1521  f775		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1522  f777		       85 0d		      STA	PF0	;3
   1523  f779
   1524  f779		       a5 82		      LDA	PF1Cache	;3
   1525  f77b		       85 0e		      STA	PF1	;3
   1526  f77d
   1527  f77d		       a5 83		      LDA	PF2Cache	;3
   1528  f77f		       85 0f		      STA	PF2	;3
   1529  f781
   1530  f781				   DrawScoreD0		; 15
   1531  f781		       a6 d0		      LDX	ScoreD0	; 3
   1532  f783		       bd 00 fd 	      LDA	Font,X	;4
   1533  f786		       85 81		      STA	PF0Cache	;3
   1534  f788		       c6 d0		      DEC	ScoreD0	;5
   1535  f78a
   1536  f78a				   DrawScoreD1		; 23	
   1537  f78a		       a6 d1		      LDX	ScoreD1	; 3
   1538  f78c		       bd 00 fd 	      LDA	Font,X	;4
   1539  f78f		       0a		      ASL		;2
   1540  f790		       0a		      ASL		;2
   1541  f791		       0a		      ASL		;2
   1542  f792		       0a		      ASL		;2
   1543  f793		       85 82		      STA	PF1Cache	;3
   1544  f795		       c6 d1		      DEC	ScoreD1	;5
   1545  f797
   1546  f797				   DrawScoreD2		; 20
   1547  f797		       a6 d2		      LDX	ScoreD2	; 3
   1548  f799		       bd 00 fd 	      LDA	Font,X	;4
   1549  f79c		       29 0f		      AND	#%00001111	;2
   1550  f79e		       05 82		      ORA	PF1Cache	;3
   1551  f7a0		       85 82		      STA	PF1Cache	;3
   1552  f7a2		       c6 d2		      DEC	ScoreD2	;5
   1553  f7a4
   1554  f7a4				   DrawScoreD3		; 23
   1555  f7a4		       a6 d3		      LDX	ScoreD3	; 3
   1556  f7a6		       bd 00 fd 	      LDA	Font,X	;4
   1557  f7a9		       4a		      LSR		;2
   1558  f7aa		       4a		      LSR		;2
   1559  f7ab		       4a		      LSR		;2
   1560  f7ac		       4a		      LSR		;2
   1561  f7ad		       85 83		      STA	PF2Cache	;3
   1562  f7af		       c6 d3		      DEC	ScoreD3	;5
   1563  f7b1
   1564  f7b1				   DrawScoreD4		; 20
   1565  f7b1		       a6 d4		      LDX	ScoreD4	; 3
   1566  f7b3		       bd 00 fd 	      LDA	Font,X	;4
   1567  f7b6		       29 f0		      AND	#%11110000	;2
   1568  f7b8		       05 83		      ORA	PF2Cache	;3
   1569  f7ba		       85 83		      STA	PF2Cache	;3
   1570  f7bc		       c6 d4		      DEC	ScoreD4	;5
   1571  f7be
   1572  f7be
   1573  f7be		       88		      DEY		;2
   1574  f7bf		       10 b0		      BPL	ScoreLoop	;4
   1575  f7c1
   1576  f7c1		       85 02		      STA	WSYNC
   1577  f7c3		       85 2a		      STA	HMOVE
   1578  f7c5		       20 c6 f6 	      JSR	LoadAll
   1579  f7c8		       60		      RTS		; 6
   1580  f7c9
   1581  f7c9				   WaitForVblankEnd
   1582  f7c9		       ad 84 02 	      LDA	INTIM
   1583  f7cc		       d0 fb		      BNE	WaitForVblankEnd
   1584  f7ce		       85 02		      STA	WSYNC
   1585  f7d0		       85 01		      STA	VBLANK
   1586  f7d2		       60		      RTS
   1587  f7d3
   1588  f7d3				   Sleep4Lines
   1589  f7d3		       85 02		      STA	WSYNC
   1590  f7d5		       85 02		      STA	WSYNC
   1591  f7d7		       85 02		      STA	WSYNC
   1592  f7d9		       85 02		      STA	WSYNC
   1593  f7db		       60		      RTS
   1594  f7dc
   1595  f7dc				   Sleep8Lines
   1596  f7dc		       20 d3 f7 	      JSR	Sleep4Lines
   1597  f7df		       20 d3 f7 	      JSR	Sleep4Lines
   1598  f7e2		       60		      RTS
   1599  f7e3
   1600  f7e3				   Sleep32Lines
   1601  f7e3		       20 dc f7 	      JSR	Sleep8Lines
   1602  f7e6		       20 dc f7 	      JSR	Sleep8Lines
   1603  f7e9		       20 dc f7 	      JSR	Sleep8Lines
   1604  f7ec		       20 dc f7 	      JSR	Sleep8Lines
   1605  f7ef		       60		      RTS
   1606  f7f0
   1607  f7f0							;X = number of WSYNC HMOVE to run
   1608  f7f0				   HMoveXTimes
   1609  f7f0		       85 02		      STA	WSYNC	;3
   1610  f7f2		       85 2a		      STA	HMOVE	; 3/10 
   1611  f7f4		       ca		      DEX
   1612  f7f5		       d0 f9		      BNE	HMoveXTimes
   1613  f7f7		       60		      RTS
   1614  f7f8
   1615  f7f8				   ConfigureCarSprites
   1616  f7f8		       a5 8c		      LDA	FrameCount0
   1617  f7fa		       29 01		      AND	#%00000001
   1618  f7fc		       d0 0b		      BNE	LoadForRightScreenSprites
   1619  f7fe				   LoadForLeftScreenSprites
   1620  f7fe		       a5 c7		      LDA	CurrentCarId
   1621  f800		       85 b0		      STA	Tmp0
   1622  f802		       a5 c8		      LDA	OpCurrentCarId
   1623  f804		       85 b1		      STA	Tmp1
   1624  f806		       4c 11 f8 	      JMP	LoadCarSpritesFromIds
   1625  f809				   LoadForRightScreenSprites
   1626  f809		       a5 c7		      LDA	CurrentCarId
   1627  f80b		       85 b1		      STA	Tmp1
   1628  f80d		       a5 c8		      LDA	OpCurrentCarId
   1629  f80f		       85 b0		      STA	Tmp0
   1630  f811
   1631  f811				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1632  f811		       a4 b0		      LDY	Tmp0
   1633  f813		       b9 82 ff 	      LDA	CarIdToSpriteAddressL,Y
   1634  f816		       85 d7		      STA	CarSpritePointerL
   1635  f818		       b9 86 ff 	      LDA	CarIdToSpriteAddressH,Y
   1636  f81b		       85 d8		      STA	CarSpritePointerH
   1637  f81d				   ConfigureOpponentCarSprite
   1638  f81d		       a4 b1		      LDY	Tmp1
   1639  f81f		       b9 8a ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1640  f822		       85 d9		      STA	EnemyCarSpritePointerL
   1641  f824		       b9 8e ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1642  f827		       85 da		      STA	EnemyCarSpritePointerH
   1643  f829		       60		      RTS
   1644  f82a
   1645  f82a							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1646  f82a							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1647  f82a							; Tmp0 Binary Number
   1648  f82a							; Result Returned in Tmp 1 and A
   1649  f82a				   BINBCD8
   1650  f82a		       f8		      SED		; Switch to decimal mode
   1651  f82b		       a9 00		      LDA	#0	; Ensure the result is clear
   1652  f82d		       85 b1		      STA	Tmp1+0
   1653  f82f							;STA Tmp1+1
   1654  f82f		       a2 08		      LDX	#8	; The number of source bits
   1655  f831
   1656  f831				   CNVBIT
   1657  f831		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1658  f833		       a5 b1		      LDA	Tmp1+0	; And add into result
   1659  f835		       65 b1		      ADC	Tmp1+0
   1660  f837		       85 b1		      STA	Tmp1+0
   1661  f839							;Not needed now, 0 to 99 is enought for timer!
   1662  f839							; LDA Tmp1+1	; propagating any carry
   1663  f839							; ADC Tmp1+1
   1664  f839							; STA Tmp1+1
   1665  f839		       ca		      DEX		; And repeat for next bit
   1666  f83a		       d0 f5		      BNE	CNVBIT
   1667  f83c		       d8		      CLD		; Back to binary
   1668  f83d
   1669  f83d		       60		      RTS		; All Done.
   1670  f83e
   1671  f83e							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1672  f83e							;X player 0 or 1
   1673  f83e				   SelectCarWithDpad
   1674  f83e		       a0 03		      LDY	#3
   1675  f840				   SelectCarWithDpadLoop
   1676  f840		       ad 80 02 	      LDA	SWCHA
   1677  f843		       25 b0		      AND	Tmp0
   1678  f845		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1679  f847		       98		      TYA
   1680  f848		       95 c7		      STA	CurrentCarId,X
   1681  f84a				   ContinueSelectCarWithDpadLoop
   1682  f84a		       46 b0		      LSR	Tmp0
   1683  f84c		       88		      DEY
   1684  f84d		       10 f1		      BPL	SelectCarWithDpadLoop
   1685  f84f		       60		      RTS
   1686  f850
   1687  f850				   ProcessOpponentLine
   1688  f850		       a5 8c		      LDA	FrameCount0
   1689  f852		       29 01		      AND	#%00000001
   1690  f854		       38		      SEC
   1691  f855		       d0 15		      BNE	Player0IsOpponent
   1692  f857				   Player1IsOpponent		; Code could be reused?
   1693  f857		       a5 91		      LDA	TrafficOffset0 + 1
   1694  f859		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1695  f85b		       85 b0		      STA	Tmp0
   1696  f85d		       a5 92		      LDA	TrafficOffset0 + 2
   1697  f85f		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1698  f861		       85 b1		      STA	Tmp1
   1699  f863		       a5 ba		      LDA	Traffic0Msb
   1700  f865		       e5 bb		      SBC	OpTraffic0Msb
   1701  f867		       85 b2		      STA	Tmp2
   1702  f869		       4c 7e f8 	      JMP	StoreInFrontPlayer
   1703  f86c				   Player0IsOpponent
   1704  f86c		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1705  f86e		       e5 91		      SBC	TrafficOffset0 + 1
   1706  f870		       85 b0		      STA	Tmp0
   1707  f872		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1708  f874		       e5 92		      SBC	TrafficOffset0 + 2
   1709  f876		       85 b1		      STA	Tmp1
   1710  f878		       a5 bb		      LDA	OpTraffic0Msb
   1711  f87a		       e5 ba		      SBC	Traffic0Msb
   1712  f87c		       85 b2		      STA	Tmp2
   1713  f87e
   1714  f87e				   StoreInFrontPlayer
   1715  f87e		       85 f2		      STA	IsOpponentInFront
   1716  f880
   1717  f880				   AddOffsetToOpponentLine
   1718  f880		       18		      CLC
   1719  f881		       a5 b0		      LDA	Tmp0
   1720  f883		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1721  f885		       85 b0		      STA	Tmp0
   1722  f887		       a5 b1		      LDA	Tmp1
   1723  f889		       69 00		      ADC	#0
   1724  f88b		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1725  f88d		       a5 b2		      LDA	Tmp2
   1726  f88f		       69 00		      ADC	#0
   1727  f891		       05 b1		      ORA	Tmp1
   1728  f893		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1729  f895				   OpponentNotVisible
   1730  f895		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1731  f897		       85 cf		      STA	OpponentLine
   1732  f899		       4c a0 f8 	      JMP	ReturnFromProcessOpponentLine
   1733  f89c				   OpponentVisible
   1734  f89c		       a5 b0		      LDA	Tmp0
   1735  f89e		       85 cf		      STA	OpponentLine
   1736  f8a0				   ReturnFromProcessOpponentLine
   1737  f8a0		       60		      RTS
   1738  f8a1
   1739  f8a1							; Value stored in A
   1740  f8a1				   IsOpponentColliding
   1741  f8a1							;Any non default state, opponent do not colide
   1742  f8a1		       a5 8e		      LDA	CollisionCounter
   1743  f8a3		       05 8f		      ORA	OpCollisionCounter
   1744  f8a5		       05 cb		      ORA	ScoreFontColorHoldChange
   1745  f8a7		       05 cc		      ORA	OpScoreFontColorHoldChange
   1746  f8a9		       d0 07		      BNE	OpponentNotColliding
   1747  f8ab		       a5 f2		      LDA	IsOpponentInFront
   1748  f8ad		       25 07		      AND	CXPPMM
   1749  f8af		       4c b4 f8 	      JMP	ReturnIsOpponentColliding
   1750  f8b2				   OpponentNotColliding
   1751  f8b2		       a9 00		      LDA	#0
   1752  f8b4				   ReturnIsOpponentColliding
   1753  f8b4		       60		      RTS
   1754  f8b5
   1755  f8b5
   1756  f8b5							; Movement and colision are binded because the car must be moved after duplicate size.
   1757  f8b5							; Use X for the player
   1758  f8b5							; Tmp2 Traffic colision result
   1759  f8b5				   TestCollisionAndMove
   1760  f8b5							; Until store the movemnt, Y contains the value to be stored.
   1761  f8b5							; see if player0 colides with the rest
   1762  f8b5		       a5 b2		      LDA	Tmp2
   1763  f8b7		       f0 2b		      BEQ	NoCollision	;skip if not hitting...
   1764  f8b9		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1765  f8bb		       d0 27		      BNE	NoCollision
   1766  f8bd		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1767  f8bf		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X
   1768  f8c2		       f0 20		      BEQ	NoCollision
   1769  f8c4		       dd b5 fc 	      CMP	PlayerToScoreStartColor,X
   1770  f8c7		       f0 1b		      BEQ	NoCollision
   1771  f8c9		       a9 ff		      LDA	#COLLISION_FRAMES
   1772  f8cb		       95 8e		      STA	CollisionCounter,X
   1773  f8cd		       b5 f0		      LDA	Player0SpeedH,X
   1774  f8cf		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1775  f8d1		       a9 10		      LDA	#COLLISION_SPEED_L
   1776  f8d3		       d5 de		      CMP	Player0SpeedL,X
   1777  f8d5		       b0 04		      BCS	SkipSetColisionSpeedL
   1778  f8d7				   SetColisionSpeedL
   1779  f8d7		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1780  f8d9		       95 de		      STA	Player0SpeedL,X
   1781  f8db				   SkipSetColisionSpeedL
   1782  f8db		       a9 00		      LDA	#0
   1783  f8dd		       95 f0		      STA	Player0SpeedH,X
   1784  f8df		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1785  f8e1		       4c 34 f9 	      JMP	StoreHMove	; We keep position consistent
   1786  f8e4				   NoCollision
   1787  f8e4
   1788  f8e4				   DecrementCollision
   1789  f8e4		       b5 8e		      LDA	CollisionCounter,X
   1790  f8e6		       f0 06		      BEQ	FinishDecrementCollision
   1791  f8e8		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1792  f8ea		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1793  f8ec		       d6 8e		      DEC	CollisionCounter,X
   1794  f8ee				   FinishDecrementCollision
   1795  f8ee
   1796  f8ee				   ResetPlayerSize
   1797  f8ee		       d0 04		      BNE	FinishResetPlayerSize
   1798  f8f0		       a9 30		      LDA	#%00110000
   1799  f8f2		       95 04		      STA	NUSIZ0,X	;
   1800  f8f4				   FinishResetPlayerSize
   1801  f8f4
   1802  f8f4				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1803  f8f4		       b5 8e		      LDA	CollisionCounter,X
   1804  f8f6		       c9 01		      CMP	#1	; Last frame before reset
   1805  f8f8		       d0 05		      BNE	SkipResetPlayerPosition
   1806  f8fa		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1807  f8fc		       4c 34 f9 	      JMP	StoreHMove
   1808  f8ff				   SkipResetPlayerPosition
   1809  f8ff
   1810  f8ff				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1811  f8ff		       b5 c7		      LDA	CurrentCarId,X
   1812  f901		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1813  f903		       d0 08		      BNE	PrepareReadXAxis
   1814  f905		       a0 00		      LDY	#0
   1815  f907		       a5 8c		      LDA	FrameCount0
   1816  f909		       29 01		      AND	#DRAGSTER_TURN_MASK
   1817  f90b		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1818  f90d
   1819  f90d				   PrepareReadXAxis
   1820  f90d		       a0 00		      LDY	#0
   1821  f90f		       b5 b6		      LDA	Player0X,X
   1822  f911				   BeginReadLeft
   1823  f911		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1824  f913		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1825  f916		       2c 80 02 	      BIT	SWCHA
   1826  f919		       d0 07		      BNE	SkipMoveLeft
   1827  f91b		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1828  f91d		       d6 b6		      DEC	Player0X,X
   1829  f91f		       4c 34 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1830  f922				   SkipMoveLeft
   1831  f922				   BeginReadRight
   1832  f922		       b5 b6		      LDA	Player0X,X
   1833  f924		       c9 2c		      CMP	#PLAYER_MAX_X
   1834  f926		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1835  f928		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1836  f92b		       2c 80 02 	      BIT	SWCHA
   1837  f92e		       d0 04		      BNE	SkipMoveRight
   1838  f930		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1839  f932		       f6 b6		      INC	Player0X,X
   1840  f934				   SkipMoveRight
   1841  f934				   StoreHMove
   1842  f934		       94 20		      STY	HMP0,X	;set the move for player 0
   1843  f936
   1844  f936		       60		      RTS
   1845  f937
   1846  f937							; X Traffic offset 4 bits each lane, 4 lanes per player
   1847  f937							; Tmp3 Max X offset
   1848  f937							; Tmp4 Max Player Speed L
   1849  f937							; Tmp5 Max Player Speed H
   1850  f937				   UpdateOffsets
   1851  f937		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1852  f939		       a5 c6		      LDA	GameMode
   1853  f93b		       29 04		      AND	#%00000100	; GameModes with high delta
   1854  f93d		       f0 02		      BEQ	UpdateOffsetsLoop
   1855  f93f		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1856  f941
   1857  f941				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1858  f941		       38		      SEC
   1859  f942		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1860  f944		       f9 6e ff 	      SBC	TrafficSpeeds,Y
   1861  f947		       85 b0		      STA	Tmp0
   1862  f949		       c8		      INY
   1863  f94a		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1864  f94c		       f9 6e ff 	      SBC	TrafficSpeeds,Y
   1865  f94f		       85 b1		      STA	Tmp1
   1866  f951		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1867  f953		       e9 00		      SBC	#0
   1868  f955		       85 b2		      STA	Tmp2
   1869  f957
   1870  f957				   AddsTheResult
   1871  f957		       18		      CLC
   1872  f958		       a5 b0		      LDA	Tmp0
   1873  f95a		       75 90		      ADC	TrafficOffset0,X
   1874  f95c		       95 90		      STA	TrafficOffset0,X
   1875  f95e		       e8		      INX
   1876  f95f		       a5 b1		      LDA	Tmp1
   1877  f961		       75 90		      ADC	TrafficOffset0,X
   1878  f963		       95 90		      STA	TrafficOffset0,X
   1879  f965		       e8		      INX
   1880  f966		       a5 b2		      LDA	Tmp2	; Carry
   1881  f968		       75 90		      ADC	TrafficOffset0,X
   1882  f96a		       95 90		      STA	TrafficOffset0,X
   1883  f96c		       90 0f		      BCC	CalculateOffsetCache
   1884  f96e				   CalculatePlayer0Msb
   1885  f96e		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1886  f970		       d0 05		      BNE	CalculatePlayer1Msb
   1887  f972		       e6 ba		      INC	Traffic0Msb
   1888  f974		       4c 7d f9 	      JMP	CalculateOffsetCache
   1889  f977				   CalculatePlayer1Msb
   1890  f977		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1891  f979		       d0 02		      BNE	CalculateOffsetCache
   1892  f97b		       e6 bb		      INC	OpTraffic0Msb
   1893  f97d
   1894  f97d				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1895  f97d		       e8		      INX
   1896  f97e		       38		      SEC
   1897  f97f		       69 00		      ADC	#0	;Increment by one
   1898  f981		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1899  f983
   1900  f983				   PrepareNextUpdateLoop
   1901  f983		       c8		      INY
   1902  f984		       e8		      INX
   1903  f985		       e4 b3		      CPX	Tmp3	; Max X offset
   1904  f987		       d0 b8		      BNE	UpdateOffsetsLoop
   1905  f989		       60		      RTS
   1906  f98a
   1907  f98a							; X Player 0 or 1
   1908  f98a				   ProcessSpeed
   1909  f98a				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1910  f98a		       a9 00		      LDA	#0
   1911  f98c		       85 b0		      STA	Tmp0	; Break speed
   1912  f98e		       b5 b8		      LDA	CountdownTimer,X
   1913  f990		       d0 0d		      BNE	Break
   1914  f992		       b4 c7		      LDY	CurrentCarId,X
   1915  f994		       a5 8c		      LDA	FrameCount0
   1916  f996		       39 96 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1917  f999		       d0 04		      BNE	Break
   1918  f99b		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1919  f99d		       85 b0		      STA	Tmp0
   1920  f99f
   1921  f99f				   Break
   1922  f99f		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1923  f9a2		       2c 80 02 	      BIT	SWCHA
   1924  f9a5		       d0 12		      BNE	BreakNonZero
   1925  f9a7		       b5 0c		      LDA	INPT4,X	;3
   1926  f9a9		       10 0a		      BPL	BreakWhileAccelerating
   1927  f9ab		       b4 d5		      LDY	Gear,X
   1928  f9ad		       b9 a2 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1929  f9b0		       85 b0		      STA	Tmp0
   1930  f9b2		       4c b9 f9 	      JMP	BreakNonZero
   1931  f9b5				   BreakWhileAccelerating		; Allow better control while breaking.
   1932  f9b5		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1933  f9b7		       85 b0		      STA	Tmp0
   1934  f9b9
   1935  f9b9				   BreakNonZero
   1936  f9b9		       a5 b0		      LDA	Tmp0
   1937  f9bb		       f0 29		      BEQ	SkipBreak
   1938  f9bd
   1939  f9bd				   DecreaseSpeed
   1940  f9bd		       38		      SEC
   1941  f9be		       b5 de		      LDA	Player0SpeedL,X
   1942  f9c0		       e5 b0		      SBC	Tmp0
   1943  f9c2		       95 de		      STA	Player0SpeedL,X
   1944  f9c4		       b5 f0		      LDA	Player0SpeedH,X
   1945  f9c6		       e9 00		      SBC	#0
   1946  f9c8		       95 f0		      STA	Player0SpeedH,X
   1947  f9ca
   1948  f9ca				   CheckMinSpeed
   1949  f9ca		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1950  f9cc		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1951  f9ce		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1952  f9d0		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1953  f9d2
   1954  f9d2				   CompareLBreakSpeed
   1955  f9d2		       b5 de		      LDA	Player0SpeedL,X
   1956  f9d4		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1957  f9d6		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1958  f9d8		       4c e3 f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1959  f9db
   1960  f9db				   ResetMinSpeed
   1961  f9db		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1962  f9dd		       95 f0		      STA	Player0SpeedH,X
   1963  f9df		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1964  f9e1		       95 de		      STA	Player0SpeedL,X
   1965  f9e3
   1966  f9e3				   SkipAccelerateIfBreaking
   1967  f9e3		       4c 2c fa 	      JMP	SkipAccelerate
   1968  f9e6				   SkipBreak
   1969  f9e6
   1970  f9e6				   Acelerates
   1971  f9e6		       b5 b8		      LDA	CountdownTimer,X
   1972  f9e8		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1973  f9ea
   1974  f9ea				   ContinueAccelerateTest
   1975  f9ea		       b5 0c		      LDA	INPT4,X	;3
   1976  f9ec		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1977  f9ee		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1978  f9f1		       2c 80 02 	      BIT	SWCHA
   1979  f9f4		       d0 36		      BNE	SkipAccelerate
   1980  f9f6
   1981  f9f6				   IncreaseCarSpeed
   1982  f9f6		       a9 02		      LDA	#2
   1983  f9f8		       85 b0		      STA	Tmp0	; Loop control
   1984  f9fa		       b4 c7		      LDY	CurrentCarId,X
   1985  f9fc				   IncreaseCarSpeedLoop
   1986  f9fc							;Adds speed
   1987  f9fc		       18		      CLC
   1988  f9fd		       b5 dc		      LDA	AccelerateBuffer,X
   1989  f9ff		       79 92 ff 	      ADC	CarIdToAccelerateSpeed,Y
   1990  fa02		       95 dc		      STA	AccelerateBuffer,X
   1991  fa04		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1992  fa06		       f6 de		      INC	Player0SpeedL,X
   1993  fa08		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1994  fa0a		       f6 f0		      INC	Player0SpeedH,X
   1995  fa0c				   ContinueIncreaseSpeedLoop
   1996  fa0c		       c6 b0		      DEC	Tmp0
   1997  fa0e		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1998  fa10				   SkipIncreaseCarSpeed
   1999  fa10
   2000  fa10				   CheckIfAlreadyMaxSpeed
   2001  fa10		       b5 f0		      LDA	Player0SpeedH,X
   2002  fa12		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2003  fa14		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2004  fa16		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2005  fa18							;High bit is max, compare the low
   2006  fa18		       b4 c7		      LDY	CurrentCarId,X
   2007  fa1a		       b5 de		      LDA	Player0SpeedL,X
   2008  fa1c		       d9 9a ff 	      CMP	CarIdToMaxSpeedL,Y
   2009  fa1f		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2010  fa21							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2011  fa21
   2012  fa21				   ResetToMaxSpeed		; Speed is more, or is already max
   2013  fa21		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2014  fa23		       95 f0		      STA	Player0SpeedH,X
   2015  fa25		       b4 c7		      LDY	CurrentCarId,X
   2016  fa27		       b9 9a ff 	      LDA	CarIdToMaxSpeedL,Y
   2017  fa2a		       95 de		      STA	Player0SpeedL,X
   2018  fa2c				   SkipAccelerate
   2019  fa2c		       60		      RTS
   2020  fa2d
   2021  fa2d							;Tmp0 Traffic Offset to compare with next checkpoint
   2022  fa2d				   ProcessPlayerStatus
   2023  fa2d				   IsGameOver
   2024  fa2d		       b5 b8		      LDA	CountdownTimer,X
   2025  fa2f		       15 de		      ORA	Player0SpeedL,X
   2026  fa31		       15 f0		      ORA	Player0SpeedH,X
   2027  fa33		       d0 0c		      BNE	IsCheckpoint
   2028  fa35		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2029  fa37		       95 cb		      STA	ScoreFontColorHoldChange,X
   2030  fa39		       bd b7 fc 	      LDA	PlayerToScoreOverColor,X
   2031  fa3c		       95 c9		      STA	ScoreFontColor,X
   2032  fa3e		       4c 75 fa 	      JMP	SkipIsTimeOver
   2033  fa41
   2034  fa41				   IsCheckpoint
   2035  fa41		       b5 cd		      LDA	NextCheckpoint,X
   2036  fa43		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2037  fa45		       d0 21		      BNE	SkipIsCheckpoint
   2038  fa47		       18		      CLC
   2039  fa48		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2040  fa4a		       95 cd		      STA	NextCheckpoint,X
   2041  fa4c		       bd b3 fc 	      LDA	PlayerToScoreGoodColor,X
   2042  fa4f		       95 c9		      STA	ScoreFontColor,X
   2043  fa51		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2044  fa53		       95 cb		      STA	ScoreFontColorHoldChange,X
   2045  fa55		       b5 b8		      LDA	CountdownTimer,X
   2046  fa57		       18		      CLC
   2047  fa58		       75 c0		      ADC	CheckpointTime,X
   2048  fa5a		       95 b8		      STA	CountdownTimer,X
   2049  fa5c		       90 04		      BCC	JumpSkipTimeOver
   2050  fa5e		       a9 ff		      LDA	#$FF
   2051  fa60		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2052  fa62				   JumpSkipTimeOver
   2053  fa62		       20 e3 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2054  fa65		       4c 75 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2055  fa68				   SkipIsCheckpoint
   2056  fa68
   2057  fa68				   IsTimeOver
   2058  fa68		       b5 b8		      LDA	CountdownTimer,X
   2059  fa6a		       d0 09		      BNE	SkipIsTimeOver
   2060  fa6c		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2061  fa6e		       95 cb		      STA	ScoreFontColorHoldChange,X
   2062  fa70		       bd b9 fc 	      LDA	PlayerToScoreBadColor,X
   2063  fa73		       95 c9		      STA	ScoreFontColor,X
   2064  fa75				   SkipIsTimeOver
   2065  fa75		       60		      RTS
   2066  fa76
   2067  fa76
   2068  fa76				   EverySecond		; 64 frames to be more precise
   2069  fa76		       a9 3f		      LDA	#%00111111
   2070  fa78		       25 8c		      AND	FrameCount0
   2071  fa7a		       d0 06		      BNE	SkipEverySecondAction
   2072  fa7c		       d5 b8		      CMP	CountdownTimer,X
   2073  fa7e		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2074  fa80		       d6 b8		      DEC	CountdownTimer,X
   2075  fa82				   SkipEverySecondAction
   2076  fa82		       60		      RTS
   2077  fa83
   2078  fa83				   CalculateGear
   2079  fa83		       b5 de		      LDA	Player0SpeedL,X	;3
   2080  fa85		       29 80		      AND	#%10000000	;2
   2081  fa87		       15 f0		      ORA	Player0SpeedH,X	;3
   2082  fa89		       18		      CLC		;2
   2083  fa8a		       2a		      ROL		;2
   2084  fa8b		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2085  fa8d		       95 d5		      STA	Gear,X
   2086  fa8f		       60		      RTS
   2087  fa90
   2088  fa90				   ProcessScoreFontColor
   2089  fa90		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2090  fa92		       f0 06		      BEQ	ResetScoreFontColor
   2091  fa94		       88		      DEY
   2092  fa95		       94 cb		      STY	ScoreFontColorHoldChange,X
   2093  fa97		       4c 9f fa 	      JMP	SkipScoreFontColor
   2094  fa9a				   ResetScoreFontColor
   2095  fa9a		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2096  fa9d		       95 c9		      STA	ScoreFontColor,X
   2097  fa9f				   SkipScoreFontColor
   2098  fa9f		       60		      RTS
   2099  faa0
   2100  faa0							; X = Player
   2101  faa0							; A Returns result to be sotored in the proper digit
   2102  faa0				   PrintScoreHoldChange
   2103  faa0		       b5 cb		      LDA	ScoreFontColorHoldChange,X
   2104  faa2		       4a		      LSR
   2105  faa3		       4a		      LSR
   2106  faa4		       4a		      LSR
   2107  faa5		       4a		      LSR
   2108  faa6		       a8		      TAY
   2109  faa7		       b9 8c fc 	      LDA	BarLookup,Y
   2110  faaa		       60		      RTS
   2111  faab
   2112  faab				   PrintSpeedBar
   2113  faab		       b5 de		      LDA	Player0SpeedL,X
   2114  faad		       29 e0		      AND	#%11100000	;2 Discard the last bits
   2115  faaf		       18		      CLC
   2116  fab0		       2a		      ROL		;First goes into carry
   2117  fab1		       2a		      ROL
   2118  fab2		       2a		      ROL
   2119  fab3		       2a		      ROL
   2120  fab4		       85 b0		      STA	Tmp0
   2121  fab6		       b5 f0		      LDA	Player0SpeedH,X
   2122  fab8		       0a		      ASL
   2123  fab9		       0a		      ASL
   2124  faba		       0a		      ASL
   2125  fabb		       05 b0		      ORA	Tmp0
   2126  fabd		       a8		      TAY		; 2
   2127  fabe		       b9 9c fc 	      LDA	SpeedToBarLookup,Y	;4
   2128  fac1		       85 d2		      STA	ScoreD2	;3
   2129  fac3		       60		      RTS
   2130  fac4
   2131  fac4							; Moved here because of rom space.
   2132  fac4							; The only SBR in constants space
   2133  fac4				   DrawQrCode
   2134  fac4		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2135  fac6		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2136  fac8		       a9 01		      LDA	#%00000001	; Mirror playfield
   2137  faca		       85 0a		      STA	CTRLPF
   2138  facc		       20 a1 f6 	      JSR	ClearAll	; To be 100 sure!
   2139  facf		       ad 82 02 	      LDA	SWCHB
   2140  fad2		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2141  fad4		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2142  fad6		       f0 07		      BEQ	StoreReversedQrCode
   2143  fad8		       86 09		      STX	COLUBK
   2144  fada		       84 08		      STY	COLUPF
   2145  fadc		       4c e3 fa 	      JMP	ContinueQrCode
   2146  fadf				   StoreReversedQrCode
   2147  fadf		       86 08		      STX	COLUPF
   2148  fae1		       84 09		      STY	COLUBK
   2149  fae3
   2150  fae3				   ContinueQrCode
   2151  fae3		       a2 09		      LDX	#9
   2152  fae5		       20 f0 f7 	      JSR	HMoveXTimes
   2153  fae8		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2154  faea		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2155  faec		       20 c9 f7 	      JSR	WaitForVblankEnd
   2156  faef		       20 dc f7 	      JSR	Sleep8Lines
   2157  faf2		       20 dc f7 	      JSR	Sleep8Lines
   2158  faf5		       20 dc f7 	      JSR	Sleep8Lines
   2159  faf8
   2160  faf8				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2161  faf8		       85 02		      STA	WSYNC
   2162  fafa		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2163  fafd		       85 0e		      STA	PF1	;3
   2164  faff		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2165  fb02		       85 0f		      STA	PF2	;3
      0  fb04					      SLEEP	27	; 
      1  fb04				   .CYCLES    SET	27
      2  fb04
      3  fb04				  -	      IF	.CYCLES < 2
      4  fb04				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb04				  -	      ERR
      6  fb04					      ENDIF
      7  fb04
      8  fb04					      IF	.CYCLES & 1
      9  fb04				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb04				  -	      nop	0
     11  fb04					      ELSE
     12  fb04		       24 00		      bit	VSYNC
     13  fb06					      ENDIF
     14  fb06				   .CYCLES    SET	.CYCLES - 3
     15  fb06					      ENDIF
     16  fb06
     17  fb06					      REPEAT	.CYCLES / 2
     18  fb06		       ea		      nop
     17  fb06					      REPEND
     18  fb07		       ea		      nop
     17  fb07					      REPEND
     18  fb08		       ea		      nop
     17  fb08					      REPEND
     18  fb09		       ea		      nop
     17  fb09					      REPEND
     18  fb0a		       ea		      nop
     17  fb0a					      REPEND
     18  fb0b		       ea		      nop
     17  fb0b					      REPEND
     18  fb0c		       ea		      nop
     17  fb0c					      REPEND
     18  fb0d		       ea		      nop
     17  fb0d					      REPEND
     18  fb0e		       ea		      nop
     17  fb0e					      REPEND
     18  fb0f		       ea		      nop
     17  fb0f					      REPEND
     18  fb10		       ea		      nop
     17  fb10					      REPEND
     18  fb11		       ea		      nop
     19  fb12					      REPEND
   2167  fb12		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2168  fb15		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2169  fb17		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2170  fb1a		       85 0e		      STA	PF1	;3
   2171  fb1c
   2172  fb1c		       ca		      DEX		;2
   2173  fb1d		       d0 d9		      BNE	QrCodeLoop	;2
   2174  fb1f		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2175  fb21		       88		      DEY		;2
   2176  fb22		       10 d4		      BPL	QrCodeLoop	;4
   2177  fb24
   2178  fb24				   EndQrCodeLoop
   2179  fb24		       85 02		      STA	WSYNC	;
   2180  fb26		       a9 00		      LDA	#0
   2181  fb28		       85 0e		      STA	PF1	;3
   2182  fb2a		       85 0f		      STA	PF2	;3
   2183  fb2c
   2184  fb2c		       20 e3 f7 	      JSR	Sleep32Lines
   2185  fb2f		       4c 34 f5 	      JMP	PrepareOverscan
   2186  fb32
   2187  fb32							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2188  fc00					      org	$FC00
   2189  fc00				   QrCode1
   2190  fc00		       1f		      .byte.b	#%00011111
   2191  fc01		       10		      .byte.b	#%00010000
   2192  fc02		       17		      .byte.b	#%00010111
   2193  fc03		       17		      .byte.b	#%00010111
   2194  fc04		       17		      .byte.b	#%00010111
   2195  fc05		       10		      .byte.b	#%00010000
   2196  fc06		       1f		      .byte.b	#%00011111
   2197  fc07		       00		      .byte.b	#%00000000
   2198  fc08		       17		      .byte.b	#%00010111
   2199  fc09		       10		      .byte.b	#%00010000
   2200  fc0a		       1d		      .byte.b	#%00011101
   2201  fc0b		       16		      .byte.b	#%00010110
   2202  fc0c		       03		      .byte.b	#%00000011
   2203  fc0d		       19		      .byte.b	#%00011001
   2204  fc0e		       13		      .byte.b	#%00010011
   2205  fc0f		       1c		      .byte.b	#%00011100
   2206  fc10		       0b		      .byte.b	#%00001011
   2207  fc11		       00		      .byte.b	#%00000000
   2208  fc12		       1f		      .byte.b	#%00011111
   2209  fc13		       10		      .byte.b	#%00010000
   2210  fc14		       17		      .byte.b	#%00010111
   2211  fc15		       17		      .byte.b	#%00010111
   2212  fc16		       17		      .byte.b	#%00010111
   2213  fc17		       10		      .byte.b	#%00010000
   2214  fc18		       1f		      .byte.b	#%00011111
   2215  fc19
   2216  fc19				   QrCode2
   2217  fc19		       c3		      .byte.b	#%11000011
   2218  fc1a		       9a		      .byte.b	#%10011010
   2219  fc1b		       82		      .byte.b	#%10000010
   2220  fc1c		       da		      .byte.b	#%11011010
   2221  fc1d		       aa		      .byte.b	#%10101010
   2222  fc1e		       ca		      .byte.b	#%11001010
   2223  fc1f		       f3		      .byte.b	#%11110011
   2224  fc20		       78		      .byte.b	#%01111000
   2225  fc21		       df		      .byte.b	#%11011111
   2226  fc22		       fc		      .byte.b	#%11111100
   2227  fc23		       c7		      .byte.b	#%11000111
   2228  fc24		       98		      .byte.b	#%10011000
   2229  fc25		       23		      .byte.b	#%00100011
   2230  fc26		       b9		      .byte.b	#%10111001
   2231  fc27		       d2		      .byte.b	#%11010010
   2232  fc28		       30		      .byte.b	#%00110000
   2233  fc29		       eb		      .byte.b	#%11101011
   2234  fc2a		       28		      .byte.b	#%00101000
   2235  fc2b		       ab		      .byte.b	#%10101011
   2236  fc2c		       72		      .byte.b	#%01110010
   2237  fc2d		       fa		      .byte.b	#%11111010
   2238  fc2e		       7a		      .byte.b	#%01111010
   2239  fc2f		       32		      .byte.b	#%00110010
   2240  fc30		       3a		      .byte.b	#%00111010
   2241  fc31		       63		      .byte.b	#%01100011
   2242  fc32
   2243  fc32				   QrCode3
   2244  fc32		       98		      .byte.b	#%10011000
   2245  fc33		       c3		      .byte.b	#%11000011
   2246  fc34		       39		      .byte.b	#%00111001
   2247  fc35		       34		      .byte.b	#%00110100
   2248  fc36		       ff		      .byte.b	#%11111111
   2249  fc37		       71		      .byte.b	#%01110001
   2250  fc38		       d5		      .byte.b	#%11010101
   2251  fc39		       d1		      .byte.b	#%11010001
   2252  fc3a		       5f		      .byte.b	#%01011111
   2253  fc3b		       26		      .byte.b	#%00100110
   2254  fc3c		       2d		      .byte.b	#%00101101
   2255  fc3d		       e9		      .byte.b	#%11101001
   2256  fc3e		       d6		      .byte.b	#%11010110
   2257  fc3f		       26		      .byte.b	#%00100110
   2258  fc40		       ba		      .byte.b	#%10111010
   2259  fc41		       03		      .byte.b	#%00000011
   2260  fc42		       dd		      .byte.b	#%11011101
   2261  fc43		       e0		      .byte.b	#%11100000
   2262  fc44		       57		      .byte.b	#%01010111
   2263  fc45		       14		      .byte.b	#%00010100
   2264  fc46		       35		      .byte.b	#%00110101
   2265  fc47		       e5		      .byte.b	#%11100101
   2266  fc48		       b5		      .byte.b	#%10110101
   2267  fc49		       d4		      .byte.b	#%11010100
   2268  fc4a		       97		      .byte.b	#%10010111
   2269  fc4b
   2270  fc4b				   QrCode4
   2271  fc4b		       09		      .byte.b	#%00001001
   2272  fc4c		       0e		      .byte.b	#%00001110
   2273  fc4d		       0f		      .byte.b	#%00001111
   2274  fc4e		       0c		      .byte.b	#%00001100
   2275  fc4f		       0c		      .byte.b	#%00001100
   2276  fc50		       08		      .byte.b	#%00001000
   2277  fc51		       08		      .byte.b	#%00001000
   2278  fc52		       06		      .byte.b	#%00000110
   2279  fc53		       06		      .byte.b	#%00000110
   2280  fc54		       0b		      .byte.b	#%00001011
   2281  fc55		       0f		      .byte.b	#%00001111
   2282  fc56		       04		      .byte.b	#%00000100
   2283  fc57		       08		      .byte.b	#%00001000
   2284  fc58		       0f		      .byte.b	#%00001111
   2285  fc59		       09		      .byte.b	#%00001001
   2286  fc5a		       07		      .byte.b	#%00000111
   2287  fc5b		       05		      .byte.b	#%00000101
   2288  fc5c		       00		      .byte.b	#%00000000
   2289  fc5d		       0f		      .byte.b	#%00001111
   2290  fc5e		       08		      .byte.b	#%00001000
   2291  fc5f		       0b		      .byte.b	#%00001011
   2292  fc60		       0b		      .byte.b	#%00001011
   2293  fc61		       0b		      .byte.b	#%00001011
   2294  fc62		       08		      .byte.b	#%00001000
   2295  fc63		       0f		      .byte.b	#%00001111
   2296  fc64
   2297  fc64				   PlayerToUpMask
   2298  fc64		       10		      .byte.b	#%00010000	;
   2299  fc65		       01		      .byte.b	#%00000001	;
   2300  fc66
   2301  fc66				   PlayerToDownMask
   2302  fc66		       20		      .byte.b	#%00100000	;
   2303  fc67		       02		      .byte.b	#%00000010	;
   2304  fc68
   2305  fc68				   PlayerToLeftMask
   2306  fc68		       40		      .byte.b	#%01000000	;
   2307  fc69		       04		      .byte.b	#%00000100	;
   2308  fc6a
   2309  fc6a				   PlayerToRightMask
   2310  fc6a		       80		      .byte.b	#%10000000	;
   2311  fc6b		       08		      .byte.b	#%00001000	;
   2312  fc6c
   2313  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2314  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2315  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2316  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2317  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2318  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2319  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2320  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2321  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2322  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2323  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2324  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2325  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2326  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2327  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2328  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2329  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2330  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2331  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2332  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2333  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2334  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2335  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2336  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2337  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2338  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2339  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2340  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2341  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2342  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2343  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2344  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2345  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2346  fc8c
   2347  fc8c
   2348  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2349  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2350  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2351  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2352  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2353  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2354  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2355  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2356  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2357  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2358  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2359  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2360  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2361  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2362  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2363  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2364  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2365  fc9c
   2366  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2367  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2368  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2369  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2370  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2371  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2372  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2373  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2374  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2375  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2376  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2377  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2378  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2379  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2380  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2381  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2382  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2383  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2384  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2385  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2386  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2387  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2388  fcb1
   2389  fcb1				   PlayerToDefaultColor
   2390  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2391  fcb2		       98		      .byte.b	#PLAYER1_COLOR
   2392  fcb3
   2393  fcb3				   PlayerToScoreGoodColor
   2394  fcb3		       37		      .byte.b	#SCORE_FONT_COLOR_GOOD
   2395  fcb4		       d8		      .byte.b	#OP_SCORE_FONT_COLOR_GOOD
   2396  fcb5
   2397  fcb5				   PlayerToScoreStartColor
   2398  fcb5		       38		      .byte.b	#SCORE_FONT_COLOR_START
   2399  fcb6		       c8		      .byte.b	#OP_SCORE_FONT_COLOR_START
   2400  fcb7
   2401  fcb7				   PlayerToScoreOverColor
   2402  fcb7		       0c		      .byte.b	#SCORE_FONT_COLOR_OVER
   2403  fcb8		       ab		      .byte.b	#OP_SCORE_FONT_COLOR_OVER
   2404  fcb9
   2405  fcb9				   PlayerToScoreBadColor
   2406  fcb9		       44		      .byte.b	#SCORE_FONT_COLOR_BAD
   2407  fcba		       56		      .byte.b	#OP_SCORE_FONT_COLOR_BAD
   2408  fcbb
   2409  fd00					      org	$FD00
   2410  fd00				   Font
   2411  fd00				   C0
   2412  fd00		       e7		      .byte.b	#%11100111	;
   2413  fd01		       a5		      .byte.b	#%10100101	; 
   2414  fd02		       a5		      .byte.b	#%10100101	; 
   2415  fd03		       a5		      .byte.b	#%10100101	; 
   2416  fd04		       e7		      .byte.b	#%11100111	;	
   2417  fd05				   C1
   2418  fd05		       e7		      .byte.b	#%11100111	;
   2419  fd06		       42		      .byte.b	#%01000010	; 
   2420  fd07		       42		      .byte.b	#%01000010	; 
   2421  fd08		       42		      .byte.b	#%01000010	; 
   2422  fd09		       66		      .byte.b	#%01100110	;
   2423  fd0a				   C2
   2424  fd0a		       e7		      .byte.b	#%11100111	;
   2425  fd0b		       24		      .byte.b	#%00100100	; 
   2426  fd0c		       e7		      .byte.b	#%11100111	; 
   2427  fd0d		       81		      .byte.b	#%10000001	; 
   2428  fd0e		       e7		      .byte.b	#%11100111	;
   2429  fd0f				   C3
   2430  fd0f		       e7		      .byte.b	#%11100111	;
   2431  fd10		       81		      .byte.b	#%10000001	; 
   2432  fd11		       e7		      .byte.b	#%11100111	; 
   2433  fd12		       81		      .byte.b	#%10000001	; 
   2434  fd13		       e7		      .byte.b	#%11100111	;
   2435  fd14				   C4
   2436  fd14		       81		      .byte.b	#%10000001	;
   2437  fd15		       81		      .byte.b	#%10000001	; 
   2438  fd16		       e7		      .byte.b	#%11100111	; 
   2439  fd17		       a5		      .byte.b	#%10100101	; 
   2440  fd18		       a5		      .byte.b	#%10100101	;
   2441  fd19				   C5
   2442  fd19		       e7		      .byte.b	#%11100111	;
   2443  fd1a		       81		      .byte.b	#%10000001	; 
   2444  fd1b		       e7		      .byte.b	#%11100111	; 
   2445  fd1c		       24		      .byte.b	#%00100100	; 
   2446  fd1d		       e7		      .byte.b	#%11100111	;
   2447  fd1e				   C6
   2448  fd1e		       e7		      .byte.b	#%11100111	;
   2449  fd1f		       a5		      .byte.b	#%10100101	; 
   2450  fd20		       e7		      .byte.b	#%11100111	; 
   2451  fd21		       24		      .byte.b	#%00100100	; 
   2452  fd22		       e7		      .byte.b	#%11100111	;
   2453  fd23				   C7
   2454  fd23		       81		      .byte.b	#%10000001	;
   2455  fd24		       81		      .byte.b	#%10000001	; 
   2456  fd25		       81		      .byte.b	#%10000001	; 
   2457  fd26		       81		      .byte.b	#%10000001	; 
   2458  fd27		       e7		      .byte.b	#%11100111	;
   2459  fd28				   C8
   2460  fd28		       e7		      .byte.b	#%11100111	;
   2461  fd29		       a5		      .byte.b	#%10100101	; 
   2462  fd2a		       e7		      .byte.b	#%11100111	; 
   2463  fd2b		       a5		      .byte.b	#%10100101	; 
   2464  fd2c		       e7		      .byte.b	#%11100111	;
   2465  fd2d				   C9
   2466  fd2d		       e7		      .byte.b	#%11100111	;
   2467  fd2e		       81		      .byte.b	#%10000001	; 
   2468  fd2f		       e7		      .byte.b	#%11100111	; 
   2469  fd30		       a5		      .byte.b	#%10100101	; 
   2470  fd31		       e7		      .byte.b	#%11100111	;
   2471  fd32				   CA
   2472  fd32		       a5		      .byte.b	#%10100101	;
   2473  fd33		       a5		      .byte.b	#%10100101	; 
   2474  fd34		       e7		      .byte.b	#%11100111	; 
   2475  fd35		       a5		      .byte.b	#%10100101	; 
   2476  fd36		       e7		      .byte.b	#%11100111	;
   2477  fd37				   CB
   2478  fd37		       66		      .byte.b	#%01100110	;
   2479  fd38		       a5		      .byte.b	#%10100101	; 
   2480  fd39		       66		      .byte.b	#%01100110	; 
   2481  fd3a		       a5		      .byte.b	#%10100101	;
   2482  fd3b		       66		      .byte.b	#%01100110	;
   2483  fd3c				   CC
   2484  fd3c		       e7		      .byte.b	#%11100111	;
   2485  fd3d		       24		      .byte.b	#%00100100	; 
   2486  fd3e		       24		      .byte.b	#%00100100	; 
   2487  fd3f		       24		      .byte.b	#%00100100	;
   2488  fd40		       e7		      .byte.b	#%11100111	;
   2489  fd41
   2490  fd41				   CD
   2491  fd41		       66		      .byte.b	#%01100110	;
   2492  fd42		       a5		      .byte.b	#%10100101	; 
   2493  fd43		       a5		      .byte.b	#%10100101	; 
   2494  fd44		       a5		      .byte.b	#%10100101	;
   2495  fd45		       66		      .byte.b	#%01100110	;
   2496  fd46
   2497  fd46				   CE
   2498  fd46		       e7		      .byte.b	#%11100111	;
   2499  fd47		       24		      .byte.b	#%00100100	; 
   2500  fd48		       e7		      .byte.b	#%11100111	; 
   2501  fd49		       24		      .byte.b	#%00100100	; 
   2502  fd4a		       e7		      .byte.b	#%11100111	;
   2503  fd4b
   2504  fd4b				   CF
   2505  fd4b		       24		      .byte.b	#%00100100	;
   2506  fd4c		       24		      .byte.b	#%00100100	; 
   2507  fd4d		       e7		      .byte.b	#%11100111	; 
   2508  fd4e		       24		      .byte.b	#%00100100	; 
   2509  fd4f		       e7		      .byte.b	#%11100111	;
   2510  fd50
   2511  fd50				   CG
   2512  fd50		       c3		      .byte.b	#%11000011	;
   2513  fd51		       a5		      .byte.b	#%10100101	; 
   2514  fd52		       a5		      .byte.b	#%10100101	; 
   2515  fd53		       24		      .byte.b	#%00100100	; 
   2516  fd54		       c3		      .byte.b	#%11000011	;	
   2517  fd55
   2518  fd55				   CH
   2519  fd55		       a5		      .byte.b	#%10100101	;
   2520  fd56		       a5		      .byte.b	#%10100101	; 
   2521  fd57		       e7		      .byte.b	#%11100111	; 
   2522  fd58		       a5		      .byte.b	#%10100101	; 
   2523  fd59		       a5		      .byte.b	#%10100101	;
   2524  fd5a
   2525  fd5a				   CI
   2526  fd5a		       e7		      .byte.b	#%11100111	;
   2527  fd5b		       42		      .byte.b	#%01000010	; 
   2528  fd5c		       42		      .byte.b	#%01000010	; 
   2529  fd5d		       42		      .byte.b	#%01000010	; 
   2530  fd5e		       e7		      .byte.b	#%11100111	;
   2531  fd5f
   2532  fd5f				   CJ
   2533  fd5f		       e7		      .byte.b	#%11100111	;
   2534  fd60		       a5		      .byte.b	#%10100101	; 
   2535  fd61		       81		      .byte.b	#%10000001	; 
   2536  fd62		       81		      .byte.b	#%10000001	; 
   2537  fd63		       81		      .byte.b	#%10000001	;	
   2538  fd64
   2539  fd64				   CK
   2540  fd64		       a5		      .byte.b	#%10100101	;
   2541  fd65		       a5		      .byte.b	#%10100101	; 
   2542  fd66		       66		      .byte.b	#%01100110	; 
   2543  fd67		       a5		      .byte.b	#%10100101	; 
   2544  fd68		       a5		      .byte.b	#%10100101	;
   2545  fd69
   2546  fd69				   CL
   2547  fd69		       e7		      .byte.b	#%11100111	;
   2548  fd6a		       24		      .byte.b	#%00100100	; 
   2549  fd6b		       24		      .byte.b	#%00100100	; 
   2550  fd6c		       24		      .byte.b	#%00100100	; 
   2551  fd6d		       24		      .byte.b	#%00100100	;
   2552  fd6e
   2553  fd6e				   CM
   2554  fd6e		       a5		      .byte.b	#%10100101	;
   2555  fd6f		       a5		      .byte.b	#%10100101	; 
   2556  fd70		       a5		      .byte.b	#%10100101	; 
   2557  fd71		       e7		      .byte.b	#%11100111	; 
   2558  fd72		       a5		      .byte.b	#%10100101	;
   2559  fd73
   2560  fd73				   CN
   2561  fd73		       a5		      .byte.b	#%10100101	;
   2562  fd74		       a5		      .byte.b	#%10100101	; 
   2563  fd75		       a5		      .byte.b	#%10100101	; 
   2564  fd76		       a5		      .byte.b	#%10100101	; 
   2565  fd77		       66		      .byte.b	#%01100110	;	
   2566  fd78
   2567  fd78
   2568  fd78				   CO
   2569  fd78		       42		      .byte.b	#%01000010	;
   2570  fd79		       a5		      .byte.b	#%10100101	; 
   2571  fd7a		       a5		      .byte.b	#%10100101	; 
   2572  fd7b		       a5		      .byte.b	#%10100101	; 
   2573  fd7c		       42		      .byte.b	#%01000010	;	
   2574  fd7d
   2575  fd7d				   CP
   2576  fd7d		       24		      .byte.b	#%00100100	;
   2577  fd7e		       24		      .byte.b	#%00100100	; 
   2578  fd7f		       e7		      .byte.b	#%11100111	; 
   2579  fd80		       a5		      .byte.b	#%10100101	; 
   2580  fd81		       e7		      .byte.b	#%11100111	;
   2581  fd82
   2582  fd82				   CQ
   2583  fd82		       81		      .byte.b	#%10000001	;
   2584  fd83		       e5		      .byte.b	#%11100101	; 
   2585  fd84		       a5		      .byte.b	#%10100101	; 
   2586  fd85		       a5		      .byte.b	#%10100101	; 
   2587  fd86		       e7		      .byte.b	#%11100111	;	
   2588  fd87
   2589  fd87				   CR
   2590  fd87		       a5		      .byte.b	#%10100101	;
   2591  fd88		       a5		      .byte.b	#%10100101	; 
   2592  fd89		       66		      .byte.b	#%01100110	; 
   2593  fd8a		       a5		      .byte.b	#%10100101	; 
   2594  fd8b		       66		      .byte.b	#%01100110	;
   2595  fd8c
   2596  fd8c				   CS
   2597  fd8c		       66		      .byte.b	#%01100110	;
   2598  fd8d		       81		      .byte.b	#%10000001	; 
   2599  fd8e		       42		      .byte.b	#%01000010	; 
   2600  fd8f		       24		      .byte.b	#%00100100	; 
   2601  fd90		       c3		      .byte.b	#%11000011	;
   2602  fd91
   2603  fd91				   CT
   2604  fd91		       42		      .byte.b	#%01000010	;
   2605  fd92		       42		      .byte.b	#%01000010	; 
   2606  fd93		       42		      .byte.b	#%01000010	; 
   2607  fd94		       42		      .byte.b	#%01000010	; 
   2608  fd95		       e7		      .byte.b	#%11100111	;
   2609  fd96
   2610  fd96				   CU
   2611  fd96		       e7		      .byte.b	#%11100111	;
   2612  fd97		       a5		      .byte.b	#%10100101	; 
   2613  fd98		       a5		      .byte.b	#%10100101	; 
   2614  fd99		       a5		      .byte.b	#%10100101	; 
   2615  fd9a		       a5		      .byte.b	#%10100101	;	
   2616  fd9b
   2617  fd9b				   CW
   2618  fd9b		       a5		      .byte.b	#%10100101	;
   2619  fd9c		       e7		      .byte.b	#%11100111	; 
   2620  fd9d		       a5		      .byte.b	#%10100101	; 
   2621  fd9e		       a5		      .byte.b	#%10100101	; 
   2622  fd9f		       a5		      .byte.b	#%10100101	;
   2623  fda0
   2624  fda0				   CY
   2625  fda0		       42		      .byte.b	#%01000010	;
   2626  fda1		       42		      .byte.b	#%01000010	; 
   2627  fda2		       42		      .byte.b	#%01000010	; 
   2628  fda3		       a5		      .byte.b	#%10100101	; 
   2629  fda4		       a5		      .byte.b	#%10100101	;
   2630  fda5
   2631  fda5				   Exclamation
   2632  fda5		       42		      .byte.b	#%01000010	;
   2633  fda6		       00		      .byte.b	#%00000000	; 
   2634  fda7		       42		      .byte.b	#%01000010	; 
   2635  fda8		       42		      .byte.b	#%01000010	; 
   2636  fda9		       42		      .byte.b	#%01000010	;
   2637  fdaa
   2638  fdaa				   Pipe
   2639  fdaa				   Colon
   2640  fdaa		       42		      .byte.b	#%01000010	;
   2641  fdab		       42		      .byte.b	#%01000010	; 
   2642  fdac		       00		      .byte.b	#%00000000	; 
   2643  fdad		       42		      .byte.b	#%01000010	; 
   2644  fdae		       42		      .byte.b	#%01000010	;
   2645  fdaf
   2646  fdaf				   Space
   2647  fdaf				   C0B
   2648  fdaf		       00		      .byte.b	#%00000000	;
   2649  fdb0		       00		      .byte.b	#%00000000	; 
   2650  fdb1		       00		      .byte.b	#%00000000	; 
   2651  fdb2		       00		      .byte.b	#%00000000	; 
   2652  fdb3		       00		      .byte.b	#%00000000	;	
   2653  fdb4				   C1B
   2654  fdb4		       24		      .byte.b	#%00100100	;
   2655  fdb5		       00		      .byte.b	#%00000000	; 
   2656  fdb6		       00		      .byte.b	#%00000000	; 
   2657  fdb7		       00		      .byte.b	#%00000000	; 
   2658  fdb8		       00		      .byte.b	#%00000000	;
   2659  fdb9				   C2B
   2660  fdb9		       66		      .byte.b	#%01100110	;
   2661  fdba		       00		      .byte.b	#%00000000	; 
   2662  fdbb		       00		      .byte.b	#%00000000	; 
   2663  fdbc		       00		      .byte.b	#%00000000	; 
   2664  fdbd		       00		      .byte.b	#%00000000	;
   2665  fdbe				   C3B
   2666  fdbe		       e7		      .byte.b	#%11100111	;
   2667  fdbf		       00		      .byte.b	#%00000000	; 
   2668  fdc0		       00		      .byte.b	#%00000000	; 
   2669  fdc1		       00		      .byte.b	#%00000000	; 
   2670  fdc2		       00		      .byte.b	#%00000000	;
   2671  fdc3				   C4B
   2672  fdc3		       e7		      .byte.b	#%11100111	;
   2673  fdc4		       24		      .byte.b	#%00100100	; 
   2674  fdc5		       00		      .byte.b	#%00000000	; 
   2675  fdc6		       00		      .byte.b	#%00000000	; 
   2676  fdc7		       00		      .byte.b	#%00000000	;
   2677  fdc8				   C5B
   2678  fdc8		       e7		      .byte.b	#%11100111	;
   2679  fdc9		       66		      .byte.b	#%01100110	; 
   2680  fdca		       00		      .byte.b	#%00000000	; 
   2681  fdcb		       00		      .byte.b	#%00000000	; 
   2682  fdcc		       00		      .byte.b	#%00000000	;
   2683  fdcd				   C6B
   2684  fdcd		       e7		      .byte.b	#%11100111	;
   2685  fdce		       e7		      .byte.b	#%11100111	; 
   2686  fdcf		       00		      .byte.b	#%00000000	; 
   2687  fdd0		       00		      .byte.b	#%00000000	; 
   2688  fdd1		       00		      .byte.b	#%00000000	;
   2689  fdd2				   C7B
   2690  fdd2		       e7		      .byte.b	#%11100111	;
   2691  fdd3		       e7		      .byte.b	#%11100111	; 
   2692  fdd4		       24		      .byte.b	#%00100100	; 
   2693  fdd5		       00		      .byte.b	#%00000000	; 
   2694  fdd6		       00		      .byte.b	#%00000000	;
   2695  fdd7				   C8B
   2696  fdd7		       e7		      .byte.b	#%11100111	;
   2697  fdd8		       e7		      .byte.b	#%11100111	; 
   2698  fdd9		       66		      .byte.b	#%01100110	; 
   2699  fdda		       00		      .byte.b	#%00000000	; 
   2700  fddb		       00		      .byte.b	#%00000000	;
   2701  fddc				   C9B
   2702  fddc		       e7		      .byte.b	#%11100111	;
   2703  fddd		       e7		      .byte.b	#%11100111	; 
   2704  fdde		       e7		      .byte.b	#%11100111	; 
   2705  fddf		       00		      .byte.b	#%00000000	; 
   2706  fde0		       00		      .byte.b	#%00000000	;
   2707  fde1				   CAB
   2708  fde1		       e7		      .byte.b	#%11100111	;
   2709  fde2		       e7		      .byte.b	#%11100111	; 
   2710  fde3		       e7		      .byte.b	#%11100111	; 
   2711  fde4		       24		      .byte.b	#%00100100	; 
   2712  fde5		       00		      .byte.b	#%00000000	;
   2713  fde6				   CBB
   2714  fde6		       e7		      .byte.b	#%11100111	;
   2715  fde7		       e7		      .byte.b	#%11100111	; 
   2716  fde8		       e7		      .byte.b	#%11100111	; 
   2717  fde9		       66		      .byte.b	#%01100110	; 
   2718  fdea		       00		      .byte.b	#%00000000	;
   2719  fdeb				   CCB
   2720  fdeb		       e7		      .byte.b	#%11100111	;
   2721  fdec		       e7		      .byte.b	#%11100111	; 
   2722  fded		       e7		      .byte.b	#%11100111	; 
   2723  fdee		       e7		      .byte.b	#%11100111	; 
   2724  fdef		       00		      .byte.b	#%00000000	;
   2725  fdf0
   2726  fdf0				   CDB
   2727  fdf0		       e7		      .byte.b	#%11100111	;
   2728  fdf1		       e7		      .byte.b	#%11100111	; 
   2729  fdf2		       e7		      .byte.b	#%11100111	; 
   2730  fdf3		       e7		      .byte.b	#%11100111	; 
   2731  fdf4		       24		      .byte.b	#%00100100	;
   2732  fdf5
   2733  fdf5				   CEB
   2734  fdf5		       e7		      .byte.b	#%11100111	;
   2735  fdf6		       e7		      .byte.b	#%11100111	; 
   2736  fdf7		       e7		      .byte.b	#%11100111	; 
   2737  fdf8		       e7		      .byte.b	#%11100111	; 
   2738  fdf9		       66		      .byte.b	#%01100110	;
   2739  fdfa
   2740  fdfa				   CFB
   2741  fdfa		       e7		      .byte.b	#%11100111	;
   2742  fdfb		       e7		      .byte.b	#%11100111	; 
   2743  fdfc		       e7		      .byte.b	#%11100111	; 
   2744  fdfd		       e7		      .byte.b	#%11100111	; 
   2745  fdfe		       e7		      .byte.b	#%11100111	;
   2746  fdff
   2747  fe00					      org	$FE00
   2748  fe00				   AesTable
   2749  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2750  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2751  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2752  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2753  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2754  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2755  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2756  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2757  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2758  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2759  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2760  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2761  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2762  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2763  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2764  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2765  ff00
   2766  ff00					      org	$FF00
   2767  ff00				   StaticText		; All static text must be on the same MSB block. 
   2768  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2769  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2770  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2771  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2772  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2773  ff04
   2774  ff04				   HellwayLeftText
   2775  ff04		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2776  ff05		       59		      .byte.b	#<CH + #FONT_OFFSET
   2777  ff06		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2778  ff07		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2779  ff08
   2780  ff08				   HellwayRightText
   2781  ff08		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2782  ff09		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2783  ff0a		       81		      .byte.b	#<CP + #FONT_OFFSET
   2784  ff0b		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2785  ff0c		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2786  ff0d
   2787  ff0d				   OpbText
   2788  ff0d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2789  ff0e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2790  ff0f		       81		      .byte.b	#<CP + #FONT_OFFSET
   2791  ff10		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2792  ff11
   2793  ff11				   YearText
   2794  ff11		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2795  ff12		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2796  ff13		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2797  ff14		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2798  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2799  ff16
   2800  ff16				   GoText
   2801  ff16		       54		      .byte.b	#<CG + #FONT_OFFSET
   2802  ff17		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2803  ff18		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2804  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2805  ff1a
   2806  ff1a				   WinText
   2807  ff1a		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2808  ff1b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2809  ff1c		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2810  ff1d
   2811  ff1d				   LoseText
   2812  ff1d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2813  ff1e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2814  ff1f		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2815  ff20
   2816  ff20				   BuildNumberText
   2817  ff20		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2818  ff21		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2819  ff22		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2820  ff23		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2821  ff24		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2822  ff25
   2823  ff25				   ReadyText
   2824  ff25		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2825  ff26		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2826  ff27		       36		      .byte.b	#<CA + #FONT_OFFSET
   2827  ff28		       45		      .byte.b	#<CD + #FONT_OFFSET
   2828  ff29		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2829  ff2a
   2830  ff2a				   EndStaticText
   2831  ff2a
   2832  ff2a				   EngineSoundType
   2833  ff2a		       02		      .byte.b	#2
   2834  ff2b		       02		      .byte.b	#2
   2835  ff2c		       0e		      .byte.b	#14
   2836  ff2d		       06		      .byte.b	#6
   2837  ff2e		       06		      .byte.b	#6
   2838  ff2f		       0e		      .byte.b	#14
   2839  ff30
   2840  ff30				   EngineBaseFrequence
   2841  ff30		       1f		      .byte.b	#31
   2842  ff31		       15		      .byte.b	#21
   2843  ff32		       14		      .byte.b	#20
   2844  ff33		       1f		      .byte.b	#31
   2845  ff34		       16		      .byte.b	#22
   2846  ff35		       03		      .byte.b	#3
   2847  ff36
   2848  ff36				   CarSprite0		; Upside down, Original Car
   2849  ff36		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2850  ff3e				   CarSprite0NoPadding
   2851  ff3e		       7e		      .byte.b	#%01111110
   2852  ff3f		       24		      .byte.b	#%00100100
   2853  ff40		       bd		      .byte.b	#%10111101
   2854  ff41		       3c		      .byte.b	#%00111100
   2855  ff42		       bd		      .byte.b	#%10111101
   2856  ff43		       3c		      .byte.b	#%00111100
   2857  ff44
   2858  ff44				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2859  ff44		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2860  ff4c				   CarSprite1NoPadding
   2861  ff4c		       bd		      .byte.b	#%10111101
   2862  ff4d		       7e		      .byte.b	#%01111110
   2863  ff4e		       5a		      .byte.b	#%01011010
   2864  ff4f		       66		      .byte.b	#%01100110
   2865  ff50		       bd		      .byte.b	#%10111101
   2866  ff51		       3c		      .byte.b	#%00111100
   2867  ff52
   2868  ff52				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2869  ff52		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2870  ff5a				   CarSprite2NoPadding
   2871  ff5a		       7e		      .byte.b	#%01111110
   2872  ff5b		       a5		      .byte.b	#%10100101
   2873  ff5c		       42		      .byte.b	#%01000010
   2874  ff5d		       42		      .byte.b	#%01000010
   2875  ff5e		       bd		      .byte.b	#%10111101
   2876  ff5f		       7e		      .byte.b	#%01111110
   2877  ff60
   2878  ff60				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2879  ff60		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2880  ff68				   CarSprite3NoPadding
   2881  ff68		       3c		      .byte.b	#%00111100
   2882  ff69		       db		      .byte.b	#%11011011
   2883  ff6a		       db		      .byte.b	#%11011011
   2884  ff6b		       3c		      .byte.b	#%00111100
   2885  ff6c		       5a		      .byte.b	#%01011010
   2886  ff6d		       3c		      .byte.b	#%00111100
   2887  ff6e
   2888  ff6e				   TrafficSpeeds
   2889  ff6e		       00		      .byte.b	#$00	;  Trafic0 L
   2890  ff6f		       00		      .byte.b	#$00	;  Trafic0 H
   2891  ff70		       0a		      .byte.b	#$0A	;  Trafic1 L
   2892  ff71		       01		      .byte.b	#$01	;  Trafic1 H
   2893  ff72		       e6		      .byte.b	#$E6	;  Trafic2 L
   2894  ff73		       00		      .byte.b	#$00	;  Trafic2 H
   2895  ff74		       c2		      .byte.b	#$C2	;  Trafic3 L
   2896  ff75		       00		      .byte.b	#$00	;  Trafic3 H
   2897  ff76		       9e		      .byte.b	#$9E	;  Trafic4 L
   2898  ff77		       00		      .byte.b	#$00	;  Trafic4 H
   2899  ff78				   TrafficSpeedsHighDelta
   2900  ff78		       00		      .byte.b	#$00	;  Trafic0 L
   2901  ff79		       00		      .byte.b	#$00	;  Trafic0 H
   2902  ff7a		       0a		      .byte.b	#$0A	;  Trafic1 L
   2903  ff7b		       01		      .byte.b	#$01	;  Trafic1 H
   2904  ff7c		       c8		      .byte.b	#$C8	;  Trafic2 L
   2905  ff7d		       00		      .byte.b	#$00	;  Trafic2 H
   2906  ff7e		       86		      .byte.b	#$86	;  Trafic3 L
   2907  ff7f		       00		      .byte.b	#$00	;  Trafic3 H
   2908  ff80		       44		      .byte.b	#$44	;  Trafic4 L
   2909  ff81		       00		      .byte.b	#$00	;  Trafic4 H
   2910  ff82
   2911  ff82				   CarIdToSpriteAddressL
   2912  ff82		       36		      .byte.b	#<CarSprite0
   2913  ff83		       44		      .byte.b	#<CarSprite1
   2914  ff84		       52		      .byte.b	#<CarSprite2
   2915  ff85		       60		      .byte.b	#<CarSprite3
   2916  ff86
   2917  ff86				   CarIdToSpriteAddressH
   2918  ff86		       ff		      .byte.b	#>CarSprite0
   2919  ff87		       ff		      .byte.b	#>CarSprite1
   2920  ff88		       ff		      .byte.b	#>CarSprite2
   2921  ff89		       ff		      .byte.b	#>CarSprite3
   2922  ff8a
   2923  ff8a				   EnemyCarIdToSpriteAddressL
   2924  ff8a		       3e		      .byte.b	#<CarSprite0NoPadding
   2925  ff8b		       4c		      .byte.b	#<CarSprite1NoPadding
   2926  ff8c		       5a		      .byte.b	#<CarSprite2NoPadding
   2927  ff8d		       68		      .byte.b	#<CarSprite3NoPadding
   2928  ff8e
   2929  ff8e				   EnemyCarIdToSpriteAddressH
   2930  ff8e		       ff		      .byte.b	#>CarSprite0NoPadding
   2931  ff8f		       ff		      .byte.b	#>CarSprite1NoPadding
   2932  ff90		       ff		      .byte.b	#>CarSprite2NoPadding
   2933  ff91		       ff		      .byte.b	#>CarSprite3NoPadding
   2934  ff92
   2935  ff92				   CarIdToAccelerateSpeed
   2936  ff92		       80		      .byte.b	#128
   2937  ff93		       c0		      .byte.b	#192
   2938  ff94		       60		      .byte.b	#96
   2939  ff95		       c0		      .byte.b	#192
   2940  ff96
   2941  ff96				   CarIdToTimeoverBreakInterval 		; Glide
   2942  ff96		       03		      .byte.b	#%00000011	;Every 4 frames
   2943  ff97		       03		      .byte.b	#%00000011	;Every 4 frames
   2944  ff98		       0f		      .byte.b	#%00001111	;Every 16 frames
   2945  ff99		       03		      .byte.b	#%00000011	;Every 4 frames
   2946  ff9a
   2947  ff9a				   CarIdToMaxSpeedL
   2948  ff9a		       80		      .byte.b	#$80
   2949  ff9b		       00		      .byte.b	#$00	; One less gear
   2950  ff9c		       80		      .byte.b	#$80
   2951  ff9d		       80		      .byte.b	#$80
   2952  ff9e
   2953  ff9e				   CarIdToMaxGear
   2954  ff9e		       05		      .byte.b	#5
   2955  ff9f		       04		      .byte.b	#4	; One less gear
   2956  ffa0		       05		      .byte.b	#5
   2957  ffa1		       05		      .byte.b	#5
   2958  ffa2
   2959  ffa2				   GearToBreakSpeedTable
   2960  ffa2		       09		      .byte.b	#(BREAK_SPEED - 1)
   2961  ffa3		       09		      .byte.b	#(BREAK_SPEED - 1)
   2962  ffa4		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2963  ffa5		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2964  ffa6		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2965  ffa7		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2966  ffa8
   2967  ffa8				   TrafficColorTable
   2968  ffa8		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2969  ffa9		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2970  ffaa		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2971  ffab		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2972  ffac
   2973  ffac				   TrafficChanceTable
   2974  ffac		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2975  ffad		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2976  ffae		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2977  ffaf		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2978  ffb0
   2979  ffb0				   TrafficTimeTable
   2980  ffb0		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2981  ffb1		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2982  ffb2		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2983  ffb3		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2984  ffb4		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2985  ffb5
   2986  ffb5
   2987  fffc					      org	$FFFC
   2988  fffc		       00 f0		      .word.w	BeforeStart
   2989  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
