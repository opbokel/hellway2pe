------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 8c	   FrameCount0 =	$8C	;
    111  f000		       00 8d	   FrameCount1 =	$8D	;
    112  f000
    113  f000		       00 8e	   Player0SpeedL =	$8E
    114  f000		       00 8f	   Player0SpeedH =	$8F
    115  f000
    116  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    117  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    118  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    119  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    120  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    121  f000
    122  f000		       00 a4	   CheckpointBcd0 =	$A4
    123  f000		       00 a5	   CheckpointBcd1 =	$A5
    124  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    125  f000		       00 a7	   CarSpritePointerL =	$A7
    126  f000		       00 a8	   CarSpritePointerH =	$A8
    127  f000		       00 a9	   CurrentCarId =	$A9
    128  f000		       00 aa	   AccelerateBuffer =	$AA	; Change speed on buffer overflow.
    129  f000		       00 ab	   TextSide   =	$AB
    130  f000		       00 ac	   TextFlickerMode =	$AC
    131  f000		       00 ad	   Gear       =	$AD
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000
    139  f000		       00 b4	   ScoreBcd0  =	$B4
    140  f000		       00 b5	   ScoreBcd1  =	$B5
    141  f000		       00 b6	   ScoreBcd2  =	$B6
    142  f000		       00 b7	   ScoreBcd3  =	$B7
    143  f000
    144  f000		       00 b8	   CollisionCounter =	$B8
    145  f000		       00 b9	   Player0X   =	$B9
    146  f000		       00 ba	   CountdownTimer =	$BA
    147  f000		       00 bb	   Traffic0Msb =	$BB
    148  f000		       00 bc	   SwitchDebounceCounter =	$BC
    149  f000
    150  f000		       00 bd	   TimeBcd0   =	$BD
    151  f000		       00 be	   TimeBcd1   =	$BE
    152  f000		       00 bf	   TimeBcd2   =	$BF
    153  f000
    154  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    155  f000		       00 c1	   TrafficChance =	$C1
    156  f000		       00 c2	   CheckpointTime =	$C2
    157  f000		       00 c3	   TrafficColor =	$C3
    158  f000		       00 c4	   CurrentDifficulty =	$C4
    159  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    160  f000							;Bit 2 speed delta, Bit 3 random traffic 
    161  f000
    162  f000
    163  f000		       00 ca	   BorderType =	$CA
    164  f000
    165  f000		       00 cb	   HitCountBcd0 =	$CB
    166  f000		       00 cc	   HitCountBcd1 =	$CC
    167  f000
    168  f000		       00 cd	   GlideTimeBcd0 =	$CD
    169  f000		       00 ce	   GlideTimeBcd1 =	$CE
    170  f000
    171  f000		       00 cf	   OneSecondConter =	$CF
    172  f000
    173  f000		       00 d0	   ScoreD0    =	$D0
    174  f000		       00 d1	   ScoreD1    =	$D1
    175  f000		       00 d2	   ScoreD2    =	$D2
    176  f000		       00 d3	   ScoreD3    =	$D3
    177  f000		       00 d4	   ScoreD4    =	$D4
    178  f000		       00 d5	   ScoreFontColor =	$D5
    179  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    180  f000		       00 d7	   NextCheckpoint =	$D7
    181  f000
    182  f000		       00 d8	   OpponentLine =	$D8
    183  f000
    184  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    185  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    186  f000
    187  f000
    188  f000							;generic start up stuff, put zero in almost all...
    189  f000				   BeforeStart		;All variables that are kept on game reset or select
    190  f000		       a0 00		      LDY	#0
    191  f002		       84 bc		      STY	SwitchDebounceCounter
    192  f004		       84 c4		      STY	CurrentDifficulty
    193  f006		       84 c0		      STY	GameStatus
    194  f008		       a0 10		      LDY	#16
    195  f00a		       84 c5		      STY	GameMode
    196  f00c		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    197  f00e		       84 a9		      STY	CurrentCarId
    198  f010
    199  f010				   Start
    200  f010		       a9 02		      LDA	#2
    201  f012		       85 00		      STA	VSYNC
    202  f014		       85 02		      STA	WSYNC
    203  f016		       85 02		      STA	WSYNC
    204  f018		       85 02		      STA	WSYNC
    205  f01a		       a9 00		      LDA	#0	;2
    206  f01c		       85 00		      STA	VSYNC	;3
    207  f01e
    208  f01e		       78		      SEI
    209  f01f		       d8		      CLD
    210  f020		       a2 ff		      LDX	#$FF
    211  f022		       9a		      TXS
    212  f023
    213  f023		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    214  f025				   CleanMem
    215  f025		       e0 bc		      CPX	#SwitchDebounceCounter
    216  f027		       f0 12		      BEQ	SkipClean
    217  f029		       e0 c5		      CPX	#GameMode
    218  f02b		       f0 0e		      BEQ	SkipClean
    219  f02d		       e0 a9		      CPX	#CurrentCarId
    220  f02f		       f0 0a		      BEQ	SkipClean
    221  f031		       e0 c4		      CPX	#CurrentDifficulty
    222  f033		       f0 06		      BEQ	SkipClean
    223  f035		       e0 c0		      CPX	#GameStatus
    224  f037		       f0 02		      BEQ	SkipClean
    225  f039		       95 00		      STA	0,X
    226  f03b				   SkipClean
    227  f03b		       e8		      INX
    228  f03c		       d0 e7		      BNE	CleanMem
    229  f03e
    230  f03e		       a9 d5		      LDA	#213
    231  f040		       8d 96 02 	      STA	TIM64T	;3	
    232  f043
    233  f043							;Setting some variables...
    234  f043
    235  f043				   SettingTrafficOffsets		; Time sensitive with player H position
    236  f043		       85 02		      STA	WSYNC	;We will set player position
    237  f045		       20 48 f8 	      JSR	DefaultOffsets
    238  f048
    239  f048		       ad bd ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    240  f04b		       85 8e		      STA	Player0SpeedL
    241  f04d
    242  f04d							;SLEEP 11;18
    243  f04d		       85 10		      STA	RESP0
    244  f04f
    245  f04f		       a2 00		      LDX	#0
    246  f051		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    247  f054		       85 a6		      STA	StartSWCHB	; For game over
    248  f056		       29 c0		      AND	#%11000000
    249  f058		       f0 0b		      BEQ	CallConfigureDifficulty
    250  f05a		       e8		      INX
    251  f05b		       c9 80		      CMP	#%10000000
    252  f05d		       f0 06		      BEQ	CallConfigureDifficulty
    253  f05f		       e8		      INX
    254  f060		       c9 40		      CMP	#%01000000
    255  f062		       f0 01		      BEQ	CallConfigureDifficulty
    256  f064		       e8		      INX
    257  f065
    258  f065				   CallConfigureDifficulty
    259  f065		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    260  f067		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    261  f069		       a5 c0		      LDA	GameStatus
    262  f06b		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    263  f06d				   NextCar
    264  f06d		       a4 a9		      LDY	CurrentCarId
    265  f06f		       c8		      INY
    266  f070		       98		      TYA
    267  f071		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    268  f073		       85 a9		      STA	CurrentCarId
    269  f075				   StoreCurrentDifficulty
    270  f075		       86 c4		      STX	CurrentDifficulty
    271  f077		       20 1d f8 	      JSR	ConfigureDifficulty
    272  f07a
    273  f07a				   ConfigureCarSprite
    274  f07a		       a4 a9		      LDY	CurrentCarId
    275  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressL,Y
    276  f07f		       85 a7		      STA	CarSpritePointerL
    277  f081		       b9 cd ff 	      LDA	CarIdToSpriteAddressH,Y
    278  f084		       85 a8		      STA	CarSpritePointerH
    279  f086
    280  f086				   ConfigureEnemyCarSprite
    281  f086		       a4 a9		      LDY	CurrentCarId
    282  f088		       b9 d1 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
    283  f08b		       85 d9		      STA	EnemyCarSpritePointerL
    284  f08d		       b9 d5 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
    285  f090		       85 da		      STA	EnemyCarSpritePointerH
    286  f092
    287  f092				   SetGameNotRunning
    288  f092		       a9 00		      LDA	#0
    289  f094		       85 c0		      STA	GameStatus
    290  f096
    291  f096				   ConfigureOneSecondTimer
    292  f096		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    293  f098		       85 cf		      STA	OneSecondConter
    294  f09a
    295  f09a				   ConfigureTimer
    296  f09a		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    297  f09c		       85 ba		      STA	CountdownTimer	;3
    298  f09e
    299  f09e				   HPositioning 		; Avoid sleep doing needed stuff
    300  f09e		       85 02		      STA	WSYNC
    301  f0a0
    302  f0a0				   ConfigurePlayerXPosition
    303  f0a0		       a9 35		      LDA	#PLAYER_0_X_START	;2
    304  f0a2		       85 b9		      STA	Player0X	;3
    305  f0a4
    306  f0a4				   ConfigureMissileSize
    307  f0a4		       a9 30		      LDA	#%00110000	;2 Missile Size
    308  f0a6		       85 04		      STA	NUSIZ0	;3
    309  f0a8		       85 05		      STA	NUSIZ1	;3
    310  f0aa
    311  f0aa				   ConfigureNextCheckpoint
    312  f0aa		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    313  f0ac		       85 d7		      STA	NextCheckpoint
    314  f0ae
    315  f0ae		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0b0					      SLEEP	5	;
      1  f0b0				   .CYCLES    SET	5
      2  f0b0
      3  f0b0				  -	      IF	.CYCLES < 2
      4  f0b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b0				  -	      ERR
      6  f0b0					      ENDIF
      7  f0b0
      8  f0b0					      IF	.CYCLES & 1
      9  f0b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b0				  -	      nop	0
     11  f0b0					      ELSE
     12  f0b0		       24 00		      bit	VSYNC
     13  f0b2					      ENDIF
     14  f0b2				   .CYCLES    SET	.CYCLES - 3
     15  f0b2					      ENDIF
     16  f0b2
     17  f0b2					      REPEAT	.CYCLES / 2
     18  f0b2		       ea		      nop
     19  f0b3					      REPEND
    317  f0b3		       85 14		      STA	RESBL
      0  f0b5					      SLEEP	2	;
      1  f0b5				   .CYCLES    SET	2
      2  f0b5
      3  f0b5				  -	      IF	.CYCLES < 2
      4  f0b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b5				  -	      ERR
      6  f0b5					      ENDIF
      7  f0b5
      8  f0b5				  -	      IF	.CYCLES & 1
      9  f0b5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b5				  -	      nop	0
     11  f0b5				  -	      ELSE
     12  f0b5				  -	      bit	VSYNC
     13  f0b5				  -	      ENDIF
     14  f0b5				  -.CYCLES    SET	.CYCLES - 3
     15  f0b5					      ENDIF
     16  f0b5
     17  f0b5					      REPEAT	.CYCLES / 2
     18  f0b5		       ea		      nop
     19  f0b6					      REPEND
    319  f0b6		       85 12		      STA	RESM0
      0  f0b8					      SLEEP	2
      1  f0b8				   .CYCLES    SET	2
      2  f0b8
      3  f0b8				  -	      IF	.CYCLES < 2
      4  f0b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b8				  -	      ERR
      6  f0b8					      ENDIF
      7  f0b8
      8  f0b8				  -	      IF	.CYCLES & 1
      9  f0b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b8				  -	      nop	0
     11  f0b8				  -	      ELSE
     12  f0b8				  -	      bit	VSYNC
     13  f0b8				  -	      ENDIF
     14  f0b8				  -.CYCLES    SET	.CYCLES - 3
     15  f0b8					      ENDIF
     16  f0b8
     17  f0b8					      REPEAT	.CYCLES / 2
     18  f0b8		       ea		      nop
     19  f0b9					      REPEND
    321  f0b9		       85 13		      STA	RESM1
    322  f0bb		       85 11		      STA	RESP1
    323  f0bd
    324  f0bd		       a9 f0		      LDA	#$F0
    325  f0bf		       85 24		      STA	HMBL
    326  f0c1		       85 22		      STA	HMM0
    327  f0c3		       85 23		      STA	HMM1
    328  f0c5		       85 02		      STA	WSYNC
    329  f0c7		       85 2a		      STA	HMOVE
    330  f0c9		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    331  f0cb		       85 2b		      STA	HMCLR
    332  f0cd
    333  f0cd				   WaitResetToEnd
    334  f0cd		       ad 84 02 	      LDA	INTIM
    335  f0d0		       d0 fb		      BNE	WaitResetToEnd
    336  f0d2
    337  f0d2				   MainLoop
    338  f0d2		       a9 02		      LDA	#2
    339  f0d4		       85 00		      STA	VSYNC
    340  f0d6		       85 02		      STA	WSYNC
    341  f0d8		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    342  f0da				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    343  f0da		       a9 01		      LDA	#%00000001
    344  f0dc		       24 ac		      BIT	TextFlickerMode
    345  f0de		       f0 05		      BEQ	TextSideFrameZero
    346  f0e0		       25 8d		      AND	FrameCount1
    347  f0e2		       4c e7 f0 	      JMP	StoreTextSize
    348  f0e5				   TextSideFrameZero
    349  f0e5		       25 8c		      AND	FrameCount0
    350  f0e7				   StoreTextSize
    351  f0e7		       85 ab		      STA	TextSide
    352  f0e9		       85 02		      STA	WSYNC
    353  f0eb							;STA HMOVE			
    354  f0eb		       85 2b		      STA	HMCLR
    355  f0ed
    356  f0ed							; SetHMove
    357  f0ed							;     LDA FrameCount0 ;3
    358  f0ed							;	AND #%00000001 ;2
    359  f0ed							;     BEQ MoveAllRight
    360  f0ed							; MoveAllLeft
    361  f0ed							;     LDA #$70
    362  f0ed							;     JMP StoreMoveAllValues
    363  f0ed							; MoveAllRight
    364  f0ed							;     LDA #$90
    365  f0ed
    366  f0ed							; StoreMoveAllValues
    367  f0ed							;     STA HMBL
    368  f0ed							;	STA HMM0
    369  f0ed							;	STA HMM1
    370  f0ed							; STA HMP0
    371  f0ed							; STA HMP1
    372  f0ed
    373  f0ed				   ConfigVBlankTimer
    374  f0ed		       a5 c5		      LDA	GameMode
    375  f0ef		       c9 10		      CMP	#MAX_GAME_MODE
    376  f0f1		       f0 05		      BEQ	SetVblankTimerQrCode
    377  f0f3		       a9 29		      LDA	#VBLANK_TIMER
    378  f0f5		       4c fa f0 	      JMP	SetVblankTimer
    379  f0f8				   SetVblankTimerQrCode
    380  f0f8		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    381  f0fa
    382  f0fa				   SetVblankTimer
    383  f0fa		       85 02		      STA	WSYNC	;3
    384  f0fc		       8d 96 02 	      STA	TIM64T	;3	
    385  f0ff		       a9 00		      LDA	#0	;2
    386  f101		       85 00		      STA	VSYNC	;3	
    387  f103
    388  f103				   RandomizeGame
    389  f103		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    390  f105		       d0 30		      BNE	EndRandomizeGame
    391  f107		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    392  f109		       29 02		      AND	#%00000010
    393  f10b		       f0 27		      BEQ	DeterministicGame
    394  f10d		       a6 96		      LDX	TrafficOffset1 + 2
    395  f10f		       bd 00 fe 	      LDA	AesTable,X
    396  f112		       45 8c		      EOR	FrameCount0
    397  f114		       85 96		      STA	TrafficOffset1 + 2
    398  f116		       a6 9a		      LDX	TrafficOffset2 + 2
    399  f118		       bd 00 fe 	      LDA	AesTable,X
    400  f11b		       45 8c		      EOR	FrameCount0
    401  f11d		       85 9a		      STA	TrafficOffset2 + 2
    402  f11f		       a6 9e		      LDX	TrafficOffset3 + 2
    403  f121		       bd 00 fe 	      LDA	AesTable,X
    404  f124		       45 8c		      EOR	FrameCount0
    405  f126		       85 9e		      STA	TrafficOffset3 + 2
    406  f128		       a6 a2		      LDX	TrafficOffset4 + 2
    407  f12a		       bd 00 fe 	      LDA	AesTable,X
    408  f12d		       45 8c		      EOR	FrameCount0
    409  f12f		       85 a2		      STA	TrafficOffset4 + 2
    410  f131		       4c 37 f1 	      JMP	EndRandomizeGame
    411  f134
    412  f134				   DeterministicGame
    413  f134		       20 48 f8 	      JSR	DefaultOffsets
    414  f137
    415  f137				   EndRandomizeGame
    416  f137
    417  f137				   CountFrame
    418  f137		       e6 8c		      INC	FrameCount0	; 5
    419  f139		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    420  f13b		       e6 8d		      INC	FrameCount1	; 5 
    421  f13d				   SkipIncFC1
    422  f13d
    423  f13d				   CallDrawQrCode
    424  f13d		       a5 c5		      LDA	GameMode
    425  f13f		       c9 10		      CMP	#MAX_GAME_MODE
    426  f141		       d0 03		      BNE	TestIsGameRunning
    427  f143		       4c 64 fc 	      JMP	DrawQrCode
    428  f146
    429  f146							;Does not update the game if not running
    430  f146				   TestIsGameRunning
    431  f146		       a5 c0		      LDA	GameStatus	;3
    432  f148		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    433  f14a		       4c 12 f3 	      JMP	SkipUpdateLogic
    434  f14d				   ContinueWithGameLogic
    435  f14d
    436  f14d				   EverySecond		; 64 frames to be more precise
    437  f14d		       a9 3f		      LDA	#%00111111
    438  f14f		       25 8c		      AND	FrameCount0
    439  f151		       d0 06		      BNE	SkipEverySecondAction
    440  f153		       c5 ba		      CMP	CountdownTimer
    441  f155		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    442  f157		       c6 ba		      DEC	CountdownTimer
    443  f159				   SkipEverySecondAction
    444  f159
    445  f159				   ChangeTextFlickerMode
    446  f159		       a5 bc		      LDA	SwitchDebounceCounter
    447  f15b		       d0 0d		      BNE	EndChangeTextFlickerMode
    448  f15d		       ad 82 02 	      LDA	SWCHB
    449  f160		       29 02		      AND	#%00000010	;Game select
    450  f162		       d0 06		      BNE	EndChangeTextFlickerMode
    451  f164		       e6 ac		      INC	TextFlickerMode
    452  f166		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    453  f168		       85 bc		      STA	SwitchDebounceCounter
    454  f16a				   EndChangeTextFlickerMode
    455  f16a
    456  f16a				   BreakOnTimeOver		; Uses LDX as the breaking speed
    457  f16a		       a2 00		      LDX	#0
    458  f16c		       a5 ba		      LDA	CountdownTimer
    459  f16e		       d0 0b		      BNE	Break
    460  f170		       a4 a9		      LDY	CurrentCarId
    461  f172		       a5 8c		      LDA	FrameCount0
    462  f174		       39 dd ff 	      AND	CarIdToTimeoverBreakInterval,Y
    463  f177		       d0 02		      BNE	Break
    464  f179		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    465  f17b
    466  f17b				   Break
    467  f17b		       a9 20		      LDA	#%00100000	;Down in controller
    468  f17d		       2c 80 02 	      BIT	SWCHA
    469  f180		       d0 0e		      BNE	BreakNonZero
    470  f182		       a5 0c		      LDA	INPT4	;3
    471  f184		       10 08		      BPL	BreakWhileAccelerating
    472  f186		       a4 ad		      LDY	Gear
    473  f188		       be e9 ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    474  f18b		       4c 90 f1 	      JMP	BreakNonZero
    475  f18e				   BreakWhileAccelerating		; Allow better control while breaking.
    476  f18e		       a2 05		      LDX	(#BREAK_SPEED / 2)
    477  f190
    478  f190				   BreakNonZero
    479  f190		       e0 00		      CPX	#0
    480  f192		       f0 2b		      BEQ	SkipBreak
    481  f194		       86 b0		      STX	Tmp0
    482  f196
    483  f196				   DecreaseSpeed
    484  f196		       38		      SEC
    485  f197		       a5 8e		      LDA	Player0SpeedL
    486  f199		       e5 b0		      SBC	Tmp0
    487  f19b		       85 8e		      STA	Player0SpeedL
    488  f19d		       a5 8f		      LDA	Player0SpeedH
    489  f19f		       e9 00		      SBC	#0
    490  f1a1		       85 8f		      STA	Player0SpeedH
    491  f1a3
    492  f1a3				   CheckMinSpeed
    493  f1a3		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    494  f1a5		       c9 00		      CMP	#CAR_MIN_SPEED_H
    495  f1a7		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    496  f1a9		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    497  f1ab
    498  f1ab				   CompareLBreakSpeed
    499  f1ab		       a5 8e		      LDA	Player0SpeedL
    500  f1ad		       c9 00		      CMP	#CAR_MIN_SPEED_L
    501  f1af		       90 03		      BCC	ResetMinSpeed	; Less than memory
    502  f1b1		       4c bc f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    503  f1b4
    504  f1b4				   ResetMinSpeed
    505  f1b4		       a9 00		      LDA	#CAR_MIN_SPEED_H
    506  f1b6		       85 8f		      STA	Player0SpeedH
    507  f1b8		       a9 00		      LDA	#CAR_MIN_SPEED_L
    508  f1ba		       85 8e		      STA	Player0SpeedL
    509  f1bc
    510  f1bc				   SkipAccelerateIfBreaking
    511  f1bc		       4c 01 f2 	      JMP	SkipAccelerate
    512  f1bf				   SkipBreak
    513  f1bf
    514  f1bf				   Acelerates
    515  f1bf		       a5 ba		      LDA	CountdownTimer
    516  f1c1		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    517  f1c3
    518  f1c3				   ContinueAccelerateTest
    519  f1c3		       a5 0c		      LDA	INPT4	;3
    520  f1c5		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    521  f1c7		       a9 10		      LDA	#%00010000	;UP in controller
    522  f1c9		       2c 80 02 	      BIT	SWCHA
    523  f1cc		       d0 33		      BNE	SkipAccelerate
    524  f1ce
    525  f1ce				   IncreaseCarSpeed
    526  f1ce		       a2 02		      LDX	#2
    527  f1d0		       a4 a9		      LDY	CurrentCarId
    528  f1d2				   IncreaseCarSpeedLoop
    529  f1d2							;Adds speed
    530  f1d2		       18		      CLC
    531  f1d3		       a5 aa		      LDA	AccelerateBuffer
    532  f1d5		       79 d9 ff 	      ADC	CarIdToAccelerateSpeed,Y
    533  f1d8		       85 aa		      STA	AccelerateBuffer
    534  f1da		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    535  f1dc		       e6 8e		      INC	Player0SpeedL
    536  f1de		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    537  f1e0		       e6 8f		      INC	Player0SpeedH
    538  f1e2				   ContinueIncreaseSpeedLoop
    539  f1e2		       ca		      DEX
    540  f1e3		       d0 ed		      BNE	IncreaseCarSpeedLoop
    541  f1e5				   SkipIncreaseCarSpeed
    542  f1e5
    543  f1e5				   CheckIfAlreadyMaxSpeed
    544  f1e5		       a5 8f		      LDA	Player0SpeedH
    545  f1e7		       c9 02		      CMP	#CAR_MAX_SPEED_H
    546  f1e9		       90 16		      BCC	SkipAccelerate	; less than my max speed
    547  f1eb		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    548  f1ed							;High bit is max, compare the low
    549  f1ed		       a4 a9		      LDY	CurrentCarId
    550  f1ef		       a5 8e		      LDA	Player0SpeedL
    551  f1f1		       d9 e1 ff 	      CMP	CarIdToMaxSpeedL,Y
    552  f1f4		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    553  f1f6							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    554  f1f6
    555  f1f6				   ResetToMaxSpeed		; Speed is more, or is already max
    556  f1f6		       a9 02		      LDA	#CAR_MAX_SPEED_H
    557  f1f8		       85 8f		      STA	Player0SpeedH
    558  f1fa		       a4 a9		      LDY	CurrentCarId
    559  f1fc		       b9 e1 ff 	      LDA	CarIdToMaxSpeedL,Y
    560  f1ff		       85 8e		      STA	Player0SpeedL
    561  f201				   SkipAccelerate
    562  f201
    563  f201				   InitUpdateOffsets
    564  f201		       a2 00		      LDX	#0	; Memory Offset 24 bit
    565  f203		       a0 00		      LDY	#0	; Line Speeds 16 bits
    566  f205		       a5 91		      LDA	TrafficOffset0 + 1	;
    567  f207		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    568  f209		       a5 c5		      LDA	GameMode
    569  f20b		       29 04		      AND	#%00000100	; GameModes with high delta
    570  f20d		       f0 02		      BEQ	UpdateOffsets
    571  f20f		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    572  f211
    573  f211				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    574  f211		       38		      SEC
    575  f212		       a5 8e		      LDA	Player0SpeedL
    576  f214		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    577  f217		       85 b0		      STA	Tmp0
    578  f219		       c8		      INY
    579  f21a		       a5 8f		      LDA	Player0SpeedH
    580  f21c		       f9 b5 ff 	      SBC	TrafficSpeeds,Y
    581  f21f		       85 b1		      STA	Tmp1
    582  f221		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    583  f223		       e9 00		      SBC	#0
    584  f225		       85 b2		      STA	Tmp2
    585  f227
    586  f227				   AddsTheResult
    587  f227		       18		      CLC
    588  f228		       a5 b0		      LDA	Tmp0
    589  f22a		       75 90		      ADC	TrafficOffset0,X
    590  f22c		       95 90		      STA	TrafficOffset0,X
    591  f22e		       e8		      INX
    592  f22f		       a5 b1		      LDA	Tmp1
    593  f231		       75 90		      ADC	TrafficOffset0,X
    594  f233		       95 90		      STA	TrafficOffset0,X
    595  f235		       e8		      INX
    596  f236		       a5 b2		      LDA	Tmp2	; Carry
    597  f238		       75 90		      ADC	TrafficOffset0,X
    598  f23a		       95 90		      STA	TrafficOffset0,X
    599  f23c		       90 06		      BCC	CalculateOffsetCache
    600  f23e		       e0 02		      CPX	#2	;MSB offset 0
    601  f240		       d0 02		      BNE	CalculateOffsetCache
    602  f242		       e6 bb		      INC	Traffic0Msb
    603  f244
    604  f244				   CalculateOffsetCache
    605  f244		       e8		      INX
    606  f245		       38		      SEC
    607  f246		       69 00		      ADC	#0	;Increment by one
    608  f248		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    609  f24a
    610  f24a				   ConfigureOpponentLine		; Temporary
    611  f24a		       a9 37		      LDA	#55	; Extract to constant
    612  f24c		       85 d8		      STA	OpponentLine
    613  f24e
    614  f24e				   PrepareNextUpdateLoop
    615  f24e		       c8		      INY
    616  f24f		       e8		      INX
    617  f250		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    618  f252		       d0 bd		      BNE	UpdateOffsets
    619  f254
    620  f254				   BcdScore		; 48
    621  f254		       a5 91		      LDA	TrafficOffset0 + 1	;3
    622  f256		       45 b3		      EOR	Tmp3	;3
    623  f258		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    624  f25a		       f0 1b		      BEQ	FinishBcdScore	;2
    625  f25c
    626  f25c				   ContinueBcdScore
    627  f25c		       f8		      SED		;2
    628  f25d		       18		      CLC		;2
    629  f25e		       a5 b4		      LDA	ScoreBcd0	;3
    630  f260		       69 01		      ADC	#1	;2
    631  f262		       85 b4		      STA	ScoreBcd0	;3
    632  f264		       a5 b5		      LDA	ScoreBcd1	;3
    633  f266		       69 00		      ADC	#0	;2
    634  f268		       85 b5		      STA	ScoreBcd1	;3
    635  f26a		       a5 b6		      LDA	ScoreBcd2	;3
    636  f26c		       69 00		      ADC	#0	;2
    637  f26e		       85 b6		      STA	ScoreBcd2	;3
    638  f270		       a5 b7		      LDA	ScoreBcd3	;3
    639  f272		       69 00		      ADC	#0	;2
    640  f274		       85 b7		      STA	ScoreBcd3	;3
    641  f276		       d8		      CLD		;2
    642  f277				   FinishBcdScore
    643  f277
    644  f277							;Until store the movemnt, LDX contains the value to be stored.
    645  f277				   TestCollision		;
    646  f277							; see if player0 colides with the rest
    647  f277		       a5 00		      LDA	CXM0P
    648  f279		       05 01		      ORA	CXM1P
    649  f27b		       05 01		      ORA	CXM1P
    650  f27d		       05 02		      ORA	CXP0FB
    651  f27f		       05 07		      ORA	CXPPMM
    652  f281		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    653  f283		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    654  f285		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    655  f287		       d0 3a		      BNE	NoCollision
    656  f289		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    657  f28b		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    658  f28d		       f0 34		      BEQ	NoCollision
    659  f28f		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    660  f291		       f0 30		      BEQ	NoCollision
    661  f293		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    662  f295		       85 b8		      STA	CollisionCounter	;and store as colision.
    663  f297				   CountBcdColision
    664  f297		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    665  f299		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    666  f29b		       f0 1d		      BEQ	SkipSetColisionSpeedL
    667  f29d		       f8		      SED		;2
    668  f29e		       18		      CLC		;2
    669  f29f		       a5 cb		      LDA	HitCountBcd0	;3
    670  f2a1		       69 01		      ADC	#1	;3
    671  f2a3		       85 cb		      STA	HitCountBcd0	;3
    672  f2a5		       a5 cc		      LDA	HitCountBcd1	;3
    673  f2a7		       69 00		      ADC	#0	;2
    674  f2a9		       85 cc		      STA	HitCountBcd1	;3
    675  f2ab		       d8		      CLD		;2
    676  f2ac				   EndCountBcdColision
    677  f2ac		       a5 8f		      LDA	Player0SpeedH
    678  f2ae		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    679  f2b0		       a9 10		      LDA	#COLLISION_SPEED_L
    680  f2b2		       c5 8e		      CMP	Player0SpeedL
    681  f2b4		       b0 04		      BCS	SkipSetColisionSpeedL
    682  f2b6				   SetColisionSpeedL
    683  f2b6		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    684  f2b8		       85 8e		      STA	Player0SpeedL
    685  f2ba				   SkipSetColisionSpeedL
    686  f2ba		       a9 00		      LDA	#0
    687  f2bc		       85 8f		      STA	Player0SpeedH
    688  f2be		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    689  f2c0		       4c 0e f3 	      JMP	StoreHMove	; We keep position consistent
    690  f2c3				   NoCollision
    691  f2c3
    692  f2c3				   DecrementCollision
    693  f2c3		       a4 b8		      LDY	CollisionCounter
    694  f2c5		       f0 07		      BEQ	FinishDecrementCollision
    695  f2c7		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    696  f2c9		       85 04		      STA	NUSIZ0
    697  f2cb		       88		      DEY
    698  f2cc		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    699  f2ce				   FinishDecrementCollision
    700  f2ce
    701  f2ce				   ResetPlayerSize
    702  f2ce		       d0 04		      BNE	FinishResetPlayerSize
    703  f2d0		       a9 30		      LDA	#%00110000
    704  f2d2		       85 04		      STA	NUSIZ0	;
    705  f2d4				   FinishResetPlayerSize
    706  f2d4
    707  f2d4							;STA HMCLR ; Do not double move car.
    708  f2d4
    709  f2d4				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    710  f2d4		       c0 01		      CPY	#1	; Last frame before reset
    711  f2d6		       d0 05		      BNE	SkipResetPlayerPosition
    712  f2d8		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    713  f2da		       4c 0e f3 	      JMP	StoreHMove
    714  f2dd				   SkipResetPlayerPosition
    715  f2dd
    716  f2dd				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    717  f2dd		       a5 a9		      LDA	CurrentCarId
    718  f2df		       c9 03		      CMP	#CAR_ID_DRAGSTER
    719  f2e1		       d0 08		      BNE	PrepareReadXAxis
    720  f2e3		       a2 00		      LDX	#0
    721  f2e5		       a5 8c		      LDA	FrameCount0
    722  f2e7		       29 01		      AND	#DRAGSTER_TURN_MASK
    723  f2e9		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    724  f2eb
    725  f2eb							; for left and right, we're gonna 
    726  f2eb							; set the horizontal speed, and then do
    727  f2eb							; a single HMOVE.  We'll use X to hold the
    728  f2eb							; horizontal speed, then store it in the 
    729  f2eb							; appropriate register
    730  f2eb				   PrepareReadXAxis
    731  f2eb		       a2 00		      LDX	#0
    732  f2ed		       a4 b9		      LDY	Player0X
    733  f2ef				   BeginReadLeft
    734  f2ef		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    735  f2f1		       a9 40		      LDA	#%01000000	;Left
    736  f2f3		       2c 80 02 	      BIT	SWCHA
    737  f2f6		       d0 07		      BNE	SkipMoveLeft
    738  f2f8		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    739  f2fa		       c6 b9		      DEC	Player0X
    740  f2fc		       4c 0e f3 	      JMP	StoreHMove	; Cannot move left and right...
    741  f2ff				   SkipMoveLeft
    742  f2ff				   BeginReadRight
    743  f2ff		       c0 36		      CPY	#PLAYER_0_MAX_X
    744  f301		       f0 0b		      BEQ	SkipMoveRight	; At max already
    745  f303		       a9 80		      LDA	#%10000000	;Right
    746  f305		       2c 80 02 	      BIT	SWCHA
    747  f308		       d0 04		      BNE	SkipMoveRight
    748  f30a		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    749  f30c		       e6 b9		      INC	Player0X
    750  f30e				   SkipMoveRight
    751  f30e				   StoreHMove
    752  f30e		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    753  f310		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    754  f312
    755  f312				   SkipUpdateLogic		; Continue here if not paused
    756  f312
    757  f312				   CalculateGear
    758  f312		       a5 8e		      LDA	Player0SpeedL	;3
    759  f314		       29 80		      AND	#%10000000	;2
    760  f316		       05 8f		      ORA	Player0SpeedH	;3
    761  f318		       18		      CLC		;2
    762  f319		       2a		      ROL		;2
    763  f31a		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    764  f31c		       85 ad		      STA	Gear
    765  f31e
    766  f31e				   EndProcessingBorder
    767  f31e
    768  f31e				   ProcessScoreFontColor
    769  f31e		       a6 d6		      LDX	ScoreFontColorHoldChange
    770  f320		       f0 06		      BEQ	ResetScoreFontColor
    771  f322		       ca		      DEX
    772  f323		       86 d6		      STX	ScoreFontColorHoldChange
    773  f325		       4c 2c f3 	      JMP	SkipScoreFontColor
    774  f328				   ResetScoreFontColor
    775  f328		       a9 f9		      LDA	#SCORE_FONT_COLOR
    776  f32a		       85 d5		      STA	ScoreFontColor
    777  f32c				   SkipScoreFontColor
    778  f32c
    779  f32c				   IsGameOver
    780  f32c		       a5 ba		      LDA	CountdownTimer
    781  f32e		       05 8e		      ORA	Player0SpeedL
    782  f330		       05 8f		      ORA	Player0SpeedH
    783  f332		       d0 0b		      BNE	IsCheckpoint
    784  f334		       a9 01		      LDA	#1
    785  f336		       85 d6		      STA	ScoreFontColorHoldChange
    786  f338		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    787  f33a		       85 d5		      STA	ScoreFontColor
    788  f33c		       4c 80 f3 	      JMP	SkipIsTimeOver
    789  f33f
    790  f33f				   IsCheckpoint
    791  f33f		       a5 d7		      LDA	NextCheckpoint
    792  f341		       c5 92		      CMP	TrafficOffset0 + 2
    793  f343		       d0 2f		      BNE	SkipIsCheckpoint
    794  f345		       18		      CLC
    795  f346		       69 10		      ADC	#CHECKPOINT_INTERVAL
    796  f348		       85 d7		      STA	NextCheckpoint
    797  f34a		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    798  f34c		       85 d5		      STA	ScoreFontColor
    799  f34e		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    800  f350		       85 d6		      STA	ScoreFontColorHoldChange
    801  f352				   AddCheckpointBcd
    802  f352		       f8		      SED		;2
    803  f353		       18		      CLC		;2
    804  f354		       a5 a4		      LDA	CheckpointBcd0	;3
    805  f356		       69 01		      ADC	#1	;3
    806  f358		       85 a4		      STA	CheckpointBcd0	;3
    807  f35a		       a5 a5		      LDA	CheckpointBcd1	;3
    808  f35c		       69 00		      ADC	#0	;2
    809  f35e		       85 a5		      STA	CheckpointBcd1	;3
    810  f360		       d8		      CLD		;2
    811  f361				   EndCheckpointBcd
    812  f361		       a5 ba		      LDA	CountdownTimer
    813  f363		       18		      CLC
    814  f364		       65 c2		      ADC	CheckpointTime
    815  f366		       85 ba		      STA	CountdownTimer
    816  f368		       90 04		      BCC	JumpSkipTimeOver
    817  f36a		       a9 ff		      LDA	#$FF
    818  f36c		       85 ba		      STA	CountdownTimer	; Does not overflow!
    819  f36e				   JumpSkipTimeOver
    820  f36e		       20 0e f8 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    821  f371		       4c 80 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    822  f374				   SkipIsCheckpoint
    823  f374
    824  f374				   IsTimeOver
    825  f374		       a5 ba		      LDA	CountdownTimer
    826  f376		       d0 08		      BNE	SkipIsTimeOver
    827  f378		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    828  f37a		       85 d6		      STA	ScoreFontColorHoldChange
    829  f37c		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    830  f37e		       85 d5		      STA	ScoreFontColor
    831  f380				   SkipIsTimeOver
    832  f380
    833  f380				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
    834  f380		       a5 c0		      LDA	GameStatus	;3
    835  f382		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
    836  f384		       a5 d5		      LDA	ScoreFontColor	;3
    837  f386		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
    838  f388		       f0 30		      BEQ	EndExactlyEverySecond	;2
    839  f38a		       c6 cf		      DEC	OneSecondConter	;5
    840  f38c		       d0 2c		      BNE	EndExactlyEverySecond	;2
    841  f38e
    842  f38e		       f8		      SED		;2 BCD Operations after this point
    843  f38f				   CountGlideTimeBcd
    844  f38f		       a5 d5		      LDA	ScoreFontColor	;3
    845  f391		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
    846  f393		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
    847  f395		       18		      CLC		;2
    848  f396		       a5 cd		      LDA	GlideTimeBcd0	;3
    849  f398		       69 01		      ADC	#1	;3
    850  f39a		       85 cd		      STA	GlideTimeBcd0	;3
    851  f39c		       a5 ce		      LDA	GlideTimeBcd1	;3
    852  f39e		       69 00		      ADC	#0	;2
    853  f3a0		       85 ce		      STA	GlideTimeBcd1	;3
    854  f3a2				   EndCountGlideTimeBcd
    855  f3a2				   IncreaseTotalTimerBcd
    856  f3a2		       18		      CLC		;2
    857  f3a3		       a5 bd		      LDA	TimeBcd0	;3
    858  f3a5		       69 01		      ADC	#1	;2
    859  f3a7		       85 bd		      STA	TimeBcd0	;3
    860  f3a9		       a5 be		      LDA	TimeBcd1	;3
    861  f3ab		       69 00		      ADC	#0	;2
    862  f3ad		       85 be		      STA	TimeBcd1	;3
    863  f3af		       a5 bf		      LDA	TimeBcd2	;3
    864  f3b1		       69 00		      ADC	#0	;2
    865  f3b3		       85 bf		      STA	TimeBcd2	;3
    866  f3b5
    867  f3b5				   ResetOneSecondCounter
    868  f3b5		       d8		      CLD		;2
    869  f3b6		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
    870  f3b8		       85 cf		      STA	OneSecondConter	;3
    871  f3ba
    872  f3ba				   EndExactlyEverySecond
    873  f3ba
    874  f3ba				   PrintEasterEggCondition
    875  f3ba		       a5 8d		      LDA	FrameCount1
    876  f3bc		       29 38		      AND	#%00111000
    877  f3be		       05 c0		      ORA	GameStatus
    878  f3c0		       c9 38		      CMP	#%00111000
    879  f3c2		       d0 06		      BNE	ChooseTextSide
    880  f3c4		       20 79 f8 	      JSR	PrintEasterEgg
    881  f3c7		       4c b9 f4 	      JMP	RightScoreWriteEnd
    882  f3ca
    883  f3ca							;Could be done during on vblank to save this comparisson time (before draw score), 
    884  f3ca							;but I am saving vblank cycles for now, in case of 2 players.
    885  f3ca				   ChooseTextSide		; 
    886  f3ca		       a5 ab		      LDA	TextSide	;3
    887  f3cc		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    888  f3ce		       4c 4f f4 	      JMP	RightScoreWrite
    889  f3d1
    890  f3d1				   LeftScoreWrite
    891  f3d1		       a5 d5		      LDA	ScoreFontColor
    892  f3d3		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    893  f3d5		       f0 4e		      BEQ	PrintCheckpoint
    894  f3d7		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    895  f3d9		       f0 52		      BEQ	PrintStartGame
    896  f3db		       a5 c0		      LDA	GameStatus
    897  f3dd		       f0 56		      BEQ	PrintHellwayLeft
    898  f3df				   WriteDistance		;Not optimized yet, ugly code.
    899  f3df				   Digit0Distance
    900  f3df		       a5 91		      LDA	TrafficOffset0 + 1	;3
    901  f3e1		       4a		      LSR		; 2
    902  f3e2		       4a		      LSR		; 2
    903  f3e3		       4a		      LSR		; 2
    904  f3e4		       4a		      LSR		; 2
    905  f3e5		       aa		      TAX		; 2
    906  f3e6		       bd be fd 	      LDA	FontLookup,X	;4
    907  f3e9		       85 d3		      STA	ScoreD3	;3
    908  f3eb
    909  f3eb				   Digit1Distance
    910  f3eb		       a5 92		      LDA	TrafficOffset0 + 2	;3
    911  f3ed		       29 0f		      AND	#%00001111	;2
    912  f3ef		       aa		      TAX		; 2
    913  f3f0		       bd be fd 	      LDA	FontLookup,X	;4 
    914  f3f3		       85 d2		      STA	ScoreD2	;3
    915  f3f5
    916  f3f5				   Digit2Distance
    917  f3f5		       a5 92		      LDA	TrafficOffset0 + 2	;3
    918  f3f7		       4a		      LSR		; 2
    919  f3f8		       4a		      LSR		; 2
    920  f3f9		       4a		      LSR		; 2
    921  f3fa		       4a		      LSR		; 2
    922  f3fb		       aa		      TAX		; 2
    923  f3fc		       bd be fd 	      LDA	FontLookup,X	;4
    924  f3ff		       85 d1		      STA	ScoreD1	;3
    925  f401
    926  f401				   Digit3Distance
    927  f401		       a5 bb		      LDA	Traffic0Msb	;3
    928  f403		       29 0f		      AND	#%00001111	;2
    929  f405		       aa		      TAX		; 2
    930  f406		       bd be fd 	      LDA	FontLookup,X	;4 
    931  f409		       85 d0		      STA	ScoreD0	;3
    932  f40b
    933  f40b				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    934  f40b		       a5 bb		      LDA	Traffic0Msb
    935  f40d		       29 f0		      AND	#%11110000	;2
    936  f40f		       d0 07		      BNE	DrawDistanceExtraDigit
    937  f411		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    938  f413		       85 d4		      STA	ScoreD4	;3
    939  f415		       4c 22 f4 	      JMP	EndDrawDistance
    940  f418				   DrawDistanceExtraDigit
    941  f418		       4a		      LSR		; 2
    942  f419		       4a		      LSR		; 2
    943  f41a		       4a		      LSR		; 2
    944  f41b		       4a		      LSR		; 2
    945  f41c		       aa		      TAX		; 2
    946  f41d		       bd be fd 	      LDA	FontLookup,X	;4
    947  f420		       85 d4		      STA	ScoreD4	;3
    948  f422
    949  f422				   EndDrawDistance
    950  f422		       4c b9 f4 	      JMP	RightScoreWriteEnd	;3
    951  f425
    952  f425				   PrintCheckpoint
    953  f425		       a2 00		      LDX	#<CheckpointText
    954  f427		       20 5b f8 	      JSR	PrintStaticText
    955  f42a		       4c b9 f4 	      JMP	RightScoreWriteEnd	;3
    956  f42d				   PrintStartGame
    957  f42d		       a2 23		      LDX	#<GoText
    958  f42f		       20 5b f8 	      JSR	PrintStaticText
    959  f432		       4c b9 f4 	      JMP	RightScoreWriteEnd	;3
    960  f435
    961  f435				   PrintHellwayLeft
    962  f435		       a5 8d		      LDA	FrameCount1
    963  f437		       29 01		      AND	#1
    964  f439		       d0 05		      BNE	PrintCreditsLeft
    965  f43b		       a2 05		      LDX	#<HellwayLeftText
    966  f43d		       4c 42 f4 	      JMP	PrintGameMode
    967  f440				   PrintCreditsLeft
    968  f440		       a2 0f		      LDX	#<OpbText
    969  f442
    970  f442				   PrintGameMode
    971  f442		       20 5b f8 	      JSR	PrintStaticText
    972  f445		       a6 c5		      LDX	GameMode
    973  f447		       bd be fd 	      LDA	FontLookup,X	;4 
    974  f44a		       85 d0		      STA	ScoreD0	;3
    975  f44c		       4c b9 f4 	      JMP	RightScoreWriteEnd	;3
    976  f44f
    977  f44f				   RightScoreWrite
    978  f44f		       a5 c0		      LDA	GameStatus
    979  f451		       f0 45		      BEQ	PrintHellwayRight
    980  f453		       a5 d5		      LDA	ScoreFontColor
    981  f455		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    982  f457		       f0 52		      BEQ	PrintGameOver
    983  f459				   Digit0Timer
    984  f459		       a5 ba		      LDA	CountdownTimer	;3
    985  f45b		       29 0f		      AND	#%00001111	;2
    986  f45d		       aa		      TAX		; 2
    987  f45e		       bd be fd 	      LDA	FontLookup,X	;4 
    988  f461		       85 d1		      STA	ScoreD1	;3
    989  f463
    990  f463				   Digit1Timer
    991  f463		       a5 ba		      LDA	CountdownTimer	;3
    992  f465		       4a		      LSR		; 2
    993  f466		       4a		      LSR		; 2
    994  f467		       4a		      LSR		; 2
    995  f468		       4a		      LSR		; 2
    996  f469		       aa		      TAX		; 2
    997  f46a		       bd be fd 	      LDA	FontLookup,X	;4
    998  f46d		       85 d0		      STA	ScoreD0	;3
    999  f46f
   1000  f46f		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1001  f471		       85 d2		      STA	ScoreD2	;3
   1002  f473
   1003  f473				   Digit0Speed
   1004  f473		       a5 8e		      LDA	Player0SpeedL
   1005  f475		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1006  f477		       4a		      LSR		; 2
   1007  f478		       4a		      LSR		; 2
   1008  f479		       aa		      TAX		; 2
   1009  f47a		       bd be fd 	      LDA	FontLookup,X	;4
   1010  f47d		       85 d4		      STA	ScoreD4	;3
   1011  f47f
   1012  f47f				   Digit1Speed
   1013  f47f		       a5 8e		      LDA	Player0SpeedL
   1014  f481		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1015  f483		       18		      CLC
   1016  f484		       2a		      ROL		;First goes into carry
   1017  f485		       2a		      ROL
   1018  f486		       2a		      ROL
   1019  f487		       85 b0		      STA	Tmp0
   1020  f489		       a5 8f		      LDA	Player0SpeedH
   1021  f48b		       0a		      ASL
   1022  f48c		       0a		      ASL
   1023  f48d		       05 b0		      ORA	Tmp0
   1024  f48f		       aa		      TAX		; 2
   1025  f490		       bd be fd 	      LDA	FontLookup,X	;4
   1026  f493		       85 d3		      STA	ScoreD3	;3
   1027  f495		       4c b9 f4 	      JMP	RightScoreWriteEnd
   1028  f498
   1029  f498				   PrintHellwayRight
   1030  f498		       a5 8d		      LDA	FrameCount1
   1031  f49a		       29 01		      AND	#1
   1032  f49c		       d0 05		      BNE	PrintCreditsRight
   1033  f49e		       a2 0a		      LDX	#<HellwayRightText
   1034  f4a0		       4c a5 f4 	      JMP	PrintRightIntro
   1035  f4a3				   PrintCreditsRight
   1036  f4a3		       a2 14		      LDX	#<YearText
   1037  f4a5				   PrintRightIntro
   1038  f4a5		       20 5b f8 	      JSR	PrintStaticText
   1039  f4a8		       4c b9 f4 	      JMP	RightScoreWriteEnd
   1040  f4ab				   PrintGameOver
   1041  f4ab		       a5 8c		      LDA	FrameCount0
   1042  f4ad		       30 05		      BMI	PrintOverText
   1043  f4af		       a2 19		      LDX	#<GameText
   1044  f4b1		       4c b6 f4 	      JMP	StoreGameOverText
   1045  f4b4				   PrintOverText
   1046  f4b4		       a2 1e		      LDX	#<OverText
   1047  f4b6				   StoreGameOverText
   1048  f4b6		       20 5b f8 	      JSR	PrintStaticText
   1049  f4b9				   RightScoreWriteEnd
   1050  f4b9
   1051  f4b9
   1052  f4b9				   ScoreBackgroundColor
   1053  f4b9		       a2 00		      LDX	#0
   1054  f4bb		       ad 82 02 	      LDA	SWCHB
   1055  f4be		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1056  f4c0		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1057  f4c2		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1058  f4c4		       a2 03		      LDX	#BACKGROUND_COLOR
   1059  f4c6				   BlackAndWhiteScoreBg
   1060  f4c6		       85 b2		      STA	Tmp2	; Score Background
   1061  f4c8		       86 b3		      STX	Tmp3	; Traffic Background
   1062  f4ca
   1063  f4ca				   ConfigurePFForScore
   1064  f4ca							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1065  f4ca		       85 09		      STA	COLUBK
   1066  f4cc		       20 d0 f7 	      JSR	ClearAll
   1067  f4cf		       a9 02		      LDA	#%00000010	; Score mode
   1068  f4d1		       85 0a		      STA	CTRLPF
   1069  f4d3		       a5 ab		      LDA	TextSide	;3
   1070  f4d5		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1071  f4d7				   LeftScoreOn
   1072  f4d7		       a5 d5		      LDA	ScoreFontColor
   1073  f4d9		       85 07		      STA	COLUP1
   1074  f4db		       a5 b2		      LDA	Tmp2
   1075  f4dd		       85 06		      STA	COLUP0
   1076  f4df		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1077  f4e1		       85 b1		      STA	Tmp1
   1078  f4e3		       4c f2 f4 	      JMP	CallWaitForVblankEnd
   1079  f4e6				   RightScoreOn
   1080  f4e6		       a5 d5		      LDA	ScoreFontColor
   1081  f4e8		       85 06		      STA	COLUP0
   1082  f4ea		       a5 b2		      LDA	Tmp2
   1083  f4ec		       85 07		      STA	COLUP1
   1084  f4ee		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1085  f4f0		       85 b1		      STA	Tmp1
   1086  f4f2
   1087  f4f2							; After here we are going to update the screen, No more heavy code
   1088  f4f2				   CallWaitForVblankEnd
   1089  f4f2		       20 e9 fa 	      JSR	WaitForVblankEnd
   1090  f4f5
   1091  f4f5				   DrawScoreHud
   1092  f4f5		       20 eb f8 	      JSR	PrintScore
   1093  f4f8
   1094  f4f8		       85 02		      STA	WSYNC
   1095  f4fa
   1096  f4fa		       a5 0c		      LDA	INPT4	;3
   1097  f4fc		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1098  f4fe		       a5 d5		      LDA	ScoreFontColor
   1099  f500		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1100  f502		       d0 0a		      BNE	WaitAnotherScoreLine
   1101  f504		       a5 ab		      LDA	TextSide	;3
   1102  f506		       d0 03		      BNE	LeftScoreOnGameOver
   1103  f508		       4c 76 fa 	      JMP	DrawGameOverScreenRight
   1104  f50b				   LeftScoreOnGameOver
   1105  f50b		       4c a8 f9 	      JMP	DrawGameOverScreenLeft
   1106  f50e
   1107  f50e				   WaitAnotherScoreLine
   1108  f50e		       85 02		      STA	WSYNC
   1109  f510
   1110  f510				   PrepareForTraffic
   1111  f510		       20 e2 f7 	      JSR	ClearPF	; 32
   1112  f513
   1113  f513		       85 02		      STA	WSYNC
   1114  f515		       85 02		      STA	WSYNC
   1115  f517
   1116  f517		       a9 30		      LDA	#%00110000	; 2 Score mode
   1117  f519		       85 0a		      STA	CTRLPF	;3
   1118  f51b
   1119  f51b		       a5 c3		      LDA	TrafficColor	;3
   1120  f51d		       85 08		      STA	COLUPF	;3
   1121  f51f
   1122  f51f		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1123  f521		       85 07		      STA	COLUP1	;3
   1124  f523
   1125  f523		       a5 d5		      LDA	ScoreFontColor	;3
   1126  f525		       85 06		      STA	COLUP0	;3
   1127  f527
   1128  f527		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1129  f529
   1130  f529		       20 e2 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1131  f52c
      0  f52c					      SLEEP	14
      1  f52c				   .CYCLES    SET	14
      2  f52c
      3  f52c				  -	      IF	.CYCLES < 2
      4  f52c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f52c				  -	      ERR
      6  f52c					      ENDIF
      7  f52c
      8  f52c				  -	      IF	.CYCLES & 1
      9  f52c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f52c				  -	      nop	0
     11  f52c				  -	      ELSE
     12  f52c				  -	      bit	VSYNC
     13  f52c				  -	      ENDIF
     14  f52c				  -.CYCLES    SET	.CYCLES - 3
     15  f52c					      ENDIF
     16  f52c
     17  f52c					      REPEAT	.CYCLES / 2
     18  f52c		       ea		      nop
     17  f52c					      REPEND
     18  f52d		       ea		      nop
     17  f52d					      REPEND
     18  f52e		       ea		      nop
     17  f52e					      REPEND
     18  f52f		       ea		      nop
     17  f52f					      REPEND
     18  f530		       ea		      nop
     17  f530					      REPEND
     18  f531		       ea		      nop
     17  f531					      REPEND
     18  f532		       ea		      nop
     19  f533					      REPEND
   1133  f533
   1134  f533		       a5 b3		      LDA	Tmp3	;3
   1135  f535		       85 09		      STA	COLUBK	;3
   1136  f537		       a5 8c		      LDA	FrameCount0
   1137  f539		       29 01		      AND	#%00000001
   1138  f53b		       d0 05		      BNE	OpDrawCache
   1139  f53d		       4c fa f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1140  f540							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1141  f540
   1142  f540							;main scanline loop...
   1143  f540				   OpScanLoop
   1144  f540		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1145  f542
   1146  f542							;Start of next line!			
   1147  f542				   OpDrawCache		;63 Is the last line going to the top of the next frame?
   1148  f542		       a5 81		      LDA	PF0Cache	;3
   1149  f544		       85 0d		      STA	PF0	;3
   1150  f546
   1151  f546		       a5 80		      LDA	GRP0Cache	;3
   1152  f548		       85 1b		      STA	GRP0	;3
   1153  f54a
   1154  f54a		       a5 84		      LDA	GRP1Cache	;3
   1155  f54c		       85 1c		      STA	GRP1	;3
   1156  f54e
   1157  f54e		       a5 85		      LDA	ENABLCache	;3
   1158  f550		       85 1f		      STA	ENABL	;3
   1159  f552
   1160  f552		       a5 86		      LDA	ENAM0Cache	;3
   1161  f554		       85 1d		      STA	ENAM0	;3
   1162  f556
   1163  f556		       a5 87		      LDA	ENAM1Cache	;3
   1164  f558		       85 1e		      STA	ENAM1	;3
   1165  f55a
   1166  f55a		       a5 83		      LDA	PF2Cache	;3
   1167  f55c		       85 0f		      STA	PF2	;3
   1168  f55e
   1169  f55e		       a9 00		      LDA	#0	;2
   1170  f560		       85 0d		      STA	PF0	;3
   1171  f562		       85 84		      STA	GRP1Cache	;3
   1172  f564		       85 85		      STA	ENABLCache	;3
   1173  f566		       85 86		      STA	ENAM0Cache	;3
   1174  f568		       85 87		      STA	ENAM1Cache	; 3
   1175  f56a		       85 0f		      STA	PF2	;3
   1176  f56c
   1177  f56c				   OpDrawCar0
   1178  f56c		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1179  f56e		       b0 04		      BCS	OpSkipDrawCar	;2
   1180  f570		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1181  f572		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1182  f574				   OpSkipDrawCar
   1183  f574
   1184  f574							;BEQ DrawTraffic3
   1185  f574				   OpDrawTraffic1		; 33
   1186  f574		       98		      TYA		; 2
   1187  f575		       18		      CLC		; 2 
   1188  f576		       65 95		      ADC	TrafficOffset1 + 1	;3
   1189  f578		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1190  f57a		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1191  f57c		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1192  f57e		       4c 83 f5 	      JMP	OpAfterEorOffsetWithCarry	; 3
   1193  f581				   OpEorOffsetWithCarry
   1194  f581		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1195  f583				   OpAfterEorOffsetWithCarry		;17
   1196  f583		       aa		      TAX		;2
   1197  f584		       bd 00 fe 	      LDA	AesTable,X	; 4
   1198  f587		       c5 c1		      CMP	TrafficChance	;3
   1199  f589		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
   1200  f58b		       a9 ff		      LDA	#$FF	;2
   1201  f58d		       85 85		      STA	ENABLCache	;3
   1202  f58f				   OpFinishDrawTraffic1
   1203  f58f
   1204  f58f				   OpDrawTraffic2		; 33
   1205  f58f		       98		      TYA		; 2
   1206  f590		       18		      CLC		; 2 
   1207  f591		       65 99		      ADC	TrafficOffset2 + 1	;3
   1208  f593		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1209  f595		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1210  f597		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1211  f599		       4c 9e f5 	      JMP	OpAfterEorOffsetWithCarry2	; 3
   1212  f59c				   OpEorOffsetWithCarry2
   1213  f59c		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1214  f59e				   OpAfterEorOffsetWithCarry2		;17
   1215  f59e		       aa		      TAX		;2
   1216  f59f		       bd 00 fe 	      LDA	AesTable,X	; 4
   1217  f5a2		       c5 c1		      CMP	TrafficChance	;3
   1218  f5a4		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
   1219  f5a6		       a9 02		      LDA	#%00000010	;2
   1220  f5a8		       85 86		      STA	ENAM0Cache	;3
   1221  f5aa				   OpFinishDrawTraffic2
   1222  f5aa
   1223  f5aa							;STA WSYNC ;65 / 137
   1224  f5aa
   1225  f5aa							; LDA Tmp0 ; Flicker this line if drawing car
   1226  f5aa							; BEQ FinishDrawTraffic4
   1227  f5aa				   OpDrawTraffic3		; 33
   1228  f5aa		       98		      TYA		; 2
   1229  f5ab		       18		      CLC		; 2 
   1230  f5ac		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1231  f5ae		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1232  f5b0		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1233  f5b2		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1234  f5b4		       4c 71 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1235  f5b7				   OpEorOffsetWithCarry3
   1236  f5b7		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1237  f5b9				   OpAfterEorOffsetWithCarry3		;17
   1238  f5b9		       aa		      TAX		;2
   1239  f5ba		       bd 00 fe 	      LDA	AesTable,X	; 4
   1240  f5bd		       c5 c1		      CMP	TrafficChance	;3
   1241  f5bf		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
   1242  f5c1		       a9 02		      LDA	#%00000010	;2
   1243  f5c3		       85 87		      STA	ENAM1Cache
   1244  f5c5				   OpFinishDrawTraffic3
   1245  f5c5
   1246  f5c5							; DrawTraffic4; 33
   1247  f5c5							;	TYA; 2
   1248  f5c5							;	CLC; 2 
   1249  f5c5							;	ADC TrafficOffset4 + 1;3
   1250  f5c5							;	AND #TRAFFIC_1_MASK ;2
   1251  f5c5							;	BCS EorOffsetWithCarry4; 4 max if branch max, 2 otherwise
   1252  f5c5							;	EOR TrafficOffset4 + 2 ; 3
   1253  f5c5							;	JMP AfterEorOffsetWithCarry4 ; 3
   1254  f5c5							; EorOffsetWithCarry4
   1255  f5c5							;	EOR TrafficOffset4 + 3 ; 3
   1256  f5c5							; AfterEorOffsetWithCarry4 ;17
   1257  f5c5							;	TAX ;2
   1258  f5c5							;	LDA AesTable,X ; 4
   1259  f5c5							;	CMP TrafficChance;3
   1260  f5c5							;	BCS FinishDrawTraffic4 ; 2
   1261  f5c5							;	LDA #%00000010 ;2
   1262  f5c5							;	STA ENAM1Cache	;3
   1263  f5c5							; FinishDrawTraffic4
   1264  f5c5
   1265  f5c5				   OpDrawOponent		;26
   1266  f5c5		       84 b0		      STY	Tmp0	;3
   1267  f5c7		       a4 d8		      LDY	OpponentLine	;3
   1268  f5c9		       c0 08		      CPY	#(CAR_START_LINE - 7)	;2
   1269  f5cb		       b0 0b		      BCS	OpSkipDrawOpponent	;2
   1270  f5cd				   OpDrawOpponent
   1271  f5cd		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1272  f5cf		       85 84		      STA	GRP1Cache	;3
   1273  f5d1		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1274  f5d3		       a4 b0		      LDY	Tmp0	;3
   1275  f5d5		       4c ef f5 	      JMP	OpSkipDrawTraffic0	; Do not draw border to save cycles
   1276  f5d8				   OpSkipDrawOpponent
   1277  f5d8		       c6 d8		      DEC	OpponentLine	;5
   1278  f5da		       a4 b0		      LDY	Tmp0	;3
   1279  f5dc
   1280  f5dc				   OpDrawTraffic0		; 21 2pe
   1281  f5dc		       98		      TYA		; 2
   1282  f5dd		       18		      CLC		; 2 
   1283  f5de		       65 91		      ADC	TrafficOffset0 + 1	;3
   1284  f5e0		       29 08		      AND	#%00001000	;2
   1285  f5e2		       f0 05		      BEQ	OpHasNoBorderP0	;3
   1286  f5e4				   OpHasBorderP0
   1287  f5e4		       a9 f0		      LDA	#%11110000	; 2
   1288  f5e6		       4c eb f5 	      JMP	OpStoreBorderP0	; 3
   1289  f5e9				   OpHasNoBorderP0
   1290  f5e9		       a9 00		      LDA	#0	; 2
   1291  f5eb				   OpStoreBorderP0
   1292  f5eb		       85 81		      STA	PF0Cache	; 3
   1293  f5ed		       85 83		      STA	PF2Cache	; 3
   1294  f5ef
   1295  f5ef				   OpSkipDrawTraffic0
   1296  f5ef
   1297  f5ef				   OpWhileScanLoop
   1298  f5ef		       88		      DEY		;2
   1299  f5f0		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
   1300  f5f2		       4c 40 f5 	      JMP	OpScanLoop	;3
   1301  f5f5				   OpFinishScanLoop		; 7 209 of 222
   1302  f5f5		       4c ad f6 	      JMP	FinishScanLoop
   1303  f5f8
   1304  f5f8							;main scanline loop...
   1305  f5f8				   ScanLoop
   1306  f5f8		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1307  f5fa
   1308  f5fa							;Start of next line!			
   1309  f5fa				   DrawCache		;63 Is the last line going to the top of the next frame?
   1310  f5fa		       a5 81		      LDA	PF0Cache	;3
   1311  f5fc		       85 0d		      STA	PF0	;3
   1312  f5fe
   1313  f5fe		       a5 80		      LDA	GRP0Cache	;3
   1314  f600		       85 1b		      STA	GRP0	;3
   1315  f602
   1316  f602		       a5 84		      LDA	GRP1Cache	;3
   1317  f604		       85 1c		      STA	GRP1	;3
   1318  f606
   1319  f606		       a5 85		      LDA	ENABLCache	;3
   1320  f608		       85 1f		      STA	ENABL	;3
   1321  f60a
   1322  f60a		       a5 86		      LDA	ENAM0Cache	;3
   1323  f60c		       85 1d		      STA	ENAM0	;3
   1324  f60e
   1325  f60e		       a5 87		      LDA	ENAM1Cache	;3
   1326  f610		       85 1e		      STA	ENAM1	;3
   1327  f612
   1328  f612		       a5 83		      LDA	PF2Cache	;3
   1329  f614		       85 0f		      STA	PF2	;3
   1330  f616
   1331  f616		       a9 00		      LDA	#0	;2
   1332  f618		       85 0d		      STA	PF0	;3
   1333  f61a		       85 84		      STA	GRP1Cache	;3
   1334  f61c		       85 85		      STA	ENABLCache	;3
   1335  f61e		       85 86		      STA	ENAM0Cache	;3
   1336  f620		       85 87		      STA	ENAM1Cache	; 3
   1337  f622		       85 0f		      STA	PF2	;3
   1338  f624
   1339  f624				   DrawCar0
   1340  f624		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1341  f626		       b0 04		      BCS	SkipDrawCar	;2
   1342  f628		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1343  f62a		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1344  f62c				   SkipDrawCar
   1345  f62c
   1346  f62c							;BEQ DrawTraffic3
   1347  f62c				   DrawTraffic1 		; 33
   1348  f62c		       98		      TYA		; 2
   1349  f62d		       18		      CLC		; 2 
   1350  f62e		       65 95		      ADC	TrafficOffset1 + 1	;3
   1351  f630		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1352  f632		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1353  f634		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1354  f636		       4c 3b f6 	      JMP	AfterEorOffsetWithCarry	; 3
   1355  f639				   EorOffsetWithCarry
   1356  f639		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1357  f63b				   AfterEorOffsetWithCarry		;17
   1358  f63b		       aa		      TAX		;2
   1359  f63c		       bd 00 fe 	      LDA	AesTable,X	; 4
   1360  f63f		       c5 c1		      CMP	TrafficChance	;3
   1361  f641		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1362  f643		       a9 ff		      LDA	#$FF	;2
   1363  f645		       85 85		      STA	ENABLCache	;3
   1364  f647				   FinishDrawTraffic1
   1365  f647
   1366  f647				   DrawTraffic2 		; 33
   1367  f647		       98		      TYA		; 2
   1368  f648		       18		      CLC		; 2 
   1369  f649		       65 99		      ADC	TrafficOffset2 + 1	;3
   1370  f64b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1371  f64d		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1372  f64f		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1373  f651		       4c 56 f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1374  f654				   EorOffsetWithCarry2
   1375  f654		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1376  f656				   AfterEorOffsetWithCarry2		;17
   1377  f656		       aa		      TAX		;2
   1378  f657		       bd 00 fe 	      LDA	AesTable,X	; 4
   1379  f65a		       c5 c1		      CMP	TrafficChance	;3
   1380  f65c		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1381  f65e		       a9 02		      LDA	#%00000010	;2
   1382  f660		       85 86		      STA	ENAM0Cache	;3
   1383  f662				   FinishDrawTraffic2
   1384  f662
   1385  f662							;STA WSYNC ;65 / 137
   1386  f662
   1387  f662							; LDA Tmp0 ; Flicker this line if drawing car
   1388  f662							; BEQ FinishDrawTraffic4
   1389  f662				   DrawTraffic3 		; 33
   1390  f662		       98		      TYA		; 2
   1391  f663		       18		      CLC		; 2 
   1392  f664		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1393  f666		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1394  f668		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1395  f66a		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1396  f66c		       4c 71 f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1397  f66f				   EorOffsetWithCarry3
   1398  f66f		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1399  f671				   AfterEorOffsetWithCarry3		;17
   1400  f671		       aa		      TAX		;2
   1401  f672		       bd 00 fe 	      LDA	AesTable,X	; 4
   1402  f675		       c5 c1		      CMP	TrafficChance	;3
   1403  f677		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1404  f679		       a9 02		      LDA	#%00000010	;2
   1405  f67b		       85 87		      STA	ENAM1Cache
   1406  f67d				   FinishDrawTraffic3
   1407  f67d
   1408  f67d							; DrawTraffic4; 33
   1409  f67d							;	TYA; 2
   1410  f67d							;	CLC; 2 
   1411  f67d							;	ADC TrafficOffset4 + 1;3
   1412  f67d							;	AND #TRAFFIC_1_MASK ;2
   1413  f67d							;	BCS EorOffsetWithCarry4; 4 max if branch max, 2 otherwise
   1414  f67d							;	EOR TrafficOffset4 + 2 ; 3
   1415  f67d							;	JMP AfterEorOffsetWithCarry4 ; 3
   1416  f67d							; EorOffsetWithCarry4
   1417  f67d							;	EOR TrafficOffset4 + 3 ; 3
   1418  f67d							; AfterEorOffsetWithCarry4 ;17
   1419  f67d							;	TAX ;2
   1420  f67d							;	LDA AesTable,X ; 4
   1421  f67d							;	CMP TrafficChance;3
   1422  f67d							;	BCS FinishDrawTraffic4 ; 2
   1423  f67d							;	LDA #%00000010 ;2
   1424  f67d							;	STA ENAM1Cache	;3
   1425  f67d							; FinishDrawTraffic4
   1426  f67d
   1427  f67d				   DrawOponent		;26
   1428  f67d		       84 b0		      STY	Tmp0	;3
   1429  f67f		       a4 d8		      LDY	OpponentLine	;3
   1430  f681		       c0 08		      CPY	#(CAR_START_LINE - 7)	;2
   1431  f683		       b0 0b		      BCS	SkipDrawOpponent	;2
   1432  f685				   DrawOpponent
   1433  f685		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1434  f687		       85 84		      STA	GRP1Cache	;3
   1435  f689		       c6 d8		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1436  f68b		       a4 b0		      LDY	Tmp0	;3
   1437  f68d		       4c a7 f6 	      JMP	SkipDrawTraffic0	; Do not draw border to save cycles
   1438  f690				   SkipDrawOpponent
   1439  f690		       c6 d8		      DEC	OpponentLine	;5
   1440  f692		       a4 b0		      LDY	Tmp0	;3
   1441  f694
   1442  f694				   DrawTraffic0 		; 21 2pe
   1443  f694		       98		      TYA		; 2
   1444  f695		       18		      CLC		; 2 
   1445  f696		       65 91		      ADC	TrafficOffset0 + 1	;3
   1446  f698		       29 08		      AND	#%00001000	;2
   1447  f69a		       f0 05		      BEQ	HasNoBorderP0	;3
   1448  f69c				   HasBorderP0
   1449  f69c		       a9 f0		      LDA	#%11110000	; 2
   1450  f69e		       4c a3 f6 	      JMP	StoreBorderP0	; 3
   1451  f6a1				   HasNoBorderP0
   1452  f6a1		       a9 00		      LDA	#0	; 2
   1453  f6a3				   StoreBorderP0
   1454  f6a3		       85 81		      STA	PF0Cache	; 3
   1455  f6a5		       85 83		      STA	PF2Cache	; 3
   1456  f6a7
   1457  f6a7				   SkipDrawTraffic0
   1458  f6a7
   1459  f6a7				   WhileScanLoop
   1460  f6a7		       88		      DEY		;2
   1461  f6a8		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1462  f6aa		       4c f8 f5 	      JMP	ScanLoop	;3
   1463  f6ad				   FinishScanLoop		; 7 209 of 222
   1464  f6ad
   1465  f6ad		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1466  f6af		       20 f1 f7 	      JSR	LoadAll
   1467  f6b2		       85 02		      STA	WSYNC	; do stuff!
   1468  f6b4		       85 02		      STA	WSYNC
   1469  f6b6		       85 02		      STA	WSYNC
   1470  f6b8							;42 cycles to use here
   1471  f6b8
   1472  f6b8				   PrepareOverscan
   1473  f6b8		       a9 02		      LDA	#2
   1474  f6ba		       85 02		      STA	WSYNC
   1475  f6bc		       85 01		      STA	VBLANK
   1476  f6be
   1477  f6be		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1478  f6c0		       8d 96 02 	      STA	TIM64T
   1479  f6c3
   1480  f6c3				   LeftSound		;41
   1481  f6c3		       a5 ba		      LDA	CountdownTimer	;3
   1482  f6c5		       f0 1b		      BEQ	EngineOff	;2
   1483  f6c7		       a6 ad		      LDX	Gear
   1484  f6c9		       a5 8e		      LDA	Player0SpeedL	;3
   1485  f6cb		       4a		      LSR		;2
   1486  f6cc		       4a		      LSR		;2
   1487  f6cd		       4a		      LSR		;2
   1488  f6ce		       29 0f		      AND	#%00001111	;2
   1489  f6d0		       85 b0		      STA	Tmp0	;3
   1490  f6d2		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1491  f6d5		       38		      SEC		;2
   1492  f6d6		       e5 b0		      SBC	Tmp0	;3
   1493  f6d8		       85 17		      STA	AUDF0	;3
   1494  f6da		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1495  f6dd		       85 15		      STA	AUDC0	;3
   1496  f6df		       4c e6 f6 	      JMP	EndLeftSound	;3
   1497  f6e2				   EngineOff
   1498  f6e2		       a9 00		      LDA	#0
   1499  f6e4		       85 15		      STA	AUDC0
   1500  f6e6
   1501  f6e6				   EndLeftSound
   1502  f6e6
   1503  f6e6
   1504  f6e6				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1505  f6e6		       a5 d5		      LDA	ScoreFontColor	;3
   1506  f6e8		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1507  f6ea		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1508  f6ec		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1509  f6ee		       f0 29		      BEQ	PlayCheckpoint	;2
   1510  f6f0		       a5 b8		      LDA	CollisionCounter	;3
   1511  f6f2		       c9 e0		      CMP	#$E0	;2
   1512  f6f4		       b0 14		      BCS	PlayColision	;2
   1513  f6f6		       a5 d7		      LDA	NextCheckpoint	;3
   1514  f6f8		       38		      SEC		;2
   1515  f6f9		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1516  f6fb		       c9 02		      CMP	#$02	;2
   1517  f6fd		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1518  f6ff		       a5 ba		      LDA	CountdownTimer	; 3
   1519  f701		       f0 53		      BEQ	MuteRightSound	;2
   1520  f703		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1521  f705		       90 37		      BCC	PlayWarnTimeEnding	;4
   1522  f707		       4c 56 f7 	      JMP	MuteRightSound	;3
   1523  f70a				   PlayColision
   1524  f70a		       a9 1f		      LDA	#31
   1525  f70c		       85 18		      STA	AUDF1
   1526  f70e		       a9 08		      LDA	#8
   1527  f710		       85 16		      STA	AUDC1
   1528  f712		       a9 08		      LDA	#8
   1529  f714		       85 1a		      STA	AUDV1
   1530  f716		       4c 5a f7 	      JMP	EndRightSound
   1531  f719
   1532  f719				   PlayCheckpoint
   1533  f719		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1534  f71b		       4a		      LSR		;2
   1535  f71c		       4a		      LSR		;2
   1536  f71d		       4a		      LSR		;2
   1537  f71e		       85 18		      STA	AUDF1	;3
   1538  f720		       a9 0c		      LDA	#12	;2
   1539  f722		       85 16		      STA	AUDC1	;3
   1540  f724		       a9 06		      LDA	#6	;2
   1541  f726		       85 1a		      STA	AUDV1	;3
   1542  f728		       4c 5a f7 	      JMP	EndRightSound	;3
   1543  f72b
   1544  f72b				   PlayBeforeCheckpoint
   1545  f72b		       a5 8c		      LDA	FrameCount0	;3
   1546  f72d		       29 1c		      AND	#%00011100	;2
   1547  f72f		       09 03		      ORA	#%00000011	;2
   1548  f731		       85 18		      STA	AUDF1	;3
   1549  f733		       a9 0c		      LDA	#12	;2
   1550  f735		       85 16		      STA	AUDC1	;3
   1551  f737		       a9 03		      LDA	#3	;2
   1552  f739		       85 1a		      STA	AUDV1	;3
   1553  f73b		       4c 5a f7 	      JMP	EndRightSound	;3
   1554  f73e
   1555  f73e				   PlayWarnTimeEnding
   1556  f73e		       a5 8c		      LDA	FrameCount0	;3
   1557  f740		       29 04		      AND	#%00000100	;2
   1558  f742		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1559  f744		       18		      CLC		;2
   1560  f745		       a9 0a		      LDA	#10	;2
   1561  f747		       65 ba		      ADC	CountdownTimer	;2
   1562  f749		       85 18		      STA	AUDF1	;3
   1563  f74b		       a9 0c		      LDA	#12	;2
   1564  f74d		       85 16		      STA	AUDC1	;3
   1565  f74f		       a9 03		      LDA	#3	;2
   1566  f751		       85 1a		      STA	AUDV1	;3
   1567  f753		       4c 5a f7 	      JMP	EndRightSound	;3
   1568  f756
   1569  f756				   MuteRightSound
   1570  f756		       a9 00		      LDA	#0
   1571  f758		       85 1a		      STA	AUDV1
   1572  f75a				   EndRightSound
   1573  f75a
   1574  f75a							;Read Fire Button before, will make it start the game for now.
   1575  f75a				   StartGame
   1576  f75a		       a5 0c		      LDA	INPT4	;3
   1577  f75c		       30 2b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1578  f75e		       a5 c0		      LDA	GameStatus	;3
   1579  f760		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1580  f762		       d0 25		      BNE	SkipGameStart
   1581  f764		       a5 c5		      LDA	GameMode
   1582  f766		       c9 10		      CMP	#MAX_GAME_MODE
   1583  f768		       d0 0b		      BNE	SetGameRunning
   1584  f76a		       a9 00		      LDA	#0
   1585  f76c		       85 c5		      STA	GameMode
   1586  f76e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1587  f770		       85 bc		      STA	SwitchDebounceCounter
   1588  f772		       4c 89 f7 	      JMP	SkipGameStart
   1589  f775				   SetGameRunning
   1590  f775		       e6 c0		      INC	GameStatus
   1591  f777		       a9 00		      LDA	#0	;
   1592  f779		       85 8c		      STA	FrameCount0
   1593  f77b		       85 8d		      STA	FrameCount1
   1594  f77d		       a9 0a		      LDA	#10
   1595  f77f		       85 19		      STA	AUDV0
   1596  f781		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1597  f783		       85 d5		      STA	ScoreFontColor
   1598  f785		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1599  f787		       85 d6		      STA	ScoreFontColorHoldChange
   1600  f789				   SkipGameStart
   1601  f789
   1602  f789				   ReadSwitches
   1603  f789		       a6 bc		      LDX	SwitchDebounceCounter
   1604  f78b		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1605  f78d		       a9 01		      LDA	#%00000001
   1606  f78f		       2c 82 02 	      BIT	SWCHB
   1607  f792		       d0 07		      BNE	SkipReset
   1608  f794		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1609  f796		       85 bc		      STA	SwitchDebounceCounter
   1610  f798		       4c c8 f7 	      JMP	OverScanWaitBeforeReset
   1611  f79b				   SkipReset
   1612  f79b
   1613  f79b				   GameModeSelect
   1614  f79b		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1615  f79d		       d0 1c		      BNE	SkipGameSelect
   1616  f79f		       20 1d f8 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1617  f7a2				   ContinueGameSelect
   1618  f7a2		       a9 02		      LDA	#%00000010
   1619  f7a4		       2c 82 02 	      BIT	SWCHB
   1620  f7a7		       d0 12		      BNE	SkipGameSelect
   1621  f7a9		       a6 c5		      LDX	GameMode
   1622  f7ab		       e0 10		      CPX	#MAX_GAME_MODE
   1623  f7ad		       f0 04		      BEQ	ResetGameMode
   1624  f7af		       e8		      INX
   1625  f7b0		       4c b5 f7 	      JMP	StoreGameMode
   1626  f7b3				   ResetGameMode
   1627  f7b3		       a2 00		      LDX	#0
   1628  f7b5				   StoreGameMode
   1629  f7b5		       86 c5		      STX	GameMode
   1630  f7b7		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1631  f7b9		       85 bc		      STA	SwitchDebounceCounter
   1632  f7bb				   SkipGameSelect
   1633  f7bb		       4c c0 f7 	      JMP	EndReadSwitches
   1634  f7be				   DecrementSwitchDebounceCounter
   1635  f7be		       c6 bc		      DEC	SwitchDebounceCounter
   1636  f7c0				   EndReadSwitches
   1637  f7c0
   1638  f7c0				   OverScanWait
   1639  f7c0		       ad 84 02 	      LDA	INTIM
   1640  f7c3		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1641  f7c5		       4c d2 f0 	      JMP	MainLoop
   1642  f7c8
   1643  f7c8				   OverScanWaitBeforeReset
   1644  f7c8		       ad 84 02 	      LDA	INTIM
   1645  f7cb		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1646  f7cd		       4c 10 f0 	      JMP	Start
   1647  f7d0
   1648  f7d0				   Subroutines
   1649  f7d0
   1650  f7d0				   ClearAll		; 52
   1651  f7d0		       a9 00		      LDA	#0	;2
   1652  f7d2		       85 1c		      STA	GRP1	;3
   1653  f7d4		       85 1f		      STA	ENABL	;3
   1654  f7d6		       85 1d		      STA	ENAM0	;3
   1655  f7d8		       85 1e		      STA	ENAM1	;3
   1656  f7da		       85 84		      STA	GRP1Cache	;3
   1657  f7dc		       85 85		      STA	ENABLCache	;3
   1658  f7de		       85 86		      STA	ENAM0Cache	;3
   1659  f7e0		       85 87		      STA	ENAM1Cache	;3
   1660  f7e2
   1661  f7e2				   ClearPF		; 26
   1662  f7e2		       a9 00		      LDA	#0	;2
   1663  f7e4				   ClearPFSkipLDA0
   1664  f7e4		       85 0d		      STA	PF0	;3
   1665  f7e6		       85 0e		      STA	PF1	;3
   1666  f7e8		       85 0f		      STA	PF2	;3	
   1667  f7ea		       85 81		      STA	PF0Cache	;3
   1668  f7ec		       85 82		      STA	PF1Cache	;3
   1669  f7ee		       85 83		      STA	PF2Cache	;3 
   1670  f7f0		       60		      RTS		;6
   1671  f7f1				   EndClearAll
   1672  f7f1
   1673  f7f1				   LoadAll		; 48
   1674  f7f1		       a5 81		      LDA	PF0Cache	;3
   1675  f7f3		       85 0d		      STA	PF0	;3
   1676  f7f5
   1677  f7f5		       a5 82		      LDA	PF1Cache	;3
   1678  f7f7		       85 0e		      STA	PF1	;3
   1679  f7f9
   1680  f7f9		       a5 83		      LDA	PF2Cache	;3
   1681  f7fb		       85 0f		      STA	PF2	;3
   1682  f7fd
   1683  f7fd		       a5 84		      LDA	GRP1Cache	;3
   1684  f7ff		       85 1c		      STA	GRP1	;3
   1685  f801
   1686  f801		       a5 85		      LDA	ENABLCache	;3
   1687  f803		       85 1f		      STA	ENABL	;3
   1688  f805
   1689  f805		       a5 86		      LDA	ENAM0Cache	;3
   1690  f807		       85 1d		      STA	ENAM0	;3
   1691  f809
   1692  f809		       a5 87		      LDA	ENAM1Cache	;3
   1693  f80b		       85 1e		      STA	ENAM1	;3
   1694  f80d
   1695  f80d		       60		      RTS		;6
   1696  f80e				   EndLoadAll
   1697  f80e
   1698  f80e				   NextDifficulty
   1699  f80e		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1700  f810		       29 01		      AND	#%00000001
   1701  f812		       d0 24		      BNE	CheckRandomDifficulty
   1702  f814
   1703  f814		       a5 c4		      LDA	CurrentDifficulty
   1704  f816		       18		      CLC
   1705  f817		       69 01		      ADC	#1
   1706  f819		       29 03		      AND	#%00000011	; 0 to 3
   1707  f81b		       85 c4		      STA	CurrentDifficulty
   1708  f81d
   1709  f81d				   ConfigureDifficulty
   1710  f81d		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1711  f81f		       b9 f3 ff 	      LDA	TrafficChanceTable,Y
   1712  f822		       85 c1		      STA	TrafficChance
   1713  f824		       b9 ef ff 	      LDA	TrafficColorTable,Y
   1714  f827		       85 c3		      STA	TrafficColor
   1715  f829
   1716  f829		       a5 c5		      LDA	GameMode	;
   1717  f82b		       29 01		      AND	#%00000001
   1718  f82d		       f0 03		      BEQ	UseNextDifficultyTime
   1719  f82f		       4c 33 f8 	      JMP	StoreDifficultyTime
   1720  f832				   UseNextDifficultyTime
   1721  f832		       c8		      INY
   1722  f833				   StoreDifficultyTime
   1723  f833		       b9 f7 ff 	      LDA	TrafficTimeTable,Y
   1724  f836		       85 c2		      STA	CheckpointTime
   1725  f838
   1726  f838				   CheckRandomDifficulty
   1727  f838		       a5 c5		      LDA	GameMode
   1728  f83a		       29 08		      AND	#%00001000	; Random difficulties
   1729  f83c		       f0 09		      BEQ	ReturnFromNextDifficulty
   1730  f83e				   RandomDifficulty
   1731  f83e		       a6 8c		      LDX	FrameCount0
   1732  f840		       bd 00 fe 	      LDA	AesTable,X
   1733  f843							;EOR TrafficChance, no need, lets make life simple
   1734  f843		       29 3f		      AND	#%00111111
   1735  f845		       85 c1		      STA	TrafficChance
   1736  f847
   1737  f847				   ReturnFromNextDifficulty
   1738  f847		       60		      RTS
   1739  f848				   EndNextDifficulty
   1740  f848
   1741  f848				   DefaultOffsets
   1742  f848		       a9 20		      LDA	#$20
   1743  f84a		       85 96		      STA	TrafficOffset1 + 2
   1744  f84c		       a9 40		      LDA	#$40
   1745  f84e		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1746  f850		       a9 60		      LDA	#$60
   1747  f852		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1748  f854		       a9 80		      LDA	#$80
   1749  f856		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1750  f858		       a9 a0		      LDA	#$A0
   1751  f85a		       60		      RTS
   1752  f85b
   1753  f85b				   PrintStaticText		; Preload X with the offset referent to StaticText
   1754  f85b		       bd 00 ff 	      LDA	StaticText,X
   1755  f85e		       85 d0		      STA	ScoreD0
   1756  f860		       e8		      INX
   1757  f861		       bd 00 ff 	      LDA	StaticText,X
   1758  f864		       85 d1		      STA	ScoreD1
   1759  f866		       e8		      INX
   1760  f867		       bd 00 ff 	      LDA	StaticText,X
   1761  f86a		       85 d2		      STA	ScoreD2
   1762  f86c		       e8		      INX
   1763  f86d		       bd 00 ff 	      LDA	StaticText,X
   1764  f870		       85 d3		      STA	ScoreD3
   1765  f872		       e8		      INX
   1766  f873		       bd 00 ff 	      LDA	StaticText,X
   1767  f876		       85 d4		      STA	ScoreD4
   1768  f878		       60		      RTS
   1769  f879
   1770  f879				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1771  f879		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1772  f87b		       85 d5		      STA	ScoreFontColor
   1773  f87d		       a9 01		      LDA	#1
   1774  f87f		       85 d6		      STA	ScoreFontColorHoldChange
   1775  f881
   1776  f881		       a5 8d		      LDA	FrameCount1
   1777  f883		       29 07		      AND	#%00000111
   1778  f885		       85 b3		      STA	Tmp3
   1779  f887							;0 is Zelda Name, (default)
   1780  f887		       a9 01		      LDA	#1
   1781  f889		       c5 b3		      CMP	Tmp3
   1782  f88b		       f0 38		      BEQ	PrintZeldaDateLeft
   1783  f88d
   1784  f88d		       a9 02		      LDA	#2
   1785  f88f		       c5 b3		      CMP	Tmp3
   1786  f891		       f0 23		      BEQ	PrintPolvinhosLeft
   1787  f893
   1788  f893		       a9 03		      LDA	#3
   1789  f895		       c5 b3		      CMP	Tmp3
   1790  f897		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1791  f899
   1792  f899		       a9 04		      LDA	#4
   1793  f89b		       c5 b3		      CMP	Tmp3
   1794  f89d		       f0 1c		      BEQ	PrintIvonneLeft
   1795  f89f
   1796  f89f		       a9 05		      LDA	#5
   1797  f8a1		       c5 b3		      CMP	Tmp3
   1798  f8a3		       f0 2a		      BEQ	PrintIvonneDateLeft
   1799  f8a5
   1800  f8a5		       a9 06		      LDA	#6
   1801  f8a7		       c5 b3		      CMP	Tmp3
   1802  f8a9		       f0 15		      BEQ	PrintArtLeft
   1803  f8ab
   1804  f8ab		       a9 07		      LDA	#7
   1805  f8ad		       c5 b3		      CMP	Tmp3
   1806  f8af		       f0 23		      BEQ	PrintLeonardoLeft
   1807  f8b1
   1808  f8b1				   PrintZeldaLeft
   1809  f8b1		       a2 28		      LDX	#<ZeldaTextLeft
   1810  f8b3		       4c d9 f8 	      JMP	ProcessPrintEasterEgg
   1811  f8b6				   PrintPolvinhosLeft
   1812  f8b6		       a2 3c		      LDX	#<PolvinhosTextLeft
   1813  f8b8		       4c d9 f8 	      JMP	ProcessPrintEasterEgg
   1814  f8bb				   PrintIvonneLeft
   1815  f8bb		       a2 50		      LDX	#<IvonneTextLeft
   1816  f8bd		       4c d9 f8 	      JMP	ProcessPrintEasterEgg
   1817  f8c0				   PrintArtLeft
   1818  f8c0		       a2 64		      LDX	#<PaperArtTextLeft
   1819  f8c2		       4c d9 f8 	      JMP	ProcessPrintEasterEgg
   1820  f8c5
   1821  f8c5				   PrintZeldaDateLeft
   1822  f8c5		       a2 32		      LDX	#<ZeldaDateLeft
   1823  f8c7		       4c d9 f8 	      JMP	ProcessPrintEasterEgg
   1824  f8ca				   PrintPolvinhosDateLeft
   1825  f8ca		       a2 46		      LDX	#<PolvinhosDateLeft
   1826  f8cc		       4c d9 f8 	      JMP	ProcessPrintEasterEgg
   1827  f8cf				   PrintIvonneDateLeft
   1828  f8cf		       a2 5a		      LDX	#<IvonneDateLeft
   1829  f8d1		       4c d9 f8 	      JMP	ProcessPrintEasterEgg
   1830  f8d4				   PrintLeonardoLeft
   1831  f8d4		       a2 6e		      LDX	#<LeonardoTextLeft
   1832  f8d6		       4c d9 f8 	      JMP	ProcessPrintEasterEgg
   1833  f8d9
   1834  f8d9				   ProcessPrintEasterEgg
   1835  f8d9		       a5 8c		      LDA	FrameCount0	;3
   1836  f8db		       29 01		      AND	#%00000001	;2
   1837  f8dd		       d0 03		      BNE	TranformIntoRightText
   1838  f8df		       4c e7 f8 	      JMP	PrintEasterEggText
   1839  f8e2				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1840  f8e2		       8a		      TXA
   1841  f8e3		       18		      CLC
   1842  f8e4		       69 05		      ADC	#HALF_TEXT_SIZE
   1843  f8e6		       aa		      TAX
   1844  f8e7
   1845  f8e7				   PrintEasterEggText
   1846  f8e7		       20 5b f8 	      JSR	PrintStaticText
   1847  f8ea		       60		      RTS
   1848  f8eb
   1849  f8eb				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1850  f8eb		       a2 00		      LDX	#0
   1851  f8ed		       a0 04		      LDY	#FONT_OFFSET
   1852  f8ef
   1853  f8ef				   ScoreLoop		; 20 
   1854  f8ef		       85 02		      STA	WSYNC	;2
   1855  f8f1
   1856  f8f1		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1857  f8f3		       85 0d		      STA	PF0	;3
   1858  f8f5
   1859  f8f5		       a5 82		      LDA	PF1Cache	;3
   1860  f8f7		       85 0e		      STA	PF1	;3
   1861  f8f9
   1862  f8f9		       a5 83		      LDA	PF2Cache	;3
   1863  f8fb		       85 0f		      STA	PF2	;3
   1864  f8fd
   1865  f8fd				   DrawScoreD0		; 15
   1866  f8fd		       a6 d0		      LDX	ScoreD0	; 3
   1867  f8ff		       bd 00 fd 	      LDA	Font,X	;4
   1868  f902		       85 81		      STA	PF0Cache	;3
   1869  f904		       c6 d0		      DEC	ScoreD0	;5
   1870  f906
   1871  f906				   DrawScoreD1		; 23	
   1872  f906		       a6 d1		      LDX	ScoreD1	; 3
   1873  f908		       bd 00 fd 	      LDA	Font,X	;4
   1874  f90b		       0a		      ASL		;2
   1875  f90c		       0a		      ASL		;2
   1876  f90d		       0a		      ASL		;2
   1877  f90e		       0a		      ASL		;2
   1878  f90f		       85 82		      STA	PF1Cache	;3
   1879  f911		       c6 d1		      DEC	ScoreD1	;5
   1880  f913
   1881  f913				   DrawScoreD2		; 20
   1882  f913		       a6 d2		      LDX	ScoreD2	; 3
   1883  f915		       bd 00 fd 	      LDA	Font,X	;4
   1884  f918		       29 0f		      AND	#%00001111	;2
   1885  f91a		       05 82		      ORA	PF1Cache	;3
   1886  f91c		       85 82		      STA	PF1Cache	;3
   1887  f91e		       c6 d2		      DEC	ScoreD2	;5
   1888  f920
   1889  f920				   DrawScoreD3		; 23
   1890  f920		       a6 d3		      LDX	ScoreD3	; 3
   1891  f922		       bd 00 fd 	      LDA	Font,X	;4
   1892  f925		       4a		      LSR		;2
   1893  f926		       4a		      LSR		;2
   1894  f927		       4a		      LSR		;2
   1895  f928		       4a		      LSR		;2
   1896  f929		       85 83		      STA	PF2Cache	;3
   1897  f92b		       c6 d3		      DEC	ScoreD3	;5
   1898  f92d
   1899  f92d				   DrawScoreD4		; 20
   1900  f92d		       a6 d4		      LDX	ScoreD4	; 3
   1901  f92f		       bd 00 fd 	      LDA	Font,X	;4
   1902  f932		       29 f0		      AND	#%11110000	;2
   1903  f934		       05 83		      ORA	PF2Cache	;3
   1904  f936		       85 83		      STA	PF2Cache	;3
   1905  f938		       c6 d4		      DEC	ScoreD4	;5
   1906  f93a
   1907  f93a
   1908  f93a		       88		      DEY		;2
   1909  f93b		       10 b2		      BPL	ScoreLoop	;4
   1910  f93d
   1911  f93d		       85 02		      STA	WSYNC
   1912  f93f		       20 f1 f7 	      JSR	LoadAll
   1913  f942		       60		      RTS		; 6
   1914  f943
   1915  f943				   PrintRightDecimalDigits
   1916  f943		       b9 00 00 	      LDA	0,Y
   1917  f946		       4a		      LSR
   1918  f947		       4a		      LSR
   1919  f948		       4a		      LSR
   1920  f949		       4a		      LSR
   1921  f94a		       aa		      TAX
   1922  f94b		       bd be fd 	      LDA	FontLookup,X	;4
   1923  f94e		       85 d2		      STA	ScoreD2	;3
   1924  f950
   1925  f950		       b9 00 00 	      LDA	0,Y
   1926  f953		       29 0f		      AND	#%00001111
   1927  f955		       aa		      TAX
   1928  f956		       bd be fd 	      LDA	FontLookup,X	;4
   1929  f959		       85 d3		      STA	ScoreD3	;3
   1930  f95b
   1931  f95b		       c8		      INY
   1932  f95c		       b9 00 00 	      LDA	0,Y
   1933  f95f		       4a		      LSR
   1934  f960		       4a		      LSR
   1935  f961		       4a		      LSR
   1936  f962		       4a		      LSR
   1937  f963		       aa		      TAX
   1938  f964		       bd be fd 	      LDA	FontLookup,X	;4
   1939  f967		       85 d0		      STA	ScoreD0	;3
   1940  f969
   1941  f969		       b9 00 00 	      LDA	0,Y
   1942  f96c		       29 0f		      AND	#%00001111
   1943  f96e		       aa		      TAX
   1944  f96f		       bd be fd 	      LDA	FontLookup,X	;4
   1945  f972		       85 d1		      STA	ScoreD1	;3
   1946  f974
   1947  f974		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1948  f976		       85 d4		      STA	ScoreD4
   1949  f978		       60		      RTS
   1950  f979
   1951  f979				   PrintLastLeftDecimalDigits
   1952  f979		       b9 00 00 	      LDA	0,Y
   1953  f97c		       4a		      LSR
   1954  f97d		       4a		      LSR
   1955  f97e		       4a		      LSR
   1956  f97f		       4a		      LSR
   1957  f980		       aa		      TAX
   1958  f981		       bd be fd 	      LDA	FontLookup,X	;4
   1959  f984		       85 d3		      STA	ScoreD3	;3
   1960  f986		       b9 00 00 	      LDA	0,Y
   1961  f989		       29 0f		      AND	#%00001111
   1962  f98b		       aa		      TAX
   1963  f98c		       bd be fd 	      LDA	FontLookup,X	;4
   1964  f98f		       85 d4		      STA	ScoreD4	;3
   1965  f991		       60		      RTS
   1966  f992
   1967  f992				   PrintZerosLeft
   1968  f992		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1969  f994		       85 d2		      STA	ScoreD2
   1970  f996		       85 d3		      STA	ScoreD3
   1971  f998		       85 d4		      STA	ScoreD4
   1972  f99a		       60		      RTS
   1973  f99b
   1974  f99b				   DrawGameOverScoreLine
   1975  f99b		       85 02		      STA	WSYNC
   1976  f99d		       20 eb f8 	      JSR	PrintScore
   1977  f9a0		       85 02		      STA	WSYNC
   1978  f9a2		       85 02		      STA	WSYNC
   1979  f9a4		       20 e2 f7 	      JSR	ClearPF
   1980  f9a7		       60		      RTS
   1981  f9a8
   1982  f9a8				   DrawGameOverScreenLeft
   1983  f9a8		       85 02		      STA	WSYNC
   1984  f9aa		       20 e2 f7 	      JSR	ClearPF
   1985  f9ad
   1986  f9ad				   DrawBcdScoreLeft
   1987  f9ad		       20 fc fa 	      JSR	Sleep8Lines
   1988  f9b0		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1989  f9b2		       85 06		      STA	COLUP0
   1990  f9b4		       85 02		      STA	WSYNC
   1991  f9b6		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1992  f9b8		       85 d0		      STA	ScoreD0
   1993  f9ba
   1994  f9ba		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1995  f9bc		       85 d1		      STA	ScoreD1
   1996  f9be
   1997  f9be		       a5 b7		      LDA	ScoreBcd3
   1998  f9c0		       29 0f		      AND	#%00001111
   1999  f9c2		       aa		      TAX
   2000  f9c3		       bd be fd 	      LDA	FontLookup,X	;4
   2001  f9c6		       85 d2		      STA	ScoreD2	;3
   2002  f9c8
   2003  f9c8		       a0 b6		      LDY	#ScoreBcd2
   2004  f9ca		       20 79 f9 	      JSR	PrintLastLeftDecimalDigits
   2005  f9cd
   2006  f9cd		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2007  f9d0
   2008  f9d0				   DrawTimerLeft
   2009  f9d0		       20 fc fa 	      JSR	Sleep8Lines
   2010  f9d3		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2011  f9d5		       85 06		      STA	COLUP0
   2012  f9d7		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   2013  f9d9		       85 d0		      STA	ScoreD0
   2014  f9db		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2015  f9dd		       85 d1		      STA	ScoreD1
   2016  f9df		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   2017  f9e1		       85 d2		      STA	ScoreD2
   2018  f9e3		       a0 bf		      LDY	#TimeBcd2
   2019  f9e5		       85 02		      STA	WSYNC
   2020  f9e7		       20 79 f9 	      JSR	PrintLastLeftDecimalDigits
   2021  f9ea		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2022  f9ed
   2023  f9ed				   DrawGlideTimerLeft
   2024  f9ed		       20 fc fa 	      JSR	Sleep8Lines
   2025  f9f0		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2026  f9f2		       85 06		      STA	COLUP0
   2027  f9f4		       85 02		      STA	WSYNC
   2028  f9f6		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2029  f9f8		       85 d0		      STA	ScoreD0
   2030  f9fa		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2031  f9fc		       85 d1		      STA	ScoreD1
   2032  f9fe		       20 92 f9 	      JSR	PrintZerosLeft
   2033  fa01		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2034  fa04
   2035  fa04				   DrawHitCountLeft
   2036  fa04		       20 fc fa 	      JSR	Sleep8Lines
   2037  fa07		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2038  fa09		       85 06		      STA	COLUP0
   2039  fa0b		       85 02		      STA	WSYNC
   2040  fa0d		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2041  fa0f		       85 d0		      STA	ScoreD0
   2042  fa11		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2043  fa13		       85 d1		      STA	ScoreD1
   2044  fa15		       20 92 f9 	      JSR	PrintZerosLeft
   2045  fa18		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2046  fa1b
   2047  fa1b				   DrawCheckpointCountLeft
   2048  fa1b		       20 fc fa 	      JSR	Sleep8Lines
   2049  fa1e		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2050  fa20		       85 06		      STA	COLUP0
   2051  fa22		       85 02		      STA	WSYNC
   2052  fa24		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2053  fa26		       85 d0		      STA	ScoreD0
   2054  fa28		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2055  fa2a		       85 d1		      STA	ScoreD1
   2056  fa2c		       20 92 f9 	      JSR	PrintZerosLeft
   2057  fa2f		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2058  fa32
   2059  fa32				   DrawGameVersionLeft
   2060  fa32		       20 fc fa 	      JSR	Sleep8Lines
   2061  fa35		       a9 49		      LDA	#VERSION_COLOR
   2062  fa37		       85 06		      STA	COLUP0
   2063  fa39
   2064  fa39		       a5 c5		      LDA	GameMode
   2065  fa3b		       aa		      TAX
   2066  fa3c		       bd be fd 	      LDA	FontLookup,X	;4
   2067  fa3f		       85 d0		      STA	ScoreD0	;3
   2068  fa41
   2069  fa41		       a5 a9		      LDA	CurrentCarId
   2070  fa43		       aa		      TAX
   2071  fa44		       bd be fd 	      LDA	FontLookup,X	;4
   2072  fa47		       85 d1		      STA	ScoreD1	;3
   2073  fa49
   2074  fa49		       a5 a6		      LDA	StartSWCHB
   2075  fa4b		       29 40		      AND	#%01000000	; P0 difficulty
   2076  fa4d		       49 40		      EOR	#%01000000	; Reverse bytes
   2077  fa4f		       2a		      ROL
   2078  fa50		       2a		      ROL
   2079  fa51		       2a		      ROL
   2080  fa52		       18		      CLC
   2081  fa53		       69 0a		      ADC	#10
   2082  fa55		       aa		      TAX
   2083  fa56		       bd be fd 	      LDA	FontLookup,X	;4
   2084  fa59		       85 d2		      STA	ScoreD2	;3
   2085  fa5b
   2086  fa5b		       a5 a6		      LDA	StartSWCHB
   2087  fa5d		       29 80		      AND	#%10000000	; P0 difficulty
   2088  fa5f		       49 80		      EOR	#%10000000	; Reverse bytes
   2089  fa61		       2a		      ROL
   2090  fa62		       2a		      ROL
   2091  fa63		       18		      CLC
   2092  fa64		       69 0a		      ADC	#10
   2093  fa66		       aa		      TAX
   2094  fa67		       bd be fd 	      LDA	FontLookup,X	;4
   2095  fa6a		       85 d3		      STA	ScoreD3	;3
   2096  fa6c
   2097  fa6c		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2098  fa6e		       85 d4		      STA	ScoreD4
   2099  fa70
   2100  fa70		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2101  fa73
   2102  fa73		       4c d9 fa 	      JMP	FinalizeDrawGameOver
   2103  fa76
   2104  fa76				   DrawGameOverScreenRight
   2105  fa76		       85 02		      STA	WSYNC
   2106  fa78		       20 e2 f7 	      JSR	ClearPF
   2107  fa7b
   2108  fa7b				   DrawBcdScoreRight
   2109  fa7b		       20 fc fa 	      JSR	Sleep8Lines
   2110  fa7e		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2111  fa80		       85 07		      STA	COLUP1
   2112  fa82		       85 02		      STA	WSYNC
   2113  fa84		       a0 b4		      LDY	#ScoreBcd0
   2114  fa86		       20 43 f9 	      JSR	PrintRightDecimalDigits
   2115  fa89
   2116  fa89		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2117  fa8c
   2118  fa8c				   DrawTimerRight
   2119  fa8c		       20 fc fa 	      JSR	Sleep8Lines
   2120  fa8f		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2121  fa91		       85 07		      STA	COLUP1
   2122  fa93		       a0 bd		      LDY	#TimeBcd0
   2123  fa95		       20 43 f9 	      JSR	PrintRightDecimalDigits
   2124  fa98
   2125  fa98		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2126  fa9b				   DrawGlideTimeRight
   2127  fa9b		       20 fc fa 	      JSR	Sleep8Lines
   2128  fa9e		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2129  faa0		       85 07		      STA	COLUP1
   2130  faa2		       a0 cd		      LDY	#GlideTimeBcd0
   2131  faa4		       20 43 f9 	      JSR	PrintRightDecimalDigits
   2132  faa7		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2133  faaa
   2134  faaa				   DrawHitCountRight
   2135  faaa		       20 fc fa 	      JSR	Sleep8Lines
   2136  faad		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2137  faaf		       85 07		      STA	COLUP1
   2138  fab1		       a0 cb		      LDY	#HitCountBcd0
   2139  fab3		       20 43 f9 	      JSR	PrintRightDecimalDigits
   2140  fab6		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2141  fab9
   2142  fab9				   DrawCheckpointCountRight
   2143  fab9		       20 fc fa 	      JSR	Sleep8Lines
   2144  fabc		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2145  fabe		       85 07		      STA	COLUP1
   2146  fac0		       a0 a4		      LDY	#CheckpointBcd0
   2147  fac2		       20 43 f9 	      JSR	PrintRightDecimalDigits
   2148  fac5		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2149  fac8
   2150  fac8				   DrawVersionRight
   2151  fac8		       20 fc fa 	      JSR	Sleep8Lines
   2152  facb		       a9 49		      LDA	#VERSION_COLOR
   2153  facd		       85 07		      STA	COLUP1
   2154  facf		       85 02		      STA	WSYNC
   2155  fad1		       a2 78		      LDX	#<VersionText
   2156  fad3		       20 5b f8 	      JSR	PrintStaticText
   2157  fad6		       20 9b f9 	      JSR	DrawGameOverScoreLine
   2158  fad9
   2159  fad9				   FinalizeDrawGameOver
   2160  fad9		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2161  fadb		       85 d5		      STA	ScoreFontColor
   2162  fadd		       20 f3 fa 	      JSR	Sleep4Lines
   2163  fae0		       20 03 fb 	      JSR	Sleep32Lines
   2164  fae3		       20 03 fb 	      JSR	Sleep32Lines
   2165  fae6		       4c b8 f6 	      JMP	PrepareOverscan
   2166  fae9
   2167  fae9				   WaitForVblankEnd
   2168  fae9		       ad 84 02 	      LDA	INTIM
   2169  faec		       d0 fb		      BNE	WaitForVblankEnd
   2170  faee		       85 02		      STA	WSYNC
   2171  faf0		       85 01		      STA	VBLANK
   2172  faf2		       60		      RTS
   2173  faf3
   2174  faf3				   Sleep4Lines
   2175  faf3		       85 02		      STA	WSYNC
   2176  faf5		       85 02		      STA	WSYNC
   2177  faf7		       85 02		      STA	WSYNC
   2178  faf9		       85 02		      STA	WSYNC
   2179  fafb		       60		      RTS
   2180  fafc
   2181  fafc				   Sleep8Lines
   2182  fafc		       20 f3 fa 	      JSR	Sleep4Lines
   2183  faff		       20 f3 fa 	      JSR	Sleep4Lines
   2184  fb02		       60		      RTS
   2185  fb03
   2186  fb03				   Sleep32Lines
   2187  fb03		       20 fc fa 	      JSR	Sleep8Lines
   2188  fb06		       20 fc fa 	      JSR	Sleep8Lines
   2189  fb09		       20 fc fa 	      JSR	Sleep8Lines
   2190  fb0c		       20 fc fa 	      JSR	Sleep8Lines
   2191  fb0f		       60		      RTS
   2192  fb10
   2193  fb10							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2194  fc00					      org	$FC00
   2195  fc00				   QrCode1
   2196  fc00		       1f		      .byte.b	#%00011111
   2197  fc01		       10		      .byte.b	#%00010000
   2198  fc02		       17		      .byte.b	#%00010111
   2199  fc03		       17		      .byte.b	#%00010111
   2200  fc04		       17		      .byte.b	#%00010111
   2201  fc05		       10		      .byte.b	#%00010000
   2202  fc06		       1f		      .byte.b	#%00011111
   2203  fc07		       00		      .byte.b	#%00000000
   2204  fc08		       17		      .byte.b	#%00010111
   2205  fc09		       10		      .byte.b	#%00010000
   2206  fc0a		       1d		      .byte.b	#%00011101
   2207  fc0b		       16		      .byte.b	#%00010110
   2208  fc0c		       03		      .byte.b	#%00000011
   2209  fc0d		       19		      .byte.b	#%00011001
   2210  fc0e		       13		      .byte.b	#%00010011
   2211  fc0f		       1c		      .byte.b	#%00011100
   2212  fc10		       0b		      .byte.b	#%00001011
   2213  fc11		       00		      .byte.b	#%00000000
   2214  fc12		       1f		      .byte.b	#%00011111
   2215  fc13		       10		      .byte.b	#%00010000
   2216  fc14		       17		      .byte.b	#%00010111
   2217  fc15		       17		      .byte.b	#%00010111
   2218  fc16		       17		      .byte.b	#%00010111
   2219  fc17		       10		      .byte.b	#%00010000
   2220  fc18		       1f		      .byte.b	#%00011111
   2221  fc19
   2222  fc19				   QrCode2
   2223  fc19		       c3		      .byte.b	#%11000011
   2224  fc1a		       9a		      .byte.b	#%10011010
   2225  fc1b		       82		      .byte.b	#%10000010
   2226  fc1c		       da		      .byte.b	#%11011010
   2227  fc1d		       aa		      .byte.b	#%10101010
   2228  fc1e		       ca		      .byte.b	#%11001010
   2229  fc1f		       f3		      .byte.b	#%11110011
   2230  fc20		       78		      .byte.b	#%01111000
   2231  fc21		       df		      .byte.b	#%11011111
   2232  fc22		       fc		      .byte.b	#%11111100
   2233  fc23		       c7		      .byte.b	#%11000111
   2234  fc24		       98		      .byte.b	#%10011000
   2235  fc25		       23		      .byte.b	#%00100011
   2236  fc26		       b9		      .byte.b	#%10111001
   2237  fc27		       d2		      .byte.b	#%11010010
   2238  fc28		       30		      .byte.b	#%00110000
   2239  fc29		       eb		      .byte.b	#%11101011
   2240  fc2a		       28		      .byte.b	#%00101000
   2241  fc2b		       ab		      .byte.b	#%10101011
   2242  fc2c		       72		      .byte.b	#%01110010
   2243  fc2d		       fa		      .byte.b	#%11111010
   2244  fc2e		       7a		      .byte.b	#%01111010
   2245  fc2f		       32		      .byte.b	#%00110010
   2246  fc30		       3a		      .byte.b	#%00111010
   2247  fc31		       63		      .byte.b	#%01100011
   2248  fc32
   2249  fc32				   QrCode3
   2250  fc32		       98		      .byte.b	#%10011000
   2251  fc33		       c3		      .byte.b	#%11000011
   2252  fc34		       39		      .byte.b	#%00111001
   2253  fc35		       34		      .byte.b	#%00110100
   2254  fc36		       ff		      .byte.b	#%11111111
   2255  fc37		       71		      .byte.b	#%01110001
   2256  fc38		       d5		      .byte.b	#%11010101
   2257  fc39		       d1		      .byte.b	#%11010001
   2258  fc3a		       5f		      .byte.b	#%01011111
   2259  fc3b		       26		      .byte.b	#%00100110
   2260  fc3c		       2d		      .byte.b	#%00101101
   2261  fc3d		       e9		      .byte.b	#%11101001
   2262  fc3e		       d6		      .byte.b	#%11010110
   2263  fc3f		       26		      .byte.b	#%00100110
   2264  fc40		       ba		      .byte.b	#%10111010
   2265  fc41		       03		      .byte.b	#%00000011
   2266  fc42		       dd		      .byte.b	#%11011101
   2267  fc43		       e0		      .byte.b	#%11100000
   2268  fc44		       57		      .byte.b	#%01010111
   2269  fc45		       14		      .byte.b	#%00010100
   2270  fc46		       35		      .byte.b	#%00110101
   2271  fc47		       e5		      .byte.b	#%11100101
   2272  fc48		       b5		      .byte.b	#%10110101
   2273  fc49		       d4		      .byte.b	#%11010100
   2274  fc4a		       97		      .byte.b	#%10010111
   2275  fc4b
   2276  fc4b				   QrCode4
   2277  fc4b		       09		      .byte.b	#%00001001
   2278  fc4c		       0e		      .byte.b	#%00001110
   2279  fc4d		       0f		      .byte.b	#%00001111
   2280  fc4e		       0c		      .byte.b	#%00001100
   2281  fc4f		       0c		      .byte.b	#%00001100
   2282  fc50		       08		      .byte.b	#%00001000
   2283  fc51		       08		      .byte.b	#%00001000
   2284  fc52		       06		      .byte.b	#%00000110
   2285  fc53		       06		      .byte.b	#%00000110
   2286  fc54		       0b		      .byte.b	#%00001011
   2287  fc55		       0f		      .byte.b	#%00001111
   2288  fc56		       04		      .byte.b	#%00000100
   2289  fc57		       08		      .byte.b	#%00001000
   2290  fc58		       0f		      .byte.b	#%00001111
   2291  fc59		       09		      .byte.b	#%00001001
   2292  fc5a		       07		      .byte.b	#%00000111
   2293  fc5b		       05		      .byte.b	#%00000101
   2294  fc5c		       00		      .byte.b	#%00000000
   2295  fc5d		       0f		      .byte.b	#%00001111
   2296  fc5e		       08		      .byte.b	#%00001000
   2297  fc5f		       0b		      .byte.b	#%00001011
   2298  fc60		       0b		      .byte.b	#%00001011
   2299  fc61		       0b		      .byte.b	#%00001011
   2300  fc62		       08		      .byte.b	#%00001000
   2301  fc63		       0f		      .byte.b	#%00001111
   2302  fc64
   2303  fc64							; Moved here because of rom space.
   2304  fc64							; The only SBR in constants space
   2305  fc64				   DrawQrCode
   2306  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2307  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2308  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2309  fc6a		       85 0a		      STA	CTRLPF
   2310  fc6c		       20 d0 f7 	      JSR	ClearAll	; To be 100 sure!
   2311  fc6f		       ad 82 02 	      LDA	SWCHB
   2312  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2313  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2314  fc76		       86 09		      STX	COLUBK
   2315  fc78		       84 08		      STY	COLUPF
   2316  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2317  fc7d				   StoreReversedQrCode
   2318  fc7d		       86 08		      STX	COLUPF
   2319  fc7f		       84 09		      STY	COLUBK
   2320  fc81
   2321  fc81				   ContinueQrCode
   2322  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2323  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2324  fc85		       20 e9 fa 	      JSR	WaitForVblankEnd
   2325  fc88		       20 fc fa 	      JSR	Sleep8Lines
   2326  fc8b		       20 fc fa 	      JSR	Sleep8Lines
   2327  fc8e		       20 fc fa 	      JSR	Sleep8Lines
   2328  fc91
   2329  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2330  fc91		       85 02		      STA	WSYNC
   2331  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2332  fc96		       85 0e		      STA	PF1	;3
   2333  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2334  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2336  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2337  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2338  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2339  fcb3		       85 0e		      STA	PF1	;3
   2340  fcb5
   2341  fcb5		       ca		      DEX		;2
   2342  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2343  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2344  fcba		       88		      DEY		;2
   2345  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2346  fcbd
   2347  fcbd				   EndQrCodeLoop
   2348  fcbd		       85 02		      STA	WSYNC	;
   2349  fcbf		       a9 00		      LDA	#0
   2350  fcc1		       85 0e		      STA	PF1	;3
   2351  fcc3		       85 0f		      STA	PF2	;3
   2352  fcc5
   2353  fcc5		       20 03 fb 	      JSR	Sleep32Lines
   2354  fcc8		       4c b8 f6 	      JMP	PrepareOverscan
   2355  fccb
   2356  fd00					      org	$FD00
   2357  fd00				   Font
   2358  fd00				   C0
   2359  fd00		       e7		      .byte.b	#%11100111	;
   2360  fd01		       a5		      .byte.b	#%10100101	; 
   2361  fd02		       a5		      .byte.b	#%10100101	; 
   2362  fd03		       a5		      .byte.b	#%10100101	; 
   2363  fd04		       e7		      .byte.b	#%11100111	;	
   2364  fd05				   C1
   2365  fd05		       e7		      .byte.b	#%11100111	;
   2366  fd06		       42		      .byte.b	#%01000010	; 
   2367  fd07		       42		      .byte.b	#%01000010	; 
   2368  fd08		       42		      .byte.b	#%01000010	; 
   2369  fd09		       66		      .byte.b	#%01100110	;
   2370  fd0a				   C2
   2371  fd0a		       e7		      .byte.b	#%11100111	;
   2372  fd0b		       24		      .byte.b	#%00100100	; 
   2373  fd0c		       e7		      .byte.b	#%11100111	; 
   2374  fd0d		       81		      .byte.b	#%10000001	; 
   2375  fd0e		       e7		      .byte.b	#%11100111	;
   2376  fd0f				   C3
   2377  fd0f		       e7		      .byte.b	#%11100111	;
   2378  fd10		       81		      .byte.b	#%10000001	; 
   2379  fd11		       e7		      .byte.b	#%11100111	; 
   2380  fd12		       81		      .byte.b	#%10000001	; 
   2381  fd13		       e7		      .byte.b	#%11100111	;
   2382  fd14				   C4
   2383  fd14		       81		      .byte.b	#%10000001	;
   2384  fd15		       81		      .byte.b	#%10000001	; 
   2385  fd16		       e7		      .byte.b	#%11100111	; 
   2386  fd17		       a5		      .byte.b	#%10100101	; 
   2387  fd18		       a5		      .byte.b	#%10100101	;
   2388  fd19				   C5
   2389  fd19		       e7		      .byte.b	#%11100111	;
   2390  fd1a		       81		      .byte.b	#%10000001	; 
   2391  fd1b		       e7		      .byte.b	#%11100111	; 
   2392  fd1c		       24		      .byte.b	#%00100100	; 
   2393  fd1d		       e7		      .byte.b	#%11100111	;
   2394  fd1e				   C6
   2395  fd1e		       e7		      .byte.b	#%11100111	;
   2396  fd1f		       a5		      .byte.b	#%10100101	; 
   2397  fd20		       e7		      .byte.b	#%11100111	; 
   2398  fd21		       24		      .byte.b	#%00100100	; 
   2399  fd22		       e7		      .byte.b	#%11100111	;
   2400  fd23				   C7
   2401  fd23		       81		      .byte.b	#%10000001	;
   2402  fd24		       81		      .byte.b	#%10000001	; 
   2403  fd25		       81		      .byte.b	#%10000001	; 
   2404  fd26		       81		      .byte.b	#%10000001	; 
   2405  fd27		       e7		      .byte.b	#%11100111	;
   2406  fd28				   C8
   2407  fd28		       e7		      .byte.b	#%11100111	;
   2408  fd29		       a5		      .byte.b	#%10100101	; 
   2409  fd2a		       e7		      .byte.b	#%11100111	; 
   2410  fd2b		       a5		      .byte.b	#%10100101	; 
   2411  fd2c		       e7		      .byte.b	#%11100111	;
   2412  fd2d				   C9
   2413  fd2d		       e7		      .byte.b	#%11100111	;
   2414  fd2e		       81		      .byte.b	#%10000001	; 
   2415  fd2f		       e7		      .byte.b	#%11100111	; 
   2416  fd30		       a5		      .byte.b	#%10100101	; 
   2417  fd31		       e7		      .byte.b	#%11100111	;
   2418  fd32				   CA
   2419  fd32		       a5		      .byte.b	#%10100101	;
   2420  fd33		       a5		      .byte.b	#%10100101	; 
   2421  fd34		       e7		      .byte.b	#%11100111	; 
   2422  fd35		       a5		      .byte.b	#%10100101	; 
   2423  fd36		       e7		      .byte.b	#%11100111	;
   2424  fd37				   CB
   2425  fd37		       66		      .byte.b	#%01100110	;
   2426  fd38		       a5		      .byte.b	#%10100101	; 
   2427  fd39		       66		      .byte.b	#%01100110	; 
   2428  fd3a		       a5		      .byte.b	#%10100101	;
   2429  fd3b		       66		      .byte.b	#%01100110	;
   2430  fd3c				   CC
   2431  fd3c		       e7		      .byte.b	#%11100111	;
   2432  fd3d		       24		      .byte.b	#%00100100	; 
   2433  fd3e		       24		      .byte.b	#%00100100	; 
   2434  fd3f		       24		      .byte.b	#%00100100	;
   2435  fd40		       e7		      .byte.b	#%11100111	;
   2436  fd41
   2437  fd41				   CD
   2438  fd41		       66		      .byte.b	#%01100110	;
   2439  fd42		       a5		      .byte.b	#%10100101	; 
   2440  fd43		       a5		      .byte.b	#%10100101	; 
   2441  fd44		       a5		      .byte.b	#%10100101	;
   2442  fd45		       66		      .byte.b	#%01100110	;
   2443  fd46
   2444  fd46				   CE
   2445  fd46		       e7		      .byte.b	#%11100111	;
   2446  fd47		       24		      .byte.b	#%00100100	; 
   2447  fd48		       e7		      .byte.b	#%11100111	; 
   2448  fd49		       24		      .byte.b	#%00100100	; 
   2449  fd4a		       e7		      .byte.b	#%11100111	;
   2450  fd4b
   2451  fd4b				   CF
   2452  fd4b		       24		      .byte.b	#%00100100	;
   2453  fd4c		       24		      .byte.b	#%00100100	; 
   2454  fd4d		       e7		      .byte.b	#%11100111	; 
   2455  fd4e		       24		      .byte.b	#%00100100	; 
   2456  fd4f		       e7		      .byte.b	#%11100111	;
   2457  fd50
   2458  fd50				   CG
   2459  fd50		       c3		      .byte.b	#%11000011	;
   2460  fd51		       a5		      .byte.b	#%10100101	; 
   2461  fd52		       a5		      .byte.b	#%10100101	; 
   2462  fd53		       24		      .byte.b	#%00100100	; 
   2463  fd54		       c3		      .byte.b	#%11000011	;	
   2464  fd55
   2465  fd55				   CH
   2466  fd55		       a5		      .byte.b	#%10100101	;
   2467  fd56		       a5		      .byte.b	#%10100101	; 
   2468  fd57		       e7		      .byte.b	#%11100111	; 
   2469  fd58		       a5		      .byte.b	#%10100101	; 
   2470  fd59		       a5		      .byte.b	#%10100101	;
   2471  fd5a
   2472  fd5a				   CK
   2473  fd5a		       a5		      .byte.b	#%10100101	;
   2474  fd5b		       a5		      .byte.b	#%10100101	; 
   2475  fd5c		       66		      .byte.b	#%01100110	; 
   2476  fd5d		       a5		      .byte.b	#%10100101	; 
   2477  fd5e		       a5		      .byte.b	#%10100101	;
   2478  fd5f
   2479  fd5f				   CL
   2480  fd5f		       e7		      .byte.b	#%11100111	;
   2481  fd60		       24		      .byte.b	#%00100100	; 
   2482  fd61		       24		      .byte.b	#%00100100	; 
   2483  fd62		       24		      .byte.b	#%00100100	; 
   2484  fd63		       24		      .byte.b	#%00100100	;
   2485  fd64
   2486  fd64				   CI
   2487  fd64		       42		      .byte.b	#%01000010	;
   2488  fd65		       42		      .byte.b	#%01000010	; 
   2489  fd66		       42		      .byte.b	#%01000010	; 
   2490  fd67		       42		      .byte.b	#%01000010	; 
   2491  fd68		       42		      .byte.b	#%01000010	;
   2492  fd69
   2493  fd69				   CM
   2494  fd69		       a5		      .byte.b	#%10100101	;
   2495  fd6a		       a5		      .byte.b	#%10100101	; 
   2496  fd6b		       a5		      .byte.b	#%10100101	; 
   2497  fd6c		       e7		      .byte.b	#%11100111	; 
   2498  fd6d		       a5		      .byte.b	#%10100101	;
   2499  fd6e
   2500  fd6e				   CN
   2501  fd6e		       a5		      .byte.b	#%10100101	;
   2502  fd6f		       a5		      .byte.b	#%10100101	; 
   2503  fd70		       a5		      .byte.b	#%10100101	; 
   2504  fd71		       a5		      .byte.b	#%10100101	; 
   2505  fd72		       66		      .byte.b	#%01100110	;	
   2506  fd73
   2507  fd73
   2508  fd73				   CO
   2509  fd73		       42		      .byte.b	#%01000010	;
   2510  fd74		       a5		      .byte.b	#%10100101	; 
   2511  fd75		       a5		      .byte.b	#%10100101	; 
   2512  fd76		       a5		      .byte.b	#%10100101	; 
   2513  fd77		       42		      .byte.b	#%01000010	;	
   2514  fd78
   2515  fd78				   CP
   2516  fd78		       24		      .byte.b	#%00100100	;
   2517  fd79		       24		      .byte.b	#%00100100	; 
   2518  fd7a		       e7		      .byte.b	#%11100111	; 
   2519  fd7b		       a5		      .byte.b	#%10100101	; 
   2520  fd7c		       e7		      .byte.b	#%11100111	;
   2521  fd7d
   2522  fd7d				   CR
   2523  fd7d		       a5		      .byte.b	#%10100101	;
   2524  fd7e		       a5		      .byte.b	#%10100101	; 
   2525  fd7f		       66		      .byte.b	#%01100110	; 
   2526  fd80		       a5		      .byte.b	#%10100101	; 
   2527  fd81		       66		      .byte.b	#%01100110	;
   2528  fd82
   2529  fd82				   CS
   2530  fd82		       66		      .byte.b	#%01100110	;
   2531  fd83		       81		      .byte.b	#%10000001	; 
   2532  fd84		       42		      .byte.b	#%01000010	; 
   2533  fd85		       24		      .byte.b	#%00100100	; 
   2534  fd86		       c3		      .byte.b	#%11000011	;
   2535  fd87
   2536  fd87				   CT
   2537  fd87		       42		      .byte.b	#%01000010	;
   2538  fd88		       42		      .byte.b	#%01000010	; 
   2539  fd89		       42		      .byte.b	#%01000010	; 
   2540  fd8a		       42		      .byte.b	#%01000010	; 
   2541  fd8b		       e7		      .byte.b	#%11100111	;
   2542  fd8c
   2543  fd8c				   CV
   2544  fd8c		       42		      .byte.b	#%01000010	;
   2545  fd8d		       a5		      .byte.b	#%10100101	; 
   2546  fd8e		       a5		      .byte.b	#%10100101	; 
   2547  fd8f		       a5		      .byte.b	#%10100101	; 
   2548  fd90		       a5		      .byte.b	#%10100101	;	
   2549  fd91
   2550  fd91				   CY
   2551  fd91		       42		      .byte.b	#%01000010	;
   2552  fd92		       42		      .byte.b	#%01000010	; 
   2553  fd93		       42		      .byte.b	#%01000010	; 
   2554  fd94		       a5		      .byte.b	#%10100101	; 
   2555  fd95		       a5		      .byte.b	#%10100101	;
   2556  fd96
   2557  fd96				   CW
   2558  fd96		       a5		      .byte.b	#%10100101	;
   2559  fd97		       e7		      .byte.b	#%11100111	; 
   2560  fd98		       a5		      .byte.b	#%10100101	; 
   2561  fd99		       a5		      .byte.b	#%10100101	; 
   2562  fd9a		       a5		      .byte.b	#%10100101	;
   2563  fd9b
   2564  fd9b				   CZ
   2565  fd9b		       e7		      .byte.b	#%11100111	;
   2566  fd9c		       24		      .byte.b	#%00100100	; 
   2567  fd9d		       42		      .byte.b	#%01000010	; 
   2568  fd9e		       81		      .byte.b	#%10000001	; 
   2569  fd9f		       e7		      .byte.b	#%11100111	;
   2570  fda0
   2571  fda0				   Pipe
   2572  fda0		       42		      .byte.b	#%01000010	;
   2573  fda1		       00		      .byte.b	#%00000000	; 
   2574  fda2		       42		      .byte.b	#%01000010	; 
   2575  fda3		       00		      .byte.b	#%00000000	; 
   2576  fda4		       42		      .byte.b	#%01000010	;
   2577  fda5
   2578  fda5				   Exclamation
   2579  fda5		       42		      .byte.b	#%01000010	;
   2580  fda6		       00		      .byte.b	#%00000000	; 
   2581  fda7		       42		      .byte.b	#%01000010	; 
   2582  fda8		       42		      .byte.b	#%01000010	; 
   2583  fda9		       42		      .byte.b	#%01000010	;
   2584  fdaa
   2585  fdaa				   Dot
   2586  fdaa		       42		      .byte.b	#%01000010	;
   2587  fdab		       42		      .byte.b	#%01000010	; 
   2588  fdac		       00		      .byte.b	#%00000000	; 
   2589  fdad		       00		      .byte.b	#%00000000	; 
   2590  fdae		       00		      .byte.b	#%00000000	;
   2591  fdaf
   2592  fdaf				   Colon
   2593  fdaf		       42		      .byte.b	#%01000010	;
   2594  fdb0		       42		      .byte.b	#%01000010	; 
   2595  fdb1		       00		      .byte.b	#%00000000	; 
   2596  fdb2		       42		      .byte.b	#%01000010	; 
   2597  fdb3		       42		      .byte.b	#%01000010	;
   2598  fdb4
   2599  fdb4				   Triangle
   2600  fdb4		       81		      .byte.b	#%10000001	;
   2601  fdb5		       c3		      .byte.b	#%11000011	; 
   2602  fdb6		       e7		      .byte.b	#%11100111	; 
   2603  fdb7		       c3		      .byte.b	#%11000011	; 
   2604  fdb8		       81		      .byte.b	#%10000001	;
   2605  fdb9
   2606  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2607  fdb9		       00		      .byte.b	#0	;
   2608  fdba		       00		      .byte.b	#0	;
   2609  fdbb		       00		      .byte.b	#0	;
   2610  fdbc		       00		      .byte.b	#0	;
   2611  fdbd		       00		      .byte.b	#0	;
   2612  fdbe
   2613  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2614  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2615  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2616  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2617  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2618  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2619  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2620  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2621  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2622  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2623  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2624  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2625  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2626  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2627  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2628  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2629  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2630  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2631  fdcf
   2632  fdcf				   EngineSoundType
   2633  fdcf		       02		      .byte.b	#2
   2634  fdd0		       02		      .byte.b	#2
   2635  fdd1		       0e		      .byte.b	#14
   2636  fdd2		       06		      .byte.b	#6
   2637  fdd3		       06		      .byte.b	#6
   2638  fdd4		       0e		      .byte.b	#14
   2639  fdd5
   2640  fdd5				   EngineBaseFrequence
   2641  fdd5		       1f		      .byte.b	#31
   2642  fdd6		       15		      .byte.b	#21
   2643  fdd7		       14		      .byte.b	#20
   2644  fdd8		       1f		      .byte.b	#31
   2645  fdd9		       16		      .byte.b	#22
   2646  fdda		       03		      .byte.b	#3
   2647  fddb
   2648  fddb				   TachometerSizeLookup1
   2649  fddb		       1f		      .byte.b	#%00011111
   2650  fddc		       3f		      .byte.b	#%00111111
   2651  fddd		       7f		      .byte.b	#%01111111
   2652  fdde		       ff		      .byte.b	#%11111111
   2653  fddf		       ff		      .byte.b	#%11111111
   2654  fde0		       ff		      .byte.b	#%11111111
   2655  fde1		       ff		      .byte.b	#%11111111
   2656  fde2		       ff		      .byte.b	#%11111111
   2657  fde3
   2658  fde3				   TachometerSizeLookup2
   2659  fde3		       00		      .byte.b	#%00000000
   2660  fde4		       00		      .byte.b	#%00000000
   2661  fde5		       00		      .byte.b	#%00000000
   2662  fde6		       00		      .byte.b	#%00000000
   2663  fde7		       80		      .byte.b	#%10000000
   2664  fde8		       c0		      .byte.b	#%11000000
   2665  fde9		       e0		      .byte.b	#%11100000
   2666  fdea		       f0		      .byte.b	#%11110000
   2667  fdeb
   2668  fdeb				   TachometerGearLookup
   2669  fdeb		       01		      .byte.b	#%00000001
   2670  fdec		       02		      .byte.b	#%00000010
   2671  fded		       04		      .byte.b	#%00000100
   2672  fdee		       08		      .byte.b	#%00001000
   2673  fdef		       10		      .byte.b	#%00010000
   2674  fdf0		       30		      .byte.b	#%00110000
   2675  fdf1
   2676  fe00					      org	$FE00
   2677  fe00				   AesTable
   2678  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2679  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2680  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2681  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2682  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2683  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2684  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2685  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2686  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2687  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2688  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2689  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2690  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2691  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2692  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2693  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2694  ff00
   2695  ff00							; From FF00 to FFFB (122 bytes) to use here
   2696  ff00
   2697  ff00				   StaticText		; All static text must be on the same MSB block. 
   2698  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2699  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2700  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2701  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2702  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2703  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2704  ff05
   2705  ff05				   HellwayLeftText
   2706  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2707  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2708  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2709  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2710  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2711  ff0a
   2712  ff0a				   HellwayRightText
   2713  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2714  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2715  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2716  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2717  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2718  ff0f
   2719  ff0f				   OpbText
   2720  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2721  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2722  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2723  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2724  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2725  ff14
   2726  ff14				   YearText
   2727  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2728  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2729  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2730  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2731  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2732  ff19
   2733  ff19				   GameText
   2734  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2735  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2736  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2737  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2738  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2739  ff1e
   2740  ff1e				   OverText
   2741  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2742  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2743  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2744  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2745  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2746  ff23				   GoText
   2747  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2748  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2749  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2750  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2751  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2752  ff28
   2753  ff28				   ZeldaTextLeft
   2754  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2755  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2756  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2757  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2758  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2759  ff2d
   2760  ff2d				   ZeldaTextRight
   2761  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2762  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2763  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2764  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2765  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2766  ff32
   2767  ff32				   ZeldaDateLeft
   2768  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2769  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2770  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2771  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2772  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2773  ff37
   2774  ff37				   ZeldaDateRight
   2775  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2776  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2777  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2778  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2779  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2780  ff3c
   2781  ff3c				   PolvinhosTextLeft
   2782  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2783  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2784  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2785  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2786  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2787  ff41
   2788  ff41				   PolvinhosTextRight
   2789  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2790  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2791  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2792  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2793  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2794  ff46
   2795  ff46				   PolvinhosDateLeft
   2796  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2797  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2798  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2799  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2800  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2801  ff4b
   2802  ff4b				   PolvinhosDateRight
   2803  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2804  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2805  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2806  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2807  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2808  ff50
   2809  ff50				   IvonneTextLeft
   2810  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2811  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2812  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2813  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2814  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2815  ff55
   2816  ff55				   IvonneTextRight
   2817  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2818  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2819  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2820  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2821  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2822  ff5a
   2823  ff5a				   IvonneDateLeft
   2824  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2825  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2826  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2827  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2828  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2829  ff5f
   2830  ff5f				   IvonneDateRight
   2831  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2832  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2833  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2834  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2835  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2836  ff64
   2837  ff64				   PaperArtTextLeft
   2838  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2839  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2840  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2841  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2842  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2843  ff69
   2844  ff69				   PaperArtTextRight
   2845  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2846  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2847  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2848  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2849  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2850  ff6e
   2851  ff6e				   LeonardoTextLeft
   2852  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2853  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2854  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2855  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2856  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2857  ff73
   2858  ff73				   LeonardoTextRight
   2859  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2860  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2861  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2862  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2863  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2864  ff78
   2865  ff78				   VersionText
   2866  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2867  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2868  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2869  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2870  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2871  ff7d
   2872  ff7d
   2873  ff7d				   EndStaticText
   2874  ff7d
   2875  ff7d				   CarSprite0		; Upside down, Original Car
   2876  ff7d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2877  ff85				   CarSprite0NoPadding
   2878  ff85		       7e		      .byte.b	#%01111110
   2879  ff86		       24		      .byte.b	#%00100100
   2880  ff87		       bd		      .byte.b	#%10111101
   2881  ff88		       3c		      .byte.b	#%00111100
   2882  ff89		       bd		      .byte.b	#%10111101
   2883  ff8a		       3c		      .byte.b	#%00111100
   2884  ff8b
   2885  ff8b				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2886  ff8b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2887  ff93				   CarSprite1NoPadding
   2888  ff93		       bd		      .byte.b	#%10111101
   2889  ff94		       7e		      .byte.b	#%01111110
   2890  ff95		       5a		      .byte.b	#%01011010
   2891  ff96		       66		      .byte.b	#%01100110
   2892  ff97		       bd		      .byte.b	#%10111101
   2893  ff98		       3c		      .byte.b	#%00111100
   2894  ff99
   2895  ff99				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2896  ff99		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2897  ffa1				   CarSprite2NoPadding
   2898  ffa1		       7e		      .byte.b	#%01111110
   2899  ffa2		       a5		      .byte.b	#%10100101
   2900  ffa3		       42		      .byte.b	#%01000010
   2901  ffa4		       42		      .byte.b	#%01000010
   2902  ffa5		       bd		      .byte.b	#%10111101
   2903  ffa6		       7e		      .byte.b	#%01111110
   2904  ffa7
   2905  ffa7				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2906  ffa7		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2907  ffaf				   CarSprite3NoPadding
   2908  ffaf		       3c		      .byte.b	#%00111100
   2909  ffb0		       db		      .byte.b	#%11011011
   2910  ffb1		       db		      .byte.b	#%11011011
   2911  ffb2		       3c		      .byte.b	#%00111100
   2912  ffb3		       5a		      .byte.b	#%01011010
   2913  ffb4		       3c		      .byte.b	#%00111100
   2914  ffb5
   2915  ffb5				   TrafficSpeeds
   2916  ffb5		       00		      .byte.b	#$00	;  Trafic0 L
   2917  ffb6		       00		      .byte.b	#$00	;  Trafic0 H
   2918  ffb7		       0a		      .byte.b	#$0A	;  Trafic1 L
   2919  ffb8		       01		      .byte.b	#$01	;  Trafic1 H
   2920  ffb9		       e6		      .byte.b	#$E6	;  Trafic2 L
   2921  ffba		       00		      .byte.b	#$00	;  Trafic2 H
   2922  ffbb		       c2		      .byte.b	#$C2	;  Trafic3 L
   2923  ffbc		       00		      .byte.b	#$00	;  Trafic3 H
   2924  ffbd		       9e		      .byte.b	#$9E	;  Trafic4 L
   2925  ffbe		       00		      .byte.b	#$00	;  Trafic4 H
   2926  ffbf				   TrafficSpeedsHighDelta
   2927  ffbf		       00		      .byte.b	#$00	;  Trafic0 L
   2928  ffc0		       00		      .byte.b	#$00	;  Trafic0 H
   2929  ffc1		       0a		      .byte.b	#$0A	;  Trafic1 L
   2930  ffc2		       01		      .byte.b	#$01	;  Trafic1 H
   2931  ffc3		       c8		      .byte.b	#$C8	;  Trafic2 L
   2932  ffc4		       00		      .byte.b	#$00	;  Trafic2 H
   2933  ffc5		       86		      .byte.b	#$86	;  Trafic3 L
   2934  ffc6		       00		      .byte.b	#$00	;  Trafic3 H
   2935  ffc7		       44		      .byte.b	#$44	;  Trafic4 L
   2936  ffc8		       00		      .byte.b	#$00	;  Trafic4 H
   2937  ffc9
   2938  ffc9				   CarIdToSpriteAddressL
   2939  ffc9		       7d		      .byte.b	#<CarSprite0
   2940  ffca		       8b		      .byte.b	#<CarSprite1
   2941  ffcb		       99		      .byte.b	#<CarSprite2
   2942  ffcc		       a7		      .byte.b	#<CarSprite3
   2943  ffcd
   2944  ffcd				   CarIdToSpriteAddressH
   2945  ffcd		       ff		      .byte.b	#>CarSprite0
   2946  ffce		       ff		      .byte.b	#>CarSprite1
   2947  ffcf		       ff		      .byte.b	#>CarSprite2
   2948  ffd0		       ff		      .byte.b	#>CarSprite3
   2949  ffd1
   2950  ffd1				   EnemyCarIdToSpriteAddressL
   2951  ffd1		       85		      .byte.b	#<CarSprite0NoPadding
   2952  ffd2		       93		      .byte.b	#<CarSprite1NoPadding
   2953  ffd3		       a1		      .byte.b	#<CarSprite2NoPadding
   2954  ffd4		       af		      .byte.b	#<CarSprite3NoPadding
   2955  ffd5
   2956  ffd5				   EnemyCarIdToSpriteAddressH
   2957  ffd5		       ff		      .byte.b	#>CarSprite0NoPadding
   2958  ffd6		       ff		      .byte.b	#>CarSprite1NoPadding
   2959  ffd7		       ff		      .byte.b	#>CarSprite2NoPadding
   2960  ffd8		       ff		      .byte.b	#>CarSprite3NoPadding
   2961  ffd9
   2962  ffd9				   CarIdToAccelerateSpeed
   2963  ffd9		       80		      .byte.b	#128
   2964  ffda		       c0		      .byte.b	#192
   2965  ffdb		       60		      .byte.b	#96
   2966  ffdc		       c0		      .byte.b	#192
   2967  ffdd
   2968  ffdd				   CarIdToTimeoverBreakInterval 		; Glide
   2969  ffdd		       03		      .byte.b	#%00000011	;Every 4 frames
   2970  ffde		       03		      .byte.b	#%00000011	;Every 4 frames
   2971  ffdf		       0f		      .byte.b	#%00001111	;Every 16 frames
   2972  ffe0		       03		      .byte.b	#%00000011	;Every 4 frames
   2973  ffe1
   2974  ffe1				   CarIdToMaxSpeedL
   2975  ffe1		       80		      .byte.b	#$80
   2976  ffe2		       00		      .byte.b	#$00	; One less gear
   2977  ffe3		       80		      .byte.b	#$80
   2978  ffe4		       80		      .byte.b	#$80
   2979  ffe5
   2980  ffe5				   CarIdToMaxGear
   2981  ffe5		       05		      .byte.b	#5
   2982  ffe6		       04		      .byte.b	#4	; One less gear
   2983  ffe7		       05		      .byte.b	#5
   2984  ffe8		       05		      .byte.b	#5
   2985  ffe9
   2986  ffe9				   GearToBreakSpeedTable
   2987  ffe9		       09		      .byte.b	#(BREAK_SPEED - 1)
   2988  ffea		       09		      .byte.b	#(BREAK_SPEED - 1)
   2989  ffeb		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2990  ffec		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2991  ffed		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2992  ffee		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2993  ffef
   2994  ffef				   TrafficColorTable
   2995  ffef		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2996  fff0		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2997  fff1		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2998  fff2		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2999  fff3
   3000  fff3				   TrafficChanceTable
   3001  fff3		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3002  fff4		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3003  fff5		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3004  fff6		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3005  fff7
   3006  fff7				   TrafficTimeTable
   3007  fff7		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3008  fff8		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3009  fff9		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3010  fffa		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3011  fffb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3012  fffc
   3013  fffc
   3014  fffc					      org	$FFFC
   3015  fffc		       00 f0		      .word.w	BeforeStart
   3016  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
