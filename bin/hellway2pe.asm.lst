------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 37	   SCORE_FONT_COLOR_GOOD =	$37
     58  f000		       00 d8	   OP_SCORE_FONT_COLOR_GOOD =	$D8
     59  f000
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 56	   OP_SCORE_FONT_COLOR_BAD =	$56
     62  f000
     63  f000		       00 38	   SCORE_FONT_COLOR_START =	$38	;Cannot be the same as good, font colors = game state
     64  f000		       00 c8	   OP_SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     65  f000
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000		       00 ab	   OP_SCORE_FONT_COLOR_OVER =	$AB
     68  f000
     69  f000		       00 f9	   PLAYER0_COLOR =	$F9
     70  f000		       00 98	   PLAYER1_COLOR =	$98
     71  f000
     72  f000		       00 20	   PLAYER_0_X_START =	32	;
     73  f000		       00 29	   PLAYER_1_X_START =	41	;
     74  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     75  f000
     76  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     77  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     78  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     79  f000
     80  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     81  f000
     82  f000		       00 00	   BLACK      =	$00	;
     83  f000
     84  f000		       00 10	   MAX_GAME_MODE =	16
     85  f000
     86  f000		       00 08	   PARALLAX_SIZE =	8
     87  f000
     88  f000		       00 05	   HALF_TEXT_SIZE =	5
     89  f000
     90  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     91  f000
     92  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     93  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     94  f000		       00 00	   QR_CODE_COLOR =	$00
     95  f000		       00 19	   QR_CODE_SIZE =	25
     96  f000
     97  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     98  f000
     99  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    100  f000		       00 29	   VBLANK_TIMER =	41
    101  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    102  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    103  f000
    104  f000		       00 08	   ENGINE_VOLUME =	8
    105  f000
    106  f000		       00 08	   CAR_SIZE   =	8
    107  f000
    108  f000		       00 80	   GRP0Cache  =	$80
    109  f000		       00 81	   PF0Cache   =	$81
    110  f000		       00 82	   PF1Cache   =	$82
    111  f000		       00 83	   PF2Cache   =	$83
    112  f000		       00 84	   GRP1Cache  =	$84
    113  f000		       00 85	   ENABLCache =	$85
    114  f000		       00 86	   ENAM0Cache =	$86
    115  f000		       00 87	   ENAM1Cache =	$87
    116  f000
    117  f000		       00 8c	   FrameCount0 =	$8C	;
    118  f000		       00 8d	   FrameCount1 =	$8D	;
    119  f000
    120  f000		       00 8e	   CollisionCounter =	$8E
    121  f000		       00 8f	   OpCollisionCounter =	$8F
    122  f000
    123  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    124  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    125  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    126  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    127  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    128  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    129  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    130  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    131  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000		       00 b4	   Tmp4       =	$B4
    139  f000		       00 b5	   Tmp5       =	$B5
    140  f000
    141  f000		       00 b6	   Player0X   =	$B6
    142  f000		       00 b7	   Player1X   =	$B7
    143  f000		       00 b8	   CountdownTimer =	$B8
    144  f000		       00 b9	   OpCountdownTimer =	$B9
    145  f000		       00 ba	   Traffic0Msb =	$BA
    146  f000		       00 bb	   OpTraffic0Msb =	$BB
    147  f000		       00 bc	   SwitchDebounceCounter =	$BC
    148  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    149  f000		       00 be	   TrafficChance =	$BE
    150  f000		       00 bf	   OpTrafficChance =	$BF
    151  f000
    152  f000		       00 c0	   CheckpointTime =	$C0
    153  f000		       00 c1	   OpCheckpointTime =	$C1
    154  f000		       00 c2	   TrafficColor =	$C2
    155  f000		       00 c3	   OpTrafficColor =	$C3
    156  f000		       00 c4	   CurrentDifficulty =	$C4
    157  f000		       00 c5	   OpCurrentDifficulty =	$C5
    158  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    159  f000
    160  f000		       00 c7	   CurrentCarId =	$C7
    161  f000		       00 c8	   OpCurrentCarId =	$C8
    162  f000
    163  f000		       00 c9	   ScoreFontColor =	$C9
    164  f000		       00 ca	   OpScoreFontColor =	$CA
    165  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    166  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    167  f000		       00 cd	   NextCheckpoint =	$CD
    168  f000		       00 ce	   OpNextCheckpoint =	$CE
    169  f000		       00 cf	   OpponentLine =	$CF
    170  f000
    171  f000		       00 d0	   ScoreD0    =	$D0
    172  f000		       00 d1	   ScoreD1    =	$D1
    173  f000		       00 d2	   ScoreD2    =	$D2
    174  f000		       00 d3	   ScoreD3    =	$D3
    175  f000		       00 d4	   ScoreD4    =	$D4
    176  f000
    177  f000		       00 d5	   Gear       =	$D5
    178  f000		       00 d6	   OpGear     =	$D6
    179  f000
    180  f000		       00 d7	   CarSpritePointerL =	$D7
    181  f000		       00 d8	   CarSpritePointerH =	$D8
    182  f000
    183  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    184  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    185  f000
    186  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    187  f000
    188  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    189  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    190  f000
    191  f000		       00 de	   Player0SpeedL =	$DE
    192  f000		       00 df	   Player1SpeedL =	$DF
    193  f000		       00 f0	   Player0SpeedH =	$F0
    194  f000		       00 f1	   Player1SpeedH =	$F1
    195  f000
    196  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    197  f000
    198  f000							;generic start up stuff, put zero in almost all...
    199  f000				   BeforeStart		;All variables that are kept on game reset or select
    200  f000		       a0 00		      LDY	#0
    201  f002		       84 bc		      STY	SwitchDebounceCounter
    202  f004		       84 c4		      STY	CurrentDifficulty
    203  f006		       84 c5		      STY	OpCurrentDifficulty
    204  f008		       84 bd		      STY	GameStatus
    205  f00a		       84 c7		      STY	CurrentCarId
    206  f00c		       84 c8		      STY	OpCurrentCarId
    207  f00e		       a0 10		      LDY	#16
    208  f010		       84 c6		      STY	GameMode
    209  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    210  f014
    211  f014				   Start
    212  f014		       a9 02		      LDA	#2
    213  f016		       85 00		      STA	VSYNC
    214  f018		       85 02		      STA	WSYNC
    215  f01a		       85 02		      STA	WSYNC
    216  f01c		       85 02		      STA	WSYNC
    217  f01e		       a9 00		      LDA	#0	;2
    218  f020		       85 00		      STA	VSYNC	;3
    219  f022
    220  f022		       78		      SEI
    221  f023		       d8		      CLD
    222  f024		       a2 ff		      LDX	#$FF
    223  f026		       9a		      TXS
    224  f027
    225  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    226  f029				   CleanMem
    227  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    228  f02b		       f0 1a		      BEQ	SkipClean
    229  f02d		       e0 c6		      CPX	#GameMode
    230  f02f		       f0 16		      BEQ	SkipClean
    231  f031		       e0 c7		      CPX	#CurrentCarId
    232  f033		       f0 12		      BEQ	SkipClean
    233  f035		       e0 c8		      CPX	#OpCurrentCarId
    234  f037		       f0 0e		      BEQ	SkipClean
    235  f039		       e0 c4		      CPX	#CurrentDifficulty
    236  f03b		       f0 0a		      BEQ	SkipClean
    237  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    238  f03f		       f0 06		      BEQ	SkipClean
    239  f041		       e0 bd		      CPX	#GameStatus
    240  f043		       f0 02		      BEQ	SkipClean
    241  f045		       95 00		      STA	0,X
    242  f047				   SkipClean
    243  f047		       e8		      INX
    244  f048		       d0 df		      BNE	CleanMem
    245  f04a
    246  f04a		       a9 d5		      LDA	#213
    247  f04c		       8d 96 02 	      STA	TIM64T	;3	
    248  f04f
    249  f04f							;Setting some variables...
    250  f04f
    251  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    252  f04f		       85 02		      STA	WSYNC	;We will set player position
    253  f051		       20 16 f7 	      JSR	DefaultOffsets
    254  f054
    255  f054		       ad 76 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    256  f057		       85 de		      STA	Player0SpeedL
    257  f059		       85 df		      STA	Player1SpeedL
    258  f05b
    259  f05b							;SLEEP 11;18
    260  f05b		       a2 00		      LDX	#0
    261  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    262  f060		       85 db		      STA	StartSWCHB	; For game over
    263  f062		       29 c0		      AND	#%11000000
    264  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    265  f066		       e8		      INX
    266  f067		       c9 80		      CMP	#%10000000
    267  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    268  f06b		       e8		      INX
    269  f06c		       c9 40		      CMP	#%01000000
    270  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    271  f070		       e8		      INX
    272  f071
    273  f071				   StoreCurrentDifficulty
    274  f071		       86 c4		      STX	CurrentDifficulty
    275  f073		       86 c5		      STX	OpCurrentDifficulty
    276  f075		       a2 00		      LDX	#0
    277  f077		       20 ce f6 	      JSR	ConfigureDifficulty
    278  f07a		       e8		      INX
    279  f07b		       20 ce f6 	      JSR	ConfigureDifficulty
    280  f07e
    281  f07e				   SetGameNotRunning
    282  f07e		       a9 00		      LDA	#0
    283  f080		       85 bd		      STA	GameStatus
    284  f082
    285  f082				   ConfigureTimer
    286  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    287  f084		       85 b8		      STA	CountdownTimer	;3
    288  f086		       85 b9		      STA	OpCountdownTimer	;3
    289  f088
    290  f088				   ConfigurePlayer1XPosition
    291  f088		       a9 29		      LDA	#PLAYER_1_X_START	;2
    292  f08a		       85 b7		      STA	Player1X	;3
    293  f08c
    294  f08c				   ConfigureOpNextCheckpoint
    295  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    296  f08e		       85 ce		      STA	OpNextCheckpoint
    297  f090
    298  f090				   HPositioning 		; Avoid sleep doing needed stuff
    299  f090		       85 02		      STA	WSYNC
    300  f092
    301  f092				   ConfigurePlayer0XPosition
    302  f092		       a9 20		      LDA	#PLAYER_0_X_START	;2
    303  f094		       85 b6		      STA	Player0X	;3
    304  f096
    305  f096				   ConfigureMissileSize
    306  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    307  f098		       85 04		      STA	NUSIZ0	;3
    308  f09a		       85 05		      STA	NUSIZ1	;3
    309  f09c
    310  f09c				   ConfigureNextCheckpoint
    311  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    312  f09e		       85 cd		      STA	NextCheckpoint
    313  f0a0
    314  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    315  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	5	;
      1  f0a2				   .CYCLES    SET	5
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    317  f0a5		       85 12		      STA	RESM0
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    319  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    321  f0ab		       85 13		      STA	RESM1
      0  f0ad					      SLEEP	3
      1  f0ad				   .CYCLES    SET	3
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad					      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad					      ELSE
     12  f0ad		       24 00		      bit	VSYNC
     13  f0af					      ENDIF
     14  f0af				   .CYCLES    SET	.CYCLES - 3
     15  f0af					      ENDIF
     16  f0af
     17  f0af				  -	      REPEAT	.CYCLES / 2
     18  f0af				  -	      nop
     19  f0af					      REPEND
    323  f0af
    324  f0af		       a9 d0		      LDA	#$D0
    325  f0b1		       85 24		      STA	HMBL
    326  f0b3		       85 22		      STA	HMM0
    327  f0b5		       85 23		      STA	HMM1
    328  f0b7		       85 02		      STA	WSYNC
    329  f0b9		       85 2a		      STA	HMOVE
    330  f0bb		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    331  f0bd		       85 2b		      STA	HMCLR
      0  f0bf					      SLEEP	31
      1  f0bf				   .CYCLES    SET	31
      2  f0bf
      3  f0bf				  -	      IF	.CYCLES < 2
      4  f0bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bf				  -	      ERR
      6  f0bf					      ENDIF
      7  f0bf
      8  f0bf					      IF	.CYCLES & 1
      9  f0bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bf				  -	      nop	0
     11  f0bf					      ELSE
     12  f0bf		       24 00		      bit	VSYNC
     13  f0c1					      ENDIF
     14  f0c1				   .CYCLES    SET	.CYCLES - 3
     15  f0c1					      ENDIF
     16  f0c1
     17  f0c1					      REPEAT	.CYCLES / 2
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     19  f0cf					      REPEND
    333  f0cf		       85 10		      STA	RESP0
    334  f0d1		       85 11		      STA	RESP1
    335  f0d3
    336  f0d3				   WaitResetToEnd
    337  f0d3		       ad 84 02 	      LDA	INTIM
    338  f0d6		       d0 fb		      BNE	WaitResetToEnd
    339  f0d8
    340  f0d8				   MainLoop
    341  f0d8		       a9 02		      LDA	#2
    342  f0da		       85 00		      STA	VSYNC
    343  f0dc		       85 02		      STA	WSYNC
    344  f0de		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    345  f0e0							;Some free cycles here!
    346  f0e0				   PrepareMaxHMove
    347  f0e0		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    348  f0e2		       85 09		      STA	COLUBK
      0  f0e4					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e4				   .CYCLES    SET	24 - 11
      2  f0e4
      3  f0e4				  -	      IF	.CYCLES < 2
      4  f0e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e4				  -	      ERR
      6  f0e4					      ENDIF
      7  f0e4
      8  f0e4					      IF	.CYCLES & 1
      9  f0e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e4				  -	      nop	0
     11  f0e4					      ELSE
     12  f0e4		       24 00		      bit	VSYNC
     13  f0e6					      ENDIF
     14  f0e6				   .CYCLES    SET	.CYCLES - 3
     15  f0e6					      ENDIF
     16  f0e6
     17  f0e6					      REPEAT	.CYCLES / 2
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    350  f0eb		       a9 80		      LDA	#$80
    351  f0ed		       85 24		      STA	HMBL
    352  f0ef		       85 22		      STA	HMM0
    353  f0f1		       85 23		      STA	HMM1
    354  f0f3		       85 20		      STA	HMP0
    355  f0f5		       85 21		      STA	HMP1
    356  f0f7		       85 02		      STA	WSYNC
    357  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    358  f0fb
    359  f0fb				   ConfigVBlankTimer
    360  f0fb		       a5 c6		      LDA	GameMode
    361  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    362  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    363  f101		       a9 29		      LDA	#VBLANK_TIMER
    364  f103		       4c 08 f1 	      JMP	SetVblankTimer
    365  f106				   SetVblankTimerQrCode
    366  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    367  f108
    368  f108				   SetVblankTimer
    369  f108		       85 02		      STA	WSYNC	;3
    370  f10a		       8d 96 02 	      STA	TIM64T	;3	
    371  f10d		       a9 00		      LDA	#0	;2
    372  f10f		       85 00		      STA	VSYNC	;3	
    373  f111
    374  f111				   RandomizeGame
    375  f111		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    376  f113		       d0 2d		      BNE	EndRandomizeGame
    377  f115		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    378  f117		       29 02		      AND	#%00000010
    379  f119		       f0 24		      BEQ	DeterministicGame
    380  f11b		       a6 96		      LDX	TrafficOffset1 + 2
    381  f11d		       bd 00 fe 	      LDA	AesTable,X
    382  f120		       45 8c		      EOR	FrameCount0
    383  f122		       85 96		      STA	TrafficOffset1 + 2
    384  f124		       85 a6		      STA	OpTrafficOffset1 + 2
    385  f126		       a6 9a		      LDX	TrafficOffset2 + 2
    386  f128		       bd 00 fe 	      LDA	AesTable,X
    387  f12b		       45 8c		      EOR	FrameCount0
    388  f12d		       85 9a		      STA	TrafficOffset2 + 2
    389  f12f		       85 aa		      STA	OpTrafficOffset2 + 2
    390  f131		       a6 9e		      LDX	TrafficOffset3 + 2
    391  f133		       bd 00 fe 	      LDA	AesTable,X
    392  f136		       45 8c		      EOR	FrameCount0
    393  f138		       85 9e		      STA	TrafficOffset3 + 2
    394  f13a		       85 ae		      STA	OpTrafficOffset3 + 2
    395  f13c		       4c 42 f1 	      JMP	EndRandomizeGame
    396  f13f
    397  f13f				   DeterministicGame
    398  f13f		       20 16 f7 	      JSR	DefaultOffsets
    399  f142
    400  f142				   EndRandomizeGame
    401  f142
    402  f142				   CountFrame
    403  f142		       e6 8c		      INC	FrameCount0	; 5
    404  f144		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    405  f146		       e6 8d		      INC	FrameCount1	; 5 
    406  f148				   SkipIncFC1
    407  f148
    408  f148				   CallDrawQrCode
    409  f148		       a5 c6		      LDA	GameMode
    410  f14a		       c9 10		      CMP	#MAX_GAME_MODE
    411  f14c		       d0 03		      BNE	TestIsGameRunning
    412  f14e		       4c a0 fa 	      JMP	DrawQrCode
    413  f151
    414  f151							;Does not update the game if not running
    415  f151				   TestIsGameRunning
    416  f151		       a5 bd		      LDA	GameStatus	;3
    417  f153		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    418  f155				   SelectCarWithDpadCall		; Only do it when game is stoped
    419  f155		       a2 00		      LDX	#0	; Player 0
    420  f157		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    421  f159		       85 b0		      STA	Tmp0
    422  f15b		       20 1a f8 	      JSR	SelectCarWithDpad
    423  f15e		       e8		      INX		; Player 1
    424  f15f		       20 1a f8 	      JSR	SelectCarWithDpad
    425  f162
    426  f162							; Needs to draw the opponent in the correct line even when game stoped  
    427  f162							; Draeing is a destructive operation
    428  f162		       20 2c f8 	      JSR	ProcessOpponentLine
    429  f165
    430  f165				   CallConfigureCarSprites
    431  f165		       20 d4 f7 	      JSR	ConfigureCarSprites
    432  f168				   SkipUpdateLogicJump
    433  f168		       4c a0 f1 	      JMP	SkipUpdateLogic
    434  f16b				   ContinueWithGameLogic
    435  f16b
    436  f16b				   CallEverySecond		; Timer for now
    437  f16b		       a2 00		      LDX	#0
    438  f16d		       20 52 fa 	      JSR	EverySecond
    439  f170		       e8		      INX
    440  f171		       20 52 fa 	      JSR	EverySecond
    441  f174
    442  f174				   CallProcessSpeed
    443  f174		       a2 00		      LDX	#0
    444  f176		       20 66 f9 	      JSR	ProcessSpeed
    445  f179
    446  f179		       e8		      INX		; Player 1
    447  f17a		       20 66 f9 	      JSR	ProcessSpeed
    448  f17d
    449  f17d				   CallUpdateOffsets
    450  f17d		       a2 00		      LDX	#0	; Player 0
    451  f17f		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    452  f181		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    453  f183		       a5 de		      LDA	Player0SpeedL
    454  f185		       85 b4		      STA	Tmp4
    455  f187		       a5 f0		      LDA	Player0SpeedH
    456  f189		       85 b5		      STA	Tmp5
    457  f18b		       20 13 f9 	      JSR	UpdateOffsets
    458  f18e
    459  f18e							;LDX Exits the call with correct value.
    460  f18e		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    461  f190		       85 b3		      STA	Tmp3
    462  f192		       a5 df		      LDA	Player1SpeedL
    463  f194		       85 b4		      STA	Tmp4
    464  f196		       a5 f1		      LDA	Player1SpeedH
    465  f198		       85 b5		      STA	Tmp5
    466  f19a		       20 13 f9 	      JSR	UpdateOffsets
    467  f19d
    468  f19d				   CallProcessOpponentLine
    469  f19d		       20 2c f8 	      JSR	ProcessOpponentLine
    470  f1a0
    471  f1a0				   SkipUpdateLogic		; Continue here if not paused
    472  f1a0
    473  f1a0				   CallStatusUpdateSbr
    474  f1a0		       a2 00		      LDX	#0
    475  f1a2		       20 5f fa 	      JSR	CalculateGear
    476  f1a5		       20 6c fa 	      JSR	ProcessScoreFontColor
    477  f1a8		       e8		      INX
    478  f1a9		       20 5f fa 	      JSR	CalculateGear
    479  f1ac		       20 6c fa 	      JSR	ProcessScoreFontColor
    480  f1af
    481  f1af				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    482  f1af		       a5 8c		      LDA	FrameCount0
    483  f1b1		       29 01		      AND	#%00000001
    484  f1b3		       d0 0c		      BNE	CallProcessPlayer1Status
    485  f1b5				   CallProcessPlayer0Status
    486  f1b5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    487  f1b7		       85 b0		      STA	Tmp0
    488  f1b9		       a2 00		      LDX	#0
    489  f1bb		       20 09 fa 	      JSR	ProcessPlayerStatus
    490  f1be		       4c ca f1 	      JMP	EndCallProcessPlayerStatus
    491  f1c1				   CallProcessPlayer1Status
    492  f1c1		       a5 a2		      LDA	OpTrafficOffset0 + 2
    493  f1c3		       85 b0		      STA	Tmp0
    494  f1c5		       a2 01		      LDX	#1
    495  f1c7		       20 09 fa 	      JSR	ProcessPlayerStatus
    496  f1ca				   EndCallProcessPlayerStatus
    497  f1ca
    498  f1ca				   CallProcessPlayerSprites
    499  f1ca		       20 d4 f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    500  f1cd
    501  f1cd				   CallProcessSound		; We might save cycles by updating one channel per frame.
    502  f1cd		       a2 00		      LDX	#0
    503  f1cf		       a5 92		      LDA	TrafficOffset0 + 2
    504  f1d1		       85 b1		      STA	Tmp1
    505  f1d3		       20 e3 f5 	      JSR	ProcessSound
    506  f1d6		       e8		      INX		; Player 1
    507  f1d7		       a5 a2		      LDA	OpTrafficOffset0 + 2
    508  f1d9		       85 b1		      STA	Tmp1
    509  f1db		       20 e3 f5 	      JSR	ProcessSound
    510  f1de
    511  f1de				   ChooseTextSide		; 
    512  f1de		       a5 8c		      LDA	FrameCount0	;3
    513  f1e0		       29 01		      AND	#%00000001
    514  f1e2		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    515  f1e4		       4c 91 f2 	      JMP	RightScoreWrite
    516  f1e7
    517  f1e7				   LeftScoreWrite
    518  f1e7		       a5 bd		      LDA	GameStatus
    519  f1e9		       f0 11		      BEQ	PrintHellwayLeft
    520  f1eb		       a5 c9		      LDA	ScoreFontColor
    521  f1ed		       c9 37		      CMP	#SCORE_FONT_COLOR_GOOD
    522  f1ef		       f0 42		      BEQ	PrintPlayer0Checkpoint
    523  f1f1		       c9 38		      CMP	#SCORE_FONT_COLOR_START
    524  f1f3		       f0 46		      BEQ	PrintPlayer0StartGame
    525  f1f5		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    526  f1f7		       f0 29		      BEQ	ProcessPlayer0OverText
    527  f1f9				   ContinueP0Score
    528  f1f9		       4c 4a f2 	      JMP	Digit0Timer
    529  f1fc
    530  f1fc				   PrintHellwayLeft
    531  f1fc		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    532  f1fe		       30 08		      BMI	ContinueWithDefaultLeftText
    533  f200				   Player0IsReady
    534  f200		       a2 25		      LDX	#<ReadyText
    535  f202		       20 2b f7 	      JSR	PrintStaticText
    536  f205		       4c 3b f3 	      JMP	RightScoreWriteEnd	;3
    537  f208				   ContinueWithDefaultLeftText
    538  f208		       a5 8d		      LDA	FrameCount1
    539  f20a		       29 01		      AND	#1
    540  f20c		       d0 05		      BNE	PrintCreditsLeft
    541  f20e		       a2 03		      LDX	#<HellwayLeftText - 1	; Padding
    542  f210		       4c 15 f2 	      JMP	PrintGameMode
    543  f213				   PrintCreditsLeft
    544  f213		       a2 0c		      LDX	#<OpbText - 1	; Padding
    545  f215
    546  f215				   PrintGameMode
    547  f215		       20 2b f7 	      JSR	PrintStaticText
    548  f218		       a6 c6		      LDX	GameMode
    549  f21a		       bd 6c fc 	      LDA	FontLookup,X	;4 
    550  f21d		       85 d0		      STA	ScoreD0	;3
    551  f21f		       4c 3b f3 	      JMP	RightScoreWriteEnd	;3
    552  f222
    553  f222				   ProcessPlayer0OverText
    554  f222		       a5 f2		      LDA	IsOpponentInFront
    555  f224		       30 05		      BMI	PrintPlayer0Lose
    556  f226				   PrintPlayer0Win
    557  f226		       a2 1a		      LDX	#<WinText
    558  f228		       4c 2d f2 	      JMP	PrintPlayer0Status
    559  f22b				   PrintPlayer0Lose
    560  f22b		       a2 1d		      LDX	#<LoseText
    561  f22d				   PrintPlayer0Status
    562  f22d		       20 2b f7 	      JSR	PrintStaticText
    563  f230		       4c 6a f2 	      JMP	DistanceCheckpointCount	;3
    564  f233
    565  f233				   PrintPlayer0Checkpoint
    566  f233		       a2 00		      LDX	#<CheckpointText
    567  f235		       20 2b f7 	      JSR	PrintStaticText
    568  f238		       4c 40 f2 	      JMP	PrintPlayer0ScoreHoldChange	;3
    569  f23b
    570  f23b				   PrintPlayer0StartGame
    571  f23b		       a2 16		      LDX	#<GoText
    572  f23d		       20 2b f7 	      JSR	PrintStaticText
    573  f240
    574  f240				   PrintPlayer0ScoreHoldChange
    575  f240		       a2 00		      LDX	#0
    576  f242		       20 7c fa 	      JSR	PrintScoreHoldChange
    577  f245		       85 d4		      STA	ScoreD4
    578  f247		       4c 3b f3 	      JMP	RightScoreWriteEnd	;3
    579  f24a
    580  f24a				   Digit0Timer
    581  f24a		       a5 b8		      LDA	CountdownTimer	;3
    582  f24c		       85 b0		      STA	Tmp0
    583  f24e		       20 06 f8 	      JSR	BINBCD8
    584  f251							; LDA Tmp1 Also returned in A
    585  f251		       29 0f		      AND	#%00001111	;2
    586  f253		       aa		      TAX		; 2
    587  f254		       bd 6c fc 	      LDA	FontLookup,X	;4 
    588  f257		       85 d1		      STA	ScoreD1	;3
    589  f259
    590  f259				   Digit1Timer
    591  f259		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    592  f25b		       4a		      LSR		; 2
    593  f25c		       4a		      LSR		; 2
    594  f25d		       4a		      LSR		; 2
    595  f25e		       4a		      LSR		; 2
    596  f25f		       aa		      TAX		; 2
    597  f260		       bd 6c fc 	      LDA	FontLookup,X	;4
    598  f263		       85 d0		      STA	ScoreD0	;3
    599  f265
    600  f265				   SpeedBar
    601  f265		       a2 00		      LDX	#0
    602  f267		       20 87 fa 	      JSR	PrintSpeedBar
    603  f26a
    604  f26a				   DistanceCheckpointCount		; Will run all letters in the future
    605  f26a		       a5 ba		      LDA	Traffic0Msb
    606  f26c		       29 01		      AND	#%00000001
    607  f26e		       0a		      ASL
    608  f26f		       0a		      ASL
    609  f270		       0a		      ASL
    610  f271		       0a		      ASL
    611  f272		       85 b0		      STA	Tmp0
    612  f274		       a5 92		      LDA	TrafficOffset0 + 2	;3
    613  f276		       29 f0		      AND	#%11110000	;2
    614  f278		       4a		      LSR
    615  f279		       4a		      LSR
    616  f27a		       4a		      LSR
    617  f27b		       4a		      LSR
    618  f27c		       05 b0		      ORA	Tmp0
    619  f27e		       aa		      TAX		; 2
    620  f27f		       bd 6c fc 	      LDA	FontLookup,X	;4 
    621  f282		       85 d3		      STA	ScoreD3	;3
    622  f284
    623  f284				   DistanceBar		; 16 subdivisions per checkpoint
    624  f284		       a5 92		      LDA	TrafficOffset0 + 2	;3
    625  f286		       29 0f		      AND	#%00001111	;2
    626  f288		       aa		      TAX		; 2
    627  f289		       bd 8c fc 	      LDA	BarLookup,X	;4 
    628  f28c		       85 d4		      STA	ScoreD4	;3
    629  f28e
    630  f28e				   EndDrawDistance
    631  f28e		       4c 3b f3 	      JMP	RightScoreWriteEnd	;3
    632  f291
    633  f291				   RightScoreWrite
    634  f291		       a5 bd		      LDA	GameStatus
    635  f293		       f0 11		      BEQ	PrintHellwayRight
    636  f295		       a5 ca		      LDA	OpScoreFontColor
    637  f297		       c9 d8		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    638  f299		       f0 45		      BEQ	PrintPlayer1Checkpoint
    639  f29b		       c9 c8		      CMP	#OP_SCORE_FONT_COLOR_START
    640  f29d		       f0 49		      BEQ	PrintPlayer1StartGame
    641  f29f		       c9 ab		      CMP	#OP_SCORE_FONT_COLOR_OVER
    642  f2a1		       f0 2c		      BEQ	ProcessPlayer1OverText
    643  f2a3				   ContinueP1Score
    644  f2a3		       4c 06 f3 	      JMP	OpDigit1Timer
    645  f2a6
    646  f2a6				   PrintHellwayRight
    647  f2a6		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    648  f2a8		       30 08		      BMI	ContinueWithDefaultRightText
    649  f2aa				   Player1IsReady
    650  f2aa		       a2 25		      LDX	#<ReadyText
    651  f2ac		       20 2b f7 	      JSR	PrintStaticText
    652  f2af		       4c 3b f3 	      JMP	RightScoreWriteEnd	;3
    653  f2b2				   ContinueWithDefaultRightText
    654  f2b2		       a5 8d		      LDA	FrameCount1
    655  f2b4		       29 01		      AND	#1
    656  f2b6		       d0 05		      BNE	PrintCreditsRight
    657  f2b8		       a2 08		      LDX	#<HellwayRightText
    658  f2ba		       4c c9 f2 	      JMP	PrintRightIntro
    659  f2bd				   PrintCreditsRight
    660  f2bd		       a5 8d		      LDA	FrameCount1
    661  f2bf		       29 02		      AND	#%00000010
    662  f2c1		       f0 04		      BEQ	PrintYearText
    663  f2c3				   PrintBuildNumberText
    664  f2c3		       a2 20		      LDX	#<BuildNumberText
    665  f2c5		       d0 02		      BNE	PrintRightIntro	; Save one byte, it will neve be equal in not first text constant...
    666  f2c7				   PrintYearText
    667  f2c7		       a2 11		      LDX	#<YearText
    668  f2c9				   PrintRightIntro
    669  f2c9		       20 2b f7 	      JSR	PrintStaticText
    670  f2cc		       4c 3b f3 	      JMP	RightScoreWriteEnd
    671  f2cf
    672  f2cf				   ProcessPlayer1OverText
    673  f2cf		       a5 f2		      LDA	IsOpponentInFront
    674  f2d1		       30 05		      BMI	PrintPlayer1Lose
    675  f2d3				   PrintPlayer1Win
    676  f2d3		       a2 18		      LDX	#<WinText - 2
    677  f2d5		       4c da f2 	      JMP	PrintPlayer1Status
    678  f2d8				   PrintPlayer1Lose
    679  f2d8		       a2 1b		      LDX	#<LoseText - 2
    680  f2da				   PrintPlayer1Status
    681  f2da		       20 2b f7 	      JSR	PrintStaticText
    682  f2dd		       4c 17 f3 	      JMP	OpDistanceCheckpointCount
    683  f2e0
    684  f2e0				   PrintPlayer1Checkpoint
    685  f2e0		       a2 ff		      LDX	#<CheckpointText - 1
    686  f2e2		       20 2b f7 	      JSR	PrintStaticText
    687  f2e5		       4c ed f2 	      JMP	PrintPlayer1ScoreHoldChange	;3
    688  f2e8
    689  f2e8				   PrintPlayer1StartGame
    690  f2e8		       a2 15		      LDX	#<GoText - 1
    691  f2ea		       20 2b f7 	      JSR	PrintStaticText
    692  f2ed
    693  f2ed				   PrintPlayer1ScoreHoldChange
    694  f2ed		       a2 01		      LDX	#1
    695  f2ef		       20 7c fa 	      JSR	PrintScoreHoldChange
    696  f2f2		       85 d0		      STA	ScoreD0
    697  f2f4		       4c 3b f3 	      JMP	RightScoreWriteEnd	;3
    698  f2f7
    699  f2f7				   OpDigit0Timer
    700  f2f7		       a5 b9		      LDA	OpCountdownTimer	;3
    701  f2f9		       85 b0		      STA	Tmp0
    702  f2fb		       20 06 f8 	      JSR	BINBCD8
    703  f2fe							; LDA Tmp1 Also returned in A
    704  f2fe		       29 0f		      AND	#%00001111	;2
    705  f300		       aa		      TAX		; 2
    706  f301		       bd 6c fc 	      LDA	FontLookup,X	;4 
    707  f304		       85 d4		      STA	ScoreD4	;3
    708  f306
    709  f306				   OpDigit1Timer
    710  f306		       a5 b1		      LDA	Tmp1	;3
    711  f308		       4a		      LSR		; 2
    712  f309		       4a		      LSR		; 2
    713  f30a		       4a		      LSR		; 2
    714  f30b		       4a		      LSR		; 2
    715  f30c		       aa		      TAX		; 2
    716  f30d		       bd 6c fc 	      LDA	FontLookup,X	;4
    717  f310		       85 d3		      STA	ScoreD3	;3
    718  f312
    719  f312				   OpSpeedBar
    720  f312		       a2 01		      LDX	#1
    721  f314		       20 87 fa 	      JSR	PrintSpeedBar
    722  f317
    723  f317				   OpDistanceCheckpointCount
    724  f317		       a5 bb		      LDA	OpTraffic0Msb
    725  f319		       29 01		      AND	#%00000001
    726  f31b		       0a		      ASL
    727  f31c		       0a		      ASL
    728  f31d		       0a		      ASL
    729  f31e		       0a		      ASL
    730  f31f		       85 b0		      STA	Tmp0
    731  f321		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    732  f323		       29 f0		      AND	#%11110000	;2
    733  f325		       4a		      LSR
    734  f326		       4a		      LSR
    735  f327		       4a		      LSR
    736  f328		       4a		      LSR
    737  f329		       05 b0		      ORA	Tmp0
    738  f32b		       aa		      TAX		; 2
    739  f32c		       bd 6c fc 	      LDA	FontLookup,X	;4 
    740  f32f		       85 d1		      STA	ScoreD1	;3
    741  f331
    742  f331				   OpDistanceBar		; 16 subdivisions per checkpoint
    743  f331		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    744  f333		       29 0f		      AND	#%00001111	;2
    745  f335		       aa		      TAX		; 2
    746  f336		       bd 8c fc 	      LDA	BarLookup,X	;4 
    747  f339		       85 d0		      STA	ScoreD0	;3
    748  f33b
    749  f33b				   ScoreWriteEnd
    750  f33b				   RightScoreWriteEnd
    751  f33b
    752  f33b				   ConfigurePFForScore
    753  f33b		       20 7d f6 	      JSR	ClearAll
    754  f33e		       a9 02		      LDA	#%00000010	; Score mode
    755  f340		       85 0a		      STA	CTRLPF
    756  f342		       a5 8c		      LDA	FrameCount0	;3
    757  f344		       29 01		      AND	#%00000001
    758  f346		       f0 0b		      BEQ	LeftScoreOn	; Half of the screen with the correct colors.
    759  f348				   RightScoreOn
    760  f348		       a5 ca		      LDA	OpScoreFontColor
    761  f34a		       85 07		      STA	COLUP1
    762  f34c		       a9 00		      LDA	#BACKGROUND_COLOR
    763  f34e		       85 06		      STA	COLUP0
    764  f350		       4c 5b f3 	      JMP	CallWaitForVblankEnd
    765  f353				   LeftScoreOn
    766  f353		       a5 c9		      LDA	ScoreFontColor
    767  f355		       85 06		      STA	COLUP0
    768  f357		       a9 00		      LDA	#BACKGROUND_COLOR
    769  f359		       85 07		      STA	COLUP1
    770  f35b
    771  f35b							; After here we are going to update the screen, No more heavy code
    772  f35b				   CallWaitForVblankEnd
    773  f35b		       20 a5 f7 	      JSR	WaitForVblankEnd
    774  f35e
    775  f35e				   DrawScoreHud
    776  f35e		       20 49 f7 	      JSR	PrintScore
    777  f361
    778  f361							; 4 lines to go crazy
    779  f361		       85 02		      STA	WSYNC
    780  f363							;STA HMOVE
    781  f363
    782  f363		       85 02		      STA	WSYNC
    783  f365		       85 2a		      STA	HMOVE
    784  f367
    785  f367				   PrepareForTraffic
    786  f367		       20 93 f6 	      JSR	ClearPF	; 32
    787  f36a
    788  f36a		       85 02		      STA	WSYNC
    789  f36c		       85 2a		      STA	HMOVE
    790  f36e		       85 02		      STA	WSYNC
    791  f370		       85 2a		      STA	HMOVE
    792  f372
    793  f372		       a9 30		      LDA	#%00110000	; 2 Score mode
    794  f374		       85 0a		      STA	CTRLPF	;3
    795  f376
    796  f376		       a5 8c		      LDA	FrameCount0	;3
    797  f378		       29 01		      AND	#%00000001	;2
    798  f37a		       aa		      TAX		;2
    799  f37b		       b5 c2		      LDA	TrafficColor,X	;4
    800  f37d		       85 08		      STA	COLUPF	;3
    801  f37f
    802  f37f		       a9 98		      LDA	#PLAYER1_COLOR	;2
    803  f381		       85 07		      STA	COLUP1	;3
    804  f383
    805  f383		       a5 c9		      LDA	ScoreFontColor	;3
    806  f385		       85 06		      STA	COLUP0	;3
    807  f387
    808  f387		       a5 ca		      LDA	OpScoreFontColor	;3
    809  f389		       85 07		      STA	COLUP1	;3
    810  f38b
    811  f38b		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    812  f38d
    813  f38d		       a5 8c		      LDA	FrameCount0	;Brach flag
    814  f38f		       29 01		      AND	#%00000001
    815  f391
    816  f391		       d0 03		      BNE	OpScanLoop	;2
    817  f393		       4c 50 f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    818  f396							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    819  f396
    820  f396							;main scanline loop...
    821  f396				   OpScanLoop
    822  f396		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    823  f398
    824  f398		       a5 80		      LDA	GRP0Cache	;3
    825  f39a		       85 1b		      STA	GRP0	;3
    826  f39c
    827  f39c		       a5 84		      LDA	GRP1Cache	;3
    828  f39e		       85 1c		      STA	GRP1	;3
    829  f3a0
    830  f3a0		       a5 85		      LDA	ENABLCache	;3
    831  f3a2		       85 1f		      STA	ENABL	;3
    832  f3a4
    833  f3a4		       a5 86		      LDA	ENAM0Cache	;3
    834  f3a6		       85 1d		      STA	ENAM0	;3
    835  f3a8
    836  f3a8		       a5 87		      LDA	ENAM1Cache	;3
    837  f3aa		       85 1e		      STA	ENAM1	;3
    838  f3ac
    839  f3ac		       a5 81		      LDA	PF0Cache	;3
    840  f3ae		       85 0d		      STA	PF0	;3
    841  f3b0
    842  f3b0		       a9 00		      LDA	#0	;2
    843  f3b2							;STA PF0	     ;3
    844  f3b2		       85 80		      STA	GRP0Cache	;3
    845  f3b4		       85 86		      STA	ENAM0Cache	;3
    846  f3b6		       85 85		      STA	ENABLCache	;3
    847  f3b8		       85 87		      STA	ENAM1Cache	; 3
    848  f3ba							;STA GRP1Cache ;3
    849  f3ba		       85 0d		      STA	PF0	;3
    850  f3bc							;STA PF2	     ;3
    851  f3bc
    852  f3bc		       a5 83		      LDA	PF2Cache	;3
    853  f3be		       85 0f		      STA	PF2	;3
    854  f3c0
    855  f3c0				   OpDrawCar0
    856  f3c0		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    857  f3c2		       b0 04		      BCS	OpSkipDrawCar	;2
    858  f3c4		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    859  f3c6		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    860  f3c8				   OpSkipDrawCar
    861  f3c8
    862  f3c8							;BEQ DrawTraffic3
    863  f3c8				   OpDrawTraffic1		; 33
    864  f3c8		       98		      TYA		; 2
    865  f3c9		       18		      CLC		; 2 
    866  f3ca		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    867  f3cc		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    868  f3ce		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    869  f3d0		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    870  f3d2		       4c d7 f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    871  f3d5				   OpEorOffsetWithCarry
    872  f3d5		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    873  f3d7				   OpAfterEorOffsetWithCarry		;17
    874  f3d7		       aa		      TAX		;2
    875  f3d8		       bd 00 fe 	      LDA	AesTable,X	; 4
    876  f3db		       c5 bf		      CMP	OpTrafficChance	;3
    877  f3dd		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    878  f3df		       a9 ff		      LDA	#$FF	;2
    879  f3e1		       85 86		      STA	ENAM0Cache	;3
    880  f3e3				   OpFinishDrawTraffic1
    881  f3e3
    882  f3e3				   OpErasePF2
    883  f3e3		       a9 00		      LDA	#0
    884  f3e5		       85 0f		      STA	PF2
    885  f3e7
    886  f3e7				   OpDrawTraffic2		; 33
    887  f3e7		       98		      TYA		; 2
    888  f3e8		       18		      CLC		; 2 
    889  f3e9		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    890  f3eb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    891  f3ed		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    892  f3ef		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    893  f3f1		       4c f6 f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    894  f3f4				   OpEorOffsetWithCarry2
    895  f3f4		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    896  f3f6				   OpAfterEorOffsetWithCarry2		;17
    897  f3f6		       aa		      TAX		;2
    898  f3f7		       bd 00 fe 	      LDA	AesTable,X	; 4
    899  f3fa		       c5 bf		      CMP	OpTrafficChance	;3
    900  f3fc		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    901  f3fe		       a9 02		      LDA	#%00000010	;2
    902  f400		       85 85		      STA	ENABLCache	;3
    903  f402				   OpFinishDrawTraffic2
    904  f402
    905  f402							;STA WSYNC ;65 / 137
    906  f402
    907  f402							; LDA Tmp0 ; Flicker this line if drawing car
    908  f402							; BEQ FinishDrawTraffic4
    909  f402				   OpDrawTraffic3		; 33
    910  f402		       98		      TYA		; 2
    911  f403		       18		      CLC		; 2 
    912  f404		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    913  f406		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    914  f408		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    915  f40a		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    916  f40c		       4c 11 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    917  f40f				   OpEorOffsetWithCarry3
    918  f40f		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    919  f411				   OpAfterEorOffsetWithCarry3		;17
    920  f411		       aa		      TAX		;2
    921  f412		       bd 00 fe 	      LDA	AesTable,X	; 4
    922  f415		       c5 bf		      CMP	OpTrafficChance	;3
    923  f417		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    924  f419		       a9 02		      LDA	#%00000010	;2
    925  f41b		       85 87		      STA	ENAM1Cache
    926  f41d				   OpFinishDrawTraffic3
    927  f41d
    928  f41d				   OpDrawOponent		;26
    929  f41d		       84 b0		      STY	Tmp0	;3
    930  f41f		       a4 cf		      LDY	OpponentLine	;3
    931  f421		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    932  f423		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    933  f425				   OpDrawOpponent
    934  f425		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    935  f427		       85 80		      STA	GRP0Cache	;3
    936  f429		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    937  f42b		       a4 b0		      LDY	Tmp0	;3
    938  f42d		       4c 41 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    939  f430				   OpSkipDrawOpponent
    940  f430		       c6 cf		      DEC	OpponentLine	;5
    941  f432		       a4 b0		      LDY	Tmp0	;3
    942  f434
    943  f434
    944  f434				   OpDrawTraffic0		; 21 2pe
    945  f434		       98		      TYA		; 2
    946  f435		       18		      CLC		; 2 
    947  f436		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    948  f438		       29 08		      AND	#%00001000	;2
    949  f43a		       f0 05		      BEQ	OpHasNoBorderP0	;3
    950  f43c				   OpHasBorderP0
    951  f43c		       a9 e0		      LDA	#%11100000	; 2
    952  f43e		       4c 43 f4 	      JMP	OpStoreBorderP0	; 3
    953  f441				   OpHasNoBorderP0
    954  f441		       a9 00		      LDA	#0	; 2
    955  f443				   OpStoreBorderP0
    956  f443		       85 81		      STA	PF0Cache	; 3
    957  f445		       85 83		      STA	PF2Cache	; 3
    958  f447
    959  f447				   OpSkipDrawTraffic0
    960  f447
    961  f447				   OpWhileScanLoop
    962  f447		       88		      DEY		;2
    963  f448		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    964  f44a		       4c 96 f3 	      JMP	OpScanLoop	;3
    965  f44d				   OpFinishScanLoop		; 7 209 of 222
    966  f44d		       4c 05 f5 	      JMP	FinishScanLoop
    967  f450
    968  f450							;main scanline loop...
    969  f450				   ScanLoop
    970  f450		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    971  f452
    972  f452		       a5 81		      LDA	PF0Cache	;3
    973  f454		       85 0d		      STA	PF0	;3
    974  f456
    975  f456		       a5 80		      LDA	GRP0Cache	;3
    976  f458		       85 1b		      STA	GRP0	;3
    977  f45a
    978  f45a		       a5 84		      LDA	GRP1Cache	;3
    979  f45c		       85 1c		      STA	GRP1	;3
    980  f45e
    981  f45e		       a5 86		      LDA	ENAM0Cache	;3
    982  f460		       85 1d		      STA	ENAM0	;3
    983  f462
    984  f462		       a5 85		      LDA	ENABLCache	;3
    985  f464		       85 1f		      STA	ENABL	;3
    986  f466
    987  f466		       a5 87		      LDA	ENAM1Cache	;3
    988  f468		       85 1e		      STA	ENAM1	;3
    989  f46a
    990  f46a		       a5 83		      LDA	PF2Cache	;3
    991  f46c		       85 0f		      STA	PF2	;3
    992  f46e
    993  f46e		       a9 00		      LDA	#0	;2
    994  f470		       85 0d		      STA	PF0	;3
    995  f472		       85 84		      STA	GRP1Cache	;3
    996  f474		       85 85		      STA	ENABLCache	;3
    997  f476		       85 86		      STA	ENAM0Cache	;3
    998  f478		       85 87		      STA	ENAM1Cache	; 3
    999  f47a							;STA GRP0Cache
   1000  f47a		       85 0f		      STA	PF2	;3
   1001  f47c
   1002  f47c				   DrawCar0
   1003  f47c		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1004  f47e		       b0 04		      BCS	SkipDrawCar	;2
   1005  f480		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1006  f482		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1007  f484				   SkipDrawCar
   1008  f484
   1009  f484							;BEQ DrawTraffic3
   1010  f484				   DrawTraffic1 		; 33
   1011  f484		       98		      TYA		; 2
   1012  f485		       18		      CLC		; 2 
   1013  f486		       65 95		      ADC	TrafficOffset1 + 1	;3
   1014  f488		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1015  f48a		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1016  f48c		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1017  f48e		       4c 93 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1018  f491				   EorOffsetWithCarry
   1019  f491		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1020  f493				   AfterEorOffsetWithCarry		;17
   1021  f493		       aa		      TAX		;2
   1022  f494		       bd 00 fe 	      LDA	AesTable,X	; 4
   1023  f497		       c5 be		      CMP	TrafficChance	;3
   1024  f499		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1025  f49b		       a9 ff		      LDA	#$FF	;2
   1026  f49d		       85 86		      STA	ENAM0Cache	;3
   1027  f49f				   FinishDrawTraffic1
   1028  f49f
   1029  f49f				   DrawTraffic2 		; 33
   1030  f49f		       98		      TYA		; 2
   1031  f4a0		       18		      CLC		; 2 
   1032  f4a1		       65 99		      ADC	TrafficOffset2 + 1	;3
   1033  f4a3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1034  f4a5		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1035  f4a7		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1036  f4a9		       4c ae f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1037  f4ac				   EorOffsetWithCarry2
   1038  f4ac		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1039  f4ae				   AfterEorOffsetWithCarry2		;17
   1040  f4ae		       aa		      TAX		;2
   1041  f4af		       bd 00 fe 	      LDA	AesTable,X	; 4
   1042  f4b2		       c5 be		      CMP	TrafficChance	;3
   1043  f4b4		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1044  f4b6		       a9 02		      LDA	#%00000010	;2
   1045  f4b8		       85 85		      STA	ENABLCache	;3
   1046  f4ba				   FinishDrawTraffic2
   1047  f4ba
   1048  f4ba							;STA WSYNC ;65 / 137
   1049  f4ba
   1050  f4ba							; LDA Tmp0 ; Flicker this line if drawing car
   1051  f4ba							; BEQ FinishDrawTraffic4
   1052  f4ba				   DrawTraffic3 		; 33
   1053  f4ba		       98		      TYA		; 2
   1054  f4bb		       18		      CLC		; 2 
   1055  f4bc		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1056  f4be		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1057  f4c0		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1058  f4c2		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1059  f4c4		       4c c9 f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1060  f4c7				   EorOffsetWithCarry3
   1061  f4c7		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1062  f4c9				   AfterEorOffsetWithCarry3		;17
   1063  f4c9		       aa		      TAX		;2
   1064  f4ca		       bd 00 fe 	      LDA	AesTable,X	; 4
   1065  f4cd		       c5 be		      CMP	TrafficChance	;3
   1066  f4cf		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1067  f4d1		       a9 02		      LDA	#%00000010	;2
   1068  f4d3		       85 87		      STA	ENAM1Cache
   1069  f4d5				   FinishDrawTraffic3
   1070  f4d5
   1071  f4d5
   1072  f4d5				   DrawOponent		;26
   1073  f4d5		       84 b0		      STY	Tmp0	;3
   1074  f4d7		       a4 cf		      LDY	OpponentLine	;3
   1075  f4d9		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1076  f4db		       b0 0b		      BCS	SkipDrawOpponent	;2
   1077  f4dd				   DrawOpponent
   1078  f4dd		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1079  f4df		       85 84		      STA	GRP1Cache	;3
   1080  f4e1		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1081  f4e3		       a4 b0		      LDY	Tmp0	;3
   1082  f4e5		       4c f9 f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1083  f4e8				   SkipDrawOpponent
   1084  f4e8		       c6 cf		      DEC	OpponentLine	;5
   1085  f4ea		       a4 b0		      LDY	Tmp0	;3
   1086  f4ec
   1087  f4ec				   DrawTraffic0 		; 21 2pe
   1088  f4ec		       98		      TYA		; 2
   1089  f4ed		       18		      CLC		; 2 
   1090  f4ee		       65 91		      ADC	TrafficOffset0 + 1	;3
   1091  f4f0		       29 08		      AND	#%00001000	;2
   1092  f4f2		       f0 05		      BEQ	HasNoBorderP0	;3
   1093  f4f4				   HasBorderP0
   1094  f4f4		       a9 e0		      LDA	#%11100000	; 2
   1095  f4f6		       4c fb f4 	      JMP	StoreBorderP0	; 3
   1096  f4f9				   HasNoBorderP0
   1097  f4f9		       a9 00		      LDA	#0	; 2
   1098  f4fb				   StoreBorderP0
   1099  f4fb		       85 81		      STA	PF0Cache	; 3
   1100  f4fd		       85 83		      STA	PF2Cache	; 3
   1101  f4ff
   1102  f4ff				   SkipDrawTraffic0
   1103  f4ff
   1104  f4ff				   WhileScanLoop
   1105  f4ff		       88		      DEY		;2
   1106  f500		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1107  f502		       4c 50 f4 	      JMP	ScanLoop	;3
   1108  f505				   FinishScanLoop		; 7 209 of 222
   1109  f505
   1110  f505		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1111  f507		       20 a2 f6 	      JSR	LoadAll
   1112  f50a		       85 02		      STA	WSYNC	; do stuff!
   1113  f50c		       85 02		      STA	WSYNC
   1114  f50e		       85 02		      STA	WSYNC
   1115  f510
   1116  f510				   PrepareOverscan
   1117  f510		       a9 02		      LDA	#2
   1118  f512		       85 02		      STA	WSYNC
   1119  f514							;STA HMOVE	; HMOVE 10
   1120  f514		       85 01		      STA	VBLANK
   1121  f516
   1122  f516		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1123  f518		       8d 96 02 	      STA	TIM64T
   1124  f51b
   1125  f51b		       85 2b		      STA	HMCLR	; Before we process car movement
   1126  f51d							;Read Fire Button before, will make it start the game for now.
   1127  f51d				   StartGame
   1128  f51d		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1129  f51f		       25 0d		      AND	INPT5	;3 player 1
   1130  f521		       30 3c		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1131  f523		       a5 8c		      LDA	FrameCount0
   1132  f525		       29 01		      AND	#%00000001
   1133  f527		       d0 36		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1134  f529		       a5 bd		      LDA	GameStatus	;3
   1135  f52b		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1136  f52d		       d0 30		      BNE	SkipGameStart
   1137  f52f		       a5 c6		      LDA	GameMode
   1138  f531		       c9 10		      CMP	#MAX_GAME_MODE
   1139  f533		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1140  f535		       a9 00		      LDA	#0
   1141  f537		       85 c6		      STA	GameMode
   1142  f539		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1143  f53b		       85 bc		      STA	SwitchDebounceCounter
   1144  f53d		       4c 5f f5 	      JMP	SkipGameStart
   1145  f540				   SetGameRunningIfBothPressing
   1146  f540		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1147  f542		       05 0d		      ORA	INPT5	;3 player 1
   1148  f544		       30 19		      BMI	SkipGameStart
   1149  f546				   SetGameRunning
   1150  f546		       e6 bd		      INC	GameStatus
   1151  f548		       a9 00		      LDA	#0	;
   1152  f54a		       85 8c		      STA	FrameCount0
   1153  f54c		       85 8d		      STA	FrameCount1
   1154  f54e		       a9 38		      LDA	#SCORE_FONT_COLOR_START
   1155  f550		       85 c9		      STA	ScoreFontColor
   1156  f552		       a9 c8		      LDA	#OP_SCORE_FONT_COLOR_START
   1157  f554		       85 ca		      STA	OpScoreFontColor
   1158  f556		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1159  f558		       85 cb		      STA	ScoreFontColorHoldChange
   1160  f55a		       85 cc		      STA	OpScoreFontColorHoldChange
   1161  f55c		       4c d3 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1162  f55f				   SkipGameStart
   1163  f55f
   1164  f55f				   ReadSwitches
   1165  f55f		       a6 bc		      LDX	SwitchDebounceCounter
   1166  f561		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1167  f563		       a9 01		      LDA	#%00000001
   1168  f565		       2c 82 02 	      BIT	SWCHB
   1169  f568		       d0 07		      BNE	SkipReset
   1170  f56a		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1171  f56c		       85 bc		      STA	SwitchDebounceCounter
   1172  f56e		       4c db f5 	      JMP	OverScanWaitBeforeReset
   1173  f571				   SkipReset
   1174  f571
   1175  f571				   GameModeSelect
   1176  f571		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1177  f573		       d0 22		      BNE	SkipGameSelect
   1178  f575		       a2 00		      LDX	#0
   1179  f577		       20 ce f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1180  f57a		       e8		      INX
   1181  f57b		       20 ce f6 	      JSR	ConfigureDifficulty
   1182  f57e				   ContinueGameSelect
   1183  f57e		       a9 02		      LDA	#%00000010
   1184  f580		       2c 82 02 	      BIT	SWCHB
   1185  f583		       d0 12		      BNE	SkipGameSelect
   1186  f585		       a6 c6		      LDX	GameMode
   1187  f587		       e0 10		      CPX	#MAX_GAME_MODE
   1188  f589		       f0 04		      BEQ	ResetGameMode
   1189  f58b		       e8		      INX
   1190  f58c		       4c 91 f5 	      JMP	StoreGameMode
   1191  f58f				   ResetGameMode
   1192  f58f		       a2 00		      LDX	#0
   1193  f591				   StoreGameMode
   1194  f591		       86 c6		      STX	GameMode
   1195  f593		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1196  f595		       85 bc		      STA	SwitchDebounceCounter
   1197  f597				   SkipGameSelect
   1198  f597		       4c 9c f5 	      JMP	EndReadSwitches
   1199  f59a				   DecrementSwitchDebounceCounter
   1200  f59a		       c6 bc		      DEC	SwitchDebounceCounter
   1201  f59c				   EndReadSwitches
   1202  f59c
   1203  f59c				   DoNotTurnBeforeStart
   1204  f59c							;STA HMCLR
   1205  f59c		       a5 bd		      LDA	GameStatus
   1206  f59e		       f0 33		      BEQ	OverScanWait
   1207  f5a0
   1208  f5a0							; Last thing, will overrride hmove
   1209  f5a0				   CallTestColisionAndMove
   1210  f5a0		       a2 00		      LDX	#0	; Player 0
   1211  f5a2							; Colision with traffic, each player check different flags,
   1212  f5a2		       a5 8c		      LDA	FrameCount0
   1213  f5a4		       29 01		      AND	#%00000001
   1214  f5a6		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1215  f5a8		       20 7d f8 	      JSR	IsOpponentColliding
   1216  f5ab		       05 01		      ORA	CXM1P
   1217  f5ad		       4a		      LSR
   1218  f5ae		       05 00		      ORA	CXM0P
   1219  f5b0		       05 02		      ORA	CXP0FB
   1220  f5b2							; ORA CXPPMM ; Collision between players will have its own rules
   1221  f5b2				   SkipColisionPlayer0		; Should not colide on opponent side.
   1222  f5b2		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1223  f5b4		       85 b2		      STA	Tmp2
   1224  f5b6		       20 91 f8 	      JSR	TestCollisionAndMove
   1225  f5b9
   1226  f5b9		       e8		      INX		; player 1
   1227  f5ba		       a5 8c		      LDA	FrameCount0
   1228  f5bc		       29 01		      AND	#%00000001
   1229  f5be		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1230  f5c0		       20 7d f8 	      JSR	IsOpponentColliding
   1231  f5c3		       05 00		      ORA	CXM0P
   1232  f5c5		       4a		      LSR
   1233  f5c6		       05 01		      ORA	CXM1P
   1234  f5c8		       05 03		      ORA	CXP1FB
   1235  f5ca				   SkipColisionPlayer1
   1236  f5ca		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1237  f5cc		       85 b2		      STA	Tmp2
   1238  f5ce		       20 91 f8 	      JSR	TestCollisionAndMove
   1239  f5d1
   1240  f5d1				   ClearCollision
   1241  f5d1		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1242  f5d3
   1243  f5d3				   OverScanWait
   1244  f5d3		       ad 84 02 	      LDA	INTIM
   1245  f5d6		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1246  f5d8		       4c d8 f0 	      JMP	MainLoop
   1247  f5db
   1248  f5db				   OverScanWaitBeforeReset
   1249  f5db		       ad 84 02 	      LDA	INTIM
   1250  f5de		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1251  f5e0		       4c 14 f0 	      JMP	Start
   1252  f5e3
   1253  f5e3				   Subroutines
   1254  f5e3
   1255  f5e3							;X Player
   1256  f5e3							;Tmp1 TrafficOffset 2
   1257  f5e3				   ProcessSound
   1258  f5e3				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1259  f5e3		       b5 c9		      LDA	ScoreFontColor,X	;3
   1260  f5e5		       dd b7 fc 	      CMP	PlayerToScoreOverColor,X	;2
   1261  f5e8		       f0 6b		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1262  f5ea		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X	;2
   1263  f5ed		       f0 29		      BEQ	PlayCheckpoint	;2
   1264  f5ef		       b5 8e		      LDA	CollisionCounter,X	;3
   1265  f5f1		       c9 e0		      CMP	#$E0	;2
   1266  f5f3		       b0 14		      BCS	PlayColision	;2
   1267  f5f5		       b5 cd		      LDA	NextCheckpoint,X	;3
   1268  f5f7		       38		      SEC		;2
   1269  f5f8		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1270  f5fa		       c9 02		      CMP	#$02	;2
   1271  f5fc		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1272  f5fe		       b5 b8		      LDA	CountdownTimer,X	; 3
   1273  f600		       f0 53		      BEQ	EngineSound	;2
   1274  f602		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1275  f604		       90 37		      BCC	PlayWarnTimeEnding	;4
   1276  f606		       4c 55 f6 	      JMP	EngineSound	;3
   1277  f609				   PlayColision
   1278  f609		       a9 1f		      LDA	#31
   1279  f60b		       95 17		      STA	AUDF0,X
   1280  f60d		       a9 08		      LDA	#8
   1281  f60f		       95 15		      STA	AUDC0,X
   1282  f611		       a9 08		      LDA	#8
   1283  f613		       95 19		      STA	AUDV0,X
   1284  f615		       4c 7c f6 	      JMP	EndSound
   1285  f618
   1286  f618				   PlayCheckpoint
   1287  f618		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1288  f61a		       4a		      LSR		;2
   1289  f61b		       4a		      LSR		;2
   1290  f61c		       4a		      LSR		;2
   1291  f61d		       95 17		      STA	AUDF0,X	;3
   1292  f61f		       a9 0c		      LDA	#12	;2
   1293  f621		       95 15		      STA	AUDC0,X	;3
   1294  f623		       a9 06		      LDA	#6	;2
   1295  f625		       95 19		      STA	AUDV0,X	;3
   1296  f627		       4c 7c f6 	      JMP	EndSound	;3
   1297  f62a
   1298  f62a				   PlayBeforeCheckpoint
   1299  f62a		       a5 8c		      LDA	FrameCount0	;3
   1300  f62c		       29 1c		      AND	#%00011100	;2
   1301  f62e		       09 03		      ORA	#%00000011	;2
   1302  f630		       95 17		      STA	AUDF0,X	;3
   1303  f632		       a9 0c		      LDA	#12	;2
   1304  f634		       95 15		      STA	AUDC0,X	;3
   1305  f636		       a9 03		      LDA	#3	;2
   1306  f638		       95 19		      STA	AUDV0,X	;3
   1307  f63a		       4c 7c f6 	      JMP	EndSound	;3
   1308  f63d
   1309  f63d				   PlayWarnTimeEnding
   1310  f63d		       a5 8c		      LDA	FrameCount0	;3
   1311  f63f		       29 04		      AND	#%00000100	;2
   1312  f641		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1313  f643		       18		      CLC		;2
   1314  f644		       a9 0a		      LDA	#10	;2
   1315  f646		       75 b8		      ADC	CountdownTimer,X	;2
   1316  f648		       95 17		      STA	AUDF0,X	;3
   1317  f64a		       a9 0c		      LDA	#12	;2
   1318  f64c		       95 15		      STA	AUDC0,X	;3
   1319  f64e		       a9 03		      LDA	#3	;2
   1320  f650		       95 19		      STA	AUDV0,X	;3
   1321  f652		       4c 7c f6 	      JMP	EndSound	;3
   1322  f655
   1323  f655				   EngineSound		;41
   1324  f655		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1325  f657		       95 19		      STA	AUDV0,X
   1326  f659		       b5 b8		      LDA	CountdownTimer,X	;3
   1327  f65b		       f0 1b		      BEQ	EngineOff	;2
   1328  f65d		       b4 d5		      LDY	Gear,X
   1329  f65f		       b5 de		      LDA	Player0SpeedL,X	;3
   1330  f661		       4a		      LSR		;2
   1331  f662		       4a		      LSR		;2
   1332  f663		       4a		      LSR		;2
   1333  f664		       29 0f		      AND	#%00001111	;2
   1334  f666		       85 b0		      STA	Tmp0	;3
   1335  f668		       b9 30 ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1336  f66b		       38		      SEC		;2
   1337  f66c		       e5 b0		      SBC	Tmp0	;3
   1338  f66e		       95 17		      STA	AUDF0,X	;3
   1339  f670		       b9 2a ff 	      LDA	EngineSoundType,Y	;4
   1340  f673		       95 15		      STA	AUDC0,X	;3
   1341  f675		       4c 7c f6 	      JMP	EndEngineSound	;3
   1342  f678				   EngineOff
   1343  f678				   MuteSound
   1344  f678		       a9 00		      LDA	#0
   1345  f67a		       95 15		      STA	AUDC0,X
   1346  f67c				   EndEngineSound
   1347  f67c				   EndSound
   1348  f67c		       60		      RTS
   1349  f67d
   1350  f67d				   ClearAll		; 58
   1351  f67d		       a9 00		      LDA	#0	;2
   1352  f67f		       85 1b		      STA	GRP0	;3
   1353  f681		       85 1c		      STA	GRP1	;3
   1354  f683		       85 1f		      STA	ENABL	;3
   1355  f685		       85 1d		      STA	ENAM0	;3
   1356  f687		       85 1e		      STA	ENAM1	;3
   1357  f689		       85 80		      STA	GRP0Cache	;3
   1358  f68b		       85 84		      STA	GRP1Cache	;3
   1359  f68d		       85 85		      STA	ENABLCache	;3
   1360  f68f		       85 86		      STA	ENAM0Cache	;3
   1361  f691		       85 87		      STA	ENAM1Cache	;3
   1362  f693
   1363  f693				   ClearPF		; 26
   1364  f693		       a9 00		      LDA	#0	;2
   1365  f695				   ClearPFSkipLDA0
   1366  f695		       85 0d		      STA	PF0	;3
   1367  f697		       85 0e		      STA	PF1	;3
   1368  f699		       85 0f		      STA	PF2	;3	
   1369  f69b		       85 81		      STA	PF0Cache	;3
   1370  f69d		       85 82		      STA	PF1Cache	;3
   1371  f69f		       85 83		      STA	PF2Cache	;3 
   1372  f6a1		       60		      RTS		;6
   1373  f6a2				   EndClearAll
   1374  f6a2
   1375  f6a2				   LoadAll		; 48
   1376  f6a2		       a5 81		      LDA	PF0Cache	;3
   1377  f6a4		       85 0d		      STA	PF0	;3
   1378  f6a6
   1379  f6a6		       a5 82		      LDA	PF1Cache	;3
   1380  f6a8		       85 0e		      STA	PF1	;3
   1381  f6aa
   1382  f6aa		       a5 83		      LDA	PF2Cache	;3
   1383  f6ac		       85 0f		      STA	PF2	;3
   1384  f6ae
   1385  f6ae		       a5 84		      LDA	GRP1Cache	;3
   1386  f6b0		       85 1c		      STA	GRP1	;3
   1387  f6b2
   1388  f6b2		       a5 85		      LDA	ENABLCache	;3
   1389  f6b4		       85 1f		      STA	ENABL	;3
   1390  f6b6
   1391  f6b6		       a5 86		      LDA	ENAM0Cache	;3
   1392  f6b8		       85 1d		      STA	ENAM0	;3
   1393  f6ba
   1394  f6ba		       a5 87		      LDA	ENAM1Cache	;3
   1395  f6bc		       85 1e		      STA	ENAM1	;3
   1396  f6be
   1397  f6be		       60		      RTS		;6
   1398  f6bf				   EndLoadAll
   1399  f6bf
   1400  f6bf				   NextDifficulty		;Is a SBR
   1401  f6bf		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1402  f6c1		       29 01		      AND	#%00000001
   1403  f6c3		       d0 24		      BNE	CheckRandomDifficulty
   1404  f6c5
   1405  f6c5		       b5 c4		      LDA	CurrentDifficulty,X
   1406  f6c7		       18		      CLC
   1407  f6c8		       69 01		      ADC	#1
   1408  f6ca		       29 03		      AND	#%00000011	; 0 to 3
   1409  f6cc		       95 c4		      STA	CurrentDifficulty,X
   1410  f6ce
   1411  f6ce				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1412  f6ce		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1413  f6d0		       b9 ac ff 	      LDA	TrafficChanceTable,Y
   1414  f6d3		       95 be		      STA	TrafficChance,X
   1415  f6d5		       b9 a8 ff 	      LDA	TrafficColorTable,Y
   1416  f6d8		       95 c2		      STA	TrafficColor,X
   1417  f6da
   1418  f6da		       a5 c6		      LDA	GameMode	;
   1419  f6dc		       29 01		      AND	#%00000001
   1420  f6de		       f0 03		      BEQ	UseNextDifficultyTime
   1421  f6e0		       4c e4 f6 	      JMP	StoreDifficultyTime
   1422  f6e3				   UseNextDifficultyTime
   1423  f6e3		       c8		      INY
   1424  f6e4				   StoreDifficultyTime
   1425  f6e4		       b9 b0 ff 	      LDA	TrafficTimeTable,Y
   1426  f6e7		       95 c0		      STA	CheckpointTime,X
   1427  f6e9
   1428  f6e9				   CheckRandomDifficulty
   1429  f6e9		       a5 c6		      LDA	GameMode
   1430  f6eb		       29 08		      AND	#%00001000	; Random difficulties
   1431  f6ed		       f0 26		      BEQ	ReturnFromNextDifficulty
   1432  f6ef				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1433  f6ef		       a5 f2		      LDA	IsOpponentInFront
   1434  f6f1		       30 12		      BMI	UseOpponentChance
   1435  f6f3		       a5 cf		      LDA	OpponentLine	; Same line
   1436  f6f5		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1437  f6f7		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1438  f6f9		       a4 8c		      LDY	FrameCount0
   1439  f6fb		       b9 00 fe 	      LDA	AesTable,Y
   1440  f6fe							;EOR TrafficChance, no need, lets make life simple
   1441  f6fe		       29 3f		      AND	#%00111111
   1442  f700		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1443  f702		       4c 15 f7 	      JMP	ReturnFromNextDifficulty
   1444  f705				   UseOpponentChance
   1445  f705		       8a		      TXA
   1446  f706		       49 01		      EOR	#%00000001	; Reverts the player
   1447  f708		       aa		      TAX
   1448  f709		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1449  f70b		       85 b3		      STA	Tmp3
   1450  f70d		       8a		      TXA
   1451  f70e		       49 01		      EOR	#%00000001	; Restors the player
   1452  f710		       aa		      TAX
   1453  f711		       a5 b3		      LDA	Tmp3
   1454  f713		       95 be		      STA	TrafficChance,X
   1455  f715
   1456  f715				   ReturnFromNextDifficulty
   1457  f715		       60		      RTS
   1458  f716
   1459  f716				   DefaultOffsets
   1460  f716		       a9 20		      LDA	#$20
   1461  f718		       85 96		      STA	TrafficOffset1 + 2
   1462  f71a		       85 a6		      STA	OpTrafficOffset1 + 2
   1463  f71c		       a9 40		      LDA	#$40
   1464  f71e		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1465  f720		       85 aa		      STA	OpTrafficOffset2 + 2
   1466  f722		       a9 60		      LDA	#$60
   1467  f724		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1468  f726		       85 ae		      STA	OpTrafficOffset3 + 2
   1469  f728		       a9 80		      LDA	#$80
   1470  f72a		       60		      RTS
   1471  f72b
   1472  f72b				   PrintStaticText		; Preload X with the offset referent to StaticText
   1473  f72b		       bd 00 ff 	      LDA	StaticText,X
   1474  f72e		       85 d0		      STA	ScoreD0
   1475  f730		       e8		      INX
   1476  f731		       bd 00 ff 	      LDA	StaticText,X
   1477  f734		       85 d1		      STA	ScoreD1
   1478  f736		       e8		      INX
   1479  f737		       bd 00 ff 	      LDA	StaticText,X
   1480  f73a		       85 d2		      STA	ScoreD2
   1481  f73c		       e8		      INX
   1482  f73d		       bd 00 ff 	      LDA	StaticText,X
   1483  f740		       85 d3		      STA	ScoreD3
   1484  f742		       e8		      INX
   1485  f743		       bd 00 ff 	      LDA	StaticText,X
   1486  f746		       85 d4		      STA	ScoreD4
   1487  f748		       60		      RTS
   1488  f749
   1489  f749				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1490  f749		       a2 00		      LDX	#0
   1491  f74b		       a0 04		      LDY	#FONT_OFFSET
   1492  f74d
   1493  f74d				   ScoreLoop		; 20 
   1494  f74d		       85 02		      STA	WSYNC	;2
   1495  f74f		       85 2a		      STA	HMOVE
   1496  f751
   1497  f751		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1498  f753		       85 0d		      STA	PF0	;3
   1499  f755
   1500  f755		       a5 82		      LDA	PF1Cache	;3
   1501  f757		       85 0e		      STA	PF1	;3
   1502  f759
   1503  f759		       a5 83		      LDA	PF2Cache	;3
   1504  f75b		       85 0f		      STA	PF2	;3
   1505  f75d
   1506  f75d				   DrawScoreD0		; 15
   1507  f75d		       a6 d0		      LDX	ScoreD0	; 3
   1508  f75f		       bd 00 fd 	      LDA	Font,X	;4
   1509  f762		       85 81		      STA	PF0Cache	;3
   1510  f764		       c6 d0		      DEC	ScoreD0	;5
   1511  f766
   1512  f766				   DrawScoreD1		; 23	
   1513  f766		       a6 d1		      LDX	ScoreD1	; 3
   1514  f768		       bd 00 fd 	      LDA	Font,X	;4
   1515  f76b		       0a		      ASL		;2
   1516  f76c		       0a		      ASL		;2
   1517  f76d		       0a		      ASL		;2
   1518  f76e		       0a		      ASL		;2
   1519  f76f		       85 82		      STA	PF1Cache	;3
   1520  f771		       c6 d1		      DEC	ScoreD1	;5
   1521  f773
   1522  f773				   DrawScoreD2		; 20
   1523  f773		       a6 d2		      LDX	ScoreD2	; 3
   1524  f775		       bd 00 fd 	      LDA	Font,X	;4
   1525  f778		       29 0f		      AND	#%00001111	;2
   1526  f77a		       05 82		      ORA	PF1Cache	;3
   1527  f77c		       85 82		      STA	PF1Cache	;3
   1528  f77e		       c6 d2		      DEC	ScoreD2	;5
   1529  f780
   1530  f780				   DrawScoreD3		; 23
   1531  f780		       a6 d3		      LDX	ScoreD3	; 3
   1532  f782		       bd 00 fd 	      LDA	Font,X	;4
   1533  f785		       4a		      LSR		;2
   1534  f786		       4a		      LSR		;2
   1535  f787		       4a		      LSR		;2
   1536  f788		       4a		      LSR		;2
   1537  f789		       85 83		      STA	PF2Cache	;3
   1538  f78b		       c6 d3		      DEC	ScoreD3	;5
   1539  f78d
   1540  f78d				   DrawScoreD4		; 20
   1541  f78d		       a6 d4		      LDX	ScoreD4	; 3
   1542  f78f		       bd 00 fd 	      LDA	Font,X	;4
   1543  f792		       29 f0		      AND	#%11110000	;2
   1544  f794		       05 83		      ORA	PF2Cache	;3
   1545  f796		       85 83		      STA	PF2Cache	;3
   1546  f798		       c6 d4		      DEC	ScoreD4	;5
   1547  f79a
   1548  f79a
   1549  f79a		       88		      DEY		;2
   1550  f79b		       10 b0		      BPL	ScoreLoop	;4
   1551  f79d
   1552  f79d		       85 02		      STA	WSYNC
   1553  f79f		       85 2a		      STA	HMOVE
   1554  f7a1		       20 a2 f6 	      JSR	LoadAll
   1555  f7a4		       60		      RTS		; 6
   1556  f7a5
   1557  f7a5				   WaitForVblankEnd
   1558  f7a5		       ad 84 02 	      LDA	INTIM
   1559  f7a8		       d0 fb		      BNE	WaitForVblankEnd
   1560  f7aa		       85 02		      STA	WSYNC
   1561  f7ac		       85 01		      STA	VBLANK
   1562  f7ae		       60		      RTS
   1563  f7af
   1564  f7af				   Sleep4Lines
   1565  f7af		       85 02		      STA	WSYNC
   1566  f7b1		       85 02		      STA	WSYNC
   1567  f7b3		       85 02		      STA	WSYNC
   1568  f7b5		       85 02		      STA	WSYNC
   1569  f7b7		       60		      RTS
   1570  f7b8
   1571  f7b8				   Sleep8Lines
   1572  f7b8		       20 af f7 	      JSR	Sleep4Lines
   1573  f7bb		       20 af f7 	      JSR	Sleep4Lines
   1574  f7be		       60		      RTS
   1575  f7bf
   1576  f7bf				   Sleep32Lines
   1577  f7bf		       20 b8 f7 	      JSR	Sleep8Lines
   1578  f7c2		       20 b8 f7 	      JSR	Sleep8Lines
   1579  f7c5		       20 b8 f7 	      JSR	Sleep8Lines
   1580  f7c8		       20 b8 f7 	      JSR	Sleep8Lines
   1581  f7cb		       60		      RTS
   1582  f7cc
   1583  f7cc							;X = number of WSYNC HMOVE to run
   1584  f7cc				   HMoveXTimes
   1585  f7cc		       85 02		      STA	WSYNC	;3
   1586  f7ce		       85 2a		      STA	HMOVE	; 3/10 
   1587  f7d0		       ca		      DEX
   1588  f7d1		       d0 f9		      BNE	HMoveXTimes
   1589  f7d3		       60		      RTS
   1590  f7d4
   1591  f7d4				   ConfigureCarSprites
   1592  f7d4		       a5 8c		      LDA	FrameCount0
   1593  f7d6		       29 01		      AND	#%00000001
   1594  f7d8		       d0 0b		      BNE	LoadForRightScreenSprites
   1595  f7da				   LoadForLeftScreenSprites
   1596  f7da		       a5 c7		      LDA	CurrentCarId
   1597  f7dc		       85 b0		      STA	Tmp0
   1598  f7de		       a5 c8		      LDA	OpCurrentCarId
   1599  f7e0		       85 b1		      STA	Tmp1
   1600  f7e2		       4c ed f7 	      JMP	LoadCarSpritesFromIds
   1601  f7e5				   LoadForRightScreenSprites
   1602  f7e5		       a5 c7		      LDA	CurrentCarId
   1603  f7e7		       85 b1		      STA	Tmp1
   1604  f7e9		       a5 c8		      LDA	OpCurrentCarId
   1605  f7eb		       85 b0		      STA	Tmp0
   1606  f7ed
   1607  f7ed				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1608  f7ed		       a4 b0		      LDY	Tmp0
   1609  f7ef		       b9 82 ff 	      LDA	CarIdToSpriteAddressL,Y
   1610  f7f2		       85 d7		      STA	CarSpritePointerL
   1611  f7f4		       b9 86 ff 	      LDA	CarIdToSpriteAddressH,Y
   1612  f7f7		       85 d8		      STA	CarSpritePointerH
   1613  f7f9				   ConfigureOpponentCarSprite
   1614  f7f9		       a4 b1		      LDY	Tmp1
   1615  f7fb		       b9 8a ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1616  f7fe		       85 d9		      STA	EnemyCarSpritePointerL
   1617  f800		       b9 8e ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1618  f803		       85 da		      STA	EnemyCarSpritePointerH
   1619  f805		       60		      RTS
   1620  f806
   1621  f806							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1622  f806							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1623  f806							; Tmp0 Binary Number
   1624  f806							; Result Returned in Tmp 1 and A
   1625  f806				   BINBCD8
   1626  f806		       f8		      SED		; Switch to decimal mode
   1627  f807		       a9 00		      LDA	#0	; Ensure the result is clear
   1628  f809		       85 b1		      STA	Tmp1+0
   1629  f80b							;STA Tmp1+1
   1630  f80b		       a2 08		      LDX	#8	; The number of source bits
   1631  f80d
   1632  f80d				   CNVBIT
   1633  f80d		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1634  f80f		       a5 b1		      LDA	Tmp1+0	; And add into result
   1635  f811		       65 b1		      ADC	Tmp1+0
   1636  f813		       85 b1		      STA	Tmp1+0
   1637  f815							;Not needed now, 0 to 99 is enought for timer!
   1638  f815							; LDA Tmp1+1	; propagating any carry
   1639  f815							; ADC Tmp1+1
   1640  f815							; STA Tmp1+1
   1641  f815		       ca		      DEX		; And repeat for next bit
   1642  f816		       d0 f5		      BNE	CNVBIT
   1643  f818		       d8		      CLD		; Back to binary
   1644  f819
   1645  f819		       60		      RTS		; All Done.
   1646  f81a
   1647  f81a							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1648  f81a							;X player 0 or 1
   1649  f81a				   SelectCarWithDpad
   1650  f81a		       a0 03		      LDY	#3
   1651  f81c				   SelectCarWithDpadLoop
   1652  f81c		       ad 80 02 	      LDA	SWCHA
   1653  f81f		       25 b0		      AND	Tmp0
   1654  f821		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1655  f823		       98		      TYA
   1656  f824		       95 c7		      STA	CurrentCarId,X
   1657  f826				   ContinueSelectCarWithDpadLoop
   1658  f826		       46 b0		      LSR	Tmp0
   1659  f828		       88		      DEY
   1660  f829		       10 f1		      BPL	SelectCarWithDpadLoop
   1661  f82b		       60		      RTS
   1662  f82c
   1663  f82c				   ProcessOpponentLine
   1664  f82c		       a5 8c		      LDA	FrameCount0
   1665  f82e		       29 01		      AND	#%00000001
   1666  f830		       38		      SEC
   1667  f831		       d0 15		      BNE	Player0IsOpponent
   1668  f833				   Player1IsOpponent		; Code could be reused?
   1669  f833		       a5 91		      LDA	TrafficOffset0 + 1
   1670  f835		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1671  f837		       85 b0		      STA	Tmp0
   1672  f839		       a5 92		      LDA	TrafficOffset0 + 2
   1673  f83b		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1674  f83d		       85 b1		      STA	Tmp1
   1675  f83f		       a5 ba		      LDA	Traffic0Msb
   1676  f841		       e5 bb		      SBC	OpTraffic0Msb
   1677  f843		       85 b2		      STA	Tmp2
   1678  f845		       4c 5a f8 	      JMP	StoreInFrontPlayer
   1679  f848				   Player0IsOpponent
   1680  f848		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1681  f84a		       e5 91		      SBC	TrafficOffset0 + 1
   1682  f84c		       85 b0		      STA	Tmp0
   1683  f84e		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1684  f850		       e5 92		      SBC	TrafficOffset0 + 2
   1685  f852		       85 b1		      STA	Tmp1
   1686  f854		       a5 bb		      LDA	OpTraffic0Msb
   1687  f856		       e5 ba		      SBC	Traffic0Msb
   1688  f858		       85 b2		      STA	Tmp2
   1689  f85a
   1690  f85a				   StoreInFrontPlayer
   1691  f85a		       85 f2		      STA	IsOpponentInFront
   1692  f85c
   1693  f85c				   AddOffsetToOpponentLine
   1694  f85c		       18		      CLC
   1695  f85d		       a5 b0		      LDA	Tmp0
   1696  f85f		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1697  f861		       85 b0		      STA	Tmp0
   1698  f863		       a5 b1		      LDA	Tmp1
   1699  f865		       69 00		      ADC	#0
   1700  f867		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1701  f869		       a5 b2		      LDA	Tmp2
   1702  f86b		       69 00		      ADC	#0
   1703  f86d		       05 b1		      ORA	Tmp1
   1704  f86f		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1705  f871				   OpponentNotVisible
   1706  f871		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1707  f873		       85 cf		      STA	OpponentLine
   1708  f875		       4c 7c f8 	      JMP	ReturnFromProcessOpponentLine
   1709  f878				   OpponentVisible
   1710  f878		       a5 b0		      LDA	Tmp0
   1711  f87a		       85 cf		      STA	OpponentLine
   1712  f87c				   ReturnFromProcessOpponentLine
   1713  f87c		       60		      RTS
   1714  f87d
   1715  f87d							; Value stored in A
   1716  f87d				   IsOpponentColliding
   1717  f87d							;Any non default state, opponent do not colide
   1718  f87d		       a5 8e		      LDA	CollisionCounter
   1719  f87f		       05 8f		      ORA	OpCollisionCounter
   1720  f881		       05 cb		      ORA	ScoreFontColorHoldChange
   1721  f883		       05 cc		      ORA	OpScoreFontColorHoldChange
   1722  f885		       d0 07		      BNE	OpponentNotColliding
   1723  f887		       a5 f2		      LDA	IsOpponentInFront
   1724  f889		       25 07		      AND	CXPPMM
   1725  f88b		       4c 90 f8 	      JMP	ReturnIsOpponentColliding
   1726  f88e				   OpponentNotColliding
   1727  f88e		       a9 00		      LDA	#0
   1728  f890				   ReturnIsOpponentColliding
   1729  f890		       60		      RTS
   1730  f891
   1731  f891
   1732  f891							; Movement and colision are binded because the car must be moved after duplicate size.
   1733  f891							; Use X for the player
   1734  f891							; Tmp2 Traffic colision result
   1735  f891				   TestCollisionAndMove
   1736  f891							; Until store the movemnt, Y contains the value to be stored.
   1737  f891							; see if player0 colides with the rest
   1738  f891		       a5 b2		      LDA	Tmp2
   1739  f893		       f0 2b		      BEQ	NoCollision	;skip if not hitting...
   1740  f895		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1741  f897		       d0 27		      BNE	NoCollision
   1742  f899		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1743  f89b		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X
   1744  f89e		       f0 20		      BEQ	NoCollision
   1745  f8a0		       dd b5 fc 	      CMP	PlayerToScoreStartColor,X
   1746  f8a3		       f0 1b		      BEQ	NoCollision
   1747  f8a5		       a9 ff		      LDA	#COLLISION_FRAMES
   1748  f8a7		       95 8e		      STA	CollisionCounter,X
   1749  f8a9		       b5 f0		      LDA	Player0SpeedH,X
   1750  f8ab		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1751  f8ad		       a9 10		      LDA	#COLLISION_SPEED_L
   1752  f8af		       d5 de		      CMP	Player0SpeedL,X
   1753  f8b1		       b0 04		      BCS	SkipSetColisionSpeedL
   1754  f8b3				   SetColisionSpeedL
   1755  f8b3		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1756  f8b5		       95 de		      STA	Player0SpeedL,X
   1757  f8b7				   SkipSetColisionSpeedL
   1758  f8b7		       a9 00		      LDA	#0
   1759  f8b9		       95 f0		      STA	Player0SpeedH,X
   1760  f8bb		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1761  f8bd		       4c 10 f9 	      JMP	StoreHMove	; We keep position consistent
   1762  f8c0				   NoCollision
   1763  f8c0
   1764  f8c0				   DecrementCollision
   1765  f8c0		       b5 8e		      LDA	CollisionCounter,X
   1766  f8c2		       f0 06		      BEQ	FinishDecrementCollision
   1767  f8c4		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1768  f8c6		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1769  f8c8		       d6 8e		      DEC	CollisionCounter,X
   1770  f8ca				   FinishDecrementCollision
   1771  f8ca
   1772  f8ca				   ResetPlayerSize
   1773  f8ca		       d0 04		      BNE	FinishResetPlayerSize
   1774  f8cc		       a9 30		      LDA	#%00110000
   1775  f8ce		       95 04		      STA	NUSIZ0,X	;
   1776  f8d0				   FinishResetPlayerSize
   1777  f8d0
   1778  f8d0				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1779  f8d0		       b5 8e		      LDA	CollisionCounter,X
   1780  f8d2		       c9 01		      CMP	#1	; Last frame before reset
   1781  f8d4		       d0 05		      BNE	SkipResetPlayerPosition
   1782  f8d6		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1783  f8d8		       4c 10 f9 	      JMP	StoreHMove
   1784  f8db				   SkipResetPlayerPosition
   1785  f8db
   1786  f8db				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1787  f8db		       b5 c7		      LDA	CurrentCarId,X
   1788  f8dd		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1789  f8df		       d0 08		      BNE	PrepareReadXAxis
   1790  f8e1		       a0 00		      LDY	#0
   1791  f8e3		       a5 8c		      LDA	FrameCount0
   1792  f8e5		       29 01		      AND	#DRAGSTER_TURN_MASK
   1793  f8e7		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1794  f8e9
   1795  f8e9				   PrepareReadXAxis
   1796  f8e9		       a0 00		      LDY	#0
   1797  f8eb		       b5 b6		      LDA	Player0X,X
   1798  f8ed				   BeginReadLeft
   1799  f8ed		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1800  f8ef		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1801  f8f2		       2c 80 02 	      BIT	SWCHA
   1802  f8f5		       d0 07		      BNE	SkipMoveLeft
   1803  f8f7		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1804  f8f9		       d6 b6		      DEC	Player0X,X
   1805  f8fb		       4c 10 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1806  f8fe				   SkipMoveLeft
   1807  f8fe				   BeginReadRight
   1808  f8fe		       b5 b6		      LDA	Player0X,X
   1809  f900		       c9 2c		      CMP	#PLAYER_MAX_X
   1810  f902		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1811  f904		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1812  f907		       2c 80 02 	      BIT	SWCHA
   1813  f90a		       d0 04		      BNE	SkipMoveRight
   1814  f90c		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1815  f90e		       f6 b6		      INC	Player0X,X
   1816  f910				   SkipMoveRight
   1817  f910				   StoreHMove
   1818  f910		       94 20		      STY	HMP0,X	;set the move for player 0
   1819  f912
   1820  f912		       60		      RTS
   1821  f913
   1822  f913							; X Traffic offset 4 bits each lane, 4 lanes per player
   1823  f913							; Tmp3 Max X offset
   1824  f913							; Tmp4 Max Player Speed L
   1825  f913							; Tmp5 Max Player Speed H
   1826  f913				   UpdateOffsets
   1827  f913		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1828  f915		       a5 c6		      LDA	GameMode
   1829  f917		       29 04		      AND	#%00000100	; GameModes with high delta
   1830  f919		       f0 02		      BEQ	UpdateOffsetsLoop
   1831  f91b		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1832  f91d
   1833  f91d				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1834  f91d		       38		      SEC
   1835  f91e		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1836  f920		       f9 6e ff 	      SBC	TrafficSpeeds,Y
   1837  f923		       85 b0		      STA	Tmp0
   1838  f925		       c8		      INY
   1839  f926		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1840  f928		       f9 6e ff 	      SBC	TrafficSpeeds,Y
   1841  f92b		       85 b1		      STA	Tmp1
   1842  f92d		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1843  f92f		       e9 00		      SBC	#0
   1844  f931		       85 b2		      STA	Tmp2
   1845  f933
   1846  f933				   AddsTheResult
   1847  f933		       18		      CLC
   1848  f934		       a5 b0		      LDA	Tmp0
   1849  f936		       75 90		      ADC	TrafficOffset0,X
   1850  f938		       95 90		      STA	TrafficOffset0,X
   1851  f93a		       e8		      INX
   1852  f93b		       a5 b1		      LDA	Tmp1
   1853  f93d		       75 90		      ADC	TrafficOffset0,X
   1854  f93f		       95 90		      STA	TrafficOffset0,X
   1855  f941		       e8		      INX
   1856  f942		       a5 b2		      LDA	Tmp2	; Carry
   1857  f944		       75 90		      ADC	TrafficOffset0,X
   1858  f946		       95 90		      STA	TrafficOffset0,X
   1859  f948		       90 0f		      BCC	CalculateOffsetCache
   1860  f94a				   CalculatePlayer0Msb
   1861  f94a		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1862  f94c		       d0 05		      BNE	CalculatePlayer1Msb
   1863  f94e		       e6 ba		      INC	Traffic0Msb
   1864  f950		       4c 59 f9 	      JMP	CalculateOffsetCache
   1865  f953				   CalculatePlayer1Msb
   1866  f953		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1867  f955		       d0 02		      BNE	CalculateOffsetCache
   1868  f957		       e6 bb		      INC	OpTraffic0Msb
   1869  f959
   1870  f959				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1871  f959		       e8		      INX
   1872  f95a		       38		      SEC
   1873  f95b		       69 00		      ADC	#0	;Increment by one
   1874  f95d		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1875  f95f
   1876  f95f				   PrepareNextUpdateLoop
   1877  f95f		       c8		      INY
   1878  f960		       e8		      INX
   1879  f961		       e4 b3		      CPX	Tmp3	; Max X offset
   1880  f963		       d0 b8		      BNE	UpdateOffsetsLoop
   1881  f965		       60		      RTS
   1882  f966
   1883  f966							; X Player 0 or 1
   1884  f966				   ProcessSpeed
   1885  f966				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1886  f966		       a9 00		      LDA	#0
   1887  f968		       85 b0		      STA	Tmp0	; Break speed
   1888  f96a		       b5 b8		      LDA	CountdownTimer,X
   1889  f96c		       d0 0d		      BNE	Break
   1890  f96e		       b4 c7		      LDY	CurrentCarId,X
   1891  f970		       a5 8c		      LDA	FrameCount0
   1892  f972		       39 96 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1893  f975		       d0 04		      BNE	Break
   1894  f977		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1895  f979		       85 b0		      STA	Tmp0
   1896  f97b
   1897  f97b				   Break
   1898  f97b		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1899  f97e		       2c 80 02 	      BIT	SWCHA
   1900  f981		       d0 12		      BNE	BreakNonZero
   1901  f983		       b5 0c		      LDA	INPT4,X	;3
   1902  f985		       10 0a		      BPL	BreakWhileAccelerating
   1903  f987		       b4 d5		      LDY	Gear,X
   1904  f989		       b9 a2 ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1905  f98c		       85 b0		      STA	Tmp0
   1906  f98e		       4c 95 f9 	      JMP	BreakNonZero
   1907  f991				   BreakWhileAccelerating		; Allow better control while breaking.
   1908  f991		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1909  f993		       85 b0		      STA	Tmp0
   1910  f995
   1911  f995				   BreakNonZero
   1912  f995		       a5 b0		      LDA	Tmp0
   1913  f997		       f0 29		      BEQ	SkipBreak
   1914  f999
   1915  f999				   DecreaseSpeed
   1916  f999		       38		      SEC
   1917  f99a		       b5 de		      LDA	Player0SpeedL,X
   1918  f99c		       e5 b0		      SBC	Tmp0
   1919  f99e		       95 de		      STA	Player0SpeedL,X
   1920  f9a0		       b5 f0		      LDA	Player0SpeedH,X
   1921  f9a2		       e9 00		      SBC	#0
   1922  f9a4		       95 f0		      STA	Player0SpeedH,X
   1923  f9a6
   1924  f9a6				   CheckMinSpeed
   1925  f9a6		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1926  f9a8		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1927  f9aa		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1928  f9ac		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1929  f9ae
   1930  f9ae				   CompareLBreakSpeed
   1931  f9ae		       b5 de		      LDA	Player0SpeedL,X
   1932  f9b0		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1933  f9b2		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1934  f9b4		       4c bf f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1935  f9b7
   1936  f9b7				   ResetMinSpeed
   1937  f9b7		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1938  f9b9		       95 f0		      STA	Player0SpeedH,X
   1939  f9bb		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1940  f9bd		       95 de		      STA	Player0SpeedL,X
   1941  f9bf
   1942  f9bf				   SkipAccelerateIfBreaking
   1943  f9bf		       4c 08 fa 	      JMP	SkipAccelerate
   1944  f9c2				   SkipBreak
   1945  f9c2
   1946  f9c2				   Acelerates
   1947  f9c2		       b5 b8		      LDA	CountdownTimer,X
   1948  f9c4		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1949  f9c6
   1950  f9c6				   ContinueAccelerateTest
   1951  f9c6		       b5 0c		      LDA	INPT4,X	;3
   1952  f9c8		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1953  f9ca		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1954  f9cd		       2c 80 02 	      BIT	SWCHA
   1955  f9d0		       d0 36		      BNE	SkipAccelerate
   1956  f9d2
   1957  f9d2				   IncreaseCarSpeed
   1958  f9d2		       a9 02		      LDA	#2
   1959  f9d4		       85 b0		      STA	Tmp0	; Loop control
   1960  f9d6		       b4 c7		      LDY	CurrentCarId,X
   1961  f9d8				   IncreaseCarSpeedLoop
   1962  f9d8							;Adds speed
   1963  f9d8		       18		      CLC
   1964  f9d9		       b5 dc		      LDA	AccelerateBuffer,X
   1965  f9db		       79 92 ff 	      ADC	CarIdToAccelerateSpeed,Y
   1966  f9de		       95 dc		      STA	AccelerateBuffer,X
   1967  f9e0		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1968  f9e2		       f6 de		      INC	Player0SpeedL,X
   1969  f9e4		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1970  f9e6		       f6 f0		      INC	Player0SpeedH,X
   1971  f9e8				   ContinueIncreaseSpeedLoop
   1972  f9e8		       c6 b0		      DEC	Tmp0
   1973  f9ea		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1974  f9ec				   SkipIncreaseCarSpeed
   1975  f9ec
   1976  f9ec				   CheckIfAlreadyMaxSpeed
   1977  f9ec		       b5 f0		      LDA	Player0SpeedH,X
   1978  f9ee		       c9 02		      CMP	#CAR_MAX_SPEED_H
   1979  f9f0		       90 16		      BCC	SkipAccelerate	; less than my max speed
   1980  f9f2		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   1981  f9f4							;High bit is max, compare the low
   1982  f9f4		       b4 c7		      LDY	CurrentCarId,X
   1983  f9f6		       b5 de		      LDA	Player0SpeedL,X
   1984  f9f8		       d9 9a ff 	      CMP	CarIdToMaxSpeedL,Y
   1985  f9fb		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   1986  f9fd							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   1987  f9fd
   1988  f9fd				   ResetToMaxSpeed		; Speed is more, or is already max
   1989  f9fd		       a9 02		      LDA	#CAR_MAX_SPEED_H
   1990  f9ff		       95 f0		      STA	Player0SpeedH,X
   1991  fa01		       b4 c7		      LDY	CurrentCarId,X
   1992  fa03		       b9 9a ff 	      LDA	CarIdToMaxSpeedL,Y
   1993  fa06		       95 de		      STA	Player0SpeedL,X
   1994  fa08				   SkipAccelerate
   1995  fa08		       60		      RTS
   1996  fa09
   1997  fa09							;Tmp0 Traffic Offset to compare with next checkpoint
   1998  fa09				   ProcessPlayerStatus
   1999  fa09				   IsGameOver
   2000  fa09		       b5 b8		      LDA	CountdownTimer,X
   2001  fa0b		       15 de		      ORA	Player0SpeedL,X
   2002  fa0d		       15 f0		      ORA	Player0SpeedH,X
   2003  fa0f		       d0 0c		      BNE	IsCheckpoint
   2004  fa11		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2005  fa13		       95 cb		      STA	ScoreFontColorHoldChange,X
   2006  fa15		       bd b7 fc 	      LDA	PlayerToScoreOverColor,X
   2007  fa18		       95 c9		      STA	ScoreFontColor,X
   2008  fa1a		       4c 51 fa 	      JMP	SkipIsTimeOver
   2009  fa1d
   2010  fa1d				   IsCheckpoint
   2011  fa1d		       b5 cd		      LDA	NextCheckpoint,X
   2012  fa1f		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2013  fa21		       d0 21		      BNE	SkipIsCheckpoint
   2014  fa23		       18		      CLC
   2015  fa24		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2016  fa26		       95 cd		      STA	NextCheckpoint,X
   2017  fa28		       bd b3 fc 	      LDA	PlayerToScoreGoodColor,X
   2018  fa2b		       95 c9		      STA	ScoreFontColor,X
   2019  fa2d		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2020  fa2f		       95 cb		      STA	ScoreFontColorHoldChange,X
   2021  fa31		       b5 b8		      LDA	CountdownTimer,X
   2022  fa33		       18		      CLC
   2023  fa34		       75 c0		      ADC	CheckpointTime,X
   2024  fa36		       95 b8		      STA	CountdownTimer,X
   2025  fa38		       90 04		      BCC	JumpSkipTimeOver
   2026  fa3a		       a9 ff		      LDA	#$FF
   2027  fa3c		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2028  fa3e				   JumpSkipTimeOver
   2029  fa3e		       20 bf f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2030  fa41		       4c 51 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2031  fa44				   SkipIsCheckpoint
   2032  fa44
   2033  fa44				   IsTimeOver
   2034  fa44		       b5 b8		      LDA	CountdownTimer,X
   2035  fa46		       d0 09		      BNE	SkipIsTimeOver
   2036  fa48		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2037  fa4a		       95 cb		      STA	ScoreFontColorHoldChange,X
   2038  fa4c		       bd b9 fc 	      LDA	PlayerToScoreBadColor,X
   2039  fa4f		       95 c9		      STA	ScoreFontColor,X
   2040  fa51				   SkipIsTimeOver
   2041  fa51		       60		      RTS
   2042  fa52
   2043  fa52
   2044  fa52				   EverySecond		; 64 frames to be more precise
   2045  fa52		       a9 3f		      LDA	#%00111111
   2046  fa54		       25 8c		      AND	FrameCount0
   2047  fa56		       d0 06		      BNE	SkipEverySecondAction
   2048  fa58		       d5 b8		      CMP	CountdownTimer,X
   2049  fa5a		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2050  fa5c		       d6 b8		      DEC	CountdownTimer,X
   2051  fa5e				   SkipEverySecondAction
   2052  fa5e		       60		      RTS
   2053  fa5f
   2054  fa5f				   CalculateGear
   2055  fa5f		       b5 de		      LDA	Player0SpeedL,X	;3
   2056  fa61		       29 80		      AND	#%10000000	;2
   2057  fa63		       15 f0		      ORA	Player0SpeedH,X	;3
   2058  fa65		       18		      CLC		;2
   2059  fa66		       2a		      ROL		;2
   2060  fa67		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2061  fa69		       95 d5		      STA	Gear,X
   2062  fa6b		       60		      RTS
   2063  fa6c
   2064  fa6c				   ProcessScoreFontColor
   2065  fa6c		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2066  fa6e		       f0 06		      BEQ	ResetScoreFontColor
   2067  fa70		       88		      DEY
   2068  fa71		       94 cb		      STY	ScoreFontColorHoldChange,X
   2069  fa73		       4c 7b fa 	      JMP	SkipScoreFontColor
   2070  fa76				   ResetScoreFontColor
   2071  fa76		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2072  fa79		       95 c9		      STA	ScoreFontColor,X
   2073  fa7b				   SkipScoreFontColor
   2074  fa7b		       60		      RTS
   2075  fa7c
   2076  fa7c							; X = Player
   2077  fa7c							; A Returns result to be sotored in the proper digit
   2078  fa7c				   PrintScoreHoldChange
   2079  fa7c		       b5 cb		      LDA	ScoreFontColorHoldChange,X
   2080  fa7e		       4a		      LSR
   2081  fa7f		       4a		      LSR
   2082  fa80		       4a		      LSR
   2083  fa81		       4a		      LSR
   2084  fa82		       a8		      TAY
   2085  fa83		       b9 8c fc 	      LDA	BarLookup,Y
   2086  fa86		       60		      RTS
   2087  fa87
   2088  fa87				   PrintSpeedBar
   2089  fa87		       b5 de		      LDA	Player0SpeedL,X
   2090  fa89		       29 e0		      AND	#%11100000	;2 Discard the last bits
   2091  fa8b		       18		      CLC
   2092  fa8c		       2a		      ROL		;First goes into carry
   2093  fa8d		       2a		      ROL
   2094  fa8e		       2a		      ROL
   2095  fa8f		       2a		      ROL
   2096  fa90		       85 b0		      STA	Tmp0
   2097  fa92		       b5 f0		      LDA	Player0SpeedH,X
   2098  fa94		       0a		      ASL
   2099  fa95		       0a		      ASL
   2100  fa96		       0a		      ASL
   2101  fa97		       05 b0		      ORA	Tmp0
   2102  fa99		       a8		      TAY		; 2
   2103  fa9a		       b9 9c fc 	      LDA	SpeedToBarLookup,Y	;4
   2104  fa9d		       85 d2		      STA	ScoreD2	;3
   2105  fa9f		       60		      RTS
   2106  faa0
   2107  faa0							; Moved here because of rom space.
   2108  faa0							; The only SBR in constants space
   2109  faa0				   DrawQrCode
   2110  faa0		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2111  faa2		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2112  faa4		       a9 01		      LDA	#%00000001	; Mirror playfield
   2113  faa6		       85 0a		      STA	CTRLPF
   2114  faa8		       20 7d f6 	      JSR	ClearAll	; To be 100 sure!
   2115  faab		       ad 82 02 	      LDA	SWCHB
   2116  faae		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2117  fab0		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2118  fab2		       f0 07		      BEQ	StoreReversedQrCode
   2119  fab4		       86 09		      STX	COLUBK
   2120  fab6		       84 08		      STY	COLUPF
   2121  fab8		       4c bf fa 	      JMP	ContinueQrCode
   2122  fabb				   StoreReversedQrCode
   2123  fabb		       86 08		      STX	COLUPF
   2124  fabd		       84 09		      STY	COLUBK
   2125  fabf
   2126  fabf				   ContinueQrCode
   2127  fabf		       a2 09		      LDX	#9
   2128  fac1		       20 cc f7 	      JSR	HMoveXTimes
   2129  fac4		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2130  fac6		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2131  fac8		       20 a5 f7 	      JSR	WaitForVblankEnd
   2132  facb		       20 b8 f7 	      JSR	Sleep8Lines
   2133  face		       20 b8 f7 	      JSR	Sleep8Lines
   2134  fad1		       20 b8 f7 	      JSR	Sleep8Lines
   2135  fad4
   2136  fad4				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2137  fad4		       85 02		      STA	WSYNC
   2138  fad6		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2139  fad9		       85 0e		      STA	PF1	;3
   2140  fadb		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2141  fade		       85 0f		      STA	PF2	;3
      0  fae0					      SLEEP	27	; 
      1  fae0				   .CYCLES    SET	27
      2  fae0
      3  fae0				  -	      IF	.CYCLES < 2
      4  fae0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fae0				  -	      ERR
      6  fae0					      ENDIF
      7  fae0
      8  fae0					      IF	.CYCLES & 1
      9  fae0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fae0				  -	      nop	0
     11  fae0					      ELSE
     12  fae0		       24 00		      bit	VSYNC
     13  fae2					      ENDIF
     14  fae2				   .CYCLES    SET	.CYCLES - 3
     15  fae2					      ENDIF
     16  fae2
     17  fae2					      REPEAT	.CYCLES / 2
     18  fae2		       ea		      nop
     17  fae2					      REPEND
     18  fae3		       ea		      nop
     17  fae3					      REPEND
     18  fae4		       ea		      nop
     17  fae4					      REPEND
     18  fae5		       ea		      nop
     17  fae5					      REPEND
     18  fae6		       ea		      nop
     17  fae6					      REPEND
     18  fae7		       ea		      nop
     17  fae7					      REPEND
     18  fae8		       ea		      nop
     17  fae8					      REPEND
     18  fae9		       ea		      nop
     17  fae9					      REPEND
     18  faea		       ea		      nop
     17  faea					      REPEND
     18  faeb		       ea		      nop
     17  faeb					      REPEND
     18  faec		       ea		      nop
     17  faec					      REPEND
     18  faed		       ea		      nop
     19  faee					      REPEND
   2143  faee		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2144  faf1		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2145  faf3		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2146  faf6		       85 0e		      STA	PF1	;3
   2147  faf8
   2148  faf8		       ca		      DEX		;2
   2149  faf9		       d0 d9		      BNE	QrCodeLoop	;2
   2150  fafb		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2151  fafd		       88		      DEY		;2
   2152  fafe		       10 d4		      BPL	QrCodeLoop	;4
   2153  fb00
   2154  fb00				   EndQrCodeLoop
   2155  fb00		       85 02		      STA	WSYNC	;
   2156  fb02		       a9 00		      LDA	#0
   2157  fb04		       85 0e		      STA	PF1	;3
   2158  fb06		       85 0f		      STA	PF2	;3
   2159  fb08
   2160  fb08		       20 bf f7 	      JSR	Sleep32Lines
   2161  fb0b		       4c 10 f5 	      JMP	PrepareOverscan
   2162  fb0e
   2163  fb0e							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2164  fc00					      org	$FC00
   2165  fc00				   QrCode1
   2166  fc00		       1f		      .byte.b	#%00011111
   2167  fc01		       10		      .byte.b	#%00010000
   2168  fc02		       17		      .byte.b	#%00010111
   2169  fc03		       17		      .byte.b	#%00010111
   2170  fc04		       17		      .byte.b	#%00010111
   2171  fc05		       10		      .byte.b	#%00010000
   2172  fc06		       1f		      .byte.b	#%00011111
   2173  fc07		       00		      .byte.b	#%00000000
   2174  fc08		       17		      .byte.b	#%00010111
   2175  fc09		       10		      .byte.b	#%00010000
   2176  fc0a		       1d		      .byte.b	#%00011101
   2177  fc0b		       16		      .byte.b	#%00010110
   2178  fc0c		       03		      .byte.b	#%00000011
   2179  fc0d		       19		      .byte.b	#%00011001
   2180  fc0e		       13		      .byte.b	#%00010011
   2181  fc0f		       1c		      .byte.b	#%00011100
   2182  fc10		       0b		      .byte.b	#%00001011
   2183  fc11		       00		      .byte.b	#%00000000
   2184  fc12		       1f		      .byte.b	#%00011111
   2185  fc13		       10		      .byte.b	#%00010000
   2186  fc14		       17		      .byte.b	#%00010111
   2187  fc15		       17		      .byte.b	#%00010111
   2188  fc16		       17		      .byte.b	#%00010111
   2189  fc17		       10		      .byte.b	#%00010000
   2190  fc18		       1f		      .byte.b	#%00011111
   2191  fc19
   2192  fc19				   QrCode2
   2193  fc19		       c3		      .byte.b	#%11000011
   2194  fc1a		       9a		      .byte.b	#%10011010
   2195  fc1b		       82		      .byte.b	#%10000010
   2196  fc1c		       da		      .byte.b	#%11011010
   2197  fc1d		       aa		      .byte.b	#%10101010
   2198  fc1e		       ca		      .byte.b	#%11001010
   2199  fc1f		       f3		      .byte.b	#%11110011
   2200  fc20		       78		      .byte.b	#%01111000
   2201  fc21		       df		      .byte.b	#%11011111
   2202  fc22		       fc		      .byte.b	#%11111100
   2203  fc23		       c7		      .byte.b	#%11000111
   2204  fc24		       98		      .byte.b	#%10011000
   2205  fc25		       23		      .byte.b	#%00100011
   2206  fc26		       b9		      .byte.b	#%10111001
   2207  fc27		       d2		      .byte.b	#%11010010
   2208  fc28		       30		      .byte.b	#%00110000
   2209  fc29		       eb		      .byte.b	#%11101011
   2210  fc2a		       28		      .byte.b	#%00101000
   2211  fc2b		       ab		      .byte.b	#%10101011
   2212  fc2c		       72		      .byte.b	#%01110010
   2213  fc2d		       fa		      .byte.b	#%11111010
   2214  fc2e		       7a		      .byte.b	#%01111010
   2215  fc2f		       32		      .byte.b	#%00110010
   2216  fc30		       3a		      .byte.b	#%00111010
   2217  fc31		       63		      .byte.b	#%01100011
   2218  fc32
   2219  fc32				   QrCode3
   2220  fc32		       98		      .byte.b	#%10011000
   2221  fc33		       c3		      .byte.b	#%11000011
   2222  fc34		       39		      .byte.b	#%00111001
   2223  fc35		       34		      .byte.b	#%00110100
   2224  fc36		       ff		      .byte.b	#%11111111
   2225  fc37		       71		      .byte.b	#%01110001
   2226  fc38		       d5		      .byte.b	#%11010101
   2227  fc39		       d1		      .byte.b	#%11010001
   2228  fc3a		       5f		      .byte.b	#%01011111
   2229  fc3b		       26		      .byte.b	#%00100110
   2230  fc3c		       2d		      .byte.b	#%00101101
   2231  fc3d		       e9		      .byte.b	#%11101001
   2232  fc3e		       d6		      .byte.b	#%11010110
   2233  fc3f		       26		      .byte.b	#%00100110
   2234  fc40		       ba		      .byte.b	#%10111010
   2235  fc41		       03		      .byte.b	#%00000011
   2236  fc42		       dd		      .byte.b	#%11011101
   2237  fc43		       e0		      .byte.b	#%11100000
   2238  fc44		       57		      .byte.b	#%01010111
   2239  fc45		       14		      .byte.b	#%00010100
   2240  fc46		       35		      .byte.b	#%00110101
   2241  fc47		       e5		      .byte.b	#%11100101
   2242  fc48		       b5		      .byte.b	#%10110101
   2243  fc49		       d4		      .byte.b	#%11010100
   2244  fc4a		       97		      .byte.b	#%10010111
   2245  fc4b
   2246  fc4b				   QrCode4
   2247  fc4b		       09		      .byte.b	#%00001001
   2248  fc4c		       0e		      .byte.b	#%00001110
   2249  fc4d		       0f		      .byte.b	#%00001111
   2250  fc4e		       0c		      .byte.b	#%00001100
   2251  fc4f		       0c		      .byte.b	#%00001100
   2252  fc50		       08		      .byte.b	#%00001000
   2253  fc51		       08		      .byte.b	#%00001000
   2254  fc52		       06		      .byte.b	#%00000110
   2255  fc53		       06		      .byte.b	#%00000110
   2256  fc54		       0b		      .byte.b	#%00001011
   2257  fc55		       0f		      .byte.b	#%00001111
   2258  fc56		       04		      .byte.b	#%00000100
   2259  fc57		       08		      .byte.b	#%00001000
   2260  fc58		       0f		      .byte.b	#%00001111
   2261  fc59		       09		      .byte.b	#%00001001
   2262  fc5a		       07		      .byte.b	#%00000111
   2263  fc5b		       05		      .byte.b	#%00000101
   2264  fc5c		       00		      .byte.b	#%00000000
   2265  fc5d		       0f		      .byte.b	#%00001111
   2266  fc5e		       08		      .byte.b	#%00001000
   2267  fc5f		       0b		      .byte.b	#%00001011
   2268  fc60		       0b		      .byte.b	#%00001011
   2269  fc61		       0b		      .byte.b	#%00001011
   2270  fc62		       08		      .byte.b	#%00001000
   2271  fc63		       0f		      .byte.b	#%00001111
   2272  fc64
   2273  fc64				   PlayerToUpMask
   2274  fc64		       10		      .byte.b	#%00010000	;
   2275  fc65		       01		      .byte.b	#%00000001	;
   2276  fc66
   2277  fc66				   PlayerToDownMask
   2278  fc66		       20		      .byte.b	#%00100000	;
   2279  fc67		       02		      .byte.b	#%00000010	;
   2280  fc68
   2281  fc68				   PlayerToLeftMask
   2282  fc68		       40		      .byte.b	#%01000000	;
   2283  fc69		       04		      .byte.b	#%00000100	;
   2284  fc6a
   2285  fc6a				   PlayerToRightMask
   2286  fc6a		       80		      .byte.b	#%10000000	;
   2287  fc6b		       08		      .byte.b	#%00001000	;
   2288  fc6c
   2289  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2290  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2291  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2292  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2293  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2294  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2295  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2296  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2297  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2298  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2299  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2300  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2301  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2302  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2303  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2304  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2305  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2306  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2307  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2308  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2309  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2310  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2311  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2312  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2313  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2314  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2315  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2316  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2317  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2318  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2319  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2320  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2321  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2322  fc8c
   2323  fc8c
   2324  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2325  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2326  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2327  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2328  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2329  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2330  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2331  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2332  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2333  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2334  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2335  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2336  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2337  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2338  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2339  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2340  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2341  fc9c
   2342  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2343  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2344  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2345  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2346  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2347  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2348  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2349  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2350  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2351  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2352  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2353  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2354  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2355  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2356  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2357  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2358  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2359  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2360  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2361  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2362  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2363  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2364  fcb1
   2365  fcb1				   PlayerToDefaultColor
   2366  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2367  fcb2		       98		      .byte.b	#PLAYER1_COLOR
   2368  fcb3
   2369  fcb3				   PlayerToScoreGoodColor
   2370  fcb3		       37		      .byte.b	#SCORE_FONT_COLOR_GOOD
   2371  fcb4		       d8		      .byte.b	#OP_SCORE_FONT_COLOR_GOOD
   2372  fcb5
   2373  fcb5				   PlayerToScoreStartColor
   2374  fcb5		       38		      .byte.b	#SCORE_FONT_COLOR_START
   2375  fcb6		       c8		      .byte.b	#OP_SCORE_FONT_COLOR_START
   2376  fcb7
   2377  fcb7				   PlayerToScoreOverColor
   2378  fcb7		       0c		      .byte.b	#SCORE_FONT_COLOR_OVER
   2379  fcb8		       ab		      .byte.b	#OP_SCORE_FONT_COLOR_OVER
   2380  fcb9
   2381  fcb9				   PlayerToScoreBadColor
   2382  fcb9		       44		      .byte.b	#SCORE_FONT_COLOR_BAD
   2383  fcba		       56		      .byte.b	#OP_SCORE_FONT_COLOR_BAD
   2384  fcbb
   2385  fd00					      org	$FD00
   2386  fd00				   Font
   2387  fd00				   C0
   2388  fd00		       e7		      .byte.b	#%11100111	;
   2389  fd01		       a5		      .byte.b	#%10100101	; 
   2390  fd02		       a5		      .byte.b	#%10100101	; 
   2391  fd03		       a5		      .byte.b	#%10100101	; 
   2392  fd04		       e7		      .byte.b	#%11100111	;	
   2393  fd05				   C1
   2394  fd05		       e7		      .byte.b	#%11100111	;
   2395  fd06		       42		      .byte.b	#%01000010	; 
   2396  fd07		       42		      .byte.b	#%01000010	; 
   2397  fd08		       42		      .byte.b	#%01000010	; 
   2398  fd09		       66		      .byte.b	#%01100110	;
   2399  fd0a				   C2
   2400  fd0a		       e7		      .byte.b	#%11100111	;
   2401  fd0b		       24		      .byte.b	#%00100100	; 
   2402  fd0c		       e7		      .byte.b	#%11100111	; 
   2403  fd0d		       81		      .byte.b	#%10000001	; 
   2404  fd0e		       e7		      .byte.b	#%11100111	;
   2405  fd0f				   C3
   2406  fd0f		       e7		      .byte.b	#%11100111	;
   2407  fd10		       81		      .byte.b	#%10000001	; 
   2408  fd11		       e7		      .byte.b	#%11100111	; 
   2409  fd12		       81		      .byte.b	#%10000001	; 
   2410  fd13		       e7		      .byte.b	#%11100111	;
   2411  fd14				   C4
   2412  fd14		       81		      .byte.b	#%10000001	;
   2413  fd15		       81		      .byte.b	#%10000001	; 
   2414  fd16		       e7		      .byte.b	#%11100111	; 
   2415  fd17		       a5		      .byte.b	#%10100101	; 
   2416  fd18		       a5		      .byte.b	#%10100101	;
   2417  fd19				   C5
   2418  fd19		       e7		      .byte.b	#%11100111	;
   2419  fd1a		       81		      .byte.b	#%10000001	; 
   2420  fd1b		       e7		      .byte.b	#%11100111	; 
   2421  fd1c		       24		      .byte.b	#%00100100	; 
   2422  fd1d		       e7		      .byte.b	#%11100111	;
   2423  fd1e				   C6
   2424  fd1e		       e7		      .byte.b	#%11100111	;
   2425  fd1f		       a5		      .byte.b	#%10100101	; 
   2426  fd20		       e7		      .byte.b	#%11100111	; 
   2427  fd21		       24		      .byte.b	#%00100100	; 
   2428  fd22		       e7		      .byte.b	#%11100111	;
   2429  fd23				   C7
   2430  fd23		       81		      .byte.b	#%10000001	;
   2431  fd24		       81		      .byte.b	#%10000001	; 
   2432  fd25		       81		      .byte.b	#%10000001	; 
   2433  fd26		       81		      .byte.b	#%10000001	; 
   2434  fd27		       e7		      .byte.b	#%11100111	;
   2435  fd28				   C8
   2436  fd28		       e7		      .byte.b	#%11100111	;
   2437  fd29		       a5		      .byte.b	#%10100101	; 
   2438  fd2a		       e7		      .byte.b	#%11100111	; 
   2439  fd2b		       a5		      .byte.b	#%10100101	; 
   2440  fd2c		       e7		      .byte.b	#%11100111	;
   2441  fd2d				   C9
   2442  fd2d		       e7		      .byte.b	#%11100111	;
   2443  fd2e		       81		      .byte.b	#%10000001	; 
   2444  fd2f		       e7		      .byte.b	#%11100111	; 
   2445  fd30		       a5		      .byte.b	#%10100101	; 
   2446  fd31		       e7		      .byte.b	#%11100111	;
   2447  fd32				   CA
   2448  fd32		       a5		      .byte.b	#%10100101	;
   2449  fd33		       a5		      .byte.b	#%10100101	; 
   2450  fd34		       e7		      .byte.b	#%11100111	; 
   2451  fd35		       a5		      .byte.b	#%10100101	; 
   2452  fd36		       e7		      .byte.b	#%11100111	;
   2453  fd37				   CB
   2454  fd37		       66		      .byte.b	#%01100110	;
   2455  fd38		       a5		      .byte.b	#%10100101	; 
   2456  fd39		       66		      .byte.b	#%01100110	; 
   2457  fd3a		       a5		      .byte.b	#%10100101	;
   2458  fd3b		       66		      .byte.b	#%01100110	;
   2459  fd3c				   CC
   2460  fd3c		       e7		      .byte.b	#%11100111	;
   2461  fd3d		       24		      .byte.b	#%00100100	; 
   2462  fd3e		       24		      .byte.b	#%00100100	; 
   2463  fd3f		       24		      .byte.b	#%00100100	;
   2464  fd40		       e7		      .byte.b	#%11100111	;
   2465  fd41
   2466  fd41				   CD
   2467  fd41		       66		      .byte.b	#%01100110	;
   2468  fd42		       a5		      .byte.b	#%10100101	; 
   2469  fd43		       a5		      .byte.b	#%10100101	; 
   2470  fd44		       a5		      .byte.b	#%10100101	;
   2471  fd45		       66		      .byte.b	#%01100110	;
   2472  fd46
   2473  fd46				   CE
   2474  fd46		       e7		      .byte.b	#%11100111	;
   2475  fd47		       24		      .byte.b	#%00100100	; 
   2476  fd48		       e7		      .byte.b	#%11100111	; 
   2477  fd49		       24		      .byte.b	#%00100100	; 
   2478  fd4a		       e7		      .byte.b	#%11100111	;
   2479  fd4b
   2480  fd4b				   CF
   2481  fd4b		       24		      .byte.b	#%00100100	;
   2482  fd4c		       24		      .byte.b	#%00100100	; 
   2483  fd4d		       e7		      .byte.b	#%11100111	; 
   2484  fd4e		       24		      .byte.b	#%00100100	; 
   2485  fd4f		       e7		      .byte.b	#%11100111	;
   2486  fd50
   2487  fd50				   CG
   2488  fd50		       c3		      .byte.b	#%11000011	;
   2489  fd51		       a5		      .byte.b	#%10100101	; 
   2490  fd52		       a5		      .byte.b	#%10100101	; 
   2491  fd53		       24		      .byte.b	#%00100100	; 
   2492  fd54		       c3		      .byte.b	#%11000011	;	
   2493  fd55
   2494  fd55				   CH
   2495  fd55		       a5		      .byte.b	#%10100101	;
   2496  fd56		       a5		      .byte.b	#%10100101	; 
   2497  fd57		       e7		      .byte.b	#%11100111	; 
   2498  fd58		       a5		      .byte.b	#%10100101	; 
   2499  fd59		       a5		      .byte.b	#%10100101	;
   2500  fd5a
   2501  fd5a				   CI
   2502  fd5a		       e7		      .byte.b	#%11100111	;
   2503  fd5b		       42		      .byte.b	#%01000010	; 
   2504  fd5c		       42		      .byte.b	#%01000010	; 
   2505  fd5d		       42		      .byte.b	#%01000010	; 
   2506  fd5e		       e7		      .byte.b	#%11100111	;
   2507  fd5f
   2508  fd5f				   CJ
   2509  fd5f		       e7		      .byte.b	#%11100111	;
   2510  fd60		       a5		      .byte.b	#%10100101	; 
   2511  fd61		       81		      .byte.b	#%10000001	; 
   2512  fd62		       81		      .byte.b	#%10000001	; 
   2513  fd63		       81		      .byte.b	#%10000001	;	
   2514  fd64
   2515  fd64				   CK
   2516  fd64		       a5		      .byte.b	#%10100101	;
   2517  fd65		       a5		      .byte.b	#%10100101	; 
   2518  fd66		       66		      .byte.b	#%01100110	; 
   2519  fd67		       a5		      .byte.b	#%10100101	; 
   2520  fd68		       a5		      .byte.b	#%10100101	;
   2521  fd69
   2522  fd69				   CL
   2523  fd69		       e7		      .byte.b	#%11100111	;
   2524  fd6a		       24		      .byte.b	#%00100100	; 
   2525  fd6b		       24		      .byte.b	#%00100100	; 
   2526  fd6c		       24		      .byte.b	#%00100100	; 
   2527  fd6d		       24		      .byte.b	#%00100100	;
   2528  fd6e
   2529  fd6e				   CM
   2530  fd6e		       a5		      .byte.b	#%10100101	;
   2531  fd6f		       a5		      .byte.b	#%10100101	; 
   2532  fd70		       a5		      .byte.b	#%10100101	; 
   2533  fd71		       e7		      .byte.b	#%11100111	; 
   2534  fd72		       a5		      .byte.b	#%10100101	;
   2535  fd73
   2536  fd73				   CN
   2537  fd73		       a5		      .byte.b	#%10100101	;
   2538  fd74		       a5		      .byte.b	#%10100101	; 
   2539  fd75		       a5		      .byte.b	#%10100101	; 
   2540  fd76		       a5		      .byte.b	#%10100101	; 
   2541  fd77		       66		      .byte.b	#%01100110	;	
   2542  fd78
   2543  fd78
   2544  fd78				   CO
   2545  fd78		       42		      .byte.b	#%01000010	;
   2546  fd79		       a5		      .byte.b	#%10100101	; 
   2547  fd7a		       a5		      .byte.b	#%10100101	; 
   2548  fd7b		       a5		      .byte.b	#%10100101	; 
   2549  fd7c		       42		      .byte.b	#%01000010	;	
   2550  fd7d
   2551  fd7d				   CP
   2552  fd7d		       24		      .byte.b	#%00100100	;
   2553  fd7e		       24		      .byte.b	#%00100100	; 
   2554  fd7f		       e7		      .byte.b	#%11100111	; 
   2555  fd80		       a5		      .byte.b	#%10100101	; 
   2556  fd81		       e7		      .byte.b	#%11100111	;
   2557  fd82
   2558  fd82				   CQ
   2559  fd82		       81		      .byte.b	#%10000001	;
   2560  fd83		       e5		      .byte.b	#%11100101	; 
   2561  fd84		       a5		      .byte.b	#%10100101	; 
   2562  fd85		       a5		      .byte.b	#%10100101	; 
   2563  fd86		       e7		      .byte.b	#%11100111	;	
   2564  fd87
   2565  fd87				   CR
   2566  fd87		       a5		      .byte.b	#%10100101	;
   2567  fd88		       a5		      .byte.b	#%10100101	; 
   2568  fd89		       66		      .byte.b	#%01100110	; 
   2569  fd8a		       a5		      .byte.b	#%10100101	; 
   2570  fd8b		       66		      .byte.b	#%01100110	;
   2571  fd8c
   2572  fd8c				   CS
   2573  fd8c		       66		      .byte.b	#%01100110	;
   2574  fd8d		       81		      .byte.b	#%10000001	; 
   2575  fd8e		       42		      .byte.b	#%01000010	; 
   2576  fd8f		       24		      .byte.b	#%00100100	; 
   2577  fd90		       c3		      .byte.b	#%11000011	;
   2578  fd91
   2579  fd91				   CT
   2580  fd91		       42		      .byte.b	#%01000010	;
   2581  fd92		       42		      .byte.b	#%01000010	; 
   2582  fd93		       42		      .byte.b	#%01000010	; 
   2583  fd94		       42		      .byte.b	#%01000010	; 
   2584  fd95		       e7		      .byte.b	#%11100111	;
   2585  fd96
   2586  fd96				   CU
   2587  fd96		       e7		      .byte.b	#%11100111	;
   2588  fd97		       a5		      .byte.b	#%10100101	; 
   2589  fd98		       a5		      .byte.b	#%10100101	; 
   2590  fd99		       a5		      .byte.b	#%10100101	; 
   2591  fd9a		       a5		      .byte.b	#%10100101	;	
   2592  fd9b
   2593  fd9b				   CW
   2594  fd9b		       a5		      .byte.b	#%10100101	;
   2595  fd9c		       e7		      .byte.b	#%11100111	; 
   2596  fd9d		       a5		      .byte.b	#%10100101	; 
   2597  fd9e		       a5		      .byte.b	#%10100101	; 
   2598  fd9f		       a5		      .byte.b	#%10100101	;
   2599  fda0
   2600  fda0				   CY
   2601  fda0		       42		      .byte.b	#%01000010	;
   2602  fda1		       42		      .byte.b	#%01000010	; 
   2603  fda2		       42		      .byte.b	#%01000010	; 
   2604  fda3		       a5		      .byte.b	#%10100101	; 
   2605  fda4		       a5		      .byte.b	#%10100101	;
   2606  fda5
   2607  fda5				   Exclamation
   2608  fda5		       42		      .byte.b	#%01000010	;
   2609  fda6		       00		      .byte.b	#%00000000	; 
   2610  fda7		       42		      .byte.b	#%01000010	; 
   2611  fda8		       42		      .byte.b	#%01000010	; 
   2612  fda9		       42		      .byte.b	#%01000010	;
   2613  fdaa
   2614  fdaa				   Pipe
   2615  fdaa				   Colon
   2616  fdaa		       42		      .byte.b	#%01000010	;
   2617  fdab		       42		      .byte.b	#%01000010	; 
   2618  fdac		       00		      .byte.b	#%00000000	; 
   2619  fdad		       42		      .byte.b	#%01000010	; 
   2620  fdae		       42		      .byte.b	#%01000010	;
   2621  fdaf
   2622  fdaf				   Space
   2623  fdaf				   C0B
   2624  fdaf		       00		      .byte.b	#%00000000	;
   2625  fdb0		       00		      .byte.b	#%00000000	; 
   2626  fdb1		       00		      .byte.b	#%00000000	; 
   2627  fdb2		       00		      .byte.b	#%00000000	; 
   2628  fdb3		       00		      .byte.b	#%00000000	;	
   2629  fdb4				   C1B
   2630  fdb4		       24		      .byte.b	#%00100100	;
   2631  fdb5		       00		      .byte.b	#%00000000	; 
   2632  fdb6		       00		      .byte.b	#%00000000	; 
   2633  fdb7		       00		      .byte.b	#%00000000	; 
   2634  fdb8		       00		      .byte.b	#%00000000	;
   2635  fdb9				   C2B
   2636  fdb9		       66		      .byte.b	#%01100110	;
   2637  fdba		       00		      .byte.b	#%00000000	; 
   2638  fdbb		       00		      .byte.b	#%00000000	; 
   2639  fdbc		       00		      .byte.b	#%00000000	; 
   2640  fdbd		       00		      .byte.b	#%00000000	;
   2641  fdbe				   C3B
   2642  fdbe		       e7		      .byte.b	#%11100111	;
   2643  fdbf		       00		      .byte.b	#%00000000	; 
   2644  fdc0		       00		      .byte.b	#%00000000	; 
   2645  fdc1		       00		      .byte.b	#%00000000	; 
   2646  fdc2		       00		      .byte.b	#%00000000	;
   2647  fdc3				   C4B
   2648  fdc3		       e7		      .byte.b	#%11100111	;
   2649  fdc4		       24		      .byte.b	#%00100100	; 
   2650  fdc5		       00		      .byte.b	#%00000000	; 
   2651  fdc6		       00		      .byte.b	#%00000000	; 
   2652  fdc7		       00		      .byte.b	#%00000000	;
   2653  fdc8				   C5B
   2654  fdc8		       e7		      .byte.b	#%11100111	;
   2655  fdc9		       66		      .byte.b	#%01100110	; 
   2656  fdca		       00		      .byte.b	#%00000000	; 
   2657  fdcb		       00		      .byte.b	#%00000000	; 
   2658  fdcc		       00		      .byte.b	#%00000000	;
   2659  fdcd				   C6B
   2660  fdcd		       e7		      .byte.b	#%11100111	;
   2661  fdce		       e7		      .byte.b	#%11100111	; 
   2662  fdcf		       00		      .byte.b	#%00000000	; 
   2663  fdd0		       00		      .byte.b	#%00000000	; 
   2664  fdd1		       00		      .byte.b	#%00000000	;
   2665  fdd2				   C7B
   2666  fdd2		       e7		      .byte.b	#%11100111	;
   2667  fdd3		       e7		      .byte.b	#%11100111	; 
   2668  fdd4		       24		      .byte.b	#%00100100	; 
   2669  fdd5		       00		      .byte.b	#%00000000	; 
   2670  fdd6		       00		      .byte.b	#%00000000	;
   2671  fdd7				   C8B
   2672  fdd7		       e7		      .byte.b	#%11100111	;
   2673  fdd8		       e7		      .byte.b	#%11100111	; 
   2674  fdd9		       66		      .byte.b	#%01100110	; 
   2675  fdda		       00		      .byte.b	#%00000000	; 
   2676  fddb		       00		      .byte.b	#%00000000	;
   2677  fddc				   C9B
   2678  fddc		       e7		      .byte.b	#%11100111	;
   2679  fddd		       e7		      .byte.b	#%11100111	; 
   2680  fdde		       e7		      .byte.b	#%11100111	; 
   2681  fddf		       00		      .byte.b	#%00000000	; 
   2682  fde0		       00		      .byte.b	#%00000000	;
   2683  fde1				   CAB
   2684  fde1		       e7		      .byte.b	#%11100111	;
   2685  fde2		       e7		      .byte.b	#%11100111	; 
   2686  fde3		       e7		      .byte.b	#%11100111	; 
   2687  fde4		       24		      .byte.b	#%00100100	; 
   2688  fde5		       00		      .byte.b	#%00000000	;
   2689  fde6				   CBB
   2690  fde6		       e7		      .byte.b	#%11100111	;
   2691  fde7		       e7		      .byte.b	#%11100111	; 
   2692  fde8		       e7		      .byte.b	#%11100111	; 
   2693  fde9		       66		      .byte.b	#%01100110	; 
   2694  fdea		       00		      .byte.b	#%00000000	;
   2695  fdeb				   CCB
   2696  fdeb		       e7		      .byte.b	#%11100111	;
   2697  fdec		       e7		      .byte.b	#%11100111	; 
   2698  fded		       e7		      .byte.b	#%11100111	; 
   2699  fdee		       e7		      .byte.b	#%11100111	; 
   2700  fdef		       00		      .byte.b	#%00000000	;
   2701  fdf0
   2702  fdf0				   CDB
   2703  fdf0		       e7		      .byte.b	#%11100111	;
   2704  fdf1		       e7		      .byte.b	#%11100111	; 
   2705  fdf2		       e7		      .byte.b	#%11100111	; 
   2706  fdf3		       e7		      .byte.b	#%11100111	; 
   2707  fdf4		       24		      .byte.b	#%00100100	;
   2708  fdf5
   2709  fdf5				   CEB
   2710  fdf5		       e7		      .byte.b	#%11100111	;
   2711  fdf6		       e7		      .byte.b	#%11100111	; 
   2712  fdf7		       e7		      .byte.b	#%11100111	; 
   2713  fdf8		       e7		      .byte.b	#%11100111	; 
   2714  fdf9		       66		      .byte.b	#%01100110	;
   2715  fdfa
   2716  fdfa				   CFB
   2717  fdfa		       e7		      .byte.b	#%11100111	;
   2718  fdfb		       e7		      .byte.b	#%11100111	; 
   2719  fdfc		       e7		      .byte.b	#%11100111	; 
   2720  fdfd		       e7		      .byte.b	#%11100111	; 
   2721  fdfe		       e7		      .byte.b	#%11100111	;
   2722  fdff
   2723  fe00					      org	$FE00
   2724  fe00				   AesTable
   2725  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2726  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2727  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2728  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2729  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2730  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2731  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2732  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2733  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2734  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2735  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2736  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2737  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2738  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2739  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2740  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2741  ff00
   2742  ff00					      org	$FF00
   2743  ff00				   StaticText		; All static text must be on the same MSB block. 
   2744  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2745  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2746  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2747  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2748  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2749  ff04
   2750  ff04				   HellwayLeftText
   2751  ff04		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2752  ff05		       59		      .byte.b	#<CH + #FONT_OFFSET
   2753  ff06		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2754  ff07		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2755  ff08
   2756  ff08				   HellwayRightText
   2757  ff08		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2758  ff09		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2759  ff0a		       81		      .byte.b	#<CP + #FONT_OFFSET
   2760  ff0b		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2761  ff0c		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2762  ff0d
   2763  ff0d				   OpbText
   2764  ff0d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2765  ff0e		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2766  ff0f		       81		      .byte.b	#<CP + #FONT_OFFSET
   2767  ff10		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2768  ff11
   2769  ff11				   YearText
   2770  ff11		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2771  ff12		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2772  ff13		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2773  ff14		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2774  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2775  ff16
   2776  ff16				   GoText
   2777  ff16		       54		      .byte.b	#<CG + #FONT_OFFSET
   2778  ff17		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2779  ff18		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2780  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2781  ff1a
   2782  ff1a				   WinText
   2783  ff1a		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2784  ff1b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2785  ff1c		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2786  ff1d
   2787  ff1d				   LoseText
   2788  ff1d		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2789  ff1e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2790  ff1f		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2791  ff20
   2792  ff20				   BuildNumberText
   2793  ff20		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2794  ff21		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2795  ff22		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2796  ff23		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2797  ff24		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2798  ff25
   2799  ff25				   ReadyText
   2800  ff25		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2801  ff26		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2802  ff27		       36		      .byte.b	#<CA + #FONT_OFFSET
   2803  ff28		       45		      .byte.b	#<CD + #FONT_OFFSET
   2804  ff29		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2805  ff2a
   2806  ff2a				   EndStaticText
   2807  ff2a
   2808  ff2a				   EngineSoundType
   2809  ff2a		       02		      .byte.b	#2
   2810  ff2b		       02		      .byte.b	#2
   2811  ff2c		       0e		      .byte.b	#14
   2812  ff2d		       06		      .byte.b	#6
   2813  ff2e		       06		      .byte.b	#6
   2814  ff2f		       0e		      .byte.b	#14
   2815  ff30
   2816  ff30				   EngineBaseFrequence
   2817  ff30		       1f		      .byte.b	#31
   2818  ff31		       15		      .byte.b	#21
   2819  ff32		       14		      .byte.b	#20
   2820  ff33		       1f		      .byte.b	#31
   2821  ff34		       16		      .byte.b	#22
   2822  ff35		       03		      .byte.b	#3
   2823  ff36
   2824  ff36				   CarSprite0		; Upside down, Original Car
   2825  ff36		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2826  ff3e				   CarSprite0NoPadding
   2827  ff3e		       7e		      .byte.b	#%01111110
   2828  ff3f		       24		      .byte.b	#%00100100
   2829  ff40		       bd		      .byte.b	#%10111101
   2830  ff41		       3c		      .byte.b	#%00111100
   2831  ff42		       bd		      .byte.b	#%10111101
   2832  ff43		       3c		      .byte.b	#%00111100
   2833  ff44
   2834  ff44				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2835  ff44		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2836  ff4c				   CarSprite1NoPadding
   2837  ff4c		       bd		      .byte.b	#%10111101
   2838  ff4d		       7e		      .byte.b	#%01111110
   2839  ff4e		       5a		      .byte.b	#%01011010
   2840  ff4f		       66		      .byte.b	#%01100110
   2841  ff50		       bd		      .byte.b	#%10111101
   2842  ff51		       3c		      .byte.b	#%00111100
   2843  ff52
   2844  ff52				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2845  ff52		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2846  ff5a				   CarSprite2NoPadding
   2847  ff5a		       7e		      .byte.b	#%01111110
   2848  ff5b		       a5		      .byte.b	#%10100101
   2849  ff5c		       42		      .byte.b	#%01000010
   2850  ff5d		       42		      .byte.b	#%01000010
   2851  ff5e		       bd		      .byte.b	#%10111101
   2852  ff5f		       7e		      .byte.b	#%01111110
   2853  ff60
   2854  ff60				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2855  ff60		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2856  ff68				   CarSprite3NoPadding
   2857  ff68		       3c		      .byte.b	#%00111100
   2858  ff69		       db		      .byte.b	#%11011011
   2859  ff6a		       db		      .byte.b	#%11011011
   2860  ff6b		       3c		      .byte.b	#%00111100
   2861  ff6c		       5a		      .byte.b	#%01011010
   2862  ff6d		       3c		      .byte.b	#%00111100
   2863  ff6e
   2864  ff6e				   TrafficSpeeds
   2865  ff6e		       00		      .byte.b	#$00	;  Trafic0 L
   2866  ff6f		       00		      .byte.b	#$00	;  Trafic0 H
   2867  ff70		       0a		      .byte.b	#$0A	;  Trafic1 L
   2868  ff71		       01		      .byte.b	#$01	;  Trafic1 H
   2869  ff72		       e6		      .byte.b	#$E6	;  Trafic2 L
   2870  ff73		       00		      .byte.b	#$00	;  Trafic2 H
   2871  ff74		       c2		      .byte.b	#$C2	;  Trafic3 L
   2872  ff75		       00		      .byte.b	#$00	;  Trafic3 H
   2873  ff76		       9e		      .byte.b	#$9E	;  Trafic4 L
   2874  ff77		       00		      .byte.b	#$00	;  Trafic4 H
   2875  ff78				   TrafficSpeedsHighDelta
   2876  ff78		       00		      .byte.b	#$00	;  Trafic0 L
   2877  ff79		       00		      .byte.b	#$00	;  Trafic0 H
   2878  ff7a		       0a		      .byte.b	#$0A	;  Trafic1 L
   2879  ff7b		       01		      .byte.b	#$01	;  Trafic1 H
   2880  ff7c		       c8		      .byte.b	#$C8	;  Trafic2 L
   2881  ff7d		       00		      .byte.b	#$00	;  Trafic2 H
   2882  ff7e		       86		      .byte.b	#$86	;  Trafic3 L
   2883  ff7f		       00		      .byte.b	#$00	;  Trafic3 H
   2884  ff80		       44		      .byte.b	#$44	;  Trafic4 L
   2885  ff81		       00		      .byte.b	#$00	;  Trafic4 H
   2886  ff82
   2887  ff82				   CarIdToSpriteAddressL
   2888  ff82		       36		      .byte.b	#<CarSprite0
   2889  ff83		       44		      .byte.b	#<CarSprite1
   2890  ff84		       52		      .byte.b	#<CarSprite2
   2891  ff85		       60		      .byte.b	#<CarSprite3
   2892  ff86
   2893  ff86				   CarIdToSpriteAddressH
   2894  ff86		       ff		      .byte.b	#>CarSprite0
   2895  ff87		       ff		      .byte.b	#>CarSprite1
   2896  ff88		       ff		      .byte.b	#>CarSprite2
   2897  ff89		       ff		      .byte.b	#>CarSprite3
   2898  ff8a
   2899  ff8a				   EnemyCarIdToSpriteAddressL
   2900  ff8a		       3e		      .byte.b	#<CarSprite0NoPadding
   2901  ff8b		       4c		      .byte.b	#<CarSprite1NoPadding
   2902  ff8c		       5a		      .byte.b	#<CarSprite2NoPadding
   2903  ff8d		       68		      .byte.b	#<CarSprite3NoPadding
   2904  ff8e
   2905  ff8e				   EnemyCarIdToSpriteAddressH
   2906  ff8e		       ff		      .byte.b	#>CarSprite0NoPadding
   2907  ff8f		       ff		      .byte.b	#>CarSprite1NoPadding
   2908  ff90		       ff		      .byte.b	#>CarSprite2NoPadding
   2909  ff91		       ff		      .byte.b	#>CarSprite3NoPadding
   2910  ff92
   2911  ff92				   CarIdToAccelerateSpeed
   2912  ff92		       80		      .byte.b	#128
   2913  ff93		       c0		      .byte.b	#192
   2914  ff94		       60		      .byte.b	#96
   2915  ff95		       c0		      .byte.b	#192
   2916  ff96
   2917  ff96				   CarIdToTimeoverBreakInterval 		; Glide
   2918  ff96		       03		      .byte.b	#%00000011	;Every 4 frames
   2919  ff97		       03		      .byte.b	#%00000011	;Every 4 frames
   2920  ff98		       0f		      .byte.b	#%00001111	;Every 16 frames
   2921  ff99		       03		      .byte.b	#%00000011	;Every 4 frames
   2922  ff9a
   2923  ff9a				   CarIdToMaxSpeedL
   2924  ff9a		       80		      .byte.b	#$80
   2925  ff9b		       00		      .byte.b	#$00	; One less gear
   2926  ff9c		       80		      .byte.b	#$80
   2927  ff9d		       80		      .byte.b	#$80
   2928  ff9e
   2929  ff9e				   CarIdToMaxGear
   2930  ff9e		       05		      .byte.b	#5
   2931  ff9f		       04		      .byte.b	#4	; One less gear
   2932  ffa0		       05		      .byte.b	#5
   2933  ffa1		       05		      .byte.b	#5
   2934  ffa2
   2935  ffa2				   GearToBreakSpeedTable
   2936  ffa2		       09		      .byte.b	#(BREAK_SPEED - 1)
   2937  ffa3		       09		      .byte.b	#(BREAK_SPEED - 1)
   2938  ffa4		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2939  ffa5		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2940  ffa6		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2941  ffa7		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2942  ffa8
   2943  ffa8				   TrafficColorTable
   2944  ffa8		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2945  ffa9		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2946  ffaa		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2947  ffab		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2948  ffac
   2949  ffac				   TrafficChanceTable
   2950  ffac		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2951  ffad		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2952  ffae		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2953  ffaf		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2954  ffb0
   2955  ffb0				   TrafficTimeTable
   2956  ffb0		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2957  ffb1		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2958  ffb2		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2959  ffb3		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2960  ffb4		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2961  ffb5
   2962  ffb5
   2963  fffc					      org	$FFFC
   2964  fffc		       00 f0		      .word.w	BeforeStart
   2965  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
