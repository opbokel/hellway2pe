------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 f9	   PLAYER0_COLOR =	$F9
     61  f000		       00 96	   PLAYER1_COLOR =	$96
     62  f000
     63  f000		       00 f9	   SCORE_FONT_COLOR =	PLAYER0_COLOR
     64  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     65  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     66  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     67  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     68  f000
     69  f000		       00 21	   PLAYER_0_X_START =	33	;
     70  f000		       00 2a	   PLAYER_1_X_START =	42	;
     71  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     72  f000
     73  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     74  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     75  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     76  f000
     77  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     78  f000
     79  f000		       00 00	   BLACK      =	$00	;
     80  f000
     81  f000		       00 10	   MAX_GAME_MODE =	16
     82  f000
     83  f000		       00 08	   PARALLAX_SIZE =	8
     84  f000
     85  f000		       00 05	   HALF_TEXT_SIZE =	5
     86  f000
     87  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     88  f000
     89  f000		       00 49	   VERSION_COLOR =	$49
     90  f000
     91  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     92  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     93  f000		       00 00	   QR_CODE_COLOR =	$00
     94  f000		       00 19	   QR_CODE_SIZE =	25
     95  f000
     96  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     97  f000
     98  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     99  f000		       00 29	   VBLANK_TIMER =	41
    100  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    101  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    102  f000
    103  f000		       00 80	   GRP0Cache  =	$80
    104  f000		       00 81	   PF0Cache   =	$81
    105  f000		       00 82	   PF1Cache   =	$82
    106  f000		       00 83	   PF2Cache   =	$83
    107  f000		       00 84	   GRP1Cache  =	$84
    108  f000		       00 85	   ENABLCache =	$85
    109  f000		       00 86	   ENAM0Cache =	$86
    110  f000		       00 87	   ENAM1Cache =	$87
    111  f000
    112  f000		       00 8c	   FrameCount0 =	$8C	;
    113  f000		       00 8d	   FrameCount1 =	$8D	;
    114  f000
    115  f000		       00 8e	   CollisionCounter =	$8E
    116  f000		       00 8f	   OpCollisionCounter =	$8F
    117  f000
    118  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    119  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    120  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    121  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    122  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    123  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    124  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    125  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    126  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    127  f000
    128  f000							;Temporary variables, multiple uses
    129  f000		       00 b0	   Tmp0       =	$B0
    130  f000		       00 b1	   Tmp1       =	$B1
    131  f000		       00 b2	   Tmp2       =	$B2
    132  f000		       00 b3	   Tmp3       =	$B3
    133  f000		       00 b4	   Tmp4       =	$B4
    134  f000		       00 b5	   Tmp5       =	$B5
    135  f000
    136  f000		       00 b6	   Player0X   =	$B6
    137  f000		       00 b7	   Player1X   =	$B7
    138  f000		       00 b8	   CountdownTimer =	$B8
    139  f000		       00 b9	   OpCountdownTimer =	$B9
    140  f000		       00 ba	   Traffic0Msb =	$BA
    141  f000		       00 bb	   OpTraffic0Msb =	$BB
    142  f000		       00 bc	   SwitchDebounceCounter =	$BC
    143  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    144  f000		       00 be	   TrafficChance =	$BE
    145  f000		       00 bf	   OpTrafficChance =	$BF
    146  f000
    147  f000		       00 c0	   CheckpointTime =	$C0
    148  f000		       00 c1	   OpCheckpointTime =	$C1
    149  f000		       00 c2	   TrafficColor =	$C2
    150  f000		       00 c3	   OpTrafficColor =	$C3
    151  f000		       00 c4	   CurrentDifficulty =	$C4
    152  f000		       00 c5	   OpCurrentDifficulty =	$C5
    153  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, 
    154  f000							;Bit 2 speed delta, Bit 3 random traffic 
    155  f000
    156  f000		       00 c7	   CurrentCarId =	$C7
    157  f000		       00 c8	   OpCurrentCarId =	$C8
    158  f000
    159  f000		       00 c9	   ScoreFontColor =	$C9
    160  f000		       00 ca	   OpScoreFontColor =	$CA
    161  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    162  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    163  f000		       00 cd	   NextCheckpoint =	$CD
    164  f000		       00 ce	   OpNextCheckpoint =	$CE
    165  f000		       00 cf	   OpponentLine =	$CF
    166  f000
    167  f000		       00 d0	   ScoreD0    =	$D0
    168  f000		       00 d1	   ScoreD1    =	$D1
    169  f000		       00 d2	   ScoreD2    =	$D2
    170  f000		       00 d3	   ScoreD3    =	$D3
    171  f000		       00 d4	   ScoreD4    =	$D4
    172  f000
    173  f000		       00 d5	   Gear       =	$D5
    174  f000		       00 d6	   OpGear     =	$D6
    175  f000
    176  f000		       00 d7	   CarSpritePointerL =	$D7
    177  f000		       00 d8	   CarSpritePointerH =	$D8
    178  f000
    179  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    180  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    181  f000
    182  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    183  f000
    184  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    185  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    186  f000
    187  f000		       00 de	   TextSide   =	$DE	; Smarter to use a screen side variable for all
    188  f000		       00 df	   TextFlickerMode =	$DF	; First variable to condense into one or remove if not enough ram
    189  f000
    190  f000		       00 f0	   Player0SpeedL =	$F0
    191  f000		       00 f1	   Player1SpeedL =	$F1
    192  f000		       00 f2	   Player0SpeedH =	$F2
    193  f000		       00 f3	   Player1SpeedH =	$F3
    194  f000
    195  f000							;generic start up stuff, put zero in almost all...
    196  f000				   BeforeStart		;All variables that are kept on game reset or select
    197  f000		       a0 00		      LDY	#0
    198  f002		       84 bc		      STY	SwitchDebounceCounter
    199  f004		       84 c4		      STY	CurrentDifficulty
    200  f006		       84 bd		      STY	GameStatus
    201  f008		       84 c7		      STY	CurrentCarId
    202  f00a		       84 c8		      STY	OpCurrentCarId
    203  f00c		       a0 10		      LDY	#16
    204  f00e		       84 c6		      STY	GameMode
    205  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    206  f012
    207  f012				   Start
    208  f012		       a9 02		      LDA	#2
    209  f014		       85 00		      STA	VSYNC
    210  f016		       85 02		      STA	WSYNC
    211  f018		       85 02		      STA	WSYNC
    212  f01a		       85 02		      STA	WSYNC
    213  f01c		       a9 00		      LDA	#0	;2
    214  f01e		       85 00		      STA	VSYNC	;3
    215  f020
    216  f020		       78		      SEI
    217  f021		       d8		      CLD
    218  f022		       a2 ff		      LDX	#$FF
    219  f024		       9a		      TXS
    220  f025
    221  f025		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    222  f027				   CleanMem
    223  f027		       e0 bc		      CPX	#SwitchDebounceCounter
    224  f029		       f0 16		      BEQ	SkipClean
    225  f02b		       e0 c6		      CPX	#GameMode
    226  f02d		       f0 12		      BEQ	SkipClean
    227  f02f		       e0 c7		      CPX	#CurrentCarId
    228  f031		       f0 0e		      BEQ	SkipClean
    229  f033		       e0 c8		      CPX	#OpCurrentCarId
    230  f035		       f0 0a		      BEQ	SkipClean
    231  f037		       e0 c4		      CPX	#CurrentDifficulty
    232  f039		       f0 06		      BEQ	SkipClean
    233  f03b		       e0 bd		      CPX	#GameStatus
    234  f03d		       f0 02		      BEQ	SkipClean
    235  f03f		       95 00		      STA	0,X
    236  f041				   SkipClean
    237  f041		       e8		      INX
    238  f042		       d0 e3		      BNE	CleanMem
    239  f044
    240  f044		       a9 d5		      LDA	#213
    241  f046		       8d 96 02 	      STA	TIM64T	;3	
    242  f049
    243  f049							;Setting some variables...
    244  f049
    245  f049				   SettingTrafficOffsets		; Time sensitive with player H position
    246  f049		       85 02		      STA	WSYNC	;We will set player position
    247  f04b		       20 e4 f6 	      JSR	DefaultOffsets
    248  f04e
    249  f04e		       ad 8f ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    250  f051		       85 f0		      STA	Player0SpeedL
    251  f053		       85 f1		      STA	Player1SpeedL
    252  f055
    253  f055							;SLEEP 11;18
    254  f055		       a2 00		      LDX	#0
    255  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    256  f05a		       85 db		      STA	StartSWCHB	; For game over
    257  f05c		       29 c0		      AND	#%11000000
    258  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    259  f060		       e8		      INX
    260  f061		       c9 80		      CMP	#%10000000
    261  f063		       f0 06		      BEQ	CallConfigureDifficulty
    262  f065		       e8		      INX
    263  f066		       c9 40		      CMP	#%01000000
    264  f068		       f0 01		      BEQ	CallConfigureDifficulty
    265  f06a		       e8		      INX
    266  f06b
    267  f06b				   CallConfigureDifficulty
    268  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    269  f06d		       d0 04		      BNE	StoreCurrentDifficulty	; Do not change car
    270  f06f		       a5 bd		      LDA	GameStatus
    271  f071		       d0 00		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    272  f073				   StoreCurrentDifficulty
    273  f073		       86 c4		      STX	CurrentDifficulty
    274  f075		       20 b1 f6 	      JSR	ConfigureDifficulty
    275  f078
    276  f078				   SetGameNotRunning
    277  f078		       a9 00		      LDA	#0
    278  f07a		       85 bd		      STA	GameStatus
    279  f07c
    280  f07c				   ConfigureTimer
    281  f07c		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    282  f07e		       85 b8		      STA	CountdownTimer	;3
    283  f080		       85 b9		      STA	OpCountdownTimer	;3
    284  f082
    285  f082				   ConfigurePlayer1XPosition
    286  f082		       a9 2a		      LDA	#PLAYER_1_X_START	;2
    287  f084		       85 b7		      STA	Player1X	;3
    288  f086
    289  f086				   HPositioning 		; Avoid sleep doing needed stuff
    290  f086		       85 02		      STA	WSYNC
    291  f088
    292  f088				   ConfigurePlayer0XPosition
    293  f088		       a9 21		      LDA	#PLAYER_0_X_START	;2
    294  f08a		       85 b6		      STA	Player0X	;3
    295  f08c
    296  f08c				   ConfigureMissileSize
    297  f08c		       a9 30		      LDA	#%00110000	;2 Missile Size
    298  f08e		       85 04		      STA	NUSIZ0	;3
    299  f090		       85 05		      STA	NUSIZ1	;3
    300  f092
    301  f092				   ConfigureNextCheckpoint
    302  f092		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    303  f094		       85 cd		      STA	NextCheckpoint
    304  f096
    305  f096		       a9 00		      LDA	#0	; Avoid missile reseting position 
    306  f098							;SLEEP 41
      0  f098					      SLEEP	4	;
      1  f098				   .CYCLES    SET	4
      2  f098
      3  f098				  -	      IF	.CYCLES < 2
      4  f098				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f098				  -	      ERR
      6  f098					      ENDIF
      7  f098
      8  f098				  -	      IF	.CYCLES & 1
      9  f098				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f098				  -	      nop	0
     11  f098				  -	      ELSE
     12  f098				  -	      bit	VSYNC
     13  f098				  -	      ENDIF
     14  f098				  -.CYCLES    SET	.CYCLES - 3
     15  f098					      ENDIF
     16  f098
     17  f098					      REPEAT	.CYCLES / 2
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     19  f09a					      REPEND
    308  f09a		       85 12		      STA	RESM0
      0  f09c					      SLEEP	2	;
      1  f09c				   .CYCLES    SET	2
      2  f09c
      3  f09c				  -	      IF	.CYCLES < 2
      4  f09c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09c				  -	      ERR
      6  f09c					      ENDIF
      7  f09c
      8  f09c				  -	      IF	.CYCLES & 1
      9  f09c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09c				  -	      nop	0
     11  f09c				  -	      ELSE
     12  f09c				  -	      bit	VSYNC
     13  f09c				  -	      ENDIF
     14  f09c				  -.CYCLES    SET	.CYCLES - 3
     15  f09c					      ENDIF
     16  f09c
     17  f09c					      REPEAT	.CYCLES / 2
     18  f09c		       ea		      nop
     19  f09d					      REPEND
    310  f09d		       85 14		      STA	RESBL
      0  f09f					      SLEEP	2
      1  f09f				   .CYCLES    SET	2
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f				  -	      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f				  -	      ELSE
     12  f09f				  -	      bit	VSYNC
     13  f09f				  -	      ENDIF
     14  f09f				  -.CYCLES    SET	.CYCLES - 3
     15  f09f					      ENDIF
     16  f09f
     17  f09f					      REPEAT	.CYCLES / 2
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    312  f0a0		       85 13		      STA	RESM1
      0  f0a2					      SLEEP	3
      1  f0a2				   .CYCLES    SET	3
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4				  -	      REPEAT	.CYCLES / 2
     18  f0a4				  -	      nop
     19  f0a4					      REPEND
    314  f0a4
    315  f0a4		       a9 e0		      LDA	#$E0
    316  f0a6		       85 24		      STA	HMBL
    317  f0a8		       85 22		      STA	HMM0
    318  f0aa		       85 23		      STA	HMM1
    319  f0ac		       85 02		      STA	WSYNC
    320  f0ae		       85 2a		      STA	HMOVE
    321  f0b0		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    322  f0b2		       85 2b		      STA	HMCLR
      0  f0b4					      SLEEP	30
      1  f0b4				   .CYCLES    SET	30
      2  f0b4
      3  f0b4				  -	      IF	.CYCLES < 2
      4  f0b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b4				  -	      ERR
      6  f0b4					      ENDIF
      7  f0b4
      8  f0b4				  -	      IF	.CYCLES & 1
      9  f0b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b4				  -	      nop	0
     11  f0b4				  -	      ELSE
     12  f0b4				  -	      bit	VSYNC
     13  f0b4				  -	      ENDIF
     14  f0b4				  -.CYCLES    SET	.CYCLES - 3
     15  f0b4					      ENDIF
     16  f0b4
     17  f0b4					      REPEAT	.CYCLES / 2
     18  f0b4		       ea		      nop
     17  f0b4					      REPEND
     18  f0b5		       ea		      nop
     17  f0b5					      REPEND
     18  f0b6		       ea		      nop
     17  f0b6					      REPEND
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     17  f0c0					      REPEND
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     19  f0c3					      REPEND
    324  f0c3		       85 10		      STA	RESP0
    325  f0c5							;SLEEP 5 ; Temporarily move player 1 away.
    326  f0c5		       85 11		      STA	RESP1
    327  f0c7
    328  f0c7				   WaitResetToEnd
    329  f0c7		       ad 84 02 	      LDA	INTIM
    330  f0ca		       d0 fb		      BNE	WaitResetToEnd
    331  f0cc
    332  f0cc				   MainLoop
    333  f0cc		       a9 02		      LDA	#2
    334  f0ce		       85 00		      STA	VSYNC
    335  f0d0		       85 02		      STA	WSYNC
    336  f0d2		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    337  f0d4				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    338  f0d4		       a9 01		      LDA	#%00000001	;3
    339  f0d6		       24 df		      BIT	TextFlickerMode	;2
    340  f0d8		       f0 05		      BEQ	TextSideFrameZero	;2
    341  f0da		       25 8d		      AND	FrameCount1	;2
    342  f0dc		       4c e1 f0 	      JMP	StoreTextSize	;3
    343  f0df				   TextSideFrameZero
    344  f0df		       25 8c		      AND	FrameCount0	;2
    345  f0e1				   StoreTextSize
    346  f0e1		       85 de		      STA	TextSide	;3
    347  f0e3
    348  f0e3				   PrepareMaxHMove
      0  f0e3					      SLEEP	18	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE"
      1  f0e3				   .CYCLES    SET	18
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     19  f0ec					      REPEND
    350  f0ec		       a9 80		      LDA	#$80
    351  f0ee		       85 24		      STA	HMBL
    352  f0f0		       85 22		      STA	HMM0
    353  f0f2		       85 23		      STA	HMM1
    354  f0f4		       85 20		      STA	HMP0
    355  f0f6		       85 21		      STA	HMP1
    356  f0f8		       85 02		      STA	WSYNC
    357  f0fa		       85 2a		      STA	HMOVE	; 1/10			
    358  f0fc
    359  f0fc				   ConfigVBlankTimer
    360  f0fc		       a5 c6		      LDA	GameMode
    361  f0fe		       c9 10		      CMP	#MAX_GAME_MODE
    362  f100		       f0 05		      BEQ	SetVblankTimerQrCode
    363  f102		       a9 29		      LDA	#VBLANK_TIMER
    364  f104		       4c 09 f1 	      JMP	SetVblankTimer
    365  f107				   SetVblankTimerQrCode
    366  f107		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    367  f109
    368  f109				   SetVblankTimer
    369  f109		       85 02		      STA	WSYNC	;3
    370  f10b		       85 2a		      STA	HMOVE	; 2/10 Check if VSYNC can suffer this delay
    371  f10d		       8d 96 02 	      STA	TIM64T	;3	
    372  f110		       a9 00		      LDA	#0	;2
    373  f112		       85 00		      STA	VSYNC	;3	
    374  f114
    375  f114				   RandomizeGame
    376  f114		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    377  f116		       d0 2d		      BNE	EndRandomizeGame
    378  f118		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    379  f11a		       29 02		      AND	#%00000010
    380  f11c		       f0 24		      BEQ	DeterministicGame
    381  f11e		       a6 96		      LDX	TrafficOffset1 + 2
    382  f120		       bd 00 fe 	      LDA	AesTable,X
    383  f123		       45 8c		      EOR	FrameCount0
    384  f125		       85 96		      STA	TrafficOffset1 + 2
    385  f127		       85 a6		      STA	OpTrafficOffset1 + 2
    386  f129		       a6 9a		      LDX	TrafficOffset2 + 2
    387  f12b		       bd 00 fe 	      LDA	AesTable,X
    388  f12e		       45 8c		      EOR	FrameCount0
    389  f130		       85 9a		      STA	TrafficOffset2 + 2
    390  f132		       85 aa		      STA	OpTrafficOffset2 + 2
    391  f134		       a6 9e		      LDX	TrafficOffset3 + 2
    392  f136		       bd 00 fe 	      LDA	AesTable,X
    393  f139		       45 8c		      EOR	FrameCount0
    394  f13b		       85 9e		      STA	TrafficOffset3 + 2
    395  f13d		       85 ae		      STA	OpTrafficOffset3 + 2
    396  f13f		       4c 45 f1 	      JMP	EndRandomizeGame
    397  f142
    398  f142				   DeterministicGame
    399  f142		       20 e4 f6 	      JSR	DefaultOffsets
    400  f145
    401  f145				   EndRandomizeGame
    402  f145
    403  f145
    404  f145				   CountFrame
    405  f145		       e6 8c		      INC	FrameCount0	; 5
    406  f147		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    407  f149		       e6 8d		      INC	FrameCount1	; 5 
    408  f14b				   SkipIncFC1
    409  f14b
    410  f14b				   CallDrawQrCode
    411  f14b		       a5 c6		      LDA	GameMode
    412  f14d		       c9 10		      CMP	#MAX_GAME_MODE
    413  f14f		       d0 03		      BNE	TestIsGameRunning
    414  f151		       4c da fa 	      JMP	DrawQrCode
    415  f154
    416  f154							;Does not update the game if not running
    417  f154				   TestIsGameRunning
    418  f154		       a5 bd		      LDA	GameStatus	;3
    419  f156		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    420  f158				   SelectCarWithDpadCall		; Only do it when game is stoped
    421  f158		       a2 00		      LDX	#0	; Player 0
    422  f15a		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    423  f15c		       85 b0		      STA	Tmp0
    424  f15e		       20 ed f8 	      JSR	SelectCarWithDpad
    425  f161		       e8		      INX		; Player 1
    426  f162		       20 ed f8 	      JSR	SelectCarWithDpad
    427  f165
    428  f165							; Needs to draw the opponent in the correct line even when game stoped  
    429  f165							; Draeing is a destructive operation
    430  f165		       20 ff f8 	      JSR	ProcessOpponentLine
    431  f168
    432  f168				   CallConfigureCarSprites
    433  f168		       20 bb f8 	      JSR	ConfigureCarSprites
    434  f16b				   SkipUpdateLogicJump
    435  f16b		       4c b4 f1 	      JMP	SkipUpdateLogic
    436  f16e				   ContinueWithGameLogic
    437  f16e
    438  f16e				   CallEverySecond		; Timer for now
    439  f16e		       a2 00		      LDX	#0
    440  f170		       20 b0 fa 	      JSR	EverySecond
    441  f173		       e8		      INX
    442  f174		       20 b0 fa 	      JSR	EverySecond
    443  f177
    444  f177
    445  f177				   ChangeTextFlickerMode
    446  f177		       a5 bc		      LDA	SwitchDebounceCounter
    447  f179		       d0 0d		      BNE	EndChangeTextFlickerMode
    448  f17b		       ad 82 02 	      LDA	SWCHB
    449  f17e		       29 02		      AND	#%00000010	;Game select
    450  f180		       d0 06		      BNE	EndChangeTextFlickerMode
    451  f182		       e6 df		      INC	TextFlickerMode
    452  f184		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    453  f186		       85 bc		      STA	SwitchDebounceCounter
    454  f188				   EndChangeTextFlickerMode
    455  f188
    456  f188				   CallProcessSpeed
    457  f188		       a2 00		      LDX	#0
    458  f18a		       20 0d fa 	      JSR	ProcessSpeed
    459  f18d
    460  f18d		       e8		      INX		; Player 1
    461  f18e		       20 0d fa 	      JSR	ProcessSpeed
    462  f191
    463  f191				   CallUpdateOffsets
    464  f191		       a2 00		      LDX	#0	; Player 0
    465  f193		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    466  f195		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    467  f197		       a5 f0		      LDA	Player0SpeedL
    468  f199		       85 b4		      STA	Tmp4
    469  f19b		       a5 f2		      LDA	Player0SpeedH
    470  f19d		       85 b5		      STA	Tmp5
    471  f19f		       20 ba f9 	      JSR	UpdateOffsets
    472  f1a2
    473  f1a2							;LDX Exits the call with correct value.
    474  f1a2		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    475  f1a4		       85 b3		      STA	Tmp3
    476  f1a6		       a5 f1		      LDA	Player1SpeedL
    477  f1a8		       85 b4		      STA	Tmp4
    478  f1aa		       a5 f3		      LDA	Player1SpeedH
    479  f1ac		       85 b5		      STA	Tmp5
    480  f1ae		       20 ba f9 	      JSR	UpdateOffsets
    481  f1b1
    482  f1b1				   CallProcessOpponentLine
    483  f1b1		       20 ff f8 	      JSR	ProcessOpponentLine
    484  f1b4
    485  f1b4
    486  f1b4				   SkipUpdateLogic		; Continue here if not paused
    487  f1b4
    488  f1b4				   CallStatusUpdateSbr
    489  f1b4		       a2 00		      LDX	#0
    490  f1b6		       20 bd fa 	      JSR	CalculateGear
    491  f1b9		       20 ca fa 	      JSR	ProcessScoreFontColor
    492  f1bc		       e8		      INX
    493  f1bd		       20 bd fa 	      JSR	CalculateGear
    494  f1c0		       20 ca fa 	      JSR	ProcessScoreFontColor
    495  f1c3
    496  f1c3				   IsGameOver
    497  f1c3		       a5 b8		      LDA	CountdownTimer
    498  f1c5		       05 f0		      ORA	Player0SpeedL
    499  f1c7		       05 f2		      ORA	Player0SpeedH
    500  f1c9		       d0 0b		      BNE	IsCheckpoint
    501  f1cb		       a9 01		      LDA	#1
    502  f1cd		       85 cb		      STA	ScoreFontColorHoldChange
    503  f1cf		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    504  f1d1		       85 c9		      STA	ScoreFontColor
    505  f1d3		       4c 08 f2 	      JMP	SkipIsTimeOver
    506  f1d6
    507  f1d6				   IsCheckpoint
    508  f1d6		       a5 cd		      LDA	NextCheckpoint
    509  f1d8		       c5 92		      CMP	TrafficOffset0 + 2
    510  f1da		       d0 20		      BNE	SkipIsCheckpoint
    511  f1dc		       18		      CLC
    512  f1dd		       69 10		      ADC	#CHECKPOINT_INTERVAL
    513  f1df		       85 cd		      STA	NextCheckpoint
    514  f1e1		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    515  f1e3		       85 c9		      STA	ScoreFontColor
    516  f1e5		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    517  f1e7		       85 cb		      STA	ScoreFontColorHoldChange
    518  f1e9		       a5 b8		      LDA	CountdownTimer
    519  f1eb		       18		      CLC
    520  f1ec		       65 c0		      ADC	CheckpointTime
    521  f1ee		       85 b8		      STA	CountdownTimer
    522  f1f0		       90 04		      BCC	JumpSkipTimeOver
    523  f1f2		       a9 ff		      LDA	#$FF
    524  f1f4		       85 b8		      STA	CountdownTimer	; Does not overflow!
    525  f1f6				   JumpSkipTimeOver
    526  f1f6		       20 a2 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    527  f1f9		       4c 08 f2 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    528  f1fc				   SkipIsCheckpoint
    529  f1fc
    530  f1fc				   IsTimeOver
    531  f1fc		       a5 b8		      LDA	CountdownTimer
    532  f1fe		       d0 08		      BNE	SkipIsTimeOver
    533  f200		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    534  f202		       85 cb		      STA	ScoreFontColorHoldChange
    535  f204		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    536  f206		       85 c9		      STA	ScoreFontColor
    537  f208				   SkipIsTimeOver
    538  f208
    539  f208		       20 bb f8 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    540  f20b
    541  f20b				   CallProcessSound
    542  f20b		       20 c8 f5 	      JSR	ProcessSound
    543  f20e
    544  f20e							;Could be done during on vblank to save this comparisson time (before draw score), 
    545  f20e							;but I am saving vblank cycles for now, in case of 2 players.
    546  f20e				   ChooseTextSide		; 
    547  f20e		       a5 de		      LDA	TextSide	;3
    548  f210		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    549  f212		       4c 96 f2 	      JMP	RightScoreWrite
    550  f215
    551  f215				   LeftScoreWrite
    552  f215		       a5 c9		      LDA	ScoreFontColor
    553  f217		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    554  f219		       f0 51		      BEQ	PrintCheckpoint
    555  f21b		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    556  f21d		       f0 55		      BEQ	PrintStartGame
    557  f21f		       a5 bd		      LDA	GameStatus
    558  f221		       f0 59		      BEQ	PrintHellwayLeft
    559  f223				   WriteDistance		;Not optimized yet, ugly code.
    560  f223				   Digit0Timer
    561  f223		       a5 b8		      LDA	CountdownTimer	;3
    562  f225		       29 0f		      AND	#%00001111	;2
    563  f227		       aa		      TAX		; 2
    564  f228		       bd 6c fc 	      LDA	FontLookup,X	;4 
    565  f22b		       85 d1		      STA	ScoreD1	;3
    566  f22d
    567  f22d				   Digit1Timer
    568  f22d		       a5 b8		      LDA	CountdownTimer	;3
    569  f22f		       4a		      LSR		; 2
    570  f230		       4a		      LSR		; 2
    571  f231		       4a		      LSR		; 2
    572  f232		       4a		      LSR		; 2
    573  f233		       aa		      TAX		; 2
    574  f234		       bd 6c fc 	      LDA	FontLookup,X	;4
    575  f237		       85 d0		      STA	ScoreD0	;3
    576  f239
    577  f239				   SpeedBar
    578  f239		       a5 f0		      LDA	Player0SpeedL
    579  f23b		       29 e0		      AND	#%11100000	;2 Discard the last bits
    580  f23d		       18		      CLC
    581  f23e		       2a		      ROL		;First goes into carry
    582  f23f		       2a		      ROL
    583  f240		       2a		      ROL
    584  f241		       2a		      ROL
    585  f242		       85 b0		      STA	Tmp0
    586  f244		       a5 f2		      LDA	Player0SpeedH
    587  f246		       0a		      ASL
    588  f247		       0a		      ASL
    589  f248		       0a		      ASL
    590  f249		       05 b0		      ORA	Tmp0
    591  f24b		       aa		      TAX		; 2
    592  f24c		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    593  f24f		       85 d2		      STA	ScoreD2	;3
    594  f251
    595  f251				   DistanceCheckpointCount		; Will run all letters in the future
    596  f251		       a5 92		      LDA	TrafficOffset0 + 2	;3
    597  f253		       29 f0		      AND	#%11110000	;2
    598  f255		       4a		      LSR
    599  f256		       4a		      LSR
    600  f257		       4a		      LSR
    601  f258		       4a		      LSR
    602  f259		       aa		      TAX		; 2
    603  f25a		       bd 6c fc 	      LDA	FontLookup,X	;4 
    604  f25d		       85 d3		      STA	ScoreD3	;3
    605  f25f
    606  f25f				   DistanceBar		; 16 subdivisions per checkpoint
    607  f25f		       a5 92		      LDA	TrafficOffset0 + 2	;3
    608  f261		       29 0f		      AND	#%00001111	;2
    609  f263		       aa		      TAX		; 2
    610  f264		       bd 7d fc 	      LDA	BarLookup,X	;4 
    611  f267		       85 d4		      STA	ScoreD4	;3
    612  f269
    613  f269				   EndDrawDistance
    614  f269		       4c 0a f3 	      JMP	RightScoreWriteEnd	;3
    615  f26c
    616  f26c				   PrintCheckpoint
    617  f26c		       a2 00		      LDX	#<CheckpointText
    618  f26e		       20 f9 f6 	      JSR	PrintStaticText
    619  f271		       4c 0a f3 	      JMP	RightScoreWriteEnd	;3
    620  f274				   PrintStartGame
    621  f274		       a2 23		      LDX	#<GoText
    622  f276		       20 f9 f6 	      JSR	PrintStaticText
    623  f279		       4c 0a f3 	      JMP	RightScoreWriteEnd	;3
    624  f27c
    625  f27c				   PrintHellwayLeft
    626  f27c		       a5 8d		      LDA	FrameCount1
    627  f27e		       29 01		      AND	#1
    628  f280		       d0 05		      BNE	PrintCreditsLeft
    629  f282		       a2 05		      LDX	#<HellwayLeftText
    630  f284		       4c 89 f2 	      JMP	PrintGameMode
    631  f287				   PrintCreditsLeft
    632  f287		       a2 0f		      LDX	#<OpbText
    633  f289
    634  f289				   PrintGameMode
    635  f289		       20 f9 f6 	      JSR	PrintStaticText
    636  f28c		       a6 c6		      LDX	GameMode
    637  f28e		       bd 6c fc 	      LDA	FontLookup,X	;4 
    638  f291		       85 d0		      STA	ScoreD0	;3
    639  f293		       4c 0a f3 	      JMP	RightScoreWriteEnd	;3
    640  f296
    641  f296				   RightScoreWrite
    642  f296		       a5 bd		      LDA	GameStatus
    643  f298		       f0 4f		      BEQ	PrintHellwayRight
    644  f29a		       a5 c9		      LDA	ScoreFontColor
    645  f29c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    646  f29e		       f0 5c		      BEQ	PrintGameOver
    647  f2a0
    648  f2a0				   OpDigit0Timer
    649  f2a0		       a5 b9		      LDA	OpCountdownTimer	;3
    650  f2a2		       29 0f		      AND	#%00001111	;2
    651  f2a4		       aa		      TAX		; 2
    652  f2a5		       bd 6c fc 	      LDA	FontLookup,X	;4 
    653  f2a8		       85 d4		      STA	ScoreD4	;3
    654  f2aa
    655  f2aa				   OpDigit1Timer
    656  f2aa		       a5 b9		      LDA	OpCountdownTimer	;3
    657  f2ac		       4a		      LSR		; 2
    658  f2ad		       4a		      LSR		; 2
    659  f2ae		       4a		      LSR		; 2
    660  f2af		       4a		      LSR		; 2
    661  f2b0		       aa		      TAX		; 2
    662  f2b1		       bd 6c fc 	      LDA	FontLookup,X	;4
    663  f2b4		       85 d3		      STA	ScoreD3	;3
    664  f2b6
    665  f2b6				   OpSpeedBar
    666  f2b6		       a5 f1		      LDA	Player1SpeedL
    667  f2b8		       29 e0		      AND	#%11100000	;2 Discard the last bits
    668  f2ba		       18		      CLC
    669  f2bb		       2a		      ROL		;First goes into carry
    670  f2bc		       2a		      ROL
    671  f2bd		       2a		      ROL
    672  f2be		       2a		      ROL
    673  f2bf		       85 b0		      STA	Tmp0
    674  f2c1		       a5 f3		      LDA	Player1SpeedH
    675  f2c3		       0a		      ASL
    676  f2c4		       0a		      ASL
    677  f2c5		       0a		      ASL
    678  f2c6		       05 b0		      ORA	Tmp0
    679  f2c8		       aa		      TAX		; 2
    680  f2c9		       bd 8d fc 	      LDA	SpeedToBarLookup,X	;4
    681  f2cc		       85 d2		      STA	ScoreD2	;3
    682  f2ce
    683  f2ce				   OpDistanceCheckpointCount		; Will run all letters in the future
    684  f2ce		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    685  f2d0		       29 f0		      AND	#%11110000	;2
    686  f2d2		       4a		      LSR
    687  f2d3		       4a		      LSR
    688  f2d4		       4a		      LSR
    689  f2d5		       4a		      LSR
    690  f2d6		       aa		      TAX		; 2
    691  f2d7		       bd 6c fc 	      LDA	FontLookup,X	;4 
    692  f2da		       85 d1		      STA	ScoreD1	;3
    693  f2dc
    694  f2dc				   OpDistanceBar		; 16 subdivisions per checkpoint
    695  f2dc		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    696  f2de		       29 0f		      AND	#%00001111	;2
    697  f2e0		       aa		      TAX		; 2
    698  f2e1		       bd 7d fc 	      LDA	BarLookup,X	;4 
    699  f2e4		       85 d0		      STA	ScoreD0	;3
    700  f2e6		       4c 0a f3 	      JMP	RightScoreWriteEnd
    701  f2e9
    702  f2e9				   PrintHellwayRight
    703  f2e9		       a5 8d		      LDA	FrameCount1
    704  f2eb		       29 01		      AND	#1
    705  f2ed		       d0 05		      BNE	PrintCreditsRight
    706  f2ef		       a2 0a		      LDX	#<HellwayRightText
    707  f2f1		       4c f6 f2 	      JMP	PrintRightIntro
    708  f2f4				   PrintCreditsRight
    709  f2f4		       a2 14		      LDX	#<YearText
    710  f2f6				   PrintRightIntro
    711  f2f6		       20 f9 f6 	      JSR	PrintStaticText
    712  f2f9		       4c 0a f3 	      JMP	RightScoreWriteEnd
    713  f2fc				   PrintGameOver
    714  f2fc		       a5 8c		      LDA	FrameCount0
    715  f2fe		       30 05		      BMI	PrintOverText
    716  f300		       a2 19		      LDX	#<GameText
    717  f302		       4c 07 f3 	      JMP	StoreGameOverText
    718  f305				   PrintOverText
    719  f305		       a2 1e		      LDX	#<OverText
    720  f307				   StoreGameOverText
    721  f307		       20 f9 f6 	      JSR	PrintStaticText
    722  f30a				   RightScoreWriteEnd
    723  f30a
    724  f30a
    725  f30a				   ScoreBackgroundColor
    726  f30a		       a2 00		      LDX	#0
    727  f30c		       ad 82 02 	      LDA	SWCHB
    728  f30f		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
    729  f311		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
    730  f313		       f0 04		      BEQ	BlackAndWhiteScoreBg
    731  f315		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
    732  f317		       a2 03		      LDX	#BACKGROUND_COLOR
    733  f319				   BlackAndWhiteScoreBg
    734  f319		       85 b2		      STA	Tmp2	; Score Background
    735  f31b		       86 b3		      STX	Tmp3	; Traffic Background
    736  f31d
    737  f31d				   ConfigurePFForScore
    738  f31d							;LDA #SCORE_BACKGROUND_COLOR; Done above
    739  f31d		       85 09		      STA	COLUBK
    740  f31f		       20 60 f6 	      JSR	ClearAll
    741  f322		       a9 02		      LDA	#%00000010	; Score mode
    742  f324		       85 0a		      STA	CTRLPF
    743  f326		       a5 de		      LDA	TextSide	;3
    744  f328		       d0 0b		      BNE	LeftScoreOn	; Half of the screen with the correct colors.
    745  f32a				   RightScoreOn
    746  f32a		       a5 ca		      LDA	OpScoreFontColor
    747  f32c		       85 07		      STA	COLUP1
    748  f32e		       a5 b2		      LDA	Tmp2
    749  f330		       85 06		      STA	COLUP0
    750  f332		       4c 3d f3 	      JMP	CallWaitForVblankEnd
    751  f335				   LeftScoreOn
    752  f335		       a5 c9		      LDA	ScoreFontColor
    753  f337		       85 06		      STA	COLUP0
    754  f339		       a5 b2		      LDA	Tmp2
    755  f33b		       85 07		      STA	COLUP1
    756  f33d
    757  f33d							; After here we are going to update the screen, No more heavy code
    758  f33d				   CallWaitForVblankEnd
    759  f33d		       20 8c f8 	      JSR	WaitForVblankEnd
    760  f340
    761  f340				   DrawScoreHud
    762  f340		       20 17 f7 	      JSR	PrintScore
    763  f343
    764  f343		       85 02		      STA	WSYNC
    765  f345
    766  f345		       a5 0c		      LDA	INPT4	;3
    767  f347		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
    768  f349		       a5 c9		      LDA	ScoreFontColor
    769  f34b		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    770  f34d		       d0 0a		      BNE	WaitAnotherScoreLine
    771  f34f		       a5 de		      LDA	TextSide	;3
    772  f351		       d0 03		      BNE	LeftScoreOnGameOver
    773  f353		       4c 66 f8 	      JMP	DrawGameOverScreenRight
    774  f356				   LeftScoreOnGameOver
    775  f356		       4c d8 f7 	      JMP	DrawGameOverScreenLeft
    776  f359
    777  f359				   WaitAnotherScoreLine
    778  f359		       85 02		      STA	WSYNC
    779  f35b
    780  f35b				   PrepareForTraffic
    781  f35b		       20 76 f6 	      JSR	ClearPF	; 32
    782  f35e
    783  f35e		       85 02		      STA	WSYNC
    784  f360		       85 2a		      STA	HMOVE
    785  f362		       85 02		      STA	WSYNC
    786  f364		       85 2a		      STA	HMOVE
    787  f366
    788  f366		       a9 30		      LDA	#%00110000	; 2 Score mode
    789  f368		       85 0a		      STA	CTRLPF	;3
    790  f36a
    791  f36a		       a5 c2		      LDA	TrafficColor	;3
    792  f36c		       85 08		      STA	COLUPF	;3
    793  f36e
    794  f36e		       a9 96		      LDA	#PLAYER1_COLOR	;2
    795  f370		       85 07		      STA	COLUP1	;3
    796  f372
    797  f372		       a5 c9		      LDA	ScoreFontColor	;3
    798  f374		       85 06		      STA	COLUP0	;3
    799  f376
    800  f376		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    801  f378
    802  f378		       20 76 f6 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
    803  f37b
    804  f37b		       a6 b3		      LDX	Tmp3	; Background color.
    805  f37d
      0  f37d					      SLEEP	6	; Odd sleep destroys flags
      1  f37d				   .CYCLES    SET	6
      2  f37d
      3  f37d				  -	      IF	.CYCLES < 2
      4  f37d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f37d				  -	      ERR
      6  f37d					      ENDIF
      7  f37d
      8  f37d				  -	      IF	.CYCLES & 1
      9  f37d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f37d				  -	      nop	0
     11  f37d				  -	      ELSE
     12  f37d				  -	      bit	VSYNC
     13  f37d				  -	      ENDIF
     14  f37d				  -.CYCLES    SET	.CYCLES - 3
     15  f37d					      ENDIF
     16  f37d
     17  f37d					      REPEAT	.CYCLES / 2
     18  f37d		       ea		      nop
     17  f37d					      REPEND
     18  f37e		       ea		      nop
     17  f37e					      REPEND
     18  f37f		       ea		      nop
     19  f380					      REPEND
    807  f380
    808  f380		       a5 8c		      LDA	FrameCount0	;Brach flag
    809  f382		       29 01		      AND	#%00000001
    810  f384
    811  f384		       86 09		      STX	COLUBK	;3
    812  f386		       d0 05		      BNE	OpDrawCache	;2
    813  f388		       4c 47 f4 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    814  f38b							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    815  f38b
    816  f38b							;main scanline loop...
    817  f38b				   OpScanLoop
    818  f38b		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    819  f38d
    820  f38d							;Start of next line!			
    821  f38d				   OpDrawCache		;63 Is the last line going to the top of the next frame?
    822  f38d
    823  f38d		       a5 80		      LDA	GRP0Cache	;3
    824  f38f		       85 1b		      STA	GRP0	;3
    825  f391
    826  f391		       a5 84		      LDA	GRP1Cache	;3
    827  f393		       85 1c		      STA	GRP1	;3
    828  f395
    829  f395		       a5 85		      LDA	ENABLCache	;3
    830  f397		       85 1f		      STA	ENABL	;3
    831  f399
    832  f399		       a5 86		      LDA	ENAM0Cache	;3
    833  f39b		       85 1d		      STA	ENAM0	;3
    834  f39d
    835  f39d		       a5 87		      LDA	ENAM1Cache	;3
    836  f39f		       85 1e		      STA	ENAM1	;3
    837  f3a1
    838  f3a1		       a5 81		      LDA	PF0Cache	;3
    839  f3a3		       85 0d		      STA	PF0	;3
    840  f3a5
    841  f3a5		       a9 00		      LDA	#0	;2
    842  f3a7							;STA PF0	     ;3
    843  f3a7		       85 80		      STA	GRP0Cache	;3
    844  f3a9		       85 86		      STA	ENAM0Cache	;3
    845  f3ab		       85 85		      STA	ENABLCache	;3
    846  f3ad		       85 87		      STA	ENAM1Cache	; 3
    847  f3af							;STA GRP1Cache ;3
    848  f3af		       85 0d		      STA	PF0	;3
    849  f3b1							;STA PF2	     ;3
    850  f3b1
    851  f3b1		       a5 83		      LDA	PF2Cache	;3
    852  f3b3		       85 0f		      STA	PF2	;3
    853  f3b5
    854  f3b5				   OpDrawCar0
    855  f3b5		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    856  f3b7		       b0 04		      BCS	OpSkipDrawCar	;2
    857  f3b9		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    858  f3bb		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    859  f3bd				   OpSkipDrawCar
    860  f3bd
    861  f3bd							;BEQ DrawTraffic3
    862  f3bd				   OpDrawTraffic1		; 33
    863  f3bd		       98		      TYA		; 2
    864  f3be		       18		      CLC		; 2 
    865  f3bf		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    866  f3c1		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    867  f3c3		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    868  f3c5		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    869  f3c7		       4c cc f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    870  f3ca				   OpEorOffsetWithCarry
    871  f3ca		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    872  f3cc				   OpAfterEorOffsetWithCarry		;17
    873  f3cc		       aa		      TAX		;2
    874  f3cd		       bd 00 fe 	      LDA	AesTable,X	; 4
    875  f3d0		       c5 bf		      CMP	OpTrafficChance	;3
    876  f3d2		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    877  f3d4		       a9 ff		      LDA	#$FF	;2
    878  f3d6		       85 86		      STA	ENAM0Cache	;3
    879  f3d8				   OpFinishDrawTraffic1
    880  f3d8
    881  f3d8				   OpErasePF2
    882  f3d8		       a9 00		      LDA	#0
    883  f3da		       85 0f		      STA	PF2
    884  f3dc
    885  f3dc				   OpDrawTraffic2		; 33
    886  f3dc		       98		      TYA		; 2
    887  f3dd		       18		      CLC		; 2 
    888  f3de		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    889  f3e0		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    890  f3e2		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    891  f3e4		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    892  f3e6		       4c eb f3 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    893  f3e9				   OpEorOffsetWithCarry2
    894  f3e9		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    895  f3eb				   OpAfterEorOffsetWithCarry2		;17
    896  f3eb		       aa		      TAX		;2
    897  f3ec		       bd 00 fe 	      LDA	AesTable,X	; 4
    898  f3ef		       c5 bf		      CMP	OpTrafficChance	;3
    899  f3f1		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    900  f3f3		       a9 02		      LDA	#%00000010	;2
    901  f3f5		       85 85		      STA	ENABLCache	;3
    902  f3f7				   OpFinishDrawTraffic2
    903  f3f7
    904  f3f7							;STA WSYNC ;65 / 137
    905  f3f7
    906  f3f7							; LDA Tmp0 ; Flicker this line if drawing car
    907  f3f7							; BEQ FinishDrawTraffic4
    908  f3f7				   OpDrawTraffic3		; 33
    909  f3f7		       98		      TYA		; 2
    910  f3f8		       18		      CLC		; 2 
    911  f3f9		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    912  f3fb		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    913  f3fd		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    914  f3ff		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    915  f401		       4c 06 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    916  f404				   OpEorOffsetWithCarry3
    917  f404		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    918  f406				   OpAfterEorOffsetWithCarry3		;17
    919  f406		       aa		      TAX		;2
    920  f407		       bd 00 fe 	      LDA	AesTable,X	; 4
    921  f40a		       c5 bf		      CMP	OpTrafficChance	;3
    922  f40c		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    923  f40e		       a9 02		      LDA	#%00000010	;2
    924  f410		       85 87		      STA	ENAM1Cache
    925  f412				   OpFinishDrawTraffic3
    926  f412
    927  f412				   OpDrawOponent		;26
    928  f412		       84 b0		      STY	Tmp0	;3
    929  f414		       a4 cf		      LDY	OpponentLine	;3
    930  f416		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    931  f418		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    932  f41a				   OpDrawOpponent
    933  f41a		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    934  f41c		       85 80		      STA	GRP0Cache	;3
    935  f41e		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    936  f420		       a4 b0		      LDY	Tmp0	;3
    937  f422		       4c 36 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    938  f425				   OpSkipDrawOpponent
    939  f425		       c6 cf		      DEC	OpponentLine	;5
    940  f427		       a4 b0		      LDY	Tmp0	;3
    941  f429
    942  f429
    943  f429				   OpDrawTraffic0		; 21 2pe
    944  f429		       98		      TYA		; 2
    945  f42a		       18		      CLC		; 2 
    946  f42b		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    947  f42d		       29 08		      AND	#%00001000	;2
    948  f42f		       f0 05		      BEQ	OpHasNoBorderP0	;3
    949  f431				   OpHasBorderP0
    950  f431		       a9 70		      LDA	#%01110000	; 2
    951  f433		       4c 38 f4 	      JMP	OpStoreBorderP0	; 3
    952  f436				   OpHasNoBorderP0
    953  f436		       a9 00		      LDA	#0	; 2
    954  f438				   OpStoreBorderP0
    955  f438		       85 81		      STA	PF0Cache	; 3
    956  f43a		       85 83		      STA	PF2Cache	; 3
    957  f43c
    958  f43c				   OpSkipDrawTraffic0
    959  f43c
    960  f43c				   OpWhileScanLoop
    961  f43c		       88		      DEY		;2
    962  f43d		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    963  f43f		       4c 8b f3 	      JMP	OpScanLoop	;3
    964  f442				   OpFinishScanLoop		; 7 209 of 222
    965  f442		       4c fa f4 	      JMP	FinishScanLoop
    966  f445
    967  f445							;main scanline loop...
    968  f445				   ScanLoop
    969  f445		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
    970  f447
    971  f447							;Start of next line!			
    972  f447				   DrawCache		;63 Is the last line going to the top of the next frame?
    973  f447		       a5 81		      LDA	PF0Cache	;3
    974  f449		       85 0d		      STA	PF0	;3
    975  f44b
    976  f44b		       a5 80		      LDA	GRP0Cache	;3
    977  f44d		       85 1b		      STA	GRP0	;3
    978  f44f
    979  f44f		       a5 84		      LDA	GRP1Cache	;3
    980  f451		       85 1c		      STA	GRP1	;3
    981  f453
    982  f453		       a5 86		      LDA	ENAM0Cache	;3
    983  f455		       85 1d		      STA	ENAM0	;3
    984  f457
    985  f457		       a5 85		      LDA	ENABLCache	;3
    986  f459		       85 1f		      STA	ENABL	;3
    987  f45b
    988  f45b		       a5 87		      LDA	ENAM1Cache	;3
    989  f45d		       85 1e		      STA	ENAM1	;3
    990  f45f
    991  f45f		       a5 83		      LDA	PF2Cache	;3
    992  f461		       85 0f		      STA	PF2	;3
    993  f463
    994  f463		       a9 00		      LDA	#0	;2
    995  f465		       85 0d		      STA	PF0	;3
    996  f467		       85 84		      STA	GRP1Cache	;3
    997  f469		       85 85		      STA	ENABLCache	;3
    998  f46b		       85 86		      STA	ENAM0Cache	;3
    999  f46d		       85 87		      STA	ENAM1Cache	; 3
   1000  f46f							;STA GRP0Cache
   1001  f46f		       85 0f		      STA	PF2	;3
   1002  f471
   1003  f471				   DrawCar0
   1004  f471		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1005  f473		       b0 04		      BCS	SkipDrawCar	;2
   1006  f475		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1007  f477		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1008  f479				   SkipDrawCar
   1009  f479
   1010  f479							;BEQ DrawTraffic3
   1011  f479				   DrawTraffic1 		; 33
   1012  f479		       98		      TYA		; 2
   1013  f47a		       18		      CLC		; 2 
   1014  f47b		       65 95		      ADC	TrafficOffset1 + 1	;3
   1015  f47d		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1016  f47f		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1017  f481		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1018  f483		       4c 88 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1019  f486				   EorOffsetWithCarry
   1020  f486		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1021  f488				   AfterEorOffsetWithCarry		;17
   1022  f488		       aa		      TAX		;2
   1023  f489		       bd 00 fe 	      LDA	AesTable,X	; 4
   1024  f48c		       c5 be		      CMP	TrafficChance	;3
   1025  f48e		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1026  f490		       a9 ff		      LDA	#$FF	;2
   1027  f492		       85 86		      STA	ENAM0Cache	;3
   1028  f494				   FinishDrawTraffic1
   1029  f494
   1030  f494				   DrawTraffic2 		; 33
   1031  f494		       98		      TYA		; 2
   1032  f495		       18		      CLC		; 2 
   1033  f496		       65 99		      ADC	TrafficOffset2 + 1	;3
   1034  f498		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1035  f49a		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1036  f49c		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1037  f49e		       4c a3 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1038  f4a1				   EorOffsetWithCarry2
   1039  f4a1		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1040  f4a3				   AfterEorOffsetWithCarry2		;17
   1041  f4a3		       aa		      TAX		;2
   1042  f4a4		       bd 00 fe 	      LDA	AesTable,X	; 4
   1043  f4a7		       c5 be		      CMP	TrafficChance	;3
   1044  f4a9		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1045  f4ab		       a9 02		      LDA	#%00000010	;2
   1046  f4ad		       85 85		      STA	ENABLCache	;3
   1047  f4af				   FinishDrawTraffic2
   1048  f4af
   1049  f4af							;STA WSYNC ;65 / 137
   1050  f4af
   1051  f4af							; LDA Tmp0 ; Flicker this line if drawing car
   1052  f4af							; BEQ FinishDrawTraffic4
   1053  f4af				   DrawTraffic3 		; 33
   1054  f4af		       98		      TYA		; 2
   1055  f4b0		       18		      CLC		; 2 
   1056  f4b1		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1057  f4b3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1058  f4b5		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1059  f4b7		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1060  f4b9		       4c be f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1061  f4bc				   EorOffsetWithCarry3
   1062  f4bc		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1063  f4be				   AfterEorOffsetWithCarry3		;17
   1064  f4be		       aa		      TAX		;2
   1065  f4bf		       bd 00 fe 	      LDA	AesTable,X	; 4
   1066  f4c2		       c5 be		      CMP	TrafficChance	;3
   1067  f4c4		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1068  f4c6		       a9 02		      LDA	#%00000010	;2
   1069  f4c8		       85 87		      STA	ENAM1Cache
   1070  f4ca				   FinishDrawTraffic3
   1071  f4ca
   1072  f4ca
   1073  f4ca				   DrawOponent		;26
   1074  f4ca		       84 b0		      STY	Tmp0	;3
   1075  f4cc		       a4 cf		      LDY	OpponentLine	;3
   1076  f4ce		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1077  f4d0		       b0 0b		      BCS	SkipDrawOpponent	;2
   1078  f4d2				   DrawOpponent
   1079  f4d2		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1080  f4d4		       85 84		      STA	GRP1Cache	;3
   1081  f4d6		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1082  f4d8		       a4 b0		      LDY	Tmp0	;3
   1083  f4da		       4c ee f4 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1084  f4dd				   SkipDrawOpponent
   1085  f4dd		       c6 cf		      DEC	OpponentLine	;5
   1086  f4df		       a4 b0		      LDY	Tmp0	;3
   1087  f4e1
   1088  f4e1				   DrawTraffic0 		; 21 2pe
   1089  f4e1		       98		      TYA		; 2
   1090  f4e2		       18		      CLC		; 2 
   1091  f4e3		       65 91		      ADC	TrafficOffset0 + 1	;3
   1092  f4e5		       29 08		      AND	#%00001000	;2
   1093  f4e7		       f0 05		      BEQ	HasNoBorderP0	;3
   1094  f4e9				   HasBorderP0
   1095  f4e9		       a9 70		      LDA	#%01110000	; 2
   1096  f4eb		       4c f0 f4 	      JMP	StoreBorderP0	; 3
   1097  f4ee				   HasNoBorderP0
   1098  f4ee		       a9 00		      LDA	#0	; 2
   1099  f4f0				   StoreBorderP0
   1100  f4f0		       85 81		      STA	PF0Cache	; 3
   1101  f4f2		       85 83		      STA	PF2Cache	; 3
   1102  f4f4
   1103  f4f4				   SkipDrawTraffic0
   1104  f4f4
   1105  f4f4				   WhileScanLoop
   1106  f4f4		       88		      DEY		;2
   1107  f4f5		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1108  f4f7		       4c 45 f4 	      JMP	ScanLoop	;3
   1109  f4fa				   FinishScanLoop		; 7 209 of 222
   1110  f4fa
   1111  f4fa		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1112  f4fc		       20 85 f6 	      JSR	LoadAll
   1113  f4ff		       85 02		      STA	WSYNC	; do stuff!
   1114  f501		       85 02		      STA	WSYNC
   1115  f503		       85 02		      STA	WSYNC
   1116  f505
   1117  f505				   PrepareOverscan
   1118  f505		       a9 02		      LDA	#2
   1119  f507		       85 02		      STA	WSYNC
   1120  f509							;STA HMOVE	; HMOVE 10
   1121  f509		       85 01		      STA	VBLANK
   1122  f50b
   1123  f50b		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1124  f50d		       8d 96 02 	      STA	TIM64T
   1125  f510
   1126  f510		       85 2b		      STA	HMCLR	; Before we process car movement
   1127  f512							;Read Fire Button before, will make it start the game for now.
   1128  f512				   StartGame
   1129  f512		       a5 0c		      LDA	INPT4	;3
   1130  f514		       25 0d		      AND	INPT5	;3 player 
   1131  f516		       30 38		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1132  f518		       a5 8c		      LDA	FrameCount0
   1133  f51a		       29 01		      AND	#%00000001
   1134  f51c		       d0 32		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1135  f51e		       a5 bd		      LDA	GameStatus	;3
   1136  f520		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1137  f522		       d0 2c		      BNE	SkipGameStart
   1138  f524		       a5 c6		      LDA	GameMode
   1139  f526		       c9 10		      CMP	#MAX_GAME_MODE
   1140  f528		       d0 0b		      BNE	SetGameRunning
   1141  f52a		       a9 00		      LDA	#0
   1142  f52c		       85 c6		      STA	GameMode
   1143  f52e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1144  f530		       85 bc		      STA	SwitchDebounceCounter
   1145  f532		       4c 50 f5 	      JMP	SkipGameStart
   1146  f535				   SetGameRunning
   1147  f535		       e6 bd		      INC	GameStatus
   1148  f537		       a9 00		      LDA	#0	;
   1149  f539		       85 8c		      STA	FrameCount0
   1150  f53b		       85 8d		      STA	FrameCount1
   1151  f53d		       a9 0a		      LDA	#10
   1152  f53f		       85 19		      STA	AUDV0
   1153  f541		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1154  f543		       85 c9		      STA	ScoreFontColor
   1155  f545		       85 ca		      STA	OpScoreFontColor
   1156  f547		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1157  f549		       85 cb		      STA	ScoreFontColorHoldChange
   1158  f54b		       85 cc		      STA	OpScoreFontColorHoldChange
   1159  f54d		       4c b8 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1160  f550				   SkipGameStart
   1161  f550
   1162  f550				   ReadSwitches
   1163  f550		       a6 bc		      LDX	SwitchDebounceCounter
   1164  f552		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1165  f554		       a9 01		      LDA	#%00000001
   1166  f556		       2c 82 02 	      BIT	SWCHB
   1167  f559		       d0 07		      BNE	SkipReset
   1168  f55b		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1169  f55d		       85 bc		      STA	SwitchDebounceCounter
   1170  f55f		       4c c0 f5 	      JMP	OverScanWaitBeforeReset
   1171  f562				   SkipReset
   1172  f562
   1173  f562				   GameModeSelect
   1174  f562		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1175  f564		       d0 1c		      BNE	SkipGameSelect
   1176  f566		       20 b1 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1177  f569				   ContinueGameSelect
   1178  f569		       a9 02		      LDA	#%00000010
   1179  f56b		       2c 82 02 	      BIT	SWCHB
   1180  f56e		       d0 12		      BNE	SkipGameSelect
   1181  f570		       a6 c6		      LDX	GameMode
   1182  f572		       e0 10		      CPX	#MAX_GAME_MODE
   1183  f574		       f0 04		      BEQ	ResetGameMode
   1184  f576		       e8		      INX
   1185  f577		       4c 7c f5 	      JMP	StoreGameMode
   1186  f57a				   ResetGameMode
   1187  f57a		       a2 00		      LDX	#0
   1188  f57c				   StoreGameMode
   1189  f57c		       86 c6		      STX	GameMode
   1190  f57e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1191  f580		       85 bc		      STA	SwitchDebounceCounter
   1192  f582				   SkipGameSelect
   1193  f582		       4c 87 f5 	      JMP	EndReadSwitches
   1194  f585				   DecrementSwitchDebounceCounter
   1195  f585		       c6 bc		      DEC	SwitchDebounceCounter
   1196  f587				   EndReadSwitches
   1197  f587
   1198  f587				   DoNotTurnBeforeStart
   1199  f587							;STA HMCLR
   1200  f587		       a5 bd		      LDA	GameStatus
   1201  f589		       f0 2d		      BEQ	OverScanWait
   1202  f58b
   1203  f58b							; Last thing, will overrride hmove
   1204  f58b				   CallTestColisionAndMove
   1205  f58b		       a2 00		      LDX	#0	; Player 0
   1206  f58d							; Colision with traffic, each player check different flags,
   1207  f58d		       a5 8c		      LDA	FrameCount0
   1208  f58f		       29 01		      AND	#%00000001
   1209  f591		       d0 07		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1210  f593		       a5 01		      LDA	CXM1P
   1211  f595		       4a		      LSR
   1212  f596		       05 00		      ORA	CXM0P
   1213  f598		       05 02		      ORA	CXP0FB
   1214  f59a							; ORA CXPPMM ; Collision between players will have its own rules
   1215  f59a				   SkipColisionPlayer0		; Should not colide on opponent side.
   1216  f59a		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1217  f59c		       85 b2		      STA	Tmp2
   1218  f59e		       20 3a f9 	      JSR	TestCollisionAndMove
   1219  f5a1
   1220  f5a1		       e8		      INX		; player 1
   1221  f5a2		       a5 8c		      LDA	FrameCount0
   1222  f5a4		       29 01		      AND	#%00000001
   1223  f5a6		       f0 07		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1224  f5a8		       a5 00		      LDA	CXM0P
   1225  f5aa		       4a		      LSR
   1226  f5ab		       05 01		      ORA	CXM1P
   1227  f5ad		       05 03		      ORA	CXP1FB
   1228  f5af				   SkipColisionPlayer1
   1229  f5af		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1230  f5b1		       85 b2		      STA	Tmp2
   1231  f5b3		       20 3a f9 	      JSR	TestCollisionAndMove
   1232  f5b6
   1233  f5b6				   ClearCollision
   1234  f5b6		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1235  f5b8
   1236  f5b8				   OverScanWait
   1237  f5b8		       ad 84 02 	      LDA	INTIM
   1238  f5bb		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1239  f5bd		       4c cc f0 	      JMP	MainLoop
   1240  f5c0
   1241  f5c0				   OverScanWaitBeforeReset
   1242  f5c0		       ad 84 02 	      LDA	INTIM
   1243  f5c3		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1244  f5c5		       4c 12 f0 	      JMP	Start
   1245  f5c8
   1246  f5c8				   Subroutines
   1247  f5c8
   1248  f5c8				   ProcessSound
   1249  f5c8				   LeftSound		;41
   1250  f5c8		       a5 b8		      LDA	CountdownTimer	;3
   1251  f5ca		       f0 1b		      BEQ	EngineOff	;2
   1252  f5cc		       a6 d5		      LDX	Gear
   1253  f5ce		       a5 f0		      LDA	Player0SpeedL	;3
   1254  f5d0		       4a		      LSR		;2
   1255  f5d1		       4a		      LSR		;2
   1256  f5d2		       4a		      LSR		;2
   1257  f5d3		       29 0f		      AND	#%00001111	;2
   1258  f5d5		       85 b0		      STA	Tmp0	;3
   1259  f5d7		       bd 49 ff 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1260  f5da		       38		      SEC		;2
   1261  f5db		       e5 b0		      SBC	Tmp0	;3
   1262  f5dd		       85 17		      STA	AUDF0	;3
   1263  f5df		       bd 43 ff 	      LDA	EngineSoundType,X	;4
   1264  f5e2		       85 15		      STA	AUDC0	;3
   1265  f5e4		       4c eb f5 	      JMP	EndLeftSound	;3
   1266  f5e7				   EngineOff
   1267  f5e7		       a9 00		      LDA	#0
   1268  f5e9		       85 15		      STA	AUDC0
   1269  f5eb
   1270  f5eb				   EndLeftSound
   1271  f5eb
   1272  f5eb
   1273  f5eb				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1274  f5eb		       a5 c9		      LDA	ScoreFontColor	;3
   1275  f5ed		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1276  f5ef		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1277  f5f1		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1278  f5f3		       f0 29		      BEQ	PlayCheckpoint	;2
   1279  f5f5		       a5 8e		      LDA	CollisionCounter	;3
   1280  f5f7		       c9 e0		      CMP	#$E0	;2
   1281  f5f9		       b0 14		      BCS	PlayColision	;2
   1282  f5fb		       a5 cd		      LDA	NextCheckpoint	;3
   1283  f5fd		       38		      SEC		;2
   1284  f5fe		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1285  f600		       c9 02		      CMP	#$02	;2
   1286  f602		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1287  f604		       a5 b8		      LDA	CountdownTimer	; 3
   1288  f606		       f0 53		      BEQ	MuteRightSound	;2
   1289  f608		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1290  f60a		       90 37		      BCC	PlayWarnTimeEnding	;4
   1291  f60c		       4c 5b f6 	      JMP	MuteRightSound	;3
   1292  f60f				   PlayColision
   1293  f60f		       a9 1f		      LDA	#31
   1294  f611		       85 18		      STA	AUDF1
   1295  f613		       a9 08		      LDA	#8
   1296  f615		       85 16		      STA	AUDC1
   1297  f617		       a9 08		      LDA	#8
   1298  f619		       85 1a		      STA	AUDV1
   1299  f61b		       4c 5f f6 	      JMP	EndRightSound
   1300  f61e
   1301  f61e				   PlayCheckpoint
   1302  f61e		       a5 cb		      LDA	ScoreFontColorHoldChange	;3
   1303  f620		       4a		      LSR		;2
   1304  f621		       4a		      LSR		;2
   1305  f622		       4a		      LSR		;2
   1306  f623		       85 18		      STA	AUDF1	;3
   1307  f625		       a9 0c		      LDA	#12	;2
   1308  f627		       85 16		      STA	AUDC1	;3
   1309  f629		       a9 06		      LDA	#6	;2
   1310  f62b		       85 1a		      STA	AUDV1	;3
   1311  f62d		       4c 5f f6 	      JMP	EndRightSound	;3
   1312  f630
   1313  f630				   PlayBeforeCheckpoint
   1314  f630		       a5 8c		      LDA	FrameCount0	;3
   1315  f632		       29 1c		      AND	#%00011100	;2
   1316  f634		       09 03		      ORA	#%00000011	;2
   1317  f636		       85 18		      STA	AUDF1	;3
   1318  f638		       a9 0c		      LDA	#12	;2
   1319  f63a		       85 16		      STA	AUDC1	;3
   1320  f63c		       a9 03		      LDA	#3	;2
   1321  f63e		       85 1a		      STA	AUDV1	;3
   1322  f640		       4c 5f f6 	      JMP	EndRightSound	;3
   1323  f643
   1324  f643				   PlayWarnTimeEnding
   1325  f643		       a5 8c		      LDA	FrameCount0	;3
   1326  f645		       29 04		      AND	#%00000100	;2
   1327  f647		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1328  f649		       18		      CLC		;2
   1329  f64a		       a9 0a		      LDA	#10	;2
   1330  f64c		       65 b8		      ADC	CountdownTimer	;2
   1331  f64e		       85 18		      STA	AUDF1	;3
   1332  f650		       a9 0c		      LDA	#12	;2
   1333  f652		       85 16		      STA	AUDC1	;3
   1334  f654		       a9 03		      LDA	#3	;2
   1335  f656		       85 1a		      STA	AUDV1	;3
   1336  f658		       4c 5f f6 	      JMP	EndRightSound	;3
   1337  f65b
   1338  f65b				   MuteRightSound
   1339  f65b		       a9 00		      LDA	#0
   1340  f65d		       85 1a		      STA	AUDV1
   1341  f65f				   EndRightSound
   1342  f65f		       60		      RTS
   1343  f660
   1344  f660				   ClearAll		; 58
   1345  f660		       a9 00		      LDA	#0	;2
   1346  f662		       85 1b		      STA	GRP0	;3
   1347  f664		       85 1c		      STA	GRP1	;3
   1348  f666		       85 1f		      STA	ENABL	;3
   1349  f668		       85 1d		      STA	ENAM0	;3
   1350  f66a		       85 1e		      STA	ENAM1	;3
   1351  f66c		       85 80		      STA	GRP0Cache	;3
   1352  f66e		       85 84		      STA	GRP1Cache	;3
   1353  f670		       85 85		      STA	ENABLCache	;3
   1354  f672		       85 86		      STA	ENAM0Cache	;3
   1355  f674		       85 87		      STA	ENAM1Cache	;3
   1356  f676
   1357  f676				   ClearPF		; 26
   1358  f676		       a9 00		      LDA	#0	;2
   1359  f678				   ClearPFSkipLDA0
   1360  f678		       85 0d		      STA	PF0	;3
   1361  f67a		       85 0e		      STA	PF1	;3
   1362  f67c		       85 0f		      STA	PF2	;3	
   1363  f67e		       85 81		      STA	PF0Cache	;3
   1364  f680		       85 82		      STA	PF1Cache	;3
   1365  f682		       85 83		      STA	PF2Cache	;3 
   1366  f684		       60		      RTS		;6
   1367  f685				   EndClearAll
   1368  f685
   1369  f685				   LoadAll		; 48
   1370  f685		       a5 81		      LDA	PF0Cache	;3
   1371  f687		       85 0d		      STA	PF0	;3
   1372  f689
   1373  f689		       a5 82		      LDA	PF1Cache	;3
   1374  f68b		       85 0e		      STA	PF1	;3
   1375  f68d
   1376  f68d		       a5 83		      LDA	PF2Cache	;3
   1377  f68f		       85 0f		      STA	PF2	;3
   1378  f691
   1379  f691		       a5 84		      LDA	GRP1Cache	;3
   1380  f693		       85 1c		      STA	GRP1	;3
   1381  f695
   1382  f695		       a5 85		      LDA	ENABLCache	;3
   1383  f697		       85 1f		      STA	ENABL	;3
   1384  f699
   1385  f699		       a5 86		      LDA	ENAM0Cache	;3
   1386  f69b		       85 1d		      STA	ENAM0	;3
   1387  f69d
   1388  f69d		       a5 87		      LDA	ENAM1Cache	;3
   1389  f69f		       85 1e		      STA	ENAM1	;3
   1390  f6a1
   1391  f6a1		       60		      RTS		;6
   1392  f6a2				   EndLoadAll
   1393  f6a2
   1394  f6a2				   NextDifficulty
   1395  f6a2		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1396  f6a4		       29 01		      AND	#%00000001
   1397  f6a6		       d0 2a		      BNE	CheckRandomDifficulty
   1398  f6a8
   1399  f6a8		       a5 c4		      LDA	CurrentDifficulty
   1400  f6aa		       18		      CLC
   1401  f6ab		       69 01		      ADC	#1
   1402  f6ad		       29 03		      AND	#%00000011	; 0 to 3
   1403  f6af		       85 c4		      STA	CurrentDifficulty
   1404  f6b1
   1405  f6b1				   ConfigureDifficulty
   1406  f6b1		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1407  f6b3		       b9 c5 ff 	      LDA	TrafficChanceTable,Y
   1408  f6b6		       85 be		      STA	TrafficChance
   1409  f6b8		       85 bf		      STA	OpTrafficChance	; Needs FIX
   1410  f6ba		       b9 c1 ff 	      LDA	TrafficColorTable,Y
   1411  f6bd		       85 c2		      STA	TrafficColor
   1412  f6bf		       85 c3		      STA	OpTrafficColor	; Needs FIX
   1413  f6c1
   1414  f6c1		       a5 c6		      LDA	GameMode	;
   1415  f6c3		       29 01		      AND	#%00000001
   1416  f6c5		       f0 03		      BEQ	UseNextDifficultyTime
   1417  f6c7		       4c cb f6 	      JMP	StoreDifficultyTime
   1418  f6ca				   UseNextDifficultyTime
   1419  f6ca		       c8		      INY
   1420  f6cb				   StoreDifficultyTime
   1421  f6cb		       b9 c9 ff 	      LDA	TrafficTimeTable,Y
   1422  f6ce		       85 c0		      STA	CheckpointTime
   1423  f6d0		       85 c1		      STA	OpCheckpointTime
   1424  f6d2
   1425  f6d2				   CheckRandomDifficulty
   1426  f6d2		       a5 c6		      LDA	GameMode
   1427  f6d4		       29 08		      AND	#%00001000	; Random difficulties
   1428  f6d6		       f0 0b		      BEQ	ReturnFromNextDifficulty
   1429  f6d8				   RandomDifficulty		; need work to make 2 players compatible
   1430  f6d8		       a6 8c		      LDX	FrameCount0
   1431  f6da		       bd 00 fe 	      LDA	AesTable,X
   1432  f6dd							;EOR TrafficChance, no need, lets make life simple
   1433  f6dd		       29 3f		      AND	#%00111111
   1434  f6df		       85 be		      STA	TrafficChance
   1435  f6e1		       85 bf		      STA	OpTrafficChance	; While not fix
   1436  f6e3
   1437  f6e3				   ReturnFromNextDifficulty
   1438  f6e3		       60		      RTS
   1439  f6e4
   1440  f6e4				   DefaultOffsets
   1441  f6e4		       a9 20		      LDA	#$20
   1442  f6e6		       85 96		      STA	TrafficOffset1 + 2
   1443  f6e8		       85 a6		      STA	OpTrafficOffset1 + 2
   1444  f6ea		       a9 40		      LDA	#$40
   1445  f6ec		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1446  f6ee		       85 aa		      STA	OpTrafficOffset2 + 2
   1447  f6f0		       a9 60		      LDA	#$60
   1448  f6f2		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1449  f6f4		       85 ae		      STA	OpTrafficOffset3 + 2
   1450  f6f6		       a9 80		      LDA	#$80
   1451  f6f8		       60		      RTS
   1452  f6f9
   1453  f6f9				   PrintStaticText		; Preload X with the offset referent to StaticText
   1454  f6f9		       bd 00 ff 	      LDA	StaticText,X
   1455  f6fc		       85 d0		      STA	ScoreD0
   1456  f6fe		       e8		      INX
   1457  f6ff		       bd 00 ff 	      LDA	StaticText,X
   1458  f702		       85 d1		      STA	ScoreD1
   1459  f704		       e8		      INX
   1460  f705		       bd 00 ff 	      LDA	StaticText,X
   1461  f708		       85 d2		      STA	ScoreD2
   1462  f70a		       e8		      INX
   1463  f70b		       bd 00 ff 	      LDA	StaticText,X
   1464  f70e		       85 d3		      STA	ScoreD3
   1465  f710		       e8		      INX
   1466  f711		       bd 00 ff 	      LDA	StaticText,X
   1467  f714		       85 d4		      STA	ScoreD4
   1468  f716		       60		      RTS
   1469  f717
   1470  f717				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1471  f717		       a2 00		      LDX	#0
   1472  f719		       a0 04		      LDY	#FONT_OFFSET
   1473  f71b
   1474  f71b				   ScoreLoop		; 20 
   1475  f71b		       85 02		      STA	WSYNC	;2
   1476  f71d		       85 2a		      STA	HMOVE
   1477  f71f
   1478  f71f		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1479  f721		       85 0d		      STA	PF0	;3
   1480  f723
   1481  f723		       a5 82		      LDA	PF1Cache	;3
   1482  f725		       85 0e		      STA	PF1	;3
   1483  f727
   1484  f727		       a5 83		      LDA	PF2Cache	;3
   1485  f729		       85 0f		      STA	PF2	;3
   1486  f72b
   1487  f72b				   DrawScoreD0		; 15
   1488  f72b		       a6 d0		      LDX	ScoreD0	; 3
   1489  f72d		       bd 00 fd 	      LDA	Font,X	;4
   1490  f730		       85 81		      STA	PF0Cache	;3
   1491  f732		       c6 d0		      DEC	ScoreD0	;5
   1492  f734
   1493  f734				   DrawScoreD1		; 23	
   1494  f734		       a6 d1		      LDX	ScoreD1	; 3
   1495  f736		       bd 00 fd 	      LDA	Font,X	;4
   1496  f739		       0a		      ASL		;2
   1497  f73a		       0a		      ASL		;2
   1498  f73b		       0a		      ASL		;2
   1499  f73c		       0a		      ASL		;2
   1500  f73d		       85 82		      STA	PF1Cache	;3
   1501  f73f		       c6 d1		      DEC	ScoreD1	;5
   1502  f741
   1503  f741				   DrawScoreD2		; 20
   1504  f741		       a6 d2		      LDX	ScoreD2	; 3
   1505  f743		       bd 00 fd 	      LDA	Font,X	;4
   1506  f746		       29 0f		      AND	#%00001111	;2
   1507  f748		       05 82		      ORA	PF1Cache	;3
   1508  f74a		       85 82		      STA	PF1Cache	;3
   1509  f74c		       c6 d2		      DEC	ScoreD2	;5
   1510  f74e
   1511  f74e				   DrawScoreD3		; 23
   1512  f74e		       a6 d3		      LDX	ScoreD3	; 3
   1513  f750		       bd 00 fd 	      LDA	Font,X	;4
   1514  f753		       4a		      LSR		;2
   1515  f754		       4a		      LSR		;2
   1516  f755		       4a		      LSR		;2
   1517  f756		       4a		      LSR		;2
   1518  f757		       85 83		      STA	PF2Cache	;3
   1519  f759		       c6 d3		      DEC	ScoreD3	;5
   1520  f75b
   1521  f75b				   DrawScoreD4		; 20
   1522  f75b		       a6 d4		      LDX	ScoreD4	; 3
   1523  f75d		       bd 00 fd 	      LDA	Font,X	;4
   1524  f760		       29 f0		      AND	#%11110000	;2
   1525  f762		       05 83		      ORA	PF2Cache	;3
   1526  f764		       85 83		      STA	PF2Cache	;3
   1527  f766		       c6 d4		      DEC	ScoreD4	;5
   1528  f768
   1529  f768
   1530  f768		       88		      DEY		;2
   1531  f769		       10 b0		      BPL	ScoreLoop	;4
   1532  f76b
   1533  f76b		       85 02		      STA	WSYNC
   1534  f76d		       85 2a		      STA	HMOVE
   1535  f76f		       20 85 f6 	      JSR	LoadAll
   1536  f772		       60		      RTS		; 6
   1537  f773
   1538  f773				   PrintRightDecimalDigits
   1539  f773		       b9 00 00 	      LDA	0,Y
   1540  f776		       4a		      LSR
   1541  f777		       4a		      LSR
   1542  f778		       4a		      LSR
   1543  f779		       4a		      LSR
   1544  f77a		       aa		      TAX
   1545  f77b		       bd 6c fc 	      LDA	FontLookup,X	;4
   1546  f77e		       85 d2		      STA	ScoreD2	;3
   1547  f780
   1548  f780		       b9 00 00 	      LDA	0,Y
   1549  f783		       29 0f		      AND	#%00001111
   1550  f785		       aa		      TAX
   1551  f786		       bd 6c fc 	      LDA	FontLookup,X	;4
   1552  f789		       85 d3		      STA	ScoreD3	;3
   1553  f78b
   1554  f78b		       c8		      INY
   1555  f78c		       b9 00 00 	      LDA	0,Y
   1556  f78f		       4a		      LSR
   1557  f790		       4a		      LSR
   1558  f791		       4a		      LSR
   1559  f792		       4a		      LSR
   1560  f793		       aa		      TAX
   1561  f794		       bd 6c fc 	      LDA	FontLookup,X	;4
   1562  f797		       85 d0		      STA	ScoreD0	;3
   1563  f799
   1564  f799		       b9 00 00 	      LDA	0,Y
   1565  f79c		       29 0f		      AND	#%00001111
   1566  f79e		       aa		      TAX
   1567  f79f		       bd 6c fc 	      LDA	FontLookup,X	;4
   1568  f7a2		       85 d1		      STA	ScoreD1	;3
   1569  f7a4
   1570  f7a4		       a9 ae		      LDA	#<Triangle + FONT_OFFSET
   1571  f7a6		       85 d4		      STA	ScoreD4
   1572  f7a8		       60		      RTS
   1573  f7a9
   1574  f7a9				   PrintLastLeftDecimalDigits
   1575  f7a9		       b9 00 00 	      LDA	0,Y
   1576  f7ac		       4a		      LSR
   1577  f7ad		       4a		      LSR
   1578  f7ae		       4a		      LSR
   1579  f7af		       4a		      LSR
   1580  f7b0		       aa		      TAX
   1581  f7b1		       bd 6c fc 	      LDA	FontLookup,X	;4
   1582  f7b4		       85 d3		      STA	ScoreD3	;3
   1583  f7b6		       b9 00 00 	      LDA	0,Y
   1584  f7b9		       29 0f		      AND	#%00001111
   1585  f7bb		       aa		      TAX
   1586  f7bc		       bd 6c fc 	      LDA	FontLookup,X	;4
   1587  f7bf		       85 d4		      STA	ScoreD4	;3
   1588  f7c1		       60		      RTS
   1589  f7c2
   1590  f7c2				   PrintZerosLeft
   1591  f7c2		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1592  f7c4		       85 d2		      STA	ScoreD2
   1593  f7c6		       85 d3		      STA	ScoreD3
   1594  f7c8		       85 d4		      STA	ScoreD4
   1595  f7ca		       60		      RTS
   1596  f7cb
   1597  f7cb				   DrawGameOverScoreLine
   1598  f7cb		       85 02		      STA	WSYNC
   1599  f7cd		       20 17 f7 	      JSR	PrintScore
   1600  f7d0		       85 02		      STA	WSYNC
   1601  f7d2		       85 02		      STA	WSYNC
   1602  f7d4		       20 76 f6 	      JSR	ClearPF
   1603  f7d7		       60		      RTS
   1604  f7d8
   1605  f7d8				   DrawGameOverScreenLeft
   1606  f7d8		       85 02		      STA	WSYNC
   1607  f7da		       20 76 f6 	      JSR	ClearPF
   1608  f7dd
   1609  f7dd				   DrawGlideTimerLeft
   1610  f7dd		       20 9f f8 	      JSR	Sleep8Lines
   1611  f7e0		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1612  f7e2		       85 06		      STA	COLUP0
   1613  f7e4		       85 02		      STA	WSYNC
   1614  f7e6		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1615  f7e8		       85 d0		      STA	ScoreD0
   1616  f7ea		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1617  f7ec		       85 d1		      STA	ScoreD1
   1618  f7ee		       20 c2 f7 	      JSR	PrintZerosLeft
   1619  f7f1		       20 cb f7 	      JSR	DrawGameOverScoreLine
   1620  f7f4
   1621  f7f4				   DrawHitCountLeft
   1622  f7f4		       20 9f f8 	      JSR	Sleep8Lines
   1623  f7f7		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1624  f7f9		       85 06		      STA	COLUP0
   1625  f7fb		       85 02		      STA	WSYNC
   1626  f7fd		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1627  f7ff		       85 d0		      STA	ScoreD0
   1628  f801		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1629  f803		       85 d1		      STA	ScoreD1
   1630  f805		       20 c2 f7 	      JSR	PrintZerosLeft
   1631  f808		       20 cb f7 	      JSR	DrawGameOverScoreLine
   1632  f80b
   1633  f80b				   DrawCheckpointCountLeft
   1634  f80b		       20 9f f8 	      JSR	Sleep8Lines
   1635  f80e		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1636  f810		       85 06		      STA	COLUP0
   1637  f812		       85 02		      STA	WSYNC
   1638  f814		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1639  f816		       85 d0		      STA	ScoreD0
   1640  f818		       a9 a9		      LDA	#<Colon + #FONT_OFFSET
   1641  f81a		       85 d1		      STA	ScoreD1
   1642  f81c		       20 c2 f7 	      JSR	PrintZerosLeft
   1643  f81f		       20 cb f7 	      JSR	DrawGameOverScoreLine
   1644  f822
   1645  f822				   DrawGameVersionLeft
   1646  f822		       20 9f f8 	      JSR	Sleep8Lines
   1647  f825		       a9 49		      LDA	#VERSION_COLOR
   1648  f827		       85 06		      STA	COLUP0
   1649  f829
   1650  f829		       a5 c6		      LDA	GameMode
   1651  f82b		       aa		      TAX
   1652  f82c		       bd 6c fc 	      LDA	FontLookup,X	;4
   1653  f82f		       85 d0		      STA	ScoreD0	;3
   1654  f831
   1655  f831		       a5 c7		      LDA	CurrentCarId
   1656  f833		       aa		      TAX
   1657  f834		       bd 6c fc 	      LDA	FontLookup,X	;4
   1658  f837		       85 d1		      STA	ScoreD1	;3
   1659  f839
   1660  f839		       a5 db		      LDA	StartSWCHB
   1661  f83b		       29 40		      AND	#%01000000	; P0 difficulty
   1662  f83d		       49 40		      EOR	#%01000000	; Reverse bytes
   1663  f83f		       2a		      ROL
   1664  f840		       2a		      ROL
   1665  f841		       2a		      ROL
   1666  f842		       18		      CLC
   1667  f843		       69 0a		      ADC	#10
   1668  f845		       aa		      TAX
   1669  f846		       bd 6c fc 	      LDA	FontLookup,X	;4
   1670  f849		       85 d2		      STA	ScoreD2	;3
   1671  f84b
   1672  f84b		       a5 db		      LDA	StartSWCHB
   1673  f84d		       29 80		      AND	#%10000000	; P0 difficulty
   1674  f84f		       49 80		      EOR	#%10000000	; Reverse bytes
   1675  f851		       2a		      ROL
   1676  f852		       2a		      ROL
   1677  f853		       18		      CLC
   1678  f854		       69 0a		      ADC	#10
   1679  f856		       aa		      TAX
   1680  f857		       bd 6c fc 	      LDA	FontLookup,X	;4
   1681  f85a		       85 d3		      STA	ScoreD3	;3
   1682  f85c
   1683  f85c		       a9 a9		      LDA	#<Pipe + FONT_OFFSET
   1684  f85e		       85 d4		      STA	ScoreD4
   1685  f860
   1686  f860		       20 cb f7 	      JSR	DrawGameOverScoreLine
   1687  f863
   1688  f863		       4c 7c f8 	      JMP	FinalizeDrawGameOver
   1689  f866
   1690  f866				   DrawGameOverScreenRight
   1691  f866		       85 02		      STA	WSYNC
   1692  f868		       20 76 f6 	      JSR	ClearPF
   1693  f86b
   1694  f86b				   DrawVersionRight
   1695  f86b		       20 9f f8 	      JSR	Sleep8Lines
   1696  f86e		       a9 49		      LDA	#VERSION_COLOR
   1697  f870		       85 07		      STA	COLUP1
   1698  f872		       85 02		      STA	WSYNC
   1699  f874		       a2 28		      LDX	#<VersionText
   1700  f876		       20 f9 f6 	      JSR	PrintStaticText
   1701  f879		       20 cb f7 	      JSR	DrawGameOverScoreLine
   1702  f87c
   1703  f87c				   FinalizeDrawGameOver
   1704  f87c		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1705  f87e		       85 c9		      STA	ScoreFontColor
   1706  f880		       20 96 f8 	      JSR	Sleep4Lines
   1707  f883		       20 a6 f8 	      JSR	Sleep32Lines
   1708  f886		       20 a6 f8 	      JSR	Sleep32Lines
   1709  f889		       4c 05 f5 	      JMP	PrepareOverscan
   1710  f88c
   1711  f88c				   WaitForVblankEnd
   1712  f88c		       ad 84 02 	      LDA	INTIM
   1713  f88f		       d0 fb		      BNE	WaitForVblankEnd
   1714  f891		       85 02		      STA	WSYNC
   1715  f893		       85 01		      STA	VBLANK
   1716  f895		       60		      RTS
   1717  f896
   1718  f896				   Sleep4Lines
   1719  f896		       85 02		      STA	WSYNC
   1720  f898		       85 02		      STA	WSYNC
   1721  f89a		       85 02		      STA	WSYNC
   1722  f89c		       85 02		      STA	WSYNC
   1723  f89e		       60		      RTS
   1724  f89f
   1725  f89f				   Sleep8Lines
   1726  f89f		       20 96 f8 	      JSR	Sleep4Lines
   1727  f8a2		       20 96 f8 	      JSR	Sleep4Lines
   1728  f8a5		       60		      RTS
   1729  f8a6
   1730  f8a6				   Sleep32Lines
   1731  f8a6		       20 9f f8 	      JSR	Sleep8Lines
   1732  f8a9		       20 9f f8 	      JSR	Sleep8Lines
   1733  f8ac		       20 9f f8 	      JSR	Sleep8Lines
   1734  f8af		       20 9f f8 	      JSR	Sleep8Lines
   1735  f8b2		       60		      RTS
   1736  f8b3
   1737  f8b3							;X = number of WSYNC HMOVE to run
   1738  f8b3				   HMoveXTimes
   1739  f8b3		       85 02		      STA	WSYNC	;3
   1740  f8b5		       85 2a		      STA	HMOVE	; 3/10 
   1741  f8b7		       ca		      DEX
   1742  f8b8		       d0 f9		      BNE	HMoveXTimes
   1743  f8ba		       60		      RTS
   1744  f8bb
   1745  f8bb				   ConfigureCarSprites
   1746  f8bb		       a5 8c		      LDA	FrameCount0
   1747  f8bd		       29 01		      AND	#%00000001
   1748  f8bf		       d0 0b		      BNE	LoadForRightScreenSprites
   1749  f8c1				   LoadForLeftScreenSprites
   1750  f8c1		       a5 c7		      LDA	CurrentCarId
   1751  f8c3		       85 b0		      STA	Tmp0
   1752  f8c5		       a5 c8		      LDA	OpCurrentCarId
   1753  f8c7		       85 b1		      STA	Tmp1
   1754  f8c9		       4c d4 f8 	      JMP	LoadCarSpritesFromIds
   1755  f8cc				   LoadForRightScreenSprites
   1756  f8cc		       a5 c7		      LDA	CurrentCarId
   1757  f8ce		       85 b1		      STA	Tmp1
   1758  f8d0		       a5 c8		      LDA	OpCurrentCarId
   1759  f8d2		       85 b0		      STA	Tmp0
   1760  f8d4
   1761  f8d4				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1762  f8d4		       a4 b0		      LDY	Tmp0
   1763  f8d6		       b9 9b ff 	      LDA	CarIdToSpriteAddressL,Y
   1764  f8d9		       85 d7		      STA	CarSpritePointerL
   1765  f8db		       b9 9f ff 	      LDA	CarIdToSpriteAddressH,Y
   1766  f8de		       85 d8		      STA	CarSpritePointerH
   1767  f8e0				   ConfigureOpponentCarSprite
   1768  f8e0		       a4 b1		      LDY	Tmp1
   1769  f8e2		       b9 a3 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1770  f8e5		       85 d9		      STA	EnemyCarSpritePointerL
   1771  f8e7		       b9 a7 ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1772  f8ea		       85 da		      STA	EnemyCarSpritePointerH
   1773  f8ec		       60		      RTS
   1774  f8ed
   1775  f8ed							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1776  f8ed							;X player 0 or 1
   1777  f8ed				   SelectCarWithDpad
   1778  f8ed		       a0 03		      LDY	#3
   1779  f8ef				   SelectCarWithDpadLoop
   1780  f8ef		       ad 80 02 	      LDA	SWCHA
   1781  f8f2		       25 b0		      AND	Tmp0
   1782  f8f4		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1783  f8f6		       98		      TYA
   1784  f8f7		       95 c7		      STA	CurrentCarId,X
   1785  f8f9				   ContinueSelectCarWithDpadLoop
   1786  f8f9		       46 b0		      LSR	Tmp0
   1787  f8fb		       88		      DEY
   1788  f8fc		       10 f1		      BPL	SelectCarWithDpadLoop
   1789  f8fe		       60		      RTS
   1790  f8ff
   1791  f8ff				   ProcessOpponentLine
   1792  f8ff		       a5 8c		      LDA	FrameCount0
   1793  f901		       29 01		      AND	#%00000001
   1794  f903		       38		      SEC
   1795  f904		       d0 0f		      BNE	Player0IsOpponent
   1796  f906				   Player1IsOpponent		; Code could be reused?
   1797  f906		       a5 91		      LDA	TrafficOffset0 + 1
   1798  f908		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1799  f90a		       85 b0		      STA	Tmp0
   1800  f90c		       a5 92		      LDA	TrafficOffset0 + 2
   1801  f90e		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1802  f910		       85 b1		      STA	Tmp1
   1803  f912		       4c 21 f9 	      JMP	AddOffsetToOpponentLine
   1804  f915				   Player0IsOpponent
   1805  f915		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1806  f917		       e5 91		      SBC	TrafficOffset0 + 1
   1807  f919		       85 b0		      STA	Tmp0
   1808  f91b		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1809  f91d		       e5 92		      SBC	TrafficOffset0 + 2
   1810  f91f		       85 b1		      STA	Tmp1
   1811  f921
   1812  f921				   AddOffsetToOpponentLine
   1813  f921		       18		      CLC
   1814  f922		       a5 b0		      LDA	Tmp0
   1815  f924		       69 3a		      ADC	#(GAMEPLAY_AREA - 8)	; I need to investigate why 8 is the correct number...
   1816  f926		       85 b0		      STA	Tmp0
   1817  f928		       a5 b1		      LDA	Tmp1
   1818  f92a		       69 00		      ADC	#0
   1819  f92c		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1820  f92e				   OpponentNotVisible
   1821  f92e		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1822  f930		       85 cf		      STA	OpponentLine
   1823  f932		       4c 39 f9 	      JMP	ReturnFromProcessOpponentLine
   1824  f935				   OpponentVisible
   1825  f935		       a5 b0		      LDA	Tmp0
   1826  f937		       85 cf		      STA	OpponentLine
   1827  f939				   ReturnFromProcessOpponentLine
   1828  f939		       60		      RTS
   1829  f93a
   1830  f93a							; Movement and colision are binded because the car must be moved after duplicate size.
   1831  f93a							; Use X for the player
   1832  f93a							; Tmp2 Traffic colision result
   1833  f93a							; Tmp3 Opponent Colision result (Not implemented)
   1834  f93a				   TestCollisionAndMove
   1835  f93a							; Until store the movemnt, Y contains the value to be stored.
   1836  f93a							; see if player0 colides with the rest
   1837  f93a		       a5 b2		      LDA	Tmp2
   1838  f93c		       f0 29		      BEQ	NoCollision	;skip if not hitting...
   1839  f93e		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1840  f940		       d0 25		      BNE	NoCollision
   1841  f942		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1842  f944		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
   1843  f946		       f0 1f		      BEQ	NoCollision
   1844  f948		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
   1845  f94a		       f0 1b		      BEQ	NoCollision
   1846  f94c		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
   1847  f94e		       95 8e		      STA	CollisionCounter,X	;and store as colision.
   1848  f950		       b5 f2		      LDA	Player0SpeedH,X
   1849  f952		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1850  f954		       a9 10		      LDA	#COLLISION_SPEED_L
   1851  f956		       d5 f0		      CMP	Player0SpeedL,X
   1852  f958		       b0 04		      BCS	SkipSetColisionSpeedL
   1853  f95a				   SetColisionSpeedL
   1854  f95a		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1855  f95c		       95 f0		      STA	Player0SpeedL,X
   1856  f95e				   SkipSetColisionSpeedL
   1857  f95e		       a9 00		      LDA	#0
   1858  f960		       95 f2		      STA	Player0SpeedH,X
   1859  f962		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1860  f964		       4c b7 f9 	      JMP	StoreHMove	; We keep position consistent
   1861  f967				   NoCollision
   1862  f967
   1863  f967				   DecrementCollision
   1864  f967		       b5 8e		      LDA	CollisionCounter,X
   1865  f969		       f0 06		      BEQ	FinishDecrementCollision
   1866  f96b		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1867  f96d		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1868  f96f		       d6 8e		      DEC	CollisionCounter,X
   1869  f971				   FinishDecrementCollision
   1870  f971
   1871  f971				   ResetPlayerSize
   1872  f971		       d0 04		      BNE	FinishResetPlayerSize
   1873  f973		       a9 30		      LDA	#%00110000
   1874  f975		       95 04		      STA	NUSIZ0,X	;
   1875  f977				   FinishResetPlayerSize
   1876  f977
   1877  f977				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1878  f977		       b5 8e		      LDA	CollisionCounter,X
   1879  f979		       c9 01		      CMP	#1	; Last frame before reset
   1880  f97b		       d0 05		      BNE	SkipResetPlayerPosition
   1881  f97d		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1882  f97f		       4c b7 f9 	      JMP	StoreHMove
   1883  f982				   SkipResetPlayerPosition
   1884  f982
   1885  f982				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1886  f982		       b5 c7		      LDA	CurrentCarId,X
   1887  f984		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1888  f986		       d0 08		      BNE	PrepareReadXAxis
   1889  f988		       a0 00		      LDY	#0
   1890  f98a		       a5 8c		      LDA	FrameCount0
   1891  f98c		       29 01		      AND	#DRAGSTER_TURN_MASK
   1892  f98e		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1893  f990
   1894  f990				   PrepareReadXAxis
   1895  f990		       a0 00		      LDY	#0
   1896  f992		       b5 b6		      LDA	Player0X,X
   1897  f994				   BeginReadLeft
   1898  f994		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1899  f996		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1900  f999		       2c 80 02 	      BIT	SWCHA
   1901  f99c		       d0 07		      BNE	SkipMoveLeft
   1902  f99e		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1903  f9a0		       d6 b6		      DEC	Player0X,X
   1904  f9a2		       4c b7 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1905  f9a5				   SkipMoveLeft
   1906  f9a5				   BeginReadRight
   1907  f9a5		       b5 b6		      LDA	Player0X,X
   1908  f9a7		       c9 2c		      CMP	#PLAYER_MAX_X
   1909  f9a9		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1910  f9ab		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1911  f9ae		       2c 80 02 	      BIT	SWCHA
   1912  f9b1		       d0 04		      BNE	SkipMoveRight
   1913  f9b3		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1914  f9b5		       f6 b6		      INC	Player0X,X
   1915  f9b7				   SkipMoveRight
   1916  f9b7				   StoreHMove
   1917  f9b7		       94 20		      STY	HMP0,X	;set the move for player 0
   1918  f9b9
   1919  f9b9		       60		      RTS
   1920  f9ba
   1921  f9ba							; X Traffic offset 4 bits each lane, 4 lanes per player
   1922  f9ba							; Tmp3 Max X offset
   1923  f9ba							; Tmp4 Max Player Speed L
   1924  f9ba							; Tmp5 Max Player Speed H
   1925  f9ba				   UpdateOffsets
   1926  f9ba		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1927  f9bc		       a5 c6		      LDA	GameMode
   1928  f9be		       29 04		      AND	#%00000100	; GameModes with high delta
   1929  f9c0		       f0 02		      BEQ	UpdateOffsetsLoop
   1930  f9c2		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1931  f9c4
   1932  f9c4				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1933  f9c4		       38		      SEC
   1934  f9c5		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1935  f9c7		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1936  f9ca		       85 b0		      STA	Tmp0
   1937  f9cc		       c8		      INY
   1938  f9cd		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1939  f9cf		       f9 87 ff 	      SBC	TrafficSpeeds,Y
   1940  f9d2		       85 b1		      STA	Tmp1
   1941  f9d4		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1942  f9d6		       e9 00		      SBC	#0
   1943  f9d8		       85 b2		      STA	Tmp2
   1944  f9da
   1945  f9da				   AddsTheResult
   1946  f9da		       18		      CLC
   1947  f9db		       a5 b0		      LDA	Tmp0
   1948  f9dd		       75 90		      ADC	TrafficOffset0,X
   1949  f9df		       95 90		      STA	TrafficOffset0,X
   1950  f9e1		       e8		      INX
   1951  f9e2		       a5 b1		      LDA	Tmp1
   1952  f9e4		       75 90		      ADC	TrafficOffset0,X
   1953  f9e6		       95 90		      STA	TrafficOffset0,X
   1954  f9e8		       e8		      INX
   1955  f9e9		       a5 b2		      LDA	Tmp2	; Carry
   1956  f9eb		       75 90		      ADC	TrafficOffset0,X
   1957  f9ed		       95 90		      STA	TrafficOffset0,X
   1958  f9ef		       90 0f		      BCC	CalculateOffsetCache
   1959  f9f1				   CalculatePlayer0Msb
   1960  f9f1		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1961  f9f3		       d0 05		      BNE	CalculatePlayer1Msb
   1962  f9f5		       e6 ba		      INC	Traffic0Msb
   1963  f9f7		       4c 00 fa 	      JMP	CalculateOffsetCache
   1964  f9fa				   CalculatePlayer1Msb
   1965  f9fa		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1966  f9fc		       d0 02		      BNE	CalculateOffsetCache
   1967  f9fe		       e6 bb		      INC	OpTraffic0Msb
   1968  fa00
   1969  fa00				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1970  fa00		       e8		      INX
   1971  fa01		       38		      SEC
   1972  fa02		       69 00		      ADC	#0	;Increment by one
   1973  fa04		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1974  fa06
   1975  fa06				   PrepareNextUpdateLoop
   1976  fa06		       c8		      INY
   1977  fa07		       e8		      INX
   1978  fa08		       e4 b3		      CPX	Tmp3	; Max X offset
   1979  fa0a		       d0 b8		      BNE	UpdateOffsetsLoop
   1980  fa0c		       60		      RTS
   1981  fa0d
   1982  fa0d							; X Player 0 or 1
   1983  fa0d				   ProcessSpeed
   1984  fa0d				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1985  fa0d		       a9 00		      LDA	#0
   1986  fa0f		       85 b0		      STA	Tmp0	; Break speed
   1987  fa11		       b5 b8		      LDA	CountdownTimer,X
   1988  fa13		       d0 0d		      BNE	Break
   1989  fa15		       b4 c7		      LDY	CurrentCarId,X
   1990  fa17		       a5 8c		      LDA	FrameCount0
   1991  fa19		       39 af ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1992  fa1c		       d0 04		      BNE	Break
   1993  fa1e		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1994  fa20		       85 b0		      STA	Tmp0
   1995  fa22
   1996  fa22				   Break
   1997  fa22		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1998  fa25		       2c 80 02 	      BIT	SWCHA
   1999  fa28		       d0 12		      BNE	BreakNonZero
   2000  fa2a		       b5 0c		      LDA	INPT4,X	;3
   2001  fa2c		       10 0a		      BPL	BreakWhileAccelerating
   2002  fa2e		       b4 d5		      LDY	Gear,X
   2003  fa30		       b9 bb ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   2004  fa33		       85 b0		      STA	Tmp0
   2005  fa35		       4c 3c fa 	      JMP	BreakNonZero
   2006  fa38				   BreakWhileAccelerating		; Allow better control while breaking.
   2007  fa38		       a9 05		      LDA	(#BREAK_SPEED / 2)
   2008  fa3a		       85 b0		      STA	Tmp0
   2009  fa3c
   2010  fa3c				   BreakNonZero
   2011  fa3c		       a5 b0		      LDA	Tmp0
   2012  fa3e		       f0 29		      BEQ	SkipBreak
   2013  fa40
   2014  fa40				   DecreaseSpeed
   2015  fa40		       38		      SEC
   2016  fa41		       b5 f0		      LDA	Player0SpeedL,X
   2017  fa43		       e5 b0		      SBC	Tmp0
   2018  fa45		       95 f0		      STA	Player0SpeedL,X
   2019  fa47		       b5 f2		      LDA	Player0SpeedH,X
   2020  fa49		       e9 00		      SBC	#0
   2021  fa4b		       95 f2		      STA	Player0SpeedH,X
   2022  fa4d
   2023  fa4d				   CheckMinSpeed
   2024  fa4d		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   2025  fa4f		       c9 00		      CMP	#CAR_MIN_SPEED_H
   2026  fa51		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   2027  fa53		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   2028  fa55
   2029  fa55				   CompareLBreakSpeed
   2030  fa55		       b5 f0		      LDA	Player0SpeedL,X
   2031  fa57		       c9 00		      CMP	#CAR_MIN_SPEED_L
   2032  fa59		       90 03		      BCC	ResetMinSpeed	; Less than memory
   2033  fa5b		       4c 66 fa 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   2034  fa5e
   2035  fa5e				   ResetMinSpeed
   2036  fa5e		       a9 00		      LDA	#CAR_MIN_SPEED_H
   2037  fa60		       95 f2		      STA	Player0SpeedH,X
   2038  fa62		       a9 00		      LDA	#CAR_MIN_SPEED_L
   2039  fa64		       95 f0		      STA	Player0SpeedL,X
   2040  fa66
   2041  fa66				   SkipAccelerateIfBreaking
   2042  fa66		       4c af fa 	      JMP	SkipAccelerate
   2043  fa69				   SkipBreak
   2044  fa69
   2045  fa69				   Acelerates
   2046  fa69		       b5 b8		      LDA	CountdownTimer,X
   2047  fa6b		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   2048  fa6d
   2049  fa6d				   ContinueAccelerateTest
   2050  fa6d		       b5 0c		      LDA	INPT4,X	;3
   2051  fa6f		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   2052  fa71		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   2053  fa74		       2c 80 02 	      BIT	SWCHA
   2054  fa77		       d0 36		      BNE	SkipAccelerate
   2055  fa79
   2056  fa79				   IncreaseCarSpeed
   2057  fa79		       a9 02		      LDA	#2
   2058  fa7b		       85 b0		      STA	Tmp0	; Loop control
   2059  fa7d		       b4 c7		      LDY	CurrentCarId,X
   2060  fa7f				   IncreaseCarSpeedLoop
   2061  fa7f							;Adds speed
   2062  fa7f		       18		      CLC
   2063  fa80		       b5 dc		      LDA	AccelerateBuffer,X
   2064  fa82		       79 ab ff 	      ADC	CarIdToAccelerateSpeed,Y
   2065  fa85		       95 dc		      STA	AccelerateBuffer,X
   2066  fa87		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   2067  fa89		       f6 f0		      INC	Player0SpeedL,X
   2068  fa8b		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   2069  fa8d		       f6 f2		      INC	Player0SpeedH,X
   2070  fa8f				   ContinueIncreaseSpeedLoop
   2071  fa8f		       c6 b0		      DEC	Tmp0
   2072  fa91		       d0 ec		      BNE	IncreaseCarSpeedLoop
   2073  fa93				   SkipIncreaseCarSpeed
   2074  fa93
   2075  fa93				   CheckIfAlreadyMaxSpeed
   2076  fa93		       b5 f2		      LDA	Player0SpeedH,X
   2077  fa95		       c9 02		      CMP	#CAR_MAX_SPEED_H
   2078  fa97		       90 16		      BCC	SkipAccelerate	; less than my max speed
   2079  fa99		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   2080  fa9b							;High bit is max, compare the low
   2081  fa9b		       b4 c7		      LDY	CurrentCarId,X
   2082  fa9d		       b5 f0		      LDA	Player0SpeedL,X
   2083  fa9f		       d9 b3 ff 	      CMP	CarIdToMaxSpeedL,Y
   2084  faa2		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2085  faa4							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2086  faa4
   2087  faa4				   ResetToMaxSpeed		; Speed is more, or is already max
   2088  faa4		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2089  faa6		       95 f2		      STA	Player0SpeedH,X
   2090  faa8		       b4 c7		      LDY	CurrentCarId,X
   2091  faaa		       b9 b3 ff 	      LDA	CarIdToMaxSpeedL,Y
   2092  faad		       95 f0		      STA	Player0SpeedL,X
   2093  faaf				   SkipAccelerate
   2094  faaf		       60		      RTS
   2095  fab0
   2096  fab0				   EverySecond		; 64 frames to be more precise
   2097  fab0		       a9 3f		      LDA	#%00111111
   2098  fab2		       25 8c		      AND	FrameCount0
   2099  fab4		       d0 06		      BNE	SkipEverySecondAction
   2100  fab6		       d5 b8		      CMP	CountdownTimer,X
   2101  fab8		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2102  faba		       d6 b8		      DEC	CountdownTimer,X
   2103  fabc				   SkipEverySecondAction
   2104  fabc		       60		      RTS
   2105  fabd
   2106  fabd				   CalculateGear
   2107  fabd		       b5 f0		      LDA	Player0SpeedL,X	;3
   2108  fabf		       29 80		      AND	#%10000000	;2
   2109  fac1		       15 f2		      ORA	Player0SpeedH,X	;3
   2110  fac3		       18		      CLC		;2
   2111  fac4		       2a		      ROL		;2
   2112  fac5		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2113  fac7		       95 d5		      STA	Gear,X
   2114  fac9		       60		      RTS
   2115  faca
   2116  faca				   ProcessScoreFontColor
   2117  faca		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2118  facc		       f0 06		      BEQ	ResetScoreFontColor
   2119  face		       88		      DEY
   2120  facf		       94 cb		      STY	ScoreFontColorHoldChange,X
   2121  fad1		       4c d9 fa 	      JMP	SkipScoreFontColor
   2122  fad4				   ResetScoreFontColor
   2123  fad4		       bd a2 fc 	      LDA	PlayerToDefaultColor,X
   2124  fad7		       95 c9		      STA	ScoreFontColor,X
   2125  fad9				   SkipScoreFontColor
   2126  fad9		       60		      RTS
   2127  fada
   2128  fada							; Moved here because of rom space.
   2129  fada							; The only SBR in constants space
   2130  fada				   DrawQrCode
   2131  fada		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2132  fadc		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2133  fade		       a9 01		      LDA	#%00000001	; Mirror playfield
   2134  fae0		       85 0a		      STA	CTRLPF
   2135  fae2		       20 60 f6 	      JSR	ClearAll	; To be 100 sure!
   2136  fae5		       ad 82 02 	      LDA	SWCHB
   2137  fae8		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2138  faea		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2139  faec		       f0 07		      BEQ	StoreReversedQrCode
   2140  faee		       86 09		      STX	COLUBK
   2141  faf0		       84 08		      STY	COLUPF
   2142  faf2		       4c f9 fa 	      JMP	ContinueQrCode
   2143  faf5				   StoreReversedQrCode
   2144  faf5		       86 08		      STX	COLUPF
   2145  faf7		       84 09		      STY	COLUBK
   2146  faf9
   2147  faf9				   ContinueQrCode
   2148  faf9		       a2 08		      LDX	#8
   2149  fafb		       20 b3 f8 	      JSR	HMoveXTimes
   2150  fafe		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2151  fb00		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2152  fb02		       20 8c f8 	      JSR	WaitForVblankEnd
   2153  fb05		       20 9f f8 	      JSR	Sleep8Lines
   2154  fb08		       20 9f f8 	      JSR	Sleep8Lines
   2155  fb0b		       20 9f f8 	      JSR	Sleep8Lines
   2156  fb0e
   2157  fb0e				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2158  fb0e		       85 02		      STA	WSYNC
   2159  fb10		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2160  fb13		       85 0e		      STA	PF1	;3
   2161  fb15		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2162  fb18		       85 0f		      STA	PF2	;3
      0  fb1a					      SLEEP	27	; 
      1  fb1a				   .CYCLES    SET	27
      2  fb1a
      3  fb1a				  -	      IF	.CYCLES < 2
      4  fb1a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb1a				  -	      ERR
      6  fb1a					      ENDIF
      7  fb1a
      8  fb1a					      IF	.CYCLES & 1
      9  fb1a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb1a				  -	      nop	0
     11  fb1a					      ELSE
     12  fb1a		       24 00		      bit	VSYNC
     13  fb1c					      ENDIF
     14  fb1c				   .CYCLES    SET	.CYCLES - 3
     15  fb1c					      ENDIF
     16  fb1c
     17  fb1c					      REPEAT	.CYCLES / 2
     18  fb1c		       ea		      nop
     17  fb1c					      REPEND
     18  fb1d		       ea		      nop
     17  fb1d					      REPEND
     18  fb1e		       ea		      nop
     17  fb1e					      REPEND
     18  fb1f		       ea		      nop
     17  fb1f					      REPEND
     18  fb20		       ea		      nop
     17  fb20					      REPEND
     18  fb21		       ea		      nop
     17  fb21					      REPEND
     18  fb22		       ea		      nop
     17  fb22					      REPEND
     18  fb23		       ea		      nop
     17  fb23					      REPEND
     18  fb24		       ea		      nop
     17  fb24					      REPEND
     18  fb25		       ea		      nop
     17  fb25					      REPEND
     18  fb26		       ea		      nop
     17  fb26					      REPEND
     18  fb27		       ea		      nop
     19  fb28					      REPEND
   2164  fb28		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2165  fb2b		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2166  fb2d		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2167  fb30		       85 0e		      STA	PF1	;3
   2168  fb32
   2169  fb32		       ca		      DEX		;2
   2170  fb33		       d0 d9		      BNE	QrCodeLoop	;2
   2171  fb35		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2172  fb37		       88		      DEY		;2
   2173  fb38		       10 d4		      BPL	QrCodeLoop	;4
   2174  fb3a
   2175  fb3a				   EndQrCodeLoop
   2176  fb3a		       85 02		      STA	WSYNC	;
   2177  fb3c		       a9 00		      LDA	#0
   2178  fb3e		       85 0e		      STA	PF1	;3
   2179  fb40		       85 0f		      STA	PF2	;3
   2180  fb42
   2181  fb42		       20 a6 f8 	      JSR	Sleep32Lines
   2182  fb45		       4c 05 f5 	      JMP	PrepareOverscan
   2183  fb48
   2184  fb48							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2185  fc00					      org	$FC00
   2186  fc00				   QrCode1
   2187  fc00		       1f		      .byte.b	#%00011111
   2188  fc01		       10		      .byte.b	#%00010000
   2189  fc02		       17		      .byte.b	#%00010111
   2190  fc03		       17		      .byte.b	#%00010111
   2191  fc04		       17		      .byte.b	#%00010111
   2192  fc05		       10		      .byte.b	#%00010000
   2193  fc06		       1f		      .byte.b	#%00011111
   2194  fc07		       00		      .byte.b	#%00000000
   2195  fc08		       17		      .byte.b	#%00010111
   2196  fc09		       10		      .byte.b	#%00010000
   2197  fc0a		       1d		      .byte.b	#%00011101
   2198  fc0b		       16		      .byte.b	#%00010110
   2199  fc0c		       03		      .byte.b	#%00000011
   2200  fc0d		       19		      .byte.b	#%00011001
   2201  fc0e		       13		      .byte.b	#%00010011
   2202  fc0f		       1c		      .byte.b	#%00011100
   2203  fc10		       0b		      .byte.b	#%00001011
   2204  fc11		       00		      .byte.b	#%00000000
   2205  fc12		       1f		      .byte.b	#%00011111
   2206  fc13		       10		      .byte.b	#%00010000
   2207  fc14		       17		      .byte.b	#%00010111
   2208  fc15		       17		      .byte.b	#%00010111
   2209  fc16		       17		      .byte.b	#%00010111
   2210  fc17		       10		      .byte.b	#%00010000
   2211  fc18		       1f		      .byte.b	#%00011111
   2212  fc19
   2213  fc19				   QrCode2
   2214  fc19		       c3		      .byte.b	#%11000011
   2215  fc1a		       9a		      .byte.b	#%10011010
   2216  fc1b		       82		      .byte.b	#%10000010
   2217  fc1c		       da		      .byte.b	#%11011010
   2218  fc1d		       aa		      .byte.b	#%10101010
   2219  fc1e		       ca		      .byte.b	#%11001010
   2220  fc1f		       f3		      .byte.b	#%11110011
   2221  fc20		       78		      .byte.b	#%01111000
   2222  fc21		       df		      .byte.b	#%11011111
   2223  fc22		       fc		      .byte.b	#%11111100
   2224  fc23		       c7		      .byte.b	#%11000111
   2225  fc24		       98		      .byte.b	#%10011000
   2226  fc25		       23		      .byte.b	#%00100011
   2227  fc26		       b9		      .byte.b	#%10111001
   2228  fc27		       d2		      .byte.b	#%11010010
   2229  fc28		       30		      .byte.b	#%00110000
   2230  fc29		       eb		      .byte.b	#%11101011
   2231  fc2a		       28		      .byte.b	#%00101000
   2232  fc2b		       ab		      .byte.b	#%10101011
   2233  fc2c		       72		      .byte.b	#%01110010
   2234  fc2d		       fa		      .byte.b	#%11111010
   2235  fc2e		       7a		      .byte.b	#%01111010
   2236  fc2f		       32		      .byte.b	#%00110010
   2237  fc30		       3a		      .byte.b	#%00111010
   2238  fc31		       63		      .byte.b	#%01100011
   2239  fc32
   2240  fc32				   QrCode3
   2241  fc32		       98		      .byte.b	#%10011000
   2242  fc33		       c3		      .byte.b	#%11000011
   2243  fc34		       39		      .byte.b	#%00111001
   2244  fc35		       34		      .byte.b	#%00110100
   2245  fc36		       ff		      .byte.b	#%11111111
   2246  fc37		       71		      .byte.b	#%01110001
   2247  fc38		       d5		      .byte.b	#%11010101
   2248  fc39		       d1		      .byte.b	#%11010001
   2249  fc3a		       5f		      .byte.b	#%01011111
   2250  fc3b		       26		      .byte.b	#%00100110
   2251  fc3c		       2d		      .byte.b	#%00101101
   2252  fc3d		       e9		      .byte.b	#%11101001
   2253  fc3e		       d6		      .byte.b	#%11010110
   2254  fc3f		       26		      .byte.b	#%00100110
   2255  fc40		       ba		      .byte.b	#%10111010
   2256  fc41		       03		      .byte.b	#%00000011
   2257  fc42		       dd		      .byte.b	#%11011101
   2258  fc43		       e0		      .byte.b	#%11100000
   2259  fc44		       57		      .byte.b	#%01010111
   2260  fc45		       14		      .byte.b	#%00010100
   2261  fc46		       35		      .byte.b	#%00110101
   2262  fc47		       e5		      .byte.b	#%11100101
   2263  fc48		       b5		      .byte.b	#%10110101
   2264  fc49		       d4		      .byte.b	#%11010100
   2265  fc4a		       97		      .byte.b	#%10010111
   2266  fc4b
   2267  fc4b				   QrCode4
   2268  fc4b		       09		      .byte.b	#%00001001
   2269  fc4c		       0e		      .byte.b	#%00001110
   2270  fc4d		       0f		      .byte.b	#%00001111
   2271  fc4e		       0c		      .byte.b	#%00001100
   2272  fc4f		       0c		      .byte.b	#%00001100
   2273  fc50		       08		      .byte.b	#%00001000
   2274  fc51		       08		      .byte.b	#%00001000
   2275  fc52		       06		      .byte.b	#%00000110
   2276  fc53		       06		      .byte.b	#%00000110
   2277  fc54		       0b		      .byte.b	#%00001011
   2278  fc55		       0f		      .byte.b	#%00001111
   2279  fc56		       04		      .byte.b	#%00000100
   2280  fc57		       08		      .byte.b	#%00001000
   2281  fc58		       0f		      .byte.b	#%00001111
   2282  fc59		       09		      .byte.b	#%00001001
   2283  fc5a		       07		      .byte.b	#%00000111
   2284  fc5b		       05		      .byte.b	#%00000101
   2285  fc5c		       00		      .byte.b	#%00000000
   2286  fc5d		       0f		      .byte.b	#%00001111
   2287  fc5e		       08		      .byte.b	#%00001000
   2288  fc5f		       0b		      .byte.b	#%00001011
   2289  fc60		       0b		      .byte.b	#%00001011
   2290  fc61		       0b		      .byte.b	#%00001011
   2291  fc62		       08		      .byte.b	#%00001000
   2292  fc63		       0f		      .byte.b	#%00001111
   2293  fc64
   2294  fc64				   PlayerToUpMask
   2295  fc64		       10		      .byte.b	#%00010000	;
   2296  fc65		       01		      .byte.b	#%00000001	;
   2297  fc66
   2298  fc66				   PlayerToDownMask
   2299  fc66		       20		      .byte.b	#%00100000	;
   2300  fc67		       02		      .byte.b	#%00000010	;
   2301  fc68
   2302  fc68
   2303  fc68				   PlayerToLeftMask
   2304  fc68		       40		      .byte.b	#%01000000	;
   2305  fc69		       04		      .byte.b	#%00000100	;
   2306  fc6a
   2307  fc6a				   PlayerToRightMask
   2308  fc6a		       80		      .byte.b	#%10000000	;
   2309  fc6b		       08		      .byte.b	#%00001000	;
   2310  fc6c
   2311  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2312  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2313  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2314  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2315  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2316  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2317  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2318  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2319  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2320  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2321  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2322  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2323  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2324  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2325  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2326  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2327  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2328  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2329  fc7d
   2330  fc7d				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2331  fc7d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2332  fc7e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2333  fc7f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2334  fc80		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2335  fc81		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2336  fc82		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2337  fc83		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2338  fc84		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2339  fc85		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2340  fc86		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2341  fc87		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2342  fc88		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2343  fc89		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2344  fc8a		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2345  fc8b		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2346  fc8c		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2347  fc8d
   2348  fc8d				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2349  fc8d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2350  fc8e		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2351  fc8f		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2352  fc90		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2353  fc91		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2354  fc92		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2355  fc93		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2356  fc94		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2357  fc95		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2358  fc96		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2359  fc97		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2360  fc98		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2361  fc99		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2362  fc9a		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2363  fc9b		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2364  fc9c		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2365  fc9d		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2366  fc9e		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2367  fc9f		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2368  fca0		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2369  fca1		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2370  fca2
   2371  fca2				   PlayerToDefaultColor
   2372  fca2		       f9		      .byte.b	#PLAYER0_COLOR
   2373  fca3		       96		      .byte.b	#PLAYER1_COLOR
   2374  fca4
   2375  fd00					      org	$FD00
   2376  fd00				   Font
   2377  fd00				   C0
   2378  fd00		       e7		      .byte.b	#%11100111	;
   2379  fd01		       a5		      .byte.b	#%10100101	; 
   2380  fd02		       a5		      .byte.b	#%10100101	; 
   2381  fd03		       a5		      .byte.b	#%10100101	; 
   2382  fd04		       e7		      .byte.b	#%11100111	;	
   2383  fd05				   C1
   2384  fd05		       e7		      .byte.b	#%11100111	;
   2385  fd06		       42		      .byte.b	#%01000010	; 
   2386  fd07		       42		      .byte.b	#%01000010	; 
   2387  fd08		       42		      .byte.b	#%01000010	; 
   2388  fd09		       66		      .byte.b	#%01100110	;
   2389  fd0a				   C2
   2390  fd0a		       e7		      .byte.b	#%11100111	;
   2391  fd0b		       24		      .byte.b	#%00100100	; 
   2392  fd0c		       e7		      .byte.b	#%11100111	; 
   2393  fd0d		       81		      .byte.b	#%10000001	; 
   2394  fd0e		       e7		      .byte.b	#%11100111	;
   2395  fd0f				   C3
   2396  fd0f		       e7		      .byte.b	#%11100111	;
   2397  fd10		       81		      .byte.b	#%10000001	; 
   2398  fd11		       e7		      .byte.b	#%11100111	; 
   2399  fd12		       81		      .byte.b	#%10000001	; 
   2400  fd13		       e7		      .byte.b	#%11100111	;
   2401  fd14				   C4
   2402  fd14		       81		      .byte.b	#%10000001	;
   2403  fd15		       81		      .byte.b	#%10000001	; 
   2404  fd16		       e7		      .byte.b	#%11100111	; 
   2405  fd17		       a5		      .byte.b	#%10100101	; 
   2406  fd18		       a5		      .byte.b	#%10100101	;
   2407  fd19				   C5
   2408  fd19		       e7		      .byte.b	#%11100111	;
   2409  fd1a		       81		      .byte.b	#%10000001	; 
   2410  fd1b		       e7		      .byte.b	#%11100111	; 
   2411  fd1c		       24		      .byte.b	#%00100100	; 
   2412  fd1d		       e7		      .byte.b	#%11100111	;
   2413  fd1e				   C6
   2414  fd1e		       e7		      .byte.b	#%11100111	;
   2415  fd1f		       a5		      .byte.b	#%10100101	; 
   2416  fd20		       e7		      .byte.b	#%11100111	; 
   2417  fd21		       24		      .byte.b	#%00100100	; 
   2418  fd22		       e7		      .byte.b	#%11100111	;
   2419  fd23				   C7
   2420  fd23		       81		      .byte.b	#%10000001	;
   2421  fd24		       81		      .byte.b	#%10000001	; 
   2422  fd25		       81		      .byte.b	#%10000001	; 
   2423  fd26		       81		      .byte.b	#%10000001	; 
   2424  fd27		       e7		      .byte.b	#%11100111	;
   2425  fd28				   C8
   2426  fd28		       e7		      .byte.b	#%11100111	;
   2427  fd29		       a5		      .byte.b	#%10100101	; 
   2428  fd2a		       e7		      .byte.b	#%11100111	; 
   2429  fd2b		       a5		      .byte.b	#%10100101	; 
   2430  fd2c		       e7		      .byte.b	#%11100111	;
   2431  fd2d				   C9
   2432  fd2d		       e7		      .byte.b	#%11100111	;
   2433  fd2e		       81		      .byte.b	#%10000001	; 
   2434  fd2f		       e7		      .byte.b	#%11100111	; 
   2435  fd30		       a5		      .byte.b	#%10100101	; 
   2436  fd31		       e7		      .byte.b	#%11100111	;
   2437  fd32				   CA
   2438  fd32		       a5		      .byte.b	#%10100101	;
   2439  fd33		       a5		      .byte.b	#%10100101	; 
   2440  fd34		       e7		      .byte.b	#%11100111	; 
   2441  fd35		       a5		      .byte.b	#%10100101	; 
   2442  fd36		       e7		      .byte.b	#%11100111	;
   2443  fd37				   CB
   2444  fd37		       66		      .byte.b	#%01100110	;
   2445  fd38		       a5		      .byte.b	#%10100101	; 
   2446  fd39		       66		      .byte.b	#%01100110	; 
   2447  fd3a		       a5		      .byte.b	#%10100101	;
   2448  fd3b		       66		      .byte.b	#%01100110	;
   2449  fd3c				   CC
   2450  fd3c		       e7		      .byte.b	#%11100111	;
   2451  fd3d		       24		      .byte.b	#%00100100	; 
   2452  fd3e		       24		      .byte.b	#%00100100	; 
   2453  fd3f		       24		      .byte.b	#%00100100	;
   2454  fd40		       e7		      .byte.b	#%11100111	;
   2455  fd41
   2456  fd41				   CD
   2457  fd41		       66		      .byte.b	#%01100110	;
   2458  fd42		       a5		      .byte.b	#%10100101	; 
   2459  fd43		       a5		      .byte.b	#%10100101	; 
   2460  fd44		       a5		      .byte.b	#%10100101	;
   2461  fd45		       66		      .byte.b	#%01100110	;
   2462  fd46
   2463  fd46				   CE
   2464  fd46		       e7		      .byte.b	#%11100111	;
   2465  fd47		       24		      .byte.b	#%00100100	; 
   2466  fd48		       e7		      .byte.b	#%11100111	; 
   2467  fd49		       24		      .byte.b	#%00100100	; 
   2468  fd4a		       e7		      .byte.b	#%11100111	;
   2469  fd4b
   2470  fd4b				   CF
   2471  fd4b		       24		      .byte.b	#%00100100	;
   2472  fd4c		       24		      .byte.b	#%00100100	; 
   2473  fd4d		       e7		      .byte.b	#%11100111	; 
   2474  fd4e		       24		      .byte.b	#%00100100	; 
   2475  fd4f		       e7		      .byte.b	#%11100111	;
   2476  fd50
   2477  fd50				   CG
   2478  fd50		       c3		      .byte.b	#%11000011	;
   2479  fd51		       a5		      .byte.b	#%10100101	; 
   2480  fd52		       a5		      .byte.b	#%10100101	; 
   2481  fd53		       24		      .byte.b	#%00100100	; 
   2482  fd54		       c3		      .byte.b	#%11000011	;	
   2483  fd55
   2484  fd55				   CH
   2485  fd55		       a5		      .byte.b	#%10100101	;
   2486  fd56		       a5		      .byte.b	#%10100101	; 
   2487  fd57		       e7		      .byte.b	#%11100111	; 
   2488  fd58		       a5		      .byte.b	#%10100101	; 
   2489  fd59		       a5		      .byte.b	#%10100101	;
   2490  fd5a
   2491  fd5a				   CK
   2492  fd5a		       a5		      .byte.b	#%10100101	;
   2493  fd5b		       a5		      .byte.b	#%10100101	; 
   2494  fd5c		       66		      .byte.b	#%01100110	; 
   2495  fd5d		       a5		      .byte.b	#%10100101	; 
   2496  fd5e		       a5		      .byte.b	#%10100101	;
   2497  fd5f
   2498  fd5f				   CL
   2499  fd5f		       e7		      .byte.b	#%11100111	;
   2500  fd60		       24		      .byte.b	#%00100100	; 
   2501  fd61		       24		      .byte.b	#%00100100	; 
   2502  fd62		       24		      .byte.b	#%00100100	; 
   2503  fd63		       24		      .byte.b	#%00100100	;
   2504  fd64
   2505  fd64				   CM
   2506  fd64		       a5		      .byte.b	#%10100101	;
   2507  fd65		       a5		      .byte.b	#%10100101	; 
   2508  fd66		       a5		      .byte.b	#%10100101	; 
   2509  fd67		       e7		      .byte.b	#%11100111	; 
   2510  fd68		       a5		      .byte.b	#%10100101	;
   2511  fd69
   2512  fd69				   CN
   2513  fd69		       a5		      .byte.b	#%10100101	;
   2514  fd6a		       a5		      .byte.b	#%10100101	; 
   2515  fd6b		       a5		      .byte.b	#%10100101	; 
   2516  fd6c		       a5		      .byte.b	#%10100101	; 
   2517  fd6d		       66		      .byte.b	#%01100110	;	
   2518  fd6e
   2519  fd6e
   2520  fd6e				   CO
   2521  fd6e		       42		      .byte.b	#%01000010	;
   2522  fd6f		       a5		      .byte.b	#%10100101	; 
   2523  fd70		       a5		      .byte.b	#%10100101	; 
   2524  fd71		       a5		      .byte.b	#%10100101	; 
   2525  fd72		       42		      .byte.b	#%01000010	;	
   2526  fd73
   2527  fd73				   CP
   2528  fd73		       24		      .byte.b	#%00100100	;
   2529  fd74		       24		      .byte.b	#%00100100	; 
   2530  fd75		       e7		      .byte.b	#%11100111	; 
   2531  fd76		       a5		      .byte.b	#%10100101	; 
   2532  fd77		       e7		      .byte.b	#%11100111	;
   2533  fd78
   2534  fd78				   CR
   2535  fd78		       a5		      .byte.b	#%10100101	;
   2536  fd79		       a5		      .byte.b	#%10100101	; 
   2537  fd7a		       66		      .byte.b	#%01100110	; 
   2538  fd7b		       a5		      .byte.b	#%10100101	; 
   2539  fd7c		       66		      .byte.b	#%01100110	;
   2540  fd7d
   2541  fd7d				   CS
   2542  fd7d		       66		      .byte.b	#%01100110	;
   2543  fd7e		       81		      .byte.b	#%10000001	; 
   2544  fd7f		       42		      .byte.b	#%01000010	; 
   2545  fd80		       24		      .byte.b	#%00100100	; 
   2546  fd81		       c3		      .byte.b	#%11000011	;
   2547  fd82
   2548  fd82				   CT
   2549  fd82		       42		      .byte.b	#%01000010	;
   2550  fd83		       42		      .byte.b	#%01000010	; 
   2551  fd84		       42		      .byte.b	#%01000010	; 
   2552  fd85		       42		      .byte.b	#%01000010	; 
   2553  fd86		       e7		      .byte.b	#%11100111	;
   2554  fd87
   2555  fd87				   CV
   2556  fd87		       42		      .byte.b	#%01000010	;
   2557  fd88		       a5		      .byte.b	#%10100101	; 
   2558  fd89		       a5		      .byte.b	#%10100101	; 
   2559  fd8a		       a5		      .byte.b	#%10100101	; 
   2560  fd8b		       a5		      .byte.b	#%10100101	;	
   2561  fd8c
   2562  fd8c				   CY
   2563  fd8c		       42		      .byte.b	#%01000010	;
   2564  fd8d		       42		      .byte.b	#%01000010	; 
   2565  fd8e		       42		      .byte.b	#%01000010	; 
   2566  fd8f		       a5		      .byte.b	#%10100101	; 
   2567  fd90		       a5		      .byte.b	#%10100101	;
   2568  fd91
   2569  fd91				   CW
   2570  fd91		       a5		      .byte.b	#%10100101	;
   2571  fd92		       e7		      .byte.b	#%11100111	; 
   2572  fd93		       a5		      .byte.b	#%10100101	; 
   2573  fd94		       a5		      .byte.b	#%10100101	; 
   2574  fd95		       a5		      .byte.b	#%10100101	;
   2575  fd96
   2576  fd96				   CZ
   2577  fd96		       e7		      .byte.b	#%11100111	;
   2578  fd97		       24		      .byte.b	#%00100100	; 
   2579  fd98		       42		      .byte.b	#%01000010	; 
   2580  fd99		       81		      .byte.b	#%10000001	; 
   2581  fd9a		       e7		      .byte.b	#%11100111	;
   2582  fd9b
   2583  fd9b
   2584  fd9b				   Exclamation
   2585  fd9b		       42		      .byte.b	#%01000010	;
   2586  fd9c		       00		      .byte.b	#%00000000	; 
   2587  fd9d		       42		      .byte.b	#%01000010	; 
   2588  fd9e		       42		      .byte.b	#%01000010	; 
   2589  fd9f		       42		      .byte.b	#%01000010	;
   2590  fda0
   2591  fda0				   Dot
   2592  fda0		       42		      .byte.b	#%01000010	;
   2593  fda1		       42		      .byte.b	#%01000010	; 
   2594  fda2		       00		      .byte.b	#%00000000	; 
   2595  fda3		       00		      .byte.b	#%00000000	; 
   2596  fda4		       00		      .byte.b	#%00000000	;
   2597  fda5
   2598  fda5				   Pipe
   2599  fda5				   Colon
   2600  fda5		       42		      .byte.b	#%01000010	;
   2601  fda6		       42		      .byte.b	#%01000010	; 
   2602  fda7		       00		      .byte.b	#%00000000	; 
   2603  fda8		       42		      .byte.b	#%01000010	; 
   2604  fda9		       42		      .byte.b	#%01000010	;
   2605  fdaa
   2606  fdaa				   Triangle
   2607  fdaa		       81		      .byte.b	#%10000001	;
   2608  fdab		       c3		      .byte.b	#%11000011	; 
   2609  fdac		       e7		      .byte.b	#%11100111	; 
   2610  fdad		       c3		      .byte.b	#%11000011	; 
   2611  fdae		       81		      .byte.b	#%10000001	;
   2612  fdaf
   2613  fdaf				   Space
   2614  fdaf				   C0B
   2615  fdaf		       00		      .byte.b	#%00000000	;
   2616  fdb0		       00		      .byte.b	#%00000000	; 
   2617  fdb1		       00		      .byte.b	#%00000000	; 
   2618  fdb2		       00		      .byte.b	#%00000000	; 
   2619  fdb3		       00		      .byte.b	#%00000000	;	
   2620  fdb4				   C1B
   2621  fdb4		       24		      .byte.b	#%00100100	;
   2622  fdb5		       00		      .byte.b	#%00000000	; 
   2623  fdb6		       00		      .byte.b	#%00000000	; 
   2624  fdb7		       00		      .byte.b	#%00000000	; 
   2625  fdb8		       00		      .byte.b	#%00000000	;
   2626  fdb9				   C2B
   2627  fdb9		       66		      .byte.b	#%01100110	;
   2628  fdba		       00		      .byte.b	#%00000000	; 
   2629  fdbb		       00		      .byte.b	#%00000000	; 
   2630  fdbc		       00		      .byte.b	#%00000000	; 
   2631  fdbd		       00		      .byte.b	#%00000000	;
   2632  fdbe				   C3B
   2633  fdbe		       e7		      .byte.b	#%11100111	;
   2634  fdbf		       00		      .byte.b	#%00000000	; 
   2635  fdc0		       00		      .byte.b	#%00000000	; 
   2636  fdc1		       00		      .byte.b	#%00000000	; 
   2637  fdc2		       00		      .byte.b	#%00000000	;
   2638  fdc3				   C4B
   2639  fdc3		       e7		      .byte.b	#%11100111	;
   2640  fdc4		       24		      .byte.b	#%00100100	; 
   2641  fdc5		       00		      .byte.b	#%00000000	; 
   2642  fdc6		       00		      .byte.b	#%00000000	; 
   2643  fdc7		       00		      .byte.b	#%00000000	;
   2644  fdc8				   C5B
   2645  fdc8		       e7		      .byte.b	#%11100111	;
   2646  fdc9		       66		      .byte.b	#%01100110	; 
   2647  fdca		       00		      .byte.b	#%00000000	; 
   2648  fdcb		       00		      .byte.b	#%00000000	; 
   2649  fdcc		       00		      .byte.b	#%00000000	;
   2650  fdcd				   C6B
   2651  fdcd		       e7		      .byte.b	#%11100111	;
   2652  fdce		       e7		      .byte.b	#%11100111	; 
   2653  fdcf		       00		      .byte.b	#%00000000	; 
   2654  fdd0		       00		      .byte.b	#%00000000	; 
   2655  fdd1		       00		      .byte.b	#%00000000	;
   2656  fdd2				   C7B
   2657  fdd2		       e7		      .byte.b	#%11100111	;
   2658  fdd3		       e7		      .byte.b	#%11100111	; 
   2659  fdd4		       24		      .byte.b	#%00100100	; 
   2660  fdd5		       00		      .byte.b	#%00000000	; 
   2661  fdd6		       00		      .byte.b	#%00000000	;
   2662  fdd7				   C8B
   2663  fdd7		       e7		      .byte.b	#%11100111	;
   2664  fdd8		       e7		      .byte.b	#%11100111	; 
   2665  fdd9		       66		      .byte.b	#%01100110	; 
   2666  fdda		       00		      .byte.b	#%00000000	; 
   2667  fddb		       00		      .byte.b	#%00000000	;
   2668  fddc				   C9B
   2669  fddc		       e7		      .byte.b	#%11100111	;
   2670  fddd		       e7		      .byte.b	#%11100111	; 
   2671  fdde		       e7		      .byte.b	#%11100111	; 
   2672  fddf		       00		      .byte.b	#%00000000	; 
   2673  fde0		       00		      .byte.b	#%00000000	;
   2674  fde1				   CAB
   2675  fde1		       e7		      .byte.b	#%11100111	;
   2676  fde2		       e7		      .byte.b	#%11100111	; 
   2677  fde3		       e7		      .byte.b	#%11100111	; 
   2678  fde4		       24		      .byte.b	#%00100100	; 
   2679  fde5		       00		      .byte.b	#%00000000	;
   2680  fde6				   CBB
   2681  fde6		       e7		      .byte.b	#%11100111	;
   2682  fde7		       e7		      .byte.b	#%11100111	; 
   2683  fde8		       e7		      .byte.b	#%11100111	; 
   2684  fde9		       66		      .byte.b	#%01100110	; 
   2685  fdea		       00		      .byte.b	#%00000000	;
   2686  fdeb				   CCB
   2687  fdeb		       e7		      .byte.b	#%11100111	;
   2688  fdec		       e7		      .byte.b	#%11100111	; 
   2689  fded		       e7		      .byte.b	#%11100111	; 
   2690  fdee		       e7		      .byte.b	#%11100111	; 
   2691  fdef		       00		      .byte.b	#%00000000	;
   2692  fdf0
   2693  fdf0				   CDB
   2694  fdf0		       e7		      .byte.b	#%11100111	;
   2695  fdf1		       e7		      .byte.b	#%11100111	; 
   2696  fdf2		       e7		      .byte.b	#%11100111	; 
   2697  fdf3		       e7		      .byte.b	#%11100111	; 
   2698  fdf4		       24		      .byte.b	#%00100100	;
   2699  fdf5
   2700  fdf5				   CEB
   2701  fdf5		       e7		      .byte.b	#%11100111	;
   2702  fdf6		       e7		      .byte.b	#%11100111	; 
   2703  fdf7		       e7		      .byte.b	#%11100111	; 
   2704  fdf8		       e7		      .byte.b	#%11100111	; 
   2705  fdf9		       66		      .byte.b	#%01100110	;
   2706  fdfa
   2707  fdfa				   CFB
   2708  fdfa		       e7		      .byte.b	#%11100111	;
   2709  fdfb		       e7		      .byte.b	#%11100111	; 
   2710  fdfc		       e7		      .byte.b	#%11100111	; 
   2711  fdfd		       e7		      .byte.b	#%11100111	; 
   2712  fdfe		       e7		      .byte.b	#%11100111	;
   2713  fdff
   2714  fe00					      org	$FE00
   2715  fe00				   AesTable
   2716  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2717  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2718  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2719  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2720  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2721  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2722  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2723  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2724  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2725  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2726  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2727  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2728  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2729  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2730  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2731  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2732  ff00
   2733  ff00							; From FF00 to FFFB (122 bytes) to use here
   2734  ff00
   2735  ff00				   StaticText		; All static text must be on the same MSB block. 
   2736  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2737  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2738  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2739  ff02		       77		      .byte.b	#<CP + #FONT_OFFSET
   2740  ff03		       86		      .byte.b	#<CT + #FONT_OFFSET
   2741  ff04		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2742  ff05
   2743  ff05				   HellwayLeftText
   2744  ff05		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2745  ff06		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2746  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2747  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2748  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2749  ff0a
   2750  ff0a				   HellwayRightText
   2751  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2752  ff0b		       95		      .byte.b	#<CW + #FONT_OFFSET
   2753  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2754  ff0d		       90		      .byte.b	#<CY + #FONT_OFFSET
   2755  ff0e		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2756  ff0f
   2757  ff0f				   OpbText
   2758  ff0f		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2759  ff10		       a9		      .byte.b	#<Pipe + #FONT_OFFSET
   2760  ff11		       72		      .byte.b	#<CO + #FONT_OFFSET
   2761  ff12		       77		      .byte.b	#<CP + #FONT_OFFSET
   2762  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2763  ff14
   2764  ff14				   YearText
   2765  ff14		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2766  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2767  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2768  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2769  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2770  ff19
   2771  ff19				   GameText
   2772  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2773  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2774  ff1b		       68		      .byte.b	#<CM + #FONT_OFFSET
   2775  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2776  ff1d		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2777  ff1e
   2778  ff1e				   OverText
   2779  ff1e		       72		      .byte.b	#<CO + #FONT_OFFSET
   2780  ff1f		       8b		      .byte.b	#<CV + #FONT_OFFSET
   2781  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2782  ff21		       7c		      .byte.b	#<CR + #FONT_OFFSET
   2783  ff22		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2784  ff23				   GoText
   2785  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2786  ff24		       72		      .byte.b	#<CO + #FONT_OFFSET
   2787  ff25		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2788  ff26		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2789  ff27		       9f		      .byte.b	#<Exclamation + #FONT_OFFSET
   2790  ff28
   2791  ff28				   VersionText
   2792  ff28		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2793  ff29		       a4		      .byte.b	#<Dot + #FONT_OFFSET
   2794  ff2a		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2795  ff2b		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2796  ff2c		       ae		      .byte.b	#<Triangle + #FONT_OFFSET
   2797  ff2d				   EndStaticText
   2798  ff2d
   2799  ff2d				   TachometerSizeLookup1
   2800  ff2d		       1f		      .byte.b	#%00011111
   2801  ff2e		       3f		      .byte.b	#%00111111
   2802  ff2f		       7f		      .byte.b	#%01111111
   2803  ff30		       ff		      .byte.b	#%11111111
   2804  ff31		       ff		      .byte.b	#%11111111
   2805  ff32		       ff		      .byte.b	#%11111111
   2806  ff33		       ff		      .byte.b	#%11111111
   2807  ff34		       ff		      .byte.b	#%11111111
   2808  ff35
   2809  ff35				   TachometerSizeLookup2
   2810  ff35		       00		      .byte.b	#%00000000
   2811  ff36		       00		      .byte.b	#%00000000
   2812  ff37		       00		      .byte.b	#%00000000
   2813  ff38		       00		      .byte.b	#%00000000
   2814  ff39		       80		      .byte.b	#%10000000
   2815  ff3a		       c0		      .byte.b	#%11000000
   2816  ff3b		       e0		      .byte.b	#%11100000
   2817  ff3c		       f0		      .byte.b	#%11110000
   2818  ff3d
   2819  ff3d				   TachometerGearLookup
   2820  ff3d		       01		      .byte.b	#%00000001
   2821  ff3e		       02		      .byte.b	#%00000010
   2822  ff3f		       04		      .byte.b	#%00000100
   2823  ff40		       08		      .byte.b	#%00001000
   2824  ff41		       10		      .byte.b	#%00010000
   2825  ff42		       30		      .byte.b	#%00110000
   2826  ff43
   2827  ff43				   EngineSoundType
   2828  ff43		       02		      .byte.b	#2
   2829  ff44		       02		      .byte.b	#2
   2830  ff45		       0e		      .byte.b	#14
   2831  ff46		       06		      .byte.b	#6
   2832  ff47		       06		      .byte.b	#6
   2833  ff48		       0e		      .byte.b	#14
   2834  ff49
   2835  ff49				   EngineBaseFrequence
   2836  ff49		       1f		      .byte.b	#31
   2837  ff4a		       15		      .byte.b	#21
   2838  ff4b		       14		      .byte.b	#20
   2839  ff4c		       1f		      .byte.b	#31
   2840  ff4d		       16		      .byte.b	#22
   2841  ff4e		       03		      .byte.b	#3
   2842  ff4f
   2843  ff4f				   CarSprite0		; Upside down, Original Car
   2844  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2845  ff57				   CarSprite0NoPadding
   2846  ff57		       7e		      .byte.b	#%01111110
   2847  ff58		       24		      .byte.b	#%00100100
   2848  ff59		       bd		      .byte.b	#%10111101
   2849  ff5a		       3c		      .byte.b	#%00111100
   2850  ff5b		       bd		      .byte.b	#%10111101
   2851  ff5c		       3c		      .byte.b	#%00111100
   2852  ff5d
   2853  ff5d				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2854  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2855  ff65				   CarSprite1NoPadding
   2856  ff65		       bd		      .byte.b	#%10111101
   2857  ff66		       7e		      .byte.b	#%01111110
   2858  ff67		       5a		      .byte.b	#%01011010
   2859  ff68		       66		      .byte.b	#%01100110
   2860  ff69		       bd		      .byte.b	#%10111101
   2861  ff6a		       3c		      .byte.b	#%00111100
   2862  ff6b
   2863  ff6b				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2864  ff6b		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2865  ff73				   CarSprite2NoPadding
   2866  ff73		       7e		      .byte.b	#%01111110
   2867  ff74		       a5		      .byte.b	#%10100101
   2868  ff75		       42		      .byte.b	#%01000010
   2869  ff76		       42		      .byte.b	#%01000010
   2870  ff77		       bd		      .byte.b	#%10111101
   2871  ff78		       7e		      .byte.b	#%01111110
   2872  ff79
   2873  ff79				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2874  ff79		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2875  ff81				   CarSprite3NoPadding
   2876  ff81		       3c		      .byte.b	#%00111100
   2877  ff82		       db		      .byte.b	#%11011011
   2878  ff83		       db		      .byte.b	#%11011011
   2879  ff84		       3c		      .byte.b	#%00111100
   2880  ff85		       5a		      .byte.b	#%01011010
   2881  ff86		       3c		      .byte.b	#%00111100
   2882  ff87
   2883  ff87				   TrafficSpeeds
   2884  ff87		       00		      .byte.b	#$00	;  Trafic0 L
   2885  ff88		       00		      .byte.b	#$00	;  Trafic0 H
   2886  ff89		       0a		      .byte.b	#$0A	;  Trafic1 L
   2887  ff8a		       01		      .byte.b	#$01	;  Trafic1 H
   2888  ff8b		       e6		      .byte.b	#$E6	;  Trafic2 L
   2889  ff8c		       00		      .byte.b	#$00	;  Trafic2 H
   2890  ff8d		       c2		      .byte.b	#$C2	;  Trafic3 L
   2891  ff8e		       00		      .byte.b	#$00	;  Trafic3 H
   2892  ff8f		       9e		      .byte.b	#$9E	;  Trafic4 L
   2893  ff90		       00		      .byte.b	#$00	;  Trafic4 H
   2894  ff91				   TrafficSpeedsHighDelta
   2895  ff91		       00		      .byte.b	#$00	;  Trafic0 L
   2896  ff92		       00		      .byte.b	#$00	;  Trafic0 H
   2897  ff93		       0a		      .byte.b	#$0A	;  Trafic1 L
   2898  ff94		       01		      .byte.b	#$01	;  Trafic1 H
   2899  ff95		       c8		      .byte.b	#$C8	;  Trafic2 L
   2900  ff96		       00		      .byte.b	#$00	;  Trafic2 H
   2901  ff97		       86		      .byte.b	#$86	;  Trafic3 L
   2902  ff98		       00		      .byte.b	#$00	;  Trafic3 H
   2903  ff99		       44		      .byte.b	#$44	;  Trafic4 L
   2904  ff9a		       00		      .byte.b	#$00	;  Trafic4 H
   2905  ff9b
   2906  ff9b				   CarIdToSpriteAddressL
   2907  ff9b		       4f		      .byte.b	#<CarSprite0
   2908  ff9c		       5d		      .byte.b	#<CarSprite1
   2909  ff9d		       6b		      .byte.b	#<CarSprite2
   2910  ff9e		       79		      .byte.b	#<CarSprite3
   2911  ff9f
   2912  ff9f				   CarIdToSpriteAddressH
   2913  ff9f		       ff		      .byte.b	#>CarSprite0
   2914  ffa0		       ff		      .byte.b	#>CarSprite1
   2915  ffa1		       ff		      .byte.b	#>CarSprite2
   2916  ffa2		       ff		      .byte.b	#>CarSprite3
   2917  ffa3
   2918  ffa3				   EnemyCarIdToSpriteAddressL
   2919  ffa3		       57		      .byte.b	#<CarSprite0NoPadding
   2920  ffa4		       65		      .byte.b	#<CarSprite1NoPadding
   2921  ffa5		       73		      .byte.b	#<CarSprite2NoPadding
   2922  ffa6		       81		      .byte.b	#<CarSprite3NoPadding
   2923  ffa7
   2924  ffa7				   EnemyCarIdToSpriteAddressH
   2925  ffa7		       ff		      .byte.b	#>CarSprite0NoPadding
   2926  ffa8		       ff		      .byte.b	#>CarSprite1NoPadding
   2927  ffa9		       ff		      .byte.b	#>CarSprite2NoPadding
   2928  ffaa		       ff		      .byte.b	#>CarSprite3NoPadding
   2929  ffab
   2930  ffab				   CarIdToAccelerateSpeed
   2931  ffab		       80		      .byte.b	#128
   2932  ffac		       c0		      .byte.b	#192
   2933  ffad		       60		      .byte.b	#96
   2934  ffae		       c0		      .byte.b	#192
   2935  ffaf
   2936  ffaf				   CarIdToTimeoverBreakInterval 		; Glide
   2937  ffaf		       03		      .byte.b	#%00000011	;Every 4 frames
   2938  ffb0		       03		      .byte.b	#%00000011	;Every 4 frames
   2939  ffb1		       0f		      .byte.b	#%00001111	;Every 16 frames
   2940  ffb2		       03		      .byte.b	#%00000011	;Every 4 frames
   2941  ffb3
   2942  ffb3				   CarIdToMaxSpeedL
   2943  ffb3		       80		      .byte.b	#$80
   2944  ffb4		       00		      .byte.b	#$00	; One less gear
   2945  ffb5		       80		      .byte.b	#$80
   2946  ffb6		       80		      .byte.b	#$80
   2947  ffb7
   2948  ffb7				   CarIdToMaxGear
   2949  ffb7		       05		      .byte.b	#5
   2950  ffb8		       04		      .byte.b	#4	; One less gear
   2951  ffb9		       05		      .byte.b	#5
   2952  ffba		       05		      .byte.b	#5
   2953  ffbb
   2954  ffbb				   GearToBreakSpeedTable
   2955  ffbb		       09		      .byte.b	#(BREAK_SPEED - 1)
   2956  ffbc		       09		      .byte.b	#(BREAK_SPEED - 1)
   2957  ffbd		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2958  ffbe		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2959  ffbf		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2960  ffc0		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2961  ffc1
   2962  ffc1				   TrafficColorTable
   2963  ffc1		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2964  ffc2		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2965  ffc3		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2966  ffc4		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2967  ffc5
   2968  ffc5				   TrafficChanceTable
   2969  ffc5		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2970  ffc6		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2971  ffc7		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2972  ffc8		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2973  ffc9
   2974  ffc9				   TrafficTimeTable
   2975  ffc9		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2976  ffca		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2977  ffcb		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2978  ffcc		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2979  ffcd		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2980  ffce
   2981  ffce
   2982  fffc					      org	$FFFC
   2983  fffc		       00 f0		      .word.w	BeforeStart
   2984  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
