------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 04	   TRAFFIC_LINE_COUNT =	4
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0f	   CAR_START_LINE =	15	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 00	   BACKGROUND_COLOR =	$00	;It is all dark mode now
     56  f000
     57  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     58  f000		       00 38	   OP_SCORE_FONT_COLOR_GOOD =	$38
     59  f000
     60  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     61  f000		       00 44	   OP_SCORE_FONT_COLOR_BAD =	$44
     62  f000							;OP_SCORE_FONT_COLOR_BAD = $E7
     63  f000
     64  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     65  f000		       00 c8	   OP_SCORE_FONT_COLOR_START =	SCORE_FONT_COLOR_START
     66  f000							;OP_SCORE_FONT_COLOR_START = $37 ;Cannot be the same as good, font colors = game state
     67  f000
     68  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     69  f000		       00 0c	   OP_SCORE_FONT_COLOR_OVER =	$0C
     70  f000							;OP_SCORE_FONT_COLOR_OVER = $AB
     71  f000
     72  f000		       00 f9	   PLAYER0_COLOR =	$F9
     73  f000		       00 98	   PLAYER1_COLOR =	$98
     74  f000
     75  f000		       00 20	   PLAYER_0_X_START =	32	;
     76  f000		       00 29	   PLAYER_1_X_START =	41	;
     77  f000		       00 2c	   PLAYER_MAX_X =	44	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     78  f000
     79  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     80  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     81  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     82  f000
     83  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     84  f000
     85  f000		       00 00	   BLACK      =	$00	;
     86  f000
     87  f000		       00 10	   MAX_GAME_MODE =	16
     88  f000
     89  f000		       00 08	   PARALLAX_SIZE =	8
     90  f000
     91  f000		       00 05	   HALF_TEXT_SIZE =	5
     92  f000
     93  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     94  f000
     95  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     96  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     97  f000		       00 00	   QR_CODE_COLOR =	$00
     98  f000		       00 19	   QR_CODE_SIZE =	25
     99  f000
    100  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
    101  f000
    102  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
    103  f000		       00 29	   VBLANK_TIMER =	41
    104  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
    105  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    106  f000
    107  f000		       00 08	   ENGINE_VOLUME =	8
    108  f000
    109  f000		       00 08	   CAR_SIZE   =	8
    110  f000
    111  f000		       00 80	   GRP0Cache  =	$80
    112  f000		       00 81	   PF0Cache   =	$81
    113  f000		       00 82	   PF1Cache   =	$82
    114  f000		       00 83	   PF2Cache   =	$83
    115  f000		       00 84	   GRP1Cache  =	$84
    116  f000		       00 85	   ENABLCache =	$85
    117  f000		       00 86	   ENAM0Cache =	$86
    118  f000		       00 87	   ENAM1Cache =	$87
    119  f000
    120  f000		       00 8c	   FrameCount0 =	$8C	;
    121  f000		       00 8d	   FrameCount1 =	$8D	;
    122  f000
    123  f000		       00 8e	   CollisionCounter =	$8E
    124  f000		       00 8f	   OpCollisionCounter =	$8F
    125  f000
    126  f000							; The cache could shared, and just written in the correct frame (used for drawing), saving 4 bytes.
    127  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    128  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $95 $96 (24 bit) $97 is cache
    129  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 2 $99 $9A (24 bit) $9B is cache
    130  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 3 $9D $9E (24 bit) $9F is cache
    131  f000		       00 a0	   OpTrafficOffset0 =	$A0	; Border $A1 $A2 (24 bit) $A3 is cache
    132  f000		       00 a4	   OpTrafficOffset1 =	$A4	; Border $A5 $A6 (24 bit) $A7 is cache
    133  f000		       00 a8	   OpTrafficOffset2 =	$A8	; Border $A9 $AA (24 bit) $AB is cache
    134  f000		       00 ac	   OpTrafficOffset3 =	$AC	; Border $AD $AE (24 bit) $AF is cache
    135  f000
    136  f000							;Temporary variables, multiple uses
    137  f000		       00 b0	   Tmp0       =	$B0
    138  f000		       00 b1	   Tmp1       =	$B1
    139  f000		       00 b2	   Tmp2       =	$B2
    140  f000		       00 b3	   Tmp3       =	$B3
    141  f000		       00 b4	   Tmp4       =	$B4
    142  f000		       00 b5	   Tmp5       =	$B5
    143  f000
    144  f000		       00 b6	   Player0X   =	$B6
    145  f000		       00 b7	   Player1X   =	$B7
    146  f000		       00 b8	   CountdownTimer =	$B8
    147  f000		       00 b9	   OpCountdownTimer =	$B9
    148  f000		       00 ba	   Traffic0Msb =	$BA
    149  f000		       00 bb	   OpTraffic0Msb =	$BB
    150  f000		       00 bc	   SwitchDebounceCounter =	$BC
    151  f000		       00 bd	   GameStatus =	$BD	; Not zero is running! No need to make it a bit flag for now.
    152  f000		       00 be	   TrafficChance =	$BE
    153  f000		       00 bf	   OpTrafficChance =	$BF
    154  f000
    155  f000		       00 c0	   CheckpointTime =	$C0
    156  f000		       00 c1	   OpCheckpointTime =	$C1
    157  f000		       00 c2	   TrafficColor =	$C2
    158  f000		       00 c3	   OpTrafficColor =	$C3
    159  f000		       00 c4	   CurrentDifficulty =	$C4
    160  f000		       00 c5	   OpCurrentDifficulty =	$C5
    161  f000		       00 c6	   GameMode   =	$C6	; Bit 0 controls fixed levels, bit 1 random positions, Bit 2 speed delta, Bit 3 random traffic 
    162  f000
    163  f000		       00 c7	   CurrentCarId =	$C7
    164  f000		       00 c8	   OpCurrentCarId =	$C8
    165  f000
    166  f000		       00 c9	   ScoreFontColor =	$C9
    167  f000		       00 ca	   OpScoreFontColor =	$CA
    168  f000		       00 cb	   ScoreFontColorHoldChange =	$CB
    169  f000		       00 cc	   OpScoreFontColorHoldChange =	$CC
    170  f000		       00 cd	   NextCheckpoint =	$CD
    171  f000		       00 ce	   OpNextCheckpoint =	$CE
    172  f000		       00 cf	   OpponentLine =	$CF
    173  f000
    174  f000		       00 d0	   ScoreD0    =	$D0
    175  f000		       00 d1	   ScoreD1    =	$D1
    176  f000		       00 d2	   ScoreD2    =	$D2
    177  f000		       00 d3	   ScoreD3    =	$D3
    178  f000		       00 d4	   ScoreD4    =	$D4
    179  f000
    180  f000		       00 d5	   Gear       =	$D5
    181  f000		       00 d6	   OpGear     =	$D6
    182  f000
    183  f000		       00 d7	   CarSpritePointerL =	$D7
    184  f000		       00 d8	   CarSpritePointerH =	$D8
    185  f000
    186  f000		       00 d9	   EnemyCarSpritePointerL =	$D9
    187  f000		       00 da	   EnemyCarSpritePointerH =	$DA
    188  f000
    189  f000		       00 db	   StartSWCHB =	$DB	; Used for Score, so it cannot be cheated.
    190  f000
    191  f000		       00 dc	   AccelerateBuffer =	$DC	; Change speed on buffer overflow.
    192  f000		       00 dd	   OpAccelerateBuffer =	$DD	; Change speed on buffer overflow.
    193  f000
    194  f000		       00 de	   Player0SpeedL =	$DE
    195  f000		       00 df	   Player1SpeedL =	$DF
    196  f000		       00 f0	   Player0SpeedH =	$F0
    197  f000		       00 f1	   Player1SpeedH =	$F1
    198  f000
    199  f000		       00 f2	   IsOpponentInFront =	$F2	; Bit 7 tells if negative or positive.
    200  f000
    201  f000							;generic start up stuff, put zero in almost all...
    202  f000				   BeforeStart		;All variables that are kept on game reset or select
    203  f000		       a0 00		      LDY	#0
    204  f002		       84 bc		      STY	SwitchDebounceCounter
    205  f004		       84 c4		      STY	CurrentDifficulty
    206  f006		       84 c5		      STY	OpCurrentDifficulty
    207  f008		       84 bd		      STY	GameStatus
    208  f00a		       84 c7		      STY	CurrentCarId
    209  f00c		       84 c8		      STY	OpCurrentCarId
    210  f00e		       a0 10		      LDY	#16
    211  f010		       84 c6		      STY	GameMode
    212  f012		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    213  f014
    214  f014				   Start
    215  f014		       a9 02		      LDA	#2
    216  f016		       85 00		      STA	VSYNC
    217  f018		       85 02		      STA	WSYNC
    218  f01a		       85 02		      STA	WSYNC
    219  f01c		       85 02		      STA	WSYNC
    220  f01e		       a9 00		      LDA	#0	;2
    221  f020		       85 00		      STA	VSYNC	;3
    222  f022
    223  f022		       78		      SEI
    224  f023		       d8		      CLD
    225  f024		       a2 ff		      LDX	#$FF
    226  f026		       9a		      TXS
    227  f027
    228  f027		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    229  f029				   CleanMem
    230  f029		       e0 bc		      CPX	#SwitchDebounceCounter
    231  f02b		       f0 1a		      BEQ	SkipClean
    232  f02d		       e0 c6		      CPX	#GameMode
    233  f02f		       f0 16		      BEQ	SkipClean
    234  f031		       e0 c7		      CPX	#CurrentCarId
    235  f033		       f0 12		      BEQ	SkipClean
    236  f035		       e0 c8		      CPX	#OpCurrentCarId
    237  f037		       f0 0e		      BEQ	SkipClean
    238  f039		       e0 c4		      CPX	#CurrentDifficulty
    239  f03b		       f0 0a		      BEQ	SkipClean
    240  f03d		       e0 c5		      CPX	#OpCurrentDifficulty
    241  f03f		       f0 06		      BEQ	SkipClean
    242  f041		       e0 bd		      CPX	#GameStatus
    243  f043		       f0 02		      BEQ	SkipClean
    244  f045		       95 00		      STA	0,X
    245  f047				   SkipClean
    246  f047		       e8		      INX
    247  f048		       d0 df		      BNE	CleanMem
    248  f04a
    249  f04a		       a9 d5		      LDA	#213
    250  f04c		       8d 96 02 	      STA	TIM64T	;3	
    251  f04f
    252  f04f							;Setting some variables...
    253  f04f
    254  f04f				   SettingTrafficOffsets		; Time sensitive with player H position
    255  f04f		       85 02		      STA	WSYNC	;We will set player position
    256  f051		       20 2b f7 	      JSR	DefaultOffsets
    257  f054
    258  f054		       ad 73 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    259  f057		       85 de		      STA	Player0SpeedL
    260  f059		       85 df		      STA	Player1SpeedL
    261  f05b
    262  f05b							;SLEEP 11;18
    263  f05b		       a2 00		      LDX	#0
    264  f05d		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    265  f060		       85 db		      STA	StartSWCHB	; For game over
    266  f062		       29 c0		      AND	#%11000000
    267  f064		       f0 0b		      BEQ	StoreCurrentDifficulty
    268  f066		       e8		      INX
    269  f067		       c9 80		      CMP	#%10000000
    270  f069		       f0 06		      BEQ	StoreCurrentDifficulty
    271  f06b		       e8		      INX
    272  f06c		       c9 40		      CMP	#%01000000
    273  f06e		       f0 01		      BEQ	StoreCurrentDifficulty
    274  f070		       e8		      INX
    275  f071
    276  f071				   StoreCurrentDifficulty
    277  f071		       86 c4		      STX	CurrentDifficulty
    278  f073		       86 c5		      STX	OpCurrentDifficulty
    279  f075		       a2 00		      LDX	#0
    280  f077		       20 e3 f6 	      JSR	ConfigureDifficulty
    281  f07a		       e8		      INX
    282  f07b		       20 e3 f6 	      JSR	ConfigureDifficulty
    283  f07e
    284  f07e				   SetGameNotRunning
    285  f07e		       a9 00		      LDA	#0
    286  f080		       85 bd		      STA	GameStatus
    287  f082
    288  f082				   ConfigureTimer
    289  f082		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    290  f084		       85 b8		      STA	CountdownTimer	;3
    291  f086		       85 b9		      STA	OpCountdownTimer	;3
    292  f088
    293  f088				   ConfigurePlayer1XPosition
    294  f088		       a9 29		      LDA	#PLAYER_1_X_START	;2
    295  f08a		       85 b7		      STA	Player1X	;3
    296  f08c
    297  f08c				   ConfigureOpNextCheckpoint
    298  f08c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    299  f08e		       85 ce		      STA	OpNextCheckpoint
    300  f090
    301  f090				   HPositioning 		; Avoid sleep doing needed stuff
    302  f090		       85 02		      STA	WSYNC
    303  f092
    304  f092				   ConfigurePlayer0XPosition
    305  f092		       a9 20		      LDA	#PLAYER_0_X_START	;2
    306  f094		       85 b6		      STA	Player0X	;3
    307  f096
    308  f096				   ConfigureMissileSize
    309  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    310  f098		       85 04		      STA	NUSIZ0	;3
    311  f09a		       85 05		      STA	NUSIZ1	;3
    312  f09c
    313  f09c				   ConfigureNextCheckpoint
    314  f09c		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    315  f09e		       85 cd		      STA	NextCheckpoint
    316  f0a0
    317  f0a0		       a9 00		      LDA	#0	; Avoid missile reseting position 
    318  f0a2							;SLEEP 41
      0  f0a2					      SLEEP	5	;
      1  f0a2				   .CYCLES    SET	5
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2				  -	      nop	0
     11  f0a2					      ELSE
     12  f0a2		       24 00		      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    320  f0a5		       85 12		      STA	RESM0
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    322  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    324  f0ab		       85 13		      STA	RESM1
      0  f0ad					      SLEEP	3
      1  f0ad				   .CYCLES    SET	3
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad					      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad					      ELSE
     12  f0ad		       24 00		      bit	VSYNC
     13  f0af					      ENDIF
     14  f0af				   .CYCLES    SET	.CYCLES - 3
     15  f0af					      ENDIF
     16  f0af
     17  f0af				  -	      REPEAT	.CYCLES / 2
     18  f0af				  -	      nop
     19  f0af					      REPEND
    326  f0af
    327  f0af		       a9 d0		      LDA	#$D0
    328  f0b1		       85 24		      STA	HMBL
    329  f0b3		       85 22		      STA	HMM0
    330  f0b5		       85 23		      STA	HMM1
    331  f0b7		       85 02		      STA	WSYNC
    332  f0b9		       85 2a		      STA	HMOVE
    333  f0bb		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    334  f0bd		       85 2b		      STA	HMCLR
      0  f0bf					      SLEEP	31
      1  f0bf				   .CYCLES    SET	31
      2  f0bf
      3  f0bf				  -	      IF	.CYCLES < 2
      4  f0bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0bf				  -	      ERR
      6  f0bf					      ENDIF
      7  f0bf
      8  f0bf					      IF	.CYCLES & 1
      9  f0bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0bf				  -	      nop	0
     11  f0bf					      ELSE
     12  f0bf		       24 00		      bit	VSYNC
     13  f0c1					      ENDIF
     14  f0c1				   .CYCLES    SET	.CYCLES - 3
     15  f0c1					      ENDIF
     16  f0c1
     17  f0c1					      REPEAT	.CYCLES / 2
     18  f0c1		       ea		      nop
     17  f0c1					      REPEND
     18  f0c2		       ea		      nop
     17  f0c2					      REPEND
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     17  f0c8					      REPEND
     18  f0c9		       ea		      nop
     17  f0c9					      REPEND
     18  f0ca		       ea		      nop
     17  f0ca					      REPEND
     18  f0cb		       ea		      nop
     17  f0cb					      REPEND
     18  f0cc		       ea		      nop
     17  f0cc					      REPEND
     18  f0cd		       ea		      nop
     17  f0cd					      REPEND
     18  f0ce		       ea		      nop
     19  f0cf					      REPEND
    336  f0cf		       85 10		      STA	RESP0
    337  f0d1		       85 11		      STA	RESP1
    338  f0d3
    339  f0d3				   WaitResetToEnd
    340  f0d3		       ad 84 02 	      LDA	INTIM
    341  f0d6		       d0 fb		      BNE	WaitResetToEnd
    342  f0d8
    343  f0d8				   MainLoop
    344  f0d8		       a9 02		      LDA	#2
    345  f0da		       85 00		      STA	VSYNC
    346  f0dc		       85 02		      STA	WSYNC
    347  f0de		       85 2a		      STA	HMOVE	;2 Apply Movement, must be done after a WSYNC
    348  f0e0							;Some free cycles here!
    349  f0e0				   PrepareMaxHMove
    350  f0e0		       a9 00		      LDA	#BACKGROUND_COLOR	; Restores the black blackground (because of QR), here only for optimization
    351  f0e2		       85 09		      STA	COLUBK
      0  f0e4					      SLEEP	24 - 11	; Ensures "Should not be modified during the 24 computer cycles immediately following an HMOVE" 11 is the minimun cycles used until here
      1  f0e4				   .CYCLES    SET	24 - 11
      2  f0e4
      3  f0e4				  -	      IF	.CYCLES < 2
      4  f0e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e4				  -	      ERR
      6  f0e4					      ENDIF
      7  f0e4
      8  f0e4					      IF	.CYCLES & 1
      9  f0e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e4				  -	      nop	0
     11  f0e4					      ELSE
     12  f0e4		       24 00		      bit	VSYNC
     13  f0e6					      ENDIF
     14  f0e6				   .CYCLES    SET	.CYCLES - 3
     15  f0e6					      ENDIF
     16  f0e6
     17  f0e6					      REPEAT	.CYCLES / 2
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     19  f0eb					      REPEND
    353  f0eb		       a9 80		      LDA	#$80
    354  f0ed		       85 24		      STA	HMBL
    355  f0ef		       85 22		      STA	HMM0
    356  f0f1		       85 23		      STA	HMM1
    357  f0f3		       85 20		      STA	HMP0
    358  f0f5		       85 21		      STA	HMP1
    359  f0f7		       85 02		      STA	WSYNC
    360  f0f9		       85 2a		      STA	HMOVE	; 1/10			
    361  f0fb
    362  f0fb				   ConfigVBlankTimer
    363  f0fb		       a5 c6		      LDA	GameMode
    364  f0fd		       c9 10		      CMP	#MAX_GAME_MODE
    365  f0ff		       f0 05		      BEQ	SetVblankTimerQrCode
    366  f101		       a9 29		      LDA	#VBLANK_TIMER
    367  f103		       4c 08 f1 	      JMP	SetVblankTimer
    368  f106				   SetVblankTimerQrCode
    369  f106		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    370  f108
    371  f108				   SetVblankTimer
    372  f108		       85 02		      STA	WSYNC	;3
    373  f10a		       8d 96 02 	      STA	TIM64T	;3	
    374  f10d		       a9 00		      LDA	#0	;2
    375  f10f		       85 00		      STA	VSYNC	;3	
    376  f111
    377  f111				   RandomizeGame
    378  f111		       a5 bd		      LDA	GameStatus	;Could be merge with code block bellow
    379  f113		       d0 2d		      BNE	EndRandomizeGame
    380  f115		       a5 c6		      LDA	GameMode	; Games 3 and for and not running
    381  f117		       29 02		      AND	#%00000010
    382  f119		       f0 24		      BEQ	DeterministicGame
    383  f11b		       a6 96		      LDX	TrafficOffset1 + 2
    384  f11d		       bd 00 fe 	      LDA	AesTable,X
    385  f120		       45 8c		      EOR	FrameCount0
    386  f122		       85 96		      STA	TrafficOffset1 + 2
    387  f124		       85 a6		      STA	OpTrafficOffset1 + 2
    388  f126		       a6 9a		      LDX	TrafficOffset2 + 2
    389  f128		       bd 00 fe 	      LDA	AesTable,X
    390  f12b		       45 8c		      EOR	FrameCount0
    391  f12d		       85 9a		      STA	TrafficOffset2 + 2
    392  f12f		       85 aa		      STA	OpTrafficOffset2 + 2
    393  f131		       a6 9e		      LDX	TrafficOffset3 + 2
    394  f133		       bd 00 fe 	      LDA	AesTable,X
    395  f136		       45 8c		      EOR	FrameCount0
    396  f138		       85 9e		      STA	TrafficOffset3 + 2
    397  f13a		       85 ae		      STA	OpTrafficOffset3 + 2
    398  f13c		       4c 42 f1 	      JMP	EndRandomizeGame
    399  f13f
    400  f13f				   DeterministicGame
    401  f13f		       20 2b f7 	      JSR	DefaultOffsets
    402  f142
    403  f142				   EndRandomizeGame
    404  f142
    405  f142
    406  f142				   CountFrame
    407  f142		       e6 8c		      INC	FrameCount0	; 5
    408  f144		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    409  f146		       e6 8d		      INC	FrameCount1	; 5 
    410  f148				   SkipIncFC1
    411  f148
    412  f148				   CallDrawQrCode
    413  f148		       a5 c6		      LDA	GameMode
    414  f14a		       c9 10		      CMP	#MAX_GAME_MODE
    415  f14c		       d0 03		      BNE	TestIsGameRunning
    416  f14e		       4c 91 fa 	      JMP	DrawQrCode
    417  f151
    418  f151							;Does not update the game if not running
    419  f151				   TestIsGameRunning
    420  f151		       a5 bd		      LDA	GameStatus	;3
    421  f153		       d0 16		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    422  f155				   SelectCarWithDpadCall		; Only do it when game is stoped
    423  f155		       a2 00		      LDX	#0	; Player 0
    424  f157		       a9 80		      LDA	#%10000000	;SWCHA Mask, it ends the call in the correct value for Player 1 call
    425  f159		       85 b0		      STA	Tmp0
    426  f15b		       20 2f f8 	      JSR	SelectCarWithDpad
    427  f15e		       e8		      INX		; Player 1
    428  f15f		       20 2f f8 	      JSR	SelectCarWithDpad
    429  f162
    430  f162							; Needs to draw the opponent in the correct line even when game stoped  
    431  f162							; Draeing is a destructive operation
    432  f162		       20 41 f8 	      JSR	ProcessOpponentLine
    433  f165
    434  f165				   CallConfigureCarSprites
    435  f165		       20 e9 f7 	      JSR	ConfigureCarSprites
    436  f168				   SkipUpdateLogicJump
    437  f168		       4c a0 f1 	      JMP	SkipUpdateLogic
    438  f16b				   ContinueWithGameLogic
    439  f16b
    440  f16b				   CallEverySecond		; Timer for now
    441  f16b		       a2 00		      LDX	#0
    442  f16d		       20 67 fa 	      JSR	EverySecond
    443  f170		       e8		      INX
    444  f171		       20 67 fa 	      JSR	EverySecond
    445  f174
    446  f174				   CallProcessSpeed
    447  f174		       a2 00		      LDX	#0
    448  f176		       20 7b f9 	      JSR	ProcessSpeed
    449  f179
    450  f179		       e8		      INX		; Player 1
    451  f17a		       20 7b f9 	      JSR	ProcessSpeed
    452  f17d
    453  f17d				   CallUpdateOffsets
    454  f17d		       a2 00		      LDX	#0	; Player 0
    455  f17f		       a9 10		      LDA	#TRAFFIC_LINE_COUNT * 4	; Max X
    456  f181		       85 b3		      STA	Tmp3	;Tmp 0,1,2 used by SBR
    457  f183		       a5 de		      LDA	Player0SpeedL
    458  f185		       85 b4		      STA	Tmp4
    459  f187		       a5 f0		      LDA	Player0SpeedH
    460  f189		       85 b5		      STA	Tmp5
    461  f18b		       20 28 f9 	      JSR	UpdateOffsets
    462  f18e
    463  f18e							;LDX Exits the call with correct value.
    464  f18e		       a9 20		      LDA	#TRAFFIC_LINE_COUNT * 4 * 2	; Max X
    465  f190		       85 b3		      STA	Tmp3
    466  f192		       a5 df		      LDA	Player1SpeedL
    467  f194		       85 b4		      STA	Tmp4
    468  f196		       a5 f1		      LDA	Player1SpeedH
    469  f198		       85 b5		      STA	Tmp5
    470  f19a		       20 28 f9 	      JSR	UpdateOffsets
    471  f19d
    472  f19d				   CallProcessOpponentLine
    473  f19d		       20 41 f8 	      JSR	ProcessOpponentLine
    474  f1a0
    475  f1a0				   SkipUpdateLogic		; Continue here if not paused
    476  f1a0
    477  f1a0				   CallStatusUpdateSbr
    478  f1a0		       a2 00		      LDX	#0
    479  f1a2		       20 74 fa 	      JSR	CalculateGear
    480  f1a5		       20 81 fa 	      JSR	ProcessScoreFontColor
    481  f1a8		       e8		      INX
    482  f1a9		       20 74 fa 	      JSR	CalculateGear
    483  f1ac		       20 81 fa 	      JSR	ProcessScoreFontColor
    484  f1af
    485  f1af				   CallProcessPlayerStatus		; Only when visible, status depends on opponent line, 1 frame max delay is ok.
    486  f1af		       a5 8c		      LDA	FrameCount0
    487  f1b1		       29 01		      AND	#%00000001
    488  f1b3		       d0 0c		      BNE	CallProcessPlayer1Status
    489  f1b5				   CallProcessPlayer0Status
    490  f1b5		       a5 92		      LDA	TrafficOffset0 + 2	; Not sequential to OpTrafficOffset0
    491  f1b7		       85 b0		      STA	Tmp0
    492  f1b9		       a2 00		      LDX	#0
    493  f1bb		       20 1e fa 	      JSR	ProcessPlayerStatus
    494  f1be		       4c ca f1 	      JMP	EndCallProcessPlayerStatus
    495  f1c1				   CallProcessPlayer1Status
    496  f1c1		       a5 a2		      LDA	OpTrafficOffset0 + 2
    497  f1c3		       85 b0		      STA	Tmp0
    498  f1c5		       a2 01		      LDX	#1
    499  f1c7		       20 1e fa 	      JSR	ProcessPlayerStatus
    500  f1ca				   EndCallProcessPlayerStatus
    501  f1ca
    502  f1ca				   CallProcessPlayerSprites
    503  f1ca		       20 e9 f7 	      JSR	ConfigureCarSprites	; Every frame since roles are reversed!
    504  f1cd
    505  f1cd				   CallProcessSound		; We might save cycles by updating one channel per frame.
    506  f1cd		       a2 00		      LDX	#0
    507  f1cf		       a5 92		      LDA	TrafficOffset0 + 2
    508  f1d1		       85 b1		      STA	Tmp1
    509  f1d3		       20 f8 f5 	      JSR	ProcessSound
    510  f1d6		       e8		      INX		; Player 1
    511  f1d7		       a5 a2		      LDA	OpTrafficOffset0 + 2
    512  f1d9		       85 b1		      STA	Tmp1
    513  f1db		       20 f8 f5 	      JSR	ProcessSound
    514  f1de
    515  f1de				   ChooseTextSide		; 
    516  f1de		       a5 8c		      LDA	FrameCount0	;3
    517  f1e0		       29 01		      AND	#%00000001
    518  f1e2		       f0 03		      BEQ	LeftScoreWrite	; Half of the screen with the correct colors.
    519  f1e4		       4c 9a f2 	      JMP	RightScoreWrite
    520  f1e7
    521  f1e7				   LeftScoreWrite
    522  f1e7		       a5 c9		      LDA	ScoreFontColor
    523  f1e9		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    524  f1eb		       f0 77		      BEQ	PrintCheckpoint
    525  f1ed		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    526  f1ef		       f0 7b		      BEQ	PrintStartGame
    527  f1f1		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    528  f1f3		       f0 3a		      BEQ	ProcessPlayer0OverText
    529  f1f5		       a5 bd		      LDA	GameStatus
    530  f1f7		       f0 7b		      BEQ	PrintHellwayLeft
    531  f1f9
    532  f1f9				   Digit0Timer
    533  f1f9		       a5 b8		      LDA	CountdownTimer	;3
    534  f1fb		       85 b0		      STA	Tmp0
    535  f1fd		       20 1b f8 	      JSR	BINBCD8
    536  f200							; LDA Tmp1 Also returned in A
    537  f200		       29 0f		      AND	#%00001111	;2
    538  f202		       aa		      TAX		; 2
    539  f203		       bd 6c fc 	      LDA	FontLookup,X	;4 
    540  f206		       85 d1		      STA	ScoreD1	;3
    541  f208
    542  f208				   Digit1Timer
    543  f208		       a5 b1		      LDA	Tmp1	;3 ; Converted to BCD in digit 0
    544  f20a		       4a		      LSR		; 2
    545  f20b		       4a		      LSR		; 2
    546  f20c		       4a		      LSR		; 2
    547  f20d		       4a		      LSR		; 2
    548  f20e		       aa		      TAX		; 2
    549  f20f		       bd 6c fc 	      LDA	FontLookup,X	;4
    550  f212		       85 d0		      STA	ScoreD0	;3
    551  f214
    552  f214				   SpeedBar
    553  f214		       a5 de		      LDA	Player0SpeedL
    554  f216		       29 e0		      AND	#%11100000	;2 Discard the last bits
    555  f218		       18		      CLC
    556  f219		       2a		      ROL		;First goes into carry
    557  f21a		       2a		      ROL
    558  f21b		       2a		      ROL
    559  f21c		       2a		      ROL
    560  f21d		       85 b0		      STA	Tmp0
    561  f21f		       a5 f0		      LDA	Player0SpeedH
    562  f221		       0a		      ASL
    563  f222		       0a		      ASL
    564  f223		       0a		      ASL
    565  f224		       05 b0		      ORA	Tmp0
    566  f226		       aa		      TAX		; 2
    567  f227		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    568  f22a		       85 d2		      STA	ScoreD2	;3
    569  f22c		       4c 3d f2 	      JMP	DistanceCheckpointCount
    570  f22f
    571  f22f				   ProcessPlayer0OverText
    572  f22f		       a5 f2		      LDA	IsOpponentInFront
    573  f231		       30 05		      BMI	PrintPlayer0Lose
    574  f233				   PrintPlayer0Win
    575  f233		       a2 21		      LDX	#<WinText
    576  f235		       4c 3a f2 	      JMP	PrintPlayer0Status
    577  f238				   PrintPlayer0Lose
    578  f238		       a2 24		      LDX	#<LoseText
    579  f23a				   PrintPlayer0Status
    580  f23a		       20 40 f7 	      JSR	PrintStaticText
    581  f23d
    582  f23d				   DistanceCheckpointCount		; Will run all letters in the future
    583  f23d		       a5 ba		      LDA	Traffic0Msb
    584  f23f		       29 01		      AND	#%00000001
    585  f241		       0a		      ASL
    586  f242		       0a		      ASL
    587  f243		       0a		      ASL
    588  f244		       0a		      ASL
    589  f245		       85 b0		      STA	Tmp0
    590  f247		       a5 92		      LDA	TrafficOffset0 + 2	;3
    591  f249		       29 f0		      AND	#%11110000	;2
    592  f24b		       4a		      LSR
    593  f24c		       4a		      LSR
    594  f24d		       4a		      LSR
    595  f24e		       4a		      LSR
    596  f24f		       05 b0		      ORA	Tmp0
    597  f251		       aa		      TAX		; 2
    598  f252		       bd 6c fc 	      LDA	FontLookup,X	;4 
    599  f255		       85 d3		      STA	ScoreD3	;3
    600  f257
    601  f257				   DistanceBar		; 16 subdivisions per checkpoint
    602  f257		       a5 92		      LDA	TrafficOffset0 + 2	;3
    603  f259		       29 0f		      AND	#%00001111	;2
    604  f25b		       aa		      TAX		; 2
    605  f25c		       bd 8c fc 	      LDA	BarLookup,X	;4 
    606  f25f		       85 d4		      STA	ScoreD4	;3
    607  f261
    608  f261				   EndDrawDistance
    609  f261		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    610  f264
    611  f264				   PrintCheckpoint
    612  f264		       a2 00		      LDX	#<CheckpointText
    613  f266		       20 40 f7 	      JSR	PrintStaticText
    614  f269		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    615  f26c				   PrintStartGame
    616  f26c		       a2 17		      LDX	#<GoText
    617  f26e		       20 40 f7 	      JSR	PrintStaticText
    618  f271		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    619  f274
    620  f274				   PrintHellwayLeft
    621  f274		       a5 0c		      LDA	INPT4	; Joystick is pressed, show ready!
    622  f276		       30 08		      BMI	ContinueWithDefaultLeftText
    623  f278				   Player0IsReady
    624  f278		       a2 1c		      LDX	#<ReadyText
    625  f27a		       20 40 f7 	      JSR	PrintStaticText
    626  f27d		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    627  f280				   ContinueWithDefaultLeftText
    628  f280		       a5 8d		      LDA	FrameCount1
    629  f282		       29 01		      AND	#1
    630  f284		       d0 05		      BNE	PrintCreditsLeft
    631  f286		       a2 04		      LDX	#<HellwayLeftText - 1	; Padding
    632  f288		       4c 8d f2 	      JMP	PrintGameMode
    633  f28b				   PrintCreditsLeft
    634  f28b		       a2 0d		      LDX	#<OpbText - 1	; Padding
    635  f28d
    636  f28d				   PrintGameMode
    637  f28d		       20 40 f7 	      JSR	PrintStaticText
    638  f290		       a6 c6		      LDX	GameMode
    639  f292		       bd 6c fc 	      LDA	FontLookup,X	;4 
    640  f295		       85 d0		      STA	ScoreD0	;3
    641  f297		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    642  f29a
    643  f29a				   RightScoreWrite
    644  f29a		       a5 bd		      LDA	GameStatus
    645  f29c		       f0 79		      BEQ	PrintHellwayRight
    646  f29e		       a5 ca		      LDA	OpScoreFontColor
    647  f2a0		       c9 38		      CMP	#OP_SCORE_FONT_COLOR_GOOD
    648  f2a2		       f0 c0		      BEQ	PrintCheckpoint
    649  f2a4		       c9 c8		      CMP	#OP_SCORE_FONT_COLOR_START
    650  f2a6		       f0 c4		      BEQ	PrintStartGame
    651  f2a8		       c9 0c		      CMP	#OP_SCORE_FONT_COLOR_OVER
    652  f2aa		       f0 36		      BEQ	ProcessPlayer1OverText
    653  f2ac
    654  f2ac				   OpDigit0Timer
    655  f2ac		       a5 b9		      LDA	OpCountdownTimer	;3
    656  f2ae		       85 b0		      STA	Tmp0
    657  f2b0		       20 1b f8 	      JSR	BINBCD8
    658  f2b3							; LDA Tmp1 Also returned in A
    659  f2b3		       29 0f		      AND	#%00001111	;2
    660  f2b5		       aa		      TAX		; 2
    661  f2b6		       bd 6c fc 	      LDA	FontLookup,X	;4 
    662  f2b9		       85 d4		      STA	ScoreD4	;3
    663  f2bb
    664  f2bb				   OpDigit1Timer
    665  f2bb		       a5 b1		      LDA	Tmp1	;3
    666  f2bd		       4a		      LSR		; 2
    667  f2be		       4a		      LSR		; 2
    668  f2bf		       4a		      LSR		; 2
    669  f2c0		       4a		      LSR		; 2
    670  f2c1		       aa		      TAX		; 2
    671  f2c2		       bd 6c fc 	      LDA	FontLookup,X	;4
    672  f2c5		       85 d3		      STA	ScoreD3	;3
    673  f2c7
    674  f2c7				   OpSpeedBar
    675  f2c7		       a5 df		      LDA	Player1SpeedL
    676  f2c9		       29 e0		      AND	#%11100000	;2 Discard the last bits
    677  f2cb		       18		      CLC
    678  f2cc		       2a		      ROL		;First goes into carry
    679  f2cd		       2a		      ROL
    680  f2ce		       2a		      ROL
    681  f2cf		       2a		      ROL
    682  f2d0		       85 b0		      STA	Tmp0
    683  f2d2		       a5 f1		      LDA	Player1SpeedH
    684  f2d4		       0a		      ASL
    685  f2d5		       0a		      ASL
    686  f2d6		       0a		      ASL
    687  f2d7		       05 b0		      ORA	Tmp0
    688  f2d9		       aa		      TAX		; 2
    689  f2da		       bd 9c fc 	      LDA	SpeedToBarLookup,X	;4
    690  f2dd		       85 d2		      STA	ScoreD2	;3
    691  f2df		       4c f0 f2 	      JMP	OpDistanceCheckpointCount
    692  f2e2
    693  f2e2				   ProcessPlayer1OverText
    694  f2e2		       a5 f2		      LDA	IsOpponentInFront
    695  f2e4		       30 05		      BMI	PrintPlayer1Lose
    696  f2e6				   PrintPlayer1Win
    697  f2e6		       a2 1f		      LDX	#<WinText - 2
    698  f2e8		       4c ed f2 	      JMP	PrintPlayer1Status
    699  f2eb				   PrintPlayer1Lose
    700  f2eb		       a2 22		      LDX	#<LoseText - 2
    701  f2ed				   PrintPlayer1Status
    702  f2ed		       20 40 f7 	      JSR	PrintStaticText
    703  f2f0
    704  f2f0				   OpDistanceCheckpointCount
    705  f2f0		       a5 bb		      LDA	OpTraffic0Msb
    706  f2f2		       29 01		      AND	#%00000001
    707  f2f4		       0a		      ASL
    708  f2f5		       0a		      ASL
    709  f2f6		       0a		      ASL
    710  f2f7		       0a		      ASL
    711  f2f8		       85 b0		      STA	Tmp0
    712  f2fa		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    713  f2fc		       29 f0		      AND	#%11110000	;2
    714  f2fe		       4a		      LSR
    715  f2ff		       4a		      LSR
    716  f300		       4a		      LSR
    717  f301		       4a		      LSR
    718  f302		       05 b0		      ORA	Tmp0
    719  f304		       aa		      TAX		; 2
    720  f305		       bd 6c fc 	      LDA	FontLookup,X	;4 
    721  f308		       85 d1		      STA	ScoreD1	;3
    722  f30a
    723  f30a				   OpDistanceBar		; 16 subdivisions per checkpoint
    724  f30a		       a5 a2		      LDA	OpTrafficOffset0 + 2	;3
    725  f30c		       29 0f		      AND	#%00001111	;2
    726  f30e		       aa		      TAX		; 2
    727  f30f		       bd 8c fc 	      LDA	BarLookup,X	;4 
    728  f312		       85 d0		      STA	ScoreD0	;3
    729  f314		       4c 36 f3 	      JMP	RightScoreWriteEnd
    730  f317
    731  f317				   PrintHellwayRight
    732  f317		       a5 0d		      LDA	INPT5	; Joystick is pressed, show ready!
    733  f319		       30 08		      BMI	ContinueWithDefaultRightText
    734  f31b				   Player1IsReady
    735  f31b		       a2 1c		      LDX	#<ReadyText
    736  f31d		       20 40 f7 	      JSR	PrintStaticText
    737  f320		       4c 36 f3 	      JMP	RightScoreWriteEnd	;3
    738  f323				   ContinueWithDefaultRightText
    739  f323		       a5 8d		      LDA	FrameCount1
    740  f325		       29 01		      AND	#1
    741  f327		       d0 05		      BNE	PrintCreditsRight
    742  f329		       a2 09		      LDX	#<HellwayRightText
    743  f32b		       4c 30 f3 	      JMP	PrintRightIntro
    744  f32e				   PrintCreditsRight
    745  f32e		       a2 12		      LDX	#<YearText
    746  f330				   PrintRightIntro
    747  f330		       20 40 f7 	      JSR	PrintStaticText
    748  f333		       4c 36 f3 	      JMP	RightScoreWriteEnd
    749  f336				   RightScoreWriteEnd
    750  f336
    751  f336
    752  f336				   ConfigurePFForScore
    753  f336		       20 92 f6 	      JSR	ClearAll
    754  f339		       a9 02		      LDA	#%00000010	; Score mode
    755  f33b		       85 0a		      STA	CTRLPF
    756  f33d		       a5 8c		      LDA	FrameCount0	;3
    757  f33f		       29 01		      AND	#%00000001
    758  f341		       f0 0b		      BEQ	LeftScoreOn	; Half of the screen with the correct colors.
    759  f343				   RightScoreOn
    760  f343		       a5 ca		      LDA	OpScoreFontColor
    761  f345		       85 07		      STA	COLUP1
    762  f347		       a9 00		      LDA	#BACKGROUND_COLOR
    763  f349		       85 06		      STA	COLUP0
    764  f34b		       4c 56 f3 	      JMP	CallWaitForVblankEnd
    765  f34e				   LeftScoreOn
    766  f34e		       a5 c9		      LDA	ScoreFontColor
    767  f350		       85 06		      STA	COLUP0
    768  f352		       a9 00		      LDA	#BACKGROUND_COLOR
    769  f354		       85 07		      STA	COLUP1
    770  f356
    771  f356							; After here we are going to update the screen, No more heavy code
    772  f356				   CallWaitForVblankEnd
    773  f356		       20 ba f7 	      JSR	WaitForVblankEnd
    774  f359
    775  f359				   DrawScoreHud
    776  f359		       20 5e f7 	      JSR	PrintScore
    777  f35c
    778  f35c							; 4 lines to go crazy
    779  f35c		       85 02		      STA	WSYNC
    780  f35e							;STA HMOVE
    781  f35e
    782  f35e		       85 02		      STA	WSYNC
    783  f360		       85 2a		      STA	HMOVE
    784  f362
    785  f362				   PrepareForTraffic
    786  f362		       20 a8 f6 	      JSR	ClearPF	; 32
    787  f365
    788  f365		       85 02		      STA	WSYNC
    789  f367		       85 2a		      STA	HMOVE
    790  f369		       85 02		      STA	WSYNC
    791  f36b		       85 2a		      STA	HMOVE
    792  f36d
    793  f36d		       a9 30		      LDA	#%00110000	; 2 Score mode
    794  f36f		       85 0a		      STA	CTRLPF	;3
    795  f371
    796  f371		       a5 8c		      LDA	FrameCount0	;3
    797  f373		       29 01		      AND	#%00000001	;2
    798  f375		       aa		      TAX		;2
    799  f376		       b5 c2		      LDA	TrafficColor,X	;4
    800  f378		       85 08		      STA	COLUPF	;3
    801  f37a
    802  f37a		       a9 98		      LDA	#PLAYER1_COLOR	;2
    803  f37c		       85 07		      STA	COLUP1	;3
    804  f37e
    805  f37e		       a5 8c		      LDA	FrameCount0	;3
    806  f380		       29 02		      AND	#%00000010	;2 
    807  f382		       f0 07		      BEQ	Test0
    808  f384		       a5 c9		      LDA	ScoreFontColor	;3
    809  f386		       85 06		      STA	COLUP0	;3
    810  f388		       4c 8f f3 	      JMP	Test1
    811  f38b				   Test0
    812  f38b		       a9 f9		      LDA	#PLAYER0_COLOR	;3
    813  f38d		       85 06		      STA	COLUP0	;3
    814  f38f				   Test1
    815  f38f		       a5 8c		      LDA	FrameCount0	;3
    816  f391		       29 02		      AND	#%00000010	;2 
    817  f393		       f0 07		      BEQ	Test2
    818  f395		       a5 ca		      LDA	OpScoreFontColor	;3
    819  f397		       85 07		      STA	COLUP1	;3
    820  f399		       4c a0 f3 	      JMP	Test3
    821  f39c				   Test2
    822  f39c		       a9 98		      LDA	#PLAYER1_COLOR	;3
    823  f39e		       85 07		      STA	COLUP1	;3
    824  f3a0				   Test3
    825  f3a0
    826  f3a0		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
    827  f3a2
    828  f3a2		       a5 8c		      LDA	FrameCount0	;Brach flag
    829  f3a4		       29 01		      AND	#%00000001
    830  f3a6
    831  f3a6		       d0 03		      BNE	OpScanLoop	;2
    832  f3a8		       4c 65 f4 	      JMP	ScanLoop	;3 Skips the first WSYNC, so the last background line can be draw to the end.
    833  f3ab							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
    834  f3ab
    835  f3ab							;main scanline loop...
    836  f3ab				   OpScanLoop
    837  f3ab		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    838  f3ad
    839  f3ad		       a5 80		      LDA	GRP0Cache	;3
    840  f3af		       85 1b		      STA	GRP0	;3
    841  f3b1
    842  f3b1		       a5 84		      LDA	GRP1Cache	;3
    843  f3b3		       85 1c		      STA	GRP1	;3
    844  f3b5
    845  f3b5		       a5 85		      LDA	ENABLCache	;3
    846  f3b7		       85 1f		      STA	ENABL	;3
    847  f3b9
    848  f3b9		       a5 86		      LDA	ENAM0Cache	;3
    849  f3bb		       85 1d		      STA	ENAM0	;3
    850  f3bd
    851  f3bd		       a5 87		      LDA	ENAM1Cache	;3
    852  f3bf		       85 1e		      STA	ENAM1	;3
    853  f3c1
    854  f3c1		       a5 81		      LDA	PF0Cache	;3
    855  f3c3		       85 0d		      STA	PF0	;3
    856  f3c5
    857  f3c5		       a9 00		      LDA	#0	;2
    858  f3c7							;STA PF0	     ;3
    859  f3c7		       85 80		      STA	GRP0Cache	;3
    860  f3c9		       85 86		      STA	ENAM0Cache	;3
    861  f3cb		       85 85		      STA	ENABLCache	;3
    862  f3cd		       85 87		      STA	ENAM1Cache	; 3
    863  f3cf							;STA GRP1Cache ;3
    864  f3cf		       85 0d		      STA	PF0	;3
    865  f3d1							;STA PF2	     ;3
    866  f3d1
    867  f3d1		       a5 83		      LDA	PF2Cache	;3
    868  f3d3		       85 0f		      STA	PF2	;3
    869  f3d5
    870  f3d5				   OpDrawCar0
    871  f3d5		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
    872  f3d7		       b0 04		      BCS	OpSkipDrawCar	;2
    873  f3d9		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
    874  f3db		       85 84		      STA	GRP1Cache	;3   ;put it as graphics now
    875  f3dd				   OpSkipDrawCar
    876  f3dd
    877  f3dd							;BEQ DrawTraffic3
    878  f3dd				   OpDrawTraffic1		; 33
    879  f3dd		       98		      TYA		; 2
    880  f3de		       18		      CLC		; 2 
    881  f3df		       65 a5		      ADC	OpTrafficOffset1 + 1	;3
    882  f3e1		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
    883  f3e3		       b0 05		      BCS	OpEorOffsetWithCarry	; 2(worse not to jump), 4 if branch
    884  f3e5		       45 a6		      EOR	OpTrafficOffset1 + 2	; 3
    885  f3e7		       4c ec f3 	      JMP	OpAfterEorOffsetWithCarry	; 3
    886  f3ea				   OpEorOffsetWithCarry
    887  f3ea		       45 a7		      EOR	OpTrafficOffset1 + 3	; 3
    888  f3ec				   OpAfterEorOffsetWithCarry		;17
    889  f3ec		       aa		      TAX		;2
    890  f3ed		       bd 00 fe 	      LDA	AesTable,X	; 4
    891  f3f0		       c5 bf		      CMP	OpTrafficChance	;3
    892  f3f2		       b0 04		      BCS	OpFinishDrawTraffic1	; 2
    893  f3f4		       a9 ff		      LDA	#$FF	;2
    894  f3f6		       85 86		      STA	ENAM0Cache	;3
    895  f3f8				   OpFinishDrawTraffic1
    896  f3f8
    897  f3f8				   OpErasePF2
    898  f3f8		       a9 00		      LDA	#0
    899  f3fa		       85 0f		      STA	PF2
    900  f3fc
    901  f3fc				   OpDrawTraffic2		; 33
    902  f3fc		       98		      TYA		; 2
    903  f3fd		       18		      CLC		; 2 
    904  f3fe		       65 a9		      ADC	OpTrafficOffset2 + 1	;3
    905  f400		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    906  f402		       b0 05		      BCS	OpEorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
    907  f404		       45 aa		      EOR	OpTrafficOffset2 + 2	; 3
    908  f406		       4c 0b f4 	      JMP	OpAfterEorOffsetWithCarry2	; 3
    909  f409				   OpEorOffsetWithCarry2
    910  f409		       45 ab		      EOR	OpTrafficOffset2 + 3	; 3
    911  f40b				   OpAfterEorOffsetWithCarry2		;17
    912  f40b		       aa		      TAX		;2
    913  f40c		       bd 00 fe 	      LDA	AesTable,X	; 4
    914  f40f		       c5 bf		      CMP	OpTrafficChance	;3
    915  f411		       b0 04		      BCS	OpFinishDrawTraffic2	; 2
    916  f413		       a9 02		      LDA	#%00000010	;2
    917  f415		       85 85		      STA	ENABLCache	;3
    918  f417				   OpFinishDrawTraffic2
    919  f417
    920  f417							;STA WSYNC ;65 / 137
    921  f417
    922  f417							; LDA Tmp0 ; Flicker this line if drawing car
    923  f417							; BEQ FinishDrawTraffic4
    924  f417				   OpDrawTraffic3		; 33
    925  f417		       98		      TYA		; 2
    926  f418		       18		      CLC		; 2 
    927  f419		       65 ad		      ADC	OpTrafficOffset3 + 1	;3
    928  f41b		       29 f8		      AND	#TRAFFIC_1_MASK	;2
    929  f41d		       b0 05		      BCS	OpEorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
    930  f41f		       45 ae		      EOR	OpTrafficOffset3 + 2	; 3
    931  f421		       4c 26 f4 	      JMP	OpAfterEorOffsetWithCarry3	; 3
    932  f424				   OpEorOffsetWithCarry3
    933  f424		       45 af		      EOR	OpTrafficOffset3 + 3	; 3
    934  f426				   OpAfterEorOffsetWithCarry3		;17
    935  f426		       aa		      TAX		;2
    936  f427		       bd 00 fe 	      LDA	AesTable,X	; 4
    937  f42a		       c5 bf		      CMP	OpTrafficChance	;3
    938  f42c		       b0 04		      BCS	OpFinishDrawTraffic3	; 2 
    939  f42e		       a9 02		      LDA	#%00000010	;2
    940  f430		       85 87		      STA	ENAM1Cache
    941  f432				   OpFinishDrawTraffic3
    942  f432
    943  f432				   OpDrawOponent		;26
    944  f432		       84 b0		      STY	Tmp0	;3
    945  f434		       a4 cf		      LDY	OpponentLine	;3
    946  f436		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
    947  f438		       b0 0b		      BCS	OpSkipDrawOpponent	;2
    948  f43a				   OpDrawOpponent
    949  f43a		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
    950  f43c		       85 80		      STA	GRP0Cache	;3
    951  f43e		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
    952  f440		       a4 b0		      LDY	Tmp0	;3
    953  f442		       4c 56 f4 	      JMP	OpHasNoBorderP0	; Do not draw border to save cycles
    954  f445				   OpSkipDrawOpponent
    955  f445		       c6 cf		      DEC	OpponentLine	;5
    956  f447		       a4 b0		      LDY	Tmp0	;3
    957  f449
    958  f449
    959  f449				   OpDrawTraffic0		; 21 2pe
    960  f449		       98		      TYA		; 2
    961  f44a		       18		      CLC		; 2 
    962  f44b		       65 a1		      ADC	OpTrafficOffset0 + 1	;3
    963  f44d		       29 08		      AND	#%00001000	;2
    964  f44f		       f0 05		      BEQ	OpHasNoBorderP0	;3
    965  f451				   OpHasBorderP0
    966  f451		       a9 e0		      LDA	#%11100000	; 2
    967  f453		       4c 58 f4 	      JMP	OpStoreBorderP0	; 3
    968  f456				   OpHasNoBorderP0
    969  f456		       a9 00		      LDA	#0	; 2
    970  f458				   OpStoreBorderP0
    971  f458		       85 81		      STA	PF0Cache	; 3
    972  f45a		       85 83		      STA	PF2Cache	; 3
    973  f45c
    974  f45c				   OpSkipDrawTraffic0
    975  f45c
    976  f45c				   OpWhileScanLoop
    977  f45c		       88		      DEY		;2
    978  f45d		       30 03		      BMI	OpFinishScanLoop	;2 two big Breach, needs JMP
    979  f45f		       4c ab f3 	      JMP	OpScanLoop	;3
    980  f462				   OpFinishScanLoop		; 7 209 of 222
    981  f462		       4c 1a f5 	      JMP	FinishScanLoop
    982  f465
    983  f465							;main scanline loop...
    984  f465				   ScanLoop
    985  f465		       85 02		      STA	WSYNC	;from the end of the scan loop, sync the final line
    986  f467
    987  f467		       a5 81		      LDA	PF0Cache	;3
    988  f469		       85 0d		      STA	PF0	;3
    989  f46b
    990  f46b		       a5 80		      LDA	GRP0Cache	;3
    991  f46d		       85 1b		      STA	GRP0	;3
    992  f46f
    993  f46f		       a5 84		      LDA	GRP1Cache	;3
    994  f471		       85 1c		      STA	GRP1	;3
    995  f473
    996  f473		       a5 86		      LDA	ENAM0Cache	;3
    997  f475		       85 1d		      STA	ENAM0	;3
    998  f477
    999  f477		       a5 85		      LDA	ENABLCache	;3
   1000  f479		       85 1f		      STA	ENABL	;3
   1001  f47b
   1002  f47b		       a5 87		      LDA	ENAM1Cache	;3
   1003  f47d		       85 1e		      STA	ENAM1	;3
   1004  f47f
   1005  f47f		       a5 83		      LDA	PF2Cache	;3
   1006  f481		       85 0f		      STA	PF2	;3
   1007  f483
   1008  f483		       a9 00		      LDA	#0	;2
   1009  f485		       85 0d		      STA	PF0	;3
   1010  f487		       85 84		      STA	GRP1Cache	;3
   1011  f489		       85 85		      STA	ENABLCache	;3
   1012  f48b		       85 86		      STA	ENAM0Cache	;3
   1013  f48d		       85 87		      STA	ENAM1Cache	; 3
   1014  f48f							;STA GRP0Cache
   1015  f48f		       85 0f		      STA	PF2	;3
   1016  f491
   1017  f491				   DrawCar0
   1018  f491		       c0 0f		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1019  f493		       b0 04		      BCS	SkipDrawCar	;2
   1020  f495		       b1 d7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1021  f497		       85 80		      STA	GRP0Cache	;3   ;put it as graphics now
   1022  f499				   SkipDrawCar
   1023  f499
   1024  f499							;BEQ DrawTraffic3
   1025  f499				   DrawTraffic1 		; 33
   1026  f499		       98		      TYA		; 2
   1027  f49a		       18		      CLC		; 2 
   1028  f49b		       65 95		      ADC	TrafficOffset1 + 1	;3
   1029  f49d		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1030  f49f		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1031  f4a1		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1032  f4a3		       4c a8 f4 	      JMP	AfterEorOffsetWithCarry	; 3
   1033  f4a6				   EorOffsetWithCarry
   1034  f4a6		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1035  f4a8				   AfterEorOffsetWithCarry		;17
   1036  f4a8		       aa		      TAX		;2
   1037  f4a9		       bd 00 fe 	      LDA	AesTable,X	; 4
   1038  f4ac		       c5 be		      CMP	TrafficChance	;3
   1039  f4ae		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1040  f4b0		       a9 ff		      LDA	#$FF	;2
   1041  f4b2		       85 86		      STA	ENAM0Cache	;3
   1042  f4b4				   FinishDrawTraffic1
   1043  f4b4
   1044  f4b4				   DrawTraffic2 		; 33
   1045  f4b4		       98		      TYA		; 2
   1046  f4b5		       18		      CLC		; 2 
   1047  f4b6		       65 99		      ADC	TrafficOffset2 + 1	;3
   1048  f4b8		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1049  f4ba		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1050  f4bc		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1051  f4be		       4c c3 f4 	      JMP	AfterEorOffsetWithCarry2	; 3
   1052  f4c1				   EorOffsetWithCarry2
   1053  f4c1		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1054  f4c3				   AfterEorOffsetWithCarry2		;17
   1055  f4c3		       aa		      TAX		;2
   1056  f4c4		       bd 00 fe 	      LDA	AesTable,X	; 4
   1057  f4c7		       c5 be		      CMP	TrafficChance	;3
   1058  f4c9		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1059  f4cb		       a9 02		      LDA	#%00000010	;2
   1060  f4cd		       85 85		      STA	ENABLCache	;3
   1061  f4cf				   FinishDrawTraffic2
   1062  f4cf
   1063  f4cf							;STA WSYNC ;65 / 137
   1064  f4cf
   1065  f4cf							; LDA Tmp0 ; Flicker this line if drawing car
   1066  f4cf							; BEQ FinishDrawTraffic4
   1067  f4cf				   DrawTraffic3 		; 33
   1068  f4cf		       98		      TYA		; 2
   1069  f4d0		       18		      CLC		; 2 
   1070  f4d1		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1071  f4d3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1072  f4d5		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1073  f4d7		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1074  f4d9		       4c de f4 	      JMP	AfterEorOffsetWithCarry3	; 3
   1075  f4dc				   EorOffsetWithCarry3
   1076  f4dc		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1077  f4de				   AfterEorOffsetWithCarry3		;17
   1078  f4de		       aa		      TAX		;2
   1079  f4df		       bd 00 fe 	      LDA	AesTable,X	; 4
   1080  f4e2		       c5 be		      CMP	TrafficChance	;3
   1081  f4e4		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1082  f4e6		       a9 02		      LDA	#%00000010	;2
   1083  f4e8		       85 87		      STA	ENAM1Cache
   1084  f4ea				   FinishDrawTraffic3
   1085  f4ea
   1086  f4ea
   1087  f4ea				   DrawOponent		;26
   1088  f4ea		       84 b0		      STY	Tmp0	;3
   1089  f4ec		       a4 cf		      LDY	OpponentLine	;3
   1090  f4ee		       c0 07		      CPY	#(CAR_START_LINE - 8)	;2
   1091  f4f0		       b0 0b		      BCS	SkipDrawOpponent	;2
   1092  f4f2				   DrawOpponent
   1093  f4f2		       b1 d9		      LDA	(EnemyCarSpritePointerL),Y	;5
   1094  f4f4		       85 84		      STA	GRP1Cache	;3
   1095  f4f6		       c6 cf		      DEC	OpponentLine	;5 ; Waste some bytes (repeated code), but faster
   1096  f4f8		       a4 b0		      LDY	Tmp0	;3
   1097  f4fa		       4c 0e f5 	      JMP	HasNoBorderP0	; Do not draw border to save cycles
   1098  f4fd				   SkipDrawOpponent
   1099  f4fd		       c6 cf		      DEC	OpponentLine	;5
   1100  f4ff		       a4 b0		      LDY	Tmp0	;3
   1101  f501
   1102  f501				   DrawTraffic0 		; 21 2pe
   1103  f501		       98		      TYA		; 2
   1104  f502		       18		      CLC		; 2 
   1105  f503		       65 91		      ADC	TrafficOffset0 + 1	;3
   1106  f505		       29 08		      AND	#%00001000	;2
   1107  f507		       f0 05		      BEQ	HasNoBorderP0	;3
   1108  f509				   HasBorderP0
   1109  f509		       a9 e0		      LDA	#%11100000	; 2
   1110  f50b		       4c 10 f5 	      JMP	StoreBorderP0	; 3
   1111  f50e				   HasNoBorderP0
   1112  f50e		       a9 00		      LDA	#0	; 2
   1113  f510				   StoreBorderP0
   1114  f510		       85 81		      STA	PF0Cache	; 3
   1115  f512		       85 83		      STA	PF2Cache	; 3
   1116  f514
   1117  f514				   SkipDrawTraffic0
   1118  f514
   1119  f514				   WhileScanLoop
   1120  f514		       88		      DEY		;2
   1121  f515		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1122  f517		       4c 65 f4 	      JMP	ScanLoop	;3
   1123  f51a				   FinishScanLoop		; 7 209 of 222
   1124  f51a
   1125  f51a		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1126  f51c		       20 b7 f6 	      JSR	LoadAll
   1127  f51f		       85 02		      STA	WSYNC	; do stuff!
   1128  f521		       85 02		      STA	WSYNC
   1129  f523		       85 02		      STA	WSYNC
   1130  f525
   1131  f525				   PrepareOverscan
   1132  f525		       a9 02		      LDA	#2
   1133  f527		       85 02		      STA	WSYNC
   1134  f529							;STA HMOVE	; HMOVE 10
   1135  f529		       85 01		      STA	VBLANK
   1136  f52b
   1137  f52b		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1138  f52d		       8d 96 02 	      STA	TIM64T
   1139  f530
   1140  f530		       85 2b		      STA	HMCLR	; Before we process car movement
   1141  f532							;Read Fire Button before, will make it start the game for now.
   1142  f532				   StartGame
   1143  f532		       a5 0c		      LDA	INPT4	;3 Any player has to press start
   1144  f534		       25 0d		      AND	INPT5	;3 player 1
   1145  f536		       30 3c		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1146  f538		       a5 8c		      LDA	FrameCount0
   1147  f53a		       29 01		      AND	#%00000001
   1148  f53c		       d0 36		      BNE	SkipGameStart	; Starts only on even frames, so we avoid players to have the screen swaped (hack).
   1149  f53e		       a5 bd		      LDA	GameStatus	;3
   1150  f540		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1151  f542		       d0 30		      BNE	SkipGameStart
   1152  f544		       a5 c6		      LDA	GameMode
   1153  f546		       c9 10		      CMP	#MAX_GAME_MODE
   1154  f548		       d0 0b		      BNE	SetGameRunningIfBothPressing
   1155  f54a		       a9 00		      LDA	#0
   1156  f54c		       85 c6		      STA	GameMode
   1157  f54e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1158  f550		       85 bc		      STA	SwitchDebounceCounter
   1159  f552		       4c 74 f5 	      JMP	SkipGameStart
   1160  f555				   SetGameRunningIfBothPressing
   1161  f555		       a5 0c		      LDA	INPT4	;3 Both player have to press start
   1162  f557		       05 0d		      ORA	INPT5	;3 player 1
   1163  f559		       30 19		      BMI	SkipGameStart
   1164  f55b				   SetGameRunning
   1165  f55b		       e6 bd		      INC	GameStatus
   1166  f55d		       a9 00		      LDA	#0	;
   1167  f55f		       85 8c		      STA	FrameCount0
   1168  f561		       85 8d		      STA	FrameCount1
   1169  f563		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1170  f565		       85 c9		      STA	ScoreFontColor
   1171  f567		       a9 c8		      LDA	#OP_SCORE_FONT_COLOR_START
   1172  f569		       85 ca		      STA	OpScoreFontColor
   1173  f56b		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1174  f56d		       85 cb		      STA	ScoreFontColorHoldChange
   1175  f56f		       85 cc		      STA	OpScoreFontColorHoldChange
   1176  f571		       4c e8 f5 	      JMP	OverScanWait	; Do not process player movement and also start
   1177  f574				   SkipGameStart
   1178  f574
   1179  f574				   ReadSwitches
   1180  f574		       a6 bc		      LDX	SwitchDebounceCounter
   1181  f576		       d0 37		      BNE	DecrementSwitchDebounceCounter
   1182  f578		       a9 01		      LDA	#%00000001
   1183  f57a		       2c 82 02 	      BIT	SWCHB
   1184  f57d		       d0 07		      BNE	SkipReset
   1185  f57f		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1186  f581		       85 bc		      STA	SwitchDebounceCounter
   1187  f583		       4c f0 f5 	      JMP	OverScanWaitBeforeReset
   1188  f586				   SkipReset
   1189  f586
   1190  f586				   GameModeSelect
   1191  f586		       a5 bd		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1192  f588		       d0 22		      BNE	SkipGameSelect
   1193  f58a		       a2 00		      LDX	#0
   1194  f58c		       20 e3 f6 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1195  f58f		       e8		      INX
   1196  f590		       20 e3 f6 	      JSR	ConfigureDifficulty
   1197  f593				   ContinueGameSelect
   1198  f593		       a9 02		      LDA	#%00000010
   1199  f595		       2c 82 02 	      BIT	SWCHB
   1200  f598		       d0 12		      BNE	SkipGameSelect
   1201  f59a		       a6 c6		      LDX	GameMode
   1202  f59c		       e0 10		      CPX	#MAX_GAME_MODE
   1203  f59e		       f0 04		      BEQ	ResetGameMode
   1204  f5a0		       e8		      INX
   1205  f5a1		       4c a6 f5 	      JMP	StoreGameMode
   1206  f5a4				   ResetGameMode
   1207  f5a4		       a2 00		      LDX	#0
   1208  f5a6				   StoreGameMode
   1209  f5a6		       86 c6		      STX	GameMode
   1210  f5a8		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1211  f5aa		       85 bc		      STA	SwitchDebounceCounter
   1212  f5ac				   SkipGameSelect
   1213  f5ac		       4c b1 f5 	      JMP	EndReadSwitches
   1214  f5af				   DecrementSwitchDebounceCounter
   1215  f5af		       c6 bc		      DEC	SwitchDebounceCounter
   1216  f5b1				   EndReadSwitches
   1217  f5b1
   1218  f5b1				   DoNotTurnBeforeStart
   1219  f5b1							;STA HMCLR
   1220  f5b1		       a5 bd		      LDA	GameStatus
   1221  f5b3		       f0 33		      BEQ	OverScanWait
   1222  f5b5
   1223  f5b5							; Last thing, will overrride hmove
   1224  f5b5				   CallTestColisionAndMove
   1225  f5b5		       a2 00		      LDX	#0	; Player 0
   1226  f5b7							; Colision with traffic, each player check different flags,
   1227  f5b7		       a5 8c		      LDA	FrameCount0
   1228  f5b9		       29 01		      AND	#%00000001
   1229  f5bb		       d0 0a		      BNE	SkipColisionPlayer0	; Test colision after draw frame
   1230  f5bd		       20 92 f8 	      JSR	IsOpponentColliding
   1231  f5c0		       05 01		      ORA	CXM1P
   1232  f5c2		       4a		      LSR
   1233  f5c3		       05 00		      ORA	CXM0P
   1234  f5c5		       05 02		      ORA	CXP0FB
   1235  f5c7							; ORA CXPPMM ; Collision between players will have its own rules
   1236  f5c7				   SkipColisionPlayer0		; Should not colide on opponent side.
   1237  f5c7		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1238  f5c9		       85 b2		      STA	Tmp2
   1239  f5cb		       20 a6 f8 	      JSR	TestCollisionAndMove
   1240  f5ce
   1241  f5ce		       e8		      INX		; player 1
   1242  f5cf		       a5 8c		      LDA	FrameCount0
   1243  f5d1		       29 01		      AND	#%00000001
   1244  f5d3		       f0 0a		      BEQ	SkipColisionPlayer1	; Test colision after draw frame
   1245  f5d5		       20 92 f8 	      JSR	IsOpponentColliding
   1246  f5d8		       05 00		      ORA	CXM0P
   1247  f5da		       4a		      LSR
   1248  f5db		       05 01		      ORA	CXM1P
   1249  f5dd		       05 03		      ORA	CXP1FB
   1250  f5df				   SkipColisionPlayer1
   1251  f5df		       29 40		      AND	#%01000000	; Accounting for random noise in the bus	
   1252  f5e1		       85 b2		      STA	Tmp2
   1253  f5e3		       20 a6 f8 	      JSR	TestCollisionAndMove
   1254  f5e6
   1255  f5e6				   ClearCollision
   1256  f5e6		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
   1257  f5e8
   1258  f5e8				   OverScanWait
   1259  f5e8		       ad 84 02 	      LDA	INTIM
   1260  f5eb		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1261  f5ed		       4c d8 f0 	      JMP	MainLoop
   1262  f5f0
   1263  f5f0				   OverScanWaitBeforeReset
   1264  f5f0		       ad 84 02 	      LDA	INTIM
   1265  f5f3		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1266  f5f5		       4c 14 f0 	      JMP	Start
   1267  f5f8
   1268  f5f8				   Subroutines
   1269  f5f8
   1270  f5f8							;X Player
   1271  f5f8							;Tmp1 TrafficOffset 2
   1272  f5f8				   ProcessSound
   1273  f5f8				   SoundEffects 		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1274  f5f8		       b5 c9		      LDA	ScoreFontColor,X	;3
   1275  f5fa		       dd b7 fc 	      CMP	PlayerToScoreOverColor,X	;2
   1276  f5fd		       f0 6b		      BEQ	EngineSound	;2 A little bit of silence, since you will be run over all the time
   1277  f5ff		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X	;2
   1278  f602		       f0 29		      BEQ	PlayCheckpoint	;2
   1279  f604		       b5 8e		      LDA	CollisionCounter,X	;3
   1280  f606		       c9 e0		      CMP	#$E0	;2
   1281  f608		       b0 14		      BCS	PlayColision	;2
   1282  f60a		       b5 cd		      LDA	NextCheckpoint,X	;3
   1283  f60c		       38		      SEC		;2
   1284  f60d		       e5 b1		      SBC	Tmp1	;TrafficOffset0 + 2 ;3
   1285  f60f		       c9 02		      CMP	#$02	;2
   1286  f611		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1287  f613		       b5 b8		      LDA	CountdownTimer,X	; 3
   1288  f615		       f0 53		      BEQ	EngineSound	;2
   1289  f617		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1290  f619		       90 37		      BCC	PlayWarnTimeEnding	;4
   1291  f61b		       4c 6a f6 	      JMP	EngineSound	;3
   1292  f61e				   PlayColision
   1293  f61e		       a9 1f		      LDA	#31
   1294  f620		       95 17		      STA	AUDF0,X
   1295  f622		       a9 08		      LDA	#8
   1296  f624		       95 15		      STA	AUDC0,X
   1297  f626		       a9 08		      LDA	#8
   1298  f628		       95 19		      STA	AUDV0,X
   1299  f62a		       4c 91 f6 	      JMP	EndSound
   1300  f62d
   1301  f62d				   PlayCheckpoint
   1302  f62d		       b5 cb		      LDA	ScoreFontColorHoldChange,X	;3
   1303  f62f		       4a		      LSR		;2
   1304  f630		       4a		      LSR		;2
   1305  f631		       4a		      LSR		;2
   1306  f632		       95 17		      STA	AUDF0,X	;3
   1307  f634		       a9 0c		      LDA	#12	;2
   1308  f636		       95 15		      STA	AUDC0,X	;3
   1309  f638		       a9 06		      LDA	#6	;2
   1310  f63a		       95 19		      STA	AUDV0,X	;3
   1311  f63c		       4c 91 f6 	      JMP	EndSound	;3
   1312  f63f
   1313  f63f				   PlayBeforeCheckpoint
   1314  f63f		       a5 8c		      LDA	FrameCount0	;3
   1315  f641		       29 1c		      AND	#%00011100	;2
   1316  f643		       09 03		      ORA	#%00000011	;2
   1317  f645		       95 17		      STA	AUDF0,X	;3
   1318  f647		       a9 0c		      LDA	#12	;2
   1319  f649		       95 15		      STA	AUDC0,X	;3
   1320  f64b		       a9 03		      LDA	#3	;2
   1321  f64d		       95 19		      STA	AUDV0,X	;3
   1322  f64f		       4c 91 f6 	      JMP	EndSound	;3
   1323  f652
   1324  f652				   PlayWarnTimeEnding
   1325  f652		       a5 8c		      LDA	FrameCount0	;3
   1326  f654		       29 04		      AND	#%00000100	;2
   1327  f656		       f0 35		      BEQ	MuteSound	;2 Bip at regular intervals
   1328  f658		       18		      CLC		;2
   1329  f659		       a9 0a		      LDA	#10	;2
   1330  f65b		       75 b8		      ADC	CountdownTimer,X	;2
   1331  f65d		       95 17		      STA	AUDF0,X	;3
   1332  f65f		       a9 0c		      LDA	#12	;2
   1333  f661		       95 15		      STA	AUDC0,X	;3
   1334  f663		       a9 03		      LDA	#3	;2
   1335  f665		       95 19		      STA	AUDV0,X	;3
   1336  f667		       4c 91 f6 	      JMP	EndSound	;3
   1337  f66a
   1338  f66a				   EngineSound		;41
   1339  f66a		       a9 08		      LDA	#ENGINE_VOLUME	;It needs to restore volume now, since it is a shared audio channel
   1340  f66c		       95 19		      STA	AUDV0,X
   1341  f66e		       b5 b8		      LDA	CountdownTimer,X	;3
   1342  f670		       f0 1b		      BEQ	EngineOff	;2
   1343  f672		       b4 d5		      LDY	Gear,X
   1344  f674		       b5 de		      LDA	Player0SpeedL,X	;3
   1345  f676		       4a		      LSR		;2
   1346  f677		       4a		      LSR		;2
   1347  f678		       4a		      LSR		;2
   1348  f679		       29 0f		      AND	#%00001111	;2
   1349  f67b		       85 b0		      STA	Tmp0	;3
   1350  f67d		       b9 2d ff 	      LDA	EngineBaseFrequence,Y	; 4 Max of 5 bits
   1351  f680		       38		      SEC		;2
   1352  f681		       e5 b0		      SBC	Tmp0	;3
   1353  f683		       95 17		      STA	AUDF0,X	;3
   1354  f685		       b9 27 ff 	      LDA	EngineSoundType,Y	;4
   1355  f688		       95 15		      STA	AUDC0,X	;3
   1356  f68a		       4c 91 f6 	      JMP	EndEngineSound	;3
   1357  f68d				   EngineOff
   1358  f68d				   MuteSound
   1359  f68d		       a9 00		      LDA	#0
   1360  f68f		       95 15		      STA	AUDC0,X
   1361  f691				   EndEngineSound
   1362  f691				   EndSound
   1363  f691		       60		      RTS
   1364  f692
   1365  f692				   ClearAll		; 58
   1366  f692		       a9 00		      LDA	#0	;2
   1367  f694		       85 1b		      STA	GRP0	;3
   1368  f696		       85 1c		      STA	GRP1	;3
   1369  f698		       85 1f		      STA	ENABL	;3
   1370  f69a		       85 1d		      STA	ENAM0	;3
   1371  f69c		       85 1e		      STA	ENAM1	;3
   1372  f69e		       85 80		      STA	GRP0Cache	;3
   1373  f6a0		       85 84		      STA	GRP1Cache	;3
   1374  f6a2		       85 85		      STA	ENABLCache	;3
   1375  f6a4		       85 86		      STA	ENAM0Cache	;3
   1376  f6a6		       85 87		      STA	ENAM1Cache	;3
   1377  f6a8
   1378  f6a8				   ClearPF		; 26
   1379  f6a8		       a9 00		      LDA	#0	;2
   1380  f6aa				   ClearPFSkipLDA0
   1381  f6aa		       85 0d		      STA	PF0	;3
   1382  f6ac		       85 0e		      STA	PF1	;3
   1383  f6ae		       85 0f		      STA	PF2	;3	
   1384  f6b0		       85 81		      STA	PF0Cache	;3
   1385  f6b2		       85 82		      STA	PF1Cache	;3
   1386  f6b4		       85 83		      STA	PF2Cache	;3 
   1387  f6b6		       60		      RTS		;6
   1388  f6b7				   EndClearAll
   1389  f6b7
   1390  f6b7				   LoadAll		; 48
   1391  f6b7		       a5 81		      LDA	PF0Cache	;3
   1392  f6b9		       85 0d		      STA	PF0	;3
   1393  f6bb
   1394  f6bb		       a5 82		      LDA	PF1Cache	;3
   1395  f6bd		       85 0e		      STA	PF1	;3
   1396  f6bf
   1397  f6bf		       a5 83		      LDA	PF2Cache	;3
   1398  f6c1		       85 0f		      STA	PF2	;3
   1399  f6c3
   1400  f6c3		       a5 84		      LDA	GRP1Cache	;3
   1401  f6c5		       85 1c		      STA	GRP1	;3
   1402  f6c7
   1403  f6c7		       a5 85		      LDA	ENABLCache	;3
   1404  f6c9		       85 1f		      STA	ENABL	;3
   1405  f6cb
   1406  f6cb		       a5 86		      LDA	ENAM0Cache	;3
   1407  f6cd		       85 1d		      STA	ENAM0	;3
   1408  f6cf
   1409  f6cf		       a5 87		      LDA	ENAM1Cache	;3
   1410  f6d1		       85 1e		      STA	ENAM1	;3
   1411  f6d3
   1412  f6d3		       60		      RTS		;6
   1413  f6d4				   EndLoadAll
   1414  f6d4
   1415  f6d4				   NextDifficulty		;Is a SBR
   1416  f6d4		       a5 c6		      LDA	GameMode	; For now, even games change the difficult
   1417  f6d6		       29 01		      AND	#%00000001
   1418  f6d8		       d0 24		      BNE	CheckRandomDifficulty
   1419  f6da
   1420  f6da		       b5 c4		      LDA	CurrentDifficulty,X
   1421  f6dc		       18		      CLC
   1422  f6dd		       69 01		      ADC	#1
   1423  f6df		       29 03		      AND	#%00000011	; 0 to 3
   1424  f6e1		       95 c4		      STA	CurrentDifficulty,X
   1425  f6e3
   1426  f6e3				   ConfigureDifficulty		;Is a SBR for performance optimization it is called directly
   1427  f6e3		       b4 c4		      LDY	CurrentDifficulty,X	;Needed, not always NextDifficulty is entrypoint
   1428  f6e5		       b9 a9 ff 	      LDA	TrafficChanceTable,Y
   1429  f6e8		       95 be		      STA	TrafficChance,X
   1430  f6ea		       b9 a5 ff 	      LDA	TrafficColorTable,Y
   1431  f6ed		       95 c2		      STA	TrafficColor,X
   1432  f6ef
   1433  f6ef		       a5 c6		      LDA	GameMode	;
   1434  f6f1		       29 01		      AND	#%00000001
   1435  f6f3		       f0 03		      BEQ	UseNextDifficultyTime
   1436  f6f5		       4c f9 f6 	      JMP	StoreDifficultyTime
   1437  f6f8				   UseNextDifficultyTime
   1438  f6f8		       c8		      INY
   1439  f6f9				   StoreDifficultyTime
   1440  f6f9		       b9 ad ff 	      LDA	TrafficTimeTable,Y
   1441  f6fc		       95 c0		      STA	CheckpointTime,X
   1442  f6fe
   1443  f6fe				   CheckRandomDifficulty
   1444  f6fe		       a5 c6		      LDA	GameMode
   1445  f700		       29 08		      AND	#%00001000	; Random difficulties
   1446  f702		       f0 26		      BEQ	ReturnFromNextDifficulty
   1447  f704				   RandomDifficulty		; Might bug if both players cross at the same time, it is a feature! Very unlikelly. Solve if there is rom space left...
   1448  f704		       a5 f2		      LDA	IsOpponentInFront
   1449  f706		       30 12		      BMI	UseOpponentChance
   1450  f708		       a5 cf		      LDA	OpponentLine	; Same line
   1451  f70a		       c9 3a		      CMP	#(GAMEPLAY_AREA - CAR_SIZE)
   1452  f70c		       f0 1c		      BEQ	ReturnFromNextDifficulty	; Special case, just use the default level difficulty.
   1453  f70e		       a4 8c		      LDY	FrameCount0
   1454  f710		       b9 00 fe 	      LDA	AesTable,Y
   1455  f713							;EOR TrafficChance, no need, lets make life simple
   1456  f713		       29 3f		      AND	#%00111111
   1457  f715		       95 be		      STA	TrafficChance,X	; Cache winning player chance and use
   1458  f717		       4c 2a f7 	      JMP	ReturnFromNextDifficulty
   1459  f71a				   UseOpponentChance
   1460  f71a		       8a		      TXA
   1461  f71b		       49 01		      EOR	#%00000001	; Reverts the player
   1462  f71d		       aa		      TAX
   1463  f71e		       b5 be		      LDA	TrafficChance,X	; Loads opponent chance
   1464  f720		       85 b3		      STA	Tmp3
   1465  f722		       8a		      TXA
   1466  f723		       49 01		      EOR	#%00000001	; Restors the player
   1467  f725		       aa		      TAX
   1468  f726		       a5 b3		      LDA	Tmp3
   1469  f728		       95 be		      STA	TrafficChance,X
   1470  f72a
   1471  f72a				   ReturnFromNextDifficulty
   1472  f72a		       60		      RTS
   1473  f72b
   1474  f72b				   DefaultOffsets
   1475  f72b		       a9 20		      LDA	#$20
   1476  f72d		       85 96		      STA	TrafficOffset1 + 2
   1477  f72f		       85 a6		      STA	OpTrafficOffset1 + 2
   1478  f731		       a9 40		      LDA	#$40
   1479  f733		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1480  f735		       85 aa		      STA	OpTrafficOffset2 + 2
   1481  f737		       a9 60		      LDA	#$60
   1482  f739		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1483  f73b		       85 ae		      STA	OpTrafficOffset3 + 2
   1484  f73d		       a9 80		      LDA	#$80
   1485  f73f		       60		      RTS
   1486  f740
   1487  f740				   PrintStaticText		; Preload X with the offset referent to StaticText
   1488  f740		       bd 00 ff 	      LDA	StaticText,X
   1489  f743		       85 d0		      STA	ScoreD0
   1490  f745		       e8		      INX
   1491  f746		       bd 00 ff 	      LDA	StaticText,X
   1492  f749		       85 d1		      STA	ScoreD1
   1493  f74b		       e8		      INX
   1494  f74c		       bd 00 ff 	      LDA	StaticText,X
   1495  f74f		       85 d2		      STA	ScoreD2
   1496  f751		       e8		      INX
   1497  f752		       bd 00 ff 	      LDA	StaticText,X
   1498  f755		       85 d3		      STA	ScoreD3
   1499  f757		       e8		      INX
   1500  f758		       bd 00 ff 	      LDA	StaticText,X
   1501  f75b		       85 d4		      STA	ScoreD4
   1502  f75d		       60		      RTS
   1503  f75e
   1504  f75e				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1505  f75e		       a2 00		      LDX	#0
   1506  f760		       a0 04		      LDY	#FONT_OFFSET
   1507  f762
   1508  f762				   ScoreLoop		; 20 
   1509  f762		       85 02		      STA	WSYNC	;2
   1510  f764		       85 2a		      STA	HMOVE
   1511  f766
   1512  f766		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1513  f768		       85 0d		      STA	PF0	;3
   1514  f76a
   1515  f76a		       a5 82		      LDA	PF1Cache	;3
   1516  f76c		       85 0e		      STA	PF1	;3
   1517  f76e
   1518  f76e		       a5 83		      LDA	PF2Cache	;3
   1519  f770		       85 0f		      STA	PF2	;3
   1520  f772
   1521  f772				   DrawScoreD0		; 15
   1522  f772		       a6 d0		      LDX	ScoreD0	; 3
   1523  f774		       bd 00 fd 	      LDA	Font,X	;4
   1524  f777		       85 81		      STA	PF0Cache	;3
   1525  f779		       c6 d0		      DEC	ScoreD0	;5
   1526  f77b
   1527  f77b				   DrawScoreD1		; 23	
   1528  f77b		       a6 d1		      LDX	ScoreD1	; 3
   1529  f77d		       bd 00 fd 	      LDA	Font,X	;4
   1530  f780		       0a		      ASL		;2
   1531  f781		       0a		      ASL		;2
   1532  f782		       0a		      ASL		;2
   1533  f783		       0a		      ASL		;2
   1534  f784		       85 82		      STA	PF1Cache	;3
   1535  f786		       c6 d1		      DEC	ScoreD1	;5
   1536  f788
   1537  f788				   DrawScoreD2		; 20
   1538  f788		       a6 d2		      LDX	ScoreD2	; 3
   1539  f78a		       bd 00 fd 	      LDA	Font,X	;4
   1540  f78d		       29 0f		      AND	#%00001111	;2
   1541  f78f		       05 82		      ORA	PF1Cache	;3
   1542  f791		       85 82		      STA	PF1Cache	;3
   1543  f793		       c6 d2		      DEC	ScoreD2	;5
   1544  f795
   1545  f795				   DrawScoreD3		; 23
   1546  f795		       a6 d3		      LDX	ScoreD3	; 3
   1547  f797		       bd 00 fd 	      LDA	Font,X	;4
   1548  f79a		       4a		      LSR		;2
   1549  f79b		       4a		      LSR		;2
   1550  f79c		       4a		      LSR		;2
   1551  f79d		       4a		      LSR		;2
   1552  f79e		       85 83		      STA	PF2Cache	;3
   1553  f7a0		       c6 d3		      DEC	ScoreD3	;5
   1554  f7a2
   1555  f7a2				   DrawScoreD4		; 20
   1556  f7a2		       a6 d4		      LDX	ScoreD4	; 3
   1557  f7a4		       bd 00 fd 	      LDA	Font,X	;4
   1558  f7a7		       29 f0		      AND	#%11110000	;2
   1559  f7a9		       05 83		      ORA	PF2Cache	;3
   1560  f7ab		       85 83		      STA	PF2Cache	;3
   1561  f7ad		       c6 d4		      DEC	ScoreD4	;5
   1562  f7af
   1563  f7af
   1564  f7af		       88		      DEY		;2
   1565  f7b0		       10 b0		      BPL	ScoreLoop	;4
   1566  f7b2
   1567  f7b2		       85 02		      STA	WSYNC
   1568  f7b4		       85 2a		      STA	HMOVE
   1569  f7b6		       20 b7 f6 	      JSR	LoadAll
   1570  f7b9		       60		      RTS		; 6
   1571  f7ba
   1572  f7ba				   WaitForVblankEnd
   1573  f7ba		       ad 84 02 	      LDA	INTIM
   1574  f7bd		       d0 fb		      BNE	WaitForVblankEnd
   1575  f7bf		       85 02		      STA	WSYNC
   1576  f7c1		       85 01		      STA	VBLANK
   1577  f7c3		       60		      RTS
   1578  f7c4
   1579  f7c4				   Sleep4Lines
   1580  f7c4		       85 02		      STA	WSYNC
   1581  f7c6		       85 02		      STA	WSYNC
   1582  f7c8		       85 02		      STA	WSYNC
   1583  f7ca		       85 02		      STA	WSYNC
   1584  f7cc		       60		      RTS
   1585  f7cd
   1586  f7cd				   Sleep8Lines
   1587  f7cd		       20 c4 f7 	      JSR	Sleep4Lines
   1588  f7d0		       20 c4 f7 	      JSR	Sleep4Lines
   1589  f7d3		       60		      RTS
   1590  f7d4
   1591  f7d4				   Sleep32Lines
   1592  f7d4		       20 cd f7 	      JSR	Sleep8Lines
   1593  f7d7		       20 cd f7 	      JSR	Sleep8Lines
   1594  f7da		       20 cd f7 	      JSR	Sleep8Lines
   1595  f7dd		       20 cd f7 	      JSR	Sleep8Lines
   1596  f7e0		       60		      RTS
   1597  f7e1
   1598  f7e1							;X = number of WSYNC HMOVE to run
   1599  f7e1				   HMoveXTimes
   1600  f7e1		       85 02		      STA	WSYNC	;3
   1601  f7e3		       85 2a		      STA	HMOVE	; 3/10 
   1602  f7e5		       ca		      DEX
   1603  f7e6		       d0 f9		      BNE	HMoveXTimes
   1604  f7e8		       60		      RTS
   1605  f7e9
   1606  f7e9				   ConfigureCarSprites
   1607  f7e9		       a5 8c		      LDA	FrameCount0
   1608  f7eb		       29 01		      AND	#%00000001
   1609  f7ed		       d0 0b		      BNE	LoadForRightScreenSprites
   1610  f7ef				   LoadForLeftScreenSprites
   1611  f7ef		       a5 c7		      LDA	CurrentCarId
   1612  f7f1		       85 b0		      STA	Tmp0
   1613  f7f3		       a5 c8		      LDA	OpCurrentCarId
   1614  f7f5		       85 b1		      STA	Tmp1
   1615  f7f7		       4c 02 f8 	      JMP	LoadCarSpritesFromIds
   1616  f7fa				   LoadForRightScreenSprites
   1617  f7fa		       a5 c7		      LDA	CurrentCarId
   1618  f7fc		       85 b1		      STA	Tmp1
   1619  f7fe		       a5 c8		      LDA	OpCurrentCarId
   1620  f800		       85 b0		      STA	Tmp0
   1621  f802
   1622  f802				   LoadCarSpritesFromIds		; The pointers are reversed every frame, opponent car has no padding
   1623  f802		       a4 b0		      LDY	Tmp0
   1624  f804		       b9 7f ff 	      LDA	CarIdToSpriteAddressL,Y
   1625  f807		       85 d7		      STA	CarSpritePointerL
   1626  f809		       b9 83 ff 	      LDA	CarIdToSpriteAddressH,Y
   1627  f80c		       85 d8		      STA	CarSpritePointerH
   1628  f80e				   ConfigureOpponentCarSprite
   1629  f80e		       a4 b1		      LDY	Tmp1
   1630  f810		       b9 87 ff 	      LDA	EnemyCarIdToSpriteAddressL,Y
   1631  f813		       85 d9		      STA	EnemyCarSpritePointerL
   1632  f815		       b9 8b ff 	      LDA	EnemyCarIdToSpriteAddressH,Y
   1633  f818		       85 da		      STA	EnemyCarSpritePointerH
   1634  f81a		       60		      RTS
   1635  f81b
   1636  f81b							; From http://www.6502.org/source/integers/hex2dec-more.htm
   1637  f81b							; Can be transformed into a 100 bytes lookup table if cycles are scarse...
   1638  f81b							; Tmp0 Binary Number
   1639  f81b							; Result Returned in Tmp 1 and A
   1640  f81b				   BINBCD8
   1641  f81b		       f8		      SED		; Switch to decimal mode
   1642  f81c		       a9 00		      LDA	#0	; Ensure the result is clear
   1643  f81e		       85 b1		      STA	Tmp1+0
   1644  f820							;STA Tmp1+1
   1645  f820		       a2 08		      LDX	#8	; The number of source bits
   1646  f822
   1647  f822				   CNVBIT
   1648  f822		       06 b0		      ASL	Tmp0	;BIN		; Shift out one bit
   1649  f824		       a5 b1		      LDA	Tmp1+0	; And add into result
   1650  f826		       65 b1		      ADC	Tmp1+0
   1651  f828		       85 b1		      STA	Tmp1+0
   1652  f82a							;Not needed now, 0 to 99 is enought for timer!
   1653  f82a							; LDA Tmp1+1	; propagating any carry
   1654  f82a							; ADC Tmp1+1
   1655  f82a							; STA Tmp1+1
   1656  f82a		       ca		      DEX		; And repeat for next bit
   1657  f82b		       d0 f5		      BNE	CNVBIT
   1658  f82d		       d8		      CLD		; Back to binary
   1659  f82e
   1660  f82e		       60		      RTS		; All Done.
   1661  f82f
   1662  f82f							;Tmp0 Current SWCHA mask, will be right shifted 4 times
   1663  f82f							;X player 0 or 1
   1664  f82f				   SelectCarWithDpad
   1665  f82f		       a0 03		      LDY	#3
   1666  f831				   SelectCarWithDpadLoop
   1667  f831		       ad 80 02 	      LDA	SWCHA
   1668  f834		       25 b0		      AND	Tmp0
   1669  f836		       d0 03		      BNE	ContinueSelectCarWithDpadLoop
   1670  f838		       98		      TYA
   1671  f839		       95 c7		      STA	CurrentCarId,X
   1672  f83b				   ContinueSelectCarWithDpadLoop
   1673  f83b		       46 b0		      LSR	Tmp0
   1674  f83d		       88		      DEY
   1675  f83e		       10 f1		      BPL	SelectCarWithDpadLoop
   1676  f840		       60		      RTS
   1677  f841
   1678  f841				   ProcessOpponentLine
   1679  f841		       a5 8c		      LDA	FrameCount0
   1680  f843		       29 01		      AND	#%00000001
   1681  f845		       38		      SEC
   1682  f846		       d0 15		      BNE	Player0IsOpponent
   1683  f848				   Player1IsOpponent		; Code could be reused?
   1684  f848		       a5 91		      LDA	TrafficOffset0 + 1
   1685  f84a		       e5 a1		      SBC	OpTrafficOffset0 + 1
   1686  f84c		       85 b0		      STA	Tmp0
   1687  f84e		       a5 92		      LDA	TrafficOffset0 + 2
   1688  f850		       e5 a2		      SBC	OpTrafficOffset0 + 2
   1689  f852		       85 b1		      STA	Tmp1
   1690  f854		       a5 ba		      LDA	Traffic0Msb
   1691  f856		       e5 bb		      SBC	OpTraffic0Msb
   1692  f858		       85 b2		      STA	Tmp2
   1693  f85a		       4c 6f f8 	      JMP	StoreInFrontPlayer
   1694  f85d				   Player0IsOpponent
   1695  f85d		       a5 a1		      LDA	OpTrafficOffset0 + 1
   1696  f85f		       e5 91		      SBC	TrafficOffset0 + 1
   1697  f861		       85 b0		      STA	Tmp0
   1698  f863		       a5 a2		      LDA	OpTrafficOffset0 + 2
   1699  f865		       e5 92		      SBC	TrafficOffset0 + 2
   1700  f867		       85 b1		      STA	Tmp1
   1701  f869		       a5 bb		      LDA	OpTraffic0Msb
   1702  f86b		       e5 ba		      SBC	Traffic0Msb
   1703  f86d		       85 b2		      STA	Tmp2
   1704  f86f
   1705  f86f				   StoreInFrontPlayer
   1706  f86f		       85 f2		      STA	IsOpponentInFront
   1707  f871
   1708  f871				   AddOffsetToOpponentLine
   1709  f871		       18		      CLC
   1710  f872		       a5 b0		      LDA	Tmp0
   1711  f874		       69 3a		      ADC	#(GAMEPLAY_AREA - CAR_SIZE)
   1712  f876		       85 b0		      STA	Tmp0
   1713  f878		       a5 b1		      LDA	Tmp1
   1714  f87a		       69 00		      ADC	#0
   1715  f87c		       85 b1		      STA	Tmp1	; Needed to test with the result in A
   1716  f87e		       a5 b2		      LDA	Tmp2
   1717  f880		       69 00		      ADC	#0
   1718  f882		       05 b1		      ORA	Tmp1
   1719  f884		       f0 07		      BEQ	OpponentVisible	; Less than 128 diff.
   1720  f886				   OpponentNotVisible
   1721  f886		       a9 ff		      LDA	#$FF	; For now, just removing from screen
   1722  f888		       85 cf		      STA	OpponentLine
   1723  f88a		       4c 91 f8 	      JMP	ReturnFromProcessOpponentLine
   1724  f88d				   OpponentVisible
   1725  f88d		       a5 b0		      LDA	Tmp0
   1726  f88f		       85 cf		      STA	OpponentLine
   1727  f891				   ReturnFromProcessOpponentLine
   1728  f891		       60		      RTS
   1729  f892
   1730  f892							; Value stored in A
   1731  f892				   IsOpponentColliding
   1732  f892							;Any non default state, opponent do not colide
   1733  f892		       a5 8e		      LDA	CollisionCounter
   1734  f894		       05 8f		      ORA	OpCollisionCounter
   1735  f896		       05 cb		      ORA	ScoreFontColorHoldChange
   1736  f898		       05 cc		      ORA	OpScoreFontColorHoldChange
   1737  f89a		       d0 07		      BNE	OpponentNotColliding
   1738  f89c		       a5 f2		      LDA	IsOpponentInFront
   1739  f89e		       25 07		      AND	CXPPMM
   1740  f8a0		       4c a5 f8 	      JMP	ReturnIsOpponentColliding
   1741  f8a3				   OpponentNotColliding
   1742  f8a3		       a9 00		      LDA	#0
   1743  f8a5				   ReturnIsOpponentColliding
   1744  f8a5		       60		      RTS
   1745  f8a6
   1746  f8a6
   1747  f8a6							; Movement and colision are binded because the car must be moved after duplicate size.
   1748  f8a6							; Use X for the player
   1749  f8a6							; Tmp2 Traffic colision result
   1750  f8a6				   TestCollisionAndMove
   1751  f8a6							; Until store the movemnt, Y contains the value to be stored.
   1752  f8a6							; see if player0 colides with the rest
   1753  f8a6		       a5 b2		      LDA	Tmp2
   1754  f8a8		       f0 2b		      BEQ	NoCollision	;skip if not hitting...
   1755  f8aa		       b5 8e		      LDA	CollisionCounter,X	; If colision is alredy happening, ignore!
   1756  f8ac		       d0 27		      BNE	NoCollision
   1757  f8ae		       b5 c9		      LDA	ScoreFontColor,X	; Ignore colisions during checkpoint (Green Score)
   1758  f8b0		       dd b3 fc 	      CMP	PlayerToScoreGoodColor,X
   1759  f8b3		       f0 20		      BEQ	NoCollision
   1760  f8b5		       dd b5 fc 	      CMP	PlayerToScoreStartColor,X
   1761  f8b8		       f0 1b		      BEQ	NoCollision
   1762  f8ba		       a9 ff		      LDA	#COLLISION_FRAMES
   1763  f8bc		       95 8e		      STA	CollisionCounter,X
   1764  f8be		       b5 f0		      LDA	Player0SpeedH,X
   1765  f8c0		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
   1766  f8c2		       a9 10		      LDA	#COLLISION_SPEED_L
   1767  f8c4		       d5 de		      CMP	Player0SpeedL,X
   1768  f8c6		       b0 04		      BCS	SkipSetColisionSpeedL
   1769  f8c8				   SetColisionSpeedL
   1770  f8c8		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
   1771  f8ca		       95 de		      STA	Player0SpeedL,X
   1772  f8cc				   SkipSetColisionSpeedL
   1773  f8cc		       a9 00		      LDA	#0
   1774  f8ce		       95 f0		      STA	Player0SpeedH,X
   1775  f8d0		       a0 40		      LDY	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
   1776  f8d2		       4c 25 f9 	      JMP	StoreHMove	; We keep position consistent
   1777  f8d5				   NoCollision
   1778  f8d5
   1779  f8d5				   DecrementCollision
   1780  f8d5		       b5 8e		      LDA	CollisionCounter,X
   1781  f8d7		       f0 06		      BEQ	FinishDecrementCollision
   1782  f8d9		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
   1783  f8db		       95 04		      STA	NUSIZ0,X	; NUSIZ1 is on the next position
   1784  f8dd		       d6 8e		      DEC	CollisionCounter,X
   1785  f8df				   FinishDecrementCollision
   1786  f8df
   1787  f8df				   ResetPlayerSize
   1788  f8df		       d0 04		      BNE	FinishResetPlayerSize
   1789  f8e1		       a9 30		      LDA	#%00110000
   1790  f8e3		       95 04		      STA	NUSIZ0,X	;
   1791  f8e5				   FinishResetPlayerSize
   1792  f8e5
   1793  f8e5				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
   1794  f8e5		       b5 8e		      LDA	CollisionCounter,X
   1795  f8e7		       c9 01		      CMP	#1	; Last frame before reset
   1796  f8e9		       d0 05		      BNE	SkipResetPlayerPosition
   1797  f8eb		       a0 c0		      LDY	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
   1798  f8ed		       4c 25 f9 	      JMP	StoreHMove
   1799  f8f0				   SkipResetPlayerPosition
   1800  f8f0
   1801  f8f0				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
   1802  f8f0		       b5 c7		      LDA	CurrentCarId,X
   1803  f8f2		       c9 03		      CMP	#CAR_ID_DRAGSTER
   1804  f8f4		       d0 08		      BNE	PrepareReadXAxis
   1805  f8f6		       a0 00		      LDY	#0
   1806  f8f8		       a5 8c		      LDA	FrameCount0
   1807  f8fa		       29 01		      AND	#DRAGSTER_TURN_MASK
   1808  f8fc		       f0 27		      BEQ	StoreHMove	; Ignore movement on some frames
   1809  f8fe
   1810  f8fe				   PrepareReadXAxis
   1811  f8fe		       a0 00		      LDY	#0
   1812  f900		       b5 b6		      LDA	Player0X,X
   1813  f902				   BeginReadLeft
   1814  f902		       f0 0f		      BEQ	SkipMoveLeft	; We do not move after maximum
   1815  f904		       bd 68 fc 	      LDA	PlayerToLeftMask,X	;Left mask 
   1816  f907		       2c 80 02 	      BIT	SWCHA
   1817  f90a		       d0 07		      BNE	SkipMoveLeft
   1818  f90c		       a0 10		      LDY	#$10	;a 1 in the left nibble means go left
   1819  f90e		       d6 b6		      DEC	Player0X,X
   1820  f910		       4c 25 f9 	      JMP	StoreHMove	; Cannot move left and right...
   1821  f913				   SkipMoveLeft
   1822  f913				   BeginReadRight
   1823  f913		       b5 b6		      LDA	Player0X,X
   1824  f915		       c9 2c		      CMP	#PLAYER_MAX_X
   1825  f917		       f0 0c		      BEQ	SkipMoveRight	; At max already
   1826  f919		       bd 6a fc 	      LDA	PlayerToRightMask,X	;Right mask set before call (player 0 or 1)
   1827  f91c		       2c 80 02 	      BIT	SWCHA
   1828  f91f		       d0 04		      BNE	SkipMoveRight
   1829  f921		       a0 f0		      LDY	#$F0	;a -1 in the left nibble means go right...
   1830  f923		       f6 b6		      INC	Player0X,X
   1831  f925				   SkipMoveRight
   1832  f925				   StoreHMove
   1833  f925		       94 20		      STY	HMP0,X	;set the move for player 0
   1834  f927
   1835  f927		       60		      RTS
   1836  f928
   1837  f928							; X Traffic offset 4 bits each lane, 4 lanes per player
   1838  f928							; Tmp3 Max X offset
   1839  f928							; Tmp4 Max Player Speed L
   1840  f928							; Tmp5 Max Player Speed H
   1841  f928				   UpdateOffsets
   1842  f928		       a0 00		      LDY	#0	; Line Speeds 16 bits
   1843  f92a		       a5 c6		      LDA	GameMode
   1844  f92c		       29 04		      AND	#%00000100	; GameModes with high delta
   1845  f92e		       f0 02		      BEQ	UpdateOffsetsLoop
   1846  f930		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
   1847  f932
   1848  f932				   UpdateOffsetsLoop		; Car sped - traffic speed = how much to change offet (signed)
   1849  f932		       38		      SEC
   1850  f933		       a5 b4		      LDA	Tmp4	;Player_SpeedL
   1851  f935		       f9 6b ff 	      SBC	TrafficSpeeds,Y
   1852  f938		       85 b0		      STA	Tmp0
   1853  f93a		       c8		      INY
   1854  f93b		       a5 b5		      LDA	Tmp5	;Player_SpeedH
   1855  f93d		       f9 6b ff 	      SBC	TrafficSpeeds,Y
   1856  f940		       85 b1		      STA	Tmp1
   1857  f942		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
   1858  f944		       e9 00		      SBC	#0
   1859  f946		       85 b2		      STA	Tmp2
   1860  f948
   1861  f948				   AddsTheResult
   1862  f948		       18		      CLC
   1863  f949		       a5 b0		      LDA	Tmp0
   1864  f94b		       75 90		      ADC	TrafficOffset0,X
   1865  f94d		       95 90		      STA	TrafficOffset0,X
   1866  f94f		       e8		      INX
   1867  f950		       a5 b1		      LDA	Tmp1
   1868  f952		       75 90		      ADC	TrafficOffset0,X
   1869  f954		       95 90		      STA	TrafficOffset0,X
   1870  f956		       e8		      INX
   1871  f957		       a5 b2		      LDA	Tmp2	; Carry
   1872  f959		       75 90		      ADC	TrafficOffset0,X
   1873  f95b		       95 90		      STA	TrafficOffset0,X
   1874  f95d		       90 0f		      BCC	CalculateOffsetCache
   1875  f95f				   CalculatePlayer0Msb
   1876  f95f		       e0 02		      CPX	#2	;Only the border (also score) has MSB, player 0
   1877  f961		       d0 05		      BNE	CalculatePlayer1Msb
   1878  f963		       e6 ba		      INC	Traffic0Msb
   1879  f965		       4c 6e f9 	      JMP	CalculateOffsetCache
   1880  f968				   CalculatePlayer1Msb
   1881  f968		       e0 12		      CPX	#(TRAFFIC_LINE_COUNT * 4) + 2	;MSB for player 1
   1882  f96a		       d0 02		      BNE	CalculateOffsetCache
   1883  f96c		       e6 bb		      INC	OpTraffic0Msb
   1884  f96e
   1885  f96e				   CalculateOffsetCache 		; This memory space can be shared and just used on the player drawing frame, saving 4 bytes.
   1886  f96e		       e8		      INX
   1887  f96f		       38		      SEC
   1888  f970		       69 00		      ADC	#0	;Increment by one
   1889  f972		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
   1890  f974
   1891  f974				   PrepareNextUpdateLoop
   1892  f974		       c8		      INY
   1893  f975		       e8		      INX
   1894  f976		       e4 b3		      CPX	Tmp3	; Max X offset
   1895  f978		       d0 b8		      BNE	UpdateOffsetsLoop
   1896  f97a		       60		      RTS
   1897  f97b
   1898  f97b							; X Player 0 or 1
   1899  f97b				   ProcessSpeed
   1900  f97b				   BreakOnTimeOver		; Uses LDX as the breaking speed
   1901  f97b		       a9 00		      LDA	#0
   1902  f97d		       85 b0		      STA	Tmp0	; Break speed
   1903  f97f		       b5 b8		      LDA	CountdownTimer,X
   1904  f981		       d0 0d		      BNE	Break
   1905  f983		       b4 c7		      LDY	CurrentCarId,X
   1906  f985		       a5 8c		      LDA	FrameCount0
   1907  f987		       39 93 ff 	      AND	CarIdToTimeoverBreakInterval,Y
   1908  f98a		       d0 04		      BNE	Break
   1909  f98c		       a9 01		      LDA	#TIMEOVER_BREAK_SPEED
   1910  f98e		       85 b0		      STA	Tmp0
   1911  f990
   1912  f990				   Break
   1913  f990		       bd 66 fc 	      LDA	PlayerToDownMask,X	;Down in controller
   1914  f993		       2c 80 02 	      BIT	SWCHA
   1915  f996		       d0 12		      BNE	BreakNonZero
   1916  f998		       b5 0c		      LDA	INPT4,X	;3
   1917  f99a		       10 0a		      BPL	BreakWhileAccelerating
   1918  f99c		       b4 d5		      LDY	Gear,X
   1919  f99e		       b9 9f ff 	      LDA	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
   1920  f9a1		       85 b0		      STA	Tmp0
   1921  f9a3		       4c aa f9 	      JMP	BreakNonZero
   1922  f9a6				   BreakWhileAccelerating		; Allow better control while breaking.
   1923  f9a6		       a9 05		      LDA	(#BREAK_SPEED / 2)
   1924  f9a8		       85 b0		      STA	Tmp0
   1925  f9aa
   1926  f9aa				   BreakNonZero
   1927  f9aa		       a5 b0		      LDA	Tmp0
   1928  f9ac		       f0 29		      BEQ	SkipBreak
   1929  f9ae
   1930  f9ae				   DecreaseSpeed
   1931  f9ae		       38		      SEC
   1932  f9af		       b5 de		      LDA	Player0SpeedL,X
   1933  f9b1		       e5 b0		      SBC	Tmp0
   1934  f9b3		       95 de		      STA	Player0SpeedL,X
   1935  f9b5		       b5 f0		      LDA	Player0SpeedH,X
   1936  f9b7		       e9 00		      SBC	#0
   1937  f9b9		       95 f0		      STA	Player0SpeedH,X
   1938  f9bb
   1939  f9bb				   CheckMinSpeed
   1940  f9bb		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
   1941  f9bd		       c9 00		      CMP	#CAR_MIN_SPEED_H
   1942  f9bf		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
   1943  f9c1		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
   1944  f9c3
   1945  f9c3				   CompareLBreakSpeed
   1946  f9c3		       b5 de		      LDA	Player0SpeedL,X
   1947  f9c5		       c9 00		      CMP	#CAR_MIN_SPEED_L
   1948  f9c7		       90 03		      BCC	ResetMinSpeed	; Less than memory
   1949  f9c9		       4c d4 f9 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
   1950  f9cc
   1951  f9cc				   ResetMinSpeed
   1952  f9cc		       a9 00		      LDA	#CAR_MIN_SPEED_H
   1953  f9ce		       95 f0		      STA	Player0SpeedH,X
   1954  f9d0		       a9 00		      LDA	#CAR_MIN_SPEED_L
   1955  f9d2		       95 de		      STA	Player0SpeedL,X
   1956  f9d4
   1957  f9d4				   SkipAccelerateIfBreaking
   1958  f9d4		       4c 1d fa 	      JMP	SkipAccelerate
   1959  f9d7				   SkipBreak
   1960  f9d7
   1961  f9d7				   Acelerates
   1962  f9d7		       b5 b8		      LDA	CountdownTimer,X
   1963  f9d9		       f0 42		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
   1964  f9db
   1965  f9db				   ContinueAccelerateTest
   1966  f9db		       b5 0c		      LDA	INPT4,X	;3
   1967  f9dd		       10 08		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
   1968  f9df		       bd 64 fc 	      LDA	PlayerToUpMask,X	;UP in controller
   1969  f9e2		       2c 80 02 	      BIT	SWCHA
   1970  f9e5		       d0 36		      BNE	SkipAccelerate
   1971  f9e7
   1972  f9e7				   IncreaseCarSpeed
   1973  f9e7		       a9 02		      LDA	#2
   1974  f9e9		       85 b0		      STA	Tmp0	; Loop control
   1975  f9eb		       b4 c7		      LDY	CurrentCarId,X
   1976  f9ed				   IncreaseCarSpeedLoop
   1977  f9ed							;Adds speed
   1978  f9ed		       18		      CLC
   1979  f9ee		       b5 dc		      LDA	AccelerateBuffer,X
   1980  f9f0		       79 8f ff 	      ADC	CarIdToAccelerateSpeed,Y
   1981  f9f3		       95 dc		      STA	AccelerateBuffer,X
   1982  f9f5		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
   1983  f9f7		       f6 de		      INC	Player0SpeedL,X
   1984  f9f9		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
   1985  f9fb		       f6 f0		      INC	Player0SpeedH,X
   1986  f9fd				   ContinueIncreaseSpeedLoop
   1987  f9fd		       c6 b0		      DEC	Tmp0
   1988  f9ff		       d0 ec		      BNE	IncreaseCarSpeedLoop
   1989  fa01				   SkipIncreaseCarSpeed
   1990  fa01
   1991  fa01				   CheckIfAlreadyMaxSpeed
   1992  fa01		       b5 f0		      LDA	Player0SpeedH,X
   1993  fa03		       c9 02		      CMP	#CAR_MAX_SPEED_H
   1994  fa05		       90 16		      BCC	SkipAccelerate	; less than my max speed
   1995  fa07		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
   1996  fa09							;High bit is max, compare the low
   1997  fa09		       b4 c7		      LDY	CurrentCarId,X
   1998  fa0b		       b5 de		      LDA	Player0SpeedL,X
   1999  fa0d		       d9 97 ff 	      CMP	CarIdToMaxSpeedL,Y
   2000  fa10		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
   2001  fa12							;BEQ SkipAccelerate ; Optimize best case, but not worse case
   2002  fa12
   2003  fa12				   ResetToMaxSpeed		; Speed is more, or is already max
   2004  fa12		       a9 02		      LDA	#CAR_MAX_SPEED_H
   2005  fa14		       95 f0		      STA	Player0SpeedH,X
   2006  fa16		       b4 c7		      LDY	CurrentCarId,X
   2007  fa18		       b9 97 ff 	      LDA	CarIdToMaxSpeedL,Y
   2008  fa1b		       95 de		      STA	Player0SpeedL,X
   2009  fa1d				   SkipAccelerate
   2010  fa1d		       60		      RTS
   2011  fa1e
   2012  fa1e							;Tmp0 Traffic Offset to compare with next checkpoint
   2013  fa1e				   ProcessPlayerStatus
   2014  fa1e				   IsGameOver
   2015  fa1e		       b5 b8		      LDA	CountdownTimer,X
   2016  fa20		       15 de		      ORA	Player0SpeedL,X
   2017  fa22		       15 f0		      ORA	Player0SpeedH,X
   2018  fa24		       d0 0c		      BNE	IsCheckpoint
   2019  fa26		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2020  fa28		       95 cb		      STA	ScoreFontColorHoldChange,X
   2021  fa2a		       bd b7 fc 	      LDA	PlayerToScoreOverColor,X
   2022  fa2d		       95 c9		      STA	ScoreFontColor,X
   2023  fa2f		       4c 66 fa 	      JMP	SkipIsTimeOver
   2024  fa32
   2025  fa32				   IsCheckpoint
   2026  fa32		       b5 cd		      LDA	NextCheckpoint,X
   2027  fa34		       c5 b0		      CMP	Tmp0	; TrafficOffset0 + 2 not sequential with OpTrafficOffset
   2028  fa36		       d0 21		      BNE	SkipIsCheckpoint
   2029  fa38		       18		      CLC
   2030  fa39		       69 10		      ADC	#CHECKPOINT_INTERVAL
   2031  fa3b		       95 cd		      STA	NextCheckpoint,X
   2032  fa3d		       bd b3 fc 	      LDA	PlayerToScoreGoodColor,X
   2033  fa40		       95 c9		      STA	ScoreFontColor,X
   2034  fa42		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   2035  fa44		       95 cb		      STA	ScoreFontColorHoldChange,X
   2036  fa46		       b5 b8		      LDA	CountdownTimer,X
   2037  fa48		       18		      CLC
   2038  fa49		       75 c0		      ADC	CheckpointTime,X
   2039  fa4b		       95 b8		      STA	CountdownTimer,X
   2040  fa4d		       90 04		      BCC	JumpSkipTimeOver
   2041  fa4f		       a9 ff		      LDA	#$FF
   2042  fa51		       95 b8		      STA	CountdownTimer,X	; Does not overflow!
   2043  fa53				   JumpSkipTimeOver
   2044  fa53		       20 d4 f6 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
   2045  fa56		       4c 66 fa 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
   2046  fa59				   SkipIsCheckpoint
   2047  fa59
   2048  fa59				   IsTimeOver
   2049  fa59		       b5 b8		      LDA	CountdownTimer,X
   2050  fa5b		       d0 09		      BNE	SkipIsTimeOver
   2051  fa5d		       a9 02		      LDA	#2	; We are not processing the status every frame anymore, need to survice at least 2 frames.
   2052  fa5f		       95 cb		      STA	ScoreFontColorHoldChange,X
   2053  fa61		       bd b9 fc 	      LDA	PlayerToScoreBadColor,X
   2054  fa64		       95 c9		      STA	ScoreFontColor,X
   2055  fa66				   SkipIsTimeOver
   2056  fa66		       60		      RTS
   2057  fa67
   2058  fa67
   2059  fa67				   EverySecond		; 64 frames to be more precise
   2060  fa67		       a9 3f		      LDA	#%00111111
   2061  fa69		       25 8c		      AND	FrameCount0
   2062  fa6b		       d0 06		      BNE	SkipEverySecondAction
   2063  fa6d		       d5 b8		      CMP	CountdownTimer,X
   2064  fa6f		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
   2065  fa71		       d6 b8		      DEC	CountdownTimer,X
   2066  fa73				   SkipEverySecondAction
   2067  fa73		       60		      RTS
   2068  fa74
   2069  fa74				   CalculateGear
   2070  fa74		       b5 de		      LDA	Player0SpeedL,X	;3
   2071  fa76		       29 80		      AND	#%10000000	;2
   2072  fa78		       15 f0		      ORA	Player0SpeedH,X	;3
   2073  fa7a		       18		      CLC		;2
   2074  fa7b		       2a		      ROL		;2
   2075  fa7c		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
   2076  fa7e		       95 d5		      STA	Gear,X
   2077  fa80		       60		      RTS
   2078  fa81
   2079  fa81				   ProcessScoreFontColor
   2080  fa81		       b4 cb		      LDY	ScoreFontColorHoldChange,X
   2081  fa83		       f0 06		      BEQ	ResetScoreFontColor
   2082  fa85		       88		      DEY
   2083  fa86		       94 cb		      STY	ScoreFontColorHoldChange,X
   2084  fa88		       4c 90 fa 	      JMP	SkipScoreFontColor
   2085  fa8b				   ResetScoreFontColor
   2086  fa8b		       bd b1 fc 	      LDA	PlayerToDefaultColor,X
   2087  fa8e		       95 c9		      STA	ScoreFontColor,X
   2088  fa90				   SkipScoreFontColor
   2089  fa90		       60		      RTS
   2090  fa91
   2091  fa91							; Moved here because of rom space.
   2092  fa91							; The only SBR in constants space
   2093  fa91				   DrawQrCode
   2094  fa91		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2095  fa93		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2096  fa95		       a9 01		      LDA	#%00000001	; Mirror playfield
   2097  fa97		       85 0a		      STA	CTRLPF
   2098  fa99		       20 92 f6 	      JSR	ClearAll	; To be 100 sure!
   2099  fa9c		       ad 82 02 	      LDA	SWCHB
   2100  fa9f		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2101  faa1		       49 08		      EOR	#%00001000	; Make black the default, can be optimized.
   2102  faa3		       f0 07		      BEQ	StoreReversedQrCode
   2103  faa5		       86 09		      STX	COLUBK
   2104  faa7		       84 08		      STY	COLUPF
   2105  faa9		       4c b0 fa 	      JMP	ContinueQrCode
   2106  faac				   StoreReversedQrCode
   2107  faac		       86 08		      STX	COLUPF
   2108  faae		       84 09		      STY	COLUBK
   2109  fab0
   2110  fab0				   ContinueQrCode
   2111  fab0		       a2 09		      LDX	#9
   2112  fab2		       20 e1 f7 	      JSR	HMoveXTimes
   2113  fab5		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2114  fab7		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2115  fab9		       20 ba f7 	      JSR	WaitForVblankEnd
   2116  fabc		       20 cd f7 	      JSR	Sleep8Lines
   2117  fabf		       20 cd f7 	      JSR	Sleep8Lines
   2118  fac2		       20 cd f7 	      JSR	Sleep8Lines
   2119  fac5
   2120  fac5				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2121  fac5		       85 02		      STA	WSYNC
   2122  fac7		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2123  faca		       85 0e		      STA	PF1	;3
   2124  facc		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2125  facf		       85 0f		      STA	PF2	;3
      0  fad1					      SLEEP	27	; 
      1  fad1				   .CYCLES    SET	27
      2  fad1
      3  fad1				  -	      IF	.CYCLES < 2
      4  fad1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fad1				  -	      ERR
      6  fad1					      ENDIF
      7  fad1
      8  fad1					      IF	.CYCLES & 1
      9  fad1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fad1				  -	      nop	0
     11  fad1					      ELSE
     12  fad1		       24 00		      bit	VSYNC
     13  fad3					      ENDIF
     14  fad3				   .CYCLES    SET	.CYCLES - 3
     15  fad3					      ENDIF
     16  fad3
     17  fad3					      REPEAT	.CYCLES / 2
     18  fad3		       ea		      nop
     17  fad3					      REPEND
     18  fad4		       ea		      nop
     17  fad4					      REPEND
     18  fad5		       ea		      nop
     17  fad5					      REPEND
     18  fad6		       ea		      nop
     17  fad6					      REPEND
     18  fad7		       ea		      nop
     17  fad7					      REPEND
     18  fad8		       ea		      nop
     17  fad8					      REPEND
     18  fad9		       ea		      nop
     17  fad9					      REPEND
     18  fada		       ea		      nop
     17  fada					      REPEND
     18  fadb		       ea		      nop
     17  fadb					      REPEND
     18  fadc		       ea		      nop
     17  fadc					      REPEND
     18  fadd		       ea		      nop
     17  fadd					      REPEND
     18  fade		       ea		      nop
     19  fadf					      REPEND
   2127  fadf		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2128  fae2		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2129  fae4		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2130  fae7		       85 0e		      STA	PF1	;3
   2131  fae9
   2132  fae9		       ca		      DEX		;2
   2133  faea		       d0 d9		      BNE	QrCodeLoop	;2
   2134  faec		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2135  faee		       88		      DEY		;2
   2136  faef		       10 d4		      BPL	QrCodeLoop	;4
   2137  faf1
   2138  faf1				   EndQrCodeLoop
   2139  faf1		       85 02		      STA	WSYNC	;
   2140  faf3		       a9 00		      LDA	#0
   2141  faf5		       85 0e		      STA	PF1	;3
   2142  faf7		       85 0f		      STA	PF2	;3
   2143  faf9
   2144  faf9		       20 d4 f7 	      JSR	Sleep32Lines
   2145  fafc		       4c 25 f5 	      JMP	PrepareOverscan
   2146  faff
   2147  faff							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2148  fc00					      org	$FC00
   2149  fc00				   QrCode1
   2150  fc00		       1f		      .byte.b	#%00011111
   2151  fc01		       10		      .byte.b	#%00010000
   2152  fc02		       17		      .byte.b	#%00010111
   2153  fc03		       17		      .byte.b	#%00010111
   2154  fc04		       17		      .byte.b	#%00010111
   2155  fc05		       10		      .byte.b	#%00010000
   2156  fc06		       1f		      .byte.b	#%00011111
   2157  fc07		       00		      .byte.b	#%00000000
   2158  fc08		       17		      .byte.b	#%00010111
   2159  fc09		       10		      .byte.b	#%00010000
   2160  fc0a		       1d		      .byte.b	#%00011101
   2161  fc0b		       16		      .byte.b	#%00010110
   2162  fc0c		       03		      .byte.b	#%00000011
   2163  fc0d		       19		      .byte.b	#%00011001
   2164  fc0e		       13		      .byte.b	#%00010011
   2165  fc0f		       1c		      .byte.b	#%00011100
   2166  fc10		       0b		      .byte.b	#%00001011
   2167  fc11		       00		      .byte.b	#%00000000
   2168  fc12		       1f		      .byte.b	#%00011111
   2169  fc13		       10		      .byte.b	#%00010000
   2170  fc14		       17		      .byte.b	#%00010111
   2171  fc15		       17		      .byte.b	#%00010111
   2172  fc16		       17		      .byte.b	#%00010111
   2173  fc17		       10		      .byte.b	#%00010000
   2174  fc18		       1f		      .byte.b	#%00011111
   2175  fc19
   2176  fc19				   QrCode2
   2177  fc19		       c3		      .byte.b	#%11000011
   2178  fc1a		       9a		      .byte.b	#%10011010
   2179  fc1b		       82		      .byte.b	#%10000010
   2180  fc1c		       da		      .byte.b	#%11011010
   2181  fc1d		       aa		      .byte.b	#%10101010
   2182  fc1e		       ca		      .byte.b	#%11001010
   2183  fc1f		       f3		      .byte.b	#%11110011
   2184  fc20		       78		      .byte.b	#%01111000
   2185  fc21		       df		      .byte.b	#%11011111
   2186  fc22		       fc		      .byte.b	#%11111100
   2187  fc23		       c7		      .byte.b	#%11000111
   2188  fc24		       98		      .byte.b	#%10011000
   2189  fc25		       23		      .byte.b	#%00100011
   2190  fc26		       b9		      .byte.b	#%10111001
   2191  fc27		       d2		      .byte.b	#%11010010
   2192  fc28		       30		      .byte.b	#%00110000
   2193  fc29		       eb		      .byte.b	#%11101011
   2194  fc2a		       28		      .byte.b	#%00101000
   2195  fc2b		       ab		      .byte.b	#%10101011
   2196  fc2c		       72		      .byte.b	#%01110010
   2197  fc2d		       fa		      .byte.b	#%11111010
   2198  fc2e		       7a		      .byte.b	#%01111010
   2199  fc2f		       32		      .byte.b	#%00110010
   2200  fc30		       3a		      .byte.b	#%00111010
   2201  fc31		       63		      .byte.b	#%01100011
   2202  fc32
   2203  fc32				   QrCode3
   2204  fc32		       98		      .byte.b	#%10011000
   2205  fc33		       c3		      .byte.b	#%11000011
   2206  fc34		       39		      .byte.b	#%00111001
   2207  fc35		       34		      .byte.b	#%00110100
   2208  fc36		       ff		      .byte.b	#%11111111
   2209  fc37		       71		      .byte.b	#%01110001
   2210  fc38		       d5		      .byte.b	#%11010101
   2211  fc39		       d1		      .byte.b	#%11010001
   2212  fc3a		       5f		      .byte.b	#%01011111
   2213  fc3b		       26		      .byte.b	#%00100110
   2214  fc3c		       2d		      .byte.b	#%00101101
   2215  fc3d		       e9		      .byte.b	#%11101001
   2216  fc3e		       d6		      .byte.b	#%11010110
   2217  fc3f		       26		      .byte.b	#%00100110
   2218  fc40		       ba		      .byte.b	#%10111010
   2219  fc41		       03		      .byte.b	#%00000011
   2220  fc42		       dd		      .byte.b	#%11011101
   2221  fc43		       e0		      .byte.b	#%11100000
   2222  fc44		       57		      .byte.b	#%01010111
   2223  fc45		       14		      .byte.b	#%00010100
   2224  fc46		       35		      .byte.b	#%00110101
   2225  fc47		       e5		      .byte.b	#%11100101
   2226  fc48		       b5		      .byte.b	#%10110101
   2227  fc49		       d4		      .byte.b	#%11010100
   2228  fc4a		       97		      .byte.b	#%10010111
   2229  fc4b
   2230  fc4b				   QrCode4
   2231  fc4b		       09		      .byte.b	#%00001001
   2232  fc4c		       0e		      .byte.b	#%00001110
   2233  fc4d		       0f		      .byte.b	#%00001111
   2234  fc4e		       0c		      .byte.b	#%00001100
   2235  fc4f		       0c		      .byte.b	#%00001100
   2236  fc50		       08		      .byte.b	#%00001000
   2237  fc51		       08		      .byte.b	#%00001000
   2238  fc52		       06		      .byte.b	#%00000110
   2239  fc53		       06		      .byte.b	#%00000110
   2240  fc54		       0b		      .byte.b	#%00001011
   2241  fc55		       0f		      .byte.b	#%00001111
   2242  fc56		       04		      .byte.b	#%00000100
   2243  fc57		       08		      .byte.b	#%00001000
   2244  fc58		       0f		      .byte.b	#%00001111
   2245  fc59		       09		      .byte.b	#%00001001
   2246  fc5a		       07		      .byte.b	#%00000111
   2247  fc5b		       05		      .byte.b	#%00000101
   2248  fc5c		       00		      .byte.b	#%00000000
   2249  fc5d		       0f		      .byte.b	#%00001111
   2250  fc5e		       08		      .byte.b	#%00001000
   2251  fc5f		       0b		      .byte.b	#%00001011
   2252  fc60		       0b		      .byte.b	#%00001011
   2253  fc61		       0b		      .byte.b	#%00001011
   2254  fc62		       08		      .byte.b	#%00001000
   2255  fc63		       0f		      .byte.b	#%00001111
   2256  fc64
   2257  fc64				   PlayerToUpMask
   2258  fc64		       10		      .byte.b	#%00010000	;
   2259  fc65		       01		      .byte.b	#%00000001	;
   2260  fc66
   2261  fc66				   PlayerToDownMask
   2262  fc66		       20		      .byte.b	#%00100000	;
   2263  fc67		       02		      .byte.b	#%00000010	;
   2264  fc68
   2265  fc68				   PlayerToLeftMask
   2266  fc68		       40		      .byte.b	#%01000000	;
   2267  fc69		       04		      .byte.b	#%00000100	;
   2268  fc6a
   2269  fc6a				   PlayerToRightMask
   2270  fc6a		       80		      .byte.b	#%10000000	;
   2271  fc6b		       08		      .byte.b	#%00001000	;
   2272  fc6c
   2273  fc6c				   FontLookup		; Very fast font lookup for dynamic values!
   2274  fc6c		       04		      .byte.b	#<C0 + #FONT_OFFSET	; 0
   2275  fc6d		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2276  fc6e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2277  fc6f		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2278  fc70		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2279  fc71		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2280  fc72		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2281  fc73		       27		      .byte.b	#<C7 + #FONT_OFFSET	; 8
   2282  fc74		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2283  fc75		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2284  fc76		       36		      .byte.b	#<CA + #FONT_OFFSET
   2285  fc77		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2286  fc78		       40		      .byte.b	#<CC + #FONT_OFFSET
   2287  fc79		       45		      .byte.b	#<CD + #FONT_OFFSET
   2288  fc7a		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2289  fc7b		       4f		      .byte.b	#<CF + #FONT_OFFSET	; 16
   2290  fc7c		       54		      .byte.b	#<CG + #FONT_OFFSET
   2291  fc7d		       59		      .byte.b	#<CH + #FONT_OFFSET
   2292  fc7e		       5e		      .byte.b	#<CI + #FONT_OFFSET
   2293  fc7f		       63		      .byte.b	#<CJ + #FONT_OFFSET
   2294  fc80		       68		      .byte.b	#<CK + #FONT_OFFSET
   2295  fc81		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2296  fc82		       72		      .byte.b	#<CM + #FONT_OFFSET
   2297  fc83		       77		      .byte.b	#<CN + #FONT_OFFSET	; 24
   2298  fc84		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2299  fc85		       81		      .byte.b	#<CP + #FONT_OFFSET
   2300  fc86		       86		      .byte.b	#<CQ + #FONT_OFFSET
   2301  fc87		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2302  fc88		       90		      .byte.b	#<CS + #FONT_OFFSET
   2303  fc89		       95		      .byte.b	#<CT + #FONT_OFFSET
   2304  fc8a		       9a		      .byte.b	#<CU + #FONT_OFFSET
   2305  fc8b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET	; 32
   2306  fc8c
   2307  fc8c
   2308  fc8c				   BarLookup		; Very fast font lookup for dynamic values (vertical bar)!
   2309  fc8c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2310  fc8d		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2311  fc8e		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2312  fc8f		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2313  fc90		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2314  fc91		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2315  fc92		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2316  fc93		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2317  fc94		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2318  fc95		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2319  fc96		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2320  fc97		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2321  fc98		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2322  fc99		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2323  fc9a		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2324  fc9b		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2325  fc9c
   2326  fc9c				   SpeedToBarLookup		; Speed will vary from 0 to 20 and mapped to a 0 to 15 space
   2327  fc9c		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2328  fc9d		       b3		      .byte.b	#<C0B + #FONT_OFFSET
   2329  fc9e		       b8		      .byte.b	#<C1B + #FONT_OFFSET
   2330  fc9f		       bd		      .byte.b	#<C2B + #FONT_OFFSET
   2331  fca0		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2332  fca1		       c2		      .byte.b	#<C3B + #FONT_OFFSET
   2333  fca2		       c7		      .byte.b	#<C4B + #FONT_OFFSET
   2334  fca3		       cc		      .byte.b	#<C5B + #FONT_OFFSET
   2335  fca4		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2336  fca5		       d1		      .byte.b	#<C6B + #FONT_OFFSET
   2337  fca6		       d6		      .byte.b	#<C7B + #FONT_OFFSET
   2338  fca7		       db		      .byte.b	#<C8B + #FONT_OFFSET
   2339  fca8		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2340  fca9		       e0		      .byte.b	#<C9B + #FONT_OFFSET
   2341  fcaa		       e5		      .byte.b	#<CAB + #FONT_OFFSET
   2342  fcab		       ea		      .byte.b	#<CBB + #FONT_OFFSET
   2343  fcac		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2344  fcad		       ef		      .byte.b	#<CCB + #FONT_OFFSET
   2345  fcae		       f4		      .byte.b	#<CDB + #FONT_OFFSET
   2346  fcaf		       f9		      .byte.b	#<CEB + #FONT_OFFSET
   2347  fcb0		       fe		      .byte.b	#<CFB + #FONT_OFFSET
   2348  fcb1
   2349  fcb1				   PlayerToDefaultColor
   2350  fcb1		       f9		      .byte.b	#PLAYER0_COLOR
   2351  fcb2		       98		      .byte.b	#PLAYER1_COLOR
   2352  fcb3
   2353  fcb3				   PlayerToScoreGoodColor
   2354  fcb3		       d8		      .byte.b	#SCORE_FONT_COLOR_GOOD
   2355  fcb4		       38		      .byte.b	#OP_SCORE_FONT_COLOR_GOOD
   2356  fcb5
   2357  fcb5				   PlayerToScoreStartColor
   2358  fcb5		       c8		      .byte.b	#SCORE_FONT_COLOR_START
   2359  fcb6		       c8		      .byte.b	#OP_SCORE_FONT_COLOR_START
   2360  fcb7
   2361  fcb7				   PlayerToScoreOverColor
   2362  fcb7		       0c		      .byte.b	#SCORE_FONT_COLOR_OVER
   2363  fcb8		       0c		      .byte.b	#OP_SCORE_FONT_COLOR_OVER
   2364  fcb9
   2365  fcb9				   PlayerToScoreBadColor
   2366  fcb9		       44		      .byte.b	#SCORE_FONT_COLOR_BAD
   2367  fcba		       44		      .byte.b	#OP_SCORE_FONT_COLOR_BAD
   2368  fcbb
   2369  fd00					      org	$FD00
   2370  fd00				   Font
   2371  fd00				   C0
   2372  fd00		       e7		      .byte.b	#%11100111	;
   2373  fd01		       a5		      .byte.b	#%10100101	; 
   2374  fd02		       a5		      .byte.b	#%10100101	; 
   2375  fd03		       a5		      .byte.b	#%10100101	; 
   2376  fd04		       e7		      .byte.b	#%11100111	;	
   2377  fd05				   C1
   2378  fd05		       e7		      .byte.b	#%11100111	;
   2379  fd06		       42		      .byte.b	#%01000010	; 
   2380  fd07		       42		      .byte.b	#%01000010	; 
   2381  fd08		       42		      .byte.b	#%01000010	; 
   2382  fd09		       66		      .byte.b	#%01100110	;
   2383  fd0a				   C2
   2384  fd0a		       e7		      .byte.b	#%11100111	;
   2385  fd0b		       24		      .byte.b	#%00100100	; 
   2386  fd0c		       e7		      .byte.b	#%11100111	; 
   2387  fd0d		       81		      .byte.b	#%10000001	; 
   2388  fd0e		       e7		      .byte.b	#%11100111	;
   2389  fd0f				   C3
   2390  fd0f		       e7		      .byte.b	#%11100111	;
   2391  fd10		       81		      .byte.b	#%10000001	; 
   2392  fd11		       e7		      .byte.b	#%11100111	; 
   2393  fd12		       81		      .byte.b	#%10000001	; 
   2394  fd13		       e7		      .byte.b	#%11100111	;
   2395  fd14				   C4
   2396  fd14		       81		      .byte.b	#%10000001	;
   2397  fd15		       81		      .byte.b	#%10000001	; 
   2398  fd16		       e7		      .byte.b	#%11100111	; 
   2399  fd17		       a5		      .byte.b	#%10100101	; 
   2400  fd18		       a5		      .byte.b	#%10100101	;
   2401  fd19				   C5
   2402  fd19		       e7		      .byte.b	#%11100111	;
   2403  fd1a		       81		      .byte.b	#%10000001	; 
   2404  fd1b		       e7		      .byte.b	#%11100111	; 
   2405  fd1c		       24		      .byte.b	#%00100100	; 
   2406  fd1d		       e7		      .byte.b	#%11100111	;
   2407  fd1e				   C6
   2408  fd1e		       e7		      .byte.b	#%11100111	;
   2409  fd1f		       a5		      .byte.b	#%10100101	; 
   2410  fd20		       e7		      .byte.b	#%11100111	; 
   2411  fd21		       24		      .byte.b	#%00100100	; 
   2412  fd22		       e7		      .byte.b	#%11100111	;
   2413  fd23				   C7
   2414  fd23		       81		      .byte.b	#%10000001	;
   2415  fd24		       81		      .byte.b	#%10000001	; 
   2416  fd25		       81		      .byte.b	#%10000001	; 
   2417  fd26		       81		      .byte.b	#%10000001	; 
   2418  fd27		       e7		      .byte.b	#%11100111	;
   2419  fd28				   C8
   2420  fd28		       e7		      .byte.b	#%11100111	;
   2421  fd29		       a5		      .byte.b	#%10100101	; 
   2422  fd2a		       e7		      .byte.b	#%11100111	; 
   2423  fd2b		       a5		      .byte.b	#%10100101	; 
   2424  fd2c		       e7		      .byte.b	#%11100111	;
   2425  fd2d				   C9
   2426  fd2d		       e7		      .byte.b	#%11100111	;
   2427  fd2e		       81		      .byte.b	#%10000001	; 
   2428  fd2f		       e7		      .byte.b	#%11100111	; 
   2429  fd30		       a5		      .byte.b	#%10100101	; 
   2430  fd31		       e7		      .byte.b	#%11100111	;
   2431  fd32				   CA
   2432  fd32		       a5		      .byte.b	#%10100101	;
   2433  fd33		       a5		      .byte.b	#%10100101	; 
   2434  fd34		       e7		      .byte.b	#%11100111	; 
   2435  fd35		       a5		      .byte.b	#%10100101	; 
   2436  fd36		       e7		      .byte.b	#%11100111	;
   2437  fd37				   CB
   2438  fd37		       66		      .byte.b	#%01100110	;
   2439  fd38		       a5		      .byte.b	#%10100101	; 
   2440  fd39		       66		      .byte.b	#%01100110	; 
   2441  fd3a		       a5		      .byte.b	#%10100101	;
   2442  fd3b		       66		      .byte.b	#%01100110	;
   2443  fd3c				   CC
   2444  fd3c		       e7		      .byte.b	#%11100111	;
   2445  fd3d		       24		      .byte.b	#%00100100	; 
   2446  fd3e		       24		      .byte.b	#%00100100	; 
   2447  fd3f		       24		      .byte.b	#%00100100	;
   2448  fd40		       e7		      .byte.b	#%11100111	;
   2449  fd41
   2450  fd41				   CD
   2451  fd41		       66		      .byte.b	#%01100110	;
   2452  fd42		       a5		      .byte.b	#%10100101	; 
   2453  fd43		       a5		      .byte.b	#%10100101	; 
   2454  fd44		       a5		      .byte.b	#%10100101	;
   2455  fd45		       66		      .byte.b	#%01100110	;
   2456  fd46
   2457  fd46				   CE
   2458  fd46		       e7		      .byte.b	#%11100111	;
   2459  fd47		       24		      .byte.b	#%00100100	; 
   2460  fd48		       e7		      .byte.b	#%11100111	; 
   2461  fd49		       24		      .byte.b	#%00100100	; 
   2462  fd4a		       e7		      .byte.b	#%11100111	;
   2463  fd4b
   2464  fd4b				   CF
   2465  fd4b		       24		      .byte.b	#%00100100	;
   2466  fd4c		       24		      .byte.b	#%00100100	; 
   2467  fd4d		       e7		      .byte.b	#%11100111	; 
   2468  fd4e		       24		      .byte.b	#%00100100	; 
   2469  fd4f		       e7		      .byte.b	#%11100111	;
   2470  fd50
   2471  fd50				   CG
   2472  fd50		       c3		      .byte.b	#%11000011	;
   2473  fd51		       a5		      .byte.b	#%10100101	; 
   2474  fd52		       a5		      .byte.b	#%10100101	; 
   2475  fd53		       24		      .byte.b	#%00100100	; 
   2476  fd54		       c3		      .byte.b	#%11000011	;	
   2477  fd55
   2478  fd55				   CH
   2479  fd55		       a5		      .byte.b	#%10100101	;
   2480  fd56		       a5		      .byte.b	#%10100101	; 
   2481  fd57		       e7		      .byte.b	#%11100111	; 
   2482  fd58		       a5		      .byte.b	#%10100101	; 
   2483  fd59		       a5		      .byte.b	#%10100101	;
   2484  fd5a
   2485  fd5a				   CI
   2486  fd5a		       e7		      .byte.b	#%11100111	;
   2487  fd5b		       42		      .byte.b	#%01000010	; 
   2488  fd5c		       42		      .byte.b	#%01000010	; 
   2489  fd5d		       42		      .byte.b	#%01000010	; 
   2490  fd5e		       e7		      .byte.b	#%11100111	;
   2491  fd5f
   2492  fd5f				   CJ
   2493  fd5f		       e7		      .byte.b	#%11100111	;
   2494  fd60		       a5		      .byte.b	#%10100101	; 
   2495  fd61		       81		      .byte.b	#%10000001	; 
   2496  fd62		       81		      .byte.b	#%10000001	; 
   2497  fd63		       81		      .byte.b	#%10000001	;	
   2498  fd64
   2499  fd64				   CK
   2500  fd64		       a5		      .byte.b	#%10100101	;
   2501  fd65		       a5		      .byte.b	#%10100101	; 
   2502  fd66		       66		      .byte.b	#%01100110	; 
   2503  fd67		       a5		      .byte.b	#%10100101	; 
   2504  fd68		       a5		      .byte.b	#%10100101	;
   2505  fd69
   2506  fd69				   CL
   2507  fd69		       e7		      .byte.b	#%11100111	;
   2508  fd6a		       24		      .byte.b	#%00100100	; 
   2509  fd6b		       24		      .byte.b	#%00100100	; 
   2510  fd6c		       24		      .byte.b	#%00100100	; 
   2511  fd6d		       24		      .byte.b	#%00100100	;
   2512  fd6e
   2513  fd6e				   CM
   2514  fd6e		       a5		      .byte.b	#%10100101	;
   2515  fd6f		       a5		      .byte.b	#%10100101	; 
   2516  fd70		       a5		      .byte.b	#%10100101	; 
   2517  fd71		       e7		      .byte.b	#%11100111	; 
   2518  fd72		       a5		      .byte.b	#%10100101	;
   2519  fd73
   2520  fd73				   CN
   2521  fd73		       a5		      .byte.b	#%10100101	;
   2522  fd74		       a5		      .byte.b	#%10100101	; 
   2523  fd75		       a5		      .byte.b	#%10100101	; 
   2524  fd76		       a5		      .byte.b	#%10100101	; 
   2525  fd77		       66		      .byte.b	#%01100110	;	
   2526  fd78
   2527  fd78
   2528  fd78				   CO
   2529  fd78		       42		      .byte.b	#%01000010	;
   2530  fd79		       a5		      .byte.b	#%10100101	; 
   2531  fd7a		       a5		      .byte.b	#%10100101	; 
   2532  fd7b		       a5		      .byte.b	#%10100101	; 
   2533  fd7c		       42		      .byte.b	#%01000010	;	
   2534  fd7d
   2535  fd7d				   CP
   2536  fd7d		       24		      .byte.b	#%00100100	;
   2537  fd7e		       24		      .byte.b	#%00100100	; 
   2538  fd7f		       e7		      .byte.b	#%11100111	; 
   2539  fd80		       a5		      .byte.b	#%10100101	; 
   2540  fd81		       e7		      .byte.b	#%11100111	;
   2541  fd82
   2542  fd82				   CQ
   2543  fd82		       81		      .byte.b	#%10000001	;
   2544  fd83		       e5		      .byte.b	#%11100101	; 
   2545  fd84		       a5		      .byte.b	#%10100101	; 
   2546  fd85		       a5		      .byte.b	#%10100101	; 
   2547  fd86		       e7		      .byte.b	#%11100111	;	
   2548  fd87
   2549  fd87				   CR
   2550  fd87		       a5		      .byte.b	#%10100101	;
   2551  fd88		       a5		      .byte.b	#%10100101	; 
   2552  fd89		       66		      .byte.b	#%01100110	; 
   2553  fd8a		       a5		      .byte.b	#%10100101	; 
   2554  fd8b		       66		      .byte.b	#%01100110	;
   2555  fd8c
   2556  fd8c				   CS
   2557  fd8c		       66		      .byte.b	#%01100110	;
   2558  fd8d		       81		      .byte.b	#%10000001	; 
   2559  fd8e		       42		      .byte.b	#%01000010	; 
   2560  fd8f		       24		      .byte.b	#%00100100	; 
   2561  fd90		       c3		      .byte.b	#%11000011	;
   2562  fd91
   2563  fd91				   CT
   2564  fd91		       42		      .byte.b	#%01000010	;
   2565  fd92		       42		      .byte.b	#%01000010	; 
   2566  fd93		       42		      .byte.b	#%01000010	; 
   2567  fd94		       42		      .byte.b	#%01000010	; 
   2568  fd95		       e7		      .byte.b	#%11100111	;
   2569  fd96
   2570  fd96				   CU
   2571  fd96		       e7		      .byte.b	#%11100111	;
   2572  fd97		       a5		      .byte.b	#%10100101	; 
   2573  fd98		       a5		      .byte.b	#%10100101	; 
   2574  fd99		       a5		      .byte.b	#%10100101	; 
   2575  fd9a		       a5		      .byte.b	#%10100101	;	
   2576  fd9b
   2577  fd9b				   CW
   2578  fd9b		       a5		      .byte.b	#%10100101	;
   2579  fd9c		       e7		      .byte.b	#%11100111	; 
   2580  fd9d		       a5		      .byte.b	#%10100101	; 
   2581  fd9e		       a5		      .byte.b	#%10100101	; 
   2582  fd9f		       a5		      .byte.b	#%10100101	;
   2583  fda0
   2584  fda0				   CY
   2585  fda0		       42		      .byte.b	#%01000010	;
   2586  fda1		       42		      .byte.b	#%01000010	; 
   2587  fda2		       42		      .byte.b	#%01000010	; 
   2588  fda3		       a5		      .byte.b	#%10100101	; 
   2589  fda4		       a5		      .byte.b	#%10100101	;
   2590  fda5
   2591  fda5				   Exclamation
   2592  fda5		       42		      .byte.b	#%01000010	;
   2593  fda6		       00		      .byte.b	#%00000000	; 
   2594  fda7		       42		      .byte.b	#%01000010	; 
   2595  fda8		       42		      .byte.b	#%01000010	; 
   2596  fda9		       42		      .byte.b	#%01000010	;
   2597  fdaa
   2598  fdaa				   Pipe
   2599  fdaa				   Colon
   2600  fdaa		       42		      .byte.b	#%01000010	;
   2601  fdab		       42		      .byte.b	#%01000010	; 
   2602  fdac		       00		      .byte.b	#%00000000	; 
   2603  fdad		       42		      .byte.b	#%01000010	; 
   2604  fdae		       42		      .byte.b	#%01000010	;
   2605  fdaf
   2606  fdaf				   Space
   2607  fdaf				   C0B
   2608  fdaf		       00		      .byte.b	#%00000000	;
   2609  fdb0		       00		      .byte.b	#%00000000	; 
   2610  fdb1		       00		      .byte.b	#%00000000	; 
   2611  fdb2		       00		      .byte.b	#%00000000	; 
   2612  fdb3		       00		      .byte.b	#%00000000	;	
   2613  fdb4				   C1B
   2614  fdb4		       24		      .byte.b	#%00100100	;
   2615  fdb5		       00		      .byte.b	#%00000000	; 
   2616  fdb6		       00		      .byte.b	#%00000000	; 
   2617  fdb7		       00		      .byte.b	#%00000000	; 
   2618  fdb8		       00		      .byte.b	#%00000000	;
   2619  fdb9				   C2B
   2620  fdb9		       66		      .byte.b	#%01100110	;
   2621  fdba		       00		      .byte.b	#%00000000	; 
   2622  fdbb		       00		      .byte.b	#%00000000	; 
   2623  fdbc		       00		      .byte.b	#%00000000	; 
   2624  fdbd		       00		      .byte.b	#%00000000	;
   2625  fdbe				   C3B
   2626  fdbe		       e7		      .byte.b	#%11100111	;
   2627  fdbf		       00		      .byte.b	#%00000000	; 
   2628  fdc0		       00		      .byte.b	#%00000000	; 
   2629  fdc1		       00		      .byte.b	#%00000000	; 
   2630  fdc2		       00		      .byte.b	#%00000000	;
   2631  fdc3				   C4B
   2632  fdc3		       e7		      .byte.b	#%11100111	;
   2633  fdc4		       24		      .byte.b	#%00100100	; 
   2634  fdc5		       00		      .byte.b	#%00000000	; 
   2635  fdc6		       00		      .byte.b	#%00000000	; 
   2636  fdc7		       00		      .byte.b	#%00000000	;
   2637  fdc8				   C5B
   2638  fdc8		       e7		      .byte.b	#%11100111	;
   2639  fdc9		       66		      .byte.b	#%01100110	; 
   2640  fdca		       00		      .byte.b	#%00000000	; 
   2641  fdcb		       00		      .byte.b	#%00000000	; 
   2642  fdcc		       00		      .byte.b	#%00000000	;
   2643  fdcd				   C6B
   2644  fdcd		       e7		      .byte.b	#%11100111	;
   2645  fdce		       e7		      .byte.b	#%11100111	; 
   2646  fdcf		       00		      .byte.b	#%00000000	; 
   2647  fdd0		       00		      .byte.b	#%00000000	; 
   2648  fdd1		       00		      .byte.b	#%00000000	;
   2649  fdd2				   C7B
   2650  fdd2		       e7		      .byte.b	#%11100111	;
   2651  fdd3		       e7		      .byte.b	#%11100111	; 
   2652  fdd4		       24		      .byte.b	#%00100100	; 
   2653  fdd5		       00		      .byte.b	#%00000000	; 
   2654  fdd6		       00		      .byte.b	#%00000000	;
   2655  fdd7				   C8B
   2656  fdd7		       e7		      .byte.b	#%11100111	;
   2657  fdd8		       e7		      .byte.b	#%11100111	; 
   2658  fdd9		       66		      .byte.b	#%01100110	; 
   2659  fdda		       00		      .byte.b	#%00000000	; 
   2660  fddb		       00		      .byte.b	#%00000000	;
   2661  fddc				   C9B
   2662  fddc		       e7		      .byte.b	#%11100111	;
   2663  fddd		       e7		      .byte.b	#%11100111	; 
   2664  fdde		       e7		      .byte.b	#%11100111	; 
   2665  fddf		       00		      .byte.b	#%00000000	; 
   2666  fde0		       00		      .byte.b	#%00000000	;
   2667  fde1				   CAB
   2668  fde1		       e7		      .byte.b	#%11100111	;
   2669  fde2		       e7		      .byte.b	#%11100111	; 
   2670  fde3		       e7		      .byte.b	#%11100111	; 
   2671  fde4		       24		      .byte.b	#%00100100	; 
   2672  fde5		       00		      .byte.b	#%00000000	;
   2673  fde6				   CBB
   2674  fde6		       e7		      .byte.b	#%11100111	;
   2675  fde7		       e7		      .byte.b	#%11100111	; 
   2676  fde8		       e7		      .byte.b	#%11100111	; 
   2677  fde9		       66		      .byte.b	#%01100110	; 
   2678  fdea		       00		      .byte.b	#%00000000	;
   2679  fdeb				   CCB
   2680  fdeb		       e7		      .byte.b	#%11100111	;
   2681  fdec		       e7		      .byte.b	#%11100111	; 
   2682  fded		       e7		      .byte.b	#%11100111	; 
   2683  fdee		       e7		      .byte.b	#%11100111	; 
   2684  fdef		       00		      .byte.b	#%00000000	;
   2685  fdf0
   2686  fdf0				   CDB
   2687  fdf0		       e7		      .byte.b	#%11100111	;
   2688  fdf1		       e7		      .byte.b	#%11100111	; 
   2689  fdf2		       e7		      .byte.b	#%11100111	; 
   2690  fdf3		       e7		      .byte.b	#%11100111	; 
   2691  fdf4		       24		      .byte.b	#%00100100	;
   2692  fdf5
   2693  fdf5				   CEB
   2694  fdf5		       e7		      .byte.b	#%11100111	;
   2695  fdf6		       e7		      .byte.b	#%11100111	; 
   2696  fdf7		       e7		      .byte.b	#%11100111	; 
   2697  fdf8		       e7		      .byte.b	#%11100111	; 
   2698  fdf9		       66		      .byte.b	#%01100110	;
   2699  fdfa
   2700  fdfa				   CFB
   2701  fdfa		       e7		      .byte.b	#%11100111	;
   2702  fdfb		       e7		      .byte.b	#%11100111	; 
   2703  fdfc		       e7		      .byte.b	#%11100111	; 
   2704  fdfd		       e7		      .byte.b	#%11100111	; 
   2705  fdfe		       e7		      .byte.b	#%11100111	;
   2706  fdff
   2707  fe00					      org	$FE00
   2708  fe00				   AesTable
   2709  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2710  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2711  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2712  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2713  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2714  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2715  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2716  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2717  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2718  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2719  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2720  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2721  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2722  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2723  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2724  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2725  ff00
   2726  ff00					      org	$FF00
   2727  ff00				   StaticText		; All static text must be on the same MSB block. 
   2728  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2729  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2730  ff01		       68		      .byte.b	#<CK + #FONT_OFFSET
   2731  ff02		       81		      .byte.b	#<CP + #FONT_OFFSET
   2732  ff03		       95		      .byte.b	#<CT + #FONT_OFFSET
   2733  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2734  ff05
   2735  ff05				   HellwayLeftText
   2736  ff05		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2737  ff06		       59		      .byte.b	#<CH + #FONT_OFFSET
   2738  ff07		       6d		      .byte.b	#<CL + #FONT_OFFSET
   2739  ff08		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2740  ff09
   2741  ff09				   HellwayRightText
   2742  ff09		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2743  ff0a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2744  ff0b		       81		      .byte.b	#<CP + #FONT_OFFSET
   2745  ff0c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2746  ff0d		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2747  ff0e
   2748  ff0e				   OpbText
   2749  ff0e		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2750  ff0f		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2751  ff10		       81		      .byte.b	#<CP + #FONT_OFFSET
   2752  ff11		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2753  ff12
   2754  ff12				   YearText
   2755  ff12		       b3		      .byte.b	#<Space + #FONT_OFFSET
   2756  ff13		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2757  ff14		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2758  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2759  ff16		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2760  ff17
   2761  ff17				   GoText
   2762  ff17		       54		      .byte.b	#<CG + #FONT_OFFSET
   2763  ff18		       7c		      .byte.b	#<CO + #FONT_OFFSET
   2764  ff19		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2765  ff1a		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2766  ff1b		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2767  ff1c
   2768  ff1c				   ReadyText
   2769  ff1c		       8b		      .byte.b	#<CR + #FONT_OFFSET
   2770  ff1d		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2771  ff1e		       36		      .byte.b	#<CA + #FONT_OFFSET
   2772  ff1f		       45		      .byte.b	#<CD + #FONT_OFFSET
   2773  ff20		       a4		      .byte.b	#<CY + #FONT_OFFSET
   2774  ff21
   2775  ff21				   WinText
   2776  ff21		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2777  ff22		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2778  ff23		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2779  ff24
   2780  ff24				   LoseText
   2781  ff24		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2782  ff25		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2783  ff26		       ae		      .byte.b	#<Pipe + #FONT_OFFSET
   2784  ff27
   2785  ff27				   EndStaticText
   2786  ff27
   2787  ff27				   EngineSoundType
   2788  ff27		       02		      .byte.b	#2
   2789  ff28		       02		      .byte.b	#2
   2790  ff29		       0e		      .byte.b	#14
   2791  ff2a		       06		      .byte.b	#6
   2792  ff2b		       06		      .byte.b	#6
   2793  ff2c		       0e		      .byte.b	#14
   2794  ff2d
   2795  ff2d				   EngineBaseFrequence
   2796  ff2d		       1f		      .byte.b	#31
   2797  ff2e		       15		      .byte.b	#21
   2798  ff2f		       14		      .byte.b	#20
   2799  ff30		       1f		      .byte.b	#31
   2800  ff31		       16		      .byte.b	#22
   2801  ff32		       03		      .byte.b	#3
   2802  ff33
   2803  ff33				   CarSprite0		; Upside down, Original Car
   2804  ff33		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2805  ff3b				   CarSprite0NoPadding
   2806  ff3b		       7e		      .byte.b	#%01111110
   2807  ff3c		       24		      .byte.b	#%00100100
   2808  ff3d		       bd		      .byte.b	#%10111101
   2809  ff3e		       3c		      .byte.b	#%00111100
   2810  ff3f		       bd		      .byte.b	#%10111101
   2811  ff40		       3c		      .byte.b	#%00111100
   2812  ff41
   2813  ff41				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2814  ff41		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2815  ff49				   CarSprite1NoPadding
   2816  ff49		       bd		      .byte.b	#%10111101
   2817  ff4a		       7e		      .byte.b	#%01111110
   2818  ff4b		       5a		      .byte.b	#%01011010
   2819  ff4c		       66		      .byte.b	#%01100110
   2820  ff4d		       bd		      .byte.b	#%10111101
   2821  ff4e		       3c		      .byte.b	#%00111100
   2822  ff4f
   2823  ff4f				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2824  ff4f		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2825  ff57				   CarSprite2NoPadding
   2826  ff57		       7e		      .byte.b	#%01111110
   2827  ff58		       a5		      .byte.b	#%10100101
   2828  ff59		       42		      .byte.b	#%01000010
   2829  ff5a		       42		      .byte.b	#%01000010
   2830  ff5b		       bd		      .byte.b	#%10111101
   2831  ff5c		       7e		      .byte.b	#%01111110
   2832  ff5d
   2833  ff5d				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2834  ff5d		       00 00 00 00*	      ds	(CAR_START_LINE - 7)
   2835  ff65				   CarSprite3NoPadding
   2836  ff65		       3c		      .byte.b	#%00111100
   2837  ff66		       db		      .byte.b	#%11011011
   2838  ff67		       db		      .byte.b	#%11011011
   2839  ff68		       3c		      .byte.b	#%00111100
   2840  ff69		       5a		      .byte.b	#%01011010
   2841  ff6a		       3c		      .byte.b	#%00111100
   2842  ff6b
   2843  ff6b				   TrafficSpeeds
   2844  ff6b		       00		      .byte.b	#$00	;  Trafic0 L
   2845  ff6c		       00		      .byte.b	#$00	;  Trafic0 H
   2846  ff6d		       0a		      .byte.b	#$0A	;  Trafic1 L
   2847  ff6e		       01		      .byte.b	#$01	;  Trafic1 H
   2848  ff6f		       e6		      .byte.b	#$E6	;  Trafic2 L
   2849  ff70		       00		      .byte.b	#$00	;  Trafic2 H
   2850  ff71		       c2		      .byte.b	#$C2	;  Trafic3 L
   2851  ff72		       00		      .byte.b	#$00	;  Trafic3 H
   2852  ff73		       9e		      .byte.b	#$9E	;  Trafic4 L
   2853  ff74		       00		      .byte.b	#$00	;  Trafic4 H
   2854  ff75				   TrafficSpeedsHighDelta
   2855  ff75		       00		      .byte.b	#$00	;  Trafic0 L
   2856  ff76		       00		      .byte.b	#$00	;  Trafic0 H
   2857  ff77		       0a		      .byte.b	#$0A	;  Trafic1 L
   2858  ff78		       01		      .byte.b	#$01	;  Trafic1 H
   2859  ff79		       c8		      .byte.b	#$C8	;  Trafic2 L
   2860  ff7a		       00		      .byte.b	#$00	;  Trafic2 H
   2861  ff7b		       86		      .byte.b	#$86	;  Trafic3 L
   2862  ff7c		       00		      .byte.b	#$00	;  Trafic3 H
   2863  ff7d		       44		      .byte.b	#$44	;  Trafic4 L
   2864  ff7e		       00		      .byte.b	#$00	;  Trafic4 H
   2865  ff7f
   2866  ff7f				   CarIdToSpriteAddressL
   2867  ff7f		       33		      .byte.b	#<CarSprite0
   2868  ff80		       41		      .byte.b	#<CarSprite1
   2869  ff81		       4f		      .byte.b	#<CarSprite2
   2870  ff82		       5d		      .byte.b	#<CarSprite3
   2871  ff83
   2872  ff83				   CarIdToSpriteAddressH
   2873  ff83		       ff		      .byte.b	#>CarSprite0
   2874  ff84		       ff		      .byte.b	#>CarSprite1
   2875  ff85		       ff		      .byte.b	#>CarSprite2
   2876  ff86		       ff		      .byte.b	#>CarSprite3
   2877  ff87
   2878  ff87				   EnemyCarIdToSpriteAddressL
   2879  ff87		       3b		      .byte.b	#<CarSprite0NoPadding
   2880  ff88		       49		      .byte.b	#<CarSprite1NoPadding
   2881  ff89		       57		      .byte.b	#<CarSprite2NoPadding
   2882  ff8a		       65		      .byte.b	#<CarSprite3NoPadding
   2883  ff8b
   2884  ff8b				   EnemyCarIdToSpriteAddressH
   2885  ff8b		       ff		      .byte.b	#>CarSprite0NoPadding
   2886  ff8c		       ff		      .byte.b	#>CarSprite1NoPadding
   2887  ff8d		       ff		      .byte.b	#>CarSprite2NoPadding
   2888  ff8e		       ff		      .byte.b	#>CarSprite3NoPadding
   2889  ff8f
   2890  ff8f				   CarIdToAccelerateSpeed
   2891  ff8f		       80		      .byte.b	#128
   2892  ff90		       c0		      .byte.b	#192
   2893  ff91		       60		      .byte.b	#96
   2894  ff92		       c0		      .byte.b	#192
   2895  ff93
   2896  ff93				   CarIdToTimeoverBreakInterval 		; Glide
   2897  ff93		       03		      .byte.b	#%00000011	;Every 4 frames
   2898  ff94		       03		      .byte.b	#%00000011	;Every 4 frames
   2899  ff95		       0f		      .byte.b	#%00001111	;Every 16 frames
   2900  ff96		       03		      .byte.b	#%00000011	;Every 4 frames
   2901  ff97
   2902  ff97				   CarIdToMaxSpeedL
   2903  ff97		       80		      .byte.b	#$80
   2904  ff98		       00		      .byte.b	#$00	; One less gear
   2905  ff99		       80		      .byte.b	#$80
   2906  ff9a		       80		      .byte.b	#$80
   2907  ff9b
   2908  ff9b				   CarIdToMaxGear
   2909  ff9b		       05		      .byte.b	#5
   2910  ff9c		       04		      .byte.b	#4	; One less gear
   2911  ff9d		       05		      .byte.b	#5
   2912  ff9e		       05		      .byte.b	#5
   2913  ff9f
   2914  ff9f				   GearToBreakSpeedTable
   2915  ff9f		       09		      .byte.b	#(BREAK_SPEED - 1)
   2916  ffa0		       09		      .byte.b	#(BREAK_SPEED - 1)
   2917  ffa1		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2918  ffa2		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2919  ffa3		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2920  ffa4		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2921  ffa5
   2922  ffa5				   TrafficColorTable
   2923  ffa5		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2924  ffa6		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2925  ffa7		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2926  ffa8		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2927  ffa9
   2928  ffa9				   TrafficChanceTable
   2929  ffa9		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2930  ffaa		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2931  ffab		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2932  ffac		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2933  ffad
   2934  ffad				   TrafficTimeTable
   2935  ffad		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2936  ffae		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2937  ffaf		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2938  ffb0		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2939  ffb1		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2940  ffb2
   2941  ffb2
   2942  fffc					      org	$FFFC
   2943  fffc		       00 f0		      .word.w	BeforeStart
   2944  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
