------- FILE hellway2pe.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway2pe.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway2pe.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 8c	   FrameCount0 =	$8C	;
    111  f000		       00 8d	   FrameCount1 =	$8D	;
    112  f000
    113  f000		       00 8e	   Player0SpeedL =	$8E
    114  f000		       00 8f	   Player0SpeedH =	$8F
    115  f000
    116  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    117  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    118  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    119  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    120  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    121  f000
    122  f000		       00 a4	   CheckpointBcd0 =	$A4
    123  f000		       00 a5	   CheckpointBcd1 =	$A5
    124  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    125  f000		       00 a7	   CarSpritePointerL =	$A7
    126  f000		       00 a8	   CarSpritePointerH =	$A8
    127  f000		       00 a9	   CurrentCarId =	$A9
    128  f000		       00 aa	   AccelerateBuffer =	$AA	; Change speed on buffer overflow.
    129  f000		       00 ab	   TextSide   =	$AB
    130  f000		       00 ac	   TextFlickerMode =	$AC
    131  f000		       00 ad	   Gear       =	$AD
    132  f000
    133  f000							;Temporary variables, multiple uses
    134  f000		       00 b0	   Tmp0       =	$B0
    135  f000		       00 b1	   Tmp1       =	$B1
    136  f000		       00 b2	   Tmp2       =	$B2
    137  f000		       00 b3	   Tmp3       =	$B3
    138  f000
    139  f000		       00 b4	   ScoreBcd0  =	$B4
    140  f000		       00 b5	   ScoreBcd1  =	$B5
    141  f000		       00 b6	   ScoreBcd2  =	$B6
    142  f000		       00 b7	   ScoreBcd3  =	$B7
    143  f000
    144  f000		       00 b8	   CollisionCounter =	$B8
    145  f000		       00 b9	   Player0X   =	$B9
    146  f000		       00 ba	   CountdownTimer =	$BA
    147  f000		       00 bb	   Traffic0Msb =	$BB
    148  f000		       00 bc	   SwitchDebounceCounter =	$BC
    149  f000
    150  f000		       00 bd	   TimeBcd0   =	$BD
    151  f000		       00 be	   TimeBcd1   =	$BE
    152  f000		       00 bf	   TimeBcd2   =	$BF
    153  f000
    154  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    155  f000		       00 c1	   TrafficChance =	$C1
    156  f000		       00 c2	   CheckpointTime =	$C2
    157  f000		       00 c3	   TrafficColor =	$C3
    158  f000		       00 c4	   CurrentDifficulty =	$C4
    159  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    160  f000							;Bit 2 speed delta, Bit 3 random traffic 
    161  f000
    162  f000
    163  f000		       00 ca	   BorderType =	$CA
    164  f000
    165  f000		       00 cb	   HitCountBcd0 =	$CB
    166  f000		       00 cc	   HitCountBcd1 =	$CC
    167  f000
    168  f000		       00 cd	   GlideTimeBcd0 =	$CD
    169  f000		       00 ce	   GlideTimeBcd1 =	$CE
    170  f000
    171  f000		       00 cf	   OneSecondConter =	$CF
    172  f000
    173  f000		       00 d0	   ScoreD0    =	$D0
    174  f000		       00 d1	   ScoreD1    =	$D1
    175  f000		       00 d2	   ScoreD2    =	$D2
    176  f000		       00 d3	   ScoreD3    =	$D3
    177  f000		       00 d4	   ScoreD4    =	$D4
    178  f000		       00 d5	   ScoreFontColor =	$D5
    179  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    180  f000		       00 d7	   NextCheckpoint =	$D7
    181  f000
    182  f000
    183  f000							;generic start up stuff, put zero in almost all...
    184  f000				   BeforeStart		;All variables that are kept on game reset or select
    185  f000		       a0 00		      LDY	#0
    186  f002		       84 bc		      STY	SwitchDebounceCounter
    187  f004		       84 c4		      STY	CurrentDifficulty
    188  f006		       84 c0		      STY	GameStatus
    189  f008		       a0 10		      LDY	#16
    190  f00a		       84 c5		      STY	GameMode
    191  f00c		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    192  f00e		       84 a9		      STY	CurrentCarId
    193  f010
    194  f010				   Start
    195  f010		       a9 02		      LDA	#2
    196  f012		       85 00		      STA	VSYNC
    197  f014		       85 02		      STA	WSYNC
    198  f016		       85 02		      STA	WSYNC
    199  f018		       85 02		      STA	WSYNC
    200  f01a		       a9 00		      LDA	#0	;2
    201  f01c		       85 00		      STA	VSYNC	;3
    202  f01e
    203  f01e		       78		      SEI
    204  f01f		       d8		      CLD
    205  f020		       a2 ff		      LDX	#$FF
    206  f022		       9a		      TXS
    207  f023
    208  f023		       a2 44		      LDX	#68	; Skips (VSYNC, RSYNC, WSYNC, VBLANK), TIA is mirrored on 64 - 127
    209  f025				   CleanMem
    210  f025		       e0 bc		      CPX	#SwitchDebounceCounter
    211  f027		       f0 12		      BEQ	SkipClean
    212  f029		       e0 c5		      CPX	#GameMode
    213  f02b		       f0 0e		      BEQ	SkipClean
    214  f02d		       e0 a9		      CPX	#CurrentCarId
    215  f02f		       f0 0a		      BEQ	SkipClean
    216  f031		       e0 c4		      CPX	#CurrentDifficulty
    217  f033		       f0 06		      BEQ	SkipClean
    218  f035		       e0 c0		      CPX	#GameStatus
    219  f037		       f0 02		      BEQ	SkipClean
    220  f039		       95 00		      STA	0,X
    221  f03b				   SkipClean
    222  f03b		       e8		      INX
    223  f03c		       d0 e7		      BNE	CleanMem
    224  f03e
    225  f03e		       a9 d5		      LDA	#213
    226  f040		       8d 96 02 	      STA	TIM64T	;3	
    227  f043
    228  f043							;Setting some variables...
    229  f043
    230  f043				   SettingTrafficOffsets		; Time sensitive with player H position
    231  f043		       85 02		      STA	WSYNC	;We will set player position
    232  f045		       20 7c f7 	      JSR	DefaultOffsets
    233  f048
    234  f048		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    235  f04b		       85 8e		      STA	Player0SpeedL
    236  f04d
      0  f04d					      SLEEP	11	;18
      1  f04d				   .CYCLES    SET	11
      2  f04d
      3  f04d				  -	      IF	.CYCLES < 2
      4  f04d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f04d				  -	      ERR
      6  f04d					      ENDIF
      7  f04d
      8  f04d					      IF	.CYCLES & 1
      9  f04d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f04d				  -	      nop	0
     11  f04d					      ELSE
     12  f04d		       24 00		      bit	VSYNC
     13  f04f					      ENDIF
     14  f04f				   .CYCLES    SET	.CYCLES - 3
     15  f04f					      ENDIF
     16  f04f
     17  f04f					      REPEAT	.CYCLES / 2
     18  f04f		       ea		      nop
     17  f04f					      REPEND
     18  f050		       ea		      nop
     17  f050					      REPEND
     18  f051		       ea		      nop
     17  f051					      REPEND
     18  f052		       ea		      nop
     19  f053					      REPEND
    238  f053		       85 10		      STA	RESP0
    239  f055
    240  f055		       a2 00		      LDX	#0
    241  f057		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    242  f05a		       85 a6		      STA	StartSWCHB	; For game over
    243  f05c		       29 c0		      AND	#%11000000
    244  f05e		       f0 0b		      BEQ	CallConfigureDifficulty
    245  f060		       e8		      INX
    246  f061		       c9 80		      CMP	#%10000000
    247  f063		       f0 06		      BEQ	CallConfigureDifficulty
    248  f065		       e8		      INX
    249  f066		       c9 40		      CMP	#%01000000
    250  f068		       f0 01		      BEQ	CallConfigureDifficulty
    251  f06a		       e8		      INX
    252  f06b
    253  f06b				   CallConfigureDifficulty
    254  f06b		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    255  f06d		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    256  f06f		       a5 c0		      LDA	GameStatus
    257  f071		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    258  f073				   NextCar
    259  f073		       a4 a9		      LDY	CurrentCarId
    260  f075		       c8		      INY
    261  f076		       98		      TYA
    262  f077		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    263  f079		       85 a9		      STA	CurrentCarId
    264  f07b				   StoreCurrentDifficulty
    265  f07b		       86 c4		      STX	CurrentDifficulty
    266  f07d		       20 51 f7 	      JSR	ConfigureDifficulty
    267  f080
    268  f080				   ConfigureCarSprite
    269  f080		       a4 a9		      LDY	CurrentCarId
    270  f082		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    271  f085		       85 a7		      STA	CarSpritePointerL
    272  f087		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    273  f08a		       85 a8		      STA	CarSpritePointerH
    274  f08c
    275  f08c				   SetGameNotRunning
    276  f08c		       a9 00		      LDA	#0
    277  f08e		       85 c0		      STA	GameStatus
    278  f090
    279  f090				   ConfigureOneSecondTimer
    280  f090		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    281  f092		       85 cf		      STA	OneSecondConter
    282  f094
    283  f094				   HPositioning
    284  f094		       85 02		      STA	WSYNC
    285  f096
    286  f096		       a9 30		      LDA	#%00110000	;2 Missile Size
    287  f098		       85 04		      STA	NUSIZ0	;3
    288  f09a		       85 05		      STA	NUSIZ1	;3
    289  f09c
    290  f09c		       a9 35		      LDA	#PLAYER_0_X_START	;2
    291  f09e		       85 b9		      STA	Player0X	;3
    292  f0a0
    293  f0a0		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    294  f0a2		       85 ba		      STA	CountdownTimer	;3
    295  f0a4
    296  f0a4		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    297  f0a6		       85 d7		      STA	NextCheckpoint
    298  f0a8
    299  f0a8		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f0aa					      SLEEP	11	;
      1  f0aa				   .CYCLES    SET	11
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa					      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa					      ELSE
     12  f0aa		       24 00		      bit	VSYNC
     13  f0ac					      ENDIF
     14  f0ac				   .CYCLES    SET	.CYCLES - 3
     15  f0ac					      ENDIF
     16  f0ac
     17  f0ac					      REPEAT	.CYCLES / 2
     18  f0ac		       ea		      nop
     17  f0ac					      REPEND
     18  f0ad		       ea		      nop
     17  f0ad					      REPEND
     18  f0ae		       ea		      nop
     17  f0ae					      REPEND
     18  f0af		       ea		      nop
     19  f0b0					      REPEND
    301  f0b0		       85 11		      STA	RESP1
      0  f0b2					      SLEEP	2	;
      1  f0b2				   .CYCLES    SET	2
      2  f0b2
      3  f0b2				  -	      IF	.CYCLES < 2
      4  f0b2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b2				  -	      ERR
      6  f0b2					      ENDIF
      7  f0b2
      8  f0b2				  -	      IF	.CYCLES & 1
      9  f0b2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b2				  -	      nop	0
     11  f0b2				  -	      ELSE
     12  f0b2				  -	      bit	VSYNC
     13  f0b2				  -	      ENDIF
     14  f0b2				  -.CYCLES    SET	.CYCLES - 3
     15  f0b2					      ENDIF
     16  f0b2
     17  f0b2					      REPEAT	.CYCLES / 2
     18  f0b2		       ea		      nop
     19  f0b3					      REPEND
    303  f0b3		       85 14		      STA	RESBL
      0  f0b5					      SLEEP	2	;
      1  f0b5				   .CYCLES    SET	2
      2  f0b5
      3  f0b5				  -	      IF	.CYCLES < 2
      4  f0b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b5				  -	      ERR
      6  f0b5					      ENDIF
      7  f0b5
      8  f0b5				  -	      IF	.CYCLES & 1
      9  f0b5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b5				  -	      nop	0
     11  f0b5				  -	      ELSE
     12  f0b5				  -	      bit	VSYNC
     13  f0b5				  -	      ENDIF
     14  f0b5				  -.CYCLES    SET	.CYCLES - 3
     15  f0b5					      ENDIF
     16  f0b5
     17  f0b5					      REPEAT	.CYCLES / 2
     18  f0b5		       ea		      nop
     19  f0b6					      REPEND
    305  f0b6		       85 12		      STA	RESM0
      0  f0b8					      SLEEP	2
      1  f0b8				   .CYCLES    SET	2
      2  f0b8
      3  f0b8				  -	      IF	.CYCLES < 2
      4  f0b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b8				  -	      ERR
      6  f0b8					      ENDIF
      7  f0b8
      8  f0b8				  -	      IF	.CYCLES & 1
      9  f0b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b8				  -	      nop	0
     11  f0b8				  -	      ELSE
     12  f0b8				  -	      bit	VSYNC
     13  f0b8				  -	      ENDIF
     14  f0b8				  -.CYCLES    SET	.CYCLES - 3
     15  f0b8					      ENDIF
     16  f0b8
     17  f0b8					      REPEAT	.CYCLES / 2
     18  f0b8		       ea		      nop
     19  f0b9					      REPEND
    307  f0b9		       85 13		      STA	RESM1
    308  f0bb
    309  f0bb		       a9 f0		      LDA	#$F0
    310  f0bd		       85 24		      STA	HMBL
    311  f0bf		       85 22		      STA	HMM0
    312  f0c1		       85 23		      STA	HMM1
    313  f0c3		       85 02		      STA	WSYNC
    314  f0c5		       85 2a		      STA	HMOVE
    315  f0c7		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    316  f0c9		       85 2b		      STA	HMCLR
    317  f0cb
    318  f0cb				   WaitResetToEnd
    319  f0cb		       ad 84 02 	      LDA	INTIM
    320  f0ce		       d0 fb		      BNE	WaitResetToEnd
    321  f0d0
    322  f0d0				   MainLoop
    323  f0d0		       a9 02		      LDA	#2
    324  f0d2		       85 00		      STA	VSYNC
    325  f0d4		       85 02		      STA	WSYNC
    326  f0d6
    327  f0d6				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    328  f0d6		       a9 01		      LDA	#%00000001
    329  f0d8		       24 ac		      BIT	TextFlickerMode
    330  f0da		       f0 05		      BEQ	TextSideFrameZero
    331  f0dc		       25 8d		      AND	FrameCount1
    332  f0de		       4c e3 f0 	      JMP	StoreTextSize
    333  f0e1				   TextSideFrameZero
    334  f0e1		       25 8c		      AND	FrameCount0
    335  f0e3				   StoreTextSize
    336  f0e3		       85 ab		      STA	TextSide
    337  f0e5
    338  f0e5		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    339  f0e7		       85 2a		      STA	HMOVE	;2
    340  f0e9				   ConfigVBlankTimer
    341  f0e9		       a5 c5		      LDA	GameMode
    342  f0eb		       c9 10		      CMP	#MAX_GAME_MODE
    343  f0ed		       f0 05		      BEQ	SetVblankTimerQrCode
    344  f0ef		       a9 29		      LDA	#VBLANK_TIMER
    345  f0f1		       4c f6 f0 	      JMP	SetVblankTimer
    346  f0f4				   SetVblankTimerQrCode
    347  f0f4		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    348  f0f6				   SetVblankTimer
    349  f0f6		       85 02		      STA	WSYNC	;3
    350  f0f8		       8d 96 02 	      STA	TIM64T	;3	
    351  f0fb		       a9 00		      LDA	#0	;2
    352  f0fd		       85 00		      STA	VSYNC	;3	
    353  f0ff
    354  f0ff				   RandomizeGame
    355  f0ff		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    356  f101		       d0 30		      BNE	EndRandomizeGame
    357  f103		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    358  f105		       29 02		      AND	#%00000010
    359  f107		       f0 27		      BEQ	DeterministicGame
    360  f109		       a6 96		      LDX	TrafficOffset1 + 2
    361  f10b		       bd 00 fe 	      LDA	AesTable,X
    362  f10e		       45 8c		      EOR	FrameCount0
    363  f110		       85 96		      STA	TrafficOffset1 + 2
    364  f112		       a6 9a		      LDX	TrafficOffset2 + 2
    365  f114		       bd 00 fe 	      LDA	AesTable,X
    366  f117		       45 8c		      EOR	FrameCount0
    367  f119		       85 9a		      STA	TrafficOffset2 + 2
    368  f11b		       a6 9e		      LDX	TrafficOffset3 + 2
    369  f11d		       bd 00 fe 	      LDA	AesTable,X
    370  f120		       45 8c		      EOR	FrameCount0
    371  f122		       85 9e		      STA	TrafficOffset3 + 2
    372  f124		       a6 a2		      LDX	TrafficOffset4 + 2
    373  f126		       bd 00 fe 	      LDA	AesTable,X
    374  f129		       45 8c		      EOR	FrameCount0
    375  f12b		       85 a2		      STA	TrafficOffset4 + 2
    376  f12d		       4c 33 f1 	      JMP	EndRandomizeGame
    377  f130
    378  f130				   DeterministicGame
    379  f130		       20 7c f7 	      JSR	DefaultOffsets
    380  f133
    381  f133				   EndRandomizeGame
    382  f133
    383  f133				   CountFrame
    384  f133		       e6 8c		      INC	FrameCount0	; 5
    385  f135		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    386  f137		       e6 8d		      INC	FrameCount1	; 5 
    387  f139				   SkipIncFC1
    388  f139
    389  f139				   CallDrawQrCode
    390  f139		       a5 c5		      LDA	GameMode
    391  f13b		       c9 10		      CMP	#MAX_GAME_MODE
    392  f13d		       d0 03		      BNE	TestIsGameRunning
    393  f13f		       4c 64 fc 	      JMP	DrawQrCode
    394  f142
    395  f142							;Does not update the game if not running
    396  f142				   TestIsGameRunning
    397  f142		       a5 c0		      LDA	GameStatus	;3
    398  f144		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    399  f146		       4c 0a f3 	      JMP	SkipUpdateLogic
    400  f149				   ContinueWithGameLogic
    401  f149
    402  f149				   EverySecond		; 64 frames to be more precise
    403  f149		       a9 3f		      LDA	#%00111111
    404  f14b		       25 8c		      AND	FrameCount0
    405  f14d		       d0 06		      BNE	SkipEverySecondAction
    406  f14f		       c5 ba		      CMP	CountdownTimer
    407  f151		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    408  f153		       c6 ba		      DEC	CountdownTimer
    409  f155				   SkipEverySecondAction
    410  f155
    411  f155				   ChangeTextFlickerMode
    412  f155		       a5 bc		      LDA	SwitchDebounceCounter
    413  f157		       d0 0d		      BNE	EndChangeTextFlickerMode
    414  f159		       ad 82 02 	      LDA	SWCHB
    415  f15c		       29 02		      AND	#%00000010	;Game select
    416  f15e		       d0 06		      BNE	EndChangeTextFlickerMode
    417  f160		       e6 ac		      INC	TextFlickerMode
    418  f162		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    419  f164		       85 bc		      STA	SwitchDebounceCounter
    420  f166				   EndChangeTextFlickerMode
    421  f166
    422  f166				   BreakOnTimeOver		; Uses LDX as the breaking speed
    423  f166		       a2 00		      LDX	#0
    424  f168		       a5 ba		      LDA	CountdownTimer
    425  f16a		       d0 0b		      BNE	Break
    426  f16c		       a4 a9		      LDY	CurrentCarId
    427  f16e		       a5 8c		      LDA	FrameCount0
    428  f170		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    429  f173		       d0 02		      BNE	Break
    430  f175		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    431  f177
    432  f177				   Break
    433  f177		       a9 20		      LDA	#%00100000	;Down in controller
    434  f179		       2c 80 02 	      BIT	SWCHA
    435  f17c		       d0 0e		      BNE	BreakNonZero
    436  f17e		       a5 0c		      LDA	INPT4	;3
    437  f180		       10 08		      BPL	BreakWhileAccelerating
    438  f182		       a4 ad		      LDY	Gear
    439  f184		       be dd ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    440  f187		       4c 8c f1 	      JMP	BreakNonZero
    441  f18a				   BreakWhileAccelerating		; Allow better control while breaking.
    442  f18a		       a2 05		      LDX	(#BREAK_SPEED / 2)
    443  f18c
    444  f18c				   BreakNonZero
    445  f18c		       e0 00		      CPX	#0
    446  f18e		       f0 2b		      BEQ	SkipBreak
    447  f190		       86 b0		      STX	Tmp0
    448  f192
    449  f192				   DecreaseSpeed
    450  f192		       38		      SEC
    451  f193		       a5 8e		      LDA	Player0SpeedL
    452  f195		       e5 b0		      SBC	Tmp0
    453  f197		       85 8e		      STA	Player0SpeedL
    454  f199		       a5 8f		      LDA	Player0SpeedH
    455  f19b		       e9 00		      SBC	#0
    456  f19d		       85 8f		      STA	Player0SpeedH
    457  f19f
    458  f19f				   CheckMinSpeed
    459  f19f		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    460  f1a1		       c9 00		      CMP	#CAR_MIN_SPEED_H
    461  f1a3		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    462  f1a5		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    463  f1a7
    464  f1a7				   CompareLBreakSpeed
    465  f1a7		       a5 8e		      LDA	Player0SpeedL
    466  f1a9		       c9 00		      CMP	#CAR_MIN_SPEED_L
    467  f1ab		       90 03		      BCC	ResetMinSpeed	; Less than memory
    468  f1ad		       4c b8 f1 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    469  f1b0
    470  f1b0				   ResetMinSpeed
    471  f1b0		       a9 00		      LDA	#CAR_MIN_SPEED_H
    472  f1b2		       85 8f		      STA	Player0SpeedH
    473  f1b4		       a9 00		      LDA	#CAR_MIN_SPEED_L
    474  f1b6		       85 8e		      STA	Player0SpeedL
    475  f1b8
    476  f1b8				   SkipAccelerateIfBreaking
    477  f1b8		       4c fd f1 	      JMP	SkipAccelerate
    478  f1bb				   SkipBreak
    479  f1bb
    480  f1bb				   Acelerates
    481  f1bb		       a5 ba		      LDA	CountdownTimer
    482  f1bd		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    483  f1bf
    484  f1bf				   ContinueAccelerateTest
    485  f1bf		       a5 0c		      LDA	INPT4	;3
    486  f1c1		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    487  f1c3		       a9 10		      LDA	#%00010000	;UP in controller
    488  f1c5		       2c 80 02 	      BIT	SWCHA
    489  f1c8		       d0 33		      BNE	SkipAccelerate
    490  f1ca
    491  f1ca				   IncreaseCarSpeed
    492  f1ca		       a2 02		      LDX	#2
    493  f1cc		       a4 a9		      LDY	CurrentCarId
    494  f1ce				   IncreaseCarSpeedLoop
    495  f1ce							;Adds speed
    496  f1ce		       18		      CLC
    497  f1cf		       a5 aa		      LDA	AccelerateBuffer
    498  f1d1		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    499  f1d4		       85 aa		      STA	AccelerateBuffer
    500  f1d6		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    501  f1d8		       e6 8e		      INC	Player0SpeedL
    502  f1da		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    503  f1dc		       e6 8f		      INC	Player0SpeedH
    504  f1de				   ContinueIncreaseSpeedLoop
    505  f1de		       ca		      DEX
    506  f1df		       d0 ed		      BNE	IncreaseCarSpeedLoop
    507  f1e1				   SkipIncreaseCarSpeed
    508  f1e1
    509  f1e1				   CheckIfAlreadyMaxSpeed
    510  f1e1		       a5 8f		      LDA	Player0SpeedH
    511  f1e3		       c9 02		      CMP	#CAR_MAX_SPEED_H
    512  f1e5		       90 16		      BCC	SkipAccelerate	; less than my max speed
    513  f1e7		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    514  f1e9							;High bit is max, compare the low
    515  f1e9		       a4 a9		      LDY	CurrentCarId
    516  f1eb		       a5 8e		      LDA	Player0SpeedL
    517  f1ed		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    518  f1f0		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    519  f1f2							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    520  f1f2
    521  f1f2				   ResetToMaxSpeed		; Speed is more, or is already max
    522  f1f2		       a9 02		      LDA	#CAR_MAX_SPEED_H
    523  f1f4		       85 8f		      STA	Player0SpeedH
    524  f1f6		       a4 a9		      LDY	CurrentCarId
    525  f1f8		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    526  f1fb		       85 8e		      STA	Player0SpeedL
    527  f1fd				   SkipAccelerate
    528  f1fd
    529  f1fd				   InitUpdateOffsets
    530  f1fd		       a2 00		      LDX	#0	; Memory Offset 24 bit
    531  f1ff		       a0 00		      LDY	#0	; Line Speeds 16 bits
    532  f201		       a5 91		      LDA	TrafficOffset0 + 1	;
    533  f203		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    534  f205		       a5 c5		      LDA	GameMode
    535  f207		       29 04		      AND	#%00000100	; GameModes with high delta
    536  f209		       f0 02		      BEQ	UpdateOffsets
    537  f20b		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    538  f20d
    539  f20d				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    540  f20d		       38		      SEC
    541  f20e		       a5 8e		      LDA	Player0SpeedL
    542  f210		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    543  f213		       85 b0		      STA	Tmp0
    544  f215		       c8		      INY
    545  f216		       a5 8f		      LDA	Player0SpeedH
    546  f218		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    547  f21b		       85 b1		      STA	Tmp1
    548  f21d		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    549  f21f		       e9 00		      SBC	#0
    550  f221		       85 b2		      STA	Tmp2
    551  f223
    552  f223				   AddsTheResult
    553  f223		       18		      CLC
    554  f224		       a5 b0		      LDA	Tmp0
    555  f226		       75 90		      ADC	TrafficOffset0,X
    556  f228		       95 90		      STA	TrafficOffset0,X
    557  f22a		       e8		      INX
    558  f22b		       a5 b1		      LDA	Tmp1
    559  f22d		       75 90		      ADC	TrafficOffset0,X
    560  f22f		       95 90		      STA	TrafficOffset0,X
    561  f231		       e8		      INX
    562  f232		       a5 b2		      LDA	Tmp2	; Carry
    563  f234		       75 90		      ADC	TrafficOffset0,X
    564  f236		       95 90		      STA	TrafficOffset0,X
    565  f238		       90 06		      BCC	CalculateOffsetCache
    566  f23a		       e0 02		      CPX	#2	;MSB offset 0
    567  f23c		       d0 02		      BNE	CalculateOffsetCache
    568  f23e		       e6 bb		      INC	Traffic0Msb
    569  f240
    570  f240				   CalculateOffsetCache
    571  f240		       e8		      INX
    572  f241		       38		      SEC
    573  f242		       69 00		      ADC	#0	;Increment by one
    574  f244		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    575  f246
    576  f246				   PrepareNextUpdateLoop
    577  f246		       c8		      INY
    578  f247		       e8		      INX
    579  f248		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    580  f24a		       d0 c1		      BNE	UpdateOffsets
    581  f24c
    582  f24c				   BcdScore		; 48
    583  f24c		       a5 91		      LDA	TrafficOffset0 + 1	;3
    584  f24e		       45 b3		      EOR	Tmp3	;3
    585  f250		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    586  f252		       f0 1b		      BEQ	FinishBcdScore	;2
    587  f254
    588  f254				   ContinueBcdScore
    589  f254		       f8		      SED		;2
    590  f255		       18		      CLC		;2
    591  f256		       a5 b4		      LDA	ScoreBcd0	;3
    592  f258		       69 01		      ADC	#1	;2
    593  f25a		       85 b4		      STA	ScoreBcd0	;3
    594  f25c		       a5 b5		      LDA	ScoreBcd1	;3
    595  f25e		       69 00		      ADC	#0	;2
    596  f260		       85 b5		      STA	ScoreBcd1	;3
    597  f262		       a5 b6		      LDA	ScoreBcd2	;3
    598  f264		       69 00		      ADC	#0	;2
    599  f266		       85 b6		      STA	ScoreBcd2	;3
    600  f268		       a5 b7		      LDA	ScoreBcd3	;3
    601  f26a		       69 00		      ADC	#0	;2
    602  f26c		       85 b7		      STA	ScoreBcd3	;3
    603  f26e		       d8		      CLD		;2
    604  f26f				   FinishBcdScore
    605  f26f
    606  f26f							;Until store the movemnt, LDX contains the value to be stored.
    607  f26f				   TestCollision		;
    608  f26f							; see if player0 colides with the rest
    609  f26f		       a5 00		      LDA	CXM0P
    610  f271		       05 01		      ORA	CXM1P
    611  f273		       05 01		      ORA	CXM1P
    612  f275		       05 02		      ORA	CXP0FB
    613  f277		       05 07		      ORA	CXPPMM
    614  f279		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    615  f27b		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    616  f27d		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    617  f27f		       d0 3a		      BNE	NoCollision
    618  f281		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    619  f283		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    620  f285		       f0 34		      BEQ	NoCollision
    621  f287		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    622  f289		       f0 30		      BEQ	NoCollision
    623  f28b		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    624  f28d		       85 b8		      STA	CollisionCounter	;and store as colision.
    625  f28f				   CountBcdColision
    626  f28f		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    627  f291		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    628  f293		       f0 1d		      BEQ	SkipSetColisionSpeedL
    629  f295		       f8		      SED		;2
    630  f296		       18		      CLC		;2
    631  f297		       a5 cb		      LDA	HitCountBcd0	;3
    632  f299		       69 01		      ADC	#1	;3
    633  f29b		       85 cb		      STA	HitCountBcd0	;3
    634  f29d		       a5 cc		      LDA	HitCountBcd1	;3
    635  f29f		       69 00		      ADC	#0	;2
    636  f2a1		       85 cc		      STA	HitCountBcd1	;3
    637  f2a3		       d8		      CLD		;2
    638  f2a4				   EndCountBcdColision
    639  f2a4		       a5 8f		      LDA	Player0SpeedH
    640  f2a6		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    641  f2a8		       a9 10		      LDA	#COLLISION_SPEED_L
    642  f2aa		       c5 8e		      CMP	Player0SpeedL
    643  f2ac		       b0 04		      BCS	SkipSetColisionSpeedL
    644  f2ae				   SetColisionSpeedL
    645  f2ae		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    646  f2b0		       85 8e		      STA	Player0SpeedL
    647  f2b2				   SkipSetColisionSpeedL
    648  f2b2		       a9 00		      LDA	#0
    649  f2b4		       85 8f		      STA	Player0SpeedH
    650  f2b6		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    651  f2b8		       4c 06 f3 	      JMP	StoreHMove	; We keep position consistent
    652  f2bb				   NoCollision
    653  f2bb
    654  f2bb				   DecrementCollision
    655  f2bb		       a4 b8		      LDY	CollisionCounter
    656  f2bd		       f0 07		      BEQ	FinishDecrementCollision
    657  f2bf		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    658  f2c1		       85 04		      STA	NUSIZ0
    659  f2c3		       88		      DEY
    660  f2c4		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    661  f2c6				   FinishDecrementCollision
    662  f2c6
    663  f2c6				   ResetPlayerSize
    664  f2c6		       d0 04		      BNE	FinishResetPlayerSize
    665  f2c8		       a9 30		      LDA	#%00110000
    666  f2ca		       85 04		      STA	NUSIZ0	;
    667  f2cc				   FinishResetPlayerSize
    668  f2cc
    669  f2cc				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    670  f2cc		       c0 01		      CPY	#1	; Last frame before reset
    671  f2ce		       d0 05		      BNE	SkipResetPlayerPosition
    672  f2d0		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    673  f2d2		       4c 06 f3 	      JMP	StoreHMove
    674  f2d5				   SkipResetPlayerPosition
    675  f2d5
    676  f2d5				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    677  f2d5		       a5 a9		      LDA	CurrentCarId
    678  f2d7		       c9 03		      CMP	#CAR_ID_DRAGSTER
    679  f2d9		       d0 08		      BNE	PrepareReadXAxis
    680  f2db		       a2 00		      LDX	#0
    681  f2dd		       a5 8c		      LDA	FrameCount0
    682  f2df		       29 01		      AND	#DRAGSTER_TURN_MASK
    683  f2e1		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    684  f2e3
    685  f2e3							; for left and right, we're gonna 
    686  f2e3							; set the horizontal speed, and then do
    687  f2e3							; a single HMOVE.  We'll use X to hold the
    688  f2e3							; horizontal speed, then store it in the 
    689  f2e3							; appropriate register
    690  f2e3				   PrepareReadXAxis
    691  f2e3		       a2 00		      LDX	#0
    692  f2e5		       a4 b9		      LDY	Player0X
    693  f2e7				   BeginReadLeft
    694  f2e7		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    695  f2e9		       a9 40		      LDA	#%01000000	;Left
    696  f2eb		       2c 80 02 	      BIT	SWCHA
    697  f2ee		       d0 07		      BNE	SkipMoveLeft
    698  f2f0		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    699  f2f2		       c6 b9		      DEC	Player0X
    700  f2f4		       4c 06 f3 	      JMP	StoreHMove	; Cannot move left and right...
    701  f2f7				   SkipMoveLeft
    702  f2f7				   BeginReadRight
    703  f2f7		       c0 36		      CPY	#PLAYER_0_MAX_X
    704  f2f9		       f0 0b		      BEQ	SkipMoveRight	; At max already
    705  f2fb		       a9 80		      LDA	#%10000000	;Right
    706  f2fd		       2c 80 02 	      BIT	SWCHA
    707  f300		       d0 04		      BNE	SkipMoveRight
    708  f302		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    709  f304		       e6 b9		      INC	Player0X
    710  f306				   SkipMoveRight
    711  f306				   StoreHMove
    712  f306		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    713  f308		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    714  f30a
    715  f30a				   SkipUpdateLogic		; Continue here if not paused
    716  f30a
    717  f30a				   CalculateGear
    718  f30a		       a5 8e		      LDA	Player0SpeedL	;3
    719  f30c		       29 80		      AND	#%10000000	;2
    720  f30e		       05 8f		      ORA	Player0SpeedH	;3
    721  f310		       18		      CLC		;2
    722  f311		       2a		      ROL		;2
    723  f312		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    724  f314		       85 ad		      STA	Gear
    725  f316
    726  f316				   EndProcessingBorder
    727  f316
    728  f316				   ProcessScoreFontColor
    729  f316		       a6 d6		      LDX	ScoreFontColorHoldChange
    730  f318		       f0 06		      BEQ	ResetScoreFontColor
    731  f31a		       ca		      DEX
    732  f31b		       86 d6		      STX	ScoreFontColorHoldChange
    733  f31d		       4c 24 f3 	      JMP	SkipScoreFontColor
    734  f320				   ResetScoreFontColor
    735  f320		       a9 f9		      LDA	#SCORE_FONT_COLOR
    736  f322		       85 d5		      STA	ScoreFontColor
    737  f324				   SkipScoreFontColor
    738  f324
    739  f324				   IsGameOver
    740  f324		       a5 ba		      LDA	CountdownTimer
    741  f326		       05 8e		      ORA	Player0SpeedL
    742  f328		       05 8f		      ORA	Player0SpeedH
    743  f32a		       d0 0b		      BNE	IsCheckpoint
    744  f32c		       a9 01		      LDA	#1
    745  f32e		       85 d6		      STA	ScoreFontColorHoldChange
    746  f330		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    747  f332		       85 d5		      STA	ScoreFontColor
    748  f334		       4c 78 f3 	      JMP	SkipIsTimeOver
    749  f337
    750  f337				   IsCheckpoint
    751  f337		       a5 d7		      LDA	NextCheckpoint
    752  f339		       c5 92		      CMP	TrafficOffset0 + 2
    753  f33b		       d0 2f		      BNE	SkipIsCheckpoint
    754  f33d		       18		      CLC
    755  f33e		       69 10		      ADC	#CHECKPOINT_INTERVAL
    756  f340		       85 d7		      STA	NextCheckpoint
    757  f342		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    758  f344		       85 d5		      STA	ScoreFontColor
    759  f346		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    760  f348		       85 d6		      STA	ScoreFontColorHoldChange
    761  f34a				   AddCheckpointBcd
    762  f34a		       f8		      SED		;2
    763  f34b		       18		      CLC		;2
    764  f34c		       a5 a4		      LDA	CheckpointBcd0	;3
    765  f34e		       69 01		      ADC	#1	;3
    766  f350		       85 a4		      STA	CheckpointBcd0	;3
    767  f352		       a5 a5		      LDA	CheckpointBcd1	;3
    768  f354		       69 00		      ADC	#0	;2
    769  f356		       85 a5		      STA	CheckpointBcd1	;3
    770  f358		       d8		      CLD		;2
    771  f359				   EndCheckpointBcd
    772  f359		       a5 ba		      LDA	CountdownTimer
    773  f35b		       18		      CLC
    774  f35c		       65 c2		      ADC	CheckpointTime
    775  f35e		       85 ba		      STA	CountdownTimer
    776  f360		       90 04		      BCC	JumpSkipTimeOver
    777  f362		       a9 ff		      LDA	#$FF
    778  f364		       85 ba		      STA	CountdownTimer	; Does not overflow!
    779  f366				   JumpSkipTimeOver
    780  f366		       20 42 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    781  f369		       4c 78 f3 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    782  f36c				   SkipIsCheckpoint
    783  f36c
    784  f36c				   IsTimeOver
    785  f36c		       a5 ba		      LDA	CountdownTimer
    786  f36e		       d0 08		      BNE	SkipIsTimeOver
    787  f370		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    788  f372		       85 d6		      STA	ScoreFontColorHoldChange
    789  f374		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    790  f376		       85 d5		      STA	ScoreFontColor
    791  f378				   SkipIsTimeOver
    792  f378
    793  f378				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
    794  f378		       a5 c0		      LDA	GameStatus	;3
    795  f37a		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
    796  f37c		       a5 d5		      LDA	ScoreFontColor	;3
    797  f37e		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
    798  f380		       f0 30		      BEQ	EndExactlyEverySecond	;2
    799  f382		       c6 cf		      DEC	OneSecondConter	;5
    800  f384		       d0 2c		      BNE	EndExactlyEverySecond	;2
    801  f386
    802  f386		       f8		      SED		;2 BCD Operations after this point
    803  f387				   CountGlideTimeBcd
    804  f387		       a5 d5		      LDA	ScoreFontColor	;3
    805  f389		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
    806  f38b		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
    807  f38d		       18		      CLC		;2
    808  f38e		       a5 cd		      LDA	GlideTimeBcd0	;3
    809  f390		       69 01		      ADC	#1	;3
    810  f392		       85 cd		      STA	GlideTimeBcd0	;3
    811  f394		       a5 ce		      LDA	GlideTimeBcd1	;3
    812  f396		       69 00		      ADC	#0	;2
    813  f398		       85 ce		      STA	GlideTimeBcd1	;3
    814  f39a				   EndCountGlideTimeBcd
    815  f39a				   IncreaseTotalTimerBcd
    816  f39a		       18		      CLC		;2
    817  f39b		       a5 bd		      LDA	TimeBcd0	;3
    818  f39d		       69 01		      ADC	#1	;2
    819  f39f		       85 bd		      STA	TimeBcd0	;3
    820  f3a1		       a5 be		      LDA	TimeBcd1	;3
    821  f3a3		       69 00		      ADC	#0	;2
    822  f3a5		       85 be		      STA	TimeBcd1	;3
    823  f3a7		       a5 bf		      LDA	TimeBcd2	;3
    824  f3a9		       69 00		      ADC	#0	;2
    825  f3ab		       85 bf		      STA	TimeBcd2	;3
    826  f3ad
    827  f3ad				   ResetOneSecondCounter
    828  f3ad		       d8		      CLD		;2
    829  f3ae		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
    830  f3b0		       85 cf		      STA	OneSecondConter	;3
    831  f3b2
    832  f3b2				   EndExactlyEverySecond
    833  f3b2
    834  f3b2				   PrintEasterEggCondition
    835  f3b2		       a5 8d		      LDA	FrameCount1
    836  f3b4		       29 38		      AND	#%00111000
    837  f3b6		       05 c0		      ORA	GameStatus
    838  f3b8		       c9 38		      CMP	#%00111000
    839  f3ba		       d0 06		      BNE	ChooseTextSide
    840  f3bc		       20 ad f7 	      JSR	PrintEasterEgg
    841  f3bf		       4c b1 f4 	      JMP	RightScoreWriteEnd
    842  f3c2
    843  f3c2							;Could be done during on vblank to save this comparisson time (before draw score), 
    844  f3c2							;but I am saving vblank cycles for now, in case of 2 players.
    845  f3c2				   ChooseTextSide		; 
    846  f3c2		       a5 ab		      LDA	TextSide	;3
    847  f3c4		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    848  f3c6		       4c 47 f4 	      JMP	RightScoreWrite
    849  f3c9
    850  f3c9				   LeftScoreWrite
    851  f3c9		       a5 d5		      LDA	ScoreFontColor
    852  f3cb		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    853  f3cd		       f0 4e		      BEQ	PrintCheckpoint
    854  f3cf		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    855  f3d1		       f0 52		      BEQ	PrintStartGame
    856  f3d3		       a5 c0		      LDA	GameStatus
    857  f3d5		       f0 56		      BEQ	PrintHellwayLeft
    858  f3d7				   WriteDistance		;Not optimized yet, ugly code.
    859  f3d7				   Digit0Distance
    860  f3d7		       a5 91		      LDA	TrafficOffset0 + 1	;3
    861  f3d9		       4a		      LSR		; 2
    862  f3da		       4a		      LSR		; 2
    863  f3db		       4a		      LSR		; 2
    864  f3dc		       4a		      LSR		; 2
    865  f3dd		       aa		      TAX		; 2
    866  f3de		       bd be fd 	      LDA	FontLookup,X	;4
    867  f3e1		       85 d3		      STA	ScoreD3	;3
    868  f3e3
    869  f3e3				   Digit1Distance
    870  f3e3		       a5 92		      LDA	TrafficOffset0 + 2	;3
    871  f3e5		       29 0f		      AND	#%00001111	;2
    872  f3e7		       aa		      TAX		; 2
    873  f3e8		       bd be fd 	      LDA	FontLookup,X	;4 
    874  f3eb		       85 d2		      STA	ScoreD2	;3
    875  f3ed
    876  f3ed				   Digit2Distance
    877  f3ed		       a5 92		      LDA	TrafficOffset0 + 2	;3
    878  f3ef		       4a		      LSR		; 2
    879  f3f0		       4a		      LSR		; 2
    880  f3f1		       4a		      LSR		; 2
    881  f3f2		       4a		      LSR		; 2
    882  f3f3		       aa		      TAX		; 2
    883  f3f4		       bd be fd 	      LDA	FontLookup,X	;4
    884  f3f7		       85 d1		      STA	ScoreD1	;3
    885  f3f9
    886  f3f9				   Digit3Distance
    887  f3f9		       a5 bb		      LDA	Traffic0Msb	;3
    888  f3fb		       29 0f		      AND	#%00001111	;2
    889  f3fd		       aa		      TAX		; 2
    890  f3fe		       bd be fd 	      LDA	FontLookup,X	;4 
    891  f401		       85 d0		      STA	ScoreD0	;3
    892  f403
    893  f403				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    894  f403		       a5 bb		      LDA	Traffic0Msb
    895  f405		       29 f0		      AND	#%11110000	;2
    896  f407		       d0 07		      BNE	DrawDistanceExtraDigit
    897  f409		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    898  f40b		       85 d4		      STA	ScoreD4	;3
    899  f40d		       4c 1a f4 	      JMP	EndDrawDistance
    900  f410				   DrawDistanceExtraDigit
    901  f410		       4a		      LSR		; 2
    902  f411		       4a		      LSR		; 2
    903  f412		       4a		      LSR		; 2
    904  f413		       4a		      LSR		; 2
    905  f414		       aa		      TAX		; 2
    906  f415		       bd be fd 	      LDA	FontLookup,X	;4
    907  f418		       85 d4		      STA	ScoreD4	;3
    908  f41a
    909  f41a				   EndDrawDistance
    910  f41a		       4c b1 f4 	      JMP	RightScoreWriteEnd	;3
    911  f41d
    912  f41d				   PrintCheckpoint
    913  f41d		       a2 00		      LDX	#<CheckpointText
    914  f41f		       20 8f f7 	      JSR	PrintStaticText
    915  f422		       4c b1 f4 	      JMP	RightScoreWriteEnd	;3
    916  f425				   PrintStartGame
    917  f425		       a2 23		      LDX	#<GoText
    918  f427		       20 8f f7 	      JSR	PrintStaticText
    919  f42a		       4c b1 f4 	      JMP	RightScoreWriteEnd	;3
    920  f42d
    921  f42d				   PrintHellwayLeft
    922  f42d		       a5 8d		      LDA	FrameCount1
    923  f42f		       29 01		      AND	#1
    924  f431		       d0 05		      BNE	PrintCreditsLeft
    925  f433		       a2 05		      LDX	#<HellwayLeftText
    926  f435		       4c 3a f4 	      JMP	PrintGameMode
    927  f438				   PrintCreditsLeft
    928  f438		       a2 0f		      LDX	#<OpbText
    929  f43a
    930  f43a				   PrintGameMode
    931  f43a		       20 8f f7 	      JSR	PrintStaticText
    932  f43d		       a6 c5		      LDX	GameMode
    933  f43f		       bd be fd 	      LDA	FontLookup,X	;4 
    934  f442		       85 d0		      STA	ScoreD0	;3
    935  f444		       4c b1 f4 	      JMP	RightScoreWriteEnd	;3
    936  f447
    937  f447				   RightScoreWrite
    938  f447		       a5 c0		      LDA	GameStatus
    939  f449		       f0 45		      BEQ	PrintHellwayRight
    940  f44b		       a5 d5		      LDA	ScoreFontColor
    941  f44d		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    942  f44f		       f0 52		      BEQ	PrintGameOver
    943  f451				   Digit0Timer
    944  f451		       a5 ba		      LDA	CountdownTimer	;3
    945  f453		       29 0f		      AND	#%00001111	;2
    946  f455		       aa		      TAX		; 2
    947  f456		       bd be fd 	      LDA	FontLookup,X	;4 
    948  f459		       85 d1		      STA	ScoreD1	;3
    949  f45b
    950  f45b				   Digit1Timer
    951  f45b		       a5 ba		      LDA	CountdownTimer	;3
    952  f45d		       4a		      LSR		; 2
    953  f45e		       4a		      LSR		; 2
    954  f45f		       4a		      LSR		; 2
    955  f460		       4a		      LSR		; 2
    956  f461		       aa		      TAX		; 2
    957  f462		       bd be fd 	      LDA	FontLookup,X	;4
    958  f465		       85 d0		      STA	ScoreD0	;3
    959  f467
    960  f467		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    961  f469		       85 d2		      STA	ScoreD2	;3
    962  f46b
    963  f46b				   Digit0Speed
    964  f46b		       a5 8e		      LDA	Player0SpeedL
    965  f46d		       29 3c		      AND	#%00111100	;2 Discard the last bits
    966  f46f		       4a		      LSR		; 2
    967  f470		       4a		      LSR		; 2
    968  f471		       aa		      TAX		; 2
    969  f472		       bd be fd 	      LDA	FontLookup,X	;4
    970  f475		       85 d4		      STA	ScoreD4	;3
    971  f477
    972  f477				   Digit1Speed
    973  f477		       a5 8e		      LDA	Player0SpeedL
    974  f479		       29 c0		      AND	#%11000000	;2 Discard the last bits
    975  f47b		       18		      CLC
    976  f47c		       2a		      ROL		;First goes into carry
    977  f47d		       2a		      ROL
    978  f47e		       2a		      ROL
    979  f47f		       85 b0		      STA	Tmp0
    980  f481		       a5 8f		      LDA	Player0SpeedH
    981  f483		       0a		      ASL
    982  f484		       0a		      ASL
    983  f485		       05 b0		      ORA	Tmp0
    984  f487		       aa		      TAX		; 2
    985  f488		       bd be fd 	      LDA	FontLookup,X	;4
    986  f48b		       85 d3		      STA	ScoreD3	;3
    987  f48d		       4c b1 f4 	      JMP	RightScoreWriteEnd
    988  f490
    989  f490				   PrintHellwayRight
    990  f490		       a5 8d		      LDA	FrameCount1
    991  f492		       29 01		      AND	#1
    992  f494		       d0 05		      BNE	PrintCreditsRight
    993  f496		       a2 0a		      LDX	#<HellwayRightText
    994  f498		       4c 9d f4 	      JMP	PrintRightIntro
    995  f49b				   PrintCreditsRight
    996  f49b		       a2 14		      LDX	#<YearText
    997  f49d				   PrintRightIntro
    998  f49d		       20 8f f7 	      JSR	PrintStaticText
    999  f4a0		       4c b1 f4 	      JMP	RightScoreWriteEnd
   1000  f4a3				   PrintGameOver
   1001  f4a3		       a5 8c		      LDA	FrameCount0
   1002  f4a5		       30 05		      BMI	PrintOverText
   1003  f4a7		       a2 19		      LDX	#<GameText
   1004  f4a9		       4c ae f4 	      JMP	StoreGameOverText
   1005  f4ac				   PrintOverText
   1006  f4ac		       a2 1e		      LDX	#<OverText
   1007  f4ae				   StoreGameOverText
   1008  f4ae		       20 8f f7 	      JSR	PrintStaticText
   1009  f4b1				   RightScoreWriteEnd
   1010  f4b1
   1011  f4b1
   1012  f4b1				   ScoreBackgroundColor
   1013  f4b1		       a2 00		      LDX	#0
   1014  f4b3		       ad 82 02 	      LDA	SWCHB
   1015  f4b6		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1016  f4b8		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1017  f4ba		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1018  f4bc		       a2 03		      LDX	#BACKGROUND_COLOR
   1019  f4be				   BlackAndWhiteScoreBg
   1020  f4be		       85 b2		      STA	Tmp2	; Score Background
   1021  f4c0		       86 b3		      STX	Tmp3	; Traffic Background
   1022  f4c2
   1023  f4c2				   ConfigurePFForScore
   1024  f4c2							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1025  f4c2		       85 09		      STA	COLUBK
   1026  f4c4		       20 04 f7 	      JSR	ClearAll
   1027  f4c7		       a9 02		      LDA	#%00000010	; Score mode
   1028  f4c9		       85 0a		      STA	CTRLPF
   1029  f4cb		       a5 ab		      LDA	TextSide	;3
   1030  f4cd		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1031  f4cf				   LeftScoreOn
   1032  f4cf		       a5 d5		      LDA	ScoreFontColor
   1033  f4d1		       85 07		      STA	COLUP1
   1034  f4d3		       a5 b2		      LDA	Tmp2
   1035  f4d5		       85 06		      STA	COLUP0
   1036  f4d7		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1037  f4d9		       85 b1		      STA	Tmp1
   1038  f4db		       4c ea f4 	      JMP	CallWaitForVblankEnd
   1039  f4de				   RightScoreOn
   1040  f4de		       a5 d5		      LDA	ScoreFontColor
   1041  f4e0		       85 06		      STA	COLUP0
   1042  f4e2		       a5 b2		      LDA	Tmp2
   1043  f4e4		       85 07		      STA	COLUP1
   1044  f4e6		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1045  f4e8		       85 b1		      STA	Tmp1
   1046  f4ea
   1047  f4ea							; After here we are going to update the screen, No more heavy code
   1048  f4ea				   CallWaitForVblankEnd
   1049  f4ea		       20 1d fa 	      JSR	WaitForVblankEnd
   1050  f4ed
   1051  f4ed				   DrawScoreHud
   1052  f4ed		       20 1f f8 	      JSR	PrintScore
   1053  f4f0
   1054  f4f0		       85 02		      STA	WSYNC
   1055  f4f2
   1056  f4f2		       a5 0c		      LDA	INPT4	;3
   1057  f4f4		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1058  f4f6		       a5 d5		      LDA	ScoreFontColor
   1059  f4f8		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1060  f4fa		       d0 0a		      BNE	WaitAnotherScoreLine
   1061  f4fc		       a5 ab		      LDA	TextSide	;3
   1062  f4fe		       d0 03		      BNE	LeftScoreOnGameOver
   1063  f500		       4c aa f9 	      JMP	DrawGameOverScreenRight
   1064  f503				   LeftScoreOnGameOver
   1065  f503		       4c dc f8 	      JMP	DrawGameOverScreenLeft
   1066  f506
   1067  f506				   WaitAnotherScoreLine
   1068  f506		       85 02		      STA	WSYNC
   1069  f508
   1070  f508				   PrepareForTraffic
   1071  f508		       20 16 f7 	      JSR	ClearPF	; 32
   1072  f50b
   1073  f50b		       85 02		      STA	WSYNC
   1074  f50d		       85 02		      STA	WSYNC
   1075  f50f
   1076  f50f		       a9 31		      LDA	#%00110001	; 2 Score mode
   1077  f511		       85 0a		      STA	CTRLPF	;3
   1078  f513
   1079  f513		       a5 c3		      LDA	TrafficColor	;3
   1080  f515		       85 08		      STA	COLUPF	;3
   1081  f517
   1082  f517		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1083  f519		       85 07		      STA	COLUP1	;3
   1084  f51b
   1085  f51b		       a5 d5		      LDA	ScoreFontColor	;3
   1086  f51d		       85 06		      STA	COLUP0	;3
   1087  f51f
   1088  f51f		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1089  f521
   1090  f521		       20 16 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1091  f524
      0  f524					      SLEEP	14
      1  f524				   .CYCLES    SET	14
      2  f524
      3  f524				  -	      IF	.CYCLES < 2
      4  f524				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f524				  -	      ERR
      6  f524					      ENDIF
      7  f524
      8  f524				  -	      IF	.CYCLES & 1
      9  f524				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f524				  -	      nop	0
     11  f524				  -	      ELSE
     12  f524				  -	      bit	VSYNC
     13  f524				  -	      ENDIF
     14  f524				  -.CYCLES    SET	.CYCLES - 3
     15  f524					      ENDIF
     16  f524
     17  f524					      REPEAT	.CYCLES / 2
     18  f524		       ea		      nop
     17  f524					      REPEND
     18  f525		       ea		      nop
     17  f525					      REPEND
     18  f526		       ea		      nop
     17  f526					      REPEND
     18  f527		       ea		      nop
     17  f527					      REPEND
     18  f528		       ea		      nop
     17  f528					      REPEND
     18  f529		       ea		      nop
     17  f529					      REPEND
     18  f52a		       ea		      nop
     19  f52b					      REPEND
   1093  f52b
   1094  f52b		       a5 b3		      LDA	Tmp3	;3
   1095  f52d		       85 09		      STA	COLUBK	;3
   1096  f52f		       4c 34 f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1097  f532							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1098  f532
   1099  f532							;main scanline loop...
   1100  f532				   ScanLoop
   1101  f532		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1102  f534
   1103  f534							;Start of next line!			
   1104  f534				   DrawCache		;63 Is the last line going to the top of the next frame?
   1105  f534		       a5 81		      LDA	PF0Cache	;3
   1106  f536		       85 0d		      STA	PF0	;3
   1107  f538
   1108  f538		       a5 83		      LDA	PF2Cache	;3
   1109  f53a		       85 0f		      STA	PF2	;3
   1110  f53c
   1111  f53c		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1112  f53e		       b0 04		      BCS	SkipDrawCar	;2
   1113  f540		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1114  f542		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1115  f544				   SkipDrawCar
   1116  f544
   1117  f544		       a5 84		      LDA	GRP1Cache	;3
   1118  f546		       85 1c		      STA	GRP1	;3
   1119  f548
   1120  f548		       a5 85		      LDA	ENABLCache	;3
   1121  f54a		       85 1f		      STA	ENABL	;3
   1122  f54c
   1123  f54c		       a5 86		      LDA	ENAM0Cache	;3
   1124  f54e		       85 1d		      STA	ENAM0	;3
   1125  f550
   1126  f550		       a5 87		      LDA	ENAM1Cache	;3
   1127  f552		       85 1e		      STA	ENAM1	;3
   1128  f554
   1129  f554		       a9 00		      LDA	#0	;2
   1130  f556							;STA PF1Cache ;3
   1131  f556		       85 84		      STA	GRP1Cache	;3
   1132  f558		       85 85		      STA	ENABLCache	;3
   1133  f55a		       85 86		      STA	ENAM0Cache	;3
   1134  f55c		       85 87		      STA	ENAM1Cache	; 3
   1135  f55e
   1136  f55e							;BEQ DrawTraffic3
   1137  f55e				   DrawTraffic1 		; 33
   1138  f55e		       98		      TYA		; 2
   1139  f55f		       18		      CLC		; 2 
   1140  f560		       65 95		      ADC	TrafficOffset1 + 1	;3
   1141  f562		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1142  f564		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1143  f566		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1144  f568		       4c 6d f5 	      JMP	AfterEorOffsetWithCarry	; 3
   1145  f56b				   EorOffsetWithCarry
   1146  f56b		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1147  f56d				   AfterEorOffsetWithCarry		;17
   1148  f56d		       aa		      TAX		;2
   1149  f56e		       bd 00 fe 	      LDA	AesTable,X	; 4
   1150  f571		       c5 c1		      CMP	TrafficChance	;3
   1151  f573		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1152  f575		       a9 ff		      LDA	#$FF	;2
   1153  f577		       85 84		      STA	GRP1Cache	;3
   1154  f579				   FinishDrawTraffic1
   1155  f579
   1156  f579				   DrawTraffic2 		; 33
   1157  f579		       98		      TYA		; 2
   1158  f57a		       18		      CLC		; 2 
   1159  f57b		       65 99		      ADC	TrafficOffset2 + 1	;3
   1160  f57d		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1161  f57f		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1162  f581		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1163  f583		       4c 88 f5 	      JMP	AfterEorOffsetWithCarry2	; 3
   1164  f586				   EorOffsetWithCarry2
   1165  f586		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1166  f588				   AfterEorOffsetWithCarry2		;17
   1167  f588		       aa		      TAX		;2
   1168  f589		       bd 00 fe 	      LDA	AesTable,X	; 4
   1169  f58c		       c5 c1		      CMP	TrafficChance	;3
   1170  f58e		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1171  f590		       a9 02		      LDA	#%00000010	;2
   1172  f592		       85 85		      STA	ENABLCache	;3
   1173  f594				   FinishDrawTraffic2
   1174  f594
   1175  f594							;STA WSYNC ;65 / 137
   1176  f594
   1177  f594							; LDA Tmp0 ; Flicker this line if drawing car
   1178  f594							; BEQ FinishDrawTraffic4
   1179  f594				   DrawTraffic3 		; 33
   1180  f594		       98		      TYA		; 2
   1181  f595		       18		      CLC		; 2 
   1182  f596		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1183  f598		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1184  f59a		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1185  f59c		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1186  f59e		       4c a3 f5 	      JMP	AfterEorOffsetWithCarry3	; 3
   1187  f5a1				   EorOffsetWithCarry3
   1188  f5a1		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1189  f5a3				   AfterEorOffsetWithCarry3		;17
   1190  f5a3		       aa		      TAX		;2
   1191  f5a4		       bd 00 fe 	      LDA	AesTable,X	; 4
   1192  f5a7		       c5 c1		      CMP	TrafficChance	;3
   1193  f5a9		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1194  f5ab		       a9 02		      LDA	#%00000010	;2
   1195  f5ad		       85 86		      STA	ENAM0Cache
   1196  f5af				   FinishDrawTraffic3
   1197  f5af
   1198  f5af				   DrawTraffic4 		; 33
   1199  f5af		       98		      TYA		; 2
   1200  f5b0		       18		      CLC		; 2 
   1201  f5b1		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1202  f5b3		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1203  f5b5		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1204  f5b7		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1205  f5b9		       4c be f5 	      JMP	AfterEorOffsetWithCarry4	; 3
   1206  f5bc				   EorOffsetWithCarry4
   1207  f5bc		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1208  f5be				   AfterEorOffsetWithCarry4		;17
   1209  f5be		       aa		      TAX		;2
   1210  f5bf		       bd 00 fe 	      LDA	AesTable,X	; 4
   1211  f5c2		       c5 c1		      CMP	TrafficChance	;3
   1212  f5c4		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1213  f5c6		       a9 02		      LDA	#%00000010	;2
   1214  f5c8		       85 87		      STA	ENAM1Cache	;3
   1215  f5ca				   FinishDrawTraffic4
   1216  f5ca
   1217  f5ca				   DrawTraffic0 		; 20 / 22 2pe
   1218  f5ca		       98		      TYA		; 2
   1219  f5cb		       18		      CLC		; 2 
   1220  f5cc		       65 91		      ADC	TrafficOffset0 + 1	;3
   1221  f5ce		       29 04		      AND	#%00000100	;2
   1222  f5d0		       f0 05		      BEQ	HasNoBorderP0	;4
   1223  f5d2				   HasBorderP0
   1224  f5d2		       a9 f0		      LDA	#$F0	; 2
   1225  f5d4		       4c d9 f5 	      JMP	StoreBorderP0	; 3
   1226  f5d7				   HasNoBorderP0
   1227  f5d7		       a9 00		      LDA	#0	; 2
   1228  f5d9				   StoreBorderP0
   1229  f5d9		       85 81		      STA	PF0Cache	; 3
   1230  f5db							;STA PF2Cache ; 3
   1231  f5db
   1232  f5db
   1233  f5db				   SkipDrawTraffic0
   1234  f5db
   1235  f5db				   WhileScanLoop
   1236  f5db		       88		      DEY		;2
   1237  f5dc		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1238  f5de		       4c 32 f5 	      JMP	ScanLoop	;3
   1239  f5e1				   FinishScanLoop		; 7 209 of 222
   1240  f5e1
   1241  f5e1		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1242  f5e3		       20 25 f7 	      JSR	LoadAll
   1243  f5e6		       85 02		      STA	WSYNC	; do stuff!
   1244  f5e8		       85 02		      STA	WSYNC
   1245  f5ea		       85 02		      STA	WSYNC
   1246  f5ec							;42 cycles to use here
   1247  f5ec
   1248  f5ec				   PrepareOverscan
   1249  f5ec		       a9 02		      LDA	#2
   1250  f5ee		       85 02		      STA	WSYNC
   1251  f5f0		       85 01		      STA	VBLANK
   1252  f5f2
   1253  f5f2		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1254  f5f4		       8d 96 02 	      STA	TIM64T
   1255  f5f7
   1256  f5f7				   LeftSound		;41
   1257  f5f7		       a5 ba		      LDA	CountdownTimer	;3
   1258  f5f9		       f0 1b		      BEQ	EngineOff	;2
   1259  f5fb		       a6 ad		      LDX	Gear
   1260  f5fd		       a5 8e		      LDA	Player0SpeedL	;3
   1261  f5ff		       4a		      LSR		;2
   1262  f600		       4a		      LSR		;2
   1263  f601		       4a		      LSR		;2
   1264  f602		       29 0f		      AND	#%00001111	;2
   1265  f604		       85 b0		      STA	Tmp0	;3
   1266  f606		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1267  f609		       38		      SEC		;2
   1268  f60a		       e5 b0		      SBC	Tmp0	;3
   1269  f60c		       85 17		      STA	AUDF0	;3
   1270  f60e		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1271  f611		       85 15		      STA	AUDC0	;3
   1272  f613		       4c 1a f6 	      JMP	EndLeftSound	;3
   1273  f616				   EngineOff
   1274  f616		       a9 00		      LDA	#0
   1275  f618		       85 15		      STA	AUDC0
   1276  f61a
   1277  f61a				   EndLeftSound
   1278  f61a
   1279  f61a
   1280  f61a				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1281  f61a		       a5 d5		      LDA	ScoreFontColor	;3
   1282  f61c		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1283  f61e		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1284  f620		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1285  f622		       f0 29		      BEQ	PlayCheckpoint	;2
   1286  f624		       a5 b8		      LDA	CollisionCounter	;3
   1287  f626		       c9 e0		      CMP	#$E0	;2
   1288  f628		       b0 14		      BCS	PlayColision	;2
   1289  f62a		       a5 d7		      LDA	NextCheckpoint	;3
   1290  f62c		       38		      SEC		;2
   1291  f62d		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1292  f62f		       c9 02		      CMP	#$02	;2
   1293  f631		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1294  f633		       a5 ba		      LDA	CountdownTimer	; 3
   1295  f635		       f0 53		      BEQ	MuteRightSound	;2
   1296  f637		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1297  f639		       90 37		      BCC	PlayWarnTimeEnding	;4
   1298  f63b		       4c 8a f6 	      JMP	MuteRightSound	;3
   1299  f63e				   PlayColision
   1300  f63e		       a9 1f		      LDA	#31
   1301  f640		       85 18		      STA	AUDF1
   1302  f642		       a9 08		      LDA	#8
   1303  f644		       85 16		      STA	AUDC1
   1304  f646		       a9 08		      LDA	#8
   1305  f648		       85 1a		      STA	AUDV1
   1306  f64a		       4c 8e f6 	      JMP	EndRightSound
   1307  f64d
   1308  f64d				   PlayCheckpoint
   1309  f64d		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1310  f64f		       4a		      LSR		;2
   1311  f650		       4a		      LSR		;2
   1312  f651		       4a		      LSR		;2
   1313  f652		       85 18		      STA	AUDF1	;3
   1314  f654		       a9 0c		      LDA	#12	;2
   1315  f656		       85 16		      STA	AUDC1	;3
   1316  f658		       a9 06		      LDA	#6	;2
   1317  f65a		       85 1a		      STA	AUDV1	;3
   1318  f65c		       4c 8e f6 	      JMP	EndRightSound	;3
   1319  f65f
   1320  f65f				   PlayBeforeCheckpoint
   1321  f65f		       a5 8c		      LDA	FrameCount0	;3
   1322  f661		       29 1c		      AND	#%00011100	;2
   1323  f663		       09 03		      ORA	#%00000011	;2
   1324  f665		       85 18		      STA	AUDF1	;3
   1325  f667		       a9 0c		      LDA	#12	;2
   1326  f669		       85 16		      STA	AUDC1	;3
   1327  f66b		       a9 03		      LDA	#3	;2
   1328  f66d		       85 1a		      STA	AUDV1	;3
   1329  f66f		       4c 8e f6 	      JMP	EndRightSound	;3
   1330  f672
   1331  f672				   PlayWarnTimeEnding
   1332  f672		       a5 8c		      LDA	FrameCount0	;3
   1333  f674		       29 04		      AND	#%00000100	;2
   1334  f676		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1335  f678		       18		      CLC		;2
   1336  f679		       a9 0a		      LDA	#10	;2
   1337  f67b		       65 ba		      ADC	CountdownTimer	;2
   1338  f67d		       85 18		      STA	AUDF1	;3
   1339  f67f		       a9 0c		      LDA	#12	;2
   1340  f681		       85 16		      STA	AUDC1	;3
   1341  f683		       a9 03		      LDA	#3	;2
   1342  f685		       85 1a		      STA	AUDV1	;3
   1343  f687		       4c 8e f6 	      JMP	EndRightSound	;3
   1344  f68a
   1345  f68a				   MuteRightSound
   1346  f68a		       a9 00		      LDA	#0
   1347  f68c		       85 1a		      STA	AUDV1
   1348  f68e				   EndRightSound
   1349  f68e
   1350  f68e							;Read Fire Button before, will make it start the game for now.
   1351  f68e				   StartGame
   1352  f68e		       a5 0c		      LDA	INPT4	;3
   1353  f690		       30 2b		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
   1354  f692		       a5 c0		      LDA	GameStatus	;3
   1355  f694		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
   1356  f696		       d0 25		      BNE	SkipGameStart
   1357  f698		       a5 c5		      LDA	GameMode
   1358  f69a		       c9 10		      CMP	#MAX_GAME_MODE
   1359  f69c		       d0 0b		      BNE	SetGameRunning
   1360  f69e		       a9 00		      LDA	#0
   1361  f6a0		       85 c5		      STA	GameMode
   1362  f6a2		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1363  f6a4		       85 bc		      STA	SwitchDebounceCounter
   1364  f6a6		       4c bd f6 	      JMP	SkipGameStart
   1365  f6a9				   SetGameRunning
   1366  f6a9		       e6 c0		      INC	GameStatus
   1367  f6ab		       a9 00		      LDA	#0	;
   1368  f6ad		       85 8c		      STA	FrameCount0
   1369  f6af		       85 8d		      STA	FrameCount1
   1370  f6b1		       a9 0a		      LDA	#10
   1371  f6b3		       85 19		      STA	AUDV0
   1372  f6b5		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
   1373  f6b7		       85 d5		      STA	ScoreFontColor
   1374  f6b9		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
   1375  f6bb		       85 d6		      STA	ScoreFontColorHoldChange
   1376  f6bd				   SkipGameStart
   1377  f6bd
   1378  f6bd				   ReadSwitches
   1379  f6bd		       a6 bc		      LDX	SwitchDebounceCounter
   1380  f6bf		       d0 31		      BNE	DecrementSwitchDebounceCounter
   1381  f6c1		       a9 01		      LDA	#%00000001
   1382  f6c3		       2c 82 02 	      BIT	SWCHB
   1383  f6c6		       d0 07		      BNE	SkipReset
   1384  f6c8		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1385  f6ca		       85 bc		      STA	SwitchDebounceCounter
   1386  f6cc		       4c fc f6 	      JMP	OverScanWaitBeforeReset
   1387  f6cf				   SkipReset
   1388  f6cf
   1389  f6cf				   GameModeSelect
   1390  f6cf		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
   1391  f6d1		       d0 1c		      BNE	SkipGameSelect
   1392  f6d3		       20 51 f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
   1393  f6d6				   ContinueGameSelect
   1394  f6d6		       a9 02		      LDA	#%00000010
   1395  f6d8		       2c 82 02 	      BIT	SWCHB
   1396  f6db		       d0 12		      BNE	SkipGameSelect
   1397  f6dd		       a6 c5		      LDX	GameMode
   1398  f6df		       e0 10		      CPX	#MAX_GAME_MODE
   1399  f6e1		       f0 04		      BEQ	ResetGameMode
   1400  f6e3		       e8		      INX
   1401  f6e4		       4c e9 f6 	      JMP	StoreGameMode
   1402  f6e7				   ResetGameMode
   1403  f6e7		       a2 00		      LDX	#0
   1404  f6e9				   StoreGameMode
   1405  f6e9		       86 c5		      STX	GameMode
   1406  f6eb		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
   1407  f6ed		       85 bc		      STA	SwitchDebounceCounter
   1408  f6ef				   SkipGameSelect
   1409  f6ef		       4c f4 f6 	      JMP	EndReadSwitches
   1410  f6f2				   DecrementSwitchDebounceCounter
   1411  f6f2		       c6 bc		      DEC	SwitchDebounceCounter
   1412  f6f4				   EndReadSwitches
   1413  f6f4
   1414  f6f4				   OverScanWait
   1415  f6f4		       ad 84 02 	      LDA	INTIM
   1416  f6f7		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1417  f6f9		       4c d0 f0 	      JMP	MainLoop
   1418  f6fc
   1419  f6fc				   OverScanWaitBeforeReset
   1420  f6fc		       ad 84 02 	      LDA	INTIM
   1421  f6ff		       d0 fb		      BNE	OverScanWaitBeforeReset	;Is there a better way?	
   1422  f701		       4c 10 f0 	      JMP	Start
   1423  f704
   1424  f704				   Subroutines
   1425  f704
   1426  f704				   ClearAll		; 52
   1427  f704		       a9 00		      LDA	#0	;2
   1428  f706		       85 1c		      STA	GRP1	;3
   1429  f708		       85 1f		      STA	ENABL	;3
   1430  f70a		       85 1d		      STA	ENAM0	;3
   1431  f70c		       85 1e		      STA	ENAM1	;3
   1432  f70e		       85 84		      STA	GRP1Cache	;3
   1433  f710		       85 85		      STA	ENABLCache	;3
   1434  f712		       85 86		      STA	ENAM0Cache	;3
   1435  f714		       85 87		      STA	ENAM1Cache	;3
   1436  f716
   1437  f716				   ClearPF		; 26
   1438  f716		       a9 00		      LDA	#0	;2
   1439  f718				   ClearPFSkipLDA0
   1440  f718		       85 0d		      STA	PF0	;3
   1441  f71a		       85 0e		      STA	PF1	;3
   1442  f71c		       85 0f		      STA	PF2	;3	
   1443  f71e		       85 81		      STA	PF0Cache	;3
   1444  f720		       85 82		      STA	PF1Cache	;3
   1445  f722		       85 83		      STA	PF2Cache	;3 
   1446  f724		       60		      RTS		;6
   1447  f725				   EndClearAll
   1448  f725
   1449  f725				   LoadAll		; 48
   1450  f725		       a5 81		      LDA	PF0Cache	;3
   1451  f727		       85 0d		      STA	PF0	;3
   1452  f729
   1453  f729		       a5 82		      LDA	PF1Cache	;3
   1454  f72b		       85 0e		      STA	PF1	;3
   1455  f72d
   1456  f72d		       a5 83		      LDA	PF2Cache	;3
   1457  f72f		       85 0f		      STA	PF2	;3
   1458  f731
   1459  f731		       a5 84		      LDA	GRP1Cache	;3
   1460  f733		       85 1c		      STA	GRP1	;3
   1461  f735
   1462  f735		       a5 85		      LDA	ENABLCache	;3
   1463  f737		       85 1f		      STA	ENABL	;3
   1464  f739
   1465  f739		       a5 86		      LDA	ENAM0Cache	;3
   1466  f73b		       85 1d		      STA	ENAM0	;3
   1467  f73d
   1468  f73d		       a5 87		      LDA	ENAM1Cache	;3
   1469  f73f		       85 1e		      STA	ENAM1	;3
   1470  f741
   1471  f741		       60		      RTS		;6
   1472  f742				   EndLoadAll
   1473  f742
   1474  f742				   NextDifficulty
   1475  f742		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1476  f744		       29 01		      AND	#%00000001
   1477  f746		       d0 24		      BNE	CheckRandomDifficulty
   1478  f748
   1479  f748		       a5 c4		      LDA	CurrentDifficulty
   1480  f74a		       18		      CLC
   1481  f74b		       69 01		      ADC	#1
   1482  f74d		       29 03		      AND	#%00000011	; 0 to 3
   1483  f74f		       85 c4		      STA	CurrentDifficulty
   1484  f751
   1485  f751				   ConfigureDifficulty
   1486  f751		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1487  f753		       b9 e7 ff 	      LDA	TrafficChanceTable,Y
   1488  f756		       85 c1		      STA	TrafficChance
   1489  f758		       b9 e3 ff 	      LDA	TrafficColorTable,Y
   1490  f75b		       85 c3		      STA	TrafficColor
   1491  f75d
   1492  f75d		       a5 c5		      LDA	GameMode	;
   1493  f75f		       29 01		      AND	#%00000001
   1494  f761		       f0 03		      BEQ	UseNextDifficultyTime
   1495  f763		       4c 67 f7 	      JMP	StoreDifficultyTime
   1496  f766				   UseNextDifficultyTime
   1497  f766		       c8		      INY
   1498  f767				   StoreDifficultyTime
   1499  f767		       b9 eb ff 	      LDA	TrafficTimeTable,Y
   1500  f76a		       85 c2		      STA	CheckpointTime
   1501  f76c
   1502  f76c				   CheckRandomDifficulty
   1503  f76c		       a5 c5		      LDA	GameMode
   1504  f76e		       29 08		      AND	#%00001000	; Random difficulties
   1505  f770		       f0 09		      BEQ	ReturnFromNextDifficulty
   1506  f772				   RandomDifficulty
   1507  f772		       a6 8c		      LDX	FrameCount0
   1508  f774		       bd 00 fe 	      LDA	AesTable,X
   1509  f777							;EOR TrafficChance, no need, lets make life simple
   1510  f777		       29 3f		      AND	#%00111111
   1511  f779		       85 c1		      STA	TrafficChance
   1512  f77b
   1513  f77b				   ReturnFromNextDifficulty
   1514  f77b		       60		      RTS
   1515  f77c				   EndNextDifficulty
   1516  f77c
   1517  f77c				   DefaultOffsets
   1518  f77c		       a9 20		      LDA	#$20
   1519  f77e		       85 96		      STA	TrafficOffset1 + 2
   1520  f780		       a9 40		      LDA	#$40
   1521  f782		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1522  f784		       a9 60		      LDA	#$60
   1523  f786		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1524  f788		       a9 80		      LDA	#$80
   1525  f78a		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1526  f78c		       a9 a0		      LDA	#$A0
   1527  f78e		       60		      RTS
   1528  f78f
   1529  f78f				   PrintStaticText		; Preload X with the offset referent to StaticText
   1530  f78f		       bd 00 ff 	      LDA	StaticText,X
   1531  f792		       85 d0		      STA	ScoreD0
   1532  f794		       e8		      INX
   1533  f795		       bd 00 ff 	      LDA	StaticText,X
   1534  f798		       85 d1		      STA	ScoreD1
   1535  f79a		       e8		      INX
   1536  f79b		       bd 00 ff 	      LDA	StaticText,X
   1537  f79e		       85 d2		      STA	ScoreD2
   1538  f7a0		       e8		      INX
   1539  f7a1		       bd 00 ff 	      LDA	StaticText,X
   1540  f7a4		       85 d3		      STA	ScoreD3
   1541  f7a6		       e8		      INX
   1542  f7a7		       bd 00 ff 	      LDA	StaticText,X
   1543  f7aa		       85 d4		      STA	ScoreD4
   1544  f7ac		       60		      RTS
   1545  f7ad
   1546  f7ad				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1547  f7ad		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1548  f7af		       85 d5		      STA	ScoreFontColor
   1549  f7b1		       a9 01		      LDA	#1
   1550  f7b3		       85 d6		      STA	ScoreFontColorHoldChange
   1551  f7b5
   1552  f7b5		       a5 8d		      LDA	FrameCount1
   1553  f7b7		       29 07		      AND	#%00000111
   1554  f7b9		       85 b3		      STA	Tmp3
   1555  f7bb							;0 is Zelda Name, (default)
   1556  f7bb		       a9 01		      LDA	#1
   1557  f7bd		       c5 b3		      CMP	Tmp3
   1558  f7bf		       f0 38		      BEQ	PrintZeldaDateLeft
   1559  f7c1
   1560  f7c1		       a9 02		      LDA	#2
   1561  f7c3		       c5 b3		      CMP	Tmp3
   1562  f7c5		       f0 23		      BEQ	PrintPolvinhosLeft
   1563  f7c7
   1564  f7c7		       a9 03		      LDA	#3
   1565  f7c9		       c5 b3		      CMP	Tmp3
   1566  f7cb		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1567  f7cd
   1568  f7cd		       a9 04		      LDA	#4
   1569  f7cf		       c5 b3		      CMP	Tmp3
   1570  f7d1		       f0 1c		      BEQ	PrintIvonneLeft
   1571  f7d3
   1572  f7d3		       a9 05		      LDA	#5
   1573  f7d5		       c5 b3		      CMP	Tmp3
   1574  f7d7		       f0 2a		      BEQ	PrintIvonneDateLeft
   1575  f7d9
   1576  f7d9		       a9 06		      LDA	#6
   1577  f7db		       c5 b3		      CMP	Tmp3
   1578  f7dd		       f0 15		      BEQ	PrintArtLeft
   1579  f7df
   1580  f7df		       a9 07		      LDA	#7
   1581  f7e1		       c5 b3		      CMP	Tmp3
   1582  f7e3		       f0 23		      BEQ	PrintLeonardoLeft
   1583  f7e5
   1584  f7e5				   PrintZeldaLeft
   1585  f7e5		       a2 28		      LDX	#<ZeldaTextLeft
   1586  f7e7		       4c 0d f8 	      JMP	ProcessPrintEasterEgg
   1587  f7ea				   PrintPolvinhosLeft
   1588  f7ea		       a2 3c		      LDX	#<PolvinhosTextLeft
   1589  f7ec		       4c 0d f8 	      JMP	ProcessPrintEasterEgg
   1590  f7ef				   PrintIvonneLeft
   1591  f7ef		       a2 50		      LDX	#<IvonneTextLeft
   1592  f7f1		       4c 0d f8 	      JMP	ProcessPrintEasterEgg
   1593  f7f4				   PrintArtLeft
   1594  f7f4		       a2 64		      LDX	#<PaperArtTextLeft
   1595  f7f6		       4c 0d f8 	      JMP	ProcessPrintEasterEgg
   1596  f7f9
   1597  f7f9				   PrintZeldaDateLeft
   1598  f7f9		       a2 32		      LDX	#<ZeldaDateLeft
   1599  f7fb		       4c 0d f8 	      JMP	ProcessPrintEasterEgg
   1600  f7fe				   PrintPolvinhosDateLeft
   1601  f7fe		       a2 46		      LDX	#<PolvinhosDateLeft
   1602  f800		       4c 0d f8 	      JMP	ProcessPrintEasterEgg
   1603  f803				   PrintIvonneDateLeft
   1604  f803		       a2 5a		      LDX	#<IvonneDateLeft
   1605  f805		       4c 0d f8 	      JMP	ProcessPrintEasterEgg
   1606  f808				   PrintLeonardoLeft
   1607  f808		       a2 6e		      LDX	#<LeonardoTextLeft
   1608  f80a		       4c 0d f8 	      JMP	ProcessPrintEasterEgg
   1609  f80d
   1610  f80d				   ProcessPrintEasterEgg
   1611  f80d		       a5 8c		      LDA	FrameCount0	;3
   1612  f80f		       29 01		      AND	#%00000001	;2
   1613  f811		       d0 03		      BNE	TranformIntoRightText
   1614  f813		       4c 1b f8 	      JMP	PrintEasterEggText
   1615  f816				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1616  f816		       8a		      TXA
   1617  f817		       18		      CLC
   1618  f818		       69 05		      ADC	#HALF_TEXT_SIZE
   1619  f81a		       aa		      TAX
   1620  f81b
   1621  f81b				   PrintEasterEggText
   1622  f81b		       20 8f f7 	      JSR	PrintStaticText
   1623  f81e		       60		      RTS
   1624  f81f
   1625  f81f				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1626  f81f		       a2 00		      LDX	#0
   1627  f821		       a0 04		      LDY	#FONT_OFFSET
   1628  f823
   1629  f823				   ScoreLoop		; 20 
   1630  f823		       85 02		      STA	WSYNC	;2
   1631  f825
   1632  f825		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1633  f827		       85 0d		      STA	PF0	;3
   1634  f829
   1635  f829		       a5 82		      LDA	PF1Cache	;3
   1636  f82b		       85 0e		      STA	PF1	;3
   1637  f82d
   1638  f82d		       a5 83		      LDA	PF2Cache	;3
   1639  f82f		       85 0f		      STA	PF2	;3
   1640  f831
   1641  f831				   DrawScoreD0		; 15
   1642  f831		       a6 d0		      LDX	ScoreD0	; 3
   1643  f833		       bd 00 fd 	      LDA	Font,X	;4
   1644  f836		       85 81		      STA	PF0Cache	;3
   1645  f838		       c6 d0		      DEC	ScoreD0	;5
   1646  f83a
   1647  f83a				   DrawScoreD1		; 23	
   1648  f83a		       a6 d1		      LDX	ScoreD1	; 3
   1649  f83c		       bd 00 fd 	      LDA	Font,X	;4
   1650  f83f		       0a		      ASL		;2
   1651  f840		       0a		      ASL		;2
   1652  f841		       0a		      ASL		;2
   1653  f842		       0a		      ASL		;2
   1654  f843		       85 82		      STA	PF1Cache	;3
   1655  f845		       c6 d1		      DEC	ScoreD1	;5
   1656  f847
   1657  f847				   DrawScoreD2		; 20
   1658  f847		       a6 d2		      LDX	ScoreD2	; 3
   1659  f849		       bd 00 fd 	      LDA	Font,X	;4
   1660  f84c		       29 0f		      AND	#%00001111	;2
   1661  f84e		       05 82		      ORA	PF1Cache	;3
   1662  f850		       85 82		      STA	PF1Cache	;3
   1663  f852		       c6 d2		      DEC	ScoreD2	;5
   1664  f854
   1665  f854				   DrawScoreD3		; 23
   1666  f854		       a6 d3		      LDX	ScoreD3	; 3
   1667  f856		       bd 00 fd 	      LDA	Font,X	;4
   1668  f859		       4a		      LSR		;2
   1669  f85a		       4a		      LSR		;2
   1670  f85b		       4a		      LSR		;2
   1671  f85c		       4a		      LSR		;2
   1672  f85d		       85 83		      STA	PF2Cache	;3
   1673  f85f		       c6 d3		      DEC	ScoreD3	;5
   1674  f861
   1675  f861				   DrawScoreD4		; 20
   1676  f861		       a6 d4		      LDX	ScoreD4	; 3
   1677  f863		       bd 00 fd 	      LDA	Font,X	;4
   1678  f866		       29 f0		      AND	#%11110000	;2
   1679  f868		       05 83		      ORA	PF2Cache	;3
   1680  f86a		       85 83		      STA	PF2Cache	;3
   1681  f86c		       c6 d4		      DEC	ScoreD4	;5
   1682  f86e
   1683  f86e
   1684  f86e		       88		      DEY		;2
   1685  f86f		       10 b2		      BPL	ScoreLoop	;4
   1686  f871
   1687  f871		       85 02		      STA	WSYNC
   1688  f873		       20 25 f7 	      JSR	LoadAll
   1689  f876		       60		      RTS		; 6
   1690  f877
   1691  f877				   PrintRightDecimalDigits
   1692  f877		       b9 00 00 	      LDA	0,Y
   1693  f87a		       4a		      LSR
   1694  f87b		       4a		      LSR
   1695  f87c		       4a		      LSR
   1696  f87d		       4a		      LSR
   1697  f87e		       aa		      TAX
   1698  f87f		       bd be fd 	      LDA	FontLookup,X	;4
   1699  f882		       85 d2		      STA	ScoreD2	;3
   1700  f884
   1701  f884		       b9 00 00 	      LDA	0,Y
   1702  f887		       29 0f		      AND	#%00001111
   1703  f889		       aa		      TAX
   1704  f88a		       bd be fd 	      LDA	FontLookup,X	;4
   1705  f88d		       85 d3		      STA	ScoreD3	;3
   1706  f88f
   1707  f88f		       c8		      INY
   1708  f890		       b9 00 00 	      LDA	0,Y
   1709  f893		       4a		      LSR
   1710  f894		       4a		      LSR
   1711  f895		       4a		      LSR
   1712  f896		       4a		      LSR
   1713  f897		       aa		      TAX
   1714  f898		       bd be fd 	      LDA	FontLookup,X	;4
   1715  f89b		       85 d0		      STA	ScoreD0	;3
   1716  f89d
   1717  f89d		       b9 00 00 	      LDA	0,Y
   1718  f8a0		       29 0f		      AND	#%00001111
   1719  f8a2		       aa		      TAX
   1720  f8a3		       bd be fd 	      LDA	FontLookup,X	;4
   1721  f8a6		       85 d1		      STA	ScoreD1	;3
   1722  f8a8
   1723  f8a8		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1724  f8aa		       85 d4		      STA	ScoreD4
   1725  f8ac		       60		      RTS
   1726  f8ad
   1727  f8ad				   PrintLastLeftDecimalDigits
   1728  f8ad		       b9 00 00 	      LDA	0,Y
   1729  f8b0		       4a		      LSR
   1730  f8b1		       4a		      LSR
   1731  f8b2		       4a		      LSR
   1732  f8b3		       4a		      LSR
   1733  f8b4		       aa		      TAX
   1734  f8b5		       bd be fd 	      LDA	FontLookup,X	;4
   1735  f8b8		       85 d3		      STA	ScoreD3	;3
   1736  f8ba		       b9 00 00 	      LDA	0,Y
   1737  f8bd		       29 0f		      AND	#%00001111
   1738  f8bf		       aa		      TAX
   1739  f8c0		       bd be fd 	      LDA	FontLookup,X	;4
   1740  f8c3		       85 d4		      STA	ScoreD4	;3
   1741  f8c5		       60		      RTS
   1742  f8c6
   1743  f8c6				   PrintZerosLeft
   1744  f8c6		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1745  f8c8		       85 d2		      STA	ScoreD2
   1746  f8ca		       85 d3		      STA	ScoreD3
   1747  f8cc		       85 d4		      STA	ScoreD4
   1748  f8ce		       60		      RTS
   1749  f8cf
   1750  f8cf				   DrawGameOverScoreLine
   1751  f8cf		       85 02		      STA	WSYNC
   1752  f8d1		       20 1f f8 	      JSR	PrintScore
   1753  f8d4		       85 02		      STA	WSYNC
   1754  f8d6		       85 02		      STA	WSYNC
   1755  f8d8		       20 16 f7 	      JSR	ClearPF
   1756  f8db		       60		      RTS
   1757  f8dc
   1758  f8dc				   DrawGameOverScreenLeft
   1759  f8dc		       85 02		      STA	WSYNC
   1760  f8de		       20 16 f7 	      JSR	ClearPF
   1761  f8e1
   1762  f8e1				   DrawBcdScoreLeft
   1763  f8e1		       20 30 fa 	      JSR	Sleep8Lines
   1764  f8e4		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1765  f8e6		       85 06		      STA	COLUP0
   1766  f8e8		       85 02		      STA	WSYNC
   1767  f8ea		       a9 86		      LDA	#<CS + #FONT_OFFSET
   1768  f8ec		       85 d0		      STA	ScoreD0
   1769  f8ee
   1770  f8ee		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1771  f8f0		       85 d1		      STA	ScoreD1
   1772  f8f2
   1773  f8f2		       a5 b7		      LDA	ScoreBcd3
   1774  f8f4		       29 0f		      AND	#%00001111
   1775  f8f6		       aa		      TAX
   1776  f8f7		       bd be fd 	      LDA	FontLookup,X	;4
   1777  f8fa		       85 d2		      STA	ScoreD2	;3
   1778  f8fc
   1779  f8fc		       a0 b6		      LDY	#ScoreBcd2
   1780  f8fe		       20 ad f8 	      JSR	PrintLastLeftDecimalDigits
   1781  f901
   1782  f901		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1783  f904
   1784  f904				   DrawTimerLeft
   1785  f904		       20 30 fa 	      JSR	Sleep8Lines
   1786  f907		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1787  f909		       85 06		      STA	COLUP0
   1788  f90b		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   1789  f90d		       85 d0		      STA	ScoreD0
   1790  f90f		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1791  f911		       85 d1		      STA	ScoreD1
   1792  f913		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   1793  f915		       85 d2		      STA	ScoreD2
   1794  f917		       a0 bf		      LDY	#TimeBcd2
   1795  f919		       85 02		      STA	WSYNC
   1796  f91b		       20 ad f8 	      JSR	PrintLastLeftDecimalDigits
   1797  f91e		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1798  f921
   1799  f921				   DrawGlideTimerLeft
   1800  f921		       20 30 fa 	      JSR	Sleep8Lines
   1801  f924		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1802  f926		       85 06		      STA	COLUP0
   1803  f928		       85 02		      STA	WSYNC
   1804  f92a		       a9 54		      LDA	#<CG + #FONT_OFFSET
   1805  f92c		       85 d0		      STA	ScoreD0
   1806  f92e		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1807  f930		       85 d1		      STA	ScoreD1
   1808  f932		       20 c6 f8 	      JSR	PrintZerosLeft
   1809  f935		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1810  f938
   1811  f938				   DrawHitCountLeft
   1812  f938		       20 30 fa 	      JSR	Sleep8Lines
   1813  f93b		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1814  f93d		       85 06		      STA	COLUP0
   1815  f93f		       85 02		      STA	WSYNC
   1816  f941		       a9 59		      LDA	#<CH + #FONT_OFFSET
   1817  f943		       85 d0		      STA	ScoreD0
   1818  f945		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1819  f947		       85 d1		      STA	ScoreD1
   1820  f949		       20 c6 f8 	      JSR	PrintZerosLeft
   1821  f94c		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1822  f94f
   1823  f94f				   DrawCheckpointCountLeft
   1824  f94f		       20 30 fa 	      JSR	Sleep8Lines
   1825  f952		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1826  f954		       85 06		      STA	COLUP0
   1827  f956		       85 02		      STA	WSYNC
   1828  f958		       a9 40		      LDA	#<CC + #FONT_OFFSET
   1829  f95a		       85 d0		      STA	ScoreD0
   1830  f95c		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   1831  f95e		       85 d1		      STA	ScoreD1
   1832  f960		       20 c6 f8 	      JSR	PrintZerosLeft
   1833  f963		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1834  f966
   1835  f966				   DrawGameVersionLeft
   1836  f966		       20 30 fa 	      JSR	Sleep8Lines
   1837  f969		       a9 49		      LDA	#VERSION_COLOR
   1838  f96b		       85 06		      STA	COLUP0
   1839  f96d
   1840  f96d		       a5 c5		      LDA	GameMode
   1841  f96f		       aa		      TAX
   1842  f970		       bd be fd 	      LDA	FontLookup,X	;4
   1843  f973		       85 d0		      STA	ScoreD0	;3
   1844  f975
   1845  f975		       a5 a9		      LDA	CurrentCarId
   1846  f977		       aa		      TAX
   1847  f978		       bd be fd 	      LDA	FontLookup,X	;4
   1848  f97b		       85 d1		      STA	ScoreD1	;3
   1849  f97d
   1850  f97d		       a5 a6		      LDA	StartSWCHB
   1851  f97f		       29 40		      AND	#%01000000	; P0 difficulty
   1852  f981		       49 40		      EOR	#%01000000	; Reverse bytes
   1853  f983		       2a		      ROL
   1854  f984		       2a		      ROL
   1855  f985		       2a		      ROL
   1856  f986		       18		      CLC
   1857  f987		       69 0a		      ADC	#10
   1858  f989		       aa		      TAX
   1859  f98a		       bd be fd 	      LDA	FontLookup,X	;4
   1860  f98d		       85 d2		      STA	ScoreD2	;3
   1861  f98f
   1862  f98f		       a5 a6		      LDA	StartSWCHB
   1863  f991		       29 80		      AND	#%10000000	; P0 difficulty
   1864  f993		       49 80		      EOR	#%10000000	; Reverse bytes
   1865  f995		       2a		      ROL
   1866  f996		       2a		      ROL
   1867  f997		       18		      CLC
   1868  f998		       69 0a		      ADC	#10
   1869  f99a		       aa		      TAX
   1870  f99b		       bd be fd 	      LDA	FontLookup,X	;4
   1871  f99e		       85 d3		      STA	ScoreD3	;3
   1872  f9a0
   1873  f9a0		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   1874  f9a2		       85 d4		      STA	ScoreD4
   1875  f9a4
   1876  f9a4		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1877  f9a7
   1878  f9a7		       4c 0d fa 	      JMP	FinalizeDrawGameOver
   1879  f9aa
   1880  f9aa				   DrawGameOverScreenRight
   1881  f9aa		       85 02		      STA	WSYNC
   1882  f9ac		       20 16 f7 	      JSR	ClearPF
   1883  f9af
   1884  f9af				   DrawBcdScoreRight
   1885  f9af		       20 30 fa 	      JSR	Sleep8Lines
   1886  f9b2		       a9 f9		      LDA	#SCORE_FONT_COLOR
   1887  f9b4		       85 07		      STA	COLUP1
   1888  f9b6		       85 02		      STA	WSYNC
   1889  f9b8		       a0 b4		      LDY	#ScoreBcd0
   1890  f9ba		       20 77 f8 	      JSR	PrintRightDecimalDigits
   1891  f9bd
   1892  f9bd		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1893  f9c0
   1894  f9c0				   DrawTimerRight
   1895  f9c0		       20 30 fa 	      JSR	Sleep8Lines
   1896  f9c3		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1897  f9c5		       85 07		      STA	COLUP1
   1898  f9c7		       a0 bd		      LDY	#TimeBcd0
   1899  f9c9		       20 77 f8 	      JSR	PrintRightDecimalDigits
   1900  f9cc
   1901  f9cc		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1902  f9cf				   DrawGlideTimeRight
   1903  f9cf		       20 30 fa 	      JSR	Sleep8Lines
   1904  f9d2		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   1905  f9d4		       85 07		      STA	COLUP1
   1906  f9d6		       a0 cd		      LDY	#GlideTimeBcd0
   1907  f9d8		       20 77 f8 	      JSR	PrintRightDecimalDigits
   1908  f9db		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1909  f9de
   1910  f9de				   DrawHitCountRight
   1911  f9de		       20 30 fa 	      JSR	Sleep8Lines
   1912  f9e1		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   1913  f9e3		       85 07		      STA	COLUP1
   1914  f9e5		       a0 cb		      LDY	#HitCountBcd0
   1915  f9e7		       20 77 f8 	      JSR	PrintRightDecimalDigits
   1916  f9ea		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1917  f9ed
   1918  f9ed				   DrawCheckpointCountRight
   1919  f9ed		       20 30 fa 	      JSR	Sleep8Lines
   1920  f9f0		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   1921  f9f2		       85 07		      STA	COLUP1
   1922  f9f4		       a0 a4		      LDY	#CheckpointBcd0
   1923  f9f6		       20 77 f8 	      JSR	PrintRightDecimalDigits
   1924  f9f9		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1925  f9fc
   1926  f9fc				   DrawVersionRight
   1927  f9fc		       20 30 fa 	      JSR	Sleep8Lines
   1928  f9ff		       a9 49		      LDA	#VERSION_COLOR
   1929  fa01		       85 07		      STA	COLUP1
   1930  fa03		       85 02		      STA	WSYNC
   1931  fa05		       a2 78		      LDX	#<VersionText
   1932  fa07		       20 8f f7 	      JSR	PrintStaticText
   1933  fa0a		       20 cf f8 	      JSR	DrawGameOverScoreLine
   1934  fa0d
   1935  fa0d				   FinalizeDrawGameOver
   1936  fa0d		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   1937  fa0f		       85 d5		      STA	ScoreFontColor
   1938  fa11		       20 27 fa 	      JSR	Sleep4Lines
   1939  fa14		       20 37 fa 	      JSR	Sleep32Lines
   1940  fa17		       20 37 fa 	      JSR	Sleep32Lines
   1941  fa1a		       4c ec f5 	      JMP	PrepareOverscan
   1942  fa1d
   1943  fa1d				   WaitForVblankEnd
   1944  fa1d		       ad 84 02 	      LDA	INTIM
   1945  fa20		       d0 fb		      BNE	WaitForVblankEnd
   1946  fa22		       85 02		      STA	WSYNC
   1947  fa24		       85 01		      STA	VBLANK
   1948  fa26		       60		      RTS
   1949  fa27
   1950  fa27				   Sleep4Lines
   1951  fa27		       85 02		      STA	WSYNC
   1952  fa29		       85 02		      STA	WSYNC
   1953  fa2b		       85 02		      STA	WSYNC
   1954  fa2d		       85 02		      STA	WSYNC
   1955  fa2f		       60		      RTS
   1956  fa30
   1957  fa30				   Sleep8Lines
   1958  fa30		       20 27 fa 	      JSR	Sleep4Lines
   1959  fa33		       20 27 fa 	      JSR	Sleep4Lines
   1960  fa36		       60		      RTS
   1961  fa37
   1962  fa37				   Sleep32Lines
   1963  fa37		       20 30 fa 	      JSR	Sleep8Lines
   1964  fa3a		       20 30 fa 	      JSR	Sleep8Lines
   1965  fa3d		       20 30 fa 	      JSR	Sleep8Lines
   1966  fa40		       20 30 fa 	      JSR	Sleep8Lines
   1967  fa43		       60		      RTS
   1968  fa44
   1969  fa44							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   1970  fc00					      org	$FC00
   1971  fc00				   QrCode1
   1972  fc00		       1f		      .byte.b	#%00011111
   1973  fc01		       10		      .byte.b	#%00010000
   1974  fc02		       17		      .byte.b	#%00010111
   1975  fc03		       17		      .byte.b	#%00010111
   1976  fc04		       17		      .byte.b	#%00010111
   1977  fc05		       10		      .byte.b	#%00010000
   1978  fc06		       1f		      .byte.b	#%00011111
   1979  fc07		       00		      .byte.b	#%00000000
   1980  fc08		       17		      .byte.b	#%00010111
   1981  fc09		       10		      .byte.b	#%00010000
   1982  fc0a		       1d		      .byte.b	#%00011101
   1983  fc0b		       16		      .byte.b	#%00010110
   1984  fc0c		       03		      .byte.b	#%00000011
   1985  fc0d		       19		      .byte.b	#%00011001
   1986  fc0e		       13		      .byte.b	#%00010011
   1987  fc0f		       1c		      .byte.b	#%00011100
   1988  fc10		       0b		      .byte.b	#%00001011
   1989  fc11		       00		      .byte.b	#%00000000
   1990  fc12		       1f		      .byte.b	#%00011111
   1991  fc13		       10		      .byte.b	#%00010000
   1992  fc14		       17		      .byte.b	#%00010111
   1993  fc15		       17		      .byte.b	#%00010111
   1994  fc16		       17		      .byte.b	#%00010111
   1995  fc17		       10		      .byte.b	#%00010000
   1996  fc18		       1f		      .byte.b	#%00011111
   1997  fc19
   1998  fc19				   QrCode2
   1999  fc19		       c3		      .byte.b	#%11000011
   2000  fc1a		       9a		      .byte.b	#%10011010
   2001  fc1b		       82		      .byte.b	#%10000010
   2002  fc1c		       da		      .byte.b	#%11011010
   2003  fc1d		       aa		      .byte.b	#%10101010
   2004  fc1e		       ca		      .byte.b	#%11001010
   2005  fc1f		       f3		      .byte.b	#%11110011
   2006  fc20		       78		      .byte.b	#%01111000
   2007  fc21		       df		      .byte.b	#%11011111
   2008  fc22		       fc		      .byte.b	#%11111100
   2009  fc23		       c7		      .byte.b	#%11000111
   2010  fc24		       98		      .byte.b	#%10011000
   2011  fc25		       23		      .byte.b	#%00100011
   2012  fc26		       b9		      .byte.b	#%10111001
   2013  fc27		       d2		      .byte.b	#%11010010
   2014  fc28		       30		      .byte.b	#%00110000
   2015  fc29		       eb		      .byte.b	#%11101011
   2016  fc2a		       28		      .byte.b	#%00101000
   2017  fc2b		       ab		      .byte.b	#%10101011
   2018  fc2c		       72		      .byte.b	#%01110010
   2019  fc2d		       fa		      .byte.b	#%11111010
   2020  fc2e		       7a		      .byte.b	#%01111010
   2021  fc2f		       32		      .byte.b	#%00110010
   2022  fc30		       3a		      .byte.b	#%00111010
   2023  fc31		       63		      .byte.b	#%01100011
   2024  fc32
   2025  fc32				   QrCode3
   2026  fc32		       98		      .byte.b	#%10011000
   2027  fc33		       c3		      .byte.b	#%11000011
   2028  fc34		       39		      .byte.b	#%00111001
   2029  fc35		       34		      .byte.b	#%00110100
   2030  fc36		       ff		      .byte.b	#%11111111
   2031  fc37		       71		      .byte.b	#%01110001
   2032  fc38		       d5		      .byte.b	#%11010101
   2033  fc39		       d1		      .byte.b	#%11010001
   2034  fc3a		       5f		      .byte.b	#%01011111
   2035  fc3b		       26		      .byte.b	#%00100110
   2036  fc3c		       2d		      .byte.b	#%00101101
   2037  fc3d		       e9		      .byte.b	#%11101001
   2038  fc3e		       d6		      .byte.b	#%11010110
   2039  fc3f		       26		      .byte.b	#%00100110
   2040  fc40		       ba		      .byte.b	#%10111010
   2041  fc41		       03		      .byte.b	#%00000011
   2042  fc42		       dd		      .byte.b	#%11011101
   2043  fc43		       e0		      .byte.b	#%11100000
   2044  fc44		       57		      .byte.b	#%01010111
   2045  fc45		       14		      .byte.b	#%00010100
   2046  fc46		       35		      .byte.b	#%00110101
   2047  fc47		       e5		      .byte.b	#%11100101
   2048  fc48		       b5		      .byte.b	#%10110101
   2049  fc49		       d4		      .byte.b	#%11010100
   2050  fc4a		       97		      .byte.b	#%10010111
   2051  fc4b
   2052  fc4b				   QrCode4
   2053  fc4b		       09		      .byte.b	#%00001001
   2054  fc4c		       0e		      .byte.b	#%00001110
   2055  fc4d		       0f		      .byte.b	#%00001111
   2056  fc4e		       0c		      .byte.b	#%00001100
   2057  fc4f		       0c		      .byte.b	#%00001100
   2058  fc50		       08		      .byte.b	#%00001000
   2059  fc51		       08		      .byte.b	#%00001000
   2060  fc52		       06		      .byte.b	#%00000110
   2061  fc53		       06		      .byte.b	#%00000110
   2062  fc54		       0b		      .byte.b	#%00001011
   2063  fc55		       0f		      .byte.b	#%00001111
   2064  fc56		       04		      .byte.b	#%00000100
   2065  fc57		       08		      .byte.b	#%00001000
   2066  fc58		       0f		      .byte.b	#%00001111
   2067  fc59		       09		      .byte.b	#%00001001
   2068  fc5a		       07		      .byte.b	#%00000111
   2069  fc5b		       05		      .byte.b	#%00000101
   2070  fc5c		       00		      .byte.b	#%00000000
   2071  fc5d		       0f		      .byte.b	#%00001111
   2072  fc5e		       08		      .byte.b	#%00001000
   2073  fc5f		       0b		      .byte.b	#%00001011
   2074  fc60		       0b		      .byte.b	#%00001011
   2075  fc61		       0b		      .byte.b	#%00001011
   2076  fc62		       08		      .byte.b	#%00001000
   2077  fc63		       0f		      .byte.b	#%00001111
   2078  fc64
   2079  fc64							; Moved here because of rom space.
   2080  fc64							; The only SBR in constants space
   2081  fc64				   DrawQrCode
   2082  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2083  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2084  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2085  fc6a		       85 0a		      STA	CTRLPF
   2086  fc6c		       20 04 f7 	      JSR	ClearAll	; To be 100 sure!
   2087  fc6f		       ad 82 02 	      LDA	SWCHB
   2088  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2089  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2090  fc76		       86 09		      STX	COLUBK
   2091  fc78		       84 08		      STY	COLUPF
   2092  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2093  fc7d				   StoreReversedQrCode
   2094  fc7d		       86 08		      STX	COLUPF
   2095  fc7f		       84 09		      STY	COLUBK
   2096  fc81
   2097  fc81				   ContinueQrCode
   2098  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2099  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2100  fc85		       20 1d fa 	      JSR	WaitForVblankEnd
   2101  fc88		       20 30 fa 	      JSR	Sleep8Lines
   2102  fc8b		       20 30 fa 	      JSR	Sleep8Lines
   2103  fc8e		       20 30 fa 	      JSR	Sleep8Lines
   2104  fc91
   2105  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2106  fc91		       85 02		      STA	WSYNC
   2107  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2108  fc96		       85 0e		      STA	PF1	;3
   2109  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2110  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2112  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2113  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2114  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2115  fcb3		       85 0e		      STA	PF1	;3
   2116  fcb5
   2117  fcb5		       ca		      DEX		;2
   2118  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2119  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2120  fcba		       88		      DEY		;2
   2121  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2122  fcbd
   2123  fcbd				   EndQrCodeLoop
   2124  fcbd		       85 02		      STA	WSYNC	;
   2125  fcbf		       a9 00		      LDA	#0
   2126  fcc1		       85 0e		      STA	PF1	;3
   2127  fcc3		       85 0f		      STA	PF2	;3
   2128  fcc5
   2129  fcc5		       20 37 fa 	      JSR	Sleep32Lines
   2130  fcc8		       4c ec f5 	      JMP	PrepareOverscan
   2131  fccb
   2132  fd00					      org	$FD00
   2133  fd00				   Font
   2134  fd00				   C0
   2135  fd00		       e7		      .byte.b	#%11100111	;
   2136  fd01		       a5		      .byte.b	#%10100101	; 
   2137  fd02		       a5		      .byte.b	#%10100101	; 
   2138  fd03		       a5		      .byte.b	#%10100101	; 
   2139  fd04		       e7		      .byte.b	#%11100111	;	
   2140  fd05				   C1
   2141  fd05		       e7		      .byte.b	#%11100111	;
   2142  fd06		       42		      .byte.b	#%01000010	; 
   2143  fd07		       42		      .byte.b	#%01000010	; 
   2144  fd08		       42		      .byte.b	#%01000010	; 
   2145  fd09		       66		      .byte.b	#%01100110	;
   2146  fd0a				   C2
   2147  fd0a		       e7		      .byte.b	#%11100111	;
   2148  fd0b		       24		      .byte.b	#%00100100	; 
   2149  fd0c		       e7		      .byte.b	#%11100111	; 
   2150  fd0d		       81		      .byte.b	#%10000001	; 
   2151  fd0e		       e7		      .byte.b	#%11100111	;
   2152  fd0f				   C3
   2153  fd0f		       e7		      .byte.b	#%11100111	;
   2154  fd10		       81		      .byte.b	#%10000001	; 
   2155  fd11		       e7		      .byte.b	#%11100111	; 
   2156  fd12		       81		      .byte.b	#%10000001	; 
   2157  fd13		       e7		      .byte.b	#%11100111	;
   2158  fd14				   C4
   2159  fd14		       81		      .byte.b	#%10000001	;
   2160  fd15		       81		      .byte.b	#%10000001	; 
   2161  fd16		       e7		      .byte.b	#%11100111	; 
   2162  fd17		       a5		      .byte.b	#%10100101	; 
   2163  fd18		       a5		      .byte.b	#%10100101	;
   2164  fd19				   C5
   2165  fd19		       e7		      .byte.b	#%11100111	;
   2166  fd1a		       81		      .byte.b	#%10000001	; 
   2167  fd1b		       e7		      .byte.b	#%11100111	; 
   2168  fd1c		       24		      .byte.b	#%00100100	; 
   2169  fd1d		       e7		      .byte.b	#%11100111	;
   2170  fd1e				   C6
   2171  fd1e		       e7		      .byte.b	#%11100111	;
   2172  fd1f		       a5		      .byte.b	#%10100101	; 
   2173  fd20		       e7		      .byte.b	#%11100111	; 
   2174  fd21		       24		      .byte.b	#%00100100	; 
   2175  fd22		       e7		      .byte.b	#%11100111	;
   2176  fd23				   C7
   2177  fd23		       81		      .byte.b	#%10000001	;
   2178  fd24		       81		      .byte.b	#%10000001	; 
   2179  fd25		       81		      .byte.b	#%10000001	; 
   2180  fd26		       81		      .byte.b	#%10000001	; 
   2181  fd27		       e7		      .byte.b	#%11100111	;
   2182  fd28				   C8
   2183  fd28		       e7		      .byte.b	#%11100111	;
   2184  fd29		       a5		      .byte.b	#%10100101	; 
   2185  fd2a		       e7		      .byte.b	#%11100111	; 
   2186  fd2b		       a5		      .byte.b	#%10100101	; 
   2187  fd2c		       e7		      .byte.b	#%11100111	;
   2188  fd2d				   C9
   2189  fd2d		       e7		      .byte.b	#%11100111	;
   2190  fd2e		       81		      .byte.b	#%10000001	; 
   2191  fd2f		       e7		      .byte.b	#%11100111	; 
   2192  fd30		       a5		      .byte.b	#%10100101	; 
   2193  fd31		       e7		      .byte.b	#%11100111	;
   2194  fd32				   CA
   2195  fd32		       a5		      .byte.b	#%10100101	;
   2196  fd33		       a5		      .byte.b	#%10100101	; 
   2197  fd34		       e7		      .byte.b	#%11100111	; 
   2198  fd35		       a5		      .byte.b	#%10100101	; 
   2199  fd36		       e7		      .byte.b	#%11100111	;
   2200  fd37				   CB
   2201  fd37		       66		      .byte.b	#%01100110	;
   2202  fd38		       a5		      .byte.b	#%10100101	; 
   2203  fd39		       66		      .byte.b	#%01100110	; 
   2204  fd3a		       a5		      .byte.b	#%10100101	;
   2205  fd3b		       66		      .byte.b	#%01100110	;
   2206  fd3c				   CC
   2207  fd3c		       e7		      .byte.b	#%11100111	;
   2208  fd3d		       24		      .byte.b	#%00100100	; 
   2209  fd3e		       24		      .byte.b	#%00100100	; 
   2210  fd3f		       24		      .byte.b	#%00100100	;
   2211  fd40		       e7		      .byte.b	#%11100111	;
   2212  fd41
   2213  fd41				   CD
   2214  fd41		       66		      .byte.b	#%01100110	;
   2215  fd42		       a5		      .byte.b	#%10100101	; 
   2216  fd43		       a5		      .byte.b	#%10100101	; 
   2217  fd44		       a5		      .byte.b	#%10100101	;
   2218  fd45		       66		      .byte.b	#%01100110	;
   2219  fd46
   2220  fd46				   CE
   2221  fd46		       e7		      .byte.b	#%11100111	;
   2222  fd47		       24		      .byte.b	#%00100100	; 
   2223  fd48		       e7		      .byte.b	#%11100111	; 
   2224  fd49		       24		      .byte.b	#%00100100	; 
   2225  fd4a		       e7		      .byte.b	#%11100111	;
   2226  fd4b
   2227  fd4b				   CF
   2228  fd4b		       24		      .byte.b	#%00100100	;
   2229  fd4c		       24		      .byte.b	#%00100100	; 
   2230  fd4d		       e7		      .byte.b	#%11100111	; 
   2231  fd4e		       24		      .byte.b	#%00100100	; 
   2232  fd4f		       e7		      .byte.b	#%11100111	;
   2233  fd50
   2234  fd50				   CG
   2235  fd50		       c3		      .byte.b	#%11000011	;
   2236  fd51		       a5		      .byte.b	#%10100101	; 
   2237  fd52		       a5		      .byte.b	#%10100101	; 
   2238  fd53		       24		      .byte.b	#%00100100	; 
   2239  fd54		       c3		      .byte.b	#%11000011	;	
   2240  fd55
   2241  fd55				   CH
   2242  fd55		       a5		      .byte.b	#%10100101	;
   2243  fd56		       a5		      .byte.b	#%10100101	; 
   2244  fd57		       e7		      .byte.b	#%11100111	; 
   2245  fd58		       a5		      .byte.b	#%10100101	; 
   2246  fd59		       a5		      .byte.b	#%10100101	;
   2247  fd5a
   2248  fd5a				   CK
   2249  fd5a		       a5		      .byte.b	#%10100101	;
   2250  fd5b		       a5		      .byte.b	#%10100101	; 
   2251  fd5c		       66		      .byte.b	#%01100110	; 
   2252  fd5d		       a5		      .byte.b	#%10100101	; 
   2253  fd5e		       a5		      .byte.b	#%10100101	;
   2254  fd5f
   2255  fd5f				   CL
   2256  fd5f		       e7		      .byte.b	#%11100111	;
   2257  fd60		       24		      .byte.b	#%00100100	; 
   2258  fd61		       24		      .byte.b	#%00100100	; 
   2259  fd62		       24		      .byte.b	#%00100100	; 
   2260  fd63		       24		      .byte.b	#%00100100	;
   2261  fd64
   2262  fd64				   CI
   2263  fd64		       42		      .byte.b	#%01000010	;
   2264  fd65		       42		      .byte.b	#%01000010	; 
   2265  fd66		       42		      .byte.b	#%01000010	; 
   2266  fd67		       42		      .byte.b	#%01000010	; 
   2267  fd68		       42		      .byte.b	#%01000010	;
   2268  fd69
   2269  fd69				   CM
   2270  fd69		       a5		      .byte.b	#%10100101	;
   2271  fd6a		       a5		      .byte.b	#%10100101	; 
   2272  fd6b		       a5		      .byte.b	#%10100101	; 
   2273  fd6c		       e7		      .byte.b	#%11100111	; 
   2274  fd6d		       a5		      .byte.b	#%10100101	;
   2275  fd6e
   2276  fd6e				   CN
   2277  fd6e		       a5		      .byte.b	#%10100101	;
   2278  fd6f		       a5		      .byte.b	#%10100101	; 
   2279  fd70		       a5		      .byte.b	#%10100101	; 
   2280  fd71		       a5		      .byte.b	#%10100101	; 
   2281  fd72		       66		      .byte.b	#%01100110	;	
   2282  fd73
   2283  fd73
   2284  fd73				   CO
   2285  fd73		       42		      .byte.b	#%01000010	;
   2286  fd74		       a5		      .byte.b	#%10100101	; 
   2287  fd75		       a5		      .byte.b	#%10100101	; 
   2288  fd76		       a5		      .byte.b	#%10100101	; 
   2289  fd77		       42		      .byte.b	#%01000010	;	
   2290  fd78
   2291  fd78				   CP
   2292  fd78		       24		      .byte.b	#%00100100	;
   2293  fd79		       24		      .byte.b	#%00100100	; 
   2294  fd7a		       e7		      .byte.b	#%11100111	; 
   2295  fd7b		       a5		      .byte.b	#%10100101	; 
   2296  fd7c		       e7		      .byte.b	#%11100111	;
   2297  fd7d
   2298  fd7d				   CR
   2299  fd7d		       a5		      .byte.b	#%10100101	;
   2300  fd7e		       a5		      .byte.b	#%10100101	; 
   2301  fd7f		       66		      .byte.b	#%01100110	; 
   2302  fd80		       a5		      .byte.b	#%10100101	; 
   2303  fd81		       66		      .byte.b	#%01100110	;
   2304  fd82
   2305  fd82				   CS
   2306  fd82		       66		      .byte.b	#%01100110	;
   2307  fd83		       81		      .byte.b	#%10000001	; 
   2308  fd84		       42		      .byte.b	#%01000010	; 
   2309  fd85		       24		      .byte.b	#%00100100	; 
   2310  fd86		       c3		      .byte.b	#%11000011	;
   2311  fd87
   2312  fd87				   CT
   2313  fd87		       42		      .byte.b	#%01000010	;
   2314  fd88		       42		      .byte.b	#%01000010	; 
   2315  fd89		       42		      .byte.b	#%01000010	; 
   2316  fd8a		       42		      .byte.b	#%01000010	; 
   2317  fd8b		       e7		      .byte.b	#%11100111	;
   2318  fd8c
   2319  fd8c				   CV
   2320  fd8c		       42		      .byte.b	#%01000010	;
   2321  fd8d		       a5		      .byte.b	#%10100101	; 
   2322  fd8e		       a5		      .byte.b	#%10100101	; 
   2323  fd8f		       a5		      .byte.b	#%10100101	; 
   2324  fd90		       a5		      .byte.b	#%10100101	;	
   2325  fd91
   2326  fd91				   CY
   2327  fd91		       42		      .byte.b	#%01000010	;
   2328  fd92		       42		      .byte.b	#%01000010	; 
   2329  fd93		       42		      .byte.b	#%01000010	; 
   2330  fd94		       a5		      .byte.b	#%10100101	; 
   2331  fd95		       a5		      .byte.b	#%10100101	;
   2332  fd96
   2333  fd96				   CW
   2334  fd96		       a5		      .byte.b	#%10100101	;
   2335  fd97		       e7		      .byte.b	#%11100111	; 
   2336  fd98		       a5		      .byte.b	#%10100101	; 
   2337  fd99		       a5		      .byte.b	#%10100101	; 
   2338  fd9a		       a5		      .byte.b	#%10100101	;
   2339  fd9b
   2340  fd9b				   CZ
   2341  fd9b		       e7		      .byte.b	#%11100111	;
   2342  fd9c		       24		      .byte.b	#%00100100	; 
   2343  fd9d		       42		      .byte.b	#%01000010	; 
   2344  fd9e		       81		      .byte.b	#%10000001	; 
   2345  fd9f		       e7		      .byte.b	#%11100111	;
   2346  fda0
   2347  fda0				   Pipe
   2348  fda0		       42		      .byte.b	#%01000010	;
   2349  fda1		       00		      .byte.b	#%00000000	; 
   2350  fda2		       42		      .byte.b	#%01000010	; 
   2351  fda3		       00		      .byte.b	#%00000000	; 
   2352  fda4		       42		      .byte.b	#%01000010	;
   2353  fda5
   2354  fda5				   Exclamation
   2355  fda5		       42		      .byte.b	#%01000010	;
   2356  fda6		       00		      .byte.b	#%00000000	; 
   2357  fda7		       42		      .byte.b	#%01000010	; 
   2358  fda8		       42		      .byte.b	#%01000010	; 
   2359  fda9		       42		      .byte.b	#%01000010	;
   2360  fdaa
   2361  fdaa				   Dot
   2362  fdaa		       42		      .byte.b	#%01000010	;
   2363  fdab		       42		      .byte.b	#%01000010	; 
   2364  fdac		       00		      .byte.b	#%00000000	; 
   2365  fdad		       00		      .byte.b	#%00000000	; 
   2366  fdae		       00		      .byte.b	#%00000000	;
   2367  fdaf
   2368  fdaf				   Colon
   2369  fdaf		       42		      .byte.b	#%01000010	;
   2370  fdb0		       42		      .byte.b	#%01000010	; 
   2371  fdb1		       00		      .byte.b	#%00000000	; 
   2372  fdb2		       42		      .byte.b	#%01000010	; 
   2373  fdb3		       42		      .byte.b	#%01000010	;
   2374  fdb4
   2375  fdb4				   Triangle
   2376  fdb4		       81		      .byte.b	#%10000001	;
   2377  fdb5		       c3		      .byte.b	#%11000011	; 
   2378  fdb6		       e7		      .byte.b	#%11100111	; 
   2379  fdb7		       c3		      .byte.b	#%11000011	; 
   2380  fdb8		       81		      .byte.b	#%10000001	;
   2381  fdb9
   2382  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2383  fdb9		       00		      .byte.b	#0	;
   2384  fdba		       00		      .byte.b	#0	;
   2385  fdbb		       00		      .byte.b	#0	;
   2386  fdbc		       00		      .byte.b	#0	;
   2387  fdbd		       00		      .byte.b	#0	;
   2388  fdbe
   2389  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2390  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2391  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2392  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2393  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2394  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2395  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2396  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2397  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2398  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2399  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2400  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2401  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2402  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2403  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2404  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2405  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2406  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2407  fdcf
   2408  fdcf				   EngineSoundType
   2409  fdcf		       02		      .byte.b	#2
   2410  fdd0		       02		      .byte.b	#2
   2411  fdd1		       0e		      .byte.b	#14
   2412  fdd2		       06		      .byte.b	#6
   2413  fdd3		       06		      .byte.b	#6
   2414  fdd4		       0e		      .byte.b	#14
   2415  fdd5
   2416  fdd5				   EngineBaseFrequence
   2417  fdd5		       1f		      .byte.b	#31
   2418  fdd6		       15		      .byte.b	#21
   2419  fdd7		       14		      .byte.b	#20
   2420  fdd8		       1f		      .byte.b	#31
   2421  fdd9		       16		      .byte.b	#22
   2422  fdda		       03		      .byte.b	#3
   2423  fddb
   2424  fddb				   TachometerSizeLookup1
   2425  fddb		       1f		      .byte.b	#%00011111
   2426  fddc		       3f		      .byte.b	#%00111111
   2427  fddd		       7f		      .byte.b	#%01111111
   2428  fdde		       ff		      .byte.b	#%11111111
   2429  fddf		       ff		      .byte.b	#%11111111
   2430  fde0		       ff		      .byte.b	#%11111111
   2431  fde1		       ff		      .byte.b	#%11111111
   2432  fde2		       ff		      .byte.b	#%11111111
   2433  fde3
   2434  fde3				   TachometerSizeLookup2
   2435  fde3		       00		      .byte.b	#%00000000
   2436  fde4		       00		      .byte.b	#%00000000
   2437  fde5		       00		      .byte.b	#%00000000
   2438  fde6		       00		      .byte.b	#%00000000
   2439  fde7		       80		      .byte.b	#%10000000
   2440  fde8		       c0		      .byte.b	#%11000000
   2441  fde9		       e0		      .byte.b	#%11100000
   2442  fdea		       f0		      .byte.b	#%11110000
   2443  fdeb
   2444  fdeb				   TachometerGearLookup
   2445  fdeb		       01		      .byte.b	#%00000001
   2446  fdec		       02		      .byte.b	#%00000010
   2447  fded		       04		      .byte.b	#%00000100
   2448  fdee		       08		      .byte.b	#%00001000
   2449  fdef		       10		      .byte.b	#%00010000
   2450  fdf0		       30		      .byte.b	#%00110000
   2451  fdf1
   2452  fe00					      org	$FE00
   2453  fe00				   AesTable
   2454  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2455  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2456  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2457  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2458  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2459  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2460  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2461  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2462  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2463  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2464  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2465  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2466  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2467  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2468  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2469  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2470  ff00
   2471  ff00							; From FF00 to FFFB (122 bytes) to use here
   2472  ff00
   2473  ff00				   StaticText		; All static text must be on the same MSB block. 
   2474  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2475  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2476  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2477  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2478  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2479  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2480  ff05
   2481  ff05				   HellwayLeftText
   2482  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2483  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2484  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2485  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2486  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2487  ff0a
   2488  ff0a				   HellwayRightText
   2489  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2490  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2491  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2492  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2493  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2494  ff0f
   2495  ff0f				   OpbText
   2496  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2497  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2498  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2499  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2500  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2501  ff14
   2502  ff14				   YearText
   2503  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2504  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2505  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2506  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2507  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2508  ff19
   2509  ff19				   GameText
   2510  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2511  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2512  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2513  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2514  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2515  ff1e
   2516  ff1e				   OverText
   2517  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2518  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2519  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2520  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2521  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2522  ff23				   GoText
   2523  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2524  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2525  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2526  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2527  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2528  ff28
   2529  ff28				   ZeldaTextLeft
   2530  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2531  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2532  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2533  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2534  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2535  ff2d
   2536  ff2d				   ZeldaTextRight
   2537  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2538  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2539  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2540  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2541  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2542  ff32
   2543  ff32				   ZeldaDateLeft
   2544  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2545  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2546  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2547  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2548  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2549  ff37
   2550  ff37				   ZeldaDateRight
   2551  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2552  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2553  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2554  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2555  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2556  ff3c
   2557  ff3c				   PolvinhosTextLeft
   2558  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2559  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2560  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2561  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2562  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2563  ff41
   2564  ff41				   PolvinhosTextRight
   2565  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2566  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2567  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2568  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2569  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2570  ff46
   2571  ff46				   PolvinhosDateLeft
   2572  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2573  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2574  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2575  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2576  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2577  ff4b
   2578  ff4b				   PolvinhosDateRight
   2579  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2580  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2581  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2582  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2583  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2584  ff50
   2585  ff50				   IvonneTextLeft
   2586  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2587  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2588  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2589  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2590  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2591  ff55
   2592  ff55				   IvonneTextRight
   2593  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2594  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2595  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2596  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2597  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2598  ff5a
   2599  ff5a				   IvonneDateLeft
   2600  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2601  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2602  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2603  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2604  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2605  ff5f
   2606  ff5f				   IvonneDateRight
   2607  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2608  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2609  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2610  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2611  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2612  ff64
   2613  ff64				   PaperArtTextLeft
   2614  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2615  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2616  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2617  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2618  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2619  ff69
   2620  ff69				   PaperArtTextRight
   2621  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2622  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2623  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2624  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2625  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2626  ff6e
   2627  ff6e				   LeonardoTextLeft
   2628  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2629  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2630  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2631  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2632  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2633  ff73
   2634  ff73				   LeonardoTextRight
   2635  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2636  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2637  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2638  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2639  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2640  ff78
   2641  ff78				   VersionText
   2642  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2643  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2644  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2645  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2646  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2647  ff7d
   2648  ff7d
   2649  ff7d				   EndStaticText
   2650  ff7d
   2651  ff7d				   CarSprite0		; Upside down, Original Car
   2652  ff7d		       00 00 00 00*	      ds	7
   2653  ff84		       7e		      .byte.b	#%01111110
   2654  ff85		       24		      .byte.b	#%00100100
   2655  ff86		       bd		      .byte.b	#%10111101
   2656  ff87		       3c		      .byte.b	#%00111100
   2657  ff88		       bd		      .byte.b	#%10111101
   2658  ff89		       3c		      .byte.b	#%00111100
   2659  ff8a
   2660  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2661  ff8a		       00 00 00 00*	      ds	7
   2662  ff91		       bd		      .byte.b	#%10111101
   2663  ff92		       7e		      .byte.b	#%01111110
   2664  ff93		       5a		      .byte.b	#%01011010
   2665  ff94		       66		      .byte.b	#%01100110
   2666  ff95		       bd		      .byte.b	#%10111101
   2667  ff96		       3c		      .byte.b	#%00111100
   2668  ff97
   2669  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2670  ff97		       00 00 00 00*	      ds	7
   2671  ff9e		       7e		      .byte.b	#%01111110
   2672  ff9f		       a5		      .byte.b	#%10100101
   2673  ffa0		       42		      .byte.b	#%01000010
   2674  ffa1		       42		      .byte.b	#%01000010
   2675  ffa2		       bd		      .byte.b	#%10111101
   2676  ffa3		       7e		      .byte.b	#%01111110
   2677  ffa4
   2678  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2679  ffa4		       00 00 00 00*	      ds	7
   2680  ffab		       3c		      .byte.b	#%00111100
   2681  ffac		       db		      .byte.b	#%11011011
   2682  ffad		       db		      .byte.b	#%11011011
   2683  ffae		       3c		      .byte.b	#%00111100
   2684  ffaf		       5a		      .byte.b	#%01011010
   2685  ffb0		       3c		      .byte.b	#%00111100
   2686  ffb1
   2687  ffb1				   TrafficSpeeds
   2688  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2689  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2690  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2691  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2692  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2693  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2694  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2695  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2696  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2697  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2698  ffbb				   TrafficSpeedsHighDelta
   2699  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2700  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2701  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2702  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2703  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2704  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2705  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2706  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2707  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2708  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2709  ffc5
   2710  ffc5				   CarIdToSpriteAddressL
   2711  ffc5		       7d		      .byte.b	#<CarSprite0
   2712  ffc6		       8a		      .byte.b	#<CarSprite1
   2713  ffc7		       97		      .byte.b	#<CarSprite2
   2714  ffc8		       a4		      .byte.b	#<CarSprite3
   2715  ffc9
   2716  ffc9				   CarIdToSpriteAddressH
   2717  ffc9		       ff		      .byte.b	#>CarSprite0
   2718  ffca		       ff		      .byte.b	#>CarSprite1
   2719  ffcb		       ff		      .byte.b	#>CarSprite2
   2720  ffcc		       ff		      .byte.b	#>CarSprite3
   2721  ffcd
   2722  ffcd				   CarIdToAccelerateSpeed
   2723  ffcd		       80		      .byte.b	#128
   2724  ffce		       c0		      .byte.b	#192
   2725  ffcf		       60		      .byte.b	#96
   2726  ffd0		       c0		      .byte.b	#192
   2727  ffd1
   2728  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2729  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   2730  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   2731  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   2732  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   2733  ffd5
   2734  ffd5				   CarIdToMaxSpeedL
   2735  ffd5		       80		      .byte.b	#$80
   2736  ffd6		       00		      .byte.b	#$00	; One less gear
   2737  ffd7		       80		      .byte.b	#$80
   2738  ffd8		       80		      .byte.b	#$80
   2739  ffd9
   2740  ffd9				   CarIdToMaxGear
   2741  ffd9		       05		      .byte.b	#5
   2742  ffda		       04		      .byte.b	#4	; One less gear
   2743  ffdb		       05		      .byte.b	#5
   2744  ffdc		       05		      .byte.b	#5
   2745  ffdd
   2746  ffdd				   GearToBreakSpeedTable
   2747  ffdd		       09		      .byte.b	#(BREAK_SPEED - 1)
   2748  ffde		       09		      .byte.b	#(BREAK_SPEED - 1)
   2749  ffdf		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2750  ffe0		       0b		      .byte.b	#(BREAK_SPEED + 1)
   2751  ffe1		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2752  ffe2		       0c		      .byte.b	#(BREAK_SPEED + 2)
   2753  ffe3
   2754  ffe3				   TrafficColorTable
   2755  ffe3		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   2756  ffe4		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   2757  ffe5		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   2758  ffe6		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   2759  ffe7
   2760  ffe7				   TrafficChanceTable
   2761  ffe7		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   2762  ffe8		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   2763  ffe9		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   2764  ffea		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   2765  ffeb
   2766  ffeb				   TrafficTimeTable
   2767  ffeb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   2768  ffec		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   2769  ffed		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   2770  ffee		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   2771  ffef		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   2772  fff0
   2773  fff0
   2774  fffc					      org	$FFFC
   2775  fffc		       00 f0		      .word.w	BeforeStart
   2776  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
